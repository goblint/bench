extern void abort(void);
void reach_error() {abort();}
/* Generated by CIL v. 1.5.1 */
/* print_CIL_Input is false */

#line 40 "/usr/lib/gcc/x86_64-linux-gnu/4.6/include/stdarg.h"
typedef __builtin_va_list __gnuc_va_list;
#line 102 "/usr/lib/gcc/x86_64-linux-gnu/4.6/include/stdarg.h"
typedef __gnuc_va_list va_list;
#line 11 "include/asm/posix_types_64.h"
typedef unsigned int __kernel_mode_t;
#line 14 "include/asm/posix_types_64.h"
typedef int __kernel_pid_t;
#line 16 "include/asm/posix_types_64.h"
typedef unsigned int __kernel_uid_t;
#line 17 "include/asm/posix_types_64.h"
typedef unsigned int __kernel_gid_t;
#line 18 "include/asm/posix_types_64.h"
typedef unsigned long __kernel_size_t;
#line 19 "include/asm/posix_types_64.h"
typedef long __kernel_ssize_t;
#line 21 "include/asm/posix_types_64.h"
typedef long __kernel_time_t;
#line 23 "include/asm/posix_types_64.h"
typedef long __kernel_clock_t;
#line 24 "include/asm/posix_types_64.h"
typedef int __kernel_timer_t;
#line 25 "include/asm/posix_types_64.h"
typedef int __kernel_clockid_t;
#line 32 "include/asm/posix_types_64.h"
typedef long long __kernel_loff_t;
#line 41 "include/asm/posix_types_64.h"
typedef __kernel_uid_t __kernel_uid32_t;
#line 42 "include/asm/posix_types_64.h"
typedef __kernel_gid_t __kernel_gid32_t;
#line 17 "include/asm-generic/int-ll64.h"
typedef signed char __s8;
#line 18 "include/asm-generic/int-ll64.h"
typedef unsigned char __u8;
#line 20 "include/asm-generic/int-ll64.h"
typedef short __s16;
#line 21 "include/asm-generic/int-ll64.h"
typedef unsigned short __u16;
#line 23 "include/asm-generic/int-ll64.h"
typedef int __s32;
#line 24 "include/asm-generic/int-ll64.h"
typedef unsigned int __u32;
#line 27 "include/asm-generic/int-ll64.h"
typedef long long __s64;
#line 28 "include/asm-generic/int-ll64.h"
typedef unsigned long long __u64;
#line 40 "include/asm-generic/int-ll64.h"
typedef signed char s8;
#line 41 "include/asm-generic/int-ll64.h"
typedef unsigned char u8;
#line 44 "include/asm-generic/int-ll64.h"
typedef unsigned short u16;
#line 47 "include/asm-generic/int-ll64.h"
typedef unsigned int u32;
#line 49 "include/asm-generic/int-ll64.h"
typedef long long s64;
#line 50 "include/asm-generic/int-ll64.h"
typedef unsigned long long u64;
#line 8 "include/asm/types.h"
typedef unsigned short umode_t;
#line 28 "include/asm/types.h"
typedef u64 dma_addr_t;
#line 16 "include/linux/types.h"
typedef __u32 __kernel_dev_t;
#line 19 "include/linux/types.h"
typedef __kernel_dev_t dev_t;
#line 21 "include/linux/types.h"
typedef __kernel_mode_t mode_t;
#line 24 "include/linux/types.h"
typedef __kernel_pid_t pid_t;
#line 28 "include/linux/types.h"
typedef __kernel_timer_t timer_t;
#line 29 "include/linux/types.h"
typedef __kernel_clockid_t clockid_t;
#line 33 "include/linux/types.h"
typedef _Bool bool;
#line 35 "include/linux/types.h"
typedef __kernel_uid32_t uid_t;
#line 36 "include/linux/types.h"
typedef __kernel_gid32_t gid_t;
#line 57 "include/linux/types.h"
typedef __kernel_loff_t loff_t;
#line 66 "include/linux/types.h"
typedef __kernel_size_t size_t;
#line 71 "include/linux/types.h"
typedef __kernel_ssize_t ssize_t;
#line 81 "include/linux/types.h"
typedef __kernel_time_t time_t;
#line 86 "include/linux/types.h"
typedef __kernel_clock_t clock_t;
#line 142 "include/linux/types.h"
typedef unsigned long sector_t;
#line 151 "include/linux/types.h"
typedef unsigned long blkcnt_t;
#line 180 "include/linux/types.h"
typedef __u16 __le16;
#line 192 "include/linux/types.h"
typedef unsigned int gfp_t;
#line 59 "include/asm/alternative.h"
struct module;
#line 10 "include/asm-generic/bug.h"
struct bug_entry {
   unsigned long bug_addr ;
   char const   *file ;
   unsigned short line ;
   unsigned short flags ;
};
#line 96 "include/linux/kernel.h"
struct completion;
#line 97
struct pt_regs;
#line 179
struct pid;
#line 12 "include/linux/thread_info.h"
struct timespec;
#line 13
struct compat_timespec;
#line 18 "include/linux/thread_info.h"
struct __anonstruct____missing_field_name_6 {
   unsigned long arg0 ;
   unsigned long arg1 ;
   unsigned long arg2 ;
   unsigned long arg3 ;
};
#line 18 "include/linux/thread_info.h"
struct __anonstruct_futex_7 {
   u32 *uaddr ;
   u32 val ;
   u32 flags ;
   u32 bitset ;
   u64 time ;
};
#line 18 "include/linux/thread_info.h"
struct __anonstruct_nanosleep_8 {
   clockid_t index ;
   struct timespec *rmtp ;
   struct compat_timespec *compat_rmtp ;
   u64 expires ;
};
#line 18 "include/linux/thread_info.h"
union __anonunion____missing_field_name_5 {
   struct __anonstruct____missing_field_name_6 __annonCompField1 ;
   struct __anonstruct_futex_7 futex ;
   struct __anonstruct_nanosleep_8 nanosleep ;
};
#line 18 "include/linux/thread_info.h"
struct restart_block {
   long (*fn)(struct restart_block * ) ;
   union __anonunion____missing_field_name_5 __annonCompField2 ;
};
#line 73 "include/asm/page_64.h"
typedef unsigned long pgdval_t;
#line 74 "include/asm/page_64.h"
typedef unsigned long pgprotval_t;
#line 77
struct page;
#line 72 "include/asm/page.h"
struct __anonstruct_pgd_t_10 {
   pgdval_t pgd ;
};
#line 72 "include/asm/page.h"
typedef struct __anonstruct_pgd_t_10 pgd_t;
#line 73 "include/asm/page.h"
struct __anonstruct_pgprot_t_11 {
   pgprotval_t pgprot ;
};
#line 73 "include/asm/page.h"
typedef struct __anonstruct_pgprot_t_11 pgprot_t;
#line 22 "include/asm/desc_defs.h"
struct __anonstruct____missing_field_name_15 {
   unsigned int a ;
   unsigned int b ;
};
#line 22 "include/asm/desc_defs.h"
struct __anonstruct____missing_field_name_16 {
   u16 limit0 ;
   u16 base0 ;
   unsigned int base1 : 8 ;
   unsigned int type : 4 ;
   unsigned int s : 1 ;
   unsigned int dpl : 2 ;
   unsigned int p : 1 ;
   unsigned int limit : 4 ;
   unsigned int avl : 1 ;
   unsigned int l : 1 ;
   unsigned int d : 1 ;
   unsigned int g : 1 ;
   unsigned int base2 : 8 ;
};
#line 22 "include/asm/desc_defs.h"
union __anonunion____missing_field_name_14 {
   struct __anonstruct____missing_field_name_15 __annonCompField3 ;
   struct __anonstruct____missing_field_name_16 __annonCompField4 ;
};
#line 22 "include/asm/desc_defs.h"
struct desc_struct {
   union __anonunion____missing_field_name_14 __annonCompField5 ;
} __attribute__((__packed__)) ;
#line 92 "include/linux/cpumask.h"
struct __anonstruct_cpumask_t_19 {
   unsigned long bits[((8UL + 8UL * sizeof(long )) - 1UL) / (8UL * sizeof(long ))] ;
};
#line 92 "include/linux/cpumask.h"
typedef struct __anonstruct_cpumask_t_19 cpumask_t;
#line 37 "include/asm/paravirt.h"
struct thread_struct;
#line 40
struct mm_struct;
#line 11 "include/asm/pda.h"
struct task_struct;
#line 23 "include/asm/thread_info_64.h"
struct exec_domain;
#line 97 "include/asm/ptrace.h"
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};
#line 8 "include/asm/math_emu.h"
struct info {
   long ___orig_eip ;
   long ___ebx ;
   long ___ecx ;
   long ___edx ;
   long ___esi ;
   long ___edi ;
   long ___ebp ;
   long ___eax ;
   long ___ds ;
   long ___es ;
   long ___fs ;
   long ___orig_eax ;
   long ___eip ;
   long ___cs ;
   long ___eflags ;
   long ___esp ;
   long ___ss ;
   long ___vm86_es ;
   long ___vm86_ds ;
   long ___vm86_fs ;
   long ___vm86_gs ;
};
#line 88 "include/linux/personality.h"
struct map_segment;
#line 88 "include/linux/personality.h"
struct exec_domain {
   char const   *name ;
   void (*handler)(int  , struct pt_regs * ) ;
   unsigned char pers_low ;
   unsigned char pers_high ;
   unsigned long *signal_map ;
   unsigned long *signal_invmap ;
   struct map_segment *err_map ;
   struct map_segment *socktype_map ;
   struct map_segment *sockopt_map ;
   struct map_segment *af_map ;
   struct module *module ;
   struct exec_domain *next ;
};
#line 287 "include/asm/processor.h"
struct i387_fsave_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20] ;
   u32 status ;
};
#line 303 "include/asm/processor.h"
struct __anonstruct____missing_field_name_25 {
   u64 rip ;
   u64 rdp ;
};
#line 303 "include/asm/processor.h"
struct __anonstruct____missing_field_name_26 {
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
};
#line 303 "include/asm/processor.h"
union __anonunion____missing_field_name_24 {
   struct __anonstruct____missing_field_name_25 __annonCompField6 ;
   struct __anonstruct____missing_field_name_26 __annonCompField7 ;
};
#line 303 "include/asm/processor.h"
struct i387_fxsave_struct {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   union __anonunion____missing_field_name_24 __annonCompField8 ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32] ;
   u32 xmm_space[64] ;
   u32 padding[24] ;
} __attribute__((__aligned__(16))) ;
#line 333 "include/asm/processor.h"
struct i387_soft_struct {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20] ;
   u8 ftop ;
   u8 changed ;
   u8 lookahead ;
   u8 no_update ;
   u8 rm ;
   u8 alimit ;
   struct info *info ;
   u32 entry_eip ;
};
#line 353 "include/asm/processor.h"
union thread_xstate {
   struct i387_fsave_struct fsave ;
   struct i387_fxsave_struct fxsave ;
   struct i387_soft_struct soft ;
};
#line 366
struct kmem_cache;
#line 371 "include/asm/processor.h"
struct thread_struct {
   struct desc_struct tls_array[3] ;
   unsigned long sp0 ;
   unsigned long sp ;
   unsigned long usersp ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long ip ;
   unsigned long fs ;
   unsigned long gs ;
   unsigned long debugreg0 ;
   unsigned long debugreg1 ;
   unsigned long debugreg2 ;
   unsigned long debugreg3 ;
   unsigned long debugreg6 ;
   unsigned long debugreg7 ;
   unsigned long cr2 ;
   unsigned long trap_no ;
   unsigned long error_code ;
   union thread_xstate *xstate ;
   unsigned long *io_bitmap_ptr ;
   unsigned long iopl ;
   unsigned int io_bitmap_max ;
   unsigned long debugctlmsr ;
   unsigned long ds_area_msr ;
};
#line 604 "include/asm/processor.h"
struct __anonstruct_mm_segment_t_27 {
   unsigned long seg ;
};
#line 604 "include/asm/processor.h"
typedef struct __anonstruct_mm_segment_t_27 mm_segment_t;
#line 26 "include/asm/thread_info_64.h"
struct thread_info {
   struct task_struct *task ;
   struct exec_domain *exec_domain ;
   __u32 flags ;
   __u32 status ;
   __u32 cpu ;
   int preempt_count ;
   mm_segment_t addr_limit ;
   struct restart_block restart_block ;
   void *sysenter_return ;
};
#line 19 "include/linux/list.h"
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};
#line 690
struct hlist_node;
#line 690 "include/linux/list.h"
struct hlist_head {
   struct hlist_node *first ;
};
#line 694 "include/linux/list.h"
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};
#line 8 "include/asm/spinlock_types.h"
struct __anonstruct_raw_spinlock_t_28 {
   unsigned int slock ;
};
#line 8 "include/asm/spinlock_types.h"
typedef struct __anonstruct_raw_spinlock_t_28 raw_spinlock_t;
#line 14 "include/asm/spinlock_types.h"
struct __anonstruct_raw_rwlock_t_29 {
   unsigned int lock ;
};
#line 14 "include/asm/spinlock_types.h"
typedef struct __anonstruct_raw_rwlock_t_29 raw_rwlock_t;
#line 13 "include/linux/lockdep.h"
struct lockdep_map;
#line 5 "include/linux/stacktrace.h"
struct stack_trace {
   unsigned int nr_entries ;
   unsigned int max_entries ;
   unsigned long *entries ;
   int skip ;
};
#line 25 "include/linux/lockdep.h"
enum lock_usage_bit {
    LOCK_USED = 0,
    LOCK_USED_IN_HARDIRQ = 1,
    LOCK_USED_IN_SOFTIRQ = 2,
    LOCK_ENABLED_SOFTIRQS = 3,
    LOCK_ENABLED_HARDIRQS = 4,
    LOCK_USED_IN_HARDIRQ_READ = 5,
    LOCK_USED_IN_SOFTIRQ_READ = 6,
    LOCK_ENABLED_SOFTIRQS_READ = 7,
    LOCK_ENABLED_HARDIRQS_READ = 8,
    LOCK_USAGE_STATES = 9
} ;
#line 68 "include/linux/lockdep.h"
struct lockdep_subclass_key {
   char __one_byte ;
} __attribute__((__packed__)) ;
#line 72 "include/linux/lockdep.h"
struct lock_class_key {
   struct lockdep_subclass_key subkeys[8UL] ;
};
#line 79 "include/linux/lockdep.h"
struct lock_class {
   struct list_head hash_entry ;
   struct list_head lock_entry ;
   struct lockdep_subclass_key *key ;
   unsigned int subclass ;
   unsigned long usage_mask ;
   struct stack_trace usage_traces[LOCK_USAGE_STATES] ;
   struct list_head locks_after ;
   struct list_head locks_before ;
   unsigned int version ;
   unsigned long ops ;
   char const   *name ;
   int name_version ;
   unsigned long contention_point[4] ;
};
#line 161 "include/linux/lockdep.h"
struct lockdep_map {
   struct lock_class_key *key ;
   struct lock_class *class_cache ;
   char const   *name ;
   int cpu ;
};
#line 189 "include/linux/lockdep.h"
struct held_lock {
   u64 prev_chain_key ;
   struct lock_class *class ;
   unsigned long acquire_ip ;
   struct lockdep_map *instance ;
   u64 waittime_stamp ;
   u64 holdtime_stamp ;
   int irq_context ;
   int trylock ;
   int read ;
   int check ;
   int hardirqs_off ;
};
#line 20 "include/linux/spinlock_types.h"
struct __anonstruct_spinlock_t_30 {
   raw_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 20 "include/linux/spinlock_types.h"
typedef struct __anonstruct_spinlock_t_30 spinlock_t;
#line 36 "include/linux/spinlock_types.h"
struct __anonstruct_rwlock_t_31 {
   raw_rwlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 36 "include/linux/spinlock_types.h"
typedef struct __anonstruct_rwlock_t_31 rwlock_t;
#line 25 "include/asm/atomic_64.h"
struct __anonstruct_atomic_t_32 {
   int counter ;
};
#line 25 "include/asm/atomic_64.h"
typedef struct __anonstruct_atomic_t_32 atomic_t;
#line 202 "include/asm/atomic_64.h"
struct __anonstruct_atomic64_t_33 {
   long counter ;
};
#line 202 "include/asm/atomic_64.h"
typedef struct __anonstruct_atomic64_t_33 atomic64_t;
#line 23 "include/asm-generic/atomic.h"
typedef atomic64_t atomic_long_t;
#line 28 "include/linux/wait.h"
struct __wait_queue;
#line 28 "include/linux/wait.h"
typedef struct __wait_queue wait_queue_t;
#line 32 "include/linux/wait.h"
struct __wait_queue {
   unsigned int flags ;
   void *private ;
   int (*func)(wait_queue_t *wait , unsigned int mode , int sync , void *key ) ;
   struct list_head task_list ;
};
#line 50 "include/linux/wait.h"
struct __wait_queue_head {
   spinlock_t lock ;
   struct list_head task_list ;
};
#line 54 "include/linux/wait.h"
typedef struct __wait_queue_head wait_queue_head_t;
#line 92 "include/linux/nodemask.h"
struct __anonstruct_nodemask_t_35 {
   unsigned long bits[(((unsigned long )(1 << 6) + 8UL * sizeof(long )) - 1UL) / (8UL * sizeof(long ))] ;
};
#line 92 "include/linux/nodemask.h"
typedef struct __anonstruct_nodemask_t_35 nodemask_t;
#line 48 "include/linux/mutex.h"
struct mutex {
   atomic_t count ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct thread_info *owner ;
   char const   *name ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 67 "include/linux/mutex.h"
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   struct mutex *lock ;
   void *magic ;
};
#line 17 "include/linux/rwsem.h"
struct rw_semaphore;
#line 31 "include/linux/rwsem-spinlock.h"
struct rw_semaphore {
   __s32 activity ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct lockdep_map dep_map ;
};
#line 665 "include/linux/mmzone.h"
struct file;
#line 109 "include/linux/pm.h"
struct device;
#line 111 "include/linux/pm.h"
struct pm_message {
   int event ;
};
#line 111 "include/linux/pm.h"
typedef struct pm_message pm_message_t;
#line 181 "include/linux/pm.h"
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned int can_wakeup : 1 ;
   unsigned int should_wakeup : 1 ;
   bool sleeping : 1 ;
   struct list_head entry ;
};
#line 8 "include/linux/gfp.h"
struct vm_area_struct;
#line 13 "include/linux/time.h"
struct timespec {
   time_t tv_sec ;
   long tv_nsec ;
};
#line 46 "include/linux/ktime.h"
union ktime {
   s64 tv64 ;
};
#line 59 "include/linux/ktime.h"
typedef union ktime ktime_t;
#line 9 "include/linux/timer.h"
struct tvec_base;
#line 11 "include/linux/timer.h"
struct timer_list {
   struct list_head entry ;
   unsigned long expires ;
   void (*function)(unsigned long  ) ;
   unsigned long data ;
   struct tvec_base *base ;
   void *start_site ;
   char start_comm[16] ;
   int start_pid ;
};
#line 181
struct hrtimer;
#line 182
enum hrtimer_restart;
#line 16 "include/linux/workqueue.h"
struct work_struct;
#line 25 "include/linux/workqueue.h"
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct *work ) ;
   struct lockdep_map lockdep_map ;
};
#line 39 "include/linux/workqueue.h"
struct delayed_work {
   struct work_struct work ;
   struct timer_list timer ;
};
#line 20 "include/linux/sysfs.h"
struct kobject;
#line 27 "include/linux/sysfs.h"
struct attribute {
   char const   *name ;
   struct module *owner ;
   mode_t mode ;
};
#line 33 "include/linux/sysfs.h"
struct attribute_group {
   char const   *name ;
   mode_t (*is_visible)(struct kobject * , struct attribute * , int  ) ;
   struct attribute **attrs ;
};
#line 76 "include/linux/sysfs.h"
struct sysfs_ops {
   ssize_t (*show)(struct kobject * , struct attribute * , char * ) ;
   ssize_t (*store)(struct kobject * , struct attribute * , char const   * , size_t  ) ;
};
#line 21 "include/linux/kref.h"
struct kref {
   atomic_t refcount ;
};
#line 60 "include/linux/kobject.h"
struct kset;
#line 60
struct kobj_type;
#line 60
struct sysfs_dirent;
#line 60 "include/linux/kobject.h"
struct kobject {
   char const   *name ;
   struct kref kref ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct sysfs_dirent *sd ;
   unsigned int state_initialized : 1 ;
   unsigned int state_in_sysfs : 1 ;
   unsigned int state_add_uevent_sent : 1 ;
   unsigned int state_remove_uevent_sent : 1 ;
};
#line 105 "include/linux/kobject.h"
struct kobj_type {
   void (*release)(struct kobject *kobj ) ;
   struct sysfs_ops *sysfs_ops ;
   struct attribute **default_attrs ;
};
#line 111 "include/linux/kobject.h"
struct kobj_uevent_env {
   char *envp[32] ;
   int envp_idx ;
   char buf[2048] ;
   int buflen ;
};
#line 118 "include/linux/kobject.h"
struct kset_uevent_ops {
   int (*filter)(struct kset *kset , struct kobject *kobj ) ;
   char const   *(*name)(struct kset *kset , struct kobject *kobj ) ;
   int (*uevent)(struct kset *kset , struct kobject *kobj , struct kobj_uevent_env *env ) ;
};
#line 152 "include/linux/kobject.h"
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops *uevent_ops ;
};
#line 14 "include/linux/slub_def.h"
enum stat_item {
    ALLOC_FASTPATH = 0,
    ALLOC_SLOWPATH = 1,
    FREE_FASTPATH = 2,
    FREE_SLOWPATH = 3,
    FREE_FROZEN = 4,
    FREE_ADD_PARTIAL = 5,
    FREE_REMOVE_PARTIAL = 6,
    ALLOC_FROM_PARTIAL = 7,
    ALLOC_SLAB = 8,
    ALLOC_REFILL = 9,
    FREE_SLAB = 10,
    CPUSLAB_FLUSH = 11,
    DEACTIVATE_FULL = 12,
    DEACTIVATE_EMPTY = 13,
    DEACTIVATE_TO_HEAD = 14,
    DEACTIVATE_TO_TAIL = 15,
    DEACTIVATE_REMOTE_FREES = 16,
    ORDER_FALLBACK = 17,
    NR_SLUB_STAT_ITEMS = 18
} ;
#line 35 "include/linux/slub_def.h"
struct kmem_cache_cpu {
   void **freelist ;
   struct page *page ;
   int node ;
   unsigned int offset ;
   unsigned int objsize ;
   unsigned int stat[NR_SLUB_STAT_ITEMS] ;
};
#line 46 "include/linux/slub_def.h"
struct kmem_cache_node {
   spinlock_t list_lock ;
   unsigned long nr_partial ;
   struct list_head partial ;
   atomic_long_t nr_slabs ;
   atomic_long_t total_objects ;
   struct list_head full ;
};
#line 62 "include/linux/slub_def.h"
struct kmem_cache_order_objects {
   unsigned long x ;
};
#line 69 "include/linux/slub_def.h"
struct kmem_cache {
   unsigned long flags ;
   int size ;
   int objsize ;
   int offset ;
   struct kmem_cache_order_objects oo ;
   struct kmem_cache_node local_node ;
   struct kmem_cache_order_objects max ;
   struct kmem_cache_order_objects min ;
   gfp_t allocflags ;
   int refcount ;
   void (*ctor)(struct kmem_cache * , void * ) ;
   int inuse ;
   int align ;
   char const   *name ;
   struct list_head list ;
   struct kobject kobj ;
   int remote_node_defrag_ratio ;
   struct kmem_cache_node *node[1 << 6] ;
   struct kmem_cache_cpu *cpu_slab[8] ;
};
#line 62 "include/linux/stat.h"
struct kstat {
   u64 ino ;
   dev_t dev ;
   umode_t mode ;
   unsigned int nlink ;
   uid_t uid ;
   gid_t gid ;
   dev_t rdev ;
   loff_t size ;
   struct timespec atime ;
   struct timespec mtime ;
   struct timespec ctime ;
   unsigned long blksize ;
   unsigned long long blocks ;
};
#line 38 "include/linux/kmod.h"
struct key;
#line 27 "include/linux/elf.h"
typedef __u64 Elf64_Addr;
#line 28 "include/linux/elf.h"
typedef __u16 Elf64_Half;
#line 32 "include/linux/elf.h"
typedef __u32 Elf64_Word;
#line 33 "include/linux/elf.h"
typedef __u64 Elf64_Xword;
#line 181 "include/linux/elf.h"
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};
#line 181 "include/linux/elf.h"
typedef struct elf64_sym Elf64_Sym;
#line 29 "include/linux/moduleparam.h"
struct kernel_param;
#line 36
struct kparam_string;
#line 36
struct kparam_array;
#line 36 "include/linux/moduleparam.h"
union __anonunion____missing_field_name_93 {
   void *arg ;
   struct kparam_string  const  *str ;
   struct kparam_array  const  *arr ;
};
#line 36 "include/linux/moduleparam.h"
struct kernel_param {
   char const   *name ;
   unsigned int perm ;
   int (*set)(char const   *val , struct kernel_param *kp ) ;
   int (*get)(char *buffer , struct kernel_param *kp ) ;
   union __anonunion____missing_field_name_93 __annonCompField9 ;
};
#line 49 "include/linux/moduleparam.h"
struct kparam_string {
   unsigned int maxlen ;
   char *string ;
};
#line 55 "include/linux/moduleparam.h"
struct kparam_array {
   unsigned int max ;
   unsigned int *num ;
   int (*set)(char const   *val , struct kernel_param *kp ) ;
   int (*get)(char *buffer , struct kernel_param *kp ) ;
   unsigned int elemsize ;
   void *elem ;
};
#line 18 "include/linux/marker.h"
struct marker;
#line 32 "include/linux/marker.h"
typedef void marker_probe_func(void *probe_private , void *call_private , char const   *fmt ,
                               va_list *args );
#line 35 "include/linux/marker.h"
struct marker_probe_closure {
   marker_probe_func *func ;
   void *probe_private ;
};
#line 40 "include/linux/marker.h"
struct marker {
   char const   *name ;
   char const   *format ;
   char state ;
   char ptype ;
   void (*call)(struct marker  const  *mdata , void *call_private , char const   *fmt 
                , ...) ;
   struct marker_probe_closure single ;
   struct marker_probe_closure *multi ;
} __attribute__((__aligned__(8))) ;
#line 10 "include/asm/local.h"
struct __anonstruct_local_t_94 {
   atomic_long_t a ;
};
#line 10 "include/asm/local.h"
typedef struct __anonstruct_local_t_94 local_t;
#line 5 "include/asm/module.h"
struct mod_arch_specific {

};
#line 33 "include/linux/module.h"
struct kernel_symbol {
   unsigned long value ;
   char const   *name ;
};
#line 47 "include/linux/module.h"
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute * , struct module * , char * ) ;
   ssize_t (*store)(struct module_attribute * , struct module * , char const   * ,
                    size_t count ) ;
   void (*setup)(struct module * , char const   * ) ;
   int (*test)(struct module * ) ;
   void (*free)(struct module * ) ;
};
#line 57 "include/linux/module.h"
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
};
#line 69
struct exception_table_entry;
#line 220 "include/linux/module.h"
struct module_ref {
   local_t count ;
} __attribute__((__aligned__((1) <<  (7) ))) ;
#line 225
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2
} ;
#line 232
struct module_param_attrs;
#line 232
struct module_sect_attrs;
#line 232
struct module_notes_attrs;
#line 232 "include/linux/module.h"
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[64UL - sizeof(unsigned long )] ;
   struct module_kobject mkobj ;
   struct module_param_attrs *param_attrs ;
   struct module_attribute *modinfo_attrs ;
   char const   *version ;
   char const   *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol  const  *syms ;
   unsigned int num_syms ;
   unsigned long const   *crcs ;
   struct kernel_symbol  const  *gpl_syms ;
   unsigned int num_gpl_syms ;
   unsigned long const   *gpl_crcs ;
   struct kernel_symbol  const  *unused_syms ;
   unsigned int num_unused_syms ;
   unsigned long const   *unused_crcs ;
   struct kernel_symbol  const  *unused_gpl_syms ;
   unsigned int num_unused_gpl_syms ;
   unsigned long const   *unused_gpl_crcs ;
   struct kernel_symbol  const  *gpl_future_syms ;
   unsigned int num_gpl_future_syms ;
   unsigned long const   *gpl_future_crcs ;
   unsigned int num_exentries ;
   struct exception_table_entry  const  *extable ;
   int (*init)(void) ;
   void *module_init ;
   void *module_core ;
   unsigned long init_size ;
   unsigned long core_size ;
   unsigned long init_text_size ;
   unsigned long core_text_size ;
   void *unwind_info ;
   struct mod_arch_specific arch ;
   unsigned int taints ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   unsigned int num_bugs ;
   struct module_ref ref[8] ;
   struct list_head modules_which_use_me ;
   struct task_struct *waiter ;
   void (*exit)(void) ;
   Elf64_Sym *symtab ;
   unsigned long num_symtab ;
   char *strtab ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   void *percpu ;
   char *args ;
   struct marker *markers ;
   unsigned int num_markers ;
};
#line 559
struct device_driver;
#line 12 "include/linux/mod_devicetable.h"
typedef unsigned long kernel_ulong_t;
#line 98 "include/linux/mod_devicetable.h"
struct usb_device_id {
   __u16 match_flags ;
   __u16 idVendor ;
   __u16 idProduct ;
   __u16 bcdDevice_lo ;
   __u16 bcdDevice_hi ;
   __u8 bDeviceClass ;
   __u8 bDeviceSubClass ;
   __u8 bDeviceProtocol ;
   __u8 bInterfaceClass ;
   __u8 bInterfaceSubClass ;
   __u8 bInterfaceProtocol ;
   kernel_ulong_t driver_info ;
};
#line 292 "include/linux/mod_devicetable.h"
struct input_device_id {
   kernel_ulong_t flags ;
   __u16 bustype ;
   __u16 vendor ;
   __u16 product ;
   __u16 version ;
   kernel_ulong_t evbit[31 / 64 + 1] ;
   kernel_ulong_t keybit[511 / 64 + 1] ;
   kernel_ulong_t relbit[15 / 64 + 1] ;
   kernel_ulong_t absbit[63 / 64 + 1] ;
   kernel_ulong_t mscbit[7 / 64 + 1] ;
   kernel_ulong_t ledbit[15 / 64 + 1] ;
   kernel_ulong_t sndbit[7 / 64 + 1] ;
   kernel_ulong_t ffbit[127 / 64 + 1] ;
   kernel_ulong_t swbit[15 / 64 + 1] ;
   kernel_ulong_t driver_info ;
};
#line 211 "include/linux/usb/ch9.h"
struct usb_device_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __le16 bcdUSB ;
   __u8 bDeviceClass ;
   __u8 bDeviceSubClass ;
   __u8 bDeviceProtocol ;
   __u8 bMaxPacketSize0 ;
   __le16 idVendor ;
   __le16 idProduct ;
   __le16 bcdDevice ;
   __u8 iManufacturer ;
   __u8 iProduct ;
   __u8 iSerialNumber ;
   __u8 bNumConfigurations ;
} __attribute__((__packed__)) ;
#line 265 "include/linux/usb/ch9.h"
struct usb_config_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __le16 wTotalLength ;
   __u8 bNumInterfaces ;
   __u8 bConfigurationValue ;
   __u8 iConfiguration ;
   __u8 bmAttributes ;
   __u8 bMaxPower ;
} __attribute__((__packed__)) ;
#line 302 "include/linux/usb/ch9.h"
struct usb_interface_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __u8 bInterfaceNumber ;
   __u8 bAlternateSetting ;
   __u8 bNumEndpoints ;
   __u8 bInterfaceClass ;
   __u8 bInterfaceSubClass ;
   __u8 bInterfaceProtocol ;
   __u8 iInterface ;
} __attribute__((__packed__)) ;
#line 320 "include/linux/usb/ch9.h"
struct usb_endpoint_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __u8 bEndpointAddress ;
   __u8 bmAttributes ;
   __le16 wMaxPacketSize ;
   __u8 bInterval ;
   __u8 bRefresh ;
   __u8 bSynchAddress ;
} __attribute__((__packed__)) ;
#line 399 "include/linux/usb/ch9.h"
struct usb_interface_assoc_descriptor {
   __u8 bLength ;
   __u8 bDescriptorType ;
   __u8 bFirstInterface ;
   __u8 bInterfaceCount ;
   __u8 bFunctionClass ;
   __u8 bFunctionSubClass ;
   __u8 bFunctionProtocol ;
   __u8 iFunction ;
} __attribute__((__packed__)) ;
#line 567
enum usb_device_speed {
    USB_SPEED_UNKNOWN = 0,
    USB_SPEED_LOW = 1,
    USB_SPEED_FULL = 2,
    USB_SPEED_HIGH = 3,
    USB_SPEED_VARIABLE = 4
} ;
#line 574
enum usb_device_state {
    USB_STATE_NOTATTACHED = 0,
    USB_STATE_ATTACHED = 1,
    USB_STATE_POWERED = 2,
    USB_STATE_UNAUTHENTICATED = 3,
    USB_STATE_RECONNECTING = 4,
    USB_STATE_DEFAULT = 5,
    USB_STATE_ADDRESS = 6,
    USB_STATE_CONFIGURED = 7,
    USB_STATE_SUSPENDED = 8
} ;
#line 82 "include/linux/capability.h"
struct kernel_cap_struct {
   __u32 cap[2] ;
};
#line 82 "include/linux/capability.h"
typedef struct kernel_cap_struct kernel_cap_t;
#line 100 "include/linux/rbtree.h"
struct rb_node {
   unsigned long rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
} __attribute__((__aligned__(sizeof(long )))) ;
#line 110 "include/linux/rbtree.h"
struct rb_root {
   struct rb_node *rb_node ;
};
#line 14 "include/linux/prio_tree.h"
struct prio_tree_node;
#line 14 "include/linux/prio_tree.h"
struct raw_prio_tree_node {
   struct prio_tree_node *left ;
   struct prio_tree_node *right ;
   struct prio_tree_node *parent ;
};
#line 20 "include/linux/prio_tree.h"
struct prio_tree_node {
   struct prio_tree_node *left ;
   struct prio_tree_node *right ;
   struct prio_tree_node *parent ;
   unsigned long start ;
   unsigned long last ;
};
#line 28 "include/linux/prio_tree.h"
struct prio_tree_root {
   struct prio_tree_node *prio_tree_node ;
   unsigned short index_bits ;
   unsigned short raw ;
};
#line 13 "include/linux/completion.h"
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};
#line 13 "include/asm/mmu.h"
struct __anonstruct_mm_context_t_97 {
   void *ldt ;
   rwlock_t ldtlock ;
   int size ;
   struct mutex lock ;
   void *vdso ;
};
#line 13 "include/asm/mmu.h"
typedef struct __anonstruct_mm_context_t_97 mm_context_t;
#line 21 "include/linux/mm_types.h"
struct address_space;
#line 24 "include/linux/mm_types.h"
typedef atomic_long_t mm_counter_t;
#line 36 "include/linux/mm_types.h"
struct __anonstruct____missing_field_name_99 {
   u16 inuse ;
   u16 objects ;
};
#line 36 "include/linux/mm_types.h"
union __anonunion____missing_field_name_98 {
   atomic_t _mapcount ;
   struct __anonstruct____missing_field_name_99 __annonCompField10 ;
};
#line 36 "include/linux/mm_types.h"
struct __anonstruct____missing_field_name_101 {
   unsigned long private ;
   struct address_space *mapping ;
};
#line 36 "include/linux/mm_types.h"
union __anonunion____missing_field_name_100 {
   struct __anonstruct____missing_field_name_101 __annonCompField12 ;
   spinlock_t ptl ;
   struct kmem_cache *slab ;
   struct page *first_page ;
};
#line 36 "include/linux/mm_types.h"
union __anonunion____missing_field_name_102 {
   unsigned long index ;
   void *freelist ;
};
#line 36 "include/linux/mm_types.h"
struct page {
   unsigned long flags ;
   atomic_t _count ;
   union __anonunion____missing_field_name_98 __annonCompField11 ;
   union __anonunion____missing_field_name_100 __annonCompField13 ;
   union __anonunion____missing_field_name_102 __annonCompField14 ;
   struct list_head lru ;
   unsigned long page_cgroup ;
};
#line 105 "include/linux/mm_types.h"
struct __anonstruct_vm_set_104 {
   struct list_head list ;
   void *parent ;
   struct vm_area_struct *head ;
};
#line 105 "include/linux/mm_types.h"
union __anonunion_shared_103 {
   struct __anonstruct_vm_set_104 vm_set ;
   struct raw_prio_tree_node prio_tree_node ;
};
#line 105
struct anon_vma;
#line 105
struct vm_operations_struct;
#line 105
struct mempolicy;
#line 105 "include/linux/mm_types.h"
struct vm_area_struct {
   struct mm_struct *vm_mm ;
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   struct rb_node vm_rb ;
   union __anonunion_shared_103 shared ;
   struct list_head anon_vma_node ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   unsigned long vm_truncate_count ;
   struct mempolicy *vm_policy ;
};
#line 162
struct kioctx;
#line 162 "include/linux/mm_types.h"
struct mm_struct {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   struct vm_area_struct *mmap_cache ;
   unsigned long (*get_unmapped_area)(struct file *filp , unsigned long addr , unsigned long len ,
                                      unsigned long pgoff , unsigned long flags ) ;
   void (*unmap_area)(struct mm_struct *mm , unsigned long addr ) ;
   unsigned long mmap_base ;
   unsigned long task_size ;
   unsigned long cached_hole_size ;
   unsigned long free_area_cache ;
   pgd_t *pgd ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   int map_count ;
   int core_waiters ;
   struct rw_semaphore mmap_sem ;
   spinlock_t page_table_lock ;
   struct list_head mmlist ;
   mm_counter_t _file_rss ;
   mm_counter_t _anon_rss ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   unsigned long shared_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long reserved_vm ;
   unsigned long def_flags ;
   unsigned long nr_ptes ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[2 * ((2 + (14 + 2)) + 1)] ;
   cpumask_t cpu_vm_mask ;
   mm_context_t context ;
   unsigned int faultstamp ;
   unsigned int token_priority ;
   unsigned int last_interval ;
   unsigned long flags ;
   struct completion *core_startup_done ;
   struct completion core_done ;
   rwlock_t ioctx_list_lock ;
   struct kioctx *ioctx_list ;
   struct task_struct *owner ;
   struct file *exe_file ;
   unsigned long num_exe_file_vmas ;
};
#line 7 "include/asm-generic/cputime.h"
typedef unsigned long cputime_t;
#line 23 "include/linux/sem.h"
struct sem_undo;
#line 120 "include/linux/sem.h"
struct sem_undo {
   struct sem_undo *proc_next ;
   struct sem_undo *id_next ;
   int semid ;
   short *semadj ;
};
#line 130 "include/linux/sem.h"
struct sem_undo_list {
   atomic_t refcnt ;
   spinlock_t lock ;
   struct sem_undo *proc_list ;
};
#line 136 "include/linux/sem.h"
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};
#line 10 "include/asm/signal.h"
struct siginfo;
#line 30 "include/asm/signal.h"
struct __anonstruct_sigset_t_105 {
   unsigned long sig[64 / 64] ;
};
#line 30 "include/asm/signal.h"
typedef struct __anonstruct_sigset_t_105 sigset_t;
#line 17 "include/asm-generic/signal.h"
typedef void __signalfn_t(int  );
#line 18 "include/asm-generic/signal.h"
typedef __signalfn_t *__sighandler_t;
#line 20 "include/asm-generic/signal.h"
typedef void __restorefn_t(void);
#line 21 "include/asm-generic/signal.h"
typedef __restorefn_t *__sigrestore_t;
#line 162 "include/asm/signal.h"
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};
#line 169 "include/asm/signal.h"
struct k_sigaction {
   struct sigaction sa ;
};
#line 7 "include/asm-generic/siginfo.h"
union sigval {
   int sival_int ;
   void *sival_ptr ;
};
#line 7 "include/asm-generic/siginfo.h"
typedef union sigval sigval_t;
#line 40 "include/asm-generic/siginfo.h"
struct __anonstruct__kill_107 {
   pid_t _pid ;
   uid_t _uid ;
};
#line 40 "include/asm-generic/siginfo.h"
struct __anonstruct__timer_108 {
   timer_t _tid ;
   int _overrun ;
   char _pad[sizeof(uid_t ) - sizeof(int )] ;
   sigval_t _sigval ;
   int _sys_private ;
};
#line 40 "include/asm-generic/siginfo.h"
struct __anonstruct__rt_109 {
   pid_t _pid ;
   uid_t _uid ;
   sigval_t _sigval ;
};
#line 40 "include/asm-generic/siginfo.h"
struct __anonstruct__sigchld_110 {
   pid_t _pid ;
   uid_t _uid ;
   int _status ;
   clock_t _utime ;
   clock_t _stime ;
};
#line 40 "include/asm-generic/siginfo.h"
struct __anonstruct__sigfault_111 {
   void *_addr ;
};
#line 40 "include/asm-generic/siginfo.h"
struct __anonstruct__sigpoll_112 {
   long _band ;
   int _fd ;
};
#line 40 "include/asm-generic/siginfo.h"
union __anonunion__sifields_106 {
   int _pad[(128UL - 4UL * sizeof(int )) / sizeof(int )] ;
   struct __anonstruct__kill_107 _kill ;
   struct __anonstruct__timer_108 _timer ;
   struct __anonstruct__rt_109 _rt ;
   struct __anonstruct__sigchld_110 _sigchld ;
   struct __anonstruct__sigfault_111 _sigfault ;
   struct __anonstruct__sigpoll_112 _sigpoll ;
};
#line 40 "include/asm-generic/siginfo.h"
struct siginfo {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __anonunion__sifields_106 _sifields ;
};
#line 40 "include/asm-generic/siginfo.h"
typedef struct siginfo siginfo_t;
#line 14 "include/linux/signal.h"
struct user_struct;
#line 24 "include/linux/signal.h"
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};
#line 4 "include/linux/path.h"
struct dentry;
#line 5
struct vfsmount;
#line 7 "include/linux/path.h"
struct path {
   struct vfsmount *mnt ;
   struct dentry *dentry ;
};
#line 6 "include/linux/fs_struct.h"
struct fs_struct {
   atomic_t count ;
   rwlock_t lock ;
   int umask ;
   struct path root ;
   struct path pwd ;
   struct path altroot ;
};
#line 49 "include/linux/rcupdate.h"
struct rcu_head {
   struct rcu_head *next ;
   void (*func)(struct rcu_head *head ) ;
};
#line 6 "include/linux/pid.h"
enum pid_type {
    PIDTYPE_PID = 0,
    PIDTYPE_PGID = 1,
    PIDTYPE_SID = 2,
    PIDTYPE_MAX = 3
} ;
#line 50
struct pid_namespace;
#line 50 "include/linux/pid.h"
struct upid {
   int nr ;
   struct pid_namespace *ns ;
   struct hlist_node pid_chain ;
};
#line 57 "include/linux/pid.h"
struct pid {
   atomic_t count ;
   struct hlist_head tasks[PIDTYPE_MAX] ;
   struct rcu_head rcu ;
   unsigned int level ;
   struct upid numbers[1] ;
};
#line 69 "include/linux/pid.h"
struct pid_link {
   struct hlist_node node ;
   struct pid *pid ;
};
#line 97 "include/linux/proportions.h"
struct prop_local_single {
   unsigned long events ;
   int shift ;
   unsigned long period ;
   spinlock_t lock ;
};
#line 10 "include/linux/seccomp.h"
struct __anonstruct_seccomp_t_115 {
   int mode ;
};
#line 10 "include/linux/seccomp.h"
typedef struct __anonstruct_seccomp_t_115 seccomp_t;
#line 80 "include/linux/plist.h"
struct plist_head {
   struct list_head prio_list ;
   struct list_head node_list ;
   spinlock_t *lock ;
};
#line 38 "include/linux/rtmutex.h"
struct rt_mutex_waiter;
#line 43 "include/linux/resource.h"
struct rlimit {
   unsigned long rlim_cur ;
   unsigned long rlim_max ;
};
#line 24 "include/linux/hrtimer.h"
struct hrtimer_clock_base;
#line 25
struct hrtimer_cpu_base;
#line 38
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
} ;
#line 53
enum hrtimer_cb_mode {
    HRTIMER_CB_SOFTIRQ = 0,
    HRTIMER_CB_IRQSAFE = 1,
    HRTIMER_CB_IRQSAFE_NO_RESTART = 2,
    HRTIMER_CB_IRQSAFE_NO_SOFTIRQ = 3
} ;
#line 112 "include/linux/hrtimer.h"
struct hrtimer {
   struct rb_node node ;
   ktime_t expires ;
   enum hrtimer_restart (*function)(struct hrtimer * ) ;
   struct hrtimer_clock_base *base ;
   unsigned long state ;
   enum hrtimer_cb_mode cb_mode ;
   struct list_head cb_entry ;
   void *start_site ;
   char start_comm[16] ;
   int start_pid ;
};
#line 153 "include/linux/hrtimer.h"
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   clockid_t index ;
   struct rb_root active ;
   struct rb_node *first ;
   ktime_t resolution ;
   ktime_t (*get_time)(void) ;
   ktime_t (*get_softirq_time)(void) ;
   ktime_t softirq_time ;
   ktime_t offset ;
   int (*reprogram)(struct hrtimer *t , struct hrtimer_clock_base *b , ktime_t n ) ;
};
#line 189 "include/linux/hrtimer.h"
struct hrtimer_cpu_base {
   spinlock_t lock ;
   struct hrtimer_clock_base clock_base[2] ;
   struct list_head cb_pending ;
   ktime_t expires_next ;
   int hres_active ;
   unsigned long nr_events ;
};
#line 12 "include/linux/task_io_accounting.h"
struct task_io_accounting {
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};
#line 17 "include/linux/latencytop.h"
struct latency_record {
   unsigned long backtrace[12] ;
   unsigned int count ;
   unsigned long time ;
   unsigned long max ;
};
#line 95 "include/linux/sched.h"
struct futex_pi_state;
#line 96
struct robust_list_head;
#line 97
struct bio;
#line 139
struct seq_file;
#line 140
struct cfs_rq;
#line 141
struct task_group;
#line 333
struct nsproxy;
#line 57 "include/linux/aio_abi.h"
struct io_event {
   __u64 data ;
   __u64 obj ;
   __s64 res ;
   __s64 res2 ;
};
#line 16 "include/linux/uio.h"
struct iovec {
   void *iov_base ;
   __kernel_size_t iov_len ;
};
#line 87 "include/linux/aio.h"
union __anonunion_ki_obj_117 {
   void *user ;
   struct task_struct *tsk ;
};
#line 87 "include/linux/aio.h"
struct kiocb {
   struct list_head ki_run_list ;
   unsigned long ki_flags ;
   int ki_users ;
   unsigned int ki_key ;
   struct file *ki_filp ;
   struct kioctx *ki_ctx ;
   int (*ki_cancel)(struct kiocb * , struct io_event * ) ;
   ssize_t (*ki_retry)(struct kiocb * ) ;
   void (*ki_dtor)(struct kiocb * ) ;
   union __anonunion_ki_obj_117 ki_obj ;
   __u64 ki_user_data ;
   wait_queue_t ki_wait ;
   loff_t ki_pos ;
   void *private ;
   unsigned short ki_opcode ;
   size_t ki_nbytes ;
   char *ki_buf ;
   size_t ki_left ;
   struct iovec ki_inline_vec ;
   struct iovec *ki_iovec ;
   unsigned long ki_nr_segs ;
   unsigned long ki_cur_seg ;
   struct list_head ki_list ;
   struct file *ki_eventfd ;
};
#line 167 "include/linux/aio.h"
struct aio_ring_info {
   unsigned long mmap_base ;
   unsigned long mmap_size ;
   struct page **ring_pages ;
   spinlock_t ring_lock ;
   long nr_pages ;
   unsigned int nr ;
   unsigned int tail ;
   struct page *internal_pages[8] ;
};
#line 180 "include/linux/aio.h"
struct kioctx {
   atomic_t users ;
   int dead ;
   struct mm_struct *mm ;
   unsigned long user_id ;
   struct kioctx *next ;
   wait_queue_head_t wait ;
   spinlock_t ctx_lock ;
   int reqs_active ;
   struct list_head active_reqs ;
   struct list_head run_list ;
   unsigned int max_reqs ;
   struct aio_ring_info ring_info ;
   struct delayed_work wq ;
};
#line 411 "include/linux/sched.h"
struct sighand_struct {
   atomic_t count ;
   struct k_sigaction action[64] ;
   spinlock_t siglock ;
   wait_queue_head_t signalfd_wqh ;
};
#line 418 "include/linux/sched.h"
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   cputime_t ac_utime ;
   cputime_t ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};
#line 433 "include/linux/sched.h"
union __anonunion____missing_field_name_118 {
   pid_t pgrp  __attribute__((__deprecated__)) ;
   pid_t __pgrp ;
};
#line 433 "include/linux/sched.h"
union __anonunion____missing_field_name_119 {
   pid_t session  __attribute__((__deprecated__)) ;
   pid_t __session ;
};
#line 433
struct tty_struct;
#line 433
struct taskstats;
#line 433
struct tty_audit_buf;
#line 433 "include/linux/sched.h"
struct signal_struct {
   atomic_t count ;
   atomic_t live ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   int group_exit_code ;
   struct task_struct *group_exit_task ;
   int notify_count ;
   int group_stop_count ;
   unsigned int flags ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   struct pid *leader_pid ;
   ktime_t it_real_incr ;
   cputime_t it_prof_expires ;
   cputime_t it_virt_expires ;
   cputime_t it_prof_incr ;
   cputime_t it_virt_incr ;
   union __anonunion____missing_field_name_118 __annonCompField15 ;
   struct pid *tty_old_pgrp ;
   union __anonunion____missing_field_name_119 __annonCompField16 ;
   int leader ;
   struct tty_struct *tty ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t cutime ;
   cputime_t cstime ;
   cputime_t gtime ;
   cputime_t cgtime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   unsigned long long sum_sched_runtime ;
   struct rlimit rlim[16] ;
   struct list_head cpu_timers[3] ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   struct tty_audit_buf *tty_audit_buf ;
};
#line 578 "include/linux/sched.h"
struct user_struct {
   atomic_t __count ;
   atomic_t processes ;
   atomic_t files ;
   atomic_t sigpending ;
   atomic_t inotify_watches ;
   atomic_t inotify_devs ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   struct key *uid_keyring ;
   struct key *session_keyring ;
   struct hlist_node uidhash_node ;
   uid_t uid ;
   struct task_group *tg ;
   struct kobject kobj ;
   struct work_struct work ;
};
#line 618
struct backing_dev_info;
#line 619
struct reclaim_state;
#line 622 "include/linux/sched.h"
struct sched_info {
   unsigned long pcount ;
   unsigned long long cpu_time ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
   unsigned int bkl_count ;
};
#line 639
struct file_operations;
#line 643 "include/linux/sched.h"
struct task_delay_info {
   spinlock_t lock ;
   unsigned int flags ;
   struct timespec blkio_start ;
   struct timespec blkio_end ;
   u64 blkio_delay ;
   u64 swapin_delay ;
   u32 blkio_count ;
   u32 swapin_count ;
};
#line 684
enum cpu_idle_type {
    CPU_IDLE = 0,
    CPU_NOT_IDLE = 1,
    CPU_NEWLY_IDLE = 2,
    CPU_MAX_IDLE_TYPES = 3
} ;
#line 728 "include/linux/sched.h"
struct sched_group {
   struct sched_group *next ;
   cpumask_t cpumask ;
   unsigned int __cpu_power ;
   u32 reciprocal_cpu_power ;
};
#line 745
enum sched_domain_level {
    SD_LV_NONE = 0,
    SD_LV_SIBLING = 1,
    SD_LV_MC = 2,
    SD_LV_CPU = 3,
    SD_LV_NODE = 4,
    SD_LV_ALLNODES = 5,
    SD_LV_MAX = 6
} ;
#line 763 "include/linux/sched.h"
struct sched_domain {
   struct sched_domain *parent ;
   struct sched_domain *child ;
   struct sched_group *groups ;
   cpumask_t span ;
   int first_cpu ;
   unsigned long min_interval ;
   unsigned long max_interval ;
   unsigned int busy_factor ;
   unsigned int imbalance_pct ;
   unsigned int cache_nice_tries ;
   unsigned int busy_idx ;
   unsigned int idle_idx ;
   unsigned int newidle_idx ;
   unsigned int wake_idx ;
   unsigned int forkexec_idx ;
   int flags ;
   enum sched_domain_level level ;
   unsigned long last_balance ;
   unsigned int balance_interval ;
   unsigned int nr_balance_failed ;
   unsigned int lb_count[CPU_MAX_IDLE_TYPES] ;
   unsigned int lb_failed[CPU_MAX_IDLE_TYPES] ;
   unsigned int lb_balanced[CPU_MAX_IDLE_TYPES] ;
   unsigned int lb_imbalance[CPU_MAX_IDLE_TYPES] ;
   unsigned int lb_gained[CPU_MAX_IDLE_TYPES] ;
   unsigned int lb_hot_gained[CPU_MAX_IDLE_TYPES] ;
   unsigned int lb_nobusyg[CPU_MAX_IDLE_TYPES] ;
   unsigned int lb_nobusyq[CPU_MAX_IDLE_TYPES] ;
   unsigned int alb_count ;
   unsigned int alb_failed ;
   unsigned int alb_pushed ;
   unsigned int sbe_count ;
   unsigned int sbe_balanced ;
   unsigned int sbe_pushed ;
   unsigned int sbf_count ;
   unsigned int sbf_balanced ;
   unsigned int sbf_pushed ;
   unsigned int ttwu_wake_remote ;
   unsigned int ttwu_move_affine ;
   unsigned int ttwu_move_balance ;
};
#line 844
struct io_context;
#line 847 "include/linux/sched.h"
struct group_info {
   int ngroups ;
   atomic_t usage ;
   gid_t small_block[32] ;
   int nblocks ;
   gid_t *blocks[0] ;
};
#line 884
struct audit_context;
#line 886
struct pipe_inode_info;
#line 889
struct rq;
#line 892 "include/linux/sched.h"
struct sched_class {
   struct sched_class  const  *next ;
   void (*enqueue_task)(struct rq *rq , struct task_struct *p , int wakeup ) ;
   void (*dequeue_task)(struct rq *rq , struct task_struct *p , int sleep ) ;
   void (*yield_task)(struct rq *rq ) ;
   int (*select_task_rq)(struct task_struct *p , int sync ) ;
   void (*check_preempt_curr)(struct rq *rq , struct task_struct *p ) ;
   struct task_struct *(*pick_next_task)(struct rq *rq ) ;
   void (*put_prev_task)(struct rq *rq , struct task_struct *p ) ;
   unsigned long (*load_balance)(struct rq *this_rq , int this_cpu , struct rq *busiest ,
                                 unsigned long max_load_move , struct sched_domain *sd ,
                                 enum cpu_idle_type idle , int *all_pinned , int *this_best_prio ) ;
   int (*move_one_task)(struct rq *this_rq , int this_cpu , struct rq *busiest , struct sched_domain *sd ,
                        enum cpu_idle_type idle ) ;
   void (*pre_schedule)(struct rq *this_rq , struct task_struct *task ) ;
   void (*post_schedule)(struct rq *this_rq ) ;
   void (*task_wake_up)(struct rq *this_rq , struct task_struct *task ) ;
   void (*set_curr_task)(struct rq *rq ) ;
   void (*task_tick)(struct rq *rq , struct task_struct *p , int queued ) ;
   void (*task_new)(struct rq *rq , struct task_struct *p ) ;
   void (*set_cpus_allowed)(struct task_struct *p , cpumask_t const   *newmask ) ;
   void (*join_domain)(struct rq *rq ) ;
   void (*leave_domain)(struct rq *rq ) ;
   void (*switched_from)(struct rq *this_rq , struct task_struct *task , int running ) ;
   void (*switched_to)(struct rq *this_rq , struct task_struct *task , int running ) ;
   void (*prio_changed)(struct rq *this_rq , struct task_struct *task , int oldprio ,
                        int running ) ;
   void (*moved_group)(struct task_struct *p ) ;
};
#line 940 "include/linux/sched.h"
struct load_weight {
   unsigned long weight ;
   unsigned long inv_weight ;
};
#line 954 "include/linux/sched.h"
struct sched_entity {
   struct load_weight load ;
   struct rb_node run_node ;
   struct list_head group_node ;
   unsigned int on_rq ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 last_wakeup ;
   u64 avg_overlap ;
   u64 wait_start ;
   u64 wait_max ;
   u64 wait_count ;
   u64 wait_sum ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_forced2_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
};
#line 1011
struct rt_rq;
#line 1011 "include/linux/sched.h"
struct sched_rt_entity {
   struct list_head run_list ;
   unsigned int time_slice ;
   unsigned long timeout ;
   int nr_cpus_allowed ;
   struct sched_rt_entity *back ;
   struct sched_rt_entity *parent ;
   struct rt_rq *rt_rq ;
   struct rt_rq *my_q ;
};
#line 1027
struct linux_binfmt;
#line 1027
struct files_struct;
#line 1027
struct css_set;
#line 1027
struct compat_robust_list_head;
#line 1027 "include/linux/sched.h"
struct task_struct {
   long volatile   state ;
   void *stack ;
   atomic_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   int lock_depth ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   struct sched_class  const  *sched_class ;
   struct sched_entity se ;
   struct sched_rt_entity rt ;
   struct hlist_head preempt_notifiers ;
   unsigned char fpu_counter ;
   s8 oomkilladj ;
   unsigned int btrace_seq ;
   unsigned int policy ;
   cpumask_t cpus_allowed ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct list_head ptrace_children ;
   struct list_head ptrace_list ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   struct linux_binfmt *binfmt ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned int personality ;
   unsigned int did_exec : 1 ;
   pid_t pid ;
   pid_t tgid ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct pid_link pids[PIDTYPE_MAX] ;
   struct list_head thread_group ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   unsigned int rt_priority ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t utimescaled ;
   cputime_t stimescaled ;
   cputime_t gtime ;
   cputime_t prev_utime ;
   cputime_t prev_stime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   struct timespec start_time ;
   struct timespec real_start_time ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   cputime_t it_prof_expires ;
   cputime_t it_virt_expires ;
   unsigned long long it_sched_expires ;
   struct list_head cpu_timers[3] ;
   uid_t uid ;
   uid_t euid ;
   uid_t suid ;
   uid_t fsuid ;
   gid_t gid ;
   gid_t egid ;
   gid_t sgid ;
   gid_t fsgid ;
   struct group_info *group_info ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   kernel_cap_t cap_bset ;
   unsigned int securebits ;
   struct user_struct *user ;
   struct key *request_key_auth ;
   struct key *thread_keyring ;
   unsigned char jit_keyring ;
   char comm[16] ;
   int link_count ;
   int total_link_count ;
   struct sysv_sem sysvsem ;
   unsigned long last_switch_timestamp ;
   unsigned long last_switch_count ;
   struct thread_struct thread ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t sas_ss_size ;
   int (*notifier)(void *priv ) ;
   void *notifier_data ;
   sigset_t *notifier_mask ;
   void *security ;
   struct audit_context *audit_context ;
   uid_t loginuid ;
   unsigned int sessionid ;
   seccomp_t seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   spinlock_t pi_lock ;
   struct plist_head pi_waiters ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct mutex_waiter *blocked_on ;
   unsigned int irq_events ;
   int hardirqs_enabled ;
   unsigned long hardirq_enable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_disable_event ;
   int softirqs_enabled ;
   unsigned long softirq_disable_ip ;
   unsigned int softirq_disable_event ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_enable_event ;
   int hardirq_context ;
   int softirq_context ;
   u64 curr_chain_key ;
   int lockdep_depth ;
   struct held_lock held_locks[48UL] ;
   unsigned int lockdep_recursion ;
   void *journal_info ;
   struct bio *bio_list ;
   struct bio **bio_tail ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   unsigned long ptrace_message ;
   siginfo_t *last_siginfo ;
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   struct task_io_accounting ioac ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   cputime_t acct_stimexpd ;
   struct mempolicy *mempolicy ;
   short il_next ;
   nodemask_t mems_allowed ;
   int cpuset_mems_generation ;
   int cpuset_mem_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   atomic_t fs_excl ;
   struct rcu_head rcu ;
   struct pipe_inode_info *splice_pipe ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   struct prop_local_single dirties ;
   int latency_record_count ;
   struct latency_record latency_record[32] ;
};
#line 20 "include/linux/klist.h"
struct klist_node;
#line 21 "include/linux/klist.h"
struct klist {
   spinlock_t k_lock ;
   struct list_head k_list ;
   void (*get)(struct klist_node * ) ;
   void (*put)(struct klist_node * ) ;
};
#line 40 "include/linux/klist.h"
struct klist_node {
   struct klist *n_klist ;
   struct list_head n_node ;
   struct kref n_ref ;
   struct completion n_removed ;
};
#line 16 "include/linux/semaphore.h"
struct semaphore {
   spinlock_t lock ;
   unsigned int count ;
   struct list_head wait_list ;
};
#line 4 "include/asm/device.h"
struct dev_archdata {
   void *acpi_handle ;
   void *iommu ;
};
#line 36 "include/linux/device.h"
struct driver_private;
#line 37
struct class;
#line 38
struct bus_type;
#line 39
struct bus_type_private;
#line 41 "include/linux/device.h"
struct bus_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct bus_type *bus , char *buf ) ;
   ssize_t (*store)(struct bus_type *bus , char const   *buf , size_t count ) ;
};
#line 54
struct device_attribute;
#line 54
struct driver_attribute;
#line 54 "include/linux/device.h"
struct bus_type {
   char const   *name ;
   struct bus_attribute *bus_attrs ;
   struct device_attribute *dev_attrs ;
   struct driver_attribute *drv_attrs ;
   int (*match)(struct device *dev , struct device_driver *drv ) ;
   int (*uevent)(struct device *dev , struct kobj_uevent_env *env ) ;
   int (*probe)(struct device *dev ) ;
   int (*remove)(struct device *dev ) ;
   void (*shutdown)(struct device *dev ) ;
   int (*suspend)(struct device *dev , pm_message_t state ) ;
   int (*suspend_late)(struct device *dev , pm_message_t state ) ;
   int (*resume_early)(struct device *dev ) ;
   int (*resume)(struct device *dev ) ;
   struct bus_type_private *p ;
};
#line 120 "include/linux/device.h"
struct device_driver {
   char const   *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char const   *mod_name ;
   int (*probe)(struct device *dev ) ;
   int (*remove)(struct device *dev ) ;
   void (*shutdown)(struct device *dev ) ;
   int (*suspend)(struct device *dev , pm_message_t state ) ;
   int (*resume)(struct device *dev ) ;
   struct attribute_group **groups ;
   struct driver_private *p ;
};
#line 149 "include/linux/device.h"
struct driver_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device_driver *driver , char *buf ) ;
   ssize_t (*store)(struct device_driver *driver , char const   *buf , size_t count ) ;
};
#line 181
struct class_attribute;
#line 181 "include/linux/device.h"
struct class {
   char const   *name ;
   struct module *owner ;
   struct kset subsys ;
   struct list_head devices ;
   struct list_head interfaces ;
   struct kset class_dirs ;
   struct semaphore sem ;
   struct class_attribute *class_attrs ;
   struct device_attribute *dev_attrs ;
   int (*dev_uevent)(struct device *dev , struct kobj_uevent_env *env ) ;
   void (*class_release)(struct class *class ) ;
   void (*dev_release)(struct device *dev ) ;
   int (*suspend)(struct device *dev , pm_message_t state ) ;
   int (*resume)(struct device *dev ) ;
};
#line 209 "include/linux/device.h"
struct class_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct class *class , char *buf ) ;
   ssize_t (*store)(struct class *class , char const   *buf , size_t count ) ;
};
#line 246 "include/linux/device.h"
struct device_type {
   char const   *name ;
   struct attribute_group **groups ;
   int (*uevent)(struct device *dev , struct kobj_uevent_env *env ) ;
   void (*release)(struct device *dev ) ;
   int (*suspend)(struct device *dev , pm_message_t state ) ;
   int (*resume)(struct device *dev ) ;
};
#line 256 "include/linux/device.h"
struct device_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device *dev , struct device_attribute *attr , char *buf ) ;
   ssize_t (*store)(struct device *dev , struct device_attribute *attr , char const   *buf ,
                    size_t count ) ;
};
#line 316 "include/linux/device.h"
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};
#line 325
struct dma_coherent_mem;
#line 325 "include/linux/device.h"
struct device {
   struct klist klist_children ;
   struct klist_node knode_parent ;
   struct klist_node knode_driver ;
   struct klist_node knode_bus ;
   struct device *parent ;
   struct kobject kobj ;
   char bus_id[20] ;
   struct device_type *type ;
   unsigned int uevent_suppress : 1 ;
   struct semaphore sem ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *driver_data ;
   void *platform_data ;
   struct dev_pm_info power ;
   int numa_node ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct dev_archdata archdata ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct list_head node ;
   struct class *class ;
   dev_t devt ;
   struct attribute_group **groups ;
   void (*release)(struct device *dev ) ;
};
#line 10 "include/linux/dcache.h"
struct nameidata;
#line 32 "include/linux/dcache.h"
struct qstr {
   unsigned int hash ;
   unsigned int len ;
   unsigned char const   *name ;
};
#line 77
struct dcookie_struct;
#line 81
struct inode;
#line 81 "include/linux/dcache.h"
union __anonunion_d_u_122 {
   struct list_head d_child ;
   struct rcu_head d_rcu ;
};
#line 81
struct dentry_operations;
#line 81
struct super_block;
#line 81 "include/linux/dcache.h"
struct dentry {
   atomic_t d_count ;
   unsigned int d_flags ;
   spinlock_t d_lock ;
   struct inode *d_inode ;
   struct hlist_node d_hash ;
   struct dentry *d_parent ;
   struct qstr d_name ;
   struct list_head d_lru ;
   union __anonunion_d_u_122 d_u ;
   struct list_head d_subdirs ;
   struct list_head d_alias ;
   unsigned long d_time ;
   struct dentry_operations *d_op ;
   struct super_block *d_sb ;
   void *d_fsdata ;
   struct dcookie_struct *d_cookie ;
   int d_mounted ;
   unsigned char d_iname[36] ;
};
#line 128 "include/linux/dcache.h"
struct dentry_operations {
   int (*d_revalidate)(struct dentry * , struct nameidata * ) ;
   int (*d_hash)(struct dentry * , struct qstr * ) ;
   int (*d_compare)(struct dentry * , struct qstr * , struct qstr * ) ;
   int (*d_delete)(struct dentry * ) ;
   void (*d_release)(struct dentry * ) ;
   void (*d_iput)(struct dentry * , struct inode * ) ;
   char *(*d_dname)(struct dentry * , char * , int  ) ;
};
#line 10 "include/linux/namei.h"
struct open_intent {
   int flags ;
   int create_mode ;
   struct file *file ;
};
#line 16
enum __anonenum_123 {
    MAX_NESTED_LINKS = 8
} ;
#line 18 "include/linux/namei.h"
union __anonunion_intent_124 {
   struct open_intent open ;
};
#line 18 "include/linux/namei.h"
struct nameidata {
   struct path path ;
   struct qstr last ;
   unsigned int flags ;
   int last_type ;
   unsigned int depth ;
   char *saved_names[MAX_NESTED_LINKS + 1] ;
   union __anonunion_intent_124 intent ;
};
#line 61 "include/linux/radix-tree.h"
struct radix_tree_node;
#line 61 "include/linux/radix-tree.h"
struct radix_tree_root {
   unsigned int height ;
   gfp_t gfp_mask ;
   struct radix_tree_node *rnode ;
};
#line 295 "include/linux/fs.h"
struct export_operations;
#line 301
struct poll_table_struct;
#line 302
struct kstatfs;
#line 346 "include/linux/fs.h"
struct iattr {
   unsigned int ia_valid ;
   umode_t ia_mode ;
   uid_t ia_uid ;
   gid_t ia_gid ;
   loff_t ia_size ;
   struct timespec ia_atime ;
   struct timespec ia_mtime ;
   struct timespec ia_ctime ;
   struct file *ia_file ;
};
#line 44 "include/linux/quota.h"
typedef __kernel_uid32_t qid_t;
#line 45 "include/linux/quota.h"
typedef __u64 qsize_t;
#line 103 "include/linux/quota.h"
struct if_dqblk {
   __u64 dqb_bhardlimit ;
   __u64 dqb_bsoftlimit ;
   __u64 dqb_curspace ;
   __u64 dqb_ihardlimit ;
   __u64 dqb_isoftlimit ;
   __u64 dqb_curinodes ;
   __u64 dqb_btime ;
   __u64 dqb_itime ;
   __u32 dqb_valid ;
};
#line 124 "include/linux/quota.h"
struct if_dqinfo {
   __u64 dqi_bgrace ;
   __u64 dqi_igrace ;
   __u32 dqi_flags ;
   __u32 dqi_valid ;
};
#line 50 "include/linux/dqblk_xfs.h"
struct fs_disk_quota {
   __s8 d_version ;
   __s8 d_flags ;
   __u16 d_fieldmask ;
   __u32 d_id ;
   __u64 d_blk_hardlimit ;
   __u64 d_blk_softlimit ;
   __u64 d_ino_hardlimit ;
   __u64 d_ino_softlimit ;
   __u64 d_bcount ;
   __u64 d_icount ;
   __s32 d_itimer ;
   __s32 d_btimer ;
   __u16 d_iwarns ;
   __u16 d_bwarns ;
   __s32 d_padding2 ;
   __u64 d_rtb_hardlimit ;
   __u64 d_rtb_softlimit ;
   __u64 d_rtbcount ;
   __s32 d_rtbtimer ;
   __u16 d_rtbwarns ;
   __s16 d_padding3 ;
   char d_padding4[8] ;
};
#line 137 "include/linux/dqblk_xfs.h"
struct fs_qfilestat {
   __u64 qfs_ino ;
   __u64 qfs_nblks ;
   __u32 qfs_nextents ;
};
#line 137 "include/linux/dqblk_xfs.h"
typedef struct fs_qfilestat fs_qfilestat_t;
#line 143 "include/linux/dqblk_xfs.h"
struct fs_quota_stat {
   __s8 qs_version ;
   __u16 qs_flags ;
   __s8 qs_pad ;
   fs_qfilestat_t qs_uquota ;
   fs_qfilestat_t qs_gquota ;
   __u32 qs_incoredqs ;
   __s32 qs_btimelimit ;
   __s32 qs_itimelimit ;
   __s32 qs_rtbtimelimit ;
   __u16 qs_bwarnlimit ;
   __u16 qs_iwarnlimit ;
};
#line 21 "include/linux/dqblk_v1.h"
struct v1_mem_dqinfo {

};
#line 20 "include/linux/dqblk_v2.h"
struct v2_mem_dqinfo {
   unsigned int dqi_blocks ;
   unsigned int dqi_free_blk ;
   unsigned int dqi_free_entry ;
};
#line 187 "include/linux/quota.h"
struct mem_dqblk {
   __u32 dqb_bhardlimit ;
   __u32 dqb_bsoftlimit ;
   qsize_t dqb_curspace ;
   __u32 dqb_ihardlimit ;
   __u32 dqb_isoftlimit ;
   __u32 dqb_curinodes ;
   time_t dqb_btime ;
   time_t dqb_itime ;
};
#line 201
struct quota_format_type;
#line 203 "include/linux/quota.h"
union __anonunion_u_128 {
   struct v1_mem_dqinfo v1_i ;
   struct v2_mem_dqinfo v2_i ;
};
#line 203 "include/linux/quota.h"
struct mem_dqinfo {
   struct quota_format_type *dqi_format ;
   int dqi_fmt_id ;
   struct list_head dqi_dirty_list ;
   unsigned long dqi_flags ;
   unsigned int dqi_bgrace ;
   unsigned int dqi_igrace ;
   qsize_t dqi_maxblimit ;
   qsize_t dqi_maxilimit ;
   union __anonunion_u_128 u ;
};
#line 253 "include/linux/quota.h"
struct dquot {
   struct hlist_node dq_hash ;
   struct list_head dq_inuse ;
   struct list_head dq_free ;
   struct list_head dq_dirty ;
   struct mutex dq_lock ;
   atomic_t dq_count ;
   wait_queue_head_t dq_wait_unused ;
   struct super_block *dq_sb ;
   unsigned int dq_id ;
   loff_t dq_off ;
   unsigned long dq_flags ;
   short dq_type ;
   struct mem_dqblk dq_dqb ;
};
#line 275 "include/linux/quota.h"
struct quota_format_ops {
   int (*check_quota_file)(struct super_block *sb , int type ) ;
   int (*read_file_info)(struct super_block *sb , int type ) ;
   int (*write_file_info)(struct super_block *sb , int type ) ;
   int (*free_file_info)(struct super_block *sb , int type ) ;
   int (*read_dqblk)(struct dquot *dquot ) ;
   int (*commit_dqblk)(struct dquot *dquot ) ;
   int (*release_dqblk)(struct dquot *dquot ) ;
};
#line 286 "include/linux/quota.h"
struct dquot_operations {
   int (*initialize)(struct inode * , int  ) ;
   int (*drop)(struct inode * ) ;
   int (*alloc_space)(struct inode * , qsize_t  , int  ) ;
   int (*alloc_inode)(struct inode  const  * , unsigned long  ) ;
   int (*free_space)(struct inode * , qsize_t  ) ;
   int (*free_inode)(struct inode  const  * , unsigned long  ) ;
   int (*transfer)(struct inode * , struct iattr * ) ;
   int (*write_dquot)(struct dquot * ) ;
   int (*acquire_dquot)(struct dquot * ) ;
   int (*release_dquot)(struct dquot * ) ;
   int (*mark_dirty)(struct dquot * ) ;
   int (*write_info)(struct super_block * , int  ) ;
};
#line 302 "include/linux/quota.h"
struct quotactl_ops {
   int (*quota_on)(struct super_block * , int  , int  , char * , int  ) ;
   int (*quota_off)(struct super_block * , int  , int  ) ;
   int (*quota_sync)(struct super_block * , int  ) ;
   int (*get_info)(struct super_block * , int  , struct if_dqinfo * ) ;
   int (*set_info)(struct super_block * , int  , struct if_dqinfo * ) ;
   int (*get_dqblk)(struct super_block * , int  , qid_t  , struct if_dqblk * ) ;
   int (*set_dqblk)(struct super_block * , int  , qid_t  , struct if_dqblk * ) ;
   int (*get_xstate)(struct super_block * , struct fs_quota_stat * ) ;
   int (*set_xstate)(struct super_block * , unsigned int  , int  ) ;
   int (*get_xquota)(struct super_block * , int  , qid_t  , struct fs_disk_quota * ) ;
   int (*set_xquota)(struct super_block * , int  , qid_t  , struct fs_disk_quota * ) ;
};
#line 316 "include/linux/quota.h"
struct quota_format_type {
   int qf_fmt_id ;
   struct quota_format_ops *qf_ops ;
   struct module *qf_owner ;
   struct quota_format_type *qf_next ;
};
#line 330 "include/linux/quota.h"
struct quota_info {
   unsigned int flags ;
   struct mutex dqio_mutex ;
   struct mutex dqonoff_mutex ;
   struct rw_semaphore dqptr_sem ;
   struct inode *files[2] ;
   struct mem_dqinfo info[2] ;
   struct quota_format_ops *ops[2] ;
};
#line 408 "include/linux/fs.h"
struct writeback_control;
#line 443 "include/linux/fs.h"
struct address_space_operations {
   int (*writepage)(struct page *page , struct writeback_control *wbc ) ;
   int (*readpage)(struct file * , struct page * ) ;
   void (*sync_page)(struct page * ) ;
   int (*writepages)(struct address_space * , struct writeback_control * ) ;
   int (*set_page_dirty)(struct page *page ) ;
   int (*readpages)(struct file *filp , struct address_space *mapping , struct list_head *pages ,
                    unsigned int nr_pages ) ;
   int (*prepare_write)(struct file * , struct page * , unsigned int  , unsigned int  ) ;
   int (*commit_write)(struct file * , struct page * , unsigned int  , unsigned int  ) ;
   int (*write_begin)(struct file * , struct address_space *mapping , loff_t pos ,
                      unsigned int len , unsigned int flags , struct page **pagep ,
                      void **fsdata ) ;
   int (*write_end)(struct file * , struct address_space *mapping , loff_t pos , unsigned int len ,
                    unsigned int copied , struct page *page , void *fsdata ) ;
   sector_t (*bmap)(struct address_space * , sector_t  ) ;
   void (*invalidatepage)(struct page * , unsigned long  ) ;
   int (*releasepage)(struct page * , gfp_t  ) ;
   ssize_t (*direct_IO)(int  , struct kiocb * , struct iovec  const  *iov , loff_t offset ,
                        unsigned long nr_segs ) ;
   int (*get_xip_mem)(struct address_space * , unsigned long  , int  , void ** , unsigned long * ) ;
   int (*migratepage)(struct address_space * , struct page * , struct page * ) ;
   int (*launder_page)(struct page * ) ;
};
#line 498 "include/linux/fs.h"
struct address_space {
   struct inode *host ;
   struct radix_tree_root page_tree ;
   rwlock_t tree_lock ;
   unsigned int i_mmap_writable ;
   struct prio_tree_root i_mmap ;
   struct list_head i_mmap_nonlinear ;
   spinlock_t i_mmap_lock ;
   unsigned int truncate_count ;
   unsigned long nrpages ;
   unsigned long writeback_index ;
   struct address_space_operations  const  *a_ops ;
   unsigned long flags ;
   struct backing_dev_info *backing_dev_info ;
   spinlock_t private_lock ;
   struct list_head private_list ;
   struct address_space *assoc_mapping ;
} __attribute__((__aligned__(sizeof(long )))) ;
#line 522
struct hd_struct;
#line 522
struct gendisk;
#line 522 "include/linux/fs.h"
struct block_device {
   dev_t bd_dev ;
   struct inode *bd_inode ;
   int bd_openers ;
   struct mutex bd_mutex ;
   struct semaphore bd_mount_sem ;
   struct list_head bd_inodes ;
   void *bd_holder ;
   int bd_holders ;
   struct list_head bd_holder_list ;
   struct block_device *bd_contains ;
   unsigned int bd_block_size ;
   struct hd_struct *bd_part ;
   unsigned int bd_part_count ;
   int bd_invalidated ;
   struct gendisk *bd_disk ;
   struct list_head bd_list ;
   struct backing_dev_info *bd_inode_backing_dev_info ;
   unsigned long bd_private ;
};
#line 592
struct inode_operations;
#line 592
struct file_lock;
#line 592
struct cdev;
#line 592 "include/linux/fs.h"
union __anonunion____missing_field_name_129 {
   struct pipe_inode_info *i_pipe ;
   struct block_device *i_bdev ;
   struct cdev *i_cdev ;
};
#line 592
struct dnotify_struct;
#line 592 "include/linux/fs.h"
struct inode {
   struct hlist_node i_hash ;
   struct list_head i_list ;
   struct list_head i_sb_list ;
   struct list_head i_dentry ;
   unsigned long i_ino ;
   atomic_t i_count ;
   unsigned int i_nlink ;
   uid_t i_uid ;
   gid_t i_gid ;
   dev_t i_rdev ;
   u64 i_version ;
   loff_t i_size ;
   struct timespec i_atime ;
   struct timespec i_mtime ;
   struct timespec i_ctime ;
   unsigned int i_blkbits ;
   blkcnt_t i_blocks ;
   unsigned short i_bytes ;
   umode_t i_mode ;
   spinlock_t i_lock ;
   struct mutex i_mutex ;
   struct rw_semaphore i_alloc_sem ;
   struct inode_operations  const  *i_op ;
   struct file_operations  const  *i_fop ;
   struct super_block *i_sb ;
   struct file_lock *i_flock ;
   struct address_space *i_mapping ;
   struct address_space i_data ;
   struct dquot *i_dquot[2] ;
   struct list_head i_devices ;
   union __anonunion____missing_field_name_129 __annonCompField17 ;
   int i_cindex ;
   __u32 i_generation ;
   unsigned long i_dnotify_mask ;
   struct dnotify_struct *i_dnotify ;
   struct list_head inotify_watches ;
   struct mutex inotify_mutex ;
   unsigned long i_state ;
   unsigned long dirtied_when ;
   unsigned int i_flags ;
   atomic_t i_writecount ;
   void *i_security ;
   void *i_private ;
};
#line 747 "include/linux/fs.h"
struct fown_struct {
   rwlock_t lock ;
   struct pid *pid ;
   enum pid_type pid_type ;
   uid_t uid ;
   uid_t euid ;
   int signum ;
};
#line 758 "include/linux/fs.h"
struct file_ra_state {
   unsigned long start ;
   unsigned int size ;
   unsigned int async_size ;
   unsigned int ra_pages ;
   int mmap_miss ;
   loff_t prev_pos ;
};
#line 781 "include/linux/fs.h"
union __anonunion_f_u_130 {
   struct list_head fu_list ;
   struct rcu_head fu_rcuhead ;
};
#line 781 "include/linux/fs.h"
struct file {
   union __anonunion_f_u_130 f_u ;
   struct path f_path ;
   struct file_operations  const  *f_op ;
   atomic_t f_count ;
   unsigned int f_flags ;
   mode_t f_mode ;
   loff_t f_pos ;
   struct fown_struct f_owner ;
   unsigned int f_uid ;
   unsigned int f_gid ;
   struct file_ra_state f_ra ;
   u64 f_version ;
   void *f_security ;
   void *private_data ;
   struct list_head f_ep_links ;
   spinlock_t f_ep_lock ;
   struct address_space *f_mapping ;
   unsigned long f_mnt_write_state ;
};
#line 894 "include/linux/fs.h"
typedef struct files_struct *fl_owner_t;
#line 896 "include/linux/fs.h"
struct file_lock_operations {
   void (*fl_insert)(struct file_lock * ) ;
   void (*fl_remove)(struct file_lock * ) ;
   void (*fl_copy_lock)(struct file_lock * , struct file_lock * ) ;
   void (*fl_release_private)(struct file_lock * ) ;
};
#line 903 "include/linux/fs.h"
struct lock_manager_operations {
   int (*fl_compare_owner)(struct file_lock * , struct file_lock * ) ;
   void (*fl_notify)(struct file_lock * ) ;
   int (*fl_grant)(struct file_lock * , struct file_lock * , int  ) ;
   void (*fl_copy_lock)(struct file_lock * , struct file_lock * ) ;
   void (*fl_release_private)(struct file_lock * ) ;
   void (*fl_break)(struct file_lock * ) ;
   int (*fl_mylease)(struct file_lock * , struct file_lock * ) ;
   int (*fl_change)(struct file_lock ** , int  ) ;
};
#line 8 "include/linux/nfs_fs_i.h"
struct nlm_lockowner;
#line 13 "include/linux/nfs_fs_i.h"
struct nfs_lock_info {
   u32 state ;
   struct nlm_lockowner *owner ;
   struct list_head list ;
};
#line 19
struct nfs4_lock_state;
#line 20 "include/linux/nfs_fs_i.h"
struct nfs4_lock_info {
   struct nfs4_lock_state *owner ;
};
#line 917 "include/linux/fs.h"
struct fasync_struct;
#line 917 "include/linux/fs.h"
struct __anonstruct_afs_132 {
   struct list_head link ;
   int state ;
};
#line 917 "include/linux/fs.h"
union __anonunion_fl_u_131 {
   struct nfs_lock_info nfs_fl ;
   struct nfs4_lock_info nfs4_fl ;
   struct __anonstruct_afs_132 afs ;
};
#line 917 "include/linux/fs.h"
struct file_lock {
   struct file_lock *fl_next ;
   struct list_head fl_link ;
   struct list_head fl_block ;
   fl_owner_t fl_owner ;
   unsigned int fl_pid ;
   struct pid *fl_nspid ;
   wait_queue_head_t fl_wait ;
   struct file *fl_file ;
   unsigned char fl_flags ;
   unsigned char fl_type ;
   loff_t fl_start ;
   loff_t fl_end ;
   struct fasync_struct *fl_fasync ;
   unsigned long fl_break_time ;
   struct file_lock_operations *fl_ops ;
   struct lock_manager_operations *fl_lmops ;
   union __anonunion_fl_u_131 fl_u ;
};
#line 996 "include/linux/fs.h"
struct fasync_struct {
   int magic ;
   int fa_fd ;
   struct fasync_struct *fa_next ;
   struct file *fa_file ;
};
#line 1030
struct file_system_type;
#line 1030
struct super_operations;
#line 1030
struct xattr_handler;
#line 1030
struct mtd_info;
#line 1030 "include/linux/fs.h"
struct super_block {
   struct list_head s_list ;
   dev_t s_dev ;
   unsigned long s_blocksize ;
   unsigned char s_blocksize_bits ;
   unsigned char s_dirt ;
   unsigned long long s_maxbytes ;
   struct file_system_type *s_type ;
   struct super_operations  const  *s_op ;
   struct dquot_operations *dq_op ;
   struct quotactl_ops *s_qcop ;
   struct export_operations  const  *s_export_op ;
   unsigned long s_flags ;
   unsigned long s_magic ;
   struct dentry *s_root ;
   struct rw_semaphore s_umount ;
   struct mutex s_lock ;
   int s_count ;
   int s_syncing ;
   int s_need_sync_fs ;
   atomic_t s_active ;
   void *s_security ;
   struct xattr_handler **s_xattr ;
   struct list_head s_inodes ;
   struct list_head s_dirty ;
   struct list_head s_io ;
   struct list_head s_more_io ;
   struct hlist_head s_anon ;
   struct list_head s_files ;
   struct block_device *s_bdev ;
   struct mtd_info *s_mtd ;
   struct list_head s_instances ;
   struct quota_info s_dquot ;
   int s_frozen ;
   wait_queue_head_t s_wait_unfrozen ;
   char s_id[32] ;
   void *s_fs_info ;
   struct mutex s_vfs_rename_mutex ;
   u32 s_time_gran ;
   char *s_subtype ;
   char *s_options ;
};
#line 1221 "include/linux/fs.h"
struct file_operations {
   struct module *owner ;
   loff_t (*llseek)(struct file * , loff_t  , int  ) ;
   ssize_t (*read)(struct file * , char * , size_t  , loff_t * ) ;
   ssize_t (*write)(struct file * , char const   * , size_t  , loff_t * ) ;
   ssize_t (*aio_read)(struct kiocb * , struct iovec  const  * , unsigned long  ,
                       loff_t  ) ;
   ssize_t (*aio_write)(struct kiocb * , struct iovec  const  * , unsigned long  ,
                        loff_t  ) ;
   int (*readdir)(struct file * , void * , int (*)(void * , char const   * , int  ,
                                                   loff_t  , u64  , unsigned int  ) ) ;
   unsigned int (*poll)(struct file * , struct poll_table_struct * ) ;
   int (*ioctl)(struct inode * , struct file * , unsigned int  , unsigned long  ) ;
   long (*unlocked_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   long (*compat_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   int (*mmap)(struct file * , struct vm_area_struct * ) ;
   int (*open)(struct inode * , struct file * ) ;
   int (*flush)(struct file * , fl_owner_t id ) ;
   int (*release)(struct inode * , struct file * ) ;
   int (*fsync)(struct file * , struct dentry * , int datasync ) ;
   int (*aio_fsync)(struct kiocb * , int datasync ) ;
   int (*fasync)(int  , struct file * , int  ) ;
   int (*lock)(struct file * , int  , struct file_lock * ) ;
   ssize_t (*sendpage)(struct file * , struct page * , int  , size_t  , loff_t * ,
                       int  ) ;
   unsigned long (*get_unmapped_area)(struct file * , unsigned long  , unsigned long  ,
                                      unsigned long  , unsigned long  ) ;
   int (*check_flags)(int  ) ;
   int (*dir_notify)(struct file *filp , unsigned long arg ) ;
   int (*flock)(struct file * , int  , struct file_lock * ) ;
   ssize_t (*splice_write)(struct pipe_inode_info * , struct file * , loff_t * , size_t  ,
                           unsigned int  ) ;
   ssize_t (*splice_read)(struct file * , loff_t * , struct pipe_inode_info * , size_t  ,
                          unsigned int  ) ;
   int (*setlease)(struct file * , long  , struct file_lock ** ) ;
};
#line 1251 "include/linux/fs.h"
struct inode_operations {
   int (*create)(struct inode * , struct dentry * , int  , struct nameidata * ) ;
   struct dentry *(*lookup)(struct inode * , struct dentry * , struct nameidata * ) ;
   int (*link)(struct dentry * , struct inode * , struct dentry * ) ;
   int (*unlink)(struct inode * , struct dentry * ) ;
   int (*symlink)(struct inode * , struct dentry * , char const   * ) ;
   int (*mkdir)(struct inode * , struct dentry * , int  ) ;
   int (*rmdir)(struct inode * , struct dentry * ) ;
   int (*mknod)(struct inode * , struct dentry * , int  , dev_t  ) ;
   int (*rename)(struct inode * , struct dentry * , struct inode * , struct dentry * ) ;
   int (*readlink)(struct dentry * , char * , int  ) ;
   void *(*follow_link)(struct dentry * , struct nameidata * ) ;
   void (*put_link)(struct dentry * , struct nameidata * , void * ) ;
   void (*truncate)(struct inode * ) ;
   int (*permission)(struct inode * , int  , struct nameidata * ) ;
   int (*setattr)(struct dentry * , struct iattr * ) ;
   int (*getattr)(struct vfsmount *mnt , struct dentry * , struct kstat * ) ;
   int (*setxattr)(struct dentry * , char const   * , void const   * , size_t  , int  ) ;
   ssize_t (*getxattr)(struct dentry * , char const   * , void * , size_t  ) ;
   ssize_t (*listxattr)(struct dentry * , char * , size_t  ) ;
   int (*removexattr)(struct dentry * , char const   * ) ;
   void (*truncate_range)(struct inode * , loff_t  , loff_t  ) ;
   long (*fallocate)(struct inode *inode , int mode , loff_t offset , loff_t len ) ;
};
#line 1292 "include/linux/fs.h"
struct super_operations {
   struct inode *(*alloc_inode)(struct super_block *sb ) ;
   void (*destroy_inode)(struct inode * ) ;
   void (*dirty_inode)(struct inode * ) ;
   int (*write_inode)(struct inode * , int  ) ;
   void (*drop_inode)(struct inode * ) ;
   void (*delete_inode)(struct inode * ) ;
   void (*put_super)(struct super_block * ) ;
   void (*write_super)(struct super_block * ) ;
   int (*sync_fs)(struct super_block *sb , int wait ) ;
   void (*write_super_lockfs)(struct super_block * ) ;
   void (*unlockfs)(struct super_block * ) ;
   int (*statfs)(struct dentry * , struct kstatfs * ) ;
   int (*remount_fs)(struct super_block * , int * , char * ) ;
   void (*clear_inode)(struct inode * ) ;
   void (*umount_begin)(struct super_block * ) ;
   int (*show_options)(struct seq_file * , struct vfsmount * ) ;
   int (*show_stats)(struct seq_file * , struct vfsmount * ) ;
   ssize_t (*quota_read)(struct super_block * , int  , char * , size_t  , loff_t  ) ;
   ssize_t (*quota_write)(struct super_block * , int  , char const   * , size_t  ,
                          loff_t  ) ;
};
#line 1474 "include/linux/fs.h"
struct file_system_type {
   char const   *name ;
   int fs_flags ;
   int (*get_sb)(struct file_system_type * , int  , char const   * , void * , struct vfsmount * ) ;
   void (*kill_sb)(struct super_block * ) ;
   struct module *owner ;
   struct file_system_type *next ;
   struct list_head fs_supers ;
   struct lock_class_key s_lock_key ;
   struct lock_class_key s_umount_key ;
   struct lock_class_key i_lock_key ;
   struct lock_class_key i_mutex_key ;
   struct lock_class_key i_mutex_dir_key ;
   struct lock_class_key i_alloc_sem_key ;
};
#line 24 "include/linux/usb.h"
struct usb_device;
#line 25
struct usb_driver;
#line 26
struct wusb_dev;
#line 45
struct ep_device;
#line 61 "include/linux/usb.h"
struct usb_host_endpoint {
   struct usb_endpoint_descriptor desc ;
   struct list_head urb_list ;
   void *hcpriv ;
   struct ep_device *ep_dev ;
   unsigned char *extra ;
   int extralen ;
   int enabled ;
};
#line 73 "include/linux/usb.h"
struct usb_host_interface {
   struct usb_interface_descriptor desc ;
   struct usb_host_endpoint *endpoint ;
   char *string ;
   unsigned char *extra ;
   int extralen ;
};
#line 86
enum usb_interface_condition {
    USB_INTERFACE_UNBOUND = 0,
    USB_INTERFACE_BINDING = 1,
    USB_INTERFACE_BOUND = 2,
    USB_INTERFACE_UNBINDING = 3
} ;
#line 144 "include/linux/usb.h"
struct usb_interface {
   struct usb_host_interface *altsetting ;
   struct usb_host_interface *cur_altsetting ;
   unsigned int num_altsetting ;
   struct usb_interface_assoc_descriptor *intf_assoc ;
   int minor ;
   enum usb_interface_condition condition ;
   unsigned int is_active : 1 ;
   unsigned int sysfs_files_created : 1 ;
   unsigned int needs_remote_wakeup : 1 ;
   struct device dev ;
   struct device *usb_dev ;
   int pm_usage_cnt ;
};
#line 203 "include/linux/usb.h"
struct usb_interface_cache {
   unsigned int num_altsetting ;
   struct kref ref ;
   struct usb_host_interface altsetting[0] ;
};
#line 255 "include/linux/usb.h"
struct usb_host_config {
   struct usb_config_descriptor desc ;
   char *string ;
   struct usb_interface_assoc_descriptor *intf_assoc[32 / 2] ;
   struct usb_interface *interface[32] ;
   struct usb_interface_cache *intf_cache[32] ;
   unsigned char *extra ;
   int extralen ;
};
#line 286 "include/linux/usb.h"
struct usb_devmap {
   unsigned long devicemap[128UL / (8UL * sizeof(unsigned long ))] ;
};
#line 293
struct mon_bus;
#line 293 "include/linux/usb.h"
struct usb_bus {
   struct device *controller ;
   int busnum ;
   char *bus_name ;
   u8 uses_dma ;
   u8 otg_port ;
   unsigned int is_b_host : 1 ;
   unsigned int b_hnp_enable : 1 ;
   int devnum_next ;
   struct usb_devmap devmap ;
   struct usb_device *root_hub ;
   struct list_head bus_list ;
   int bandwidth_allocated ;
   int bandwidth_int_reqs ;
   int bandwidth_isoc_reqs ;
   struct dentry *usbfs_dentry ;
   struct device *dev ;
   struct mon_bus *mon_bus ;
   int monitored ;
};
#line 343
struct usb_tt;
#line 408 "include/linux/usb.h"
struct usb_device {
   int devnum ;
   char devpath[16] ;
   enum usb_device_state state ;
   enum usb_device_speed speed ;
   struct usb_tt *tt ;
   int ttport ;
   unsigned int toggle[2] ;
   struct usb_device *parent ;
   struct usb_bus *bus ;
   struct usb_host_endpoint ep0 ;
   struct device dev ;
   struct usb_device_descriptor descriptor ;
   struct usb_host_config *config ;
   struct usb_host_config *actconfig ;
   struct usb_host_endpoint *ep_in[16] ;
   struct usb_host_endpoint *ep_out[16] ;
   char **rawdescriptors ;
   unsigned short bus_mA ;
   u8 portnum ;
   u8 level ;
   unsigned int can_submit : 1 ;
   unsigned int discon_suspended : 1 ;
   unsigned int persist_enabled : 1 ;
   unsigned int have_langid : 1 ;
   unsigned int authorized : 1 ;
   unsigned int authenticated : 1 ;
   unsigned int wusb : 1 ;
   int string_langid ;
   char *product ;
   char *manufacturer ;
   char *serial ;
   struct list_head filelist ;
   struct device *usb_classdev ;
   struct dentry *usbfs_dentry ;
   int maxchild ;
   struct usb_device *children[31] ;
   int pm_usage_cnt ;
   u32 quirks ;
   atomic_t urbnum ;
   unsigned long active_duration ;
   struct delayed_work autosuspend ;
   struct mutex pm_mutex ;
   unsigned long last_busy ;
   int autosuspend_delay ;
   unsigned long connect_time ;
   unsigned int auto_pm : 1 ;
   unsigned int do_remote_wakeup : 1 ;
   unsigned int reset_resume : 1 ;
   unsigned int autosuspend_disabled : 1 ;
   unsigned int autoresume_disabled : 1 ;
   unsigned int skip_sys_resume : 1 ;
   struct wusb_dev *wusb_dev ;
};
#line 915 "include/linux/usb.h"
struct usb_dynids {
   spinlock_t lock ;
   struct list_head list ;
};
#line 934 "include/linux/usb.h"
struct usbdrv_wrap {
   struct device_driver driver ;
   int for_devices ;
};
#line 991 "include/linux/usb.h"
struct usb_driver {
   char const   *name ;
   int (*probe)(struct usb_interface *intf , struct usb_device_id  const  *id ) ;
   void (*disconnect)(struct usb_interface *intf ) ;
   int (*ioctl)(struct usb_interface *intf , unsigned int code , void *buf ) ;
   int (*suspend)(struct usb_interface *intf , pm_message_t message ) ;
   int (*resume)(struct usb_interface *intf ) ;
   int (*reset_resume)(struct usb_interface *intf ) ;
   int (*pre_reset)(struct usb_interface *intf ) ;
   int (*post_reset)(struct usb_interface *intf ) ;
   struct usb_device_id  const  *id_table ;
   struct usb_dynids dynids ;
   struct usbdrv_wrap drvwrap ;
   unsigned int no_dynamic_id : 1 ;
   unsigned int supports_autosuspend : 1 ;
};
#line 1118 "include/linux/usb.h"
struct usb_iso_packet_descriptor {
   unsigned int offset ;
   unsigned int length ;
   unsigned int actual_length ;
   int status ;
};
#line 1125
struct urb;
#line 1127 "include/linux/usb.h"
struct usb_anchor {
   struct list_head urb_list ;
   wait_queue_head_t wait ;
   spinlock_t lock ;
};
#line 1309 "include/linux/usb.h"
struct urb {
   struct kref kref ;
   void *hcpriv ;
   atomic_t use_count ;
   u8 reject ;
   int unlinked ;
   struct list_head urb_list ;
   struct list_head anchor_list ;
   struct usb_anchor *anchor ;
   struct usb_device *dev ;
   struct usb_host_endpoint *ep ;
   unsigned int pipe ;
   int status ;
   unsigned int transfer_flags ;
   void *transfer_buffer ;
   dma_addr_t transfer_dma ;
   int transfer_buffer_length ;
   int actual_length ;
   unsigned char *setup_packet ;
   dma_addr_t setup_dma ;
   int start_frame ;
   int number_of_packets ;
   int interval ;
   int error_count ;
   void *context ;
   void (*complete)(struct urb * ) ;
   struct usb_iso_packet_descriptor iso_frame_desc[0] ;
};
#line 43 "include/linux/input.h"
struct input_id {
   __u16 bustype ;
   __u16 vendor ;
   __u16 product ;
   __u16 version ;
};
#line 743 "include/linux/input.h"
struct ff_replay {
   __u16 length ;
   __u16 delay ;
};
#line 753 "include/linux/input.h"
struct ff_trigger {
   __u16 button ;
   __u16 interval ;
};
#line 770 "include/linux/input.h"
struct ff_envelope {
   __u16 attack_length ;
   __u16 attack_level ;
   __u16 fade_length ;
   __u16 fade_level ;
};
#line 782 "include/linux/input.h"
struct ff_constant_effect {
   __s16 level ;
   struct ff_envelope envelope ;
};
#line 793 "include/linux/input.h"
struct ff_ramp_effect {
   __s16 start_level ;
   __s16 end_level ;
   struct ff_envelope envelope ;
};
#line 809 "include/linux/input.h"
struct ff_condition_effect {
   __u16 right_saturation ;
   __u16 left_saturation ;
   __s16 right_coeff ;
   __s16 left_coeff ;
   __u16 deadband ;
   __s16 center ;
};
#line 838 "include/linux/input.h"
struct ff_periodic_effect {
   __u16 waveform ;
   __u16 period ;
   __s16 magnitude ;
   __s16 offset ;
   __u16 phase ;
   struct ff_envelope envelope ;
   __u32 custom_len ;
   __s16 *custom_data ;
};
#line 859 "include/linux/input.h"
struct ff_rumble_effect {
   __u16 strong_magnitude ;
   __u16 weak_magnitude ;
};
#line 887 "include/linux/input.h"
union __anonunion_u_137 {
   struct ff_constant_effect constant ;
   struct ff_ramp_effect ramp ;
   struct ff_periodic_effect periodic ;
   struct ff_condition_effect condition[2] ;
   struct ff_rumble_effect rumble ;
};
#line 887 "include/linux/input.h"
struct ff_effect {
   __u16 type ;
   __s16 id ;
   __u16 direction ;
   struct ff_trigger trigger ;
   struct ff_replay replay ;
   union __anonunion_u_137 u ;
};
#line 1027
struct ff_device;
#line 1027
struct input_handle;
#line 1027 "include/linux/input.h"
struct input_dev {
   char const   *name ;
   char const   *phys ;
   char const   *uniq ;
   struct input_id id ;
   unsigned long evbit[(((unsigned long )(31 + 1) + 8UL * sizeof(long )) - 1UL) / (8UL * sizeof(long ))] ;
   unsigned long keybit[(((unsigned long )(511 + 1) + 8UL * sizeof(long )) - 1UL) / (8UL * sizeof(long ))] ;
   unsigned long relbit[(((unsigned long )(15 + 1) + 8UL * sizeof(long )) - 1UL) / (8UL * sizeof(long ))] ;
   unsigned long absbit[(((unsigned long )(63 + 1) + 8UL * sizeof(long )) - 1UL) / (8UL * sizeof(long ))] ;
   unsigned long mscbit[(((unsigned long )(7 + 1) + 8UL * sizeof(long )) - 1UL) / (8UL * sizeof(long ))] ;
   unsigned long ledbit[(((unsigned long )(15 + 1) + 8UL * sizeof(long )) - 1UL) / (8UL * sizeof(long ))] ;
   unsigned long sndbit[(((unsigned long )(7 + 1) + 8UL * sizeof(long )) - 1UL) / (8UL * sizeof(long ))] ;
   unsigned long ffbit[(((unsigned long )(127 + 1) + 8UL * sizeof(long )) - 1UL) / (8UL * sizeof(long ))] ;
   unsigned long swbit[(((unsigned long )(15 + 1) + 8UL * sizeof(long )) - 1UL) / (8UL * sizeof(long ))] ;
   unsigned int keycodemax ;
   unsigned int keycodesize ;
   void *keycode ;
   int (*setkeycode)(struct input_dev *dev , int scancode , int keycode ) ;
   int (*getkeycode)(struct input_dev *dev , int scancode , int *keycode ) ;
   struct ff_device *ff ;
   unsigned int repeat_key ;
   struct timer_list timer ;
   int sync ;
   int abs[63 + 1] ;
   int rep[1 + 1] ;
   unsigned long key[(((unsigned long )(511 + 1) + 8UL * sizeof(long )) - 1UL) / (8UL * sizeof(long ))] ;
   unsigned long led[(((unsigned long )(15 + 1) + 8UL * sizeof(long )) - 1UL) / (8UL * sizeof(long ))] ;
   unsigned long snd[(((unsigned long )(7 + 1) + 8UL * sizeof(long )) - 1UL) / (8UL * sizeof(long ))] ;
   unsigned long sw[(((unsigned long )(15 + 1) + 8UL * sizeof(long )) - 1UL) / (8UL * sizeof(long ))] ;
   int absmax[63 + 1] ;
   int absmin[63 + 1] ;
   int absfuzz[63 + 1] ;
   int absflat[63 + 1] ;
   int (*open)(struct input_dev *dev ) ;
   void (*close)(struct input_dev *dev ) ;
   int (*flush)(struct input_dev *dev , struct file *file ) ;
   int (*event)(struct input_dev *dev , unsigned int type , unsigned int code , int value ) ;
   struct input_handle *grab ;
   spinlock_t event_lock ;
   struct mutex mutex ;
   unsigned int users ;
   int going_away ;
   struct device dev ;
   struct list_head h_list ;
   struct list_head node ;
};
#line 1170 "include/linux/input.h"
struct input_handler {
   void *private ;
   void (*event)(struct input_handle *handle , unsigned int type , unsigned int code ,
                 int value ) ;
   int (*connect)(struct input_handler *handler , struct input_dev *dev , struct input_device_id  const  *id ) ;
   void (*disconnect)(struct input_handle *handle ) ;
   void (*start)(struct input_handle *handle ) ;
   struct file_operations  const  *fops ;
   int minor ;
   char const   *name ;
   struct input_device_id  const  *id_table ;
   struct input_device_id  const  *blacklist ;
   struct list_head h_list ;
   struct list_head node ;
};
#line 1202 "include/linux/input.h"
struct input_handle {
   void *private ;
   int open ;
   char const   *name ;
   struct input_dev *dev ;
   struct input_handler *handler ;
   struct list_head d_node ;
   struct list_head h_node ;
};
#line 1335 "include/linux/input.h"
struct ff_device {
   int (*upload)(struct input_dev *dev , struct ff_effect *effect , struct ff_effect *old ) ;
   int (*erase)(struct input_dev *dev , int effect_id ) ;
   int (*playback)(struct input_dev *dev , int effect_id , int value ) ;
   void (*set_gain)(struct input_dev *dev , u16 gain ) ;
   void (*set_autocenter)(struct input_dev *dev , u16 magnitude ) ;
   void (*destroy)(struct ff_device * ) ;
   void *private ;
   unsigned long ffbit[(((unsigned long )(127 + 1) + 8UL * sizeof(long )) - 1UL) / (8UL * sizeof(long ))] ;
   struct mutex mutex ;
   int max_effects ;
   struct ff_effect *effects ;
   struct file *effect_owners[] ;
};
#line 96 "/work/ldvuser/novikov/work/current--X--drivers/input/misc/keyspan_remote.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/input/misc/keyspan_remote.c"
struct keyspan_message {
   u16 system ;
   u8 button ;
   u8 toggle ;
};
#line 103 "/work/ldvuser/novikov/work/current--X--drivers/input/misc/keyspan_remote.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/input/misc/keyspan_remote.c"
struct bit_tester {
   u32 tester ;
   int len ;
   int pos ;
   int bits_left ;
   u8 buffer[32] ;
};
#line 112
static unsigned short const   keyspan_key_table[32] ;
#line 112
static unsigned short const   keyspan_key_table[32] ;
#line 112 "/work/ldvuser/novikov/work/current--X--drivers/input/misc/keyspan_remote.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/input/misc/keyspan_remote.c"
struct usb_keyspan {
   char name[128] ;
   char phys[64] ;
   unsigned short keymap[sizeof(keyspan_key_table) / sizeof(keyspan_key_table[0]) + (sizeof(char [1 - 2 * 0]) - 1UL)] ;
   struct usb_device *udev ;
   struct input_dev *input ;
   struct usb_interface *interface ;
   struct usb_endpoint_descriptor *in_endpoint ;
   struct urb *irq_urb ;
   int open ;
   dma_addr_t in_dma ;
   unsigned char *in_buffer ;
   struct bit_tester data ;
   int stage ;
   int toggle ;
};
#line 182 "include/linux/timer.h"
enum hrtimer_restart;
#line 16 "include/linux/namei.h"
enum __anonenum_123___0 {
    MAX_NESTED_LINKS___0 = 8
} ;
#line 112 "/work/ldvuser/novikov/work/current--X--drivers/input/misc/keyspan_remote.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/input/misc/keyspan_remote.c"
static unsigned short const   keyspan_key_table[32] ;
#line 1 "<compiler builtins>"
void *__builtin_memcpy(void * , void const   * , unsigned long  ) ;
#line 60 "include/asm/bitops.h"
__inline static void ( __attribute__((__always_inline__)) __set_bit)(int nr , void volatile   *addr ) 
{ 


  {
#line 62
  __asm__  volatile   ("bts %1,%0": "+m" (*((long volatile   *)addr)): "Ir" (nr): "memory");
#line 63
  return;
}
}
#line 94 "include/asm/bitops.h"
__inline static void ( __attribute__((__always_inline__)) __clear_bit)(int nr , void volatile   *addr ) 
{ 


  {
#line 96
  __asm__  volatile   ("btr %1,%0": "+m" (*((long volatile   *)addr)): "Ir" (nr));
#line 97
  return;
}
}
#line 155 "include/linux/kernel.h"
extern int ( /* format attribute */  snprintf)(char *buf , size_t size , char const   *fmt 
                                               , ...) ;
#line 185
extern int ( /* format attribute */  printk)(char const   *fmt  , ...) ;
#line 33 "include/asm/string_64.h"
extern void *__memcpy(void *to , void const   *from , size_t len ) ;
#line 53
extern unsigned long strlen(char const   *s ) ;
#line 28 "include/linux/string.h"
extern size_t strlcpy(char * , char const   * , size_t  ) ;
#line 37
extern size_t strlcat(char * , char const   * , __kernel_size_t  ) ;
#line 100 "include/linux/slab.h"
extern void kfree(void const   * ) ;
#line 202 "include/linux/slub_def.h"
extern void *__kmalloc(size_t size , gfp_t flags ) ;
#line 209 "include/linux/slub_def.h"
__inline static void *( __attribute__((__always_inline__)) kmalloc)(size_t size ,
                                                                    gfp_t flags ) 
{ 
  void *tmp___2 ;

  {
#line 224
  tmp___2 = __kmalloc(size, flags);
#line 224
  return (tmp___2);
}
}
#line 274 "include/linux/slab.h"
__inline static void *( __attribute__((__always_inline__)) kzalloc)(size_t size ,
                                                                    gfp_t flags ) 
{ 
  void *tmp ;

  {
#line 276
  tmp = kmalloc(size, flags | 32768U);
#line 276
  return (tmp);
}
}
#line 136 "include/linux/moduleparam.h"
extern int param_set_int(char const   *val , struct kernel_param *kp ) ;
#line 137
extern int param_get_int(char *buffer , struct kernel_param *kp ) ;
#line 65 "include/linux/module.h"
int init_module(void) ;
#line 66
void cleanup_module(void) ;
#line 84
extern struct module __this_module ;
#line 382 "include/linux/device.h"
__inline static char const   *( __attribute__((__always_inline__)) dev_name)(struct device *dev ) 
{ 


  {
#line 385
  return (dev->bus_id);
}
}
#line 407 "include/linux/device.h"
__inline static void *( __attribute__((__always_inline__)) dev_get_drvdata)(struct device *dev ) 
{ 


  {
#line 409
  return (dev->driver_data);
}
}
#line 412 "include/linux/device.h"
__inline static void ( __attribute__((__always_inline__)) dev_set_drvdata)(struct device *dev ,
                                                                           void *data ) 
{ 


  {
#line 414
  dev->driver_data = data;
#line 415
  return;
}
}
#line 483
extern char const   *dev_driver_string(struct device *dev ) ;
#line 172 "include/linux/usb.h"
__inline static void *( __attribute__((__always_inline__)) usb_get_intfdata)(struct usb_interface *intf ) 
{ 
  void *tmp ;

  {
#line 174
  tmp = dev_get_drvdata(& intf->dev);
#line 174
  return (tmp);
}
}
#line 177 "include/linux/usb.h"
__inline static void ( __attribute__((__always_inline__)) usb_set_intfdata)(struct usb_interface *intf ,
                                                                            void *data ) 
{ 


  {
#line 179
  dev_set_drvdata(& intf->dev, data);
#line 180
  return;
}
}
#line 609 "include/linux/usb.h"
__inline static int ( __attribute__((__always_inline__)) usb_make_path)(struct usb_device *dev ,
                                                                        char *buf ,
                                                                        size_t size ) 
{ 
  int actual ;

  {
#line 612
  actual = snprintf(buf, size, "usb-%s-%s", (dev->bus)->bus_name, dev->devpath);
#line 614
  return (actual >= (int )size ? -1 : actual);
}
}
#line 648 "include/linux/usb.h"
__inline static int ( __attribute__((__always_inline__)) usb_endpoint_dir_in)(struct usb_endpoint_descriptor  const  *epd ) 
{ 


  {
#line 650
  return (((int const   )epd->bEndpointAddress & (int const   )128) == (int const   )128);
}
}
#line 698 "include/linux/usb.h"
__inline static int ( __attribute__((__always_inline__)) usb_endpoint_xfer_int)(struct usb_endpoint_descriptor  const  *epd ) 
{ 


  {
#line 701
  return (((int const   )epd->bmAttributes & (int const   )3) == (int const   )3);
}
}
#line 752 "include/linux/usb.h"
__inline static int ( __attribute__((__always_inline__)) usb_endpoint_is_int_in)(struct usb_endpoint_descriptor  const  *epd ) 
{ 
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 755
  tmp = usb_endpoint_xfer_int(epd);
#line 755
  if (tmp) {
#line 755
    tmp___0 = usb_endpoint_dir_in(epd);
#line 755
    if (tmp___0) {
#line 755
      tmp___1 = 1;
    } else {
#line 755
      tmp___1 = 0;
    }
  } else {
#line 755
    tmp___1 = 0;
  }
#line 755
  return (tmp___1);
}
}
#line 1073
extern int usb_register_driver(struct usb_driver * , struct module * , char const   * ) ;
#line 1075 "include/linux/usb.h"
__inline static int ( __attribute__((__always_inline__)) usb_register)(struct usb_driver *driver ) 
{ 
  int tmp ;

  {
#line 1077
  tmp = usb_register_driver(driver, & __this_module, "keyspan_remote");
#line 1077
  return (tmp);
}
}
#line 1079
extern void usb_deregister(struct usb_driver * ) ;
#line 1425 "include/linux/usb.h"
__inline static void ( __attribute__((__always_inline__)) usb_fill_int_urb)(struct urb *urb ,
                                                                            struct usb_device *dev ,
                                                                            unsigned int pipe ,
                                                                            void *transfer_buffer ,
                                                                            int buffer_length ,
                                                                            void (*complete_fn)(struct urb * ) ,
                                                                            void *context ,
                                                                            int interval ) 
{ 


  {
#line 1434
  urb->dev = dev;
#line 1435
  urb->pipe = pipe;
#line 1436
  urb->transfer_buffer = transfer_buffer;
#line 1437
  urb->transfer_buffer_length = buffer_length;
#line 1438
  urb->complete = complete_fn;
#line 1439
  urb->context = context;
#line 1440
  if ((unsigned int )dev->speed == (unsigned int )USB_SPEED_HIGH) {
#line 1441
    urb->interval = 1 << (interval - 1);
  } else {
#line 1443
    urb->interval = interval;
  }
#line 1444
  urb->start_frame = -1;
#line 1445
  return;
}
}
#line 1448
struct urb *usb_alloc_urb(int iso_packets , gfp_t mem_flags ) ;
#line 1449
void usb_free_urb(struct urb *urb ) ;
#line 1452
extern int usb_submit_urb(struct urb *urb , gfp_t mem_flags ) ;
#line 1454
extern void usb_kill_urb(struct urb *urb ) ;
#line 1486
extern void *usb_buffer_alloc(struct usb_device *dev , size_t size , gfp_t mem_flags ,
                              dma_addr_t *dma ) ;
#line 1488
extern void usb_buffer_free(struct usb_device *dev , size_t size , void *addr , dma_addr_t dma ) ;
#line 1511
extern int usb_control_msg(struct usb_device *dev , unsigned int pipe , __u8 request ,
                           __u8 requesttype , __u16 value , __u16 index , void *data ,
                           __u16 size , int timeout ) ;
#line 1644 "include/linux/usb.h"
__inline static unsigned int ( __attribute__((__always_inline__)) __create_pipe)(struct usb_device *dev ,
                                                                                 unsigned int endpoint ) 
{ 


  {
#line 1647
  return ((unsigned int )(dev->devnum << 8) | (endpoint << 15));
}
}
#line 1221 "include/linux/input.h"
extern struct input_dev *input_allocate_device(void) ;
#line 1222
extern void input_free_device(struct input_dev *dev ) ;
#line 1235 "include/linux/input.h"
__inline static void *( __attribute__((__always_inline__)) input_get_drvdata)(struct input_dev *dev ) 
{ 
  void *tmp ;

  {
#line 1237
  tmp = dev_get_drvdata(& dev->dev);
#line 1237
  return (tmp);
}
}
#line 1240 "include/linux/input.h"
__inline static void ( __attribute__((__always_inline__)) input_set_drvdata)(struct input_dev *dev ,
                                                                             void *data ) 
{ 


  {
#line 1242
  dev_set_drvdata(& dev->dev, data);
#line 1243
  return;
}
}
#line 1245
extern int ( __attribute__((__warn_unused_result__)) input_register_device)(struct input_dev * ) ;
#line 1246
extern void input_unregister_device(struct input_dev * ) ;
#line 1262
extern void input_event(struct input_dev *dev , unsigned int type , unsigned int code ,
                        int value ) ;
#line 1265 "include/linux/input.h"
__inline static void ( __attribute__((__always_inline__)) input_report_key)(struct input_dev *dev ,
                                                                            unsigned int code ,
                                                                            int value ) 
{ 


  {
#line 1267
  input_event(dev, 1, code, ! (! value));
#line 1268
  return;
}
}
#line 1290 "include/linux/input.h"
__inline static void ( __attribute__((__always_inline__)) input_sync)(struct input_dev *dev ) 
{ 


  {
#line 1292
  input_event(dev, 0, 0, 0);
#line 1293
  return;
}
}
#line 1295
extern void input_set_capability(struct input_dev *dev , unsigned int type , unsigned int code ) ;
#line 16 "include/linux/usb/input.h"
__inline static void ( __attribute__((__always_inline__)) usb_to_input_id)(struct usb_device  const  *dev ,
                                                                           struct input_id *id ) 
{ 


  {
#line 19
  id->bustype = 3;
#line 20
  id->vendor = (__le16 )dev->descriptor.idVendor;
#line 21
  id->product = (__le16 )dev->descriptor.idProduct;
#line 22
  id->version = (__le16 )dev->descriptor.bcdDevice;
#line 23
  return;
}
}
#line 28 "/work/ldvuser/novikov/work/current--X--drivers/input/misc/keyspan_remote.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/input/misc/keyspan_remote.c"
static int debug  ;
#line 29 "/work/ldvuser/novikov/work/current--X--drivers/input/misc/keyspan_remote.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/input/misc/keyspan_remote.c"
static char const   __param_str_debug[6]  = {      'd',      'e',      'b',      'u', 
        'g',      '\000'};
#line 29 "/work/ldvuser/novikov/work/current--X--drivers/input/misc/keyspan_remote.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/input/misc/keyspan_remote.c"
static struct kernel_param  const  __param_debug  __attribute__((__used__, __unused__,
__section__("__param"), __aligned__(sizeof(void *))))  =    {__param_str_debug, 292, & param_set_int, & param_get_int, {& debug}};
#line 29 "/work/ldvuser/novikov/work/current--X--drivers/input/misc/keyspan_remote.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/input/misc/keyspan_remote.c"
static char const   __mod_debugtype29[19]  __attribute__((__used__, __unused__, __section__(".modinfo")))  = 
#line 29
  {      'p',      'a',      'r',      'm', 
        't',      'y',      'p',      'e', 
        '=',      'd',      'e',      'b', 
        'u',      'g',      ':',      'i', 
        'n',      't',      '\000'};
#line 30 "/work/ldvuser/novikov/work/current--X--drivers/input/misc/keyspan_remote.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/input/misc/keyspan_remote.c"
static char const   __mod_debug30[55]  __attribute__((__used__, __unused__, __section__(".modinfo")))  = 
#line 30
  {      'p',      'a',      'r',      'm', 
        '=',      'd',      'e',      'b', 
        'u',      'g',      ':',      'E', 
        'n',      'a',      'b',      'l', 
        'e',      ' ',      'e',      'x', 
        't',      'r',      'a',      ' ', 
        'd',      'e',      'b',      'u', 
        'g',      ' ',      'm',      'e', 
        's',      's',      'a',      'g', 
        'e',      's',      ' ',      'a', 
        'n',      'd',      ' ',      'i', 
        'n',      'f',      'o',      'r', 
        'm',      'a',      't',      'i', 
        'o',      'n',      '\000'};
#line 54 "/work/ldvuser/novikov/work/current--X--drivers/input/misc/keyspan_remote.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/input/misc/keyspan_remote.c"
static unsigned short const   keyspan_key_table[32]  = 
#line 54
  {      0,      0,      128,      200, 
        0,      165,      168,      159, 
        163,      0,      0,      0, 
        119,      115,      0,      0, 
        0,      114,      0,      103, 
        0,      113,      105,      28, 
        106,      0,      0,      108, 
        0,      55,      0,      139};
#line 90 "/work/ldvuser/novikov/work/current--X--drivers/input/misc/keyspan_remote.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/input/misc/keyspan_remote.c"
static struct usb_device_id keyspan_table[1]  = {      {1 | 2, 1741, 514, (unsigned short)0, (unsigned short)0, (unsigned char)0, (unsigned char)0,
      (unsigned char)0, (unsigned char)0, (unsigned char)0, (unsigned char)0, 0UL}};
#line 131
static struct usb_driver keyspan_driver ;
#line 136 "/work/ldvuser/novikov/work/current--X--drivers/input/misc/keyspan_remote.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/input/misc/keyspan_remote.c"
static void keyspan_print(struct usb_keyspan *dev ) 
{ 
  char codes[4 * 8] ;
  int i ;
  char const   *tmp ;
  char const   *tmp___0 ;

  {
#line 141
  i = 0;
#line 141
  while (1) {
#line 141
    if (i < 8) {

    } else {
#line 141
      break;
    }
#line 142
    snprintf(codes + i * 3, 4, "%02x ", *(dev->in_buffer + i));
#line 141
    i = i + 1;
  }
#line 144
  tmp = dev_name(& (dev->udev)->dev);
#line 144
  tmp___0 = dev_driver_string(& (dev->udev)->dev);
#line 144
  printk("<6>%s %s: %s\n", tmp___0, tmp, codes);
#line 145
  return;
}
}
#line 151 "/work/ldvuser/novikov/work/current--X--drivers/input/misc/keyspan_remote.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/input/misc/keyspan_remote.c"
static int keyspan_load_tester(struct usb_keyspan *dev , int bits_needed ) 
{ 
  int tmp___1 ;

  {
#line 153
  if (dev->data.bits_left >= bits_needed) {
#line 154
    return (0);
  } else {

  }
#line 160
  if (dev->data.pos >= dev->data.len) {
#line 164
    return (-1);
  } else {

  }
#line 168
  while (1) {
#line 168
    if ((unsigned long )(dev->data.bits_left + 7) < sizeof(dev->data.tester) * 8UL && dev->data.pos < dev->data.len) {

    } else {
#line 168
      break;
    }
#line 170
    tmp___1 = dev->data.pos;
#line 170
    dev->data.pos = dev->data.pos + 1;
#line 170
    dev->data.tester = dev->data.tester + (u32 )((int )dev->data.buffer[tmp___1] << dev->data.bits_left);
#line 171
    dev->data.bits_left = dev->data.bits_left + 8;
  }
#line 174
  return (0);
}
}
#line 177 "/work/ldvuser/novikov/work/current--X--drivers/input/misc/keyspan_remote.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/input/misc/keyspan_remote.c"
static void keyspan_report_button(struct usb_keyspan *remote , int button , int press ) 
{ 
  struct input_dev *input ;

  {
#line 179
  input = remote->input;
#line 181
  input_event(input, 4, 4, button);
#line 182
  input_report_key(input, remote->keymap[button], press);
#line 183
  input_sync(input);
#line 184
  return;
}
}
#line 189 "/work/ldvuser/novikov/work/current--X--drivers/input/misc/keyspan_remote.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/input/misc/keyspan_remote.c"
static void keyspan_check_data(struct usb_keyspan *remote ) 
{ 
  int i ;
  int found ;
  struct keyspan_message message ;
  size_t __len ;
  void *__ret ;
  size_t __len___0 ;
  void *__ret___0 ;
  int tmp ;
  size_t __len___1 ;
  void *__ret___1 ;

  {
#line 192
  found = 0;
#line 195
  switch (remote->stage) {
  case 0: 
#line 201
  i = 0;
#line 201
  while (1) {
#line 201
    if (i < 8 && (int )*(remote->in_buffer + i) == 255) {

    } else {
#line 201
      break;
    }
#line 201
    i = i + 1;
  }
#line 203
  if (i < 8) {
#line 204
    __len = 8;
#line 204
    if (__len >= (size_t )64) {
#line 204
      __ret = __memcpy(remote->data.buffer, remote->in_buffer, __len);
    } else {
#line 204
      __ret = __builtin_memcpy(remote->data.buffer, remote->in_buffer, __len);
    }
#line 205
    remote->data.len = 8;
#line 206
    remote->data.pos = 0;
#line 207
    remote->data.tester = 0;
#line 208
    remote->data.bits_left = 0;
#line 209
    remote->stage = 1;
  } else {

  }
#line 211
  break;
  case 1: 
#line 218
  __len___0 = 8;
#line 218
  if (__len___0 >= (size_t )64) {
#line 218
    __ret___0 = __memcpy(remote->data.buffer + remote->data.len, remote->in_buffer,
                         __len___0);
  } else {
#line 218
    __ret___0 = __builtin_memcpy(remote->data.buffer + remote->data.len, remote->in_buffer,
                                 __len___0);
  }
#line 219
  remote->data.len = remote->data.len + 8;
#line 221
  found = 0;
#line 222
  while (1) {
#line 222
    if ((remote->data.bits_left >= 14 || remote->data.pos < remote->data.len) && ! found) {

    } else {
#line 222
      break;
    }
#line 223
    i = 0;
#line 223
    while (1) {
#line 223
      if (i < 8) {

      } else {
#line 223
        break;
      }
#line 224
      tmp = keyspan_load_tester(remote, 14);
#line 224
      if (tmp != 0) {
#line 225
        remote->stage = 0;
#line 226
        return;
      } else {

      }
#line 229
      if ((remote->data.tester & 16383U) == 16256U) {
#line 230
        remote->data.tester = remote->data.tester >> 14;
#line 231
        remote->data.bits_left = remote->data.bits_left - 14;
#line 232
        found = 1;
#line 233
        break;
      } else {
#line 235
        remote->data.tester = remote->data.tester >> 1;
#line 236
        remote->data.bits_left = remote->data.bits_left - 1;
      }
#line 223
      i = i + 1;
    }
  }
#line 241
  if (! found) {
#line 242
    remote->stage = 0;
#line 243
    remote->data.len = 0;
  } else {
#line 245
    remote->stage = 2;
  }
#line 247
  break;
  case 2: 
#line 255
  __len___1 = 8;
#line 255
  if (__len___1 >= (size_t )64) {
#line 255
    __ret___1 = __memcpy(remote->data.buffer + remote->data.len, remote->in_buffer,
                         __len___1);
  } else {
#line 255
    __ret___1 = __builtin_memcpy(remote->data.buffer + remote->data.len, remote->in_buffer,
                                 __len___1);
  }
#line 256
  remote->data.len = remote->data.len + 8;
#line 258
  message.system = 0;
#line 259
  i = 0;
#line 259
  while (1) {
#line 259
    if (i < 9) {

    } else {
#line 259
      break;
    }
#line 260
    keyspan_load_tester(remote, 6);
#line 262
    if ((remote->data.tester & 31U) == 24U) {
#line 263
      message.system = (int )message.system << 1;
#line 264
      remote->data.tester = remote->data.tester >> 5;
#line 265
      remote->data.bits_left = remote->data.bits_left - 5;
    } else
#line 266
    if ((remote->data.tester & 63U) == 60U) {
#line 267
      message.system = ((int )message.system << 1) + 1;
#line 268
      remote->data.tester = remote->data.tester >> 6;
#line 269
      remote->data.bits_left = remote->data.bits_left - 6;
    } else {
#line 271
      printk("<3>keyspan_remote: %s - Unknown sequence found in system data.\n\n",
             "keyspan_check_data");
#line 272
      remote->stage = 0;
#line 273
      return;
    }
#line 259
    i = i + 1;
  }
#line 277
  message.button = 0;
#line 278
  i = 0;
#line 278
  while (1) {
#line 278
    if (i < 5) {

    } else {
#line 278
      break;
    }
#line 279
    keyspan_load_tester(remote, 6);
#line 281
    if ((remote->data.tester & 31U) == 24U) {
#line 282
      message.button = (int )message.button << 1;
#line 283
      remote->data.tester = remote->data.tester >> 5;
#line 284
      remote->data.bits_left = remote->data.bits_left - 5;
    } else
#line 285
    if ((remote->data.tester & 63U) == 60U) {
#line 286
      message.button = ((int )message.button << 1) + 1;
#line 287
      remote->data.tester = remote->data.tester >> 6;
#line 288
      remote->data.bits_left = remote->data.bits_left - 6;
    } else {
#line 290
      printk("<3>keyspan_remote: %s - Unknown sequence found in button data.\n\n",
             "keyspan_check_data");
#line 291
      remote->stage = 0;
#line 292
      return;
    }
#line 278
    i = i + 1;
  }
#line 296
  keyspan_load_tester(remote, 6);
#line 297
  if ((remote->data.tester & 31U) == 24U) {
#line 298
    message.toggle = 0;
#line 299
    remote->data.tester = remote->data.tester >> 5;
#line 300
    remote->data.bits_left = remote->data.bits_left - 5;
  } else
#line 301
  if ((remote->data.tester & 63U) == 60U) {
#line 302
    message.toggle = 1;
#line 303
    remote->data.tester = remote->data.tester >> 6;
#line 304
    remote->data.bits_left = remote->data.bits_left - 6;
  } else {
#line 306
    printk("<3>keyspan_remote: %s - Error in message, invalid toggle.\n\n", "keyspan_check_data");
#line 307
    remote->stage = 0;
#line 308
    return;
  }
#line 311
  keyspan_load_tester(remote, 5);
#line 312
  if ((remote->data.tester & 31U) == 0U) {
#line 313
    remote->data.tester = remote->data.tester >> 5;
#line 314
    remote->data.bits_left = remote->data.bits_left - 5;
  } else {
#line 316
    printk("<3>keyspan_remote: Bad message recieved, no stop bit found.\n\n");
  }
#line 323
  if ((int )message.toggle != remote->toggle) {
#line 324
    keyspan_report_button(remote, message.button, 1);
#line 325
    keyspan_report_button(remote, message.button, 0);
#line 326
    remote->toggle = message.toggle;
  } else {

  }
#line 329
  remote->stage = 0;
#line 330
  break;
  }
#line 332
  return;
}
}
#line 337 "/work/ldvuser/novikov/work/current--X--drivers/input/misc/keyspan_remote.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/input/misc/keyspan_remote.c"
static int keyspan_setup(struct usb_device *dev ) 
{ 
  int retval ;
  unsigned int tmp ;
  unsigned int tmp___2 ;
  unsigned int tmp___5 ;

  {
#line 339
  retval = 0;
#line 341
  tmp = __create_pipe(dev, 0);
#line 341
  retval = usb_control_msg(dev, (unsigned int )(2 << 30) | tmp, 17, 64, 22017, 0,
                           (void *)0, 0, 0);
#line 343
  if (retval) {
#line 346
    return (retval);
  } else {

  }
#line 349
  tmp___2 = __create_pipe(dev, 0);
#line 349
  retval = usb_control_msg(dev, (unsigned int )(2 << 30) | tmp___2, 68, 64, 0, 0,
                           (void *)0, 0, 0);
#line 351
  if (retval) {
#line 354
    return (retval);
  } else {

  }
#line 357
  tmp___5 = __create_pipe(dev, 0);
#line 357
  retval = usb_control_msg(dev, (unsigned int )(2 << 30) | tmp___5, 34, 64, 0, 0,
                           (void *)0, 0, 0);
#line 359
  if (retval) {
#line 362
    return (retval);
  } else {

  }
#line 366
  return (retval);
}
}
#line 372 "/work/ldvuser/novikov/work/current--X--drivers/input/misc/keyspan_remote.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/input/misc/keyspan_remote.c"
static void keyspan_irq_recv(struct urb *urb ) 
{ 
  struct usb_keyspan *dev ;
  int retval ;

  {
#line 374
  dev = urb->context;
#line 378
  switch (urb->status) {
  case 0: 
#line 380
  break;
  case -108: 
  case -2: 
  case -104: 
#line 386
  return;
  default: 
#line 389
  goto resubmit;
#line 390
  break;
  }
#line 393
  if (debug) {
#line 394
    keyspan_print(dev);
  } else {

  }
#line 396
  keyspan_check_data(dev);
  resubmit: 
#line 399
  retval = usb_submit_urb(urb, 32U);
#line 400
  if (retval) {
#line 401
    printk("<3>keyspan_remote: %s - usb_submit_urb failed with result: %d\n", "keyspan_irq_recv",
           retval);
  } else {

  }
#line 402
  return;
}
}
#line 404 "/work/ldvuser/novikov/work/current--X--drivers/input/misc/keyspan_remote.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/input/misc/keyspan_remote.c"
static int keyspan_open(struct input_dev *dev ) 
{ 
  struct usb_keyspan *remote ;
  void *tmp ;
  int tmp___0 ;

  {
#line 406
  tmp = input_get_drvdata(dev);
#line 406
  remote = tmp;
#line 408
  (remote->irq_urb)->dev = remote->udev;
#line 409
  tmp___0 = usb_submit_urb(remote->irq_urb, (16U | 64U) | 128U);
#line 409
  if (tmp___0) {
#line 410
    return (-5);
  } else {

  }
#line 412
  return (0);
}
}
#line 415 "/work/ldvuser/novikov/work/current--X--drivers/input/misc/keyspan_remote.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/input/misc/keyspan_remote.c"
static void keyspan_close(struct input_dev *dev ) 
{ 
  struct usb_keyspan *remote ;
  void *tmp ;

  {
#line 417
  tmp = input_get_drvdata(dev);
#line 417
  remote = tmp;
#line 419
  usb_kill_urb(remote->irq_urb);
#line 420
  return;
}
}
#line 422 "/work/ldvuser/novikov/work/current--X--drivers/input/misc/keyspan_remote.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/input/misc/keyspan_remote.c"
static struct usb_endpoint_descriptor *keyspan_get_in_endpoint(struct usb_host_interface *iface ) 
{ 
  struct usb_endpoint_descriptor *endpoint ;
  int i ;
  int tmp ;

  {
#line 428
  i = 0;
#line 428
  while (1) {
#line 428
    if (i < (int )iface->desc.bNumEndpoints) {

    } else {
#line 428
      break;
    }
#line 429
    endpoint = & (iface->endpoint + i)->desc;
#line 431
    tmp = usb_endpoint_is_int_in(endpoint);
#line 431
    if (tmp) {
#line 433
      return (endpoint);
    } else {

    }
#line 428
    i = i + 1;
  }
#line 437
  return ((void *)0);
}
}
#line 443 "/work/ldvuser/novikov/work/current--X--drivers/input/misc/keyspan_remote.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/input/misc/keyspan_remote.c"
static int keyspan_probe(struct usb_interface *interface , struct usb_device_id  const  *id ) 
{ 
  struct usb_device *udev ;
  struct device  const  *__mptr ;
  struct usb_endpoint_descriptor *endpoint ;
  struct usb_keyspan *remote ;
  struct input_dev *input_dev ;
  int i ;
  int error ;
  void *tmp ;
  void *tmp___0 ;
  unsigned long tmp___1 ;
  size_t __len ;
  void *__ret ;
  unsigned int tmp___2 ;

  {
#line 445
  __mptr = interface->dev.parent;
#line 445
  udev = (struct usb_device *)((char *)__mptr - (unsigned int )(& ((struct usb_device *)0)->dev));
#line 451
  endpoint = keyspan_get_in_endpoint(interface->cur_altsetting);
#line 452
  if (! endpoint) {
#line 453
    return (-19);
  } else {

  }
#line 455
  tmp = kzalloc(sizeof(*remote), (16U | 64U) | 128U);
#line 455
  remote = tmp;
#line 456
  input_dev = input_allocate_device();
#line 457
  if (! remote || ! input_dev) {
#line 458
    error = -12;
#line 459
    goto fail1;
  } else {

  }
#line 462
  remote->udev = udev;
#line 463
  remote->input = input_dev;
#line 464
  remote->interface = interface;
#line 465
  remote->in_endpoint = endpoint;
#line 466
  remote->toggle = -1;
#line 468
  tmp___0 = usb_buffer_alloc(udev, 8, 32U, & remote->in_dma);
#line 468
  remote->in_buffer = tmp___0;
#line 469
  if (! remote->in_buffer) {
#line 470
    error = -12;
#line 471
    goto fail1;
  } else {

  }
#line 474
  remote->irq_urb = usb_alloc_urb(0, (16U | 64U) | 128U);
#line 475
  if (! remote->irq_urb) {
#line 476
    error = -12;
#line 477
    goto fail2;
  } else {

  }
#line 480
  error = keyspan_setup(udev);
#line 481
  if (error) {
#line 482
    error = -19;
#line 483
    goto fail3;
  } else {

  }
#line 486
  if (udev->manufacturer) {
#line 487
    strlcpy(remote->name, udev->manufacturer, sizeof(remote->name));
  } else {

  }
#line 489
  if (udev->product) {
#line 490
    if (udev->manufacturer) {
#line 491
      strlcat(remote->name, " ", sizeof(remote->name));
    } else {

    }
#line 492
    strlcat(remote->name, udev->product, sizeof(remote->name));
  } else {

  }
#line 495
  tmp___1 = strlen(remote->name);
#line 495
  if (tmp___1) {

  } else {
#line 496
    snprintf(remote->name, sizeof(remote->name), "USB Keyspan Remote %04x:%04x", udev->descriptor.idVendor,
             udev->descriptor.idProduct);
  }
#line 501
  usb_make_path(udev, remote->phys, sizeof(remote->phys));
#line 502
  strlcat(remote->phys, "/input0", sizeof(remote->phys));
#line 503
  __len = sizeof(remote->keymap);
#line 503
  if (__len >= (size_t )64) {
#line 503
    __ret = __memcpy(remote->keymap, keyspan_key_table, __len);
  } else {
#line 503
    __ret = __builtin_memcpy(remote->keymap, keyspan_key_table, __len);
  }
#line 505
  input_dev->name = remote->name;
#line 506
  input_dev->phys = remote->phys;
#line 507
  usb_to_input_id(udev, & input_dev->id);
#line 508
  input_dev->dev.parent = & interface->dev;
#line 509
  input_dev->keycode = remote->keymap;
#line 510
  input_dev->keycodesize = sizeof(unsigned short );
#line 511
  input_dev->keycodemax = sizeof(remote->keymap) / sizeof(remote->keymap[0]) + (sizeof(char [1 - 2 * 0]) - 1UL);
#line 513
  input_set_capability(input_dev, 4, 4);
#line 514
  __set_bit(1, input_dev->evbit);
#line 515
  i = 0;
#line 515
  while (1) {
#line 515
    if ((unsigned long )i < sizeof(keyspan_key_table) / sizeof(keyspan_key_table[0]) + (sizeof(char [1 - 2 * 0]) - 1UL)) {

    } else {
#line 515
      break;
    }
#line 516
    __set_bit(keyspan_key_table[i], input_dev->keybit);
#line 515
    i = i + 1;
  }
#line 517
  __clear_bit(0, input_dev->keybit);
#line 519
  input_set_drvdata(input_dev, remote);
#line 521
  input_dev->open = & keyspan_open;
#line 522
  input_dev->close = & keyspan_close;
#line 528
  tmp___2 = __create_pipe(remote->udev, endpoint->bEndpointAddress);
#line 528
  usb_fill_int_urb(remote->irq_urb, remote->udev, ((unsigned int )(1 << 30) | tmp___2) | 128U,
                   remote->in_buffer, 8, & keyspan_irq_recv, remote, endpoint->bInterval);
#line 533
  (remote->irq_urb)->transfer_dma = remote->in_dma;
#line 534
  (remote->irq_urb)->transfer_flags = (remote->irq_urb)->transfer_flags | 4U;
#line 537
  error = input_register_device(remote->input);
#line 538
  if (error) {
#line 539
    goto fail3;
  } else {

  }
#line 542
  usb_set_intfdata(interface, remote);
#line 544
  return (0);
  fail3: 
#line 546
  usb_free_urb(remote->irq_urb);
  fail2: 
#line 547
  usb_buffer_free(udev, 8, remote->in_buffer, remote->in_dma);
  fail1: 
#line 548
  kfree(remote);
#line 549
  input_free_device(input_dev);
#line 551
  return (error);
}
}
#line 557 "/work/ldvuser/novikov/work/current--X--drivers/input/misc/keyspan_remote.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/input/misc/keyspan_remote.c"
static void keyspan_disconnect(struct usb_interface *interface ) 
{ 
  struct usb_keyspan *remote ;
  void *tmp ;

  {
#line 561
  tmp = usb_get_intfdata(interface);
#line 561
  remote = tmp;
#line 562
  usb_set_intfdata(interface, (void *)0);
#line 564
  if (remote) {
#line 565
    input_unregister_device(remote->input);
#line 566
    usb_kill_urb(remote->irq_urb);
#line 567
    usb_free_urb(remote->irq_urb);
#line 568
    usb_buffer_free(remote->udev, 8, remote->in_buffer, remote->in_dma);
#line 569
    kfree(remote);
  } else {

  }
#line 571
  return;
}
}
#line 576 "/work/ldvuser/novikov/work/current--X--drivers/input/misc/keyspan_remote.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/input/misc/keyspan_remote.c"
static struct usb_driver keyspan_driver  = 
#line 576
     {"keyspan_remote", & keyspan_probe, & keyspan_disconnect, 0, 0, 0, 0, 0, 0, keyspan_table,
    {{{0U}, 0U, 0U, 0, {0, 0, 0, 0}}, {0, 0}}, {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                                                0}, 0U, 0U};
#line 584
static int usb_keyspan_init(void)  __attribute__((__section__(".init.text"))) ;
#line 584 "/work/ldvuser/novikov/work/current--X--drivers/input/misc/keyspan_remote.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/input/misc/keyspan_remote.c"
static int usb_keyspan_init(void) 
{ 
  int result ;

  {
#line 589
  result = usb_register(& keyspan_driver);
#line 590
  if (result) {
#line 591
    printk("<3>keyspan_remote: usb_register failed. Error number %d\n\n", result);
  } else {

  }
#line 593
  return (result);
}
}
#line 596
static void usb_keyspan_exit(void)  __attribute__((__section__(".exit.text"))) ;
#line 596 "/work/ldvuser/novikov/work/current--X--drivers/input/misc/keyspan_remote.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/input/misc/keyspan_remote.c"
static void usb_keyspan_exit(void) 
{ 


  {
#line 599
  usb_deregister(& keyspan_driver);
#line 600
  return;
}
}
#line 602 "/work/ldvuser/novikov/work/current--X--drivers/input/misc/keyspan_remote.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/input/misc/keyspan_remote.c"
int init_module(void) 
{ 
  int tmp ;

  {
#line 602
  tmp = usb_keyspan_init();
#line 602
  return (tmp);
}
}
#line 603 "/work/ldvuser/novikov/work/current--X--drivers/input/misc/keyspan_remote.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/input/misc/keyspan_remote.c"
void cleanup_module(void) 
{ 


  {
#line 603
  usb_keyspan_exit();
#line 603
  return;
}
}
#line 605
extern struct usb_device_id  const  __mod_usb_device_table  __attribute__((__unused__,
__alias__("keyspan_table"))) ;
#line 606 "/work/ldvuser/novikov/work/current--X--drivers/input/misc/keyspan_remote.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/input/misc/keyspan_remote.c"
static char const   __mod_author606[42]  __attribute__((__used__, __unused__, __section__(".modinfo")))  = 
#line 606
  {      'a',      'u',      't',      'h', 
        'o',      'r',      '=',      'M', 
        'i',      'c',      'h',      'a', 
        'e',      'l',      ' ',      'D', 
        'o',      'w',      'n',      'e', 
        'y',      ' ',      '<',      'd', 
        'o',      'w',      'n',      'e', 
        'y',      '@',      'z',      'y', 
        'm',      'e',      't',      'a', 
        '.',      'c',      'o',      'm', 
        '>',      '\000'};
#line 607 "/work/ldvuser/novikov/work/current--X--drivers/input/misc/keyspan_remote.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/input/misc/keyspan_remote.c"
static char const   __mod_description607[55]  __attribute__((__used__, __unused__,
__section__(".modinfo")))  = 
#line 607
  {      'd',      'e',      's',      'c', 
        'r',      'i',      'p',      't', 
        'i',      'o',      'n',      '=', 
        'D',      'r',      'i',      'v', 
        'e',      'r',      ' ',      'f', 
        'o',      'r',      ' ',      't', 
        'h',      'e',      ' ',      'U', 
        'S',      'B',      ' ',      'K', 
        'e',      'y',      's',      'p', 
        'a',      'n',      ' ',      'r', 
        'e',      'm',      'o',      't', 
        'e',      ' ',      'c',      'o', 
        'n',      't',      'r',      'o', 
        'l',      '.',      '\000'};
#line 608 "/work/ldvuser/novikov/work/current--X--drivers/input/misc/keyspan_remote.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/input/misc/keyspan_remote.c"
static char const   __mod_license608[12]  __attribute__((__used__, __unused__, __section__(".modinfo")))  = 
#line 608
  {      'l',      'i',      'c',      'e', 
        'n',      's',      'e',      '=', 
        'G',      'P',      'L',      '\000'};
#line 626
void ldv_check_final_state(void) ;
#line 629
extern void ldv_check_return_value(int res ) ;
#line 632
extern void ldv_check_return_value_probe(int res ) ;
#line 635
extern void ldv_initialize(void) ;
#line 638
extern void ldv_handler_precall(void) ;
#line 641
extern int nondet_int(void) ;
#line 644 "/work/ldvuser/novikov/work/current--X--drivers/input/misc/keyspan_remote.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/input/misc/keyspan_remote.c"
int LDV_IN_INTERRUPT  ;
#line 678 "/work/ldvuser/novikov/work/current--X--drivers/input/misc/keyspan_remote.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/input/misc/keyspan_remote.c"
static int res_keyspan_probe_9  ;
#line 647 "/work/ldvuser/novikov/work/current--X--drivers/input/misc/keyspan_remote.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/dscv/ri/68_1/drivers/input/misc/keyspan_remote.c"
void main(void) 
{ 
  struct usb_interface *var_group1 ;
  struct usb_device_id  const  *var_keyspan_probe_9_p1 ;
  int tmp ;
  int ldv_s_keyspan_driver_usb_driver ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 705
  LDV_IN_INTERRUPT = 1;
#line 714
  ldv_initialize();
#line 737
  ldv_handler_precall();
#line 738
  tmp = usb_keyspan_init();
#line 738
  if (tmp) {
#line 739
    goto ldv_final;
  } else {

  }
#line 740
  ldv_s_keyspan_driver_usb_driver = 0;
#line 743
  while (1) {
#line 743
    tmp___1 = nondet_int();
#line 743
    if (tmp___1 || ! (ldv_s_keyspan_driver_usb_driver == 0)) {

    } else {
#line 743
      break;
    }
#line 747
    tmp___0 = nondet_int();
#line 747
    switch (tmp___0) {
    case 0: 
#line 752
    if (ldv_s_keyspan_driver_usb_driver == 0) {
#line 774
      res_keyspan_probe_9 = keyspan_probe(var_group1, var_keyspan_probe_9_p1);
#line 775
      ldv_check_return_value(res_keyspan_probe_9);
#line 776
      ldv_check_return_value_probe(res_keyspan_probe_9);
#line 777
      if (res_keyspan_probe_9) {
#line 778
        goto ldv_module_exit;
      } else {

      }
#line 779
      ldv_s_keyspan_driver_usb_driver = ldv_s_keyspan_driver_usb_driver + 1;
    } else {

    }
#line 785
    break;
    case 1: 
#line 789
    if (ldv_s_keyspan_driver_usb_driver == 1) {
#line 811
      ldv_handler_precall();
#line 812
      keyspan_disconnect(var_group1);
#line 813
      ldv_s_keyspan_driver_usb_driver = 0;
    } else {

    }
#line 819
    break;
    default: 
#line 820
    break;
    }
  }
  ldv_module_exit: 
#line 849
  ldv_handler_precall();
#line 850
  usb_keyspan_exit();
  ldv_final: 
#line 853
  ldv_check_final_state();
#line 856
  return;
}
}
#line 1 "<compiler builtins>"
long __builtin_expect(long exp , long c ) ;
#line 10 "/home/ldvuser/ldv/inst/kernel-rules/verifier/rcv.h"
__inline static void ( __attribute__((__always_inline__)) ldv_error)(void) 
{ 


  {
  LDV_ERROR: reach_error();
#line 12
  goto LDV_ERROR;
}
}
#line 20 "/home/ldvuser/ldv/inst/kernel-rules/verifier/rcv.h"
__inline static void ( __attribute__((__always_inline__)) ldv_stop)(void) 
{ 


  {
  LDV_STOP: 
#line 21
  goto LDV_STOP;
}
}
#line 26
extern void *ldv_undef_ptr(void) ;
#line 49 "/home/ldvuser/ldv/inst/kernel-rules/verifier/rcv.h"
long __builtin_expect(long exp , long c ) 
{ 


  {
#line 51
  return (exp);
}
}
#line 12 "/work/ldvuser/novikov/work/current--X--drivers/input/misc/keyspan_remote.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/68_1/common-model/ldv_common_model.c"
int ldv_urb_state  =    0;
#line 14 "/work/ldvuser/novikov/work/current--X--drivers/input/misc/keyspan_remote.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/68_1/common-model/ldv_common_model.c"
int ldv_coherent_state  =    0;
#line 45 "/work/ldvuser/novikov/work/current--X--drivers/input/misc/keyspan_remote.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/68_1/common-model/ldv_common_model.c"
void *usb_alloc_coherent(struct usb_device *dev , size_t size , gfp_t mem_flags ,
                         dma_addr_t *dma ) 
{ 
  void *arbitrary_memory ;
  void *tmp ;

  {
#line 47
  while (1) {
#line 47
    tmp = ldv_undef_ptr();
#line 47
    arbitrary_memory = tmp;
#line 47
    if (! arbitrary_memory) {
#line 47
      return ((void *)0);
    } else {

    }
#line 47
    ldv_coherent_state = ldv_coherent_state + 1;
#line 47
    return (arbitrary_memory);
#line 47
    break;
  }
#line 48
  return ((void *)0);
}
}
#line 51 "/work/ldvuser/novikov/work/current--X--drivers/input/misc/keyspan_remote.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/68_1/common-model/ldv_common_model.c"
void usb_free_coherent(struct usb_device *dev , size_t size , void *addr , dma_addr_t dma ) 
{ 


  {
#line 53
  while (1) {
#line 53
    if ((unsigned long )addr != (unsigned long )((void *)0)) {

    } else {
#line 53
      ldv_stop();
    }
#line 53
    if (addr) {
#line 53
      if (ldv_coherent_state >= 1) {

      } else {
#line 53
        ldv_error();
      }
#line 53
      ldv_coherent_state = ldv_coherent_state - 1;
    } else {

    }
#line 53
    break;
  }
#line 54
  return;
}
}
#line 57 "/work/ldvuser/novikov/work/current--X--drivers/input/misc/keyspan_remote.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/68_1/common-model/ldv_common_model.c"
struct urb *usb_alloc_urb(int iso_packets , gfp_t mem_flags ) 
{ 
  void *arbitrary_memory ;
  void *tmp ;

  {
#line 58
  while (1) {
#line 58
    tmp = ldv_undef_ptr();
#line 58
    arbitrary_memory = tmp;
#line 58
    if (! arbitrary_memory) {
#line 58
      return ((void *)0);
    } else {

    }
#line 58
    ldv_urb_state = ldv_urb_state + 1;
#line 58
    return (arbitrary_memory);
#line 58
    break;
  }
#line 59
  return ((struct urb *)0);
}
}
#line 62 "/work/ldvuser/novikov/work/current--X--drivers/input/misc/keyspan_remote.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/68_1/common-model/ldv_common_model.c"
void usb_free_urb(struct urb *urb ) 
{ 


  {
#line 63
  while (1) {
#line 63
    if ((unsigned long )urb != (unsigned long )((struct urb *)0)) {

    } else {
#line 63
      ldv_stop();
    }
#line 63
    if (urb) {
#line 63
      if (ldv_urb_state >= 1) {

      } else {
#line 63
        ldv_error();
      }
#line 63
      ldv_urb_state = ldv_urb_state - 1;
    } else {

    }
#line 63
    break;
  }
#line 64
  return;
}
}
#line 67 "/work/ldvuser/novikov/work/current--X--drivers/input/misc/keyspan_remote.ko--X--defaultlinux--X--68_1--X--cpachecker/linux/csd_deg_dscv/11/dscv_tempdir/rule-instrumentor/68_1/common-model/ldv_common_model.c"
void ldv_check_final_state(void) 
{ 


  {
#line 69
  if (ldv_urb_state == 0) {

  } else {
#line 69
    ldv_error();
  }
#line 71
  if (ldv_coherent_state == 0) {

  } else {
#line 71
    ldv_error();
  }
#line 72
  return;
}
}
