extern void abort(void);
void reach_error() {abort();}
/* Generated by CIL v. 1.5.1 */
/* print_CIL_Input is false */

#line 11 "include/asm/posix_types_64.h"
typedef unsigned int __kernel_mode_t;
#line 14 "include/asm/posix_types_64.h"
typedef int __kernel_pid_t;
#line 16 "include/asm/posix_types_64.h"
typedef unsigned int __kernel_uid_t;
#line 17 "include/asm/posix_types_64.h"
typedef unsigned int __kernel_gid_t;
#line 18 "include/asm/posix_types_64.h"
typedef unsigned long __kernel_size_t;
#line 19 "include/asm/posix_types_64.h"
typedef long __kernel_ssize_t;
#line 21 "include/asm/posix_types_64.h"
typedef long __kernel_time_t;
#line 23 "include/asm/posix_types_64.h"
typedef long __kernel_clock_t;
#line 24 "include/asm/posix_types_64.h"
typedef int __kernel_timer_t;
#line 25 "include/asm/posix_types_64.h"
typedef int __kernel_clockid_t;
#line 32 "include/asm/posix_types_64.h"
typedef long long __kernel_loff_t;
#line 41 "include/asm/posix_types_64.h"
typedef __kernel_uid_t __kernel_uid32_t;
#line 42 "include/asm/posix_types_64.h"
typedef __kernel_gid_t __kernel_gid32_t;
#line 6 "include/asm/types.h"
typedef unsigned short umode_t;
#line 13 "include/asm/types.h"
typedef signed char __s8;
#line 16 "include/asm/types.h"
typedef short __s16;
#line 17 "include/asm/types.h"
typedef unsigned short __u16;
#line 19 "include/asm/types.h"
typedef int __s32;
#line 20 "include/asm/types.h"
typedef unsigned int __u32;
#line 28 "include/asm/types.h"
typedef long long __s64;
#line 29 "include/asm/types.h"
typedef unsigned long long __u64;
#line 47 "include/asm/types.h"
typedef signed char s8;
#line 48 "include/asm/types.h"
typedef unsigned char u8;
#line 51 "include/asm/types.h"
typedef unsigned short u16;
#line 54 "include/asm/types.h"
typedef unsigned int u32;
#line 56 "include/asm/types.h"
typedef long long s64;
#line 57 "include/asm/types.h"
typedef unsigned long long u64;
#line 16 "include/linux/types.h"
typedef __u32 __kernel_dev_t;
#line 19 "include/linux/types.h"
typedef __kernel_dev_t dev_t;
#line 21 "include/linux/types.h"
typedef __kernel_mode_t mode_t;
#line 24 "include/linux/types.h"
typedef __kernel_pid_t pid_t;
#line 28 "include/linux/types.h"
typedef __kernel_timer_t timer_t;
#line 29 "include/linux/types.h"
typedef __kernel_clockid_t clockid_t;
#line 35 "include/linux/types.h"
typedef __kernel_uid32_t uid_t;
#line 36 "include/linux/types.h"
typedef __kernel_gid32_t gid_t;
#line 57 "include/linux/types.h"
typedef __kernel_loff_t loff_t;
#line 66 "include/linux/types.h"
typedef __kernel_size_t size_t;
#line 71 "include/linux/types.h"
typedef __kernel_ssize_t ssize_t;
#line 81 "include/linux/types.h"
typedef __kernel_time_t time_t;
#line 86 "include/linux/types.h"
typedef __kernel_clock_t clock_t;
#line 142 "include/linux/types.h"
typedef unsigned long sector_t;
#line 151 "include/linux/types.h"
typedef unsigned long blkcnt_t;
#line 192 "include/linux/types.h"
typedef unsigned int gfp_t;
#line 60 "include/asm/page_64.h"
struct __anonstruct_pgd_t_6 {
   unsigned long pgd ;
};
#line 60 "include/asm/page_64.h"
typedef struct __anonstruct_pgd_t_6 pgd_t;
#line 63 "include/asm/page_64.h"
struct __anonstruct_pgprot_t_7 {
   unsigned long pgprot ;
};
#line 63 "include/asm/page_64.h"
typedef struct __anonstruct_pgprot_t_7 pgprot_t;
#line 37 "include/asm/bug.h"
struct bug_entry {
   unsigned long bug_addr ;
   char const   *file ;
   unsigned short line ;
   unsigned short flags ;
};
#line 115 "include/asm/page_64.h"
struct page;
#line 56 "include/asm/alternative_64.h"
struct module;
#line 328 "include/asm/msr.h"
struct task_struct;
#line 87 "include/linux/kernel.h"
struct completion;
#line 88
struct pt_regs;
#line 172
struct pid;
#line 404
struct mm_struct;
#line 6 "include/asm/mmsegment.h"
struct __anonstruct_mm_segment_t_8 {
   unsigned long seg ;
};
#line 6 "include/asm/mmsegment.h"
typedef struct __anonstruct_mm_segment_t_8 mm_segment_t;
#line 49 "include/asm/percpu_64.h"
struct exec_domain;
#line 87 "include/linux/personality.h"
struct map_segment;
#line 87 "include/linux/personality.h"
struct exec_domain {
   char const   *name ;
   void (*handler)(int  , struct pt_regs * ) ;
   unsigned char pers_low ;
   unsigned char pers_high ;
   unsigned long *signal_map ;
   unsigned long *signal_invmap ;
   struct map_segment *err_map ;
   struct map_segment *socktype_map ;
   struct map_segment *sockopt_map ;
   struct map_segment *af_map ;
   struct module *module ;
   struct exec_domain *next ;
};
#line 88 "include/linux/cpumask.h"
struct __anonstruct_cpumask_t_9 {
   unsigned long bits[1U] ;
};
#line 88 "include/linux/cpumask.h"
typedef struct __anonstruct_cpumask_t_9 cpumask_t;
#line 134 "include/asm/processor_64.h"
struct i387_fxsave_struct {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   u64 rip ;
   u64 rdp ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32U] ;
   u32 xmm_space[64U] ;
   u32 padding[24U] ;
};
#line 174 "include/asm/processor_64.h"
union i387_union {
   struct i387_fxsave_struct fxsave ;
};
#line 210 "include/asm/processor_64.h"
struct thread_struct {
   unsigned long rsp0 ;
   unsigned long rsp ;
   unsigned long userrsp ;
   unsigned long fs ;
   unsigned long gs ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long debugreg0 ;
   unsigned long debugreg1 ;
   unsigned long debugreg2 ;
   unsigned long debugreg3 ;
   unsigned long debugreg6 ;
   unsigned long debugreg7 ;
   unsigned long cr2 ;
   unsigned long trap_no ;
   unsigned long error_code ;
   union i387_union i387 ;
   int ioperm ;
   unsigned long *io_bitmap_ptr ;
   unsigned int io_bitmap_max ;
   u64 tls_array[3U] ;
};
#line 56 "include/linux/prefetch.h"
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};
#line 418 "include/linux/list.h"
struct hlist_node;
#line 418 "include/linux/list.h"
struct hlist_head {
   struct hlist_node *first ;
};
#line 703 "include/linux/list.h"
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};
#line 112 "include/asm/stat.h"
struct restart_block {
   long (*fn)(struct restart_block * ) ;
   unsigned long arg0 ;
   unsigned long arg1 ;
   unsigned long arg2 ;
   unsigned long arg3 ;
};
#line 19 "include/linux/thread_info.h"
struct thread_info {
   struct task_struct *task ;
   struct exec_domain *exec_domain ;
   __u32 flags ;
   __u32 status ;
   __u32 cpu ;
   int preempt_count ;
   mm_segment_t addr_limit ;
   struct restart_block restart_block ;
};
#line 10 "include/asm/spinlock_types.h"
struct __anonstruct_raw_spinlock_t_10 {
   unsigned int slock ;
};
#line 10 "include/asm/spinlock_types.h"
typedef struct __anonstruct_raw_spinlock_t_10 raw_spinlock_t;
#line 16 "include/asm/spinlock_types.h"
struct __anonstruct_raw_rwlock_t_11 {
   unsigned int lock ;
};
#line 16 "include/asm/spinlock_types.h"
typedef struct __anonstruct_raw_rwlock_t_11 raw_rwlock_t;
#line 17
struct lockdep_map;
#line 53 "include/linux/debug_locks.h"
struct stack_trace {
   unsigned int nr_entries ;
   unsigned int max_entries ;
   unsigned long *entries ;
   int skip ;
};
#line 27 "include/linux/stacktrace.h"
struct lockdep_subclass_key {
   char __one_byte ;
};
#line 71 "include/linux/lockdep.h"
struct lock_class_key {
   struct lockdep_subclass_key subkeys[8U] ;
};
#line 75 "include/linux/lockdep.h"
struct lock_class {
   struct list_head hash_entry ;
   struct list_head lock_entry ;
   struct lockdep_subclass_key *key ;
   unsigned int subclass ;
   unsigned long usage_mask ;
   struct stack_trace usage_traces[9U] ;
   struct list_head locks_after ;
   struct list_head locks_before ;
   unsigned int version ;
   unsigned long ops ;
   char const   *name ;
   int name_version ;
   unsigned long contention_point[4U] ;
};
#line 155 "include/linux/lockdep.h"
struct lockdep_map {
   struct lock_class_key *key ;
   struct lock_class *class_cache ;
   char const   *name ;
   int cpu ;
};
#line 188 "include/linux/lockdep.h"
struct held_lock {
   u64 prev_chain_key ;
   struct lock_class *class ;
   unsigned long acquire_ip ;
   struct lockdep_map *instance ;
   u64 waittime_stamp ;
   u64 holdtime_stamp ;
   int irq_context ;
   int trylock ;
   int read ;
   int check ;
   int hardirqs_off ;
};
#line 32 "include/linux/spinlock_types.h"
struct __anonstruct_spinlock_t_12 {
   raw_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 32 "include/linux/spinlock_types.h"
typedef struct __anonstruct_spinlock_t_12 spinlock_t;
#line 48 "include/linux/spinlock_types.h"
struct __anonstruct_rwlock_t_13 {
   raw_rwlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 48 "include/linux/spinlock_types.h"
typedef struct __anonstruct_rwlock_t_13 rwlock_t;
#line 25 "include/asm/atomic_64.h"
struct __anonstruct_atomic_t_14 {
   int counter ;
};
#line 25 "include/asm/atomic_64.h"
typedef struct __anonstruct_atomic_t_14 atomic_t;
#line 209 "include/asm/atomic_64.h"
struct __anonstruct_atomic64_t_15 {
   long counter ;
};
#line 209 "include/asm/atomic_64.h"
typedef struct __anonstruct_atomic64_t_15 atomic64_t;
#line 23 "include/asm-generic/atomic.h"
typedef atomic64_t atomic_long_t;
#line 157 "include/linux/seqlock.h"
struct timespec {
   time_t tv_sec ;
   long tv_nsec ;
};
#line 208 "include/linux/time.h"
struct kstat {
   u64 ino ;
   dev_t dev ;
   umode_t mode ;
   unsigned int nlink ;
   uid_t uid ;
   gid_t gid ;
   dev_t rdev ;
   loff_t size ;
   struct timespec atime ;
   struct timespec mtime ;
   struct timespec ctime ;
   unsigned long blksize ;
   unsigned long long blocks ;
};
#line 32 "include/linux/kmod.h"
struct key;
#line 33
struct file;
#line 96 "include/linux/kmod.h"
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long rbp ;
   unsigned long rbx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long rax ;
   unsigned long rcx ;
   unsigned long rdx ;
   unsigned long rsi ;
   unsigned long rdi ;
   unsigned long orig_rax ;
   unsigned long rip ;
   unsigned long cs ;
   unsigned long eflags ;
   unsigned long rsp ;
   unsigned long ss ;
};
#line 25 "include/linux/elf.h"
typedef __u64 Elf64_Addr;
#line 26 "include/linux/elf.h"
typedef __u16 Elf64_Half;
#line 30 "include/linux/elf.h"
typedef __u32 Elf64_Word;
#line 31 "include/linux/elf.h"
typedef __u64 Elf64_Xword;
#line 178 "include/linux/elf.h"
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};
#line 186 "include/linux/elf.h"
typedef struct elf64_sym Elf64_Sym;
#line 398
struct kobject;
#line 399 "include/linux/elf.h"
struct attribute {
   char const   *name ;
   struct module *owner ;
   mode_t mode ;
};
#line 32 "include/linux/sysfs.h"
struct attribute_group {
   char const   *name ;
   struct attribute **attrs ;
};
#line 37
struct vm_area_struct;
#line 72 "include/linux/sysfs.h"
struct sysfs_ops {
   ssize_t (*show)(struct kobject * , struct attribute * , char * ) ;
   ssize_t (*store)(struct kobject * , struct attribute * , char const   * , size_t  ) ;
};
#line 116 "include/linux/sysfs.h"
struct kref {
   atomic_t refcount ;
};
#line 28 "include/linux/wait.h"
struct __wait_queue;
#line 28 "include/linux/wait.h"
typedef struct __wait_queue wait_queue_t;
#line 31 "include/linux/wait.h"
struct __wait_queue {
   unsigned int flags ;
   void *private ;
   int (*func)(wait_queue_t * , unsigned int  , int  , void * ) ;
   struct list_head task_list ;
};
#line 49 "include/linux/wait.h"
struct __wait_queue_head {
   spinlock_t lock ;
   struct list_head task_list ;
};
#line 54 "include/linux/wait.h"
typedef struct __wait_queue_head wait_queue_head_t;
#line 52 "include/linux/kobject.h"
struct kset;
#line 52
struct kobj_type;
#line 52
struct sysfs_dirent;
#line 52 "include/linux/kobject.h"
struct kobject {
   char const   *k_name ;
   struct kref kref ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct sysfs_dirent *sd ;
};
#line 101 "include/linux/kobject.h"
struct kobj_type {
   void (*release)(struct kobject * ) ;
   struct sysfs_ops *sysfs_ops ;
   struct attribute **default_attrs ;
};
#line 107 "include/linux/kobject.h"
struct kobj_uevent_env {
   char *envp[32U] ;
   int envp_idx ;
   char buf[2048U] ;
   int buflen ;
};
#line 114 "include/linux/kobject.h"
struct kset_uevent_ops {
   int (*filter)(struct kset * , struct kobject * ) ;
   char const   *(*name)(struct kset * , struct kobject * ) ;
   int (*uevent)(struct kset * , struct kobject * , struct kobj_uevent_env * ) ;
};
#line 120 "include/linux/kobject.h"
struct kset {
   struct kobj_type *ktype ;
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops *uevent_ops ;
};
#line 225 "include/linux/kobject.h"
struct subsys_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct kset * , char * ) ;
   ssize_t (*store)(struct kset * , char const   * , size_t  ) ;
};
#line 182 "include/linux/moduleparam.h"
struct marker;
#line 30 "include/linux/marker.h"
typedef void marker_probe_func(struct marker  const  * , void * , char const   * 
                               , ...);
#line 31 "include/linux/marker.h"
struct marker {
   char const   *name ;
   char const   *format ;
   char state ;
   marker_probe_func *call ;
   void *private ;
};
#line 88 "include/linux/nodemask.h"
struct __anonstruct_nodemask_t_22 {
   unsigned long bits[1U] ;
};
#line 88 "include/linux/nodemask.h"
typedef struct __anonstruct_nodemask_t_22 nodemask_t;
#line 559 "include/linux/mmzone.h"
struct mutex {
   atomic_t count ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct thread_info *owner ;
   char const   *name ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 61 "include/linux/mutex.h"
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   struct mutex *lock ;
   void *magic ;
};
#line 145
struct rw_semaphore;
#line 147 "include/linux/mutex.h"
struct rw_semaphore {
   __s32 activity ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct lockdep_map dep_map ;
};
#line 52 "include/linux/srcu.h"
struct notifier_block {
   int (*notifier_call)(struct notifier_block * , unsigned long  , void * ) ;
   struct notifier_block *next ;
   int priority ;
};
#line 60 "include/linux/notifier.h"
struct blocking_notifier_head {
   struct rw_semaphore rwsem ;
   struct notifier_block *head ;
};
#line 106 "include/linux/pm.h"
struct device;
#line 107 "include/linux/pm.h"
struct pm_message {
   int event ;
};
#line 115 "include/linux/pm.h"
typedef struct pm_message pm_message_t;
#line 116 "include/linux/pm.h"
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned char can_wakeup : 1 ;
   unsigned char should_wakeup : 1 ;
   struct list_head entry ;
};
#line 54 "include/linux/slab.h"
struct kmem_cache;
#line 278 "include/linux/jiffies.h"
union ktime {
   s64 tv64 ;
};
#line 59 "include/linux/ktime.h"
typedef union ktime ktime_t;
#line 323
struct tvec_t_base_s;
#line 324 "include/linux/ktime.h"
struct timer_list {
   struct list_head entry ;
   unsigned long expires ;
   void (*function)(unsigned long  ) ;
   unsigned long data ;
   struct tvec_t_base_s *base ;
   void *start_site ;
   char start_comm[16U] ;
   int start_pid ;
};
#line 161 "include/linux/timer.h"
struct hrtimer;
#line 162
enum hrtimer_restart;
#line 169
struct work_struct;
#line 18 "include/linux/workqueue.h"
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct * ) ;
   struct lockdep_map lockdep_map ;
};
#line 35 "include/linux/workqueue.h"
struct delayed_work {
   struct work_struct work ;
   struct timer_list timer ;
};
#line 228 "include/linux/workqueue.h"
struct kmem_cache_cpu {
   void **freelist ;
   struct page *page ;
   int node ;
   unsigned int offset ;
   unsigned int objsize ;
};
#line 21 "include/linux/slub_def.h"
struct kmem_cache_node {
   spinlock_t list_lock ;
   unsigned long nr_partial ;
   atomic_long_t nr_slabs ;
   struct list_head partial ;
   struct list_head full ;
};
#line 30 "include/linux/slub_def.h"
struct kmem_cache {
   unsigned long flags ;
   int size ;
   int objsize ;
   int offset ;
   int order ;
   struct kmem_cache_node local_node ;
   int objects ;
   int refcount ;
   void (*ctor)(struct kmem_cache * , void * ) ;
   int inuse ;
   int align ;
   char const   *name ;
   struct list_head list ;
   struct kobject kobj ;
   int defrag_ratio ;
   struct kmem_cache_node *node[64U] ;
   struct kmem_cache_cpu *cpu_slab[8U] ;
};
#line 10 "include/asm/local_64.h"
struct __anonstruct_local_t_73 {
   atomic_long_t a ;
};
#line 10 "include/asm/local_64.h"
typedef struct __anonstruct_local_t_73 local_t;
#line 148 "include/asm/local_64.h"
struct mod_arch_specific {

};
#line 151 "include/asm/local_64.h"
struct kernel_symbol {
   unsigned long value ;
   char const   *name ;
};
#line 44 "include/linux/module.h"
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute * , struct module * , char * ) ;
   ssize_t (*store)(struct module_attribute * , struct module * , char const   * ,
                    size_t  ) ;
   void (*setup)(struct module * , char const   * ) ;
   int (*test)(struct module * ) ;
   void (*free)(struct module * ) ;
};
#line 56 "include/linux/module.h"
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
};
#line 67
struct exception_table_entry;
#line 172 "include/linux/module.h"
struct module_ref {
   local_t count ;
};
#line 224
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2
} ;
#line 230 "include/linux/module.h"
struct module_sect_attr {
   struct module_attribute mattr ;
   char *name ;
   unsigned long address ;
};
#line 239 "include/linux/module.h"
struct module_sect_attrs {
   struct attribute_group grp ;
   int nsections ;
   struct module_sect_attr attrs[0U] ;
};
#line 246
struct module_param_attrs;
#line 247
struct module_notes_attrs;
#line 247 "include/linux/module.h"
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[56U] ;
   struct module_kobject mkobj ;
   struct module_param_attrs *param_attrs ;
   struct module_attribute *modinfo_attrs ;
   char const   *version ;
   char const   *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol  const  *syms ;
   unsigned int num_syms ;
   unsigned long const   *crcs ;
   struct kernel_symbol  const  *gpl_syms ;
   unsigned int num_gpl_syms ;
   unsigned long const   *gpl_crcs ;
   struct kernel_symbol  const  *unused_syms ;
   unsigned int num_unused_syms ;
   unsigned long const   *unused_crcs ;
   struct kernel_symbol  const  *unused_gpl_syms ;
   unsigned int num_unused_gpl_syms ;
   unsigned long const   *unused_gpl_crcs ;
   struct kernel_symbol  const  *gpl_future_syms ;
   unsigned int num_gpl_future_syms ;
   unsigned long const   *gpl_future_crcs ;
   unsigned int num_exentries ;
   struct exception_table_entry  const  *extable ;
   int (*init)(void) ;
   void *module_init ;
   void *module_core ;
   unsigned long init_size ;
   unsigned long core_size ;
   unsigned long init_text_size ;
   unsigned long core_text_size ;
   void *unwind_info ;
   struct mod_arch_specific arch ;
   unsigned int taints ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   unsigned int num_bugs ;
   struct module_ref ref[8U] ;
   struct list_head modules_which_use_me ;
   struct task_struct *waiter ;
   void (*exit)(void) ;
   Elf64_Sym *symtab ;
   unsigned long num_symtab ;
   char *strtab ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   void *percpu ;
   char *args ;
   struct marker *markers ;
   unsigned int num_markers ;
};
#line 466
struct device_driver;
#line 89 "include/linux/kdev_t.h"
struct rcu_head {
   struct rcu_head *next ;
   void (*func)(struct rcu_head * ) ;
};
#line 311 "include/linux/rcupdate.h"
struct nameidata;
#line 312
struct vfsmount;
#line 313 "include/linux/rcupdate.h"
struct qstr {
   unsigned int hash ;
   unsigned int len ;
   unsigned char const   *name ;
};
#line 77 "include/linux/dcache.h"
struct dcookie_struct;
#line 78
struct inode;
#line 78 "include/linux/dcache.h"
union __anonunion_d_u_74 {
   struct list_head d_child ;
   struct rcu_head d_rcu ;
};
#line 78
struct dentry_operations;
#line 78
struct super_block;
#line 78 "include/linux/dcache.h"
struct dentry {
   atomic_t d_count ;
   unsigned int d_flags ;
   spinlock_t d_lock ;
   struct inode *d_inode ;
   struct hlist_node d_hash ;
   struct dentry *d_parent ;
   struct qstr d_name ;
   struct list_head d_lru ;
   union __anonunion_d_u_74 d_u ;
   struct list_head d_subdirs ;
   struct list_head d_alias ;
   unsigned long d_time ;
   struct dentry_operations *d_op ;
   struct super_block *d_sb ;
   void *d_fsdata ;
   struct dcookie_struct *d_cookie ;
   int d_mounted ;
   unsigned char d_iname[36U] ;
};
#line 121 "include/linux/dcache.h"
struct dentry_operations {
   int (*d_revalidate)(struct dentry * , struct nameidata * ) ;
   int (*d_hash)(struct dentry * , struct qstr * ) ;
   int (*d_compare)(struct dentry * , struct qstr * , struct qstr * ) ;
   int (*d_delete)(struct dentry * ) ;
   void (*d_release)(struct dentry * ) ;
   void (*d_iput)(struct dentry * , struct inode * ) ;
   char *(*d_dname)(struct dentry * , char * , int  ) ;
};
#line 365 "include/linux/dcache.h"
struct open_intent {
   int flags ;
   int create_mode ;
   struct file *file ;
};
#line 18 "include/linux/namei.h"
union __anonunion_intent_75 {
   struct open_intent open ;
};
#line 18 "include/linux/namei.h"
struct nameidata {
   struct dentry *dentry ;
   struct vfsmount *mnt ;
   struct qstr last ;
   unsigned int flags ;
   int last_type ;
   unsigned int depth ;
   char *saved_names[9U] ;
   union __anonunion_intent_75 intent ;
};
#line 31 "include/linux/namei.h"
struct path {
   struct vfsmount *mnt ;
   struct dentry *dentry ;
};
#line 55 "include/linux/radix-tree.h"
struct radix_tree_node;
#line 55 "include/linux/radix-tree.h"
struct radix_tree_root {
   unsigned int height ;
   gfp_t gfp_mask ;
   struct radix_tree_node *rnode ;
};
#line 181
struct prio_tree_node;
#line 181 "include/linux/radix-tree.h"
struct raw_prio_tree_node {
   struct prio_tree_node *left ;
   struct prio_tree_node *right ;
   struct prio_tree_node *parent ;
};
#line 19 "include/linux/prio_tree.h"
struct prio_tree_node {
   struct prio_tree_node *left ;
   struct prio_tree_node *right ;
   struct prio_tree_node *parent ;
   unsigned long start ;
   unsigned long last ;
};
#line 27 "include/linux/prio_tree.h"
struct prio_tree_root {
   struct prio_tree_node *prio_tree_node ;
   unsigned short index_bits ;
   unsigned short raw ;
};
#line 111
enum pid_type {
    PIDTYPE_PID = 0,
    PIDTYPE_PGID = 1,
    PIDTYPE_SID = 2,
    PIDTYPE_MAX = 3
} ;
#line 118
struct pid_namespace;
#line 118 "include/linux/prio_tree.h"
struct upid {
   int nr ;
   struct pid_namespace *ns ;
   struct hlist_node pid_chain ;
};
#line 56 "include/linux/pid.h"
struct pid {
   atomic_t count ;
   struct hlist_head tasks[3U] ;
   struct rcu_head rcu ;
   int level ;
   struct upid numbers[1U] ;
};
#line 68 "include/linux/pid.h"
struct pid_link {
   struct hlist_node node ;
   struct pid *pid ;
};
#line 75 "include/linux/capability.h"
typedef __u32 kernel_cap_t;
#line 377 "include/linux/capability.h"
struct semaphore {
   atomic_t count ;
   int sleepers ;
   wait_queue_head_t wait ;
};
#line 177 "include/asm/semaphore_64.h"
struct export_operations;
#line 179
struct iovec;
#line 180
struct kiocb;
#line 181
struct pipe_inode_info;
#line 182
struct poll_table_struct;
#line 183
struct kstatfs;
#line 313 "include/linux/fs.h"
struct iattr {
   unsigned int ia_valid ;
   umode_t ia_mode ;
   uid_t ia_uid ;
   gid_t ia_gid ;
   loff_t ia_size ;
   struct timespec ia_atime ;
   struct timespec ia_mtime ;
   struct timespec ia_ctime ;
   struct file *ia_file ;
};
#line 44 "include/linux/quota.h"
typedef __kernel_uid32_t qid_t;
#line 45 "include/linux/quota.h"
typedef __u64 qsize_t;
#line 46 "include/linux/quota.h"
struct if_dqblk {
   __u64 dqb_bhardlimit ;
   __u64 dqb_bsoftlimit ;
   __u64 dqb_curspace ;
   __u64 dqb_ihardlimit ;
   __u64 dqb_isoftlimit ;
   __u64 dqb_curinodes ;
   __u64 dqb_btime ;
   __u64 dqb_itime ;
   __u32 dqb_valid ;
};
#line 114 "include/linux/quota.h"
struct if_dqinfo {
   __u64 dqi_bgrace ;
   __u64 dqi_igrace ;
   __u32 dqi_flags ;
   __u32 dqi_valid ;
};
#line 147 "include/linux/quota.h"
struct fs_disk_quota {
   __s8 d_version ;
   __s8 d_flags ;
   __u16 d_fieldmask ;
   __u32 d_id ;
   __u64 d_blk_hardlimit ;
   __u64 d_blk_softlimit ;
   __u64 d_ino_hardlimit ;
   __u64 d_ino_softlimit ;
   __u64 d_bcount ;
   __u64 d_icount ;
   __s32 d_itimer ;
   __s32 d_btimer ;
   __u16 d_iwarns ;
   __u16 d_bwarns ;
   __s32 d_padding2 ;
   __u64 d_rtb_hardlimit ;
   __u64 d_rtb_softlimit ;
   __u64 d_rtbcount ;
   __s32 d_rtbtimer ;
   __u16 d_rtbwarns ;
   __s16 d_padding3 ;
   char d_padding4[8U] ;
};
#line 75 "include/linux/dqblk_xfs.h"
struct fs_qfilestat {
   __u64 qfs_ino ;
   __u64 qfs_nblks ;
   __u32 qfs_nextents ;
};
#line 141 "include/linux/dqblk_xfs.h"
typedef struct fs_qfilestat fs_qfilestat_t;
#line 142 "include/linux/dqblk_xfs.h"
struct fs_quota_stat {
   __s8 qs_version ;
   __u16 qs_flags ;
   __s8 qs_pad ;
   fs_qfilestat_t qs_uquota ;
   fs_qfilestat_t qs_gquota ;
   __u32 qs_incoredqs ;
   __s32 qs_btimelimit ;
   __s32 qs_itimelimit ;
   __s32 qs_rtbtimelimit ;
   __u16 qs_bwarnlimit ;
   __u16 qs_iwarnlimit ;
};
#line 156 "include/linux/dqblk_xfs.h"
struct v1_mem_dqinfo {

};
#line 159 "include/linux/dqblk_xfs.h"
struct v2_mem_dqinfo {
   unsigned int dqi_blocks ;
   unsigned int dqi_free_blk ;
   unsigned int dqi_free_entry ;
};
#line 172 "include/linux/quota.h"
struct mem_dqblk {
   __u32 dqb_bhardlimit ;
   __u32 dqb_bsoftlimit ;
   qsize_t dqb_curspace ;
   __u32 dqb_ihardlimit ;
   __u32 dqb_isoftlimit ;
   __u32 dqb_curinodes ;
   time_t dqb_btime ;
   time_t dqb_itime ;
};
#line 193
struct quota_format_type;
#line 194 "include/linux/quota.h"
union __anonunion_u_76 {
   struct v1_mem_dqinfo v1_i ;
   struct v2_mem_dqinfo v2_i ;
};
#line 194 "include/linux/quota.h"
struct mem_dqinfo {
   struct quota_format_type *dqi_format ;
   struct list_head dqi_dirty_list ;
   unsigned long dqi_flags ;
   unsigned int dqi_bgrace ;
   unsigned int dqi_igrace ;
   union __anonunion_u_76 u ;
};
#line 237 "include/linux/quota.h"
struct dquot {
   struct hlist_node dq_hash ;
   struct list_head dq_inuse ;
   struct list_head dq_free ;
   struct list_head dq_dirty ;
   struct mutex dq_lock ;
   atomic_t dq_count ;
   wait_queue_head_t dq_wait_unused ;
   struct super_block *dq_sb ;
   unsigned int dq_id ;
   loff_t dq_off ;
   unsigned long dq_flags ;
   short dq_type ;
   struct mem_dqblk dq_dqb ;
};
#line 260 "include/linux/quota.h"
struct quota_format_ops {
   int (*check_quota_file)(struct super_block * , int  ) ;
   int (*read_file_info)(struct super_block * , int  ) ;
   int (*write_file_info)(struct super_block * , int  ) ;
   int (*free_file_info)(struct super_block * , int  ) ;
   int (*read_dqblk)(struct dquot * ) ;
   int (*commit_dqblk)(struct dquot * ) ;
   int (*release_dqblk)(struct dquot * ) ;
};
#line 276 "include/linux/quota.h"
struct dquot_operations {
   int (*initialize)(struct inode * , int  ) ;
   int (*drop)(struct inode * ) ;
   int (*alloc_space)(struct inode * , qsize_t  , int  ) ;
   int (*alloc_inode)(struct inode  const  * , unsigned long  ) ;
   int (*free_space)(struct inode * , qsize_t  ) ;
   int (*free_inode)(struct inode  const  * , unsigned long  ) ;
   int (*transfer)(struct inode * , struct iattr * ) ;
   int (*write_dquot)(struct dquot * ) ;
   int (*acquire_dquot)(struct dquot * ) ;
   int (*release_dquot)(struct dquot * ) ;
   int (*mark_dirty)(struct dquot * ) ;
   int (*write_info)(struct super_block * , int  ) ;
};
#line 292 "include/linux/quota.h"
struct quotactl_ops {
   int (*quota_on)(struct super_block * , int  , int  , char * ) ;
   int (*quota_off)(struct super_block * , int  ) ;
   int (*quota_sync)(struct super_block * , int  ) ;
   int (*get_info)(struct super_block * , int  , struct if_dqinfo * ) ;
   int (*set_info)(struct super_block * , int  , struct if_dqinfo * ) ;
   int (*get_dqblk)(struct super_block * , int  , qid_t  , struct if_dqblk * ) ;
   int (*set_dqblk)(struct super_block * , int  , qid_t  , struct if_dqblk * ) ;
   int (*get_xstate)(struct super_block * , struct fs_quota_stat * ) ;
   int (*set_xstate)(struct super_block * , unsigned int  , int  ) ;
   int (*get_xquota)(struct super_block * , int  , qid_t  , struct fs_disk_quota * ) ;
   int (*set_xquota)(struct super_block * , int  , qid_t  , struct fs_disk_quota * ) ;
};
#line 307 "include/linux/quota.h"
struct quota_format_type {
   int qf_fmt_id ;
   struct quota_format_ops *qf_ops ;
   struct module *qf_owner ;
   struct quota_format_type *qf_next ;
};
#line 314 "include/linux/quota.h"
struct quota_info {
   unsigned int flags ;
   struct mutex dqio_mutex ;
   struct mutex dqonoff_mutex ;
   struct rw_semaphore dqptr_sem ;
   struct inode *files[2U] ;
   struct mem_dqinfo info[2U] ;
   struct quota_format_ops *ops[2U] ;
};
#line 351
struct address_space;
#line 352
struct writeback_control;
#line 440 "include/linux/fs.h"
struct address_space_operations {
   int (*writepage)(struct page * , struct writeback_control * ) ;
   int (*readpage)(struct file * , struct page * ) ;
   void (*sync_page)(struct page * ) ;
   int (*writepages)(struct address_space * , struct writeback_control * ) ;
   int (*set_page_dirty)(struct page * ) ;
   int (*readpages)(struct file * , struct address_space * , struct list_head * ,
                    unsigned int  ) ;
   int (*prepare_write)(struct file * , struct page * , unsigned int  , unsigned int  ) ;
   int (*commit_write)(struct file * , struct page * , unsigned int  , unsigned int  ) ;
   int (*write_begin)(struct file * , struct address_space * , loff_t  , unsigned int  ,
                      unsigned int  , struct page ** , void ** ) ;
   int (*write_end)(struct file * , struct address_space * , loff_t  , unsigned int  ,
                    unsigned int  , struct page * , void * ) ;
   sector_t (*bmap)(struct address_space * , sector_t  ) ;
   void (*invalidatepage)(struct page * , unsigned long  ) ;
   int (*releasepage)(struct page * , gfp_t  ) ;
   ssize_t (*direct_IO)(int  , struct kiocb * , struct iovec  const  * , loff_t  ,
                        unsigned long  ) ;
   struct page *(*get_xip_page)(struct address_space * , sector_t  , int  ) ;
   int (*migratepage)(struct address_space * , struct page * , struct page * ) ;
   int (*launder_page)(struct page * ) ;
};
#line 493
struct backing_dev_info;
#line 494 "include/linux/fs.h"
struct address_space {
   struct inode *host ;
   struct radix_tree_root page_tree ;
   rwlock_t tree_lock ;
   unsigned int i_mmap_writable ;
   struct prio_tree_root i_mmap ;
   struct list_head i_mmap_nonlinear ;
   spinlock_t i_mmap_lock ;
   unsigned int truncate_count ;
   unsigned long nrpages ;
   unsigned long writeback_index ;
   struct address_space_operations  const  *a_ops ;
   unsigned long flags ;
   struct backing_dev_info *backing_dev_info ;
   spinlock_t private_lock ;
   struct list_head private_list ;
   struct address_space *assoc_mapping ;
};
#line 515
struct hd_struct;
#line 515
struct gendisk;
#line 515 "include/linux/fs.h"
struct block_device {
   dev_t bd_dev ;
   struct inode *bd_inode ;
   int bd_openers ;
   struct mutex bd_mutex ;
   struct semaphore bd_mount_sem ;
   struct list_head bd_inodes ;
   void *bd_holder ;
   int bd_holders ;
   struct list_head bd_holder_list ;
   struct block_device *bd_contains ;
   unsigned int bd_block_size ;
   struct hd_struct *bd_part ;
   unsigned int bd_part_count ;
   int bd_invalidated ;
   struct gendisk *bd_disk ;
   struct list_head bd_list ;
   struct backing_dev_info *bd_inode_backing_dev_info ;
   unsigned long bd_private ;
};
#line 579
struct inode_operations;
#line 579
struct file_operations;
#line 579
struct file_lock;
#line 579
struct cdev;
#line 579 "include/linux/fs.h"
union __anonunion_ldv_7682_77 {
   struct pipe_inode_info *i_pipe ;
   struct block_device *i_bdev ;
   struct cdev *i_cdev ;
};
#line 579
struct dnotify_struct;
#line 579 "include/linux/fs.h"
struct inode {
   struct hlist_node i_hash ;
   struct list_head i_list ;
   struct list_head i_sb_list ;
   struct list_head i_dentry ;
   unsigned long i_ino ;
   atomic_t i_count ;
   unsigned int i_nlink ;
   uid_t i_uid ;
   gid_t i_gid ;
   dev_t i_rdev ;
   unsigned long i_version ;
   loff_t i_size ;
   struct timespec i_atime ;
   struct timespec i_mtime ;
   struct timespec i_ctime ;
   unsigned int i_blkbits ;
   blkcnt_t i_blocks ;
   unsigned short i_bytes ;
   umode_t i_mode ;
   spinlock_t i_lock ;
   struct mutex i_mutex ;
   struct rw_semaphore i_alloc_sem ;
   struct inode_operations  const  *i_op ;
   struct file_operations  const  *i_fop ;
   struct super_block *i_sb ;
   struct file_lock *i_flock ;
   struct address_space *i_mapping ;
   struct address_space i_data ;
   struct dquot *i_dquot[2U] ;
   struct list_head i_devices ;
   union __anonunion_ldv_7682_77 ldv_7682 ;
   int i_cindex ;
   __u32 i_generation ;
   unsigned long i_dnotify_mask ;
   struct dnotify_struct *i_dnotify ;
   struct list_head inotify_watches ;
   struct mutex inotify_mutex ;
   unsigned long i_state ;
   unsigned long dirtied_when ;
   unsigned int i_flags ;
   atomic_t i_writecount ;
   void *i_security ;
   void *i_private ;
};
#line 745 "include/linux/fs.h"
struct fown_struct {
   rwlock_t lock ;
   struct pid *pid ;
   enum pid_type pid_type ;
   uid_t uid ;
   uid_t euid ;
   int signum ;
};
#line 753 "include/linux/fs.h"
struct file_ra_state {
   unsigned long start ;
   unsigned int size ;
   unsigned int async_size ;
   unsigned int ra_pages ;
   int mmap_miss ;
   loff_t prev_pos ;
};
#line 776 "include/linux/fs.h"
union __anonunion_f_u_78 {
   struct list_head fu_list ;
   struct rcu_head fu_rcuhead ;
};
#line 776 "include/linux/fs.h"
struct file {
   union __anonunion_f_u_78 f_u ;
   struct path f_path ;
   struct file_operations  const  *f_op ;
   atomic_t f_count ;
   unsigned int f_flags ;
   mode_t f_mode ;
   loff_t f_pos ;
   struct fown_struct f_owner ;
   unsigned int f_uid ;
   unsigned int f_gid ;
   struct file_ra_state f_ra ;
   u64 f_version ;
   void *f_security ;
   void *private_data ;
   struct list_head f_ep_links ;
   spinlock_t f_ep_lock ;
   struct address_space *f_mapping ;
};
#line 844
struct files_struct;
#line 844 "include/linux/fs.h"
typedef struct files_struct *fl_owner_t;
#line 845 "include/linux/fs.h"
struct file_lock_operations {
   void (*fl_insert)(struct file_lock * ) ;
   void (*fl_remove)(struct file_lock * ) ;
   void (*fl_copy_lock)(struct file_lock * , struct file_lock * ) ;
   void (*fl_release_private)(struct file_lock * ) ;
};
#line 852 "include/linux/fs.h"
struct lock_manager_operations {
   int (*fl_compare_owner)(struct file_lock * , struct file_lock * ) ;
   void (*fl_notify)(struct file_lock * ) ;
   int (*fl_grant)(struct file_lock * , struct file_lock * , int  ) ;
   void (*fl_copy_lock)(struct file_lock * , struct file_lock * ) ;
   void (*fl_release_private)(struct file_lock * ) ;
   void (*fl_break)(struct file_lock * ) ;
   int (*fl_mylease)(struct file_lock * , struct file_lock * ) ;
   int (*fl_change)(struct file_lock ** , int  ) ;
};
#line 163 "include/linux/nfs.h"
struct nlm_lockowner;
#line 164 "include/linux/nfs.h"
struct nfs_lock_info {
   u32 state ;
   struct nlm_lockowner *owner ;
   struct list_head list ;
};
#line 18 "include/linux/nfs_fs_i.h"
struct nfs4_lock_state;
#line 19 "include/linux/nfs_fs_i.h"
struct nfs4_lock_info {
   struct nfs4_lock_state *owner ;
};
#line 23
struct fasync_struct;
#line 23 "include/linux/nfs_fs_i.h"
struct __anonstruct_afs_80 {
   struct list_head link ;
   int state ;
};
#line 23 "include/linux/nfs_fs_i.h"
union __anonunion_fl_u_79 {
   struct nfs_lock_info nfs_fl ;
   struct nfs4_lock_info nfs4_fl ;
   struct __anonstruct_afs_80 afs ;
};
#line 23 "include/linux/nfs_fs_i.h"
struct file_lock {
   struct file_lock *fl_next ;
   struct list_head fl_link ;
   struct list_head fl_block ;
   fl_owner_t fl_owner ;
   unsigned int fl_pid ;
   wait_queue_head_t fl_wait ;
   struct file *fl_file ;
   unsigned char fl_flags ;
   unsigned char fl_type ;
   loff_t fl_start ;
   loff_t fl_end ;
   struct fasync_struct *fl_fasync ;
   unsigned long fl_break_time ;
   struct file_lock_operations *fl_ops ;
   struct lock_manager_operations *fl_lmops ;
   union __anonunion_fl_u_79 fl_u ;
};
#line 943 "include/linux/fs.h"
struct fasync_struct {
   int magic ;
   int fa_fd ;
   struct fasync_struct *fa_next ;
   struct file *fa_file ;
};
#line 976
struct file_system_type;
#line 976
struct super_operations;
#line 976
struct xattr_handler;
#line 976
struct mtd_info;
#line 976 "include/linux/fs.h"
struct super_block {
   struct list_head s_list ;
   dev_t s_dev ;
   unsigned long s_blocksize ;
   unsigned char s_blocksize_bits ;
   unsigned char s_dirt ;
   unsigned long long s_maxbytes ;
   struct file_system_type *s_type ;
   struct super_operations  const  *s_op ;
   struct dquot_operations *dq_op ;
   struct quotactl_ops *s_qcop ;
   struct export_operations  const  *s_export_op ;
   unsigned long s_flags ;
   unsigned long s_magic ;
   struct dentry *s_root ;
   struct rw_semaphore s_umount ;
   struct mutex s_lock ;
   int s_count ;
   int s_syncing ;
   int s_need_sync_fs ;
   atomic_t s_active ;
   void *s_security ;
   struct xattr_handler **s_xattr ;
   struct list_head s_inodes ;
   struct list_head s_dirty ;
   struct list_head s_io ;
   struct list_head s_more_io ;
   struct hlist_head s_anon ;
   struct list_head s_files ;
   struct block_device *s_bdev ;
   struct mtd_info *s_mtd ;
   struct list_head s_instances ;
   struct quota_info s_dquot ;
   int s_frozen ;
   wait_queue_head_t s_wait_unfrozen ;
   char s_id[32U] ;
   void *s_fs_info ;
   struct mutex s_vfs_rename_mutex ;
   u32 s_time_gran ;
   char *s_subtype ;
};
#line 1151 "include/linux/fs.h"
struct file_operations {
   struct module *owner ;
   loff_t (*llseek)(struct file * , loff_t  , int  ) ;
   ssize_t (*read)(struct file * , char * , size_t  , loff_t * ) ;
   ssize_t (*write)(struct file * , char const   * , size_t  , loff_t * ) ;
   ssize_t (*aio_read)(struct kiocb * , struct iovec  const  * , unsigned long  ,
                       loff_t  ) ;
   ssize_t (*aio_write)(struct kiocb * , struct iovec  const  * , unsigned long  ,
                        loff_t  ) ;
   int (*readdir)(struct file * , void * , int (*)(void * , char const   * , int  ,
                                                   loff_t  , u64  , unsigned int  ) ) ;
   unsigned int (*poll)(struct file * , struct poll_table_struct * ) ;
   int (*ioctl)(struct inode * , struct file * , unsigned int  , unsigned long  ) ;
   long (*unlocked_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   long (*compat_ioctl)(struct file * , unsigned int  , unsigned long  ) ;
   int (*mmap)(struct file * , struct vm_area_struct * ) ;
   int (*open)(struct inode * , struct file * ) ;
   int (*flush)(struct file * , fl_owner_t  ) ;
   int (*release)(struct inode * , struct file * ) ;
   int (*fsync)(struct file * , struct dentry * , int  ) ;
   int (*aio_fsync)(struct kiocb * , int  ) ;
   int (*fasync)(int  , struct file * , int  ) ;
   int (*lock)(struct file * , int  , struct file_lock * ) ;
   ssize_t (*sendpage)(struct file * , struct page * , int  , size_t  , loff_t * ,
                       int  ) ;
   unsigned long (*get_unmapped_area)(struct file * , unsigned long  , unsigned long  ,
                                      unsigned long  , unsigned long  ) ;
   int (*check_flags)(int  ) ;
   int (*dir_notify)(struct file * , unsigned long  ) ;
   int (*flock)(struct file * , int  , struct file_lock * ) ;
   ssize_t (*splice_write)(struct pipe_inode_info * , struct file * , loff_t * , size_t  ,
                           unsigned int  ) ;
   ssize_t (*splice_read)(struct file * , loff_t * , struct pipe_inode_info * , size_t  ,
                          unsigned int  ) ;
   int (*setlease)(struct file * , long  , struct file_lock ** ) ;
};
#line 1192 "include/linux/fs.h"
struct inode_operations {
   int (*create)(struct inode * , struct dentry * , int  , struct nameidata * ) ;
   struct dentry *(*lookup)(struct inode * , struct dentry * , struct nameidata * ) ;
   int (*link)(struct dentry * , struct inode * , struct dentry * ) ;
   int (*unlink)(struct inode * , struct dentry * ) ;
   int (*symlink)(struct inode * , struct dentry * , char const   * ) ;
   int (*mkdir)(struct inode * , struct dentry * , int  ) ;
   int (*rmdir)(struct inode * , struct dentry * ) ;
   int (*mknod)(struct inode * , struct dentry * , int  , dev_t  ) ;
   int (*rename)(struct inode * , struct dentry * , struct inode * , struct dentry * ) ;
   int (*readlink)(struct dentry * , char * , int  ) ;
   void *(*follow_link)(struct dentry * , struct nameidata * ) ;
   void (*put_link)(struct dentry * , struct nameidata * , void * ) ;
   void (*truncate)(struct inode * ) ;
   int (*permission)(struct inode * , int  , struct nameidata * ) ;
   int (*setattr)(struct dentry * , struct iattr * ) ;
   int (*getattr)(struct vfsmount * , struct dentry * , struct kstat * ) ;
   int (*setxattr)(struct dentry * , char const   * , void const   * , size_t  , int  ) ;
   ssize_t (*getxattr)(struct dentry * , char const   * , void * , size_t  ) ;
   ssize_t (*listxattr)(struct dentry * , char * , size_t  ) ;
   int (*removexattr)(struct dentry * , char const   * ) ;
   void (*truncate_range)(struct inode * , loff_t  , loff_t  ) ;
   long (*fallocate)(struct inode * , int  , loff_t  , loff_t  ) ;
};
#line 1218
struct seq_file;
#line 1232 "include/linux/fs.h"
struct super_operations {
   struct inode *(*alloc_inode)(struct super_block * ) ;
   void (*destroy_inode)(struct inode * ) ;
   void (*read_inode)(struct inode * ) ;
   void (*dirty_inode)(struct inode * ) ;
   int (*write_inode)(struct inode * , int  ) ;
   void (*put_inode)(struct inode * ) ;
   void (*drop_inode)(struct inode * ) ;
   void (*delete_inode)(struct inode * ) ;
   void (*put_super)(struct super_block * ) ;
   void (*write_super)(struct super_block * ) ;
   int (*sync_fs)(struct super_block * , int  ) ;
   void (*write_super_lockfs)(struct super_block * ) ;
   void (*unlockfs)(struct super_block * ) ;
   int (*statfs)(struct dentry * , struct kstatfs * ) ;
   int (*remount_fs)(struct super_block * , int * , char * ) ;
   void (*clear_inode)(struct inode * ) ;
   void (*umount_begin)(struct vfsmount * , int  ) ;
   int (*show_options)(struct seq_file * , struct vfsmount * ) ;
   int (*show_stats)(struct seq_file * , struct vfsmount * ) ;
   ssize_t (*quota_read)(struct super_block * , int  , char * , size_t  , loff_t  ) ;
   ssize_t (*quota_write)(struct super_block * , int  , char const   * , size_t  ,
                          loff_t  ) ;
};
#line 1405 "include/linux/fs.h"
struct file_system_type {
   char const   *name ;
   int fs_flags ;
   int (*get_sb)(struct file_system_type * , int  , char const   * , void * , struct vfsmount * ) ;
   void (*kill_sb)(struct super_block * ) ;
   struct module *owner ;
   struct file_system_type *next ;
   struct list_head fs_supers ;
   struct lock_class_key s_lock_key ;
   struct lock_class_key s_umount_key ;
   struct lock_class_key i_lock_key ;
   struct lock_class_key i_mutex_key ;
   struct lock_class_key i_mutex_dir_key ;
   struct lock_class_key i_alloc_sem_key ;
};
#line 1782
struct bio;
#line 2096 "include/linux/fs.h"
struct mtop {
   short mt_op ;
   int mt_count ;
};
#line 154 "include/linux/ioport.h"
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};
#line 54 "include/linux/completion.h"
struct klist_node;
#line 55 "include/linux/completion.h"
struct klist {
   spinlock_t k_lock ;
   struct list_head k_list ;
   void (*get)(struct klist_node * ) ;
   void (*put)(struct klist_node * ) ;
};
#line 30 "include/linux/klist.h"
struct klist_node {
   struct klist *n_klist ;
   struct list_head n_node ;
   struct kref n_ref ;
   struct completion n_removed ;
};
#line 60 "include/linux/klist.h"
struct dev_archdata {
   void *acpi_handle ;
   void *iommu ;
};
#line 11 "include/asm/device.h"
struct class;
#line 12
struct class_device;
#line 13
struct bus_type;
#line 14 "include/asm/device.h"
struct bus_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct bus_type * , char * ) ;
   ssize_t (*store)(struct bus_type * , char const   * , size_t  ) ;
};
#line 51 "include/linux/device.h"
struct device_attribute;
#line 51
struct driver_attribute;
#line 51 "include/linux/device.h"
struct bus_type {
   char const   *name ;
   struct module *owner ;
   struct kset subsys ;
   struct kset drivers ;
   struct kset devices ;
   struct klist klist_devices ;
   struct klist klist_drivers ;
   struct blocking_notifier_head bus_notifier ;
   struct bus_attribute *bus_attrs ;
   struct device_attribute *dev_attrs ;
   struct driver_attribute *drv_attrs ;
   int (*match)(struct device * , struct device_driver * ) ;
   int (*uevent)(struct device * , struct kobj_uevent_env * ) ;
   int (*probe)(struct device * ) ;
   int (*remove)(struct device * ) ;
   void (*shutdown)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*suspend_late)(struct device * , pm_message_t  ) ;
   int (*resume_early)(struct device * ) ;
   int (*resume)(struct device * ) ;
   unsigned char drivers_autoprobe : 1 ;
};
#line 109 "include/linux/device.h"
struct device_driver {
   char const   *name ;
   struct bus_type *bus ;
   struct kobject kobj ;
   struct klist klist_devices ;
   struct klist_node knode_bus ;
   struct module *owner ;
   char const   *mod_name ;
   struct module_kobject *mkobj ;
   int (*probe)(struct device * ) ;
   int (*remove)(struct device * ) ;
   void (*shutdown)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
};
#line 148 "include/linux/device.h"
struct driver_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device_driver * , char * ) ;
   ssize_t (*store)(struct device_driver * , char const   * , size_t  ) ;
};
#line 168
struct class_attribute;
#line 168
struct class_device_attribute;
#line 168 "include/linux/device.h"
struct class {
   char const   *name ;
   struct module *owner ;
   struct kset subsys ;
   struct list_head children ;
   struct list_head devices ;
   struct list_head interfaces ;
   struct kset class_dirs ;
   struct semaphore sem ;
   struct class_attribute *class_attrs ;
   struct class_device_attribute *class_dev_attrs ;
   struct device_attribute *dev_attrs ;
   int (*uevent)(struct class_device * , struct kobj_uevent_env * ) ;
   int (*dev_uevent)(struct device * , struct kobj_uevent_env * ) ;
   void (*release)(struct class_device * ) ;
   void (*class_release)(struct class * ) ;
   void (*dev_release)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
};
#line 202 "include/linux/device.h"
struct class_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct class * , char * ) ;
   ssize_t (*store)(struct class * , char const   * , size_t  ) ;
};
#line 216 "include/linux/device.h"
struct class_device_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct class_device * , char * ) ;
   ssize_t (*store)(struct class_device * , char const   * , size_t  ) ;
};
#line 228 "include/linux/device.h"
struct class_device {
   struct list_head node ;
   struct kobject kobj ;
   struct class *class ;
   dev_t devt ;
   struct device *dev ;
   void *class_data ;
   struct class_device *parent ;
   struct attribute_group **groups ;
   void (*release)(struct class_device * ) ;
   int (*uevent)(struct class_device * , struct kobj_uevent_env * ) ;
   char class_id[20U] ;
};
#line 321 "include/linux/device.h"
struct device_type {
   char const   *name ;
   struct attribute_group **groups ;
   int (*uevent)(struct device * , struct kobj_uevent_env * ) ;
   void (*release)(struct device * ) ;
   int (*suspend)(struct device * , pm_message_t  ) ;
   int (*resume)(struct device * ) ;
};
#line 339 "include/linux/device.h"
struct device_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device * , struct device_attribute * , char * ) ;
   ssize_t (*store)(struct device * , struct device_attribute * , char const   * ,
                    size_t  ) ;
};
#line 399
struct dma_coherent_mem;
#line 399 "include/linux/device.h"
struct device {
   struct klist klist_children ;
   struct klist_node knode_parent ;
   struct klist_node knode_driver ;
   struct klist_node knode_bus ;
   struct device *parent ;
   struct kobject kobj ;
   char bus_id[20U] ;
   struct device_type *type ;
   unsigned char is_registered : 1 ;
   unsigned char uevent_suppress : 1 ;
   struct semaphore sem ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *driver_data ;
   void *platform_data ;
   struct dev_pm_info power ;
   int numa_node ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct dev_archdata archdata ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct list_head node ;
   struct class *class ;
   dev_t devt ;
   struct attribute_group **groups ;
   void (*release)(struct device * ) ;
};
#line 46 "include/linux/sched.h"
struct rb_node {
   unsigned long rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
};
#line 108 "include/linux/rbtree.h"
struct rb_root {
   struct rb_node *rb_node ;
};
#line 21 "include/asm/mmu.h"
struct __anonstruct_mm_context_t_83 {
   void *ldt ;
   rwlock_t ldtlock ;
   int size ;
   struct mutex lock ;
   void *vdso ;
};
#line 21 "include/asm/mmu.h"
typedef struct __anonstruct_mm_context_t_83 mm_context_t;
#line 24 "include/linux/mm_types.h"
typedef atomic_long_t mm_counter_t;
#line 25 "include/linux/mm_types.h"
union __anonunion_ldv_10277_84 {
   atomic_t _mapcount ;
   unsigned int inuse ;
};
#line 25 "include/linux/mm_types.h"
struct __anonstruct_ldv_10282_86 {
   unsigned long private ;
   struct address_space *mapping ;
};
#line 25 "include/linux/mm_types.h"
union __anonunion_ldv_10286_85 {
   struct __anonstruct_ldv_10282_86 ldv_10282 ;
   spinlock_t ptl ;
   struct kmem_cache *slab ;
   struct page *first_page ;
};
#line 25 "include/linux/mm_types.h"
union __anonunion_ldv_10290_87 {
   unsigned long index ;
   void *freelist ;
};
#line 25 "include/linux/mm_types.h"
struct page {
   unsigned long flags ;
   atomic_t _count ;
   union __anonunion_ldv_10277_84 ldv_10277 ;
   union __anonunion_ldv_10286_85 ldv_10286 ;
   union __anonunion_ldv_10290_87 ldv_10290 ;
   struct list_head lru ;
};
#line 76 "include/linux/mm_types.h"
struct __anonstruct_vm_set_89 {
   struct list_head list ;
   void *parent ;
   struct vm_area_struct *head ;
};
#line 76 "include/linux/mm_types.h"
union __anonunion_shared_88 {
   struct __anonstruct_vm_set_89 vm_set ;
   struct raw_prio_tree_node prio_tree_node ;
};
#line 76
struct anon_vma;
#line 76
struct vm_operations_struct;
#line 76
struct mempolicy;
#line 76 "include/linux/mm_types.h"
struct vm_area_struct {
   struct mm_struct *vm_mm ;
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   struct rb_node vm_rb ;
   union __anonunion_shared_88 shared ;
   struct list_head anon_vma_node ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   unsigned long vm_truncate_count ;
   struct mempolicy *vm_policy ;
};
#line 154
struct kioctx;
#line 154 "include/linux/mm_types.h"
struct mm_struct {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   struct vm_area_struct *mmap_cache ;
   unsigned long (*get_unmapped_area)(struct file * , unsigned long  , unsigned long  ,
                                      unsigned long  , unsigned long  ) ;
   void (*unmap_area)(struct mm_struct * , unsigned long  ) ;
   unsigned long mmap_base ;
   unsigned long task_size ;
   unsigned long cached_hole_size ;
   unsigned long free_area_cache ;
   pgd_t *pgd ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   int map_count ;
   struct rw_semaphore mmap_sem ;
   spinlock_t page_table_lock ;
   struct list_head mmlist ;
   mm_counter_t _file_rss ;
   mm_counter_t _anon_rss ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   unsigned long shared_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long reserved_vm ;
   unsigned long def_flags ;
   unsigned long nr_ptes ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[34U] ;
   cpumask_t cpu_vm_mask ;
   mm_context_t context ;
   unsigned int faultstamp ;
   unsigned int token_priority ;
   unsigned int last_interval ;
   unsigned long flags ;
   int core_waiters ;
   struct completion *core_startup_done ;
   struct completion core_done ;
   rwlock_t ioctx_list_lock ;
   struct kioctx *ioctx_list ;
};
#line 7 "include/asm-generic/cputime.h"
typedef unsigned long cputime_t;
#line 153 "include/linux/ipc.h"
struct sem_undo;
#line 116 "include/linux/sem.h"
struct sem_undo {
   struct sem_undo *proc_next ;
   struct sem_undo *id_next ;
   int semid ;
   short *semadj ;
};
#line 126 "include/linux/sem.h"
struct sem_undo_list {
   atomic_t refcnt ;
   spinlock_t lock ;
   struct sem_undo *proc_list ;
};
#line 135 "include/linux/sem.h"
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};
#line 144
struct siginfo;
#line 32 "include/asm/signal.h"
struct __anonstruct_sigset_t_90 {
   unsigned long sig[1U] ;
};
#line 32 "include/asm/signal.h"
typedef struct __anonstruct_sigset_t_90 sigset_t;
#line 17 "include/asm-generic/signal.h"
typedef void __signalfn_t(int  );
#line 18 "include/asm-generic/signal.h"
typedef __signalfn_t *__sighandler_t;
#line 20 "include/asm-generic/signal.h"
typedef void __restorefn_t(void);
#line 21 "include/asm-generic/signal.h"
typedef __restorefn_t *__sigrestore_t;
#line 22 "include/asm-generic/signal.h"
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};
#line 168 "include/asm/signal.h"
struct k_sigaction {
   struct sigaction sa ;
};
#line 180 "include/asm/signal.h"
union sigval {
   int sival_int ;
   void *sival_ptr ;
};
#line 10 "include/asm-generic/siginfo.h"
typedef union sigval sigval_t;
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__kill_92 {
   pid_t _pid ;
   uid_t _uid ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__timer_93 {
   timer_t _tid ;
   int _overrun ;
   char _pad[0U] ;
   sigval_t _sigval ;
   int _sys_private ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__rt_94 {
   pid_t _pid ;
   uid_t _uid ;
   sigval_t _sigval ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__sigchld_95 {
   pid_t _pid ;
   uid_t _uid ;
   int _status ;
   clock_t _utime ;
   clock_t _stime ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__sigfault_96 {
   void *_addr ;
};
#line 11 "include/asm-generic/siginfo.h"
struct __anonstruct__sigpoll_97 {
   long _band ;
   int _fd ;
};
#line 11 "include/asm-generic/siginfo.h"
union __anonunion__sifields_91 {
   int _pad[28U] ;
   struct __anonstruct__kill_92 _kill ;
   struct __anonstruct__timer_93 _timer ;
   struct __anonstruct__rt_94 _rt ;
   struct __anonstruct__sigchld_95 _sigchld ;
   struct __anonstruct__sigfault_96 _sigfault ;
   struct __anonstruct__sigpoll_97 _sigpoll ;
};
#line 11 "include/asm-generic/siginfo.h"
struct siginfo {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __anonunion__sifields_91 _sifields ;
};
#line 93 "include/asm-generic/siginfo.h"
typedef struct siginfo siginfo_t;
#line 291
struct user_struct;
#line 20 "include/linux/signal.h"
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};
#line 7 "include/linux/securebits.h"
struct fs_struct {
   atomic_t count ;
   rwlock_t lock ;
   int umask ;
   struct dentry *root ;
   struct dentry *pwd ;
   struct dentry *altroot ;
   struct vfsmount *rootmnt ;
   struct vfsmount *pwdmnt ;
   struct vfsmount *altrootmnt ;
};
#line 80 "include/linux/proportions.h"
struct prop_local_single {
   unsigned long events ;
   int shift ;
   unsigned long period ;
   spinlock_t lock ;
};
#line 10 "include/linux/seccomp.h"
struct __anonstruct_seccomp_t_100 {
   int mode ;
};
#line 10 "include/linux/seccomp.h"
typedef struct __anonstruct_seccomp_t_100 seccomp_t;
#line 21 "include/linux/seccomp.h"
struct robust_list {
   struct robust_list *next ;
};
#line 50 "include/linux/futex.h"
struct robust_list_head {
   struct robust_list list ;
   long futex_offset ;
   struct robust_list *list_op_pending ;
};
#line 156 "include/linux/futex.h"
struct plist_head {
   struct list_head prio_list ;
   struct list_head node_list ;
   spinlock_t *lock ;
};
#line 36 "include/linux/rtmutex.h"
struct rt_mutex_waiter;
#line 41 "include/linux/resource.h"
struct rlimit {
   unsigned long rlim_cur ;
   unsigned long rlim_max ;
};
#line 73
struct hrtimer_clock_base;
#line 74
struct hrtimer_cpu_base;
#line 80
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
} ;
#line 85
enum hrtimer_cb_mode {
    HRTIMER_CB_SOFTIRQ = 0,
    HRTIMER_CB_IRQSAFE = 1,
    HRTIMER_CB_IRQSAFE_NO_RESTART = 2,
    HRTIMER_CB_IRQSAFE_NO_SOFTIRQ = 3
} ;
#line 92 "include/linux/resource.h"
struct hrtimer {
   struct rb_node node ;
   ktime_t expires ;
   enum hrtimer_restart (*function)(struct hrtimer * ) ;
   struct hrtimer_clock_base *base ;
   unsigned long state ;
   enum hrtimer_cb_mode cb_mode ;
   struct list_head cb_entry ;
   void *start_site ;
   char start_comm[16U] ;
   int start_pid ;
};
#line 140 "include/linux/hrtimer.h"
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   clockid_t index ;
   struct rb_root active ;
   struct rb_node *first ;
   ktime_t resolution ;
   ktime_t (*get_time)(void) ;
   ktime_t (*get_softirq_time)(void) ;
   ktime_t softirq_time ;
   ktime_t offset ;
   int (*reprogram)(struct hrtimer * , struct hrtimer_clock_base * , ktime_t  ) ;
};
#line 169 "include/linux/hrtimer.h"
struct hrtimer_cpu_base {
   spinlock_t lock ;
   struct lock_class_key lock_key ;
   struct hrtimer_clock_base clock_base[2U] ;
   ktime_t expires_next ;
   int hres_active ;
   struct list_head cb_pending ;
   unsigned long nr_events ;
};
#line 353 "include/linux/hrtimer.h"
struct task_io_accounting {
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};
#line 34 "include/linux/task_io_accounting.h"
struct futex_pi_state;
#line 137 "include/linux/sched.h"
struct cfs_rq;
#line 138
struct task_group;
#line 292
struct nsproxy;
#line 43 "include/linux/aio_abi.h"
struct io_event {
   __u64 data ;
   __u64 obj ;
   __s64 res ;
   __s64 res2 ;
};
#line 105 "include/linux/aio_abi.h"
struct iovec {
   void *iov_base ;
   __kernel_size_t iov_len ;
};
#line 56 "include/linux/uio.h"
union __anonunion_ki_obj_104 {
   void *user ;
   struct task_struct *tsk ;
};
#line 56 "include/linux/uio.h"
struct kiocb {
   struct list_head ki_run_list ;
   unsigned long ki_flags ;
   int ki_users ;
   unsigned int ki_key ;
   struct file *ki_filp ;
   struct kioctx *ki_ctx ;
   int (*ki_cancel)(struct kiocb * , struct io_event * ) ;
   ssize_t (*ki_retry)(struct kiocb * ) ;
   void (*ki_dtor)(struct kiocb * ) ;
   union __anonunion_ki_obj_104 ki_obj ;
   __u64 ki_user_data ;
   wait_queue_t ki_wait ;
   loff_t ki_pos ;
   atomic_t ki_bio_count ;
   void *private ;
   unsigned short ki_opcode ;
   size_t ki_nbytes ;
   char *ki_buf ;
   size_t ki_left ;
   struct iovec ki_inline_vec ;
   struct iovec *ki_iovec ;
   unsigned long ki_nr_segs ;
   unsigned long ki_cur_seg ;
   struct list_head ki_list ;
   struct file *ki_eventfd ;
};
#line 164 "include/linux/aio.h"
struct aio_ring_info {
   unsigned long mmap_base ;
   unsigned long mmap_size ;
   struct page **ring_pages ;
   spinlock_t ring_lock ;
   long nr_pages ;
   unsigned int nr ;
   unsigned int tail ;
   struct page *internal_pages[8U] ;
};
#line 180 "include/linux/aio.h"
struct kioctx {
   atomic_t users ;
   int dead ;
   struct mm_struct *mm ;
   unsigned long user_id ;
   struct kioctx *next ;
   wait_queue_head_t wait ;
   spinlock_t ctx_lock ;
   int reqs_active ;
   struct list_head active_reqs ;
   struct list_head run_list ;
   unsigned int max_reqs ;
   struct aio_ring_info ring_info ;
   struct delayed_work wq ;
};
#line 351 "include/linux/sched.h"
struct sighand_struct {
   atomic_t count ;
   struct k_sigaction action[64U] ;
   spinlock_t siglock ;
   wait_queue_head_t signalfd_wqh ;
};
#line 377 "include/linux/sched.h"
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   cputime_t ac_utime ;
   cputime_t ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};
#line 385 "include/linux/sched.h"
union __anonunion_ldv_11502_105 {
   pid_t pgrp ;
   pid_t __pgrp ;
};
#line 385 "include/linux/sched.h"
union __anonunion_ldv_11507_106 {
   pid_t session ;
   pid_t __session ;
};
#line 385
struct tty_struct;
#line 385
struct taskstats;
#line 385
struct tty_audit_buf;
#line 385 "include/linux/sched.h"
struct signal_struct {
   atomic_t count ;
   atomic_t live ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   int group_exit_code ;
   struct task_struct *group_exit_task ;
   int notify_count ;
   int group_stop_count ;
   unsigned int flags ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   struct task_struct *tsk ;
   ktime_t it_real_incr ;
   cputime_t it_prof_expires ;
   cputime_t it_virt_expires ;
   cputime_t it_prof_incr ;
   cputime_t it_virt_incr ;
   union __anonunion_ldv_11502_105 ldv_11502 ;
   struct pid *tty_old_pgrp ;
   union __anonunion_ldv_11507_106 ldv_11507 ;
   int leader ;
   struct tty_struct *tty ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t cutime ;
   cputime_t cstime ;
   cputime_t gtime ;
   cputime_t cgtime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   unsigned long long sum_sched_runtime ;
   struct rlimit rlim[15U] ;
   struct list_head cpu_timers[3U] ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   struct tty_audit_buf *tty_audit_buf ;
};
#line 505 "include/linux/sched.h"
struct user_struct {
   atomic_t __count ;
   atomic_t processes ;
   atomic_t files ;
   atomic_t sigpending ;
   atomic_t inotify_watches ;
   atomic_t inotify_devs ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   struct key *uid_keyring ;
   struct key *session_keyring ;
   struct hlist_node uidhash_node ;
   uid_t uid ;
   struct task_group *tg ;
   struct kset kset ;
   struct subsys_attribute user_attr ;
   struct work_struct work ;
};
#line 566
struct reclaim_state;
#line 567 "include/linux/sched.h"
struct sched_info {
   unsigned long pcount ;
   unsigned long long cpu_time ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
   unsigned int bkl_count ;
};
#line 590 "include/linux/sched.h"
struct task_delay_info {
   spinlock_t lock ;
   unsigned int flags ;
   struct timespec blkio_start ;
   struct timespec blkio_end ;
   u64 blkio_delay ;
   u64 swapin_delay ;
   u32 blkio_count ;
   u32 swapin_count ;
};
#line 627
enum cpu_idle_type {
    CPU_IDLE = 0,
    CPU_NOT_IDLE = 1,
    CPU_NEWLY_IDLE = 2,
    CPU_MAX_IDLE_TYPES = 3
} ;
#line 634 "include/linux/sched.h"
struct sched_group {
   struct sched_group *next ;
   cpumask_t cpumask ;
   unsigned int __cpu_power ;
   u32 reciprocal_cpu_power ;
};
#line 693 "include/linux/sched.h"
struct sched_domain {
   struct sched_domain *parent ;
   struct sched_domain *child ;
   struct sched_group *groups ;
   cpumask_t span ;
   unsigned long min_interval ;
   unsigned long max_interval ;
   unsigned int busy_factor ;
   unsigned int imbalance_pct ;
   unsigned int cache_nice_tries ;
   unsigned int busy_idx ;
   unsigned int idle_idx ;
   unsigned int newidle_idx ;
   unsigned int wake_idx ;
   unsigned int forkexec_idx ;
   int flags ;
   unsigned long last_balance ;
   unsigned int balance_interval ;
   unsigned int nr_balance_failed ;
   unsigned int lb_count[3U] ;
   unsigned int lb_failed[3U] ;
   unsigned int lb_balanced[3U] ;
   unsigned int lb_imbalance[3U] ;
   unsigned int lb_gained[3U] ;
   unsigned int lb_hot_gained[3U] ;
   unsigned int lb_nobusyg[3U] ;
   unsigned int lb_nobusyq[3U] ;
   unsigned int alb_count ;
   unsigned int alb_failed ;
   unsigned int alb_pushed ;
   unsigned int sbe_count ;
   unsigned int sbe_balanced ;
   unsigned int sbe_pushed ;
   unsigned int sbf_count ;
   unsigned int sbf_balanced ;
   unsigned int sbf_pushed ;
   unsigned int ttwu_wake_remote ;
   unsigned int ttwu_move_affine ;
   unsigned int ttwu_move_balance ;
};
#line 770
struct io_context;
#line 771 "include/linux/sched.h"
struct group_info {
   int ngroups ;
   atomic_t usage ;
   gid_t small_block[32U] ;
   int nblocks ;
   gid_t *blocks[0U] ;
};
#line 811
struct audit_context;
#line 813
struct rq;
#line 814 "include/linux/sched.h"
struct sched_class {
   struct sched_class  const  *next ;
   void (*enqueue_task)(struct rq * , struct task_struct * , int  ) ;
   void (*dequeue_task)(struct rq * , struct task_struct * , int  ) ;
   void (*yield_task)(struct rq * ) ;
   void (*check_preempt_curr)(struct rq * , struct task_struct * ) ;
   struct task_struct *(*pick_next_task)(struct rq * ) ;
   void (*put_prev_task)(struct rq * , struct task_struct * ) ;
   unsigned long (*load_balance)(struct rq * , int  , struct rq * , unsigned long  ,
                                 struct sched_domain * , enum cpu_idle_type  , int * ,
                                 int * ) ;
   int (*move_one_task)(struct rq * , int  , struct rq * , struct sched_domain * ,
                        enum cpu_idle_type  ) ;
   void (*set_curr_task)(struct rq * ) ;
   void (*task_tick)(struct rq * , struct task_struct * ) ;
   void (*task_new)(struct rq * , struct task_struct * ) ;
};
#line 846 "include/linux/sched.h"
struct load_weight {
   unsigned long weight ;
   unsigned long inv_weight ;
};
#line 850 "include/linux/sched.h"
struct sched_entity {
   struct load_weight load ;
   struct rb_node run_node ;
   unsigned int on_rq ;
   int peer_preempt ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 wait_start ;
   u64 wait_max ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_forced2_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
};
#line 911
struct linux_binfmt;
#line 911
struct css_set;
#line 911
struct compat_robust_list_head;
#line 911 "include/linux/sched.h"
struct task_struct {
   long volatile   state ;
   void *stack ;
   atomic_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   int lock_depth ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   struct list_head run_list ;
   struct sched_class  const  *sched_class ;
   struct sched_entity se ;
   struct hlist_head preempt_notifiers ;
   unsigned short ioprio ;
   unsigned char fpu_counter ;
   s8 oomkilladj ;
   unsigned int btrace_seq ;
   unsigned int policy ;
   cpumask_t cpus_allowed ;
   unsigned int time_slice ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct list_head ptrace_children ;
   struct list_head ptrace_list ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   struct linux_binfmt *binfmt ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned int personality ;
   unsigned char did_exec : 1 ;
   pid_t pid ;
   pid_t tgid ;
   unsigned long stack_canary ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct pid_link pids[3U] ;
   struct list_head thread_group ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   unsigned int rt_priority ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t utimescaled ;
   cputime_t stimescaled ;
   cputime_t gtime ;
   cputime_t prev_utime ;
   cputime_t prev_stime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   struct timespec start_time ;
   struct timespec real_start_time ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   cputime_t it_prof_expires ;
   cputime_t it_virt_expires ;
   unsigned long long it_sched_expires ;
   struct list_head cpu_timers[3U] ;
   uid_t uid ;
   uid_t euid ;
   uid_t suid ;
   uid_t fsuid ;
   gid_t gid ;
   gid_t egid ;
   gid_t sgid ;
   gid_t fsgid ;
   struct group_info *group_info ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   unsigned char keep_capabilities : 1 ;
   struct user_struct *user ;
   struct key *request_key_auth ;
   struct key *thread_keyring ;
   unsigned char jit_keyring ;
   char comm[16U] ;
   int link_count ;
   int total_link_count ;
   struct sysv_sem sysvsem ;
   struct thread_struct thread ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t sas_ss_size ;
   int (*notifier)(void * ) ;
   void *notifier_data ;
   sigset_t *notifier_mask ;
   void *security ;
   struct audit_context *audit_context ;
   seccomp_t seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   spinlock_t pi_lock ;
   struct plist_head pi_waiters ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct mutex_waiter *blocked_on ;
   unsigned int irq_events ;
   int hardirqs_enabled ;
   unsigned long hardirq_enable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_disable_event ;
   int softirqs_enabled ;
   unsigned long softirq_disable_ip ;
   unsigned int softirq_disable_event ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_enable_event ;
   int hardirq_context ;
   int softirq_context ;
   u64 curr_chain_key ;
   int lockdep_depth ;
   struct held_lock held_locks[30U] ;
   unsigned int lockdep_recursion ;
   void *journal_info ;
   struct bio *bio_list ;
   struct bio **bio_tail ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   unsigned long ptrace_message ;
   siginfo_t *last_siginfo ;
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   struct task_io_accounting ioac ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   cputime_t acct_stimexpd ;
   struct mempolicy *mempolicy ;
   short il_next ;
   nodemask_t mems_allowed ;
   int cpuset_mems_generation ;
   int cpuset_mem_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   atomic_t fs_excl ;
   struct rcu_head rcu ;
   struct pipe_inode_info *splice_pipe ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   struct prop_local_single dirties ;
};
#line 1968 "include/linux/sched.h"
struct exception_table_entry {
   unsigned long insn ;
   unsigned long fixup ;
};
#line 167 "/work/ldvuser/novikov/work/current--X--drivers/block/paride/pt.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/10/dscv_tempdir/dscv/ri/08_1a/drivers/block/paride/pt.c.prepared"
struct pi_protocol;
#line 167 "/work/ldvuser/novikov/work/current--X--drivers/block/paride/pt.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/10/dscv_tempdir/dscv/ri/08_1a/drivers/block/paride/pt.c.prepared"
struct pi_adapter {
   struct pi_protocol *proto ;
   int port ;
   int mode ;
   int delay ;
   int devtype ;
   char *device ;
   int unit ;
   int saved_r0 ;
   int saved_r2 ;
   int reserved ;
   unsigned long private ;
   wait_queue_head_t parq ;
   void *pardev ;
   char *parname ;
   int claimed ;
   void (*claim_cont)(void) ;
};
#line 57 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/paride/paride.h"
typedef struct pi_adapter PIA;
#line 134 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/paride/paride.h"
struct pi_protocol {
   char name[8U] ;
   int index ;
   int max_mode ;
   int epp_first ;
   int default_delay ;
   int max_units ;
   void (*write_regr)(PIA * , int  , int  , int  ) ;
   int (*read_regr)(PIA * , int  , int  ) ;
   void (*write_block)(PIA * , char * , int  ) ;
   void (*read_block)(PIA * , char * , int  ) ;
   void (*connect)(PIA * ) ;
   void (*disconnect)(PIA * ) ;
   int (*test_port)(PIA * ) ;
   int (*probe_unit)(PIA * ) ;
   int (*test_proto)(PIA * , char * , int  ) ;
   void (*log_adapter)(PIA * , char * , int  ) ;
   int (*init_proto)(PIA * ) ;
   void (*release_proto)(PIA * ) ;
   struct module *owner ;
};
#line 208 "/work/ldvuser/novikov/work/current--X--drivers/block/paride/pt.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/10/dscv_tempdir/dscv/ri/08_1a/drivers/block/paride/pt.c.prepared"
struct pt_unit {
   struct pi_adapter pia ;
   struct pi_adapter *pi ;
   int flags ;
   int last_sense ;
   int drive ;
   atomic_t available ;
   int bs ;
   int capacity ;
   int present ;
   char *bufptr ;
   char name[8U] ;
};
#line 1 "<compiler builtins>"
long __builtin_expect(long exp , long c ) ;
#line 148 "include/linux/kernel.h"
extern int snprintf(char * , size_t  , char const   *  , ...) ;
#line 180
extern int printk(char const   *  , ...) ;
#line 102 "include/asm/atomic_64.h"
__inline static void atomic_inc(atomic_t *v ) 
{ 


  {
#line 104
  __asm__  volatile   (".section .smp_locks,\"a\"\n  .align 8\n  .quad 661f\n.previous\n661:\n\tlock; incl %0": "=m" (v->counter): "m" (v->counter));
#line 108
  return;
}
}
#line 132 "include/asm/atomic_64.h"
__inline static int atomic_dec_and_test(atomic_t *v ) 
{ 
  unsigned char c ;

  {
#line 136
  __asm__  volatile   (".section .smp_locks,\"a\"\n  .align 8\n  .quad 661f\n.previous\n661:\n\tlock; decl %0; sete %1": "=m" (v->counter),
                       "=qm" (c): "m" (v->counter): "memory");
#line 140
  return ((unsigned int )c != 0U);
}
}
#line 16 "include/asm/delay.h"
extern void __const_udelay(unsigned long  ) ;
#line 95 "include/linux/slab.h"
extern void kfree(void const   * ) ;
#line 163 "include/linux/slub_def.h"
extern void *__kmalloc(size_t  , gfp_t  ) ;
#line 165 "include/linux/slub_def.h"
__inline static void *kmalloc(size_t size , gfp_t flags ) 
{ 
  void *tmp___3 ;

  {
#line 181
  tmp___3 = __kmalloc(size, flags);
#line 181
  return (tmp___3);
}
}
#line 84 "include/linux/module.h"
extern struct module __this_module ;
#line 126 "/work/ldvuser/novikov/work/current--X--drivers/block/paride/pt.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/10/dscv_tempdir/dscv/ri/08_1a/drivers/block/paride/pt.c.prepared"
static int verbose  =    0;
#line 127 "/work/ldvuser/novikov/work/current--X--drivers/block/paride/pt.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/10/dscv_tempdir/dscv/ri/08_1a/drivers/block/paride/pt.c.prepared"
static int major  =    96;
#line 128 "/work/ldvuser/novikov/work/current--X--drivers/block/paride/pt.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/10/dscv_tempdir/dscv/ri/08_1a/drivers/block/paride/pt.c.prepared"
static char *name  =    (char *)"pt";
#line 129 "/work/ldvuser/novikov/work/current--X--drivers/block/paride/pt.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/10/dscv_tempdir/dscv/ri/08_1a/drivers/block/paride/pt.c.prepared"
static int disable  =    0;
#line 131 "/work/ldvuser/novikov/work/current--X--drivers/block/paride/pt.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/10/dscv_tempdir/dscv/ri/08_1a/drivers/block/paride/pt.c.prepared"
static int drive0[6U]  = {      0,      0,      0,      -1, 
        -1,      -1};
#line 132 "/work/ldvuser/novikov/work/current--X--drivers/block/paride/pt.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/10/dscv_tempdir/dscv/ri/08_1a/drivers/block/paride/pt.c.prepared"
static int drive1[6U]  = {      0,      0,      0,      -1, 
        -1,      -1};
#line 133 "/work/ldvuser/novikov/work/current--X--drivers/block/paride/pt.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/10/dscv_tempdir/dscv/ri/08_1a/drivers/block/paride/pt.c.prepared"
static int drive2[6U]  = {      0,      0,      0,      -1, 
        -1,      -1};
#line 134 "/work/ldvuser/novikov/work/current--X--drivers/block/paride/pt.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/10/dscv_tempdir/dscv/ri/08_1a/drivers/block/paride/pt.c.prepared"
static int drive3[6U]  = {      0,      0,      0,      -1, 
        -1,      -1};
#line 136 "/work/ldvuser/novikov/work/current--X--drivers/block/paride/pt.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/10/dscv_tempdir/dscv/ri/08_1a/drivers/block/paride/pt.c.prepared"
static int (*drives[4U])[6U]  = {      & drive0,      & drive1,      & drive2,      & drive3};
#line 734 "include/linux/fs.h"
__inline static unsigned int iminor(struct inode  const  *inode ) 
{ 


  {
#line 736
  return ((unsigned int )inode->i_rdev & 1048575U);
}
}
#line 1602
extern int register_chrdev(unsigned int  , char const   * , struct file_operations  const  * ) ;
#line 1604
extern void unregister_chrdev(unsigned int  , char const   * ) ;
#line 27 "include/linux/err.h"
__inline static long PTR_ERR(void const   *ptr ) 
{ 


  {
#line 29
  return ((long )ptr);
}
}
#line 32 "include/linux/err.h"
__inline static long IS_ERR(void const   *ptr ) 
{ 
  long tmp ;

  {
#line 34
  tmp = __builtin_expect((unsigned long )ptr > 0xfffffffffffff000UL, 0L);
#line 34
  return (tmp);
}
}
#line 312 "include/linux/device.h"
extern struct class *class_create(struct module * , char const   * ) ;
#line 313
extern void class_destroy(struct class * ) ;
#line 314
extern struct class_device *class_device_create(struct class * , struct class_device * ,
                                                dev_t  , struct device * , char const   * 
                                                , ...) ;
#line 320
extern void class_device_destroy(struct class * , dev_t  ) ;
#line 289 "include/linux/sched.h"
extern long schedule_timeout_interruptible(long  ) ;
#line 243 "include/asm/uaccess_64.h"
extern unsigned long copy_to_user(void * , void const   * , unsigned int  ) ;
#line 245
extern unsigned long copy_from_user(void * , void const   * , unsigned int  ) ;
#line 61 "/work/ldvuser/novikov/inst/current/envs/linux/linux/drivers/block/paride/paride.h"
extern int pi_init(PIA * , int  , int  , int  , int  , int  , int  , char * , int  ,
                   int  , char * ) ;
#line 74
extern void pi_release(PIA * ) ;
#line 83
extern void pi_write_regr(PIA * , int  , int  , int  ) ;
#line 85
extern int pi_read_regr(PIA * , int  , int  ) ;
#line 87
extern void pi_write_block(PIA * , char * , int  ) ;
#line 89
extern void pi_read_block(PIA * , char * , int  ) ;
#line 91
extern void pi_connect(PIA * ) ;
#line 93
extern void pi_disconnect(PIA * ) ;
#line 199 "/work/ldvuser/novikov/work/current--X--drivers/block/paride/pt.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/10/dscv_tempdir/dscv/ri/08_1a/drivers/block/paride/pt.c.prepared"
static int pt_open(struct inode *inode , struct file *file ) ;
#line 200
static int pt_ioctl(struct inode *inode , struct file *file , unsigned int cmd , unsigned long arg ) ;
#line 202
static int pt_release(struct inode *inode , struct file *file ) ;
#line 203
static ssize_t pt_read(struct file *filp , char *buf , size_t count , loff_t *ppos ) ;
#line 205
static ssize_t pt_write(struct file *filp , char const   *buf , size_t count , loff_t *ppos ) ;
#line 207
static int pt_detect(void) ;
#line 235
static int pt_identify(struct pt_unit *tape ) ;
#line 237 "/work/ldvuser/novikov/work/current--X--drivers/block/paride/pt.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/10/dscv_tempdir/dscv/ri/08_1a/drivers/block/paride/pt.c.prepared"
static struct pt_unit pt[4U]  ;
#line 239 "/work/ldvuser/novikov/work/current--X--drivers/block/paride/pt.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/10/dscv_tempdir/dscv/ri/08_1a/drivers/block/paride/pt.c.prepared"
static char pt_scratch[512U]  ;
#line 243 "/work/ldvuser/novikov/work/current--X--drivers/block/paride/pt.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/10/dscv_tempdir/dscv/ri/08_1a/drivers/block/paride/pt.c.prepared"
static struct file_operations  const  pt_fops  = 
#line 243
     {& __this_module, 0, & pt_read, & pt_write, 0, 0, 0, 0, & pt_ioctl, 0, 0, 0, & pt_open,
    0, & pt_release, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
#line 253 "/work/ldvuser/novikov/work/current--X--drivers/block/paride/pt.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/10/dscv_tempdir/dscv/ri/08_1a/drivers/block/paride/pt.c.prepared"
static struct class *pt_class  ;
#line 255 "/work/ldvuser/novikov/work/current--X--drivers/block/paride/pt.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/10/dscv_tempdir/dscv/ri/08_1a/drivers/block/paride/pt.c.prepared"
__inline static int status_reg(struct pi_adapter *pi ) 
{ 
  int tmp ;

  {
#line 257
  tmp = pi_read_regr(pi, 1, 6);
#line 257
  return (tmp);
}
}
#line 260 "/work/ldvuser/novikov/work/current--X--drivers/block/paride/pt.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/10/dscv_tempdir/dscv/ri/08_1a/drivers/block/paride/pt.c.prepared"
__inline static int read_reg(struct pi_adapter *pi , int reg ) 
{ 
  int tmp ;

  {
#line 262
  tmp = pi_read_regr(pi, 0, reg);
#line 262
  return (tmp);
}
}
#line 265 "/work/ldvuser/novikov/work/current--X--drivers/block/paride/pt.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/10/dscv_tempdir/dscv/ri/08_1a/drivers/block/paride/pt.c.prepared"
__inline static void write_reg(struct pi_adapter *pi , int reg , int val ) 
{ 


  {
#line 267
  pi_write_regr(pi, 0, reg, val);
#line 268
  return;
}
}
#line 270 "/work/ldvuser/novikov/work/current--X--drivers/block/paride/pt.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/10/dscv_tempdir/dscv/ri/08_1a/drivers/block/paride/pt.c.prepared"
__inline static u8 DRIVE(struct pt_unit *tape ) 
{ 


  {
#line 272
  return ((unsigned int )((u8 )(tape->drive + 10)) * 16U);
}
}
#line 275 "/work/ldvuser/novikov/work/current--X--drivers/block/paride/pt.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/10/dscv_tempdir/dscv/ri/08_1a/drivers/block/paride/pt.c.prepared"
static int pt_wait(struct pt_unit *tape , int go , int stop , char *fun , char *msg ) 
{ 
  int j ;
  int r ;
  int e ;
  int s ;
  int p ;
  struct pi_adapter *pi ;
  int tmp ;

  {
#line 278
  pi = tape->pi;
#line 280
  j = 0;
#line 281
  goto ldv_12798;
  ldv_12797: 
#line 283
  __const_udelay(214750UL);
  ldv_12798: 
#line 281
  r = status_reg(pi);
#line 281
  if ((r & go) != 0 || (stop != 0 && (r & stop) == 0)) {
#line 281
    tmp = j;
#line 281
    j = j + 1;
#line 281
    if (tmp <= 239999) {
#line 283
      goto ldv_12797;
    } else {
#line 285
      goto ldv_12799;
    }
  } else {

  }
  ldv_12799: ;
#line 285
  if (((stop & 1) & r) != 0 || j > 239999) {
#line 286
    s = read_reg(pi, 7);
#line 287
    e = read_reg(pi, 1);
#line 288
    p = read_reg(pi, 2);
#line 289
    if (j > 239999) {
#line 290
      e = e | 256;
    } else {

    }
#line 291
    if ((unsigned long )fun != (unsigned long )((char *)0)) {
#line 292
      printk("%s: %s %s: alt=0x%x stat=0x%x err=0x%x loop=%d phase=%d\n", (char *)(& tape->name),
             fun, msg, r, s, e, j, p);
    } else {

    }
#line 295
    return ((e << 8) + s);
  } else {

  }
#line 297
  return (0);
}
}
#line 300 "/work/ldvuser/novikov/work/current--X--drivers/block/paride/pt.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/10/dscv_tempdir/dscv/ri/08_1a/drivers/block/paride/pt.c.prepared"
static int pt_command(struct pt_unit *tape , char *cmd , int dlen , char *fun ) 
{ 
  struct pi_adapter *pi ;
  u8 tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 302
  pi = tape->pi;
#line 303
  pi_connect(pi);
#line 305
  tmp = DRIVE(tape);
#line 305
  write_reg(pi, 6, (int )tmp);
#line 307
  tmp___0 = pt_wait(tape, 136, 0, fun, (char *)"before command");
#line 307
  if (tmp___0 != 0) {
#line 308
    pi_disconnect(pi);
#line 309
    return (-1);
  } else {

  }
#line 312
  write_reg(pi, 4, dlen % 256);
#line 313
  write_reg(pi, 5, dlen / 256);
#line 314
  write_reg(pi, 7, 160);
#line 316
  tmp___1 = pt_wait(tape, 128, 8, fun, (char *)"command DRQ");
#line 316
  if (tmp___1 != 0) {
#line 317
    pi_disconnect(pi);
#line 318
    return (-1);
  } else {

  }
#line 321
  tmp___2 = read_reg(pi, 2);
#line 321
  if (tmp___2 != 1) {
#line 322
    printk("%s: %s: command phase error\n", (char *)(& tape->name), fun);
#line 323
    pi_disconnect(pi);
#line 324
    return (-1);
  } else {

  }
#line 327
  pi_write_block(pi, cmd, 12);
#line 329
  return (0);
}
}
#line 332 "/work/ldvuser/novikov/work/current--X--drivers/block/paride/pt.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/10/dscv_tempdir/dscv/ri/08_1a/drivers/block/paride/pt.c.prepared"
static int pt_completion(struct pt_unit *tape , char *buf , char *fun ) 
{ 
  struct pi_adapter *pi ;
  int r ;
  int s ;
  int n ;
  int p ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 334
  pi = tape->pi;
#line 337
  r = pt_wait(tape, 128, 73, fun, (char *)"completion");
#line 340
  tmp___2 = read_reg(pi, 7);
#line 340
  if ((tmp___2 & 8) != 0) {
#line 341
    tmp = read_reg(pi, 4);
#line 341
    tmp___0 = read_reg(pi, 5);
#line 341
    n = ((tmp + tmp___0 * 256) + 3) & 65532;
#line 343
    tmp___1 = read_reg(pi, 2);
#line 343
    p = tmp___1 & 3;
#line 344
    if (p == 0) {
#line 345
      pi_write_block(pi, buf, n);
    } else {

    }
#line 346
    if (p == 2) {
#line 347
      pi_read_block(pi, buf, n);
    } else {

    }
  } else {

  }
#line 350
  s = pt_wait(tape, 128, 65, fun, (char *)"data done");
#line 352
  pi_disconnect(pi);
#line 354
  return (r != 0 ? r : s);
}
}
#line 357 "/work/ldvuser/novikov/work/current--X--drivers/block/paride/pt.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/10/dscv_tempdir/dscv/ri/08_1a/drivers/block/paride/pt.c.prepared"
static void pt_req_sense(struct pt_unit *tape , int quiet ) 
{ 
  char rs_cmd[12U] ;
  char buf[16U] ;
  int r ;
  unsigned long __ms ;
  unsigned long tmp ;

  {
#line 359
  rs_cmd[0] = 3;
#line 359
  rs_cmd[1] = 0;
#line 359
  rs_cmd[2] = 0;
#line 359
  rs_cmd[3] = 0;
#line 359
  rs_cmd[4] = 16;
#line 359
  rs_cmd[5] = 0;
#line 359
  rs_cmd[6] = 0;
#line 359
  rs_cmd[7] = 0;
#line 359
  rs_cmd[8] = 0;
#line 359
  rs_cmd[9] = 0;
#line 359
  rs_cmd[10] = 0;
#line 359
  rs_cmd[11] = 0;
#line 363
  r = pt_command(tape, (char *)(& rs_cmd), 16, (char *)"Request sense");
#line 364
  if (1) {
#line 364
    __const_udelay(4295000UL);
  } else {
#line 364
    __ms = 1UL;
#line 364
    goto ldv_12826;
    ldv_12825: 
#line 364
    __const_udelay(4295000UL);
    ldv_12826: 
#line 364
    tmp = __ms;
#line 364
    __ms = __ms - 1UL;
#line 364
    if (tmp != 0UL) {
#line 365
      goto ldv_12825;
    } else {

    }

  }
#line 365
  if (r == 0) {
#line 366
    pt_completion(tape, (char *)(& buf), (char *)"Request sense");
  } else {

  }
#line 368
  tape->last_sense = -1;
#line 369
  if (r == 0) {
#line 370
    if (quiet == 0) {
#line 371
      printk("%s: Sense key: %x, ASC: %x, ASQ: %x\n", (char *)(& tape->name), (int )buf[2] & 15,
             (int )buf[12], (int )buf[13]);
    } else {

    }
#line 373
    tape->last_sense = (((int )buf[2] & 15) | (((int )buf[12] << 8) & 65535)) | (((int )buf[13] & 255) << 16);
  } else {

  }
#line 376
  return;
}
}
#line 378 "/work/ldvuser/novikov/work/current--X--drivers/block/paride/pt.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/10/dscv_tempdir/dscv/ri/08_1a/drivers/block/paride/pt.c.prepared"
static int pt_atapi(struct pt_unit *tape , char *cmd , int dlen , char *buf , char *fun ) 
{ 
  int r ;
  unsigned long __ms ;
  unsigned long tmp ;

  {
#line 382
  r = pt_command(tape, cmd, dlen, fun);
#line 383
  if (1) {
#line 383
    __const_udelay(4295000UL);
  } else {
#line 383
    __ms = 1UL;
#line 383
    goto ldv_12838;
    ldv_12837: 
#line 383
    __const_udelay(4295000UL);
    ldv_12838: 
#line 383
    tmp = __ms;
#line 383
    __ms = __ms - 1UL;
#line 383
    if (tmp != 0UL) {
#line 384
      goto ldv_12837;
    } else {

    }

  }
#line 384
  if (r == 0) {
#line 385
    r = pt_completion(tape, buf, fun);
  } else {

  }
#line 386
  if (r != 0) {
#line 387
    pt_req_sense(tape, (unsigned long )fun == (unsigned long )((char *)0));
  } else {

  }
#line 389
  return (r);
}
}
#line 392 "/work/ldvuser/novikov/work/current--X--drivers/block/paride/pt.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/10/dscv_tempdir/dscv/ri/08_1a/drivers/block/paride/pt.c.prepared"
static void pt_sleep(int cs ) 
{ 


  {
#line 394
  schedule_timeout_interruptible((long )cs);
#line 395
  return;
}
}
#line 397 "/work/ldvuser/novikov/work/current--X--drivers/block/paride/pt.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/10/dscv_tempdir/dscv/ri/08_1a/drivers/block/paride/pt.c.prepared"
static int pt_poll_dsc(struct pt_unit *tape , int pause , int tmo , char *msg ) 
{ 
  struct pi_adapter *pi ;
  int k ;
  int e ;
  int s ;
  u8 tmp ;

  {
#line 399
  pi = tape->pi;
#line 402
  k = 0;
#line 403
  e = 0;
#line 404
  s = 0;
#line 405
  goto ldv_12855;
  ldv_12854: 
#line 406
  pt_sleep(pause);
#line 407
  k = k + 1;
#line 408
  pi_connect(pi);
#line 409
  tmp = DRIVE(tape);
#line 409
  write_reg(pi, 6, (int )tmp);
#line 410
  s = read_reg(pi, 7);
#line 411
  e = read_reg(pi, 1);
#line 412
  pi_disconnect(pi);
#line 413
  if ((s & 17) != 0) {
#line 414
    goto ldv_12853;
  } else {

  }
  ldv_12855: ;
#line 405
  if (k < tmo) {
#line 406
    goto ldv_12854;
  } else {

  }
  ldv_12853: ;
#line 416
  if (k >= tmo || s & 1) {
#line 417
    if (k >= tmo) {
#line 418
      printk("%s: %s DSC timeout\n", (char *)(& tape->name), msg);
    } else {
#line 420
      printk("%s: %s stat=0x%x err=0x%x\n", (char *)(& tape->name), msg, s, e);
    }
#line 422
    pt_req_sense(tape, 0);
#line 423
    return (0);
  } else {

  }
#line 425
  return (1);
}
}
#line 428 "/work/ldvuser/novikov/work/current--X--drivers/block/paride/pt.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/10/dscv_tempdir/dscv/ri/08_1a/drivers/block/paride/pt.c.prepared"
static void pt_media_access_cmd(struct pt_unit *tape , int tmo , char *cmd , char *fun ) 
{ 
  int tmp ;

  {
#line 430
  tmp = pt_command(tape, cmd, 0, fun);
#line 430
  if (tmp != 0) {
#line 431
    pt_req_sense(tape, 0);
#line 432
    return;
  } else {

  }
#line 434
  pi_disconnect(tape->pi);
#line 435
  pt_poll_dsc(tape, 250, tmo, fun);
#line 436
  return;
}
}
#line 438 "/work/ldvuser/novikov/work/current--X--drivers/block/paride/pt.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/10/dscv_tempdir/dscv/ri/08_1a/drivers/block/paride/pt.c.prepared"
static void pt_rewind(struct pt_unit *tape ) 
{ 
  char rw_cmd[12U] ;

  {
#line 440
  rw_cmd[0] = 1;
#line 440
  rw_cmd[1] = 0;
#line 440
  rw_cmd[2] = 0;
#line 440
  rw_cmd[3] = 0;
#line 440
  rw_cmd[4] = 0;
#line 440
  rw_cmd[5] = 0;
#line 440
  rw_cmd[6] = 0;
#line 440
  rw_cmd[7] = 0;
#line 440
  rw_cmd[8] = 0;
#line 440
  rw_cmd[9] = 0;
#line 440
  rw_cmd[10] = 0;
#line 440
  rw_cmd[11] = 0;
#line 442
  pt_media_access_cmd(tape, 1200, (char *)(& rw_cmd), (char *)"rewind");
#line 443
  return;
}
}
#line 445 "/work/ldvuser/novikov/work/current--X--drivers/block/paride/pt.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/10/dscv_tempdir/dscv/ri/08_1a/drivers/block/paride/pt.c.prepared"
static void pt_write_fm(struct pt_unit *tape ) 
{ 
  char wm_cmd[12U] ;

  {
#line 447
  wm_cmd[0] = 16;
#line 447
  wm_cmd[1] = 0;
#line 447
  wm_cmd[2] = 0;
#line 447
  wm_cmd[3] = 0;
#line 447
  wm_cmd[4] = 1;
#line 447
  wm_cmd[5] = 0;
#line 447
  wm_cmd[6] = 0;
#line 447
  wm_cmd[7] = 0;
#line 447
  wm_cmd[8] = 0;
#line 447
  wm_cmd[9] = 0;
#line 447
  wm_cmd[10] = 0;
#line 447
  wm_cmd[11] = 0;
#line 449
  pt_media_access_cmd(tape, 3000, (char *)(& wm_cmd), (char *)"write filemark");
#line 450
  return;
}
}
#line 454 "/work/ldvuser/novikov/work/current--X--drivers/block/paride/pt.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/10/dscv_tempdir/dscv/ri/08_1a/drivers/block/paride/pt.c.prepared"
static int pt_reset(struct pt_unit *tape ) 
{ 
  struct pi_adapter *pi ;
  int i ;
  int k ;
  int flg ;
  int expect[5U] ;
  u8 tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;

  {
#line 456
  pi = tape->pi;
#line 458
  expect[0] = 1;
#line 458
  expect[1] = 1;
#line 458
  expect[2] = 1;
#line 458
  expect[3] = 20;
#line 458
  expect[4] = 235;
#line 460
  pi_connect(pi);
#line 461
  tmp = DRIVE(tape);
#line 461
  write_reg(pi, 6, (int )tmp);
#line 462
  write_reg(pi, 7, 8);
#line 464
  pt_sleep(5);
#line 466
  k = 0;
#line 467
  goto ldv_12879;
  ldv_12878: 
#line 468
  pt_sleep(25);
  ldv_12879: 
#line 467
  tmp___0 = k;
#line 467
  k = k + 1;
#line 467
  if (tmp___0 <= 29) {
#line 467
    tmp___1 = status_reg(pi);
#line 467
    if ((tmp___1 & 128) != 0) {
#line 468
      goto ldv_12878;
    } else {
#line 470
      goto ldv_12880;
    }
  } else {

  }
  ldv_12880: 
#line 470
  flg = 1;
#line 471
  i = 0;
#line 471
  goto ldv_12882;
  ldv_12881: 
#line 472
  tmp___2 = read_reg(pi, i + 1);
#line 472
  flg = (tmp___2 == expect[i]) & flg;
#line 471
  i = i + 1;
  ldv_12882: ;
#line 471
  if (i <= 4) {
#line 472
    goto ldv_12881;
  } else {

  }

#line 474
  if (verbose != 0) {
#line 475
    printk("%s: Reset (%d) signature = ", (char *)(& tape->name), k);
#line 476
    i = 0;
#line 476
    goto ldv_12885;
    ldv_12884: 
#line 477
    tmp___3 = read_reg(pi, i + 1);
#line 477
    printk("%3x", tmp___3);
#line 476
    i = i + 1;
    ldv_12885: ;
#line 476
    if (i <= 4) {
#line 477
      goto ldv_12884;
    } else {

    }

#line 478
    if (flg == 0) {
#line 479
      printk(" (incorrect)");
    } else {

    }
#line 480
    printk("\n");
  } else {

  }
#line 483
  pi_disconnect(pi);
#line 484
  return (flg + -1);
}
}
#line 487 "/work/ldvuser/novikov/work/current--X--drivers/block/paride/pt.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/10/dscv_tempdir/dscv/ri/08_1a/drivers/block/paride/pt.c.prepared"
static int pt_ready_wait(struct pt_unit *tape , int tmo ) 
{ 
  char tr_cmd[12U] ;
  int k ;
  int p ;

  {
#line 489
  tr_cmd[0] = 0;
#line 489
  tr_cmd[1] = 0;
#line 489
  tr_cmd[2] = 0;
#line 489
  tr_cmd[3] = 0;
#line 489
  tr_cmd[4] = 0;
#line 489
  tr_cmd[5] = 0;
#line 489
  tr_cmd[6] = 0;
#line 489
  tr_cmd[7] = 0;
#line 489
  tr_cmd[8] = 0;
#line 489
  tr_cmd[9] = 0;
#line 489
  tr_cmd[10] = 0;
#line 489
  tr_cmd[11] = 0;
#line 492
  k = 0;
#line 493
  goto ldv_12895;
  ldv_12894: 
#line 494
  tape->last_sense = 0;
#line 495
  pt_atapi(tape, (char *)(& tr_cmd), 0, 0, verbose > 1 ? (char *)"test unit ready" : 0);
#line 496
  p = tape->last_sense;
#line 497
  if (p == 0) {
#line 498
    return (0);
  } else {

  }
#line 499
  if ((p & 65535) != 1026 && (p & 255) != 6) {
#line 500
    return (p);
  } else {

  }
#line 501
  k = k + 1;
#line 502
  pt_sleep(250);
  ldv_12895: ;
#line 493
  if (k < tmo) {
#line 494
    goto ldv_12894;
  } else {

  }

#line 504
  return (32);
}
}
#line 507 "/work/ldvuser/novikov/work/current--X--drivers/block/paride/pt.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/10/dscv_tempdir/dscv/ri/08_1a/drivers/block/paride/pt.c.prepared"
static void xs(char *buf , char *targ , int offs , int len ) 
{ 
  int j ;
  int k ;
  int l ;
  int tmp ;
  char tmp___0 ;

  {
#line 511
  j = 0;
#line 512
  l = 0;
#line 513
  k = 0;
#line 513
  goto ldv_12907;
  ldv_12906: ;
#line 514
  if ((int )((signed char )*(buf + (unsigned long )(k + offs))) != 32 || (int )*(buf + (unsigned long )(k + offs)) != l) {
#line 515
    tmp = j;
#line 515
    j = j + 1;
#line 515
    tmp___0 = *(buf + (unsigned long )(k + offs));
#line 515
    *(targ + (unsigned long )tmp) = tmp___0;
#line 515
    l = (int )tmp___0;
  } else {

  }
#line 513
  k = k + 1;
  ldv_12907: ;
#line 513
  if (k < len) {
#line 514
    goto ldv_12906;
  } else {

  }

#line 516
  if (l == 32) {
#line 517
    j = j - 1;
  } else {

  }
#line 518
  *(targ + (unsigned long )j) = 0;
#line 519
  return;
}
}
#line 521 "/work/ldvuser/novikov/work/current--X--drivers/block/paride/pt.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/10/dscv_tempdir/dscv/ri/08_1a/drivers/block/paride/pt.c.prepared"
static int xn(char *buf , int offs , int size ) 
{ 
  int v ;
  int k ;

  {
#line 525
  v = 0;
#line 526
  k = 0;
#line 526
  goto ldv_12917;
  ldv_12916: 
#line 527
  v = v * 256 + ((int )*(buf + (unsigned long )(k + offs)) & 255);
#line 526
  k = k + 1;
  ldv_12917: ;
#line 526
  if (k < size) {
#line 527
    goto ldv_12916;
  } else {

  }

#line 528
  return (v);
}
}
#line 531 "/work/ldvuser/novikov/work/current--X--drivers/block/paride/pt.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/10/dscv_tempdir/dscv/ri/08_1a/drivers/block/paride/pt.c.prepared"
static int pt_identify(struct pt_unit *tape ) 
{ 
  int dt ;
  int s ;
  char *ms[2U] ;
  char mf[10U] ;
  char id[18U] ;
  char id_cmd[12U] ;
  char ms_cmd[12U] ;
  char ls_cmd[12U] ;
  char buf[36U] ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 534
  ms[0] = (char *)"master";
#line 534
  ms[1] = (char *)"slave";
#line 536
  id_cmd[0] = 18;
#line 536
  id_cmd[1] = 0;
#line 536
  id_cmd[2] = 0;
#line 536
  id_cmd[3] = 0;
#line 536
  id_cmd[4] = 36;
#line 536
  id_cmd[5] = 0;
#line 536
  id_cmd[6] = 0;
#line 536
  id_cmd[7] = 0;
#line 536
  id_cmd[8] = 0;
#line 536
  id_cmd[9] = 0;
#line 536
  id_cmd[10] = 0;
#line 536
  id_cmd[11] = 0;
#line 537
  ms_cmd[0] = 26;
#line 537
  ms_cmd[1] = 0;
#line 537
  ms_cmd[2] = 42;
#line 537
  ms_cmd[3] = 0;
#line 537
  ms_cmd[4] = 36;
#line 537
  ms_cmd[5] = 0;
#line 537
  ms_cmd[6] = 0;
#line 537
  ms_cmd[7] = 0;
#line 537
  ms_cmd[8] = 0;
#line 537
  ms_cmd[9] = 0;
#line 537
  ms_cmd[10] = 0;
#line 537
  ms_cmd[11] = 0;
#line 539
  ls_cmd[0] = 77;
#line 539
  ls_cmd[1] = 0;
#line 539
  ls_cmd[2] = 113;
#line 539
  ls_cmd[3] = 0;
#line 539
  ls_cmd[4] = 0;
#line 539
  ls_cmd[5] = 0;
#line 539
  ls_cmd[6] = 0;
#line 539
  ls_cmd[7] = 0;
#line 539
  ls_cmd[8] = 36;
#line 539
  ls_cmd[9] = 0;
#line 539
  ls_cmd[10] = 0;
#line 539
  ls_cmd[11] = 0;
#line 543
  s = pt_atapi(tape, (char *)(& id_cmd), 36, (char *)(& buf), (char *)"identify");
#line 544
  if (s != 0) {
#line 545
    return (-1);
  } else {

  }
#line 547
  dt = (int )buf[0] & 31;
#line 548
  if (dt != 1) {
#line 549
    if (verbose != 0) {
#line 550
      printk("%s: Drive %d, unsupported type %d\n", (char *)(& tape->name), tape->drive,
             dt);
    } else {

    }
#line 552
    return (-1);
  } else {

  }
#line 555
  xs((char *)(& buf), (char *)(& mf), 8, 8);
#line 556
  xs((char *)(& buf), (char *)(& id), 16, 16);
#line 558
  tape->flags = 0;
#line 559
  tape->capacity = 0;
#line 560
  tape->bs = 0;
#line 562
  tmp = pt_ready_wait(tape, 60);
#line 562
  if (tmp == 0) {
#line 563
    tape->flags = tape->flags | 1;
  } else {

  }
#line 565
  tmp___0 = pt_atapi(tape, (char *)(& ms_cmd), 36, (char *)(& buf), (char *)"mode sense");
#line 565
  if (tmp___0 == 0) {
#line 566
    if ((int )buf[2] >= 0) {
#line 567
      tape->flags = tape->flags | 2;
    } else {

    }
#line 568
    tape->bs = xn((char *)(& buf), 10, 2);
  } else {

  }
#line 571
  tmp___1 = pt_atapi(tape, (char *)(& ls_cmd), 36, (char *)(& buf), (char *)"log sense");
#line 571
  if (tmp___1 == 0) {
#line 572
    tape->capacity = xn((char *)(& buf), 24, 4);
  } else {

  }
#line 574
  printk("%s: %s %s, %s", (char *)(& tape->name), (char *)(& mf), (char *)(& id),
         ms[tape->drive]);
#line 575
  if ((tape->flags & 1) == 0) {
#line 576
    printk(", no media\n");
  } else {
#line 578
    if ((tape->flags & 2) == 0) {
#line 579
      printk(", RO");
    } else {

    }
#line 580
    printk(", blocksize %d, %d MB\n", tape->bs, tape->capacity / 1024);
  }
#line 583
  return (0);
}
}
#line 591 "/work/ldvuser/novikov/work/current--X--drivers/block/paride/pt.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/10/dscv_tempdir/dscv/ri/08_1a/drivers/block/paride/pt.c.prepared"
static int pt_probe(struct pt_unit *tape ) 
{ 
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 593
  if (tape->drive == -1) {
#line 594
    tape->drive = 0;
#line 594
    goto ldv_12935;
    ldv_12934: 
#line 595
    tmp___0 = pt_reset(tape);
#line 595
    if (tmp___0 == 0) {
#line 596
      tmp = pt_identify(tape);
#line 596
      return (tmp);
    } else {

    }
#line 594
    tape->drive = tape->drive + 1;
    ldv_12935: ;
#line 594
    if (tape->drive <= 1) {
#line 595
      goto ldv_12934;
    } else {

    }

  } else {
#line 598
    tmp___2 = pt_reset(tape);
#line 598
    if (tmp___2 == 0) {
#line 599
      tmp___1 = pt_identify(tape);
#line 599
      return (tmp___1);
    } else {

    }
  }
#line 601
  return (-1);
}
}
#line 604 "/work/ldvuser/novikov/work/current--X--drivers/block/paride/pt.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/10/dscv_tempdir/dscv/ri/08_1a/drivers/block/paride/pt.c.prepared"
static int pt_detect(void) 
{ 
  struct pt_unit *tape ;
  int specified ;
  int found ;
  int unit ;
  struct pt_unit *tape___0 ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 607
  specified = 0;
#line 607
  found = 0;
#line 610
  printk("%s: %s version %s, major %d\n", name, name, (char *)"1.04", major);
#line 612
  specified = 0;
#line 613
  unit = 0;
#line 613
  goto ldv_12947;
  ldv_12946: 
#line 614
  tape___0 = (struct pt_unit *)(& pt) + (unsigned long )unit;
#line 615
  tape___0->pi = & tape___0->pia;
#line 616
  tape___0->available.counter = 1;
#line 617
  tape___0->flags = 0;
#line 618
  tape___0->last_sense = 0;
#line 619
  tape___0->present = 0;
#line 620
  tape___0->bufptr = 0;
#line 621
  tape___0->drive = (*(drives[unit]))[4];
#line 622
  snprintf((char *)(& tape___0->name), 8UL, "%s%d", name, unit);
#line 623
  if ((*(drives[unit]))[0] == 0) {
#line 624
    goto ldv_12945;
  } else {

  }
#line 625
  specified = specified + 1;
#line 626
  tmp___0 = pi_init(tape___0->pi, 0, (*(drives[unit]))[0], (*(drives[unit]))[3], (*(drives[unit]))[2],
                    (*(drives[unit]))[1], (*(drives[unit]))[5], (char *)(& pt_scratch),
                    3, verbose, (char *)(& tape___0->name));
#line 626
  if (tmp___0 != 0) {
#line 629
    tmp = pt_probe(tape___0);
#line 629
    if (tmp == 0) {
#line 630
      tape___0->present = 1;
#line 631
      found = found + 1;
    } else {
#line 633
      pi_release(tape___0->pi);
    }
  } else {

  }
  ldv_12945: 
#line 613
  unit = unit + 1;
  ldv_12947: ;
#line 613
  if (unit <= 3) {
#line 614
    goto ldv_12946;
  } else {

  }

#line 636
  if (specified == 0) {
#line 637
    tape = (struct pt_unit *)(& pt);
#line 638
    tmp___2 = pi_init(tape->pi, 1, -1, -1, -1, -1, -1, (char *)(& pt_scratch), 3,
                      verbose, (char *)(& tape->name));
#line 638
    if (tmp___2 != 0) {
#line 640
      tmp___1 = pt_probe(tape);
#line 640
      if (tmp___1 == 0) {
#line 641
        tape->present = 1;
#line 642
        found = found + 1;
      } else {
#line 644
        pi_release(tape->pi);
      }
    } else {

    }
  } else {

  }
#line 648
  if (found != 0) {
#line 649
    return (0);
  } else {

  }
#line 651
  printk("%s: No ATAPI tape drive detected\n", name);
#line 652
  return (-1);
}
}
#line 655 "/work/ldvuser/novikov/work/current--X--drivers/block/paride/pt.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/10/dscv_tempdir/dscv/ri/08_1a/drivers/block/paride/pt.c.prepared"
static int pt_open(struct inode *inode , struct file *file ) 
{ 
  int unit ;
  unsigned int tmp ;
  struct pt_unit *tape ;
  int err ;
  int tmp___0 ;
  unsigned int tmp___1 ;
  void *tmp___2 ;

  {
#line 657
  tmp = iminor((struct inode  const  *)inode);
#line 657
  unit = (int )tmp & 127;
#line 658
  tape = (struct pt_unit *)(& pt) + (unsigned long )unit;
#line 661
  if (unit > 3 || tape->present == 0) {
#line 662
    return (-19);
  } else {

  }
#line 664
  err = -16;
#line 665
  tmp___0 = atomic_dec_and_test(& tape->available);
#line 665
  if (tmp___0 == 0) {
#line 666
    goto out;
  } else {

  }
#line 668
  pt_identify(tape);
#line 670
  err = -19;
#line 671
  if (tape->flags == 0) {
#line 672
    goto out;
  } else {

  }
#line 674
  err = -30;
#line 675
  if ((tape->flags & 2) == 0 && (file->f_mode & 2U) != 0U) {
#line 676
    goto out;
  } else {

  }
#line 678
  tmp___1 = iminor((struct inode  const  *)inode);
#line 678
  if ((tmp___1 & 128U) == 0U) {
#line 679
    tape->flags = tape->flags | 4;
  } else {

  }
#line 681
  err = -12;
#line 682
  tmp___2 = kmalloc(16384UL, 208U);
#line 682
  tape->bufptr = (char *)tmp___2;
#line 683
  if ((unsigned long )tape->bufptr == (unsigned long )((char *)0)) {
#line 684
    printk("%s: buffer allocation failed\n", (char *)(& tape->name));
#line 685
    goto out;
  } else {

  }
#line 688
  file->private_data = (void *)tape;
#line 689
  return (0);
  out: 
#line 692
  atomic_inc(& tape->available);
#line 693
  return (err);
}
}
#line 696 "/work/ldvuser/novikov/work/current--X--drivers/block/paride/pt.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/10/dscv_tempdir/dscv/ri/08_1a/drivers/block/paride/pt.c.prepared"
static int pt_ioctl(struct inode *inode , struct file *file , unsigned int cmd , unsigned long arg ) 
{ 
  struct pt_unit *tape ;
  struct mtop *p ;
  struct mtop mtop ;
  unsigned long tmp ;

  {
#line 699
  tape = (struct pt_unit *)file->private_data;
#line 700
  p = (struct mtop *)arg;
#line 703
  switch (cmd) {
  case 1074294017U: 
#line 705
  tmp = copy_from_user((void *)(& mtop), (void const   *)p, 8U);
#line 705
  if (tmp != 0UL) {
#line 706
    return (-14);
  } else {

  }
#line 708
  switch ((int )mtop.mt_op) {
  case 6: 
#line 711
  pt_rewind(tape);
#line 712
  return (0);
  case 5: 
#line 715
  pt_write_fm(tape);
#line 716
  return (0);
  default: 
#line 719
  printk("%s: Unimplemented mt_op %d\n", (char *)(& tape->name), (int )mtop.mt_op);
#line 721
  return (-22);
  }
  default: 
#line 725
  printk("%s: Unimplemented ioctl 0x%x\n", (char *)(& tape->name), cmd);
#line 726
  return (-22);
  }
}
}
#line 732 "/work/ldvuser/novikov/work/current--X--drivers/block/paride/pt.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/10/dscv_tempdir/dscv/ri/08_1a/drivers/block/paride/pt.c.prepared"
static int pt_release(struct inode *inode , struct file *file ) 
{ 
  struct pt_unit *tape ;

  {
#line 734
  tape = (struct pt_unit *)file->private_data;
#line 736
  if (tape->available.counter > 1) {
#line 737
    return (-22);
  } else {

  }
#line 739
  if ((tape->flags & 8) != 0) {
#line 740
    pt_write_fm(tape);
  } else {

  }
#line 742
  if ((tape->flags & 4) != 0) {
#line 743
    pt_rewind(tape);
  } else {

  }
#line 745
  kfree((void const   *)tape->bufptr);
#line 746
  tape->bufptr = 0;
#line 748
  atomic_inc(& tape->available);
#line 750
  return (0);
}
}
#line 754 "/work/ldvuser/novikov/work/current--X--drivers/block/paride/pt.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/10/dscv_tempdir/dscv/ri/08_1a/drivers/block/paride/pt.c.prepared"
static ssize_t pt_read(struct file *filp , char *buf , size_t count , loff_t *ppos ) 
{ 
  struct pt_unit *tape ;
  struct pi_adapter *pi ;
  char rd_cmd[12U] ;
  int k ;
  int n ;
  int r ;
  int p ;
  int s ;
  int t ;
  int b ;
  int tmp ;
  int tmp___0 ;
  unsigned long __ms ;
  unsigned long tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  unsigned long tmp___5 ;

  {
#line 756
  tape = (struct pt_unit *)filp->private_data;
#line 757
  pi = tape->pi;
#line 758
  rd_cmd[0] = 8;
#line 758
  rd_cmd[1] = 1;
#line 758
  rd_cmd[2] = 0;
#line 758
  rd_cmd[3] = 0;
#line 758
  rd_cmd[4] = 0;
#line 758
  rd_cmd[5] = 0;
#line 758
  rd_cmd[6] = 0;
#line 758
  rd_cmd[7] = 0;
#line 758
  rd_cmd[8] = 0;
#line 758
  rd_cmd[9] = 0;
#line 758
  rd_cmd[10] = 0;
#line 758
  rd_cmd[11] = 0;
#line 761
  if ((tape->flags & 24) == 0) {
#line 762
    tape->flags = tape->flags | 16;
#line 763
    tmp = pt_atapi(tape, (char *)(& rd_cmd), 0, 0, (char *)"start read-ahead");
#line 763
    if (tmp != 0) {
#line 764
      return (-5L);
    } else {

    }
  } else
#line 765
  if ((tape->flags & 8) != 0) {
#line 766
    return (-5L);
  } else {

  }
#line 768
  if ((tape->flags & 32) != 0) {
#line 769
    return (0L);
  } else {

  }
#line 771
  t = 0;
#line 773
  goto ldv_13003;
  ldv_13002: 
#line 775
  tmp___0 = pt_poll_dsc(tape, 2, 3000, (char *)"read");
#line 775
  if (tmp___0 == 0) {
#line 776
    return (-5L);
  } else {

  }
#line 778
  n = (int )count;
#line 779
  if (n > 32768) {
#line 780
    n = 32768;
  } else {

  }
#line 781
  b = ((n + -1) + tape->bs) / tape->bs;
#line 782
  n = tape->bs * b;
#line 784
  rd_cmd[4] = (char )b;
#line 786
  r = pt_command(tape, (char *)(& rd_cmd), n, (char *)"read");
#line 788
  if (1) {
#line 788
    __const_udelay(4295000UL);
  } else {
#line 788
    __ms = 1UL;
#line 788
    goto ldv_12994;
    ldv_12993: 
#line 788
    __const_udelay(4295000UL);
    ldv_12994: 
#line 788
    tmp___1 = __ms;
#line 788
    __ms = __ms - 1UL;
#line 788
    if (tmp___1 != 0UL) {
#line 789
      goto ldv_12993;
    } else {

    }

  }
#line 790
  if (r != 0) {
#line 791
    pt_req_sense(tape, 0);
#line 792
    return (-5L);
  } else {

  }
  ldv_13000: 
#line 797
  r = pt_wait(tape, 128, 73, verbose > 1 ? (char *)"read DRQ" : 0, (char *)"");
#line 801
  if ((r & 126976) != 0) {
#line 802
    pi_disconnect(pi);
#line 803
    pt_req_sense(tape, 0);
#line 804
    return (-5L);
  } else {

  }
#line 807
  if (r != 0) {
#line 808
    tape->flags = tape->flags | 32;
  } else {

  }
#line 810
  s = read_reg(pi, 7);
#line 812
  if ((s & 8) == 0) {
#line 813
    goto ldv_12996;
  } else {

  }
#line 815
  tmp___2 = read_reg(pi, 4);
#line 815
  tmp___3 = read_reg(pi, 5);
#line 815
  n = tmp___2 + tmp___3 * 256;
#line 816
  tmp___4 = read_reg(pi, 2);
#line 816
  p = tmp___4 & 3;
#line 817
  if (p != 2) {
#line 818
    pi_disconnect(pi);
#line 819
    printk("%s: Phase error on read: %d\n", (char *)(& tape->name), p);
#line 821
    return (-5L);
  } else {

  }
#line 824
  goto ldv_12998;
  ldv_12997: 
#line 825
  k = n;
#line 826
  if (k > 16384) {
#line 827
    k = 16384;
  } else {

  }
#line 828
  pi_read_block(pi, tape->bufptr, k);
#line 829
  n = n - k;
#line 830
  b = k;
#line 831
  if ((size_t )b > count) {
#line 832
    b = (int )count;
  } else {

  }
#line 833
  tmp___5 = copy_to_user((void *)buf + (unsigned long )t, (void const   *)tape->bufptr,
                         (unsigned int )b);
#line 833
  if (tmp___5 != 0UL) {
#line 834
    pi_disconnect(pi);
#line 835
    return (-14L);
  } else {

  }
#line 837
  t = t + b;
#line 838
  count = count - (size_t )b;
  ldv_12998: ;
#line 824
  if (n > 0) {
#line 825
    goto ldv_12997;
  } else {

  }

#line 841
  goto ldv_13000;
  ldv_12996: 
#line 842
  pi_disconnect(pi);
#line 843
  if ((tape->flags & 32) != 0) {
#line 844
    goto ldv_13001;
  } else {

  }
  ldv_13003: ;
#line 773
  if (count != 0UL) {
#line 774
    goto ldv_13002;
  } else {

  }
  ldv_13001: ;
#line 847
  return ((ssize_t )t);
}
}
#line 851 "/work/ldvuser/novikov/work/current--X--drivers/block/paride/pt.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/10/dscv_tempdir/dscv/ri/08_1a/drivers/block/paride/pt.c.prepared"
static ssize_t pt_write(struct file *filp , char const   *buf , size_t count , loff_t *ppos ) 
{ 
  struct pt_unit *tape ;
  struct pi_adapter *pi ;
  char wr_cmd[12U] ;
  int k ;
  int n ;
  int r ;
  int p ;
  int s ;
  int t ;
  int b ;
  int tmp ;
  int tmp___0 ;
  unsigned long __ms ;
  unsigned long tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  unsigned long tmp___5 ;

  {
#line 853
  tape = (struct pt_unit *)filp->private_data;
#line 854
  pi = tape->pi;
#line 855
  wr_cmd[0] = 10;
#line 855
  wr_cmd[1] = 1;
#line 855
  wr_cmd[2] = 0;
#line 855
  wr_cmd[3] = 0;
#line 855
  wr_cmd[4] = 0;
#line 855
  wr_cmd[5] = 0;
#line 855
  wr_cmd[6] = 0;
#line 855
  wr_cmd[7] = 0;
#line 855
  wr_cmd[8] = 0;
#line 855
  wr_cmd[9] = 0;
#line 855
  wr_cmd[10] = 0;
#line 855
  wr_cmd[11] = 0;
#line 858
  if ((tape->flags & 2) == 0) {
#line 859
    return (-30L);
  } else {

  }
#line 861
  if ((tape->flags & 24) == 0) {
#line 862
    tape->flags = tape->flags | 8;
#line 863
    tmp = pt_atapi(tape, (char *)(& wr_cmd), 0, 0, (char *)"start buffer-available mode");
#line 863
    if (tmp != 0) {
#line 865
      return (-5L);
    } else {

    }
  } else
#line 866
  if ((tape->flags & 16) != 0) {
#line 867
    return (-5L);
  } else {

  }
#line 869
  if ((tape->flags & 32) != 0) {
#line 870
    return (-28L);
  } else {

  }
#line 872
  t = 0;
#line 874
  goto ldv_13031;
  ldv_13030: 
#line 876
  tmp___0 = pt_poll_dsc(tape, 2, 3000, (char *)"write");
#line 876
  if (tmp___0 == 0) {
#line 877
    return (-5L);
  } else {

  }
#line 879
  n = (int )count;
#line 880
  if (n > 32768) {
#line 881
    n = 32768;
  } else {

  }
#line 882
  b = ((n + -1) + tape->bs) / tape->bs;
#line 883
  n = tape->bs * b;
#line 885
  wr_cmd[4] = (char )b;
#line 887
  r = pt_command(tape, (char *)(& wr_cmd), n, (char *)"write");
#line 889
  if (1) {
#line 889
    __const_udelay(4295000UL);
  } else {
#line 889
    __ms = 1UL;
#line 889
    goto ldv_13022;
    ldv_13021: 
#line 889
    __const_udelay(4295000UL);
    ldv_13022: 
#line 889
    tmp___1 = __ms;
#line 889
    __ms = __ms - 1UL;
#line 889
    if (tmp___1 != 0UL) {
#line 890
      goto ldv_13021;
    } else {

    }

  }
#line 891
  if (r != 0) {
#line 892
    pt_req_sense(tape, 0);
#line 893
    return (-5L);
  } else {

  }
  ldv_13028: 
#line 898
  r = pt_wait(tape, 128, 73, verbose > 1 ? (char *)"write DRQ" : 0, 0);
#line 902
  if ((r & 126976) != 0) {
#line 903
    pi_disconnect(pi);
#line 904
    pt_req_sense(tape, 0);
#line 905
    return (-5L);
  } else {

  }
#line 908
  if (r != 0) {
#line 909
    tape->flags = tape->flags | 32;
  } else {

  }
#line 911
  s = read_reg(pi, 7);
#line 913
  if ((s & 8) == 0) {
#line 914
    goto ldv_13024;
  } else {

  }
#line 916
  tmp___2 = read_reg(pi, 4);
#line 916
  tmp___3 = read_reg(pi, 5);
#line 916
  n = tmp___2 + tmp___3 * 256;
#line 917
  tmp___4 = read_reg(pi, 2);
#line 917
  p = tmp___4 & 3;
#line 918
  if (p != 0) {
#line 919
    pi_disconnect(pi);
#line 920
    printk("%s: Phase error on write: %d \n", (char *)(& tape->name), p);
#line 922
    return (-5L);
  } else {

  }
#line 925
  goto ldv_13026;
  ldv_13025: 
#line 926
  k = n;
#line 927
  if (k > 16384) {
#line 928
    k = 16384;
  } else {

  }
#line 929
  b = k;
#line 930
  if ((size_t )b > count) {
#line 931
    b = (int )count;
  } else {

  }
#line 932
  tmp___5 = copy_from_user((void *)tape->bufptr, (void const   *)buf + (unsigned long )t,
                           (unsigned int )b);
#line 932
  if (tmp___5 != 0UL) {
#line 933
    pi_disconnect(pi);
#line 934
    return (-14L);
  } else {

  }
#line 936
  pi_write_block(pi, tape->bufptr, k);
#line 937
  t = t + b;
#line 938
  count = count - (size_t )b;
#line 939
  n = n - k;
  ldv_13026: ;
#line 925
  if (n > 0) {
#line 926
    goto ldv_13025;
  } else {

  }

#line 942
  goto ldv_13028;
  ldv_13024: 
#line 943
  pi_disconnect(pi);
#line 944
  if ((tape->flags & 32) != 0) {
#line 945
    goto ldv_13029;
  } else {

  }
  ldv_13031: ;
#line 874
  if (count != 0UL) {
#line 875
    goto ldv_13030;
  } else {

  }
  ldv_13029: ;
#line 948
  return ((ssize_t )t);
}
}
#line 951 "/work/ldvuser/novikov/work/current--X--drivers/block/paride/pt.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/10/dscv_tempdir/dscv/ri/08_1a/drivers/block/paride/pt.c.prepared"
static int pt_init(void) 
{ 
  int unit ;
  int err ;
  int tmp ;
  long tmp___0 ;
  long tmp___1 ;

  {
#line 956
  if (disable != 0) {
#line 957
    err = -22;
#line 958
    goto out;
  } else {

  }
#line 961
  tmp = pt_detect();
#line 961
  if (tmp != 0) {
#line 962
    err = -19;
#line 963
    goto out;
  } else {

  }
#line 966
  err = register_chrdev((unsigned int )major, (char const   *)name, & pt_fops);
#line 967
  if (err < 0) {
#line 968
    printk("pt_init: unable to get major number %d\n", major);
#line 969
    unit = 0;
#line 969
    goto ldv_13039;
    ldv_13038: ;
#line 970
    if (pt[unit].present != 0) {
#line 971
      pi_release(pt[unit].pi);
    } else {

    }
#line 969
    unit = unit + 1;
    ldv_13039: ;
#line 969
    if (unit <= 3) {
#line 970
      goto ldv_13038;
    } else {

    }

#line 972
    goto out;
  } else {

  }
#line 974
  major = err;
#line 975
  pt_class = class_create(& __this_module, "pt");
#line 976
  tmp___1 = IS_ERR((void const   *)pt_class);
#line 976
  if (tmp___1 != 0L) {
#line 977
    tmp___0 = PTR_ERR((void const   *)pt_class);
#line 977
    err = (int )tmp___0;
#line 978
    goto out_chrdev;
  } else {

  }
#line 981
  unit = 0;
#line 981
  goto ldv_13043;
  ldv_13042: ;
#line 982
  if (pt[unit].present != 0) {
#line 983
    class_device_create(pt_class, 0, (dev_t )((major << 20) | unit), 0, "pt%d", unit);
#line 985
    class_device_create(pt_class, 0, (dev_t )((major << 20) | (unit + 128)), 0, "pt%dn",
                        unit);
  } else {

  }
#line 981
  unit = unit + 1;
  ldv_13043: ;
#line 981
  if (unit <= 3) {
#line 982
    goto ldv_13042;
  } else {

  }

#line 988
  goto out;
  out_chrdev: 
#line 991
  unregister_chrdev((unsigned int )major, "pt");
  out: ;
#line 993
  return (err);
}
}
#line 996 "/work/ldvuser/novikov/work/current--X--drivers/block/paride/pt.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/10/dscv_tempdir/dscv/ri/08_1a/drivers/block/paride/pt.c.prepared"
static void pt_exit(void) 
{ 
  int unit ;

  {
#line 999
  unit = 0;
#line 999
  goto ldv_13050;
  ldv_13049: ;
#line 1000
  if (pt[unit].present != 0) {
#line 1001
    class_device_destroy(pt_class, (dev_t )((major << 20) | unit));
#line 1002
    class_device_destroy(pt_class, (dev_t )((major << 20) | (unit + 128)));
  } else {

  }
#line 999
  unit = unit + 1;
  ldv_13050: ;
#line 999
  if (unit <= 3) {
#line 1000
    goto ldv_13049;
  } else {

  }
#line 1004
  class_destroy(pt_class);
#line 1005
  unregister_chrdev((unsigned int )major, (char const   *)name);
#line 1006
  unit = 0;
#line 1006
  goto ldv_13053;
  ldv_13052: ;
#line 1007
  if (pt[unit].present != 0) {
#line 1008
    pi_release(pt[unit].pi);
  } else {

  }
#line 1006
  unit = unit + 1;
  ldv_13053: ;
#line 1006
  if (unit <= 3) {
#line 1007
    goto ldv_13052;
  } else {

  }

#line 1011
  return;
}
}
#line 1031
void ldv_check_final_state(void) ;
#line 1034
extern void ldv_check_return_value(int  ) ;
#line 1040
extern void ldv_initialize(void) ;
#line 1043
extern void ldv_handler_precall(void) ;
#line 1046
extern int nondet_int(void) ;
#line 1049 "/work/ldvuser/novikov/work/current--X--drivers/block/paride/pt.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/10/dscv_tempdir/dscv/ri/08_1a/drivers/block/paride/pt.c.prepared"
int LDV_IN_INTERRUPT  ;
#line 1052 "/work/ldvuser/novikov/work/current--X--drivers/block/paride/pt.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/10/dscv_tempdir/dscv/ri/08_1a/drivers/block/paride/pt.c.prepared"
void main(void) 
{ 
  struct file *var_group1 ;
  char *var_pt_read_24_p1 ;
  size_t var_pt_read_24_p2 ;
  loff_t *var_pt_read_24_p3 ;
  ssize_t res_pt_read_24 ;
  char const   *var_pt_write_25_p1 ;
  size_t var_pt_write_25_p2 ;
  loff_t *var_pt_write_25_p3 ;
  ssize_t res_pt_write_25 ;
  struct inode *var_group2 ;
  unsigned int var_pt_ioctl_22_p2 ;
  unsigned long var_pt_ioctl_22_p3 ;
  int res_pt_open_21 ;
  int ldv_s_pt_fops_file_operations ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 1396
  ldv_s_pt_fops_file_operations = 0;
#line 1332
  LDV_IN_INTERRUPT = 1;
#line 1341
  ldv_initialize();
#line 1393
  ldv_handler_precall();
#line 1394
  tmp = pt_init();
#line 1394
  if (tmp != 0) {
#line 1395
    goto ldv_final;
  } else {

  }
#line 1400
  goto ldv_13106;
  ldv_13105: 
#line 1404
  tmp___0 = nondet_int();
#line 1404
  switch (tmp___0) {
  case 0: ;
#line 1409
  if (ldv_s_pt_fops_file_operations == 0) {
#line 1460
    ldv_handler_precall();
#line 1461
    res_pt_open_21 = pt_open(var_group2, var_group1);
#line 1462
    ldv_check_return_value(res_pt_open_21);
#line 1463
    if (res_pt_open_21 != 0) {
#line 1464
      goto ldv_module_exit;
    } else {

    }
#line 1465
    ldv_s_pt_fops_file_operations = ldv_s_pt_fops_file_operations + 1;
  } else {

  }
#line 1471
  goto ldv_13099;
  case 1: ;
#line 1475
  if (ldv_s_pt_fops_file_operations == 1) {
#line 1526
    ldv_handler_precall();
#line 1527
    res_pt_read_24 = pt_read(var_group1, var_pt_read_24_p1, var_pt_read_24_p2, var_pt_read_24_p3);
#line 1528
    ldv_check_return_value((int )res_pt_read_24);
#line 1529
    if (res_pt_read_24 < 0L) {
#line 1530
      goto ldv_module_exit;
    } else {

    }
#line 1531
    ldv_s_pt_fops_file_operations = ldv_s_pt_fops_file_operations + 1;
  } else {

  }
#line 1537
  goto ldv_13099;
  case 2: ;
#line 1541
  if (ldv_s_pt_fops_file_operations == 2) {
#line 1592
    ldv_handler_precall();
#line 1593
    res_pt_write_25 = pt_write(var_group1, var_pt_write_25_p1, var_pt_write_25_p2,
                               var_pt_write_25_p3);
#line 1594
    ldv_check_return_value((int )res_pt_write_25);
#line 1595
    if (res_pt_write_25 < 0L) {
#line 1596
      goto ldv_module_exit;
    } else {

    }
#line 1597
    ldv_s_pt_fops_file_operations = ldv_s_pt_fops_file_operations + 1;
  } else {

  }
#line 1603
  goto ldv_13099;
  case 3: ;
#line 1607
  if (ldv_s_pt_fops_file_operations == 3) {
#line 1658
    ldv_handler_precall();
#line 1659
    pt_release(var_group2, var_group1);
#line 1660
    ldv_s_pt_fops_file_operations = 0;
  } else {

  }
#line 1666
  goto ldv_13099;
  case 4: 
#line 1721
  ldv_handler_precall();
#line 1722
  pt_ioctl(var_group2, var_group1, var_pt_ioctl_22_p2, var_pt_ioctl_22_p3);
#line 1729
  goto ldv_13099;
  default: ;
#line 1730
  goto ldv_13099;
  }
  ldv_13099: ;
  ldv_13106: 
#line 1400
  tmp___1 = nondet_int();
#line 1400
  if (tmp___1 != 0 || ldv_s_pt_fops_file_operations != 0) {
#line 1402
    goto ldv_13105;
  } else {

  }

  ldv_module_exit: 
#line 1788
  ldv_handler_precall();
#line 1789
  pt_exit();
  ldv_final: 
#line 1792
  ldv_check_final_state();
#line 1795
  return;
}
}
#line 10 "/home/ldvuser/ldv/inst/kernel-rules/verifier/rcv.h"
__inline static void ldv_error(void) 
{ 


  {
  LDV_ERROR: reach_error();
#line 12
  goto LDV_ERROR;
}
}
#line 25
extern int ldv_undef_int(void) ;
#line 49 "/home/ldvuser/ldv/inst/kernel-rules/verifier/rcv.h"
long __builtin_expect(long exp , long c ) 
{ 


  {
#line 51
  return (exp);
}
}
#line 6 "/work/ldvuser/novikov/work/current--X--drivers/block/paride/pt.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/10/dscv_tempdir/rule-instrumentor/08_1a/common-model/ldv_common_model.c"
int ldv_module_refcounter  =    1;
#line 9 "/work/ldvuser/novikov/work/current--X--drivers/block/paride/pt.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/10/dscv_tempdir/rule-instrumentor/08_1a/common-model/ldv_common_model.c"
void ldv_module_get(struct module *module ) 
{ 


  {
#line 12
  if (module) {
#line 14
    ldv_module_refcounter = ldv_module_refcounter + 1;
  } else {

  }
#line 16
  return;
}
}
#line 19 "/work/ldvuser/novikov/work/current--X--drivers/block/paride/pt.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/10/dscv_tempdir/rule-instrumentor/08_1a/common-model/ldv_common_model.c"
int ldv_try_module_get(struct module *module ) 
{ 
  int module_get_succeeded ;

  {
#line 24
  if (module) {
#line 27
    module_get_succeeded = ldv_undef_int();
#line 29
    if (module_get_succeeded == 1) {
#line 31
      ldv_module_refcounter = ldv_module_refcounter + 1;
#line 33
      return (1);
    } else {
#line 38
      return (0);
    }
  } else {

  }
#line 41
  return (0);
}
}
#line 44 "/work/ldvuser/novikov/work/current--X--drivers/block/paride/pt.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/10/dscv_tempdir/rule-instrumentor/08_1a/common-model/ldv_common_model.c"
void ldv_module_put(struct module *module ) 
{ 


  {
#line 47
  if (module) {
#line 49
    if (ldv_module_refcounter > 1) {

    } else {
#line 49
      ldv_error();
    }
#line 51
    ldv_module_refcounter = ldv_module_refcounter - 1;
  } else {

  }
#line 53
  return;
}
}
#line 56 "/work/ldvuser/novikov/work/current--X--drivers/block/paride/pt.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/10/dscv_tempdir/rule-instrumentor/08_1a/common-model/ldv_common_model.c"
void ldv_module_put_and_exit(void) 
{ 


  {
#line 58
  ldv_module_put((struct module *)1);
  LDV_STOP: 
#line 60
  goto LDV_STOP;
}
}
#line 64 "/work/ldvuser/novikov/work/current--X--drivers/block/paride/pt.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/10/dscv_tempdir/rule-instrumentor/08_1a/common-model/ldv_common_model.c"
unsigned int ldv_module_refcount(void) 
{ 


  {
#line 67
  return (ldv_module_refcounter - 1);
}
}
#line 71 "/work/ldvuser/novikov/work/current--X--drivers/block/paride/pt.ko--X--defaultlinux--X--08_1a--X--cpachecker/linux/csd_deg_dscv/10/dscv_tempdir/rule-instrumentor/08_1a/common-model/ldv_common_model.c"
void ldv_check_final_state(void) 
{ 


  {
#line 74
  if (ldv_module_refcounter == 1) {

  } else {
#line 74
    ldv_error();
  }
#line 75
  return;
}
}
