/* Generated by Frama-C */
#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compiler_types.h"
typedef signed char __s8;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned char __u8;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef short __s16;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned short __u16;
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef int __s32;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned int __u32;
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef long long __s64;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned long long __u64;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef __s8 s8;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u8 u8;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s16 s16;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u16 u16;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s32 s32;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u32 u32;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s64 s64;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u64 u64;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/uapi/asm/posix_types_64.h"
typedef long __kernel_long_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned long __kernel_ulong_t;
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_pid_t;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_uid32_t;
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_gid32_t;
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_ulong_t __kernel_size_t;
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_ssize_t;
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef long long __kernel_loff_t;
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef long long __kernel_time64_t;
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_clock_t;
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_timer_t;
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_clockid_t;
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __u16 __le16;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u16 __be16;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __le32;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __be32;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u64 __le64;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u64 __be64;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __wsum;
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef unsigned int __poll_t;
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef u32 __kernel_dev_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_dev_t dev_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned short umode_t;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_pid_t pid_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_clockid_t clockid_t;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef _Bool bool;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_uid32_t uid_t;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_gid32_t gid_t;
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_loff_t loff_t;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_size_t size_t;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_ssize_t ssize_t;
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef s32 int32_t;
#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u32 uint32_t;
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 sector_t;
#line 131  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 blkcnt_t;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 dma_addr_t;
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int gfp_t;
#line 154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int slab_flags_t;
#line 155  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int fmode_t;
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 phys_addr_t;
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef phys_addr_t resource_size_t;
#line 170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct __anonstruct_atomic_t_6 {
   int counter ;
};
#line 170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef struct __anonstruct_atomic_t_6 atomic_t;
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct __anonstruct_atomic64_t_7 {
   s64 counter ;
};
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef struct __anonstruct_atomic64_t_7 atomic64_t;
#line 181  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};
#line 185 
struct hlist_node;
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct hlist_head {
   struct hlist_node *first ;
};
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};
#line 219  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct callback_head {
   struct callback_head *next ;
   void (*func)(struct callback_head *) ;
} __attribute__((__aligned__(8)));
#line 14  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_prs.i.aux"
struct task_struct;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/export.h"
struct module;
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/export.h"
struct kernel_symbol {
   int value_offset ;
   int name_offset ;
   int namespace_offset ;
};
#line 136  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/init.h"
typedef void (*ctor_fn_t)(void);
#line 139 
struct file_system_type;
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
struct ctl_table;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct jump_entry;
#line 87 
struct static_key_mod;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
union __anonunion_8 {
   unsigned long type ;
   struct jump_entry *entries ;
   struct static_key_mod *next ;
};
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct static_key {
   atomic_t enabled ;
   union __anonunion_8 __anonCompField_static_key_4 ;
};
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct jump_entry {
   s32 code ;
   s32 target ;
   long key ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_debug.h"
struct device;
#line 65 
struct net_device;
#line 476  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
struct file_operations;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/div64.h"
struct completion;
#line 88 
struct pt_regs;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bug.h"
struct bug_entry {
   int bug_addr_disp ;
   int file_disp ;
   unsigned short line ;
   unsigned short flags ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/math64.h"
typedef __s64 time64_t;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/time_types.h"
struct __kernel_timespec {
   __kernel_time64_t tv_sec ;
   long long tv_nsec ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/time64.h"
struct timespec64 {
   time64_t tv_sec ;
   long tv_nsec ;
};
#line 165 
struct old_timespec32;
#line 166 
struct pollfd;
#line 167 
enum timespec_type {
    TT_NONE = 0,
    TT_NATIVE = 1,
    TT_COMPAT = 2
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_futex_27 {
   u32 *uaddr ;
   u32 val ;
   u32 flags ;
   u32 bitset ;
   u64 time ;
   u32 *uaddr2 ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
union __anonunion_29 {
   struct __kernel_timespec *rmtp ;
   struct old_timespec32 *compat_rmtp ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_nanosleep_28 {
   clockid_t clockid ;
   enum timespec_type type ;
   union __anonunion_29 __anonCompField___anonstruct_nanosleep_28_5 ;
   u64 expires ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_poll_30 {
   struct pollfd *ufds ;
   int nfds ;
   int has_timeout ;
   unsigned long tv_sec ;
   unsigned long tv_nsec ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
union __anonunion_26 {
   struct __anonstruct_futex_27 futex ;
   struct __anonstruct_nanosleep_28 nanosleep ;
   struct __anonstruct_poll_30 poll ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct restart_block {
   long (*fn)(struct restart_block *) ;
   union __anonunion_26 __anonCompField_restart_block_6 ;
};
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/page_64.h"
struct page;
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/getorder.h"
struct mm_struct;
#line 49 
struct io_bitmap;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/ptrace.h"
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/desc_defs.h"
struct desc_struct {
   u16 limit0 ;
   u16 base0 ;
   u16 base1 : 8 ;
   u16 type : 4 ;
   u16 s : 1 ;
   u16 dpl : 2 ;
   u16 p : 1 ;
   u16 limit1 : 4 ;
   u16 avl : 1 ;
   u16 l : 1 ;
   u16 d : 1 ;
   u16 g : 1 ;
   u16 base2 : 8 ;
} __attribute__((__packed__));
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/desc_defs.h"
typedef unsigned long pteval_t;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pmdval_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pudval_t;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgdval_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgprotval_t;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
struct __anonstruct_pte_t_53 {
   pteval_t pte ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef struct __anonstruct_pte_t_53 pte_t;
#line 265  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct pgprot {
   pgprotval_t pgprot ;
};
#line 267  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct pgprot pgprot_t;
#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pgd_t_54 {
   pgdval_t pgd ;
};
#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pgd_t_54 pgd_t;
#line 319  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pud_t_56 {
   pudval_t pud ;
};
#line 319  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pud_t_56 pud_t;
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pmd_t_57 {
   pmdval_t pmd ;
};
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pmd_t_57 pmd_t;
#line 505  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct page *pgtable_t;
#line 519 
struct file;
#line 530 
struct seq_file;
#line 360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/nospec-branch.h"
struct thread_struct;
#line 362 
struct cpumask;
#line 365 
struct vm_area_struct;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct __anonstruct_59 {
   u8 locked ;
   u8 pending ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct __anonstruct_60 {
   u16 locked_pending ;
   u16 tail ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
union __anonunion_58 {
   atomic_t val ;
   struct __anonstruct_59 __anonCompField___anonunion_58_7 ;
   struct __anonstruct_60 __anonCompField___anonunion_58_8 ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct qspinlock {
   union __anonunion_58 __anonCompField_qspinlock_9 ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
typedef struct qspinlock arch_spinlock_t;
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
struct __anonstruct_62 {
   u8 wlocked ;
   u8 __lstate[3U] ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
union __anonunion_61 {
   atomic_t cnts ;
   struct __anonstruct_62 __anonCompField___anonunion_61_10 ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
struct qrwlock {
   union __anonunion_61 __anonCompField_qrwlock_11 ;
   arch_spinlock_t wait_lock ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
typedef struct qrwlock arch_rwlock_t;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/math_emu.h"
struct math_emu_info {
   long ___orig_eip ;
   struct pt_regs *regs ;
};
#line 2288  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/atomic-fallback.h"
typedef atomic64_t atomic_long_t;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
struct cpumask {
   unsigned long bits[128U] ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
typedef struct cpumask cpumask_t;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct tracepoint_func {
   void *func ;
   void *data ;
   int prio ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct tracepoint {
   char *name ;
   struct static_key key ;
   int (*regfunc)(void) ;
   void (*unregfunc)(void) ;
   struct tracepoint_func *funcs ;
};
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
typedef int tracepoint_ptr_t;
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct bpf_raw_event_map {
   struct tracepoint *tp ;
   void *bpf_func ;
   u32 num_args ;
   u32 writable_size ;
} __attribute__((__aligned__(32)));
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fregs_state {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u32 status ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct __anonstruct_90 {
   u64 rip ;
   u64 rdp ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct __anonstruct_91 {
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union __anonunion_89 {
   struct __anonstruct_90 __anonCompField___anonunion_89_17 ;
   struct __anonstruct_91 __anonCompField___anonunion_89_18 ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union __anonunion_92 {
   u32 padding1[12U] ;
   u32 sw_reserved[12U] ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fxregs_state {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   union __anonunion_89 __anonCompField_fxregs_state_19 ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32U] ;
   u32 xmm_space[64U] ;
   u32 padding[12U] ;
   union __anonunion_92 __anonCompField_fxregs_state_20 ;
} __attribute__((__aligned__(16)));
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct swregs_state {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u8 ftop ;
   u8 changed ;
   u8 lookahead ;
   u8 no_update ;
   u8 rm ;
   u8 alimit ;
   struct math_emu_info *info ;
   u32 entry_eip ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct xstate_header {
   u64 xfeatures ;
   u64 xcomp_bv ;
   u64 reserved[6U] ;
} __attribute__((__packed__));
#line 253  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct xregs_state {
   struct fxregs_state i387 ;
   struct xstate_header header ;
   u8 extended_state_area[0U] ;
} __attribute__((__packed__, __aligned__(64)));
#line 268  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union fpregs_state {
   struct fregs_state fsave ;
   struct fxregs_state fxsave ;
   struct swregs_state soft ;
   struct xregs_state xsave ;
   u8 __padding[4096U] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fpu {
   unsigned int last_cpu ;
   unsigned long avx512_timestamp ;
   union fpregs_state state ;
};
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/orc_types.h"
struct orc_entry {
   s16 sp_offset ;
   s16 bp_offset ;
   unsigned int sp_reg : 4 ;
   unsigned int bp_reg : 4 ;
   unsigned int type : 2 ;
   unsigned int end : 1 ;
} __attribute__((__packed__));
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct seq_operations;
#line 478 
struct perf_event;
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct __anonstruct_mm_segment_t_95 {
   unsigned long seg ;
};
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
typedef struct __anonstruct_mm_segment_t_95 mm_segment_t;
#line 485  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct thread_struct {
   struct desc_struct tls_array[3U] ;
   unsigned long sp ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long fsbase ;
   unsigned long gsbase ;
   struct perf_event *ptrace_bps[4U] ;
   unsigned long debugreg6 ;
   unsigned long ptrace_dr7 ;
   unsigned long cr2 ;
   unsigned long trap_nr ;
   unsigned long error_code ;
   struct io_bitmap *io_bitmap ;
   unsigned long iopl_emul ;
   mm_segment_t addr_limit ;
   unsigned int sig_on_uaccess_err : 1 ;
   unsigned int uaccess_err : 1 ;
   struct fpu fpu ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/thread_info.h"
struct thread_info {
   unsigned long flags ;
   u32 status ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bottom_half.h"
struct lockdep_map;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lockdep_subclass_key {
   char __one_byte ;
} __attribute__((__packed__));
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
union __anonunion_96 {
   struct hlist_node hash_entry ;
   struct lockdep_subclass_key subkeys[8U] ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lock_class_key {
   union __anonunion_96 __anonCompField_lock_class_key_23 ;
};
#line 68 
struct lock_trace;
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lock_class {
   struct hlist_node hash_entry ;
   struct list_head lock_entry ;
   struct list_head locks_after ;
   struct list_head locks_before ;
   struct lockdep_subclass_key *key ;
   unsigned int subclass ;
   unsigned int dep_gen_id ;
   unsigned long usage_mask ;
   struct lock_trace *usage_traces[9U] ;
   int name_version ;
   char *name ;
   unsigned long contention_point[4U] ;
   unsigned long contending_point[4U] ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lockdep_map {
   struct lock_class_key *key ;
   struct lock_class *class_cache[2U] ;
   char *name ;
   int cpu ;
   unsigned long ip ;
};
#line 226  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct held_lock {
   u64 prev_chain_key ;
   unsigned long acquire_ip ;
   struct lockdep_map *instance ;
   struct lockdep_map *nest_lock ;
   u64 waittime_stamp ;
   u64 holdtime_stamp ;
   unsigned int class_idx : 13 ;
   unsigned int irq_context : 2 ;
   unsigned int trylock : 1 ;
   unsigned int read : 2 ;
   unsigned int check : 1 ;
   unsigned int hardirqs_off : 1 ;
   unsigned int references : 12 ;
   unsigned int pin_count ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct raw_spinlock {
   arch_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct raw_spinlock raw_spinlock_t;
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct __anonstruct_98 {
   u8 __padding[24U] ;
   struct lockdep_map dep_map ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
union __anonunion_97 {
   struct raw_spinlock rlock ;
   struct __anonstruct_98 __anonCompField___anonunion_97_24 ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct spinlock {
   union __anonunion_97 __anonCompField_spinlock_25 ;
};
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct spinlock spinlock_t;
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct __anonstruct_rwlock_t_99 {
   arch_rwlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct __anonstruct_rwlock_t_99 rwlock_t;
#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
struct mutex;
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
struct kmem_cache;
#line 48  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
struct seqcount {
   unsigned int sequence ;
   struct lockdep_map dep_map ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
typedef struct seqcount seqcount_t;
#line 403  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
struct __anonstruct_seqlock_t_112 {
   struct seqcount seqcount ;
   spinlock_t lock ;
};
#line 403  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
typedef struct __anonstruct_seqlock_t_112 seqlock_t;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timex.h"
typedef s32 old_time32_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/time32.h"
struct old_timespec32 {
   old_time32_t tv_sec ;
   s32 tv_nsec ;
};
#line 461  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
typedef s64 ktime_t;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
struct timer_list {
   struct hlist_node entry ;
   unsigned long expires ;
   void (*function)(struct timer_list *) ;
   u32 flags ;
   struct lockdep_map lockdep_map ;
};
#line 196 
struct hrtimer;
#line 197 
enum hrtimer_restart;
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/llist.h"
struct llist_node;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/llist.h"
struct llist_node {
   struct llist_node *next ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/smp.h"
struct __call_single_data {
   struct llist_node llist ;
   void (*func)(void *) ;
   void *info ;
   unsigned int flags ;
};
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mpspec.h"
struct __anonstruct_nodemask_t_161 {
   unsigned long bits[16U] ;
};
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mpspec.h"
typedef struct __anonstruct_nodemask_t_161 nodemask_t;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/osq_lock.h"
struct optimistic_spin_queue {
   atomic_t tail ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rwsem.h"
struct rw_semaphore {
   atomic_long_t count ;
   atomic_long_t owner ;
   struct optimistic_spin_queue osq ;
   raw_spinlock_t wait_lock ;
   struct list_head wait_list ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 194 
struct ww_acquire_ctx;
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
struct mutex {
   atomic_long_t owner ;
   spinlock_t wait_lock ;
   struct optimistic_spin_queue osq ;
   struct list_head wait_list ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   struct ww_acquire_ctx *ww_ctx ;
   void *magic ;
};
#line 212 
struct ldt_struct;
#line 212 
struct vdso_image;
#line 212  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
struct __anonstruct_mm_context_t_162 {
   u64 ctx_id ;
   atomic64_t tlb_gen ;
   struct rw_semaphore ldt_usr_sem ;
   struct ldt_struct *ldt ;
   unsigned short ia32_compat ;
   struct mutex lock ;
   void *vdso ;
   struct vdso_image *vdso_image ;
   atomic_t perf_rdpmc_allowed ;
   u16 pkey_allocation_map ;
   s16 execute_only_pkey ;
   void *bd_addr ;
};
#line 212  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
typedef struct __anonstruct_mm_context_t_162 mm_context_t;
#line 440  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/io.h"
struct fwnode_operations;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_handle {
   struct fwnode_handle *secondary ;
   struct fwnode_operations *ops ;
   struct device *dev ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_endpoint {
   unsigned int port ;
   unsigned int id ;
   struct fwnode_handle *local_fwnode ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_reference_args {
   struct fwnode_handle *fwnode ;
   unsigned int nargs ;
   u64 args[8U] ;
};
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_operations {
   struct fwnode_handle *(*get)(struct fwnode_handle *) ;
   void (*put)(struct fwnode_handle *) ;
   bool (*device_is_available)(struct fwnode_handle *) ;
   void *(*device_get_match_data)(struct fwnode_handle *, struct device *) ;
   bool (*property_present)(struct fwnode_handle *, char *) ;
   int (*property_read_int_array)(struct fwnode_handle *, char *, unsigned int , void *, size_t ) ;
   int (*property_read_string_array)(struct fwnode_handle *, char *, char **, size_t ) ;
   char *(*get_name)(struct fwnode_handle *) ;
   char *(*get_name_prefix)(struct fwnode_handle *) ;
   struct fwnode_handle *(*get_parent)(struct fwnode_handle *) ;
   struct fwnode_handle *(*get_next_child_node)(struct fwnode_handle *, struct fwnode_handle *) ;
   struct fwnode_handle *(*get_named_child_node)(struct fwnode_handle *, char *) ;
   int (*get_reference_args)(struct fwnode_handle *, char *, char *, unsigned int , unsigned int , struct fwnode_reference_args *) ;
   struct fwnode_handle *(*graph_get_next_endpoint)(struct fwnode_handle *, struct fwnode_handle *) ;
   struct fwnode_handle *(*graph_get_remote_endpoint)(struct fwnode_handle *) ;
   struct fwnode_handle *(*graph_get_port_parent)(struct fwnode_handle *) ;
   int (*graph_parse_endpoint)(struct fwnode_handle *, struct fwnode_endpoint *) ;
   int (*add_links)(struct fwnode_handle *, struct device *) ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_node {
   unsigned long __rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
} __attribute__((__aligned__(8)));
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_root {
   struct rb_node *rb_node ;
};
#line 125  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_root_cached {
   struct rb_root rb_root ;
   struct rb_node *rb_leftmost ;
};
#line 302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/overflow.h"
struct notifier_block;
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmalloc.h"
struct vm_struct {
   struct vm_struct *next ;
   void *addr ;
   unsigned long size ;
   unsigned long flags ;
   struct page **pages ;
   unsigned int nr_pages ;
   phys_addr_t phys_addr ;
   void *caller ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/tlbbatch.h"
struct arch_tlbflush_unmap_batch {
   struct cpumask cpumask ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct vmacache {
   u64 seqnum ;
   struct vm_area_struct *vmas[4U] ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct task_rss_stat {
   int events ;
   int count[4U] ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct mm_rss_stat {
   atomic_long_t count[4U] ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct page_frag {
   struct page *page ;
   __u32 offset ;
   __u32 size ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct tlbflush_unmap_batch {
   struct arch_tlbflush_unmap_batch arch ;
   bool flush_required ;
   bool writable ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
struct wait_queue_head {
   spinlock_t lock ;
   struct list_head head ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
typedef struct wait_queue_head wait_queue_head_t;
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/completion.h"
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};
#line 120 
struct inode;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct workqueue_struct;
#line 48 
struct work_struct;
#line 102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct *) ;
   struct lockdep_map lockdep_map ;
};
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct delayed_work {
   struct work_struct work ;
   struct timer_list timer ;
   struct workqueue_struct *wq ;
   int cpu ;
};
#line 124  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct rcu_work {
   struct work_struct work ;
   struct callback_head rcu ;
   struct workqueue_struct *wq ;
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcu_segcblist.h"
struct rcu_segcblist {
   struct callback_head *head ;
   struct callback_head **tails[4U] ;
   unsigned long gp_seq[4U] ;
   atomic_long_t len ;
   long len_lazy ;
   u8 enabled ;
   u8 offloaded ;
};
#line 80 
struct srcu_struct;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcu.h"
struct srcu_node;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_data {
   unsigned long srcu_lock_count[2U] ;
   unsigned long srcu_unlock_count[2U] ;
   spinlock_t lock ;
   struct rcu_segcblist srcu_cblist ;
   unsigned long srcu_gp_seq_needed ;
   unsigned long srcu_gp_seq_needed_exp ;
   bool srcu_cblist_invoking ;
   struct timer_list delay_work ;
   struct work_struct work ;
   struct callback_head srcu_barrier_head ;
   struct srcu_node *mynode ;
   unsigned long grpmask ;
   int cpu ;
   struct srcu_struct *ssp ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_node {
   spinlock_t lock ;
   unsigned long srcu_have_cbs[4U] ;
   unsigned long srcu_data_have_cbs[4U] ;
   unsigned long srcu_gp_seq_needed_exp ;
   struct srcu_node *srcu_parent ;
   int grplo ;
   int grphi ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_struct {
   struct srcu_node node[521U] ;
   struct srcu_node *level[4U] ;
   struct mutex srcu_cb_mutex ;
   spinlock_t lock ;
   struct mutex srcu_gp_mutex ;
   unsigned int srcu_idx ;
   unsigned long srcu_gp_seq ;
   unsigned long srcu_gp_seq_needed ;
   unsigned long srcu_gp_seq_needed_exp ;
   unsigned long srcu_last_gp_end ;
   struct srcu_data *sda ;
   unsigned long srcu_barrier_seq ;
   struct mutex srcu_barrier_mutex ;
   struct completion srcu_barrier_completion ;
   atomic_t srcu_barrier_cpu_cnt ;
   struct delayed_work work ;
   struct lockdep_map dep_map ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/notifier.h"
struct notifier_block {
   int (*notifier_call)(struct notifier_block *, unsigned long , void *) ;
   struct notifier_block *next ;
   int priority ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/notifier.h"
struct raw_notifier_head {
   struct notifier_block *head ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/uprobes.h"
struct arch_uprobe_task {
   unsigned long saved_scratch_register ;
   unsigned int saved_trap_nr ;
   unsigned int saved_tf ;
};
#line 57 
enum uprobe_task_state {
    UTASK_RUNNING = 0,
    UTASK_SSTEP = 1,
    UTASK_SSTEP_ACK = 2,
    UTASK_SSTEP_TRAPPED = 3
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_184 {
   struct arch_uprobe_task autask ;
   unsigned long vaddr ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_185 {
   struct callback_head dup_xol_work ;
   unsigned long dup_xol_addr ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
union __anonunion_183 {
   struct __anonstruct_184 __anonCompField___anonunion_183_29 ;
   struct __anonstruct_185 __anonCompField___anonunion_183_30 ;
};
#line 61 
struct uprobe;
#line 61 
struct return_instance;
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct uprobe_task {
   enum uprobe_task_state state ;
   union __anonunion_183 __anonCompField_uprobe_task_31 ;
   struct uprobe *active_uprobe ;
   unsigned long xol_vaddr ;
   struct return_instance *return_instances ;
   unsigned int depth ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct return_instance {
   struct uprobe *uprobe ;
   unsigned long func ;
   unsigned long stack ;
   unsigned long orig_ret_vaddr ;
   bool chained ;
   struct return_instance *next ;
};
#line 98 
struct xol_area;
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct uprobes_state {
   struct xol_area *xol_area ;
};
#line 140 
struct address_space;
#line 141 
struct mem_cgroup;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_187 {
   struct list_head lru ;
   struct address_space *mapping ;
   unsigned long index ;
   unsigned long private ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_188 {
   dma_addr_t dma_addr ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_191 {
   struct page *next ;
   int pages ;
   int pobjects ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
union __anonunion_190 {
   struct list_head slab_list ;
   struct __anonstruct_191 __anonCompField___anonunion_190_34 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_193 {
   unsigned int inuse : 16 ;
   unsigned int objects : 15 ;
   unsigned int frozen : 1 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
union __anonunion_192 {
   void *s_mem ;
   unsigned long counters ;
   struct __anonstruct_193 __anonCompField___anonunion_192_36 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_189 {
   union __anonunion_190 __anonCompField___anonstruct_189_35 ;
   struct kmem_cache *slab_cache ;
   void *freelist ;
   union __anonunion_192 __anonCompField___anonstruct_189_37 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_194 {
   unsigned long compound_head ;
   unsigned char compound_dtor ;
   unsigned char compound_order ;
   atomic_t compound_mapcount ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_195 {
   unsigned long _compound_pad_1 ;
   unsigned long _compound_pad_2 ;
   struct list_head deferred_list ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
union __anonunion_197 {
   struct mm_struct *pt_mm ;
   atomic_t pt_frag_refcount ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_196 {
   unsigned long _pt_pad_1 ;
   pgtable_t pmd_huge_pte ;
   unsigned long _pt_pad_2 ;
   union __anonunion_197 __anonCompField___anonstruct_196_41 ;
   spinlock_t *ptl ;
};
#line 68 
struct dev_pagemap;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_198 {
   struct dev_pagemap *pgmap ;
   void *zone_device_data ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
union __anonunion_186 {
   struct __anonstruct_187 __anonCompField___anonunion_186_32 ;
   struct __anonstruct_188 __anonCompField___anonunion_186_33 ;
   struct __anonstruct_189 __anonCompField___anonunion_186_38 ;
   struct __anonstruct_194 __anonCompField___anonunion_186_39 ;
   struct __anonstruct_195 __anonCompField___anonunion_186_40 ;
   struct __anonstruct_196 __anonCompField___anonunion_186_42 ;
   struct __anonstruct_198 __anonCompField___anonunion_186_43 ;
   struct callback_head callback_head ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
union __anonunion_199 {
   atomic_t _mapcount ;
   unsigned int page_type ;
   unsigned int active ;
   int units ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct page {
   unsigned long flags ;
   union __anonunion_186 __anonCompField_page_44 ;
   union __anonunion_199 __anonCompField_page_45 ;
   atomic_t _refcount ;
   struct mem_cgroup *mem_cgroup ;
} __attribute__((__aligned__(16)));
#line 278 
struct userfaultfd_ctx;
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct vm_userfaultfd_ctx {
   struct userfaultfd_ctx *ctx ;
};
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_shared_200 {
   struct rb_node rb ;
   unsigned long rb_subtree_last ;
};
#line 292 
struct anon_vma;
#line 292 
struct vm_operations_struct;
#line 292 
struct mempolicy;
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct vm_area_struct {
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   struct vm_area_struct *vm_prev ;
   struct rb_node vm_rb ;
   unsigned long rb_subtree_gap ;
   struct mm_struct *vm_mm ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   struct __anonstruct_shared_200 shared ;
   struct list_head anon_vma_chain ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   atomic_long_t swap_readahead_info ;
   struct mempolicy *vm_policy ;
   struct vm_userfaultfd_ctx vm_userfaultfd_ctx ;
} __attribute__((__designated_init__));
#line 358  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct core_thread {
   struct task_struct *task ;
   struct core_thread *next ;
};
#line 363  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct core_state {
   atomic_t nr_threads ;
   struct core_thread dumper ;
   struct completion startup ;
};
#line 368 
struct kioctx_table;
#line 370 
struct linux_binfmt;
#line 370 
struct user_namespace;
#line 370 
struct mmu_notifier_mm;
#line 370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_201 {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   u64 vmacache_seqnum ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   unsigned long mmap_base ;
   unsigned long mmap_legacy_base ;
   unsigned long mmap_compat_base ;
   unsigned long mmap_compat_legacy_base ;
   unsigned long task_size ;
   unsigned long highest_vm_end ;
   pgd_t *pgd ;
   atomic_t membarrier_state ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   atomic_long_t pgtables_bytes ;
   int map_count ;
   spinlock_t page_table_lock ;
   struct rw_semaphore mmap_sem ;
   struct list_head mmlist ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   atomic64_t pinned_vm ;
   unsigned long data_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long def_flags ;
   spinlock_t arg_lock ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[46U] ;
   struct mm_rss_stat rss_stat ;
   struct linux_binfmt *binfmt ;
   mm_context_t context ;
   unsigned long flags ;
   struct core_state *core_state ;
   spinlock_t ioctx_lock ;
   struct kioctx_table *ioctx_table ;
   struct task_struct *owner ;
   struct user_namespace *user_ns ;
   struct file *exe_file ;
   struct mmu_notifier_mm *mmu_notifier_mm ;
   unsigned long numa_next_scan ;
   unsigned long numa_scan_offset ;
   int numa_scan_seq ;
   atomic_t tlb_flush_pending ;
   bool tlb_flush_batched ;
   struct uprobes_state uprobes_state ;
   atomic_long_t hugetlb_usage ;
   struct work_struct async_put_work ;
} __attribute__((__designated_init__));
#line 370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct mm_struct {
   struct __anonstruct_201 __anonCompField_mm_struct_46 ;
   unsigned long cpu_bitmap[] ;
};
#line 642 
struct vm_fault;
#line 643  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
typedef unsigned int vm_fault_t;
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
struct dql {
   unsigned int num_queued ;
   unsigned int adj_limit ;
   unsigned int last_obj_cnt ;
   unsigned int limit ;
   unsigned int num_completed ;
   unsigned int prev_ovlimit ;
   unsigned int prev_num_queued ;
   unsigned int prev_last_obj_cnt ;
   unsigned int lowest_slack ;
   unsigned long slack_start_time ;
   unsigned int max_limit ;
   unsigned int min_limit ;
   unsigned int slack_hold_time ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
struct __anonstruct_kuid_t_252 {
   uid_t val ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
typedef struct __anonstruct_kuid_t_252 kuid_t;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
struct __anonstruct_kgid_t_253 {
   gid_t val ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
typedef struct __anonstruct_kgid_t_253 kgid_t;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/stat.h"
struct kstat {
   u32 result_mask ;
   umode_t mode ;
   unsigned int nlink ;
   uint32_t blksize ;
   u64 attributes ;
   u64 attributes_mask ;
   u64 ino ;
   dev_t dev ;
   dev_t rdev ;
   kuid_t uid ;
   kgid_t gid ;
   loff_t size ;
   struct timespec64 atime ;
   struct timespec64 mtime ;
   struct timespec64 ctime ;
   struct timespec64 btime ;
   u64 blocks ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhash_head {
   struct rhash_head *next ;
};
#line 25 
struct bucket_table;
#line 33 
struct rhashtable;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable_compare_arg {
   struct rhashtable *ht ;
   void *key ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable_params {
   u16 nelem_hint ;
   u16 key_len ;
   u16 key_offset ;
   u16 head_offset ;
   unsigned int max_size ;
   u16 min_size ;
   bool automatic_shrinking ;
   u32 (*hashfn)(void *, u32 , u32 ) ;
   u32 (*obj_hashfn)(void *, u32 , u32 ) ;
   int (*obj_cmpfn)(struct rhashtable_compare_arg *, void *) ;
};
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable {
   struct bucket_table *tbl ;
   unsigned int key_len ;
   unsigned int max_elems ;
   struct rhashtable_params p ;
   bool rhlist ;
   struct work_struct run_work ;
   struct mutex mutex ;
   spinlock_t lock ;
   atomic_t nelems ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
struct refcount_struct {
   atomic_t refs ;
};
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
typedef struct refcount_struct refcount_t;
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/sem.h"
struct sem_undo_list;
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sem.h"
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct free_area {
   struct list_head free_list[6U] ;
   unsigned long nr_free ;
};
#line 158 
struct pglist_data;
#line 168  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zone_padding {
   char x[0U] ;
} __attribute__((__aligned__(4096)));
#line 285  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zone_reclaim_stat {
   unsigned long recent_rotated[2U] ;
   unsigned long recent_scanned[2U] ;
};
#line 304  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct lruvec {
   struct list_head lists[5U] ;
   struct zone_reclaim_stat reclaim_stat ;
   atomic_long_t inactive_age ;
   unsigned long refaults ;
   unsigned long flags ;
   struct pglist_data *pgdat ;
};
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
typedef unsigned int isolate_mode_t;
#line 340  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct per_cpu_pages {
   int count ;
   int high ;
   int batch ;
   struct list_head lists[3U] ;
};
#line 349  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct per_cpu_pageset {
   struct per_cpu_pages pcp ;
   s8 expire ;
   u16 vm_numa_stat_diff[6U] ;
   s8 stat_threshold ;
   s8 vm_stat_diff[13U] ;
};
#line 361  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct per_cpu_nodestat {
   s8 stat_threshold ;
   s8 vm_node_stat_diff[32U] ;
};
#line 365 
enum zone_type {
    ZONE_DMA = 0,
    ZONE_DMA32 = 1,
    ZONE_NORMAL = 2,
    ZONE_MOVABLE = 3,
    ZONE_DEVICE = 4,
    __MAX_NR_ZONES = 5
};
#line 432  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zone {
   unsigned long _watermark[3U] ;
   unsigned long watermark_boost ;
   unsigned long nr_reserved_highatomic ;
   long lowmem_reserve[5U] ;
   int node ;
   struct pglist_data *zone_pgdat ;
   struct per_cpu_pageset *pageset ;
   unsigned long zone_start_pfn ;
   atomic_long_t managed_pages ;
   unsigned long spanned_pages ;
   unsigned long present_pages ;
   char *name ;
   unsigned long nr_isolate_pageblock ;
   seqlock_t span_seqlock ;
   int initialized ;
   struct zone_padding _pad1_ ;
   struct free_area free_area[11U] ;
   unsigned long flags ;
   spinlock_t lock ;
   struct zone_padding _pad2_ ;
   unsigned long percpu_drift_mark ;
   unsigned long compact_cached_free_pfn ;
   unsigned long compact_cached_migrate_pfn[2U] ;
   unsigned long compact_init_migrate_pfn ;
   unsigned long compact_init_free_pfn ;
   unsigned int compact_considered ;
   unsigned int compact_defer_shift ;
   int compact_order_failed ;
   bool compact_blockskip_flush ;
   bool contiguous ;
   struct zone_padding _pad3_ ;
   atomic_long_t vm_stat[13U] ;
   atomic_long_t vm_numa_stat[6U] ;
} __attribute__((__aligned__(4096)));
#line 665  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zoneref {
   struct zone *zone ;
   int zone_idx ;
};
#line 684  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zonelist {
   struct zoneref _zonerefs[5121U] ;
};
#line 694  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct deferred_split {
   spinlock_t split_queue_lock ;
   struct list_head split_queue ;
   unsigned long split_queue_len ;
};
#line 710  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct pglist_data {
   struct zone node_zones[5U] ;
   struct zonelist node_zonelists[2U] ;
   int nr_zones ;
   spinlock_t node_size_lock ;
   unsigned long node_start_pfn ;
   unsigned long node_present_pages ;
   unsigned long node_spanned_pages ;
   int node_id ;
   wait_queue_head_t kswapd_wait ;
   wait_queue_head_t pfmemalloc_wait ;
   struct task_struct *kswapd ;
   int kswapd_order ;
   enum zone_type kswapd_classzone_idx ;
   int kswapd_failures ;
   int kcompactd_max_order ;
   enum zone_type kcompactd_classzone_idx ;
   wait_queue_head_t kcompactd_wait ;
   struct task_struct *kcompactd ;
   unsigned long totalreserve_pages ;
   unsigned long min_unmapped_pages ;
   unsigned long min_slab_pages ;
   struct zone_padding _pad1_ ;
   spinlock_t lru_lock ;
   unsigned long first_deferred_pfn ;
   struct deferred_split deferred_split_queue ;
   struct lruvec __lruvec ;
   unsigned long flags ;
   struct zone_padding _pad2_ ;
   struct per_cpu_nodestat *per_cpu_nodestats ;
   atomic_long_t vm_stat[32U] ;
};
#line 824 
struct resource;
#line 825 
struct vmem_altmap;
#line 623  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/gfp.h"
struct percpu_ref;
#line 624  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/gfp.h"
typedef void percpu_ref_func_t(struct percpu_ref *);
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-refcount.h"
struct percpu_ref {
   atomic_long_t count ;
   unsigned long percpu_count_ptr ;
   percpu_ref_func_t *release ;
   percpu_ref_func_t *confirm_switch ;
   bool force_atomic : 1 ;
   bool allow_reinit : 1 ;
   struct callback_head rcu ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/sched.h"
enum pid_type {
    PIDTYPE_PID = 0,
    PIDTYPE_TGID = 1,
    PIDTYPE_PGID = 2,
    PIDTYPE_SID = 3,
    PIDTYPE_MAX = 4
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct pid_namespace;
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct upid {
   int nr ;
   struct pid_namespace *ns ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct pid {
   refcount_t count ;
   unsigned int level ;
   struct hlist_head tasks[4U] ;
   wait_queue_head_t wait_pidfd ;
   struct callback_head rcu ;
   struct upid numbers[1U] ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shm.h"
struct sysv_shm {
   struct list_head shm_clist ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/plist.h"
struct plist_node {
   int prio ;
   struct list_head prio_list ;
   struct list_head node_list ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timerqueue.h"
struct timerqueue_node {
   struct rb_node node ;
   ktime_t expires ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timerqueue.h"
struct timerqueue_head {
   struct rb_root_cached rb_root ;
};
#line 60 
struct hrtimer_clock_base;
#line 61 
struct hrtimer_cpu_base;
#line 80 
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
};
#line 117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer {
   struct timerqueue_node node ;
   ktime_t _softexpires ;
   enum hrtimer_restart (*function)(struct hrtimer *) ;
   struct hrtimer_clock_base *base ;
   u8 state ;
   u8 is_rel ;
   u8 is_soft ;
   u8 is_hard ;
};
#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   unsigned int index ;
   clockid_t clockid ;
   seqcount_t seq ;
   struct hrtimer *running ;
   struct timerqueue_head active ;
   ktime_t (*get_time)(void) ;
   ktime_t offset ;
} __attribute__((__aligned__(64)));
#line 213  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer_cpu_base {
   raw_spinlock_t lock ;
   unsigned int cpu ;
   unsigned int active_bases ;
   unsigned int clock_was_set_seq ;
   unsigned int hres_active : 1 ;
   unsigned int in_hrtirq : 1 ;
   unsigned int hang_detected : 1 ;
   unsigned int softirq_activated : 1 ;
   unsigned int nr_events ;
   unsigned short nr_retries ;
   unsigned short nr_hangs ;
   unsigned int max_hang_time ;
   ktime_t expires_next ;
   struct hrtimer *next_timer ;
   ktime_t softirq_expires_next ;
   struct hrtimer *softirq_next_timer ;
   struct hrtimer_clock_base clock_base[8U] ;
} __attribute__((__aligned__(64)));
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/seccomp.h"
struct seccomp_filter;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seccomp.h"
struct seccomp {
   int mode ;
   struct seccomp_filter *filter ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/resource.h"
struct rlimit {
   __kernel_ulong_t rlim_cur ;
   __kernel_ulong_t rlim_max ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/latencytop.h"
struct latency_record {
   unsigned long backtrace[12U] ;
   unsigned int count ;
   unsigned long time ;
   unsigned long max ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/types.h"
struct task_cputime {
   u64 stime ;
   u64 utime ;
   unsigned long long sum_exec_runtime ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
struct __anonstruct_sigset_t_280 {
   unsigned long sig[1U] ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
typedef struct __anonstruct_sigset_t_280 sigset_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
typedef void __signalfn_t(int );
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef __signalfn_t *__sighandler_t;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef void __restorefn_t(void);
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef __restorefn_t *__sigrestore_t;
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union sigval {
   int sival_int ;
   void *sival_ptr ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
typedef union sigval sigval_t;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__kill_281 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__timer_282 {
   __kernel_timer_t _tid ;
   int _overrun ;
   sigval_t _sigval ;
   int _sys_private ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__rt_283 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   sigval_t _sigval ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigchld_284 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   int _status ;
   __kernel_clock_t _utime ;
   __kernel_clock_t _stime ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__addr_bnd_287 {
   char _dummy_bnd[8U] ;
   void *_lower ;
   void *_upper ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__addr_pkey_288 {
   char _dummy_pkey[8U] ;
   __u32 _pkey ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union __anonunion_286 {
   short _addr_lsb ;
   struct __anonstruct__addr_bnd_287 _addr_bnd ;
   struct __anonstruct__addr_pkey_288 _addr_pkey ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigfault_285 {
   void *_addr ;
   union __anonunion_286 __anonCompField___anonstruct__sigfault_285_47 ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigpoll_289 {
   long _band ;
   int _fd ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigsys_290 {
   void *_call_addr ;
   int _syscall ;
   unsigned int _arch ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union __sifields {
   struct __anonstruct__kill_281 _kill ;
   struct __anonstruct__timer_282 _timer ;
   struct __anonstruct__rt_283 _rt ;
   struct __anonstruct__sigchld_284 _sigchld ;
   struct __anonstruct__sigfault_285 _sigfault ;
   struct __anonstruct__sigpoll_289 _sigpoll ;
   struct __anonstruct__sigsys_290 _sigsys ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct __anonstruct_295 {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __sifields _sifields ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct kernel_siginfo {
   struct __anonstruct_295 __anonCompField_kernel_siginfo_50 ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
typedef struct kernel_siginfo kernel_siginfo_t;
#line 20 
struct user_struct;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct k_sigaction {
   struct sigaction sa ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/task_io_accounting.h"
struct task_io_accounting {
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/posix-timers.h"
struct posix_cputimer_base {
   u64 nextevt ;
   struct timerqueue_head tqhead ;
};
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/posix-timers.h"
struct posix_cputimers {
   struct posix_cputimer_base bases[3U] ;
   unsigned int timers_active ;
   unsigned int expiry_active ;
};
#line 193 
struct signal_struct;
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rseq.h"
union __anonunion_rseq_cs_300 {
   __u64 ptr64 ;
   __u64 ptr ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rseq.h"
struct rseq {
   __u32 cpu_id_start ;
   __u32 cpu_id ;
   union __anonunion_rseq_cs_300 rseq_cs ;
   __u32 flags ;
} __attribute__((__aligned__(32)));
#line 146 
struct audit_context;
#line 147 
struct backing_dev_info;
#line 148 
struct bio_list;
#line 149 
struct blk_plug;
#line 150 
struct capture_control;
#line 151 
struct cfs_rq;
#line 152 
struct fs_struct;
#line 153 
struct futex_pi_state;
#line 154 
struct io_context;
#line 155 
struct nameidata;
#line 156 
struct nsproxy;
#line 157 
struct perf_event_context;
#line 158 
struct pipe_inode_info;
#line 160 
struct reclaim_state;
#line 161 
struct robust_list_head;
#line 166 
struct sighand_struct;
#line 167 
struct task_delay_info;
#line 168 
struct task_group;
#line 242  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct prev_cputime {
   u64 utime ;
   u64 stime ;
   raw_spinlock_t lock ;
};
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_info {
   unsigned long pcount ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
};
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct load_weight {
   unsigned long weight ;
   u32 inv_weight ;
};
#line 352  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct util_est {
   unsigned int enqueued ;
   unsigned int ewma ;
} __attribute__((__aligned__(8)));
#line 401  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_avg {
   u64 last_update_time ;
   u64 load_sum ;
   u64 runnable_load_sum ;
   u32 util_sum ;
   u32 period_contrib ;
   unsigned long load_avg ;
   unsigned long runnable_load_avg ;
   unsigned long util_avg ;
   struct util_est util_est ;
} __attribute__((__aligned__(64)));
#line 413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_statistics {
   u64 wait_start ;
   u64 wait_max ;
   u64 wait_count ;
   u64 wait_sum ;
   u64 iowait_count ;
   u64 iowait_sum ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
};
#line 449  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_entity {
   struct load_weight load ;
   unsigned long runnable_weight ;
   struct rb_node run_node ;
   struct list_head group_node ;
   unsigned int on_rq ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 nr_migrations ;
   struct sched_statistics statistics ;
   int depth ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
   struct sched_avg avg ;
};
#line 486 
struct rt_rq;
#line 486  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_rt_entity {
   struct list_head run_list ;
   unsigned long timeout ;
   unsigned long watchdog_stamp ;
   unsigned int time_slice ;
   unsigned short on_rq ;
   unsigned short on_list ;
   struct sched_rt_entity *back ;
   struct sched_rt_entity *parent ;
   struct rt_rq *rt_rq ;
   struct rt_rq *my_q ;
} __attribute__((__designated_init__));
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_dl_entity {
   struct rb_node rb_node ;
   u64 dl_runtime ;
   u64 dl_deadline ;
   u64 dl_period ;
   u64 dl_bw ;
   u64 dl_density ;
   s64 runtime ;
   u64 deadline ;
   unsigned int flags ;
   unsigned int dl_throttled : 1 ;
   unsigned int dl_boosted : 1 ;
   unsigned int dl_yielded : 1 ;
   unsigned int dl_non_contending : 1 ;
   unsigned int dl_overrun : 1 ;
   struct hrtimer dl_timer ;
   struct hrtimer inactive_timer ;
};
#line 600  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct uclamp_se {
   unsigned int value : 11 ;
   unsigned int bucket_id : 3 ;
   unsigned int active : 1 ;
   unsigned int user_defined : 1 ;
};
#line 625  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct wake_q_node {
   struct wake_q_node *next ;
};
#line 629 
struct sched_class;
#line 629 
struct cred;
#line 629 
struct key;
#line 629 
struct files_struct;
#line 629 
struct rt_mutex_waiter;
#line 629 
struct css_set;
#line 629 
struct compat_robust_list_head;
#line 629 
struct numa_group;
#line 629  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
union __anonunion_302 {
   refcount_t rcu_users ;
   struct callback_head rcu ;
};
#line 629 
struct ftrace_ret_stack;
#line 629 
struct kcov;
#line 629 
struct request_queue;
#line 629  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct task_struct {
   struct thread_info thread_info ;
   long state ;
   void *stack ;
   refcount_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   struct llist_node wake_entry ;
   int on_cpu ;
   unsigned int cpu ;
   unsigned int wakee_flips ;
   unsigned long wakee_flip_decay_ts ;
   struct task_struct *last_wakee ;
   int recent_used_cpu ;
   int wake_cpu ;
   int on_rq ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   unsigned int rt_priority ;
   struct sched_class *sched_class ;
   struct sched_entity se ;
   struct sched_rt_entity rt ;
   struct task_group *sched_task_group ;
   struct sched_dl_entity dl ;
   struct uclamp_se uclamp_req[2U] ;
   struct uclamp_se uclamp[2U] ;
   struct hlist_head preempt_notifiers ;
   unsigned int btrace_seq ;
   unsigned int policy ;
   int nr_cpus_allowed ;
   cpumask_t *cpus_ptr ;
   cpumask_t cpus_mask ;
   unsigned long rcu_tasks_nvcsw ;
   u8 rcu_tasks_holdout ;
   u8 rcu_tasks_idx ;
   int rcu_tasks_idle_cpu ;
   struct list_head rcu_tasks_holdout_list ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct plist_node pushable_tasks ;
   struct rb_node pushable_dl_tasks ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   struct vmacache vmacache ;
   struct task_rss_stat rss_stat ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned long jobctl ;
   unsigned int personality ;
   unsigned int sched_reset_on_fork : 1 ;
   unsigned int sched_contributes_to_load : 1 ;
   unsigned int sched_migrated : 1 ;
   unsigned int sched_remote_wakeup : 1 ;
   unsigned int sched_psi_wake_requeue : 1 ;
   unsigned int  ;
   unsigned int in_execve : 1 ;
   unsigned int in_iowait : 1 ;
   unsigned int restore_sigmask : 1 ;
   unsigned int in_user_fault : 1 ;
   unsigned int brk_randomized : 1 ;
   unsigned int no_cgroup_migration : 1 ;
   unsigned int frozen : 1 ;
   unsigned int use_memdelay : 1 ;
   unsigned long atomic_flags ;
   struct restart_block restart_block ;
   pid_t pid ;
   pid_t tgid ;
   unsigned long stack_canary ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct list_head ptraced ;
   struct list_head ptrace_entry ;
   struct pid *thread_pid ;
   struct hlist_node pid_links[4U] ;
   struct list_head thread_group ;
   struct list_head thread_node ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   u64 utime ;
   u64 stime ;
   u64 gtime ;
   struct prev_cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   u64 start_time ;
   u64 start_boottime ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   struct posix_cputimers posix_cputimers ;
   struct cred *ptracer_cred ;
   struct cred *real_cred ;
   struct cred *cred ;
   struct key *cached_requested_key ;
   char comm[16U] ;
   struct nameidata *nameidata ;
   struct sysv_sem sysvsem ;
   struct sysv_shm sysvshm ;
   unsigned long last_switch_count ;
   unsigned long last_switch_time ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t sas_ss_size ;
   unsigned int sas_ss_flags ;
   struct callback_head *task_works ;
   struct audit_context *audit_context ;
   kuid_t loginuid ;
   unsigned int sessionid ;
   struct seccomp seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   raw_spinlock_t pi_lock ;
   struct wake_q_node wake_q ;
   struct rb_root_cached pi_waiters ;
   struct task_struct *pi_top_task ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct mutex_waiter *blocked_on ;
   int non_block_count ;
   unsigned int irq_events ;
   unsigned long hardirq_enable_ip ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned int hardirq_disable_event ;
   int hardirqs_enabled ;
   int hardirq_context ;
   unsigned long softirq_disable_ip ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_disable_event ;
   unsigned int softirq_enable_event ;
   int softirqs_enabled ;
   int softirq_context ;
   u64 curr_chain_key ;
   int lockdep_depth ;
   unsigned int lockdep_recursion ;
   struct held_lock held_locks[48U] ;
   unsigned int in_ubsan ;
   void *journal_info ;
   struct bio_list *bio_list ;
   struct blk_plug *plug ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   struct capture_control *capture_control ;
   unsigned long ptrace_message ;
   kernel_siginfo_t *last_siginfo ;
   struct task_io_accounting ioac ;
   unsigned int psi_flags ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   u64 acct_timexpd ;
   nodemask_t mems_allowed ;
   seqcount_t mems_allowed_seq ;
   int cpuset_mem_spread_rotor ;
   int cpuset_slab_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   u32 closid ;
   u32 rmid ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   struct mutex futex_exit_mutex ;
   unsigned int futex_state ;
   struct perf_event_context *perf_event_ctxp[2U] ;
   struct mutex perf_event_mutex ;
   struct list_head perf_event_list ;
   struct mempolicy *mempolicy ;
   short il_prev ;
   short pref_node_fork ;
   int numa_scan_seq ;
   unsigned int numa_scan_period ;
   unsigned int numa_scan_period_max ;
   int numa_preferred_nid ;
   unsigned long numa_migrate_retry ;
   u64 node_stamp ;
   u64 last_task_numa_placement ;
   u64 last_sum_exec_runtime ;
   struct callback_head numa_work ;
   struct numa_group *numa_group ;
   unsigned long *numa_faults ;
   unsigned long total_numa_faults ;
   unsigned long numa_faults_locality[3U] ;
   unsigned long numa_pages_migrated ;
   struct rseq *rseq ;
   u32 rseq_sig ;
   unsigned long rseq_event_mask ;
   struct tlbflush_unmap_batch tlb_ubc ;
   union __anonunion_302 __anonCompField_task_struct_52 ;
   struct pipe_inode_info *splice_pipe ;
   struct page_frag task_frag ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   unsigned int fail_nth ;
   int nr_dirtied ;
   int nr_dirtied_pause ;
   unsigned long dirty_paused_when ;
   int latency_record_count ;
   struct latency_record latency_record[32U] ;
   u64 timer_slack_ns ;
   u64 default_timer_slack_ns ;
   unsigned int kasan_depth ;
   int curr_ret_stack ;
   int curr_ret_depth ;
   struct ftrace_ret_stack *ret_stack ;
   unsigned long long ftrace_timestamp ;
   atomic_t trace_overrun ;
   atomic_t tracing_graph_pause ;
   unsigned long trace ;
   unsigned long trace_recursion ;
   unsigned int kcov_mode ;
   unsigned int kcov_size ;
   void *kcov_area ;
   struct kcov *kcov ;
   u64 kcov_handle ;
   int kcov_sequence ;
   struct mem_cgroup *memcg_in_oom ;
   gfp_t memcg_oom_gfp_mask ;
   int memcg_oom_order ;
   unsigned int memcg_nr_pages_over_high ;
   struct mem_cgroup *active_memcg ;
   struct request_queue *throttle_queue ;
   struct uprobe_task *utask ;
   unsigned int sequential_io ;
   unsigned int sequential_io_avg ;
   unsigned long task_state_change ;
   int pagefault_disabled ;
   struct task_struct *oom_reaper_list ;
   struct vm_struct *stack_vm_area ;
   refcount_t stack_refcount ;
   int patch_state ;
   void *security ;
   struct thread_struct thread ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/extable.h"
struct exception_table_entry {
   int insn ;
   int fixup ;
   int handler ;
};
#line 686  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
struct scatterlist;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uio.h"
struct iovec {
   void *iov_base ;
   __kernel_size_t iov_len ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct kvec {
   void *iov_base ;
   size_t iov_len ;
};
#line 30 
struct bio_vec;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
union __anonunion_381 {
   struct iovec *iov ;
   struct kvec *kvec ;
   struct bio_vec *bvec ;
   struct pipe_inode_info *pipe ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct __anonstruct_383 {
   unsigned int head ;
   unsigned int start_head ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
union __anonunion_382 {
   unsigned long nr_segs ;
   struct __anonstruct_383 __anonCompField___anonunion_382_54 ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct iov_iter {
   unsigned int type ;
   size_t iov_offset ;
   size_t count ;
   union __anonunion_381 __anonCompField_iov_iter_53 ;
   union __anonunion_382 __anonCompField_iov_iter_55 ;
};
#line 285  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
typedef unsigned short __kernel_sa_family_t;
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/socket.h"
struct socket;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
typedef __kernel_sa_family_t sa_family_t;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
struct sockaddr {
   sa_family_t sa_family ;
   char sa_data[14U] ;
};
#line 49 
struct kiocb;
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
struct msghdr {
   void *msg_name ;
   int msg_namelen ;
   struct iov_iter msg_iter ;
   void *msg_control ;
   __kernel_size_t msg_controllen ;
   unsigned int msg_flags ;
   struct kiocb *msg_iocb ;
};
#line 422 
struct ns_common;
#line 423  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
struct __anonstruct_sync_serial_settings_386 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
};
#line 423  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
typedef struct __anonstruct_sync_serial_settings_386 sync_serial_settings;
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_te1_settings_387 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
   unsigned int slot_map ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_te1_settings_387 te1_settings;
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_raw_hdlc_proto_388 {
   unsigned short encoding ;
   unsigned short parity ;
};
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_raw_hdlc_proto_388 raw_hdlc_proto;
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_389 {
   unsigned int t391 ;
   unsigned int t392 ;
   unsigned int n391 ;
   unsigned int n392 ;
   unsigned int n393 ;
   unsigned short lmi ;
   unsigned short dce ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_389 fr_proto;
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_390 {
   unsigned int dlci ;
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_390 fr_proto_pvc;
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_info_391 {
   unsigned int dlci ;
   char master[16U] ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_info_391 fr_proto_pvc_info;
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_cisco_proto_392 {
   unsigned int interval ;
   unsigned int timeout ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_cisco_proto_392 cisco_proto;
#line 195  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct ifmap {
   unsigned long mem_start ;
   unsigned long mem_end ;
   unsigned short base_addr ;
   unsigned char irq ;
   unsigned char dma ;
   unsigned char port ;
};
#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifs_ifsu_393 {
   raw_hdlc_proto *raw_hdlc ;
   cisco_proto *cisco ;
   fr_proto *fr ;
   fr_proto_pvc *fr_pvc ;
   fr_proto_pvc_info *fr_pvc_info ;
   sync_serial_settings *sync ;
   te1_settings *te1 ;
};
#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct if_settings {
   unsigned int type ;
   unsigned int size ;
   union __anonunion_ifs_ifsu_393 ifs_ifsu ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifr_ifrn_394 {
   char ifrn_name[16U] ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifr_ifru_395 {
   struct sockaddr ifru_addr ;
   struct sockaddr ifru_dstaddr ;
   struct sockaddr ifru_broadaddr ;
   struct sockaddr ifru_netmask ;
   struct sockaddr ifru_hwaddr ;
   short ifru_flags ;
   int ifru_ivalue ;
   int ifru_mtu ;
   struct ifmap ifru_map ;
   char ifru_slave[16U] ;
   char ifru_newname[16U] ;
   void *ifru_data ;
   struct if_settings ifru_settings ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct ifreq {
   union __anonunion_ifr_ifrn_394 ifr_ifrn ;
   union __anonunion_ifr_ifru_395 ifr_ifru ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_node;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_head {
   struct hlist_bl_node *first ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_node {
   struct hlist_bl_node *next ;
   struct hlist_bl_node **pprev ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
struct __anonstruct_410 {
   spinlock_t lock ;
   int count ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
union __anonunion_409 {
   struct __anonstruct_410 __anonCompField___anonunion_409_58 ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
struct lockref {
   union __anonunion_409 __anonCompField_lockref_59 ;
};
#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/stringhash.h"
struct path;
#line 79 
struct vfsmount;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct __anonstruct_412 {
   u32 hash ;
   u32 len ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_411 {
   struct __anonstruct_412 __anonCompField___anonunion_411_60 ;
   u64 hash_len ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct qstr {
   union __anonunion_411 __anonCompField_qstr_61 ;
   unsigned char *name ;
};
#line 89 
struct dentry_operations;
#line 89 
struct super_block;
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_413 {
   struct list_head d_lru ;
   wait_queue_head_t *d_wait ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_d_u_414 {
   struct hlist_node d_alias ;
   struct hlist_bl_node d_in_lookup_hash ;
   struct callback_head d_rcu ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct dentry {
   unsigned int d_flags ;
   seqcount_t d_seq ;
   struct hlist_bl_node d_hash ;
   struct dentry *d_parent ;
   struct qstr d_name ;
   struct inode *d_inode ;
   unsigned char d_iname[32U] ;
   struct lockref d_lockref ;
   struct dentry_operations *d_op ;
   struct super_block *d_sb ;
   unsigned long d_time ;
   void *d_fsdata ;
   union __anonunion_413 __anonCompField_dentry_62 ;
   struct list_head d_child ;
   struct list_head d_subdirs ;
   union __anonunion_d_u_414 d_u ;
} __attribute__((__designated_init__));
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct dentry_operations {
   int (*d_revalidate)(struct dentry *, unsigned int ) ;
   int (*d_weak_revalidate)(struct dentry *, unsigned int ) ;
   int (*d_hash)(struct dentry *, struct qstr *) ;
   int (*d_compare)(struct dentry *, unsigned int , char *, struct qstr *) ;
   int (*d_delete)(struct dentry *) ;
   int (*d_init)(struct dentry *) ;
   void (*d_release)(struct dentry *) ;
   void (*d_prune)(struct dentry *) ;
   void (*d_iput)(struct dentry *, struct inode *) ;
   char *(*d_dname)(struct dentry *, char *, int ) ;
   struct vfsmount *(*d_automount)(struct path *) ;
   int (*d_manage)(struct path *, bool ) ;
   struct dentry *(*d_real)(struct dentry *, struct inode *) ;
} __attribute__((__aligned__(64)));
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/path.h"
struct path {
   struct vfsmount *mnt ;
   struct dentry *dentry ;
} __attribute__((__designated_init__));
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shrinker.h"
struct shrink_control {
   gfp_t gfp_mask ;
   int nid ;
   unsigned long nr_to_scan ;
   unsigned long nr_scanned ;
   struct mem_cgroup *memcg ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shrinker.h"
struct shrinker {
   unsigned long (*count_objects)(struct shrinker *, struct shrink_control *) ;
   unsigned long (*scan_objects)(struct shrinker *, struct shrink_control *) ;
   long batch ;
   int seeks ;
   unsigned int flags ;
   struct list_head list ;
   int id ;
   atomic_long_t *nr_deferred ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_one {
   struct list_head list ;
   long nr_items ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_memcg {
   struct callback_head rcu ;
   struct list_lru_one *lru[0U] ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_node {
   spinlock_t lock ;
   struct list_lru_one lru ;
   struct list_lru_memcg *memcg_lrus ;
   long nr_items ;
} __attribute__((__aligned__(64)));
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru {
   struct list_lru_node *node ;
   struct list_head list ;
   int shrinker_id ;
   bool memcg_aware ;
};
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/xarray.h"
struct xarray {
   spinlock_t xa_lock ;
   gfp_t xa_flags ;
   void *xa_head ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/capability.h"
struct kernel_cap_struct {
   __u32 cap[2U] ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/capability.h"
typedef struct kernel_cap_struct kernel_cap_t;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fiemap.h"
struct fiemap_extent {
   __u64 fe_logical ;
   __u64 fe_physical ;
   __u64 fe_length ;
   __u64 fe_reserved64[2U] ;
   __u32 fe_flags ;
   __u32 fe_reserved[3U] ;
};
#line 39 
enum migrate_mode {
    MIGRATE_ASYNC = 0,
    MIGRATE_SYNC_LIGHT = 1,
    MIGRATE_SYNC = 2,
    MIGRATE_SYNC_NO_COPY = 3
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcuwait.h"
struct rcuwait {
   struct task_struct *task ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcu_sync.h"
struct rcu_sync {
   int gp_state ;
   int gp_count ;
   wait_queue_head_t gp_wait ;
   struct callback_head cb_head ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-rwsem.h"
struct percpu_rw_semaphore {
   struct rcu_sync rss ;
   unsigned int *read_count ;
   struct rw_semaphore rw_sem ;
   struct rcuwait writer ;
   int readers_block ;
};
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/delayed_call.h"
struct delayed_call {
   void (*fn)(void *) ;
   void *arg ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uuid.h"
struct __anonstruct_uuid_t_432 {
   __u8 b[16U] ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uuid.h"
typedef struct __anonstruct_uuid_t_432 uuid_t;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uuid.h"
typedef u32 errseq_t;
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
union __anonunion_433 {
   struct list_head q_node ;
   struct kmem_cache *__rcu_icq_cache ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
union __anonunion_434 {
   struct hlist_node ioc_node ;
   struct callback_head __rcu_head ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
struct io_cq {
   struct request_queue *q ;
   struct io_context *ioc ;
   union __anonunion_433 __anonCompField_io_cq_65 ;
   union __anonunion_434 __anonCompField_io_cq_66 ;
   unsigned int flags ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
struct io_context {
   atomic_long_t refcount ;
   atomic_t active_ref ;
   atomic_t nr_tasks ;
   spinlock_t lock ;
   unsigned short ioprio ;
   int nr_batch_requests ;
   unsigned long last_waited ;
   struct xarray icq_tree ;
   struct io_cq *icq_hint ;
   struct hlist_head icq_list ;
   struct work_struct release_work ;
};
#line 286  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fs.h"
struct bdi_writeback;
#line 287 
struct bio;
#line 288 
struct export_operations;
#line 289 
struct hd_geometry;
#line 290 
struct kobject;
#line 291 
struct poll_table_struct;
#line 292 
struct kstatfs;
#line 293 
struct swap_info_struct;
#line 294 
struct fscrypt_info;
#line 295 
struct fscrypt_operations;
#line 296 
struct fsverity_info;
#line 297 
struct fsverity_operations;
#line 298 
struct fs_context;
#line 299 
struct fs_parameter_description;
#line 224  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct iattr {
   unsigned int ia_valid ;
   umode_t ia_mode ;
   kuid_t ia_uid ;
   kgid_t ia_gid ;
   loff_t ia_size ;
   struct timespec64 ia_atime ;
   struct timespec64 ia_mtime ;
   struct timespec64 ia_ctime ;
   struct file *ia_file ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu_counter.h"
struct percpu_counter {
   raw_spinlock_t lock ;
   s64 count ;
   struct list_head list ;
   s32 *counters ;
};
#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dqblk_xfs.h"
struct dquot;
#line 215 
struct kqid;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
typedef __kernel_uid32_t projid_t;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
struct __anonstruct_kprojid_t_435 {
   projid_t val ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
typedef struct __anonstruct_kprojid_t_435 kprojid_t;
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/quota.h"
enum quota_type {
    USRQUOTA = 0,
    GRPQUOTA = 1,
    PRJQUOTA = 2
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
typedef long long qsize_t;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
union __anonunion_436 {
   kuid_t uid ;
   kgid_t gid ;
   kprojid_t projid ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct kqid {
   union __anonunion_436 __anonCompField_kqid_67 ;
   enum quota_type type ;
};
#line 205  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct mem_dqblk {
   qsize_t dqb_bhardlimit ;
   qsize_t dqb_bsoftlimit ;
   qsize_t dqb_curspace ;
   qsize_t dqb_rsvspace ;
   qsize_t dqb_ihardlimit ;
   qsize_t dqb_isoftlimit ;
   qsize_t dqb_curinodes ;
   time64_t dqb_btime ;
   time64_t dqb_itime ;
};
#line 216 
struct quota_format_type;
#line 222  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct mem_dqinfo {
   struct quota_format_type *dqi_format ;
   int dqi_fmt_id ;
   struct list_head dqi_dirty_list ;
   unsigned long dqi_flags ;
   unsigned int dqi_bgrace ;
   unsigned int dqi_igrace ;
   qsize_t dqi_max_spc_limit ;
   qsize_t dqi_max_ino_limit ;
   void *dqi_priv ;
};
#line 294  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct dquot {
   struct hlist_node dq_hash ;
   struct list_head dq_inuse ;
   struct list_head dq_free ;
   struct list_head dq_dirty ;
   struct mutex dq_lock ;
   spinlock_t dq_dqb_lock ;
   atomic_t dq_count ;
   struct super_block *dq_sb ;
   struct kqid dq_id ;
   loff_t dq_off ;
   unsigned long dq_flags ;
   struct mem_dqblk dq_dqb ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_format_ops {
   int (*check_quota_file)(struct super_block *, int ) ;
   int (*read_file_info)(struct super_block *, int ) ;
   int (*write_file_info)(struct super_block *, int ) ;
   int (*free_file_info)(struct super_block *, int ) ;
   int (*read_dqblk)(struct dquot *) ;
   int (*commit_dqblk)(struct dquot *) ;
   int (*release_dqblk)(struct dquot *) ;
   int (*get_next_id)(struct super_block *, struct kqid *) ;
};
#line 322  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct dquot_operations {
   int (*write_dquot)(struct dquot *) ;
   struct dquot *(*alloc_dquot)(struct super_block *, int ) ;
   void (*destroy_dquot)(struct dquot *) ;
   int (*acquire_dquot)(struct dquot *) ;
   int (*release_dquot)(struct dquot *) ;
   int (*mark_dirty)(struct dquot *) ;
   int (*write_info)(struct super_block *, int ) ;
   qsize_t *(*get_reserved_space)(struct inode *) ;
   int (*get_projid)(struct inode *, kprojid_t *) ;
   int (*get_inode_usage)(struct inode *, qsize_t *) ;
   int (*get_next_id)(struct super_block *, struct kqid *) ;
};
#line 343  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_dqblk {
   int d_fieldmask ;
   u64 d_spc_hardlimit ;
   u64 d_spc_softlimit ;
   u64 d_ino_hardlimit ;
   u64 d_ino_softlimit ;
   u64 d_space ;
   u64 d_ino_count ;
   s64 d_ino_timer ;
   s64 d_spc_timer ;
   int d_ino_warns ;
   int d_spc_warns ;
   u64 d_rt_spc_hardlimit ;
   u64 d_rt_spc_softlimit ;
   u64 d_rt_space ;
   s64 d_rt_spc_timer ;
   int d_rt_spc_warns ;
};
#line 395  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_type_state {
   unsigned int flags ;
   unsigned int spc_timelimit ;
   unsigned int ino_timelimit ;
   unsigned int rt_spc_timelimit ;
   unsigned int spc_warnlimit ;
   unsigned int ino_warnlimit ;
   unsigned int rt_spc_warnlimit ;
   unsigned long long ino ;
   blkcnt_t blocks ;
   blkcnt_t nextents ;
};
#line 409  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_state {
   unsigned int s_incoredqs ;
   struct qc_type_state s_state[3U] ;
};
#line 415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_info {
   int i_fieldmask ;
   unsigned int i_flags ;
   unsigned int i_spc_timelimit ;
   unsigned int i_ino_timelimit ;
   unsigned int i_rt_spc_timelimit ;
   unsigned int i_spc_warnlimit ;
   unsigned int i_ino_warnlimit ;
   unsigned int i_rt_spc_warnlimit ;
};
#line 428  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quotactl_ops {
   int (*quota_on)(struct super_block *, int , int , struct path *) ;
   int (*quota_off)(struct super_block *, int ) ;
   int (*quota_enable)(struct super_block *, unsigned int ) ;
   int (*quota_disable)(struct super_block *, unsigned int ) ;
   int (*quota_sync)(struct super_block *, int ) ;
   int (*set_info)(struct super_block *, int , struct qc_info *) ;
   int (*get_dqblk)(struct super_block *, struct kqid , struct qc_dqblk *) ;
   int (*get_nextdqblk)(struct super_block *, struct kqid *, struct qc_dqblk *) ;
   int (*set_dqblk)(struct super_block *, struct kqid , struct qc_dqblk *) ;
   int (*get_state)(struct super_block *, struct qc_state *) ;
   int (*rm_xquota)(struct super_block *, unsigned int ) ;
};
#line 443  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_format_type {
   int qf_fmt_id ;
   struct quota_format_ops *qf_ops ;
   struct module *qf_owner ;
   struct quota_format_type *qf_next ;
};
#line 518  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_info {
   unsigned int flags ;
   struct rw_semaphore dqio_sem ;
   struct inode *files[3U] ;
   struct mem_dqinfo info[3U] ;
   struct quota_format_ops *ops[3U] ;
};
#line 538 
struct writeback_control;
#line 539 
enum rw_hint {
    WRITE_LIFE_NOT_SET = 0,
    WRITE_LIFE_NONE = 1,
    WRITE_LIFE_SHORT = 2,
    WRITE_LIFE_MEDIUM = 3,
    WRITE_LIFE_LONG = 4,
    WRITE_LIFE_EXTREME = 5
};
#line 318  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct kiocb {
   struct file *ki_filp ;
   loff_t ki_pos ;
   void (*ki_complete)(struct kiocb *, long , long ) ;
   void *private ;
   int ki_flags ;
   u16 ki_hint ;
   u16 ki_ioprio ;
   unsigned int ki_cookie ;
};
#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_arg_438 {
   char *buf ;
   void *data ;
};
#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct __anonstruct_read_descriptor_t_437 {
   size_t written ;
   size_t count ;
   union __anonunion_arg_438 arg ;
   int error ;
};
#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
typedef struct __anonstruct_read_descriptor_t_437 read_descriptor_t;
#line 362  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct address_space_operations {
   int (*writepage)(struct page *, struct writeback_control *) ;
   int (*readpage)(struct file *, struct page *) ;
   int (*writepages)(struct address_space *, struct writeback_control *) ;
   int (*set_page_dirty)(struct page *) ;
   int (*readpages)(struct file *, struct address_space *, struct list_head *, unsigned int ) ;
   int (*write_begin)(struct file *, struct address_space *, loff_t , unsigned int , unsigned int , struct page **, void **) ;
   int (*write_end)(struct file *, struct address_space *, loff_t , unsigned int , unsigned int , struct page *, void *) ;
   sector_t (*bmap)(struct address_space *, sector_t ) ;
   void (*invalidatepage)(struct page *, unsigned int , unsigned int ) ;
   int (*releasepage)(struct page *, gfp_t ) ;
   void (*freepage)(struct page *) ;
   ssize_t (*direct_IO)(struct kiocb *, struct iov_iter *) ;
   int (*migratepage)(struct address_space *, struct page *, struct page *, enum migrate_mode ) ;
   bool (*isolate_page)(struct page *, isolate_mode_t ) ;
   void (*putback_page)(struct page *) ;
   int (*launder_page)(struct page *) ;
   int (*is_partially_uptodate)(struct page *, unsigned long , unsigned long ) ;
   void (*is_dirty_writeback)(struct page *, bool *, bool *) ;
   int (*error_remove_page)(struct address_space *, struct page *) ;
   int (*swap_activate)(struct swap_info_struct *, struct file *, sector_t *) ;
   void (*swap_deactivate)(struct file *) ;
};
#line 445  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct address_space {
   struct inode *host ;
   struct xarray i_pages ;
   gfp_t gfp_mask ;
   atomic_t i_mmap_writable ;
   atomic_t nr_thps ;
   struct rb_root_cached i_mmap ;
   struct rw_semaphore i_mmap_rwsem ;
   unsigned long nrpages ;
   unsigned long nrexceptional ;
   unsigned long writeback_index ;
   struct address_space_operations *a_ops ;
   unsigned long flags ;
   errseq_t wb_err ;
   spinlock_t private_lock ;
   struct list_head private_list ;
   void *private_data ;
} __attribute__((__designated_init__, __aligned__(8)));
#line 473 
struct hd_struct;
#line 473 
struct gendisk;
#line 473  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct block_device {
   dev_t bd_dev ;
   int bd_openers ;
   struct inode *bd_inode ;
   struct super_block *bd_super ;
   struct mutex bd_mutex ;
   void *bd_claiming ;
   void *bd_holder ;
   int bd_holders ;
   bool bd_write_holder ;
   struct list_head bd_holder_disks ;
   struct block_device *bd_contains ;
   unsigned int bd_block_size ;
   u8 bd_partno ;
   struct hd_struct *bd_part ;
   unsigned int bd_part_count ;
   int bd_invalidated ;
   struct gendisk *bd_disk ;
   struct request_queue *bd_queue ;
   struct backing_dev_info *bd_bdi ;
   struct list_head bd_list ;
   unsigned long bd_private ;
   int bd_fsfreeze_count ;
   struct mutex bd_fsfreeze_mutex ;
} __attribute__((__designated_init__));
#line 587 
struct posix_acl;
#line 614 
struct fsnotify_mark_connector;
#line 628 
struct inode_operations;
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_441 {
   unsigned int i_nlink ;
   unsigned int __i_nlink ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_442 {
   struct hlist_head i_dentry ;
   struct callback_head i_rcu ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_443 {
   struct file_operations *i_fop ;
   void (*free_inode)(struct inode *) ;
};
#line 628 
struct file_lock_context;
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_444 {
   struct pipe_inode_info *i_pipe ;
   struct block_device *i_bdev ;
   struct cdev *i_cdev ;
   char *i_link ;
   unsigned int i_dir_seq ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct inode {
   umode_t i_mode ;
   unsigned short i_opflags ;
   kuid_t i_uid ;
   kgid_t i_gid ;
   unsigned int i_flags ;
   struct posix_acl *i_acl ;
   struct posix_acl *i_default_acl ;
   struct inode_operations *i_op ;
   struct super_block *i_sb ;
   struct address_space *i_mapping ;
   void *i_security ;
   unsigned long i_ino ;
   union __anonunion_441 __anonCompField_inode_68 ;
   dev_t i_rdev ;
   loff_t i_size ;
   struct timespec64 i_atime ;
   struct timespec64 i_mtime ;
   struct timespec64 i_ctime ;
   spinlock_t i_lock ;
   unsigned short i_bytes ;
   u8 i_blkbits ;
   u8 i_write_hint ;
   blkcnt_t i_blocks ;
   unsigned long i_state ;
   struct rw_semaphore i_rwsem ;
   unsigned long dirtied_when ;
   unsigned long dirtied_time_when ;
   struct hlist_node i_hash ;
   struct list_head i_io_list ;
   struct bdi_writeback *i_wb ;
   int i_wb_frn_winner ;
   u16 i_wb_frn_avg_time ;
   u16 i_wb_frn_history ;
   struct list_head i_lru ;
   struct list_head i_sb_list ;
   struct list_head i_wb_list ;
   union __anonunion_442 __anonCompField_inode_69 ;
   atomic64_t i_version ;
   atomic_t i_count ;
   atomic_t i_dio_count ;
   atomic_t i_writecount ;
   atomic_t i_readcount ;
   union __anonunion_443 __anonCompField_inode_70 ;
   struct file_lock_context *i_flctx ;
   struct address_space i_data ;
   struct list_head i_devices ;
   union __anonunion_444 __anonCompField_inode_71 ;
   __u32 i_generation ;
   __u32 i_fsnotify_mask ;
   struct fsnotify_mark_connector *i_fsnotify_marks ;
   struct fscrypt_info *i_crypt_info ;
   struct fsverity_info *i_verity_info ;
   void *i_private ;
} __attribute__((__designated_init__));
#line 904  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fown_struct {
   rwlock_t lock ;
   struct pid *pid ;
   enum pid_type pid_type ;
   kuid_t uid ;
   kuid_t euid ;
   int signum ;
};
#line 915  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_ra_state {
   unsigned long start ;
   unsigned int size ;
   unsigned int async_size ;
   unsigned int ra_pages ;
   unsigned int mmap_miss ;
   loff_t prev_pos ;
};
#line 935  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_f_u_445 {
   struct llist_node fu_llist ;
   struct callback_head fu_rcuhead ;
};
#line 935  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file {
   union __anonunion_f_u_445 f_u ;
   struct path f_path ;
   struct inode *f_inode ;
   struct file_operations *f_op ;
   spinlock_t f_lock ;
   enum rw_hint f_write_hint ;
   atomic_long_t f_count ;
   unsigned int f_flags ;
   fmode_t f_mode ;
   struct mutex f_pos_lock ;
   loff_t f_pos ;
   struct fown_struct f_owner ;
   struct cred *f_cred ;
   struct file_ra_state f_ra ;
   u64 f_version ;
   void *f_security ;
   void *private_data ;
   struct list_head f_ep_links ;
   struct list_head f_tfile_llink ;
   struct address_space *f_mapping ;
   errseq_t f_wb_err ;
} __attribute__((__designated_init__, __aligned__(4)));
#line 988  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
typedef void *fl_owner_t;
#line 1026 
struct file_lock;
#line 1029  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock_operations {
   void (*fl_copy_lock)(struct file_lock *, struct file_lock *) ;
   void (*fl_release_private)(struct file_lock *) ;
};
#line 1034  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct lock_manager_operations {
   fl_owner_t (*lm_get_owner)(fl_owner_t ) ;
   void (*lm_put_owner)(fl_owner_t ) ;
   void (*lm_notify)(struct file_lock *) ;
   int (*lm_grant)(struct file_lock *, int ) ;
   bool (*lm_break)(struct file_lock *) ;
   int (*lm_change)(struct file_lock *, int , struct list_head *) ;
   void (*lm_setup)(struct file_lock *, void **) ;
};
#line 1052 
struct net;
#line 1058 
struct nlm_lockowner;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nfs_fs_i.h"
struct nfs_lock_info {
   u32 state ;
   struct nlm_lockowner *owner ;
   struct list_head list ;
};
#line 15 
struct nfs4_lock_state;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nfs_fs_i.h"
struct nfs4_lock_info {
   struct nfs4_lock_state *owner ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fasync_struct;
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct __anonstruct_afs_447 {
   struct list_head link ;
   int state ;
   unsigned int debug_id ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_fl_u_446 {
   struct nfs_lock_info nfs_fl ;
   struct nfs4_lock_info nfs4_fl ;
   struct __anonstruct_afs_447 afs ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock {
   struct file_lock *fl_blocker ;
   struct list_head fl_list ;
   struct hlist_node fl_link ;
   struct list_head fl_blocked_requests ;
   struct list_head fl_blocked_member ;
   fl_owner_t fl_owner ;
   unsigned int fl_flags ;
   unsigned char fl_type ;
   unsigned int fl_pid ;
   int fl_link_cpu ;
   wait_queue_head_t fl_wait ;
   struct file *fl_file ;
   loff_t fl_start ;
   loff_t fl_end ;
   struct fasync_struct *fl_fasync ;
   unsigned long fl_break_time ;
   unsigned long fl_downgrade_time ;
   struct file_lock_operations *fl_ops ;
   struct lock_manager_operations *fl_lmops ;
   union __anonunion_fl_u_446 fl_u ;
} __attribute__((__designated_init__));
#line 1117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock_context {
   spinlock_t flc_lock ;
   struct list_head flc_flock ;
   struct list_head flc_posix ;
   struct list_head flc_lease ;
};
#line 1331  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fasync_struct {
   rwlock_t fa_lock ;
   int magic ;
   int fa_fd ;
   struct fasync_struct *fa_next ;
   struct file *fa_file ;
   struct callback_head fa_rcu ;
};
#line 1418  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct sb_writers {
   int frozen ;
   wait_queue_head_t wait_unfrozen ;
   struct percpu_rw_semaphore rw_sem[3U] ;
};
#line 1424 
struct super_operations;
#line 1424 
struct xattr_handler;
#line 1424 
struct mtd_info;
#line 1424  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct super_block {
   struct list_head s_list ;
   dev_t s_dev ;
   unsigned char s_blocksize_bits ;
   unsigned long s_blocksize ;
   loff_t s_maxbytes ;
   struct file_system_type *s_type ;
   struct super_operations *s_op ;
   struct dquot_operations *dq_op ;
   struct quotactl_ops *s_qcop ;
   struct export_operations *s_export_op ;
   unsigned long s_flags ;
   unsigned long s_iflags ;
   unsigned long s_magic ;
   struct dentry *s_root ;
   struct rw_semaphore s_umount ;
   int s_count ;
   atomic_t s_active ;
   void *s_security ;
   struct xattr_handler **s_xattr ;
   struct fscrypt_operations *s_cop ;
   struct key *s_master_keys ;
   struct fsverity_operations *s_vop ;
   struct hlist_bl_head s_roots ;
   struct list_head s_mounts ;
   struct block_device *s_bdev ;
   struct backing_dev_info *s_bdi ;
   struct mtd_info *s_mtd ;
   struct hlist_node s_instances ;
   unsigned int s_quota_types ;
   struct quota_info s_dquot ;
   struct sb_writers s_writers ;
   void *s_fs_info ;
   u32 s_time_gran ;
   time64_t s_time_min ;
   time64_t s_time_max ;
   __u32 s_fsnotify_mask ;
   struct fsnotify_mark_connector *s_fsnotify_marks ;
   char s_id[32U] ;
   uuid_t s_uuid ;
   unsigned int s_max_links ;
   fmode_t s_mode ;
   struct mutex s_vfs_rename_mutex ;
   char *s_subtype ;
   struct dentry_operations *s_d_op ;
   int cleancache_poolid ;
   struct shrinker s_shrink ;
   atomic_long_t s_remove_count ;
   atomic_long_t s_fsnotify_inode_refs ;
   int s_readonly_remount ;
   struct workqueue_struct *s_dio_done_wq ;
   struct hlist_head s_pins ;
   struct user_namespace *s_user_ns ;
   struct list_lru s_dentry_lru ;
   struct list_lru s_inode_lru ;
   struct callback_head rcu ;
   struct work_struct destroy_work ;
   struct mutex s_sync_lock ;
   int s_stack_depth ;
   spinlock_t s_inode_list_lock ;
   struct list_head s_inodes ;
   spinlock_t s_inode_wblist_lock ;
   struct list_head s_inodes_wb ;
} __attribute__((__designated_init__));
#line 1746  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fiemap_extent_info {
   unsigned int fi_flags ;
   unsigned int fi_extents_mapped ;
   unsigned int fi_extents_max ;
   struct fiemap_extent *fi_extents_start ;
};
#line 1756 
struct dir_context;
#line 1767  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct dir_context {
   int (*actor)(struct dir_context *, char *, int , loff_t , u64 , unsigned int ) ;
   loff_t pos ;
};
#line 1771 
struct block_device_operations;
#line 1821  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_operations {
   struct module *owner ;
   loff_t (*llseek)(struct file *, loff_t , int ) ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*read_iter)(struct kiocb *, struct iov_iter *) ;
   ssize_t (*write_iter)(struct kiocb *, struct iov_iter *) ;
   int (*iopoll)(struct kiocb *, bool ) ;
   int (*iterate)(struct file *, struct dir_context *) ;
   int (*iterate_shared)(struct file *, struct dir_context *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*unlocked_ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl)(struct file *, unsigned int , unsigned long ) ;
   int (*mmap)(struct file *, struct vm_area_struct *) ;
   unsigned long mmap_supported_flags ;
   int (*open)(struct inode *, struct file *) ;
   int (*flush)(struct file *, fl_owner_t ) ;
   int (*release)(struct inode *, struct file *) ;
   int (*fsync)(struct file *, loff_t , loff_t , int ) ;
   int (*fasync)(int , struct file *, int ) ;
   int (*lock)(struct file *, int , struct file_lock *) ;
   ssize_t (*sendpage)(struct file *, struct page *, int , size_t , loff_t *, int ) ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   int (*check_flags)(int ) ;
   int (*flock)(struct file *, int , struct file_lock *) ;
   ssize_t (*splice_write)(struct pipe_inode_info *, struct file *, loff_t *, size_t , unsigned int ) ;
   ssize_t (*splice_read)(struct file *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ) ;
   int (*setlease)(struct file *, long , struct file_lock **, void **) ;
   long (*fallocate)(struct file *, int , loff_t , loff_t ) ;
   void (*show_fdinfo)(struct seq_file *, struct file *) ;
   ssize_t (*copy_file_range)(struct file *, loff_t , struct file *, loff_t , size_t , unsigned int ) ;
   loff_t (*remap_file_range)(struct file *, loff_t , struct file *, loff_t , loff_t , unsigned int ) ;
   int (*fadvise)(struct file *, loff_t , loff_t , int ) ;
} __attribute__((__designated_init__));
#line 1863  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct inode_operations {
   struct dentry *(*lookup)(struct inode *, struct dentry *, unsigned int ) ;
   char *(*get_link)(struct dentry *, struct inode *, struct delayed_call *) ;
   int (*permission)(struct inode *, int ) ;
   struct posix_acl *(*get_acl)(struct inode *, int ) ;
   int (*readlink)(struct dentry *, char *, int ) ;
   int (*create)(struct inode *, struct dentry *, umode_t , bool ) ;
   int (*link)(struct dentry *, struct inode *, struct dentry *) ;
   int (*unlink)(struct inode *, struct dentry *) ;
   int (*symlink)(struct inode *, struct dentry *, char *) ;
   int (*mkdir)(struct inode *, struct dentry *, umode_t ) ;
   int (*rmdir)(struct inode *, struct dentry *) ;
   int (*mknod)(struct inode *, struct dentry *, umode_t , dev_t ) ;
   int (*rename)(struct inode *, struct dentry *, struct inode *, struct dentry *, unsigned int ) ;
   int (*setattr)(struct dentry *, struct iattr *) ;
   int (*getattr)(struct path *, struct kstat *, u32 , unsigned int ) ;
   ssize_t (*listxattr)(struct dentry *, char *, size_t ) ;
   int (*fiemap)(struct inode *, struct fiemap_extent_info *, u64 , u64 ) ;
   int (*update_time)(struct inode *, struct timespec64 *, int ) ;
   int (*atomic_open)(struct inode *, struct dentry *, struct file *, unsigned int , umode_t ) ;
   int (*tmpfile)(struct inode *, struct dentry *, umode_t ) ;
   int (*set_acl)(struct inode *, struct posix_acl *, int ) ;
} __attribute__((__aligned__(64)));
#line 1942  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct super_operations {
   struct inode *(*alloc_inode)(struct super_block *) ;
   void (*destroy_inode)(struct inode *) ;
   void (*free_inode)(struct inode *) ;
   void (*dirty_inode)(struct inode *, int ) ;
   int (*write_inode)(struct inode *, struct writeback_control *) ;
   int (*drop_inode)(struct inode *) ;
   void (*evict_inode)(struct inode *) ;
   void (*put_super)(struct super_block *) ;
   int (*sync_fs)(struct super_block *, int ) ;
   int (*freeze_super)(struct super_block *) ;
   int (*freeze_fs)(struct super_block *) ;
   int (*thaw_super)(struct super_block *) ;
   int (*unfreeze_fs)(struct super_block *) ;
   int (*statfs)(struct dentry *, struct kstatfs *) ;
   int (*remount_fs)(struct super_block *, int *, char *) ;
   void (*umount_begin)(struct super_block *) ;
   int (*show_options)(struct seq_file *, struct dentry *) ;
   int (*show_devname)(struct seq_file *, struct dentry *) ;
   int (*show_path)(struct seq_file *, struct dentry *) ;
   int (*show_stats)(struct seq_file *, struct dentry *) ;
   ssize_t (*quota_read)(struct super_block *, int , char *, size_t , loff_t ) ;
   ssize_t (*quota_write)(struct super_block *, int , char *, size_t , loff_t ) ;
   struct dquot **(*get_dquots)(struct inode *) ;
   int (*bdev_try_to_free_page)(struct super_block *, struct page *, gfp_t ) ;
   long (*nr_cached_objects)(struct super_block *, struct shrink_control *) ;
   long (*free_cached_objects)(struct super_block *, struct shrink_control *) ;
};
#line 2217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_system_type {
   char *name ;
   int fs_flags ;
   int (*init_fs_context)(struct fs_context *) ;
   struct fs_parameter_description *parameters ;
   struct dentry *(*mount)(struct file_system_type *, int , char *, void *) ;
   void (*kill_sb)(struct super_block *) ;
   struct module *owner ;
   struct file_system_type *next ;
   struct hlist_head fs_supers ;
   struct lock_class_key s_lock_key ;
   struct lock_class_key s_umount_key ;
   struct lock_class_key s_vfs_rename_key ;
   struct lock_class_key s_writers_key[3U] ;
   struct lock_class_key i_lock_key ;
   struct lock_class_key i_mutex_key ;
   struct lock_class_key i_mutex_dir_key ;
};
#line 3599 
struct sock;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/compat.h"
typedef s32 compat_long_t;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/compat.h"
typedef u32 compat_uptr_t;
#line 367  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compat.h"
struct compat_robust_list {
   compat_uptr_t next ;
};
#line 371  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compat.h"
struct compat_robust_list_head {
   struct compat_robust_list list ;
   compat_long_t futex_offset ;
   compat_uptr_t list_op_pending ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ioport.h"
struct resource {
   resource_size_t start ;
   resource_size_t end ;
   char *name ;
   unsigned long flags ;
   unsigned long desc ;
   struct resource *parent ;
   struct resource *sibling ;
   struct resource *child ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct vmem_altmap {
   unsigned long base_pfn ;
   unsigned long end_pfn ;
   unsigned long reserve ;
   unsigned long free ;
   unsigned long align ;
   unsigned long alloc ;
};
#line 26 
enum memory_type {
    MEMORY_DEVICE_PRIVATE = 1,
    MEMORY_DEVICE_FS_DAX = 2,
    MEMORY_DEVICE_DEVDAX = 3,
    MEMORY_DEVICE_PCI_P2PDMA = 4
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct dev_pagemap_ops {
   void (*page_free)(struct page *) ;
   void (*kill)(struct dev_pagemap *) ;
   void (*cleanup)(struct dev_pagemap *) ;
   vm_fault_t (*migrate_to_ram)(struct vm_fault *) ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct dev_pagemap {
   struct vmem_altmap altmap ;
   struct resource res ;
   struct percpu_ref *ref ;
   struct percpu_ref internal_ref ;
   struct completion done ;
   enum memory_type type ;
   unsigned int flags ;
   struct dev_pagemap_ops *ops ;
};
#line 417  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
struct vm_fault {
   struct vm_area_struct *vma ;
   unsigned int flags ;
   gfp_t gfp_mask ;
   unsigned long pgoff ;
   unsigned long address ;
   pmd_t *pmd ;
   pud_t *pud ;
   pte_t orig_pte ;
   struct page *cow_page ;
   struct mem_cgroup *memcg ;
   struct page *page ;
   pte_t *pte ;
   spinlock_t *ptl ;
   pgtable_t prealloc_pte ;
};
#line 448 
enum page_entry_size {
    PE_SIZE_PTE = 0,
    PE_SIZE_PMD = 1,
    PE_SIZE_PUD = 2
};
#line 467  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
struct vm_operations_struct {
   void (*open)(struct vm_area_struct *) ;
   void (*close)(struct vm_area_struct *) ;
   int (*split)(struct vm_area_struct *, unsigned long ) ;
   int (*mremap)(struct vm_area_struct *) ;
   vm_fault_t (*fault)(struct vm_fault *) ;
   vm_fault_t (*huge_fault)(struct vm_fault *, enum page_entry_size ) ;
   void (*map_pages)(struct vm_fault *, unsigned long , unsigned long ) ;
   unsigned long (*pagesize)(struct vm_area_struct *) ;
   vm_fault_t (*page_mkwrite)(struct vm_fault *) ;
   vm_fault_t (*pfn_mkwrite)(struct vm_fault *) ;
   int (*access)(struct vm_area_struct *, unsigned long , void *, int , int ) ;
   char *(*name)(struct vm_area_struct *) ;
   int (*set_policy)(struct vm_area_struct *, struct mempolicy *) ;
   struct mempolicy *(*get_policy)(struct vm_area_struct *, unsigned long ) ;
   struct page *(*find_special_page)(struct vm_area_struct *, unsigned long ) ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bvec.h"
struct bio_vec {
   struct page *bv_page ;
   unsigned int bv_len ;
   unsigned int bv_offset ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bvec.h"
struct bvec_iter {
   sector_t bi_sector ;
   unsigned int bi_size ;
   unsigned int bi_idx ;
   unsigned int bi_bvec_done ;
};
#line 201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/random.h"
enum ldv_9120 {
    SS_FREE = 0,
    SS_UNCONNECTED = 1,
    SS_CONNECTING = 2,
    SS_CONNECTED = 3,
    SS_DISCONNECTING = 4
};
#line 209  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/random.h"
typedef enum ldv_9120 socket_state;
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct socket_wq {
   wait_queue_head_t wait ;
   struct fasync_struct *fasync_list ;
   unsigned long flags ;
   struct callback_head rcu ;
} __attribute__((__aligned__(64)));
#line 112 
struct proto_ops;
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct socket {
   socket_state state ;
   short type ;
   unsigned long flags ;
   struct file *file ;
   struct sock *sk ;
   struct proto_ops *ops ;
   struct socket_wq wq ;
};
#line 125 
struct sk_buff;
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct proto_ops {
   int family ;
   struct module *owner ;
   int (*release)(struct socket *) ;
   int (*bind)(struct socket *, struct sockaddr *, int ) ;
   int (*connect)(struct socket *, struct sockaddr *, int , int ) ;
   int (*socketpair)(struct socket *, struct socket *) ;
   int (*accept)(struct socket *, struct socket *, int , bool ) ;
   int (*getname)(struct socket *, struct sockaddr *, int ) ;
   __poll_t (*poll)(struct file *, struct socket *, struct poll_table_struct *) ;
   int (*ioctl)(struct socket *, unsigned int , unsigned long ) ;
   int (*compat_ioctl)(struct socket *, unsigned int , unsigned long ) ;
   int (*gettstamp)(struct socket *, void *, bool , bool ) ;
   int (*listen)(struct socket *, int ) ;
   int (*shutdown)(struct socket *, int ) ;
   int (*setsockopt)(struct socket *, int , int , char *, unsigned int ) ;
   int (*getsockopt)(struct socket *, int , int , char *, int *) ;
   int (*compat_setsockopt)(struct socket *, int , int , char *, unsigned int ) ;
   int (*compat_getsockopt)(struct socket *, int , int , char *, int *) ;
   int (*sendmsg)(struct socket *, struct msghdr *, size_t ) ;
   int (*recvmsg)(struct socket *, struct msghdr *, size_t , int ) ;
   int (*mmap)(struct file *, struct socket *, struct vm_area_struct *) ;
   ssize_t (*sendpage)(struct socket *, struct page *, int , size_t , int ) ;
   ssize_t (*splice_read)(struct socket *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ) ;
   int (*set_peek_off)(struct sock *, int ) ;
   int (*peek_len)(struct socket *) ;
   int (*read_sock)(struct sock *, read_descriptor_t *, int (*)(read_descriptor_t *, struct sk_buff *, unsigned int , size_t )) ;
   int (*sendpage_locked)(struct sock *, struct page *, int , size_t , int ) ;
   int (*sendmsg_locked)(struct sock *, struct msghdr *, size_t ) ;
   int (*set_rcvlowat)(struct sock *, int ) ;
};
#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/checksum_64.h"
struct in6_addr;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/idr.h"
struct idr {
   struct xarray idr_rt ;
   unsigned int idr_base ;
   unsigned int idr_next ;
};
#line 323 
struct kernfs_open_node;
#line 324 
struct kernfs_iattrs;
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_root;
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_dir {
   unsigned long subdirs ;
   struct rb_root children ;
   struct kernfs_root *root ;
};
#line 96 
struct kernfs_node;
#line 96  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_symlink {
   struct kernfs_node *target_kn ;
};
#line 100 
struct kernfs_ops;
#line 100  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_attr {
   struct kernfs_ops *ops ;
   struct kernfs_open_node *open ;
   loff_t size ;
   struct kernfs_node *notify_next ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
union __anonunion_495 {
   struct kernfs_elem_dir dir ;
   struct kernfs_elem_symlink symlink ;
   struct kernfs_elem_attr attr ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_node {
   atomic_t count ;
   atomic_t active ;
   struct lockdep_map dep_map ;
   struct kernfs_node *parent ;
   char *name ;
   struct rb_node rb ;
   void *ns ;
   unsigned int hash ;
   union __anonunion_495 __anonCompField_kernfs_node_73 ;
   void *priv ;
   u64 id ;
   unsigned short flags ;
   umode_t mode ;
   struct kernfs_iattrs *iattr ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_syscall_ops {
   int (*show_options)(struct seq_file *, struct kernfs_root *) ;
   int (*mkdir)(struct kernfs_node *, char *, umode_t ) ;
   int (*rmdir)(struct kernfs_node *) ;
   int (*rename)(struct kernfs_node *, struct kernfs_node *, char *) ;
   int (*show_path)(struct seq_file *, struct kernfs_node *, struct kernfs_root *) ;
};
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_root {
   struct kernfs_node *kn ;
   unsigned int flags ;
   struct idr ino_idr ;
   u32 last_id_lowbits ;
   u32 id_highbits ;
   struct kernfs_syscall_ops *syscall_ops ;
   struct list_head supers ;
   wait_queue_head_t deactivate_waitq ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_open_file {
   struct kernfs_node *kn ;
   struct file *file ;
   struct seq_file *seq_file ;
   void *priv ;
   struct mutex mutex ;
   struct mutex prealloc_mutex ;
   int event ;
   struct list_head list ;
   char *prealloc_buf ;
   size_t atomic_write_len ;
   bool mmapped : 1 ;
   bool released : 1 ;
   struct vm_operations_struct *vm_ops ;
};
#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_ops {
   int (*open)(struct kernfs_open_file *) ;
   void (*release)(struct kernfs_open_file *) ;
   int (*seq_show)(struct seq_file *, void *) ;
   void *(*seq_start)(struct seq_file *, loff_t *) ;
   void *(*seq_next)(struct seq_file *, void *, loff_t *) ;
   void (*seq_stop)(struct seq_file *, void *) ;
   ssize_t (*read)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   size_t atomic_write_len ;
   bool prealloc ;
   ssize_t (*write)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   __poll_t (*poll)(struct kernfs_open_file *, struct poll_table_struct *) ;
   int (*mmap)(struct kernfs_open_file *, struct vm_area_struct *) ;
   struct lock_class_key lockdep_key ;
};
#line 595 
enum kobj_ns_type {
    KOBJ_NS_TYPE_NONE = 0,
    KOBJ_NS_TYPE_NET = 1,
    KOBJ_NS_TYPES = 2
};
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject_ns.h"
struct kobj_ns_type_operations {
   enum kobj_ns_type type ;
   bool (*current_may_mount)(void) ;
   void *(*grab_current_ns)(void) ;
   void *(*netlink_ns)(struct sock *) ;
   void *(*initial_ns)(void) ;
   void (*drop_ns)(void *) ;
};
#line 58 
struct bin_attribute;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct attribute {
   char *name ;
   umode_t mode ;
   bool ignore_lockdep : 1 ;
   struct lock_class_key *key ;
   struct lock_class_key skey ;
};
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct attribute_group {
   char *name ;
   umode_t (*is_visible)(struct kobject *, struct attribute *, int ) ;
   umode_t (*is_bin_visible)(struct kobject *, struct bin_attribute *, int ) ;
   struct attribute **attrs ;
   struct bin_attribute **bin_attrs ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct bin_attribute {
   struct attribute attr ;
   size_t size ;
   void *private ;
   ssize_t (*read)(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t , size_t ) ;
   ssize_t (*write)(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t , size_t ) ;
   int (*mmap)(struct file *, struct kobject *, struct bin_attribute *, struct vm_area_struct *) ;
};
#line 223  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct sysfs_ops {
   ssize_t (*show)(struct kobject *, struct attribute *, char *) ;
   ssize_t (*store)(struct kobject *, struct attribute *, char *, size_t ) ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kref.h"
struct kref {
   refcount_t refcount ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset;
#line 65 
struct kobj_type;
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobject {
   char *name ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct kernfs_node *sd ;
   struct kref kref ;
   struct delayed_work release ;
   unsigned int state_initialized : 1 ;
   unsigned int state_in_sysfs : 1 ;
   unsigned int state_add_uevent_sent : 1 ;
   unsigned int state_remove_uevent_sent : 1 ;
   unsigned int uevent_suppress : 1 ;
};
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobj_type {
   void (*release)(struct kobject *) ;
   struct sysfs_ops *sysfs_ops ;
   struct attribute **default_attrs ;
   struct attribute_group **default_groups ;
   struct kobj_ns_type_operations *(*child_ns_type)(struct kobject *) ;
   void *(*namespace)(struct kobject *) ;
   void (*get_ownership)(struct kobject *, kuid_t *, kgid_t *) ;
};
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobj_uevent_env {
   char *argv[3U] ;
   char *envp[32U] ;
   int envp_idx ;
   char buf[2048U] ;
   int buflen ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset_uevent_ops {
   int (*filter)(struct kset *, struct kobject *) ;
   char *(*name)(struct kset *, struct kobject *) ;
   int (*uevent)(struct kset *, struct kobject *, struct kobj_uevent_env *) ;
};
#line 193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops *uevent_ops ;
} __attribute__((__designated_init__));
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct pm_message {
   int event ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
typedef struct pm_message pm_message_t;
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_ops {
   int (*prepare)(struct device *) ;
   void (*complete)(struct device *) ;
   int (*suspend)(struct device *) ;
   int (*resume)(struct device *) ;
   int (*freeze)(struct device *) ;
   int (*thaw)(struct device *) ;
   int (*poweroff)(struct device *) ;
   int (*restore)(struct device *) ;
   int (*suspend_late)(struct device *) ;
   int (*resume_early)(struct device *) ;
   int (*freeze_late)(struct device *) ;
   int (*thaw_early)(struct device *) ;
   int (*poweroff_late)(struct device *) ;
   int (*restore_early)(struct device *) ;
   int (*suspend_noirq)(struct device *) ;
   int (*resume_noirq)(struct device *) ;
   int (*freeze_noirq)(struct device *) ;
   int (*thaw_noirq)(struct device *) ;
   int (*poweroff_noirq)(struct device *) ;
   int (*restore_noirq)(struct device *) ;
   int (*runtime_suspend)(struct device *) ;
   int (*runtime_resume)(struct device *) ;
   int (*runtime_idle)(struct device *) ;
};
#line 303 
enum rpm_status {
    RPM_ACTIVE = 0,
    RPM_RESUMING = 1,
    RPM_SUSPENDED = 2,
    RPM_SUSPENDING = 3
};
#line 310 
enum rpm_request {
    RPM_REQ_NONE = 0,
    RPM_REQ_IDLE = 1,
    RPM_REQ_SUSPEND = 2,
    RPM_REQ_AUTOSUSPEND = 3,
    RPM_REQ_RESUME = 4
};
#line 318 
struct wakeup_source;
#line 319 
struct wake_irq;
#line 320 
struct pm_domain_data;
#line 530  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct pm_subsys_data {
   spinlock_t lock ;
   unsigned int refcount ;
   struct list_head clock_list ;
   struct pm_domain_data *domain_data ;
};
#line 573 
struct dev_pm_qos;
#line 573  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned int can_wakeup : 1 ;
   unsigned int async_suspend : 1 ;
   bool in_dpm_list : 1 ;
   bool is_prepared : 1 ;
   bool is_suspended : 1 ;
   bool is_noirq_suspended : 1 ;
   bool is_late_suspended : 1 ;
   bool no_pm : 1 ;
   bool early_init : 1 ;
   bool direct_complete : 1 ;
   u32 driver_flags ;
   spinlock_t lock ;
   struct list_head entry ;
   struct completion completion ;
   struct wakeup_source *wakeup ;
   bool wakeup_path : 1 ;
   bool syscore : 1 ;
   bool no_pm_callbacks : 1 ;
   unsigned int must_resume : 1 ;
   unsigned int may_skip_resume : 1 ;
   struct hrtimer suspend_timer ;
   unsigned long timer_expires ;
   struct work_struct work ;
   wait_queue_head_t wait_queue ;
   struct wake_irq *wakeirq ;
   atomic_t usage_count ;
   atomic_t child_count ;
   unsigned int disable_depth : 3 ;
   unsigned int idle_notification : 1 ;
   unsigned int request_pending : 1 ;
   unsigned int deferred_resume : 1 ;
   unsigned int runtime_auto : 1 ;
   bool ignore_children : 1 ;
   unsigned int no_callbacks : 1 ;
   unsigned int irq_safe : 1 ;
   unsigned int use_autosuspend : 1 ;
   unsigned int timer_autosuspends : 1 ;
   unsigned int memalloc_noio : 1 ;
   unsigned int links_count ;
   enum rpm_request request ;
   enum rpm_status runtime_status ;
   int runtime_error ;
   int autosuspend_delay ;
   u64 last_busy ;
   u64 active_time ;
   u64 suspended_time ;
   u64 accounting_timestamp ;
   struct pm_subsys_data *subsys_data ;
   void (*set_latency_tolerance)(struct device *, s32 ) ;
   struct dev_pm_qos *qos ;
};
#line 650  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_domain {
   struct dev_pm_ops ops ;
   int (*start)(struct device *) ;
   void (*detach)(struct device *, bool ) ;
   int (*activate)(struct device *) ;
   void (*sync)(struct device *) ;
   void (*dismiss)(struct device *) ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ratelimit.h"
struct ratelimit_state {
   raw_spinlock_t lock ;
   int interval ;
   int burst ;
   int printed ;
   int missed ;
   unsigned long begin ;
   unsigned long flags ;
};
#line 5  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/device.h"
struct dev_archdata {
   void *iommu ;
};
#line 12 
struct dma_map_ops;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/device.h"
struct pdev_archdata {
   };
#line 23 
struct device_driver;
#line 24 
struct driver_private;
#line 25 
struct class;
#line 26 
struct subsys_private;
#line 27 
struct bus_type;
#line 28 
struct iommu_ops;
#line 29 
struct iommu_group;
#line 30 
struct iommu_fwspec;
#line 31 
struct dev_pin_info;
#line 32 
struct iommu_param;
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct bus_type {
   char *name ;
   char *dev_name ;
   struct device *dev_root ;
   struct attribute_group **bus_groups ;
   struct attribute_group **dev_groups ;
   struct attribute_group **drv_groups ;
   int (*match)(struct device *, struct device_driver *) ;
   int (*uevent)(struct device *, struct kobj_uevent_env *) ;
   int (*probe)(struct device *) ;
   void (*sync_state)(struct device *) ;
   int (*remove)(struct device *) ;
   void (*shutdown)(struct device *) ;
   int (*online)(struct device *) ;
   int (*offline)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   int (*num_vf)(struct device *) ;
   int (*dma_configure)(struct device *) ;
   struct dev_pm_ops *pm ;
   struct iommu_ops *iommu_ops ;
   struct subsys_private *p ;
   struct lock_class_key lock_key ;
   bool need_parent_lock ;
};
#line 164 
struct device_type;
#line 309 
enum probe_type {
    PROBE_DEFAULT_STRATEGY = 0,
    PROBE_PREFER_ASYNCHRONOUS = 1,
    PROBE_FORCE_SYNCHRONOUS = 2
};
#line 383 
struct of_device_id;
#line 383 
struct acpi_device_id;
#line 383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_driver {
   char *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char *mod_name ;
   bool suppress_bind_attrs ;
   enum probe_type probe_type ;
   struct of_device_id *of_match_table ;
   struct acpi_device_id *acpi_match_table ;
   int (*probe)(struct device *) ;
   void (*sync_state)(struct device *) ;
   int (*remove)(struct device *) ;
   void (*shutdown)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   struct attribute_group **groups ;
   struct attribute_group **dev_groups ;
   struct dev_pm_ops *pm ;
   void (*coredump)(struct device *) ;
   struct driver_private *p ;
};
#line 589  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct class {
   char *name ;
   struct module *owner ;
   struct attribute_group **class_groups ;
   struct attribute_group **dev_groups ;
   struct kobject *dev_kobj ;
   int (*dev_uevent)(struct device *, struct kobj_uevent_env *) ;
   char *(*devnode)(struct device *, umode_t *) ;
   void (*class_release)(struct class *) ;
   void (*dev_release)(struct device *) ;
   int (*shutdown_pre)(struct device *) ;
   struct kobj_ns_type_operations *ns_type ;
   void *(*namespace)(struct device *) ;
   void (*get_ownership)(struct device *, kuid_t *, kgid_t *) ;
   struct dev_pm_ops *pm ;
   struct subsys_private *p ;
};
#line 809  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_type {
   char *name ;
   struct attribute_group **groups ;
   int (*uevent)(struct device *, struct kobj_uevent_env *) ;
   char *(*devnode)(struct device *, umode_t *, kuid_t *, kgid_t *) ;
   void (*release)(struct device *) ;
   struct dev_pm_ops *pm ;
};
#line 1008  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};
#line 1139 
enum dl_dev_state {
    DL_DEV_NO_DRIVER = 0,
    DL_DEV_PROBING = 1,
    DL_DEV_DRIVER_BOUND = 2,
    DL_DEV_UNBINDING = 3
};
#line 1164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct dev_links_info {
   struct list_head suppliers ;
   struct list_head consumers ;
   struct list_head needs_suppliers ;
   struct list_head defer_sync ;
   bool need_for_probe ;
   enum dl_dev_state status ;
};
#line 1259 
struct dma_coherent_mem;
#line 1259 
struct cma;
#line 1259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device {
   struct kobject kobj ;
   struct device *parent ;
   struct device_private *p ;
   char *init_name ;
   struct device_type *type ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *platform_data ;
   void *driver_data ;
   struct mutex lockdep_mutex ;
   struct mutex mutex ;
   struct dev_links_info links ;
   struct dev_pm_info power ;
   struct dev_pm_domain *pm_domain ;
   struct irq_domain *msi_domain ;
   struct dev_pin_info *pins ;
   struct list_head msi_list ;
   struct dma_map_ops *dma_ops ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   u64 bus_dma_limit ;
   unsigned long dma_pfn_offset ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct cma *cma_area ;
   struct dev_archdata archdata ;
   struct device_node *of_node ;
   struct fwnode_handle *fwnode ;
   int numa_node ;
   dev_t devt ;
   u32 id ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct class *class ;
   struct attribute_group **groups ;
   void (*release)(struct device *) ;
   struct iommu_group *iommu_group ;
   struct iommu_fwspec *iommu_fwspec ;
   struct iommu_param *iommu_param ;
   bool offline_disabled : 1 ;
   bool offline : 1 ;
   bool of_node_reused : 1 ;
   bool state_synced : 1 ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_wakeup.h"
struct wakeup_source {
   char *name ;
   int id ;
   struct list_head entry ;
   spinlock_t lock ;
   struct wake_irq *wakeirq ;
   struct timer_list timer ;
   unsigned long timer_expires ;
   ktime_t total_time ;
   ktime_t max_time ;
   ktime_t last_time ;
   ktime_t start_prevent_time ;
   ktime_t prevent_sleep_time ;
   unsigned long event_count ;
   unsigned long active_count ;
   unsigned long relax_count ;
   unsigned long expire_count ;
   unsigned long wakeup_count ;
   struct device *dev ;
   bool active : 1 ;
   bool autosleep_enabled : 1 ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-debug.h"
enum dma_data_direction {
    DMA_BIDIRECTIONAL = 0,
    DMA_TO_DEVICE = 1,
    DMA_FROM_DEVICE = 2,
    DMA_NONE = 3
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/scatterlist.h"
struct scatterlist {
   unsigned long page_link ;
   unsigned int offset ;
   unsigned int length ;
   dma_addr_t dma_address ;
   unsigned int dma_length ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/scatterlist.h"
struct sg_table {
   struct scatterlist *sgl ;
   unsigned int nents ;
   unsigned int orig_nents ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
struct dma_map_ops {
   void *(*alloc)(struct device *, size_t , dma_addr_t *, gfp_t , unsigned long ) ;
   void (*free)(struct device *, size_t , void *, dma_addr_t , unsigned long ) ;
   int (*mmap)(struct device *, struct vm_area_struct *, void *, dma_addr_t , size_t , unsigned long ) ;
   int (*get_sgtable)(struct device *, struct sg_table *, void *, dma_addr_t , size_t , unsigned long ) ;
   dma_addr_t (*map_page)(struct device *, struct page *, unsigned long , size_t , enum dma_data_direction , unsigned long ) ;
   void (*unmap_page)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   int (*map_sg)(struct device *, struct scatterlist *, int , enum dma_data_direction , unsigned long ) ;
   void (*unmap_sg)(struct device *, struct scatterlist *, int , enum dma_data_direction , unsigned long ) ;
   dma_addr_t (*map_resource)(struct device *, phys_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   void (*unmap_resource)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   void (*sync_single_for_cpu)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) ;
   void (*sync_single_for_device)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) ;
   void (*sync_sg_for_cpu)(struct device *, struct scatterlist *, int , enum dma_data_direction ) ;
   void (*sync_sg_for_device)(struct device *, struct scatterlist *, int , enum dma_data_direction ) ;
   void (*cache_sync)(struct device *, void *, size_t , enum dma_data_direction ) ;
   int (*dma_supported)(struct device *, u64 ) ;
   u64 (*get_required_mask)(struct device *) ;
   size_t (*max_mapping_size)(struct device *) ;
   unsigned long (*get_merge_boundary)(struct device *) ;
};
#line 803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
typedef u64 netdev_features_t;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/in6.h"
union __anonunion_in6_u_498 {
   __u8 u6_addr8[16U] ;
   __be16 u6_addr16[8U] ;
   __be32 u6_addr32[4U] ;
};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/in6.h"
struct in6_addr {
   union __anonunion_in6_u_498 in6_u ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/in6.h"
struct __anonstruct_siphash_key_t_499 {
   u64 key[2U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/in6.h"
typedef struct __anonstruct_siphash_key_t_499 siphash_key_t;
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_ether.h"
struct ethhdr {
   unsigned char h_dest[6U] ;
   unsigned char h_source[6U] ;
   __be16 h_proto ;
} __attribute__((__packed__));
#line 274  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
struct flow_dissector {
   unsigned int used_keys ;
   unsigned short offset[27U] ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buf_operations;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buffer {
   struct page *page ;
   unsigned int offset ;
   unsigned int len ;
   struct pipe_buf_operations *ops ;
   unsigned int flags ;
   unsigned long private ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_inode_info {
   struct mutex mutex ;
   wait_queue_head_t wait ;
   unsigned int head ;
   unsigned int tail ;
   unsigned int max_usage ;
   unsigned int ring_size ;
   unsigned int readers ;
   unsigned int writers ;
   unsigned int files ;
   unsigned int r_counter ;
   unsigned int w_counter ;
   struct page *tmp_page ;
   struct fasync_struct *fasync_readers ;
   struct fasync_struct *fasync_writers ;
   struct pipe_buffer *bufs ;
   struct user_struct *user ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buf_operations {
   int (*confirm)(struct pipe_inode_info *, struct pipe_buffer *) ;
   void (*release)(struct pipe_inode_info *, struct pipe_buffer *) ;
   int (*steal)(struct pipe_inode_info *, struct pipe_buffer *) ;
   bool (*get)(struct pipe_inode_info *, struct pipe_buffer *) ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi_tunnel {
   __be64 tun_id ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi_common {
   int flowic_oif ;
   int flowic_iif ;
   __u32 flowic_mark ;
   __u8 flowic_tos ;
   __u8 flowic_scope ;
   __u8 flowic_proto ;
   __u8 flowic_flags ;
   __u32 flowic_secid ;
   kuid_t flowic_uid ;
   struct flowi_tunnel flowic_tun_key ;
   __u32 flowic_multipath_hash ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_ports_510 {
   __be16 dport ;
   __be16 sport ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_icmpt_511 {
   __u8 type ;
   __u8 code ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_dnports_512 {
   __le16 dport ;
   __le16 sport ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_mht_513 {
   __u8 type ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
union flowi_uli {
   struct __anonstruct_ports_510 ports ;
   struct __anonstruct_icmpt_511 icmpt ;
   struct __anonstruct_dnports_512 dnports ;
   __be32 spi ;
   __be32 gre_key ;
   struct __anonstruct_mht_513 mht ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi4 {
   struct flowi_common __fl_common ;
   __be32 saddr ;
   __be32 daddr ;
   union flowi_uli uli ;
} __attribute__((__aligned__(8)));
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi6 {
   struct flowi_common __fl_common ;
   struct in6_addr daddr ;
   struct in6_addr saddr ;
   __be32 flowlabel ;
   union flowi_uli uli ;
   __u32 mp_hash ;
} __attribute__((__aligned__(8)));
#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowidn {
   struct flowi_common __fl_common ;
   __le16 daddr ;
   __le16 saddr ;
   union flowi_uli uli ;
} __attribute__((__aligned__(8)));
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
union __anonunion_u_514 {
   struct flowi_common __fl_common ;
   struct flowi4 ip4 ;
   struct flowi6 ip6 ;
   struct flowidn dn ;
};
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi {
   union __anonunion_u_514 u ;
} __attribute__((__aligned__(8)));
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netfilter/nf_conntrack_common.h"
struct ip_conntrack_stat {
   unsigned int found ;
   unsigned int invalid ;
   unsigned int ignore ;
   unsigned int insert ;
   unsigned int insert_failed ;
   unsigned int drop ;
   unsigned int early_drop ;
   unsigned int error ;
   unsigned int expect_new ;
   unsigned int expect_create ;
   unsigned int expect_delete ;
   unsigned int search_restart ;
};
#line 41 
struct napi_struct;
#line 42 
struct bpf_prog;
#line 43 
union bpf_attr;
#line 44 
struct skb_ext;
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct sk_buff_head {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   __u32 qlen ;
   spinlock_t lock ;
};
#line 562  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
typedef unsigned int sk_buff_data_t;
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_521 {
   struct net_device *dev ;
   unsigned long dev_scratch ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_520 {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   union __anonunion_521 __anonCompField___anonstruct_520_86 ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_519 {
   struct __anonstruct_520 __anonCompField___anonunion_519_87 ;
   struct rb_node rbnode ;
   struct list_head list ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_522 {
   struct sock *sk ;
   int ip_defrag_offset ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_523 {
   ktime_t tstamp ;
   u64 skb_mstamp_ns ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_525 {
   unsigned long _skb_refdst ;
   void (*destructor)(struct sk_buff *) ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_524 {
   struct __anonstruct_525 __anonCompField___anonunion_524_91 ;
   struct list_head tcp_tsorted_anchor ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_527 {
   __u16 csum_start ;
   __u16 csum_offset ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_526 {
   __wsum csum ;
   struct __anonstruct_527 __anonCompField___anonunion_526_93 ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_528 {
   unsigned int napi_id ;
   unsigned int sender_cpu ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_529 {
   __u32 mark ;
   __u32 reserved_tailroom ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_530 {
   __be16 inner_protocol ;
   __u8 inner_ipproto ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct sk_buff {
   union __anonunion_519 __anonCompField_sk_buff_88 ;
   union __anonunion_522 __anonCompField_sk_buff_89 ;
   union __anonunion_523 __anonCompField_sk_buff_90 ;
   char cb[48U] ;
   union __anonunion_524 __anonCompField_sk_buff_92 ;
   unsigned long _nfct ;
   unsigned int len ;
   unsigned int data_len ;
   __u16 mac_len ;
   __u16 hdr_len ;
   __u16 queue_mapping ;
   __u8 __cloned_offset[0U] ;
   __u8 cloned : 1 ;
   __u8 nohdr : 1 ;
   __u8 fclone : 2 ;
   __u8 peeked : 1 ;
   __u8 head_frag : 1 ;
   __u8 pfmemalloc : 1 ;
   __u8 active_extensions ;
   __u32 headers_start[0U] ;
   __u8 __pkt_type_offset[0U] ;
   __u8 pkt_type : 3 ;
   __u8 ignore_df : 1 ;
   __u8 nf_trace : 1 ;
   __u8 ip_summed : 2 ;
   __u8 ooo_okay : 1 ;
   __u8 l4_hash : 1 ;
   __u8 sw_hash : 1 ;
   __u8 wifi_acked_valid : 1 ;
   __u8 wifi_acked : 1 ;
   __u8 no_fcs : 1 ;
   __u8 encapsulation : 1 ;
   __u8 encap_hdr_csum : 1 ;
   __u8 csum_valid : 1 ;
   __u8 __pkt_vlan_present_offset[0U] ;
   __u8 vlan_present : 1 ;
   __u8 csum_complete_sw : 1 ;
   __u8 csum_level : 2 ;
   __u8 csum_not_inet : 1 ;
   __u8 dst_pending_confirm : 1 ;
   __u8 ndisc_nodetype : 2 ;
   __u8 ipvs_property : 1 ;
   __u8 inner_protocol_type : 1 ;
   __u8 remcsum_offload : 1 ;
   __u8 offload_fwd_mark : 1 ;
   __u8 offload_l3_fwd_mark : 1 ;
   __u8 tc_skip_classify : 1 ;
   __u8 tc_at_ingress : 1 ;
   __u8 tc_redirected : 1 ;
   __u8 tc_from_ingress : 1 ;
   __u8 decrypted : 1 ;
   __u16 tc_index ;
   union __anonunion_526 __anonCompField_sk_buff_94 ;
   __u32 priority ;
   int skb_iif ;
   __u32 hash ;
   __be16 vlan_proto ;
   __u16 vlan_tci ;
   union __anonunion_528 __anonCompField_sk_buff_95 ;
   __u32 secmark ;
   union __anonunion_529 __anonCompField_sk_buff_96 ;
   union __anonunion_530 __anonCompField_sk_buff_97 ;
   __u16 inner_transport_header ;
   __u16 inner_network_header ;
   __u16 inner_mac_header ;
   __be16 protocol ;
   __u16 transport_header ;
   __u16 network_header ;
   __u16 mac_header ;
   __u32 headers_end[0U] ;
   sk_buff_data_t tail ;
   sk_buff_data_t end ;
   unsigned char *head ;
   unsigned char *data ;
   unsigned int truesize ;
   refcount_t users ;
   struct skb_ext *extensions ;
};
#line 920 
struct dst_entry;
#line 4108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct skb_ext {
   refcount_t refcnt ;
   u8 offset[3U] ;
   u8 chunks ;
   char data[0U] ;
};
#line 177  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_drvinfo {
   __u32 cmd ;
   char driver[32U] ;
   char version[32U] ;
   char fw_version[32U] ;
   char bus_info[32U] ;
   char erom_version[32U] ;
   char reserved2[12U] ;
   __u32 n_priv_flags ;
   __u32 n_stats ;
   __u32 testinfo_len ;
   __u32 eedump_len ;
   __u32 regdump_len ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_wolinfo {
   __u32 cmd ;
   __u32 supported ;
   __u32 wolopts ;
   __u8 sopass[6U] ;
};
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tunable {
   __u32 cmd ;
   __u32 id ;
   __u32 type_id ;
   __u32 len ;
   void *data[0U] ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_regs {
   __u32 cmd ;
   __u32 version ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_eeprom {
   __u32 cmd ;
   __u32 magic ;
   __u32 offset ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_eee {
   __u32 cmd ;
   __u32 supported ;
   __u32 advertised ;
   __u32 lp_advertised ;
   __u32 eee_active ;
   __u32 eee_enabled ;
   __u32 tx_lpi_enabled ;
   __u32 tx_lpi_timer ;
   __u32 reserved[2U] ;
};
#line 382  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_modinfo {
   __u32 cmd ;
   __u32 type ;
   __u32 eeprom_len ;
   __u32 reserved[8U] ;
};
#line 462  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_coalesce {
   __u32 cmd ;
   __u32 rx_coalesce_usecs ;
   __u32 rx_max_coalesced_frames ;
   __u32 rx_coalesce_usecs_irq ;
   __u32 rx_max_coalesced_frames_irq ;
   __u32 tx_coalesce_usecs ;
   __u32 tx_max_coalesced_frames ;
   __u32 tx_coalesce_usecs_irq ;
   __u32 tx_max_coalesced_frames_irq ;
   __u32 stats_block_coalesce_usecs ;
   __u32 use_adaptive_rx_coalesce ;
   __u32 use_adaptive_tx_coalesce ;
   __u32 pkt_rate_low ;
   __u32 rx_coalesce_usecs_low ;
   __u32 rx_max_coalesced_frames_low ;
   __u32 tx_coalesce_usecs_low ;
   __u32 tx_max_coalesced_frames_low ;
   __u32 pkt_rate_high ;
   __u32 rx_coalesce_usecs_high ;
   __u32 rx_max_coalesced_frames_high ;
   __u32 tx_coalesce_usecs_high ;
   __u32 tx_max_coalesced_frames_high ;
   __u32 rate_sample_interval ;
};
#line 513  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ringparam {
   __u32 cmd ;
   __u32 rx_max_pending ;
   __u32 rx_mini_max_pending ;
   __u32 rx_jumbo_max_pending ;
   __u32 tx_max_pending ;
   __u32 rx_pending ;
   __u32 rx_mini_pending ;
   __u32 rx_jumbo_pending ;
   __u32 tx_pending ;
};
#line 541  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_channels {
   __u32 cmd ;
   __u32 max_rx ;
   __u32 max_tx ;
   __u32 max_other ;
   __u32 max_combined ;
   __u32 rx_count ;
   __u32 tx_count ;
   __u32 other_count ;
   __u32 combined_count ;
};
#line 575  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_pauseparam {
   __u32 cmd ;
   __u32 autoneg ;
   __u32 rx_pause ;
   __u32 tx_pause ;
};
#line 683  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_test {
   __u32 cmd ;
   __u32 flags ;
   __u32 reserved ;
   __u32 len ;
   __u64 data[0U] ;
};
#line 702  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_stats {
   __u32 cmd ;
   __u32 n_stats ;
   __u64 data[0U] ;
};
#line 758  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tcpip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tos ;
};
#line 775  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ah_espip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 spi ;
   __u8 tos ;
};
#line 793  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_usrip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 l4_4_bytes ;
   __u8 tos ;
   __u8 ip_ver ;
   __u8 proto ;
};
#line 812  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tcpip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tclass ;
};
#line 829  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ah_espip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be32 spi ;
   __u8 tclass ;
};
#line 844  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_usrip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be32 l4_4_bytes ;
   __u8 tclass ;
   __u8 l4_proto ;
};
#line 852  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
union ethtool_flow_union {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   struct ethtool_tcpip6_spec tcp_ip6_spec ;
   struct ethtool_tcpip6_spec udp_ip6_spec ;
   struct ethtool_tcpip6_spec sctp_ip6_spec ;
   struct ethtool_ah_espip6_spec ah_ip6_spec ;
   struct ethtool_ah_espip6_spec esp_ip6_spec ;
   struct ethtool_usrip6_spec usr_ip6_spec ;
   struct ethhdr ether_spec ;
   __u8 hdata[52U] ;
};
#line 880  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_flow_ext {
   __u8 padding[2U] ;
   unsigned char h_dest[6U] ;
   __be16 vlan_etype ;
   __be16 vlan_tci ;
   __be32 data[2U] ;
};
#line 905  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_rx_flow_spec {
   __u32 flow_type ;
   union ethtool_flow_union h_u ;
   struct ethtool_flow_ext h_ext ;
   union ethtool_flow_union m_u ;
   struct ethtool_flow_ext m_ext ;
   __u64 ring_cookie ;
   __u32 location ;
};
#line 1001  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
union __anonunion_556 {
   __u32 rule_cnt ;
   __u32 rss_context ;
};
#line 1001  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_rxnfc {
   __u32 cmd ;
   __u32 flow_type ;
   __u64 data ;
   struct ethtool_rx_flow_spec fs ;
   union __anonunion_556 __anonCompField_ethtool_rxnfc_99 ;
   __u32 rule_locs[0U] ;
};
#line 1130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_flash {
   __u32 cmd ;
   __u32 region ;
   char data[128U] ;
};
#line 1150  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_dump {
   __u32 cmd ;
   __u32 version ;
   __u32 flag ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 1230  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ts_info {
   __u32 cmd ;
   __u32 so_timestamping ;
   __s32 phc_index ;
   __u32 tx_types ;
   __u32 tx_reserved[3U] ;
   __u32 rx_filters ;
   __u32 rx_reserved[3U] ;
};
#line 1302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_fecparam {
   __u32 cmd ;
   __u32 active_fec ;
   __u32 fec ;
   __u32 reserved ;
};
#line 1876  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_link_settings {
   __u32 cmd ;
   __u32 speed ;
   __u8 duplex ;
   __u8 port ;
   __u8 phy_address ;
   __u8 autoneg ;
   __u8 mdio_support ;
   __u8 eth_tp_mdix ;
   __u8 eth_tp_mdix_ctrl ;
   __s8 link_mode_masks_nwords ;
   __u8 transceiver ;
   __u8 reserved1[3U] ;
   __u32 reserved[7U] ;
   __u32 link_mode_masks[0U] ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
enum ethtool_phys_id_state {
    ETHTOOL_ID_INACTIVE = 0,
    ETHTOOL_ID_ACTIVE = 1,
    ETHTOOL_ID_ON = 2,
    ETHTOOL_ID_OFF = 3
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct __anonstruct_link_modes_559 {
   unsigned long supported[2U] ;
   unsigned long advertising[2U] ;
   unsigned long lp_advertising[2U] ;
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct ethtool_link_ksettings {
   struct ethtool_link_settings base ;
   struct __anonstruct_link_modes_559 link_modes ;
};
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct ethtool_ops {
   void (*get_drvinfo)(struct net_device *, struct ethtool_drvinfo *) ;
   int (*get_regs_len)(struct net_device *) ;
   void (*get_regs)(struct net_device *, struct ethtool_regs *, void *) ;
   void (*get_wol)(struct net_device *, struct ethtool_wolinfo *) ;
   int (*set_wol)(struct net_device *, struct ethtool_wolinfo *) ;
   u32 (*get_msglevel)(struct net_device *) ;
   void (*set_msglevel)(struct net_device *, u32 ) ;
   int (*nway_reset)(struct net_device *) ;
   u32 (*get_link)(struct net_device *) ;
   int (*get_eeprom_len)(struct net_device *) ;
   int (*get_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*set_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_coalesce)(struct net_device *, struct ethtool_coalesce *) ;
   int (*set_coalesce)(struct net_device *, struct ethtool_coalesce *) ;
   void (*get_ringparam)(struct net_device *, struct ethtool_ringparam *) ;
   int (*set_ringparam)(struct net_device *, struct ethtool_ringparam *) ;
   void (*get_pauseparam)(struct net_device *, struct ethtool_pauseparam *) ;
   int (*set_pauseparam)(struct net_device *, struct ethtool_pauseparam *) ;
   void (*self_test)(struct net_device *, struct ethtool_test *, u64 *) ;
   void (*get_strings)(struct net_device *, u32 , u8 *) ;
   int (*set_phys_id)(struct net_device *, enum ethtool_phys_id_state ) ;
   void (*get_ethtool_stats)(struct net_device *, struct ethtool_stats *, u64 *) ;
   int (*begin)(struct net_device *) ;
   void (*complete)(struct net_device *) ;
   u32 (*get_priv_flags)(struct net_device *) ;
   int (*set_priv_flags)(struct net_device *, u32 ) ;
   int (*get_sset_count)(struct net_device *, int ) ;
   int (*get_rxnfc)(struct net_device *, struct ethtool_rxnfc *, u32 *) ;
   int (*set_rxnfc)(struct net_device *, struct ethtool_rxnfc *) ;
   int (*flash_device)(struct net_device *, struct ethtool_flash *) ;
   int (*reset)(struct net_device *, u32 *) ;
   u32 (*get_rxfh_key_size)(struct net_device *) ;
   u32 (*get_rxfh_indir_size)(struct net_device *) ;
   int (*get_rxfh)(struct net_device *, u32 *, u8 *, u8 *) ;
   int (*set_rxfh)(struct net_device *, u32 *, u8 *, u8 ) ;
   int (*get_rxfh_context)(struct net_device *, u32 *, u8 *, u8 *, u32 ) ;
   int (*set_rxfh_context)(struct net_device *, u32 *, u8 *, u8 , u32 *, bool ) ;
   void (*get_channels)(struct net_device *, struct ethtool_channels *) ;
   int (*set_channels)(struct net_device *, struct ethtool_channels *) ;
   int (*get_dump_flag)(struct net_device *, struct ethtool_dump *) ;
   int (*get_dump_data)(struct net_device *, struct ethtool_dump *, void *) ;
   int (*set_dump)(struct net_device *, struct ethtool_dump *) ;
   int (*get_ts_info)(struct net_device *, struct ethtool_ts_info *) ;
   int (*get_module_info)(struct net_device *, struct ethtool_modinfo *) ;
   int (*get_module_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_eee)(struct net_device *, struct ethtool_eee *) ;
   int (*set_eee)(struct net_device *, struct ethtool_eee *) ;
   int (*get_tunable)(struct net_device *, struct ethtool_tunable *, void *) ;
   int (*set_tunable)(struct net_device *, struct ethtool_tunable *, void *) ;
   int (*get_per_queue_coalesce)(struct net_device *, u32 , struct ethtool_coalesce *) ;
   int (*set_per_queue_coalesce)(struct net_device *, u32 , struct ethtool_coalesce *) ;
   int (*get_link_ksettings)(struct net_device *, struct ethtool_link_ksettings *) ;
   int (*set_link_ksettings)(struct net_device *, struct ethtool_link_ksettings *) ;
   int (*get_fecparam)(struct net_device *, struct ethtool_fecparam *) ;
   int (*set_fecparam)(struct net_device *, struct ethtool_fecparam *) ;
   void (*get_ethtool_phy_stats)(struct net_device *, struct ethtool_stats *, u64 *) ;
};
#line 409 
struct flow_rule;
#line 822  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/sysctl.h"
struct ctl_table_root;
#line 823 
struct ctl_table_header;
#line 824 
struct ctl_dir;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
typedef int proc_handler(struct ctl_table *, int , void *, size_t *, loff_t *);
#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_poll {
   atomic_t event ;
   wait_queue_head_t wait ;
};
#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table {
   char *procname ;
   void *data ;
   int maxlen ;
   umode_t mode ;
   struct ctl_table *child ;
   proc_handler *proc_handler ;
   struct ctl_table_poll *poll ;
   void *extra1 ;
   void *extra2 ;
} __attribute__((__designated_init__));
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_node {
   struct rb_node node ;
   struct ctl_table_header *header ;
};
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct __anonstruct_561 {
   struct ctl_table *ctl_table ;
   int used ;
   int count ;
   int nreg ;
};
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
union __anonunion_560 {
   struct __anonstruct_561 __anonCompField___anonunion_560_100 ;
   struct callback_head rcu ;
};
#line 142 
struct ctl_table_set;
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_header {
   union __anonunion_560 __anonCompField_ctl_table_header_101 ;
   struct completion *unregistering ;
   struct ctl_table *ctl_table_arg ;
   struct ctl_table_root *root ;
   struct ctl_table_set *set ;
   struct ctl_dir *parent ;
   struct ctl_node *node ;
   struct hlist_head inodes ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_dir {
   struct ctl_table_header header ;
   struct rb_root root ;
};
#line 167  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_set {
   int (*is_seen)(struct ctl_table_set *) ;
   struct ctl_dir dir ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_root {
   struct ctl_table_set default_set ;
   struct ctl_table_set *(*lookup)(struct ctl_table_root *) ;
   void (*set_ownership)(struct ctl_table_header *, struct ctl_table *, kuid_t *, kgid_t *) ;
   int (*permissions)(struct ctl_table_header *, struct ctl_table *) ;
};
#line 242 
struct prot_inuse;
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/core.h"
struct netns_core {
   struct ctl_table_header *sysctl_hdr ;
   int sysctl_somaxconn ;
   int *sock_inuse ;
   struct prot_inuse *prot_inuse ;
};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct u64_stats_sync {
   };
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct __anonstruct_local_t_562 {
   atomic_long_t a ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
typedef struct __anonstruct_local_t_562 local_t;
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/local.h"
struct __anonstruct_local64_t_563 {
   local_t a ;
};
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/local.h"
typedef struct __anonstruct_local64_t_563 local64_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/local64.h"
struct __anonstruct_u64_stats_t_564 {
   local64_t v ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/local64.h"
typedef struct __anonstruct_u64_stats_t_564 u64_stats_t;
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct ipstats_mib {
   u64 mibs[37U] ;
   struct u64_stats_sync syncp ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmp_mib {
   unsigned long mibs[28U] ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpmsg_mib {
   atomic_long_t mibs[512U] ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6_mib {
   unsigned long mibs[6U] ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6_mib_device {
   atomic_long_t mibs[6U] ;
};
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6msg_mib {
   atomic_long_t mibs[512U] ;
};
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6msg_mib_device {
   atomic_long_t mibs[512U] ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct tcp_mib {
   unsigned long mibs[16U] ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct udp_mib {
   unsigned long mibs[9U] ;
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_mib {
   unsigned long mibs[120U] ;
};
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_xfrm_mib {
   unsigned long mibs[29U] ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_tls_mib {
   unsigned long mibs[11U] ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/mib.h"
struct proc_dir_entry;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/mib.h"
struct netns_mib {
   struct tcp_mib *tcp_statistics ;
   struct ipstats_mib *ip_statistics ;
   struct linux_mib *net_statistics ;
   struct udp_mib *udp_statistics ;
   struct udp_mib *udplite_statistics ;
   struct icmp_mib *icmp_statistics ;
   struct icmpmsg_mib *icmpmsg_statistics ;
   struct proc_dir_entry *proc_net_devsnmp6 ;
   struct udp_mib *udp_stats_in6 ;
   struct udp_mib *udplite_stats_in6 ;
   struct ipstats_mib *ipv6_statistics ;
   struct icmpv6_mib *icmpv6_statistics ;
   struct icmpv6msg_mib *icmpv6msg_statistics ;
   struct linux_xfrm_mib *xfrm_statistics ;
   struct linux_tls_mib *tls_statistics ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/unix.h"
struct netns_unix {
   int sysctl_max_dgram_qlen ;
   struct ctl_table_header *ctl ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/packet.h"
struct netns_packet {
   struct mutex sklist_lock ;
   struct hlist_head sklist ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frags;
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct fqdir {
   long high_thresh ;
   long low_thresh ;
   int timeout ;
   int max_dist ;
   struct inet_frags *f ;
   struct net *net ;
   bool dead ;
   struct rhashtable rhashtable ;
   atomic_long_t mem ;
   struct work_struct destroy_work ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct frag_v4_compare_key {
   __be32 saddr ;
   __be32 daddr ;
   u32 user ;
   u32 vif ;
   __be16 id ;
   u16 protocol ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct frag_v6_compare_key {
   struct in6_addr saddr ;
   struct in6_addr daddr ;
   u32 user ;
   __be32 id ;
   u32 iif ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
union __anonunion_key_565 {
   struct frag_v4_compare_key v4 ;
   struct frag_v6_compare_key v6 ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frag_queue {
   struct rhash_head node ;
   union __anonunion_key_565 key ;
   struct timer_list timer ;
   spinlock_t lock ;
   refcount_t refcnt ;
   struct rb_root rb_fragments ;
   struct sk_buff *fragments_tail ;
   struct sk_buff *last_run_head ;
   ktime_t stamp ;
   int len ;
   int meat ;
   __u8 flags ;
   u16 max_size ;
   struct fqdir *fqdir ;
   struct callback_head rcu ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frags {
   unsigned int qsize ;
   void (*constructor)(struct inet_frag_queue *, void *) ;
   void (*destructor)(struct inet_frag_queue *) ;
   void (*frag_expire)(struct timer_list *) ;
   struct kmem_cache *frags_cachep ;
   char *frags_cache_name ;
   struct rhashtable_params rhash_params ;
   refcount_t refcnt ;
   struct completion completion ;
};
#line 178 
struct fib_rules_ops;
#line 179 
struct fib_table;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct local_ports {
   seqlock_t lock ;
   int range[2U] ;
   bool warned ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct ping_group_range {
   seqlock_t lock ;
   kgid_t range[2U] ;
};
#line 31 
struct inet_hashinfo;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct inet_timewait_death_row {
   atomic_t tw_count ;
   struct inet_hashinfo *hashinfo ;
   int sysctl_max_tw_buckets ;
};
#line 40 
struct tcp_fastopen_context;
#line 43 
struct ip_ra_chain;
#line 43 
struct inet_peer_base;
#line 43 
struct xt_table;
#line 43 
struct tcp_congestion_ops;
#line 43 
struct fib_notifier_ops;
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct netns_ipv4 {
   struct ctl_table_header *forw_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *ipv4_hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *xfrm4_hdr ;
   struct ipv4_devconf *devconf_all ;
   struct ipv4_devconf *devconf_dflt ;
   struct ip_ra_chain *ra_chain ;
   struct mutex ra_mutex ;
   struct fib_rules_ops *rules_ops ;
   bool fib_has_custom_rules ;
   unsigned int fib_rules_require_fldissect ;
   struct fib_table *fib_main ;
   struct fib_table *fib_default ;
   bool fib_has_custom_local_routes ;
   int fib_num_tclassid_users ;
   struct hlist_head *fib_table_hash ;
   bool fib_offload_disabled ;
   struct sock *fibnl ;
   struct sock **icmp_sk ;
   struct sock *mc_autojoin_sk ;
   struct inet_peer_base *peers ;
   struct sock **tcp_sk ;
   struct fqdir *fqdir ;
   struct xt_table *iptable_filter ;
   struct xt_table *iptable_mangle ;
   struct xt_table *iptable_raw ;
   struct xt_table *arptable_filter ;
   struct xt_table *iptable_security ;
   struct xt_table *nat_table ;
   int sysctl_icmp_echo_ignore_all ;
   int sysctl_icmp_echo_ignore_broadcasts ;
   int sysctl_icmp_ignore_bogus_error_responses ;
   int sysctl_icmp_ratelimit ;
   int sysctl_icmp_ratemask ;
   int sysctl_icmp_errors_use_inbound_ifaddr ;
   struct local_ports ip_local_ports ;
   int sysctl_tcp_ecn ;
   int sysctl_tcp_ecn_fallback ;
   int sysctl_ip_default_ttl ;
   int sysctl_ip_no_pmtu_disc ;
   int sysctl_ip_fwd_use_pmtu ;
   int sysctl_ip_fwd_update_priority ;
   int sysctl_ip_nonlocal_bind ;
   int sysctl_ip_dynaddr ;
   int sysctl_ip_early_demux ;
   int sysctl_raw_l3mdev_accept ;
   int sysctl_tcp_early_demux ;
   int sysctl_udp_early_demux ;
   int sysctl_fwmark_reflect ;
   int sysctl_tcp_fwmark_accept ;
   int sysctl_tcp_l3mdev_accept ;
   int sysctl_tcp_mtu_probing ;
   int sysctl_tcp_mtu_probe_floor ;
   int sysctl_tcp_base_mss ;
   int sysctl_tcp_min_snd_mss ;
   int sysctl_tcp_probe_threshold ;
   u32 sysctl_tcp_probe_interval ;
   int sysctl_tcp_keepalive_time ;
   int sysctl_tcp_keepalive_probes ;
   int sysctl_tcp_keepalive_intvl ;
   int sysctl_tcp_syn_retries ;
   int sysctl_tcp_synack_retries ;
   int sysctl_tcp_syncookies ;
   int sysctl_tcp_reordering ;
   int sysctl_tcp_retries1 ;
   int sysctl_tcp_retries2 ;
   int sysctl_tcp_orphan_retries ;
   int sysctl_tcp_fin_timeout ;
   unsigned int sysctl_tcp_notsent_lowat ;
   int sysctl_tcp_tw_reuse ;
   int sysctl_tcp_sack ;
   int sysctl_tcp_window_scaling ;
   int sysctl_tcp_timestamps ;
   int sysctl_tcp_early_retrans ;
   int sysctl_tcp_recovery ;
   int sysctl_tcp_thin_linear_timeouts ;
   int sysctl_tcp_slow_start_after_idle ;
   int sysctl_tcp_retrans_collapse ;
   int sysctl_tcp_stdurg ;
   int sysctl_tcp_rfc1337 ;
   int sysctl_tcp_abort_on_overflow ;
   int sysctl_tcp_fack ;
   int sysctl_tcp_max_reordering ;
   int sysctl_tcp_dsack ;
   int sysctl_tcp_app_win ;
   int sysctl_tcp_adv_win_scale ;
   int sysctl_tcp_frto ;
   int sysctl_tcp_nometrics_save ;
   int sysctl_tcp_moderate_rcvbuf ;
   int sysctl_tcp_tso_win_divisor ;
   int sysctl_tcp_workaround_signed_windows ;
   int sysctl_tcp_limit_output_bytes ;
   int sysctl_tcp_challenge_ack_limit ;
   int sysctl_tcp_min_tso_segs ;
   int sysctl_tcp_min_rtt_wlen ;
   int sysctl_tcp_autocorking ;
   int sysctl_tcp_invalid_ratelimit ;
   int sysctl_tcp_pacing_ss_ratio ;
   int sysctl_tcp_pacing_ca_ratio ;
   int sysctl_tcp_wmem[3U] ;
   int sysctl_tcp_rmem[3U] ;
   int sysctl_tcp_comp_sack_nr ;
   unsigned long sysctl_tcp_comp_sack_delay_ns ;
   struct inet_timewait_death_row tcp_death_row ;
   int sysctl_max_syn_backlog ;
   int sysctl_tcp_fastopen ;
   struct tcp_congestion_ops *tcp_congestion_control ;
   struct tcp_fastopen_context *tcp_fastopen_ctx ;
   spinlock_t tcp_fastopen_ctx_lock ;
   unsigned int sysctl_tcp_fastopen_blackhole_timeout ;
   atomic_t tfo_active_disable_times ;
   unsigned long tfo_active_disable_stamp ;
   int sysctl_udp_wmem_min ;
   int sysctl_udp_rmem_min ;
   int sysctl_udp_l3mdev_accept ;
   int sysctl_igmp_max_memberships ;
   int sysctl_igmp_max_msf ;
   int sysctl_igmp_llm_reports ;
   int sysctl_igmp_qrv ;
   struct ping_group_range ping_group_range ;
   atomic_t dev_addr_genid ;
   unsigned long *sysctl_local_reserved_ports ;
   int sysctl_ip_prot_sock ;
   struct list_head mr_tables ;
   struct fib_rules_ops *mr_rules_ops ;
   int sysctl_fib_multipath_use_neigh ;
   int sysctl_fib_multipath_hash_policy ;
   struct fib_notifier_ops *notifier_ops ;
   unsigned int fib_seq ;
   struct fib_notifier_ops *ipmr_notifier_ops ;
   unsigned int ipmr_seq ;
   atomic_t rt_genid ;
   siphash_key_t ip_id_key ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst_ops.h"
struct neighbour;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst_ops.h"
struct dst_ops {
   unsigned short family ;
   unsigned int gc_thresh ;
   int (*gc)(struct dst_ops *) ;
   struct dst_entry *(*check)(struct dst_entry *, __u32 ) ;
   unsigned int (*default_advmss)(struct dst_entry *) ;
   unsigned int (*mtu)(struct dst_entry *) ;
   u32 *(*cow_metrics)(struct dst_entry *, unsigned long ) ;
   void (*destroy)(struct dst_entry *) ;
   void (*ifdown)(struct dst_entry *, struct net_device *, int ) ;
   struct dst_entry *(*negative_advice)(struct dst_entry *) ;
   void (*link_failure)(struct sk_buff *) ;
   void (*update_pmtu)(struct dst_entry *, struct sock *, struct sk_buff *, u32 , bool ) ;
   void (*redirect)(struct dst_entry *, struct sock *, struct sk_buff *) ;
   int (*local_out)(struct net *, struct sock *, struct sk_buff *) ;
   struct neighbour *(*neigh_lookup)(struct dst_entry *, struct sk_buff *, void *) ;
   void (*confirm_neigh)(struct dst_entry *, void *) ;
   struct kmem_cache *kmem_cachep ;
   struct percpu_counter pcpuc_entries ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_sysctl_ipv6 {
   struct ctl_table_header *hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *icmp_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *xfrm6_hdr ;
   int bindv6only ;
   int flush_delay ;
   int ip6_rt_max_size ;
   int ip6_rt_gc_min_interval ;
   int ip6_rt_gc_timeout ;
   int ip6_rt_gc_interval ;
   int ip6_rt_gc_elasticity ;
   int ip6_rt_mtu_expires ;
   int ip6_rt_min_advmss ;
   int multipath_hash_policy ;
   int flowlabel_consistency ;
   int auto_flowlabels ;
   int icmpv6_time ;
   int icmpv6_echo_ignore_all ;
   int icmpv6_echo_ignore_multicast ;
   int icmpv6_echo_ignore_anycast ;
   unsigned long icmpv6_ratemask[4U] ;
   unsigned long *icmpv6_ratemask_ptr ;
   int anycast_src_echo_reply ;
   int ip_nonlocal_bind ;
   int fwmark_reflect ;
   int idgen_retries ;
   int idgen_delay ;
   int flowlabel_state_ranges ;
   int flowlabel_reflect ;
   int max_dst_opts_cnt ;
   int max_hbh_opts_cnt ;
   int max_dst_opts_len ;
   int max_hbh_opts_len ;
   int seg6_flowlabel ;
   bool skip_notify_on_dev_down ;
};
#line 56 
struct ipv6_devconf;
#line 56 
struct fib6_info;
#line 56 
struct rt6_info;
#line 56 
struct rt6_statistics;
#line 56 
struct fib6_table;
#line 56 
struct seg6_pernet_data;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct __anonstruct_ip6addrlbl_table_567 {
   struct hlist_head head ;
   spinlock_t lock ;
   u32 seq ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_ipv6 {
   struct netns_sysctl_ipv6 sysctl ;
   struct ipv6_devconf *devconf_all ;
   struct ipv6_devconf *devconf_dflt ;
   struct inet_peer_base *peers ;
   struct fqdir *fqdir ;
   struct xt_table *ip6table_filter ;
   struct xt_table *ip6table_mangle ;
   struct xt_table *ip6table_raw ;
   struct xt_table *ip6table_security ;
   struct xt_table *ip6table_nat ;
   struct fib6_info *fib6_null_entry ;
   struct rt6_info *ip6_null_entry ;
   struct rt6_statistics *rt6_stats ;
   struct timer_list ip6_fib_timer ;
   struct hlist_head *fib_table_hash ;
   struct fib6_table *fib6_main_tbl ;
   struct list_head fib6_walkers ;
   struct dst_ops ip6_dst_ops ;
   rwlock_t fib6_walker_lock ;
   spinlock_t fib6_gc_lock ;
   unsigned int ip6_rt_gc_expire ;
   unsigned long ip6_rt_last_gc ;
   unsigned int fib6_rules_require_fldissect ;
   bool fib6_has_custom_rules ;
   unsigned int fib6_routes_require_src ;
   struct rt6_info *ip6_prohibit_entry ;
   struct rt6_info *ip6_blk_hole_entry ;
   struct fib6_table *fib6_local_tbl ;
   struct fib_rules_ops *fib6_rules_ops ;
   struct sock **icmp_sk ;
   struct sock *ndisc_sk ;
   struct sock *tcp_sk ;
   struct sock *igmp_sk ;
   struct sock *mc_autojoin_sk ;
   struct list_head mr6_tables ;
   struct fib_rules_ops *mr6_rules_ops ;
   atomic_t dev_addr_genid ;
   atomic_t fib6_sernum ;
   struct seg6_pernet_data *seg6_data ;
   struct fib_notifier_ops *notifier_ops ;
   struct fib_notifier_ops *ip6mr_notifier_ops ;
   unsigned int ipmr_seq ;
   struct __anonstruct_ip6addrlbl_table_567 ip6addrlbl_table ;
};
#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_nf_frag {
   struct fqdir *fqdir ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/nexthop.h"
struct netns_nexthop {
   struct rb_root rb_root ;
   struct hlist_head *devhash ;
   unsigned int seq ;
   u32 last_id_allocated ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ieee802154_6lowpan.h"
struct netns_sysctl_lowpan {
   struct ctl_table_header *frags_hdr ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ieee802154_6lowpan.h"
struct netns_ieee802154_lowpan {
   struct netns_sysctl_lowpan sysctl ;
   struct fqdir *fqdir ;
};
#line 21 
struct sctp_mib;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/sctp.h"
struct netns_sctp {
   struct sctp_mib *sctp_statistics ;
   struct proc_dir_entry *proc_net_sctp ;
   struct ctl_table_header *sysctl_header ;
   struct sock *ctl_sock ;
   struct list_head local_addr_list ;
   struct list_head addr_waitq ;
   struct timer_list addr_wq_timer ;
   struct list_head auto_asconf_splist ;
   spinlock_t addr_wq_lock ;
   spinlock_t local_addr_lock ;
   unsigned int rto_initial ;
   unsigned int rto_min ;
   unsigned int rto_max ;
   int rto_alpha ;
   int rto_beta ;
   int max_burst ;
   int cookie_preserve_enable ;
   char *sctp_hmac_alg ;
   unsigned int valid_cookie_life ;
   unsigned int sack_timeout ;
   unsigned int hb_interval ;
   int max_retrans_association ;
   int max_retrans_path ;
   int max_retrans_init ;
   int pf_retrans ;
   int ps_retrans ;
   int pf_enable ;
   int pf_expose ;
   int sndbuf_policy ;
   int rcvbuf_policy ;
   int default_auto_asconf ;
   int addip_enable ;
   int addip_noauth ;
   int prsctp_enable ;
   int reconf_enable ;
   int auth_enable ;
   int intl_enable ;
   int ecn_enable ;
   int scope_policy ;
   int rwnd_upd_shift ;
   unsigned long max_autoclose ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/dccp.h"
struct netns_dccp {
   struct sock *v4_ctl_sk ;
   struct sock *v6_ctl_sk ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netfilter.h"
struct nf_logger;
#line 76 
struct nf_queue_handler;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/netfilter.h"
struct nf_hook_entries;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/netfilter.h"
struct netns_nf {
   struct proc_dir_entry *proc_netfilter ;
   struct nf_queue_handler *queue_handler ;
   struct nf_logger *nf_loggers[13U] ;
   struct ctl_table_header *nf_log_dir_header ;
   struct nf_hook_entries *hooks_ipv4[5U] ;
   struct nf_hook_entries *hooks_ipv6[5U] ;
   struct nf_hook_entries *hooks_arp[3U] ;
   struct nf_hook_entries *hooks_bridge[5U] ;
   struct nf_hook_entries *hooks_decnet[7U] ;
   bool defrag_ipv4 ;
   bool defrag_ipv6 ;
};
#line 37 
struct ebt_table;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/x_tables.h"
struct netns_xt {
   struct list_head tables[13U] ;
   bool notrack_deprecated_warning ;
   bool clusterip_deprecated_warning ;
   struct ebt_table *broute_table ;
   struct ebt_table *frame_filter ;
   struct ebt_table *frame_nat ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_node;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_head {
   struct hlist_nulls_node *first ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_node {
   struct hlist_nulls_node *next ;
   struct hlist_nulls_node **pprev ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_generic_net {
   unsigned int timeout ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_tcp_net {
   unsigned int timeouts[14U] ;
   int tcp_loose ;
   int tcp_be_liberal ;
   int tcp_max_retrans ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_udp_net {
   unsigned int timeouts[2U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_icmp_net {
   unsigned int timeout ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_dccp_net {
   int dccp_loose ;
   unsigned int dccp_timeout[10U] ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_sctp_net {
   unsigned int timeouts[10U] ;
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_gre_net {
   struct list_head keymap_list ;
   unsigned int timeouts[2U] ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_ip_net {
   struct nf_generic_net generic ;
   struct nf_tcp_net tcp ;
   struct nf_udp_net udp ;
   struct nf_icmp_net icmp ;
   struct nf_icmp_net icmpv6 ;
   struct nf_dccp_net dccp ;
   struct nf_sctp_net sctp ;
   struct nf_gre_net gre ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct ct_pcpu {
   spinlock_t lock ;
   struct hlist_nulls_head unconfirmed ;
   struct hlist_nulls_head dying ;
};
#line 95 
struct nf_ct_event_notifier;
#line 95 
struct nf_exp_event_notifier;
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct netns_ct {
   atomic_t count ;
   unsigned int expect_count ;
   struct delayed_work ecache_dwork ;
   bool ecache_dwork_pending ;
   bool auto_assign_helper_warned ;
   struct ctl_table_header *sysctl_header ;
   unsigned int sysctl_log_invalid ;
   int sysctl_events ;
   int sysctl_acct ;
   int sysctl_auto_assign_helper ;
   int sysctl_tstamp ;
   int sysctl_checksum ;
   struct ct_pcpu *pcpu_lists ;
   struct ip_conntrack_stat *stat ;
   struct nf_ct_event_notifier *nf_conntrack_event_cb ;
   struct nf_exp_event_notifier *nf_expect_event_cb ;
   struct nf_ip_net nf_ct_proto ;
   unsigned int labels_used ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/nftables.h"
struct netns_nftables {
   struct list_head tables ;
   struct list_head commit_list ;
   struct list_head module_list ;
   struct mutex commit_mutex ;
   unsigned int base_seq ;
   u8 gencursor ;
   u8 validate_state ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct xfrm_policy_hash {
   struct hlist_head *table ;
   unsigned int hmask ;
   u8 dbits4 ;
   u8 sbits4 ;
   u8 dbits6 ;
   u8 sbits6 ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct xfrm_policy_hthresh {
   struct work_struct work ;
   seqlock_t lock ;
   u8 lbits4 ;
   u8 rbits4 ;
   u8 lbits6 ;
   u8 rbits6 ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct netns_xfrm {
   struct list_head state_all ;
   struct hlist_head *state_bydst ;
   struct hlist_head *state_bysrc ;
   struct hlist_head *state_byspi ;
   unsigned int state_hmask ;
   unsigned int state_num ;
   struct work_struct state_hash_work ;
   struct list_head policy_all ;
   struct hlist_head *policy_byidx ;
   unsigned int policy_idx_hmask ;
   struct hlist_head policy_inexact[3U] ;
   struct xfrm_policy_hash policy_bydst[3U] ;
   unsigned int policy_count[6U] ;
   struct work_struct policy_hash_work ;
   struct xfrm_policy_hthresh policy_hthresh ;
   struct list_head inexact_bins ;
   struct sock *nlsk ;
   struct sock *nlsk_stash ;
   u32 sysctl_aevent_etime ;
   u32 sysctl_aevent_rseqth ;
   int sysctl_larval_drop ;
   u32 sysctl_acq_expires ;
   struct ctl_table_header *sysctl_hdr ;
   struct dst_ops xfrm4_dst_ops ;
   struct dst_ops xfrm6_dst_ops ;
   spinlock_t xfrm_state_lock ;
   spinlock_t xfrm_policy_lock ;
   struct mutex xfrm_cfg_mutex ;
};
#line 79 
struct mpls_route;
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/mpls.h"
struct netns_mpls {
   int ip_ttl_propagate ;
   int default_ttl ;
   size_t platform_labels ;
   struct mpls_route **platform_label ;
   struct ctl_table_header *ctl ;
};
#line 20 
struct can_dev_rcv_lists;
#line 21 
struct can_pkg_stats;
#line 22 
struct can_rcv_lists_stats;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/can.h"
struct netns_can {
   struct proc_dir_entry *proc_dir ;
   struct proc_dir_entry *pde_version ;
   struct proc_dir_entry *pde_stats ;
   struct proc_dir_entry *pde_reset_stats ;
   struct proc_dir_entry *pde_rcvlist_all ;
   struct proc_dir_entry *pde_rcvlist_fil ;
   struct proc_dir_entry *pde_rcvlist_inv ;
   struct proc_dir_entry *pde_rcvlist_sff ;
   struct proc_dir_entry *pde_rcvlist_eff ;
   struct proc_dir_entry *pde_rcvlist_err ;
   struct proc_dir_entry *bcmproc_dir ;
   struct can_dev_rcv_lists *rx_alldev_list ;
   spinlock_t rcvlists_lock ;
   struct timer_list stattimer ;
   struct can_pkg_stats *pkg_stats ;
   struct can_rcv_lists_stats *rcv_lists_stats ;
   struct hlist_head cgw_list ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xdp.h"
struct netns_xdp {
   struct mutex lock ;
   struct hlist_head list ;
};
#line 12 
struct proc_ns_operations;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ns_common.h"
struct ns_common {
   atomic_long_t stashed ;
   struct proc_ns_operations *ops ;
   unsigned int inum ;
};
#line 12 
struct net_generic;
#line 13 
struct uevent_sock;
#line 14 
struct netns_ipvs;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct key_tag;
#line 55 
struct ucounts;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct net {
   refcount_t passive ;
   refcount_t count ;
   spinlock_t rules_mod_lock ;
   unsigned int dev_unreg_count ;
   unsigned int dev_base_seq ;
   int ifindex ;
   spinlock_t nsid_lock ;
   atomic_t fnhe_genid ;
   struct list_head list ;
   struct list_head exit_list ;
   struct llist_node cleanup_list ;
   struct key_tag *key_domain ;
   struct user_namespace *user_ns ;
   struct ucounts *ucounts ;
   struct idr netns_ids ;
   struct ns_common ns ;
   struct list_head dev_base_head ;
   struct proc_dir_entry *proc_net ;
   struct proc_dir_entry *proc_net_stat ;
   struct ctl_table_set sysctls ;
   struct sock *rtnl ;
   struct sock *genl_sock ;
   struct uevent_sock *uevent_sock ;
   struct hlist_head *dev_name_head ;
   struct hlist_head *dev_index_head ;
   struct raw_notifier_head netdev_chain ;
   u32 hash_mix ;
   struct net_device *loopback_dev ;
   struct list_head rules_ops ;
   struct netns_core core ;
   struct netns_mib mib ;
   struct netns_packet packet ;
   struct netns_unix unx ;
   struct netns_nexthop nexthop ;
   struct netns_ipv4 ipv4 ;
   struct netns_ipv6 ipv6 ;
   struct netns_ieee802154_lowpan ieee802154_lowpan ;
   struct netns_sctp sctp ;
   struct netns_dccp dccp ;
   struct netns_nf nf ;
   struct netns_xt xt ;
   struct netns_ct ct ;
   struct netns_nftables nft ;
   struct netns_nf_frag nf_frag ;
   struct ctl_table_header *nf_frag_frags_hdr ;
   struct sock *nfnl ;
   struct sock *nfnl_stash ;
   struct list_head nfnl_acct_list ;
   struct list_head nfct_timeout_list ;
   struct sk_buff_head wext_nlevents ;
   struct net_generic *gen ;
   struct bpf_prog *flow_dissector_prog ;
   struct netns_xfrm xfrm ;
   struct netns_ipvs *ipvs ;
   struct netns_mpls mpls ;
   struct netns_can can ;
   struct netns_xdp xdp ;
   struct sock *crypto_nlsk ;
   struct sock *diag_nlsk ;
} __attribute__((__designated_init__));
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
struct assoc_array_ptr;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
struct assoc_array {
   struct assoc_array_ptr *root ;
   unsigned long nr_leaves_on_tree ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
typedef int32_t key_serial_t;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
typedef uint32_t key_perm_t;
#line 32 
struct key_type;
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key_tag {
   struct callback_head rcu ;
   refcount_t usage ;
   bool removed ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_580 {
   u16 desc_len ;
   char desc[6U] ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_579 {
   struct __anonstruct_580 __anonCompField___anonunion_579_102 ;
   unsigned long x ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct keyring_index_key {
   unsigned long hash ;
   union __anonunion_579 __anonCompField_keyring_index_key_103 ;
   struct key_type *type ;
   struct key_tag *domain_tag ;
   char *description ;
};
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union key_payload {
   void *rcu_data0 ;
   void *data[4U] ;
};
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key_restriction {
   int (*check)(struct key *, struct key_type *, union key_payload *, struct key *) ;
   struct key *key ;
   struct key_type *keytype ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_581 {
   struct list_head graveyard_link ;
   struct rb_node serial_node ;
};
#line 172 
struct key_user;
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_582 {
   time64_t expiry ;
   time64_t revoked_at ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_584 {
   unsigned long hash ;
   unsigned long len_desc ;
   struct key_type *type ;
   struct key_tag *domain_tag ;
   char *description ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_583 {
   struct keyring_index_key index_key ;
   struct __anonstruct_584 __anonCompField___anonunion_583_106 ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_586 {
   struct list_head name_link ;
   struct assoc_array keys ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_585 {
   union key_payload payload ;
   struct __anonstruct_586 __anonCompField___anonunion_585_108 ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key {
   refcount_t usage ;
   key_serial_t serial ;
   union __anonunion_581 __anonCompField_key_104 ;
   struct rw_semaphore sem ;
   struct key_user *user ;
   void *security ;
   union __anonunion_582 __anonCompField_key_105 ;
   time64_t last_used_at ;
   kuid_t uid ;
   kgid_t gid ;
   key_perm_t perm ;
   unsigned short quotalen ;
   unsigned short datalen ;
   short state ;
   unsigned long flags ;
   union __anonunion_583 __anonCompField_key_107 ;
   union __anonunion_585 __anonCompField_key_109 ;
   struct key_restriction *restrict_link ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/user.h"
struct user_struct {
   refcount_t __count ;
   atomic_t processes ;
   atomic_t sigpending ;
   atomic_t fanotify_listeners ;
   atomic_long_t epoll_watches ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   unsigned long unix_inflight ;
   atomic_long_t pipe_bufs ;
   struct hlist_node uidhash_node ;
   kuid_t uid ;
   atomic_long_t locked_vm ;
   struct ratelimit_state ratelimit ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
struct group_info {
   atomic_t usage ;
   int ngroups ;
   kgid_t gid[0U] ;
} __attribute__((__designated_init__));
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
union __anonunion_589 {
   int non_rcu ;
   struct callback_head rcu ;
};
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
struct cred {
   atomic_t usage ;
   atomic_t subscribers ;
   void *put_addr ;
   unsigned int magic ;
   kuid_t uid ;
   kgid_t gid ;
   kuid_t suid ;
   kgid_t sgid ;
   kuid_t euid ;
   kgid_t egid ;
   kuid_t fsuid ;
   kgid_t fsgid ;
   unsigned int securebits ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_bset ;
   kernel_cap_t cap_ambient ;
   unsigned char jit_keyring ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct key *thread_keyring ;
   struct key *request_key_auth ;
   void *security ;
   struct user_struct *user ;
   struct user_namespace *user_ns ;
   struct group_info *group_info ;
   union __anonunion_589 __anonCompField_cred_110 ;
} __attribute__((__designated_init__));
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seq_file.h"
struct seq_file {
   char *buf ;
   size_t size ;
   size_t from ;
   size_t count ;
   size_t pad_until ;
   loff_t index ;
   loff_t read_pos ;
   u64 version ;
   struct mutex lock ;
   struct seq_operations *op ;
   int poll_event ;
   struct file *file ;
   void *private ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seq_file.h"
struct seq_operations {
   void *(*start)(struct seq_file *, loff_t *) ;
   void (*stop)(struct seq_file *, void *) ;
   void *(*next)(struct seq_file *, void *, loff_t *) ;
   int (*show)(struct seq_file *, void *) ;
};
#line 275  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct __anonstruct_possible_net_t_590 {
   struct net *net ;
};
#line 275  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
typedef struct __anonstruct_possible_net_t_590 possible_net_t;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_ets {
   __u8 willing ;
   __u8 ets_cap ;
   __u8 cbs ;
   __u8 tc_tx_bw[8U] ;
   __u8 tc_rx_bw[8U] ;
   __u8 tc_tsa[8U] ;
   __u8 prio_tc[8U] ;
   __u8 tc_reco_bw[8U] ;
   __u8 tc_reco_tsa[8U] ;
   __u8 reco_prio_tc[8U] ;
};
#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_maxrate {
   __u64 tc_maxrate[8U] ;
};
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_qcn {
   __u8 rpg_enable[8U] ;
   __u32 rppp_max_rps[8U] ;
   __u32 rpg_time_reset[8U] ;
   __u32 rpg_byte_reset[8U] ;
   __u32 rpg_threshold[8U] ;
   __u32 rpg_max_rate[8U] ;
   __u32 rpg_ai_rate[8U] ;
   __u32 rpg_hai_rate[8U] ;
   __u32 rpg_gd[8U] ;
   __u32 rpg_min_dec_fac[8U] ;
   __u32 rpg_min_rate[8U] ;
   __u32 cndd_state_machine[8U] ;
};
#line 141  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_qcn_stats {
   __u64 rppp_rp_centiseconds[8U] ;
   __u32 rppp_created_rps[8U] ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_pfc {
   __u8 pfc_cap ;
   __u8 pfc_en ;
   __u8 mbc ;
   __u16 delay ;
   __u64 requests[8U] ;
   __u64 indications[8U] ;
};
#line 168  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcbnl_buffer {
   __u8 prio2buffer[8U] ;
   __u32 buffer_size[8U] ;
   __u32 total_size ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct cee_pg {
   __u8 willing ;
   __u8 error ;
   __u8 pg_en ;
   __u8 tcs_supported ;
   __u8 pg_bw[8U] ;
   __u8 prio_pg[8U] ;
};
#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct cee_pfc {
   __u8 willing ;
   __u8 error ;
   __u8 pfc_en ;
   __u8 tcs_supported ;
};
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcb_app {
   __u8 selector ;
   __u8 priority ;
   __u16 protocol ;
};
#line 259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcb_peer_app_info {
   __u8 willing ;
   __u8 error ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dcbnl.h"
struct dcbnl_rtnl_ops {
   int (*ieee_getets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_setets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_getmaxrate)(struct net_device *, struct ieee_maxrate *) ;
   int (*ieee_setmaxrate)(struct net_device *, struct ieee_maxrate *) ;
   int (*ieee_getqcn)(struct net_device *, struct ieee_qcn *) ;
   int (*ieee_setqcn)(struct net_device *, struct ieee_qcn *) ;
   int (*ieee_getqcnstats)(struct net_device *, struct ieee_qcn_stats *) ;
   int (*ieee_getpfc)(struct net_device *, struct ieee_pfc *) ;
   int (*ieee_setpfc)(struct net_device *, struct ieee_pfc *) ;
   int (*ieee_getapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_setapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_delapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_peer_getets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_peer_getpfc)(struct net_device *, struct ieee_pfc *) ;
   u8 (*getstate)(struct net_device *) ;
   u8 (*setstate)(struct net_device *, u8 ) ;
   void (*getpermhwaddr)(struct net_device *, u8 *) ;
   void (*setpgtccfgtx)(struct net_device *, int , u8 , u8 , u8 , u8 ) ;
   void (*setpgbwgcfgtx)(struct net_device *, int , u8 ) ;
   void (*setpgtccfgrx)(struct net_device *, int , u8 , u8 , u8 , u8 ) ;
   void (*setpgbwgcfgrx)(struct net_device *, int , u8 ) ;
   void (*getpgtccfgtx)(struct net_device *, int , u8 *, u8 *, u8 *, u8 *) ;
   void (*getpgbwgcfgtx)(struct net_device *, int , u8 *) ;
   void (*getpgtccfgrx)(struct net_device *, int , u8 *, u8 *, u8 *, u8 *) ;
   void (*getpgbwgcfgrx)(struct net_device *, int , u8 *) ;
   void (*setpfccfg)(struct net_device *, int , u8 ) ;
   void (*getpfccfg)(struct net_device *, int , u8 *) ;
   u8 (*setall)(struct net_device *) ;
   u8 (*getcap)(struct net_device *, int , u8 *) ;
   int (*getnumtcs)(struct net_device *, int , u8 *) ;
   int (*setnumtcs)(struct net_device *, int , u8 ) ;
   u8 (*getpfcstate)(struct net_device *) ;
   void (*setpfcstate)(struct net_device *, u8 ) ;
   void (*getbcncfg)(struct net_device *, int , u32 *) ;
   void (*setbcncfg)(struct net_device *, int , u32 ) ;
   void (*getbcnrp)(struct net_device *, int , u8 *) ;
   void (*setbcnrp)(struct net_device *, int , u8 ) ;
   int (*setapp)(struct net_device *, u8 , u16 , u8 ) ;
   int (*getapp)(struct net_device *, u8 , u16 ) ;
   u8 (*getfeatcfg)(struct net_device *, int , u8 *) ;
   u8 (*setfeatcfg)(struct net_device *, int , u8 ) ;
   u8 (*getdcbx)(struct net_device *) ;
   u8 (*setdcbx)(struct net_device *, u8 ) ;
   int (*peer_getappinfo)(struct net_device *, struct dcb_peer_app_info *, u16 *) ;
   int (*peer_getapptable)(struct net_device *, struct dcb_app *) ;
   int (*cee_peer_getpg)(struct net_device *, struct cee_pg *) ;
   int (*cee_peer_getpfc)(struct net_device *, struct cee_pfc *) ;
   int (*dcbnl_getbuffer)(struct net_device *, struct dcbnl_buffer *) ;
   int (*dcbnl_setbuffer)(struct net_device *, struct dcbnl_buffer *) ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/taskstats.h"
struct taskstats {
   __u16 version ;
   __u32 ac_exitcode ;
   __u8 ac_flag ;
   __u8 ac_nice ;
   __u64 cpu_count ;
   __u64 cpu_delay_total ;
   __u64 blkio_count ;
   __u64 blkio_delay_total ;
   __u64 swapin_count ;
   __u64 swapin_delay_total ;
   __u64 cpu_run_real_total ;
   __u64 cpu_run_virtual_total ;
   char ac_comm[32U] ;
   __u8 ac_sched ;
   __u8 ac_pad[3U] ;
   __u32 ac_uid ;
   __u32 ac_gid ;
   __u32 ac_pid ;
   __u32 ac_ppid ;
   __u32 ac_btime ;
   __u64 ac_etime ;
   __u64 ac_utime ;
   __u64 ac_stime ;
   __u64 ac_minflt ;
   __u64 ac_majflt ;
   __u64 coremem ;
   __u64 virtmem ;
   __u64 hiwater_rss ;
   __u64 hiwater_vm ;
   __u64 read_char ;
   __u64 write_char ;
   __u64 read_syscalls ;
   __u64 write_syscalls ;
   __u64 read_bytes ;
   __u64 write_bytes ;
   __u64 cancelled_write_bytes ;
   __u64 nvcsw ;
   __u64 nivcsw ;
   __u64 ac_utimescaled ;
   __u64 ac_stimescaled ;
   __u64 cpu_scaled_run_real_total ;
   __u64 freepages_count ;
   __u64 freepages_delay_total ;
   __u64 thrashing_count ;
   __u64 thrashing_delay_total ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/cgroupstats.h"
struct mnt_namespace;
#line 60 
struct uts_namespace;
#line 61 
struct ipc_namespace;
#line 62 
struct cgroup_namespace;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nsproxy.h"
struct nsproxy {
   atomic_t count ;
   struct uts_namespace *uts_ns ;
   struct ipc_namespace *ipc_ns ;
   struct mnt_namespace *mnt_ns ;
   struct pid_namespace *pid_ns_for_children ;
   struct net *net_ns ;
   struct cgroup_namespace *cgroup_ns ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct uid_gid_extent {
   u32 first ;
   u32 lower_first ;
   u32 count ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct __anonstruct_592 {
   struct uid_gid_extent *forward ;
   struct uid_gid_extent *reverse ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
union __anonunion_591 {
   struct uid_gid_extent extent[5U] ;
   struct __anonstruct_592 __anonCompField___anonunion_591_111 ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct uid_gid_map {
   u32 nr_extents ;
   union __anonunion_591 __anonCompField_uid_gid_map_112 ;
};
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct user_namespace {
   struct uid_gid_map uid_map ;
   struct uid_gid_map gid_map ;
   struct uid_gid_map projid_map ;
   atomic_t count ;
   struct user_namespace *parent ;
   int level ;
   kuid_t owner ;
   kgid_t group ;
   struct ns_common ns ;
   unsigned long flags ;
   struct list_head keyring_name_list ;
   struct key *user_keyring_register ;
   struct rw_semaphore keyring_sem ;
   struct key *persistent_keyring_register ;
   struct work_struct work ;
   struct ctl_table_set set ;
   struct ctl_table_header *sysctls ;
   struct ucounts *ucounts ;
   int ucount_max[9U] ;
} __attribute__((__designated_init__));
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct ucounts {
   struct hlist_node node ;
   struct user_namespace *ns ;
   kuid_t uid ;
   int count ;
   atomic_t ucount[9U] ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_insn {
   __u8 code ;
   __u8 dst_reg : 4 ;
   __u8 src_reg : 4 ;
   __s16 off ;
   __s32 imm ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_cgroup_storage_key {
   __u64 cgroup_inode_id ;
   __u32 attach_type ;
};
#line 110 
enum bpf_map_type {
    BPF_MAP_TYPE_UNSPEC = 0,
    BPF_MAP_TYPE_HASH = 1,
    BPF_MAP_TYPE_ARRAY = 2,
    BPF_MAP_TYPE_PROG_ARRAY = 3,
    BPF_MAP_TYPE_PERF_EVENT_ARRAY = 4,
    BPF_MAP_TYPE_PERCPU_HASH = 5,
    BPF_MAP_TYPE_PERCPU_ARRAY = 6,
    BPF_MAP_TYPE_STACK_TRACE = 7,
    BPF_MAP_TYPE_CGROUP_ARRAY = 8,
    BPF_MAP_TYPE_LRU_HASH = 9,
    BPF_MAP_TYPE_LRU_PERCPU_HASH = 10,
    BPF_MAP_TYPE_LPM_TRIE = 11,
    BPF_MAP_TYPE_ARRAY_OF_MAPS = 12,
    BPF_MAP_TYPE_HASH_OF_MAPS = 13,
    BPF_MAP_TYPE_DEVMAP = 14,
    BPF_MAP_TYPE_SOCKMAP = 15,
    BPF_MAP_TYPE_CPUMAP = 16,
    BPF_MAP_TYPE_XSKMAP = 17,
    BPF_MAP_TYPE_SOCKHASH = 18,
    BPF_MAP_TYPE_CGROUP_STORAGE = 19,
    BPF_MAP_TYPE_REUSEPORT_SOCKARRAY = 20,
    BPF_MAP_TYPE_PERCPU_CGROUP_STORAGE = 21,
    BPF_MAP_TYPE_QUEUE = 22,
    BPF_MAP_TYPE_STACK = 23,
    BPF_MAP_TYPE_SK_STORAGE = 24,
    BPF_MAP_TYPE_DEVMAP_HASH = 25
};
#line 139 
enum bpf_prog_type {
    BPF_PROG_TYPE_UNSPEC = 0,
    BPF_PROG_TYPE_SOCKET_FILTER = 1,
    BPF_PROG_TYPE_KPROBE = 2,
    BPF_PROG_TYPE_SCHED_CLS = 3,
    BPF_PROG_TYPE_SCHED_ACT = 4,
    BPF_PROG_TYPE_TRACEPOINT = 5,
    BPF_PROG_TYPE_XDP = 6,
    BPF_PROG_TYPE_PERF_EVENT = 7,
    BPF_PROG_TYPE_CGROUP_SKB = 8,
    BPF_PROG_TYPE_CGROUP_SOCK = 9,
    BPF_PROG_TYPE_LWT_IN = 10,
    BPF_PROG_TYPE_LWT_OUT = 11,
    BPF_PROG_TYPE_LWT_XMIT = 12,
    BPF_PROG_TYPE_SOCK_OPS = 13,
    BPF_PROG_TYPE_SK_SKB = 14,
    BPF_PROG_TYPE_CGROUP_DEVICE = 15,
    BPF_PROG_TYPE_SK_MSG = 16,
    BPF_PROG_TYPE_RAW_TRACEPOINT = 17,
    BPF_PROG_TYPE_CGROUP_SOCK_ADDR = 18,
    BPF_PROG_TYPE_LWT_SEG6LOCAL = 19,
    BPF_PROG_TYPE_LIRC_MODE2 = 20,
    BPF_PROG_TYPE_SK_REUSEPORT = 21,
    BPF_PROG_TYPE_FLOW_DISSECTOR = 22,
    BPF_PROG_TYPE_CGROUP_SYSCTL = 23,
    BPF_PROG_TYPE_RAW_TRACEPOINT_WRITABLE = 24,
    BPF_PROG_TYPE_CGROUP_SOCKOPT = 25,
    BPF_PROG_TYPE_TRACING = 26
};
#line 169 
enum bpf_attach_type {
    BPF_CGROUP_INET_INGRESS = 0,
    BPF_CGROUP_INET_EGRESS = 1,
    BPF_CGROUP_INET_SOCK_CREATE = 2,
    BPF_CGROUP_SOCK_OPS = 3,
    BPF_SK_SKB_STREAM_PARSER = 4,
    BPF_SK_SKB_STREAM_VERDICT = 5,
    BPF_CGROUP_DEVICE = 6,
    BPF_SK_MSG_VERDICT = 7,
    BPF_CGROUP_INET4_BIND = 8,
    BPF_CGROUP_INET6_BIND = 9,
    BPF_CGROUP_INET4_CONNECT = 10,
    BPF_CGROUP_INET6_CONNECT = 11,
    BPF_CGROUP_INET4_POST_BIND = 12,
    BPF_CGROUP_INET6_POST_BIND = 13,
    BPF_CGROUP_UDP4_SENDMSG = 14,
    BPF_CGROUP_UDP6_SENDMSG = 15,
    BPF_LIRC_MODE2 = 16,
    BPF_FLOW_DISSECTOR = 17,
    BPF_CGROUP_SYSCTL = 18,
    BPF_CGROUP_UDP4_RECVMSG = 19,
    BPF_CGROUP_UDP6_RECVMSG = 20,
    BPF_CGROUP_GETSOCKOPT = 21,
    BPF_CGROUP_SETSOCKOPT = 22,
    BPF_TRACE_RAW_TP = 23,
    BPF_TRACE_FENTRY = 24,
    BPF_TRACE_FEXIT = 25,
    __MAX_BPF_ATTACH_TYPE = 26
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_594 {
   __u32 map_type ;
   __u32 key_size ;
   __u32 value_size ;
   __u32 max_entries ;
   __u32 map_flags ;
   __u32 inner_map_fd ;
   __u32 numa_node ;
   char map_name[16U] ;
   __u32 map_ifindex ;
   __u32 btf_fd ;
   __u32 btf_key_type_id ;
   __u32 btf_value_type_id ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union __anonunion_596 {
   __u64 value ;
   __u64 next_key ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_595 {
   __u32 map_fd ;
   __u64 key ;
   union __anonunion_596 __anonCompField___anonstruct_595_115 ;
   __u64 flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_597 {
   __u32 prog_type ;
   __u32 insn_cnt ;
   __u64 insns ;
   __u64 license ;
   __u32 log_level ;
   __u32 log_size ;
   __u64 log_buf ;
   __u32 kern_version ;
   __u32 prog_flags ;
   char prog_name[16U] ;
   __u32 prog_ifindex ;
   __u32 expected_attach_type ;
   __u32 prog_btf_fd ;
   __u32 func_info_rec_size ;
   __u64 func_info ;
   __u32 func_info_cnt ;
   __u32 line_info_rec_size ;
   __u64 line_info ;
   __u32 line_info_cnt ;
   __u32 attach_btf_id ;
   __u32 attach_prog_fd ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_598 {
   __u64 pathname ;
   __u32 bpf_fd ;
   __u32 file_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_599 {
   __u32 target_fd ;
   __u32 attach_bpf_fd ;
   __u32 attach_type ;
   __u32 attach_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_test_600 {
   __u32 prog_fd ;
   __u32 retval ;
   __u32 data_size_in ;
   __u32 data_size_out ;
   __u64 data_in ;
   __u64 data_out ;
   __u32 repeat ;
   __u32 duration ;
   __u32 ctx_size_in ;
   __u32 ctx_size_out ;
   __u64 ctx_in ;
   __u64 ctx_out ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union __anonunion_602 {
   __u32 start_id ;
   __u32 prog_id ;
   __u32 map_id ;
   __u32 btf_id ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_601 {
   union __anonunion_602 __anonCompField___anonstruct_601_120 ;
   __u32 next_id ;
   __u32 open_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_info_603 {
   __u32 bpf_fd ;
   __u32 info_len ;
   __u64 info ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_query_604 {
   __u32 target_fd ;
   __u32 attach_type ;
   __u32 query_flags ;
   __u32 attach_flags ;
   __u64 prog_ids ;
   __u32 prog_cnt ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_raw_tracepoint_605 {
   __u64 name ;
   __u32 prog_fd ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_606 {
   __u64 btf ;
   __u64 btf_log_buf ;
   __u32 btf_size ;
   __u32 btf_log_size ;
   __u32 btf_log_level ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_task_fd_query_607 {
   __u32 pid ;
   __u32 fd ;
   __u32 flags ;
   __u32 buf_len ;
   __u64 buf ;
   __u32 prog_id ;
   __u32 fd_type ;
   __u64 probe_offset ;
   __u64 probe_addr ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union bpf_attr {
   struct __anonstruct_594 __anonCompField_bpf_attr_114 ;
   struct __anonstruct_595 __anonCompField_bpf_attr_116 ;
   struct __anonstruct_597 __anonCompField_bpf_attr_117 ;
   struct __anonstruct_598 __anonCompField_bpf_attr_118 ;
   struct __anonstruct_599 __anonCompField_bpf_attr_119 ;
   struct __anonstruct_test_600 test ;
   struct __anonstruct_601 __anonCompField_bpf_attr_121 ;
   struct __anonstruct_info_603 info ;
   struct __anonstruct_query_604 query ;
   struct __anonstruct_raw_tracepoint_605 raw_tracepoint ;
   struct __anonstruct_606 __anonCompField_bpf_attr_122 ;
   struct __anonstruct_task_fd_query_607 task_fd_query ;
} __attribute__((__aligned__(8)));
#line 3653  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_func_info {
   __u32 insn_off ;
   __u32 type_id ;
};
#line 3661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_line_info {
   __u32 insn_off ;
   __u32 file_name_off ;
   __u32 line_off ;
   __u32 line_col ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree_latch.h"
struct latch_tree_node {
   struct rb_node node[2U] ;
};
#line 215 
struct bpf_prog_aux;
#line 216 
struct bpf_map;
#line 217 
struct btf;
#line 218 
struct btf_type;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_ops {
   int (*map_alloc_check)(union bpf_attr *) ;
   struct bpf_map *(*map_alloc)(union bpf_attr *) ;
   void (*map_release)(struct bpf_map *, struct file *) ;
   void (*map_free)(struct bpf_map *) ;
   int (*map_get_next_key)(struct bpf_map *, void *, void *) ;
   void (*map_release_uref)(struct bpf_map *) ;
   void *(*map_lookup_elem_sys_only)(struct bpf_map *, void *) ;
   void *(*map_lookup_elem)(struct bpf_map *, void *) ;
   int (*map_update_elem)(struct bpf_map *, void *, void *, u64 ) ;
   int (*map_delete_elem)(struct bpf_map *, void *) ;
   int (*map_push_elem)(struct bpf_map *, void *, u64 ) ;
   int (*map_pop_elem)(struct bpf_map *, void *) ;
   int (*map_peek_elem)(struct bpf_map *, void *) ;
   void *(*map_fd_get_ptr)(struct bpf_map *, struct file *, int ) ;
   void (*map_fd_put_ptr)(void *) ;
   u32 (*map_gen_lookup)(struct bpf_map *, struct bpf_insn *) ;
   u32 (*map_fd_sys_lookup_elem)(void *) ;
   void (*map_seq_show_elem)(struct bpf_map *, void *, struct seq_file *) ;
   int (*map_check_btf)(struct bpf_map *, struct btf *, struct btf_type *, struct btf_type *) ;
   int (*map_poke_track)(struct bpf_map *, struct bpf_prog_aux *) ;
   void (*map_poke_untrack)(struct bpf_map *, struct bpf_prog_aux *) ;
   void (*map_poke_run)(struct bpf_map *, u32 , struct bpf_prog *, struct bpf_prog *) ;
   int (*map_direct_value_addr)(struct bpf_map *, u64 *, u32 ) ;
   int (*map_direct_value_meta)(struct bpf_map *, u64 , u32 *) ;
   int (*map_mmap)(struct bpf_map *, struct vm_area_struct *) ;
};
#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_memory {
   u32 pages ;
   struct user_struct *user ;
};
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map {
   struct bpf_map_ops *ops ;
   struct bpf_map *inner_map_meta ;
   void *security ;
   enum bpf_map_type map_type ;
   u32 key_size ;
   u32 value_size ;
   u32 max_entries ;
   u32 map_flags ;
   int spin_lock_off ;
   u32 id ;
   int numa_node ;
   u32 btf_key_type_id ;
   u32 btf_value_type_id ;
   struct btf *btf ;
   struct bpf_map_memory memory ;
   char name[16U] ;
   bool unpriv_array ;
   bool frozen ;
   atomic64_t refcnt ;
   atomic64_t usercnt ;
   struct work_struct work ;
   struct mutex freeze_mutex ;
   u64 writecnt ;
};
#line 151 
struct bpf_offload_dev;
#line 152 
struct bpf_offloaded_map;
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_dev_ops {
   int (*map_get_next_key)(struct bpf_offloaded_map *, void *, void *) ;
   int (*map_lookup_elem)(struct bpf_offloaded_map *, void *, void *) ;
   int (*map_update_elem)(struct bpf_offloaded_map *, void *, void *, u64 ) ;
   int (*map_delete_elem)(struct bpf_offloaded_map *, void *) ;
};
#line 166  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_offloaded_map {
   struct bpf_map map ;
   struct net_device *netdev ;
   struct bpf_map_dev_ops *dev_ops ;
   void *dev_priv ;
   struct list_head offloads ;
};
#line 327  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_ops {
   int (*test_run)(struct bpf_prog *, union bpf_attr *, union bpf_attr *) ;
};
#line 369  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_offload {
   struct bpf_prog *prog ;
   struct net_device *netdev ;
   struct bpf_offload_dev *offdev ;
   void *dev_priv ;
   struct list_head offloads ;
   bool dev_state ;
   bool opt_failed ;
   void *jited_image ;
   u32 jited_len ;
};
#line 394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_stats {
   u64 cnt ;
   u64 nsecs ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 400  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct btf_func_model {
   u8 ret_size ;
   u8 nr_args ;
   u8 arg_size[12U] ;
};
#line 447 
enum bpf_tramp_prog_type {
    BPF_TRAMP_FENTRY = 0,
    BPF_TRAMP_FEXIT = 1,
    BPF_TRAMP_MAX = 2
};
#line 454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct __anonstruct_func_640 {
   struct btf_func_model model ;
   void *addr ;
   bool ftrace_managed ;
};
#line 454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_trampoline {
   struct hlist_node hlist ;
   struct mutex mutex ;
   refcount_t refcnt ;
   u64 key ;
   struct __anonstruct_func_640 func ;
   struct hlist_head progs_hlist[2U] ;
   int progs_cnt[2U] ;
   void *image ;
   u64 selector ;
};
#line 495  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_func_info_aux {
   bool unreliable ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct __anonstruct_tail_call_642 {
   struct bpf_map *map ;
   u32 key ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
union __anonunion_641 {
   struct __anonstruct_tail_call_642 tail_call ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_jit_poke_descriptor {
   void *ip ;
   union __anonunion_641 __anonCompField_bpf_jit_poke_descriptor_147 ;
   bool ip_stable ;
   u8 adj_off ;
   u16 reason ;
};
#line 517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
union __anonunion_643 {
   struct work_struct work ;
   struct callback_head rcu ;
};
#line 517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_aux {
   atomic64_t refcnt ;
   u32 used_map_cnt ;
   u32 max_ctx_offset ;
   u32 max_pkt_offset ;
   u32 max_tp_access ;
   u32 stack_depth ;
   u32 id ;
   u32 func_cnt ;
   u32 func_idx ;
   u32 attach_btf_id ;
   struct bpf_prog *linked_prog ;
   bool verifier_zext ;
   bool offload_requested ;
   bool attach_btf_trace ;
   bool func_proto_unreliable ;
   enum bpf_tramp_prog_type trampoline_prog_type ;
   struct bpf_trampoline *trampoline ;
   struct hlist_node tramp_hlist ;
   struct btf_type *attach_func_proto ;
   char *attach_func_name ;
   struct bpf_prog **func ;
   void *jit_data ;
   struct bpf_jit_poke_descriptor *poke_tab ;
   u32 size_poke_tab ;
   struct latch_tree_node ksym_tnode ;
   struct list_head ksym_lnode ;
   struct bpf_prog_ops *ops ;
   struct bpf_map **used_maps ;
   struct bpf_prog *prog ;
   struct user_struct *user ;
   u64 load_time ;
   struct bpf_map *cgroup_storage[2U] ;
   char name[16U] ;
   void *security ;
   struct bpf_prog_offload *offload ;
   struct btf *btf ;
   struct bpf_func_info *func_info ;
   struct bpf_func_info_aux *func_info_aux ;
   struct bpf_line_info *linfo ;
   void **jited_linfo ;
   u32 func_info_cnt ;
   u32 nr_linfo ;
   u32 linfo_idx ;
   u32 num_exentries ;
   struct exception_table_entry *extable ;
   struct bpf_prog_stats *stats ;
   union __anonunion_643 __anonCompField_bpf_prog_aux_148 ;
};
#line 686 
struct bpf_cgroup_storage;
#line 686  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_array_item {
   struct bpf_prog *prog ;
   struct bpf_cgroup_storage *cgroup_storage[2U] ;
};
#line 691  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_array {
   struct callback_head rcu ;
   struct bpf_prog_array_item items[0U] ;
};
#line 1335 
struct cgroup;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_cgroup_storage_map;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_storage_buffer {
   struct callback_head rcu ;
   char data[0U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
union __anonunion_645 {
   struct bpf_storage_buffer *buf ;
   void *percpu_buf ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_cgroup_storage {
   union __anonunion_645 __anonCompField_bpf_cgroup_storage_150 ;
   struct bpf_cgroup_storage_map *map ;
   struct bpf_cgroup_storage_key key ;
   struct list_head list ;
   struct rb_node node ;
   struct callback_head rcu ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct cgroup_bpf {
   struct bpf_prog_array *effective[26U] ;
   struct list_head progs[26U] ;
   u32 flags[26U] ;
   struct bpf_prog_array *inactive ;
   struct percpu_ref refcnt ;
   struct work_struct release_work ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_work;
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_worker {
   unsigned int flags ;
   raw_spinlock_t lock ;
   struct list_head work_list ;
   struct list_head delayed_work_list ;
   struct task_struct *task ;
   struct kthread_work *current_work ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_work {
   struct list_head node ;
   void (*func)(struct kthread_work *) ;
   struct kthread_worker *worker ;
   int canceling ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_delayed_work {
   struct kthread_work work ;
   struct timer_list timer ;
};
#line 199 
struct cgroup_subsys_state;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/psi_types.h"
struct psi_group_cpu {
   seqcount_t seq ;
   unsigned int tasks[3U] ;
   u32 state_mask ;
   u32 times[6U] ;
   u64 state_start ;
   u32 times_prev[2U][6U] ;
};
#line 96 
struct psi_group;
#line 128  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/psi_types.h"
struct psi_group {
   struct mutex avgs_lock ;
   struct psi_group_cpu *pcpu ;
   u64 avg_total[5U] ;
   u64 avg_last_update ;
   u64 avg_next_update ;
   struct delayed_work avgs_work ;
   u64 total[2U][5U] ;
   unsigned long avg[5U][3U] ;
   atomic_t poll_scheduled ;
   struct kthread_worker *poll_kworker ;
   struct kthread_delayed_work poll_work ;
   struct mutex trigger_lock ;
   struct list_head triggers ;
   u32 nr_triggers[5U] ;
   u32 poll_states ;
   u64 poll_min_period ;
   u64 polling_total[5U] ;
   u64 polling_next_update ;
   u64 polling_until ;
};
#line 166 
struct cgroup_root;
#line 167 
struct cgroup_subsys;
#line 168 
struct cgroup_taskset;
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_file {
   struct kernfs_node *kn ;
   unsigned long notified_at ;
   struct timer_list notify_timer ;
};
#line 133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_subsys_state {
   struct cgroup *cgroup ;
   struct cgroup_subsys *ss ;
   struct percpu_ref refcnt ;
   struct list_head sibling ;
   struct list_head children ;
   struct list_head rstat_css_node ;
   int id ;
   unsigned int flags ;
   u64 serial_nr ;
   atomic_t online_cnt ;
   struct work_struct destroy_work ;
   struct rcu_work destroy_rwork ;
   struct cgroup_subsys_state *parent ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct css_set {
   struct cgroup_subsys_state *subsys[14U] ;
   refcount_t refcount ;
   struct css_set *dom_cset ;
   struct cgroup *dfl_cgrp ;
   int nr_tasks ;
   struct list_head tasks ;
   struct list_head mg_tasks ;
   struct list_head dying_tasks ;
   struct list_head task_iters ;
   struct list_head e_cset_node[14U] ;
   struct list_head threaded_csets ;
   struct list_head threaded_csets_node ;
   struct hlist_node hlist ;
   struct list_head cgrp_links ;
   struct list_head mg_preload_node ;
   struct list_head mg_node ;
   struct cgroup *mg_src_cgrp ;
   struct cgroup *mg_dst_cgrp ;
   struct css_set *mg_dst_cset ;
   bool dead ;
   struct callback_head callback_head ;
};
#line 279  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_base_stat {
   struct task_cputime cputime ;
};
#line 303  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_rstat_cpu {
   struct u64_stats_sync bsync ;
   struct cgroup_base_stat bstat ;
   struct cgroup_base_stat last_bstat ;
   struct cgroup *updated_children ;
   struct cgroup *updated_next ;
};
#line 332  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_freezer_state {
   bool freeze ;
   int e_freeze ;
   int nr_frozen_descendants ;
   int nr_frozen_tasks ;
};
#line 351  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup {
   struct cgroup_subsys_state self ;
   unsigned long flags ;
   int level ;
   int max_depth ;
   int nr_descendants ;
   int nr_dying_descendants ;
   int max_descendants ;
   int nr_populated_csets ;
   int nr_populated_domain_children ;
   int nr_populated_threaded_children ;
   int nr_threaded_children ;
   struct kernfs_node *kn ;
   struct cgroup_file procs_file ;
   struct cgroup_file events_file ;
   u16 subtree_control ;
   u16 subtree_ss_mask ;
   u16 old_subtree_control ;
   u16 old_subtree_ss_mask ;
   struct cgroup_subsys_state *subsys[14U] ;
   struct cgroup_root *root ;
   struct list_head cset_links ;
   struct list_head e_csets[14U] ;
   struct cgroup *dom_cgrp ;
   struct cgroup *old_dom_cgrp ;
   struct cgroup_rstat_cpu *rstat_cpu ;
   struct list_head rstat_css_list ;
   struct cgroup_base_stat last_bstat ;
   struct cgroup_base_stat bstat ;
   struct prev_cputime prev_cputime ;
   struct list_head pidlists ;
   struct mutex pidlist_mutex ;
   wait_queue_head_t offline_waitq ;
   struct work_struct release_agent_work ;
   struct psi_group psi ;
   struct cgroup_bpf bpf ;
   atomic_t congestion_count ;
   struct cgroup_freezer_state freezer ;
   u64 ancestor_ids[] ;
};
#line 489  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_root {
   struct kernfs_root *kf_root ;
   unsigned int subsys_mask ;
   int hierarchy_id ;
   struct cgroup cgrp ;
   u64 cgrp_ancestor_id_storage ;
   atomic_t nr_cgrps ;
   struct list_head root_list ;
   unsigned int flags ;
   char release_agent_path[4096U] ;
   char name[64U] ;
};
#line 527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cftype {
   char name[64U] ;
   unsigned long private ;
   size_t max_write_len ;
   unsigned int flags ;
   unsigned int file_offset ;
   struct cgroup_subsys *ss ;
   struct list_head node ;
   struct kernfs_ops *kf_ops ;
   int (*open)(struct kernfs_open_file *) ;
   void (*release)(struct kernfs_open_file *) ;
   u64 (*read_u64)(struct cgroup_subsys_state *, struct cftype *) ;
   s64 (*read_s64)(struct cgroup_subsys_state *, struct cftype *) ;
   int (*seq_show)(struct seq_file *, void *) ;
   void *(*seq_start)(struct seq_file *, loff_t *) ;
   void *(*seq_next)(struct seq_file *, void *, loff_t *) ;
   void (*seq_stop)(struct seq_file *, void *) ;
   int (*write_u64)(struct cgroup_subsys_state *, struct cftype *, u64 ) ;
   int (*write_s64)(struct cgroup_subsys_state *, struct cftype *, s64 ) ;
   ssize_t (*write)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   __poll_t (*poll)(struct kernfs_open_file *, struct poll_table_struct *) ;
   struct lock_class_key lockdep_key ;
};
#line 616  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_subsys {
   struct cgroup_subsys_state *(*css_alloc)(struct cgroup_subsys_state *) ;
   int (*css_online)(struct cgroup_subsys_state *) ;
   void (*css_offline)(struct cgroup_subsys_state *) ;
   void (*css_released)(struct cgroup_subsys_state *) ;
   void (*css_free)(struct cgroup_subsys_state *) ;
   void (*css_reset)(struct cgroup_subsys_state *) ;
   void (*css_rstat_flush)(struct cgroup_subsys_state *, int ) ;
   int (*css_extra_stat_show)(struct seq_file *, struct cgroup_subsys_state *) ;
   int (*can_attach)(struct cgroup_taskset *) ;
   void (*cancel_attach)(struct cgroup_taskset *) ;
   void (*attach)(struct cgroup_taskset *) ;
   void (*post_attach)(void) ;
   int (*can_fork)(struct task_struct *) ;
   void (*cancel_fork)(struct task_struct *) ;
   void (*fork)(struct task_struct *) ;
   void (*exit)(struct task_struct *) ;
   void (*release)(struct task_struct *) ;
   void (*bind)(struct cgroup_subsys_state *) ;
   bool early_init : 1 ;
   bool implicit_on_dfl : 1 ;
   bool threaded : 1 ;
   bool broken_hierarchy : 1 ;
   bool warned_broken_hierarchy : 1 ;
   int id ;
   char *name ;
   char *legacy_name ;
   struct cgroup_root *root ;
   struct idr css_idr ;
   struct list_head cfts ;
   struct cftype *dfl_cftypes ;
   struct cftype *legacy_cftypes ;
   unsigned int depends_on ;
};
#line 783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct __anonstruct_647 {
   u8 is_data ;
   u8 padding ;
   u16 prioidx ;
   u32 classid ;
} __attribute__((__packed__));
#line 783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
union __anonunion_646 {
   struct __anonstruct_647 __anonCompField___anonunion_646_151 ;
   u64 val ;
};
#line 783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct sock_cgroup_data {
   union __anonunion_646 __anonCompField_sock_cgroup_data_152 ;
};
#line 848  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup.h"
struct cgroup_namespace {
   refcount_t count ;
   struct ns_common ns ;
   struct user_namespace *user_ns ;
   struct ucounts *ucounts ;
   struct css_set *root_cset ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netprio_cgroup.h"
struct netprio_map {
   struct callback_head rcu ;
   u32 priomap_len ;
   u32 priomap[] ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_mem_info {
   u32 type ;
   u32 id ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_rxq_info {
   struct net_device *dev ;
   u32 queue_index ;
   u32 reg_state ;
   struct xdp_mem_info mem ;
} __attribute__((__aligned__(64)));
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_frame {
   void *data ;
   u16 len ;
   u16 headroom ;
   u16 metasize ;
   struct xdp_mem_info mem ;
   struct net_device *dev_rx ;
};
#line 175 
struct netdev_bpf;
#line 160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/security.h"
struct xfrm_policy;
#line 161 
struct xfrm_state;
#line 178 
struct request_sock;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct sighand_struct {
   spinlock_t siglock ;
   refcount_t count ;
   wait_queue_head_t signalfd_wqh ;
   struct k_sigaction action[64U] ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   u64 ac_utime ;
   u64 ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct cpu_itimer {
   u64 expires ;
   u64 incr ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct task_cputime_atomic {
   atomic64_t utime ;
   atomic64_t stime ;
   atomic64_t sum_exec_runtime ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct thread_group_cputimer {
   struct task_cputime_atomic cputime_atomic ;
};
#line 80 
struct tty_struct;
#line 80 
struct autogroup;
#line 80 
struct tty_audit_buf;
#line 80  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct signal_struct {
   refcount_t sigcnt ;
   atomic_t live ;
   int nr_threads ;
   struct list_head thread_head ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   struct hlist_head multiprocess ;
   int group_exit_code ;
   int notify_count ;
   struct task_struct *group_exit_task ;
   int group_stop_count ;
   unsigned int flags ;
   unsigned int is_child_subreaper : 1 ;
   unsigned int has_child_subreaper : 1 ;
   int posix_timer_id ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   ktime_t it_real_incr ;
   struct cpu_itimer it[2U] ;
   struct thread_group_cputimer cputimer ;
   struct posix_cputimers posix_cputimers ;
   struct pid *pids[4U] ;
   struct pid *tty_old_pgrp ;
   int leader ;
   struct tty_struct *tty ;
   struct autogroup *autogroup ;
   seqlock_t stats_lock ;
   u64 utime ;
   u64 stime ;
   u64 cutime ;
   u64 cstime ;
   u64 gtime ;
   u64 cgtime ;
   struct prev_cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   unsigned long maxrss ;
   unsigned long cmaxrss ;
   struct task_io_accounting ioac ;
   unsigned long long sum_sched_runtime ;
   struct rlimit rlim[16U] ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   struct tty_audit_buf *tty_audit_buf ;
   bool oom_flag_origin ;
   short oom_score_adj ;
   short oom_score_adj_min ;
   struct mm_struct *oom_mm ;
   struct mutex cred_guard_mutex ;
} __attribute__((__designated_init__));
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netlink.h"
struct nlmsghdr {
   __u32 nlmsg_len ;
   __u16 nlmsg_type ;
   __u16 nlmsg_flags ;
   __u32 nlmsg_seq ;
   __u32 nlmsg_pid ;
};
#line 211  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netlink.h"
struct nlattr {
   __u16 nla_len ;
   __u16 nla_type ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
struct netlink_ext_ack {
   char *_msg ;
   struct nlattr *bad_attr ;
   u8 cookie[20U] ;
   u8 cookie_len ;
};
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
union __anonunion_670 {
   u8 ctx[48U] ;
   long args[6U] ;
};
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
struct netlink_callback {
   struct sk_buff *skb ;
   struct nlmsghdr *nlh ;
   int (*dump)(struct sk_buff *, struct netlink_callback *) ;
   int (*done)(struct netlink_callback *) ;
   void *data ;
   struct module *module ;
   struct netlink_ext_ack *extack ;
   u16 family ;
   u16 min_dump_alloc ;
   bool strict_check ;
   u16 answer_flags ;
   unsigned int prev_seq ;
   unsigned int seq ;
   union __anonunion_670 __anonCompField_netlink_callback_153 ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/neighbour.h"
struct ndmsg {
   __u8 ndm_family ;
   __u8 ndm_pad1 ;
   __u16 ndm_pad2 ;
   __s32 ndm_ifindex ;
   __u16 ndm_state ;
   __u8 ndm_flags ;
   __u8 ndm_type ;
};
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_link.h"
struct rtnl_link_stats64 {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 rx_errors ;
   __u64 tx_errors ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
   __u64 multicast ;
   __u64 collisions ;
   __u64 rx_length_errors ;
   __u64 rx_over_errors ;
   __u64 rx_crc_errors ;
   __u64 rx_frame_errors ;
   __u64 rx_fifo_errors ;
   __u64 rx_missed_errors ;
   __u64 tx_aborted_errors ;
   __u64 tx_carrier_errors ;
   __u64 tx_fifo_errors ;
   __u64 tx_heartbeat_errors ;
   __u64 tx_window_errors ;
   __u64 rx_compressed ;
   __u64 tx_compressed ;
   __u64 rx_nohandler ;
};
#line 753  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_link.h"
struct ifla_vf_guid {
   __u32 vf ;
   __u64 guid ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_link.h"
struct ifla_vf_stats {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 broadcast ;
   __u64 multicast ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_link.h"
struct ifla_vf_info {
   __u32 vf ;
   __u8 mac[32U] ;
   __u32 vlan ;
   __u32 qos ;
   __u32 spoofchk ;
   __u32 linkstate ;
   __u32 min_tx_rate ;
   __u32 max_tx_rate ;
   __u32 rss_query_en ;
   __u32 trusted ;
   __be16 vlan_proto ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/pkt_sched.h"
struct tc_stats {
   __u64 bytes ;
   __u32 packets ;
   __u32 drops ;
   __u32 overlimits ;
   __u32 bps ;
   __u32 pps ;
   __u32 qlen ;
   __u32 backlog ;
};
#line 102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/pkt_sched.h"
struct tc_sizespec {
   unsigned char cell_log ;
   unsigned char size_log ;
   short cell_align ;
   int overhead ;
   unsigned int linklayer ;
   unsigned int mpu ;
   unsigned int mtu ;
   unsigned int tsize ;
};
#line 118  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hashtable.h"
struct netpoll_info;
#line 119 
struct phy_device;
#line 120 
struct dsa_port;
#line 121 
struct sfp_bus;
#line 122 
struct wireless_dev;
#line 123 
struct wpan_dev;
#line 124 
struct mpls_dev;
#line 125 
struct udp_tunnel_info;
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
enum netdev_tx {
    __NETDEV_TX_MIN = -2147483648,
    NETDEV_TX_OK = 0,
    NETDEV_TX_BUSY = 16
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef enum netdev_tx netdev_tx_t;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device_stats {
   unsigned long rx_packets ;
   unsigned long tx_packets ;
   unsigned long rx_bytes ;
   unsigned long tx_bytes ;
   unsigned long rx_errors ;
   unsigned long tx_errors ;
   unsigned long rx_dropped ;
   unsigned long tx_dropped ;
   unsigned long multicast ;
   unsigned long collisions ;
   unsigned long rx_length_errors ;
   unsigned long rx_over_errors ;
   unsigned long rx_crc_errors ;
   unsigned long rx_frame_errors ;
   unsigned long rx_fifo_errors ;
   unsigned long rx_missed_errors ;
   unsigned long tx_aborted_errors ;
   unsigned long tx_carrier_errors ;
   unsigned long tx_fifo_errors ;
   unsigned long tx_heartbeat_errors ;
   unsigned long tx_window_errors ;
   unsigned long rx_compressed ;
   unsigned long tx_compressed ;
};
#line 195 
struct neigh_parms;
#line 217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_hw_addr_list {
   struct list_head list ;
   int count ;
};
#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct hh_cache {
   unsigned int hh_len ;
   seqlock_t hh_lock ;
   unsigned long hh_data[16U] ;
};
#line 263  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct header_ops {
   int (*create)(struct sk_buff *, struct net_device *, unsigned short , void *, void *, unsigned int ) ;
   int (*parse)(struct sk_buff *, unsigned char *) ;
   int (*cache)(struct neighbour *, struct hh_cache *, __be16 ) ;
   void (*cache_update)(struct hh_cache *, struct net_device *, unsigned char *) ;
   bool (*validate)(char *, unsigned int ) ;
   __be16 (*parse_protocol)(struct sk_buff *) ;
};
#line 302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct gro_list {
   struct list_head list ;
   int count ;
};
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct napi_struct {
   struct list_head poll_list ;
   unsigned long state ;
   int weight ;
   unsigned long gro_bitmask ;
   int (*poll)(struct napi_struct *, int ) ;
   int poll_owner ;
   struct net_device *dev ;
   struct gro_list gro_hash[8U] ;
   struct sk_buff *skb ;
   struct list_head rx_list ;
   int rx_count ;
   struct hrtimer timer ;
   struct list_head dev_list ;
   struct hlist_node napi_hash_node ;
   unsigned int napi_id ;
};
#line 372 
enum rx_handler_result {
    RX_HANDLER_CONSUMED = 0,
    RX_HANDLER_ANOTHER = 1,
    RX_HANDLER_EXACT = 2,
    RX_HANDLER_PASS = 3
};
#line 379  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef enum rx_handler_result rx_handler_result_t;
#line 421  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef rx_handler_result_t rx_handler_func_t(struct sk_buff **);
#line 589 
struct Qdisc;
#line 589 
struct xdp_umem;
#line 589  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_queue {
   struct net_device *dev ;
   struct Qdisc *qdisc ;
   struct Qdisc *qdisc_sleeping ;
   struct kobject kobj ;
   int numa_node ;
   unsigned long tx_maxrate ;
   unsigned long trans_timeout ;
   struct net_device *sb_dev ;
   struct xdp_umem *umem ;
   spinlock_t _xmit_lock ;
   int xmit_lock_owner ;
   unsigned long trans_start ;
   unsigned long state ;
   struct dql dql ;
} __attribute__((__aligned__(64)));
#line 662  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_map {
   unsigned int len ;
   struct callback_head rcu ;
   u16 cpus[0U] ;
};
#line 674  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_dev_flow {
   u16 cpu ;
   u16 filter ;
   unsigned int last_qtail ;
};
#line 684  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_dev_flow_table {
   unsigned int mask ;
   struct callback_head rcu ;
   struct rps_dev_flow flows[0U] ;
};
#line 736  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_rx_queue {
   struct rps_map *rps_map ;
   struct rps_dev_flow_table *rps_flow_table ;
   struct kobject kobj ;
   struct net_device *dev ;
   struct xdp_rxq_info xdp_rxq ;
   struct xdp_umem *umem ;
} __attribute__((__aligned__(64)));
#line 764  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xps_map {
   unsigned int len ;
   unsigned int alloc_len ;
   struct callback_head rcu ;
   u16 queues[0U] ;
};
#line 777  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xps_dev_maps {
   struct callback_head rcu ;
   struct xps_map *attr_map[0U] ;
};
#line 793  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_tc_txq {
   u16 count ;
   u16 offset ;
};
#line 803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_fcoe_hbainfo {
   char manufacturer[64U] ;
   char serial_number[64U] ;
   char hardware_version[64U] ;
   char driver_version[64U] ;
   char optionrom_version[64U] ;
   char firmware_version[64U] ;
   char model[256U] ;
   char model_description[256U] ;
};
#line 820  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_phys_item_id {
   unsigned char id[32U] ;
   unsigned char id_len ;
};
#line 833 
enum tc_setup_type {
    TC_SETUP_QDISC_MQPRIO = 0,
    TC_SETUP_CLSU32 = 1,
    TC_SETUP_CLSFLOWER = 2,
    TC_SETUP_CLSMATCHALL = 3,
    TC_SETUP_CLSBPF = 4,
    TC_SETUP_BLOCK = 5,
    TC_SETUP_QDISC_CBS = 6,
    TC_SETUP_QDISC_RED = 7,
    TC_SETUP_QDISC_PRIO = 8,
    TC_SETUP_QDISC_MQ = 9,
    TC_SETUP_QDISC_ETF = 10,
    TC_SETUP_ROOT_QDISC = 11,
    TC_SETUP_QDISC_GRED = 12,
    TC_SETUP_QDISC_TAPRIO = 13,
    TC_SETUP_FT = 14
};
#line 851 
enum bpf_netdev_command {
    XDP_SETUP_PROG = 0,
    XDP_SETUP_PROG_HW = 1,
    XDP_QUERY_PROG = 2,
    XDP_QUERY_PROG_HW = 3,
    BPF_OFFLOAD_MAP_ALLOC = 4,
    BPF_OFFLOAD_MAP_FREE = 5,
    XDP_SETUP_XSK_UMEM = 6
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_675 {
   u32 flags ;
   struct bpf_prog *prog ;
   struct netlink_ext_ack *extack ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_676 {
   u32 prog_id ;
   u32 prog_flags ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_677 {
   struct bpf_offloaded_map *offmap ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_xsk_678 {
   struct xdp_umem *umem ;
   u16 queue_id ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
union __anonunion_674 {
   struct __anonstruct_675 __anonCompField___anonunion_674_155 ;
   struct __anonstruct_676 __anonCompField___anonunion_674_156 ;
   struct __anonstruct_677 __anonCompField___anonunion_674_157 ;
   struct __anonstruct_xsk_678 xsk ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_bpf {
   enum bpf_netdev_command command ;
   union __anonunion_674 __anonCompField_netdev_bpf_158 ;
};
#line 911  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xfrmdev_ops {
   int (*xdo_dev_state_add)(struct xfrm_state *) ;
   void (*xdo_dev_state_delete)(struct xfrm_state *) ;
   void (*xdo_dev_state_free)(struct xfrm_state *) ;
   bool (*xdo_dev_offload_ok)(struct sk_buff *, struct xfrm_state *) ;
   void (*xdo_dev_state_advance_esn)(struct xfrm_state *) ;
};
#line 921  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct dev_ifalias {
   struct callback_head rcuhead ;
   char ifalias[] ;
};
#line 926 
struct tlsdev_ops;
#line 929  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_name_node {
   struct hlist_node hlist ;
   struct list_head list ;
   struct net_device *dev ;
   char *name ;
};
#line 1257 
struct devlink_port;
#line 1257  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device_ops {
   int (*ndo_init)(struct net_device *) ;
   void (*ndo_uninit)(struct net_device *) ;
   int (*ndo_open)(struct net_device *) ;
   int (*ndo_stop)(struct net_device *) ;
   netdev_tx_t (*ndo_start_xmit)(struct sk_buff *, struct net_device *) ;
   netdev_features_t (*ndo_features_check)(struct sk_buff *, struct net_device *, netdev_features_t ) ;
   u16 (*ndo_select_queue)(struct net_device *, struct sk_buff *, struct net_device *) ;
   void (*ndo_change_rx_flags)(struct net_device *, int ) ;
   void (*ndo_set_rx_mode)(struct net_device *) ;
   int (*ndo_set_mac_address)(struct net_device *, void *) ;
   int (*ndo_validate_addr)(struct net_device *) ;
   int (*ndo_do_ioctl)(struct net_device *, struct ifreq *, int ) ;
   int (*ndo_set_config)(struct net_device *, struct ifmap *) ;
   int (*ndo_change_mtu)(struct net_device *, int ) ;
   int (*ndo_neigh_setup)(struct net_device *, struct neigh_parms *) ;
   void (*ndo_tx_timeout)(struct net_device *) ;
   void (*ndo_get_stats64)(struct net_device *, struct rtnl_link_stats64 *) ;
   bool (*ndo_has_offload_stats)(struct net_device *, int ) ;
   int (*ndo_get_offload_stats)(int , struct net_device *, void *) ;
   struct net_device_stats *(*ndo_get_stats)(struct net_device *) ;
   int (*ndo_vlan_rx_add_vid)(struct net_device *, __be16 , u16 ) ;
   int (*ndo_vlan_rx_kill_vid)(struct net_device *, __be16 , u16 ) ;
   void (*ndo_poll_controller)(struct net_device *) ;
   int (*ndo_netpoll_setup)(struct net_device *, struct netpoll_info *) ;
   void (*ndo_netpoll_cleanup)(struct net_device *) ;
   int (*ndo_set_vf_mac)(struct net_device *, int , u8 *) ;
   int (*ndo_set_vf_vlan)(struct net_device *, int , u16 , u8 , __be16 ) ;
   int (*ndo_set_vf_rate)(struct net_device *, int , int , int ) ;
   int (*ndo_set_vf_spoofchk)(struct net_device *, int , bool ) ;
   int (*ndo_set_vf_trust)(struct net_device *, int , bool ) ;
   int (*ndo_get_vf_config)(struct net_device *, int , struct ifla_vf_info *) ;
   int (*ndo_set_vf_link_state)(struct net_device *, int , int ) ;
   int (*ndo_get_vf_stats)(struct net_device *, int , struct ifla_vf_stats *) ;
   int (*ndo_set_vf_port)(struct net_device *, int , struct nlattr **) ;
   int (*ndo_get_vf_port)(struct net_device *, int , struct sk_buff *) ;
   int (*ndo_get_vf_guid)(struct net_device *, int , struct ifla_vf_guid *, struct ifla_vf_guid *) ;
   int (*ndo_set_vf_guid)(struct net_device *, int , u64 , int ) ;
   int (*ndo_set_vf_rss_query_en)(struct net_device *, int , bool ) ;
   int (*ndo_setup_tc)(struct net_device *, enum tc_setup_type , void *) ;
   int (*ndo_fcoe_enable)(struct net_device *) ;
   int (*ndo_fcoe_disable)(struct net_device *) ;
   int (*ndo_fcoe_ddp_setup)(struct net_device *, u16 , struct scatterlist *, unsigned int ) ;
   int (*ndo_fcoe_ddp_done)(struct net_device *, u16 ) ;
   int (*ndo_fcoe_ddp_target)(struct net_device *, u16 , struct scatterlist *, unsigned int ) ;
   int (*ndo_fcoe_get_hbainfo)(struct net_device *, struct netdev_fcoe_hbainfo *) ;
   int (*ndo_fcoe_get_wwn)(struct net_device *, u64 *, int ) ;
   int (*ndo_rx_flow_steer)(struct net_device *, struct sk_buff *, u16 , u32 ) ;
   int (*ndo_add_slave)(struct net_device *, struct net_device *, struct netlink_ext_ack *) ;
   int (*ndo_del_slave)(struct net_device *, struct net_device *) ;
   netdev_features_t (*ndo_fix_features)(struct net_device *, netdev_features_t ) ;
   int (*ndo_set_features)(struct net_device *, netdev_features_t ) ;
   int (*ndo_neigh_construct)(struct net_device *, struct neighbour *) ;
   void (*ndo_neigh_destroy)(struct net_device *, struct neighbour *) ;
   int (*ndo_fdb_add)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char *, u16 , u16 , struct netlink_ext_ack *) ;
   int (*ndo_fdb_del)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char *, u16 ) ;
   int (*ndo_fdb_dump)(struct sk_buff *, struct netlink_callback *, struct net_device *, struct net_device *, int *) ;
   int (*ndo_fdb_get)(struct sk_buff *, struct nlattr **, struct net_device *, unsigned char *, u16 , u32 , u32 , struct netlink_ext_ack *) ;
   int (*ndo_bridge_setlink)(struct net_device *, struct nlmsghdr *, u16 , struct netlink_ext_ack *) ;
   int (*ndo_bridge_getlink)(struct sk_buff *, u32 , u32 , struct net_device *, u32 , int ) ;
   int (*ndo_bridge_dellink)(struct net_device *, struct nlmsghdr *, u16 ) ;
   int (*ndo_change_carrier)(struct net_device *, bool ) ;
   int (*ndo_get_phys_port_id)(struct net_device *, struct netdev_phys_item_id *) ;
   int (*ndo_get_port_parent_id)(struct net_device *, struct netdev_phys_item_id *) ;
   int (*ndo_get_phys_port_name)(struct net_device *, char *, size_t ) ;
   void (*ndo_udp_tunnel_add)(struct net_device *, struct udp_tunnel_info *) ;
   void (*ndo_udp_tunnel_del)(struct net_device *, struct udp_tunnel_info *) ;
   void *(*ndo_dfwd_add_station)(struct net_device *, struct net_device *) ;
   void (*ndo_dfwd_del_station)(struct net_device *, void *) ;
   int (*ndo_set_tx_maxrate)(struct net_device *, int , u32 ) ;
   int (*ndo_get_iflink)(struct net_device *) ;
   int (*ndo_change_proto_down)(struct net_device *, bool ) ;
   int (*ndo_fill_metadata_dst)(struct net_device *, struct sk_buff *) ;
   void (*ndo_set_rx_headroom)(struct net_device *, int ) ;
   int (*ndo_bpf)(struct net_device *, struct netdev_bpf *) ;
   int (*ndo_xdp_xmit)(struct net_device *, int , struct xdp_frame **, u32 ) ;
   int (*ndo_xsk_wakeup)(struct net_device *, u32 , u32 ) ;
   struct devlink_port *(*ndo_get_devlink_port)(struct net_device *) ;
};
#line 1492 
enum ldv_14504 {
    NETREG_UNINITIALIZED = 0,
    NETREG_REGISTERED = 1,
    NETREG_UNREGISTERING = 2,
    NETREG_UNREGISTERED = 3,
    NETREG_RELEASED = 4,
    NETREG_DUMMY = 5
};
#line 1501 
enum ldv_14505 {
    RTNL_LINK_INITIALIZED = 0,
    RTNL_LINK_INITIALIZING = 1
};
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_adj_list_679 {
   struct list_head upper ;
   struct list_head lower ;
};
#line 1795 
struct iw_handler_def;
#line 1795 
struct iw_public_data;
#line 1795 
struct l3mdev_ops;
#line 1795 
struct ndisc_ops;
#line 1795 
struct vlan_info;
#line 1795 
struct tipc_bearer;
#line 1795 
struct dn_dev;
#line 1795 
struct inet6_dev;
#line 1795 
struct mini_Qdisc;
#line 1795 
struct cpu_rmap;
#line 1795 
struct pcpu_lstats;
#line 1795 
struct pcpu_sw_netstats;
#line 1795 
struct pcpu_dstats;
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
union __anonunion_680 {
   void *ml_priv ;
   struct pcpu_lstats *lstats ;
   struct pcpu_sw_netstats *tstats ;
   struct pcpu_dstats *dstats ;
};
#line 1795 
struct garp_port;
#line 1795 
struct mrp_port;
#line 1795 
struct rtnl_link_ops;
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device {
   char name[16U] ;
   struct netdev_name_node *name_node ;
   struct dev_ifalias *ifalias ;
   unsigned long mem_end ;
   unsigned long mem_start ;
   unsigned long base_addr ;
   int irq ;
   unsigned long state ;
   struct list_head dev_list ;
   struct list_head napi_list ;
   struct list_head unreg_list ;
   struct list_head close_list ;
   struct list_head ptype_all ;
   struct list_head ptype_specific ;
   struct __anonstruct_adj_list_679 adj_list ;
   netdev_features_t features ;
   netdev_features_t hw_features ;
   netdev_features_t wanted_features ;
   netdev_features_t vlan_features ;
   netdev_features_t hw_enc_features ;
   netdev_features_t mpls_features ;
   netdev_features_t gso_partial_features ;
   int ifindex ;
   int group ;
   struct net_device_stats stats ;
   atomic_long_t rx_dropped ;
   atomic_long_t tx_dropped ;
   atomic_long_t rx_nohandler ;
   atomic_t carrier_up_count ;
   atomic_t carrier_down_count ;
   struct iw_handler_def *wireless_handlers ;
   struct iw_public_data *wireless_data ;
   struct net_device_ops *netdev_ops ;
   struct ethtool_ops *ethtool_ops ;
   struct l3mdev_ops *l3mdev_ops ;
   struct ndisc_ops *ndisc_ops ;
   struct xfrmdev_ops *xfrmdev_ops ;
   struct tlsdev_ops *tlsdev_ops ;
   struct header_ops *header_ops ;
   unsigned int flags ;
   unsigned int priv_flags ;
   unsigned short gflags ;
   unsigned short padded ;
   unsigned char operstate ;
   unsigned char link_mode ;
   unsigned char if_port ;
   unsigned char dma ;
   unsigned int mtu ;
   unsigned int min_mtu ;
   unsigned int max_mtu ;
   unsigned short type ;
   unsigned short hard_header_len ;
   unsigned char min_header_len ;
   unsigned short needed_headroom ;
   unsigned short needed_tailroom ;
   unsigned char perm_addr[32U] ;
   unsigned char addr_assign_type ;
   unsigned char addr_len ;
   unsigned char upper_level ;
   unsigned char lower_level ;
   unsigned short neigh_priv_len ;
   unsigned short dev_id ;
   unsigned short dev_port ;
   spinlock_t addr_list_lock ;
   unsigned char name_assign_type ;
   bool uc_promisc ;
   struct netdev_hw_addr_list uc ;
   struct netdev_hw_addr_list mc ;
   struct netdev_hw_addr_list dev_addrs ;
   struct kset *queues_kset ;
   unsigned int promiscuity ;
   unsigned int allmulti ;
   struct vlan_info *vlan_info ;
   struct dsa_port *dsa_ptr ;
   struct tipc_bearer *tipc_ptr ;
   void *atalk_ptr ;
   struct in_device *ip_ptr ;
   struct dn_dev *dn_ptr ;
   struct inet6_dev *ip6_ptr ;
   void *ax25_ptr ;
   struct wireless_dev *ieee80211_ptr ;
   struct wpan_dev *ieee802154_ptr ;
   struct mpls_dev *mpls_ptr ;
   unsigned char *dev_addr ;
   struct netdev_rx_queue *_rx ;
   unsigned int num_rx_queues ;
   unsigned int real_num_rx_queues ;
   struct bpf_prog *xdp_prog ;
   unsigned long gro_flush_timeout ;
   rx_handler_func_t *rx_handler ;
   void *rx_handler_data ;
   struct mini_Qdisc *miniq_ingress ;
   struct netdev_queue *ingress_queue ;
   struct nf_hook_entries *nf_hooks_ingress ;
   unsigned char broadcast[32U] ;
   struct cpu_rmap *rx_cpu_rmap ;
   struct hlist_node index_hlist ;
   struct netdev_queue *_tx ;
   unsigned int num_tx_queues ;
   unsigned int real_num_tx_queues ;
   struct Qdisc *qdisc ;
   struct hlist_head qdisc_hash[16U] ;
   unsigned int tx_queue_len ;
   spinlock_t tx_global_lock ;
   int watchdog_timeo ;
   struct xps_dev_maps *xps_cpus_map ;
   struct xps_dev_maps *xps_rxqs_map ;
   struct mini_Qdisc *miniq_egress ;
   struct timer_list watchdog_timer ;
   int *pcpu_refcnt ;
   struct list_head todo_list ;
   struct list_head link_watch_list ;
   enum ldv_14504 reg_state : 8 ;
   bool dismantle ;
   enum ldv_14505 rtnl_link_state : 16 ;
   bool needs_free_netdev ;
   void (*priv_destructor)(struct net_device *) ;
   struct netpoll_info *npinfo ;
   possible_net_t nd_net ;
   union __anonunion_680 __anonCompField_net_device_159 ;
   struct garp_port *garp_port ;
   struct mrp_port *mrp_port ;
   struct device dev ;
   struct attribute_group *sysfs_groups[4U] ;
   struct attribute_group *sysfs_rx_queue_group ;
   struct rtnl_link_ops *rtnl_link_ops ;
   unsigned int gso_max_size ;
   u16 gso_max_segs ;
   struct dcbnl_rtnl_ops *dcbnl_ops ;
   s16 num_tc ;
   struct netdev_tc_txq tc_to_txq[16U] ;
   u8 prio_tc_map[16U] ;
   unsigned int fcoe_ddp_xid ;
   struct netprio_map *priomap ;
   struct phy_device *phydev ;
   struct sfp_bus *sfp_bus ;
   struct lock_class_key qdisc_tx_busylock_key ;
   struct lock_class_key qdisc_running_key ;
   struct lock_class_key qdisc_xmit_lock_key ;
   struct lock_class_key addr_list_lock_key ;
   bool proto_down ;
   unsigned int wol_enabled : 1 ;
};
#line 2400  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct pcpu_sw_netstats {
   u64 rx_packets ;
   u64 rx_bytes ;
   u64 tx_packets ;
   u64 tx_bytes ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(32)));
#line 2408  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct pcpu_lstats {
   u64_stats_t packets ;
   u64_stats_t bytes ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 534  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
struct mfd_cell;
#line 536 
struct platform_device_id;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/platform_device.h"
struct platform_device {
   char *name ;
   int id ;
   bool id_auto ;
   struct device dev ;
   u64 dma_mask ;
   u32 num_resources ;
   struct resource *resource ;
   struct platform_device_id *id_entry ;
   char *driver_override ;
   struct mfd_cell *mfd_cell ;
   struct pdev_archdata archdata ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page_counter.h"
struct page_counter {
   atomic_long_t usage ;
   unsigned long min ;
   unsigned long low ;
   unsigned long max ;
   struct page_counter *parent ;
   unsigned long emin ;
   atomic_long_t min_usage ;
   atomic_long_t children_min_usage ;
   unsigned long elow ;
   atomic_long_t low_usage ;
   atomic_long_t children_low_usage ;
   unsigned long watermark ;
   unsigned long failcnt ;
};
#line 66 
struct eventfd_ctx;
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmpressure.h"
struct vmpressure {
   unsigned long scanned ;
   unsigned long reclaimed ;
   unsigned long tree_scanned ;
   unsigned long tree_reclaimed ;
   spinlock_t sr_lock ;
   struct list_head events ;
   struct mutex events_lock ;
   struct work_struct work ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/flex_proportions.h"
struct fprop_global {
   struct percpu_counter events ;
   unsigned int period ;
   seqcount_t sequence ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/flex_proportions.h"
struct fprop_local_percpu {
   struct percpu_counter events ;
   unsigned int period ;
   raw_spinlock_t lock ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/flex_proportions.h"
typedef int congested_fn(void *, int );
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
enum wb_reason {
    WB_REASON_BACKGROUND = 0,
    WB_REASON_VMSCAN = 1,
    WB_REASON_SYNC = 2,
    WB_REASON_PERIODIC = 3,
    WB_REASON_LAPTOP_TIMER = 4,
    WB_REASON_FREE_MORE_MEM = 5,
    WB_REASON_FS_FREE_SPACE = 6,
    WB_REASON_FORKER_THREAD = 7,
    WB_REASON_FOREIGN_FLUSH = 8,
    WB_REASON_MAX = 9
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct wb_completion {
   atomic_t cnt ;
   wait_queue_head_t *waitq ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct bdi_writeback_congested {
   unsigned long state ;
   refcount_t refcnt ;
   struct backing_dev_info *__bdi ;
   int blkcg_id ;
   struct rb_node rb_node ;
};
#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
union __anonunion_691 {
   struct work_struct release_work ;
   struct callback_head rcu ;
};
#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct bdi_writeback {
   struct backing_dev_info *bdi ;
   unsigned long state ;
   unsigned long last_old_flush ;
   struct list_head b_dirty ;
   struct list_head b_io ;
   struct list_head b_more_io ;
   struct list_head b_dirty_time ;
   spinlock_t list_lock ;
   struct percpu_counter stat[4U] ;
   struct bdi_writeback_congested *congested ;
   unsigned long bw_time_stamp ;
   unsigned long dirtied_stamp ;
   unsigned long written_stamp ;
   unsigned long write_bandwidth ;
   unsigned long avg_write_bandwidth ;
   unsigned long dirty_ratelimit ;
   unsigned long balanced_dirty_ratelimit ;
   struct fprop_local_percpu completions ;
   int dirty_exceeded ;
   enum wb_reason start_all_reason ;
   spinlock_t work_lock ;
   struct list_head work_list ;
   struct delayed_work dwork ;
   unsigned long dirty_sleep ;
   struct list_head bdi_node ;
   struct percpu_ref refcnt ;
   struct fprop_local_percpu memcg_completions ;
   struct cgroup_subsys_state *memcg_css ;
   struct cgroup_subsys_state *blkcg_css ;
   struct list_head memcg_node ;
   struct list_head blkcg_node ;
   union __anonunion_691 __anonCompField_bdi_writeback_160 ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct backing_dev_info {
   u64 id ;
   struct rb_node rb_node ;
   struct list_head bdi_list ;
   unsigned long ra_pages ;
   unsigned long io_pages ;
   congested_fn *congested_fn ;
   void *congested_data ;
   char *name ;
   struct kref refcnt ;
   unsigned int capabilities ;
   unsigned int min_ratio ;
   unsigned int max_ratio ;
   unsigned int max_prop_frac ;
   atomic_long_t tot_write_bandwidth ;
   struct bdi_writeback wb ;
   struct list_head wb_list ;
   struct xarray cgwb_tree ;
   struct rb_root cgwb_congested_tree ;
   struct mutex cgwb_release_mutex ;
   struct rw_semaphore wb_switch_rwsem ;
   wait_queue_head_t wb_waitq ;
   struct device *dev ;
   struct device *owner ;
   struct timer_list laptop_mode_wb_timer ;
   struct dentry *debug_dir ;
};
#line 306 
struct bio_set;
#line 307 
struct bio_integrity_payload;
#line 308  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
typedef void bio_end_io_t(struct bio *);
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
typedef u8 blk_status_t;
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
struct bio_issue {
   u64 value ;
};
#line 144 
struct blkcg_gq;
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
union __anonunion_692 {
   struct bio_integrity_payload *bi_integrity ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
struct bio {
   struct bio *bi_next ;
   struct gendisk *bi_disk ;
   unsigned int bi_opf ;
   unsigned short bi_flags ;
   unsigned short bi_ioprio ;
   unsigned short bi_write_hint ;
   blk_status_t bi_status ;
   u8 bi_partno ;
   atomic_t __bi_remaining ;
   struct bvec_iter bi_iter ;
   bio_end_io_t *bi_end_io ;
   void *bi_private ;
   struct blkcg_gq *bi_blkg ;
   struct bio_issue bi_issue ;
   u64 bi_iocost_cost ;
   union __anonunion_692 __anonCompField_bio_161 ;
   unsigned short bi_vcnt ;
   unsigned short bi_max_vecs ;
   atomic_t __bi_cnt ;
   struct bio_vec *bi_io_vec ;
   struct bio_set *bi_pool ;
   struct bio_vec bi_inline_vecs[0U] ;
};
#line 452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
typedef unsigned int blk_qc_t;
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
struct blk_rq_stat {
   u64 mean ;
   u64 min ;
   u64 max ;
   u32 nr_samples ;
   u64 batch ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct disk_stats {
   u64 nsecs[4U] ;
   unsigned long sectors[4U] ;
   unsigned long ios[4U] ;
   unsigned long merges[4U] ;
   unsigned long io_ticks ;
   unsigned long time_in_queue ;
   local_t in_flight[2U] ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct partition_meta_info {
   char uuid[37U] ;
   u8 volname[64U] ;
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct hd_struct {
   sector_t start_sect ;
   sector_t nr_sects ;
   seqcount_t nr_sects_seq ;
   sector_t alignment_offset ;
   unsigned int discard_alignment ;
   struct device __dev ;
   struct kobject *holder_dir ;
   int policy ;
   int partno ;
   struct partition_meta_info *info ;
   int make_it_fail ;
   unsigned long stamp ;
   struct disk_stats *dkstats ;
   struct percpu_ref ref ;
   struct rcu_work rcu_work ;
};
#line 160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct disk_part_tbl {
   struct callback_head callback_head ;
   int len ;
   struct hd_struct *last_lookup ;
   struct hd_struct *part[] ;
};
#line 166 
struct disk_events;
#line 167 
struct badblocks;
#line 172 
struct blk_integrity_profile;
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct blk_integrity {
   struct blk_integrity_profile *profile ;
   unsigned char flags ;
   unsigned char tuple_size ;
   unsigned char interval_exp ;
   unsigned char tag_size ;
};
#line 182 
struct timer_rand_state;
#line 182  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct gendisk {
   int major ;
   int first_minor ;
   int minors ;
   char disk_name[32U] ;
   char *(*devnode)(struct gendisk *, umode_t *) ;
   unsigned short events ;
   unsigned short event_flags ;
   struct disk_part_tbl *part_tbl ;
   struct hd_struct part0 ;
   struct block_device_operations *fops ;
   struct request_queue *queue ;
   void *private_data ;
   int flags ;
   struct rw_semaphore lookup_sem ;
   struct kobject *slave_dir ;
   struct timer_rand_state *random ;
   atomic_t sync_io ;
   struct disk_events *ev ;
   struct kobject integrity_kobj ;
   int node_id ;
   struct badblocks *bb ;
   struct lockdep_map lockdep_map ;
};
#line 637  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pagemap.h"
typedef void *mempool_alloc_t(gfp_t , void *);
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mempool.h"
typedef void mempool_free_t(void *, void *);
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mempool.h"
struct mempool_s {
   spinlock_t lock ;
   int min_nr ;
   int curr_nr ;
   void **elements ;
   void *pool_data ;
   mempool_alloc_t *alloc ;
   mempool_free_t *free ;
   wait_queue_head_t wait ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mempool.h"
typedef struct mempool_s mempool_t;
#line 307  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bio.h"
struct bio_integrity_payload {
   struct bio *bip_bio ;
   struct bvec_iter bip_iter ;
   unsigned short bip_slab ;
   unsigned short bip_vcnt ;
   unsigned short bip_max_vcnt ;
   unsigned short bip_flags ;
   struct bvec_iter bio_iter ;
   struct work_struct bip_work ;
   struct bio_vec *bip_vec ;
   struct bio_vec bip_inline_vecs[0U] ;
};
#line 575  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bio.h"
struct bio_list {
   struct bio *head ;
   struct bio *tail ;
};
#line 703  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bio.h"
struct bio_set {
   struct kmem_cache *bio_slab ;
   unsigned int front_pad ;
   mempool_t bio_pool ;
   mempool_t bvec_pool ;
   mempool_t bio_integrity_pool ;
   mempool_t bvec_integrity_pool ;
   spinlock_t rescue_lock ;
   struct bio_list rescue_list ;
   struct work_struct rescue_work ;
   struct workqueue_struct *rescue_workqueue ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bsg.h"
struct sg_io_v4 {
   __s32 guard ;
   __u32 protocol ;
   __u32 subprotocol ;
   __u32 request_len ;
   __u64 request ;
   __u64 request_tag ;
   __u32 request_attr ;
   __u32 request_priority ;
   __u32 request_extra ;
   __u32 max_response_len ;
   __u64 response ;
   __u32 dout_iovec_count ;
   __u32 dout_xfer_len ;
   __u32 din_iovec_count ;
   __u32 din_xfer_len ;
   __u64 dout_xferp ;
   __u64 din_xferp ;
   __u32 timeout ;
   __u32 flags ;
   __u64 usr_ptr ;
   __u32 spare_in ;
   __u32 driver_status ;
   __u32 transport_status ;
   __u32 device_status ;
   __u32 retry_delay ;
   __u32 info ;
   __u32 duration ;
   __u32 response_len ;
   __s32 din_resid ;
   __s32 dout_resid ;
   __u64 generated_tag ;
   __u32 spare_out ;
   __u32 padding ;
};
#line 65 
struct request;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bsg.h"
struct bsg_ops {
   int (*check_proto)(struct sg_io_v4 *) ;
   int (*fill_hdr)(struct request *, struct sg_io_v4 *, fmode_t ) ;
   int (*complete_rq)(struct request *, struct sg_io_v4 *) ;
   void (*free_rq)(struct request *) ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bsg.h"
struct bsg_class_device {
   struct device *class_dev ;
   int minor ;
   struct request_queue *queue ;
   struct bsg_ops *ops ;
};
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/blkzoned.h"
struct blk_zone {
   __u64 start ;
   __u64 len ;
   __u64 wp ;
   __u8 type ;
   __u8 cond ;
   __u8 non_seq ;
   __u8 reset ;
   __u8 reserved[36U] ;
};
#line 134 
struct elevator_queue;
#line 135 
struct blk_trace;
#line 138 
struct blk_flush_queue;
#line 139 
struct pr_ops;
#line 140 
struct rq_qos;
#line 141 
struct blk_queue_stats;
#line 142 
struct blk_stat_callback;
#line 143  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/blkzoned.h"
typedef void rq_end_io_fn(struct request *, blk_status_t );
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef __u32 req_flags_t;
#line 67 
enum mq_rq_state {
    MQ_RQ_IDLE = 0,
    MQ_RQ_IN_FLIGHT = 1,
    MQ_RQ_COMPLETE = 2
};
#line 132 
struct blk_mq_ctx;
#line 132 
struct blk_mq_hw_ctx;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_695 {
   struct hlist_node hash ;
   struct list_head ipi_list ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_696 {
   struct rb_node rb_node ;
   struct bio_vec special_vec ;
   void *completion_data ;
   int error_count ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct __anonstruct_elv_698 {
   struct io_cq *icq ;
   void *priv[2U] ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct __anonstruct_flush_699 {
   unsigned int seq ;
   struct list_head list ;
   rq_end_io_fn *saved_end_io ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_697 {
   struct __anonstruct_elv_698 elv ;
   struct __anonstruct_flush_699 flush ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_700 {
   struct __call_single_data csd ;
   u64 fifo_time ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct request {
   struct request_queue *q ;
   struct blk_mq_ctx *mq_ctx ;
   struct blk_mq_hw_ctx *mq_hctx ;
   unsigned int cmd_flags ;
   req_flags_t rq_flags ;
   int tag ;
   int internal_tag ;
   unsigned int __data_len ;
   sector_t __sector ;
   struct bio *bio ;
   struct bio *biotail ;
   struct list_head queuelist ;
   union __anonunion_695 __anonCompField_request_162 ;
   union __anonunion_696 __anonCompField_request_163 ;
   union __anonunion_697 __anonCompField_request_164 ;
   struct gendisk *rq_disk ;
   struct hd_struct *part ;
   u64 alloc_time_ns ;
   u64 start_time_ns ;
   u64 io_start_time_ns ;
   unsigned short wbt_flags ;
   unsigned short stats_sectors ;
   unsigned short nr_phys_segments ;
   unsigned short nr_integrity_segments ;
   unsigned short write_hint ;
   unsigned short ioprio ;
   unsigned int extra_len ;
   enum mq_rq_state state ;
   refcount_t ref ;
   unsigned int timeout ;
   unsigned long deadline ;
   union __anonunion_700 __anonCompField_request_165 ;
   rq_end_io_fn *end_io ;
   void *end_io_data ;
};
#line 285 
struct elevator_type;
#line 286 
struct blk_mq_debugfs_attr;
#line 287 
enum elv_merge {
    ELEVATOR_NO_MERGE = 0,
    ELEVATOR_FRONT_MERGE = 1,
    ELEVATOR_BACK_MERGE = 2,
    ELEVATOR_DISCARD_MERGE = 3
};
#line 294 
struct blk_mq_alloc_data;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elevator_mq_ops {
   int (*init_sched)(struct request_queue *, struct elevator_type *) ;
   void (*exit_sched)(struct elevator_queue *) ;
   int (*init_hctx)(struct blk_mq_hw_ctx *, unsigned int ) ;
   void (*exit_hctx)(struct blk_mq_hw_ctx *, unsigned int ) ;
   void (*depth_updated)(struct blk_mq_hw_ctx *) ;
   bool (*allow_merge)(struct request_queue *, struct request *, struct bio *) ;
   bool (*bio_merge)(struct blk_mq_hw_ctx *, struct bio *, unsigned int ) ;
   int (*request_merge)(struct request_queue *, struct request **, struct bio *) ;
   void (*request_merged)(struct request_queue *, struct request *, enum elv_merge ) ;
   void (*requests_merged)(struct request_queue *, struct request *, struct request *) ;
   void (*limit_depth)(unsigned int , struct blk_mq_alloc_data *) ;
   void (*prepare_request)(struct request *, struct bio *) ;
   void (*finish_request)(struct request *) ;
   void (*insert_requests)(struct blk_mq_hw_ctx *, struct list_head *, bool ) ;
   struct request *(*dispatch_request)(struct blk_mq_hw_ctx *) ;
   bool (*has_work)(struct blk_mq_hw_ctx *) ;
   void (*completed_request)(struct request *, u64 ) ;
   void (*requeue_request)(struct request *) ;
   struct request *(*former_request)(struct request_queue *, struct request *) ;
   struct request *(*next_request)(struct request_queue *, struct request *) ;
   void (*init_icq)(struct io_cq *) ;
   void (*exit_icq)(struct io_cq *) ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elv_fs_entry {
   struct attribute attr ;
   ssize_t (*show)(struct elevator_queue *, char *) ;
   ssize_t (*store)(struct elevator_queue *, char *, size_t ) ;
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elevator_type {
   struct kmem_cache *icq_cache ;
   struct elevator_mq_ops ops ;
   size_t icq_size ;
   size_t icq_align ;
   struct elv_fs_entry *elevator_attrs ;
   char *elevator_name ;
   char *elevator_alias ;
   unsigned int elevator_features ;
   struct module *elevator_owner ;
   struct blk_mq_debugfs_attr *queue_debugfs_attrs ;
   struct blk_mq_debugfs_attr *hctx_debugfs_attrs ;
   char icq_cache_name[22U] ;
   struct list_head list ;
};
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elevator_queue {
   struct elevator_type *type ;
   void *elevator_data ;
   struct kobject kobj ;
   struct mutex sysfs_lock ;
   unsigned int registered : 1 ;
   struct hlist_head hash[64U] ;
};
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
typedef blk_qc_t make_request_fn(struct request_queue *, struct bio *);
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef int dma_drain_needed_fn(struct request *);
#line 304 
enum blk_zoned_model {
    BLK_ZONED_NONE = 0,
    BLK_ZONED_HA = 1,
    BLK_ZONED_HM = 2
};
#line 320  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct queue_limits {
   unsigned long bounce_pfn ;
   unsigned long seg_boundary_mask ;
   unsigned long virt_boundary_mask ;
   unsigned int max_hw_sectors ;
   unsigned int max_dev_sectors ;
   unsigned int chunk_sectors ;
   unsigned int max_sectors ;
   unsigned int max_segment_size ;
   unsigned int physical_block_size ;
   unsigned int logical_block_size ;
   unsigned int alignment_offset ;
   unsigned int io_min ;
   unsigned int io_opt ;
   unsigned int max_discard_sectors ;
   unsigned int max_hw_discard_sectors ;
   unsigned int max_write_same_sectors ;
   unsigned int max_write_zeroes_sectors ;
   unsigned int discard_granularity ;
   unsigned int discard_alignment ;
   unsigned short max_segments ;
   unsigned short max_integrity_segments ;
   unsigned short max_discard_segments ;
   unsigned char misaligned ;
   unsigned char discard_misaligned ;
   unsigned char raid_partial_stripes_expensive ;
   enum blk_zoned_model zoned ;
};
#line 394 
struct blk_mq_ops;
#line 394 
struct throtl_data;
#line 394 
struct blk_mq_tag_set;
#line 394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct request_queue {
   struct request *last_merge ;
   struct elevator_queue *elevator ;
   struct blk_queue_stats *stats ;
   struct rq_qos *rq_qos ;
   make_request_fn *make_request_fn ;
   dma_drain_needed_fn *dma_drain_needed ;
   struct blk_mq_ops *mq_ops ;
   struct blk_mq_ctx *queue_ctx ;
   unsigned int queue_depth ;
   struct blk_mq_hw_ctx **queue_hw_ctx ;
   unsigned int nr_hw_queues ;
   struct backing_dev_info *backing_dev_info ;
   void *queuedata ;
   unsigned long queue_flags ;
   atomic_t pm_only ;
   int id ;
   gfp_t bounce_gfp ;
   spinlock_t queue_lock ;
   struct kobject kobj ;
   struct kobject *mq_kobj ;
   struct blk_integrity integrity ;
   struct device *dev ;
   int rpm_status ;
   unsigned int nr_pending ;
   unsigned long nr_requests ;
   unsigned int dma_drain_size ;
   void *dma_drain_buffer ;
   unsigned int dma_pad_mask ;
   unsigned int dma_alignment ;
   unsigned int rq_timeout ;
   int poll_nsec ;
   struct blk_stat_callback *poll_cb ;
   struct blk_rq_stat poll_stat[16U] ;
   struct timer_list timeout ;
   struct work_struct timeout_work ;
   struct list_head icq_list ;
   unsigned long blkcg_pols[1U] ;
   struct blkcg_gq *root_blkg ;
   struct list_head blkg_list ;
   struct queue_limits limits ;
   unsigned int required_elevator_features ;
   unsigned int nr_zones ;
   unsigned long *conv_zones_bitmap ;
   unsigned long *seq_zones_wlock ;
   unsigned int sg_timeout ;
   unsigned int sg_reserved_size ;
   int node ;
   struct blk_trace *blk_trace ;
   struct mutex blk_trace_mutex ;
   struct blk_flush_queue *fq ;
   struct list_head requeue_list ;
   spinlock_t requeue_lock ;
   struct delayed_work requeue_work ;
   struct mutex sysfs_lock ;
   struct mutex sysfs_dir_lock ;
   struct list_head unused_hctx_list ;
   spinlock_t unused_hctx_lock ;
   int mq_freeze_depth ;
   struct bsg_class_device bsg_dev ;
   struct throtl_data *td ;
   struct callback_head callback_head ;
   wait_queue_head_t mq_freeze_wq ;
   struct mutex mq_freeze_lock ;
   struct percpu_ref q_usage_counter ;
   struct blk_mq_tag_set *tag_set ;
   struct list_head tag_set_list ;
   struct bio_set bio_split ;
   struct dentry *debugfs_dir ;
   struct dentry *sched_debugfs_dir ;
   struct dentry *rqos_debugfs_dir ;
   bool mq_sysfs_init_done ;
   size_t cmd_size ;
   struct work_struct release_work ;
   u64 write_hints[5U] ;
};
#line 1160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct blk_plug {
   struct list_head mq_list ;
   struct list_head cb_list ;
   unsigned short rq_count ;
   bool multiple_queues ;
};
#line 1514  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct blk_integrity_iter {
   void *prot_buf ;
   void *data_buf ;
   sector_t seed ;
   unsigned int data_size ;
   unsigned short interval ;
   char *disk_name ;
};
#line 1522  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef blk_status_t integrity_processing_fn(struct blk_integrity_iter *);
#line 1524  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef void integrity_prepare_fn(struct request *);
#line 1525  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef void integrity_complete_fn(struct request *, unsigned int );
#line 1527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct blk_integrity_profile {
   integrity_processing_fn *generate_fn ;
   integrity_processing_fn *verify_fn ;
   integrity_prepare_fn *prepare_fn ;
   integrity_complete_fn *complete_fn ;
   char *name ;
};
#line 1693  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct block_device_operations {
   int (*open)(struct block_device *, fmode_t ) ;
   void (*release)(struct gendisk *, fmode_t ) ;
   int (*rw_page)(struct block_device *, sector_t , struct page *, unsigned int ) ;
   int (*ioctl)(struct block_device *, fmode_t , unsigned int , unsigned long ) ;
   int (*compat_ioctl)(struct block_device *, fmode_t , unsigned int , unsigned long ) ;
   unsigned int (*check_events)(struct gendisk *, unsigned int ) ;
   int (*media_changed)(struct gendisk *) ;
   void (*unlock_native_capacity)(struct gendisk *) ;
   int (*revalidate_disk)(struct gendisk *) ;
   int (*getgeo)(struct block_device *, struct hd_geometry *) ;
   void (*swap_slot_free_notify)(struct block_device *, unsigned long ) ;
   int (*report_zones)(struct gendisk *, sector_t , unsigned int , int (*)(struct blk_zone *, unsigned int , void *), void *) ;
   struct module *owner ;
   struct pr_ops *pr_ops ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg_policy_data;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg {
   struct cgroup_subsys_state css ;
   spinlock_t lock ;
   struct xarray blkg_tree ;
   struct blkcg_gq *blkg_hint ;
   struct hlist_head blkg_list ;
   struct blkcg_policy_data *cpd[5U] ;
   struct list_head all_blkcgs_node ;
   struct list_head cgwb_list ;
   refcount_t cgwb_refcnt ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkg_iostat {
   u64 bytes[3U] ;
   u64 ios[3U] ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkg_iostat_set {
   struct u64_stats_sync sync ;
   struct blkg_iostat cur ;
   struct blkg_iostat last ;
};
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkg_policy_data {
   struct blkcg_gq *blkg ;
   int plid ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg_policy_data {
   struct blkcg *blkcg ;
   int plid ;
};
#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg_gq {
   struct request_queue *q ;
   struct list_head q_node ;
   struct hlist_node blkcg_node ;
   struct blkcg *blkcg ;
   struct bdi_writeback_congested *wb_congested ;
   struct blkcg_gq *parent ;
   struct percpu_ref refcnt ;
   bool online ;
   struct blkg_iostat_set *iostat_cpu ;
   struct blkg_iostat_set iostat ;
   struct blkg_policy_data *pd[5U] ;
   spinlock_t async_bio_lock ;
   struct bio_list async_bios ;
   struct work_struct async_bio_work ;
   atomic_t use_delay ;
   atomic64_t delay_nsec ;
   atomic64_t delay_start ;
   u64 last_delay ;
   int last_use ;
   struct callback_head callback_head ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/writeback.h"
enum writeback_sync_modes {
    WB_SYNC_NONE = 0,
    WB_SYNC_ALL = 1
};
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/writeback.h"
struct writeback_control {
   long nr_to_write ;
   long pages_skipped ;
   loff_t range_start ;
   loff_t range_end ;
   enum writeback_sync_modes sync_mode ;
   unsigned int for_kupdate : 1 ;
   unsigned int for_background : 1 ;
   unsigned int tagged_writepages : 1 ;
   unsigned int for_reclaim : 1 ;
   unsigned int range_cyclic : 1 ;
   unsigned int for_sync : 1 ;
   unsigned int no_cgroup_owner : 1 ;
   unsigned int punt_to_cgroup : 1 ;
   struct bdi_writeback *wb ;
   struct inode *inode ;
   int wb_id ;
   int wb_lcand_id ;
   int wb_tcand_id ;
   size_t wb_bytes ;
   size_t wb_lcand_bytes ;
   size_t wb_tcand_bytes ;
};
#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/writeback.h"
struct wb_domain {
   spinlock_t lock ;
   struct fprop_global completions ;
   struct timer_list period_timer ;
   unsigned long period_time ;
   unsigned long dirty_limit_tstamp ;
   unsigned long dirty_limit ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_id {
   int id ;
   refcount_t ref ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_vmstats_percpu {
   long stat[38U] ;
   unsigned long events[91U] ;
   unsigned long nr_page_events ;
   unsigned long targets[2U] ;
};
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_reclaim_iter {
   struct mem_cgroup *position ;
   unsigned int generation ;
};
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct lruvec_stat {
   long count[32U] ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_shrinker_map {
   struct callback_head rcu ;
   unsigned long map[0U] ;
};
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_per_node {
   struct lruvec lruvec ;
   struct lruvec_stat *lruvec_stat_local ;
   struct lruvec_stat *lruvec_stat_cpu ;
   atomic_long_t lruvec_stat[32U] ;
   unsigned long lru_zone_size[5U][5U] ;
   struct mem_cgroup_reclaim_iter iter ;
   struct memcg_shrinker_map *shrinker_map ;
   struct rb_node tree_node ;
   unsigned long usage_in_excess ;
   bool on_tree ;
   struct mem_cgroup *memcg ;
};
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_threshold {
   struct eventfd_ctx *eventfd ;
   unsigned long threshold ;
};
#line 145  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_threshold_ary {
   int current_threshold ;
   unsigned int size ;
   struct mem_cgroup_threshold entries[0U] ;
};
#line 154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_thresholds {
   struct mem_cgroup_threshold_ary *primary ;
   struct mem_cgroup_threshold_ary *spare ;
};
#line 164 
enum memcg_kmem_state {
    KMEM_NONE = 0,
    KMEM_ALLOCATED = 1,
    KMEM_ONLINE = 2
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_padding {
   char x[0U] ;
} __attribute__((__aligned__(4096)));
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_cgwb_frn {
   u64 bdi_id ;
   int memcg_id ;
   u64 at ;
   struct wb_completion done ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup {
   struct cgroup_subsys_state css ;
   struct mem_cgroup_id id ;
   struct page_counter memory ;
   struct page_counter swap ;
   struct page_counter memsw ;
   struct page_counter kmem ;
   struct page_counter tcpmem ;
   unsigned long high ;
   struct work_struct high_work ;
   unsigned long soft_limit ;
   struct vmpressure vmpressure ;
   bool use_hierarchy ;
   bool oom_group ;
   bool oom_lock ;
   int under_oom ;
   int swappiness ;
   int oom_kill_disable ;
   struct cgroup_file events_file ;
   struct cgroup_file events_local_file ;
   struct cgroup_file swap_events_file ;
   struct mutex thresholds_lock ;
   struct mem_cgroup_thresholds thresholds ;
   struct mem_cgroup_thresholds memsw_thresholds ;
   struct list_head oom_notify ;
   unsigned long move_charge_at_immigrate ;
   spinlock_t move_lock ;
   unsigned long move_lock_flags ;
   struct memcg_padding _pad1_ ;
   atomic_t moving_account ;
   struct task_struct *move_lock_task ;
   struct memcg_vmstats_percpu *vmstats_local ;
   struct memcg_vmstats_percpu *vmstats_percpu ;
   struct memcg_padding _pad2_ ;
   atomic_long_t vmstats[38U] ;
   atomic_long_t vmevents[91U] ;
   atomic_long_t memory_events[7U] ;
   atomic_long_t memory_events_local[7U] ;
   unsigned long socket_pressure ;
   bool tcpmem_active ;
   int tcpmem_pressure ;
   int kmemcg_id ;
   enum memcg_kmem_state kmem_state ;
   struct list_head kmem_caches ;
   struct list_head cgwb_list ;
   struct wb_domain cgwb_domain ;
   struct memcg_cgwb_frn cgwb_frn[4U] ;
   struct list_head event_list ;
   spinlock_t event_list_lock ;
   struct deferred_split deferred_split_queue ;
   struct mem_cgroup_per_node *nodeinfo[0U] ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/vdso.h"
struct vdso_image {
   void *data ;
   unsigned long size ;
   unsigned long alt ;
   unsigned long alt_len ;
   long sym_vvar_start ;
   long sym_vvar_page ;
   long sym_pvclock_page ;
   long sym_hvclock_page ;
   long sym_VDSO32_NOTE_MASK ;
   long sym___kernel_sigreturn ;
   long sym___kernel_rt_sigreturn ;
   long sym___kernel_vsyscall ;
   long sym_int80_landing_pad ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Addr;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u16 Elf64_Half;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Off;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u32 Elf64_Word;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Xword;
#line 192  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};
#line 200  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_sym Elf64_Sym;
#line 221  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_hdr {
   unsigned char e_ident[16U] ;
   Elf64_Half e_type ;
   Elf64_Half e_machine ;
   Elf64_Word e_version ;
   Elf64_Addr e_entry ;
   Elf64_Off e_phoff ;
   Elf64_Off e_shoff ;
   Elf64_Word e_flags ;
   Elf64_Half e_ehsize ;
   Elf64_Half e_phentsize ;
   Elf64_Half e_phnum ;
   Elf64_Half e_shentsize ;
   Elf64_Half e_shnum ;
   Elf64_Half e_shstrndx ;
};
#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_hdr Elf64_Ehdr;
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_shdr {
   Elf64_Word sh_name ;
   Elf64_Word sh_type ;
   Elf64_Xword sh_flags ;
   Elf64_Addr sh_addr ;
   Elf64_Off sh_offset ;
   Elf64_Xword sh_size ;
   Elf64_Word sh_link ;
   Elf64_Word sh_info ;
   Elf64_Xword sh_addralign ;
   Elf64_Xword sh_entsize ;
};
#line 328  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_shdr Elf64_Shdr;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elf.h"
struct kernel_param;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kernel_param_ops {
   unsigned int flags ;
   int (*set)(char *, struct kernel_param *) ;
   int (*get)(char *, struct kernel_param *) ;
   void (*free)(void *) ;
};
#line 69 
struct kparam_string;
#line 69 
struct kparam_array;
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
union __anonunion_719 {
   void *arg ;
   struct kparam_string *str ;
   struct kparam_array *arr ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kernel_param {
   char *name ;
   struct module *mod ;
   struct kernel_param_ops *ops ;
   u16 perm ;
   s8 level ;
   u8 flags ;
   union __anonunion_719 __anonCompField_kernel_param_166 ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kparam_string {
   unsigned int maxlen ;
   char *string ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kparam_array {
   unsigned int max ;
   unsigned int elemsize ;
   unsigned int *num ;
   struct kernel_param_ops *ops ;
   void *elem ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/error-injection.h"
struct error_injection_entry {
   unsigned long addr ;
   int etype ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/module.h"
struct mod_arch_specific {
   unsigned int num_orcs ;
   int *orc_unwind_ip ;
   struct orc_entry *orc_unwind ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_param_attrs;
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
   struct module_param_attrs *mp ;
   struct completion *kobj_completion ;
} __attribute__((__designated_init__));
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute *, struct module_kobject *, char *) ;
   ssize_t (*store)(struct module_attribute *, struct module_kobject *, char *, size_t ) ;
   void (*setup)(struct module *, char *) ;
   int (*test)(struct module *) ;
   void (*free)(struct module *) ;
};
#line 297 
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2,
    MODULE_STATE_UNFORMED = 3
};
#line 305  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct mod_tree_node {
   struct module *mod ;
   struct latch_tree_node node ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_layout {
   void *base ;
   unsigned int size ;
   unsigned int text_size ;
   unsigned int ro_size ;
   unsigned int ro_after_init_size ;
   struct mod_tree_node mtn ;
};
#line 334  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct mod_kallsyms {
   Elf64_Sym *symtab ;
   unsigned int num_symtab ;
   char *strtab ;
   char *typetab ;
};
#line 342  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct klp_modinfo {
   Elf64_Ehdr hdr ;
   Elf64_Shdr *sechdrs ;
   char *secstrings ;
   unsigned int symndx ;
};
#line 350 
struct module_sect_attrs;
#line 350 
struct module_notes_attrs;
#line 350 
struct trace_event_call;
#line 350 
struct trace_eval_map;
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[56U] ;
   struct module_kobject mkobj ;
   struct module_attribute *modinfo_attrs ;
   char *version ;
   char *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol *syms ;
   s32 *crcs ;
   unsigned int num_syms ;
   struct mutex param_lock ;
   struct kernel_param *kp ;
   unsigned int num_kp ;
   unsigned int num_gpl_syms ;
   struct kernel_symbol *gpl_syms ;
   s32 *gpl_crcs ;
   struct kernel_symbol *unused_syms ;
   s32 *unused_crcs ;
   unsigned int num_unused_syms ;
   unsigned int num_unused_gpl_syms ;
   struct kernel_symbol *unused_gpl_syms ;
   s32 *unused_gpl_crcs ;
   bool sig_ok ;
   bool async_probe_requested ;
   struct kernel_symbol *gpl_future_syms ;
   s32 *gpl_future_crcs ;
   unsigned int num_gpl_future_syms ;
   unsigned int num_exentries ;
   struct exception_table_entry *extable ;
   int (*init)(void) ;
   struct module_layout core_layout ;
   struct module_layout init_layout ;
   struct mod_arch_specific arch ;
   unsigned long taints ;
   unsigned int num_bugs ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   struct mod_kallsyms *kallsyms ;
   struct mod_kallsyms core_kallsyms ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   char *args ;
   void *percpu ;
   unsigned int percpu_size ;
   unsigned int num_tracepoints ;
   tracepoint_ptr_t *tracepoints_ptrs ;
   unsigned int num_srcu_structs ;
   struct srcu_struct **srcu_struct_ptrs ;
   unsigned int num_bpf_raw_events ;
   struct bpf_raw_event_map *bpf_raw_events ;
   struct jump_entry *jump_entries ;
   unsigned int num_jump_entries ;
   unsigned int num_trace_bprintk_fmt ;
   char **trace_bprintk_fmt_start ;
   struct trace_event_call **trace_events ;
   unsigned int num_trace_events ;
   struct trace_eval_map **trace_evals ;
   unsigned int num_trace_evals ;
   unsigned int num_ftrace_callsites ;
   unsigned long *ftrace_callsites ;
   bool klp ;
   bool klp_alive ;
   struct klp_modinfo *klp_info ;
   struct list_head source_list ;
   struct list_head target_list ;
   void (*exit)(void) ;
   atomic_t refcnt ;
   ctor_fn_t *ctors ;
   unsigned int num_ctors ;
   struct error_injection_entry *ei_funcs ;
   unsigned int num_ei_funcs ;
} __attribute__((__designated_init__, __aligned__(64)));
#line 567  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rtnetlink.h"
struct tcmsg {
   unsigned char tcm_family ;
   unsigned char tcm__pad1 ;
   unsigned short tcm__pad2 ;
   int tcm_ifindex ;
   __u32 tcm_handle ;
   __u32 tcm_parent ;
   __u32 tcm_info ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/gen_stats.h"
struct gnet_stats_queue {
   __u32 qlen ;
   __u32 backlog ;
   __u32 drops ;
   __u32 requeues ;
   __u32 overlimits ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/gen_stats.h"
struct gnet_stats_basic_packed {
   __u64 bytes ;
   __u64 packets ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/gen_stats.h"
struct gnet_stats_basic_cpu {
   struct gnet_stats_basic_packed bstats ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 20 
struct net_rate_estimator;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/gen_stats.h"
struct gnet_dump {
   spinlock_t *lock ;
   struct sk_buff *skb ;
   struct nlattr *tail ;
   int compat_tc_stats ;
   int compat_xstats ;
   int padattr ;
   void *xstats ;
   int xstats_len ;
   struct tc_stats tc_stats ;
};
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
struct __anonstruct_727 {
   s16 min ;
   s16 max ;
};
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
union __anonunion_726 {
   void *validation_data ;
   struct __anonstruct_727 __anonCompField___anonunion_726_167 ;
   int (*validate)(struct nlattr *, struct netlink_ext_ack *) ;
   u16 strict_start_type ;
};
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
struct nla_policy {
   u8 type ;
   u8 validation_type ;
   u16 len ;
   union __anonunion_726 __anonCompField_nla_policy_168 ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/rtnetlink.h"
struct rtnl_link_ops {
   struct list_head list ;
   char *kind ;
   size_t priv_size ;
   void (*setup)(struct net_device *) ;
   unsigned int maxtype ;
   struct nla_policy *policy ;
   int (*validate)(struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   int (*newlink)(struct net *, struct net_device *, struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   int (*changelink)(struct net_device *, struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   void (*dellink)(struct net_device *, struct list_head *) ;
   size_t (*get_size)(struct net_device *) ;
   int (*fill_info)(struct sk_buff *, struct net_device *) ;
   size_t (*get_xstats_size)(struct net_device *) ;
   int (*fill_xstats)(struct sk_buff *, struct net_device *) ;
   unsigned int (*get_num_tx_queues)(void) ;
   unsigned int (*get_num_rx_queues)(void) ;
   unsigned int slave_maxtype ;
   struct nla_policy *slave_policy ;
   int (*slave_changelink)(struct net_device *, struct net_device *, struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   size_t (*get_slave_size)(struct net_device *, struct net_device *) ;
   int (*fill_slave_info)(struct sk_buff *, struct net_device *, struct net_device *) ;
   struct net *(*get_link_net)(struct net_device *) ;
   size_t (*get_linkxstats_size)(struct net_device *, int ) ;
   int (*fill_linkxstats)(struct sk_buff *, struct net_device *, int *, int ) ;
};
#line 170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/rtnetlink.h"
struct rhash_lock_head {
   };
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable.h"
struct bucket_table {
   unsigned int size ;
   unsigned int nest ;
   u32 hash_rnd ;
   struct list_head walkers ;
   struct callback_head rcu ;
   struct bucket_table *future_tbl ;
   struct lockdep_map dep_map ;
   struct rhash_lock_head *buckets[] ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct flow_match {
   struct flow_dissector *dissector ;
   void *mask ;
   void *key ;
};
#line 112 
enum flow_action_id {
    FLOW_ACTION_ACCEPT = 0,
    FLOW_ACTION_DROP = 1,
    FLOW_ACTION_TRAP = 2,
    FLOW_ACTION_GOTO = 3,
    FLOW_ACTION_REDIRECT = 4,
    FLOW_ACTION_MIRRED = 5,
    FLOW_ACTION_REDIRECT_INGRESS = 6,
    FLOW_ACTION_MIRRED_INGRESS = 7,
    FLOW_ACTION_VLAN_PUSH = 8,
    FLOW_ACTION_VLAN_POP = 9,
    FLOW_ACTION_VLAN_MANGLE = 10,
    FLOW_ACTION_TUNNEL_ENCAP = 11,
    FLOW_ACTION_TUNNEL_DECAP = 12,
    FLOW_ACTION_MANGLE = 13,
    FLOW_ACTION_ADD = 14,
    FLOW_ACTION_CSUM = 15,
    FLOW_ACTION_MARK = 16,
    FLOW_ACTION_PTYPE = 17,
    FLOW_ACTION_WAKE = 18,
    FLOW_ACTION_QUEUE = 19,
    FLOW_ACTION_SAMPLE = 20,
    FLOW_ACTION_POLICE = 21,
    FLOW_ACTION_CT = 22,
    FLOW_ACTION_MPLS_PUSH = 23,
    FLOW_ACTION_MPLS_POP = 24,
    FLOW_ACTION_MPLS_MANGLE = 25,
    NUM_FLOW_ACTIONS = 26
};
#line 142 
enum flow_action_mangle_base {
    FLOW_ACT_MANGLE_UNSPEC = 0,
    FLOW_ACT_MANGLE_HDR_TYPE_ETH = 1,
    FLOW_ACT_MANGLE_HDR_TYPE_IP4 = 2,
    FLOW_ACT_MANGLE_HDR_TYPE_IP6 = 3,
    FLOW_ACT_MANGLE_HDR_TYPE_TCP = 4,
    FLOW_ACT_MANGLE_HDR_TYPE_UDP = 5
};
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct __anonstruct_vlan_785 {
   u16 vid ;
   __be16 proto ;
   u8 prio ;
};
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct __anonstruct_mangle_786 {
   enum flow_action_mangle_base htype ;
   u32 offset ;
   u32 mask ;
   u32 val ;
};
#line 159 
struct ip_tunnel_info;
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct __anonstruct_queue_787 {
   u32 ctx ;
   u32 index ;
   u8 vf ;
};
#line 159 
struct psample_group;
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct __anonstruct_sample_788 {
   struct psample_group *psample_group ;
   u32 rate ;
   u32 trunc_size ;
   bool truncate ;
};
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct __anonstruct_police_789 {
   s64 burst ;
   u64 rate_bytes_ps ;
};
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct __anonstruct_ct_790 {
   int action ;
   u16 zone ;
};
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct __anonstruct_mpls_push_791 {
   u32 label ;
   __be16 proto ;
   u8 tc ;
   u8 bos ;
   u8 ttl ;
};
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct __anonstruct_mpls_pop_792 {
   __be16 proto ;
};
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct __anonstruct_mpls_mangle_793 {
   u32 label ;
   u8 tc ;
   u8 bos ;
   u8 ttl ;
};
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
union __anonunion_784 {
   u32 chain_index ;
   struct net_device *dev ;
   struct __anonstruct_vlan_785 vlan ;
   struct __anonstruct_mangle_786 mangle ;
   struct ip_tunnel_info *tunnel ;
   u32 csum_flags ;
   u32 mark ;
   u16 ptype ;
   struct __anonstruct_queue_787 queue ;
   struct __anonstruct_sample_788 sample ;
   struct __anonstruct_police_789 police ;
   struct __anonstruct_ct_790 ct ;
   struct __anonstruct_mpls_push_791 mpls_push ;
   struct __anonstruct_mpls_pop_792 mpls_pop ;
   struct __anonstruct_mpls_mangle_793 mpls_mangle ;
};
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct flow_action_entry {
   enum flow_action_id id ;
   void (*destructor)(void *) ;
   void *destructor_priv ;
   union __anonunion_784 __anonCompField_flow_action_entry_169 ;
};
#line 219  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct flow_action {
   unsigned int num_entries ;
   struct flow_action_entry entries[0U] ;
};
#line 243  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct flow_rule {
   struct flow_match match ;
   struct flow_action action ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct flow_block {
   struct list_head cb_list ;
};
#line 298  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
typedef int flow_setup_cb_t(enum tc_setup_type , void *, void *);
#line 412 
struct Qdisc_ops;
#line 413 
struct qdisc_walker;
#line 414 
struct tcf_walker;
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct qdisc_size_table {
   struct callback_head rcu ;
   struct list_head list ;
   struct tc_sizespec szopts ;
   int refcnt ;
   u16 data[] ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct qdisc_skb_head {
   struct sk_buff *head ;
   struct sk_buff *tail ;
   __u32 qlen ;
   spinlock_t lock ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct Qdisc {
   int (*enqueue)(struct sk_buff *, struct Qdisc *, struct sk_buff **) ;
   struct sk_buff *(*dequeue)(struct Qdisc *) ;
   unsigned int flags ;
   u32 limit ;
   struct Qdisc_ops *ops ;
   struct qdisc_size_table *stab ;
   struct hlist_node hash ;
   u32 handle ;
   u32 parent ;
   struct netdev_queue *dev_queue ;
   struct net_rate_estimator *rate_est ;
   struct gnet_stats_basic_cpu *cpu_bstats ;
   struct gnet_stats_queue *cpu_qstats ;
   int padded ;
   refcount_t refcnt ;
   struct sk_buff_head gso_skb ;
   struct qdisc_skb_head q ;
   struct gnet_stats_basic_packed bstats ;
   seqcount_t running ;
   struct gnet_stats_queue qstats ;
   unsigned long state ;
   struct Qdisc *next_sched ;
   struct sk_buff_head skb_bad_txq ;
   spinlock_t busylock ;
   spinlock_t seqlock ;
   bool empty ;
   struct callback_head rcu ;
};
#line 195 
struct tcf_block;
#line 195  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct Qdisc_class_ops {
   unsigned int flags ;
   struct netdev_queue *(*select_queue)(struct Qdisc *, struct tcmsg *) ;
   int (*graft)(struct Qdisc *, unsigned long , struct Qdisc *, struct Qdisc **, struct netlink_ext_ack *) ;
   struct Qdisc *(*leaf)(struct Qdisc *, unsigned long ) ;
   void (*qlen_notify)(struct Qdisc *, unsigned long ) ;
   unsigned long (*find)(struct Qdisc *, u32 ) ;
   int (*change)(struct Qdisc *, u32 , u32 , struct nlattr **, unsigned long *, struct netlink_ext_ack *) ;
   int (*delete)(struct Qdisc *, unsigned long ) ;
   void (*walk)(struct Qdisc *, struct qdisc_walker *) ;
   struct tcf_block *(*tcf_block)(struct Qdisc *, unsigned long , struct netlink_ext_ack *) ;
   unsigned long (*bind_tcf)(struct Qdisc *, unsigned long , u32 ) ;
   void (*unbind_tcf)(struct Qdisc *, unsigned long ) ;
   int (*dump)(struct Qdisc *, unsigned long , struct sk_buff *, struct tcmsg *) ;
   int (*dump_stats)(struct Qdisc *, unsigned long , struct gnet_dump *) ;
};
#line 235  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct Qdisc_ops {
   struct Qdisc_ops *next ;
   struct Qdisc_class_ops *cl_ops ;
   char id[16U] ;
   int priv_size ;
   unsigned int static_flags ;
   int (*enqueue)(struct sk_buff *, struct Qdisc *, struct sk_buff **) ;
   struct sk_buff *(*dequeue)(struct Qdisc *) ;
   struct sk_buff *(*peek)(struct Qdisc *) ;
   int (*init)(struct Qdisc *, struct nlattr *, struct netlink_ext_ack *) ;
   void (*reset)(struct Qdisc *) ;
   void (*destroy)(struct Qdisc *) ;
   int (*change)(struct Qdisc *, struct nlattr *, struct netlink_ext_ack *) ;
   void (*attach)(struct Qdisc *) ;
   int (*change_tx_queue_len)(struct Qdisc *, unsigned int ) ;
   int (*dump)(struct Qdisc *, struct sk_buff *) ;
   int (*dump_stats)(struct Qdisc *, struct gnet_dump *) ;
   void (*ingress_block_set)(struct Qdisc *, u32 ) ;
   void (*egress_block_set)(struct Qdisc *, u32 ) ;
   u32 (*ingress_block_get)(struct Qdisc *) ;
   u32 (*egress_block_get)(struct Qdisc *) ;
   struct module *owner ;
};
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct __anonstruct_801 {
   unsigned long class ;
   u32 classid ;
};
#line 272 
struct tcf_proto;
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct __anonstruct_802 {
   bool ingress ;
   struct gnet_stats_queue *qstats ;
};
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
union __anonunion_800 {
   struct __anonstruct_801 __anonCompField___anonunion_800_170 ;
   struct tcf_proto *goto_tp ;
   struct __anonstruct_802 __anonCompField___anonunion_800_171 ;
};
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_result {
   union __anonunion_800 __anonCompField_tcf_result_172 ;
};
#line 287 
struct tcf_chain;
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_proto_ops {
   struct list_head head ;
   char kind[16U] ;
   int (*classify)(struct sk_buff *, struct tcf_proto *, struct tcf_result *) ;
   int (*init)(struct tcf_proto *) ;
   void (*destroy)(struct tcf_proto *, bool , struct netlink_ext_ack *) ;
   void *(*get)(struct tcf_proto *, u32 ) ;
   void (*put)(struct tcf_proto *, void *) ;
   int (*change)(struct net *, struct sk_buff *, struct tcf_proto *, unsigned long , u32 , struct nlattr **, void **, bool , bool , struct netlink_ext_ack *) ;
   int (*delete)(struct tcf_proto *, void *, bool *, bool , struct netlink_ext_ack *) ;
   bool (*delete_empty)(struct tcf_proto *) ;
   void (*walk)(struct tcf_proto *, struct tcf_walker *, bool ) ;
   int (*reoffload)(struct tcf_proto *, bool , flow_setup_cb_t *, void *, struct netlink_ext_ack *) ;
   void (*hw_add)(struct tcf_proto *, void *) ;
   void (*hw_del)(struct tcf_proto *, void *) ;
   void (*bind_class)(void *, u32 , unsigned long ) ;
   void *(*tmplt_create)(struct net *, struct tcf_chain *, struct nlattr **, struct netlink_ext_ack *) ;
   void (*tmplt_destroy)(void *) ;
   int (*dump)(struct net *, struct tcf_proto *, void *, struct sk_buff *, struct tcmsg *, bool ) ;
   int (*tmplt_dump)(struct sk_buff *, struct net *, void *) ;
   struct module *owner ;
   int flags ;
};
#line 348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_proto {
   struct tcf_proto *next ;
   void *root ;
   int (*classify)(struct sk_buff *, struct tcf_proto *, struct tcf_result *) ;
   __be16 protocol ;
   u32 prio ;
   void *data ;
   struct tcf_proto_ops *ops ;
   struct tcf_chain *chain ;
   spinlock_t lock ;
   bool deleting ;
   refcount_t refcnt ;
   struct callback_head rcu ;
   struct hlist_node destroy_ht_node ;
};
#line 386  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_chain {
   struct mutex filter_chain_lock ;
   struct tcf_proto *filter_chain ;
   struct list_head list ;
   struct tcf_block *block ;
   u32 index ;
   unsigned int refcnt ;
   unsigned int action_refcnt ;
   bool explicitly_created ;
   bool flushing ;
   struct tcf_proto_ops *tmplt_ops ;
   void *tmplt_priv ;
   struct callback_head rcu ;
};
#line 402  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct __anonstruct_chain0_804 {
   struct tcf_chain *chain ;
   struct list_head filter_chain_list ;
};
#line 402  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_block {
   struct mutex lock ;
   struct list_head chain_list ;
   u32 index ;
   refcount_t refcnt ;
   struct net *net ;
   struct Qdisc *q ;
   struct rw_semaphore cb_lock ;
   struct flow_block flow_block ;
   struct list_head owner_list ;
   bool keep_dst ;
   atomic_t offloadcnt ;
   unsigned int nooffloaddevcnt ;
   unsigned int lockeddevcnt ;
   struct __anonstruct_chain0_804 chain0 ;
   struct callback_head rcu ;
   struct hlist_head proto_destroy_ht[128U] ;
   struct mutex proto_destroy_lock ;
};
#line 1269  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct mini_Qdisc {
   struct tcf_proto *filter_list ;
   struct gnet_stats_basic_cpu *cpu_bstats ;
   struct gnet_stats_queue *cpu_qstats ;
   struct callback_head rcu ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/filter.h"
struct sock_filter {
   __u16 code ;
   __u8 jt ;
   __u8 jf ;
   __u32 k ;
};
#line 35 
struct sock_reuseport;
#line 513  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
struct sock_fprog_kern {
   u16 len ;
   struct sock_filter *filter ;
};
#line 526  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
union __anonunion_817 {
   struct sock_filter insns[0U] ;
   struct bpf_insn insnsi[0U] ;
};
#line 526  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
struct bpf_prog {
   u16 pages ;
   u16 jited : 1 ;
   u16 jit_requested : 1 ;
   u16 gpl_compatible : 1 ;
   u16 cb_access : 1 ;
   u16 dst_needed : 1 ;
   u16 blinded : 1 ;
   u16 is_func : 1 ;
   u16 kprobe_override : 1 ;
   u16 has_callchain_buf : 1 ;
   u16 enforce_expected_attach_type : 1 ;
   enum bpf_prog_type type ;
   enum bpf_attach_type expected_attach_type ;
   u32 len ;
   u32 jited_len ;
   u8 tag[8U] ;
   struct bpf_prog_aux *aux ;
   struct sock_fprog_kern *orig_prog ;
   unsigned int (*bpf_func)(void *, struct bpf_insn *) ;
   union __anonunion_817 __anonCompField_bpf_prog_174 ;
};
#line 554  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
struct sk_filter {
   refcount_t refcnt ;
   struct callback_head rcu ;
   struct bpf_prog *prog ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/poll.h"
struct pollfd {
   int fd ;
   short events ;
   short revents ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/poll.h"
struct poll_table_struct {
   void (*_qproc)(struct file *, wait_queue_head_t *, struct poll_table_struct *) ;
   __poll_t _key ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_table;
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_parms {
   possible_net_t net ;
   struct net_device *dev ;
   struct list_head list ;
   int (*neigh_setup)(struct neighbour *) ;
   struct neigh_table *tbl ;
   void *sysctl_table ;
   int dead ;
   refcount_t refcnt ;
   struct callback_head callback_head ;
   int reachable_time ;
   int data[13U] ;
   unsigned long data_state[1U] ;
};
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_statistics {
   unsigned long allocs ;
   unsigned long destroys ;
   unsigned long hash_grows ;
   unsigned long res_failed ;
   unsigned long lookups ;
   unsigned long hits ;
   unsigned long rcv_probes_mcast ;
   unsigned long rcv_probes_ucast ;
   unsigned long periodic_gc_runs ;
   unsigned long forced_gc_runs ;
   unsigned long unres_discards ;
   unsigned long table_fulls ;
};
#line 134 
struct neigh_ops;
#line 134  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neighbour {
   struct neighbour *next ;
   struct neigh_table *tbl ;
   struct neigh_parms *parms ;
   unsigned long confirmed ;
   unsigned long updated ;
   rwlock_t lock ;
   refcount_t refcnt ;
   unsigned int arp_queue_len_bytes ;
   struct sk_buff_head arp_queue ;
   struct timer_list timer ;
   unsigned long used ;
   atomic_t probes ;
   __u8 flags ;
   __u8 nud_state ;
   __u8 type ;
   __u8 dead ;
   u8 protocol ;
   seqlock_t ha_lock ;
   unsigned char ha[32U] ;
   struct hh_cache hh ;
   int (*output)(struct neighbour *, struct sk_buff *) ;
   struct neigh_ops *ops ;
   struct list_head gc_list ;
   struct callback_head rcu ;
   struct net_device *dev ;
   u8 primary_key[0U] ;
} __attribute__((__designated_init__));
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_ops {
   int family ;
   void (*solicit)(struct neighbour *, struct sk_buff *) ;
   void (*error_report)(struct neighbour *, struct sk_buff *) ;
   int (*output)(struct neighbour *, struct sk_buff *) ;
   int (*connected_output)(struct neighbour *, struct sk_buff *) ;
};
#line 171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct pneigh_entry {
   struct pneigh_entry *next ;
   possible_net_t net ;
   struct net_device *dev ;
   u8 flags ;
   u8 protocol ;
   u8 key[0U] ;
};
#line 186  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_hash_table {
   struct neighbour **hash_buckets ;
   unsigned int hash_shift ;
   __u32 hash_rnd[4U] ;
   struct callback_head rcu ;
};
#line 194  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_table {
   int family ;
   unsigned int entry_size ;
   unsigned int key_len ;
   __be16 protocol ;
   __u32 (*hash)(void *, struct net_device *, __u32 *) ;
   bool (*key_eq)(struct neighbour *, void *) ;
   int (*constructor)(struct neighbour *) ;
   int (*pconstructor)(struct pneigh_entry *) ;
   void (*pdestructor)(struct pneigh_entry *) ;
   void (*proxy_redo)(struct sk_buff *) ;
   bool (*allow_add)(struct net_device *, struct netlink_ext_ack *) ;
   char *id ;
   struct neigh_parms parms ;
   struct list_head parms_list ;
   int gc_interval ;
   int gc_thresh1 ;
   int gc_thresh2 ;
   int gc_thresh3 ;
   unsigned long last_flush ;
   struct delayed_work gc_work ;
   struct timer_list proxy_timer ;
   struct sk_buff_head proxy_queue ;
   atomic_t entries ;
   atomic_t gc_entries ;
   struct list_head gc_list ;
   rwlock_t lock ;
   unsigned long last_rand ;
   struct neigh_statistics *stats ;
   struct neigh_hash_table *nht ;
   struct pneigh_entry **phash_buckets ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst.h"
struct lwtunnel_state;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst.h"
struct dst_entry {
   struct net_device *dev ;
   struct dst_ops *ops ;
   unsigned long _metrics ;
   unsigned long expires ;
   struct xfrm_state *xfrm ;
   int (*input)(struct sk_buff *) ;
   int (*output)(struct net *, struct sock *, struct sk_buff *) ;
   unsigned short flags ;
   short obsolete ;
   unsigned short header_len ;
   unsigned short trailer_len ;
   atomic_t __refcnt ;
   int __use ;
   unsigned long lastuse ;
   struct lwtunnel_state *lwtstate ;
   struct callback_head callback_head ;
   short error ;
   short __pad ;
   __u32 tclassid ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fib_rules.h"
struct fib_rule_hdr {
   __u8 family ;
   __u8 dst_len ;
   __u8 src_len ;
   __u8 tos ;
   __u8 table ;
   __u8 res1 ;
   __u8 res2 ;
   __u8 action ;
   __u32 flags ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fib_rules.h"
struct fib_rule_port_range {
   __u16 start ;
   __u16 end ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_notifier.h"
struct fib_notifier_ops {
   int family ;
   struct list_head list ;
   unsigned int (*fib_seq_read)(struct net *) ;
   int (*fib_dump)(struct net *, struct notifier_block *, struct netlink_ext_ack *) ;
   struct module *owner ;
   struct callback_head rcu ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_kuid_range {
   kuid_t start ;
   kuid_t end ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_rule {
   struct list_head list ;
   int iifindex ;
   int oifindex ;
   u32 mark ;
   u32 mark_mask ;
   u32 flags ;
   u32 table ;
   u8 action ;
   u8 l3mdev ;
   u8 proto ;
   u8 ip_proto ;
   u32 target ;
   __be64 tun_id ;
   struct fib_rule *ctarget ;
   struct net *fr_net ;
   refcount_t refcnt ;
   u32 pref ;
   int suppress_ifgroup ;
   int suppress_prefixlen ;
   char iifname[16U] ;
   char oifname[16U] ;
   struct fib_kuid_range uid_range ;
   struct fib_rule_port_range sport_range ;
   struct fib_rule_port_range dport_range ;
   struct callback_head rcu ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_lookup_arg {
   void *lookup_ptr ;
   void *lookup_data ;
   void *result ;
   struct fib_rule *rule ;
   u32 table ;
   int flags ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_rules_ops {
   int family ;
   struct list_head list ;
   int rule_size ;
   int addr_size ;
   int unresolved_rules ;
   int nr_goto_rules ;
   unsigned int fib_rules_seq ;
   int (*action)(struct fib_rule *, struct flowi *, int , struct fib_lookup_arg *) ;
   bool (*suppress)(struct fib_rule *, struct fib_lookup_arg *) ;
   int (*match)(struct fib_rule *, struct flowi *, int ) ;
   int (*configure)(struct fib_rule *, struct sk_buff *, struct fib_rule_hdr *, struct nlattr **, struct netlink_ext_ack *) ;
   int (*delete)(struct fib_rule *) ;
   int (*compare)(struct fib_rule *, struct fib_rule_hdr *, struct nlattr **) ;
   int (*fill)(struct fib_rule *, struct sk_buff *, struct fib_rule_hdr *) ;
   size_t (*nlmsg_payload)(struct fib_rule *) ;
   void (*flush_cache)(struct fib_rules_ops *) ;
   int nlgroup ;
   struct nla_policy *policy ;
   struct list_head rules_list ;
   struct module *owner ;
   struct net *fro_net ;
   struct callback_head rcu ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/l3mdev.h"
struct l3mdev_ops {
   u32 (*l3mdev_fib_table)(struct net_device *) ;
   struct sk_buff *(*l3mdev_l3_rcv)(struct net_device *, struct sk_buff *, u16 ) ;
   struct sk_buff *(*l3mdev_l3_out)(struct net_device *, struct sock *, struct sk_buff *, u16 ) ;
   struct dst_entry *(*l3mdev_link_scope_lookup)(struct net_device *, struct flowi6 *) ;
};
#line 202  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/l3mdev.h"
struct __anonstruct_socket_lock_t_839 {
   spinlock_t slock ;
   int owned ;
   wait_queue_head_t wq ;
   struct lockdep_map dep_map ;
};
#line 202  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/l3mdev.h"
typedef struct __anonstruct_socket_lock_t_839 socket_lock_t;
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct proto;
#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
typedef __u32 __portpair;
#line 114  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
typedef __u64 __addrpair;
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct __anonstruct_841 {
   __be32 skc_daddr ;
   __be32 skc_rcv_saddr ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_840 {
   __addrpair skc_addrpair ;
   struct __anonstruct_841 __anonCompField___anonunion_840_176 ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_842 {
   unsigned int skc_hash ;
   __u16 skc_u16hashes[2U] ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct __anonstruct_844 {
   __be16 skc_dport ;
   __u16 skc_num ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_843 {
   __portpair skc_portpair ;
   struct __anonstruct_844 __anonCompField___anonunion_843_179 ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_845 {
   struct hlist_node skc_bind_node ;
   struct hlist_node skc_portaddr_node ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_846 {
   unsigned long skc_flags ;
   struct sock *skc_listener ;
   struct inet_timewait_death_row *skc_tw_dr ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_847 {
   struct hlist_node skc_node ;
   struct hlist_nulls_node skc_nulls_node ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_848 {
   int skc_incoming_cpu ;
   u32 skc_rcv_wnd ;
   u32 skc_tw_rcv_nxt ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_849 {
   u32 skc_rxhash ;
   u32 skc_window_clamp ;
   u32 skc_tw_snd_nxt ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct sock_common {
   union __anonunion_840 __anonCompField_sock_common_177 ;
   union __anonunion_842 __anonCompField_sock_common_178 ;
   union __anonunion_843 __anonCompField_sock_common_180 ;
   unsigned short skc_family ;
   unsigned char skc_state ;
   unsigned char skc_reuse : 4 ;
   unsigned char skc_reuseport : 1 ;
   unsigned char skc_ipv6only : 1 ;
   unsigned char skc_net_refcnt : 1 ;
   int skc_bound_dev_if ;
   union __anonunion_845 __anonCompField_sock_common_181 ;
   struct proto *skc_prot ;
   possible_net_t skc_net ;
   struct in6_addr skc_v6_daddr ;
   struct in6_addr skc_v6_rcv_saddr ;
   atomic64_t skc_cookie ;
   union __anonunion_846 __anonCompField_sock_common_182 ;
   int skc_dontcopy_begin[0U] ;
   union __anonunion_847 __anonCompField_sock_common_183 ;
   unsigned short skc_tx_queue_mapping ;
   unsigned short skc_rx_queue_mapping ;
   union __anonunion_848 __anonCompField_sock_common_184 ;
   refcount_t skc_refcnt ;
   int skc_dontcopy_end[0U] ;
   union __anonunion_849 __anonCompField_sock_common_185 ;
};
#line 231 
struct bpf_sk_storage;
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct __anonstruct_sk_backlog_850 {
   atomic_t rmem_alloc ;
   int len ;
   struct sk_buff *head ;
   struct sk_buff *tail ;
};
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_851 {
   struct socket_wq *sk_wq ;
   struct socket_wq *sk_wq_raw ;
};
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_852 {
   struct sk_buff *sk_send_head ;
   struct rb_root tcp_rtx_queue ;
};
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct sock {
   struct sock_common __sk_common ;
   socket_lock_t sk_lock ;
   atomic_t sk_drops ;
   int sk_rcvlowat ;
   struct sk_buff_head sk_error_queue ;
   struct sk_buff *sk_rx_skb_cache ;
   struct sk_buff_head sk_receive_queue ;
   struct __anonstruct_sk_backlog_850 sk_backlog ;
   int sk_forward_alloc ;
   unsigned int sk_ll_usec ;
   unsigned int sk_napi_id ;
   int sk_rcvbuf ;
   struct sk_filter *sk_filter ;
   union __anonunion_851 __anonCompField_sock_186 ;
   struct xfrm_policy *sk_policy[2U] ;
   struct dst_entry *sk_rx_dst ;
   struct dst_entry *sk_dst_cache ;
   atomic_t sk_omem_alloc ;
   int sk_sndbuf ;
   int sk_wmem_queued ;
   refcount_t sk_wmem_alloc ;
   unsigned long sk_tsq_flags ;
   union __anonunion_852 __anonCompField_sock_187 ;
   struct sk_buff *sk_tx_skb_cache ;
   struct sk_buff_head sk_write_queue ;
   __s32 sk_peek_off ;
   int sk_write_pending ;
   __u32 sk_dst_pending_confirm ;
   u32 sk_pacing_status ;
   long sk_sndtimeo ;
   struct timer_list sk_timer ;
   __u32 sk_priority ;
   __u32 sk_mark ;
   unsigned long sk_pacing_rate ;
   unsigned long sk_max_pacing_rate ;
   struct page_frag sk_frag ;
   netdev_features_t sk_route_caps ;
   netdev_features_t sk_route_nocaps ;
   netdev_features_t sk_route_forced_caps ;
   int sk_gso_type ;
   unsigned int sk_gso_max_size ;
   gfp_t sk_allocation ;
   __u32 sk_txhash ;
   unsigned int __sk_flags_offset[0U] ;
   unsigned int sk_padding : 1 ;
   unsigned int sk_kern_sock : 1 ;
   unsigned int sk_no_check_tx : 1 ;
   unsigned int sk_no_check_rx : 1 ;
   unsigned int sk_userlocks : 4 ;
   unsigned int sk_protocol : 8 ;
   unsigned int sk_type : 16 ;
   u16 sk_gso_max_segs ;
   u8 sk_pacing_shift ;
   unsigned long sk_lingertime ;
   struct proto *sk_prot_creator ;
   rwlock_t sk_callback_lock ;
   int sk_err ;
   int sk_err_soft ;
   u32 sk_ack_backlog ;
   u32 sk_max_ack_backlog ;
   kuid_t sk_uid ;
   struct pid *sk_peer_pid ;
   struct cred *sk_peer_cred ;
   long sk_rcvtimeo ;
   ktime_t sk_stamp ;
   u16 sk_tsflags ;
   u8 sk_shutdown ;
   u32 sk_tskey ;
   atomic_t sk_zckey ;
   u8 sk_clockid ;
   u8 sk_txtime_deadline_mode : 1 ;
   u8 sk_txtime_report_errors : 1 ;
   u8 sk_txtime_unused : 6 ;
   struct socket *sk_socket ;
   void *sk_user_data ;
   void *sk_security ;
   struct sock_cgroup_data sk_cgrp_data ;
   struct mem_cgroup *sk_memcg ;
   void (*sk_state_change)(struct sock *) ;
   void (*sk_data_ready)(struct sock *) ;
   void (*sk_write_space)(struct sock *) ;
   void (*sk_error_report)(struct sock *) ;
   int (*sk_backlog_rcv)(struct sock *, struct sk_buff *) ;
   struct sk_buff *(*sk_validate_xmit_skb)(struct sock *, struct net_device *, struct sk_buff *) ;
   void (*sk_destruct)(struct sock *) ;
   struct sock_reuseport *sk_reuseport_cb ;
   struct bpf_sk_storage *sk_bpf_storage ;
   struct callback_head sk_rcu ;
};
#line 1048 
struct request_sock_ops;
#line 1049 
struct timewait_sock_ops;
#line 1050 
struct raw_hashinfo;
#line 1051 
struct smc_hashinfo;
#line 1071 
struct udp_table;
#line 1071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_h_887 {
   struct inet_hashinfo *hashinfo ;
   struct udp_table *udp_table ;
   struct raw_hashinfo *raw_hash ;
   struct smc_hashinfo *smc_hash ;
};
#line 1071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct proto {
   void (*close)(struct sock *, long ) ;
   int (*pre_connect)(struct sock *, struct sockaddr *, int ) ;
   int (*connect)(struct sock *, struct sockaddr *, int ) ;
   int (*disconnect)(struct sock *, int ) ;
   struct sock *(*accept)(struct sock *, int , int *, bool ) ;
   int (*ioctl)(struct sock *, int , unsigned long ) ;
   int (*init)(struct sock *) ;
   void (*destroy)(struct sock *) ;
   void (*shutdown)(struct sock *, int ) ;
   int (*setsockopt)(struct sock *, int , int , char *, unsigned int ) ;
   int (*getsockopt)(struct sock *, int , int , char *, int *) ;
   void (*keepalive)(struct sock *, int ) ;
   int (*compat_setsockopt)(struct sock *, int , int , char *, unsigned int ) ;
   int (*compat_getsockopt)(struct sock *, int , int , char *, int *) ;
   int (*compat_ioctl)(struct sock *, unsigned int , unsigned long ) ;
   int (*sendmsg)(struct sock *, struct msghdr *, size_t ) ;
   int (*recvmsg)(struct sock *, struct msghdr *, size_t , int , int , int *) ;
   int (*sendpage)(struct sock *, struct page *, int , size_t , int ) ;
   int (*bind)(struct sock *, struct sockaddr *, int ) ;
   int (*backlog_rcv)(struct sock *, struct sk_buff *) ;
   void (*release_cb)(struct sock *) ;
   int (*hash)(struct sock *) ;
   void (*unhash)(struct sock *) ;
   void (*rehash)(struct sock *) ;
   int (*get_port)(struct sock *, unsigned short ) ;
   unsigned int inuse_idx ;
   bool (*stream_memory_free)(struct sock *, int ) ;
   bool (*stream_memory_read)(struct sock *) ;
   void (*enter_memory_pressure)(struct sock *) ;
   void (*leave_memory_pressure)(struct sock *) ;
   atomic_long_t *memory_allocated ;
   struct percpu_counter *sockets_allocated ;
   unsigned long *memory_pressure ;
   long *sysctl_mem ;
   int *sysctl_wmem ;
   int *sysctl_rmem ;
   u32 sysctl_wmem_offset ;
   u32 sysctl_rmem_offset ;
   int max_header ;
   bool no_autobind ;
   struct kmem_cache *slab ;
   unsigned int obj_size ;
   slab_flags_t slab_flags ;
   unsigned int useroffset ;
   unsigned int usersize ;
   struct percpu_counter *orphan_count ;
   struct request_sock_ops *rsk_prot ;
   struct timewait_sock_ops *twsk_prot ;
   union __anonunion_h_887 h ;
   struct module *owner ;
   char name[32U] ;
   struct list_head node ;
   int (*diag_destroy)(struct sock *, int ) ;
} __attribute__((__designated_init__));
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/request_sock.h"
struct request_sock_ops {
   int family ;
   unsigned int obj_size ;
   struct kmem_cache *slab ;
   char *slab_name ;
   int (*rtx_syn_ack)(struct sock *, struct request_sock *) ;
   void (*send_ack)(struct sock *, struct sk_buff *, struct request_sock *) ;
   void (*send_reset)(struct sock *, struct sk_buff *) ;
   void (*destructor)(struct request_sock *) ;
   void (*syn_ack_timeout)(struct request_sock *) ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/request_sock.h"
struct request_sock {
   struct sock_common __req_common ;
   struct request_sock *dl_next ;
   u16 mss ;
   u8 num_retrans ;
   u8 cookie_ts : 1 ;
   u8 num_timeout : 7 ;
   u32 ts_recent ;
   struct timer_list rsk_timer ;
   struct request_sock_ops *rsk_ops ;
   struct sock *sk ;
   u32 *saved_syn ;
   u32 secid ;
   u32 peer_secid ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ipv6.h"
struct ipv6_stable_secret {
   bool initialized ;
   struct in6_addr secret ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ipv6.h"
struct ipv6_devconf {
   __s32 forwarding ;
   __s32 hop_limit ;
   __s32 mtu6 ;
   __s32 accept_ra ;
   __s32 accept_redirects ;
   __s32 autoconf ;
   __s32 dad_transmits ;
   __s32 rtr_solicits ;
   __s32 rtr_solicit_interval ;
   __s32 rtr_solicit_max_interval ;
   __s32 rtr_solicit_delay ;
   __s32 force_mld_version ;
   __s32 mldv1_unsolicited_report_interval ;
   __s32 mldv2_unsolicited_report_interval ;
   __s32 use_tempaddr ;
   __s32 temp_valid_lft ;
   __s32 temp_prefered_lft ;
   __s32 regen_max_retry ;
   __s32 max_desync_factor ;
   __s32 max_addresses ;
   __s32 accept_ra_defrtr ;
   __s32 accept_ra_min_hop_limit ;
   __s32 accept_ra_pinfo ;
   __s32 ignore_routes_with_linkdown ;
   __s32 accept_ra_rtr_pref ;
   __s32 rtr_probe_interval ;
   __s32 accept_ra_rt_info_min_plen ;
   __s32 accept_ra_rt_info_max_plen ;
   __s32 proxy_ndp ;
   __s32 accept_source_route ;
   __s32 accept_ra_from_local ;
   __s32 optimistic_dad ;
   __s32 use_optimistic ;
   __s32 mc_forwarding ;
   __s32 disable_ipv6 ;
   __s32 drop_unicast_in_l2_multicast ;
   __s32 accept_dad ;
   __s32 force_tllao ;
   __s32 ndisc_notify ;
   __s32 suppress_frag_ndisc ;
   __s32 accept_ra_mtu ;
   __s32 drop_unsolicited_na ;
   struct ipv6_stable_secret stable_secret ;
   __s32 use_oif_addrs_only ;
   __s32 keep_addr_on_down ;
   __s32 seg6_enabled ;
   __s32 seg6_require_hmac ;
   __u32 enhanced_dad ;
   __u32 addr_gen_mode ;
   __s32 disable_policy ;
   __s32 ndisc_tclass ;
   struct ctl_table_header *sysctl_header ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/timewait_sock.h"
struct timewait_sock_ops {
   struct kmem_cache *twsk_slab ;
   char *twsk_slab_name ;
   unsigned int twsk_obj_size ;
   int (*twsk_unique)(struct sock *, struct sock *, void *) ;
   void (*twsk_destructor)(struct sock *) ;
};
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct ip6_sf_list {
   struct ip6_sf_list *sf_next ;
   struct in6_addr sf_addr ;
   unsigned long sf_count[2U] ;
   unsigned char sf_gsresp ;
   unsigned char sf_oldin ;
   unsigned char sf_crcount ;
};
#line 114  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct ifmcaddr6 {
   struct in6_addr mca_addr ;
   struct inet6_dev *idev ;
   struct ifmcaddr6 *next ;
   struct ip6_sf_list *mca_sources ;
   struct ip6_sf_list *mca_tomb ;
   unsigned int mca_sfmode ;
   unsigned char mca_crcount ;
   unsigned long mca_sfcount[2U] ;
   struct timer_list mca_timer ;
   unsigned int mca_flags ;
   int mca_users ;
   refcount_t mca_refcnt ;
   spinlock_t mca_lock ;
   unsigned long mca_cstamp ;
   unsigned long mca_tstamp ;
};
#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct ifacaddr6 {
   struct in6_addr aca_addr ;
   struct fib6_info *aca_rt ;
   struct ifacaddr6 *aca_next ;
   struct hlist_node aca_addr_lst ;
   int aca_users ;
   refcount_t aca_refcnt ;
   unsigned long aca_cstamp ;
   unsigned long aca_tstamp ;
   struct callback_head rcu ;
};
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct ipv6_devstat {
   struct proc_dir_entry *proc_dir_entry ;
   struct ipstats_mib *ipv6 ;
   struct icmpv6_mib_device *icmpv6dev ;
   struct icmpv6msg_mib_device *icmpv6msgdev ;
};
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct inet6_dev {
   struct net_device *dev ;
   struct list_head addr_list ;
   struct ifmcaddr6 *mc_list ;
   struct ifmcaddr6 *mc_tomb ;
   spinlock_t mc_lock ;
   unsigned char mc_qrv ;
   unsigned char mc_gq_running ;
   unsigned char mc_ifc_count ;
   unsigned char mc_dad_count ;
   unsigned long mc_v1_seen ;
   unsigned long mc_qi ;
   unsigned long mc_qri ;
   unsigned long mc_maxdelay ;
   struct timer_list mc_gq_timer ;
   struct timer_list mc_ifc_timer ;
   struct timer_list mc_dad_timer ;
   struct ifacaddr6 *ac_list ;
   rwlock_t lock ;
   refcount_t refcnt ;
   __u32 if_flags ;
   int dead ;
   u32 desync_factor ;
   u8 rndid[8U] ;
   struct list_head tempaddr_list ;
   struct in6_addr token ;
   struct neigh_parms *nd_parms ;
   struct ipv6_devconf cnf ;
   struct ipv6_devstat stats ;
   struct timer_list rs_timer ;
   __s32 rs_interval ;
   __u8 rs_probes ;
   unsigned long tstamp ;
   struct callback_head rcu ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_arp.h"
struct prefix_info;
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ndisc.h"
struct nd_opt_hdr {
   __u8 nd_opt_type ;
   __u8 nd_opt_len ;
} __attribute__((__packed__));
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ndisc.h"
struct ndisc_options {
   struct nd_opt_hdr *nd_opt_array[15U] ;
   struct nd_opt_hdr *nd_opts_ri ;
   struct nd_opt_hdr *nd_opts_ri_end ;
   struct nd_opt_hdr *nd_useropts ;
   struct nd_opt_hdr *nd_useropts_end ;
   struct nd_opt_hdr *nd_802154_opt_array[3U] ;
};
#line 201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ndisc.h"
struct ndisc_ops {
   int (*is_useropt)(u8 ) ;
   int (*parse_options)(struct net_device *, struct nd_opt_hdr *, struct ndisc_options *) ;
   void (*update)(struct net_device *, struct neighbour *, u32 , u8 , struct ndisc_options *) ;
   int (*opt_addr_space)(struct net_device *, u8 , struct neighbour *, u8 *, u8 **) ;
   void (*fill_addr_option)(struct net_device *, struct sk_buff *, u8 , u8 *) ;
   void (*prefix_rcv_add_addr)(struct net *, struct net_device *, struct prefix_info *, struct inet6_dev *, struct in6_addr *, int , u32 , bool , bool , __u32 , u32 , bool ) ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inetpeer.h"
struct inet_peer_base {
   struct rb_root rb_root ;
   seqlock_t lock ;
   int total ;
};
#line 235  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip_fib.h"
struct fib_table {
   struct hlist_node tb_hlist ;
   u32 tb_id ;
   int tb_num_default ;
   struct callback_head rcu ;
   unsigned long *tb_data ;
   unsigned long __data[0U] ;
};
#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip.h"
union __anonunion_984 {
   void (*destructor)(struct sock *) ;
   struct sock *saved_sk ;
};
#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip.h"
struct ip_ra_chain {
   struct ip_ra_chain *next ;
   struct sock *sk ;
   union __anonunion_984 __anonCompField_ip_ra_chain_195 ;
   struct callback_head rcu ;
};
#line 326  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/mdio.h"
typedef unsigned long kernel_ulong_t;
#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct acpi_device_id {
   __u8 id[9U] ;
   kernel_ulong_t driver_data ;
   __u32 cls ;
   __u32 cls_msk ;
};
#line 260  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct of_device_id {
   char name[32U] ;
   char type[32U] ;
   char compatible[128U] ;
   void *data ;
};
#line 582  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct platform_device_id {
   char name[20U] ;
   kernel_ulong_t driver_data ;
};
#line 823 
struct gpio_desc;
#line 824 
struct mii_bus;
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mdio.h"
struct reset_control;
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mdio.h"
struct mdio_device {
   struct device dev ;
   struct mii_bus *bus ;
   char modalias[32U] ;
   int (*bus_match)(struct device *, struct device_driver *) ;
   void (*device_free)(struct mdio_device *) ;
   void (*device_remove)(struct mdio_device *) ;
   int addr ;
   int flags ;
   struct gpio_desc *reset_gpio ;
   struct reset_control *reset_ctrl ;
   unsigned int reset_assert_delay ;
   unsigned int reset_deassert_delay ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mdio.h"
struct mdio_driver_common {
   struct device_driver driver ;
   int flags ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phy.h"
enum ldv_19579 {
    PHY_INTERFACE_MODE_NA = 0,
    PHY_INTERFACE_MODE_INTERNAL = 1,
    PHY_INTERFACE_MODE_MII = 2,
    PHY_INTERFACE_MODE_GMII = 3,
    PHY_INTERFACE_MODE_SGMII = 4,
    PHY_INTERFACE_MODE_TBI = 5,
    PHY_INTERFACE_MODE_REVMII = 6,
    PHY_INTERFACE_MODE_RMII = 7,
    PHY_INTERFACE_MODE_RGMII = 8,
    PHY_INTERFACE_MODE_RGMII_ID = 9,
    PHY_INTERFACE_MODE_RGMII_RXID = 10,
    PHY_INTERFACE_MODE_RGMII_TXID = 11,
    PHY_INTERFACE_MODE_RTBI = 12,
    PHY_INTERFACE_MODE_SMII = 13,
    PHY_INTERFACE_MODE_XGMII = 14,
    PHY_INTERFACE_MODE_MOCA = 15,
    PHY_INTERFACE_MODE_QSGMII = 16,
    PHY_INTERFACE_MODE_TRGMII = 17,
    PHY_INTERFACE_MODE_1000BASEX = 18,
    PHY_INTERFACE_MODE_2500BASEX = 19,
    PHY_INTERFACE_MODE_RXAUI = 20,
    PHY_INTERFACE_MODE_XAUI = 21,
    PHY_INTERFACE_MODE_10GKR = 22,
    PHY_INTERFACE_MODE_USXGMII = 23,
    PHY_INTERFACE_MODE_MAX = 24
};
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phy.h"
typedef enum ldv_19579 phy_interface_t;
#line 186 
struct phylink;
#line 188 
enum ldv_19594 {
    MDIOBUS_ALLOCATED = 1,
    MDIOBUS_REGISTERED = 2,
    MDIOBUS_UNREGISTERED = 3,
    MDIOBUS_RELEASED = 4
};
#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phy.h"
struct mii_bus {
   struct module *owner ;
   char *name ;
   char id[61U] ;
   void *priv ;
   int (*read)(struct mii_bus *, int , int ) ;
   int (*write)(struct mii_bus *, int , int , u16 ) ;
   int (*reset)(struct mii_bus *) ;
   struct mutex mdio_lock ;
   struct device *parent ;
   enum ldv_19594 state ;
   struct device dev ;
   struct mdio_device *mdio_map[32U] ;
   u32 phy_mask ;
   u32 phy_ignore_ta_mask ;
   int irq[32U] ;
   int reset_delay_us ;
   struct gpio_desc *reset_gpiod ;
};
#line 278 
enum phy_state {
    PHY_DOWN = 0,
    PHY_READY = 1,
    PHY_HALTED = 2,
    PHY_UP = 3,
    PHY_RUNNING = 4,
    PHY_NOLINK = 5
};
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phy.h"
struct phy_c45_device_ids {
   u32 devices_in_package ;
   u32 device_ids[8U] ;
};
#line 363 
struct phy_driver;
#line 363 
struct phy_led_trigger;
#line 363  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phy.h"
struct phy_device {
   struct mdio_device mdio ;
   struct phy_driver *drv ;
   u32 phy_id ;
   struct phy_c45_device_ids c45_ids ;
   unsigned int is_c45 : 1 ;
   unsigned int is_internal : 1 ;
   unsigned int is_pseudo_fixed_link : 1 ;
   unsigned int is_gigabit_capable : 1 ;
   unsigned int has_fixups : 1 ;
   unsigned int suspended : 1 ;
   unsigned int sysfs_links : 1 ;
   unsigned int loopback_enabled : 1 ;
   unsigned int autoneg : 1 ;
   unsigned int link : 1 ;
   unsigned int autoneg_complete : 1 ;
   unsigned int interrupts : 1 ;
   enum phy_state state ;
   u32 dev_flags ;
   phy_interface_t interface ;
   int speed ;
   int duplex ;
   int pause ;
   int asym_pause ;
   unsigned long supported[2U] ;
   unsigned long advertising[2U] ;
   unsigned long lp_advertising[2U] ;
   unsigned long adv_old[2U] ;
   u32 eee_broken_modes ;
   struct phy_led_trigger *phy_led_triggers ;
   unsigned int phy_num_led_triggers ;
   struct phy_led_trigger *last_triggered ;
   struct phy_led_trigger *led_link_trigger ;
   int irq ;
   void *priv ;
   struct delayed_work state_queue ;
   struct mutex lock ;
   bool sfp_bus_attached ;
   struct sfp_bus *sfp_bus ;
   struct phylink *phylink ;
   struct net_device *attached_dev ;
   u8 mdix ;
   u8 mdix_ctrl ;
   void (*phy_link_change)(struct phy_device *, bool , bool ) ;
   void (*adjust_link)(struct net_device *) ;
};
#line 475  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phy.h"
struct phy_driver {
   struct mdio_driver_common mdiodrv ;
   u32 phy_id ;
   char *name ;
   u32 phy_id_mask ;
   unsigned long *features ;
   u32 flags ;
   void *driver_data ;
   int (*soft_reset)(struct phy_device *) ;
   int (*config_init)(struct phy_device *) ;
   int (*probe)(struct phy_device *) ;
   int (*get_features)(struct phy_device *) ;
   int (*suspend)(struct phy_device *) ;
   int (*resume)(struct phy_device *) ;
   int (*config_aneg)(struct phy_device *) ;
   int (*aneg_done)(struct phy_device *) ;
   int (*read_status)(struct phy_device *) ;
   int (*ack_interrupt)(struct phy_device *) ;
   int (*config_intr)(struct phy_device *) ;
   int (*did_interrupt)(struct phy_device *) ;
   int (*handle_interrupt)(struct phy_device *) ;
   void (*remove)(struct phy_device *) ;
   int (*match_phy_device)(struct phy_device *) ;
   int (*ts_info)(struct phy_device *, struct ethtool_ts_info *) ;
   int (*hwtstamp)(struct phy_device *, struct ifreq *) ;
   bool (*rxtstamp)(struct phy_device *, struct sk_buff *, int ) ;
   void (*txtstamp)(struct phy_device *, struct sk_buff *, int ) ;
   int (*set_wol)(struct phy_device *, struct ethtool_wolinfo *) ;
   void (*get_wol)(struct phy_device *, struct ethtool_wolinfo *) ;
   void (*link_change_notify)(struct phy_device *) ;
   int (*read_mmd)(struct phy_device *, int , u16 ) ;
   int (*write_mmd)(struct phy_device *, int , u16 , u16 ) ;
   int (*read_page)(struct phy_device *) ;
   int (*write_page)(struct phy_device *, int ) ;
   int (*module_info)(struct phy_device *, struct ethtool_modinfo *) ;
   int (*module_eeprom)(struct phy_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_sset_count)(struct phy_device *) ;
   void (*get_strings)(struct phy_device *, u8 *) ;
   void (*get_stats)(struct phy_device *, struct ethtool_stats *, u64 *) ;
   int (*get_tunable)(struct phy_device *, struct ethtool_tunable *, void *) ;
   int (*set_tunable)(struct phy_device *, struct ethtool_tunable *, void *) ;
   int (*set_loopback)(struct phy_device *, bool ) ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phylink.h"
enum phylink_op_type {
    PHYLINK_NETDEV = 0,
    PHYLINK_DEV = 1
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phylink.h"
struct phylink_config {
   struct device *dev ;
   enum phylink_op_type type ;
};
#line 291 
enum mvpp2_prs_l2_cast {
    MVPP2_PRS_L2_UNI_CAST = 0,
    MVPP2_PRS_L2_MULTI_CAST = 1
};
#line 750  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2.h"
struct mvpp2_rss_table {
   u32 indir[32U] ;
};
#line 753 
enum ldv_19831 {
    MVPP21 = 0,
    MVPP22 = 1
};
#line 755 
struct regmap;
#line 755 
struct clk;
#line 755 
struct mvpp2_port;
#line 755 
struct mvpp2_tx_queue;
#line 755 
struct mvpp2_bm_pool;
#line 755 
struct mvpp2_prs_shadow;
#line 755  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2.h"
struct mvpp2 {
   void *lms_base ;
   void *iface_base ;
   void *swth_base[9U] ;
   struct regmap *sysctrl_base ;
   struct clk *pp_clk ;
   struct clk *gop_clk ;
   struct clk *mg_clk ;
   struct clk *mg_core_clk ;
   struct clk *axi_clk ;
   int port_count ;
   struct mvpp2_port *port_list[4U] ;
   unsigned int nthreads ;
   unsigned long lock_map ;
   struct mvpp2_tx_queue *aggr_txqs ;
   int percpu_pools ;
   struct mvpp2_bm_pool *bm_pools ;
   struct mvpp2_prs_shadow *prs_shadow ;
   bool *prs_double_vlans ;
   u32 tclk ;
   enum ldv_19831 hw_version ;
   unsigned int max_port_rxqs ;
   char queue_name[30U] ;
   struct workqueue_struct *stats_queue ;
   struct dentry *dbgfs_dir ;
   struct mvpp2_dbgfs_entries *dbgfs_entries ;
   struct mvpp2_rss_table *rss_tables[8U] ;
};
#line 825  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2.h"
struct mvpp2_pcpu_stats {
   struct u64_stats_sync syncp ;
   u64 rx_packets ;
   u64 rx_bytes ;
   u64 tx_packets ;
   u64 tx_bytes ;
};
#line 834  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2.h"
struct mvpp2_port_pcpu {
   struct hrtimer tx_done_timer ;
   struct net_device *dev ;
   bool timer_scheduled ;
};
#line 839 
enum ldv_19838 {
    MVPP2_QUEUE_VECTOR_SHARED = 0,
    MVPP2_QUEUE_VECTOR_PRIVATE = 1
};
#line 840  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2.h"
struct mvpp2_queue_vector {
   int irq ;
   struct napi_struct napi ;
   enum ldv_19838 type ;
   int sw_thread_id ;
   u16 sw_thread_mask ;
   int first_rxq ;
   int nrxqs ;
   u32 pending_cause_rx ;
   struct mvpp2_port *port ;
   struct cpumask *mask ;
};
#line 854  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2.h"
struct mvpp2_rfs_rule {
   int loc ;
   int flow_type ;
   int c2_index ;
   u16 hek_fields ;
   u8 engine ;
   u64 c2_tcam ;
   u64 c2_tcam_mask ;
   struct flow_rule *flow ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2.h"
struct mvpp2_ethtool_fs {
   struct mvpp2_rfs_rule rule ;
   struct ethtool_rxnfc rxnfc ;
};
#line 884 
struct mvpp2_rx_queue;
#line 884  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2.h"
struct mvpp2_port {
   u8 id ;
   int gop_id ;
   int link_irq ;
   struct mvpp2 *priv ;
   struct fwnode_handle *fwnode ;
   bool has_phy ;
   void *base ;
   void *stats_base ;
   struct mvpp2_rx_queue **rxqs ;
   unsigned int nrxqs ;
   struct mvpp2_tx_queue **txqs ;
   unsigned int ntxqs ;
   struct net_device *dev ;
   int pkt_size ;
   struct mvpp2_port_pcpu *pcpu ;
   spinlock_t bm_lock[9U] ;
   spinlock_t tx_lock[9U] ;
   unsigned long flags ;
   u16 tx_ring_size ;
   u16 rx_ring_size ;
   struct mvpp2_pcpu_stats *stats ;
   u64 *ethtool_stats ;
   struct mutex gather_stats_lock ;
   struct delayed_work stats_work ;
   struct device_node *of_node ;
   phy_interface_t phy_interface ;
   struct phylink *phylink ;
   struct phylink_config phylink_config ;
   struct phy *comphy ;
   struct mvpp2_bm_pool *pool_long ;
   struct mvpp2_bm_pool *pool_short ;
   u8 first_rxq ;
   struct mvpp2_queue_vector qvecs[9U] ;
   unsigned int nqvecs ;
   bool has_tx_irqs ;
   u32 tx_time_coal ;
   struct mvpp2_ethtool_fs *rfs_rules[4U] ;
   int n_rfs_rules ;
   int rss_ctx[8U] ;
};
#line 997  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2.h"
struct mvpp21_tx_desc {
   __le32 command ;
   u8 packet_offset ;
   u8 phys_txq ;
   __le16 data_size ;
   __le32 buf_dma_addr ;
   __le32 buf_cookie ;
   __le32 reserved1[3U] ;
   __le32 reserved2 ;
};
#line 1009  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2.h"
struct mvpp21_rx_desc {
   __le32 status ;
   __le16 reserved1 ;
   __le16 data_size ;
   __le32 buf_dma_addr ;
   __le32 buf_cookie ;
   __le16 reserved2 ;
   __le16 reserved3 ;
   u8 reserved4 ;
   u8 reserved5 ;
   __le16 reserved6 ;
   __le32 reserved7 ;
   __le32 reserved8 ;
};
#line 1025  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2.h"
struct mvpp22_tx_desc {
   __le32 command ;
   u8 packet_offset ;
   u8 phys_txq ;
   __le16 data_size ;
   __le64 reserved1 ;
   __le64 buf_dma_addr_ptp ;
   __le64 buf_cookie_misc ;
};
#line 1036  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2.h"
struct mvpp22_rx_desc {
   __le32 status ;
   __le16 reserved1 ;
   __le16 data_size ;
   __le32 reserved2 ;
   __le32 reserved3 ;
   __le64 buf_dma_addr_key_hash ;
   __le64 buf_cookie_misc ;
};
#line 1049  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2.h"
union __anonunion_992 {
   struct mvpp21_tx_desc pp21 ;
   struct mvpp22_tx_desc pp22 ;
};
#line 1049  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2.h"
struct mvpp2_tx_desc {
   union __anonunion_992 __anonCompField_mvpp2_tx_desc_196 ;
};
#line 1056  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2.h"
union __anonunion_993 {
   struct mvpp21_rx_desc pp21 ;
   struct mvpp22_rx_desc pp22 ;
};
#line 1056  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2.h"
struct mvpp2_rx_desc {
   union __anonunion_993 __anonCompField_mvpp2_rx_desc_197 ;
};
#line 1063  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2.h"
struct mvpp2_txq_pcpu_buf {
   struct sk_buff *skb ;
   dma_addr_t dma ;
   size_t size ;
};
#line 1075  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2.h"
struct mvpp2_txq_pcpu {
   unsigned int thread ;
   int size ;
   int count ;
   int wake_threshold ;
   int stop_threshold ;
   int reserved_num ;
   struct mvpp2_txq_pcpu_buf *buffs ;
   int txq_put_index ;
   int txq_get_index ;
   char *tso_headers ;
   dma_addr_t tso_headers_dma ;
};
#line 1106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2.h"
struct mvpp2_tx_queue {
   u8 id ;
   u8 log_id ;
   int size ;
   int count ;
   struct mvpp2_txq_pcpu *pcpu ;
   u32 done_pkts_coal ;
   struct mvpp2_tx_desc *descs ;
   dma_addr_t descs_dma ;
   int last_desc ;
   int next_desc_to_proc ;
};
#line 1137  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2.h"
struct mvpp2_rx_queue {
   u8 id ;
   int size ;
   u32 pkts_coal ;
   u32 time_coal ;
   struct mvpp2_rx_desc *descs ;
   dma_addr_t descs_dma ;
   int last_desc ;
   int next_desc_to_proc ;
   int port ;
   int logic_rxq ;
};
#line 1166  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2.h"
struct mvpp2_bm_pool {
   int id ;
   int size ;
   int size_bytes ;
   int buf_num ;
   int buf_size ;
   int pkt_size ;
   int frag_size ;
   u32 *virt_addr ;
   dma_addr_t dma_addr ;
   u32 port_map ;
};
#line 269  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_prs.h"
struct mvpp2_prs_entry {
   u32 index ;
   u32 tcam[6U] ;
   u32 sram[4U] ;
};
#line 280  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_prs.h"
struct mvpp2_prs_shadow {
   bool valid ;
   bool finish ;
   int lu ;
   int udf ;
   u32 ri ;
   u32 ri_mask ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u16 __sum16;
#line 164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned long irq_hw_number_t;
#line 346  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct static_key_true {
   struct static_key key ;
};
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct static_key_false {
   struct static_key key ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_debug.h"
union __anonunion_key_1002 {
   struct static_key_true dd_key_true ;
   struct static_key_false dd_key_false ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_debug.h"
struct _ddebug {
   char *modname ;
   char *function ;
   char *filename ;
   char *format ;
   unsigned int lineno : 18 ;
   unsigned int flags : 8 ;
   union __anonunion_key_1002 key ;
} __attribute__((__aligned__(8)));
#line 675  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/paravirt_types.h"
struct cpuinfo_x86;
#line 690  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
typedef struct cpumask *cpumask_var_t;
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
union __anonunion_1087 {
   __u32 x86_capability[20U] ;
   unsigned long x86_capability_alignment ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct cpuinfo_x86 {
   __u8 x86 ;
   __u8 x86_vendor ;
   __u8 x86_model ;
   __u8 x86_stepping ;
   int x86_tlbsize ;
   __u8 x86_virt_bits ;
   __u8 x86_phys_bits ;
   __u8 x86_coreid_bits ;
   __u8 cu_id ;
   __u32 extended_cpuid_level ;
   int cpuid_level ;
   union __anonunion_1087 __anonCompField_cpuinfo_x86_22 ;
   char x86_vendor_id[16U] ;
   char x86_model_id[64U] ;
   unsigned int x86_cache_size ;
   int x86_cache_alignment ;
   int x86_cache_max_rmid ;
   int x86_cache_occ_scale ;
   int x86_power ;
   unsigned long loops_per_jiffy ;
   u16 x86_max_cores ;
   u16 apicid ;
   u16 initial_apicid ;
   u16 x86_clflush_size ;
   u16 booted_cores ;
   u16 phys_proc_id ;
   u16 logical_proc_id ;
   u16 cpu_core_id ;
   u16 cpu_die_id ;
   u16 logical_die_id ;
   u16 cpu_index ;
   u32 microcode ;
   u8 x86_cache_bits ;
   unsigned int initialized : 1 ;
} __attribute__((__designated_init__));
#line 302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ioport.h"
struct irq_desc;
#line 303 
struct irq_data;
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/property.h"
typedef u32 phandle;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/of.h"
struct property {
   char *name ;
   int length ;
   void *value ;
   struct property *next ;
   unsigned long _flags ;
   struct bin_attribute attr ;
};
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/of.h"
struct device_node {
   char *name ;
   phandle phandle ;
   char *full_name ;
   struct fwnode_handle fwnode ;
   struct property *properties ;
   struct property *deadprops ;
   struct device_node *parent ;
   struct device_node *child ;
   struct device_node *sibling ;
   struct kobject kobj ;
   unsigned long _flags ;
   void *data ;
};
#line 1450 
struct irq_chip;
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_fwspec {
   struct fwnode_handle *fwnode ;
   int param_count ;
   u32 param[16U] ;
};
#line 68 
enum irq_domain_bus_token {
    DOMAIN_BUS_ANY = 0,
    DOMAIN_BUS_WIRED = 1,
    DOMAIN_BUS_GENERIC_MSI = 2,
    DOMAIN_BUS_PCI_MSI = 3,
    DOMAIN_BUS_PLATFORM_MSI = 4,
    DOMAIN_BUS_NEXUS = 5,
    DOMAIN_BUS_IPI = 6,
    DOMAIN_BUS_FSL_MC_MSI = 7,
    DOMAIN_BUS_TI_SCI_INTA_MSI = 8,
    DOMAIN_BUS_WAKEUP = 9
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_domain_ops {
   int (*match)(struct irq_domain *, struct device_node *, enum irq_domain_bus_token ) ;
   int (*select)(struct irq_domain *, struct irq_fwspec *, enum irq_domain_bus_token ) ;
   int (*map)(struct irq_domain *, unsigned int , irq_hw_number_t ) ;
   void (*unmap)(struct irq_domain *, unsigned int ) ;
   int (*xlate)(struct irq_domain *, struct device_node *, u32 *, unsigned int , unsigned long *, unsigned int *) ;
   int (*alloc)(struct irq_domain *, unsigned int , unsigned int , void *) ;
   void (*free)(struct irq_domain *, unsigned int , unsigned int ) ;
   int (*activate)(struct irq_domain *, struct irq_data *, bool ) ;
   void (*deactivate)(struct irq_domain *, struct irq_data *) ;
   int (*translate)(struct irq_domain *, struct irq_fwspec *, unsigned long *, unsigned int *) ;
   void (*debug_show)(struct seq_file *, struct irq_domain *, struct irq_data *, int ) ;
};
#line 132 
struct irq_domain_chip_generic;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_domain {
   struct list_head link ;
   char *name ;
   struct irq_domain_ops *ops ;
   void *host_data ;
   unsigned int flags ;
   unsigned int mapcount ;
   struct fwnode_handle *fwnode ;
   enum irq_domain_bus_token bus_token ;
   struct irq_domain_chip_generic *gc ;
   struct irq_domain *parent ;
   struct dentry *debugfs_file ;
   irq_hw_number_t hwirq_max ;
   unsigned int revmap_direct_max_irq ;
   unsigned int revmap_size ;
   struct xarray revmap_tree ;
   struct mutex revmap_tree_mutex ;
   unsigned int linear_revmap[] ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timerqueue.h"
enum hrtimer_mode {
    HRTIMER_MODE_ABS = 0,
    HRTIMER_MODE_REL = 1,
    HRTIMER_MODE_PINNED = 2,
    HRTIMER_MODE_SOFT = 4,
    HRTIMER_MODE_HARD = 8,
    HRTIMER_MODE_ABS_PINNED = 2,
    HRTIMER_MODE_REL_PINNED = 3,
    HRTIMER_MODE_ABS_SOFT = 4,
    HRTIMER_MODE_REL_SOFT = 5,
    HRTIMER_MODE_ABS_PINNED_SOFT = 6,
    HRTIMER_MODE_REL_PINNED_SOFT = 7,
    HRTIMER_MODE_ABS_HARD = 8,
    HRTIMER_MODE_REL_HARD = 9,
    HRTIMER_MODE_ABS_PINNED_HARD = 10,
    HRTIMER_MODE_REL_PINNED_HARD = 11
};
#line 313  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
typedef struct bio_vec skb_frag_t;
#line 416  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct skb_shared_hwtstamps {
   ktime_t hwtstamp ;
};
#line 510  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct skb_shared_info {
   __u8 __unused ;
   __u8 meta_len ;
   __u8 nr_frags ;
   __u8 tx_flags ;
   unsigned short gso_size ;
   unsigned short gso_segs ;
   struct sk_buff *frag_list ;
   struct skb_shared_hwtstamps hwtstamps ;
   unsigned int gso_type ;
   u32 tskey ;
   atomic_t dataref ;
   void *destructor_arg ;
   skb_frag_t frags[17U] ;
};
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
enum irqreturn {
    IRQ_NONE = 0,
    IRQ_HANDLED = 1,
    IRQ_WAKE_THREAD = 2
};
#line 145  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
typedef enum irqreturn irqreturn_t;
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
struct irqaction {
   irqreturn_t (*handler)(int , void *) ;
   void *dev_id ;
   void *percpu_dev_id ;
   struct irqaction *next ;
   irqreturn_t (*thread_fn)(int , void *) ;
   struct task_struct *thread ;
   struct irqaction *secondary ;
   unsigned int irq ;
   unsigned int flags ;
   unsigned long thread_flags ;
   unsigned long thread_mask ;
   char *name ;
   struct proc_dir_entry *dir ;
} __attribute__((__aligned__(4096)));
#line 268  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
struct irq_affinity_notify {
   unsigned int irq ;
   struct kref kref ;
   struct work_struct work ;
   void (*notify)(struct irq_affinity_notify *, cpumask_t *) ;
   void (*release)(struct kref *) ;
};
#line 472 
enum irqchip_irq_state {
    IRQCHIP_STATE_PENDING = 0,
    IRQCHIP_STATE_ACTIVE = 1,
    IRQCHIP_STATE_MASKED = 2,
    IRQCHIP_STATE_LINE_LEVEL = 3
};
#line 201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_hw_addr {
   struct list_head list ;
   unsigned char addr[32U] ;
   unsigned char type ;
   bool global_use ;
   int sync_cnt ;
   int refcount ;
   int synced ;
   struct callback_head callback_head ;
};
#line 362 
enum gro_result {
    GRO_MERGED = 0,
    GRO_MERGED_FREE = 1,
    GRO_HELD = 2,
    GRO_NORMAL = 3,
    GRO_DROP = 4,
    GRO_CONSUMED = 5
};
#line 371  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef enum gro_result gro_result_t;
#line 3610 
enum skb_free_reason {
    SKB_REASON_CONSUMED = 0,
    SKB_REASON_DROPPED = 1
};
#line 196  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/platform_device.h"
struct platform_driver {
   int (*probe)(struct platform_device *) ;
   int (*remove)(struct platform_device *) ;
   void (*shutdown)(struct platform_device *) ;
   int (*suspend)(struct platform_device *, pm_message_t ) ;
   int (*resume)(struct platform_device *) ;
   struct device_driver driver ;
   struct platform_device_id *id_table ;
   bool prevent_deferred_probe ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ip.h"
struct iphdr {
   __u8 ihl : 4 ;
   __u8 version : 4 ;
   __u8 tos ;
   __be16 tot_len ;
   __be16 id ;
   __be16 frag_off ;
   __u8 ttl ;
   __u8 protocol ;
   __sum16 check ;
   __be32 saddr ;
   __be32 daddr ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/inetdevice.h"
struct ipv4_devconf {
   void *sysctl ;
   int data[32U] ;
   unsigned long state[1U] ;
};
#line 25 
struct in_ifaddr;
#line 25 
struct ip_mc_list;
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/inetdevice.h"
struct in_device {
   struct net_device *dev ;
   refcount_t refcnt ;
   int dead ;
   struct in_ifaddr *ifa_list ;
   struct ip_mc_list *mc_list ;
   struct ip_mc_list **mc_hash ;
   int mc_count ;
   spinlock_t mc_tomb_lock ;
   struct ip_mc_list *mc_tomb ;
   unsigned long mr_v1_seen ;
   unsigned long mr_v2_seen ;
   unsigned long mr_maxdelay ;
   unsigned long mr_qi ;
   unsigned long mr_qri ;
   unsigned char mr_qrv ;
   unsigned char mr_gq_running ;
   unsigned char mr_ifc_count ;
   struct timer_list mr_gq_timer ;
   struct timer_list mr_ifc_timer ;
   struct neigh_parms *arp_parms ;
   struct ipv4_devconf cnf ;
   struct callback_head callback_head ;
};
#line 137  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/inetdevice.h"
struct in_ifaddr {
   struct hlist_node hash ;
   struct in_ifaddr *ifa_next ;
   struct in_device *ifa_dev ;
   struct callback_head callback_head ;
   __be32 ifa_local ;
   __be32 ifa_address ;
   __be32 ifa_mask ;
   __u32 ifa_rt_priority ;
   __be32 ifa_broadcast ;
   unsigned char ifa_scope ;
   unsigned char ifa_prefixlen ;
   __u32 ifa_flags ;
   char ifa_label[16U] ;
   __u32 ifa_valid_lft ;
   __u32 ifa_preferred_lft ;
   unsigned long ifa_cstamp ;
   unsigned long ifa_tstamp ;
};
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mbus.h"
struct mbus_dram_window {
   u8 cs_index ;
   u8 mbus_attr ;
   u64 base ;
   u64 size ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mbus.h"
struct mbus_dram_target_info {
   u8 mbus_dram_target_id ;
   int num_cs ;
   struct mbus_dram_window cs[4U] ;
};
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irq_regs.h"
struct msi_msg;
#line 63 
struct msi_desc;
#line 143  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irq.h"
struct irq_common_data {
   unsigned int state_use_accessors ;
   unsigned int node ;
   void *handler_data ;
   struct msi_desc *msi_desc ;
   cpumask_var_t affinity ;
   cpumask_var_t effective_affinity ;
};
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irq.h"
struct irq_data {
   u32 mask ;
   unsigned int irq ;
   unsigned long hwirq ;
   struct irq_common_data *common ;
   struct irq_chip *chip ;
   struct irq_domain *domain ;
   struct irq_data *parent_data ;
   void *chip_data ;
};
#line 449  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irq.h"
struct irq_chip {
   struct device *parent_device ;
   char *name ;
   unsigned int (*irq_startup)(struct irq_data *) ;
   void (*irq_shutdown)(struct irq_data *) ;
   void (*irq_enable)(struct irq_data *) ;
   void (*irq_disable)(struct irq_data *) ;
   void (*irq_ack)(struct irq_data *) ;
   void (*irq_mask)(struct irq_data *) ;
   void (*irq_mask_ack)(struct irq_data *) ;
   void (*irq_unmask)(struct irq_data *) ;
   void (*irq_eoi)(struct irq_data *) ;
   int (*irq_set_affinity)(struct irq_data *, struct cpumask *, bool ) ;
   int (*irq_retrigger)(struct irq_data *) ;
   int (*irq_set_type)(struct irq_data *, unsigned int ) ;
   int (*irq_set_wake)(struct irq_data *, unsigned int ) ;
   void (*irq_bus_lock)(struct irq_data *) ;
   void (*irq_bus_sync_unlock)(struct irq_data *) ;
   void (*irq_cpu_online)(struct irq_data *) ;
   void (*irq_cpu_offline)(struct irq_data *) ;
   void (*irq_suspend)(struct irq_data *) ;
   void (*irq_resume)(struct irq_data *) ;
   void (*irq_pm_shutdown)(struct irq_data *) ;
   void (*irq_calc_mask)(struct irq_data *) ;
   void (*irq_print_chip)(struct irq_data *, struct seq_file *) ;
   int (*irq_request_resources)(struct irq_data *) ;
   void (*irq_release_resources)(struct irq_data *) ;
   void (*irq_compose_msi_msg)(struct irq_data *, struct msi_msg *) ;
   void (*irq_write_msi_msg)(struct irq_data *, struct msi_msg *) ;
   int (*irq_get_irqchip_state)(struct irq_data *, enum irqchip_irq_state , bool *) ;
   int (*irq_set_irqchip_state)(struct irq_data *, enum irqchip_irq_state , bool ) ;
   int (*irq_set_vcpu_affinity)(struct irq_data *, void *) ;
   void (*ipi_send_single)(struct irq_data *, unsigned int ) ;
   void (*ipi_send_mask)(struct irq_data *, struct cpumask *) ;
   int (*irq_nmi_setup)(struct irq_data *) ;
   void (*irq_nmi_teardown)(struct irq_data *) ;
   unsigned long flags ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdesc.h"
struct irq_desc {
   struct irq_common_data irq_common_data ;
   struct irq_data irq_data ;
   unsigned int *kstat_irqs ;
   void (*handle_irq)(struct irq_desc *) ;
   struct irqaction *action ;
   unsigned int status_use_accessors ;
   unsigned int core_internal_state__do_not_mess_with_it ;
   unsigned int depth ;
   unsigned int wake_depth ;
   unsigned int tot_count ;
   unsigned int irq_count ;
   unsigned long last_unhandled ;
   unsigned int irqs_unhandled ;
   atomic_t threads_handled ;
   int threads_handled_last ;
   raw_spinlock_t lock ;
   struct cpumask *percpu_enabled ;
   struct cpumask *percpu_affinity ;
   struct cpumask *affinity_hint ;
   struct irq_affinity_notify *affinity_notify ;
   cpumask_var_t pending_mask ;
   unsigned long threads_oneshot ;
   atomic_t threads_active ;
   wait_queue_head_t wait_for_threads ;
   unsigned int nr_actions ;
   unsigned int no_suspend_depth ;
   unsigned int cond_suspend_depth ;
   unsigned int force_resume_depth ;
   struct proc_dir_entry *dir ;
   struct dentry *debugfs_file ;
   char *dev_name ;
   struct callback_head rcu ;
   struct kobject kobj ;
   struct mutex request_mutex ;
   int parent_irq ;
   struct module *owner ;
   char *name ;
} __attribute__((__aligned__(4096)));
#line 930  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irq.h"
struct irq_chip_regs {
   unsigned long enable ;
   unsigned long disable ;
   unsigned long mask ;
   unsigned long ack ;
   unsigned long eoi ;
   unsigned long type ;
   unsigned long polarity ;
};
#line 953  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irq.h"
struct irq_chip_type {
   struct irq_chip chip ;
   struct irq_chip_regs regs ;
   void (*handler)(struct irq_desc *) ;
   u32 type ;
   u32 mask_cache_priv ;
   u32 *mask_cache ;
};
#line 995  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irq.h"
struct irq_chip_generic {
   raw_spinlock_t lock ;
   void *reg_base ;
   u32 (*reg_readl)(void *) ;
   void (*reg_writel)(u32 , void *) ;
   void (*suspend)(struct irq_chip_generic *) ;
   void (*resume)(struct irq_chip_generic *) ;
   unsigned int irq_base ;
   unsigned int irq_cnt ;
   u32 mask_cache ;
   u32 type_cache ;
   u32 polarity_cache ;
   u32 wake_enabled ;
   u32 wake_active ;
   unsigned int num_ct ;
   void *private ;
   unsigned long installed ;
   unsigned long unused ;
   struct irq_domain *domain ;
   struct list_head list ;
   struct irq_chip_type chip_types[0U] ;
};
#line 1017 
enum irq_gc_flags {
    IRQ_GC_INIT_MASK_CACHE = 1,
    IRQ_GC_INIT_NESTED_LOCK = 2,
    IRQ_GC_MASK_CACHE_PER_TYPE = 4,
    IRQ_GC_NO_MASK = 8,
    IRQ_GC_BE_IO = 16
};
#line 1045  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irq.h"
struct irq_domain_chip_generic {
   unsigned int irqs_per_chip ;
   unsigned int num_chips ;
   unsigned int irq_flags_to_clear ;
   unsigned int irq_flags_to_set ;
   enum irq_gc_flags gc_flags ;
   struct irq_chip_generic *gc[0U] ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phylink.h"
struct phylink_link_state {
   unsigned long advertising[2U] ;
   unsigned long lp_advertising[2U] ;
   phy_interface_t interface ;
   int speed ;
   int duplex ;
   int pause ;
   unsigned int link : 1 ;
   unsigned int an_enabled : 1 ;
   unsigned int an_complete : 1 ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phylink.h"
struct phylink_mac_ops {
   void (*validate)(struct phylink_config *, unsigned long *, struct phylink_link_state *) ;
   void (*mac_pcs_get_state)(struct phylink_config *, struct phylink_link_state *) ;
   void (*mac_config)(struct phylink_config *, unsigned int , struct phylink_link_state *) ;
   void (*mac_an_restart)(struct phylink_config *) ;
   void (*mac_link_down)(struct phylink_config *, unsigned int , phy_interface_t ) ;
   void (*mac_link_up)(struct phylink_config *, unsigned int , phy_interface_t , struct phy_device *) ;
};
#line 152  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/regulator/consumer.h"
struct regulator;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phy/phy-mipi-dphy.h"
struct phy_configure_opts_mipi_dphy {
   unsigned int clk_miss ;
   unsigned int clk_post ;
   unsigned int clk_pre ;
   unsigned int clk_prepare ;
   unsigned int clk_settle ;
   unsigned int clk_term_en ;
   unsigned int clk_trail ;
   unsigned int clk_zero ;
   unsigned int d_term_en ;
   unsigned int eot ;
   unsigned int hs_exit ;
   unsigned int hs_prepare ;
   unsigned int hs_settle ;
   unsigned int hs_skip ;
   unsigned int hs_trail ;
   unsigned int hs_zero ;
   unsigned int init ;
   unsigned int lpx ;
   unsigned int ta_get ;
   unsigned int ta_go ;
   unsigned int ta_sure ;
   unsigned int wakeup ;
   unsigned long hs_clk_rate ;
   unsigned long lp_clk_rate ;
   unsigned char lanes ;
};
#line 284 
enum phy_mode {
    PHY_MODE_INVALID = 0,
    PHY_MODE_USB_HOST = 1,
    PHY_MODE_USB_HOST_LS = 2,
    PHY_MODE_USB_HOST_FS = 3,
    PHY_MODE_USB_HOST_HS = 4,
    PHY_MODE_USB_HOST_SS = 5,
    PHY_MODE_USB_DEVICE = 6,
    PHY_MODE_USB_DEVICE_LS = 7,
    PHY_MODE_USB_DEVICE_FS = 8,
    PHY_MODE_USB_DEVICE_HS = 9,
    PHY_MODE_USB_DEVICE_SS = 10,
    PHY_MODE_USB_OTG = 11,
    PHY_MODE_UFS_HS_A = 12,
    PHY_MODE_UFS_HS_B = 13,
    PHY_MODE_PCIE = 14,
    PHY_MODE_ETHERNET = 15,
    PHY_MODE_MIPI_DPHY = 16,
    PHY_MODE_SATA = 17,
    PHY_MODE_LVDS = 18
};
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phy/phy.h"
union phy_configure_opts {
   struct phy_configure_opts_mipi_dphy mipi_dphy ;
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phy/phy.h"
struct phy_ops {
   int (*init)(struct phy *) ;
   int (*exit)(struct phy *) ;
   int (*power_on)(struct phy *) ;
   int (*power_off)(struct phy *) ;
   int (*set_mode)(struct phy *, enum phy_mode , int ) ;
   int (*configure)(struct phy *, union phy_configure_opts *) ;
   int (*validate)(struct phy *, enum phy_mode , int , union phy_configure_opts *) ;
   int (*reset)(struct phy *) ;
   int (*calibrate)(struct phy *) ;
   void (*release)(struct phy *) ;
   struct module *owner ;
};
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phy/phy.h"
struct phy_attrs {
   u32 bus_width ;
   enum phy_mode mode ;
};
#line 131  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phy/phy.h"
struct phy {
   struct device dev ;
   int id ;
   struct phy_ops *ops ;
   struct mutex mutex ;
   int init_count ;
   int power_count ;
   struct phy_attrs attrs ;
   struct regulator *pwr ;
};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
struct vlan_hdr {
   __be16 h_vlan_TCI ;
   __be16 h_vlan_encapsulated_proto ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ipv6.h"
struct ipv6hdr {
   __u8 priority : 4 ;
   __u8 version : 4 ;
   __u8 flow_lbl[3U] ;
   __be16 payload_len ;
   __u8 nexthdr ;
   __u8 hop_limit ;
   struct in6_addr saddr ;
   struct in6_addr daddr ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/tcp.h"
struct tcphdr {
   __be16 source ;
   __be16 dest ;
   __be32 seq ;
   __be32 ack_seq ;
   __u16 res1 : 4 ;
   __u16 doff : 4 ;
   __u16 fin : 1 ;
   __u16 syn : 1 ;
   __u16 rst : 1 ;
   __u16 psh : 1 ;
   __u16 ack : 1 ;
   __u16 urg : 1 ;
   __u16 ece : 1 ;
   __u16 cwr : 1 ;
   __be16 window ;
   __sum16 check ;
   __be16 urg_ptr ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/tso.h"
struct tso_t {
   int next_frag_idx ;
   void *data ;
   size_t size ;
   u16 ip_id ;
   bool ipv6 ;
   u32 tcp_seq ;
};
#line 312  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_cls.h"
enum mvpp2_bm_pool_log_num {
    MVPP2_BM_SHORT = 0,
    MVPP2_BM_LONG = 1,
    MVPP2_BM_JUMBO = 2,
    MVPP2_BM_POOLS_NUM = 3
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
struct __anonstruct_mvpp2_pools_2012 {
   int pkt_size ;
   int buf_num ;
};
#line 1390  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
struct mvpp2_ethtool_counter {
   unsigned int offset ;
   char string[32U] ;
   bool reg_is_64b ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
struct __anonstruct_2538 {
   u16 vlan_id : 12 ;
   u16 vlan_dei : 1 ;
   u16 vlan_priority : 3 ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
union __anonunion_2537 {
   struct __anonstruct_2538 __anonCompField___anonunion_2537_74 ;
   __be16 vlan_tci ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
struct flow_dissector_key_vlan {
   union __anonunion_2537 __anonCompField_flow_dissector_key_vlan_75 ;
   __be16 vlan_tpid ;
};
#line 155  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
struct __anonstruct_2541 {
   __be16 src ;
   __be16 dst ;
};
#line 155  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
union __anonunion_2540 {
   __be32 ports ;
   struct __anonstruct_2541 __anonCompField___anonunion_2540_77 ;
};
#line 155  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
struct flow_dissector_key_ports {
   union __anonunion_2540 __anonCompField_flow_dissector_key_ports_78 ;
};
#line 231 
enum flow_dissector_key_id {
    FLOW_DISSECTOR_KEY_CONTROL = 0,
    FLOW_DISSECTOR_KEY_BASIC = 1,
    FLOW_DISSECTOR_KEY_IPV4_ADDRS = 2,
    FLOW_DISSECTOR_KEY_IPV6_ADDRS = 3,
    FLOW_DISSECTOR_KEY_PORTS = 4,
    FLOW_DISSECTOR_KEY_PORTS_RANGE = 5,
    FLOW_DISSECTOR_KEY_ICMP = 6,
    FLOW_DISSECTOR_KEY_ETH_ADDRS = 7,
    FLOW_DISSECTOR_KEY_TIPC = 8,
    FLOW_DISSECTOR_KEY_ARP = 9,
    FLOW_DISSECTOR_KEY_VLAN = 10,
    FLOW_DISSECTOR_KEY_FLOW_LABEL = 11,
    FLOW_DISSECTOR_KEY_GRE_KEYID = 12,
    FLOW_DISSECTOR_KEY_MPLS_ENTROPY = 13,
    FLOW_DISSECTOR_KEY_ENC_KEYID = 14,
    FLOW_DISSECTOR_KEY_ENC_IPV4_ADDRS = 15,
    FLOW_DISSECTOR_KEY_ENC_IPV6_ADDRS = 16,
    FLOW_DISSECTOR_KEY_ENC_CONTROL = 17,
    FLOW_DISSECTOR_KEY_ENC_PORTS = 18,
    FLOW_DISSECTOR_KEY_MPLS = 19,
    FLOW_DISSECTOR_KEY_TCP = 20,
    FLOW_DISSECTOR_KEY_IP = 21,
    FLOW_DISSECTOR_KEY_CVLAN = 22,
    FLOW_DISSECTOR_KEY_ENC_IP = 23,
    FLOW_DISSECTOR_KEY_ENC_OPTS = 24,
    FLOW_DISSECTOR_KEY_META = 25,
    FLOW_DISSECTOR_KEY_CT = 26,
    FLOW_DISSECTOR_KEY_MAX = 27
};
#line 409  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct ethtool_rx_flow_rule {
   struct flow_rule *rule ;
   unsigned long priv[0U] ;
};
#line 414  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct ethtool_rx_flow_spec_input {
   struct ethtool_rx_flow_spec *fs ;
   u32 rss_ctx ;
};
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct flow_match_vlan {
   struct flow_dissector_key_vlan *key ;
   struct flow_dissector_key_vlan *mask ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct flow_match_ports {
   struct flow_dissector_key_ports *key ;
   struct flow_dissector_key_ports *mask ;
};
#line 275  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_prs.h"
struct mvpp2_prs_result_info {
   u32 ri ;
   u32 ri_mask ;
};
#line 114  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_cls.h"
struct mvpp2_cls_c2_entry {
   u32 index ;
   u32 tcam[5U] ;
   u32 act ;
   u32 attr[5U] ;
   u8 valid ;
};
#line 195  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_cls.h"
struct mvpp2_cls_flow {
   int flow_type ;
   u16 flow_id ;
   u16 supported_hash_opts ;
   struct mvpp2_prs_result_info prs_ri ;
};
#line 251  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_cls.h"
struct mvpp2_cls_flow_entry {
   u32 index ;
   u32 data[3U] ;
};
#line 256  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_cls.h"
struct mvpp2_cls_lookup_entry {
   u32 lkpid ;
   u32 way ;
   u32 data ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_debugfs.c"
struct mvpp2_dbgfs_prs_entry {
   int tid ;
   struct mvpp2 *priv ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_debugfs.c"
struct mvpp2_dbgfs_c2_entry {
   int id ;
   struct mvpp2 *priv ;
};
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_debugfs.c"
struct mvpp2_dbgfs_flow_entry {
   int flow ;
   struct mvpp2 *priv ;
};
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_debugfs.c"
struct mvpp2_dbgfs_flow_tbl_entry {
   int id ;
   struct mvpp2 *priv ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_debugfs.c"
struct mvpp2_dbgfs_port_flow_entry {
   struct mvpp2_port *port ;
   struct mvpp2_dbgfs_flow_entry *dbg_fe ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_debugfs.c"
struct mvpp2_dbgfs_entries {
   struct mvpp2_dbgfs_prs_entry prs_entries[256U] ;
   struct mvpp2_dbgfs_c2_entry c2_entries[256U] ;
   struct mvpp2_dbgfs_flow_tbl_entry flt_entries[512U] ;
   struct mvpp2_dbgfs_flow_entry flow_entries[52U] ;
   struct mvpp2_dbgfs_port_flow_entry port_flow_entries[4U] ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 197 
enum hrtimer_restart;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
struct device_private {
   void *driver_data ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/firmware.h"
struct firmware {
   size_t size ;
   u8 *data ;
   struct page **pages ;
   void *priv ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/idr.h"
struct ida {
   struct xarray xa ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rtmutex.h"
struct rt_mutex {
   raw_spinlock_t wait_lock ;
   struct rb_root_cached waiters ;
   struct task_struct *owner ;
   int save_state ;
   char *name ;
   char *file ;
   int line ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/i2c.h"
struct i2c_msg {
   __u16 addr ;
   __u16 flags ;
   __u16 len ;
   __u8 *buf ;
};
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/i2c.h"
union i2c_smbus_data {
   __u8 byte ;
   __u16 word ;
   __u8 block[34U] ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_algorithm;
#line 28 
struct i2c_adapter;
#line 29 
struct i2c_client;
#line 33 
enum i2c_slave_event;
#line 33 
enum i2c_slave_event;
#line 314  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_client {
   unsigned short flags ;
   unsigned short addr ;
   char name[20U] ;
   struct i2c_adapter *adapter ;
   struct device dev ;
   int init_irq ;
   int irq ;
   struct list_head detected ;
   int (*slave_cb)(struct i2c_client *, enum i2c_slave_event , u8 *) ;
};
#line 360 
enum i2c_slave_event {
    I2C_SLAVE_READ_REQUESTED = 0,
    I2C_SLAVE_WRITE_REQUESTED = 1,
    I2C_SLAVE_READ_PROCESSED = 2,
    I2C_SLAVE_WRITE_RECEIVED = 3,
    I2C_SLAVE_STOP = 4
};
#line 527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_algorithm {
   int (*master_xfer)(struct i2c_adapter *, struct i2c_msg *, int ) ;
   int (*master_xfer_atomic)(struct i2c_adapter *, struct i2c_msg *, int ) ;
   int (*smbus_xfer)(struct i2c_adapter *, u16 , unsigned short , char , u8 , int , union i2c_smbus_data *) ;
   int (*smbus_xfer_atomic)(struct i2c_adapter *, u16 , unsigned short , char , u8 , int , union i2c_smbus_data *) ;
   u32 (*functionality)(struct i2c_adapter *) ;
   int (*reg_slave)(struct i2c_client *) ;
   int (*unreg_slave)(struct i2c_client *) ;
};
#line 565  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_lock_operations {
   void (*lock_bus)(struct i2c_adapter *, unsigned int ) ;
   int (*trylock_bus)(struct i2c_adapter *, unsigned int ) ;
   void (*unlock_bus)(struct i2c_adapter *, unsigned int ) ;
};
#line 618  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_bus_recovery_info {
   int (*recover_bus)(struct i2c_adapter *) ;
   int (*get_scl)(struct i2c_adapter *) ;
   void (*set_scl)(struct i2c_adapter *, int ) ;
   int (*get_sda)(struct i2c_adapter *) ;
   void (*set_sda)(struct i2c_adapter *, int ) ;
   int (*get_bus_free)(struct i2c_adapter *) ;
   void (*prepare_recovery)(struct i2c_adapter *) ;
   void (*unprepare_recovery)(struct i2c_adapter *) ;
   struct gpio_desc *scl_gpiod ;
   struct gpio_desc *sda_gpiod ;
};
#line 661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_adapter_quirks {
   u64 flags ;
   int max_num_msgs ;
   u16 max_write_len ;
   u16 max_read_len ;
   u16 max_comb_1st_msg_len ;
   u16 max_comb_2nd_msg_len ;
};
#line 692  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_adapter {
   struct module *owner ;
   unsigned int class ;
   struct i2c_algorithm *algo ;
   void *algo_data ;
   struct i2c_lock_operations *lock_ops ;
   struct rt_mutex bus_lock ;
   struct rt_mutex mux_lock ;
   int timeout ;
   int retries ;
   struct device dev ;
   unsigned long locked_flags ;
   int nr ;
   char name[48U] ;
   struct completion dev_released ;
   struct mutex userspace_clients_lock ;
   struct list_head userspace_clients ;
   struct i2c_bus_recovery_info *bus_recovery_info ;
   struct i2c_adapter_quirks *quirks ;
   struct irq_domain *host_notify_domain ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cdev.h"
struct cdev {
   struct kobject kobj ;
   struct module *owner ;
   struct file_operations *ops ;
   struct list_head list ;
   dev_t dev ;
   unsigned int count ;
} __attribute__((__designated_init__));
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-common.h"
struct v4l2_edid {
   __u32 pad ;
   __u32 start_block ;
   __u32 blocks ;
   __u32 reserved[5U] ;
   __u8 *edid ;
};
#line 754 
enum v4l2_priority {
    V4L2_PRIORITY_UNSET = 0,
    V4L2_PRIORITY_BACKGROUND = 1,
    V4L2_PRIORITY_INTERACTIVE = 2,
    V4L2_PRIORITY_RECORD = 3,
    V4L2_PRIORITY_DEFAULT = 2
};
#line 413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_rect {
   __s32 left ;
   __s32 top ;
   __u32 width ;
   __u32 height ;
};
#line 420  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_fract {
   __u32 numerator ;
   __u32 denominator ;
};
#line 1212  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
typedef __u64 v4l2_std_id;
#line 1394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_bt_timings {
   __u32 width ;
   __u32 height ;
   __u32 interlaced ;
   __u32 polarities ;
   __u64 pixelclock ;
   __u32 hfrontporch ;
   __u32 hsync ;
   __u32 hbackporch ;
   __u32 vfrontporch ;
   __u32 vsync ;
   __u32 vbackporch ;
   __u32 il_vfrontporch ;
   __u32 il_vsync ;
   __u32 il_vbackporch ;
   __u32 standards ;
   __u32 flags ;
   struct v4l2_fract picture_aspect ;
   __u8 cea861_vic ;
   __u8 hdmi_vic ;
   __u8 reserved[46U] ;
} __attribute__((__packed__));
#line 1517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_5333 {
   struct v4l2_bt_timings bt ;
   __u32 reserved[32U] ;
};
#line 1517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dv_timings {
   __u32 type ;
   union __anonunion_5333 __anonCompField_v4l2_dv_timings_77 ;
} __attribute__((__packed__));
#line 1536  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_enum_dv_timings {
   __u32 index ;
   __u32 pad ;
   __u32 reserved[2U] ;
   struct v4l2_dv_timings timings ;
};
#line 1554  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_bt_timings_cap {
   __u32 min_width ;
   __u32 max_width ;
   __u32 min_height ;
   __u32 max_height ;
   __u64 min_pixelclock ;
   __u64 max_pixelclock ;
   __u32 standards ;
   __u32 capabilities ;
   __u32 reserved[16U] ;
} __attribute__((__packed__));
#line 1581  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_5334 {
   struct v4l2_bt_timings_cap bt ;
   __u32 raw_data[32U] ;
};
#line 1581  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dv_timings_cap {
   __u32 type ;
   __u32 pad ;
   __u32 reserved[2U] ;
   union __anonunion_5334 __anonCompField_v4l2_dv_timings_cap_78 ;
};
#line 1803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_tuner {
   __u32 index ;
   __u8 name[32U] ;
   __u32 type ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 rxsubchans ;
   __u32 audmode ;
   __s32 signal ;
   __s32 afc ;
   __u32 reserved[4U] ;
};
#line 1817  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_modulator {
   __u32 index ;
   __u8 name[32U] ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 txsubchans ;
   __u32 type ;
   __u32 reserved[3U] ;
};
#line 1860  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_frequency {
   __u32 tuner ;
   __u32 type ;
   __u32 frequency ;
   __u32 reserved[8U] ;
};
#line 1871  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_frequency_band {
   __u32 tuner ;
   __u32 type ;
   __u32 index ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 modulation ;
   __u32 reserved[9U] ;
};
#line 2043  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_vbi_format {
   __u32 sampling_rate ;
   __u32 offset ;
   __u32 samples_per_line ;
   __u32 sample_format ;
   __s32 start[2U] ;
   __u32 count[2U] ;
   __u32 flags ;
   __u32 reserved[2U] ;
};
#line 2071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_format {
   __u16 service_set ;
   __u16 service_lines[2U][24U] ;
   __u32 io_size ;
   __u32 reserved[2U] ;
};
#line 2095  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_cap {
   __u16 service_set ;
   __u16 service_lines[2U][24U] ;
   __u32 type ;
   __u32 reserved[3U] ;
};
#line 2106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_data {
   __u32 id ;
   __u32 field ;
   __u32 line ;
   __u32 reserved ;
   __u8 data[48U] ;
};
#line 2350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_event_subscription {
   __u32 type ;
   __u32 id ;
   __u32 flags ;
   __u32 reserved[5U] ;
};
#line 2375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_5350 {
   __u32 addr ;
   char name[32U] ;
};
#line 2375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dbg_match {
   __u32 type ;
   union __anonunion_5350 __anonCompField_v4l2_dbg_match_87 ;
} __attribute__((__packed__));
#line 2383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dbg_register {
   struct v4l2_dbg_match match ;
   __u32 size ;
   __u64 reg ;
   __u64 val ;
} __attribute__((__packed__));
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_device;
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_gobj {
   struct media_device *mdev ;
   u32 id ;
   struct list_head list ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity_enum {
   unsigned long *bmap ;
   int idx_max ;
};
#line 88 
struct media_entity;
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct __anonstruct_stack_5354 {
   struct media_entity *entity ;
   struct list_head *link ;
};
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_graph {
   struct __anonstruct_stack_5354 stack[16U] ;
   struct media_entity_enum ent_enum ;
   int top ;
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_pipeline {
   int streaming_count ;
   struct media_graph graph ;
};
#line 132 
struct media_pad;
#line 132 
struct media_interface;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_5355 {
   struct media_gobj *gobj0 ;
   struct media_pad *source ;
   struct media_interface *intf ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_5356 {
   struct media_gobj *gobj1 ;
   struct media_pad *sink ;
   struct media_entity *entity ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_link {
   struct media_gobj graph_obj ;
   struct list_head list ;
   union __anonunion_5355 __anonCompField_media_link_90 ;
   union __anonunion_5356 __anonCompField_media_link_91 ;
   struct media_link *reverse ;
   unsigned long flags ;
   bool is_backlink ;
};
#line 149 
enum media_pad_signal_type {
    PAD_SIGNAL_DEFAULT = 0,
    PAD_SIGNAL_ANALOG = 1,
    PAD_SIGNAL_DV = 2,
    PAD_SIGNAL_AUDIO = 3
};
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_pad {
   struct media_gobj graph_obj ;
   struct media_entity *entity ;
   u16 index ;
   enum media_pad_signal_type sig_type ;
   unsigned long flags ;
};
#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity_operations {
   int (*get_fwnode_pad)(struct fwnode_endpoint *) ;
   int (*link_setup)(struct media_entity *, struct media_pad *, struct media_pad *, u32 ) ;
   int (*link_validate)(struct media_link *) ;
};
#line 221 
enum media_entity_type {
    MEDIA_ENTITY_TYPE_BASE = 0,
    MEDIA_ENTITY_TYPE_VIDEO_DEVICE = 1,
    MEDIA_ENTITY_TYPE_V4L2_SUBDEV = 2
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct __anonstruct_dev_5358 {
   u32 major ;
   u32 minor ;
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_info_5357 {
   struct __anonstruct_dev_5358 dev ;
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity {
   struct media_gobj graph_obj ;
   char *name ;
   enum media_entity_type obj_type ;
   u32 function ;
   unsigned long flags ;
   u16 num_pads ;
   u16 num_links ;
   u16 num_backlinks ;
   int internal_idx ;
   struct media_pad *pads ;
   struct list_head links ;
   struct media_entity_operations *ops ;
   int stream_count ;
   int use_count ;
   struct media_pipeline *pipe ;
   union __anonunion_info_5357 info ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_interface {
   struct media_gobj graph_obj ;
   struct list_head links ;
   u32 type ;
   u32 flags ;
};
#line 349  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_intf_devnode {
   struct media_interface intf ;
   u32 major ;
   u32 minor ;
};
#line 1087 
enum vfl_devnode_type {
    VFL_TYPE_GRABBER = 0,
    VFL_TYPE_VBI = 1,
    VFL_TYPE_RADIO = 2,
    VFL_TYPE_SUBDEV = 3,
    VFL_TYPE_SDR = 4,
    VFL_TYPE_TOUCH = 5,
    VFL_TYPE_MAX = 6
};
#line 1097 
enum vfl_devnode_direction {
    VFL_DIR_RX = 0,
    VFL_DIR_TX = 1,
    VFL_DIR_M2M = 2
};
#line 1104 
struct video_device;
#line 1105 
struct v4l2_device;
#line 1106 
struct v4l2_ctrl_handler;
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct v4l2_prio_state {
   atomic_t prios[4U] ;
};
#line 193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct v4l2_file_operations {
   struct module *owner ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*unlocked_ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl32)(struct file *, unsigned int , unsigned long ) ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   int (*mmap)(struct file *, struct vm_area_struct *) ;
   int (*open)(struct file *) ;
   int (*release)(struct file *) ;
};
#line 256 
struct vb2_queue;
#line 256 
struct v4l2_ioctl_ops;
#line 256  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct video_device {
   struct media_entity entity ;
   struct media_intf_devnode *intf_devnode ;
   struct media_pipeline pipe ;
   struct v4l2_file_operations *fops ;
   u32 device_caps ;
   struct device dev ;
   struct cdev *cdev ;
   struct v4l2_device *v4l2_dev ;
   struct device *dev_parent ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   struct vb2_queue *queue ;
   struct v4l2_prio_state *prio ;
   char name[32U] ;
   enum vfl_devnode_type vfl_type ;
   enum vfl_devnode_direction vfl_dir ;
   int minor ;
   u16 num ;
   unsigned long flags ;
   int index ;
   spinlock_t fh_lock ;
   struct list_head fh_list ;
   int dev_debug ;
   v4l2_std_id tvnorms ;
   void (*release)(struct video_device *) ;
   struct v4l2_ioctl_ops *ioctl_ops ;
   unsigned long valid_ioctls[3U] ;
   struct mutex *lock ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-common.h"
struct v4l2_subdev;
#line 96 
struct v4l2_subdev_ops;
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-common.h"
struct v4l2_priv_tun_config {
   int tuner ;
   void *priv ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-devnode.h"
struct media_file_operations {
   struct module *owner ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl)(struct file *, unsigned int , unsigned long ) ;
   int (*open)(struct file *) ;
   int (*release)(struct file *) ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-devnode.h"
struct media_devnode {
   struct media_device *media_dev ;
   struct media_file_operations *fops ;
   struct device dev ;
   struct cdev cdev ;
   struct device *parent ;
   int minor ;
   unsigned long flags ;
   void (*release)(struct media_devnode *) ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_request;
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_device_ops {
   int (*link_notify)(struct media_link *, u32 , unsigned int ) ;
   struct media_request *(*req_alloc)(struct media_device *) ;
   void (*req_free)(struct media_request *) ;
   int (*req_validate)(struct media_request *) ;
   void (*req_queue)(struct media_request *) ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_device {
   struct device *dev ;
   struct media_devnode *devnode ;
   char model[32U] ;
   char driver_name[32U] ;
   char serial[40U] ;
   char bus_info[32U] ;
   u32 hw_revision ;
   u64 topology_version ;
   u32 id ;
   struct ida entity_internal_idx ;
   int entity_internal_idx_max ;
   struct list_head entities ;
   struct list_head interfaces ;
   struct list_head pads ;
   struct list_head links ;
   struct list_head entity_notify ;
   struct mutex graph_mutex ;
   struct media_graph pm_count_walk ;
   void *source_priv ;
   int (*enable_source)(struct media_entity *, struct media_pipeline *) ;
   void (*disable_source)(struct media_entity *) ;
   struct media_device_ops *ops ;
   struct mutex req_queue_mutex ;
   atomic_t request_id ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-mediabus.h"
struct v4l2_mbus_framefmt {
   __u32 width ;
   __u32 height ;
   __u32 code ;
   __u32 field ;
   __u32 colorspace ;
   __u16 ycbcr_enc ;
   __u16 quantization ;
   __u16 xfer_func ;
   __u16 reserved[11U] ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_format {
   __u32 which ;
   __u32 pad ;
   struct v4l2_mbus_framefmt format ;
   __u32 reserved[8U] ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_mbus_code_enum {
   __u32 pad ;
   __u32 index ;
   __u32 code ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_size_enum {
   __u32 index ;
   __u32 pad ;
   __u32 code ;
   __u32 min_width ;
   __u32 max_width ;
   __u32 min_height ;
   __u32 max_height ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_interval {
   __u32 pad ;
   struct v4l2_fract interval ;
   __u32 reserved[9U] ;
};
#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_interval_enum {
   __u32 index ;
   __u32 pad ;
   __u32 code ;
   __u32 width ;
   __u32 height ;
   struct v4l2_fract interval ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_selection {
   __u32 which ;
   __u32 pad ;
   __u32 target ;
   __u32 flags ;
   struct v4l2_rect r ;
   __u32 reserved[8U] ;
};
#line 157 
struct v4l2_async_notifier;
#line 158 
enum v4l2_async_match_type {
    V4L2_ASYNC_MATCH_CUSTOM = 0,
    V4L2_ASYNC_MATCH_DEVNAME = 1,
    V4L2_ASYNC_MATCH_I2C = 2,
    V4L2_ASYNC_MATCH_FWNODE = 3
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct __anonstruct_i2c_5372 {
   int adapter_id ;
   unsigned short address ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct __anonstruct_custom_5373 {
   bool (*match)(struct device *, struct v4l2_async_subdev *) ;
   void *priv ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
union __anonunion_match_5371 {
   struct fwnode_handle *fwnode ;
   char *device_name ;
   struct __anonstruct_i2c_5372 i2c ;
   struct __anonstruct_custom_5373 custom ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_subdev {
   enum v4l2_async_match_type match_type ;
   union __anonunion_match_5371 match ;
   struct list_head list ;
   struct list_head asd_list ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_notifier_operations {
   int (*bound)(struct v4l2_async_notifier *, struct v4l2_subdev *, struct v4l2_async_subdev *) ;
   int (*complete)(struct v4l2_async_notifier *) ;
   void (*unbind)(struct v4l2_async_notifier *, struct v4l2_subdev *, struct v4l2_async_subdev *) ;
};
#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_notifier {
   struct v4l2_async_notifier_operations *ops ;
   struct v4l2_device *v4l2_dev ;
   struct v4l2_subdev *sd ;
   struct v4l2_async_notifier *parent ;
   struct list_head asd_list ;
   struct list_head waiting ;
   struct list_head done ;
   struct list_head list ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-fh.h"
struct v4l2_m2m_ctx;
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-fh.h"
struct v4l2_fh {
   struct list_head list ;
   struct video_device *vdev ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   enum v4l2_priority prio ;
   wait_queue_head_t wait ;
   struct mutex subscribe_lock ;
   struct list_head subscribed ;
   struct list_head available ;
   unsigned int navailable ;
   u32 sequence ;
   struct v4l2_m2m_ctx *m2m_ctx ;
};
#line 162 
enum v4l2_mbus_type {
    V4L2_MBUS_UNKNOWN = 0,
    V4L2_MBUS_PARALLEL = 1,
    V4L2_MBUS_BT656 = 2,
    V4L2_MBUS_CSI1 = 3,
    V4L2_MBUS_CCP2 = 4,
    V4L2_MBUS_CSI2_DPHY = 5,
    V4L2_MBUS_CSI2_CPHY = 6
};
#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-mediabus.h"
struct v4l2_mbus_config {
   enum v4l2_mbus_type type ;
   unsigned int flags ;
};
#line 184 
struct v4l2_subdev_fh;
#line 185 
struct tuner_setup;
#line 186 
struct v4l2_mbus_frame_desc;
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_decode_vbi_line {
   u32 is_second_field ;
   u8 *p ;
   u32 line ;
   u32 type ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_io_pin_config {
   u32 flags ;
   u8 pin ;
   u8 function ;
   u8 value ;
   u8 strength ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_core_ops {
   int (*log_status)(struct v4l2_subdev *) ;
   int (*s_io_pin_config)(struct v4l2_subdev *, size_t , struct v4l2_subdev_io_pin_config *) ;
   int (*init)(struct v4l2_subdev *, u32 ) ;
   int (*load_fw)(struct v4l2_subdev *) ;
   int (*reset)(struct v4l2_subdev *, u32 ) ;
   int (*s_gpio)(struct v4l2_subdev *, u32 ) ;
   long (*ioctl)(struct v4l2_subdev *, unsigned int , void *) ;
   long (*compat_ioctl32)(struct v4l2_subdev *, unsigned int , unsigned long ) ;
   int (*g_register)(struct v4l2_subdev *, struct v4l2_dbg_register *) ;
   int (*s_register)(struct v4l2_subdev *, struct v4l2_dbg_register *) ;
   int (*s_power)(struct v4l2_subdev *, int ) ;
   int (*interrupt_service_routine)(struct v4l2_subdev *, u32 , bool *) ;
   int (*subscribe_event)(struct v4l2_subdev *, struct v4l2_fh *, struct v4l2_event_subscription *) ;
   int (*unsubscribe_event)(struct v4l2_subdev *, struct v4l2_fh *, struct v4l2_event_subscription *) ;
};
#line 264  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_tuner_ops {
   int (*standby)(struct v4l2_subdev *) ;
   int (*s_radio)(struct v4l2_subdev *) ;
   int (*s_frequency)(struct v4l2_subdev *, struct v4l2_frequency *) ;
   int (*g_frequency)(struct v4l2_subdev *, struct v4l2_frequency *) ;
   int (*enum_freq_bands)(struct v4l2_subdev *, struct v4l2_frequency_band *) ;
   int (*g_tuner)(struct v4l2_subdev *, struct v4l2_tuner *) ;
   int (*s_tuner)(struct v4l2_subdev *, struct v4l2_tuner *) ;
   int (*g_modulator)(struct v4l2_subdev *, struct v4l2_modulator *) ;
   int (*s_modulator)(struct v4l2_subdev *, struct v4l2_modulator *) ;
   int (*s_type_addr)(struct v4l2_subdev *, struct tuner_setup *) ;
   int (*s_config)(struct v4l2_subdev *, struct v4l2_priv_tun_config *) ;
};
#line 304  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_audio_ops {
   int (*s_clock_freq)(struct v4l2_subdev *, u32 ) ;
   int (*s_i2s_clock_freq)(struct v4l2_subdev *, u32 ) ;
   int (*s_routing)(struct v4l2_subdev *, u32 , u32 , u32 ) ;
   int (*s_stream)(struct v4l2_subdev *, int ) ;
};
#line 310 
enum v4l2_mbus_frame_desc_flags {
    V4L2_MBUS_FRAME_DESC_FL_LEN_MAX = 1,
    V4L2_MBUS_FRAME_DESC_FL_BLOB = 2
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_mbus_frame_desc_entry {
   enum v4l2_mbus_frame_desc_flags flags ;
   u32 pixelcode ;
   u32 length ;
};
#line 348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_mbus_frame_desc {
   struct v4l2_mbus_frame_desc_entry entry[4U] ;
   unsigned short num_entries ;
};
#line 415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_video_ops {
   int (*s_routing)(struct v4l2_subdev *, u32 , u32 , u32 ) ;
   int (*s_crystal_freq)(struct v4l2_subdev *, u32 , u32 ) ;
   int (*g_std)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*s_std)(struct v4l2_subdev *, v4l2_std_id ) ;
   int (*s_std_output)(struct v4l2_subdev *, v4l2_std_id ) ;
   int (*g_std_output)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*querystd)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_tvnorms)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_tvnorms_output)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_input_status)(struct v4l2_subdev *, u32 *) ;
   int (*s_stream)(struct v4l2_subdev *, int ) ;
   int (*g_pixelaspect)(struct v4l2_subdev *, struct v4l2_fract *) ;
   int (*g_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_frame_interval *) ;
   int (*s_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_frame_interval *) ;
   int (*s_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*g_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*query_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*g_mbus_config)(struct v4l2_subdev *, struct v4l2_mbus_config *) ;
   int (*s_mbus_config)(struct v4l2_subdev *, struct v4l2_mbus_config *) ;
   int (*s_rx_buffer)(struct v4l2_subdev *, void *, unsigned int *) ;
};
#line 481  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_vbi_ops {
   int (*decode_vbi_line)(struct v4l2_subdev *, struct v4l2_decode_vbi_line *) ;
   int (*s_vbi_data)(struct v4l2_subdev *, struct v4l2_sliced_vbi_data *) ;
   int (*g_vbi_data)(struct v4l2_subdev *, struct v4l2_sliced_vbi_data *) ;
   int (*g_sliced_vbi_cap)(struct v4l2_subdev *, struct v4l2_sliced_vbi_cap *) ;
   int (*s_raw_fmt)(struct v4l2_subdev *, struct v4l2_vbi_format *) ;
   int (*g_sliced_fmt)(struct v4l2_subdev *, struct v4l2_sliced_vbi_format *) ;
   int (*s_sliced_fmt)(struct v4l2_subdev *, struct v4l2_sliced_vbi_format *) ;
};
#line 501  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_sensor_ops {
   int (*g_skip_top_lines)(struct v4l2_subdev *, u32 *) ;
   int (*g_skip_frames)(struct v4l2_subdev *, u32 *) ;
};
#line 505 
enum v4l2_subdev_ir_mode {
    V4L2_SUBDEV_IR_MODE_PULSE_WIDTH = 0
};
#line 540  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ir_parameters {
   unsigned int bytes_per_data_element ;
   enum v4l2_subdev_ir_mode mode ;
   bool enable ;
   bool interrupt_enable ;
   bool shutdown ;
   bool modulation ;
   u32 max_pulse_width ;
   unsigned int carrier_freq ;
   unsigned int duty_cycle ;
   bool invert_level ;
   bool invert_carrier_sense ;
   u32 noise_filter_min_width ;
   unsigned int carrier_range_lower ;
   unsigned int carrier_range_upper ;
   u32 resolution ;
};
#line 599  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ir_ops {
   int (*rx_read)(struct v4l2_subdev *, u8 *, size_t , ssize_t *) ;
   int (*rx_g_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*rx_s_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*tx_write)(struct v4l2_subdev *, u8 *, size_t , ssize_t *) ;
   int (*tx_g_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*tx_s_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
};
#line 630  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_pad_config {
   struct v4l2_mbus_framefmt try_fmt ;
   struct v4l2_rect try_crop ;
   struct v4l2_rect try_compose ;
};
#line 674  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_pad_ops {
   int (*init_cfg)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *) ;
   int (*enum_mbus_code)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_mbus_code_enum *) ;
   int (*enum_frame_size)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_frame_size_enum *) ;
   int (*enum_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_frame_interval_enum *) ;
   int (*get_fmt)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_format *) ;
   int (*set_fmt)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_format *) ;
   int (*get_selection)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_selection *) ;
   int (*set_selection)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_selection *) ;
   int (*get_edid)(struct v4l2_subdev *, struct v4l2_edid *) ;
   int (*set_edid)(struct v4l2_subdev *, struct v4l2_edid *) ;
   int (*dv_timings_cap)(struct v4l2_subdev *, struct v4l2_dv_timings_cap *) ;
   int (*enum_dv_timings)(struct v4l2_subdev *, struct v4l2_enum_dv_timings *) ;
   int (*link_validate)(struct v4l2_subdev *, struct media_link *, struct v4l2_subdev_format *, struct v4l2_subdev_format *) ;
   int (*get_frame_desc)(struct v4l2_subdev *, unsigned int , struct v4l2_mbus_frame_desc *) ;
   int (*set_frame_desc)(struct v4l2_subdev *, unsigned int , struct v4l2_mbus_frame_desc *) ;
};
#line 727  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ops {
   struct v4l2_subdev_core_ops *core ;
   struct v4l2_subdev_tuner_ops *tuner ;
   struct v4l2_subdev_audio_ops *audio ;
   struct v4l2_subdev_video_ops *video ;
   struct v4l2_subdev_vbi_ops *vbi ;
   struct v4l2_subdev_ir_ops *ir ;
   struct v4l2_subdev_sensor_ops *sensor ;
   struct v4l2_subdev_pad_ops *pad ;
};
#line 765  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_internal_ops {
   int (*registered)(struct v4l2_subdev *) ;
   void (*unregistered)(struct v4l2_subdev *) ;
   int (*open)(struct v4l2_subdev *, struct v4l2_subdev_fh *) ;
   int (*close)(struct v4l2_subdev *, struct v4l2_subdev_fh *) ;
   void (*release)(struct v4l2_subdev *) ;
};
#line 772 
struct regulator_bulk_data;
#line 797  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_platform_data {
   struct regulator_bulk_data *regulators ;
   int num_regulators ;
   void *host_priv ;
};
#line 848  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev {
   struct media_entity entity ;
   struct list_head list ;
   struct module *owner ;
   bool owner_v4l2_dev ;
   u32 flags ;
   struct v4l2_device *v4l2_dev ;
   struct v4l2_subdev_ops *ops ;
   struct v4l2_subdev_internal_ops *internal_ops ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   char name[32U] ;
   u32 grp_id ;
   void *dev_priv ;
   void *host_priv ;
   struct video_device *devnode ;
   struct device *dev ;
   struct fwnode_handle *fwnode ;
   struct list_head async_list ;
   struct v4l2_async_subdev *asd ;
   struct v4l2_async_notifier *notifier ;
   struct v4l2_async_notifier *subdev_notifier ;
   struct v4l2_subdev_platform_data *pdata ;
};
#line 906  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_fh {
   struct v4l2_fh vfh ;
   struct module *owner ;
   struct v4l2_subdev_pad_config *pad ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-device.h"
struct v4l2_device {
   struct device *dev ;
   struct media_device *mdev ;
   struct list_head subdevs ;
   spinlock_t lock ;
   char name[36U] ;
   void (*notify)(struct v4l2_subdev *, unsigned int , void *) ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   struct v4l2_prio_state prio ;
   struct kref ref ;
   void (*release)(struct v4l2_device *) ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ptp_clock_kernel.h"
struct ptp_system_timestamp {
   struct timespec64 pre_ts ;
   struct timespec64 post_ts ;
};
#line 277 
struct dma_chan;
#line 279 
struct spi_controller;
#line 280 
struct spi_transfer;
#line 281 
struct spi_controller_mem_ops;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_statistics {
   spinlock_t lock ;
   unsigned long messages ;
   unsigned long transfers ;
   unsigned long errors ;
   unsigned long timedout ;
   unsigned long spi_sync ;
   unsigned long spi_sync_immediate ;
   unsigned long spi_async ;
   unsigned long long bytes ;
   unsigned long long bytes_rx ;
   unsigned long long bytes_tx ;
   unsigned long transfer_bytes_histo[17U] ;
   unsigned long transfers_split_maxsize ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_delay {
   u16 value ;
   u8 unit ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_device {
   struct device dev ;
   struct spi_controller *controller ;
   struct spi_controller *master ;
   u32 max_speed_hz ;
   u8 chip_select ;
   u8 bits_per_word ;
   bool rt ;
   u32 mode ;
   int irq ;
   void *controller_state ;
   void *controller_data ;
   char modalias[32U] ;
   char *driver_override ;
   int cs_gpio ;
   struct gpio_desc *cs_gpiod ;
   struct spi_delay word_delay ;
   struct spi_statistics statistics ;
};
#line 247 
struct spi_message;
#line 452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_controller {
   struct device dev ;
   struct list_head list ;
   s16 bus_num ;
   u16 num_chipselect ;
   u16 dma_alignment ;
   u32 mode_bits ;
   u32 bits_per_word_mask ;
   u32 min_speed_hz ;
   u32 max_speed_hz ;
   u16 flags ;
   bool slave ;
   size_t (*max_transfer_size)(struct spi_device *) ;
   size_t (*max_message_size)(struct spi_device *) ;
   struct mutex io_mutex ;
   spinlock_t bus_lock_spinlock ;
   struct mutex bus_lock_mutex ;
   bool bus_lock_flag ;
   int (*setup)(struct spi_device *) ;
   int (*set_cs_timing)(struct spi_device *, struct spi_delay *, struct spi_delay *, struct spi_delay *) ;
   int (*transfer)(struct spi_device *, struct spi_message *) ;
   void (*cleanup)(struct spi_device *) ;
   bool (*can_dma)(struct spi_controller *, struct spi_device *, struct spi_transfer *) ;
   bool queued ;
   struct kthread_worker kworker ;
   struct task_struct *kworker_task ;
   struct kthread_work pump_messages ;
   spinlock_t queue_lock ;
   struct list_head queue ;
   struct spi_message *cur_msg ;
   bool idling ;
   bool busy ;
   bool running ;
   bool rt ;
   bool auto_runtime_pm ;
   bool cur_msg_prepared ;
   bool cur_msg_mapped ;
   struct completion xfer_completion ;
   size_t max_dma_len ;
   int (*prepare_transfer_hardware)(struct spi_controller *) ;
   int (*transfer_one_message)(struct spi_controller *, struct spi_message *) ;
   int (*unprepare_transfer_hardware)(struct spi_controller *) ;
   int (*prepare_message)(struct spi_controller *, struct spi_message *) ;
   int (*unprepare_message)(struct spi_controller *, struct spi_message *) ;
   int (*slave_abort)(struct spi_controller *) ;
   void (*set_cs)(struct spi_device *, bool ) ;
   int (*transfer_one)(struct spi_controller *, struct spi_device *, struct spi_transfer *) ;
   void (*handle_err)(struct spi_controller *, struct spi_message *) ;
   struct spi_controller_mem_ops *mem_ops ;
   struct spi_delay cs_setup ;
   struct spi_delay cs_hold ;
   struct spi_delay cs_inactive ;
   int *cs_gpios ;
   struct gpio_desc **cs_gpiods ;
   bool use_gpio_descriptors ;
   struct spi_statistics statistics ;
   struct dma_chan *dma_tx ;
   struct dma_chan *dma_rx ;
   void *dummy_rx ;
   void *dummy_tx ;
   int (*fw_translate_cs)(struct spi_controller *, unsigned int ) ;
   bool ptp_sts_supported ;
   unsigned long irq_flags ;
};
#line 890  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_transfer {
   void *tx_buf ;
   void *rx_buf ;
   unsigned int len ;
   dma_addr_t tx_dma ;
   dma_addr_t rx_dma ;
   struct sg_table tx_sg ;
   struct sg_table rx_sg ;
   unsigned int cs_change : 1 ;
   unsigned int tx_nbits : 3 ;
   unsigned int rx_nbits : 3 ;
   u8 bits_per_word ;
   u16 delay_usecs ;
   struct spi_delay delay ;
   struct spi_delay cs_change_delay ;
   struct spi_delay word_delay ;
   u32 speed_hz ;
   u32 effective_speed_hz ;
   unsigned int ptp_sts_word_pre ;
   unsigned int ptp_sts_word_post ;
   struct ptp_system_timestamp *ptp_sts ;
   bool timestamped_pre ;
   bool timestamped_post ;
   struct list_head transfer_list ;
};
#line 961  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_message {
   struct list_head transfers ;
   struct spi_device *spi ;
   unsigned int is_dma_mapped : 1 ;
   void (*complete)(void *) ;
   void *context ;
   unsigned int frame_length ;
   unsigned int actual_length ;
   int status ;
   struct list_head queue ;
   void *state ;
   struct list_head resources ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_fix_screeninfo {
   char id[16U] ;
   unsigned long smem_start ;
   __u32 smem_len ;
   __u32 type ;
   __u32 type_aux ;
   __u32 visual ;
   __u16 xpanstep ;
   __u16 ypanstep ;
   __u16 ywrapstep ;
   __u32 line_length ;
   unsigned long mmio_start ;
   __u32 mmio_len ;
   __u32 accel ;
   __u16 capabilities ;
   __u16 reserved[2U] ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_bitfield {
   __u32 offset ;
   __u32 length ;
   __u32 msb_right ;
};
#line 241  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_var_screeninfo {
   __u32 xres ;
   __u32 yres ;
   __u32 xres_virtual ;
   __u32 yres_virtual ;
   __u32 xoffset ;
   __u32 yoffset ;
   __u32 bits_per_pixel ;
   __u32 grayscale ;
   struct fb_bitfield red ;
   struct fb_bitfield green ;
   struct fb_bitfield blue ;
   struct fb_bitfield transp ;
   __u32 nonstd ;
   __u32 activate ;
   __u32 height ;
   __u32 width ;
   __u32 accel_flags ;
   __u32 pixclock ;
   __u32 left_margin ;
   __u32 right_margin ;
   __u32 upper_margin ;
   __u32 lower_margin ;
   __u32 hsync_len ;
   __u32 vsync_len ;
   __u32 sync ;
   __u32 vmode ;
   __u32 rotate ;
   __u32 colorspace ;
   __u32 reserved[4U] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_cmap {
   __u32 start ;
   __u32 len ;
   __u16 *red ;
   __u16 *green ;
   __u16 *blue ;
   __u16 *transp ;
};
#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_copyarea {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 sx ;
   __u32 sy ;
};
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_fillrect {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 color ;
   __u32 rop ;
};
#line 359  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_image {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 fg_color ;
   __u32 bg_color ;
   __u8 depth ;
   char *data ;
   struct fb_cmap cmap ;
};
#line 383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fbcurpos {
   __u16 x ;
   __u16 y ;
};
#line 387  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_cursor {
   __u16 set ;
   __u16 enable ;
   __u16 rop ;
   char *mask ;
   struct fbcurpos hot ;
   struct fb_image image ;
};
#line 400 
enum backlight_type {
    BACKLIGHT_RAW = 1,
    BACKLIGHT_PLATFORM = 2,
    BACKLIGHT_FIRMWARE = 3,
    BACKLIGHT_TYPE_MAX = 4
};
#line 412 
enum backlight_scale {
    BACKLIGHT_SCALE_UNKNOWN = 0,
    BACKLIGHT_SCALE_LINEAR = 1,
    BACKLIGHT_SCALE_NON_LINEAR = 2
};
#line 418 
struct backlight_device;
#line 419 
struct fb_info;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_ops {
   unsigned int options ;
   int (*update_status)(struct backlight_device *) ;
   int (*get_brightness)(struct backlight_device *) ;
   int (*check_fb)(struct backlight_device *, struct fb_info *) ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_properties {
   int brightness ;
   int max_brightness ;
   int power ;
   int fb_blank ;
   enum backlight_type type ;
   unsigned int state ;
   enum backlight_scale scale ;
};
#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_device {
   struct backlight_properties props ;
   struct mutex update_lock ;
   struct mutex ops_lock ;
   struct backlight_ops *ops ;
   struct notifier_block fb_notif ;
   struct list_head entry ;
   struct device dev ;
   bool fb_bl_on[32U] ;
   int use_count ;
};
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_chroma {
   __u32 redx ;
   __u32 greenx ;
   __u32 bluex ;
   __u32 whitex ;
   __u32 redy ;
   __u32 greeny ;
   __u32 bluey ;
   __u32 whitey ;
};
#line 63 
struct fb_videomode;
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_monspecs {
   struct fb_chroma chroma ;
   struct fb_videomode *modedb ;
   __u8 manufacturer[4U] ;
   __u8 monitor[14U] ;
   __u8 serial_no[14U] ;
   __u8 ascii[14U] ;
   __u32 modedb_len ;
   __u32 model ;
   __u32 serial ;
   __u32 year ;
   __u32 week ;
   __u32 hfmin ;
   __u32 hfmax ;
   __u32 dclkmin ;
   __u32 dclkmax ;
   __u16 input ;
   __u16 dpms ;
   __u16 signal ;
   __u16 vfmin ;
   __u16 vfmax ;
   __u16 gamma ;
   __u16 gtf : 1 ;
   __u16 misc ;
   __u8 version ;
   __u8 revision ;
   __u8 max_x ;
   __u8 max_y ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_blit_caps {
   u32 x ;
   u32 y ;
   u32 len ;
   u32 flags ;
};
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_pixmap {
   u8 *addr ;
   u32 size ;
   u32 offset ;
   u32 buf_align ;
   u32 scan_align ;
   u32 access_align ;
   u32 flags ;
   u32 blit_x ;
   u32 blit_y ;
   void (*writeio)(struct fb_info *, void *, void *, unsigned int ) ;
   void (*readio)(struct fb_info *, void *, void *, unsigned int ) ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_deferred_io {
   unsigned long delay ;
   struct mutex lock ;
   struct list_head pagelist ;
   void (*first_io)(struct fb_info *) ;
   void (*deferred_io)(struct fb_info *, struct list_head *) ;
};
#line 228  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_ops {
   struct module *owner ;
   int (*fb_open)(struct fb_info *, int ) ;
   int (*fb_release)(struct fb_info *, int ) ;
   ssize_t (*fb_read)(struct fb_info *, char *, size_t , loff_t *) ;
   ssize_t (*fb_write)(struct fb_info *, char *, size_t , loff_t *) ;
   int (*fb_check_var)(struct fb_var_screeninfo *, struct fb_info *) ;
   int (*fb_set_par)(struct fb_info *) ;
   int (*fb_setcolreg)(unsigned int , unsigned int , unsigned int , unsigned int , unsigned int , struct fb_info *) ;
   int (*fb_setcmap)(struct fb_cmap *, struct fb_info *) ;
   int (*fb_blank)(int , struct fb_info *) ;
   int (*fb_pan_display)(struct fb_var_screeninfo *, struct fb_info *) ;
   void (*fb_fillrect)(struct fb_info *, struct fb_fillrect *) ;
   void (*fb_copyarea)(struct fb_info *, struct fb_copyarea *) ;
   void (*fb_imageblit)(struct fb_info *, struct fb_image *) ;
   int (*fb_cursor)(struct fb_info *, struct fb_cursor *) ;
   int (*fb_sync)(struct fb_info *) ;
   int (*fb_ioctl)(struct fb_info *, unsigned int , unsigned long ) ;
   int (*fb_compat_ioctl)(struct fb_info *, unsigned int , unsigned long ) ;
   int (*fb_mmap)(struct fb_info *, struct vm_area_struct *) ;
   void (*fb_get_caps)(struct fb_info *, struct fb_blit_caps *, struct fb_var_screeninfo *) ;
   void (*fb_destroy)(struct fb_info *) ;
   int (*fb_debug_enter)(struct fb_info *) ;
   int (*fb_debug_leave)(struct fb_info *) ;
};
#line 306  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilemap {
   __u32 width ;
   __u32 height ;
   __u32 depth ;
   __u32 length ;
   __u8 *data ;
};
#line 315  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilerect {
   __u32 sx ;
   __u32 sy ;
   __u32 width ;
   __u32 height ;
   __u32 index ;
   __u32 fg ;
   __u32 bg ;
   __u32 rop ;
};
#line 326  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilearea {
   __u32 sx ;
   __u32 sy ;
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tileblit {
   __u32 sx ;
   __u32 sy ;
   __u32 width ;
   __u32 height ;
   __u32 fg ;
   __u32 bg ;
   __u32 length ;
   __u32 *indices ;
};
#line 346  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilecursor {
   __u32 sx ;
   __u32 sy ;
   __u32 mode ;
   __u32 shape ;
   __u32 fg ;
   __u32 bg ;
};
#line 355  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tile_ops {
   void (*fb_settile)(struct fb_info *, struct fb_tilemap *) ;
   void (*fb_tilecopy)(struct fb_info *, struct fb_tilearea *) ;
   void (*fb_tilefill)(struct fb_info *, struct fb_tilerect *) ;
   void (*fb_tileblit)(struct fb_info *, struct fb_tileblit *) ;
   void (*fb_tilecursor)(struct fb_info *, struct fb_tilecursor *) ;
   int (*fb_get_tilemax)(struct fb_info *) ;
};
#line 499  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct aperture {
   resource_size_t base ;
   resource_size_t size ;
};
#line 497  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct apertures_struct {
   unsigned int count ;
   struct aperture ranges[0U] ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
union __anonunion_6274 {
   char *screen_base ;
   char *screen_buffer ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_info {
   atomic_t count ;
   int node ;
   int flags ;
   int fbcon_rotate_hint ;
   struct mutex lock ;
   struct mutex mm_lock ;
   struct fb_var_screeninfo var ;
   struct fb_fix_screeninfo fix ;
   struct fb_monspecs monspecs ;
   struct work_struct queue ;
   struct fb_pixmap pixmap ;
   struct fb_pixmap sprite ;
   struct fb_cmap cmap ;
   struct list_head modelist ;
   struct fb_videomode *mode ;
   struct backlight_device *bl_dev ;
   struct mutex bl_curve_mutex ;
   u8 bl_curve[128U] ;
   struct delayed_work deferred_work ;
   struct fb_deferred_io *fbdefio ;
   struct fb_ops *fbops ;
   struct device *device ;
   struct device *dev ;
   int class_flag ;
   struct fb_tile_ops *tileops ;
   union __anonunion_6274 __anonCompField_fb_info_73 ;
   unsigned long screen_size ;
   void *pseudo_palette ;
   u32 state ;
   void *fbcon_par ;
   void *par ;
   struct apertures_struct *apertures ;
   bool skip_vt_switch ;
};
#line 767  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_videomode {
   char *name ;
   u32 refresh ;
   u32 xres ;
   u32 yres ;
   u32 pixclock ;
   u32 left_margin ;
   u32 right_margin ;
   u32 upper_margin ;
   u32 lower_margin ;
   u32 hsync_len ;
   u32 vsync_len ;
   u32 sync ;
   u32 vmode ;
   u32 flag ;
};
#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct ldv_kmem_cache {
   char *name ;
   unsigned int size ;
};
#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
typedef unsigned long pthread_t;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
union pthread_attr_t {
   char __size[56U] ;
   long __align ;
};
#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
typedef union pthread_attr_t pthread_attr_t;
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 18  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_free_irq_6 {
   int arg0 ;
   int signal_pending ;
};
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_interrupt_scenario_mvpp2_isr_32 {
   int arg0 ;
   enum irqreturn (*arg1)(int , void *) ;
   enum irqreturn (*arg2)(int , void *) ;
   void *arg3 ;
   int signal_pending ;
};
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_character_driver_scenario_mvpp2_dbgfs_filter_fops_13 {
   struct file_operations *arg0 ;
   int signal_pending ;
};
#line 36  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_random_allocationless_scenario_mvpp2_ethtool_get_coalesce_34 {
   struct net_device *arg0 ;
   int signal_pending ;
};
#line 41  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_platform_instance_mvpp2_driver_35 {
   struct platform_driver *arg0 ;
   int signal_pending ;
};
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/common/inline_asm.h"
#line 22 
void ldv_inline_asm(void);
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kasan-checks.h"
__inline static bool kasan_check_read(void *p, unsigned int size)
{
  #line 36 
  return (_Bool)1;
}

#line 204  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static bool constant_test_bit(long nr, unsigned long *addr)
{
  #line 207 
  return (_Bool)(((*(addr + (unsigned long)(nr >> 6)) >> (nr & 63L)) & 1UL) != 0UL);
}

#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static bool variable_test_bit(long nr, unsigned long *addr)
{
  #line 212 
  bool oldbit;
  #line 213 
  ldv_inline_asm();
  #line 219 
  return oldbit;
}

#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-non-atomic.h"
__inline static bool test_bit(long nr, unsigned long *addr)
{
  #line 111 
  int tmp_1;
  #line 110 
  kasan_check_read((void *)(addr + (unsigned long)(nr / 64L)),8U);
  #line 111 
  if (0 != 0) {
    #line 111 
    tmp_1 = (int)constant_test_bit(nr,addr) != 0;
  }
  else {
    #line 111 
    tmp_1 = (int)variable_test_bit(nr,addr) != 0;
  }
  #line 111 
  return (_Bool)(tmp_1 != 0);
}

#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/string_64.h"
#line 18 
void *memset(void *, int, size_t);
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
#line 20 
unsigned long native_save_fl(void);
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
unsigned long native_save_fl(void)
{
  #line 22 
  unsigned long flags;
  #line 23 
  ldv_inline_asm();
  #line 35 
  return flags;
}

#line 38 
#line 39 
void native_restore_fl(unsigned long flags);
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
void native_restore_fl(unsigned long flags)
{
  #line 41 
  ldv_inline_asm();
  #line 42 
  return;
}

#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
#line 29 
void *ldv_devm_kcalloc(size_t n, size_t size, gfp_t flags);
#line 952  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 832  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_prs.i.aux"
static void *cif_devm_kcalloc(struct device *dev, size_t n, size_t size, gfp_t flags);
#line 2203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void *netdev_priv(struct net_device *dev)
{
  #line 2205 
  return (void *)((char *)dev + 3328UL);
}

#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_multicast_ether_addr(u8 *addr)
{
  #line 119 
  u32 a = *((u32 *)addr);
  #line 126 
  return (_Bool)((a & 1U) != 0U);
}

#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_broadcast_ether_addr(u8 *addr)
{
  #line 166 
  return (_Bool)((unsigned int)(((int)*((u16 *)addr) & (int)*((u16 *)(addr + 2U))) & (int)*((u16 *)(addr + 4U))) == 65535U);
}

#line 276  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static void ether_addr_copy(u8 *dst, u8 *src)
{
  #line 279 
  *((u32 *)dst) = *((u32 *)src);
  #line 280 
  *((u16 *)(dst + 4U)) = *((u16 *)(src + 4U));
  #line 281 
  return;
}

#line 315  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool ether_addr_equal(u8 *addr1, u8 *addr2)
{
  #line 318 
  u32 fold = (*((u32 *)addr1) ^ *((u32 *)addr2)) | (unsigned int)((int)*((u16 *)(addr1 + 4U)) ^ (int)*((u16 *)(addr2 + 4U)));
  #line 321 
  return (_Bool)(fold == 0U);
}

#line 1199  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2.h"
#line 1199 
void mvpp2_write(struct mvpp2 *priv, u32 offset, u32 data);
#line 1200 
#line 1200 
u32 mvpp2_read(struct mvpp2 *priv, u32 offset);
#line 295  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_prs.h"
#line 2096  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_prs.c"
int mvpp2_prs_default_init(struct platform_device *pdev, struct mvpp2 *priv);
#line 297  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_prs.h"
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_prs.c"
int mvpp2_prs_init_from_hw(struct mvpp2 *priv, struct mvpp2_prs_entry *pe, int tid);
#line 300  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_prs.h"
#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_prs.c"
unsigned int mvpp2_prs_tcam_port_map_get(struct mvpp2_prs_entry *pe);
#line 302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_prs.h"
#line 148  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_prs.c"
void mvpp2_prs_tcam_data_byte_get(struct mvpp2_prs_entry *pe, unsigned int offs, unsigned char *byte, unsigned char *enable);
#line 306  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_prs.h"
#line 2211  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_prs.c"
int mvpp2_prs_mac_da_accept(struct mvpp2_port *port, u8 *da, bool add);
#line 308  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_prs.h"
#line 2361  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_prs.c"
int mvpp2_prs_tag_mode_set(struct mvpp2 *priv, int port, int type);
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_prs.h"
#line 2411  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_prs.c"
int mvpp2_prs_add_flow(struct mvpp2 *priv, int flow, u32 ri, u32 ri_mask);
#line 312  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_prs.h"
#line 2447  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_prs.c"
int mvpp2_prs_def_flow(struct mvpp2_port *port);
#line 314  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_prs.h"
#line 2049  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_prs.c"
void mvpp2_prs_vid_enable_filtering(struct mvpp2_port *port);
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_prs.h"
#line 2037  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_prs.c"
void mvpp2_prs_vid_disable_filtering(struct mvpp2_port *port);
#line 318  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_prs.h"
#line 1941  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_prs.c"
int mvpp2_prs_vid_entry_add(struct mvpp2_port *port, u16 vid);
#line 320  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_prs.h"
#line 2005  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_prs.c"
void mvpp2_prs_vid_entry_remove(struct mvpp2_port *port, u16 vid);
#line 322  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_prs.h"
#line 2022  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_prs.c"
void mvpp2_prs_vid_remove_all(struct mvpp2_port *port);
#line 324  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_prs.h"
#line 443  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_prs.c"
void mvpp2_prs_mac_promisc_set(struct mvpp2 *priv, int port, enum mvpp2_prs_l2_cast l2_cast, bool add);
#line 327  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_prs.h"
#line 2320  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_prs.c"
void mvpp2_prs_mac_del_all(struct mvpp2_port *port);
#line 329  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_prs.h"
#line 2299  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_prs.c"
int mvpp2_prs_update_mac_da(struct net_device *dev, u8 *da);
#line 331  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_prs.h"
#line 2484  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_prs.c"
int mvpp2_prs_hits(struct mvpp2 *priv, int index);
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_prs.c"
static int mvpp2_prs_hw_write(struct mvpp2 *priv, struct mvpp2_prs_entry *pe)
{
  #line 24 
  int i;
  #line 26 
  if (pe->index > 255U) 
                        #line 27 
                        return -22;
  #line 30 
  pe->tcam[5] &= 2147483647U;
  #line 33 
  mvpp2_write(priv,4352U,pe->index);
  #line 34 
  i = 0;
  #line 34 
  while (i <= 5) {
    #line 35 
    mvpp2_write(priv,(unsigned int)((i + 1089) * 4),pe->tcam[i]);
    #line 34 
    i ++;
  }
  #line 38 
  mvpp2_write(priv,4608U,pe->index);
  #line 39 
  i = 0;
  #line 39 
  while (i <= 3) {
    #line 40 
    mvpp2_write(priv,(unsigned int)((i + 1153) * 4),pe->sram[i]);
    #line 39 
    i ++;
  }
  #line 42 
  return 0;
}

#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_prs.c"
int mvpp2_prs_init_from_hw(struct mvpp2 *priv, struct mvpp2_prs_entry *pe, int tid)
{
  #line 49 
  int i;
  #line 51 
  if (tid > 255) 
                 #line 52 
                 return -22;
  #line 54 
  memset((void *)pe,0,44UL);
  #line 55 
  pe->index = (unsigned int)tid;
  #line 58 
  mvpp2_write(priv,4352U,pe->index);
  #line 60 
  pe->tcam[5] = mvpp2_read(priv,4376U);
  #line 62 
  if (((unsigned long)pe->tcam[5] & 2147483648UL) != 0UL) 
                                                          #line 63 
                                                          return 1;
  #line 65 
  i = 0;
  #line 65 
  while (i <= 5) {
    #line 66 
    pe->tcam[i] = mvpp2_read(priv,(unsigned int)((i + 1089) * 4));
    #line 65 
    i ++;
  }
  #line 69 
  mvpp2_write(priv,4608U,pe->index);
  #line 70 
  i = 0;
  #line 70 
  while (i <= 3) {
    #line 71 
    pe->sram[i] = mvpp2_read(priv,(unsigned int)((i + 1153) * 4));
    #line 70 
    i ++;
  }
  #line 73 
  return 0;
}

#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_prs.c"
static void mvpp2_prs_hw_inv(struct mvpp2 *priv, int index)
{
  #line 80 
  mvpp2_write(priv,4352U,(unsigned int)index);
  #line 81 
  mvpp2_write(priv,4376U,2147483648U);
  #line 82 
  return;
}

#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_prs.c"
static void mvpp2_prs_shadow_set(struct mvpp2 *priv, int index, int lu)
{
  #line 88 
  (priv->prs_shadow + (unsigned long)index)->valid = (_Bool)1;
  #line 89 
  (priv->prs_shadow + (unsigned long)index)->lu = lu;
  #line 90 
  return;
}

#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_prs.c"
static void mvpp2_prs_shadow_ri_set(struct mvpp2 *priv, int index, unsigned int ri, unsigned int ri_mask)
{
  #line 96 
  (priv->prs_shadow + (unsigned long)index)->ri_mask = ri_mask;
  #line 97 
  (priv->prs_shadow + (unsigned long)index)->ri = ri;
  #line 98 
  return;
}

#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_prs.c"
static void mvpp2_prs_tcam_lu_set(struct mvpp2_prs_entry *pe, unsigned int lu)
{
  #line 103 
  pe->tcam[5] &= 4294967280U;
  #line 104 
  pe->tcam[5] &= 4293984255U;
  #line 105 
  pe->tcam[5] |= lu & 15U;
  #line 106 
  pe->tcam[5] |= 983040U;
  #line 107 
  return;
}

#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_prs.c"
static void mvpp2_prs_tcam_port_set(struct mvpp2_prs_entry *pe, unsigned int port, bool add)
{
  #line 113 
  if ((int)add != 0) 
                     #line 114 
                     pe->tcam[4] &= ~ ((unsigned int)(1UL << port) << 24U); else 
                                                                    #line 116 
                                                                    pe->tcam[4] |= (unsigned int)(1UL << port) << 24U;
  #line 117 
  return;
}

#line 120  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_prs.c"
static void mvpp2_prs_tcam_port_map_set(struct mvpp2_prs_entry *pe, unsigned int ports)
{
  #line 123 
  pe->tcam[4] &= 4294902015U;
  #line 124 
  pe->tcam[4] &= 16777215U;
  #line 125 
  pe->tcam[4] |= ~ ports << 24;
  #line 126 
  return;
}

#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_prs.c"
unsigned int mvpp2_prs_tcam_port_map_get(struct mvpp2_prs_entry *pe)
{
  #line 131 
  return ~ pe->tcam[4] >> 24;
}

#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_prs.c"
static void mvpp2_prs_tcam_data_byte_set(struct mvpp2_prs_entry *pe, unsigned int offs, unsigned char byte, unsigned char enable)
{
  #line 139 
  int pos = (int)((offs & 1U) * 8U);
  #line 141 
  pe->tcam[offs / 2U] &= (unsigned int)(~ (255 << pos));
  #line 142 
  pe->tcam[offs / 2U] &= (unsigned int)(~ (16711680 << pos));
  #line 143 
  pe->tcam[offs / 2U] |= (unsigned int)((int)byte << pos);
  #line 144 
  pe->tcam[offs / 2U] |= (unsigned int)(((int)enable << pos) << 16);
  #line 145 
  return;
}

#line 148  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_prs.c"
void mvpp2_prs_tcam_data_byte_get(struct mvpp2_prs_entry *pe, unsigned int offs, unsigned char *byte, unsigned char *enable)
{
  #line 152 
  int pos = (int)((offs & 1U) * 8U);
  #line 154 
  *byte = (unsigned char)(pe->tcam[offs / 2U] >> pos);
  #line 155 
  *enable = (unsigned char)(pe->tcam[offs / 2U] >> (pos + 16));
  #line 156 
  return;
}

#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_prs.c"
static bool mvpp2_prs_tcam_data_cmp(struct mvpp2_prs_entry *pe, int offs, u16 data)
{
  #line 162 
  u16 tcam_data;
  #line 164 
  tcam_data = (unsigned short)pe->tcam[offs / 2];
  #line 165 
  return (_Bool)((int)tcam_data == (int)data);
}

#line 169  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_prs.c"
static void mvpp2_prs_tcam_ai_update(struct mvpp2_prs_entry *pe, unsigned int bits, unsigned int enable)
{
  #line 172 
  int i;
  #line 174 
  i = 0;
  #line 174 
  while (i <= 7) {
    #line 175 
    if ((((unsigned long)enable >> i) & 1UL) == 0UL) 
                                                     #line 176 
                                                     goto __Cont;
    #line 178 
    if ((((unsigned long)bits >> i) & 1UL) != 0UL) 
                                                   #line 179 
                                                   pe->tcam[4] |= (unsigned int)(1UL << i); else 
                                                                    #line 181 
                                                                    pe->tcam[4] &= ~ ((unsigned int)(1UL << i));
    #line 174 
    __Cont: 
            #line 174 
    i ++;
  }
  #line 184 
  pe->tcam[4] |= enable << 16;
  #line 185 
  return;
}

#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_prs.c"
static int mvpp2_prs_tcam_ai_get(struct mvpp2_prs_entry *pe)
{
  #line 190 
  return (int)pe->tcam[4] & 255;
}

#line 194  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_prs.c"
static void mvpp2_prs_match_etype(struct mvpp2_prs_entry *pe, int offset, unsigned short ethertype)
{
  #line 197 
  mvpp2_prs_tcam_data_byte_set(pe,(unsigned int)offset,(unsigned char)((int)((unsigned char)((int)ethertype >> 8))),(unsigned char)255);
  #line 198 
  mvpp2_prs_tcam_data_byte_set(pe,(unsigned int)(offset + 1),(unsigned char)((int)((unsigned char)ethertype)),(unsigned char)255);
  #line 199 
  return;
}

#line 202  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_prs.c"
static void mvpp2_prs_match_vid(struct mvpp2_prs_entry *pe, int offset, unsigned short vid)
{
  #line 205 
  mvpp2_prs_tcam_data_byte_set(pe,(unsigned int)offset,(unsigned char)((int)((unsigned char)((int)vid >> 8)) & 15),(unsigned char)15);
  #line 206 
  mvpp2_prs_tcam_data_byte_set(pe,(unsigned int)(offset + 1),(unsigned char)((int)((unsigned char)vid)),(unsigned char)255);
  #line 207 
  return;
}

#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_prs.c"
static void mvpp2_prs_sram_bits_set(struct mvpp2_prs_entry *pe, int bit_num, u32 val)
{
  #line 213 
  pe->sram[bit_num / 32] |= val << (bit_num & 31);
  #line 214 
  return;
}

#line 217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_prs.c"
static void mvpp2_prs_sram_bits_clear(struct mvpp2_prs_entry *pe, int bit_num, u32 val)
{
  #line 220 
  pe->sram[bit_num / 32] &= ~ (val << (bit_num & 31));
  #line 221 
  return;
}

#line 224  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_prs.c"
static void mvpp2_prs_sram_ri_update(struct mvpp2_prs_entry *pe, unsigned int bits, unsigned int mask)
{
  #line 227 
  unsigned int i;
  #line 229 
  i = 0U;
  #line 229 
  while (i <= 31U) {
    #line 230 
    if ((((unsigned long)mask >> i) & 1UL) == 0UL) 
                                                   #line 231 
                                                   goto __Cont;
    #line 233 
    if ((((unsigned long)bits >> i) & 1UL) != 0UL) 
                                                   #line 234 
                                                   mvpp2_prs_sram_bits_set(pe,(int)i,1U); else 
                                                                    #line 237 
                                                                    mvpp2_prs_sram_bits_clear(pe,(int)i,1U);
    #line 241 
    mvpp2_prs_sram_bits_set(pe,(int)(i + 32U),1U);
    #line 229 
    __Cont: 
            #line 229 
    i ++;
  }
  #line 243 
  return;
}

#line 246  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_prs.c"
static int mvpp2_prs_sram_ri_get(struct mvpp2_prs_entry *pe)
{
  #line 248 
  return (int)pe->sram[0];
}

#line 252  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_prs.c"
static void mvpp2_prs_sram_ai_update(struct mvpp2_prs_entry *pe, unsigned int bits, unsigned int mask)
{
  #line 255 
  unsigned int i;
  #line 257 
  i = 0U;
  #line 257 
  while (i <= 7U) {
    #line 258 
    if ((((unsigned long)mask >> i) & 1UL) == 0UL) 
                                                   #line 259 
                                                   goto __Cont;
    #line 261 
    if ((((unsigned long)bits >> i) & 1UL) != 0UL) 
                                                   #line 262 
                                                   mvpp2_prs_sram_bits_set(pe,(int)(i + 90U),1U); else 
                                                                    #line 265 
                                                                    mvpp2_prs_sram_bits_clear(pe,(int)(i + 90U),1U);
    #line 269 
    mvpp2_prs_sram_bits_set(pe,(int)(i + 98U),1U);
    #line 257 
    __Cont: 
            #line 257 
    i ++;
  }
  #line 271 
  return;
}

#line 274  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_prs.c"
static int mvpp2_prs_sram_ai_get(struct mvpp2_prs_entry *pe)
{
  #line 276 
  u8 bits;
  #line 278 
  int ai_off = 2;
  #line 279 
  int ai_shift = 26;
  #line 281 
  bits = (unsigned char)((int)((unsigned char)(pe->sram[ai_off] >> ai_shift)) | (int)((unsigned char)(pe->sram[ai_off + 1] << (32 - ai_shift))));
  #line 284 
  return (int)bits;
}

#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_prs.c"
static void mvpp2_prs_sram_next_lu_set(struct mvpp2_prs_entry *pe, unsigned int lu)
{
  #line 293 
  int sram_next_off = 106;
  #line 295 
  mvpp2_prs_sram_bits_clear(pe,sram_next_off,15U);
  #line 297 
  mvpp2_prs_sram_bits_set(pe,sram_next_off,lu);
  #line 298 
  return;
}

#line 303  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_prs.c"
static void mvpp2_prs_sram_shift_set(struct mvpp2_prs_entry *pe, int shift, unsigned int op)
{
  #line 307 
  if (shift < 0) {
    #line 308 
    mvpp2_prs_sram_bits_set(pe,72,1U);
    #line 309 
    shift = - shift;
  }
  else 
       #line 311 
       mvpp2_prs_sram_bits_clear(pe,72,1U);
  #line 315 
  pe->sram[2] |= (unsigned int)shift & 255U;
  #line 319 
  mvpp2_prs_sram_bits_clear(pe,85,3U);
  #line 321 
  mvpp2_prs_sram_bits_set(pe,85,op);
  #line 324 
  mvpp2_prs_sram_bits_clear(pe,89,1U);
  #line 325 
  return;
}

#line 330  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_prs.c"
static void mvpp2_prs_sram_offset_set(struct mvpp2_prs_entry *pe, unsigned int type, int offset, unsigned int op)
{
  #line 335 
  if (offset < 0) {
    #line 336 
    mvpp2_prs_sram_bits_set(pe,81,1U);
    #line 337 
    offset = - offset;
  }
  else 
       #line 339 
       mvpp2_prs_sram_bits_clear(pe,81,1U);
  #line 343 
  mvpp2_prs_sram_bits_clear(pe,73,255U);
  #line 345 
  mvpp2_prs_sram_bits_set(pe,73,(unsigned int)offset & 255U);
  #line 349 
  mvpp2_prs_sram_bits_clear(pe,82,7U);
  #line 351 
  mvpp2_prs_sram_bits_set(pe,82,type);
  #line 354 
  mvpp2_prs_sram_bits_clear(pe,87,3U);
  #line 356 
  mvpp2_prs_sram_bits_set(pe,87,op & 3U);
  #line 360 
  mvpp2_prs_sram_bits_clear(pe,89,1U);
  #line 361 
  return;
}

#line 364  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_prs.c"
static int mvpp2_prs_flow_find(struct mvpp2 *priv, int flow)
{
  #line 366 
  struct mvpp2_prs_entry pe;
  #line 367 
  int tid;
  #line 370 
  tid = 255;
  #line 370 
  while (tid >= 0) {
    {
      #line 371 
      u8 bits;
      #line 373 
      if (! (priv->prs_shadow + (unsigned long)tid)->valid || (priv->prs_shadow + (unsigned long)tid)->lu != 9) 
        #line 375 
        goto __Cont;
      #line 377 
      mvpp2_prs_init_from_hw(priv,& pe,tid);
      #line 378 
      bits = (unsigned char)mvpp2_prs_sram_ai_get(& pe);
      #line 381 
      if (((int)bits & 63) == flow) 
                                    #line 382 
                                    return tid;
    }
    #line 370 
    __Cont: 
            #line 370 
    tid --;
  }
  #line 385 
  return -2;
}

#line 389  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_prs.c"
static int mvpp2_prs_tcam_first_free(struct mvpp2 *priv, unsigned char start, unsigned char end)
{
  #line 392 
  int tid;
  #line 394 
  if ((int)start > (int)end) {
    #line 395 
    unsigned char __tmp = start;
    #line 395 
    start = end;
    #line 395 
    end = __tmp;
  }
  #line 400 
  tid = (int)start;
  #line 400 
  while ((int)end >= tid) {
    #line 401 
    if (! (priv->prs_shadow + (unsigned long)tid)->valid) 
                                                          #line 402 
                                                          return tid;
    #line 400 
    tid ++;
  }
  #line 405 
  return -22;
}

#line 409  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_prs.c"
static void mvpp2_prs_mac_drop_all_set(struct mvpp2 *priv, int port, bool add)
{
  #line 411 
  struct mvpp2_prs_entry pe;
  #line 413 
  if ((int)(priv->prs_shadow)->valid != 0) 
                                           #line 415 
                                           mvpp2_prs_init_from_hw(priv,& pe,0);
  else {
    #line 418 
    memset((void *)(& pe),0,44UL);
    #line 419 
    mvpp2_prs_tcam_lu_set(& pe,1U);
    #line 420 
    pe.index = 0U;
    #line 423 
    mvpp2_prs_sram_ri_update(& pe,2147483648U,2147483648U);
    #line 426 
    mvpp2_prs_sram_bits_set(& pe,111,1U);
    #line 427 
    mvpp2_prs_sram_next_lu_set(& pe,9U);
    #line 430 
    mvpp2_prs_shadow_set(priv,(int)pe.index,1);
    #line 433 
    mvpp2_prs_tcam_port_map_set(& pe,0U);
  }
  #line 437 
  mvpp2_prs_tcam_port_set(& pe,(unsigned int)port,(_Bool)((bool)((int)add) != 0));
  #line 439 
  mvpp2_prs_hw_write(priv,& pe);
  #line 440 
  return;
}

#line 443  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_prs.c"
void mvpp2_prs_mac_promisc_set(struct mvpp2 *priv, int port, enum mvpp2_prs_l2_cast l2_cast, bool add)
{
  #line 446 
  struct mvpp2_prs_entry pe;
  #line 447 
  unsigned char cast_match;
  #line 448 
  unsigned int ri;
  #line 449 
  int tid;
  #line 451 
  if (l2_cast == (unsigned int)MVPP2_PRS_L2_UNI_CAST) {
    #line 452 
    cast_match = (unsigned char)0U;
    #line 453 
    tid = 254;
    #line 454 
    ri = 0U;
  }
  else {
    #line 456 
    cast_match = (unsigned char)1U;
    #line 457 
    tid = 253;
    #line 458 
    ri = 512U;
  }
  #line 462 
  if ((int)(priv->prs_shadow + (unsigned long)tid)->valid != 0) 
                                                                #line 463 
                                                                mvpp2_prs_init_from_hw(priv,& pe,tid);
  else {
    #line 465 
    memset((void *)(& pe),0,44UL);
    #line 466 
    mvpp2_prs_tcam_lu_set(& pe,1U);
    #line 467 
    pe.index = (unsigned int)tid;
    #line 470 
    mvpp2_prs_sram_next_lu_set(& pe,2U);
    #line 473 
    mvpp2_prs_sram_ri_update(& pe,ri,1536U);
    #line 476 
    mvpp2_prs_tcam_data_byte_set(& pe,0U,(unsigned char)((int)cast_match),(unsigned char)1);
    #line 480 
    mvpp2_prs_sram_shift_set(& pe,12,1U);
    #line 484 
    mvpp2_prs_tcam_port_map_set(& pe,0U);
    #line 487 
    mvpp2_prs_shadow_set(priv,(int)pe.index,1);
  }
  #line 491 
  mvpp2_prs_tcam_port_set(& pe,(unsigned int)port,(_Bool)((bool)((int)add) != 0));
  #line 493 
  mvpp2_prs_hw_write(priv,& pe);
  #line 494 
  return;
}

#line 497  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_prs.c"
static void mvpp2_prs_dsa_tag_set(struct mvpp2 *priv, int port, bool add, bool tagged, bool extend)
{
  #line 500 
  struct mvpp2_prs_entry pe;
  #line 501 
  int tid;
  #line 501 
  int shift;
  #line 503 
  if ((int)extend != 0) {
    #line 504 
    if ((int)tagged != 0) 
                          #line 504 
                          tid = 235; else 
                                          #line 504 
                                          tid = 236;
    #line 505 
    shift = 8;
  }
  else {
    #line 507 
    if ((int)tagged != 0) 
                          #line 507 
                          tid = 237; else 
                                          #line 507 
                                          tid = 238;
    #line 508 
    shift = 4;
  }
  #line 511 
  if ((int)(priv->prs_shadow + (unsigned long)tid)->valid != 0) 
                                                                #line 513 
                                                                mvpp2_prs_init_from_hw(priv,& pe,tid);
  else {
    #line 516 
    memset((void *)(& pe),0,44UL);
    #line 517 
    mvpp2_prs_tcam_lu_set(& pe,2U);
    #line 518 
    pe.index = (unsigned int)tid;
    #line 521 
    mvpp2_prs_shadow_set(priv,(int)pe.index,2);
    #line 523 
    if ((int)tagged != 0) {
      #line 525 
      mvpp2_prs_tcam_data_byte_set(& pe,0U,(unsigned char)32,(unsigned char)32);
      #line 530 
      if ((int)extend != 0) 
                            #line 531 
                            mvpp2_prs_sram_ai_update(& pe,1U,255U); else 
                                                                    #line 534 
                                                                    mvpp2_prs_sram_ai_update(& pe,0U,255U);
      #line 538 
      mvpp2_prs_sram_ri_update(& pe,4U,12U);
      #line 541 
      mvpp2_prs_sram_next_lu_set(& pe,4U);
    }
    else {
      #line 544 
      mvpp2_prs_sram_shift_set(& pe,shift,1U);
      #line 548 
      mvpp2_prs_sram_ri_update(& pe,0U,12U);
      #line 550 
      mvpp2_prs_sram_next_lu_set(& pe,5U);
    }
    #line 554 
    mvpp2_prs_tcam_port_map_set(& pe,0U);
  }
  #line 558 
  mvpp2_prs_tcam_port_set(& pe,(unsigned int)port,(_Bool)((bool)((int)add) != 0));
  #line 560 
  mvpp2_prs_hw_write(priv,& pe);
  #line 561 
  return;
}

#line 564  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_prs.c"
static void mvpp2_prs_dsa_tag_ethertype_set(struct mvpp2 *priv, int port, bool add, bool tagged, bool extend)
{
  #line 567 
  struct mvpp2_prs_entry pe;
  #line 568 
  int tid;
  #line 568 
  int shift;
  #line 568 
  int port_mask;
  #line 570 
  if ((int)extend != 0) {
    #line 571 
    if ((int)tagged != 0) 
                          #line 571 
                          tid = 239; else 
                                          #line 571 
                                          tid = 240;
    #line 573 
    port_mask = 0;
    #line 574 
    shift = 8;
  }
  else {
    #line 576 
    if ((int)tagged != 0) 
                          #line 576 
                          tid = 241; else 
                                          #line 576 
                                          tid = 242;
    #line 578 
    port_mask = 255;
    #line 579 
    shift = 4;
  }
  #line 582 
  if ((int)(priv->prs_shadow + (unsigned long)tid)->valid != 0) 
                                                                #line 584 
                                                                mvpp2_prs_init_from_hw(priv,& pe,tid);
  else {
    #line 587 
    memset((void *)(& pe),0,44UL);
    #line 588 
    mvpp2_prs_tcam_lu_set(& pe,2U);
    #line 589 
    pe.index = (unsigned int)tid;
    #line 592 
    mvpp2_prs_match_etype(& pe,0,(unsigned short)56026);
    #line 593 
    mvpp2_prs_match_etype(& pe,2,(unsigned short)0);
    #line 595 
    mvpp2_prs_sram_ri_update(& pe,2U,2U);
    #line 598 
    mvpp2_prs_sram_shift_set(& pe,shift + 4,1U);
    #line 602 
    mvpp2_prs_shadow_set(priv,(int)pe.index,2);
    #line 604 
    if ((int)tagged != 0) {
      #line 606 
      mvpp2_prs_tcam_data_byte_set(& pe,7U,(unsigned char)32,(unsigned char)32);
      #line 611 
      mvpp2_prs_sram_ai_update(& pe,0U,255U);
      #line 614 
      mvpp2_prs_sram_next_lu_set(& pe,3U);
    }
    else {
      #line 617 
      mvpp2_prs_sram_ri_update(& pe,0U,12U);
      #line 619 
      mvpp2_prs_sram_next_lu_set(& pe,5U);
    }
    #line 622 
    mvpp2_prs_tcam_port_map_set(& pe,(unsigned int)port_mask);
  }
  #line 626 
  mvpp2_prs_tcam_port_set(& pe,(unsigned int)port,(_Bool)((bool)((int)add) != 0));
  #line 628 
  mvpp2_prs_hw_write(priv,& pe);
  #line 629 
  return;
}

#line 632  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_prs.c"
static int mvpp2_prs_vlan_find(struct mvpp2 *priv, unsigned short tpid, int ai)
{
  #line 634 
  struct mvpp2_prs_entry pe;
  #line 635 
  int tid;
  #line 638 
  tid = 1;
  #line 638 
  while (tid <= 112) {
    {
      #line 640 
      unsigned int ri_bits;
      #line 640 
      unsigned int ai_bits;
      #line 641 
      bool match;
      #line 643 
      if (! (priv->prs_shadow + (unsigned long)tid)->valid || (priv->prs_shadow + (unsigned long)tid)->lu != 3) 
        #line 645 
        goto __Cont;
      #line 647 
      mvpp2_prs_init_from_hw(priv,& pe,tid);
      #line 648 
      match = mvpp2_prs_tcam_data_cmp(& pe,0,(unsigned short)((int)tpid));
      #line 649 
      if (! match) 
                   #line 650 
                   goto __Cont;
      #line 653 
      ri_bits = (unsigned int)mvpp2_prs_sram_ri_get(& pe);
      #line 654 
      ri_bits &= 12U;
      #line 657 
      ai_bits = (unsigned int)mvpp2_prs_tcam_ai_get(& pe);
      #line 659 
      ai_bits &= 4294967167U;
      #line 661 
      if ((unsigned int)ai != ai_bits) 
                                       #line 662 
                                       goto __Cont;
      #line 664 
      if (ri_bits == 4U || ri_bits == 12U) 
                                           #line 666 
                                           return tid;
    }
    #line 638 
    __Cont: 
            #line 639 
    tid ++;
  }
  #line 669 
  return -2;
}

#line 673  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_prs.c"
static int mvpp2_prs_vlan_add(struct mvpp2 *priv, unsigned short tpid, int ai, unsigned int port_map)
{
  #line 676 
  struct mvpp2_prs_entry pe;
  #line 677 
  int tid_aux;
  #line 677 
  int tid;
  #line 678 
  int ret = 0;
  #line 680 
  memset((void *)(& pe),0,44UL);
  #line 682 
  tid = mvpp2_prs_vlan_find(priv,(unsigned short)((int)tpid),ai);
  #line 684 
  if (tid < 0) {
    #line 686 
    tid = mvpp2_prs_tcam_first_free(priv,(unsigned char)112,(unsigned char)1);
    #line 688 
    if (tid < 0) 
                 #line 689 
                 return tid;
    #line 692 
    tid_aux = 112;
    #line 692 
    while (tid_aux > 0) {
      {
        #line 694 
        unsigned int ri_bits;
        #line 696 
        if (! (priv->prs_shadow + (unsigned long)tid_aux)->valid || (priv->prs_shadow + (unsigned long)tid_aux)->lu != 3) 
          #line 698 
          goto __Cont;
        #line 700 
        mvpp2_prs_init_from_hw(priv,& pe,tid_aux);
        #line 701 
        ri_bits = (unsigned int)mvpp2_prs_sram_ri_get(& pe);
        #line 702 
        if (((unsigned long)ri_bits & 12UL) == 8UL) 
                                                    #line 704 
                                                    break;
      }
      #line 692 
      __Cont: 
              #line 693 
      tid_aux --;
    }
    #line 707 
    if (tid <= tid_aux) 
                        #line 708 
                        return -22;
    #line 710 
    memset((void *)(& pe),0,44UL);
    #line 711 
    pe.index = (unsigned int)tid;
    #line 712 
    mvpp2_prs_tcam_lu_set(& pe,3U);
    #line 714 
    mvpp2_prs_match_etype(& pe,0,(unsigned short)((int)tpid));
    #line 717 
    mvpp2_prs_sram_next_lu_set(& pe,4U);
    #line 720 
    mvpp2_prs_sram_ai_update(& pe,0U,255U);
    #line 722 
    if (ai == 0) 
                 #line 723 
                 mvpp2_prs_sram_ri_update(& pe,4U,12U);
    else {
      #line 726 
      ai |= 128;
      #line 727 
      mvpp2_prs_sram_ri_update(& pe,12U,12U);
    }
    #line 730 
    mvpp2_prs_tcam_ai_update(& pe,(unsigned int)ai,255U);
    #line 732 
    mvpp2_prs_shadow_set(priv,(int)pe.index,3);
  }
  else 
       #line 734 
       mvpp2_prs_init_from_hw(priv,& pe,tid);
  #line 737 
  mvpp2_prs_tcam_port_map_set(& pe,port_map);
  #line 739 
  mvpp2_prs_hw_write(priv,& pe);
  #line 741 
  return ret;
}

#line 745  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_prs.c"
static int mvpp2_prs_double_vlan_ai_free_get(struct mvpp2 *priv)
{
  #line 747 
  int i;
  #line 749 
  i = 1;
  #line 749 
  while (i <= 99) {
    #line 750 
    if (! *(priv->prs_double_vlans + (unsigned long)i)) 
                                                        #line 751 
                                                        return i;
    #line 749 
    i ++;
  }
  #line 754 
  return -22;
}

#line 758  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_prs.c"
static int mvpp2_prs_double_vlan_find(struct mvpp2 *priv, unsigned short tpid1, unsigned short tpid2)
{
  #line 761 
  struct mvpp2_prs_entry pe;
  #line 762 
  int tid;
  #line 765 
  tid = 1;
  #line 765 
  while (tid <= 112) {
    {
      #line 767 
      unsigned int ri_mask;
      #line 768 
      bool match;
      #line 776 
      int tmp_1;
      #line 770 
      if (! (priv->prs_shadow + (unsigned long)tid)->valid || (priv->prs_shadow + (unsigned long)tid)->lu != 3) 
        #line 772 
        goto __Cont;
      #line 774 
      mvpp2_prs_init_from_hw(priv,& pe,tid);
      #line 776 
      if ((int)mvpp2_prs_tcam_data_cmp(& pe,0,(unsigned short)((int)tpid1)) != 0) {
        #line 776 
        if ((int)mvpp2_prs_tcam_data_cmp(& pe,4,(unsigned short)((int)tpid2)) != 0) 
          #line 776 
          tmp_1 = 1; else 
                          #line 776 
                          tmp_1 = 0;
      }
      else 
           #line 776 
           tmp_1 = 0;
      #line 776 
      match = (_Bool)(tmp_1 != 0);
      #line 779 
      if (! match) 
                   #line 780 
                   goto __Cont;
      #line 782 
      ri_mask = (unsigned int)mvpp2_prs_sram_ri_get(& pe) & 12U;
      #line 783 
      if (ri_mask == 8U) 
                         #line 784 
                         return tid;
    }
    #line 765 
    __Cont: 
            #line 766 
    tid ++;
  }
  #line 787 
  return -2;
}

#line 791  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_prs.c"
static int mvpp2_prs_double_vlan_add(struct mvpp2 *priv, unsigned short tpid1, unsigned short tpid2, unsigned int port_map)
{
  #line 795 
  int tid_aux;
  #line 795 
  int tid;
  #line 795 
  int ai;
  #line 796 
  struct mvpp2_prs_entry pe;
  #line 795 
  int ret = 0;
  #line 798 
  memset((void *)(& pe),0,44UL);
  #line 800 
  tid = mvpp2_prs_double_vlan_find(priv,(unsigned short)((int)tpid1),(unsigned short)((int)tpid2));
  #line 802 
  if (tid < 0) {
    #line 804 
    tid = mvpp2_prs_tcam_first_free(priv,(unsigned char)1,(unsigned char)112);
    #line 806 
    if (tid < 0) 
                 #line 807 
                 return tid;
    #line 810 
    ai = mvpp2_prs_double_vlan_ai_free_get(priv);
    #line 811 
    if (ai < 0) 
                #line 812 
                return ai;
    #line 815 
    tid_aux = 1;
    #line 815 
    while (tid_aux <= 112) {
      {
        #line 817 
        unsigned int ri_bits;
        #line 819 
        if (! (priv->prs_shadow + (unsigned long)tid_aux)->valid || (priv->prs_shadow + (unsigned long)tid_aux)->lu != 3) 
          #line 821 
          goto __Cont;
        #line 823 
        mvpp2_prs_init_from_hw(priv,& pe,tid_aux);
        #line 824 
        ri_bits = (unsigned int)mvpp2_prs_sram_ri_get(& pe);
        #line 825 
        ri_bits &= 12U;
        #line 826 
        if (ri_bits == 4U || ri_bits == 12U) 
                                             #line 828 
                                             break;
      }
      #line 815 
      __Cont: 
              #line 816 
      tid_aux ++;
    }
    #line 831 
    if (tid >= tid_aux) 
                        #line 832 
                        return -34;
    #line 834 
    memset((void *)(& pe),0,44UL);
    #line 835 
    mvpp2_prs_tcam_lu_set(& pe,3U);
    #line 836 
    pe.index = (unsigned int)tid;
    #line 838 
    *(priv->prs_double_vlans + (unsigned long)ai) = (_Bool)1;
    #line 840 
    mvpp2_prs_match_etype(& pe,0,(unsigned short)((int)tpid1));
    #line 841 
    mvpp2_prs_match_etype(& pe,4,(unsigned short)((int)tpid2));
    #line 843 
    mvpp2_prs_sram_next_lu_set(& pe,3U);
    #line 845 
    mvpp2_prs_sram_shift_set(& pe,4,1U);
    #line 847 
    mvpp2_prs_sram_ri_update(& pe,8U,12U);
    #line 849 
    mvpp2_prs_sram_ai_update(& pe,(unsigned int)(ai | 128),255U);
    #line 852 
    mvpp2_prs_shadow_set(priv,(int)pe.index,3);
  }
  else 
       #line 854 
       mvpp2_prs_init_from_hw(priv,& pe,tid);
  #line 858 
  mvpp2_prs_tcam_port_map_set(& pe,port_map);
  #line 859 
  mvpp2_prs_hw_write(priv,& pe);
  #line 861 
  return ret;
}

#line 865  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_prs.c"
static int mvpp2_prs_ip4_proto(struct mvpp2 *priv, unsigned short proto, unsigned int ri, unsigned int ri_mask)
{
  #line 868 
  struct mvpp2_prs_entry pe;
  #line 869 
  int tid;
  #line 871 
  if (((unsigned int)proto != 6U && (unsigned int)proto != 17U) && (unsigned int)proto != 2U) 
    #line 873 
    return -22;
  #line 876 
  tid = mvpp2_prs_tcam_first_free(priv,(unsigned char)1,(unsigned char)112);
  #line 878 
  if (tid < 0) 
               #line 879 
               return tid;
  #line 881 
  memset((void *)(& pe),0,44UL);
  #line 882 
  mvpp2_prs_tcam_lu_set(& pe,7U);
  #line 883 
  pe.index = (unsigned int)tid;
  #line 886 
  mvpp2_prs_sram_next_lu_set(& pe,7U);
  #line 887 
  mvpp2_prs_sram_shift_set(& pe,12,1U);
  #line 889 
  mvpp2_prs_sram_offset_set(& pe,4U,16,0U);
  #line 892 
  mvpp2_prs_sram_ai_update(& pe,1U,1U);
  #line 894 
  mvpp2_prs_sram_ri_update(& pe,ri,ri_mask | 131072U);
  #line 896 
  mvpp2_prs_tcam_data_byte_set(& pe,2U,(unsigned char)0,(unsigned char)63);
  #line 898 
  mvpp2_prs_tcam_data_byte_set(& pe,3U,(unsigned char)0,(unsigned char)255);
  #line 901 
  mvpp2_prs_tcam_data_byte_set(& pe,5U,(unsigned char)((int)((unsigned char)proto)),(unsigned char)255);
  #line 902 
  mvpp2_prs_tcam_ai_update(& pe,0U,1U);
  #line 904 
  mvpp2_prs_tcam_port_map_set(& pe,255U);
  #line 907 
  mvpp2_prs_shadow_set(priv,(int)pe.index,7);
  #line 908 
  mvpp2_prs_hw_write(priv,& pe);
  #line 911 
  tid = mvpp2_prs_tcam_first_free(priv,(unsigned char)1,(unsigned char)112);
  #line 913 
  if (tid < 0) 
               #line 914 
               return tid;
  #line 916 
  pe.index = (unsigned int)tid;
  #line 918 
  pe.sram[0] = 0U;
  #line 919 
  pe.sram[1] = 0U;
  #line 920 
  mvpp2_prs_sram_ri_update(& pe,ri,ri_mask);
  #line 922 
  mvpp2_prs_sram_ri_update(& pe,ri | 131072U,ri_mask | 131072U);
  #line 925 
  mvpp2_prs_tcam_data_byte_set(& pe,2U,(unsigned char)0,(unsigned char)0);
  #line 926 
  mvpp2_prs_tcam_data_byte_set(& pe,3U,(unsigned char)0,(unsigned char)0);
  #line 929 
  mvpp2_prs_shadow_set(priv,(int)pe.index,7);
  #line 930 
  mvpp2_prs_hw_write(priv,& pe);
  #line 932 
  return 0;
}

#line 936  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_prs.c"
static int mvpp2_prs_ip4_cast(struct mvpp2 *priv, unsigned short l3_cast)
{
  #line 938 
  struct mvpp2_prs_entry pe;
  #line 939 
  int mask;
  #line 939 
  int tid;
  #line 941 
  tid = mvpp2_prs_tcam_first_free(priv,(unsigned char)1,(unsigned char)112);
  #line 943 
  if (tid < 0) 
               #line 944 
               return tid;
  #line 946 
  memset((void *)(& pe),0,44UL);
  #line 947 
  mvpp2_prs_tcam_lu_set(& pe,7U);
  #line 948 
  pe.index = (unsigned int)tid;
  #line 950 
  switch ((int)l3_cast) {
    #line 951 
    case 1: 
            #line 951 
    ;
    #line 952 
    mvpp2_prs_tcam_data_byte_set(& pe,0U,(unsigned char)224,(unsigned char)240);
    #line 954 
    mvpp2_prs_sram_ri_update(& pe,32768U,98304U);
    #line 956 
    break;
    #line 957 
    case 2: 
            #line 957 
    ;
    #line 958 
    mask = 255;
    #line 959 
    mvpp2_prs_tcam_data_byte_set(& pe,0U,(unsigned char)((int)((unsigned char)mask)),(unsigned char)((int)((unsigned char)mask)));
    #line 960 
    mvpp2_prs_tcam_data_byte_set(& pe,1U,(unsigned char)((int)((unsigned char)mask)),(unsigned char)((int)((unsigned char)mask)));
    #line 961 
    mvpp2_prs_tcam_data_byte_set(& pe,2U,(unsigned char)((int)((unsigned char)mask)),(unsigned char)((int)((unsigned char)mask)));
    #line 962 
    mvpp2_prs_tcam_data_byte_set(& pe,3U,(unsigned char)((int)((unsigned char)mask)),(unsigned char)((int)((unsigned char)mask)));
    #line 963 
    mvpp2_prs_sram_ri_update(& pe,98304U,98304U);
    #line 965 
    break;
    #line 966 
    default: 
             #line 966 
    ;
    #line 967 
    return -22;
  }
  #line 971 
  mvpp2_prs_sram_next_lu_set(& pe,9U);
  #line 972 
  mvpp2_prs_sram_bits_set(& pe,111,1U);
  #line 974 
  mvpp2_prs_tcam_ai_update(& pe,1U,1U);
  #line 977 
  mvpp2_prs_tcam_port_map_set(& pe,255U);
  #line 980 
  mvpp2_prs_shadow_set(priv,(int)pe.index,7);
  #line 981 
  mvpp2_prs_hw_write(priv,& pe);
  #line 983 
  return 0;
}

#line 987  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_prs.c"
static int mvpp2_prs_ip6_proto(struct mvpp2 *priv, unsigned short proto, unsigned int ri, unsigned int ri_mask)
{
  #line 990 
  struct mvpp2_prs_entry pe;
  #line 991 
  int tid;
  #line 993 
  if (((unsigned int)proto != 6U && (unsigned int)proto != 17U) && ((unsigned int)proto != 58U && (unsigned int)proto != 4U)) 
    #line 995 
    return -22;
  #line 997 
  tid = mvpp2_prs_tcam_first_free(priv,(unsigned char)1,(unsigned char)112);
  #line 999 
  if (tid < 0) 
               #line 1000 
               return tid;
  #line 1002 
  memset((void *)(& pe),0,44UL);
  #line 1003 
  mvpp2_prs_tcam_lu_set(& pe,8U);
  #line 1004 
  pe.index = (unsigned int)tid;
  #line 1007 
  mvpp2_prs_sram_next_lu_set(& pe,9U);
  #line 1008 
  mvpp2_prs_sram_bits_set(& pe,111,1U);
  #line 1009 
  mvpp2_prs_sram_ri_update(& pe,ri,ri_mask);
  #line 1010 
  mvpp2_prs_sram_offset_set(& pe,4U,34,0U);
  #line 1014 
  mvpp2_prs_tcam_data_byte_set(& pe,0U,(unsigned char)((int)((unsigned char)proto)),(unsigned char)255);
  #line 1015 
  mvpp2_prs_tcam_ai_update(& pe,1U,1U);
  #line 1018 
  mvpp2_prs_tcam_port_map_set(& pe,255U);
  #line 1021 
  mvpp2_prs_shadow_set(priv,(int)pe.index,8);
  #line 1022 
  mvpp2_prs_hw_write(priv,& pe);
  #line 1024 
  return 0;
}

#line 1028  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_prs.c"
static int mvpp2_prs_ip6_cast(struct mvpp2 *priv, unsigned short l3_cast)
{
  #line 1030 
  struct mvpp2_prs_entry pe;
  #line 1031 
  int tid;
  #line 1033 
  if ((unsigned int)l3_cast != 1U) 
                                   #line 1034 
                                   return -22;
  #line 1036 
  tid = mvpp2_prs_tcam_first_free(priv,(unsigned char)1,(unsigned char)112);
  #line 1038 
  if (tid < 0) 
               #line 1039 
               return tid;
  #line 1041 
  memset((void *)(& pe),0,44UL);
  #line 1042 
  mvpp2_prs_tcam_lu_set(& pe,8U);
  #line 1043 
  pe.index = (unsigned int)tid;
  #line 1046 
  mvpp2_prs_sram_next_lu_set(& pe,8U);
  #line 1047 
  mvpp2_prs_sram_ri_update(& pe,32768U,98304U);
  #line 1049 
  mvpp2_prs_sram_ai_update(& pe,1U,1U);
  #line 1052 
  mvpp2_prs_sram_shift_set(& pe,-18,1U);
  #line 1054 
  mvpp2_prs_tcam_data_byte_set(& pe,0U,(unsigned char)255,(unsigned char)255);
  #line 1056 
  mvpp2_prs_tcam_ai_update(& pe,0U,1U);
  #line 1058 
  mvpp2_prs_tcam_port_map_set(& pe,255U);
  #line 1061 
  mvpp2_prs_shadow_set(priv,(int)pe.index,8);
  #line 1062 
  mvpp2_prs_hw_write(priv,& pe);
  #line 1064 
  return 0;
}

#line 1068  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_prs.c"
static void mvpp2_prs_hw_port_init(struct mvpp2 *priv, int port, int lu_first, int lu_max, int offset)
{
  #line 1071 
  u32 val;
  #line 1074 
  val = mvpp2_read(priv,4096U);
  #line 1075 
  val = (unsigned int)(~ (255 << port * 4)) & val;
  #line 1076 
  val = (unsigned int)(lu_first << port * 4) | val;
  #line 1077 
  mvpp2_write(priv,4096U,val);
  #line 1080 
  val = mvpp2_read(priv,(unsigned int)((port & 4) + 4108));
  #line 1081 
  val = (unsigned int)(~ (255 << (port % 4) * 8)) & val;
  #line 1082 
  val = (unsigned int)(lu_max << (port % 4) * 8) | val;
  #line 1083 
  mvpp2_write(priv,(unsigned int)((port & 4) + 4108),val);
  #line 1088 
  val = mvpp2_read(priv,(unsigned int)((port & 4) + 4100));
  #line 1089 
  val = (unsigned int)(~ (63 << (port % 4) * 8)) & val;
  #line 1090 
  val = (unsigned int)(offset << (port % 4) * 8) | val;
  #line 1091 
  mvpp2_write(priv,(unsigned int)((port & 4) + 4100),val);
  #line 1092 
  return;
}

#line 1095  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_prs.c"
static void mvpp2_prs_def_flow_init(struct mvpp2 *priv)
{
  #line 1097 
  struct mvpp2_prs_entry pe;
  #line 1098 
  int port;
  #line 1100 
  port = 0;
  #line 1100 
  while (port <= 3) {
    #line 1101 
    memset((void *)(& pe),0,44UL);
    #line 1102 
    mvpp2_prs_tcam_lu_set(& pe,9U);
    #line 1103 
    pe.index = (unsigned int)(234 - port);
    #line 1106 
    mvpp2_prs_tcam_port_map_set(& pe,0U);
    #line 1109 
    mvpp2_prs_sram_ai_update(& pe,(unsigned int)port,63U);
    #line 1110 
    mvpp2_prs_sram_bits_set(& pe,110,1U);
    #line 1113 
    mvpp2_prs_shadow_set(priv,(int)pe.index,9);
    #line 1114 
    mvpp2_prs_hw_write(priv,& pe);
    #line 1100 
    port ++;
  }
  #line 1116 
  return;
}

#line 1119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_prs.c"
static void mvpp2_prs_mh_init(struct mvpp2 *priv)
{
  #line 1121 
  struct mvpp2_prs_entry pe;
  #line 1123 
  memset((void *)(& pe),0,44UL);
  #line 1125 
  pe.index = 243U;
  #line 1126 
  mvpp2_prs_tcam_lu_set(& pe,0U);
  #line 1127 
  mvpp2_prs_sram_shift_set(& pe,2,1U);
  #line 1129 
  mvpp2_prs_sram_next_lu_set(& pe,1U);
  #line 1132 
  mvpp2_prs_tcam_port_map_set(& pe,255U);
  #line 1135 
  mvpp2_prs_shadow_set(priv,(int)pe.index,0);
  #line 1136 
  mvpp2_prs_hw_write(priv,& pe);
  #line 1137 
  return;
}

#line 1142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_prs.c"
static void mvpp2_prs_mac_init(struct mvpp2 *priv)
{
  #line 1144 
  struct mvpp2_prs_entry pe;
  #line 1146 
  memset((void *)(& pe),0,44UL);
  #line 1149 
  pe.index = 255U;
  #line 1150 
  mvpp2_prs_tcam_lu_set(& pe,1U);
  #line 1152 
  mvpp2_prs_sram_ri_update(& pe,2147483648U,2147483648U);
  #line 1154 
  mvpp2_prs_sram_bits_set(& pe,111,1U);
  #line 1155 
  mvpp2_prs_sram_next_lu_set(& pe,9U);
  #line 1158 
  mvpp2_prs_tcam_port_map_set(& pe,255U);
  #line 1161 
  mvpp2_prs_shadow_set(priv,(int)pe.index,1);
  #line 1162 
  mvpp2_prs_hw_write(priv,& pe);
  #line 1165 
  mvpp2_prs_mac_drop_all_set(priv,0,(_Bool)0);
  #line 1166 
  mvpp2_prs_mac_promisc_set(priv,0,(enum mvpp2_prs_l2_cast)MVPP2_PRS_L2_UNI_CAST,(_Bool)0);
  #line 1167 
  mvpp2_prs_mac_promisc_set(priv,0,(enum mvpp2_prs_l2_cast)MVPP2_PRS_L2_MULTI_CAST,(_Bool)0);
  #line 1168 
  return;
}

#line 1171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_prs.c"
static void mvpp2_prs_dsa_init(struct mvpp2 *priv)
{
  #line 1173 
  struct mvpp2_prs_entry pe;
  #line 1176 
  mvpp2_prs_dsa_tag_set(priv,0,(_Bool)0,(_Bool)0,(_Bool)1);
  #line 1180 
  mvpp2_prs_dsa_tag_set(priv,0,(_Bool)0,(_Bool)1,(_Bool)1);
  #line 1183 
  mvpp2_prs_dsa_tag_set(priv,0,(_Bool)0,(_Bool)0,(_Bool)0);
  #line 1187 
  mvpp2_prs_dsa_tag_set(priv,0,(_Bool)0,(_Bool)1,(_Bool)0);
  #line 1190 
  mvpp2_prs_dsa_tag_ethertype_set(priv,0,(_Bool)0,(_Bool)0,(_Bool)1);
  #line 1194 
  mvpp2_prs_dsa_tag_ethertype_set(priv,0,(_Bool)0,(_Bool)1,(_Bool)1);
  #line 1198 
  mvpp2_prs_dsa_tag_ethertype_set(priv,0,(_Bool)1,(_Bool)0,(_Bool)0);
  #line 1202 
  mvpp2_prs_dsa_tag_ethertype_set(priv,0,(_Bool)1,(_Bool)1,(_Bool)0);
  #line 1206 
  memset((void *)(& pe),0,44UL);
  #line 1207 
  mvpp2_prs_tcam_lu_set(& pe,2U);
  #line 1208 
  pe.index = 244U;
  #line 1209 
  mvpp2_prs_sram_next_lu_set(& pe,3U);
  #line 1212 
  mvpp2_prs_sram_shift_set(& pe,0,1U);
  #line 1213 
  mvpp2_prs_shadow_set(priv,(int)pe.index,1);
  #line 1216 
  mvpp2_prs_sram_ai_update(& pe,0U,255U);
  #line 1219 
  mvpp2_prs_tcam_port_map_set(& pe,255U);
  #line 1221 
  mvpp2_prs_hw_write(priv,& pe);
  #line 1222 
  return;
}

#line 1225  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_prs.c"
static void mvpp2_prs_vid_init(struct mvpp2 *priv)
{
  #line 1227 
  struct mvpp2_prs_entry pe;
  #line 1229 
  memset((void *)(& pe),0,44UL);
  #line 1232 
  pe.index = 248U;
  #line 1233 
  mvpp2_prs_tcam_lu_set(& pe,4U);
  #line 1235 
  mvpp2_prs_tcam_ai_update(& pe,0U,1U);
  #line 1238 
  mvpp2_prs_sram_shift_set(& pe,4,1U);
  #line 1242 
  mvpp2_prs_sram_ai_update(& pe,0U,255U);
  #line 1244 
  mvpp2_prs_sram_next_lu_set(& pe,5U);
  #line 1247 
  mvpp2_prs_tcam_port_map_set(& pe,255U);
  #line 1250 
  mvpp2_prs_shadow_set(priv,(int)pe.index,4);
  #line 1251 
  mvpp2_prs_hw_write(priv,& pe);
  #line 1254 
  memset((void *)(& pe),0,44UL);
  #line 1257 
  pe.index = 249U;
  #line 1258 
  mvpp2_prs_tcam_lu_set(& pe,4U);
  #line 1260 
  mvpp2_prs_tcam_ai_update(& pe,1U,1U);
  #line 1264 
  mvpp2_prs_sram_shift_set(& pe,8,1U);
  #line 1268 
  mvpp2_prs_sram_ai_update(& pe,0U,255U);
  #line 1270 
  mvpp2_prs_sram_next_lu_set(& pe,5U);
  #line 1273 
  mvpp2_prs_tcam_port_map_set(& pe,255U);
  #line 1276 
  mvpp2_prs_shadow_set(priv,(int)pe.index,4);
  #line 1277 
  mvpp2_prs_hw_write(priv,& pe);
  #line 1278 
  return;
}

#line 1281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_prs.c"
static int mvpp2_prs_etype_init(struct mvpp2 *priv)
{
  #line 1283 
  struct mvpp2_prs_entry pe;
  #line 1284 
  int tid;
  #line 1287 
  tid = mvpp2_prs_tcam_first_free(priv,(unsigned char)1,(unsigned char)112);
  #line 1289 
  if (tid < 0) 
               #line 1290 
               return tid;
  #line 1292 
  memset((void *)(& pe),0,44UL);
  #line 1293 
  mvpp2_prs_tcam_lu_set(& pe,5U);
  #line 1294 
  pe.index = (unsigned int)tid;
  #line 1296 
  mvpp2_prs_match_etype(& pe,0,(unsigned short)34916);
  #line 1298 
  mvpp2_prs_sram_shift_set(& pe,8,1U);
  #line 1300 
  mvpp2_prs_sram_next_lu_set(& pe,6U);
  #line 1301 
  mvpp2_prs_sram_ri_update(& pe,2048U,2048U);
  #line 1305 
  mvpp2_prs_shadow_set(priv,(int)pe.index,5);
  #line 1306 
  (priv->prs_shadow + (unsigned long)pe.index)->udf = 2;
  #line 1307 
  (priv->prs_shadow + (unsigned long)pe.index)->finish = (_Bool)0;
  #line 1308 
  mvpp2_prs_shadow_ri_set(priv,(int)pe.index,2048U,2048U);
  #line 1310 
  mvpp2_prs_hw_write(priv,& pe);
  #line 1313 
  tid = mvpp2_prs_tcam_first_free(priv,(unsigned char)1,(unsigned char)112);
  #line 1315 
  if (tid < 0) 
               #line 1316 
               return tid;
  #line 1318 
  memset((void *)(& pe),0,44UL);
  #line 1319 
  mvpp2_prs_tcam_lu_set(& pe,5U);
  #line 1320 
  pe.index = (unsigned int)tid;
  #line 1322 
  mvpp2_prs_match_etype(& pe,0,(unsigned short)2054);
  #line 1325 
  mvpp2_prs_sram_next_lu_set(& pe,9U);
  #line 1326 
  mvpp2_prs_sram_bits_set(& pe,111,1U);
  #line 1327 
  mvpp2_prs_sram_ri_update(& pe,24576U,28672U);
  #line 1330 
  mvpp2_prs_sram_offset_set(& pe,1U,2,0U);
  #line 1335 
  mvpp2_prs_shadow_set(priv,(int)pe.index,5);
  #line 1336 
  (priv->prs_shadow + (unsigned long)pe.index)->udf = 2;
  #line 1337 
  (priv->prs_shadow + (unsigned long)pe.index)->finish = (_Bool)1;
  #line 1338 
  mvpp2_prs_shadow_ri_set(priv,(int)pe.index,24576U,28672U);
  #line 1340 
  mvpp2_prs_hw_write(priv,& pe);
  #line 1343 
  tid = mvpp2_prs_tcam_first_free(priv,(unsigned char)1,(unsigned char)112);
  #line 1345 
  if (tid < 0) 
               #line 1346 
               return tid;
  #line 1348 
  memset((void *)(& pe),0,44UL);
  #line 1349 
  mvpp2_prs_tcam_lu_set(& pe,5U);
  #line 1350 
  pe.index = (unsigned int)tid;
  #line 1352 
  mvpp2_prs_match_etype(& pe,0,(unsigned short)65530);
  #line 1355 
  mvpp2_prs_sram_next_lu_set(& pe,9U);
  #line 1356 
  mvpp2_prs_sram_bits_set(& pe,111,1U);
  #line 1357 
  mvpp2_prs_sram_ri_update(& pe,2097168U,3145840U);
  #line 1362 
  mvpp2_prs_sram_offset_set(& pe,1U,2,0U);
  #line 1367 
  mvpp2_prs_shadow_set(priv,(int)pe.index,5);
  #line 1368 
  (priv->prs_shadow + (unsigned long)pe.index)->udf = 2;
  #line 1369 
  (priv->prs_shadow + (unsigned long)pe.index)->finish = (_Bool)1;
  #line 1370 
  mvpp2_prs_shadow_ri_set(priv,(int)pe.index,2097168U,3145840U);
  #line 1374 
  mvpp2_prs_hw_write(priv,& pe);
  #line 1377 
  tid = mvpp2_prs_tcam_first_free(priv,(unsigned char)1,(unsigned char)112);
  #line 1379 
  if (tid < 0) 
               #line 1380 
               return tid;
  #line 1382 
  memset((void *)(& pe),0,44UL);
  #line 1383 
  mvpp2_prs_tcam_lu_set(& pe,5U);
  #line 1384 
  pe.index = (unsigned int)tid;
  #line 1386 
  mvpp2_prs_match_etype(& pe,0,(unsigned short)2048);
  #line 1387 
  mvpp2_prs_tcam_data_byte_set(& pe,2U,(unsigned char)69,(unsigned char)255);
  #line 1392 
  mvpp2_prs_sram_next_lu_set(& pe,7U);
  #line 1393 
  mvpp2_prs_sram_ri_update(& pe,4096U,28672U);
  #line 1396 
  mvpp2_prs_sram_shift_set(& pe,6,1U);
  #line 1399 
  mvpp2_prs_sram_offset_set(& pe,1U,2,0U);
  #line 1404 
  mvpp2_prs_shadow_set(priv,(int)pe.index,5);
  #line 1405 
  (priv->prs_shadow + (unsigned long)pe.index)->udf = 2;
  #line 1406 
  (priv->prs_shadow + (unsigned long)pe.index)->finish = (_Bool)0;
  #line 1407 
  mvpp2_prs_shadow_ri_set(priv,(int)pe.index,4096U,28672U);
  #line 1409 
  mvpp2_prs_hw_write(priv,& pe);
  #line 1412 
  tid = mvpp2_prs_tcam_first_free(priv,(unsigned char)1,(unsigned char)112);
  #line 1414 
  if (tid < 0) 
               #line 1415 
               return tid;
  #line 1417 
  pe.index = (unsigned int)tid;
  #line 1419 
  mvpp2_prs_tcam_data_byte_set(& pe,2U,(unsigned char)64,(unsigned char)240);
  #line 1424 
  pe.sram[0] = 0U;
  #line 1425 
  pe.sram[1] = 0U;
  #line 1426 
  mvpp2_prs_sram_ri_update(& pe,8192U,28672U);
  #line 1430 
  mvpp2_prs_shadow_set(priv,(int)pe.index,5);
  #line 1431 
  (priv->prs_shadow + (unsigned long)pe.index)->udf = 2;
  #line 1432 
  (priv->prs_shadow + (unsigned long)pe.index)->finish = (_Bool)0;
  #line 1433 
  mvpp2_prs_shadow_ri_set(priv,(int)pe.index,8192U,28672U);
  #line 1435 
  mvpp2_prs_hw_write(priv,& pe);
  #line 1438 
  tid = mvpp2_prs_tcam_first_free(priv,(unsigned char)1,(unsigned char)112);
  #line 1440 
  if (tid < 0) 
               #line 1441 
               return tid;
  #line 1443 
  memset((void *)(& pe),0,44UL);
  #line 1444 
  mvpp2_prs_tcam_lu_set(& pe,5U);
  #line 1445 
  pe.index = (unsigned int)tid;
  #line 1447 
  mvpp2_prs_match_etype(& pe,0,(unsigned short)34525);
  #line 1450 
  mvpp2_prs_sram_shift_set(& pe,26,1U);
  #line 1453 
  mvpp2_prs_sram_next_lu_set(& pe,8U);
  #line 1454 
  mvpp2_prs_sram_ri_update(& pe,16384U,28672U);
  #line 1457 
  mvpp2_prs_sram_offset_set(& pe,1U,2,0U);
  #line 1461 
  mvpp2_prs_shadow_set(priv,(int)pe.index,5);
  #line 1462 
  (priv->prs_shadow + (unsigned long)pe.index)->udf = 2;
  #line 1463 
  (priv->prs_shadow + (unsigned long)pe.index)->finish = (_Bool)0;
  #line 1464 
  mvpp2_prs_shadow_ri_set(priv,(int)pe.index,16384U,28672U);
  #line 1466 
  mvpp2_prs_hw_write(priv,& pe);
  #line 1469 
  memset((void *)(& pe),0,44UL);
  #line 1470 
  mvpp2_prs_tcam_lu_set(& pe,5U);
  #line 1471 
  pe.index = 247U;
  #line 1474 
  mvpp2_prs_tcam_port_map_set(& pe,255U);
  #line 1477 
  mvpp2_prs_sram_bits_set(& pe,111,1U);
  #line 1478 
  mvpp2_prs_sram_next_lu_set(& pe,9U);
  #line 1479 
  mvpp2_prs_sram_ri_update(& pe,0U,28672U);
  #line 1482 
  mvpp2_prs_sram_offset_set(& pe,1U,2,0U);
  #line 1487 
  mvpp2_prs_shadow_set(priv,(int)pe.index,5);
  #line 1488 
  (priv->prs_shadow + (unsigned long)pe.index)->udf = 2;
  #line 1489 
  (priv->prs_shadow + (unsigned long)pe.index)->finish = (_Bool)1;
  #line 1490 
  mvpp2_prs_shadow_ri_set(priv,(int)pe.index,0U,28672U);
  #line 1492 
  mvpp2_prs_hw_write(priv,& pe);
  #line 1494 
  return 0;
}

#line 1504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_prs.c"
static int mvpp2_prs_vlan_init(struct platform_device *pdev, struct mvpp2 *priv)
{
  #line 1506 
  struct mvpp2_prs_entry pe;
  #line 1507 
  int err;
  #line 1509 
  priv->prs_double_vlans = (bool *)cif_devm_kcalloc(& pdev->dev,1UL,100UL,3264U);
  #line 1512 
  if (priv->prs_double_vlans == (bool *)0) 
                                           #line 1513 
                                           return -12;
  #line 1516 
  err = mvpp2_prs_double_vlan_add(priv,(unsigned short)33024,(unsigned short)34984,255U);
  #line 1518 
  if (err != 0) 
                #line 1519 
                return err;
  #line 1522 
  err = mvpp2_prs_double_vlan_add(priv,(unsigned short)33024,(unsigned short)33024,255U);
  #line 1524 
  if (err != 0) 
                #line 1525 
                return err;
  #line 1528 
  err = mvpp2_prs_vlan_add(priv,(unsigned short)34984,0,255U);
  #line 1530 
  if (err != 0) 
                #line 1531 
                return err;
  #line 1534 
  err = mvpp2_prs_vlan_add(priv,(unsigned short)33024,0,255U);
  #line 1536 
  if (err != 0) 
                #line 1537 
                return err;
  #line 1540 
  memset((void *)(& pe),0,44UL);
  #line 1541 
  mvpp2_prs_tcam_lu_set(& pe,3U);
  #line 1542 
  pe.index = 250U;
  #line 1544 
  mvpp2_prs_sram_next_lu_set(& pe,4U);
  #line 1547 
  mvpp2_prs_sram_ai_update(& pe,0U,255U);
  #line 1548 
  mvpp2_prs_sram_ri_update(& pe,8U,12U);
  #line 1551 
  mvpp2_prs_tcam_ai_update(& pe,128U,128U);
  #line 1554 
  mvpp2_prs_tcam_port_map_set(& pe,255U);
  #line 1557 
  mvpp2_prs_shadow_set(priv,(int)pe.index,3);
  #line 1558 
  mvpp2_prs_hw_write(priv,& pe);
  #line 1561 
  memset((void *)(& pe),0,44UL);
  #line 1562 
  mvpp2_prs_tcam_lu_set(& pe,3U);
  #line 1563 
  pe.index = 251U;
  #line 1565 
  mvpp2_prs_sram_next_lu_set(& pe,5U);
  #line 1566 
  mvpp2_prs_sram_ri_update(& pe,0U,12U);
  #line 1570 
  mvpp2_prs_tcam_port_map_set(& pe,255U);
  #line 1573 
  mvpp2_prs_shadow_set(priv,(int)pe.index,3);
  #line 1574 
  mvpp2_prs_hw_write(priv,& pe);
  #line 1576 
  return 0;
}

#line 1580  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_prs.c"
static int mvpp2_prs_pppoe_init(struct mvpp2 *priv)
{
  #line 1582 
  struct mvpp2_prs_entry pe;
  #line 1583 
  int tid;
  #line 1586 
  tid = mvpp2_prs_tcam_first_free(priv,(unsigned char)1,(unsigned char)112);
  #line 1588 
  if (tid < 0) 
               #line 1589 
               return tid;
  #line 1591 
  memset((void *)(& pe),0,44UL);
  #line 1592 
  mvpp2_prs_tcam_lu_set(& pe,6U);
  #line 1593 
  pe.index = (unsigned int)tid;
  #line 1595 
  mvpp2_prs_match_etype(& pe,0,(unsigned short)33);
  #line 1597 
  mvpp2_prs_sram_next_lu_set(& pe,7U);
  #line 1598 
  mvpp2_prs_sram_ri_update(& pe,8192U,28672U);
  #line 1601 
  mvpp2_prs_sram_shift_set(& pe,6,1U);
  #line 1604 
  mvpp2_prs_sram_offset_set(& pe,1U,2,0U);
  #line 1609 
  mvpp2_prs_shadow_set(priv,(int)pe.index,6);
  #line 1610 
  mvpp2_prs_hw_write(priv,& pe);
  #line 1613 
  tid = mvpp2_prs_tcam_first_free(priv,(unsigned char)1,(unsigned char)112);
  #line 1615 
  if (tid < 0) 
               #line 1616 
               return tid;
  #line 1618 
  pe.index = (unsigned int)tid;
  #line 1620 
  mvpp2_prs_tcam_data_byte_set(& pe,2U,(unsigned char)69,(unsigned char)255);
  #line 1626 
  pe.sram[0] = 0U;
  #line 1627 
  pe.sram[1] = 0U;
  #line 1628 
  mvpp2_prs_sram_ri_update(& pe,4096U,28672U);
  #line 1632 
  mvpp2_prs_shadow_set(priv,(int)pe.index,6);
  #line 1633 
  mvpp2_prs_hw_write(priv,& pe);
  #line 1636 
  tid = mvpp2_prs_tcam_first_free(priv,(unsigned char)1,(unsigned char)112);
  #line 1638 
  if (tid < 0) 
               #line 1639 
               return tid;
  #line 1641 
  memset((void *)(& pe),0,44UL);
  #line 1642 
  mvpp2_prs_tcam_lu_set(& pe,6U);
  #line 1643 
  pe.index = (unsigned int)tid;
  #line 1645 
  mvpp2_prs_match_etype(& pe,0,(unsigned short)87);
  #line 1647 
  mvpp2_prs_sram_next_lu_set(& pe,8U);
  #line 1648 
  mvpp2_prs_sram_ri_update(& pe,16384U,28672U);
  #line 1651 
  mvpp2_prs_sram_shift_set(& pe,6,1U);
  #line 1654 
  mvpp2_prs_sram_offset_set(& pe,1U,2,0U);
  #line 1659 
  mvpp2_prs_shadow_set(priv,(int)pe.index,6);
  #line 1660 
  mvpp2_prs_hw_write(priv,& pe);
  #line 1663 
  tid = mvpp2_prs_tcam_first_free(priv,(unsigned char)1,(unsigned char)112);
  #line 1665 
  if (tid < 0) 
               #line 1666 
               return tid;
  #line 1668 
  memset((void *)(& pe),0,44UL);
  #line 1669 
  mvpp2_prs_tcam_lu_set(& pe,6U);
  #line 1670 
  pe.index = (unsigned int)tid;
  #line 1672 
  mvpp2_prs_sram_ri_update(& pe,0U,28672U);
  #line 1676 
  mvpp2_prs_sram_next_lu_set(& pe,9U);
  #line 1677 
  mvpp2_prs_sram_bits_set(& pe,111,1U);
  #line 1679 
  mvpp2_prs_sram_offset_set(& pe,1U,2,0U);
  #line 1684 
  mvpp2_prs_shadow_set(priv,(int)pe.index,6);
  #line 1685 
  mvpp2_prs_hw_write(priv,& pe);
  #line 1687 
  return 0;
}

#line 1691  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_prs.c"
static int mvpp2_prs_ip4_init(struct mvpp2 *priv)
{
  #line 1693 
  struct mvpp2_prs_entry pe;
  #line 1694 
  int err;
  #line 1697 
  err = mvpp2_prs_ip4_proto(priv,(unsigned short)6,4194304U,29360128U);
  #line 1699 
  if (err != 0) 
                #line 1700 
                return err;
  #line 1702 
  err = mvpp2_prs_ip4_proto(priv,(unsigned short)17,8388608U,29360128U);
  #line 1704 
  if (err != 0) 
                #line 1705 
                return err;
  #line 1707 
  err = mvpp2_prs_ip4_proto(priv,(unsigned short)2,2097168U,3145840U);
  #line 1712 
  if (err != 0) 
                #line 1713 
                return err;
  #line 1716 
  err = mvpp2_prs_ip4_cast(priv,(unsigned short)2);
  #line 1717 
  if (err != 0) 
                #line 1718 
                return err;
  #line 1721 
  err = mvpp2_prs_ip4_cast(priv,(unsigned short)1);
  #line 1722 
  if (err != 0) 
                #line 1723 
                return err;
  #line 1726 
  memset((void *)(& pe),0,44UL);
  #line 1727 
  mvpp2_prs_tcam_lu_set(& pe,7U);
  #line 1728 
  pe.index = 246U;
  #line 1731 
  mvpp2_prs_sram_next_lu_set(& pe,7U);
  #line 1732 
  mvpp2_prs_sram_shift_set(& pe,12,1U);
  #line 1734 
  mvpp2_prs_sram_offset_set(& pe,4U,16,0U);
  #line 1737 
  mvpp2_prs_sram_ai_update(& pe,1U,1U);
  #line 1739 
  mvpp2_prs_sram_ri_update(& pe,12582912U,29360128U);
  #line 1742 
  mvpp2_prs_tcam_ai_update(& pe,0U,1U);
  #line 1744 
  mvpp2_prs_tcam_port_map_set(& pe,255U);
  #line 1747 
  mvpp2_prs_shadow_set(priv,(int)pe.index,7);
  #line 1748 
  mvpp2_prs_hw_write(priv,& pe);
  #line 1751 
  memset((void *)(& pe),0,44UL);
  #line 1752 
  mvpp2_prs_tcam_lu_set(& pe,7U);
  #line 1753 
  pe.index = 228U;
  #line 1756 
  mvpp2_prs_sram_next_lu_set(& pe,9U);
  #line 1757 
  mvpp2_prs_sram_bits_set(& pe,111,1U);
  #line 1758 
  mvpp2_prs_sram_ri_update(& pe,0U,98304U);
  #line 1761 
  mvpp2_prs_tcam_ai_update(& pe,1U,1U);
  #line 1764 
  mvpp2_prs_tcam_port_map_set(& pe,255U);
  #line 1767 
  mvpp2_prs_shadow_set(priv,(int)pe.index,7);
  #line 1768 
  mvpp2_prs_hw_write(priv,& pe);
  #line 1770 
  return 0;
}

#line 1774  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_prs.c"
static int mvpp2_prs_ip6_init(struct mvpp2 *priv)
{
  #line 1776 
  struct mvpp2_prs_entry pe;
  #line 1777 
  int tid;
  #line 1777 
  int err;
  #line 1780 
  err = mvpp2_prs_ip6_proto(priv,(unsigned short)6,4194304U,29360128U);
  #line 1783 
  if (err != 0) 
                #line 1784 
                return err;
  #line 1786 
  err = mvpp2_prs_ip6_proto(priv,(unsigned short)17,8388608U,29360128U);
  #line 1789 
  if (err != 0) 
                #line 1790 
                return err;
  #line 1792 
  err = mvpp2_prs_ip6_proto(priv,(unsigned short)58,2097168U,3145840U);
  #line 1797 
  if (err != 0) 
                #line 1798 
                return err;
  #line 1802 
  err = mvpp2_prs_ip6_proto(priv,(unsigned short)4,536870912U,1610612736U);
  #line 1805 
  if (err != 0) 
                #line 1806 
                return err;
  #line 1809 
  err = mvpp2_prs_ip6_cast(priv,(unsigned short)1);
  #line 1810 
  if (err != 0) 
                #line 1811 
                return err;
  #line 1814 
  tid = mvpp2_prs_tcam_first_free(priv,(unsigned char)1,(unsigned char)112);
  #line 1816 
  if (tid < 0) 
               #line 1817 
               return tid;
  #line 1819 
  memset((void *)(& pe),0,44UL);
  #line 1820 
  mvpp2_prs_tcam_lu_set(& pe,8U);
  #line 1821 
  pe.index = (unsigned int)tid;
  #line 1824 
  mvpp2_prs_sram_next_lu_set(& pe,9U);
  #line 1825 
  mvpp2_prs_sram_bits_set(& pe,111,1U);
  #line 1826 
  mvpp2_prs_sram_ri_update(& pe,2147483648U,2147512320U);
  #line 1831 
  mvpp2_prs_tcam_data_byte_set(& pe,1U,(unsigned char)0,(unsigned char)255);
  #line 1832 
  mvpp2_prs_tcam_ai_update(& pe,1U,1U);
  #line 1836 
  mvpp2_prs_shadow_set(priv,(int)pe.index,7);
  #line 1837 
  mvpp2_prs_hw_write(priv,& pe);
  #line 1840 
  memset((void *)(& pe),0,44UL);
  #line 1841 
  mvpp2_prs_tcam_lu_set(& pe,8U);
  #line 1842 
  pe.index = 245U;
  #line 1845 
  mvpp2_prs_sram_next_lu_set(& pe,9U);
  #line 1846 
  mvpp2_prs_sram_bits_set(& pe,111,1U);
  #line 1847 
  mvpp2_prs_sram_ri_update(& pe,12582912U,29360128U);
  #line 1850 
  mvpp2_prs_sram_offset_set(& pe,4U,36,0U);
  #line 1854 
  mvpp2_prs_tcam_ai_update(& pe,1U,1U);
  #line 1857 
  mvpp2_prs_tcam_port_map_set(& pe,255U);
  #line 1860 
  mvpp2_prs_shadow_set(priv,(int)pe.index,7);
  #line 1861 
  mvpp2_prs_hw_write(priv,& pe);
  #line 1864 
  memset((void *)(& pe),0,44UL);
  #line 1865 
  mvpp2_prs_tcam_lu_set(& pe,8U);
  #line 1866 
  pe.index = 226U;
  #line 1869 
  mvpp2_prs_sram_next_lu_set(& pe,9U);
  #line 1870 
  mvpp2_prs_sram_bits_set(& pe,111,1U);
  #line 1871 
  mvpp2_prs_sram_ri_update(& pe,12582912U,29360128U);
  #line 1874 
  mvpp2_prs_tcam_ai_update(& pe,2U,2U);
  #line 1877 
  mvpp2_prs_tcam_port_map_set(& pe,255U);
  #line 1880 
  mvpp2_prs_shadow_set(priv,(int)pe.index,7);
  #line 1881 
  mvpp2_prs_hw_write(priv,& pe);
  #line 1884 
  memset((void *)(& pe),0,44UL);
  #line 1885 
  mvpp2_prs_tcam_lu_set(& pe,8U);
  #line 1886 
  pe.index = 227U;
  #line 1889 
  mvpp2_prs_sram_next_lu_set(& pe,8U);
  #line 1890 
  mvpp2_prs_sram_ri_update(& pe,0U,98304U);
  #line 1892 
  mvpp2_prs_sram_ai_update(& pe,1U,1U);
  #line 1895 
  mvpp2_prs_sram_shift_set(& pe,-18,1U);
  #line 1897 
  mvpp2_prs_tcam_ai_update(& pe,0U,1U);
  #line 1899 
  mvpp2_prs_tcam_port_map_set(& pe,255U);
  #line 1902 
  mvpp2_prs_shadow_set(priv,(int)pe.index,8);
  #line 1903 
  mvpp2_prs_hw_write(priv,& pe);
  #line 1905 
  return 0;
}

#line 1909  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_prs.c"
static int mvpp2_prs_vid_range_find(struct mvpp2_port *port, u16 vid, u16 mask)
{
  #line 1911 
  unsigned char byte[2U];
  #line 1911 
  unsigned char enable[2U];
  #line 1912 
  struct mvpp2_prs_entry pe;
  #line 1913 
  u16 rvid;
  #line 1913 
  u16 rmask;
  #line 1914 
  int tid;
  #line 1917 
  tid = (int)port->id * 11 + 193;
  #line 1917 
  while ((int)port->id * 11 + 202 >= tid) {
    #line 1919 
    if (! ((port->priv)->prs_shadow + (unsigned long)tid)->valid || ((port->priv)->prs_shadow + (unsigned long)tid)->lu != 4) 
      #line 1921 
      goto __Cont;
    #line 1923 
    mvpp2_prs_init_from_hw(port->priv,& pe,tid);
    #line 1925 
    mvpp2_prs_tcam_data_byte_get(& pe,2U,byte,enable);
    #line 1926 
    mvpp2_prs_tcam_data_byte_get(& pe,3U,& byte[1],& enable[1]);
    #line 1928 
    rvid = (unsigned short)(((unsigned int)((unsigned short)((int)byte[0] << 8)) & 3840U) + (unsigned int)((unsigned short)byte[1]));
    #line 1929 
    rmask = (unsigned short)(((unsigned int)((unsigned short)((int)enable[0] << 8)) & 3840U) + (unsigned int)((unsigned short)enable[1]));
    #line 1931 
    if ((int)rvid != (int)vid || (int)rmask != (int)mask) 
                                                          #line 1932 
                                                          goto __Cont;
    #line 1934 
    return tid;
    #line 1917 
    __Cont: 
            #line 1918 
    tid ++;
  }
  #line 1937 
  return -2;
}

#line 1941  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_prs.c"
int mvpp2_prs_vid_entry_add(struct mvpp2_port *port, u16 vid)
{
  #line 1945 
  unsigned int reg_val;
  #line 1945 
  unsigned int shift;
  #line 1947 
  struct mvpp2_prs_entry pe;
  #line 1948 
  int tid;
  #line 1943 
  unsigned int vid_start = (unsigned int)((int)port->id * 11 + 193);
  #line 1945 
  unsigned int mask = 4095U;
  #line 1946 
  struct mvpp2 *priv = port->priv;
  #line 1950 
  memset((void *)(& pe),0,44UL);
  #line 1953 
  tid = mvpp2_prs_vid_range_find(port,(unsigned short)((int)vid),(unsigned short)((int)((unsigned short)mask)));
  #line 1955 
  reg_val = mvpp2_read(priv,(unsigned int)(((int)port->id + 5136) * 4));
  #line 1956 
  if (((unsigned long)reg_val & 32UL) != 0UL) 
                                              #line 1957 
                                              shift = 8U; else 
                                                               #line 1959 
                                                               shift = 4U;
  #line 1962 
  if (tid < 0) {
    #line 1965 
    tid = mvpp2_prs_tcam_first_free(priv,(unsigned char)((int)((unsigned char)vid_start)),(unsigned char)((int)((unsigned int)((unsigned char)vid_start) + 9U)));
    #line 1970 
    if (tid < 0) 
                 #line 1971 
                 return tid;
    #line 1973 
    mvpp2_prs_tcam_lu_set(& pe,4U);
    #line 1974 
    pe.index = (unsigned int)tid;
    #line 1977 
    mvpp2_prs_tcam_port_map_set(& pe,0U);
  }
  else 
       #line 1979 
       mvpp2_prs_init_from_hw(priv,& pe,tid);
  #line 1983 
  mvpp2_prs_tcam_port_set(& pe,(unsigned int)port->id,(_Bool)1);
  #line 1986 
  mvpp2_prs_sram_next_lu_set(& pe,5U);
  #line 1989 
  mvpp2_prs_sram_shift_set(& pe,(int)shift,1U);
  #line 1992 
  mvpp2_prs_match_vid(& pe,2,(unsigned short)((int)vid));
  #line 1995 
  mvpp2_prs_sram_ai_update(& pe,0U,255U);
  #line 1998 
  mvpp2_prs_shadow_set(priv,(int)pe.index,4);
  #line 1999 
  mvpp2_prs_hw_write(priv,& pe);
  #line 2001 
  return 0;
}

#line 2005  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_prs.c"
void mvpp2_prs_vid_entry_remove(struct mvpp2_port *port, u16 vid)
{
  #line 2008 
  int tid;
  #line 2007 
  struct mvpp2 *priv = port->priv;
  #line 2011 
  tid = mvpp2_prs_vid_range_find(port,(unsigned short)((int)vid),(unsigned short)4095);
  #line 2014 
  if (tid < 0) 
               #line 2015 
               return;
  #line 2017 
  mvpp2_prs_hw_inv(priv,tid);
  #line 2018 
  (priv->prs_shadow + (unsigned long)tid)->valid = (_Bool)0;
  #line 2019 
  return;
}

#line 2022  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_prs.c"
void mvpp2_prs_vid_remove_all(struct mvpp2_port *port)
{
  #line 2025 
  int tid;
  #line 2024 
  struct mvpp2 *priv = port->priv;
  #line 2027 
  tid = (int)port->id * 11 + 193;
  #line 2027 
  while ((int)port->id * 11 + 202 >= tid) {
    #line 2029 
    if ((int)(priv->prs_shadow + (unsigned long)tid)->valid != 0) {
      #line 2030 
      mvpp2_prs_hw_inv(priv,tid);
      #line 2031 
      (priv->prs_shadow + (unsigned long)tid)->valid = (_Bool)0;
    }
    #line 2028 
    tid ++;
  }
  #line 2033 
  return;
}

#line 2037  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_prs.c"
void mvpp2_prs_vid_disable_filtering(struct mvpp2_port *port)
{
  #line 2039 
  unsigned int tid = (unsigned int)((int)port->id * 11 + 203);
  #line 2040 
  struct mvpp2 *priv = port->priv;
  #line 2043 
  mvpp2_prs_hw_inv(priv,(int)tid);
  #line 2045 
  (priv->prs_shadow + (unsigned long)tid)->valid = (_Bool)0;
  #line 2046 
  return;
}

#line 2049  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_prs.c"
void mvpp2_prs_vid_enable_filtering(struct mvpp2_port *port)
{
  #line 2053 
  unsigned int reg_val;
  #line 2053 
  unsigned int shift;
  #line 2054 
  struct mvpp2_prs_entry pe;
  #line 2051 
  unsigned int tid = (unsigned int)((int)port->id * 11 + 203);
  #line 2052 
  struct mvpp2 *priv = port->priv;
  #line 2056 
  if ((int)(priv->prs_shadow + (unsigned long)tid)->valid != 0) 
                                                                #line 2057 
                                                                return;
  #line 2059 
  memset((void *)(& pe),0,44UL);
  #line 2061 
  pe.index = tid;
  #line 2063 
  reg_val = mvpp2_read(priv,(unsigned int)(((int)port->id + 5136) * 4));
  #line 2064 
  if (((unsigned long)reg_val & 32UL) != 0UL) 
                                              #line 2065 
                                              shift = 8U; else 
                                                               #line 2067 
                                                               shift = 4U;
  #line 2069 
  mvpp2_prs_tcam_lu_set(& pe,4U);
  #line 2072 
  mvpp2_prs_tcam_port_map_set(& pe,0U);
  #line 2075 
  mvpp2_prs_tcam_port_set(& pe,(unsigned int)port->id,(_Bool)1);
  #line 2078 
  mvpp2_prs_sram_next_lu_set(& pe,5U);
  #line 2081 
  mvpp2_prs_sram_shift_set(& pe,(int)shift,1U);
  #line 2084 
  mvpp2_prs_sram_ri_update(& pe,2147483648U,2147483648U);
  #line 2088 
  mvpp2_prs_sram_ai_update(& pe,0U,255U);
  #line 2091 
  mvpp2_prs_shadow_set(priv,(int)pe.index,4);
  #line 2092 
  mvpp2_prs_hw_write(priv,& pe);
  #line 2093 
  return;
}

#line 2096  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_prs.c"
int mvpp2_prs_default_init(struct platform_device *pdev, struct mvpp2 *priv)
{
  #line 2098 
  int err;
  #line 2098 
  int index;
  #line 2098 
  int i;
  #line 2101 
  mvpp2_write(priv,4656U,1U);
  #line 2104 
  index = 0;
  #line 2104 
  while (index <= 255) {
    #line 2105 
    mvpp2_write(priv,4352U,(unsigned int)index);
    #line 2106 
    i = 0;
    #line 2106 
    while (i <= 5) {
      #line 2107 
      mvpp2_write(priv,(unsigned int)((i + 1089) * 4),0U);
      #line 2106 
      i ++;
    }
    #line 2109 
    mvpp2_write(priv,4608U,(unsigned int)index);
    #line 2110 
    i = 0;
    #line 2110 
    while (i <= 3) {
      #line 2111 
      mvpp2_write(priv,(unsigned int)((i + 1153) * 4),0U);
      #line 2110 
      i ++;
    }
    #line 2104 
    index ++;
  }
  #line 2115 
  index = 0;
  #line 2115 
  while (index <= 255) {
    #line 2116 
    mvpp2_prs_hw_inv(priv,index);
    #line 2115 
    index ++;
  }
  #line 2118 
  priv->prs_shadow = (struct mvpp2_prs_shadow *)cif_devm_kcalloc(& pdev->dev,256UL,20UL,3264U);
  #line 2121 
  if (priv->prs_shadow == (struct mvpp2_prs_shadow *)0) 
                                                        #line 2122 
                                                        return -12;
  #line 2125 
  index = 0;
  #line 2125 
  while (index <= 3) {
    #line 2126 
    mvpp2_prs_hw_port_init(priv,index,0,15,0);
    #line 2125 
    index ++;
  }
  #line 2129 
  mvpp2_prs_def_flow_init(priv);
  #line 2131 
  mvpp2_prs_mh_init(priv);
  #line 2133 
  mvpp2_prs_mac_init(priv);
  #line 2135 
  mvpp2_prs_dsa_init(priv);
  #line 2137 
  mvpp2_prs_vid_init(priv);
  #line 2139 
  err = mvpp2_prs_etype_init(priv);
  #line 2140 
  if (err != 0) 
                #line 2141 
                return err;
  #line 2143 
  err = mvpp2_prs_vlan_init(pdev,priv);
  #line 2144 
  if (err != 0) 
                #line 2145 
                return err;
  #line 2147 
  err = mvpp2_prs_pppoe_init(priv);
  #line 2148 
  if (err != 0) 
                #line 2149 
                return err;
  #line 2151 
  err = mvpp2_prs_ip6_init(priv);
  #line 2152 
  if (err != 0) 
                #line 2153 
                return err;
  #line 2155 
  err = mvpp2_prs_ip4_init(priv);
  #line 2156 
  if (err != 0) 
                #line 2157 
                return err;
  #line 2159 
  return 0;
}

#line 2163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_prs.c"
static bool mvpp2_prs_mac_range_equals(struct mvpp2_prs_entry *pe, u8 *da, unsigned char *mask)
{
  #line 2166 
  unsigned char tcam_byte;
  #line 2166 
  unsigned char tcam_mask;
  #line 2167 
  int index;
  #line 2169 
  index = 0;
  #line 2169 
  while (index <= 5) {
    #line 2170 
    mvpp2_prs_tcam_data_byte_get(pe,(unsigned int)index,& tcam_byte,& tcam_mask);
    #line 2171 
    if ((int)*(mask + (unsigned long)index) != (int)tcam_mask) 
                                                               #line 2172 
                                                               return (_Bool)0;
    #line 2174 
    if (((int)tcam_mask & (int)tcam_byte) != ((int)*(da + (unsigned long)index) & (int)*(mask + (unsigned long)index))) 
      #line 2175 
      return (_Bool)0;
    #line 2169 
    index ++;
  }
  #line 2178 
  return (_Bool)1;
}

#line 2183  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_prs.c"
static int mvpp2_prs_mac_da_range_find(struct mvpp2 *priv, int pmap, u8 *da, unsigned char *mask, int udf_type)
{
  #line 2186 
  struct mvpp2_prs_entry pe;
  #line 2187 
  int tid;
  #line 2190 
  tid = 113;
  #line 2190 
  while (tid <= 192) {
    {
      #line 2192 
      unsigned int entry_pmap;
      #line 2194 
      if ((! (priv->prs_shadow + (unsigned long)tid)->valid || (priv->prs_shadow + (unsigned long)tid)->lu != 1) || (priv->prs_shadow + (unsigned long)tid)->udf != udf_type) 
        #line 2197 
        goto __Cont;
      #line 2199 
      mvpp2_prs_init_from_hw(priv,& pe,tid);
      #line 2200 
      entry_pmap = mvpp2_prs_tcam_port_map_get(& pe);
      #line 2202 
      if ((int)mvpp2_prs_mac_range_equals(& pe,da,mask) != 0) 
        #line 2202 
        if (entry_pmap == (unsigned int)pmap) 
                                              #line 2204 
                                              return tid;
    }
    #line 2190 
    __Cont: 
            #line 2191 
    tid ++;
  }
  #line 2207 
  return -2;
}

#line 2211  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_prs.c"
int mvpp2_prs_mac_da_accept(struct mvpp2_port *port, u8 *da, bool add)
{
  #line 2215 
  unsigned int pmap;
  #line 2215 
  unsigned int len;
  #line 2215 
  unsigned int ri;
  #line 2216 
  struct mvpp2_prs_entry pe;
  #line 2217 
  int tid;
  #line 2213 
  unsigned char mask[6U] = {(unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U};
  #line 2214 
  struct mvpp2 *priv = port->priv;
  #line 2219 
  memset((void *)(& pe),0,44UL);
  #line 2222 
  tid = mvpp2_prs_mac_da_range_find(priv,(int)(1UL << (int)port->id),da,(unsigned char *)(& mask),0);
  #line 2226 
  if (tid < 0) {
    #line 2227 
    if (! add) 
               #line 2228 
               return 0;
    #line 2232 
    tid = mvpp2_prs_tcam_first_free(priv,(unsigned char)113,(unsigned char)192);
    #line 2235 
    if (tid < 0) 
                 #line 2236 
                 return tid;
    #line 2238 
    pe.index = (unsigned int)tid;
    #line 2241 
    mvpp2_prs_tcam_port_map_set(& pe,0U);
  }
  else 
       #line 2243 
       mvpp2_prs_init_from_hw(priv,& pe,tid);
  #line 2246 
  mvpp2_prs_tcam_lu_set(& pe,1U);
  #line 2249 
  mvpp2_prs_tcam_port_set(& pe,(unsigned int)port->id,(_Bool)((bool)((int)add) != 0));
  #line 2252 
  pmap = mvpp2_prs_tcam_port_map_get(& pe);
  #line 2253 
  if (pmap == 0U) {
    #line 2254 
    if ((int)add != 0) 
                       #line 2255 
                       return -22;
    #line 2257 
    mvpp2_prs_hw_inv(priv,(int)pe.index);
    #line 2258 
    (priv->prs_shadow + (unsigned long)pe.index)->valid = (_Bool)0;
    #line 2259 
    return 0;
  }
  #line 2263 
  mvpp2_prs_sram_next_lu_set(& pe,2U);
  #line 2266 
  len = 6U;
  #line 2267 
  while (1) {
    #line 2267 
    unsigned int tmp;
    #line 2267 
    tmp = len;
    #line 2267 
    len --;
    #line 2267 
    ;
    #line 2267 
    if (! (tmp != 0U)) 
                       #line 2267 
                       break;
    #line 2268 
    mvpp2_prs_tcam_data_byte_set(& pe,len,(unsigned char)((int)*(da + (unsigned long)len)),(unsigned char)255);
  }
  #line 2271 
  if ((int)is_broadcast_ether_addr(da) != 0) 
                                             #line 2272 
                                             ri = 1024U;
  else {
    #line 2273 
    if ((int)is_multicast_ether_addr(da) != 0) 
                                               #line 2274 
                                               ri = 512U;
    else {
      #line 2276 
      ri = 0U;
      #line 2278 
      if ((int)ether_addr_equal(da,(port->dev)->dev_addr) != 0) 
                                                                #line 2279 
                                                                ri |= 1U;
    }
  }
  #line 2282 
  mvpp2_prs_sram_ri_update(& pe,ri,1537U);
  #line 2284 
  mvpp2_prs_shadow_ri_set(priv,(int)pe.index,ri,1537U);
  #line 2288 
  mvpp2_prs_sram_shift_set(& pe,12,1U);
  #line 2292 
  (priv->prs_shadow + (unsigned long)pe.index)->udf = 0;
  #line 2293 
  mvpp2_prs_shadow_set(priv,(int)pe.index,1);
  #line 2294 
  mvpp2_prs_hw_write(priv,& pe);
  #line 2296 
  return 0;
}

#line 2299  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_prs.c"
int mvpp2_prs_update_mac_da(struct net_device *dev, u8 *da)
{
  #line 2302 
  int err;
  #line 2301 
  struct mvpp2_port *port = netdev_priv(dev);
  #line 2305 
  err = mvpp2_prs_mac_da_accept(port,dev->dev_addr,(_Bool)0);
  #line 2306 
  if (err != 0) 
                #line 2307 
                return err;
  #line 2310 
  err = mvpp2_prs_mac_da_accept(port,da,(_Bool)1);
  #line 2311 
  if (err != 0) 
                #line 2312 
                return err;
  #line 2315 
  ether_addr_copy(dev->dev_addr,da);
  #line 2317 
  return 0;
}

#line 2320  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_prs.c"
void mvpp2_prs_mac_del_all(struct mvpp2_port *port)
{
  #line 2323 
  struct mvpp2_prs_entry pe;
  #line 2324 
  unsigned long pmap;
  #line 2325 
  int index;
  #line 2325 
  int tid;
  #line 2322 
  struct mvpp2 *priv = port->priv;
  #line 2327 
  tid = 113;
  #line 2327 
  while (tid <= 192) {
    {
      #line 2329 
      unsigned char da[6U];
      #line 2329 
      unsigned char da_mask[6U];
      #line 2331 
      if ((! (priv->prs_shadow + (unsigned long)tid)->valid || (priv->prs_shadow + (unsigned long)tid)->lu != 1) || (priv->prs_shadow + (unsigned long)tid)->udf != 0) 
        #line 2334 
        goto __Cont;
      #line 2336 
      mvpp2_prs_init_from_hw(priv,& pe,tid);
      #line 2338 
      pmap = (unsigned long)mvpp2_prs_tcam_port_map_get(& pe);
      #line 2341 
      if (! test_bit((long)port->id,& pmap)) 
                                             #line 2342 
                                             goto __Cont;
      #line 2345 
      index = 0;
      #line 2345 
      while (index <= 5) {
        #line 2346 
        mvpp2_prs_tcam_data_byte_get(& pe,(unsigned int)index,& da[index],& da_mask[index]);
        #line 2345 
        index ++;
      }
      #line 2352 
      if ((int)is_broadcast_ether_addr((u8 *)(& da)) != 0) 
                                                           #line 2354 
                                                           goto __Cont;
      else {
        #line 2352 
        if ((int)ether_addr_equal((u8 *)(& da),(port->dev)->dev_addr) != 0) 
          #line 2354 
          goto __Cont;
      }
      #line 2357 
      mvpp2_prs_mac_da_accept(port,(u8 *)(& da),(_Bool)0);
    }
    #line 2327 
    __Cont: 
            #line 2328 
    tid ++;
  }
  #line 2359 
  return;
}

#line 2361  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_prs.c"
int mvpp2_prs_tag_mode_set(struct mvpp2 *priv, int port, int type)
{
  #line 2363 
  switch (type) {
    #line 2364 
    case 3: 
            #line 2364 
    ;
    #line 2366 
    mvpp2_prs_dsa_tag_set(priv,port,(_Bool)1,(_Bool)1,(_Bool)1);
    #line 2368 
    mvpp2_prs_dsa_tag_set(priv,port,(_Bool)1,(_Bool)0,(_Bool)1);
    #line 2371 
    mvpp2_prs_dsa_tag_set(priv,port,(_Bool)0,(_Bool)1,(_Bool)0);
    #line 2373 
    mvpp2_prs_dsa_tag_set(priv,port,(_Bool)0,(_Bool)0,(_Bool)0);
    #line 2375 
    break;
    #line 2377 
    case 2: 
            #line 2377 
    ;
    #line 2379 
    mvpp2_prs_dsa_tag_set(priv,port,(_Bool)1,(_Bool)1,(_Bool)0);
    #line 2381 
    mvpp2_prs_dsa_tag_set(priv,port,(_Bool)1,(_Bool)0,(_Bool)0);
    #line 2384 
    mvpp2_prs_dsa_tag_set(priv,port,(_Bool)0,(_Bool)1,(_Bool)1);
    #line 2386 
    mvpp2_prs_dsa_tag_set(priv,port,(_Bool)0,(_Bool)0,(_Bool)1);
    #line 2388 
    break;
    #line 2390 
    case 1: 
            #line 2390 
    ;
    #line 2391 
    case 0: 
            #line 2391 
    ;
    #line 2393 
    mvpp2_prs_dsa_tag_set(priv,port,(_Bool)0,(_Bool)1,(_Bool)0);
    #line 2395 
    mvpp2_prs_dsa_tag_set(priv,port,(_Bool)0,(_Bool)0,(_Bool)0);
    #line 2397 
    mvpp2_prs_dsa_tag_set(priv,port,(_Bool)0,(_Bool)1,(_Bool)1);
    #line 2399 
    mvpp2_prs_dsa_tag_set(priv,port,(_Bool)0,(_Bool)0,(_Bool)1);
    #line 2401 
    break;
    #line 2403 
    default: 
             #line 2403 
    ;
    #line 2404 
    if ((unsigned int)type > 3U) 
                                 #line 2405 
                                 return -22;
  }
  #line 2408 
  return 0;
}

#line 2411  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_prs.c"
int mvpp2_prs_add_flow(struct mvpp2 *priv, int flow, u32 ri, u32 ri_mask)
{
  #line 2413 
  struct mvpp2_prs_entry pe;
  #line 2414 
  u8 *ri_byte;
  #line 2414 
  u8 *ri_byte_mask;
  #line 2415 
  int tid;
  #line 2415 
  int i;
  #line 2417 
  memset((void *)(& pe),0,44UL);
  #line 2419 
  tid = mvpp2_prs_tcam_first_free(priv,(unsigned char)112,(unsigned char)1);
  #line 2422 
  if (tid < 0) 
               #line 2423 
               return tid;
  #line 2425 
  pe.index = (unsigned int)tid;
  #line 2427 
  ri_byte = (u8 *)(& ri);
  #line 2428 
  ri_byte_mask = (u8 *)(& ri_mask);
  #line 2430 
  mvpp2_prs_sram_ai_update(& pe,(unsigned int)flow,63U);
  #line 2431 
  mvpp2_prs_sram_bits_set(& pe,110,1U);
  #line 2433 
  i = 0;
  #line 2433 
  while (i <= 3) {
    #line 2434 
    mvpp2_prs_tcam_data_byte_set(& pe,(unsigned int)i,(unsigned char)((int)*(ri_byte + (unsigned long)i)),(unsigned char)((int)*(ri_byte_mask + (unsigned long)i)));
    #line 2433 
    i ++;
  }
  #line 2438 
  mvpp2_prs_shadow_set(priv,(int)pe.index,9);
  #line 2439 
  mvpp2_prs_tcam_lu_set(& pe,9U);
  #line 2440 
  mvpp2_prs_tcam_port_map_set(& pe,255U);
  #line 2441 
  mvpp2_prs_hw_write(priv,& pe);
  #line 2443 
  return 0;
}

#line 2447  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_prs.c"
int mvpp2_prs_def_flow(struct mvpp2_port *port)
{
  #line 2449 
  struct mvpp2_prs_entry pe;
  #line 2450 
  int tid;
  #line 2452 
  memset((void *)(& pe),0,44UL);
  #line 2454 
  tid = mvpp2_prs_flow_find(port->priv,(int)port->id);
  #line 2457 
  if (tid < 0) {
    #line 2459 
    tid = mvpp2_prs_tcam_first_free(port->priv,(unsigned char)112,(unsigned char)1);
    #line 2462 
    if (tid < 0) 
                 #line 2463 
                 return tid;
    #line 2465 
    pe.index = (unsigned int)tid;
    #line 2468 
    mvpp2_prs_sram_ai_update(& pe,(unsigned int)port->id,63U);
    #line 2469 
    mvpp2_prs_sram_bits_set(& pe,110,1U);
    #line 2472 
    mvpp2_prs_shadow_set(port->priv,(int)pe.index,9);
  }
  else 
       #line 2474 
       mvpp2_prs_init_from_hw(port->priv,& pe,tid);
  #line 2477 
  mvpp2_prs_tcam_lu_set(& pe,9U);
  #line 2478 
  mvpp2_prs_tcam_port_map_set(& pe,(unsigned int)(1 << (int)port->id));
  #line 2479 
  mvpp2_prs_hw_write(port->priv,& pe);
  #line 2481 
  return 0;
}

#line 2484  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_prs.c"
int mvpp2_prs_hits(struct mvpp2 *priv, int index)
{
  #line 2486 
  u32 val;
  #line 2488 
  if (index > 256) 
                   #line 2489 
                   return -22;
  #line 2491 
  mvpp2_write(priv,4672U,(unsigned int)index);
  #line 2493 
  val = mvpp2_read(priv,4676U);
  #line 2495 
  val &= 65535U;
  #line 2497 
  return (int)val;
}

#line 832  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_prs.i.aux"
static void *cif_devm_kcalloc(struct device *dev, size_t n, size_t size, gfp_t flags)
{
  #line 835 
  return ldv_devm_kcalloc(n,size,flags);
}

/* compiler builtin: 
   void __builtin_prefetch(void const * , ...);   */
/* compiler builtin: 
   void __builtin_unreachable(void);   */
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/export.h"
#line 16 
extern struct module __this_module;
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static void arch___set_bit(long nr, unsigned long *addr)
{
  #line 68 
  ldv_inline_asm();
  #line 69 
  return;
}

#line 324  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static int fls(unsigned int x)
{
  #line 326 
  int r;
  #line 327 
  ldv_inline_asm();
  #line 351 
  return r + 1;
}

#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/arch_hweight.h"
__inline static unsigned long __arch_hweight64(__u64 w)
{
  #line 45 
  unsigned long res;
  #line 46 
  ldv_inline_asm();
  #line 51 
  return res;
}

#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 306  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_main.i.aux"
static void cif_set_bit(long nr, unsigned long *addr);
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 313  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_main.i.aux"
static void cif_clear_bit(long nr, unsigned long *addr);
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-non-atomic.h"
__inline static void __set_bit(long nr, unsigned long *addr)
{
  #line 27 
  kasan_check_read((void *)(addr + (unsigned long)(nr / 64L)),8U);
  #line 28 
  arch___set_bit(nr,addr);
  #line 29 
  return;
}

#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bitops.h"
__inline static unsigned long hweight_long(unsigned long w)
{
  #line 72 
  unsigned long tmp_0;
  #line 72 
  if (0 != 0) 
              #line 72 
              tmp_0 = (unsigned long)((((unsigned int)((((((((((unsigned long long)w & 1ULL) != 0ULL) + (((unsigned long long)w & 2ULL) != 0ULL)) + (((unsigned long long)w & 4ULL) != 0ULL)) + (((unsigned long long)w & 8ULL) != 0ULL)) + (((unsigned long long)w & 16ULL) != 0ULL)) + (((unsigned long long)w & 32ULL) != 0ULL)) + (((unsigned long long)w & 64ULL) != 0ULL)) + (((unsigned long long)w & 128ULL) != 0ULL)) + (unsigned int)(((((((((w & 256UL) != 0UL) + ((w & 512UL) != 0UL)) + ((w & 1024UL) != 0UL)) + ((w & 2048UL) != 0UL)) + ((w & 4096UL) != 0UL)) + ((w & 8192UL) != 0UL)) + ((w & 16384UL) != 0UL)) + ((w & 32768UL) != 0UL))) + ((unsigned int)(((((((((w & 65536UL) != 0UL) + ((w & 131072UL) != 0UL)) + ((w & 262144UL) != 0UL)) + ((w & 524288UL) != 0UL)) + ((w & 1048576UL) != 0UL)) + ((w & 2097152UL) != 0UL)) + ((w & 4194304UL) != 0UL)) + ((w & 8388608UL) != 0UL)) + (unsigned int)(((((((((w & 16777216UL) != 0UL) + ((w & 33554432UL) != 0UL)) + ((w & 67108864UL) != 0UL)) + ((w & 134217728UL) != 0UL)) + ((w & 268435456UL) != 0UL)) + ((w & 536870912UL) != 0UL)) + ((w & 1073741824UL) != 0UL)) + ((w & 2147483648UL) != 0UL)))) + (((unsigned int)(((((((((w & 4294967296UL) != 0UL) + ((w & 8589934592UL) != 0UL)) + ((w & 17179869184UL) != 0UL)) + ((w & 34359738368UL) != 0UL)) + ((w & 68719476736UL) != 0UL)) + ((w & 137438953472UL) != 0UL)) + ((w & 274877906944UL) != 0UL)) + ((w & 549755813888UL) != 0UL)) + (unsigned int)(((((((((w & 1099511627776UL) != 0UL) + ((w & 2199023255552UL) != 0UL)) + ((w & 4398046511104UL) != 0UL)) + ((w & 8796093022208UL) != 0UL)) + ((w & 17592186044416UL) != 0UL)) + ((w & 35184372088832UL) != 0UL)) + ((w & 70368744177664UL) != 0UL)) + ((w & 140737488355328UL) != 0UL))) + ((unsigned int)(((((((((w & 281474976710656UL) != 0UL) + ((w & 562949953421312UL) != 0UL)) + ((w & 1125899906842624UL) != 0UL)) + ((w & 2251799813685248UL) != 0UL)) + ((w & 4503599627370496UL) != 0UL)) + ((w & 9007199254740992UL) != 0UL)) + ((w & 18014398509481984UL) != 0UL)) + ((w & 36028797018963968UL) != 0UL)) + (unsigned int)(((((((((w & 72057594037927936UL) != 0UL) + ((w & 144115188075855872UL) != 0UL)) + ((w & 288230376151711744UL) != 0UL)) + ((w & 576460752303423488UL) != 0UL)) + ((w & 1152921504606846976UL) != 0UL)) + ((w & 2305843009213693952UL) != 0UL)) + ((w & 4611686018427387904UL) != 0UL)) + ((w & 9223372036854775808UL) != 0UL))))); else 
                                                                    #line 72 
                                                                    tmp_0 = __arch_hweight64((unsigned long long)w);
  #line 72 
  return tmp_0;
}

#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/jump_label.h"
__inline static bool arch_static_branch(struct static_key *key, bool branch)
{
  #line 27 
  ldv_inline_asm();
  #line 28 
  ldv_inline_asm();
  #line 34 
  return (_Bool)0;
  #line 35 
  l_yes: 
         #line 35 
  ;
  #line 36 
  return (_Bool)1;
}

#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_debug.h"
#line 70 
void __dynamic_netdev_dbg(struct _ddebug *, struct net_device *, char * , ...);
#line 472  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernel.h"
#line 472 
int snprintf(char *, size_t, char * , ...);
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
#line 320  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_main.i.aux"
static void INIT_LIST_HEAD(struct list_head *list);
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/percpu.h"
#line 88 
void __bad_percpu_size(void);
#line 309  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-defs.h"
#line 309 
void __bad_size_call_parameter(void);
#line 314  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-defs.h"
__inline static void __this_cpu_preempt_check(char *op)
{
  #line 316 
  return;
}

#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/percpu.h"
#line 19 
extern unsigned long __per_cpu_offset[8192U];
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bug.h"
#line 89 
void __warn_printk(char * , ...);
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/page_64.h"
#line 14 
extern unsigned long page_offset_base;
#line 15 
#line 15 
extern unsigned long vmalloc_base;
#line 16 
#line 16 
extern unsigned long vmemmap_base;
#line 29 
#line 29 
unsigned long __phys_addr(unsigned long);
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/string_64.h"
#line 14 
void *memcpy(void *, void *, size_t);
#line 19 
#line 19 
void *__memset(void *, int, size_t);
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/string.h"
#line 26 
char *strncpy(char *, char *, __kernel_size_t);
#line 29 
#line 29 
size_t strlcpy(char *, char *, size_t);
#line 32 
#line 32 
ssize_t strscpy(char *, char *, size_t);
#line 59 
#line 59 
char *strchr(char *, int);
#line 136  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bitmap.h"
#line 136 
int __bitmap_and(unsigned long *, unsigned long *, unsigned long *, unsigned int);
#line 151 
#line 151 
int __bitmap_weight(unsigned long *, unsigned int);
#line 230 
#line 383  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_main.i.aux"
static void cif_bitmap_zero(unsigned long *dst, unsigned int nbits);
#line 231  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bitmap.h"
__inline static void bitmap_fill(unsigned long *dst, unsigned int nbits)
{
  #line 233 
  unsigned int len = (unsigned int)(((unsigned long)nbits + 63UL) / 64UL) * 8U;
  #line 234 
  __memset((void *)dst,255,(unsigned long)len);
  #line 235 
  return;
}

#line 273  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bitmap.h"
__inline static int bitmap_and(unsigned long *dst, unsigned long *src1, unsigned long *src2, unsigned int nbits)
{
  #line 276 
  if (0 != 0 && nbits + 4294967295U <= 63U) {
    #line 277 
    *dst = ((*src1 & *src2) & (18446744073709551615UL >> (- nbits & 63U)));
    #line 277 
    return ((*src1 & *src2) & (18446744073709551615UL >> (- nbits & 63U))) != 0UL;
  }
  #line 278 
  return __bitmap_and(dst,src1,src2,nbits);
}

#line 388  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bitmap.h"
__inline static int bitmap_weight(unsigned long *src, unsigned int nbits)
{
  #line 390 
  if (0 != 0 && nbits + 4294967295U <= 63U) {
    #line 391 
    return (int)hweight_long(*src & (18446744073709551615UL >> (- nbits & 63U)));
  }
  #line 392 
  return __bitmap_weight(src,nbits);
}

#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
#line 39 
extern unsigned int nr_cpu_ids;
#line 90 
#line 90 
extern struct cpumask __cpu_possible_mask;
#line 91 
#line 91 
extern struct cpumask __cpu_online_mask;
#line 92 
#line 92 
extern struct cpumask __cpu_present_mask;
#line 134  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
__inline static void cpu_max_bits_warn(unsigned int cpu, unsigned int bits)
{
  #line 137 
  int __ret_warn_on = cpu >= bits;
  #line 137 
  if ((long)(__ret_warn_on != 0) != 0L) {
    #line 138 
    ldv_inline_asm();
    #line 139 
    ldv_inline_asm();
  }
  #line 137 
  long tmp = (long)(__ret_warn_on != 0);
  #line 139 
  return;
}

#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
__inline static unsigned int cpumask_check(unsigned int cpu)
{
  #line 144 
  cpu_max_bits_warn(cpu,nr_cpu_ids);
  #line 145 
  return cpu;
}

#line 228 
#line 228 
unsigned int cpumask_next(int, struct cpumask *);
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
__inline static void cpumask_set_cpu(unsigned int cpu, struct cpumask *dstp)
{
  #line 327 
  ;
  #line 327 
  cif_set_bit((long)cpumask_check(cpu),(unsigned long *)(& dstp->bits));
  #line 328 
  return;
}

#line 554  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
__inline static unsigned int cpumask_weight(struct cpumask *srcp)
{
  #line 556 
  return (unsigned int)bitmap_weight((unsigned long *)(& srcp->bits),nr_cpu_ids);
}

#line 686  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
__inline static unsigned int cpumask_size(void)
{
  #line 688 
  return (unsigned int)(((unsigned long)nr_cpu_ids + 63UL) / 64UL) * 8U;
}

#line 877 
#line 877 
extern unsigned long cpu_bit_bitmap[65U][128U];
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
__inline static struct cpumask *get_cpu_mask(unsigned int cpu)
{
  #line 881 
  unsigned long *p = (unsigned long *)(& cpu_bit_bitmap[(cpu & 63U) + 1U]);
  #line 882 
  p += - (cpu / 64U);
  #line 883 
  return (struct cpumask *)p;
}

#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/err.h"
#line 397  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_main.i.aux"
static long PTR_ERR(void *ptr);
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/err.h"
#line 404  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_main.i.aux"
static bool IS_ERR(void *ptr);
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/err.h"
#line 411  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_main.i.aux"
static bool IS_ERR_OR_NULL(void *ptr);
#line 166  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
#line 166 
extern struct cpuinfo_x86 boot_cpu_data;
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cpufeature.h"
__inline static bool _static_cpu_has(u16 bit)
{
  #line 177 
  ldv_inline_asm();
  #line 178 
  ldv_inline_asm();
  #line 211 
  t_yes: 
         #line 211 
  ;
  #line 212 
  return (_Bool)1;
  #line 213 
  t_no: 
        #line 213 
  ;
  #line 214 
  return (_Bool)0;
}

#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/preempt.h"
__inline static void __preempt_count_add(int val)
{
  #line 79 
  int tmp;
  #line 79 
  if (0 != 0 && (val == 1 || val == -1)) 
                                         #line 79 
                                         tmp = val; else 
                                                         #line 79 
                                                         tmp = 0;
  #line 79 
  int pao_ID__ = tmp;
  #line 79 
  switch (4UL) {
    #line 79 
    case (unsigned long)1: 
                           #line 79 
    ;
    #line 79 
    if (pao_ID__ == 1) 
                       #line 81 
                       ldv_inline_asm();
    else 
      #line 79 
      if (pao_ID__ == -1) 
                          #line 81 
                          ldv_inline_asm(); else 
                                                 #line 84 
                                                 ldv_inline_asm();
    #line 79 
    break;
    #line 79 
    case (unsigned long)2: 
                           #line 79 
    ;
    #line 79 
    if (pao_ID__ == 1) 
                       #line 81 
                       ldv_inline_asm();
    else 
      #line 79 
      if (pao_ID__ == -1) 
                          #line 81 
                          ldv_inline_asm(); else 
                                                 #line 84 
                                                 ldv_inline_asm();
    #line 79 
    break;
    #line 79 
    case (unsigned long)4: 
                           #line 79 
    ;
    #line 79 
    if (pao_ID__ == 1) 
                       #line 81 
                       ldv_inline_asm();
    else 
      #line 79 
      if (pao_ID__ == -1) 
                          #line 81 
                          ldv_inline_asm(); else 
                                                 #line 84 
                                                 ldv_inline_asm();
    #line 79 
    break;
    #line 79 
    case (unsigned long)8: 
                           #line 79 
    ;
    #line 79 
    if (pao_ID__ == 1) 
                       #line 81 
                       ldv_inline_asm();
    else 
      #line 79 
      if (pao_ID__ == -1) 
                          #line 81 
                          ldv_inline_asm(); else 
                                                 #line 84 
                                                 ldv_inline_asm();
    #line 79 
    break;
    #line 79 
    default: 
             #line 79 
    ;
    #line 79 
    __bad_percpu_size();
  }
  #line 82 
  return;
}

#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/preempt.h"
__inline static void __preempt_count_sub(int val)
{
  #line 84 
  int tmp;
  #line 84 
  if (0 != 0 && (val == -1 || val == 1)) 
                                         #line 84 
                                         tmp = - val; else 
                                                           #line 84 
                                                           tmp = 0;
  #line 84 
  int pao_ID__ = tmp;
  #line 84 
  switch (4UL) {
    #line 84 
    case (unsigned long)1: 
                           #line 84 
    ;
    #line 84 
    if (pao_ID__ == 1) 
                       #line 86 
                       ldv_inline_asm();
    else 
      #line 84 
      if (pao_ID__ == -1) 
                          #line 86 
                          ldv_inline_asm(); else 
                                                 #line 89 
                                                 ldv_inline_asm();
    #line 84 
    break;
    #line 84 
    case (unsigned long)2: 
                           #line 84 
    ;
    #line 84 
    if (pao_ID__ == 1) 
                       #line 86 
                       ldv_inline_asm();
    else 
      #line 84 
      if (pao_ID__ == -1) 
                          #line 86 
                          ldv_inline_asm(); else 
                                                 #line 89 
                                                 ldv_inline_asm();
    #line 84 
    break;
    #line 84 
    case (unsigned long)4: 
                           #line 84 
    ;
    #line 84 
    if (pao_ID__ == 1) 
                       #line 86 
                       ldv_inline_asm();
    else 
      #line 84 
      if (pao_ID__ == -1) 
                          #line 86 
                          ldv_inline_asm(); else 
                                                 #line 89 
                                                 ldv_inline_asm();
    #line 84 
    break;
    #line 84 
    case (unsigned long)8: 
                           #line 84 
    ;
    #line 84 
    if (pao_ID__ == 1) 
                       #line 86 
                       ldv_inline_asm();
    else 
      #line 84 
      if (pao_ID__ == -1) 
                          #line 86 
                          ldv_inline_asm(); else 
                                                 #line 89 
                                                 ldv_inline_asm();
    #line 84 
    break;
    #line 84 
    default: 
             #line 84 
    ;
    #line 84 
    __bad_percpu_size();
  }
  #line 87 
  return;
}

#line 302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
#line 302 
void lockdep_init_map(struct lockdep_map *, char *, struct lock_class_key *, int);
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_api_smp.h"
#line 43 
void _raw_spin_unlock_irqrestore(raw_spinlock_t *, unsigned long);
#line 391  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_irqrestore(spinlock_t *lock, unsigned long flags)
{
  {
    #line 393 
    unsigned long __dummy;
    #line 393 
    unsigned long __dummy2;
    }
  #line 393 
  _raw_spin_unlock_irqrestore(& lock->__anonCompField_spinlock_25.rlock,flags);
  #line 395 
  return;
}

#line 395 
#line 1036  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_main.i.aux"
static void cif_spin_unlock_irqrestore_NOT_ARG_SIGN(spinlock_t *lock, unsigned long flags);
#line 26 
#line 1045 
static void cif_mutex_lock_gather_stats_lock_of_mvpp2_port(struct mutex *lock);
#line 29 
#line 29 
void ldv_mutex_model_lock(struct mutex *, char *);
#line 31 
#line 31 
void ldv_mutex_model_unlock(struct mutex *, char *);
#line 33 
#line 33 
void __ldv_spin_lock(spinlock_t *);
#line 35 
#line 1027 
static void cif___ldv_spin_lock_NOT_ARG_SIGN(spinlock_t *lock);
#line 40 
#line 40 
void ldv_spin_model_lock(char *);
#line 41 
#line 41 
void ldv_spin_model_unlock(char *);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
#line 27 
void *ldv_devm_kzalloc(size_t size, gfp_t flags);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 23 
bool ldv_is_err(void *ptr);
#line 24 
#line 24 
bool ldv_is_err_or_null(void *ptr);
#line 26 
#line 26 
long ldv_ptr_err(void *ptr);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 21 
void ldv_set_bit(long nr, unsigned long *addr);
#line 22 
#line 22 
void ldv_clear_bit(long nr, unsigned long *addr);
#line 27 
#line 27 
void ldv_bitmap_zero(unsigned long *dst, unsigned int nbits);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/list.h"
#line 23 
void ldv_init_list_head(struct list_head *list);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 23 
void *ldv_kzalloc(size_t size, gfp_t flags);
#line 24 
#line 24 
void *ldv_kmalloc(size_t size, gfp_t flags);
#line 26 
#line 26 
void *ldv_kmalloc_array(size_t n, size_t size, gfp_t flags);
#line 184  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ioport.h"
#line 184 
int release_resource(struct resource *);
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
#line 86 
void mutex_destroy(struct mutex *);
#line 128 
#line 128 
void __mutex_init(struct mutex *, char *, struct lock_class_key *);
#line 185 
#line 1052  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_main.i.aux"
static void cif_mutex_unlock_gather_stats_lock_of_mvpp2_port(struct mutex *lock);
#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
#line 90 
void init_timer_key(struct timer_list *, void (*)(struct timer_list *), unsigned int, char *, struct lock_class_key *);
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
#line 22 
void delayed_work_timer_fn(struct timer_list *);
#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
__inline static struct delayed_work *to_delayed_work(struct work_struct *work)
{
  #line 160 
  void *__mptr;
  #line 160 
  __mptr = (void *)work;
  #line 160 
  return ((struct delayed_work *)__mptr);
}

#line 207 
#line 207 
void __init_work(struct work_struct *, int);
#line 407 
#line 407 
struct workqueue_struct *alloc_workqueue(char *, unsigned int, int , ...);
#line 436 
#line 436 
void destroy_workqueue(struct workqueue_struct *);
#line 465 
#line 465 
bool cancel_delayed_work(struct delayed_work *);
#line 466 
#line 466 
bool cancel_delayed_work_sync(struct delayed_work *);
#line 511 
#line 490  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_main.i.aux"
static bool cif_queue_delayed_work(struct workqueue_struct *wq, struct delayed_work *dwork, unsigned long delay);
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/io.h"
__inline static unsigned int readl(void *addr)
{
  #line 59 
  unsigned int ret;
  #line 60 
  ldv_inline_asm();
  #line 59 
  return ret;
}

#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/io.h"
__inline static void writel(unsigned int val, void *addr)
{
  #line 69 
  ldv_inline_asm();
  #line 70 
  return;
}

#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/io.h"
__inline static phys_addr_t virt_to_phys(void *address)
{
  #line 131 
  return (phys_addr_t)__phys_addr((unsigned long)address);
}

#line 148  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/io.h"
__inline static void *phys_to_virt(phys_addr_t address)
{
  #line 150 
  return (void *)((unsigned long)address + page_offset_base);
}

#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/smp.h"
#line 38 
void on_each_cpu(void (*)(void *), void *, int);
#line 134  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu.h"
#line 134 
void *__alloc_percpu_gfp(size_t, size_t, gfp_t);
#line 135 
#line 135 
void *__alloc_percpu(size_t, size_t);
#line 136 
#line 136 
void free_percpu(void *);
#line 575  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/gfp.h"
#line 575 
void page_frag_free(void *);
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
__inline static char *kobject_name(struct kobject *kobj)
{
  #line 91 
  return kobj->name;
}

#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/property.h"
#line 40 
int device_property_read_u32_array(struct device *, char *, u32 *, size_t);
#line 52 
#line 52 
bool fwnode_property_present(struct fwnode_handle *, char *);
#line 60 
#line 60 
int fwnode_property_read_u32_array(struct fwnode_handle *, char *, u32 *, size_t);
#line 92 
#line 92 
struct fwnode_handle *fwnode_get_next_available_child_node(struct fwnode_handle *, struct fwnode_handle *);
#line 118 
#line 118 
int fwnode_irq_get(struct fwnode_handle *, unsigned int);
#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/property.h"
__inline static int device_property_read_u32(struct device *dev, char *propname, u32 *val)
{
  #line 143 
  return device_property_read_u32_array(dev,propname,val,1UL);
}

#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/property.h"
__inline static bool fwnode_property_read_bool(struct fwnode_handle *fwnode, char *propname)
{
  #line 175 
  return fwnode_property_present(fwnode,propname);
}

#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/property.h"
__inline static int fwnode_property_read_u32(struct fwnode_handle *fwnode, char *propname, u32 *val)
{
  #line 193 
  return fwnode_property_read_u32_array(fwnode,propname,val,1UL);
}

#line 335 
#line 335 
int fwnode_get_phy_mode(struct fwnode_handle *);
#line 336 
#line 336 
void *fwnode_get_mac_address(struct fwnode_handle *, char *, int);
#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/of.h"
#line 105 
extern struct fwnode_operations of_fwnode_ops;
#line 155  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/of.h"
__inline static bool is_of_node(struct fwnode_handle *fwnode)
{
  #line 157 
  int tmp_0;
  #line 157 
  if (IS_ERR_OR_NULL((void *)fwnode)) 
                                      #line 157 
                                      tmp_0 = 0;
  else 
    #line 157 
    if (fwnode->ops == & of_fwnode_ops) 
                                        #line 157 
                                        tmp_0 = 1; else 
                                                        #line 157 
                                                        tmp_0 = 0;
  #line 157 
  return (_Bool)(tmp_0 != 0);
}

#line 304 
#line 304 
struct property *of_find_property(struct device_node *, char *, int *);
#line 337 
#line 337 
int of_property_match_string(struct device_node *, char *, char *);
#line 382  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
#line 382 
void irq_dispose_mapping(unsigned int);
#line 375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
#line 375 
void hrtimer_init(struct hrtimer *, clockid_t, enum hrtimer_mode);
#line 407 
#line 407 
void hrtimer_start_range_ns(struct hrtimer *, ktime_t, u64, enum hrtimer_mode);
#line 418  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
__inline static void hrtimer_start(struct hrtimer *timer, ktime_t tim, enum hrtimer_mode mode)
{
  #line 421 
  hrtimer_start_range_ns(timer,tim,0ULL,mode);
  #line 422 
  return;
}

#line 424 
#line 424 
int hrtimer_cancel(struct hrtimer *);
#line 484 
#line 484 
u64 hrtimer_forward(struct hrtimer *, ktime_t, ktime_t);
#line 502  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
__inline static u64 hrtimer_forward_now(struct hrtimer *timer, ktime_t interval)
{
  #line 505 
  ;
  #line 505 
  ;
  #line 505 
  return hrtimer_forward(timer,(*((timer->base)->get_time))(),interval);
}

#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 189 
void kfree(void *);
#line 542 
#line 577  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_main.i.aux"
static void *kmalloc(size_t size, gfp_t flags);
#line 590  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 584  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_main.i.aux"
static void *kmalloc_array(size_t n, size_t size, gfp_t flags);
#line 668  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 612  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_main.i.aux"
static void *kzalloc(size_t size, gfp_t flags);
#line 937  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 1075  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_main.i.aux"
static void *cif_devm_kzalloc(struct device *dev, size_t size, gfp_t flags);
#line 952  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 1020  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_main.i.aux"
static void *cif_devm_kcalloc_0(struct device *dev, size_t n, size_t size, gfp_t flags);
#line 952  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 952 
void devm_kfree(struct device *, void *);
#line 963 
#line 963 
void *devm_ioremap_resource(struct device *, struct resource *);
#line 1370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static char *dev_name(struct device *dev)
{
  #line 1373 
  if (dev->init_name != (char *)0) 
                                   #line 1374 
                                   return dev->init_name;
  #line 1376 
  return kobject_name(& dev->kobj);
}

#line 1417  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static void *dev_get_drvdata(struct device *dev)
{
  #line 1419 
  return dev->driver_data;
}

#line 1422  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static void dev_set_drvdata(struct device *dev, void *data)
{
  #line 1424 
  dev->driver_data = data;
  #line 1425 
  return;
}

#line 1516  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static struct device_node *dev_of_node(struct device *dev)
{
  #line 1518 
  if (dev == (struct device *)0) 
                                 #line 1519 
                                 return (struct device_node *)0;
  #line 1520 
  return dev->of_node;
}

#line 1680 
#line 1680 
char *dev_driver_string(struct device *);
#line 1712 
#line 1712 
void _dev_err(struct device *, char * , ...);
#line 1718 
#line 1718 
void _dev_info(struct device *, char * , ...);
#line 396  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/acpi/acpi_bus.h"
#line 396 
bool is_acpi_device_node(struct fwnode_handle *);
#line 397 
#line 397 
bool is_acpi_data_node(struct fwnode_handle *);
#line 399  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/acpi/acpi_bus.h"
__inline static bool is_acpi_node(struct fwnode_handle *fwnode)
{
  #line 401 
  int tmp_1;
  #line 401 
  if ((int)is_acpi_device_node(fwnode) != 0) 
                                             #line 401 
                                             tmp_1 = 1;
  else {
    #line 401 
    if ((int)is_acpi_data_node(fwnode) != 0) 
                                             #line 401 
                                             tmp_1 = 1; else 
                                                             #line 401 
                                                             tmp_1 = 0;
  }
  #line 401 
  return (_Bool)(tmp_1 != 0);
}

#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/acpi.h"
__inline static bool has_acpi_companion(struct device *dev)
{
  #line 86 
  return is_acpi_device_node(dev->fwnode);
}

#line 607 
#line 607 
struct acpi_device_id *acpi_match_device(struct acpi_device_id *, struct device *);
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/delay.h"
#line 11 
void __const_udelay(unsigned long);
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static bool is_vmalloc_addr(void *x)
{
  #line 633 
  int tmp_1;
  #line 631 
  unsigned long addr = (unsigned long)x;
  #line 633 
  if (addr >= vmalloc_base) {
    #line 633 
    unsigned long tmp_0;
    #line 633 
    if ((int)_static_cpu_has((unsigned short)528) != 0) 
                                                        #line 633 
                                                        tmp_0 = 14073748835532800UL; else 
                                                                    #line 633 
                                                                    tmp_0 = 35184372088832UL;
    #line 633 
    ;
    #line 633 
    if ((tmp_0 + vmalloc_base) + 18446744073709551615UL > addr) 
                                                                #line 633 
                                                                tmp_1 = 1; else 
                                                                    #line 633 
                                                                    tmp_1 = 0;
  }
  else 
       #line 633 
       tmp_1 = 0;
  #line 633 
  return (_Bool)(tmp_1 != 0);
}

#line 1299  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static void *lowmem_page_address(struct page *page)
{
  #line 1301 
  return (void *)((unsigned long)((unsigned long long)((page - (struct page *)vmemmap_base) / 64L) << 12) + page_offset_base);
}

#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/random.h"
#line 38 
void get_random_bytes(void *, int);
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
#line 244 
int net_ratelimit(void);
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-debug.h"
#line 21 
void debug_dma_map_single(struct device *, void *, unsigned long);
#line 24 
#line 24 
void debug_dma_map_page(struct device *, struct page *, size_t, size_t, int, dma_addr_t);
#line 28 
#line 28 
void debug_dma_mapping_error(struct device *, dma_addr_t);
#line 30 
#line 30 
void debug_dma_unmap_page(struct device *, dma_addr_t, size_t, int);
#line 52 
#line 52 
void debug_dma_sync_single_for_cpu(struct device *, dma_addr_t, size_t, int);
#line 143  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static int valid_dma_direction(int dma_direction)
{
  #line 146 
  return (unsigned int)dma_direction <= 2U;
}

#line 191  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static bool dma_is_direct(struct dma_map_ops *ops)
{
  #line 193 
  return (_Bool)((long)(ops == (struct dma_map_ops *)0) != 0L);
}

#line 200 
#line 200 
dma_addr_t dma_direct_map_page(struct device *, struct page *, unsigned long, size_t, enum dma_data_direction, unsigned long);
#line 228 
#line 228 
void dma_direct_unmap_page(struct device *, dma_addr_t, size_t, enum dma_data_direction, unsigned long);
#line 232 
#line 232 
void dma_direct_sync_single_for_cpu(struct device *, dma_addr_t, size_t, enum dma_data_direction);
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/dma-mapping.h"
#line 19 
extern struct dma_map_ops *dma_ops;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/dma-mapping.h"
__inline static struct dma_map_ops *get_arch_dma_ops(struct bus_type *bus)
{
  #line 23 
  return dma_ops;
}

#line 261  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static struct dma_map_ops *get_dma_ops(struct device *dev)
{
  #line 263 
  if (dev->dma_ops != (struct dma_map_ops *)0) 
                                               #line 264 
                                               return dev->dma_ops;
  #line 265 
  return get_arch_dma_ops(dev->bus);
}

#line 274  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static dma_addr_t dma_map_page_attrs(struct device *dev, struct page *page, size_t offset, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 279 
  dma_addr_t addr;
  #line 278 
  struct dma_map_ops *ops = get_dma_ops(dev);
  #line 281 
  if ((long)(valid_dma_direction((int)dir) == 0) != 0L) {
    #line 282 
    ldv_inline_asm();
    #line 283 
    ldv_inline_asm();
    #line 284 
    ldv_inline_asm();
    #line 281 
    ;
  }
  #line 282 
  if ((int)dma_is_direct(ops) != 0) 
                                    #line 283 
                                    addr = dma_direct_map_page(dev,page,offset,size,dir,attrs); else 
                                                                    #line 285 
                                                                    addr = (*(ops->map_page))(dev,page,offset,size,dir,attrs);
  #line 286 
  debug_dma_map_page(dev,page,offset,size,(int)dir,addr);
  #line 288 
  return addr;
}

#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_unmap_page_attrs(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 294 
  struct dma_map_ops *ops = get_dma_ops(dev);
  #line 296 
  if ((long)(valid_dma_direction((int)dir) == 0) != 0L) {
    #line 297 
    ldv_inline_asm();
    #line 298 
    ldv_inline_asm();
    #line 299 
    ldv_inline_asm();
    #line 296 
    ;
  }
  #line 297 
  if ((int)dma_is_direct(ops) != 0) 
                                    #line 298 
                                    dma_direct_unmap_page(dev,addr,size,dir,attrs);
  else 
    #line 299 
    if (ops->unmap_page != (void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ))0) 
      #line 300 
      (*(ops->unmap_page))(dev,addr,size,dir,attrs);
  #line 301 
  debug_dma_unmap_page(dev,addr,size,(int)dir);
  #line 302 
  return;
}

#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_sync_single_for_cpu(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir)
{
  #line 380 
  struct dma_map_ops *ops = get_dma_ops(dev);
  #line 382 
  if ((long)(valid_dma_direction((int)dir) == 0) != 0L) {
    #line 383 
    ldv_inline_asm();
    #line 384 
    ldv_inline_asm();
    #line 385 
    ldv_inline_asm();
    #line 382 
    ;
  }
  #line 383 
  if ((int)dma_is_direct(ops) != 0) 
                                    #line 384 
                                    dma_direct_sync_single_for_cpu(dev,addr,size,dir);
  else 
    #line 385 
    if (ops->sync_single_for_cpu != (void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction ))0) 
      #line 386 
      (*(ops->sync_single_for_cpu))(dev,addr,size,dir);
  #line 387 
  debug_dma_sync_single_for_cpu(dev,addr,size,(int)dir);
  #line 388 
  return;
}

#line 433  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static int dma_mapping_error(struct device *dev, dma_addr_t dma_addr)
{
  #line 435 
  debug_dma_mapping_error(dev,dma_addr);
  #line 437 
  if (dma_addr == 18446744073709551615ULL) 
                                           #line 438 
                                           return -12;
  #line 439 
  return 0;
}

#line 442 
#line 442 
void *dma_alloc_attrs(struct device *, size_t, dma_addr_t *, gfp_t, unsigned long);
#line 444 
#line 444 
void dma_free_attrs(struct device *, size_t, void *, dma_addr_t, unsigned long);
#line 460 
#line 460 
int dma_set_mask(struct device *, u64);
#line 461 
#line 461 
int dma_set_coherent_mask(struct device *, u64);
#line 580  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static dma_addr_t dma_map_single_attrs(struct device *dev, void *ptr, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 584 
  int __ret_warn_once;
  {
    #line 584 
    bool __warned;
    #line 584 
    __ret_warn_once = (int)is_vmalloc_addr(ptr) != 0;
    #line 584 
    if ((long)(__ret_warn_once != 0) != 0L && (long)(! __warned) != 0L) {
      #line 584 
      __warned = (_Bool)1;
      {
        #line 584 
        int __ret_warn_on = 1;
        #line 584 
        if ((long)(__ret_warn_on != 0) != 0L) {
          #line 584 
          __warn_printk((char *)"%s %s: ",dev_driver_string(dev),dev_name(dev));
          #line 585 
          ldv_inline_asm();
          #line 586 
          ldv_inline_asm();
        }
        #line 584 
        long tmp_2 = (long)(__ret_warn_on != 0);
      }
    }
    }
  #line 584 
  if ((long)((long)(__ret_warn_once != 0)) != 0L) 
                                                  #line 586 
                                                  return 18446744073709551615ULL;
  #line 587 
  debug_dma_map_single(dev,ptr,size);
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  return dma_map_page_attrs(dev,
                           (struct page *)((__phys_addr((unsigned long)ptr) >> 12) + vmemmap_base),
                           (unsigned long)ptr & 4095UL,size,dir,attrs);
}

#line 592  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_unmap_single_attrs(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 595 
  dma_unmap_page_attrs(dev,addr,size,dir,attrs);
  #line 596 
  return;
}

#line 641  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void *dma_alloc_coherent(struct device *dev, size_t size, dma_addr_t *dma_handle, gfp_t gfp)
{
  #line 645 
  return dma_alloc_attrs(dev,size,dma_handle,gfp,
                      (unsigned long)(gfp >> 5) & 256UL);
}

#line 649  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_free_coherent(struct device *dev, size_t size, void *cpu_addr, dma_addr_t dma_handle)
{
  #line 652 
  dma_free_attrs(dev,size,cpu_addr,dma_handle,0UL);
  #line 653 
  return;
}

#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned int skb_frag_size(skb_frag_t *frag)
{
  #line 327 
  return frag->bv_len;
}

#line 1035 
#line 1035 
struct sk_buff *build_skb(void *, unsigned int);
#line 1381  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_end_pointer(struct sk_buff *skb)
{
  #line 1383 
  return skb->head + (unsigned long)skb->end;
}

#line 2070  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned int skb_headlen(struct sk_buff *skb)
{
  #line 2072 
  return skb->len - skb->data_len;
}

#line 2189 
#line 2189 
void *skb_put(struct sk_buff *, unsigned int);
#line 2266 
#line 2266 
void *__pskb_pull_tail(struct sk_buff *, int);
#line 2282  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static bool pskb_may_pull(struct sk_buff *skb, unsigned int len)
{
  #line 2284 
  ;
  #line 2284 
  if ((long)(skb_headlen(skb) >= len) != 0L) 
                                             #line 2285 
                                             return (_Bool)1;
  #line 2286 
  if ((long)(skb->len < len) != 0L) 
                                    #line 2287 
                                    return (_Bool)0;
  #line 2288 
  ;
  #line 2288 
  ;
  #line 2288 
  return (_Bool)(__pskb_pull_tail(skb,(int)(len - skb_headlen(skb))) != (void *)0);
}

#line 2338  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_reserve(struct sk_buff *skb, int len)
{
  #line 2340 
  skb->data += (unsigned long)len;
  #line 2341 
  skb->tail += (unsigned int)len;
  #line 2342 
  return;
}

#line 2458  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_transport_header(struct sk_buff *skb)
{
  #line 2460 
  return skb->head + (unsigned long)skb->transport_header;
}

#line 2475  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_network_header(struct sk_buff *skb)
{
  #line 2477 
  return skb->head + (unsigned long)skb->network_header;
}

#line 2559  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int skb_transport_offset(struct sk_buff *skb)
{
  #line 2561 
  ;
  #line 2561 
  return (int)(skb_transport_header(skb) - skb->data);
}

#line 2564  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static u32 skb_network_header_len(struct sk_buff *skb)
{
  #line 2566 
  return (unsigned int)((int)skb->transport_header - (int)skb->network_header);
}

#line 2574  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int skb_network_offset(struct sk_buff *skb)
{
  #line 2576 
  ;
  #line 2576 
  return (int)(skb_network_header(skb) - skb->data);
}

#line 2760 
#line 2760 
void *netdev_alloc_frag(unsigned int);
#line 2814  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_free_frag(void *addr)
{
  #line 2816 
  page_frag_free(addr);
  #line 2817 
  return;
}

#line 2896  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned int skb_frag_off(skb_frag_t *frag)
{
  #line 2898 
  return frag->bv_offset;
}

#line 2938  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static struct page *skb_frag_page(skb_frag_t *frag)
{
  #line 2940 
  return frag->bv_page;
}

#line 2996  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void *skb_frag_address(skb_frag_t *frag)
{
  #line 2998 
  return lowmem_page_address(skb_frag_page(frag)) + (unsigned long)skb_frag_off(frag);
}

#line 4277  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static u16 skb_get_queue_mapping(struct sk_buff *skb)
{
  #line 4279 
  return skb->queue_mapping;
}

#line 4390  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static bool skb_is_gso(struct sk_buff *skb)
{
  #line 4392 
  ;
  #line 4392 
  return (_Bool)((unsigned int)((struct skb_shared_info *)skb_end_pointer(skb))->gso_size != 0U);
}

#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
#line 86 
u32 ethtool_op_get_link(struct net_device *);
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/u64_stats_sync.h"
__inline static void u64_stats_init(struct u64_stats_sync *syncp)
{
  #line 117 
  return;
}

#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/u64_stats_sync.h"
__inline static unsigned int __u64_stats_fetch_begin(struct u64_stats_sync *syncp)
{
  #line 163 
  return 0U;
}

#line 175  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/u64_stats_sync.h"
__inline static bool __u64_stats_fetch_retry(struct u64_stats_sync *syncp, unsigned int start)
{
  #line 181 
  return (_Bool)0;
}

#line 200  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/u64_stats_sync.h"
__inline static unsigned int u64_stats_fetch_begin_irq(struct u64_stats_sync *syncp)
{
  #line 205 
  return __u64_stats_fetch_begin(syncp);
}

#line 208  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/u64_stats_sync.h"
__inline static bool u64_stats_fetch_retry_irq(struct u64_stats_sync *syncp, unsigned int start)
{
  #line 214 
  return __u64_stats_fetch_retry(syncp,start);
}

#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 1059  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_main.i.aux"
static int cif_request_irq(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char *name, void *dev);
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 1067  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_main.i.aux"
static void *cif_free_irq(unsigned int ldv_func_arg1, void *ldv_func_arg2);
#line 352  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 352 
int irq_set_affinity_hint(unsigned int, struct cpumask *);
#line 423  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 423 
void __napi_schedule(struct napi_struct *);
#line 431 
#line 431 
bool napi_schedule_prep(struct napi_struct *);
#line 440  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void napi_schedule(struct napi_struct *n)
{
  #line 442 
  if ((int)napi_schedule_prep(n) != 0) 
                                       #line 443 
                                       __napi_schedule(n);
  #line 444 
  return;
}

#line 468 
#line 468 
bool napi_complete_done(struct napi_struct *, int);
#line 503 
#line 503 
void napi_disable(struct napi_struct *);
#line 512  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void napi_enable(struct napi_struct *n)
{
  #line 514 
  int tmp_0;
  #line 514 
  if (test_bit(0L,& n->state)) 
                               #line 514 
                               tmp_0 = 0; else 
                                               #line 514 
                                               tmp_0 = 1;
  #line 514 
  if ((long)tmp_0 != 0L) {
    #line 515 
    ldv_inline_asm();
    #line 516 
    ldv_inline_asm();
    #line 517 
    ldv_inline_asm();
    #line 514 
    ;
  }
  #line 516 
  cif_clear_bit(0L,& n->state);
  #line 517 
  cif_clear_bit(3L,& n->state);
  #line 518 
  return;
}

#line 2132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static struct netdev_queue *netdev_get_tx_queue(struct net_device *dev, unsigned int index)
{
  #line 2135 
  return dev->_tx + (unsigned long)index;
}

#line 2234 
#line 2234 
void netif_napi_add(struct net_device *, struct napi_struct *, int (*)(struct napi_struct *, int ), int);
#line 2679 
#line 1098  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_main.i.aux"
static void cif_free_netdev(struct net_device *dev);
#line 3104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_start_queue(struct netdev_queue *dev_queue)
{
  #line 3106 
  cif_clear_bit(0L,& dev_queue->state);
  #line 3107 
  return;
}

#line 3120  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_start_all_queues(struct net_device *dev)
{
  #line 3122 
  unsigned int i;
  #line 3124 
  i = 0U;
  #line 3124 
  while (dev->num_tx_queues > i) {
    {
      #line 3125 
      struct netdev_queue *txq = netdev_get_tx_queue(dev,i);
      #line 3126 
      netif_tx_start_queue(txq);
    }
    #line 3124 
    i ++;
  }
  #line 3128 
  return;
}

#line 3130 
#line 3130 
void netif_tx_wake_queue(struct netdev_queue *);
#line 3144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_wake_all_queues(struct net_device *dev)
{
  #line 3146 
  unsigned int i;
  #line 3148 
  i = 0U;
  #line 3148 
  while (dev->num_tx_queues > i) {
    {
      #line 3149 
      struct netdev_queue *txq = netdev_get_tx_queue(dev,i);
      #line 3150 
      netif_tx_wake_queue(txq);
    }
    #line 3148 
    i ++;
  }
  #line 3152 
  return;
}

#line 3154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_stop_queue(struct netdev_queue *dev_queue)
{
  #line 3156 
  cif_set_bit(0L,& dev_queue->state);
  #line 3157 
  return;
}

#line 3171 
#line 3171 
void netif_tx_stop_all_queues(struct net_device *);
#line 3174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netif_tx_queue_stopped(struct netdev_queue *dev_queue)
{
  #line 3176 
  return test_bit(0L,& dev_queue->state);
}

#line 3387  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netif_running(struct net_device *dev)
{
  #line 3389 
  return test_bit(0L,& dev->state);
}

#line 3462 
#line 3462 
int netif_set_xps_queue(struct net_device *, struct cpumask *, u16);
#line 3617 
#line 3617 
void __dev_kfree_skb_any(struct sk_buff *, enum skb_free_reason);
#line 3648  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void dev_kfree_skb_any(struct sk_buff *skb)
{
  #line 3650 
  __dev_kfree_skb_any(skb,(enum skb_free_reason)SKB_REASON_DROPPED);
  #line 3651 
  return;
}

#line 3665 
#line 3665 
gro_result_t napi_gro_receive(struct napi_struct *, struct sk_buff *);
#line 3812 
#line 3812 
void netif_carrier_on(struct net_device *);
#line 3814 
#line 3814 
void netif_carrier_off(struct net_device *);
#line 4131 
#line 1090  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_main.i.aux"
static int cif_register_netdev(struct net_device *dev);
#line 4132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 1106  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_main.i.aux"
static void cif_unregister_netdev(struct net_device *dev);
#line 4523  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 4523 
void netdev_update_features(struct net_device *);
#line 4713  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static char *netdev_name(struct net_device *dev)
{
  #line 4715 
  if ((int)dev->name[0] == 0) 
                              #line 4716 
                              return (char *)"(unnamed net_device)";
  else {
    #line 4715 
    if (strchr((char *)(& dev->name),37) != (char *)0) 
                                                       #line 4716 
                                                       return (char *)"(unnamed net_device)";
  }
  #line 4717 
  return (char *)(& dev->name);
}

#line 4750 
#line 4750 
void netdev_err(struct net_device *, char * , ...);
#line 4752 
#line 4752 
void netdev_warn(struct net_device *, char * , ...);
#line 4756 
#line 4756 
void netdev_info(struct net_device *, char * , ...);
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
#line 32 
__be16 eth_type_trans(struct sk_buff *, struct net_device *);
#line 51 
#line 1082  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_main.i.aux"
static struct net_device *cif_alloc_etherdev_mqs(int sizeof_priv, unsigned int txqs, unsigned int rxqs);
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_zero_ether_addr(u8 *addr)
{
  #line 101 
  return (_Bool)((*((u32 *)addr) | (unsigned int)*((u16 *)(addr + 4U))) == 0U);
}

#line 191  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_valid_ether_addr(u8 *addr)
{
  #line 195 
  int tmp_1;
  #line 195 
  if (is_multicast_ether_addr(addr)) 
                                     #line 195 
                                     tmp_1 = 0;
  else {
    #line 195 
    if (is_zero_ether_addr(addr)) 
                                  #line 195 
                                  tmp_1 = 0; else 
                                                  #line 195 
                                                  tmp_1 = 1;
  }
  #line 195 
  return (_Bool)(tmp_1 != 0);
}

#line 223  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static void eth_random_addr(u8 *addr)
{
  #line 225 
  get_random_bytes((void *)addr,6);
  #line 226 
  *addr = (unsigned char)((unsigned int)*addr & 254U);
  #line 227 
  *addr = (unsigned char)((unsigned int)*addr | 2U);
  #line 228 
  return;
}

#line 263  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static void eth_hw_addr_random(struct net_device *dev)
{
  #line 265 
  dev->addr_assign_type = (unsigned char)1U;
  #line 266 
  eth_random_addr(dev->dev_addr);
  #line 267 
  return;
}

#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/platform_device.h"
#line 52 
struct resource *platform_get_resource(struct platform_device *, unsigned int, unsigned int);
#line 58 
#line 58 
void *devm_platform_ioremap_resource(struct platform_device *, unsigned int);
#line 217 
#line 1114  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_main.i.aux"
static int cif___platform_driver_register(struct platform_driver *ldv_func_arg1, struct module *ldv_func_arg2);
#line 218  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/platform_device.h"
#line 1122  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_main.i.aux"
static void cif_platform_driver_unregister(struct platform_driver *ldv_func_arg1);
#line 226  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/platform_device.h"
__inline static void *platform_get_drvdata(struct platform_device *pdev)
{
  #line 228 
  return dev_get_drvdata(& pdev->dev);
}

#line 231  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/platform_device.h"
__inline static void platform_set_drvdata(struct platform_device *pdev, void *data)
{
  #line 234 
  dev_set_drvdata(& pdev->dev,data);
  #line 235 
  return;
}

#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ip.h"
__inline static struct iphdr *ip_hdr(struct sk_buff *skb)
{
  #line 21 
  return (struct iphdr *)skb_network_header(skb);
}

#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mbus.h"
__inline static struct mbus_dram_target_info *mv_mbus_dram_info(void)
{
  #line 65 
  return (struct mbus_dram_target_info *)0;
}

#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mfd/syscon.h"
#line 23 
struct regmap *syscon_regmap_lookup_by_phandle(struct device_node *, char *);
#line 698  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irq.h"
#line 698 
void irq_modify_status(unsigned int, unsigned long, unsigned long);
#line 700  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irq.h"
__inline static void irq_set_status_flags(unsigned int irq, unsigned long set)
{
  #line 702 
  irq_modify_status(irq,0UL,set);
  #line 703 
  return;
}

#line 705  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irq.h"
__inline static void irq_clear_status_flags(unsigned int irq, unsigned long clr)
{
  #line 707 
  irq_modify_status(irq,clr,0UL);
  #line 708 
  return;
}

#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/of_irq.h"
#line 47 
int of_irq_get_byname(struct device_node *, char *);
#line 108 
#line 108 
unsigned int irq_of_parse_and_map(struct device_node *, int);
#line 953  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phy.h"
__inline static bool phy_interface_mode_is_rgmii(phy_interface_t mode)
{
  #line 955 
  return (_Bool)((unsigned int)mode + 4294967288U <= 3U);
}

#line 967  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phy.h"
__inline static bool phy_interface_mode_is_8023z(phy_interface_t mode)
{
  #line 969 
  return (_Bool)((unsigned int)mode + 4294967278U <= 1U);
}

#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/of_device.h"
#line 36 
void *of_device_get_match_data(struct device *);
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phylink.h"
__inline static bool phylink_autoneg_inband(unsigned int mode)
{
  #line 29 
  return (_Bool)(mode == 2U);
}

#line 236 
#line 236 
struct phylink *phylink_create(struct phylink_config *, struct fwnode_handle *, phy_interface_t, struct phylink_mac_ops *);
#line 239 
#line 239 
void phylink_destroy(struct phylink *);
#line 242 
#line 242 
int phylink_of_phy_connect(struct phylink *, struct device_node *, u32);
#line 243 
#line 243 
void phylink_disconnect_phy(struct phylink *);
#line 248 
#line 248 
void phylink_mac_change(struct phylink *, bool);
#line 250 
#line 250 
void phylink_start(struct phylink *);
#line 251 
#line 251 
void phylink_stop(struct phylink *);
#line 256 
#line 256 
int phylink_ethtool_ksettings_get(struct phylink *, struct ethtool_link_ksettings *);
#line 258 
#line 258 
int phylink_ethtool_ksettings_set(struct phylink *, struct ethtool_link_ksettings *);
#line 260 
#line 260 
int phylink_ethtool_nway_reset(struct phylink *);
#line 261 
#line 261 
void phylink_ethtool_get_pauseparam(struct phylink *, struct ethtool_pauseparam *);
#line 263 
#line 263 
int phylink_ethtool_set_pauseparam(struct phylink *, struct ethtool_pauseparam *);
#line 269 
#line 269 
int phylink_mii_ioctl(struct phylink *, struct ifreq *, int);
#line 280 
#line 280 
void phylink_set_port_modes(unsigned long *);
#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/phy/phy.h"
#line 206 
int phy_power_on(struct phy *);
#line 207 
#line 207 
int phy_power_off(struct phy *);
#line 208 
#line 208 
int phy_set_mode_ext(struct phy *, enum phy_mode, int);
#line 233 
#line 233 
struct phy *devm_of_phy_get(struct device *, struct device_node *, char *);
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/clk.h"
#line 232 
int clk_prepare(struct clk *);
#line 260 
#line 260 
void clk_unprepare(struct clk *);
#line 419 
#line 419 
struct clk *devm_clk_get(struct device *, char *);
#line 491 
#line 491 
int clk_enable(struct clk *);
#line 519 
#line 519 
void clk_disable(struct clk *);
#line 544 
#line 544 
unsigned long clk_get_rate(struct clk *);
#line 903  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/clk.h"
__inline static int clk_prepare_enable(struct clk *clk)
{
  #line 905 
  int ret;
  #line 907 
  ret = clk_prepare(clk);
  #line 908 
  if (ret != 0) 
                #line 909 
                return ret;
  #line 910 
  ret = clk_enable(clk);
  #line 911 
  if (ret != 0) 
                #line 912 
                clk_unprepare(clk);
  #line 914 
  return ret;
}

#line 918  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/clk.h"
__inline static void clk_disable_unprepare(struct clk *clk)
{
  #line 920 
  clk_disable(clk);
  #line 921 
  clk_unprepare(clk);
  #line 922 
  return;
}

#line 1009  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/regmap.h"
#line 1009 
int regmap_write(struct regmap *, unsigned int, unsigned int);
#line 1024 
#line 1024 
int regmap_read(struct regmap *, unsigned int, unsigned int *);
#line 300  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
__inline static bool eth_type_vlan(__be16 ethertype)
{
  #line 302 
  switch ((int)ethertype) {
    #line 303 
    case 129: 
              #line 303 
    ;
    #line 304 
    case 43144: 
                #line 304 
    ;
    #line 305 
    return (_Bool)1;
    #line 306 
    default: 
             #line 306 
    ;
    #line 307 
    return (_Bool)0;
  }
}

#line 580  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
__inline static __be16 __vlan_get_protocol(struct sk_buff *skb, __be16 type, int *depth)
{
  #line 583 
  unsigned int vlan_depth = (unsigned int)skb->mac_len;
  #line 589 
  if ((int)eth_type_vlan((unsigned short)((int)type)) != 0) {
    #line 590 
    if (vlan_depth != 0U) {
      #line 591 
      int __ret_warn_on;
      #line 591 
      __ret_warn_on = vlan_depth <= 3U;
      #line 591 
      if ((long)(__ret_warn_on != 0) != 0L) {
        #line 592 
        ldv_inline_asm();
        #line 593 
        ldv_inline_asm();
      }
      #line 591 
      if ((long)((long)(__ret_warn_on != 0)) != 0L) 
                                                    #line 592 
                                                    return (unsigned short)0U;
      #line 593 
      vlan_depth += 4294967292U;
    }
    else 
         #line 595 
         vlan_depth = 14U;
    #line 597 
    while (1) {
      {
        #line 598 
        struct vlan_hdr *vh;
        #line 600 
        int tmp_1;
        #line 600 
        if (pskb_may_pull(skb,vlan_depth + 4U)) 
                                                #line 600 
                                                tmp_1 = 0; else 
                                                                #line 600 
                                                                tmp_1 = 1;
        #line 600 
        if ((long)tmp_1 != 0L) 
                               #line 602 
                               return (unsigned short)0U;
        #line 604 
        vh = (struct vlan_hdr *)(skb->data + (unsigned long)vlan_depth);
        #line 605 
        type = vh->h_vlan_encapsulated_proto;
        #line 606 
        vlan_depth += 4U;
      }
      #line 607 
      if (! ((int)eth_type_vlan((unsigned short)((int)type)) != 0)) 
                                                                    #line 597 
                                                                    break;
    }
  }
  #line 610 
  if (depth != (int *)0) 
                         #line 611 
                         *depth = (int)vlan_depth;
  #line 613 
  return type;
}

#line 623  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
__inline static __be16 vlan_get_protocol(struct sk_buff *skb)
{
  #line 625 
  return __vlan_get_protocol(skb,(unsigned short)((int)skb->protocol),(int *)0);
}

#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tcp.h"
__inline static struct tcphdr *tcp_hdr(struct sk_buff *skb)
{
  #line 26 
  return (struct tcphdr *)skb_transport_header(skb);
}

#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tcp.h"
__inline static unsigned int __tcp_hdrlen(struct tcphdr *th)
{
  #line 31 
  return (unsigned int)((int)th->doff * 4);
}

#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tcp.h"
__inline static unsigned int tcp_hdrlen(struct sk_buff *skb)
{
  #line 36 
  return __tcp_hdrlen(tcp_hdr(skb));
}

#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ipv6.h"
__inline static struct ipv6hdr *ipv6_hdr(struct sk_buff *skb)
{
  #line 94 
  return (struct ipv6hdr *)skb_network_header(skb);
}

#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/tso.h"
#line 18 
int tso_count_descs(struct sk_buff *);
#line 19 
#line 19 
void tso_build_hdr(struct sk_buff *, char *, struct tso_t *, int, bool);
#line 21 
#line 21 
void tso_build_data(struct sk_buff *, struct tso_t *, int);
#line 22 
#line 22 
void tso_start(struct sk_buff *, struct tso_t *);
#line 1202  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2.h"
#line 1202 
void mvpp2_dbgfs_init(struct mvpp2 *priv, char *name);
#line 1204 
#line 1204 
void mvpp2_dbgfs_cleanup(struct mvpp2 *priv);
#line 262  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_cls.h"
#line 262 
int mvpp22_port_rss_init(struct mvpp2_port *port);
#line 264 
#line 264 
int mvpp22_port_rss_enable(struct mvpp2_port *port);
#line 265 
#line 265 
int mvpp22_port_rss_disable(struct mvpp2_port *port);
#line 267 
#line 267 
int mvpp22_port_rss_ctx_create(struct mvpp2_port *port, u32 *port_ctx);
#line 268 
#line 268 
int mvpp22_port_rss_ctx_delete(struct mvpp2_port *port, u32 port_ctx);
#line 270 
#line 270 
int mvpp22_port_rss_ctx_indir_set(struct mvpp2_port *port, u32 port_ctx, u32 *indir);
#line 272 
#line 272 
int mvpp22_port_rss_ctx_indir_get(struct mvpp2_port *port, u32 port_ctx, u32 *indir);
#line 275 
#line 275 
int mvpp2_ethtool_rxfh_get(struct mvpp2_port *port, struct ethtool_rxnfc *info);
#line 276 
#line 276 
int mvpp2_ethtool_rxfh_set(struct mvpp2_port *port, struct ethtool_rxnfc *info);
#line 278 
#line 278 
void mvpp2_cls_init(struct mvpp2 *priv);
#line 280 
#line 280 
void mvpp2_cls_port_config(struct mvpp2_port *port);
#line 282 
#line 282 
void mvpp2_cls_oversize_rxq_set(struct mvpp2_port *port);
#line 305 
#line 305 
int mvpp2_ethtool_cls_rule_get(struct mvpp2_port *port, struct ethtool_rxnfc *rxnfc);
#line 308 
#line 308 
int mvpp2_ethtool_cls_rule_ins(struct mvpp2_port *port, struct ethtool_rxnfc *info);
#line 311 
#line 311 
int mvpp2_ethtool_cls_rule_del(struct mvpp2_port *port, struct ethtool_rxnfc *info);
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static struct __anonstruct_mvpp2_pools_2012 mvpp2_pools[3U];
#line 59 
#line 5087 
static void mvpp2_mac_config(struct phylink_config *config, unsigned int mode, struct phylink_link_state *state);
#line 61 
#line 5130 
static void mvpp2_mac_link_up(struct phylink_config *config, unsigned int mode, phy_interface_t interface, struct phy_device *phy);
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static int queue_mode = 1;
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
void mvpp2_write(struct mvpp2 *priv, u32 offset, u32 data)
{
  #line 77 
  writel(data,priv->swth_base[0] + (unsigned long)offset);
  #line 78 
  return;
}

#line 80  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
u32 mvpp2_read(struct mvpp2 *priv, u32 offset)
{
  #line 82 
  return readl(priv->swth_base[0] + (unsigned long)offset);
}

#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static u32 mvpp2_read_relaxed(struct mvpp2 *priv, u32 offset)
{
  #line 87 
  return readl(priv->swth_base[0] + (unsigned long)offset);
}

#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
__inline static u32 mvpp2_cpu_to_thread(struct mvpp2 *priv, int cpu)
{
  #line 92 
  return (unsigned int)cpu % priv->nthreads;
}

#line 131  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static void mvpp2_thread_write(struct mvpp2 *priv, unsigned int thread, u32 offset, u32 data)
{
  #line 134 
  writel(data,priv->swth_base[thread] + (unsigned long)offset);
  #line 135 
  return;
}

#line 137  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static u32 mvpp2_thread_read(struct mvpp2 *priv, unsigned int thread, u32 offset)
{
  #line 140 
  return readl(priv->swth_base[thread] + (unsigned long)offset);
}

#line 143  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static void mvpp2_thread_write_relaxed(struct mvpp2 *priv, unsigned int thread, u32 offset, u32 data)
{
  #line 146 
  writel(data,priv->swth_base[thread] + (unsigned long)offset);
  #line 147 
  return;
}

#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static u32 mvpp2_thread_read_relaxed(struct mvpp2 *priv, unsigned int thread, u32 offset)
{
  #line 152 
  return readl(priv->swth_base[thread] + (unsigned long)offset);
}

#line 155  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static dma_addr_t mvpp2_txdesc_dma_addr_get(struct mvpp2_port *port, struct mvpp2_tx_desc *tx_desc)
{
  #line 158 
  if ((port->priv)->hw_version == (unsigned int)MVPP21) 
                                                        #line 159 
                                                        return (unsigned long long)tx_desc->__anonCompField_mvpp2_tx_desc_196.pp21.buf_dma_addr; else 
                                                                    #line 161 
                                                                    return tx_desc->__anonCompField_mvpp2_tx_desc_196.pp22.buf_dma_addr_ptp & 1099511627775ULL;
}

#line 165  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static void mvpp2_txdesc_dma_addr_set(struct mvpp2_port *port, struct mvpp2_tx_desc *tx_desc, dma_addr_t dma_addr)
{
  #line 169 
  dma_addr_t addr;
  #line 169 
  dma_addr_t offset;
  #line 171 
  addr = dma_addr & 18446744073709551584ULL;
  #line 172 
  offset = dma_addr & 31ULL;
  #line 174 
  if ((port->priv)->hw_version == (unsigned int)MVPP21) {
    #line 175 
    tx_desc->__anonCompField_mvpp2_tx_desc_196.pp21.buf_dma_addr = (unsigned int)addr;
    #line 176 
    tx_desc->__anonCompField_mvpp2_tx_desc_196.pp21.packet_offset = (unsigned char)offset;
  }
  else {
    #line 178 
    __le64 val = addr;
    #line 180 
    tx_desc->__anonCompField_mvpp2_tx_desc_196.pp22.buf_dma_addr_ptp &= 18446742974197923840ULL;
    #line 181 
    tx_desc->__anonCompField_mvpp2_tx_desc_196.pp22.buf_dma_addr_ptp |= val;
    #line 182 
    tx_desc->__anonCompField_mvpp2_tx_desc_196.pp22.packet_offset = (unsigned char)offset;
  }
  #line 184 
  return;
}

#line 186  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static size_t mvpp2_txdesc_size_get(struct mvpp2_port *port, struct mvpp2_tx_desc *tx_desc)
{
  #line 189 
  if ((port->priv)->hw_version == (unsigned int)MVPP21) 
                                                        #line 190 
                                                        return (unsigned long)tx_desc->__anonCompField_mvpp2_tx_desc_196.pp21.data_size; else 
                                                                    #line 192 
                                                                    return (unsigned long)tx_desc->__anonCompField_mvpp2_tx_desc_196.pp22.data_size;
}

#line 195  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static void mvpp2_txdesc_size_set(struct mvpp2_port *port, struct mvpp2_tx_desc *tx_desc, size_t size)
{
  #line 199 
  if ((port->priv)->hw_version == (unsigned int)MVPP21) 
                                                        #line 200 
                                                        tx_desc->__anonCompField_mvpp2_tx_desc_196.pp21.data_size = (unsigned short)size; else 
                                                                    #line 202 
                                                                    tx_desc->__anonCompField_mvpp2_tx_desc_196.pp22.data_size = (unsigned short)size;
  #line 203 
  return;
}

#line 205  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static void mvpp2_txdesc_txq_set(struct mvpp2_port *port, struct mvpp2_tx_desc *tx_desc, unsigned int txq)
{
  #line 209 
  if ((port->priv)->hw_version == (unsigned int)MVPP21) 
                                                        #line 210 
                                                        tx_desc->__anonCompField_mvpp2_tx_desc_196.pp21.phys_txq = (unsigned char)txq; else 
                                                                    #line 212 
                                                                    tx_desc->__anonCompField_mvpp2_tx_desc_196.pp22.phys_txq = (unsigned char)txq;
  #line 213 
  return;
}

#line 215  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static void mvpp2_txdesc_cmd_set(struct mvpp2_port *port, struct mvpp2_tx_desc *tx_desc, unsigned int command)
{
  #line 219 
  if ((port->priv)->hw_version == (unsigned int)MVPP21) 
                                                        #line 220 
                                                        tx_desc->__anonCompField_mvpp2_tx_desc_196.pp21.command = command; else 
                                                                    #line 222 
                                                                    tx_desc->__anonCompField_mvpp2_tx_desc_196.pp22.command = command;
  #line 223 
  return;
}

#line 225  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static unsigned int mvpp2_txdesc_offset_get(struct mvpp2_port *port, struct mvpp2_tx_desc *tx_desc)
{
  #line 228 
  if ((port->priv)->hw_version == (unsigned int)MVPP21) 
                                                        #line 229 
                                                        return (unsigned int)tx_desc->__anonCompField_mvpp2_tx_desc_196.pp21.packet_offset; else 
                                                                    #line 231 
                                                                    return (unsigned int)tx_desc->__anonCompField_mvpp2_tx_desc_196.pp22.packet_offset;
}

#line 234  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static dma_addr_t mvpp2_rxdesc_dma_addr_get(struct mvpp2_port *port, struct mvpp2_rx_desc *rx_desc)
{
  #line 237 
  if ((port->priv)->hw_version == (unsigned int)MVPP21) 
                                                        #line 238 
                                                        return (unsigned long long)rx_desc->__anonCompField_mvpp2_rx_desc_197.pp21.buf_dma_addr; else 
                                                                    #line 240 
                                                                    return rx_desc->__anonCompField_mvpp2_rx_desc_197.pp22.buf_dma_addr_key_hash & 1099511627775ULL;
}

#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static unsigned long mvpp2_rxdesc_cookie_get(struct mvpp2_port *port, struct mvpp2_rx_desc *rx_desc)
{
  #line 247 
  if ((port->priv)->hw_version == (unsigned int)MVPP21) 
                                                        #line 248 
                                                        return (unsigned long)rx_desc->__anonCompField_mvpp2_rx_desc_197.pp21.buf_cookie; else 
                                                                    #line 250 
                                                                    return (unsigned long)rx_desc->__anonCompField_mvpp2_rx_desc_197.pp22.buf_cookie_misc & 1099511627775UL;
}

#line 254  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static size_t mvpp2_rxdesc_size_get(struct mvpp2_port *port, struct mvpp2_rx_desc *rx_desc)
{
  #line 257 
  if ((port->priv)->hw_version == (unsigned int)MVPP21) 
                                                        #line 258 
                                                        return (unsigned long)rx_desc->__anonCompField_mvpp2_rx_desc_197.pp21.data_size; else 
                                                                    #line 260 
                                                                    return (unsigned long)rx_desc->__anonCompField_mvpp2_rx_desc_197.pp22.data_size;
}

#line 263  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static u32 mvpp2_rxdesc_status_get(struct mvpp2_port *port, struct mvpp2_rx_desc *rx_desc)
{
  #line 266 
  if ((port->priv)->hw_version == (unsigned int)MVPP21) 
                                                        #line 267 
                                                        return rx_desc->__anonCompField_mvpp2_rx_desc_197.pp21.status; else 
                                                                    #line 269 
                                                                    return rx_desc->__anonCompField_mvpp2_rx_desc_197.pp22.status;
}

#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static void mvpp2_txq_inc_get(struct mvpp2_txq_pcpu *txq_pcpu)
{
  #line 274 
  (txq_pcpu->txq_get_index) ++;
  #line 275 
  if (txq_pcpu->txq_get_index == txq_pcpu->size) 
                                                 #line 276 
                                                 txq_pcpu->txq_get_index = 0;
  #line 277 
  return;
}

#line 279  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static void mvpp2_txq_inc_put(struct mvpp2_port *port, struct mvpp2_txq_pcpu *txq_pcpu, struct sk_buff *skb, struct mvpp2_tx_desc *tx_desc)
{
  #line 284 
  struct mvpp2_txq_pcpu_buf *tx_buf = txq_pcpu->buffs + (unsigned long)txq_pcpu->txq_put_index;
  #line 286 
  tx_buf->skb = skb;
  #line 287 
  tx_buf->size = mvpp2_txdesc_size_get(port,tx_desc);
  #line 288 
  tx_buf->dma = mvpp2_txdesc_dma_addr_get(port,tx_desc) + (unsigned long long)mvpp2_txdesc_offset_get(port,tx_desc);
  #line 290 
  (txq_pcpu->txq_put_index) ++;
  #line 291 
  if (txq_pcpu->txq_put_index == txq_pcpu->size) 
                                                 #line 292 
                                                 txq_pcpu->txq_put_index = 0;
  #line 293 
  return;
}

#line 296  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static int mvpp2_get_nrxqs(struct mvpp2 *priv)
{
  #line 298 
  unsigned int nrxqs;
  #line 300 
  if (priv->hw_version == (unsigned int)MVPP22 && queue_mode == 0) 
                                                                   #line 301 
                                                                   return 1;
  #line 308 
  nrxqs = (cpumask_weight(& __cpu_possible_mask) + 3U) & 4294967292U;
  #line 309 
  if (nrxqs > 32U) 
                   #line 310 
                   nrxqs = 32U;
  #line 312 
  return (int)nrxqs;
}

#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
__inline static int mvpp2_egress_port(struct mvpp2_port *port)
{
  #line 318 
  return (int)port->id + 16;
}

#line 322  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
__inline static int mvpp2_txq_phys(int port, int txq)
{
  #line 324 
  return (port + 16) * 8 + txq;
}

#line 327  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static void *mvpp2_frag_alloc(struct mvpp2_bm_pool *pool)
{
  #line 329 
  if ((long)((unsigned int)pool->frag_size <= 4096U) != 0L) {
    #line 330 
    return netdev_alloc_frag((unsigned int)pool->frag_size);
  }
  else {
    #line 332 
    return kmalloc((unsigned long)pool->frag_size,2592U);
  }
}

#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static void mvpp2_frag_free(struct mvpp2_bm_pool *pool, void *data)
{
  #line 337 
  if ((long)((unsigned int)pool->frag_size <= 4096U) != 0L) 
                                                            #line 338 
                                                            skb_free_frag(data); else 
                                                                    #line 340 
                                                                    kfree(data);
  #line 341 
  return;
}

#line 346  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static int mvpp2_bm_pool_create(struct device *dev, struct mvpp2 *priv, struct mvpp2_bm_pool *bm_pool, int size)
{
  #line 349 
  u32 val;
  #line 354 
  if ((size & 15) != 0) 
                        #line 355 
                        return -22;
  #line 360 
  if (priv->hw_version == (unsigned int)MVPP21) 
                                                #line 361 
                                                bm_pool->size_bytes = (int)((unsigned long)size * (unsigned long)8U); else 
                                                                    #line 363 
                                                                    bm_pool->size_bytes = (int)((unsigned long)size * (unsigned long)16U);
  #line 365 
  bm_pool->virt_addr = (u32 *)dma_alloc_coherent(dev,(unsigned long)bm_pool->size_bytes,& bm_pool->dma_addr,3264U);
  #line 368 
  if (bm_pool->virt_addr == (u32 *)0U) 
                                       #line 369 
                                       return -12;
  #line 371 
  if (((unsigned long)bm_pool->virt_addr & 127UL) != 0UL) {
    #line 373 
    dma_free_coherent(dev,(unsigned long)bm_pool->size_bytes,(void *)bm_pool->virt_addr,bm_pool->dma_addr);
    #line 375 
    _dev_err(dev,(char *)"BM pool %d is not %d bytes aligned\n",bm_pool->id,128);
    #line 377 
    return -12;
  }
  #line 380 
  mvpp2_write(priv,(unsigned int)((bm_pool->id + 6144) * 4),(unsigned int)bm_pool->dma_addr);
  #line 382 
  mvpp2_write(priv,(unsigned int)((bm_pool->id + 6160) * 4),(unsigned int)size);
  #line 384 
  val = mvpp2_read(priv,(unsigned int)((bm_pool->id + 6272) * 4));
  #line 385 
  val |= 1U;
  #line 386 
  mvpp2_write(priv,(unsigned int)((bm_pool->id + 6272) * 4),val);
  #line 388 
  bm_pool->size = size;
  #line 389 
  bm_pool->pkt_size = 0;
  #line 390 
  bm_pool->buf_num = 0;
  #line 392 
  return 0;
}

#line 396  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static void mvpp2_bm_pool_bufsize_set(struct mvpp2 *priv, struct mvpp2_bm_pool *bm_pool, int buf_size)
{
  #line 400 
  u32 val;
  #line 402 
  bm_pool->buf_size = buf_size;
  #line 404 
  val = (unsigned int)(buf_size + 31) & 4294967264U;
  #line 405 
  mvpp2_write(priv,(unsigned int)((bm_pool->id + 96) * 4),val);
  #line 406 
  return;
}

#line 408  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static void mvpp2_bm_bufs_get_addrs(struct device *dev, struct mvpp2 *priv, struct mvpp2_bm_pool *bm_pool, dma_addr_t *dma_addr, phys_addr_t *phys_addr)
{
  #line 413 
  int pscr_ret__;
  #line 413 
  __preempt_count_add(1);
  #line 414 
  ldv_inline_asm();
  #line 413 
  __this_cpu_preempt_check((char *)"read");
  {
    #line 413 
    void *__vpp_verify = (void *)0;
    #line 413 
    void *tmp = __vpp_verify;
  }
  #line 413 
  switch (4UL) {
    #line 413 
    int pfo_ret__;
    #line 413 
    int pfo_ret___0;
    #line 413 
    int pfo_ret___1;
    #line 413 
    int pfo_ret___2;
    #line 413 
    case (unsigned long)1: 
                           #line 413 
    ;
    #line 413 
    switch (4UL) {
      #line 413 
      case (unsigned long)1: 
                             #line 413 
      ;
      #line 414 
      ldv_inline_asm();
      #line 413 
      break;
      #line 413 
      case (unsigned long)2: 
                             #line 413 
      ;
      #line 414 
      ldv_inline_asm();
      #line 413 
      break;
      #line 413 
      case (unsigned long)4: 
                             #line 413 
      ;
      #line 414 
      ldv_inline_asm();
      #line 413 
      break;
      #line 413 
      case (unsigned long)8: 
                             #line 413 
      ;
      #line 414 
      ldv_inline_asm();
      #line 413 
      break;
      #line 413 
      default: 
               #line 413 
      ;
      #line 413 
      __bad_percpu_size();
    }
    #line 413 
    pscr_ret__ = pfo_ret__;
    #line 413 
    break;
    #line 413 
    case (unsigned long)2: 
                           #line 413 
    ;
    #line 413 
    switch (4UL) {
      #line 413 
      case (unsigned long)1: 
                             #line 413 
      ;
      #line 414 
      ldv_inline_asm();
      #line 413 
      break;
      #line 413 
      case (unsigned long)2: 
                             #line 413 
      ;
      #line 414 
      ldv_inline_asm();
      #line 413 
      break;
      #line 413 
      case (unsigned long)4: 
                             #line 413 
      ;
      #line 414 
      ldv_inline_asm();
      #line 413 
      break;
      #line 413 
      case (unsigned long)8: 
                             #line 413 
      ;
      #line 414 
      ldv_inline_asm();
      #line 413 
      break;
      #line 413 
      default: 
               #line 413 
      ;
      #line 413 
      __bad_percpu_size();
    }
    #line 413 
    pscr_ret__ = pfo_ret___0;
    #line 413 
    break;
    #line 413 
    case (unsigned long)4: 
                           #line 413 
    ;
    #line 413 
    switch (4UL) {
      #line 413 
      case (unsigned long)1: 
                             #line 413 
      ;
      #line 414 
      ldv_inline_asm();
      #line 413 
      break;
      #line 413 
      case (unsigned long)2: 
                             #line 413 
      ;
      #line 414 
      ldv_inline_asm();
      #line 413 
      break;
      #line 413 
      case (unsigned long)4: 
                             #line 413 
      ;
      #line 414 
      ldv_inline_asm();
      #line 413 
      break;
      #line 413 
      case (unsigned long)8: 
                             #line 413 
      ;
      #line 414 
      ldv_inline_asm();
      #line 413 
      break;
      #line 413 
      default: 
               #line 413 
      ;
      #line 413 
      __bad_percpu_size();
    }
    #line 413 
    pscr_ret__ = pfo_ret___1;
    #line 413 
    break;
    #line 413 
    case (unsigned long)8: 
                           #line 413 
    ;
    #line 413 
    switch (4UL) {
      #line 413 
      case (unsigned long)1: 
                             #line 413 
      ;
      #line 414 
      ldv_inline_asm();
      #line 413 
      break;
      #line 413 
      case (unsigned long)2: 
                             #line 413 
      ;
      #line 414 
      ldv_inline_asm();
      #line 413 
      break;
      #line 413 
      case (unsigned long)4: 
                             #line 413 
      ;
      #line 414 
      ldv_inline_asm();
      #line 413 
      break;
      #line 413 
      case (unsigned long)8: 
                             #line 413 
      ;
      #line 414 
      ldv_inline_asm();
      #line 413 
      break;
      #line 413 
      default: 
               #line 413 
      ;
      #line 413 
      __bad_percpu_size();
    }
    #line 413 
    pscr_ret__ = pfo_ret___2;
    #line 413 
    break;
    #line 413 
    default: 
             #line 413 
    ;
    #line 413 
    __bad_size_call_parameter();
    #line 413 
    break;
  }
  #line 413 
  ;
  #line 413 
  unsigned int thread = mvpp2_cpu_to_thread(priv,pscr_ret__);
  #line 415 
  *dma_addr = (unsigned long long)mvpp2_thread_read(priv,thread,
                          (unsigned int)((bm_pool->id + 6400) * 4));
  #line 417 
  *phys_addr = (unsigned long long)mvpp2_thread_read(priv,thread,25664U);
  #line 419 
  if (priv->hw_version == (unsigned int)MVPP22) {
    #line 420 
    u32 val;
    #line 421 
    u32 dma_addr_highbits;
    #line 421 
    u32 phys_addr_highbits;
    #line 423 
    val = mvpp2_thread_read(priv,thread,25668U);
    #line 424 
    dma_addr_highbits = val & 255U;
    #line 425 
    phys_addr_highbits = (val >> 8) & 255U;
    #line 429 
    *dma_addr |= (unsigned long long)dma_addr_highbits << 32;
    #line 432 
    *phys_addr |= (unsigned long long)phys_addr_highbits << 32;
  }
  #line 437 
  ldv_inline_asm();
  #line 435 
  __preempt_count_sub(1);
  #line 437 
  return;
}

#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static void mvpp2_bm_bufs_free(struct device *dev, struct mvpp2 *priv, struct mvpp2_bm_pool *bm_pool, int buf_num)
{
  #line 442 
  int i;
  #line 444 
  if (bm_pool->buf_num < buf_num) {
    {
      #line 445 
      int __ret_warn_on = 1;
      #line 445 
      if ((long)(__ret_warn_on != 0) != 0L) {
        #line 445 
        __warn_printk((char *)"Pool does not have so many bufs pool(%d) bufs(%d)\n",bm_pool->id,buf_num);
        #line 446 
        ldv_inline_asm();
        #line 447 
        ldv_inline_asm();
      }
      #line 445 
      long tmp = (long)(__ret_warn_on != 0);
    }
    #line 447 
    buf_num = bm_pool->buf_num;
  }
  #line 450 
  i = 0;
  #line 450 
  while (i < buf_num) {
    {
      #line 451 
      dma_addr_t buf_dma_addr;
      #line 452 
      phys_addr_t buf_phys_addr;
      #line 453 
      void *data;
      #line 455 
      mvpp2_bm_bufs_get_addrs(dev,priv,bm_pool,& buf_dma_addr,& buf_phys_addr);
      #line 458 
      dma_unmap_single_attrs(dev,buf_dma_addr,(unsigned long)bm_pool->buf_size,(enum dma_data_direction)DMA_FROM_DEVICE,0UL);
      #line 461 
      data = phys_to_virt(buf_phys_addr);
      #line 462 
      if (data == (void *)0) 
                             #line 463 
                             break;
      #line 465 
      mvpp2_frag_free(bm_pool,data);
    }
    #line 450 
    i ++;
  }
  #line 469 
  bm_pool->buf_num -= i;
  #line 470 
  return;
}

#line 473  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static int mvpp2_check_hw_buf_num(struct mvpp2 *priv, struct mvpp2_bm_pool *bm_pool)
{
  #line 475 
  int buf_num = 0;
  #line 478 
  buf_num = (int)((mvpp2_read(priv,(unsigned int)((bm_pool->id + 6192) * 4)) & 65528U) + (unsigned int)buf_num);
  #line 480 
  buf_num = (int)((mvpp2_read(priv,(unsigned int)((bm_pool->id + 6224) * 4)) & 2047U) + (unsigned int)buf_num);
  #line 483 
  if (buf_num != 0) 
                    #line 484 
                    buf_num ++;
  #line 486 
  return buf_num;
}

#line 490  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static int mvpp2_bm_pool_destroy(struct device *dev, struct mvpp2 *priv, struct mvpp2_bm_pool *bm_pool)
{
  #line 493 
  int buf_num;
  #line 494 
  u32 val;
  #line 496 
  buf_num = mvpp2_check_hw_buf_num(priv,bm_pool);
  #line 497 
  mvpp2_bm_bufs_free(dev,priv,bm_pool,buf_num);
  #line 500 
  buf_num = mvpp2_check_hw_buf_num(priv,bm_pool);
  #line 501 
  if (buf_num != 0) {
    {
      #line 502 
      int __ret_warn_on = 1;
      #line 502 
      if ((long)(__ret_warn_on != 0) != 0L) {
        #line 502 
        __warn_printk((char *)"cannot free all buffers in pool %d, buf_num left %d\n",bm_pool->id,bm_pool->buf_num);
        #line 503 
        ldv_inline_asm();
        #line 504 
        ldv_inline_asm();
      }
      #line 502 
      long tmp = (long)(__ret_warn_on != 0);
    }
    #line 504 
    return 0;
  }
  #line 507 
  val = mvpp2_read(priv,(unsigned int)((bm_pool->id + 6272) * 4));
  #line 508 
  val |= 2U;
  #line 509 
  mvpp2_write(priv,(unsigned int)((bm_pool->id + 6272) * 4),val);
  #line 511 
  dma_free_coherent(dev,(unsigned long)bm_pool->size_bytes,(void *)bm_pool->virt_addr,bm_pool->dma_addr);
  #line 514 
  return 0;
}

#line 517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static int mvpp2_bm_pools_init(struct device *dev, struct mvpp2 *priv)
{
  #line 519 
  int i;
  #line 519 
  int err;
  #line 519 
  int size;
  #line 520 
  struct mvpp2_bm_pool *bm_pool;
  #line 519 
  int poolnum = 3;
  #line 522 
  if (priv->percpu_pools != 0) {
    #line 523 
    poolnum = mvpp2_get_nrxqs(priv) * 2;
  }
  #line 526 
  size = 16352;
  #line 527 
  i = 0;
  #line 527 
  while (i < poolnum) {
    #line 528 
    bm_pool = priv->bm_pools + (unsigned long)i;
    #line 529 
    bm_pool->id = i;
    #line 530 
    err = mvpp2_bm_pool_create(dev,priv,bm_pool,size);
    #line 531 
    if (err != 0) 
                  #line 532 
                  goto err_unroll_pools;
    #line 533 
    mvpp2_bm_pool_bufsize_set(priv,bm_pool,0);
    #line 527 
    i ++;
  }
  #line 535 
  return 0;
  #line 537 
  err_unroll_pools: 
                    #line 537 
  ;
  #line 538 
  _dev_err(dev,(char *)"failed to create BM pool %d, size %d\n",i,size);
  #line 539 
  i += -1;
  #line 539 
  while (i >= 0) {
    #line 540 
    mvpp2_bm_pool_destroy(dev,priv,priv->bm_pools + (unsigned long)i);
    #line 539 
    i --;
  }
  #line 541 
  return err;
}

#line 544  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static int mvpp2_bm_init(struct device *dev, struct mvpp2 *priv)
{
  #line 546 
  int i;
  #line 546 
  int err;
  #line 551 
  char *tmp_0;
  #line 546 
  int poolnum = 3;
  #line 548 
  if (priv->percpu_pools != 0) {
    #line 549 
    poolnum = mvpp2_get_nrxqs(priv) * 2;
  }
  #line 551 
  if (priv->percpu_pools != 0) 
                               #line 551 
                               tmp_0 = (char *)"per-cpu"; else 
                                                               #line 551 
                                                               tmp_0 = (char *)"shared";
  #line 551 
  ;
  #line 551 
  ;
  #line 551 
  _dev_info(dev,(char *)"using %d %s buffers\n",poolnum,tmp_0);
  #line 554 
  i = 0;
  #line 554 
  while (i < poolnum) {
    #line 556 
    mvpp2_write(priv,(unsigned int)((i + 6304) * 4),0U);
    #line 558 
    mvpp2_write(priv,(unsigned int)((i + 6288) * 4),0U);
    #line 554 
    i ++;
  }
  #line 562 
  priv->bm_pools = (struct mvpp2_bm_pool *)cif_devm_kcalloc_0(dev,(unsigned long)poolnum,56UL,3264U);
  #line 564 
  if (priv->bm_pools == (struct mvpp2_bm_pool *)0) 
                                                   #line 565 
                                                   return -12;
  #line 567 
  err = mvpp2_bm_pools_init(dev,priv);
  #line 568 
  if (err < 0) 
               #line 569 
               return err;
  #line 570 
  return 0;
}

#line 573  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static void mvpp2_setup_bm_pool(void)
{
  #line 576 
  mvpp2_pools[0].buf_num = 2048;
  #line 577 
  mvpp2_pools[0].pkt_size = 128;
  #line 580 
  mvpp2_pools[1].buf_num = 1024;
  #line 581 
  mvpp2_pools[1].pkt_size = 1664;
  #line 584 
  mvpp2_pools[2].buf_num = 512;
  #line 585 
  mvpp2_pools[2].pkt_size = 9856;
  #line 586 
  return;
}

#line 589  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static void mvpp2_rxq_long_pool_set(struct mvpp2_port *port, int lrxq, int long_pool)
{
  #line 592 
  u32 val;
  #line 592 
  u32 mask;
  #line 593 
  int prxq;
  #line 596 
  prxq = (int)(*(port->rxqs + (unsigned long)lrxq))->id;
  #line 598 
  if ((port->priv)->hw_version == (unsigned int)MVPP21) 
                                                        #line 599 
                                                        mask = 117440512U; else 
                                                                    #line 601 
                                                                    mask = 251658240U;
  #line 603 
  val = mvpp2_read(port->priv,(unsigned int)((prxq + 512) * 4));
  #line 604 
  val = ~ mask & val;
  #line 605 
  val = ((unsigned int)(long_pool << 24) & mask) | val;
  #line 606 
  mvpp2_write(port->priv,(unsigned int)((prxq + 512) * 4),val);
  #line 607 
  return;
}

#line 610  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static void mvpp2_rxq_short_pool_set(struct mvpp2_port *port, int lrxq, int short_pool)
{
  #line 613 
  u32 val;
  #line 613 
  u32 mask;
  #line 614 
  int prxq;
  #line 617 
  prxq = (int)(*(port->rxqs + (unsigned long)lrxq))->id;
  #line 619 
  if ((port->priv)->hw_version == (unsigned int)MVPP21) 
                                                        #line 620 
                                                        mask = 7340032U; else 
                                                                    #line 622 
                                                                    mask = 15728640U;
  #line 624 
  val = mvpp2_read(port->priv,(unsigned int)((prxq + 512) * 4));
  #line 625 
  val = ~ mask & val;
  #line 626 
  val = ((unsigned int)(short_pool << 20) & mask) | val;
  #line 627 
  mvpp2_write(port->priv,(unsigned int)((prxq + 512) * 4),val);
  #line 628 
  return;
}

#line 630  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static void *mvpp2_buf_alloc(struct mvpp2_port *port, struct mvpp2_bm_pool *bm_pool, dma_addr_t *buf_dma_addr, phys_addr_t *buf_phys_addr, gfp_t gfp_mask)
{
  #line 636 
  dma_addr_t dma_addr;
  #line 637 
  void *data;
  #line 639 
  data = mvpp2_frag_alloc(bm_pool);
  #line 640 
  if (data == (void *)0) 
                         #line 641 
                         return (void *)0;
  #line 643 
  dma_addr = dma_map_single_attrs((port->dev)->dev.parent,data,(unsigned long)(bm_pool->pkt_size + 64),(enum dma_data_direction)DMA_FROM_DEVICE,0UL);
  #line 646 
  if ((long)(dma_mapping_error((port->dev)->dev.parent,dma_addr) != 0) != 0L) {
    #line 647 
    mvpp2_frag_free(bm_pool,data);
    #line 648 
    return (void *)0;
  }
  #line 650 
  *buf_dma_addr = dma_addr;
  #line 651 
  *buf_phys_addr = virt_to_phys(data);
  #line 653 
  return data;
}

#line 657  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
__inline static void mvpp2_bm_pool_put(struct mvpp2_port *port, int pool, dma_addr_t buf_dma_addr, phys_addr_t buf_phys_addr)
{
  #line 661 
  int pscr_ret__;
  #line 661 
  __preempt_count_add(1);
  #line 662 
  ldv_inline_asm();
  #line 661 
  __this_cpu_preempt_check((char *)"read");
  {
    #line 661 
    void *__vpp_verify = (void *)0;
    #line 661 
    void *tmp = __vpp_verify;
  }
  #line 661 
  switch (4UL) {
    #line 661 
    int pfo_ret___0;
    #line 661 
    int pfo_ret___1;
    #line 661 
    int pfo_ret___2;
    #line 661 
    int pfo_ret__;
    #line 661 
    case (unsigned long)1: 
                           #line 661 
    ;
    #line 661 
    switch (4UL) {
      #line 661 
      case (unsigned long)1: 
                             #line 661 
      ;
      #line 662 
      ldv_inline_asm();
      #line 661 
      break;
      #line 661 
      case (unsigned long)2: 
                             #line 661 
      ;
      #line 662 
      ldv_inline_asm();
      #line 661 
      break;
      #line 661 
      case (unsigned long)4: 
                             #line 661 
      ;
      #line 662 
      ldv_inline_asm();
      #line 661 
      break;
      #line 661 
      case (unsigned long)8: 
                             #line 661 
      ;
      #line 662 
      ldv_inline_asm();
      #line 661 
      break;
      #line 661 
      default: 
               #line 661 
      ;
      #line 661 
      __bad_percpu_size();
    }
    #line 661 
    pscr_ret__ = pfo_ret__;
    #line 661 
    break;
    #line 661 
    case (unsigned long)2: 
                           #line 661 
    ;
    #line 661 
    switch (4UL) {
      #line 661 
      case (unsigned long)1: 
                             #line 661 
      ;
      #line 662 
      ldv_inline_asm();
      #line 661 
      break;
      #line 661 
      case (unsigned long)2: 
                             #line 661 
      ;
      #line 662 
      ldv_inline_asm();
      #line 661 
      break;
      #line 661 
      case (unsigned long)4: 
                             #line 661 
      ;
      #line 662 
      ldv_inline_asm();
      #line 661 
      break;
      #line 661 
      case (unsigned long)8: 
                             #line 661 
      ;
      #line 662 
      ldv_inline_asm();
      #line 661 
      break;
      #line 661 
      default: 
               #line 661 
      ;
      #line 661 
      __bad_percpu_size();
    }
    #line 661 
    pscr_ret__ = pfo_ret___0;
    #line 661 
    break;
    #line 661 
    case (unsigned long)4: 
                           #line 661 
    ;
    #line 661 
    switch (4UL) {
      #line 661 
      case (unsigned long)1: 
                             #line 661 
      ;
      #line 662 
      ldv_inline_asm();
      #line 661 
      break;
      #line 661 
      case (unsigned long)2: 
                             #line 661 
      ;
      #line 662 
      ldv_inline_asm();
      #line 661 
      break;
      #line 661 
      case (unsigned long)4: 
                             #line 661 
      ;
      #line 662 
      ldv_inline_asm();
      #line 661 
      break;
      #line 661 
      case (unsigned long)8: 
                             #line 661 
      ;
      #line 662 
      ldv_inline_asm();
      #line 661 
      break;
      #line 661 
      default: 
               #line 661 
      ;
      #line 661 
      __bad_percpu_size();
    }
    #line 661 
    pscr_ret__ = pfo_ret___1;
    #line 661 
    break;
    #line 661 
    case (unsigned long)8: 
                           #line 661 
    ;
    #line 661 
    switch (4UL) {
      #line 661 
      case (unsigned long)1: 
                             #line 661 
      ;
      #line 662 
      ldv_inline_asm();
      #line 661 
      break;
      #line 661 
      case (unsigned long)2: 
                             #line 661 
      ;
      #line 662 
      ldv_inline_asm();
      #line 661 
      break;
      #line 661 
      case (unsigned long)4: 
                             #line 661 
      ;
      #line 662 
      ldv_inline_asm();
      #line 661 
      break;
      #line 661 
      case (unsigned long)8: 
                             #line 661 
      ;
      #line 662 
      ldv_inline_asm();
      #line 661 
      break;
      #line 661 
      default: 
               #line 661 
      ;
      #line 661 
      __bad_percpu_size();
    }
    #line 661 
    pscr_ret__ = pfo_ret___2;
    #line 661 
    break;
    #line 661 
    default: 
             #line 661 
    ;
    #line 661 
    __bad_size_call_parameter();
    #line 661 
    break;
  }
  #line 661 
  ;
  #line 661 
  unsigned int thread = mvpp2_cpu_to_thread(port->priv,pscr_ret__);
  #line 662 
  unsigned long flags = 0UL;
  #line 664 
  if ((int)test_bit((long)thread,& (port->priv)->lock_map) != 0) 
                                                                 #line 665 
                                                                 cif___ldv_spin_lock_NOT_ARG_SIGN(& port->bm_lock[thread]);
  #line 667 
  if ((port->priv)->hw_version == (unsigned int)MVPP22) {
    #line 668 
    u32 val = 0U;
    #line 671 
    val = ((unsigned int)(buf_dma_addr >> 32) & 255U) | val;
    #line 675 
    val = (((unsigned int)(buf_phys_addr >> 32) << 8) & 65535U) | val;
    #line 679 
    mvpp2_thread_write_relaxed(port->priv,thread,25796U,val);
  }
  #line 688 
  mvpp2_thread_write_relaxed(port->priv,thread,25792U,(unsigned int)buf_phys_addr);
  #line 690 
  mvpp2_thread_write_relaxed(port->priv,thread,(unsigned int)((pool + 6432) * 4),(unsigned int)buf_dma_addr);
  #line 693 
  if ((int)test_bit((long)thread,& (port->priv)->lock_map) != 0) 
                                                                 #line 694 
                                                                 cif_spin_unlock_irqrestore_NOT_ARG_SIGN(& port->bm_lock[thread],flags);
  #line 698 
  ldv_inline_asm();
  #line 696 
  __preempt_count_sub(1);
  #line 698 
  return;
}

#line 700  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static int mvpp2_bm_bufs_add(struct mvpp2_port *port, struct mvpp2_bm_pool *bm_pool, int buf_num)
{
  #line 703 
  int i;
  #line 703 
  int buf_size;
  #line 703 
  int total_size;
  #line 704 
  dma_addr_t dma_addr;
  #line 705 
  phys_addr_t phys_addr;
  #line 706 
  void *buf;
  #line 708 
  if ((port->priv)->percpu_pools != 0 && (unsigned int)bm_pool->pkt_size > 1664U) {
    #line 710 
    netdev_err(port->dev,(char *)"attempted to use jumbo frames with per-cpu pools");
    #line 712 
    return 0;
  }
  #line 715 
  buf_size = bm_pool->pkt_size + 64;
  #line 716 
  total_size = (int)((unsigned int)buf_size + 320U);
  #line 718 
  if (buf_num < 0 || bm_pool->buf_num + buf_num > bm_pool->size) {
    #line 720 
    netdev_err(port->dev,(char *)"cannot allocate %d buffers for pool %d\n",buf_num,bm_pool->id);
    #line 723 
    return 0;
  }
  #line 726 
  i = 0;
  #line 726 
  while (i < buf_num) {
    #line 727 
    buf = mvpp2_buf_alloc(port,bm_pool,& dma_addr,& phys_addr,3264U);
    #line 729 
    if (buf == (void *)0) 
                          #line 730 
                          break;
    #line 732 
    mvpp2_bm_pool_put(port,bm_pool->id,dma_addr,phys_addr);
    #line 726 
    i ++;
  }
  #line 737 
  bm_pool->buf_num += i;
  {
    #line 739 
    bool branch;
    #line 739 
    struct _ddebug __UNIQUE_ID_ddebug555 = {.modname = (char *)"mvpp2", .function = (char *)"mvpp2_bm_bufs_add", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c", .format = (char *)"pool %d: pkt_size=%4d, buf_size=%4d, total_size=%4d\n", .lineno = (unsigned int)739U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 739 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug555.key.dd_key_false.key,(_Bool)0);
    #line 739 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 739 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug555,port->dev,(char *)"pool %d: pkt_size=%4d, buf_size=%4d, total_size=%4d\n",bm_pool->id,bm_pool->pkt_size,buf_size,total_size);
  }
  {
    #line 743 
    bool branch_0;
    #line 743 
    struct _ddebug __UNIQUE_ID_ddebug556 = {.modname = (char *)"mvpp2", .function = (char *)"mvpp2_bm_bufs_add", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c", .format = (char *)"pool %d: %d of %d buffers added\n", .lineno = (unsigned int)743U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 743 
    branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug556.key.dd_key_false.key,(_Bool)0);
    #line 743 
    if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                  #line 743 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug556,port->dev,(char *)"pool %d: %d of %d buffers added\n",bm_pool->id,i,buf_num);
  }
  #line 746 
  return i;
}

#line 753  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static struct mvpp2_bm_pool *mvpp2_bm_pool_use(struct mvpp2_port *port, unsigned int pool, int pkt_size)
{
  #line 756 
  int num;
  #line 755 
  struct mvpp2_bm_pool *new_pool = (port->priv)->bm_pools + (unsigned long)pool;
  #line 758 
  if ((port->priv)->percpu_pools != 0) {
    #line 758 
    ;
    #line 758 
    if ((unsigned int)(mvpp2_get_nrxqs(port->priv) * 2) < pool) 
                                                                #line 758 
                                                                goto _LOR; else 
                                                                    #line 758 
                                                                    goto _LAND;
  }
  else 
    #line 758 
    _LAND: 
           #line 758 
           if ((port->priv)->percpu_pools == 0 && pool > 2U) {
             #line 758 
             _LOR: {
                     #line 760 
                     netdev_err(port->dev,(char *)"Invalid pool %d\n",pool);
                     #line 761 
                     return (struct mvpp2_bm_pool *)0;
                   }
           }
  #line 767 
  if (new_pool->pkt_size == 0) {
    #line 768 
    int pkts_num;
    #line 773 
    pkts_num = new_pool->buf_num;
    #line 774 
    if (pkts_num == 0) 
      #line 775 
      if ((port->priv)->percpu_pools != 0) 
        #line 776 
        if (port->nrxqs > pool) 
                                #line 777 
                                pkts_num = mvpp2_pools[0].buf_num; else 
                                                                    #line 779 
                                                                    pkts_num = mvpp2_pools[1].buf_num;
      else 
           #line 781 
           pkts_num = mvpp2_pools[pool].buf_num;
    else 
         #line 784 
         mvpp2_bm_bufs_free((port->dev)->dev.parent,port->priv,new_pool,pkts_num);
    #line 788 
    new_pool->pkt_size = pkt_size;
    #line 789 
    new_pool->frag_size = (int)(((unsigned int)(pkt_size + 127) & 4294967232U) + 320U);
    #line 794 
    num = mvpp2_bm_bufs_add(port,new_pool,pkts_num);
    #line 795 
    if (num != pkts_num) {
      {
        #line 796 
        int __ret_warn_on = 1;
        #line 796 
        if ((long)(__ret_warn_on != 0) != 0L) {
          #line 796 
          __warn_printk((char *)"pool %d: %d of %d allocated\n",new_pool->id,num,pkts_num);
          #line 797 
          ldv_inline_asm();
          #line 798 
          ldv_inline_asm();
        }
        #line 796 
        long tmp_2 = (long)(__ret_warn_on != 0);
      }
      #line 798 
      return (struct mvpp2_bm_pool *)0;
    }
  }
  #line 802 
  mvpp2_bm_pool_bufsize_set(port->priv,new_pool,new_pool->pkt_size + 64);
  #line 805 
  return new_pool;
}

#line 809  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static struct mvpp2_bm_pool *mvpp2_bm_pool_use_percpu(struct mvpp2_port *port, int type, unsigned int pool, int pkt_size)
{
  #line 813 
  int num;
  #line 812 
  struct mvpp2_bm_pool *new_pool = (port->priv)->bm_pools + (unsigned long)pool;
  #line 815 
  if (port->nrxqs * 2U < pool) {
    #line 816 
    netdev_err(port->dev,(char *)"Invalid pool %d\n",pool);
    #line 817 
    return (struct mvpp2_bm_pool *)0;
  }
  #line 823 
  if (new_pool->pkt_size == 0) {
    #line 824 
    int pkts_num;
    #line 829 
    pkts_num = new_pool->buf_num;
    #line 830 
    if (pkts_num == 0) 
                       #line 831 
                       pkts_num = mvpp2_pools[type].buf_num; else 
                                                                  #line 833 
                                                                  mvpp2_bm_bufs_free((port->dev)->dev.parent,port->priv,new_pool,pkts_num);
    #line 836 
    new_pool->pkt_size = pkt_size;
    #line 837 
    new_pool->frag_size = (int)(((unsigned int)(pkt_size + 127) & 4294967232U) + 320U);
    #line 842 
    num = mvpp2_bm_bufs_add(port,new_pool,pkts_num);
    #line 843 
    if (num != pkts_num) {
      {
        #line 844 
        int __ret_warn_on = 1;
        #line 844 
        if ((long)(__ret_warn_on != 0) != 0L) {
          #line 844 
          __warn_printk((char *)"pool %d: %d of %d allocated\n",new_pool->id,num,pkts_num);
          #line 845 
          ldv_inline_asm();
          #line 846 
          ldv_inline_asm();
        }
        #line 844 
        long tmp = (long)(__ret_warn_on != 0);
      }
      #line 846 
      return (struct mvpp2_bm_pool *)0;
    }
  }
  #line 850 
  mvpp2_bm_pool_bufsize_set(port->priv,new_pool,new_pool->pkt_size + 64);
  #line 853 
  return new_pool;
}

#line 857  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static int mvpp2_swf_bm_pool_init_shared(struct mvpp2_port *port)
{
  #line 859 
  enum mvpp2_bm_pool_log_num long_log_pool;
  #line 859 
  enum mvpp2_bm_pool_log_num short_log_pool;
  #line 860 
  int rxq;
  #line 866 
  if ((unsigned int)port->pkt_size > 1664U) {
    #line 867 
    long_log_pool = MVPP2_BM_JUMBO;
    #line 868 
    short_log_pool = MVPP2_BM_LONG;
  }
  else {
    #line 870 
    long_log_pool = MVPP2_BM_LONG;
    #line 871 
    short_log_pool = MVPP2_BM_SHORT;
  }
  #line 874 
  if (port->pool_long == (struct mvpp2_bm_pool *)0) {
    #line 875 
    port->pool_long = mvpp2_bm_pool_use(port,(unsigned int)long_log_pool,mvpp2_pools[(unsigned int)long_log_pool].pkt_size);
    #line 878 
    if (port->pool_long == (struct mvpp2_bm_pool *)0) 
                                                      #line 879 
                                                      return -12;
    #line 881 
    (port->pool_long)->port_map |= (unsigned int)(1UL << (int)port->id);
    #line 883 
    rxq = 0;
    #line 883 
    while (port->nrxqs > (unsigned int)rxq) {
      #line 884 
      mvpp2_rxq_long_pool_set(port,rxq,(port->pool_long)->id);
      #line 883 
      rxq ++;
    }
  }
  #line 887 
  if (port->pool_short == (struct mvpp2_bm_pool *)0) {
    #line 888 
    port->pool_short = mvpp2_bm_pool_use(port,(unsigned int)short_log_pool,mvpp2_pools[(unsigned int)short_log_pool].pkt_size);
    #line 891 
    if (port->pool_short == (struct mvpp2_bm_pool *)0) 
                                                       #line 892 
                                                       return -12;
    #line 894 
    (port->pool_short)->port_map |= (unsigned int)(1UL << (int)port->id);
    #line 896 
    rxq = 0;
    #line 896 
    while (port->nrxqs > (unsigned int)rxq) {
      #line 897 
      mvpp2_rxq_short_pool_set(port,rxq,(port->pool_short)->id);
      #line 896 
      rxq ++;
    }
  }
  #line 901 
  return 0;
}

#line 905  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static int mvpp2_swf_bm_pool_init_percpu(struct mvpp2_port *port)
{
  #line 907 
  struct mvpp2_bm_pool *p;
  #line 908 
  int i;
  #line 910 
  i = 0;
  #line 910 
  while (port->nrxqs > (unsigned int)i) {
    #line 911 
    p = mvpp2_bm_pool_use_percpu(port,0,(unsigned int)i,mvpp2_pools[0].pkt_size);
    #line 913 
    if (p == (struct mvpp2_bm_pool *)0) 
                                        #line 914 
                                        return -12;
    #line 916 
    ((port->priv)->bm_pools + (unsigned long)i)->port_map |= (unsigned int)(1UL << (int)port->id);
    #line 917 
    mvpp2_rxq_short_pool_set(port,i,((port->priv)->bm_pools + (unsigned long)i)->id);
    #line 910 
    i ++;
  }
  #line 920 
  i = 0;
  #line 920 
  while (port->nrxqs > (unsigned int)i) {
    #line 921 
    p = mvpp2_bm_pool_use_percpu(port,1,port->nrxqs + (unsigned int)i,mvpp2_pools[1].pkt_size);
    #line 923 
    if (p == (struct mvpp2_bm_pool *)0) 
                                        #line 924 
                                        return -12;
    #line 926 
    ((port->priv)->bm_pools + (unsigned long)(port->nrxqs + (unsigned int)i))->port_map |= (unsigned int)(1UL << (int)port->id);
    #line 927 
    mvpp2_rxq_long_pool_set(port,i,((port->priv)->bm_pools + (unsigned long)(port->nrxqs + (unsigned int)i))->id);
    #line 920 
    i ++;
  }
  #line 931 
  port->pool_long = (struct mvpp2_bm_pool *)0;
  #line 932 
  port->pool_short = (struct mvpp2_bm_pool *)0;
  #line 934 
  return 0;
}

#line 937  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static int mvpp2_swf_bm_pool_init(struct mvpp2_port *port)
{
  #line 939 
  if ((port->priv)->percpu_pools != 0) {
    #line 940 
    return mvpp2_swf_bm_pool_init_percpu(port);
  }
  else {
    #line 942 
    return mvpp2_swf_bm_pool_init_shared(port);
  }
}

#line 945  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static void mvpp2_set_hw_csum(struct mvpp2_port *port, enum mvpp2_bm_pool_log_num new_long_pool)
{
  #line 948 
  netdev_features_t csums = 18ULL;
  #line 956 
  if (new_long_pool == (unsigned int)MVPP2_BM_JUMBO && (unsigned int)port->id != 0U) {
    #line 957 
    (port->dev)->features &= 18446744073709551597ULL;
    #line 958 
    (port->dev)->hw_features &= 18446744073709551597ULL;
  }
  else {
    #line 960 
    (port->dev)->features |= 18ULL;
    #line 961 
    (port->dev)->hw_features |= 18ULL;
  }
  #line 963 
  return;
}

#line 965  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static int mvpp2_bm_update_mtu(struct net_device *dev, int mtu)
{
  #line 968 
  enum mvpp2_bm_pool_log_num new_long_pool;
  #line 967 
  struct mvpp2_port *port = netdev_priv(dev);
  #line 969 
  int pkt_size = ((mtu + 24) + (boot_cpu_data.x86_cache_alignment + -1)) & - boot_cpu_data.x86_cache_alignment;
  #line 971 
  if ((port->priv)->percpu_pools != 0) 
                                       #line 972 
                                       goto out_set;
  #line 978 
  if ((unsigned int)pkt_size > 1664U) 
                                      #line 979 
                                      new_long_pool = MVPP2_BM_JUMBO; else 
                                                                    #line 981 
                                                                    new_long_pool = MVPP2_BM_LONG;
  #line 983 
  if ((port->pool_long)->id != (int)new_long_pool) {
    #line 985 
    port->pool_long = mvpp2_bm_pool_use(port,(unsigned int)(port->pool_long)->id,(port->pool_long)->pkt_size);
    #line 987 
    (port->pool_long)->port_map &= ~ ((unsigned int)(1UL << (int)port->id));
    #line 988 
    port->pool_long = (struct mvpp2_bm_pool *)0;
    #line 990 
    port->pool_short = mvpp2_bm_pool_use(port,(unsigned int)(port->pool_short)->id,(port->pool_short)->pkt_size);
    #line 992 
    (port->pool_short)->port_map &= ~ ((unsigned int)(1UL << (int)port->id));
    #line 993 
    port->pool_short = (struct mvpp2_bm_pool *)0;
    #line 995 
    port->pkt_size = pkt_size;
    #line 998 
    mvpp2_swf_bm_pool_init(port);
    #line 1000 
    mvpp2_set_hw_csum(port,new_long_pool);
  }
  #line 1003 
  out_set: 
           #line 1003 
  ;
  #line 1004 
  dev->mtu = (unsigned int)mtu;
  #line 1005 
  dev->wanted_features = dev->features;
  #line 1007 
  netdev_update_features(dev);
  #line 1008 
  return 0;
}

#line 1011  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
__inline static void mvpp2_interrupts_enable(struct mvpp2_port *port)
{
  #line 1013 
  int i;
  #line 1013 
  int sw_thread_mask = 0;
  #line 1015 
  i = 0;
  #line 1015 
  while (port->nqvecs > (unsigned int)i) {
    #line 1016 
    sw_thread_mask = (int)port->qvecs[i].sw_thread_mask | sw_thread_mask;
    #line 1015 
    i ++;
  }
  #line 1018 
  mvpp2_write(port->priv,(unsigned int)(((int)port->id + 5384) * 4),(unsigned int)sw_thread_mask & 65535U);
  #line 1020 
  return;
}

#line 1022  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
__inline static void mvpp2_interrupts_disable(struct mvpp2_port *port)
{
  #line 1024 
  int i;
  #line 1024 
  int sw_thread_mask = 0;
  #line 1026 
  i = 0;
  #line 1026 
  while (port->nqvecs > (unsigned int)i) {
    #line 1027 
    sw_thread_mask = (int)port->qvecs[i].sw_thread_mask | sw_thread_mask;
    #line 1026 
    i ++;
  }
  #line 1029 
  mvpp2_write(port->priv,(unsigned int)(((int)port->id + 5384) * 4),(unsigned int)(sw_thread_mask << 16));
  #line 1031 
  return;
}

#line 1033  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
__inline static void mvpp2_qvec_interrupt_enable(struct mvpp2_queue_vector *qvec)
{
  #line 1035 
  struct mvpp2_port *port = qvec->port;
  #line 1037 
  mvpp2_write(port->priv,(unsigned int)(((int)port->id + 5384) * 4),(unsigned int)qvec->sw_thread_mask);
  #line 1039 
  return;
}

#line 1041  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
__inline static void mvpp2_qvec_interrupt_disable(struct mvpp2_queue_vector *qvec)
{
  #line 1043 
  struct mvpp2_port *port = qvec->port;
  #line 1045 
  mvpp2_write(port->priv,(unsigned int)(((int)port->id + 5384) * 4),(unsigned int)((int)qvec->sw_thread_mask << 16));
  #line 1047 
  return;
}

#line 1053  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static void mvpp2_interrupts_mask(void *arg)
{
  #line 1058 
  int pscr_ret__;
  #line 1062 
  int pscr_ret___0;
  #line 1055 
  struct mvpp2_port *port = (struct mvpp2_port *)arg;
  #line 1058 
  __this_cpu_preempt_check((char *)"read");
  {
    #line 1058 
    void *__vpp_verify = (void *)0;
    #line 1058 
    void *tmp = __vpp_verify;
  }
  #line 1058 
  switch (4UL) {
    #line 1058 
    int pfo_ret___2;
    #line 1058 
    int pfo_ret__;
    #line 1058 
    int pfo_ret___0;
    #line 1058 
    int pfo_ret___1;
    #line 1058 
    case (unsigned long)1: 
                           #line 1058 
    ;
    #line 1058 
    switch (4UL) {
      #line 1058 
      case (unsigned long)1: 
                             #line 1058 
      ;
      #line 1059 
      ldv_inline_asm();
      #line 1058 
      break;
      #line 1058 
      case (unsigned long)2: 
                             #line 1058 
      ;
      #line 1059 
      ldv_inline_asm();
      #line 1058 
      break;
      #line 1058 
      case (unsigned long)4: 
                             #line 1058 
      ;
      #line 1059 
      ldv_inline_asm();
      #line 1058 
      break;
      #line 1058 
      case (unsigned long)8: 
                             #line 1058 
      ;
      #line 1059 
      ldv_inline_asm();
      #line 1058 
      break;
      #line 1058 
      default: 
               #line 1058 
      ;
      #line 1058 
      __bad_percpu_size();
    }
    #line 1058 
    pscr_ret__ = pfo_ret__;
    #line 1058 
    break;
    #line 1058 
    case (unsigned long)2: 
                           #line 1058 
    ;
    #line 1058 
    switch (4UL) {
      #line 1058 
      case (unsigned long)1: 
                             #line 1058 
      ;
      #line 1059 
      ldv_inline_asm();
      #line 1058 
      break;
      #line 1058 
      case (unsigned long)2: 
                             #line 1058 
      ;
      #line 1059 
      ldv_inline_asm();
      #line 1058 
      break;
      #line 1058 
      case (unsigned long)4: 
                             #line 1058 
      ;
      #line 1059 
      ldv_inline_asm();
      #line 1058 
      break;
      #line 1058 
      case (unsigned long)8: 
                             #line 1058 
      ;
      #line 1059 
      ldv_inline_asm();
      #line 1058 
      break;
      #line 1058 
      default: 
               #line 1058 
      ;
      #line 1058 
      __bad_percpu_size();
    }
    #line 1058 
    pscr_ret__ = pfo_ret___0;
    #line 1058 
    break;
    #line 1058 
    case (unsigned long)4: 
                           #line 1058 
    ;
    #line 1058 
    switch (4UL) {
      #line 1058 
      case (unsigned long)1: 
                             #line 1058 
      ;
      #line 1059 
      ldv_inline_asm();
      #line 1058 
      break;
      #line 1058 
      case (unsigned long)2: 
                             #line 1058 
      ;
      #line 1059 
      ldv_inline_asm();
      #line 1058 
      break;
      #line 1058 
      case (unsigned long)4: 
                             #line 1058 
      ;
      #line 1059 
      ldv_inline_asm();
      #line 1058 
      break;
      #line 1058 
      case (unsigned long)8: 
                             #line 1058 
      ;
      #line 1059 
      ldv_inline_asm();
      #line 1058 
      break;
      #line 1058 
      default: 
               #line 1058 
      ;
      #line 1058 
      __bad_percpu_size();
    }
    #line 1058 
    pscr_ret__ = pfo_ret___1;
    #line 1058 
    break;
    #line 1058 
    case (unsigned long)8: 
                           #line 1058 
    ;
    #line 1058 
    switch (4UL) {
      #line 1058 
      case (unsigned long)1: 
                             #line 1058 
      ;
      #line 1059 
      ldv_inline_asm();
      #line 1058 
      break;
      #line 1058 
      case (unsigned long)2: 
                             #line 1058 
      ;
      #line 1059 
      ldv_inline_asm();
      #line 1058 
      break;
      #line 1058 
      case (unsigned long)4: 
                             #line 1058 
      ;
      #line 1059 
      ldv_inline_asm();
      #line 1058 
      break;
      #line 1058 
      case (unsigned long)8: 
                             #line 1058 
      ;
      #line 1059 
      ldv_inline_asm();
      #line 1058 
      break;
      #line 1058 
      default: 
               #line 1058 
      ;
      #line 1058 
      __bad_percpu_size();
    }
    #line 1058 
    pscr_ret__ = pfo_ret___2;
    #line 1058 
    break;
    #line 1058 
    default: 
             #line 1058 
    ;
    #line 1058 
    __bad_size_call_parameter();
    #line 1058 
    break;
  }
  #line 1058 
  ;
  #line 1058 
  if ((unsigned int)pscr_ret__ > (port->priv)->nthreads) 
                                                         #line 1059 
                                                         return;
  #line 1061 
  ;
  #line 1062 
  __this_cpu_preempt_check((char *)"read");
  {
    #line 1062 
    void *__vpp_verify_0 = (void *)0;
    #line 1062 
    void *tmp_5 = __vpp_verify_0;
  }
  #line 1062 
  switch (4UL) {
    #line 1062 
    int pfo_ret___5;
    #line 1062 
    int pfo_ret___6;
    #line 1062 
    int pfo_ret___3;
    #line 1062 
    int pfo_ret___4;
    #line 1062 
    case (unsigned long)1: 
                           #line 1062 
    ;
    #line 1062 
    switch (4UL) {
      #line 1062 
      case (unsigned long)1: 
                             #line 1062 
      ;
      #line 1063 
      ldv_inline_asm();
      #line 1062 
      break;
      #line 1062 
      case (unsigned long)2: 
                             #line 1062 
      ;
      #line 1063 
      ldv_inline_asm();
      #line 1062 
      break;
      #line 1062 
      case (unsigned long)4: 
                             #line 1062 
      ;
      #line 1063 
      ldv_inline_asm();
      #line 1062 
      break;
      #line 1062 
      case (unsigned long)8: 
                             #line 1062 
      ;
      #line 1063 
      ldv_inline_asm();
      #line 1062 
      break;
      #line 1062 
      default: 
               #line 1062 
      ;
      #line 1062 
      __bad_percpu_size();
    }
    #line 1062 
    pscr_ret___0 = pfo_ret___3;
    #line 1062 
    break;
    #line 1062 
    case (unsigned long)2: 
                           #line 1062 
    ;
    #line 1062 
    switch (4UL) {
      #line 1062 
      case (unsigned long)1: 
                             #line 1062 
      ;
      #line 1063 
      ldv_inline_asm();
      #line 1062 
      break;
      #line 1062 
      case (unsigned long)2: 
                             #line 1062 
      ;
      #line 1063 
      ldv_inline_asm();
      #line 1062 
      break;
      #line 1062 
      case (unsigned long)4: 
                             #line 1062 
      ;
      #line 1063 
      ldv_inline_asm();
      #line 1062 
      break;
      #line 1062 
      case (unsigned long)8: 
                             #line 1062 
      ;
      #line 1063 
      ldv_inline_asm();
      #line 1062 
      break;
      #line 1062 
      default: 
               #line 1062 
      ;
      #line 1062 
      __bad_percpu_size();
    }
    #line 1062 
    pscr_ret___0 = pfo_ret___4;
    #line 1062 
    break;
    #line 1062 
    case (unsigned long)4: 
                           #line 1062 
    ;
    #line 1062 
    switch (4UL) {
      #line 1062 
      case (unsigned long)1: 
                             #line 1062 
      ;
      #line 1063 
      ldv_inline_asm();
      #line 1062 
      break;
      #line 1062 
      case (unsigned long)2: 
                             #line 1062 
      ;
      #line 1063 
      ldv_inline_asm();
      #line 1062 
      break;
      #line 1062 
      case (unsigned long)4: 
                             #line 1062 
      ;
      #line 1063 
      ldv_inline_asm();
      #line 1062 
      break;
      #line 1062 
      case (unsigned long)8: 
                             #line 1062 
      ;
      #line 1063 
      ldv_inline_asm();
      #line 1062 
      break;
      #line 1062 
      default: 
               #line 1062 
      ;
      #line 1062 
      __bad_percpu_size();
    }
    #line 1062 
    pscr_ret___0 = pfo_ret___5;
    #line 1062 
    break;
    #line 1062 
    case (unsigned long)8: 
                           #line 1062 
    ;
    #line 1062 
    switch (4UL) {
      #line 1062 
      case (unsigned long)1: 
                             #line 1062 
      ;
      #line 1063 
      ldv_inline_asm();
      #line 1062 
      break;
      #line 1062 
      case (unsigned long)2: 
                             #line 1062 
      ;
      #line 1063 
      ldv_inline_asm();
      #line 1062 
      break;
      #line 1062 
      case (unsigned long)4: 
                             #line 1062 
      ;
      #line 1063 
      ldv_inline_asm();
      #line 1062 
      break;
      #line 1062 
      case (unsigned long)8: 
                             #line 1062 
      ;
      #line 1063 
      ldv_inline_asm();
      #line 1062 
      break;
      #line 1062 
      default: 
               #line 1062 
      ;
      #line 1062 
      __bad_percpu_size();
    }
    #line 1062 
    pscr_ret___0 = pfo_ret___6;
    #line 1062 
    break;
    #line 1062 
    default: 
             #line 1062 
    ;
    #line 1062 
    __bad_size_call_parameter();
    #line 1062 
    break;
  }
  #line 1061 
  ;
  #line 1061 
  ;
  #line 1061 
  mvpp2_thread_write(port->priv,mvpp2_cpu_to_thread(port->priv,pscr_ret___0),(unsigned int)(((int)port->id + 5416) * 4),0U);
  #line 1064 
  return;
}

#line 1070  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static void mvpp2_interrupts_unmask(void *arg)
{
  #line 1085 
  int pscr_ret___0;
  #line 1076 
  int pscr_ret__;
  #line 1073 
  u32 val;
  #line 1072 
  struct mvpp2_port *port = (struct mvpp2_port *)arg;
  #line 1076 
  __this_cpu_preempt_check((char *)"read");
  {
    #line 1076 
    void *__vpp_verify = (void *)0;
    #line 1076 
    void *tmp = __vpp_verify;
  }
  #line 1076 
  switch (4UL) {
    #line 1076 
    int pfo_ret__;
    #line 1076 
    int pfo_ret___0;
    #line 1076 
    int pfo_ret___1;
    #line 1076 
    int pfo_ret___2;
    #line 1076 
    case (unsigned long)1: 
                           #line 1076 
    ;
    #line 1076 
    switch (4UL) {
      #line 1076 
      case (unsigned long)1: 
                             #line 1076 
      ;
      #line 1077 
      ldv_inline_asm();
      #line 1076 
      break;
      #line 1076 
      case (unsigned long)2: 
                             #line 1076 
      ;
      #line 1077 
      ldv_inline_asm();
      #line 1076 
      break;
      #line 1076 
      case (unsigned long)4: 
                             #line 1076 
      ;
      #line 1077 
      ldv_inline_asm();
      #line 1076 
      break;
      #line 1076 
      case (unsigned long)8: 
                             #line 1076 
      ;
      #line 1077 
      ldv_inline_asm();
      #line 1076 
      break;
      #line 1076 
      default: 
               #line 1076 
      ;
      #line 1076 
      __bad_percpu_size();
    }
    #line 1076 
    pscr_ret__ = pfo_ret__;
    #line 1076 
    break;
    #line 1076 
    case (unsigned long)2: 
                           #line 1076 
    ;
    #line 1076 
    switch (4UL) {
      #line 1076 
      case (unsigned long)1: 
                             #line 1076 
      ;
      #line 1077 
      ldv_inline_asm();
      #line 1076 
      break;
      #line 1076 
      case (unsigned long)2: 
                             #line 1076 
      ;
      #line 1077 
      ldv_inline_asm();
      #line 1076 
      break;
      #line 1076 
      case (unsigned long)4: 
                             #line 1076 
      ;
      #line 1077 
      ldv_inline_asm();
      #line 1076 
      break;
      #line 1076 
      case (unsigned long)8: 
                             #line 1076 
      ;
      #line 1077 
      ldv_inline_asm();
      #line 1076 
      break;
      #line 1076 
      default: 
               #line 1076 
      ;
      #line 1076 
      __bad_percpu_size();
    }
    #line 1076 
    pscr_ret__ = pfo_ret___0;
    #line 1076 
    break;
    #line 1076 
    case (unsigned long)4: 
                           #line 1076 
    ;
    #line 1076 
    switch (4UL) {
      #line 1076 
      case (unsigned long)1: 
                             #line 1076 
      ;
      #line 1077 
      ldv_inline_asm();
      #line 1076 
      break;
      #line 1076 
      case (unsigned long)2: 
                             #line 1076 
      ;
      #line 1077 
      ldv_inline_asm();
      #line 1076 
      break;
      #line 1076 
      case (unsigned long)4: 
                             #line 1076 
      ;
      #line 1077 
      ldv_inline_asm();
      #line 1076 
      break;
      #line 1076 
      case (unsigned long)8: 
                             #line 1076 
      ;
      #line 1077 
      ldv_inline_asm();
      #line 1076 
      break;
      #line 1076 
      default: 
               #line 1076 
      ;
      #line 1076 
      __bad_percpu_size();
    }
    #line 1076 
    pscr_ret__ = pfo_ret___1;
    #line 1076 
    break;
    #line 1076 
    case (unsigned long)8: 
                           #line 1076 
    ;
    #line 1076 
    switch (4UL) {
      #line 1076 
      case (unsigned long)1: 
                             #line 1076 
      ;
      #line 1077 
      ldv_inline_asm();
      #line 1076 
      break;
      #line 1076 
      case (unsigned long)2: 
                             #line 1076 
      ;
      #line 1077 
      ldv_inline_asm();
      #line 1076 
      break;
      #line 1076 
      case (unsigned long)4: 
                             #line 1076 
      ;
      #line 1077 
      ldv_inline_asm();
      #line 1076 
      break;
      #line 1076 
      case (unsigned long)8: 
                             #line 1076 
      ;
      #line 1077 
      ldv_inline_asm();
      #line 1076 
      break;
      #line 1076 
      default: 
               #line 1076 
      ;
      #line 1076 
      __bad_percpu_size();
    }
    #line 1076 
    pscr_ret__ = pfo_ret___2;
    #line 1076 
    break;
    #line 1076 
    default: 
             #line 1076 
    ;
    #line 1076 
    __bad_size_call_parameter();
    #line 1076 
    break;
  }
  #line 1076 
  ;
  #line 1076 
  if ((unsigned int)pscr_ret__ > (port->priv)->nthreads) 
                                                         #line 1077 
                                                         return;
  #line 1079 
  if ((port->priv)->hw_version == (unsigned int)MVPP21) 
                                                        #line 1079 
                                                        val = 2147549183U; else 
                                                                    #line 1079 
                                                                    val = 2147483903U;
  #line 1081 
  if ((int)port->has_tx_irqs != 0) 
                                   #line 1082 
                                   val |= 16711680U;
  #line 1084 
  ;
  #line 1084 
  ;
  #line 1085 
  __this_cpu_preempt_check((char *)"read");
  {
    #line 1085 
    void *__vpp_verify_0 = (void *)0;
    #line 1085 
    void *tmp_5 = __vpp_verify_0;
  }
  #line 1085 
  switch (4UL) {
    #line 1085 
    int pfo_ret___3;
    #line 1085 
    int pfo_ret___4;
    #line 1085 
    int pfo_ret___5;
    #line 1085 
    int pfo_ret___6;
    #line 1085 
    case (unsigned long)1: 
                           #line 1085 
    ;
    #line 1085 
    switch (4UL) {
      #line 1085 
      case (unsigned long)1: 
                             #line 1085 
      ;
      #line 1086 
      ldv_inline_asm();
      #line 1085 
      break;
      #line 1085 
      case (unsigned long)2: 
                             #line 1085 
      ;
      #line 1086 
      ldv_inline_asm();
      #line 1085 
      break;
      #line 1085 
      case (unsigned long)4: 
                             #line 1085 
      ;
      #line 1086 
      ldv_inline_asm();
      #line 1085 
      break;
      #line 1085 
      case (unsigned long)8: 
                             #line 1085 
      ;
      #line 1086 
      ldv_inline_asm();
      #line 1085 
      break;
      #line 1085 
      default: 
               #line 1085 
      ;
      #line 1085 
      __bad_percpu_size();
    }
    #line 1085 
    pscr_ret___0 = pfo_ret___3;
    #line 1085 
    break;
    #line 1085 
    case (unsigned long)2: 
                           #line 1085 
    ;
    #line 1085 
    switch (4UL) {
      #line 1085 
      case (unsigned long)1: 
                             #line 1085 
      ;
      #line 1086 
      ldv_inline_asm();
      #line 1085 
      break;
      #line 1085 
      case (unsigned long)2: 
                             #line 1085 
      ;
      #line 1086 
      ldv_inline_asm();
      #line 1085 
      break;
      #line 1085 
      case (unsigned long)4: 
                             #line 1085 
      ;
      #line 1086 
      ldv_inline_asm();
      #line 1085 
      break;
      #line 1085 
      case (unsigned long)8: 
                             #line 1085 
      ;
      #line 1086 
      ldv_inline_asm();
      #line 1085 
      break;
      #line 1085 
      default: 
               #line 1085 
      ;
      #line 1085 
      __bad_percpu_size();
    }
    #line 1085 
    pscr_ret___0 = pfo_ret___4;
    #line 1085 
    break;
    #line 1085 
    case (unsigned long)4: 
                           #line 1085 
    ;
    #line 1085 
    switch (4UL) {
      #line 1085 
      case (unsigned long)1: 
                             #line 1085 
      ;
      #line 1086 
      ldv_inline_asm();
      #line 1085 
      break;
      #line 1085 
      case (unsigned long)2: 
                             #line 1085 
      ;
      #line 1086 
      ldv_inline_asm();
      #line 1085 
      break;
      #line 1085 
      case (unsigned long)4: 
                             #line 1085 
      ;
      #line 1086 
      ldv_inline_asm();
      #line 1085 
      break;
      #line 1085 
      case (unsigned long)8: 
                             #line 1085 
      ;
      #line 1086 
      ldv_inline_asm();
      #line 1085 
      break;
      #line 1085 
      default: 
               #line 1085 
      ;
      #line 1085 
      __bad_percpu_size();
    }
    #line 1085 
    pscr_ret___0 = pfo_ret___5;
    #line 1085 
    break;
    #line 1085 
    case (unsigned long)8: 
                           #line 1085 
    ;
    #line 1085 
    switch (4UL) {
      #line 1085 
      case (unsigned long)1: 
                             #line 1085 
      ;
      #line 1086 
      ldv_inline_asm();
      #line 1085 
      break;
      #line 1085 
      case (unsigned long)2: 
                             #line 1085 
      ;
      #line 1086 
      ldv_inline_asm();
      #line 1085 
      break;
      #line 1085 
      case (unsigned long)4: 
                             #line 1085 
      ;
      #line 1086 
      ldv_inline_asm();
      #line 1085 
      break;
      #line 1085 
      case (unsigned long)8: 
                             #line 1085 
      ;
      #line 1086 
      ldv_inline_asm();
      #line 1085 
      break;
      #line 1085 
      default: 
               #line 1085 
      ;
      #line 1085 
      __bad_percpu_size();
    }
    #line 1085 
    pscr_ret___0 = pfo_ret___6;
    #line 1085 
    break;
    #line 1085 
    default: 
             #line 1085 
    ;
    #line 1085 
    __bad_size_call_parameter();
    #line 1085 
    break;
  }
  #line 1084 
  ;
  #line 1084 
  ;
  #line 1084 
  mvpp2_thread_write(port->priv,mvpp2_cpu_to_thread(port->priv,pscr_ret___0),(unsigned int)(((int)port->id + 5416) * 4),val);
  #line 1087 
  return;
}

#line 1090  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static void mvpp2_shared_interrupt_mask_unmask(struct mvpp2_port *port, bool mask)
{
  #line 1092 
  u32 val;
  #line 1093 
  int i;
  #line 1095 
  if ((port->priv)->hw_version != (unsigned int)MVPP22) 
                                                        #line 1096 
                                                        return;
  #line 1098 
  if ((int)mask != 0) 
                      #line 1099 
                      val = 0U; else 
                                     #line 1101 
                                     val = 255U;
  #line 1103 
  i = 0;
  #line 1103 
  while (port->nqvecs > (unsigned int)i) {
    {
      #line 1104 
      struct mvpp2_queue_vector *v = (struct mvpp2_queue_vector *)(& port->qvecs) + (unsigned long)i;
      #line 1106 
      if (v->type != (unsigned int)MVPP2_QUEUE_VECTOR_SHARED) 
                                                              #line 1107 
                                                              goto __Cont;
      #line 1109 
      mvpp2_thread_write(port->priv,(unsigned int)v->sw_thread_id,(unsigned int)(((int)port->id + 5416) * 4),val);
    }
    #line 1103 
    __Cont: 
            #line 1103 
    i ++;
  }
  #line 1112 
  return;
}

#line 1115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static bool mvpp2_is_xlg(phy_interface_t interface)
{
  #line 1117 
  return (_Bool)((unsigned int)interface + 4294967275U <= 1U);
}

#line 1121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static void mvpp22_gop_init_rgmii(struct mvpp2_port *port)
{
  #line 1124 
  u32 val;
  #line 1123 
  struct mvpp2 *priv = port->priv;
  #line 1126 
  regmap_read(priv->sysctrl_base,4368U,& val);
  #line 1127 
  val |= 2U;
  #line 1128 
  regmap_write(priv->sysctrl_base,4368U,val);
  #line 1130 
  regmap_read(priv->sysctrl_base,4384U,& val);
  #line 1131 
  if (port->gop_id == 2) 
                         #line 1132 
                         val |= 5U;
  else 
    #line 1133 
    if (port->gop_id == 3) 
                           #line 1134 
                           val |= 2U;
  #line 1135 
  regmap_write(priv->sysctrl_base,4384U,val);
  #line 1136 
  return;
}

#line 1138  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static void mvpp22_gop_init_sgmii(struct mvpp2_port *port)
{
  #line 1141 
  u32 val;
  #line 1140 
  struct mvpp2 *priv = port->priv;
  #line 1143 
  regmap_read(priv->sysctrl_base,4368U,& val);
  #line 1144 
  val |= 536870914U;
  #line 1146 
  regmap_write(priv->sysctrl_base,4368U,val);
  #line 1148 
  if (port->gop_id > 1) {
    #line 1149 
    regmap_read(priv->sysctrl_base,4384U,& val);
    #line 1150 
    if (port->gop_id == 2) 
                           #line 1151 
                           val &= 4294967294U;
    else 
      #line 1152 
      if (port->gop_id == 3) 
                             #line 1153 
                             val &= 4294967293U;
    #line 1154 
    regmap_write(priv->sysctrl_base,4384U,val);
  }
  #line 1156 
  return;
}

#line 1158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static void mvpp22_gop_init_10gkr(struct mvpp2_port *port)
{
  #line 1163 
  u32 val;
  #line 1160 
  struct mvpp2 *priv = port->priv;
  #line 1161 
  void *mpcs = priv->iface_base + (unsigned long)((port->gop_id + 7) * 4096);
  #line 1162 
  void *xpcs = priv->iface_base + (unsigned long)(port->gop_id * 4096 + 29696);
  #line 1165 
  val = readl(xpcs);
  #line 1166 
  val &= 4294967175U;
  #line 1168 
  val |= 64U;
  #line 1169 
  writel(val,xpcs);
  #line 1171 
  val = readl(mpcs + 20U);
  #line 1172 
  val &= 4294966271U;
  #line 1173 
  writel(val,mpcs + 20U);
  #line 1175 
  val = readl(mpcs + 332U);
  #line 1176 
  val &= 4294967183U;
  #line 1177 
  val |= 16U;
  #line 1178 
  writel(val,mpcs + 332U);
  #line 1179 
  return;
}

#line 1181  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static int mvpp22_gop_init(struct mvpp2_port *port)
{
  #line 1184 
  u32 val;
  #line 1183 
  struct mvpp2 *priv = port->priv;
  #line 1186 
  if (priv->sysctrl_base == (struct regmap *)0) 
                                                #line 1187 
                                                return 0;
  #line 1189 
  switch ((unsigned int)port->phy_interface) {
    #line 1190 
    case (unsigned int)8: 
                          #line 1190 
    ;
    #line 1191 
    case (unsigned int)9: 
                          #line 1191 
    ;
    #line 1192 
    case (unsigned int)10: 
                           #line 1192 
    ;
    #line 1193 
    case (unsigned int)11: 
                           #line 1193 
    ;
    #line 1194 
    if (port->gop_id == 0) 
                           #line 1195 
                           goto invalid_conf;
    #line 1196 
    mvpp22_gop_init_rgmii(port);
    #line 1197 
    break;
    #line 1198 
    case (unsigned int)4: 
                          #line 1198 
    ;
    #line 1199 
    case (unsigned int)18: 
                           #line 1199 
    ;
    #line 1200 
    case (unsigned int)19: 
                           #line 1200 
    ;
    #line 1201 
    mvpp22_gop_init_sgmii(port);
    #line 1202 
    break;
    #line 1203 
    case (unsigned int)22: 
                           #line 1203 
    ;
    #line 1204 
    if (port->gop_id != 0) 
                           #line 1205 
                           goto invalid_conf;
    #line 1206 
    mvpp22_gop_init_10gkr(port);
    #line 1207 
    break;
    #line 1208 
    default: 
             #line 1208 
    ;
    #line 1209 
    goto unsupported_conf;
  }
  #line 1212 
  regmap_read(priv->sysctrl_base,4372U,& val);
  #line 1213 
  val = (((unsigned int)(1UL << port->gop_id) << 28U) | (unsigned int)(1UL << port->gop_id)) | val;
  #line 1215 
  regmap_write(priv->sysctrl_base,4372U,val);
  #line 1217 
  regmap_read(priv->sysctrl_base,4368U,& val);
  #line 1218 
  val |= 2147483648U;
  #line 1219 
  regmap_write(priv->sysctrl_base,4368U,val);
  #line 1221 
  regmap_read(priv->sysctrl_base,4360U,& val);
  #line 1222 
  val |= 64U;
  #line 1223 
  regmap_write(priv->sysctrl_base,4360U,val);
  #line 1225 
  unsupported_conf: 
                    #line 1225 
  ;
  #line 1226 
  return 0;
  #line 1228 
  invalid_conf: 
                #line 1228 
  ;
  #line 1229 
  netdev_err(port->dev,(char *)"Invalid port configuration\n");
  #line 1230 
  return -22;
}

#line 1233  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static void mvpp22_gop_unmask_irq(struct mvpp2_port *port)
{
  #line 1235 
  u32 val;
  #line 1237 
  if ((int)phy_interface_mode_is_rgmii(port->phy_interface) != 0) 
                                                                  #line 1237 
                                                                  goto _LOR;
  else {
    #line 1237 
    if ((int)phy_interface_mode_is_8023z(port->phy_interface) != 0) 
                                                                    #line 1237 
                                                                    goto _LOR;
    else 
      #line 1238 
      if (port->phy_interface == (unsigned int)PHY_INTERFACE_MODE_SGMII) {
        #line 1237 
        _LOR: {
                #line 1241 
                val = readl(port->base + 164U);
                #line 1242 
                val |= 2U;
                #line 1243 
                writel(val,port->base + 164U);
              }
      }
  }
  #line 1246 
  if (port->gop_id == 0) {
    #line 1248 
    val = readl(port->base + 348U);
    #line 1249 
    if ((int)mvpp2_is_xlg(port->phy_interface) != 0) 
                                                     #line 1250 
                                                     val |= 2U; else 
                                                                  #line 1252 
                                                                  val |= 4U;
    #line 1253 
    writel(val,port->base + 348U);
  }
  #line 1255 
  return;
}

#line 1257  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static void mvpp22_gop_mask_irq(struct mvpp2_port *port)
{
  #line 1259 
  u32 val;
  #line 1261 
  if (port->gop_id == 0) {
    #line 1262 
    val = readl(port->base + 348U);
    #line 1263 
    val &= 4294967289U;
    #line 1265 
    writel(val,port->base + 348U);
  }
  #line 1268 
  if ((int)phy_interface_mode_is_rgmii(port->phy_interface) != 0) 
                                                                  #line 1268 
                                                                  goto _LOR;
  else {
    #line 1268 
    if ((int)phy_interface_mode_is_8023z(port->phy_interface) != 0) 
                                                                    #line 1268 
                                                                    goto _LOR;
    else 
      #line 1269 
      if (port->phy_interface == (unsigned int)PHY_INTERFACE_MODE_SGMII) {
        #line 1268 
        _LOR: {
                #line 1271 
                val = readl(port->base + 164U);
                #line 1272 
                val &= 4294967293U;
                #line 1273 
                writel(val,port->base + 164U);
              }
      }
  }
  #line 1275 
  return;
}

#line 1277  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static void mvpp22_gop_setup_irq(struct mvpp2_port *port)
{
  #line 1279 
  u32 val;
  #line 1281 
  if (port->phylink != (struct phylink *)0) 
                                            #line 1281 
                                            goto _LOR;
  else {
    #line 1281 
    if ((int)phy_interface_mode_is_rgmii(port->phy_interface) != 0) 
                                                                    #line 1281 
                                                                    goto _LOR;
    else {
      #line 1282 
      if ((int)phy_interface_mode_is_8023z(port->phy_interface) != 0) 
        #line 1281 
        goto _LOR;
      else 
        #line 1283 
        if (port->phy_interface == (unsigned int)PHY_INTERFACE_MODE_SGMII) {
          #line 1281 
          _LOR: {
                  #line 1285 
                  val = readl(port->base + 36U);
                  #line 1286 
                  val |= 2U;
                  #line 1287 
                  writel(val,port->base + 36U);
                }
        }
    }
  }
  #line 1290 
  if (port->gop_id == 0) {
    #line 1291 
    val = readl(port->base + 280U);
    #line 1292 
    val |= 2U;
    #line 1293 
    writel(val,port->base + 280U);
  }
  #line 1296 
  mvpp22_gop_unmask_irq(port);
  #line 1297 
  return;
}

#line 1309  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static int mvpp22_comphy_init(struct mvpp2_port *port)
{
  #line 1311 
  int ret;
  #line 1313 
  if (port->comphy == (struct phy *)0) 
                                       #line 1314 
                                       return 0;
  #line 1316 
  ret = phy_set_mode_ext(port->comphy,(enum phy_mode)PHY_MODE_ETHERNET,(int)port->phy_interface);
  #line 1318 
  if (ret != 0) 
                #line 1319 
                return ret;
  #line 1321 
  return phy_power_on(port->comphy);
}

#line 1324  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static void mvpp2_port_enable(struct mvpp2_port *port)
{
  #line 1326 
  u32 val;
  #line 1329 
  if (port->gop_id == 0) {
    #line 1329 
    if ((int)mvpp2_is_xlg(port->phy_interface) != 0) {
      #line 1330 
      val = readl(port->base + 256U);
      #line 1331 
      val |= 1U;
      #line 1332 
      val &= 4294950911U;
      #line 1333 
      writel(val,port->base + 256U);
    }
    else 
         #line 1329 
         goto _LAND;
  }
  else {
    #line 1329 
    _LAND: {
             #line 1335 
             val = readl(port->base);
             #line 1336 
             val |= 1U;
             #line 1337 
             val |= 32768U;
             #line 1338 
             writel(val,port->base);
           }
  }
  #line 1340 
  return;
}

#line 1342  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static void mvpp2_port_disable(struct mvpp2_port *port)
{
  #line 1344 
  u32 val;
  #line 1347 
  if (port->gop_id == 0) {
    #line 1347 
    if ((int)mvpp2_is_xlg(port->phy_interface) != 0) {
      #line 1348 
      val = readl(port->base + 256U);
      #line 1349 
      val &= 4294967294U;
      #line 1350 
      writel(val,port->base + 256U);
    }
  }
  #line 1353 
  val = readl(port->base);
  #line 1354 
  val &= 4294967294U;
  #line 1355 
  writel(val,port->base);
  #line 1356 
  return;
}

#line 1359  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static void mvpp2_port_periodic_xon_disable(struct mvpp2_port *port)
{
  #line 1361 
  u32 val;
  #line 1363 
  val = readl(port->base + 4U) & 4294967293U;
  #line 1365 
  writel(val,port->base + 4U);
  #line 1366 
  return;
}

#line 1369  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static void mvpp2_port_loopback_set(struct mvpp2_port *port, struct phylink_link_state *state)
{
  #line 1372 
  u32 val;
  #line 1374 
  val = readl(port->base + 4U);
  #line 1376 
  if (state->speed == 1000) 
                            #line 1377 
                            val |= 32U; else 
                                             #line 1379 
                                             val &= 4294967263U;
  #line 1381 
  if ((int)phy_interface_mode_is_8023z(port->phy_interface) != 0) 
                                                                  #line 1381 
                                                                  goto _LOR;
  else 
    #line 1381 
    if (port->phy_interface == (unsigned int)PHY_INTERFACE_MODE_SGMII) 
      #line 1381 
      _LOR: 
            #line 1383 
            val |= 64U; else 
                             #line 1385 
                             val &= 4294967231U;
  #line 1387 
  writel(val,port->base + 4U);
  #line 1388 
  return;
}

#line 1396  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static u64 mvpp2_read_count(struct mvpp2_port *port, struct mvpp2_ethtool_counter *counter)
{
  #line 1399 
  u64 val;
  #line 1401 
  val = (unsigned long long)readl(port->stats_base + (unsigned long)counter->offset);
  #line 1402 
  if ((int)counter->reg_is_64b != 0) {
    #line 1403 
    val = ((unsigned long long)readl(port->stats_base + ((unsigned long)counter->offset + (unsigned long)4U)) << 32) + val;
  }
  #line 1405 
  return val;
}

#line 1413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static u32 mvpp2_read_index(struct mvpp2 *priv, u32 index, u32 reg)
{
  #line 1415 
  mvpp2_write(priv,28736U,index);
  #line 1416 
  return mvpp2_read(priv,reg);
}

#line 1428  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static struct mvpp2_ethtool_counter mvpp2_ethtool_mib_regs[27U] = {{.string = {(char)'g', (char)'o', (char)'o', (char)'d', (char)'_', (char)'o', (char)'c', (char)'t', (char)'e', (char)'t', (char)'s', (char)'_', (char)'r', (char)'e', (char)'c', (char)'e', (char)'i', (char)'v', (char)'e', (char)'d'}, .reg_is_64b = (_Bool)1}, {.offset = 8U, .string = {(char)'b', (char)'a', (char)'d', (char)'_', (char)'o', (char)'c', (char)'t', (char)'e', (char)'t', (char)'s', (char)'_', (char)'r', (char)'e', (char)'c', (char)'e', (char)'i', (char)'v', (char)'e', (char)'d'}}, {.offset = 12U, .string = {(char)'c', (char)'r', (char)'c', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s', (char)'_', (char)'s', (char)'e', (char)'n', (char)'t'}}, {.offset = 16U, .string = {(char)'u', (char)'n', (char)'i', (char)'c', (char)'a', (char)'s', (char)'t', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)'_', (char)'r', (char)'e', (char)'c', (char)'e', (char)'i', (char)'v', (char)'e', (char)'d'}}, {.offset = 24U, .string = {(char)'b', (char)'r', (char)'o', (char)'a', (char)'d', (char)'c', (char)'a', (char)'s', (char)'t', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)'_', (char)'r', (char)'e', (char)'c', (char)'e', (char)'i', (char)'v', (char)'e', (char)'d'}}, {.offset = 28U, .string = {(char)'m', (char)'u', (char)'l', (char)'t', (char)'i', (char)'c', (char)'a', (char)'s', (char)'t', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)'_', (char)'r', (char)'e', (char)'c', (char)'e', (char)'i', (char)'v', (char)'e', (char)'d'}}, {.offset = 32U, .string = {(char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)'_', (char)'6', (char)'4', (char)'_', (char)'o', (char)'c', (char)'t', (char)'e', (char)'t', (char)'s'}}, {.offset = 36U, .string = {(char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)'_', (char)'6', (char)'5', (char)'_', (char)'t', (char)'o', (char)'_', (char)'1', (char)'2', (char)'7', (char)'_', (char)'o', (char)'c', (char)'t', (char)'e', (char)'t'}}, {.offset = 40U, .string = {(char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)'_', (char)'1', (char)'2', (char)'8', (char)'_', (char)'t', (char)'o', (char)'_', (char)'2', (char)'5', (char)'5', (char)'_', (char)'o', (char)'c', (char)'t', (char)'e', (char)'t'}}, {.offset = 44U, .string = {(char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)'_', (char)'2', (char)'5', (char)'6', (char)'_', (char)'t', (char)'o', (char)'_', (char)'5', (char)'1', (char)'1', (char)'_', (char)'o', (char)'c', (char)'t', (char)'e', (char)'t'}}, {.offset = 48U, .string = {(char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)'_', (char)'5', (char)'1', (char)'2', (char)'_', (char)'t', (char)'o', (char)'_', (char)'1', (char)'0', (char)'2', (char)'3', (char)'_', (char)'o', (char)'c', (char)'t', (char)'e', (char)'t'}}, {.offset = 52U, .string = {(char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)'_', (char)'1', (char)'0', (char)'2', (char)'4', (char)'_', (char)'t', (char)'o', (char)'_', (char)'m', (char)'a', (char)'x', (char)'_', (char)'o', (char)'c', (char)'t', (char)'e', (char)'t'}}, {.offset = 56U, .string = {(char)'g', (char)'o', (char)'o', (char)'d', (char)'_', (char)'o', (char)'c', (char)'t', (char)'e', (char)'t', (char)'s', (char)'_', (char)'s', (char)'e', (char)'n', (char)'t'}, .reg_is_64b = (_Bool)1}, {.offset = 64U, .string = {(char)'u', (char)'n', (char)'i', (char)'c', (char)'a', (char)'s', (char)'t', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)'_', (char)'s', (char)'e', (char)'n', (char)'t'}}, {.offset = 72U, .string = {(char)'m', (char)'u', (char)'l', (char)'t', (char)'i', (char)'c', (char)'a', (char)'s', (char)'t', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)'_', (char)'s', (char)'e', (char)'n', (char)'t'}}, {.offset = 76U, .string = {(char)'b', (char)'r', (char)'o', (char)'a', (char)'d', (char)'c', (char)'a', (char)'s', (char)'t', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)'_', (char)'s', (char)'e', (char)'n', (char)'t'}}, {.offset = 84U, .string = {(char)'f', (char)'c', (char)'_', (char)'s', (char)'e', (char)'n', (char)'t'}}, {.offset = 88U, .string = {(char)'f', (char)'c', (char)'_', (char)'r', (char)'e', (char)'c', (char)'e', (char)'i', (char)'v', (char)'e', (char)'d'}}, {.offset = 92U, .string = {(char)'r', (char)'x', (char)'_', (char)'f', (char)'i', (char)'f', (char)'o', (char)'_', (char)'o', (char)'v', (char)'e', (char)'r', (char)'r', (char)'u', (char)'n'}}, {.offset = 96U, .string = {(char)'u', (char)'n', (char)'d', (char)'e', (char)'r', (char)'s', (char)'i', (char)'z', (char)'e', (char)'_', (char)'r', (char)'e', (char)'c', (char)'e', (char)'i', (char)'v', (char)'e', (char)'d'}}, {.offset = 100U, .string = {(char)'f', (char)'r', (char)'a', (char)'g', (char)'m', (char)'e', (char)'n', (char)'t', (char)'s', (char)'_', (char)'r', (char)'e', (char)'c', (char)'e', (char)'i', (char)'v', (char)'e', (char)'d'}}, {.offset = 104U, .string = {(char)'o', (char)'v', (char)'e', (char)'r', (char)'s', (char)'i', (char)'z', (char)'e', (char)'_', (char)'r', (char)'e', (char)'c', (char)'e', (char)'i', (char)'v', (char)'e', (char)'d'}}, {.offset = 108U, .string = {(char)'j', (char)'a', (char)'b', (char)'b', (char)'e', (char)'r', (char)'_', (char)'r', (char)'e', (char)'c', (char)'e', (char)'i', (char)'v', (char)'e', (char)'d'}}, {.offset = 112U, .string = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'e', (char)'c', (char)'e', (char)'i', (char)'v', (char)'e', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r'}}, {.offset = 116U, .string = {(char)'b', (char)'a', (char)'d', (char)'_', (char)'c', (char)'r', (char)'c', (char)'_', (char)'e', (char)'v', (char)'e', (char)'n', (char)'t'}}, {.offset = 120U, .string = {(char)'c', (char)'o', (char)'l', (char)'l', (char)'i', (char)'s', (char)'i', (char)'o', (char)'n'}}, {.offset = 124U, .string = {(char)'l', (char)'a', (char)'t', (char)'e', (char)'_', (char)'c', (char)'o', (char)'l', (char)'l', (char)'i', (char)'s', (char)'i', (char)'o', (char)'n'}}};
#line 1458  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static struct mvpp2_ethtool_counter mvpp2_ethtool_port_regs[2U] = {{.offset = 28672U, .string = {(char)'r', (char)'x', (char)'_', (char)'f', (char)'i', (char)'f', (char)'o', (char)'_', (char)'o', (char)'r', (char)'_', (char)'p', (char)'a', (char)'r', (char)'s', (char)'e', (char)'r', (char)'_', (char)'o', (char)'v', (char)'e', (char)'r', (char)'r', (char)'u', (char)'n', (char)'_', (char)'d', (char)'r', (char)'o', (char)'p', (char)'s'}}, {.offset = 28704U, .string = {(char)'r', (char)'x', (char)'_', (char)'c', (char)'l', (char)'a', (char)'s', (char)'s', (char)'i', (char)'f', (char)'i', (char)'e', (char)'r', (char)'_', (char)'d', (char)'r', (char)'o', (char)'p', (char)'s'}}};
#line 1463  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static struct mvpp2_ethtool_counter mvpp2_ethtool_txq_regs[9U] = {{.offset = 28928U, .string = {(char)'t', (char)'x', (char)'q', (char)'_', (char)'%', (char)'d', (char)'_', (char)'d', (char)'e', (char)'s', (char)'c', (char)'_', (char)'e', (char)'n', (char)'q', (char)'u', (char)'e', (char)'u', (char)'e'}}, {.offset = 28932U, .string = {(char)'t', (char)'x', (char)'q', (char)'_', (char)'%', (char)'d', (char)'_', (char)'d', (char)'e', (char)'s', (char)'c', (char)'_', (char)'e', (char)'n', (char)'q', (char)'u', (char)'e', (char)'u', (char)'e', (char)'_', (char)'t', (char)'o', (char)'_', (char)'d', (char)'d', (char)'r'}}, {.offset = 28936U, .string = {(char)'t', (char)'x', (char)'q', (char)'_', (char)'%', (char)'d', (char)'_', (char)'b', (char)'u', (char)'f', (char)'f', (char)'_', (char)'e', (char)'u', (char)'q', (char)'u', (char)'e', (char)'u', (char)'e', (char)'_', (char)'t', (char)'o', (char)'_', (char)'d', (char)'d', (char)'r'}}, {.offset = 28940U, .string = {(char)'t', (char)'x', (char)'q', (char)'_', (char)'%', (char)'d', (char)'_', (char)'d', (char)'e', (char)'s', (char)'c', (char)'_', (char)'h', (char)'a', (char)'r', (char)'d', (char)'w', (char)'a', (char)'r', (char)'e', (char)'_', (char)'f', (char)'o', (char)'r', (char)'w', (char)'a', (char)'r', (char)'d', (char)'e', (char)'d'}}, {.offset = 28976U, .string = {(char)'t', (char)'x', (char)'q', (char)'_', (char)'%', (char)'d', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s', (char)'_', (char)'d', (char)'e', (char)'q', (char)'u', (char)'e', (char)'u', (char)'e', (char)'d'}}, {.offset = 29184U, .string = {(char)'t', (char)'x', (char)'q', (char)'_', (char)'%', (char)'d', (char)'_', (char)'q', (char)'u', (char)'e', (char)'u', (char)'e', (char)'_', (char)'f', (char)'u', (char)'l', (char)'l', (char)'_', (char)'d', (char)'r', (char)'o', (char)'p', (char)'s'}}, {.offset = 29188U, .string = {(char)'t', (char)'x', (char)'q', (char)'_', (char)'%', (char)'d', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s', (char)'_', (char)'e', (char)'a', (char)'r', (char)'l', (char)'y', (char)'_', (char)'d', (char)'r', (char)'o', (char)'p', (char)'s'}}, {.offset = 29192U, .string = {(char)'t', (char)'x', (char)'q', (char)'_', (char)'%', (char)'d', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s', (char)'_', (char)'b', (char)'m', (char)'_', (char)'d', (char)'r', (char)'o', (char)'p', (char)'s'}}, {.offset = 29196U, .string = {(char)'t', (char)'x', (char)'q', (char)'_', (char)'%', (char)'d', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s', (char)'_', (char)'r', (char)'e', (char)'p', (char)'_', (char)'b', (char)'m', (char)'_', (char)'d', (char)'r', (char)'o', (char)'p', (char)'s'}}};
#line 1475  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static struct mvpp2_ethtool_counter mvpp2_ethtool_rxq_regs[4U] = {{.offset = 28960U, .string = {(char)'r', (char)'x', (char)'q', (char)'_', (char)'%', (char)'d', (char)'_', (char)'d', (char)'e', (char)'s', (char)'c', (char)'_', (char)'e', (char)'n', (char)'q', (char)'u', (char)'e', (char)'u', (char)'e'}}, {.offset = 29216U, .string = {(char)'r', (char)'x', (char)'q', (char)'_', (char)'%', (char)'d', (char)'_', (char)'q', (char)'u', (char)'e', (char)'u', (char)'e', (char)'_', (char)'f', (char)'u', (char)'l', (char)'l', (char)'_', (char)'d', (char)'r', (char)'o', (char)'p', (char)'s'}}, {.offset = 29220U, .string = {(char)'r', (char)'x', (char)'q', (char)'_', (char)'%', (char)'d', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s', (char)'_', (char)'e', (char)'a', (char)'r', (char)'l', (char)'y', (char)'_', (char)'d', (char)'r', (char)'o', (char)'p', (char)'s'}}, {.offset = 29224U, .string = {(char)'r', (char)'x', (char)'q', (char)'_', (char)'%', (char)'d', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s', (char)'_', (char)'b', (char)'m', (char)'_', (char)'d', (char)'r', (char)'o', (char)'p', (char)'s'}}};
#line 1487  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static void mvpp2_ethtool_get_strings(struct net_device *netdev, u32 sset, u8 *data)
{
  #line 1491 
  int i;
  #line 1491 
  int q;
  #line 1490 
  struct mvpp2_port *port = netdev_priv(netdev);
  #line 1493 
  if (sset != 1U) 
                  #line 1494 
                  return;
  #line 1496 
  i = 0;
  #line 1496 
  while ((unsigned int)i <= 26U) {
    #line 1497 
    strscpy((char *)data,(char *)(& mvpp2_ethtool_mib_regs[i].string),32UL);
    #line 1499 
    data += 32U;
    #line 1496 
    i ++;
  }
  #line 1502 
  i = 0;
  #line 1502 
  while ((unsigned int)i <= 1U) {
    #line 1503 
    strscpy((char *)data,(char *)(& mvpp2_ethtool_port_regs[i].string),32UL);
    #line 1505 
    data += 32U;
    #line 1502 
    i ++;
  }
  #line 1508 
  q = 0;
  #line 1508 
  while (port->ntxqs > (unsigned int)q) {
    #line 1509 
    i = 0;
    #line 1509 
    while ((unsigned int)i <= 8U) {
      #line 1510 
      snprintf((char *)data,32UL,(char *)(& mvpp2_ethtool_txq_regs[i].string),q);
      #line 1512 
      data += 32U;
      #line 1509 
      i ++;
    }
    #line 1508 
    q ++;
  }
  #line 1516 
  q = 0;
  #line 1516 
  while (port->nrxqs > (unsigned int)q) {
    #line 1517 
    i = 0;
    #line 1517 
    while ((unsigned int)i <= 3U) {
      #line 1518 
      snprintf((char *)data,32UL,(char *)(& mvpp2_ethtool_rxq_regs[i].string),q);
      #line 1521 
      data += 32U;
      #line 1517 
      i ++;
    }
    #line 1516 
    q ++;
  }
  #line 1524 
  return;
}

#line 1526  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static void mvpp2_read_stats(struct mvpp2_port *port)
{
  #line 1528 
  u64 *pstats;
  #line 1529 
  int i;
  #line 1529 
  int q;
  #line 1531 
  pstats = port->ethtool_stats;
  #line 1533 
  i = 0;
  #line 1533 
  while ((unsigned int)i <= 26U) {
    #line 1534 
    u64 *tmp;
    #line 1534 
    tmp = pstats;
    #line 1534 
    pstats ++;
    #line 1534 
    *tmp += mvpp2_read_count(port,& mvpp2_ethtool_mib_regs[i]);
    #line 1533 
    i ++;
  }
  #line 1536 
  i = 0;
  #line 1536 
  while ((unsigned int)i <= 1U) {
    #line 1539 
    u64 *tmp_1;
    #line 1539 
    tmp_1 = pstats;
    #line 1539 
    pstats ++;
    #line 1539 
    *tmp_1 += (unsigned long long)mvpp2_read(port->priv,
                   mvpp2_ethtool_port_regs[i].offset + (unsigned int)(
                   (int)port->id * 4));
    #line 1536 
    i ++;
  }
  #line 1541 
  q = 0;
  #line 1541 
  while (port->ntxqs > (unsigned int)q) {
    #line 1542 
    i = 0;
    #line 1542 
    while ((unsigned int)i <= 8U) {
      #line 1545 
      u64 *tmp_3;
      #line 1545 
      tmp_3 = pstats;
      #line 1545 
      pstats ++;
      #line 1545 
      *tmp_3 += (unsigned long long)mvpp2_read_index(port->priv,
                         (unsigned int)((((int)port->id << 3) | i) | 128),
                         mvpp2_ethtool_txq_regs[i].offset);
      #line 1542 
      i ++;
    }
    #line 1541 
    q ++;
  }
  #line 1550 
  q = 0;
  #line 1550 
  while (port->nrxqs > (unsigned int)q) {
    #line 1551 
    i = 0;
    #line 1551 
    while ((unsigned int)i <= 3U) {
      #line 1554 
      u64 *tmp_5;
      #line 1554 
      tmp_5 = pstats;
      #line 1554 
      pstats ++;
      #line 1554 
      *tmp_5 += (unsigned long long)mvpp2_read_index(port->priv,(unsigned int)((int)port->first_rxq + i),
                         mvpp2_ethtool_rxq_regs[i].offset);
      #line 1551 
      i ++;
    }
    #line 1550 
    q ++;
  }
  #line 1556 
  return;
}

#line 1557  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static void mvpp2_gather_hw_statistics(struct work_struct *work)
{
  #line 1560 
  void *__mptr;
  #line 1559 
  struct delayed_work *del_work = to_delayed_work(work);
  #line 1560 
  __mptr = (void *)del_work;
  #line 1560 
  struct mvpp2_port *port = ((struct mvpp2_port *)(__mptr + 18446744073709550016U));
  #line 1563 
  cif_mutex_lock_gather_stats_lock_of_mvpp2_port(& port->gather_stats_lock);
  #line 1565 
  mvpp2_read_stats(port);
  #line 1570 
  cancel_delayed_work(& port->stats_work);
  #line 1571 
  cif_queue_delayed_work((port->priv)->stats_queue,& port->stats_work,250UL);
  #line 1574 
  cif_mutex_unlock_gather_stats_lock_of_mvpp2_port(& port->gather_stats_lock);
  #line 1575 
  return;
}

#line 1577  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static void mvpp2_ethtool_get_stats(struct net_device *dev, struct ethtool_stats *stats, u64 *data)
{
  #line 1580 
  struct mvpp2_port *port = netdev_priv(dev);
  #line 1585 
  mvpp2_gather_hw_statistics(& port->stats_work.work);
  #line 1587 
  cif_mutex_lock_gather_stats_lock_of_mvpp2_port(& port->gather_stats_lock);
  #line 1588 
  memcpy((void *)data,(void *)port->ethtool_stats,((unsigned long)port->ntxqs * 72UL + (unsigned long)port->nrxqs * 32UL) + 232UL);
  #line 1590 
  cif_mutex_unlock_gather_stats_lock_of_mvpp2_port(& port->gather_stats_lock);
  #line 1591 
  return;
}

#line 1593  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static int mvpp2_ethtool_get_sset_count(struct net_device *dev, int sset)
{
  #line 1595 
  struct mvpp2_port *port = netdev_priv(dev);
  #line 1597 
  if (sset == 1) 
                 #line 1598 
                 return (int)((port->ntxqs * 9U + port->nrxqs * 4U) + 29U);
  #line 1600 
  return -95;
}

#line 1603  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static void mvpp2_mac_reset_assert(struct mvpp2_port *port)
{
  #line 1605 
  u32 val;
  #line 1607 
  val = readl(port->base + 8U) | 64U;
  #line 1609 
  writel(val,port->base + 8U);
  #line 1611 
  if ((port->priv)->hw_version == (unsigned int)MVPP22 && port->gop_id == 0) {
    #line 1612 
    val = readl(port->base + 256U) & 4294967293U;
    #line 1614 
    writel(val,port->base + 256U);
  }
  #line 1616 
  return;
}

#line 1618  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static void mvpp22_pcs_reset_assert(struct mvpp2_port *port)
{
  #line 1621 
  void *mpcs;
  #line 1621 
  void *xpcs;
  #line 1622 
  u32 val;
  #line 1620 
  struct mvpp2 *priv = port->priv;
  #line 1624 
  if ((port->priv)->hw_version != (unsigned int)MVPP22 || port->gop_id != 0) 
    #line 1625 
    return;
  #line 1627 
  mpcs = priv->iface_base + (unsigned long)((port->gop_id + 7) * 4096);
  #line 1628 
  xpcs = priv->iface_base + (unsigned long)(port->gop_id * 4096 + 29696);
  #line 1630 
  val = readl(mpcs + 332U);
  #line 1631 
  val &= 4294967288U;
  #line 1632 
  val |= 2048U;
  #line 1633 
  writel(val,mpcs + 332U);
  #line 1635 
  val = readl(xpcs);
  #line 1636 
  writel(val & 4294967294U,xpcs);
  #line 1637 
  return;
}

#line 1639  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static void mvpp22_pcs_reset_deassert(struct mvpp2_port *port)
{
  #line 1642 
  void *mpcs;
  #line 1642 
  void *xpcs;
  #line 1643 
  u32 val;
  #line 1641 
  struct mvpp2 *priv = port->priv;
  #line 1645 
  if ((port->priv)->hw_version != (unsigned int)MVPP22 || port->gop_id != 0) 
    #line 1646 
    return;
  #line 1648 
  mpcs = priv->iface_base + (unsigned long)((port->gop_id + 7) * 4096);
  #line 1649 
  xpcs = priv->iface_base + (unsigned long)(port->gop_id * 4096 + 29696);
  #line 1651 
  switch ((unsigned int)port->phy_interface) {
    #line 1652 
    case (unsigned int)22: 
                           #line 1652 
    ;
    #line 1653 
    val = readl(mpcs + 332U);
    #line 1654 
    val |= 7U;
    #line 1656 
    val &= 4294965247U;
    #line 1657 
    writel(val,mpcs + 332U);
    #line 1658 
    break;
    #line 1659 
    case (unsigned int)21: 
                           #line 1659 
    ;
    #line 1660 
    case (unsigned int)20: 
                           #line 1660 
    ;
    #line 1661 
    val = readl(xpcs);
    #line 1662 
    writel(val | 1U,xpcs);
    #line 1663 
    break;
    #line 1664 
    default: 
             #line 1664 
    ;
    #line 1665 
    break;
  }
  #line 1667 
  return;
}

#line 1670  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
__inline static void mvpp2_gmac_max_rx_size_set(struct mvpp2_port *port)
{
  #line 1672 
  u32 val;
  #line 1674 
  val = readl(port->base);
  #line 1675 
  val &= 4294934531U;
  #line 1676 
  val = (unsigned int)((port->pkt_size + -2) / 2 << 2) | val;
  #line 1678 
  writel(val,port->base);
  #line 1679 
  return;
}

#line 1682  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
__inline static void mvpp2_xlg_max_rx_size_set(struct mvpp2_port *port)
{
  #line 1684 
  u32 val;
  #line 1686 
  val = readl(port->base + 260U);
  #line 1687 
  val &= 4294959104U;
  #line 1688 
  val = (unsigned int)((port->pkt_size + -2) / 2) | val;
  #line 1690 
  writel(val,port->base + 260U);
  #line 1691 
  return;
}

#line 1694  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static void mvpp2_defaults_set(struct mvpp2_port *port)
{
  #line 1696 
  int tx_port_num;
  #line 1696 
  int val;
  #line 1696 
  int queue;
  #line 1696 
  int lrxq;
  #line 1698 
  if ((port->priv)->hw_version == (unsigned int)MVPP21) {
    #line 1700 
    val = (int)readl(port->base + 28U);
    #line 1701 
    val &= -8129;
    #line 1703 
    val |= 3712;
    #line 1704 
    writel((unsigned int)val,port->base + 28U);
  }
  #line 1708 
  tx_port_num = mvpp2_egress_port(port);
  #line 1709 
  mvpp2_write(port->priv,32768U,(unsigned int)tx_port_num);
  #line 1711 
  mvpp2_write(port->priv,32784U,0U);
  #line 1714 
  mvpp2_write(port->priv,32788U,0U);
  #line 1717 
  queue = 0;
  #line 1717 
  while (queue <= 7) {
    #line 1718 
    mvpp2_write(port->priv,(unsigned int)((queue << 2) + 32896),0U);
    #line 1717 
    queue ++;
  }
  #line 1724 
  mvpp2_write(port->priv,32792U,(port->priv)->tclk / 1000000U);
  #line 1726 
  val = (int)mvpp2_read(port->priv,32800U);
  #line 1727 
  val &= -1072693249;
  #line 1728 
  val |= 1048576;
  #line 1729 
  val |= 524287;
  #line 1730 
  mvpp2_write(port->priv,32800U,(unsigned int)val);
  #line 1731 
  val = -1;
  #line 1732 
  mvpp2_write(port->priv,32804U,(unsigned int)val);
  #line 1735 
  mvpp2_write(port->priv,(unsigned int)(((int)port->id + 80) * 4),2164260864U);
  #line 1740 
  lrxq = 0;
  #line 1740 
  while (port->nrxqs > (unsigned int)lrxq) {
    {
      #line 1741 
      queue = (int)(*(port->rxqs + (unsigned long)lrxq))->id;
      #line 1742 
      val = (int)mvpp2_read(port->priv,(unsigned int)((queue + 512) * 4));
      #line 1743 
      val |= 1023;
      #line 1745 
      mvpp2_write(port->priv,(unsigned int)((queue + 512) * 4),(unsigned int)val);
    }
    #line 1740 
    lrxq ++;
  }
  #line 1749 
  mvpp2_interrupts_disable(port);
  #line 1750 
  return;
}

#line 1753  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static void mvpp2_ingress_enable(struct mvpp2_port *port)
{
  #line 1755 
  u32 val;
  #line 1756 
  int lrxq;
  #line 1756 
  int queue;
  #line 1758 
  lrxq = 0;
  #line 1758 
  while (port->nrxqs > (unsigned int)lrxq) {
    #line 1759 
    queue = (int)(*(port->rxqs + (unsigned long)lrxq))->id;
    #line 1760 
    val = mvpp2_read(port->priv,(unsigned int)((queue + 512) * 4));
    #line 1761 
    val &= 2147483647U;
    #line 1762 
    mvpp2_write(port->priv,(unsigned int)((queue + 512) * 4),val);
    #line 1758 
    lrxq ++;
  }
  #line 1764 
  return;
}

#line 1766  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static void mvpp2_ingress_disable(struct mvpp2_port *port)
{
  #line 1768 
  u32 val;
  #line 1769 
  int lrxq;
  #line 1769 
  int queue;
  #line 1771 
  lrxq = 0;
  #line 1771 
  while (port->nrxqs > (unsigned int)lrxq) {
    #line 1772 
    queue = (int)(*(port->rxqs + (unsigned long)lrxq))->id;
    #line 1773 
    val = mvpp2_read(port->priv,(unsigned int)((queue + 512) * 4));
    #line 1774 
    val |= 2147483648U;
    #line 1775 
    mvpp2_write(port->priv,(unsigned int)((queue + 512) * 4),val);
    #line 1771 
    lrxq ++;
  }
  #line 1777 
  return;
}

#line 1782  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static void mvpp2_egress_enable(struct mvpp2_port *port)
{
  #line 1784 
  u32 qmap;
  #line 1785 
  int queue;
  #line 1786 
  int tx_port_num = mvpp2_egress_port(port);
  #line 1789 
  qmap = 0U;
  #line 1790 
  queue = 0;
  #line 1790 
  while (port->ntxqs > (unsigned int)queue) {
    {
      #line 1791 
      struct mvpp2_tx_queue *txq = *(port->txqs + (unsigned long)queue);
      #line 1793 
      if (txq->descs != (struct mvpp2_tx_desc *)0) 
                                                   #line 1794 
                                                   qmap = (unsigned int)(1 << queue) | qmap;
    }
    #line 1790 
    queue ++;
  }
  #line 1797 
  mvpp2_write(port->priv,32768U,(unsigned int)tx_port_num);
  #line 1798 
  mvpp2_write(port->priv,32772U,qmap);
  #line 1799 
  return;
}

#line 1804  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static void mvpp2_egress_disable(struct mvpp2_port *port)
{
  #line 1806 
  u32 reg_data;
  #line 1807 
  int delay;
  #line 1808 
  int tx_port_num = mvpp2_egress_port(port);
  #line 1811 
  mvpp2_write(port->priv,32768U,(unsigned int)tx_port_num);
  #line 1812 
  reg_data = mvpp2_read(port->priv,32772U) & 255U;
  #line 1814 
  if (reg_data != 0U) 
                      #line 1815 
                      mvpp2_write(port->priv,32772U,reg_data << 8);
  #line 1819 
  delay = 0;
  #line 1820 
  while (1) {
    #line 1821 
    if (delay > 999) {
      #line 1822 
      netdev_warn(port->dev,(char *)"Tx stop timed out, status=0x%08x\n",reg_data);
      #line 1825 
      break;
    }
    #line 1827 
    __const_udelay(4295000UL);
    #line 1828 
    delay ++;
    #line 1833 
    reg_data = mvpp2_read(port->priv,32772U);
    #line 1834 
    if (! ((reg_data & 255U) != 0U)) 
                                     #line 1820 
                                     break;
  }
  #line 1835 
  return;
}

#line 1841  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
__inline static int mvpp2_rxq_received(struct mvpp2_port *port, int rxq_id)
{
  #line 1843 
  u32 val = mvpp2_read(port->priv,(unsigned int)((rxq_id + 3328) * 4));
  #line 1845 
  return (int)val & 16383;
}

#line 1852  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
__inline static void mvpp2_rxq_status_update(struct mvpp2_port *port, int rxq_id, int used_count, int free_count)
{
  #line 1858 
  u32 val = (unsigned int)((free_count << 16) | used_count);
  #line 1860 
  mvpp2_write(port->priv,(unsigned int)((rxq_id + 3072) * 4),val);
  #line 1861 
  return;
}

#line 1865  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
__inline static struct mvpp2_rx_desc *mvpp2_rxq_next_desc_get(struct mvpp2_rx_queue *rxq)
{
  #line 1867 
  int rx_desc = rxq->next_desc_to_proc;
  #line 1869 
  if (rxq->last_desc > rx_desc) 
                                #line 1869 
                                rxq->next_desc_to_proc = rx_desc + 1; else 
                                                                    #line 1869 
                                                                    rxq->next_desc_to_proc = 0;
  #line 1870 
  __builtin_prefetch((void const *)((void *)(rxq->descs + (unsigned long)rxq->next_desc_to_proc)));
  #line 1871 
  return rxq->descs + (unsigned long)rx_desc;
}

#line 1875  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static void mvpp2_rxq_offset_set(struct mvpp2_port *port, int prxq, int offset)
{
  #line 1878 
  u32 val;
  #line 1881 
  offset >>= 5;
  #line 1883 
  val = mvpp2_read(port->priv,(unsigned int)((prxq + 512) * 4));
  #line 1884 
  val &= 2415919103U;
  #line 1887 
  val = ((unsigned int)(offset << 28) & 1879048192U) | val;
  #line 1890 
  mvpp2_write(port->priv,(unsigned int)((prxq + 512) * 4),val);
  #line 1891 
  return;
}

#line 1897  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static struct mvpp2_tx_desc *mvpp2_txq_next_desc_get(struct mvpp2_tx_queue *txq)
{
  #line 1899 
  int tx_desc = txq->next_desc_to_proc;
  #line 1901 
  if (txq->last_desc > tx_desc) 
                                #line 1901 
                                txq->next_desc_to_proc = tx_desc + 1; else 
                                                                    #line 1901 
                                                                    txq->next_desc_to_proc = 0;
  #line 1902 
  return txq->descs + (unsigned long)tx_desc;
}

#line 1910  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static void mvpp2_aggr_txq_pend_desc_add(struct mvpp2_port *port, int pending)
{
  #line 1914 
  int pscr_ret__;
  #line 1913 
  ;
  #line 1914 
  __this_cpu_preempt_check((char *)"read");
  {
    #line 1914 
    void *__vpp_verify = (void *)0;
    #line 1914 
    void *tmp = __vpp_verify;
  }
  #line 1914 
  switch (4UL) {
    #line 1914 
    int pfo_ret___2;
    #line 1914 
    int pfo_ret__;
    #line 1914 
    int pfo_ret___0;
    #line 1914 
    int pfo_ret___1;
    #line 1914 
    case (unsigned long)1: 
                           #line 1914 
    ;
    #line 1914 
    switch (4UL) {
      #line 1914 
      case (unsigned long)1: 
                             #line 1914 
      ;
      #line 1915 
      ldv_inline_asm();
      #line 1914 
      break;
      #line 1914 
      case (unsigned long)2: 
                             #line 1914 
      ;
      #line 1915 
      ldv_inline_asm();
      #line 1914 
      break;
      #line 1914 
      case (unsigned long)4: 
                             #line 1914 
      ;
      #line 1915 
      ldv_inline_asm();
      #line 1914 
      break;
      #line 1914 
      case (unsigned long)8: 
                             #line 1914 
      ;
      #line 1915 
      ldv_inline_asm();
      #line 1914 
      break;
      #line 1914 
      default: 
               #line 1914 
      ;
      #line 1914 
      __bad_percpu_size();
    }
    #line 1914 
    pscr_ret__ = pfo_ret__;
    #line 1914 
    break;
    #line 1914 
    case (unsigned long)2: 
                           #line 1914 
    ;
    #line 1914 
    switch (4UL) {
      #line 1914 
      case (unsigned long)1: 
                             #line 1914 
      ;
      #line 1915 
      ldv_inline_asm();
      #line 1914 
      break;
      #line 1914 
      case (unsigned long)2: 
                             #line 1914 
      ;
      #line 1915 
      ldv_inline_asm();
      #line 1914 
      break;
      #line 1914 
      case (unsigned long)4: 
                             #line 1914 
      ;
      #line 1915 
      ldv_inline_asm();
      #line 1914 
      break;
      #line 1914 
      case (unsigned long)8: 
                             #line 1914 
      ;
      #line 1915 
      ldv_inline_asm();
      #line 1914 
      break;
      #line 1914 
      default: 
               #line 1914 
      ;
      #line 1914 
      __bad_percpu_size();
    }
    #line 1914 
    pscr_ret__ = pfo_ret___0;
    #line 1914 
    break;
    #line 1914 
    case (unsigned long)4: 
                           #line 1914 
    ;
    #line 1914 
    switch (4UL) {
      #line 1914 
      case (unsigned long)1: 
                             #line 1914 
      ;
      #line 1915 
      ldv_inline_asm();
      #line 1914 
      break;
      #line 1914 
      case (unsigned long)2: 
                             #line 1914 
      ;
      #line 1915 
      ldv_inline_asm();
      #line 1914 
      break;
      #line 1914 
      case (unsigned long)4: 
                             #line 1914 
      ;
      #line 1915 
      ldv_inline_asm();
      #line 1914 
      break;
      #line 1914 
      case (unsigned long)8: 
                             #line 1914 
      ;
      #line 1915 
      ldv_inline_asm();
      #line 1914 
      break;
      #line 1914 
      default: 
               #line 1914 
      ;
      #line 1914 
      __bad_percpu_size();
    }
    #line 1914 
    pscr_ret__ = pfo_ret___1;
    #line 1914 
    break;
    #line 1914 
    case (unsigned long)8: 
                           #line 1914 
    ;
    #line 1914 
    switch (4UL) {
      #line 1914 
      case (unsigned long)1: 
                             #line 1914 
      ;
      #line 1915 
      ldv_inline_asm();
      #line 1914 
      break;
      #line 1914 
      case (unsigned long)2: 
                             #line 1914 
      ;
      #line 1915 
      ldv_inline_asm();
      #line 1914 
      break;
      #line 1914 
      case (unsigned long)4: 
                             #line 1914 
      ;
      #line 1915 
      ldv_inline_asm();
      #line 1914 
      break;
      #line 1914 
      case (unsigned long)8: 
                             #line 1914 
      ;
      #line 1915 
      ldv_inline_asm();
      #line 1914 
      break;
      #line 1914 
      default: 
               #line 1914 
      ;
      #line 1914 
      __bad_percpu_size();
    }
    #line 1914 
    pscr_ret__ = pfo_ret___2;
    #line 1914 
    break;
    #line 1914 
    default: 
             #line 1914 
    ;
    #line 1914 
    __bad_size_call_parameter();
    #line 1914 
    break;
  }
  #line 1913 
  ;
  #line 1913 
  ;
  #line 1913 
  mvpp2_thread_write(port->priv,mvpp2_cpu_to_thread(port->priv,pscr_ret__),8336U,(unsigned int)pending);
  #line 1917 
  return;
}

#line 1924  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static int mvpp2_aggr_desc_num_check(struct mvpp2_port *port, struct mvpp2_tx_queue *aggr_txq, int num)
{
  #line 1927 
  if (aggr_txq->count + num > 256) {
    #line 1930 
    int pscr_ret__;
    #line 1930 
    __this_cpu_preempt_check((char *)"read");
    {
      #line 1930 
      void *__vpp_verify = (void *)0;
      #line 1930 
      void *tmp = __vpp_verify;
    }
    #line 1930 
    switch (4UL) {
      #line 1930 
      int pfo_ret__;
      #line 1930 
      int pfo_ret___0;
      #line 1930 
      int pfo_ret___1;
      #line 1930 
      int pfo_ret___2;
      #line 1930 
      case (unsigned long)1: 
                             #line 1930 
      ;
      #line 1930 
      switch (4UL) {
        #line 1930 
        case (unsigned long)1: 
                               #line 1930 
        ;
        #line 1931 
        ldv_inline_asm();
        #line 1930 
        break;
        #line 1930 
        case (unsigned long)2: 
                               #line 1930 
        ;
        #line 1931 
        ldv_inline_asm();
        #line 1930 
        break;
        #line 1930 
        case (unsigned long)4: 
                               #line 1930 
        ;
        #line 1931 
        ldv_inline_asm();
        #line 1930 
        break;
        #line 1930 
        case (unsigned long)8: 
                               #line 1930 
        ;
        #line 1931 
        ldv_inline_asm();
        #line 1930 
        break;
        #line 1930 
        default: 
                 #line 1930 
        ;
        #line 1930 
        __bad_percpu_size();
      }
      #line 1930 
      pscr_ret__ = pfo_ret__;
      #line 1930 
      break;
      #line 1930 
      case (unsigned long)2: 
                             #line 1930 
      ;
      #line 1930 
      switch (4UL) {
        #line 1930 
        case (unsigned long)1: 
                               #line 1930 
        ;
        #line 1931 
        ldv_inline_asm();
        #line 1930 
        break;
        #line 1930 
        case (unsigned long)2: 
                               #line 1930 
        ;
        #line 1931 
        ldv_inline_asm();
        #line 1930 
        break;
        #line 1930 
        case (unsigned long)4: 
                               #line 1930 
        ;
        #line 1931 
        ldv_inline_asm();
        #line 1930 
        break;
        #line 1930 
        case (unsigned long)8: 
                               #line 1930 
        ;
        #line 1931 
        ldv_inline_asm();
        #line 1930 
        break;
        #line 1930 
        default: 
                 #line 1930 
        ;
        #line 1930 
        __bad_percpu_size();
      }
      #line 1930 
      pscr_ret__ = pfo_ret___0;
      #line 1930 
      break;
      #line 1930 
      case (unsigned long)4: 
                             #line 1930 
      ;
      #line 1930 
      switch (4UL) {
        #line 1930 
        case (unsigned long)1: 
                               #line 1930 
        ;
        #line 1931 
        ldv_inline_asm();
        #line 1930 
        break;
        #line 1930 
        case (unsigned long)2: 
                               #line 1930 
        ;
        #line 1931 
        ldv_inline_asm();
        #line 1930 
        break;
        #line 1930 
        case (unsigned long)4: 
                               #line 1930 
        ;
        #line 1931 
        ldv_inline_asm();
        #line 1930 
        break;
        #line 1930 
        case (unsigned long)8: 
                               #line 1930 
        ;
        #line 1931 
        ldv_inline_asm();
        #line 1930 
        break;
        #line 1930 
        default: 
                 #line 1930 
        ;
        #line 1930 
        __bad_percpu_size();
      }
      #line 1930 
      pscr_ret__ = pfo_ret___1;
      #line 1930 
      break;
      #line 1930 
      case (unsigned long)8: 
                             #line 1930 
      ;
      #line 1930 
      switch (4UL) {
        #line 1930 
        case (unsigned long)1: 
                               #line 1930 
        ;
        #line 1931 
        ldv_inline_asm();
        #line 1930 
        break;
        #line 1930 
        case (unsigned long)2: 
                               #line 1930 
        ;
        #line 1931 
        ldv_inline_asm();
        #line 1930 
        break;
        #line 1930 
        case (unsigned long)4: 
                               #line 1930 
        ;
        #line 1931 
        ldv_inline_asm();
        #line 1930 
        break;
        #line 1930 
        case (unsigned long)8: 
                               #line 1930 
        ;
        #line 1931 
        ldv_inline_asm();
        #line 1930 
        break;
        #line 1930 
        default: 
                 #line 1930 
        ;
        #line 1930 
        __bad_percpu_size();
      }
      #line 1930 
      pscr_ret__ = pfo_ret___2;
      #line 1930 
      break;
      #line 1930 
      default: 
               #line 1930 
      ;
      #line 1930 
      __bad_size_call_parameter();
      #line 1930 
      break;
    }
    #line 1929 
    ;
    #line 1929 
    unsigned int thread = mvpp2_cpu_to_thread(port->priv,pscr_ret__);
    #line 1931 
    u32 val = mvpp2_read_relaxed(port->priv,(thread + 2144U) * 4U);
    #line 1934 
    aggr_txq->count = (int)val & 16383;
    #line 1936 
    if (aggr_txq->count + num > 256) 
                                     #line 1937 
                                     return -12;
  }
  #line 1939 
  return 0;
}

#line 1948  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static int mvpp2_txq_alloc_reserved_desc(struct mvpp2_port *port, struct mvpp2_tx_queue *txq, int num)
{
  #line 1951 
  int pscr_ret__;
  #line 1953 
  u32 val;
  #line 1951 
  __this_cpu_preempt_check((char *)"read");
  {
    #line 1951 
    void *__vpp_verify = (void *)0;
    #line 1951 
    void *tmp = __vpp_verify;
  }
  #line 1951 
  switch (4UL) {
    #line 1951 
    int pfo_ret___1;
    #line 1951 
    int pfo_ret___2;
    #line 1951 
    int pfo_ret__;
    #line 1951 
    int pfo_ret___0;
    #line 1951 
    case (unsigned long)1: 
                           #line 1951 
    ;
    #line 1951 
    switch (4UL) {
      #line 1951 
      case (unsigned long)1: 
                             #line 1951 
      ;
      #line 1952 
      ldv_inline_asm();
      #line 1951 
      break;
      #line 1951 
      case (unsigned long)2: 
                             #line 1951 
      ;
      #line 1952 
      ldv_inline_asm();
      #line 1951 
      break;
      #line 1951 
      case (unsigned long)4: 
                             #line 1951 
      ;
      #line 1952 
      ldv_inline_asm();
      #line 1951 
      break;
      #line 1951 
      case (unsigned long)8: 
                             #line 1951 
      ;
      #line 1952 
      ldv_inline_asm();
      #line 1951 
      break;
      #line 1951 
      default: 
               #line 1951 
      ;
      #line 1951 
      __bad_percpu_size();
    }
    #line 1951 
    pscr_ret__ = pfo_ret__;
    #line 1951 
    break;
    #line 1951 
    case (unsigned long)2: 
                           #line 1951 
    ;
    #line 1951 
    switch (4UL) {
      #line 1951 
      case (unsigned long)1: 
                             #line 1951 
      ;
      #line 1952 
      ldv_inline_asm();
      #line 1951 
      break;
      #line 1951 
      case (unsigned long)2: 
                             #line 1951 
      ;
      #line 1952 
      ldv_inline_asm();
      #line 1951 
      break;
      #line 1951 
      case (unsigned long)4: 
                             #line 1951 
      ;
      #line 1952 
      ldv_inline_asm();
      #line 1951 
      break;
      #line 1951 
      case (unsigned long)8: 
                             #line 1951 
      ;
      #line 1952 
      ldv_inline_asm();
      #line 1951 
      break;
      #line 1951 
      default: 
               #line 1951 
      ;
      #line 1951 
      __bad_percpu_size();
    }
    #line 1951 
    pscr_ret__ = pfo_ret___0;
    #line 1951 
    break;
    #line 1951 
    case (unsigned long)4: 
                           #line 1951 
    ;
    #line 1951 
    switch (4UL) {
      #line 1951 
      case (unsigned long)1: 
                             #line 1951 
      ;
      #line 1952 
      ldv_inline_asm();
      #line 1951 
      break;
      #line 1951 
      case (unsigned long)2: 
                             #line 1951 
      ;
      #line 1952 
      ldv_inline_asm();
      #line 1951 
      break;
      #line 1951 
      case (unsigned long)4: 
                             #line 1951 
      ;
      #line 1952 
      ldv_inline_asm();
      #line 1951 
      break;
      #line 1951 
      case (unsigned long)8: 
                             #line 1951 
      ;
      #line 1952 
      ldv_inline_asm();
      #line 1951 
      break;
      #line 1951 
      default: 
               #line 1951 
      ;
      #line 1951 
      __bad_percpu_size();
    }
    #line 1951 
    pscr_ret__ = pfo_ret___1;
    #line 1951 
    break;
    #line 1951 
    case (unsigned long)8: 
                           #line 1951 
    ;
    #line 1951 
    switch (4UL) {
      #line 1951 
      case (unsigned long)1: 
                             #line 1951 
      ;
      #line 1952 
      ldv_inline_asm();
      #line 1951 
      break;
      #line 1951 
      case (unsigned long)2: 
                             #line 1951 
      ;
      #line 1952 
      ldv_inline_asm();
      #line 1951 
      break;
      #line 1951 
      case (unsigned long)4: 
                             #line 1951 
      ;
      #line 1952 
      ldv_inline_asm();
      #line 1951 
      break;
      #line 1951 
      case (unsigned long)8: 
                             #line 1951 
      ;
      #line 1952 
      ldv_inline_asm();
      #line 1951 
      break;
      #line 1951 
      default: 
               #line 1951 
      ;
      #line 1951 
      __bad_percpu_size();
    }
    #line 1951 
    pscr_ret__ = pfo_ret___2;
    #line 1951 
    break;
    #line 1951 
    default: 
             #line 1951 
    ;
    #line 1951 
    __bad_size_call_parameter();
    #line 1951 
    break;
  }
  #line 1951 
  ;
  #line 1951 
  unsigned int thread = mvpp2_cpu_to_thread(port->priv,pscr_ret__);
  #line 1952 
  struct mvpp2 *priv = port->priv;
  #line 1955 
  val = (unsigned int)(((int)txq->id << 16) | num);
  #line 1956 
  mvpp2_thread_write_relaxed(priv,thread,8368U,val);
  #line 1958 
  val = mvpp2_thread_read_relaxed(priv,thread,8372U);
  #line 1960 
  return (int)val & 16383;
}

#line 1966  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static int mvpp2_txq_reserved_desc_num_proc(struct mvpp2_port *port, struct mvpp2_tx_queue *txq, struct mvpp2_txq_pcpu *txq_pcpu, int num)
{
  #line 1991 
  int __UNIQUE_ID___x571;
  #line 1991 
  int tmp_1;
  #line 1971 
  int req;
  #line 1971 
  int desc_count;
  #line 1972 
  unsigned int thread;
  #line 1974 
  if (txq_pcpu->reserved_num >= num) 
                                     #line 1975 
                                     return 0;
  #line 1981 
  desc_count = 0;
  #line 1983 
  thread = 0U;
  #line 1983 
  while ((port->priv)->nthreads > thread) {
    {
      #line 1986 
      unsigned long __ptr;
      #line 1984 
      struct mvpp2_txq_pcpu *txq_pcpu_aux;
      {
        #line 1986 
        void *__vpp_verify = (void *)0;
        #line 1986 
        void *tmp = __vpp_verify;
      }
      #line 1987 
      ldv_inline_asm();
      #line 1986 
      txq_pcpu_aux = ((struct mvpp2_txq_pcpu *)(__per_cpu_offset[thread] + __ptr));
      #line 1987 
      desc_count = txq_pcpu_aux->count + desc_count;
      #line 1988 
      desc_count = txq_pcpu_aux->reserved_num + desc_count;
    }
    #line 1983 
    thread ++;
  }
  {
    #line 1991 
    __UNIQUE_ID___x571 = 64;
    #line 1991 
    int __UNIQUE_ID___y572 = num - txq_pcpu->reserved_num;
    #line 1991 
    if (__UNIQUE_ID___x571 > __UNIQUE_ID___y572) 
                                                 #line 1991 
                                                 tmp_1 = __UNIQUE_ID___x571; else 
                                                                    #line 1991 
                                                                    tmp_1 = __UNIQUE_ID___y572;
    }
  #line 1991 
  req = tmp_1;
  #line 1992 
  desc_count += req;
  #line 1994 
  if (txq->size + -575 <= desc_count) 
                                      #line 1996 
                                      return -12;
  #line 1998 
  txq_pcpu->reserved_num += mvpp2_txq_alloc_reserved_desc(port,txq,req);
  #line 2001 
  if (txq_pcpu->reserved_num < num) 
                                    #line 2002 
                                    return -12;
  #line 2003 
  return 0;
}

#line 2009  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static void mvpp2_txq_desc_put(struct mvpp2_tx_queue *txq)
{
  #line 2011 
  if (txq->next_desc_to_proc == 0) 
                                   #line 2012 
                                   txq->next_desc_to_proc = txq->last_desc + -1; else 
                                                                    #line 2014 
                                                                    (txq->next_desc_to_proc) --;
  #line 2015 
  return;
}

#line 2018  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static u32 mvpp2_txq_desc_csum(int l3_offs, __be16 l3_proto, int ip_hdr_len, int l4_proto)
{
  #line 2021 
  u32 command;
  #line 2026 
  command = (unsigned int)l3_offs;
  #line 2027 
  command = (unsigned int)(ip_hdr_len << 8) | command;
  #line 2028 
  command |= 32768U;
  #line 2030 
  if ((unsigned int)l3_proto == 8U) {
    #line 2031 
    command &= 4294934527U;
    #line 2032 
    command &= 4227858431U;
  }
  else 
       #line 2034 
       command |= 67108864U;
  #line 2037 
  if (l4_proto == 6) {
    #line 2038 
    command &= 4278190079U;
    #line 2039 
    command &= 4294959103U;
  }
  else 
    #line 2040 
    if (l4_proto == 17) {
      #line 2041 
      command |= 16777216U;
      #line 2042 
      command &= 4294959103U;
    }
    else 
         #line 2044 
         command |= 16384U;
  #line 2047 
  return command;
}

#line 2058  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
__inline static int mvpp2_txq_sent_desc_proc(struct mvpp2_port *port, struct mvpp2_tx_queue *txq)
{
  #line 2065 
  int pscr_ret__;
  #line 2061 
  u32 val;
  #line 2064 
  ;
  #line 2065 
  __this_cpu_preempt_check((char *)"read");
  {
    #line 2065 
    void *__vpp_verify = (void *)0;
    #line 2065 
    void *tmp = __vpp_verify;
  }
  #line 2065 
  switch (4UL) {
    #line 2065 
    int pfo_ret___2;
    #line 2065 
    int pfo_ret__;
    #line 2065 
    int pfo_ret___0;
    #line 2065 
    int pfo_ret___1;
    #line 2065 
    case (unsigned long)1: 
                           #line 2065 
    ;
    #line 2065 
    switch (4UL) {
      #line 2065 
      case (unsigned long)1: 
                             #line 2065 
      ;
      #line 2066 
      ldv_inline_asm();
      #line 2065 
      break;
      #line 2065 
      case (unsigned long)2: 
                             #line 2065 
      ;
      #line 2066 
      ldv_inline_asm();
      #line 2065 
      break;
      #line 2065 
      case (unsigned long)4: 
                             #line 2065 
      ;
      #line 2066 
      ldv_inline_asm();
      #line 2065 
      break;
      #line 2065 
      case (unsigned long)8: 
                             #line 2065 
      ;
      #line 2066 
      ldv_inline_asm();
      #line 2065 
      break;
      #line 2065 
      default: 
               #line 2065 
      ;
      #line 2065 
      __bad_percpu_size();
    }
    #line 2065 
    pscr_ret__ = pfo_ret__;
    #line 2065 
    break;
    #line 2065 
    case (unsigned long)2: 
                           #line 2065 
    ;
    #line 2065 
    switch (4UL) {
      #line 2065 
      case (unsigned long)1: 
                             #line 2065 
      ;
      #line 2066 
      ldv_inline_asm();
      #line 2065 
      break;
      #line 2065 
      case (unsigned long)2: 
                             #line 2065 
      ;
      #line 2066 
      ldv_inline_asm();
      #line 2065 
      break;
      #line 2065 
      case (unsigned long)4: 
                             #line 2065 
      ;
      #line 2066 
      ldv_inline_asm();
      #line 2065 
      break;
      #line 2065 
      case (unsigned long)8: 
                             #line 2065 
      ;
      #line 2066 
      ldv_inline_asm();
      #line 2065 
      break;
      #line 2065 
      default: 
               #line 2065 
      ;
      #line 2065 
      __bad_percpu_size();
    }
    #line 2065 
    pscr_ret__ = pfo_ret___0;
    #line 2065 
    break;
    #line 2065 
    case (unsigned long)4: 
                           #line 2065 
    ;
    #line 2065 
    switch (4UL) {
      #line 2065 
      case (unsigned long)1: 
                             #line 2065 
      ;
      #line 2066 
      ldv_inline_asm();
      #line 2065 
      break;
      #line 2065 
      case (unsigned long)2: 
                             #line 2065 
      ;
      #line 2066 
      ldv_inline_asm();
      #line 2065 
      break;
      #line 2065 
      case (unsigned long)4: 
                             #line 2065 
      ;
      #line 2066 
      ldv_inline_asm();
      #line 2065 
      break;
      #line 2065 
      case (unsigned long)8: 
                             #line 2065 
      ;
      #line 2066 
      ldv_inline_asm();
      #line 2065 
      break;
      #line 2065 
      default: 
               #line 2065 
      ;
      #line 2065 
      __bad_percpu_size();
    }
    #line 2065 
    pscr_ret__ = pfo_ret___1;
    #line 2065 
    break;
    #line 2065 
    case (unsigned long)8: 
                           #line 2065 
    ;
    #line 2065 
    switch (4UL) {
      #line 2065 
      case (unsigned long)1: 
                             #line 2065 
      ;
      #line 2066 
      ldv_inline_asm();
      #line 2065 
      break;
      #line 2065 
      case (unsigned long)2: 
                             #line 2065 
      ;
      #line 2066 
      ldv_inline_asm();
      #line 2065 
      break;
      #line 2065 
      case (unsigned long)4: 
                             #line 2065 
      ;
      #line 2066 
      ldv_inline_asm();
      #line 2065 
      break;
      #line 2065 
      case (unsigned long)8: 
                             #line 2065 
      ;
      #line 2066 
      ldv_inline_asm();
      #line 2065 
      break;
      #line 2065 
      default: 
               #line 2065 
      ;
      #line 2065 
      __bad_percpu_size();
    }
    #line 2065 
    pscr_ret__ = pfo_ret___2;
    #line 2065 
    break;
    #line 2065 
    default: 
             #line 2065 
    ;
    #line 2065 
    __bad_size_call_parameter();
    #line 2065 
    break;
  }
  #line 2064 
  ;
  #line 2064 
  ;
  #line 2064 
  val = mvpp2_thread_read_relaxed(port->priv,mvpp2_cpu_to_thread(port->priv,pscr_ret__),(unsigned int)(((int)txq->id + 3840) * 4));
  #line 2068 
  return (int)(val >> 16) & 16383;
}

#line 2075  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static void mvpp2_txq_sent_counter_clear(void *arg)
{
  #line 2081 
  int pscr_ret__;
  #line 2078 
  int queue;
  #line 2077 
  struct mvpp2_port *port = (struct mvpp2_port *)arg;
  #line 2081 
  __this_cpu_preempt_check((char *)"read");
  {
    #line 2081 
    void *__vpp_verify = (void *)0;
    #line 2081 
    void *tmp = __vpp_verify;
  }
  #line 2081 
  switch (4UL) {
    #line 2081 
    int pfo_ret___0;
    #line 2081 
    int pfo_ret___1;
    #line 2081 
    int pfo_ret___2;
    #line 2081 
    int pfo_ret__;
    #line 2081 
    case (unsigned long)1: 
                           #line 2081 
    ;
    #line 2081 
    switch (4UL) {
      #line 2081 
      case (unsigned long)1: 
                             #line 2081 
      ;
      #line 2082 
      ldv_inline_asm();
      #line 2081 
      break;
      #line 2081 
      case (unsigned long)2: 
                             #line 2081 
      ;
      #line 2082 
      ldv_inline_asm();
      #line 2081 
      break;
      #line 2081 
      case (unsigned long)4: 
                             #line 2081 
      ;
      #line 2082 
      ldv_inline_asm();
      #line 2081 
      break;
      #line 2081 
      case (unsigned long)8: 
                             #line 2081 
      ;
      #line 2082 
      ldv_inline_asm();
      #line 2081 
      break;
      #line 2081 
      default: 
               #line 2081 
      ;
      #line 2081 
      __bad_percpu_size();
    }
    #line 2081 
    pscr_ret__ = pfo_ret__;
    #line 2081 
    break;
    #line 2081 
    case (unsigned long)2: 
                           #line 2081 
    ;
    #line 2081 
    switch (4UL) {
      #line 2081 
      case (unsigned long)1: 
                             #line 2081 
      ;
      #line 2082 
      ldv_inline_asm();
      #line 2081 
      break;
      #line 2081 
      case (unsigned long)2: 
                             #line 2081 
      ;
      #line 2082 
      ldv_inline_asm();
      #line 2081 
      break;
      #line 2081 
      case (unsigned long)4: 
                             #line 2081 
      ;
      #line 2082 
      ldv_inline_asm();
      #line 2081 
      break;
      #line 2081 
      case (unsigned long)8: 
                             #line 2081 
      ;
      #line 2082 
      ldv_inline_asm();
      #line 2081 
      break;
      #line 2081 
      default: 
               #line 2081 
      ;
      #line 2081 
      __bad_percpu_size();
    }
    #line 2081 
    pscr_ret__ = pfo_ret___0;
    #line 2081 
    break;
    #line 2081 
    case (unsigned long)4: 
                           #line 2081 
    ;
    #line 2081 
    switch (4UL) {
      #line 2081 
      case (unsigned long)1: 
                             #line 2081 
      ;
      #line 2082 
      ldv_inline_asm();
      #line 2081 
      break;
      #line 2081 
      case (unsigned long)2: 
                             #line 2081 
      ;
      #line 2082 
      ldv_inline_asm();
      #line 2081 
      break;
      #line 2081 
      case (unsigned long)4: 
                             #line 2081 
      ;
      #line 2082 
      ldv_inline_asm();
      #line 2081 
      break;
      #line 2081 
      case (unsigned long)8: 
                             #line 2081 
      ;
      #line 2082 
      ldv_inline_asm();
      #line 2081 
      break;
      #line 2081 
      default: 
               #line 2081 
      ;
      #line 2081 
      __bad_percpu_size();
    }
    #line 2081 
    pscr_ret__ = pfo_ret___1;
    #line 2081 
    break;
    #line 2081 
    case (unsigned long)8: 
                           #line 2081 
    ;
    #line 2081 
    switch (4UL) {
      #line 2081 
      case (unsigned long)1: 
                             #line 2081 
      ;
      #line 2082 
      ldv_inline_asm();
      #line 2081 
      break;
      #line 2081 
      case (unsigned long)2: 
                             #line 2081 
      ;
      #line 2082 
      ldv_inline_asm();
      #line 2081 
      break;
      #line 2081 
      case (unsigned long)4: 
                             #line 2081 
      ;
      #line 2082 
      ldv_inline_asm();
      #line 2081 
      break;
      #line 2081 
      case (unsigned long)8: 
                             #line 2081 
      ;
      #line 2082 
      ldv_inline_asm();
      #line 2081 
      break;
      #line 2081 
      default: 
               #line 2081 
      ;
      #line 2081 
      __bad_percpu_size();
    }
    #line 2081 
    pscr_ret__ = pfo_ret___2;
    #line 2081 
    break;
    #line 2081 
    default: 
             #line 2081 
    ;
    #line 2081 
    __bad_size_call_parameter();
    #line 2081 
    break;
  }
  #line 2081 
  ;
  #line 2081 
  if ((unsigned int)pscr_ret__ > (port->priv)->nthreads) 
                                                         #line 2082 
                                                         return;
  #line 2084 
  queue = 0;
  #line 2084 
  while (port->ntxqs > (unsigned int)queue) {
    {
      #line 2088 
      int pscr_ret___0;
      #line 2085 
      int id = (int)(*(port->txqs + (unsigned long)queue))->id;
      #line 2087 
      ;
      #line 2088 
      __this_cpu_preempt_check((char *)"read");
      {
        #line 2088 
        void *__vpp_verify_0 = (void *)0;
        #line 2088 
        void *tmp_5 = __vpp_verify_0;
      }
      #line 2088 
      switch (4UL) {
        #line 2088 
        int pfo_ret___3;
        #line 2088 
        int pfo_ret___4;
        #line 2088 
        int pfo_ret___5;
        #line 2088 
        int pfo_ret___6;
        #line 2088 
        case (unsigned long)1: 
                               #line 2088 
        ;
        #line 2088 
        switch (4UL) {
          #line 2088 
          case (unsigned long)1: 
                                 #line 2088 
          ;
          #line 2089 
          ldv_inline_asm();
          #line 2088 
          break;
          #line 2088 
          case (unsigned long)2: 
                                 #line 2088 
          ;
          #line 2089 
          ldv_inline_asm();
          #line 2088 
          break;
          #line 2088 
          case (unsigned long)4: 
                                 #line 2088 
          ;
          #line 2089 
          ldv_inline_asm();
          #line 2088 
          break;
          #line 2088 
          case (unsigned long)8: 
                                 #line 2088 
          ;
          #line 2089 
          ldv_inline_asm();
          #line 2088 
          break;
          #line 2088 
          default: 
                   #line 2088 
          ;
          #line 2088 
          __bad_percpu_size();
        }
        #line 2088 
        pscr_ret___0 = pfo_ret___3;
        #line 2088 
        break;
        #line 2088 
        case (unsigned long)2: 
                               #line 2088 
        ;
        #line 2088 
        switch (4UL) {
          #line 2088 
          case (unsigned long)1: 
                                 #line 2088 
          ;
          #line 2089 
          ldv_inline_asm();
          #line 2088 
          break;
          #line 2088 
          case (unsigned long)2: 
                                 #line 2088 
          ;
          #line 2089 
          ldv_inline_asm();
          #line 2088 
          break;
          #line 2088 
          case (unsigned long)4: 
                                 #line 2088 
          ;
          #line 2089 
          ldv_inline_asm();
          #line 2088 
          break;
          #line 2088 
          case (unsigned long)8: 
                                 #line 2088 
          ;
          #line 2089 
          ldv_inline_asm();
          #line 2088 
          break;
          #line 2088 
          default: 
                   #line 2088 
          ;
          #line 2088 
          __bad_percpu_size();
        }
        #line 2088 
        pscr_ret___0 = pfo_ret___4;
        #line 2088 
        break;
        #line 2088 
        case (unsigned long)4: 
                               #line 2088 
        ;
        #line 2088 
        switch (4UL) {
          #line 2088 
          case (unsigned long)1: 
                                 #line 2088 
          ;
          #line 2089 
          ldv_inline_asm();
          #line 2088 
          break;
          #line 2088 
          case (unsigned long)2: 
                                 #line 2088 
          ;
          #line 2089 
          ldv_inline_asm();
          #line 2088 
          break;
          #line 2088 
          case (unsigned long)4: 
                                 #line 2088 
          ;
          #line 2089 
          ldv_inline_asm();
          #line 2088 
          break;
          #line 2088 
          case (unsigned long)8: 
                                 #line 2088 
          ;
          #line 2089 
          ldv_inline_asm();
          #line 2088 
          break;
          #line 2088 
          default: 
                   #line 2088 
          ;
          #line 2088 
          __bad_percpu_size();
        }
        #line 2088 
        pscr_ret___0 = pfo_ret___5;
        #line 2088 
        break;
        #line 2088 
        case (unsigned long)8: 
                               #line 2088 
        ;
        #line 2088 
        switch (4UL) {
          #line 2088 
          case (unsigned long)1: 
                                 #line 2088 
          ;
          #line 2089 
          ldv_inline_asm();
          #line 2088 
          break;
          #line 2088 
          case (unsigned long)2: 
                                 #line 2088 
          ;
          #line 2089 
          ldv_inline_asm();
          #line 2088 
          break;
          #line 2088 
          case (unsigned long)4: 
                                 #line 2088 
          ;
          #line 2089 
          ldv_inline_asm();
          #line 2088 
          break;
          #line 2088 
          case (unsigned long)8: 
                                 #line 2088 
          ;
          #line 2089 
          ldv_inline_asm();
          #line 2088 
          break;
          #line 2088 
          default: 
                   #line 2088 
          ;
          #line 2088 
          __bad_percpu_size();
        }
        #line 2088 
        pscr_ret___0 = pfo_ret___6;
        #line 2088 
        break;
        #line 2088 
        default: 
                 #line 2088 
        ;
        #line 2088 
        __bad_size_call_parameter();
        #line 2088 
        break;
      }
      #line 2087 
      ;
      #line 2087 
      ;
      #line 2087 
      mvpp2_thread_read(port->priv,mvpp2_cpu_to_thread(port->priv,pscr_ret___0),(unsigned int)((id + 3840) * 4));
    }
    #line 2084 
    queue ++;
  }
  #line 2091 
  return;
}

#line 2094  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static void mvpp2_txp_max_tx_size_set(struct mvpp2_port *port)
{
  #line 2096 
  u32 val;
  #line 2096 
  u32 size;
  #line 2096 
  u32 mtu;
  #line 2097 
  int txq;
  #line 2097 
  int tx_port_num;
  #line 2099 
  mtu = (unsigned int)(port->pkt_size * 8);
  #line 2100 
  if (mtu > 524287U) 
                     #line 2101 
                     mtu = 524287U;
  #line 2104 
  mtu *= 3U;
  #line 2107 
  tx_port_num = mvpp2_egress_port(port);
  #line 2108 
  mvpp2_write(port->priv,32768U,(unsigned int)tx_port_num);
  #line 2111 
  val = mvpp2_read(port->priv,32796U);
  #line 2112 
  val &= 4294443008U;
  #line 2113 
  val |= mtu;
  #line 2114 
  mvpp2_write(port->priv,32796U,val);
  #line 2117 
  val = mvpp2_read(port->priv,32804U);
  #line 2118 
  size = val;
  #line 2119 
  if (size < mtu) {
    #line 2120 
    size = mtu;
    #line 2121 
    val = 0U;
    #line 2122 
    val |= size;
    #line 2123 
    mvpp2_write(port->priv,32804U,val);
  }
  #line 2126 
  txq = 0;
  #line 2126 
  while (port->ntxqs > (unsigned int)txq) {
    #line 2127 
    val = mvpp2_read(port->priv,(unsigned int)((txq << 2) + 32864));
    #line 2129 
    size = val & 2147483647U;
    #line 2131 
    if (size < mtu) {
      #line 2132 
      size = mtu;
      #line 2133 
      val &= 2147483648U;
      #line 2134 
      val |= size;
      #line 2135 
      mvpp2_write(port->priv,(unsigned int)((txq << 2) + 32864),val);
    }
    #line 2126 
    txq ++;
  }
  #line 2139 
  return;
}

#line 2145  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static void mvpp2_rx_pkts_coal_set(struct mvpp2_port *port, struct mvpp2_rx_queue *rxq)
{
  #line 2148 
  int pscr_ret__;
  #line 2148 
  __preempt_count_add(1);
  #line 2149 
  ldv_inline_asm();
  #line 2148 
  __this_cpu_preempt_check((char *)"read");
  {
    #line 2148 
    void *__vpp_verify = (void *)0;
    #line 2148 
    void *tmp = __vpp_verify;
  }
  #line 2148 
  switch (4UL) {
    #line 2148 
    int pfo_ret__;
    #line 2148 
    int pfo_ret___0;
    #line 2148 
    int pfo_ret___1;
    #line 2148 
    int pfo_ret___2;
    #line 2148 
    case (unsigned long)1: 
                           #line 2148 
    ;
    #line 2148 
    switch (4UL) {
      #line 2148 
      case (unsigned long)1: 
                             #line 2148 
      ;
      #line 2149 
      ldv_inline_asm();
      #line 2148 
      break;
      #line 2148 
      case (unsigned long)2: 
                             #line 2148 
      ;
      #line 2149 
      ldv_inline_asm();
      #line 2148 
      break;
      #line 2148 
      case (unsigned long)4: 
                             #line 2148 
      ;
      #line 2149 
      ldv_inline_asm();
      #line 2148 
      break;
      #line 2148 
      case (unsigned long)8: 
                             #line 2148 
      ;
      #line 2149 
      ldv_inline_asm();
      #line 2148 
      break;
      #line 2148 
      default: 
               #line 2148 
      ;
      #line 2148 
      __bad_percpu_size();
    }
    #line 2148 
    pscr_ret__ = pfo_ret__;
    #line 2148 
    break;
    #line 2148 
    case (unsigned long)2: 
                           #line 2148 
    ;
    #line 2148 
    switch (4UL) {
      #line 2148 
      case (unsigned long)1: 
                             #line 2148 
      ;
      #line 2149 
      ldv_inline_asm();
      #line 2148 
      break;
      #line 2148 
      case (unsigned long)2: 
                             #line 2148 
      ;
      #line 2149 
      ldv_inline_asm();
      #line 2148 
      break;
      #line 2148 
      case (unsigned long)4: 
                             #line 2148 
      ;
      #line 2149 
      ldv_inline_asm();
      #line 2148 
      break;
      #line 2148 
      case (unsigned long)8: 
                             #line 2148 
      ;
      #line 2149 
      ldv_inline_asm();
      #line 2148 
      break;
      #line 2148 
      default: 
               #line 2148 
      ;
      #line 2148 
      __bad_percpu_size();
    }
    #line 2148 
    pscr_ret__ = pfo_ret___0;
    #line 2148 
    break;
    #line 2148 
    case (unsigned long)4: 
                           #line 2148 
    ;
    #line 2148 
    switch (4UL) {
      #line 2148 
      case (unsigned long)1: 
                             #line 2148 
      ;
      #line 2149 
      ldv_inline_asm();
      #line 2148 
      break;
      #line 2148 
      case (unsigned long)2: 
                             #line 2148 
      ;
      #line 2149 
      ldv_inline_asm();
      #line 2148 
      break;
      #line 2148 
      case (unsigned long)4: 
                             #line 2148 
      ;
      #line 2149 
      ldv_inline_asm();
      #line 2148 
      break;
      #line 2148 
      case (unsigned long)8: 
                             #line 2148 
      ;
      #line 2149 
      ldv_inline_asm();
      #line 2148 
      break;
      #line 2148 
      default: 
               #line 2148 
      ;
      #line 2148 
      __bad_percpu_size();
    }
    #line 2148 
    pscr_ret__ = pfo_ret___1;
    #line 2148 
    break;
    #line 2148 
    case (unsigned long)8: 
                           #line 2148 
    ;
    #line 2148 
    switch (4UL) {
      #line 2148 
      case (unsigned long)1: 
                             #line 2148 
      ;
      #line 2149 
      ldv_inline_asm();
      #line 2148 
      break;
      #line 2148 
      case (unsigned long)2: 
                             #line 2148 
      ;
      #line 2149 
      ldv_inline_asm();
      #line 2148 
      break;
      #line 2148 
      case (unsigned long)4: 
                             #line 2148 
      ;
      #line 2149 
      ldv_inline_asm();
      #line 2148 
      break;
      #line 2148 
      case (unsigned long)8: 
                             #line 2148 
      ;
      #line 2149 
      ldv_inline_asm();
      #line 2148 
      break;
      #line 2148 
      default: 
               #line 2148 
      ;
      #line 2148 
      __bad_percpu_size();
    }
    #line 2148 
    pscr_ret__ = pfo_ret___2;
    #line 2148 
    break;
    #line 2148 
    default: 
             #line 2148 
    ;
    #line 2148 
    __bad_size_call_parameter();
    #line 2148 
    break;
  }
  #line 2148 
  ;
  #line 2148 
  unsigned int thread = mvpp2_cpu_to_thread(port->priv,pscr_ret__);
  #line 2150 
  if (rxq->pkts_coal > 16383U) 
                               #line 2151 
                               rxq->pkts_coal = 16383U;
  #line 2153 
  mvpp2_thread_write(port->priv,thread,8256U,(unsigned int)rxq->id);
  #line 2154 
  mvpp2_thread_write(port->priv,thread,8268U,rxq->pkts_coal);
  #line 2159 
  ldv_inline_asm();
  #line 2157 
  __preempt_count_sub(1);
  #line 2159 
  return;
}

#line 2161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static void mvpp2_tx_pkts_coal_set(struct mvpp2_port *port, struct mvpp2_tx_queue *txq)
{
  #line 2164 
  int pscr_ret__;
  #line 2165 
  u32 val;
  #line 2164 
  __preempt_count_add(1);
  #line 2165 
  ldv_inline_asm();
  #line 2164 
  __this_cpu_preempt_check((char *)"read");
  {
    #line 2164 
    void *__vpp_verify = (void *)0;
    #line 2164 
    void *tmp = __vpp_verify;
  }
  #line 2164 
  switch (4UL) {
    #line 2164 
    int pfo_ret___2;
    #line 2164 
    int pfo_ret__;
    #line 2164 
    int pfo_ret___0;
    #line 2164 
    int pfo_ret___1;
    #line 2164 
    case (unsigned long)1: 
                           #line 2164 
    ;
    #line 2164 
    switch (4UL) {
      #line 2164 
      case (unsigned long)1: 
                             #line 2164 
      ;
      #line 2165 
      ldv_inline_asm();
      #line 2164 
      break;
      #line 2164 
      case (unsigned long)2: 
                             #line 2164 
      ;
      #line 2165 
      ldv_inline_asm();
      #line 2164 
      break;
      #line 2164 
      case (unsigned long)4: 
                             #line 2164 
      ;
      #line 2165 
      ldv_inline_asm();
      #line 2164 
      break;
      #line 2164 
      case (unsigned long)8: 
                             #line 2164 
      ;
      #line 2165 
      ldv_inline_asm();
      #line 2164 
      break;
      #line 2164 
      default: 
               #line 2164 
      ;
      #line 2164 
      __bad_percpu_size();
    }
    #line 2164 
    pscr_ret__ = pfo_ret__;
    #line 2164 
    break;
    #line 2164 
    case (unsigned long)2: 
                           #line 2164 
    ;
    #line 2164 
    switch (4UL) {
      #line 2164 
      case (unsigned long)1: 
                             #line 2164 
      ;
      #line 2165 
      ldv_inline_asm();
      #line 2164 
      break;
      #line 2164 
      case (unsigned long)2: 
                             #line 2164 
      ;
      #line 2165 
      ldv_inline_asm();
      #line 2164 
      break;
      #line 2164 
      case (unsigned long)4: 
                             #line 2164 
      ;
      #line 2165 
      ldv_inline_asm();
      #line 2164 
      break;
      #line 2164 
      case (unsigned long)8: 
                             #line 2164 
      ;
      #line 2165 
      ldv_inline_asm();
      #line 2164 
      break;
      #line 2164 
      default: 
               #line 2164 
      ;
      #line 2164 
      __bad_percpu_size();
    }
    #line 2164 
    pscr_ret__ = pfo_ret___0;
    #line 2164 
    break;
    #line 2164 
    case (unsigned long)4: 
                           #line 2164 
    ;
    #line 2164 
    switch (4UL) {
      #line 2164 
      case (unsigned long)1: 
                             #line 2164 
      ;
      #line 2165 
      ldv_inline_asm();
      #line 2164 
      break;
      #line 2164 
      case (unsigned long)2: 
                             #line 2164 
      ;
      #line 2165 
      ldv_inline_asm();
      #line 2164 
      break;
      #line 2164 
      case (unsigned long)4: 
                             #line 2164 
      ;
      #line 2165 
      ldv_inline_asm();
      #line 2164 
      break;
      #line 2164 
      case (unsigned long)8: 
                             #line 2164 
      ;
      #line 2165 
      ldv_inline_asm();
      #line 2164 
      break;
      #line 2164 
      default: 
               #line 2164 
      ;
      #line 2164 
      __bad_percpu_size();
    }
    #line 2164 
    pscr_ret__ = pfo_ret___1;
    #line 2164 
    break;
    #line 2164 
    case (unsigned long)8: 
                           #line 2164 
    ;
    #line 2164 
    switch (4UL) {
      #line 2164 
      case (unsigned long)1: 
                             #line 2164 
      ;
      #line 2165 
      ldv_inline_asm();
      #line 2164 
      break;
      #line 2164 
      case (unsigned long)2: 
                             #line 2164 
      ;
      #line 2165 
      ldv_inline_asm();
      #line 2164 
      break;
      #line 2164 
      case (unsigned long)4: 
                             #line 2164 
      ;
      #line 2165 
      ldv_inline_asm();
      #line 2164 
      break;
      #line 2164 
      case (unsigned long)8: 
                             #line 2164 
      ;
      #line 2165 
      ldv_inline_asm();
      #line 2164 
      break;
      #line 2164 
      default: 
               #line 2164 
      ;
      #line 2164 
      __bad_percpu_size();
    }
    #line 2164 
    pscr_ret__ = pfo_ret___2;
    #line 2164 
    break;
    #line 2164 
    default: 
             #line 2164 
    ;
    #line 2164 
    __bad_size_call_parameter();
    #line 2164 
    break;
  }
  #line 2164 
  ;
  #line 2164 
  unsigned int thread = mvpp2_cpu_to_thread(port->priv,pscr_ret__);
  #line 2167 
  if (txq->done_pkts_coal > 16383U) 
                                    #line 2168 
                                    txq->done_pkts_coal = 16383U;
  #line 2170 
  val = txq->done_pkts_coal << 16;
  #line 2171 
  mvpp2_thread_write(port->priv,thread,8320U,(unsigned int)txq->id);
  #line 2172 
  mvpp2_thread_write(port->priv,thread,8340U,val);
  #line 2176 
  ldv_inline_asm();
  #line 2174 
  __preempt_count_sub(1);
  #line 2176 
  return;
}

#line 2177  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static u32 mvpp2_usec_to_cycles(u32 usec, unsigned long clk_hz)
{
  #line 2183 
  unsigned long long tmp_0;
  #line 2179 
  u64 tmp = (unsigned long long)usec * (unsigned long long)clk_hz;
  {
    #line 2181 
    uint32_t __rem;
    #line 2181 
    uint32_t __base = 1000000U;
    #line 2181 
    __rem = (unsigned int)(tmp % (unsigned long long)__base);
    #line 2181 
    tmp /= (unsigned long long)__base;
    #line 2181 
    uint32_t tmp_2 = __rem;
  }
  #line 2183 
  if (4294967295ULL < tmp) 
                           #line 2183 
                           tmp_0 = 4294967295ULL; else 
                                                       #line 2183 
                                                       tmp_0 = tmp;
  #line 2183 
  return (unsigned int)tmp_0;
}

#line 2186  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static u32 mvpp2_cycles_to_usec(u32 cycles, unsigned long clk_hz)
{
  #line 2192 
  unsigned long long tmp_0;
  #line 2188 
  u64 tmp = (unsigned long long)cycles * 1000000ULL;
  {
    #line 2190 
    uint32_t __rem;
    #line 2190 
    uint32_t __base = (unsigned int)clk_hz;
    #line 2190 
    __rem = (unsigned int)(tmp % (unsigned long long)__base);
    #line 2190 
    tmp /= (unsigned long long)__base;
    #line 2190 
    uint32_t tmp_2 = __rem;
  }
  #line 2192 
  if (4294967295ULL < tmp) 
                           #line 2192 
                           tmp_0 = 4294967295ULL; else 
                                                       #line 2192 
                                                       tmp_0 = tmp;
  #line 2192 
  return (unsigned int)tmp_0;
}

#line 2196  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static void mvpp2_rx_time_coal_set(struct mvpp2_port *port, struct mvpp2_rx_queue *rxq)
{
  #line 2199 
  unsigned long freq = (unsigned long)(port->priv)->tclk;
  #line 2200 
  u32 val = mvpp2_usec_to_cycles(rxq->time_coal,freq);
  #line 2202 
  if (val > 16777200U) {
    #line 2203 
    rxq->time_coal = mvpp2_cycles_to_usec(16777200U,freq);
    #line 2207 
    val = mvpp2_usec_to_cycles(rxq->time_coal,freq);
  }
  #line 2210 
  mvpp2_write(port->priv,(unsigned int)(((int)rxq->id + 5248) * 4),val);
  #line 2211 
  return;
}

#line 2213  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static void mvpp2_tx_time_coal_set(struct mvpp2_port *port)
{
  #line 2215 
  unsigned long freq = (unsigned long)(port->priv)->tclk;
  #line 2216 
  u32 val = mvpp2_usec_to_cycles(port->tx_time_coal,freq);
  #line 2218 
  if (val > 16777200U) {
    #line 2219 
    port->tx_time_coal = mvpp2_cycles_to_usec(16777200U,freq);
    #line 2223 
    val = mvpp2_usec_to_cycles(port->tx_time_coal,freq);
  }
  #line 2226 
  mvpp2_write(port->priv,(unsigned int)(((int)port->id + 5200) * 4),val);
  #line 2227 
  return;
}

#line 2230  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static void mvpp2_txq_bufs_free(struct mvpp2_port *port, struct mvpp2_tx_queue *txq, struct mvpp2_txq_pcpu *txq_pcpu, int num)
{
  #line 2234 
  int i;
  #line 2236 
  i = 0;
  #line 2236 
  while (i < num) {
    {
      #line 2237 
      struct mvpp2_txq_pcpu_buf *tx_buf = txq_pcpu->buffs + (unsigned long)txq_pcpu->txq_get_index;
      #line 2240 
      if (tx_buf->dma < txq_pcpu->tso_headers_dma || tx_buf->dma >= txq_pcpu->tso_headers_dma + (unsigned long long)(txq_pcpu->size * 128)) 
        #line 2241 
        dma_unmap_single_attrs((port->dev)->dev.parent,tx_buf->dma,tx_buf->size,(enum dma_data_direction)DMA_TO_DEVICE,0UL);
      #line 2243 
      if (tx_buf->skb != (struct sk_buff *)0) 
                                              #line 2244 
                                              dev_kfree_skb_any(tx_buf->skb);
      #line 2246 
      mvpp2_txq_inc_get(txq_pcpu);
    }
    #line 2236 
    i ++;
  }
  #line 2248 
  return;
}

#line 2250  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
__inline static struct mvpp2_rx_queue *mvpp2_get_rx_queue(struct mvpp2_port *port, u32 cause)
{
  #line 2253 
  int queue = fls(cause) + -1;
  #line 2255 
  return *(port->rxqs + (unsigned long)queue);
}

#line 2258  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
__inline static struct mvpp2_tx_queue *mvpp2_get_tx_queue(struct mvpp2_port *port, u32 cause)
{
  #line 2261 
  int queue = fls(cause) + -1;
  #line 2263 
  return *(port->txqs + (unsigned long)queue);
}

#line 2267  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static void mvpp2_txq_done(struct mvpp2_port *port, struct mvpp2_tx_queue *txq, struct mvpp2_txq_pcpu *txq_pcpu)
{
  #line 2273 
  int pscr_ret__;
  #line 2271 
  int tx_done;
  #line 2270 
  struct netdev_queue *nq = netdev_get_tx_queue(port->dev,(unsigned int)txq->log_id);
  #line 2273 
  __this_cpu_preempt_check((char *)"read");
  {
    #line 2273 
    void *__vpp_verify = (void *)0;
    #line 2273 
    void *tmp_2 = __vpp_verify;
  }
  #line 2273 
  switch (4UL) {
    #line 2273 
    int pfo_ret__;
    #line 2273 
    int pfo_ret___0;
    #line 2273 
    int pfo_ret___1;
    #line 2273 
    int pfo_ret___2;
    #line 2273 
    case (unsigned long)1: 
                           #line 2273 
    ;
    #line 2273 
    switch (4UL) {
      #line 2273 
      case (unsigned long)1: 
                             #line 2273 
      ;
      #line 2274 
      ldv_inline_asm();
      #line 2273 
      break;
      #line 2273 
      case (unsigned long)2: 
                             #line 2273 
      ;
      #line 2274 
      ldv_inline_asm();
      #line 2273 
      break;
      #line 2273 
      case (unsigned long)4: 
                             #line 2273 
      ;
      #line 2274 
      ldv_inline_asm();
      #line 2273 
      break;
      #line 2273 
      case (unsigned long)8: 
                             #line 2273 
      ;
      #line 2274 
      ldv_inline_asm();
      #line 2273 
      break;
      #line 2273 
      default: 
               #line 2273 
      ;
      #line 2273 
      __bad_percpu_size();
    }
    #line 2273 
    pscr_ret__ = pfo_ret__;
    #line 2273 
    break;
    #line 2273 
    case (unsigned long)2: 
                           #line 2273 
    ;
    #line 2273 
    switch (4UL) {
      #line 2273 
      case (unsigned long)1: 
                             #line 2273 
      ;
      #line 2274 
      ldv_inline_asm();
      #line 2273 
      break;
      #line 2273 
      case (unsigned long)2: 
                             #line 2273 
      ;
      #line 2274 
      ldv_inline_asm();
      #line 2273 
      break;
      #line 2273 
      case (unsigned long)4: 
                             #line 2273 
      ;
      #line 2274 
      ldv_inline_asm();
      #line 2273 
      break;
      #line 2273 
      case (unsigned long)8: 
                             #line 2273 
      ;
      #line 2274 
      ldv_inline_asm();
      #line 2273 
      break;
      #line 2273 
      default: 
               #line 2273 
      ;
      #line 2273 
      __bad_percpu_size();
    }
    #line 2273 
    pscr_ret__ = pfo_ret___0;
    #line 2273 
    break;
    #line 2273 
    case (unsigned long)4: 
                           #line 2273 
    ;
    #line 2273 
    switch (4UL) {
      #line 2273 
      case (unsigned long)1: 
                             #line 2273 
      ;
      #line 2274 
      ldv_inline_asm();
      #line 2273 
      break;
      #line 2273 
      case (unsigned long)2: 
                             #line 2273 
      ;
      #line 2274 
      ldv_inline_asm();
      #line 2273 
      break;
      #line 2273 
      case (unsigned long)4: 
                             #line 2273 
      ;
      #line 2274 
      ldv_inline_asm();
      #line 2273 
      break;
      #line 2273 
      case (unsigned long)8: 
                             #line 2273 
      ;
      #line 2274 
      ldv_inline_asm();
      #line 2273 
      break;
      #line 2273 
      default: 
               #line 2273 
      ;
      #line 2273 
      __bad_percpu_size();
    }
    #line 2273 
    pscr_ret__ = pfo_ret___1;
    #line 2273 
    break;
    #line 2273 
    case (unsigned long)8: 
                           #line 2273 
    ;
    #line 2273 
    switch (4UL) {
      #line 2273 
      case (unsigned long)1: 
                             #line 2273 
      ;
      #line 2274 
      ldv_inline_asm();
      #line 2273 
      break;
      #line 2273 
      case (unsigned long)2: 
                             #line 2273 
      ;
      #line 2274 
      ldv_inline_asm();
      #line 2273 
      break;
      #line 2273 
      case (unsigned long)4: 
                             #line 2273 
      ;
      #line 2274 
      ldv_inline_asm();
      #line 2273 
      break;
      #line 2273 
      case (unsigned long)8: 
                             #line 2273 
      ;
      #line 2274 
      ldv_inline_asm();
      #line 2273 
      break;
      #line 2273 
      default: 
               #line 2273 
      ;
      #line 2273 
      __bad_percpu_size();
    }
    #line 2273 
    pscr_ret__ = pfo_ret___2;
    #line 2273 
    break;
    #line 2273 
    default: 
             #line 2273 
    ;
    #line 2273 
    __bad_size_call_parameter();
    #line 2273 
    break;
  }
  #line 2273 
  ;
  #line 2273 
  ;
  #line 2273 
  if (txq_pcpu->thread != mvpp2_cpu_to_thread(port->priv,pscr_ret__)) 
    #line 2274 
    netdev_err(port->dev,(char *)"wrong cpu on the end of Tx processing\n");
  #line 2276 
  tx_done = mvpp2_txq_sent_desc_proc(port,txq);
  #line 2277 
  if (tx_done == 0) 
                    #line 2278 
                    return;
  #line 2279 
  mvpp2_txq_bufs_free(port,txq,txq_pcpu,tx_done);
  #line 2281 
  txq_pcpu->count -= tx_done;
  #line 2283 
  if ((int)netif_tx_queue_stopped(nq) != 0) 
    #line 2284 
    if (txq_pcpu->count <= txq_pcpu->wake_threshold) 
                                                     #line 2285 
                                                     netif_tx_wake_queue(nq);
  #line 2286 
  return;
}

#line 2288  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static unsigned int mvpp2_tx_done(struct mvpp2_port *port, u32 cause, unsigned int thread)
{
  #line 2291 
  struct mvpp2_tx_queue *txq;
  #line 2292 
  struct mvpp2_txq_pcpu *txq_pcpu;
  #line 2293 
  unsigned int tx_todo = 0U;
  #line 2295 
  while (cause != 0U) {
    #line 2300 
    unsigned long __ptr;
    #line 2296 
    txq = mvpp2_get_tx_queue(port,cause);
    #line 2297 
    if (txq == (struct mvpp2_tx_queue *)0) 
                                           #line 2298 
                                           break;
    {
      #line 2300 
      void *__vpp_verify = (void *)0;
      #line 2300 
      void *tmp = __vpp_verify;
    }
    #line 2301 
    ldv_inline_asm();
    #line 2300 
    txq_pcpu = ((struct mvpp2_txq_pcpu *)(__per_cpu_offset[thread] + __ptr));
    #line 2302 
    if (txq_pcpu->count != 0) {
      #line 2303 
      mvpp2_txq_done(port,txq,txq_pcpu);
      #line 2304 
      tx_todo = (unsigned int)txq_pcpu->count + tx_todo;
    }
    #line 2307 
    cause = (unsigned int)(~ (1 << (int)txq->log_id)) & cause;
  }
  #line 2309 
  return tx_todo;
}

#line 2315  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static int mvpp2_aggr_txq_init(struct platform_device *pdev, struct mvpp2_tx_queue *aggr_txq, unsigned int thread, struct mvpp2 *priv)
{
  #line 2319 
  u32 txq_dma;
  #line 2322 
  aggr_txq->descs = (struct mvpp2_tx_desc *)dma_alloc_coherent(& pdev->dev,8192UL,& aggr_txq->descs_dma,3264U);
  #line 2325 
  if (aggr_txq->descs == (struct mvpp2_tx_desc *)0) 
                                                    #line 2326 
                                                    return -12;
  #line 2328 
  aggr_txq->last_desc = 255;
  #line 2331 
  aggr_txq->next_desc_to_proc = (int)mvpp2_read(priv,(thread + 2160U) * 4U);
  #line 2337 
  if (priv->hw_version == (unsigned int)MVPP21) 
                                                #line 2338 
                                                txq_dma = (unsigned int)aggr_txq->descs_dma; else 
                                                                    #line 2340 
                                                                    txq_dma = (unsigned int)(aggr_txq->descs_dma >> 8);
  #line 2343 
  mvpp2_write(priv,(thread + 2112U) * 4U,txq_dma);
  #line 2344 
  mvpp2_write(priv,(thread + 2128U) * 4U,256U);
  #line 2347 
  return 0;
}

#line 2351  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static int mvpp2_rxq_init(struct mvpp2_port *port, struct mvpp2_rx_queue *rxq)
{
  #line 2373 
  int pscr_ret__;
  #line 2355 
  unsigned int thread;
  #line 2356 
  u32 rxq_dma;
  #line 2358 
  rxq->size = (int)port->rx_ring_size;
  #line 2361 
  rxq->descs = (struct mvpp2_rx_desc *)dma_alloc_coherent((port->dev)->dev.parent,(unsigned long)(rxq->size * 32),& rxq->descs_dma,3264U);
  #line 2364 
  if (rxq->descs == (struct mvpp2_rx_desc *)0) 
                                               #line 2365 
                                               return -12;
  #line 2367 
  rxq->last_desc = rxq->size + -1;
  #line 2370 
  mvpp2_write(port->priv,(unsigned int)(((int)rxq->id + 3328) * 4),0U);
  #line 2373 
  __preempt_count_add(1);
  #line 2374 
  ldv_inline_asm();
  #line 2373 
  __this_cpu_preempt_check((char *)"read");
  {
    #line 2373 
    void *__vpp_verify = (void *)0;
    #line 2373 
    void *tmp_2 = __vpp_verify;
  }
  #line 2373 
  switch (4UL) {
    #line 2373 
    int pfo_ret__;
    #line 2373 
    int pfo_ret___0;
    #line 2373 
    int pfo_ret___1;
    #line 2373 
    int pfo_ret___2;
    #line 2373 
    case (unsigned long)1: 
                           #line 2373 
    ;
    #line 2373 
    switch (4UL) {
      #line 2373 
      case (unsigned long)1: 
                             #line 2373 
      ;
      #line 2374 
      ldv_inline_asm();
      #line 2373 
      break;
      #line 2373 
      case (unsigned long)2: 
                             #line 2373 
      ;
      #line 2374 
      ldv_inline_asm();
      #line 2373 
      break;
      #line 2373 
      case (unsigned long)4: 
                             #line 2373 
      ;
      #line 2374 
      ldv_inline_asm();
      #line 2373 
      break;
      #line 2373 
      case (unsigned long)8: 
                             #line 2373 
      ;
      #line 2374 
      ldv_inline_asm();
      #line 2373 
      break;
      #line 2373 
      default: 
               #line 2373 
      ;
      #line 2373 
      __bad_percpu_size();
    }
    #line 2373 
    pscr_ret__ = pfo_ret__;
    #line 2373 
    break;
    #line 2373 
    case (unsigned long)2: 
                           #line 2373 
    ;
    #line 2373 
    switch (4UL) {
      #line 2373 
      case (unsigned long)1: 
                             #line 2373 
      ;
      #line 2374 
      ldv_inline_asm();
      #line 2373 
      break;
      #line 2373 
      case (unsigned long)2: 
                             #line 2373 
      ;
      #line 2374 
      ldv_inline_asm();
      #line 2373 
      break;
      #line 2373 
      case (unsigned long)4: 
                             #line 2373 
      ;
      #line 2374 
      ldv_inline_asm();
      #line 2373 
      break;
      #line 2373 
      case (unsigned long)8: 
                             #line 2373 
      ;
      #line 2374 
      ldv_inline_asm();
      #line 2373 
      break;
      #line 2373 
      default: 
               #line 2373 
      ;
      #line 2373 
      __bad_percpu_size();
    }
    #line 2373 
    pscr_ret__ = pfo_ret___0;
    #line 2373 
    break;
    #line 2373 
    case (unsigned long)4: 
                           #line 2373 
    ;
    #line 2373 
    switch (4UL) {
      #line 2373 
      case (unsigned long)1: 
                             #line 2373 
      ;
      #line 2374 
      ldv_inline_asm();
      #line 2373 
      break;
      #line 2373 
      case (unsigned long)2: 
                             #line 2373 
      ;
      #line 2374 
      ldv_inline_asm();
      #line 2373 
      break;
      #line 2373 
      case (unsigned long)4: 
                             #line 2373 
      ;
      #line 2374 
      ldv_inline_asm();
      #line 2373 
      break;
      #line 2373 
      case (unsigned long)8: 
                             #line 2373 
      ;
      #line 2374 
      ldv_inline_asm();
      #line 2373 
      break;
      #line 2373 
      default: 
               #line 2373 
      ;
      #line 2373 
      __bad_percpu_size();
    }
    #line 2373 
    pscr_ret__ = pfo_ret___1;
    #line 2373 
    break;
    #line 2373 
    case (unsigned long)8: 
                           #line 2373 
    ;
    #line 2373 
    switch (4UL) {
      #line 2373 
      case (unsigned long)1: 
                             #line 2373 
      ;
      #line 2374 
      ldv_inline_asm();
      #line 2373 
      break;
      #line 2373 
      case (unsigned long)2: 
                             #line 2373 
      ;
      #line 2374 
      ldv_inline_asm();
      #line 2373 
      break;
      #line 2373 
      case (unsigned long)4: 
                             #line 2373 
      ;
      #line 2374 
      ldv_inline_asm();
      #line 2373 
      break;
      #line 2373 
      case (unsigned long)8: 
                             #line 2373 
      ;
      #line 2374 
      ldv_inline_asm();
      #line 2373 
      break;
      #line 2373 
      default: 
               #line 2373 
      ;
      #line 2373 
      __bad_percpu_size();
    }
    #line 2373 
    pscr_ret__ = pfo_ret___2;
    #line 2373 
    break;
    #line 2373 
    default: 
             #line 2373 
    ;
    #line 2373 
    __bad_size_call_parameter();
    #line 2373 
    break;
  }
  #line 2373 
  ;
  #line 2373 
  thread = mvpp2_cpu_to_thread(port->priv,pscr_ret__);
  #line 2374 
  mvpp2_thread_write(port->priv,thread,8256U,(unsigned int)rxq->id);
  #line 2375 
  if ((port->priv)->hw_version == (unsigned int)MVPP21) 
                                                        #line 2376 
                                                        rxq_dma = (unsigned int)rxq->descs_dma; else 
                                                                    #line 2378 
                                                                    rxq_dma = (unsigned int)(rxq->descs_dma >> 8);
  #line 2379 
  mvpp2_thread_write(port->priv,thread,8260U,rxq_dma);
  #line 2380 
  mvpp2_thread_write(port->priv,thread,8264U,(unsigned int)rxq->size);
  #line 2381 
  mvpp2_thread_write(port->priv,thread,8272U,0U);
  #line 2384 
  ldv_inline_asm();
  #line 2382 
  __preempt_count_sub(1);
  #line 2385 
  mvpp2_rxq_offset_set(port,(int)rxq->id,64);
  #line 2388 
  mvpp2_rx_pkts_coal_set(port,rxq);
  #line 2389 
  mvpp2_rx_time_coal_set(port,rxq);
  #line 2392 
  mvpp2_rxq_status_update(port,(int)rxq->id,0,rxq->size);
  #line 2394 
  return 0;
}

#line 2398  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static void mvpp2_rxq_drop_pkts(struct mvpp2_port *port, struct mvpp2_rx_queue *rxq)
{
  #line 2401 
  int rx_received;
  #line 2401 
  int i;
  #line 2403 
  rx_received = mvpp2_rxq_received(port,(int)rxq->id);
  #line 2404 
  if (rx_received == 0) 
                        #line 2405 
                        return;
  #line 2407 
  i = 0;
  #line 2407 
  while (i < rx_received) {
    {
      #line 2410 
      int pool;
      #line 2408 
      struct mvpp2_rx_desc *rx_desc = mvpp2_rxq_next_desc_get(rxq);
      #line 2409 
      u32 status = mvpp2_rxdesc_status_get(port,rx_desc);
      #line 2412 
      pool = (int)((unsigned long)status >> 16) & 7;
      #line 2415 
      ;
      #line 2415 
      ;
      #line 2415 
      mvpp2_bm_pool_put(port,pool,mvpp2_rxdesc_dma_addr_get(port,rx_desc),(unsigned long long)mvpp2_rxdesc_cookie_get(port,rx_desc));
    }
    #line 2407 
    i ++;
  }
  #line 2419 
  mvpp2_rxq_status_update(port,(int)rxq->id,rx_received,rx_received);
  #line 2420 
  return;
}

#line 2423  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static void mvpp2_rxq_deinit(struct mvpp2_port *port, struct mvpp2_rx_queue *rxq)
{
  #line 2445 
  int pscr_ret__;
  #line 2426 
  unsigned int thread;
  #line 2428 
  mvpp2_rxq_drop_pkts(port,rxq);
  #line 2430 
  if (rxq->descs != (struct mvpp2_rx_desc *)0) 
                                               #line 2431 
                                               dma_free_coherent((port->dev)->dev.parent,(unsigned long)(rxq->size * 32),(void *)rxq->descs,rxq->descs_dma);
  #line 2436 
  rxq->descs = (struct mvpp2_rx_desc *)0;
  #line 2437 
  rxq->last_desc = 0;
  #line 2438 
  rxq->next_desc_to_proc = 0;
  #line 2439 
  rxq->descs_dma = 0ULL;
  #line 2444 
  mvpp2_write(port->priv,(unsigned int)(((int)rxq->id + 3328) * 4),0U);
  #line 2445 
  __preempt_count_add(1);
  #line 2446 
  ldv_inline_asm();
  #line 2445 
  __this_cpu_preempt_check((char *)"read");
  {
    #line 2445 
    void *__vpp_verify = (void *)0;
    #line 2445 
    void *tmp = __vpp_verify;
  }
  #line 2445 
  switch (4UL) {
    #line 2445 
    int pfo_ret___1;
    #line 2445 
    int pfo_ret___2;
    #line 2445 
    int pfo_ret__;
    #line 2445 
    int pfo_ret___0;
    #line 2445 
    case (unsigned long)1: 
                           #line 2445 
    ;
    #line 2445 
    switch (4UL) {
      #line 2445 
      case (unsigned long)1: 
                             #line 2445 
      ;
      #line 2446 
      ldv_inline_asm();
      #line 2445 
      break;
      #line 2445 
      case (unsigned long)2: 
                             #line 2445 
      ;
      #line 2446 
      ldv_inline_asm();
      #line 2445 
      break;
      #line 2445 
      case (unsigned long)4: 
                             #line 2445 
      ;
      #line 2446 
      ldv_inline_asm();
      #line 2445 
      break;
      #line 2445 
      case (unsigned long)8: 
                             #line 2445 
      ;
      #line 2446 
      ldv_inline_asm();
      #line 2445 
      break;
      #line 2445 
      default: 
               #line 2445 
      ;
      #line 2445 
      __bad_percpu_size();
    }
    #line 2445 
    pscr_ret__ = pfo_ret__;
    #line 2445 
    break;
    #line 2445 
    case (unsigned long)2: 
                           #line 2445 
    ;
    #line 2445 
    switch (4UL) {
      #line 2445 
      case (unsigned long)1: 
                             #line 2445 
      ;
      #line 2446 
      ldv_inline_asm();
      #line 2445 
      break;
      #line 2445 
      case (unsigned long)2: 
                             #line 2445 
      ;
      #line 2446 
      ldv_inline_asm();
      #line 2445 
      break;
      #line 2445 
      case (unsigned long)4: 
                             #line 2445 
      ;
      #line 2446 
      ldv_inline_asm();
      #line 2445 
      break;
      #line 2445 
      case (unsigned long)8: 
                             #line 2445 
      ;
      #line 2446 
      ldv_inline_asm();
      #line 2445 
      break;
      #line 2445 
      default: 
               #line 2445 
      ;
      #line 2445 
      __bad_percpu_size();
    }
    #line 2445 
    pscr_ret__ = pfo_ret___0;
    #line 2445 
    break;
    #line 2445 
    case (unsigned long)4: 
                           #line 2445 
    ;
    #line 2445 
    switch (4UL) {
      #line 2445 
      case (unsigned long)1: 
                             #line 2445 
      ;
      #line 2446 
      ldv_inline_asm();
      #line 2445 
      break;
      #line 2445 
      case (unsigned long)2: 
                             #line 2445 
      ;
      #line 2446 
      ldv_inline_asm();
      #line 2445 
      break;
      #line 2445 
      case (unsigned long)4: 
                             #line 2445 
      ;
      #line 2446 
      ldv_inline_asm();
      #line 2445 
      break;
      #line 2445 
      case (unsigned long)8: 
                             #line 2445 
      ;
      #line 2446 
      ldv_inline_asm();
      #line 2445 
      break;
      #line 2445 
      default: 
               #line 2445 
      ;
      #line 2445 
      __bad_percpu_size();
    }
    #line 2445 
    pscr_ret__ = pfo_ret___1;
    #line 2445 
    break;
    #line 2445 
    case (unsigned long)8: 
                           #line 2445 
    ;
    #line 2445 
    switch (4UL) {
      #line 2445 
      case (unsigned long)1: 
                             #line 2445 
      ;
      #line 2446 
      ldv_inline_asm();
      #line 2445 
      break;
      #line 2445 
      case (unsigned long)2: 
                             #line 2445 
      ;
      #line 2446 
      ldv_inline_asm();
      #line 2445 
      break;
      #line 2445 
      case (unsigned long)4: 
                             #line 2445 
      ;
      #line 2446 
      ldv_inline_asm();
      #line 2445 
      break;
      #line 2445 
      case (unsigned long)8: 
                             #line 2445 
      ;
      #line 2446 
      ldv_inline_asm();
      #line 2445 
      break;
      #line 2445 
      default: 
               #line 2445 
      ;
      #line 2445 
      __bad_percpu_size();
    }
    #line 2445 
    pscr_ret__ = pfo_ret___2;
    #line 2445 
    break;
    #line 2445 
    default: 
             #line 2445 
    ;
    #line 2445 
    __bad_size_call_parameter();
    #line 2445 
    break;
  }
  #line 2445 
  ;
  #line 2445 
  thread = mvpp2_cpu_to_thread(port->priv,pscr_ret__);
  #line 2446 
  mvpp2_thread_write(port->priv,thread,8256U,(unsigned int)rxq->id);
  #line 2447 
  mvpp2_thread_write(port->priv,thread,8260U,0U);
  #line 2448 
  mvpp2_thread_write(port->priv,thread,8264U,0U);
  #line 2451 
  ldv_inline_asm();
  #line 2449 
  __preempt_count_sub(1);
  #line 2451 
  return;
}

#line 2453  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static int mvpp2_txq_init(struct mvpp2_port *port, struct mvpp2_tx_queue *txq)
{
  #line 2473 
  int pscr_ret__;
  #line 2456 
  u32 val;
  #line 2457 
  unsigned int thread;
  #line 2458 
  int desc;
  #line 2458 
  int desc_per_txq;
  #line 2458 
  int tx_port_num;
  #line 2459 
  struct mvpp2_txq_pcpu *txq_pcpu;
  #line 2461 
  txq->size = (int)port->tx_ring_size;
  #line 2464 
  txq->descs = (struct mvpp2_tx_desc *)dma_alloc_coherent((port->dev)->dev.parent,(unsigned long)(txq->size * 32),& txq->descs_dma,3264U);
  #line 2467 
  if (txq->descs == (struct mvpp2_tx_desc *)0) 
                                               #line 2468 
                                               return -12;
  #line 2470 
  txq->last_desc = txq->size + -1;
  #line 2473 
  __preempt_count_add(1);
  #line 2474 
  ldv_inline_asm();
  #line 2473 
  __this_cpu_preempt_check((char *)"read");
  {
    #line 2473 
    void *__vpp_verify = (void *)0;
    #line 2473 
    void *tmp_2 = __vpp_verify;
  }
  #line 2473 
  switch (4UL) {
    #line 2473 
    int pfo_ret___2;
    #line 2473 
    int pfo_ret__;
    #line 2473 
    int pfo_ret___0;
    #line 2473 
    int pfo_ret___1;
    #line 2473 
    case (unsigned long)1: 
                           #line 2473 
    ;
    #line 2473 
    switch (4UL) {
      #line 2473 
      case (unsigned long)1: 
                             #line 2473 
      ;
      #line 2474 
      ldv_inline_asm();
      #line 2473 
      break;
      #line 2473 
      case (unsigned long)2: 
                             #line 2473 
      ;
      #line 2474 
      ldv_inline_asm();
      #line 2473 
      break;
      #line 2473 
      case (unsigned long)4: 
                             #line 2473 
      ;
      #line 2474 
      ldv_inline_asm();
      #line 2473 
      break;
      #line 2473 
      case (unsigned long)8: 
                             #line 2473 
      ;
      #line 2474 
      ldv_inline_asm();
      #line 2473 
      break;
      #line 2473 
      default: 
               #line 2473 
      ;
      #line 2473 
      __bad_percpu_size();
    }
    #line 2473 
    pscr_ret__ = pfo_ret__;
    #line 2473 
    break;
    #line 2473 
    case (unsigned long)2: 
                           #line 2473 
    ;
    #line 2473 
    switch (4UL) {
      #line 2473 
      case (unsigned long)1: 
                             #line 2473 
      ;
      #line 2474 
      ldv_inline_asm();
      #line 2473 
      break;
      #line 2473 
      case (unsigned long)2: 
                             #line 2473 
      ;
      #line 2474 
      ldv_inline_asm();
      #line 2473 
      break;
      #line 2473 
      case (unsigned long)4: 
                             #line 2473 
      ;
      #line 2474 
      ldv_inline_asm();
      #line 2473 
      break;
      #line 2473 
      case (unsigned long)8: 
                             #line 2473 
      ;
      #line 2474 
      ldv_inline_asm();
      #line 2473 
      break;
      #line 2473 
      default: 
               #line 2473 
      ;
      #line 2473 
      __bad_percpu_size();
    }
    #line 2473 
    pscr_ret__ = pfo_ret___0;
    #line 2473 
    break;
    #line 2473 
    case (unsigned long)4: 
                           #line 2473 
    ;
    #line 2473 
    switch (4UL) {
      #line 2473 
      case (unsigned long)1: 
                             #line 2473 
      ;
      #line 2474 
      ldv_inline_asm();
      #line 2473 
      break;
      #line 2473 
      case (unsigned long)2: 
                             #line 2473 
      ;
      #line 2474 
      ldv_inline_asm();
      #line 2473 
      break;
      #line 2473 
      case (unsigned long)4: 
                             #line 2473 
      ;
      #line 2474 
      ldv_inline_asm();
      #line 2473 
      break;
      #line 2473 
      case (unsigned long)8: 
                             #line 2473 
      ;
      #line 2474 
      ldv_inline_asm();
      #line 2473 
      break;
      #line 2473 
      default: 
               #line 2473 
      ;
      #line 2473 
      __bad_percpu_size();
    }
    #line 2473 
    pscr_ret__ = pfo_ret___1;
    #line 2473 
    break;
    #line 2473 
    case (unsigned long)8: 
                           #line 2473 
    ;
    #line 2473 
    switch (4UL) {
      #line 2473 
      case (unsigned long)1: 
                             #line 2473 
      ;
      #line 2474 
      ldv_inline_asm();
      #line 2473 
      break;
      #line 2473 
      case (unsigned long)2: 
                             #line 2473 
      ;
      #line 2474 
      ldv_inline_asm();
      #line 2473 
      break;
      #line 2473 
      case (unsigned long)4: 
                             #line 2473 
      ;
      #line 2474 
      ldv_inline_asm();
      #line 2473 
      break;
      #line 2473 
      case (unsigned long)8: 
                             #line 2473 
      ;
      #line 2474 
      ldv_inline_asm();
      #line 2473 
      break;
      #line 2473 
      default: 
               #line 2473 
      ;
      #line 2473 
      __bad_percpu_size();
    }
    #line 2473 
    pscr_ret__ = pfo_ret___2;
    #line 2473 
    break;
    #line 2473 
    default: 
             #line 2473 
    ;
    #line 2473 
    __bad_size_call_parameter();
    #line 2473 
    break;
  }
  #line 2473 
  ;
  #line 2473 
  thread = mvpp2_cpu_to_thread(port->priv,pscr_ret__);
  #line 2474 
  mvpp2_thread_write(port->priv,thread,8320U,(unsigned int)txq->id);
  #line 2475 
  mvpp2_thread_write(port->priv,thread,8324U,(unsigned int)txq->descs_dma);
  #line 2477 
  mvpp2_thread_write(port->priv,thread,8328U,(unsigned int)txq->size & 16368U);
  #line 2479 
  mvpp2_thread_write(port->priv,thread,8344U,0U);
  #line 2480 
  mvpp2_thread_write(port->priv,thread,8376U,(unsigned int)((int)txq->id << 16));
  #line 2482 
  val = mvpp2_thread_read(port->priv,thread,8352U);
  #line 2483 
  val &= 4294950912U;
  #line 2484 
  mvpp2_thread_write(port->priv,thread,8352U,val);
  #line 2491 
  desc_per_txq = 16;
  #line 2492 
  desc = ((int)port->id * desc_per_txq) * 8 + (int)txq->log_id * desc_per_txq;
  #line 2495 
  mvpp2_thread_write(port->priv,thread,8348U,(((unsigned int)desc & 4095U) | (unsigned int)(desc_per_txq / 2 << 17)) | 20480U);
  #line 2500 
  ldv_inline_asm();
  #line 2498 
  __preempt_count_sub(1);
  #line 2501 
  tx_port_num = mvpp2_egress_port(port);
  #line 2502 
  mvpp2_write(port->priv,32768U,(unsigned int)tx_port_num);
  #line 2504 
  val = mvpp2_read(port->priv,(unsigned int)(((int)txq->log_id << 2) + 32832));
  #line 2505 
  val &= 3222274047U;
  #line 2506 
  val |= 1048576U;
  #line 2507 
  val |= 524287U;
  #line 2508 
  mvpp2_write(port->priv,(unsigned int)(((int)txq->log_id << 2) + 32832),val);
  #line 2510 
  val = 2147483647U;
  #line 2511 
  mvpp2_write(port->priv,(unsigned int)(((int)txq->log_id << 2) + 32864),val);
  #line 2514 
  thread = 0U;
  #line 2514 
  while ((port->priv)->nthreads > thread) {
    {
      #line 2515 
      unsigned long __ptr;
      {
        #line 2515 
        void *__vpp_verify_0 = (void *)0;
        #line 2515 
        void *tmp_7 = __vpp_verify_0;
      }
      #line 2516 
      ldv_inline_asm();
      #line 2515 
      txq_pcpu = ((struct mvpp2_txq_pcpu *)(__per_cpu_offset[thread] + __ptr));
      #line 2516 
      txq_pcpu->size = txq->size;
      #line 2517 
      txq_pcpu->buffs = (struct mvpp2_txq_pcpu_buf *)kmalloc_array((unsigned long)txq_pcpu->size,24UL,3264U);
      #line 2520 
      if (txq_pcpu->buffs == (struct mvpp2_txq_pcpu_buf *)0) 
                                                             #line 2521 
                                                             return -12;
      #line 2523 
      txq_pcpu->count = 0;
      #line 2524 
      txq_pcpu->reserved_num = 0;
      #line 2525 
      txq_pcpu->txq_put_index = 0;
      #line 2526 
      txq_pcpu->txq_get_index = 0;
      #line 2527 
      txq_pcpu->tso_headers = (char *)0;
      #line 2529 
      txq_pcpu->stop_threshold = (int)((unsigned int)txq->size + 4294966679U);
      #line 2530 
      txq_pcpu->wake_threshold = txq_pcpu->stop_threshold / 2;
      #line 2533 
      txq_pcpu->tso_headers = (char *)dma_alloc_coherent((port->dev)->dev.parent,(unsigned long)(txq_pcpu->size * 128),& txq_pcpu->tso_headers_dma,3264U);
      #line 2537 
      if (txq_pcpu->tso_headers == (char *)0) 
                                              #line 2538 
                                              return -12;
    }
    #line 2514 
    thread ++;
  }
  #line 2541 
  return 0;
}

#line 2545  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static void mvpp2_txq_deinit(struct mvpp2_port *port, struct mvpp2_tx_queue *txq)
{
  #line 2578 
  int pscr_ret__;
  #line 2548 
  struct mvpp2_txq_pcpu *txq_pcpu;
  #line 2549 
  unsigned int thread;
  #line 2551 
  thread = 0U;
  #line 2551 
  while ((port->priv)->nthreads > thread) {
    {
      #line 2552 
      unsigned long __ptr;
      {
        #line 2552 
        void *__vpp_verify = (void *)0;
        #line 2552 
        void *tmp = __vpp_verify;
      }
      #line 2553 
      ldv_inline_asm();
      #line 2552 
      txq_pcpu = ((struct mvpp2_txq_pcpu *)(__per_cpu_offset[thread] + __ptr));
      #line 2553 
      kfree((void *)txq_pcpu->buffs);
      #line 2555 
      if (txq_pcpu->tso_headers != (char *)0) 
                                              #line 2556 
                                              dma_free_coherent((port->dev)->dev.parent,(unsigned long)(txq_pcpu->size * 128),(void *)txq_pcpu->tso_headers,txq_pcpu->tso_headers_dma);
      #line 2561 
      txq_pcpu->tso_headers = (char *)0;
    }
    #line 2551 
    thread ++;
  }
  #line 2564 
  if (txq->descs != (struct mvpp2_tx_desc *)0) 
                                               #line 2565 
                                               dma_free_coherent((port->dev)->dev.parent,(unsigned long)(txq->size * 32),(void *)txq->descs,txq->descs_dma);
  #line 2569 
  txq->descs = (struct mvpp2_tx_desc *)0;
  #line 2570 
  txq->last_desc = 0;
  #line 2571 
  txq->next_desc_to_proc = 0;
  #line 2572 
  txq->descs_dma = 0ULL;
  #line 2575 
  mvpp2_write(port->priv,(unsigned int)(((int)txq->log_id << 2) + 32896),0U);
  #line 2578 
  __preempt_count_add(1);
  #line 2579 
  ldv_inline_asm();
  #line 2578 
  __this_cpu_preempt_check((char *)"read");
  {
    #line 2578 
    void *__vpp_verify_0 = (void *)0;
    #line 2578 
    void *tmp_3 = __vpp_verify_0;
  }
  #line 2578 
  switch (4UL) {
    #line 2578 
    int pfo_ret___0;
    #line 2578 
    int pfo_ret___1;
    #line 2578 
    int pfo_ret___2;
    #line 2578 
    int pfo_ret__;
    #line 2578 
    case (unsigned long)1: 
                           #line 2578 
    ;
    #line 2578 
    switch (4UL) {
      #line 2578 
      case (unsigned long)1: 
                             #line 2578 
      ;
      #line 2579 
      ldv_inline_asm();
      #line 2578 
      break;
      #line 2578 
      case (unsigned long)2: 
                             #line 2578 
      ;
      #line 2579 
      ldv_inline_asm();
      #line 2578 
      break;
      #line 2578 
      case (unsigned long)4: 
                             #line 2578 
      ;
      #line 2579 
      ldv_inline_asm();
      #line 2578 
      break;
      #line 2578 
      case (unsigned long)8: 
                             #line 2578 
      ;
      #line 2579 
      ldv_inline_asm();
      #line 2578 
      break;
      #line 2578 
      default: 
               #line 2578 
      ;
      #line 2578 
      __bad_percpu_size();
    }
    #line 2578 
    pscr_ret__ = pfo_ret__;
    #line 2578 
    break;
    #line 2578 
    case (unsigned long)2: 
                           #line 2578 
    ;
    #line 2578 
    switch (4UL) {
      #line 2578 
      case (unsigned long)1: 
                             #line 2578 
      ;
      #line 2579 
      ldv_inline_asm();
      #line 2578 
      break;
      #line 2578 
      case (unsigned long)2: 
                             #line 2578 
      ;
      #line 2579 
      ldv_inline_asm();
      #line 2578 
      break;
      #line 2578 
      case (unsigned long)4: 
                             #line 2578 
      ;
      #line 2579 
      ldv_inline_asm();
      #line 2578 
      break;
      #line 2578 
      case (unsigned long)8: 
                             #line 2578 
      ;
      #line 2579 
      ldv_inline_asm();
      #line 2578 
      break;
      #line 2578 
      default: 
               #line 2578 
      ;
      #line 2578 
      __bad_percpu_size();
    }
    #line 2578 
    pscr_ret__ = pfo_ret___0;
    #line 2578 
    break;
    #line 2578 
    case (unsigned long)4: 
                           #line 2578 
    ;
    #line 2578 
    switch (4UL) {
      #line 2578 
      case (unsigned long)1: 
                             #line 2578 
      ;
      #line 2579 
      ldv_inline_asm();
      #line 2578 
      break;
      #line 2578 
      case (unsigned long)2: 
                             #line 2578 
      ;
      #line 2579 
      ldv_inline_asm();
      #line 2578 
      break;
      #line 2578 
      case (unsigned long)4: 
                             #line 2578 
      ;
      #line 2579 
      ldv_inline_asm();
      #line 2578 
      break;
      #line 2578 
      case (unsigned long)8: 
                             #line 2578 
      ;
      #line 2579 
      ldv_inline_asm();
      #line 2578 
      break;
      #line 2578 
      default: 
               #line 2578 
      ;
      #line 2578 
      __bad_percpu_size();
    }
    #line 2578 
    pscr_ret__ = pfo_ret___1;
    #line 2578 
    break;
    #line 2578 
    case (unsigned long)8: 
                           #line 2578 
    ;
    #line 2578 
    switch (4UL) {
      #line 2578 
      case (unsigned long)1: 
                             #line 2578 
      ;
      #line 2579 
      ldv_inline_asm();
      #line 2578 
      break;
      #line 2578 
      case (unsigned long)2: 
                             #line 2578 
      ;
      #line 2579 
      ldv_inline_asm();
      #line 2578 
      break;
      #line 2578 
      case (unsigned long)4: 
                             #line 2578 
      ;
      #line 2579 
      ldv_inline_asm();
      #line 2578 
      break;
      #line 2578 
      case (unsigned long)8: 
                             #line 2578 
      ;
      #line 2579 
      ldv_inline_asm();
      #line 2578 
      break;
      #line 2578 
      default: 
               #line 2578 
      ;
      #line 2578 
      __bad_percpu_size();
    }
    #line 2578 
    pscr_ret__ = pfo_ret___2;
    #line 2578 
    break;
    #line 2578 
    default: 
             #line 2578 
    ;
    #line 2578 
    __bad_size_call_parameter();
    #line 2578 
    break;
  }
  #line 2578 
  ;
  #line 2578 
  thread = mvpp2_cpu_to_thread(port->priv,pscr_ret__);
  #line 2579 
  mvpp2_thread_write(port->priv,thread,8320U,(unsigned int)txq->id);
  #line 2580 
  mvpp2_thread_write(port->priv,thread,8324U,0U);
  #line 2581 
  mvpp2_thread_write(port->priv,thread,8328U,0U);
  #line 2584 
  ldv_inline_asm();
  #line 2582 
  __preempt_count_sub(1);
  #line 2584 
  return;
}

#line 2586  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static void mvpp2_txq_clean(struct mvpp2_port *port, struct mvpp2_tx_queue *txq)
{
  #line 2590 
  int pscr_ret__;
  #line 2588 
  struct mvpp2_txq_pcpu *txq_pcpu;
  #line 2589 
  int delay;
  #line 2589 
  int pending;
  #line 2591 
  u32 val;
  #line 2590 
  __preempt_count_add(1);
  #line 2591 
  ldv_inline_asm();
  #line 2590 
  __this_cpu_preempt_check((char *)"read");
  {
    #line 2590 
    void *__vpp_verify = (void *)0;
    #line 2590 
    void *tmp = __vpp_verify;
  }
  #line 2590 
  switch (4UL) {
    #line 2590 
    int pfo_ret___2;
    #line 2590 
    int pfo_ret__;
    #line 2590 
    int pfo_ret___0;
    #line 2590 
    int pfo_ret___1;
    #line 2590 
    case (unsigned long)1: 
                           #line 2590 
    ;
    #line 2590 
    switch (4UL) {
      #line 2590 
      case (unsigned long)1: 
                             #line 2590 
      ;
      #line 2591 
      ldv_inline_asm();
      #line 2590 
      break;
      #line 2590 
      case (unsigned long)2: 
                             #line 2590 
      ;
      #line 2591 
      ldv_inline_asm();
      #line 2590 
      break;
      #line 2590 
      case (unsigned long)4: 
                             #line 2590 
      ;
      #line 2591 
      ldv_inline_asm();
      #line 2590 
      break;
      #line 2590 
      case (unsigned long)8: 
                             #line 2590 
      ;
      #line 2591 
      ldv_inline_asm();
      #line 2590 
      break;
      #line 2590 
      default: 
               #line 2590 
      ;
      #line 2590 
      __bad_percpu_size();
    }
    #line 2590 
    pscr_ret__ = pfo_ret__;
    #line 2590 
    break;
    #line 2590 
    case (unsigned long)2: 
                           #line 2590 
    ;
    #line 2590 
    switch (4UL) {
      #line 2590 
      case (unsigned long)1: 
                             #line 2590 
      ;
      #line 2591 
      ldv_inline_asm();
      #line 2590 
      break;
      #line 2590 
      case (unsigned long)2: 
                             #line 2590 
      ;
      #line 2591 
      ldv_inline_asm();
      #line 2590 
      break;
      #line 2590 
      case (unsigned long)4: 
                             #line 2590 
      ;
      #line 2591 
      ldv_inline_asm();
      #line 2590 
      break;
      #line 2590 
      case (unsigned long)8: 
                             #line 2590 
      ;
      #line 2591 
      ldv_inline_asm();
      #line 2590 
      break;
      #line 2590 
      default: 
               #line 2590 
      ;
      #line 2590 
      __bad_percpu_size();
    }
    #line 2590 
    pscr_ret__ = pfo_ret___0;
    #line 2590 
    break;
    #line 2590 
    case (unsigned long)4: 
                           #line 2590 
    ;
    #line 2590 
    switch (4UL) {
      #line 2590 
      case (unsigned long)1: 
                             #line 2590 
      ;
      #line 2591 
      ldv_inline_asm();
      #line 2590 
      break;
      #line 2590 
      case (unsigned long)2: 
                             #line 2590 
      ;
      #line 2591 
      ldv_inline_asm();
      #line 2590 
      break;
      #line 2590 
      case (unsigned long)4: 
                             #line 2590 
      ;
      #line 2591 
      ldv_inline_asm();
      #line 2590 
      break;
      #line 2590 
      case (unsigned long)8: 
                             #line 2590 
      ;
      #line 2591 
      ldv_inline_asm();
      #line 2590 
      break;
      #line 2590 
      default: 
               #line 2590 
      ;
      #line 2590 
      __bad_percpu_size();
    }
    #line 2590 
    pscr_ret__ = pfo_ret___1;
    #line 2590 
    break;
    #line 2590 
    case (unsigned long)8: 
                           #line 2590 
    ;
    #line 2590 
    switch (4UL) {
      #line 2590 
      case (unsigned long)1: 
                             #line 2590 
      ;
      #line 2591 
      ldv_inline_asm();
      #line 2590 
      break;
      #line 2590 
      case (unsigned long)2: 
                             #line 2590 
      ;
      #line 2591 
      ldv_inline_asm();
      #line 2590 
      break;
      #line 2590 
      case (unsigned long)4: 
                             #line 2590 
      ;
      #line 2591 
      ldv_inline_asm();
      #line 2590 
      break;
      #line 2590 
      case (unsigned long)8: 
                             #line 2590 
      ;
      #line 2591 
      ldv_inline_asm();
      #line 2590 
      break;
      #line 2590 
      default: 
               #line 2590 
      ;
      #line 2590 
      __bad_percpu_size();
    }
    #line 2590 
    pscr_ret__ = pfo_ret___2;
    #line 2590 
    break;
    #line 2590 
    default: 
             #line 2590 
    ;
    #line 2590 
    __bad_size_call_parameter();
    #line 2590 
    break;
  }
  #line 2590 
  ;
  #line 2590 
  unsigned int thread = mvpp2_cpu_to_thread(port->priv,pscr_ret__);
  #line 2593 
  mvpp2_thread_write(port->priv,thread,8320U,(unsigned int)txq->id);
  #line 2594 
  val = mvpp2_thread_read(port->priv,thread,8348U);
  #line 2595 
  val |= 2147483648U;
  #line 2596 
  mvpp2_thread_write(port->priv,thread,8348U,val);
  #line 2601 
  delay = 0;
  #line 2602 
  while (1) {
    {
      #line 2603 
      if (delay > 999) {
        #line 2604 
        netdev_warn(port->dev,(char *)"port %d: cleaning queue %d timed out\n",(int)port->id,(int)txq->log_id);
        #line 2607 
        break;
      }
      #line 2609 
      __const_udelay(4295000UL);
      #line 2610 
      delay ++;
      #line 2612 
      pending = (int)mvpp2_thread_read(port->priv,thread,8352U);
      #line 2614 
      pending &= 16383;
    }
    #line 2615 
    if (! (pending != 0)) 
                          #line 2602 
                          break;
  }
  #line 2617 
  val &= 2147483647U;
  #line 2618 
  mvpp2_thread_write(port->priv,thread,8348U,val);
  #line 2621 
  ldv_inline_asm();
  #line 2619 
  __preempt_count_sub(1);
  #line 2621 
  thread = 0U;
  #line 2621 
  while ((port->priv)->nthreads > thread) {
    {
      #line 2622 
      unsigned long __ptr;
      {
        #line 2622 
        void *__vpp_verify_0 = (void *)0;
        #line 2622 
        void *tmp_8 = __vpp_verify_0;
      }
      #line 2623 
      ldv_inline_asm();
      #line 2622 
      txq_pcpu = ((struct mvpp2_txq_pcpu *)(__per_cpu_offset[thread] + __ptr));
      #line 2625 
      mvpp2_txq_bufs_free(port,txq,txq_pcpu,txq_pcpu->count);
      #line 2628 
      txq_pcpu->count = 0;
      #line 2629 
      txq_pcpu->txq_put_index = 0;
      #line 2630 
      txq_pcpu->txq_get_index = 0;
    }
    #line 2621 
    thread ++;
  }
  #line 2632 
  return;
}

#line 2635  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static void mvpp2_cleanup_txqs(struct mvpp2_port *port)
{
  #line 2637 
  struct mvpp2_tx_queue *txq;
  #line 2638 
  int queue;
  #line 2639 
  u32 val;
  #line 2641 
  val = mvpp2_read(port->priv,34832U);
  #line 2644 
  val = (unsigned int)(1 << (int)port->id) | val;
  #line 2645 
  mvpp2_write(port->priv,34832U,val);
  #line 2647 
  queue = 0;
  #line 2647 
  while (port->ntxqs > (unsigned int)queue) {
    #line 2648 
    txq = *(port->txqs + (unsigned long)queue);
    #line 2649 
    mvpp2_txq_clean(port,txq);
    #line 2650 
    mvpp2_txq_deinit(port,txq);
    #line 2647 
    queue ++;
  }
  #line 2653 
  on_each_cpu(& mvpp2_txq_sent_counter_clear,(void *)port,1);
  #line 2655 
  val = (unsigned int)(~ (1 << (int)port->id)) & val;
  #line 2656 
  mvpp2_write(port->priv,34832U,val);
  #line 2657 
  return;
}

#line 2660  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static void mvpp2_cleanup_rxqs(struct mvpp2_port *port)
{
  #line 2662 
  int queue;
  #line 2664 
  queue = 0;
  #line 2664 
  while (port->nrxqs > (unsigned int)queue) {
    #line 2665 
    mvpp2_rxq_deinit(port,*(port->rxqs + (unsigned long)queue));
    #line 2664 
    queue ++;
  }
  #line 2666 
  return;
}

#line 2669  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static int mvpp2_setup_rxqs(struct mvpp2_port *port)
{
  #line 2671 
  int queue;
  #line 2671 
  int err;
  #line 2673 
  queue = 0;
  #line 2673 
  while (port->nrxqs > (unsigned int)queue) {
    #line 2674 
    err = mvpp2_rxq_init(port,*(port->rxqs + (unsigned long)queue));
    #line 2675 
    if (err != 0) 
                  #line 2676 
                  goto err_cleanup;
    #line 2673 
    queue ++;
  }
  #line 2678 
  return 0;
  #line 2680 
  err_cleanup: 
               #line 2680 
  ;
  #line 2681 
  mvpp2_cleanup_rxqs(port);
  #line 2682 
  return err;
}

#line 2686  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static int mvpp2_setup_txqs(struct mvpp2_port *port)
{
  #line 2688 
  struct mvpp2_tx_queue *txq;
  #line 2689 
  int queue;
  #line 2689 
  int err;
  #line 2689 
  int cpu;
  #line 2691 
  queue = 0;
  #line 2691 
  while (port->ntxqs > (unsigned int)queue) {
    {
      #line 2692 
      txq = *(port->txqs + (unsigned long)queue);
      #line 2693 
      err = mvpp2_txq_init(port,txq);
      #line 2694 
      if (err != 0) 
                    #line 2695 
                    goto err_cleanup;
      #line 2698 
      cpu = (int)((unsigned int)queue % cpumask_weight(& __cpu_present_mask));
      #line 2699 
      ;
      #line 2699 
      ;
      #line 2699 
      netif_set_xps_queue(port->dev,get_cpu_mask((unsigned int)cpu),(unsigned short)((int)((unsigned short)queue)));
    }
    #line 2691 
    queue ++;
  }
  #line 2702 
  if ((int)port->has_tx_irqs != 0) {
    #line 2703 
    mvpp2_tx_time_coal_set(port);
    #line 2704 
    queue = 0;
    #line 2704 
    while (port->ntxqs > (unsigned int)queue) {
      #line 2705 
      txq = *(port->txqs + (unsigned long)queue);
      #line 2706 
      mvpp2_tx_pkts_coal_set(port,txq);
      #line 2704 
      queue ++;
    }
  }
  #line 2710 
  on_each_cpu(& mvpp2_txq_sent_counter_clear,(void *)port,1);
  #line 2711 
  return 0;
  #line 2713 
  err_cleanup: 
               #line 2713 
  ;
  #line 2714 
  mvpp2_cleanup_txqs(port);
  #line 2715 
  return err;
}

#line 2719  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static irqreturn_t mvpp2_isr(int irq, void *dev_id)
{
  #line 2721 
  struct mvpp2_queue_vector *qv = (struct mvpp2_queue_vector *)dev_id;
  #line 2723 
  mvpp2_qvec_interrupt_disable(qv);
  #line 2725 
  napi_schedule(& qv->napi);
  #line 2727 
  return IRQ_HANDLED;
}

#line 2731  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static irqreturn_t mvpp2_link_status_isr(int irq, void *dev_id)
{
  #line 2736 
  u32 val;
  #line 2733 
  struct mvpp2_port *port = (struct mvpp2_port *)dev_id;
  #line 2734 
  struct net_device *dev = port->dev;
  #line 2735 
  bool event = (_Bool)0;
  #line 2735 
  bool link = (_Bool)0;
  #line 2738 
  mvpp22_gop_mask_irq(port);
  #line 2740 
  if (port->gop_id == 0) {
    #line 2740 
    if ((int)mvpp2_is_xlg(port->phy_interface) != 0) {
      #line 2741 
      val = readl(port->base + 276U);
      #line 2742 
      if (((unsigned long)val & 2UL) != 0UL) {
        #line 2743 
        event = (_Bool)1;
        #line 2744 
        val = readl(port->base + 268U);
        #line 2745 
        if (((unsigned long)val & 1UL) != 0UL) 
                                               #line 2746 
                                               link = (_Bool)1;
      }
    }
    else 
         #line 2740 
         goto _LAND;
  }
  else {
    #line 2740 
    _LAND: 
    #line 2748 
    if ((int)phy_interface_mode_is_rgmii(port->phy_interface) != 0) 
                                                                    #line 2748 
                                                                    goto _LOR;
    else {
      #line 2748 
      if ((int)phy_interface_mode_is_8023z(port->phy_interface) != 0) 
        #line 2748 
        goto _LOR;
      else 
        #line 2749 
        if (port->phy_interface == (unsigned int)PHY_INTERFACE_MODE_SGMII) {
          #line 2748 
          _LOR: {
                  #line 2751 
                  val = readl(port->base + 32U);
                  #line 2752 
                  if (((unsigned long)val & 2UL) != 0UL) {
                    #line 2753 
                    event = (_Bool)1;
                    #line 2754 
                    val = readl(port->base + 16U);
                    #line 2755 
                    if (((unsigned long)val & 1UL) != 0UL) 
                                                           #line 2756 
                                                           link = (_Bool)1;
                  }
                }
        }
    }
  }
  #line 2760 
  if (port->phylink != (struct phylink *)0) {
    #line 2761 
    phylink_mac_change(port->phylink,(_Bool)((bool)((int)link) != 0));
    #line 2762 
    goto handled;
  }
  #line 2765 
  if (netif_running(dev)) {
    #line 2765 
    if (! event) 
                 #line 2765 
                 _LOR_0: 
                         #line 2766 
                         goto handled;
  }
  else 
       #line 2765 
       goto _LOR_0;
  #line 2768 
  if ((int)link != 0) {
    #line 2769 
    mvpp2_interrupts_enable(port);
    #line 2771 
    mvpp2_egress_enable(port);
    #line 2772 
    mvpp2_ingress_enable(port);
    #line 2773 
    netif_carrier_on(dev);
    #line 2774 
    netif_tx_wake_all_queues(dev);
  }
  else {
    #line 2776 
    netif_tx_stop_all_queues(dev);
    #line 2777 
    netif_carrier_off(dev);
    #line 2778 
    mvpp2_ingress_disable(port);
    #line 2779 
    mvpp2_egress_disable(port);
    #line 2781 
    mvpp2_interrupts_disable(port);
  }
  #line 2784 
  handled: 
           #line 2784 
  ;
  #line 2785 
  mvpp22_gop_unmask_irq(port);
  #line 2786 
  return IRQ_HANDLED;
}

#line 2789  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static enum hrtimer_restart mvpp2_hr_timer_cb(struct hrtimer *timer)
{
  #line 2796 
  void *__mptr;
  #line 2808 
  int pscr_ret__;
  #line 2791 
  struct net_device *dev;
  #line 2792 
  struct mvpp2_port *port;
  #line 2793 
  struct mvpp2_port_pcpu *port_pcpu;
  #line 2794 
  unsigned int tx_todo;
  #line 2794 
  unsigned int cause;
  #line 2796 
  __mptr = (void *)timer;
  #line 2796 
  port_pcpu = ((struct mvpp2_port_pcpu *)__mptr);
  #line 2797 
  dev = port_pcpu->dev;
  #line 2799 
  if (! netif_running(dev)) 
                            #line 2800 
                            return HRTIMER_NORESTART;
  #line 2802 
  port_pcpu->timer_scheduled = (_Bool)0;
  #line 2803 
  port = (struct mvpp2_port *)netdev_priv(dev);
  #line 2806 
  cause = (unsigned int)((1 << port->ntxqs) + -1);
  #line 2808 
  __this_cpu_preempt_check((char *)"read");
  {
    #line 2808 
    void *__vpp_verify = (void *)0;
    #line 2808 
    void *tmp_2 = __vpp_verify;
  }
  #line 2808 
  switch (4UL) {
    #line 2808 
    int pfo_ret___0;
    #line 2808 
    int pfo_ret___1;
    #line 2808 
    int pfo_ret___2;
    #line 2808 
    int pfo_ret__;
    #line 2808 
    case (unsigned long)1: 
                           #line 2808 
    ;
    #line 2808 
    switch (4UL) {
      #line 2808 
      case (unsigned long)1: 
                             #line 2808 
      ;
      #line 2809 
      ldv_inline_asm();
      #line 2808 
      break;
      #line 2808 
      case (unsigned long)2: 
                             #line 2808 
      ;
      #line 2809 
      ldv_inline_asm();
      #line 2808 
      break;
      #line 2808 
      case (unsigned long)4: 
                             #line 2808 
      ;
      #line 2809 
      ldv_inline_asm();
      #line 2808 
      break;
      #line 2808 
      case (unsigned long)8: 
                             #line 2808 
      ;
      #line 2809 
      ldv_inline_asm();
      #line 2808 
      break;
      #line 2808 
      default: 
               #line 2808 
      ;
      #line 2808 
      __bad_percpu_size();
    }
    #line 2808 
    pscr_ret__ = pfo_ret__;
    #line 2808 
    break;
    #line 2808 
    case (unsigned long)2: 
                           #line 2808 
    ;
    #line 2808 
    switch (4UL) {
      #line 2808 
      case (unsigned long)1: 
                             #line 2808 
      ;
      #line 2809 
      ldv_inline_asm();
      #line 2808 
      break;
      #line 2808 
      case (unsigned long)2: 
                             #line 2808 
      ;
      #line 2809 
      ldv_inline_asm();
      #line 2808 
      break;
      #line 2808 
      case (unsigned long)4: 
                             #line 2808 
      ;
      #line 2809 
      ldv_inline_asm();
      #line 2808 
      break;
      #line 2808 
      case (unsigned long)8: 
                             #line 2808 
      ;
      #line 2809 
      ldv_inline_asm();
      #line 2808 
      break;
      #line 2808 
      default: 
               #line 2808 
      ;
      #line 2808 
      __bad_percpu_size();
    }
    #line 2808 
    pscr_ret__ = pfo_ret___0;
    #line 2808 
    break;
    #line 2808 
    case (unsigned long)4: 
                           #line 2808 
    ;
    #line 2808 
    switch (4UL) {
      #line 2808 
      case (unsigned long)1: 
                             #line 2808 
      ;
      #line 2809 
      ldv_inline_asm();
      #line 2808 
      break;
      #line 2808 
      case (unsigned long)2: 
                             #line 2808 
      ;
      #line 2809 
      ldv_inline_asm();
      #line 2808 
      break;
      #line 2808 
      case (unsigned long)4: 
                             #line 2808 
      ;
      #line 2809 
      ldv_inline_asm();
      #line 2808 
      break;
      #line 2808 
      case (unsigned long)8: 
                             #line 2808 
      ;
      #line 2809 
      ldv_inline_asm();
      #line 2808 
      break;
      #line 2808 
      default: 
               #line 2808 
      ;
      #line 2808 
      __bad_percpu_size();
    }
    #line 2808 
    pscr_ret__ = pfo_ret___1;
    #line 2808 
    break;
    #line 2808 
    case (unsigned long)8: 
                           #line 2808 
    ;
    #line 2808 
    switch (4UL) {
      #line 2808 
      case (unsigned long)1: 
                             #line 2808 
      ;
      #line 2809 
      ldv_inline_asm();
      #line 2808 
      break;
      #line 2808 
      case (unsigned long)2: 
                             #line 2808 
      ;
      #line 2809 
      ldv_inline_asm();
      #line 2808 
      break;
      #line 2808 
      case (unsigned long)4: 
                             #line 2808 
      ;
      #line 2809 
      ldv_inline_asm();
      #line 2808 
      break;
      #line 2808 
      case (unsigned long)8: 
                             #line 2808 
      ;
      #line 2809 
      ldv_inline_asm();
      #line 2808 
      break;
      #line 2808 
      default: 
               #line 2808 
      ;
      #line 2808 
      __bad_percpu_size();
    }
    #line 2808 
    pscr_ret__ = pfo_ret___2;
    #line 2808 
    break;
    #line 2808 
    default: 
             #line 2808 
    ;
    #line 2808 
    __bad_size_call_parameter();
    #line 2808 
    break;
  }
  #line 2807 
  ;
  #line 2807 
  ;
  #line 2807 
  ;
  #line 2807 
  tx_todo = mvpp2_tx_done(port,cause,mvpp2_cpu_to_thread(port->priv,pscr_ret__));
  #line 2811 
  if (tx_todo != 0U && ! port_pcpu->timer_scheduled) {
    #line 2812 
    port_pcpu->timer_scheduled = (_Bool)1;
    #line 2813 
    hrtimer_forward_now(& port_pcpu->tx_done_timer,1000000LL);
    #line 2816 
    return HRTIMER_RESTART;
  }
  #line 2818 
  return HRTIMER_NORESTART;
}

#line 2824  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static void mvpp2_rx_error(struct mvpp2_port *port, struct mvpp2_rx_desc *rx_desc)
{
  #line 2827 
  u32 status = mvpp2_rxdesc_status_get(port,rx_desc);
  #line 2828 
  size_t sz = mvpp2_rxdesc_size_get(port,rx_desc);
  #line 2829 
  char *err_str = (char *)0;
  #line 2831 
  switch ((unsigned long)status & 24576UL) {
    #line 2832 
    case (unsigned long)0: 
                           #line 2832 
    ;
    #line 2833 
    err_str = (char *)"crc";
    #line 2834 
    break;
    #line 2835 
    case (unsigned long)8192: 
                              #line 2835 
    ;
    #line 2836 
    err_str = (char *)"overrun";
    #line 2837 
    break;
    #line 2838 
    case (unsigned long)24576: 
                               #line 2838 
    ;
    #line 2839 
    err_str = (char *)"resource";
    #line 2840 
    break;
  }
  #line 2842 
  if (err_str != (char *)0) {
    #line 2842 
    if (net_ratelimit() != 0) 
                              #line 2843 
                              netdev_err(port->dev,(char *)"bad rx status %08x (%s error), size=%zu\n",status,err_str,sz);
  }
  #line 2845 
  return;
}

#line 2849  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static void mvpp2_rx_csum(struct mvpp2_port *port, u32 status, struct sk_buff *skb)
{
  #line 2852 
  if (((unsigned long)status & 268435456UL) != 0UL && ((unsigned long)status & 16777216UL) == 0UL || ((unsigned long)status & 1073741824UL) != 0UL) 
    #line 2855 
    if ((((unsigned long)status & 67108864UL) != 0UL || ((unsigned long)status & 33554432UL) != 0UL) && ((unsigned long)status & 4194304UL) != 0UL) {
      #line 2858 
      skb->__anonCompField_sk_buff_94.csum = 0U;
      #line 2859 
      skb->ip_summed = (unsigned char)1U;
      #line 2860 
      return;
    }
  #line 2863 
  skb->ip_summed = (unsigned char)0U;
  #line 2864 
  return;
}

#line 2867  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static int mvpp2_rx_refill(struct mvpp2_port *port, struct mvpp2_bm_pool *bm_pool, int pool)
{
  #line 2870 
  dma_addr_t dma_addr;
  #line 2871 
  phys_addr_t phys_addr;
  #line 2872 
  void *buf;
  #line 2874 
  buf = mvpp2_buf_alloc(port,bm_pool,& dma_addr,& phys_addr,2592U);
  #line 2876 
  if (buf == (void *)0) 
                        #line 2877 
                        return -12;
  #line 2879 
  mvpp2_bm_pool_put(port,pool,dma_addr,phys_addr);
  #line 2881 
  return 0;
}

#line 2885  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static u32 mvpp2_skb_tx_csum(struct mvpp2_port *port, struct sk_buff *skb)
{
  #line 2887 
  if ((unsigned int)skb->ip_summed == 3U) {
    #line 2889 
    u8 l4_proto;
    #line 2888 
    int ip_hdr_len = 0;
    #line 2890 
    __be16 l3_proto = vlan_get_protocol(skb);
    #line 2892 
    if ((unsigned int)l3_proto == 8U) {
      #line 2893 
      struct iphdr *ip4h = ip_hdr(skb);
      #line 2896 
      ip_hdr_len = (int)ip4h->ihl;
      #line 2897 
      l4_proto = ip4h->protocol;
    }
    else 
      #line 2898 
      if ((unsigned int)l3_proto == 56710U) {
        #line 2899 
        struct ipv6hdr *ip6h = ipv6_hdr(skb);
        #line 2902 
        if (skb_network_header_len(skb) != 0U) {
          #line 2903 
          ip_hdr_len = (int)(skb_network_header_len(skb) >> 2);
        }
        #line 2904 
        l4_proto = ip6h->nexthdr;
      }
      else 
           #line 2906 
           return 16384U;
    #line 2909 
    ;
    #line 2909 
    ;
    #line 2909 
    ;
    #line 2909 
    return mvpp2_txq_desc_csum(skb_network_offset(skb),
                            (unsigned short)((int)l3_proto),ip_hdr_len,
                            (int)l4_proto);
  }
  #line 2913 
  return 49152U;
}

#line 2917  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static int mvpp2_rx(struct mvpp2_port *port, struct napi_struct *napi, int rx_todo, struct mvpp2_rx_queue *rxq)
{
  #line 2921 
  int rx_received;
  #line 2920 
  struct net_device *dev = port->dev;
  #line 2922 
  int rx_done = 0;
  #line 2923 
  u32 rcvd_pkts = 0U;
  #line 2924 
  u32 rcvd_bytes = 0U;
  #line 2927 
  rx_received = mvpp2_rxq_received(port,(int)rxq->id);
  #line 2928 
  if (rx_todo > rx_received) 
                             #line 2929 
                             rx_todo = rx_received;
  #line 2931 
  while (rx_done < rx_todo) {
    #line 2933 
    struct mvpp2_bm_pool *bm_pool;
    #line 2934 
    struct sk_buff *skb;
    #line 2935 
    unsigned int frag_size;
    #line 2936 
    dma_addr_t dma_addr;
    #line 2937 
    phys_addr_t phys_addr;
    #line 2938 
    u32 rx_status;
    #line 2939 
    int pool;
    #line 2939 
    int rx_bytes;
    #line 2939 
    int err;
    #line 2940 
    void *data;
    #line 2932 
    struct mvpp2_rx_desc *rx_desc = mvpp2_rxq_next_desc_get(rxq);
    #line 2942 
    rx_done ++;
    #line 2943 
    rx_status = mvpp2_rxdesc_status_get(port,rx_desc);
    #line 2944 
    rx_bytes = (int)mvpp2_rxdesc_size_get(port,rx_desc);
    #line 2945 
    rx_bytes += -2;
    #line 2946 
    dma_addr = mvpp2_rxdesc_dma_addr_get(port,rx_desc);
    #line 2947 
    phys_addr = (phys_addr_t)mvpp2_rxdesc_cookie_get(port,rx_desc);
    #line 2948 
    data = phys_to_virt(phys_addr);
    #line 2950 
    pool = (int)((unsigned long)rx_status >> 16) & 7;
    #line 2952 
    bm_pool = (port->priv)->bm_pools + (unsigned long)pool;
    #line 2959 
    if (((unsigned long)rx_status & 32768UL) != 0UL) 
                                                     #line 2960 
                                                     goto err_drop_frame;
    #line 2962 
    dma_sync_single_for_cpu(dev->dev.parent,dma_addr,(unsigned long)(rx_bytes + 2),(enum dma_data_direction)DMA_FROM_DEVICE);
    #line 2965 
    __builtin_prefetch((void const *)data);
    #line 2967 
    if ((unsigned int)bm_pool->frag_size > 4096U) 
                                                  #line 2968 
                                                  frag_size = 0U; else 
                                                                    #line 2970 
                                                                    frag_size = (unsigned int)bm_pool->frag_size;
    #line 2972 
    skb = build_skb(data,frag_size);
    #line 2973 
    if (skb == (struct sk_buff *)0) {
      #line 2974 
      netdev_warn(port->dev,(char *)"skb build failed\n");
      #line 2975 
      goto err_drop_frame;
    }
    #line 2978 
    err = mvpp2_rx_refill(port,bm_pool,pool);
    #line 2979 
    if (err != 0) {
      #line 2980 
      netdev_err(port->dev,(char *)"failed to refill BM pools\n");
      #line 2981 
      goto err_drop_frame;
    }
    #line 2984 
    dma_unmap_single_attrs(dev->dev.parent,dma_addr,(unsigned long)bm_pool->buf_size,(enum dma_data_direction)DMA_FROM_DEVICE,32UL);
    #line 2988 
    rcvd_pkts ++;
    #line 2989 
    rcvd_bytes += (unsigned int)rx_bytes;
    #line 2991 
    skb_reserve(skb,66);
    #line 2992 
    skb_put(skb,(unsigned int)rx_bytes);
    #line 2993 
    skb->protocol = eth_type_trans(skb,dev);
    #line 2994 
    mvpp2_rx_csum(port,rx_status,skb);
    #line 2996 
    napi_gro_receive(napi,skb);
    #line 2997 
    continue;
    #line 2999 
    err_drop_frame: 
                    #line 2999 
    ;
    #line 3000 
    (dev->stats.rx_errors) ++;
    #line 3001 
    mvpp2_rx_error(port,rx_desc);
    #line 3003 
    mvpp2_bm_pool_put(port,pool,dma_addr,phys_addr);
  }
  #line 3006 
  if (rcvd_pkts != 0U) {
    #line 3007 
    unsigned long tcp_ptr__;
    {
      #line 3007 
      void *__vpp_verify = (void *)0;
      #line 3007 
      void *tmp_2 = __vpp_verify;
    }
    #line 3008 
    ldv_inline_asm();
    #line 3007 
    struct mvpp2_pcpu_stats *stats = ((struct mvpp2_pcpu_stats *)tcp_ptr__);
    #line 3009 
    u64_stats_init(& stats->syncp);
    #line 3010 
    stats->rx_packets += (unsigned long long)rcvd_pkts;
    #line 3011 
    stats->rx_bytes += (unsigned long long)rcvd_bytes;
    #line 3012 
    u64_stats_init(& stats->syncp);
  }
  #line 3014 
  ldv_inline_asm();
  #line 3017 
  mvpp2_rxq_status_update(port,(int)rxq->id,rx_done,rx_done);
  #line 3019 
  return rx_todo;
}

#line 3023  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
__inline static void tx_desc_unmap_put(struct mvpp2_port *port, struct mvpp2_tx_queue *txq, struct mvpp2_tx_desc *desc)
{
  #line 3026 
  int pscr_ret__;
  #line 3027 
  unsigned long __ptr;
  #line 3026 
  __this_cpu_preempt_check((char *)"read");
  {
    #line 3026 
    void *__vpp_verify = (void *)0;
    #line 3026 
    void *tmp = __vpp_verify;
  }
  #line 3026 
  switch (4UL) {
    #line 3026 
    int pfo_ret___2;
    #line 3026 
    int pfo_ret__;
    #line 3026 
    int pfo_ret___0;
    #line 3026 
    int pfo_ret___1;
    #line 3026 
    case (unsigned long)1: 
                           #line 3026 
    ;
    #line 3026 
    switch (4UL) {
      #line 3026 
      case (unsigned long)1: 
                             #line 3026 
      ;
      #line 3027 
      ldv_inline_asm();
      #line 3026 
      break;
      #line 3026 
      case (unsigned long)2: 
                             #line 3026 
      ;
      #line 3027 
      ldv_inline_asm();
      #line 3026 
      break;
      #line 3026 
      case (unsigned long)4: 
                             #line 3026 
      ;
      #line 3027 
      ldv_inline_asm();
      #line 3026 
      break;
      #line 3026 
      case (unsigned long)8: 
                             #line 3026 
      ;
      #line 3027 
      ldv_inline_asm();
      #line 3026 
      break;
      #line 3026 
      default: 
               #line 3026 
      ;
      #line 3026 
      __bad_percpu_size();
    }
    #line 3026 
    pscr_ret__ = pfo_ret__;
    #line 3026 
    break;
    #line 3026 
    case (unsigned long)2: 
                           #line 3026 
    ;
    #line 3026 
    switch (4UL) {
      #line 3026 
      case (unsigned long)1: 
                             #line 3026 
      ;
      #line 3027 
      ldv_inline_asm();
      #line 3026 
      break;
      #line 3026 
      case (unsigned long)2: 
                             #line 3026 
      ;
      #line 3027 
      ldv_inline_asm();
      #line 3026 
      break;
      #line 3026 
      case (unsigned long)4: 
                             #line 3026 
      ;
      #line 3027 
      ldv_inline_asm();
      #line 3026 
      break;
      #line 3026 
      case (unsigned long)8: 
                             #line 3026 
      ;
      #line 3027 
      ldv_inline_asm();
      #line 3026 
      break;
      #line 3026 
      default: 
               #line 3026 
      ;
      #line 3026 
      __bad_percpu_size();
    }
    #line 3026 
    pscr_ret__ = pfo_ret___0;
    #line 3026 
    break;
    #line 3026 
    case (unsigned long)4: 
                           #line 3026 
    ;
    #line 3026 
    switch (4UL) {
      #line 3026 
      case (unsigned long)1: 
                             #line 3026 
      ;
      #line 3027 
      ldv_inline_asm();
      #line 3026 
      break;
      #line 3026 
      case (unsigned long)2: 
                             #line 3026 
      ;
      #line 3027 
      ldv_inline_asm();
      #line 3026 
      break;
      #line 3026 
      case (unsigned long)4: 
                             #line 3026 
      ;
      #line 3027 
      ldv_inline_asm();
      #line 3026 
      break;
      #line 3026 
      case (unsigned long)8: 
                             #line 3026 
      ;
      #line 3027 
      ldv_inline_asm();
      #line 3026 
      break;
      #line 3026 
      default: 
               #line 3026 
      ;
      #line 3026 
      __bad_percpu_size();
    }
    #line 3026 
    pscr_ret__ = pfo_ret___1;
    #line 3026 
    break;
    #line 3026 
    case (unsigned long)8: 
                           #line 3026 
    ;
    #line 3026 
    switch (4UL) {
      #line 3026 
      case (unsigned long)1: 
                             #line 3026 
      ;
      #line 3027 
      ldv_inline_asm();
      #line 3026 
      break;
      #line 3026 
      case (unsigned long)2: 
                             #line 3026 
      ;
      #line 3027 
      ldv_inline_asm();
      #line 3026 
      break;
      #line 3026 
      case (unsigned long)4: 
                             #line 3026 
      ;
      #line 3027 
      ldv_inline_asm();
      #line 3026 
      break;
      #line 3026 
      case (unsigned long)8: 
                             #line 3026 
      ;
      #line 3027 
      ldv_inline_asm();
      #line 3026 
      break;
      #line 3026 
      default: 
               #line 3026 
      ;
      #line 3026 
      __bad_percpu_size();
    }
    #line 3026 
    pscr_ret__ = pfo_ret___2;
    #line 3026 
    break;
    #line 3026 
    default: 
             #line 3026 
    ;
    #line 3026 
    __bad_size_call_parameter();
    #line 3026 
    break;
  }
  #line 3026 
  ;
  #line 3026 
  unsigned int thread = mvpp2_cpu_to_thread(port->priv,pscr_ret__);
  {
    #line 3027 
    void *__vpp_verify_0 = (void *)0;
    #line 3027 
    void *tmp_6 = __vpp_verify_0;
  }
  #line 3028 
  ldv_inline_asm();
  #line 3027 
  struct mvpp2_txq_pcpu *txq_pcpu = ((struct mvpp2_txq_pcpu *)(__per_cpu_offset[thread] + __ptr));
  #line 3029 
  dma_addr_t buf_dma_addr = mvpp2_txdesc_dma_addr_get(port,desc);
  #line 3031 
  size_t buf_sz = mvpp2_txdesc_size_get(port,desc);
  #line 3033 
  if (txq_pcpu->tso_headers_dma > buf_dma_addr || txq_pcpu->tso_headers_dma + (unsigned long long)(txq_pcpu->size * 128) <= buf_dma_addr) 
    #line 3034 
    dma_unmap_single_attrs((port->dev)->dev.parent,buf_dma_addr,buf_sz,(enum dma_data_direction)DMA_TO_DEVICE,0UL);
  #line 3036 
  mvpp2_txq_desc_put(txq);
  #line 3037 
  return;
}

#line 3040  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static int mvpp2_tx_frag_process(struct mvpp2_port *port, struct sk_buff *skb, struct mvpp2_tx_queue *aggr_txq, struct mvpp2_tx_queue *txq)
{
  #line 3044 
  int pscr_ret__;
  #line 3045 
  unsigned long __ptr;
  #line 3046 
  struct mvpp2_tx_desc *tx_desc;
  #line 3047 
  int i;
  #line 3048 
  dma_addr_t buf_dma_addr;
  #line 3044 
  __this_cpu_preempt_check((char *)"read");
  {
    #line 3044 
    void *__vpp_verify = (void *)0;
    #line 3044 
    void *tmp = __vpp_verify;
  }
  #line 3044 
  switch (4UL) {
    #line 3044 
    int pfo_ret___0;
    #line 3044 
    int pfo_ret___1;
    #line 3044 
    int pfo_ret___2;
    #line 3044 
    int pfo_ret__;
    #line 3044 
    case (unsigned long)1: 
                           #line 3044 
    ;
    #line 3044 
    switch (4UL) {
      #line 3044 
      case (unsigned long)1: 
                             #line 3044 
      ;
      #line 3045 
      ldv_inline_asm();
      #line 3044 
      break;
      #line 3044 
      case (unsigned long)2: 
                             #line 3044 
      ;
      #line 3045 
      ldv_inline_asm();
      #line 3044 
      break;
      #line 3044 
      case (unsigned long)4: 
                             #line 3044 
      ;
      #line 3045 
      ldv_inline_asm();
      #line 3044 
      break;
      #line 3044 
      case (unsigned long)8: 
                             #line 3044 
      ;
      #line 3045 
      ldv_inline_asm();
      #line 3044 
      break;
      #line 3044 
      default: 
               #line 3044 
      ;
      #line 3044 
      __bad_percpu_size();
    }
    #line 3044 
    pscr_ret__ = pfo_ret__;
    #line 3044 
    break;
    #line 3044 
    case (unsigned long)2: 
                           #line 3044 
    ;
    #line 3044 
    switch (4UL) {
      #line 3044 
      case (unsigned long)1: 
                             #line 3044 
      ;
      #line 3045 
      ldv_inline_asm();
      #line 3044 
      break;
      #line 3044 
      case (unsigned long)2: 
                             #line 3044 
      ;
      #line 3045 
      ldv_inline_asm();
      #line 3044 
      break;
      #line 3044 
      case (unsigned long)4: 
                             #line 3044 
      ;
      #line 3045 
      ldv_inline_asm();
      #line 3044 
      break;
      #line 3044 
      case (unsigned long)8: 
                             #line 3044 
      ;
      #line 3045 
      ldv_inline_asm();
      #line 3044 
      break;
      #line 3044 
      default: 
               #line 3044 
      ;
      #line 3044 
      __bad_percpu_size();
    }
    #line 3044 
    pscr_ret__ = pfo_ret___0;
    #line 3044 
    break;
    #line 3044 
    case (unsigned long)4: 
                           #line 3044 
    ;
    #line 3044 
    switch (4UL) {
      #line 3044 
      case (unsigned long)1: 
                             #line 3044 
      ;
      #line 3045 
      ldv_inline_asm();
      #line 3044 
      break;
      #line 3044 
      case (unsigned long)2: 
                             #line 3044 
      ;
      #line 3045 
      ldv_inline_asm();
      #line 3044 
      break;
      #line 3044 
      case (unsigned long)4: 
                             #line 3044 
      ;
      #line 3045 
      ldv_inline_asm();
      #line 3044 
      break;
      #line 3044 
      case (unsigned long)8: 
                             #line 3044 
      ;
      #line 3045 
      ldv_inline_asm();
      #line 3044 
      break;
      #line 3044 
      default: 
               #line 3044 
      ;
      #line 3044 
      __bad_percpu_size();
    }
    #line 3044 
    pscr_ret__ = pfo_ret___1;
    #line 3044 
    break;
    #line 3044 
    case (unsigned long)8: 
                           #line 3044 
    ;
    #line 3044 
    switch (4UL) {
      #line 3044 
      case (unsigned long)1: 
                             #line 3044 
      ;
      #line 3045 
      ldv_inline_asm();
      #line 3044 
      break;
      #line 3044 
      case (unsigned long)2: 
                             #line 3044 
      ;
      #line 3045 
      ldv_inline_asm();
      #line 3044 
      break;
      #line 3044 
      case (unsigned long)4: 
                             #line 3044 
      ;
      #line 3045 
      ldv_inline_asm();
      #line 3044 
      break;
      #line 3044 
      case (unsigned long)8: 
                             #line 3044 
      ;
      #line 3045 
      ldv_inline_asm();
      #line 3044 
      break;
      #line 3044 
      default: 
               #line 3044 
      ;
      #line 3044 
      __bad_percpu_size();
    }
    #line 3044 
    pscr_ret__ = pfo_ret___2;
    #line 3044 
    break;
    #line 3044 
    default: 
             #line 3044 
    ;
    #line 3044 
    __bad_size_call_parameter();
    #line 3044 
    break;
  }
  #line 3044 
  ;
  #line 3044 
  unsigned int thread = mvpp2_cpu_to_thread(port->priv,pscr_ret__);
  {
    #line 3045 
    void *__vpp_verify_0 = (void *)0;
    #line 3045 
    void *tmp_6 = __vpp_verify_0;
  }
  #line 3046 
  ldv_inline_asm();
  #line 3045 
  struct mvpp2_txq_pcpu *txq_pcpu = ((struct mvpp2_txq_pcpu *)(__per_cpu_offset[thread] + __ptr));
  #line 3050 
  i = 0;
  #line 3050 
  while (1) {
    #line 3050 
    ;
    #line 3050 
    if (! ((int)((struct skb_shared_info *)skb_end_pointer(skb))->nr_frags > i)) 
      #line 3050 
      break;
    {
      #line 3051 
      skb_frag_t *frag = & ((struct skb_shared_info *)skb_end_pointer(skb))->frags[i];
      #line 3052 
      void *addr = skb_frag_address(frag);
      #line 3054 
      tx_desc = mvpp2_txq_next_desc_get(aggr_txq);
      #line 3055 
      mvpp2_txdesc_txq_set(port,tx_desc,(unsigned int)txq->id);
      #line 3056 
      ;
      #line 3056 
      ;
      #line 3056 
      mvpp2_txdesc_size_set(port,tx_desc,(unsigned long)skb_frag_size(frag));
      #line 3058 
      ;
      #line 3058 
      ;
      #line 3058 
      buf_dma_addr = dma_map_single_attrs((port->dev)->dev.parent,addr,(unsigned long)skb_frag_size(frag),(enum dma_data_direction)DMA_TO_DEVICE,0UL);
      #line 3061 
      if (dma_mapping_error((port->dev)->dev.parent,buf_dma_addr) != 0) {
        #line 3062 
        mvpp2_txq_desc_put(txq);
        #line 3063 
        goto cleanup;
      }
      #line 3066 
      mvpp2_txdesc_dma_addr_set(port,tx_desc,buf_dma_addr);
      #line 3068 
      ;
      #line 3068 
      if ((int)((struct skb_shared_info *)skb_end_pointer(skb))->nr_frags + -1 == i) {
        #line 3070 
        mvpp2_txdesc_cmd_set(port,tx_desc,268435456U);
        #line 3072 
        mvpp2_txq_inc_put(port,txq_pcpu,skb,tx_desc);
      }
      else {
        #line 3075 
        mvpp2_txdesc_cmd_set(port,tx_desc,0U);
        #line 3076 
        mvpp2_txq_inc_put(port,txq_pcpu,(struct sk_buff *)0,tx_desc);
      }
    }
    #line 3050 
    i ++;
  }
  #line 3080 
  return 0;
  #line 3081 
  cleanup: 
           #line 3081 
  ;
  #line 3085 
  i += -1;
  #line 3085 
  while (i >= 0) {
    #line 3086 
    tx_desc = txq->descs + (unsigned long)i;
    #line 3087 
    tx_desc_unmap_put(port,txq,tx_desc);
    #line 3085 
    i --;
  }
  #line 3090 
  return -12;
}

#line 3093  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
__inline static void mvpp2_tso_put_hdr(struct sk_buff *skb, struct net_device *dev, struct mvpp2_tx_queue *txq, struct mvpp2_tx_queue *aggr_txq, struct mvpp2_txq_pcpu *txq_pcpu, int hdr_sz)
{
  #line 3102 
  dma_addr_t addr;
  #line 3100 
  struct mvpp2_port *port = netdev_priv(dev);
  #line 3101 
  struct mvpp2_tx_desc *tx_desc = mvpp2_txq_next_desc_get(aggr_txq);
  #line 3104 
  mvpp2_txdesc_txq_set(port,tx_desc,(unsigned int)txq->id);
  #line 3105 
  mvpp2_txdesc_size_set(port,tx_desc,(unsigned long)hdr_sz);
  #line 3107 
  addr = txq_pcpu->tso_headers_dma + (unsigned long long)(txq_pcpu->txq_put_index * 128);
  #line 3109 
  mvpp2_txdesc_dma_addr_set(port,tx_desc,addr);
  #line 3111 
  ;
  #line 3111 
  ;
  #line 3111 
  mvpp2_txdesc_cmd_set(port,tx_desc,mvpp2_skb_tx_csum(port,skb) | 545259520U);
  #line 3114 
  mvpp2_txq_inc_put(port,txq_pcpu,(struct sk_buff *)0,tx_desc);
  #line 3115 
  return;
}

#line 3117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
__inline static int mvpp2_tso_put_data(struct sk_buff *skb, struct net_device *dev, struct tso_t *tso, struct mvpp2_tx_queue *txq, struct mvpp2_tx_queue *aggr_txq, struct mvpp2_txq_pcpu *txq_pcpu, int sz, bool left, bool last)
{
  #line 3126 
  dma_addr_t buf_dma_addr;
  #line 3124 
  struct mvpp2_port *port = netdev_priv(dev);
  #line 3125 
  struct mvpp2_tx_desc *tx_desc = mvpp2_txq_next_desc_get(aggr_txq);
  #line 3128 
  mvpp2_txdesc_txq_set(port,tx_desc,(unsigned int)txq->id);
  #line 3129 
  mvpp2_txdesc_size_set(port,tx_desc,(unsigned long)sz);
  #line 3131 
  buf_dma_addr = dma_map_single_attrs(dev->dev.parent,tso->data,(unsigned long)sz,(enum dma_data_direction)DMA_TO_DEVICE,0UL);
  #line 3133 
  if ((long)(dma_mapping_error(dev->dev.parent,buf_dma_addr) != 0) != 0L) {
    #line 3134 
    mvpp2_txq_desc_put(txq);
    #line 3135 
    return -12;
  }
  #line 3138 
  mvpp2_txdesc_dma_addr_set(port,tx_desc,buf_dma_addr);
  #line 3140 
  if (! left) {
    #line 3141 
    mvpp2_txdesc_cmd_set(port,tx_desc,268435456U);
    #line 3142 
    if ((int)last != 0) {
      #line 3143 
      mvpp2_txq_inc_put(port,txq_pcpu,skb,tx_desc);
      #line 3144 
      return 0;
    }
  }
  else 
       #line 3147 
       mvpp2_txdesc_cmd_set(port,tx_desc,0U);
  #line 3150 
  mvpp2_txq_inc_put(port,txq_pcpu,(struct sk_buff *)0,tx_desc);
  #line 3151 
  return 0;
}

#line 3154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static int mvpp2_tx_tso(struct sk_buff *skb, struct net_device *dev, struct mvpp2_tx_queue *txq, struct mvpp2_tx_queue *aggr_txq, struct mvpp2_txq_pcpu *txq_pcpu)
{
  #line 3160 
  struct tso_t tso;
  #line 3162 
  int i;
  #line 3162 
  int len;
  #line 3159 
  struct mvpp2_port *port = netdev_priv(dev);
  #line 3161 
  int hdr_sz = (int)((unsigned int)skb_transport_offset(skb) + tcp_hdrlen(skb));
  #line 3162 
  int descs = 0;
  #line 3165 
  ;
  #line 3165 
  ;
  #line 3165 
  if (mvpp2_aggr_desc_num_check(port,aggr_txq,tso_count_descs(skb)) != 0) 
    #line 3168 
    return 0;
  else {
    #line 3165 
    ;
    #line 3165 
    ;
    #line 3165 
    ;
    #line 3165 
    if (mvpp2_txq_reserved_desc_num_proc(port,txq,txq_pcpu,
                                         tso_count_descs(skb)) != 0) 
      #line 3168 
      return 0;
  }
  #line 3170 
  tso_start(skb,& tso);
  #line 3171 
  len = (int)(skb->len - (unsigned int)hdr_sz);
  #line 3172 
  while (len > 0) {
    #line 3173 
    int __UNIQUE_ID___x577;
    #line 3173 
    int tmp_7;
    {
      #line 3173 
      __UNIQUE_ID___x577 = (int)((struct skb_shared_info *)skb_end_pointer(skb))->gso_size;
      #line 3173 
      int __UNIQUE_ID___y578 = len;
      #line 3173 
      if (__UNIQUE_ID___x577 < __UNIQUE_ID___y578) 
                                                   #line 3173 
                                                   tmp_7 = __UNIQUE_ID___x577; else 
                                                                    #line 3173 
                                                                    tmp_7 = __UNIQUE_ID___y578;
      }
    #line 3173 
    int left = tmp_7;
    #line 3174 
    char *hdr = txq_pcpu->tso_headers + (unsigned long)(txq_pcpu->txq_put_index * 128);
    #line 3177 
    len -= left;
    #line 3178 
    descs ++;
    #line 3180 
    tso_build_hdr(skb,hdr,& tso,left,(_Bool)(len == 0));
    #line 3181 
    mvpp2_tso_put_hdr(skb,dev,txq,aggr_txq,txq_pcpu,hdr_sz);
    #line 3183 
    while (left > 0) {
      #line 3184 
      int __UNIQUE_ID___x579;
      #line 3184 
      int tmp_9;
      {
        #line 3184 
        __UNIQUE_ID___x579 = (int)tso.size;
        #line 3184 
        int __UNIQUE_ID___y580 = left;
        #line 3184 
        if (__UNIQUE_ID___x579 < __UNIQUE_ID___y580) 
                                                     #line 3184 
                                                     tmp_9 = __UNIQUE_ID___x579; else 
                                                                    #line 3184 
                                                                    tmp_9 = __UNIQUE_ID___y580;
        }
      #line 3184 
      int sz = tmp_9;
      #line 3185 
      left -= sz;
      #line 3186 
      descs ++;
      #line 3188 
      if (mvpp2_tso_put_data(skb,dev,& tso,txq,aggr_txq,txq_pcpu,sz,
                            (_Bool)(left != 0),(_Bool)(len == 0)) != 0) 
        #line 3190 
        goto release;
      #line 3191 
      tso_build_data(skb,& tso,sz);
    }
  }
  #line 3195 
  return descs;
  #line 3197 
  release: 
           #line 3197 
  ;
  #line 3198 
  i = descs + -1;
  #line 3198 
  while (i >= 0) {
    {
      #line 3199 
      struct mvpp2_tx_desc *tx_desc = txq->descs + (unsigned long)i;
      #line 3200 
      tx_desc_unmap_put(port,txq,tx_desc);
    }
    #line 3198 
    i --;
  }
  #line 3202 
  return 0;
}

#line 3206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static netdev_tx_t mvpp2_tx(struct sk_buff *skb, struct net_device *dev)
{
  #line 3219 
  int pscr_ret__;
  #line 3223 
  unsigned long __ptr;
  #line 3209 
  struct mvpp2_tx_queue *txq;
  #line 3209 
  struct mvpp2_tx_queue *aggr_txq;
  #line 3210 
  struct mvpp2_txq_pcpu *txq_pcpu;
  #line 3211 
  struct mvpp2_tx_desc *tx_desc;
  #line 3212 
  dma_addr_t buf_dma_addr;
  #line 3214 
  unsigned int thread;
  #line 3216 
  u16 txq_id;
  #line 3217 
  u32 tx_cmd;
  #line 3208 
  struct mvpp2_port *port = netdev_priv(dev);
  #line 3213 
  unsigned long flags = 0UL;
  #line 3215 
  int frags = 0;
  #line 3219 
  __this_cpu_preempt_check((char *)"read");
  {
    #line 3219 
    void *__vpp_verify = (void *)0;
    #line 3219 
    void *tmp_2 = __vpp_verify;
  }
  #line 3219 
  switch (4UL) {
    #line 3219 
    int pfo_ret__;
    #line 3219 
    int pfo_ret___0;
    #line 3219 
    int pfo_ret___1;
    #line 3219 
    int pfo_ret___2;
    #line 3219 
    case (unsigned long)1: 
                           #line 3219 
    ;
    #line 3219 
    switch (4UL) {
      #line 3219 
      case (unsigned long)1: 
                             #line 3219 
      ;
      #line 3220 
      ldv_inline_asm();
      #line 3219 
      break;
      #line 3219 
      case (unsigned long)2: 
                             #line 3219 
      ;
      #line 3220 
      ldv_inline_asm();
      #line 3219 
      break;
      #line 3219 
      case (unsigned long)4: 
                             #line 3219 
      ;
      #line 3220 
      ldv_inline_asm();
      #line 3219 
      break;
      #line 3219 
      case (unsigned long)8: 
                             #line 3219 
      ;
      #line 3220 
      ldv_inline_asm();
      #line 3219 
      break;
      #line 3219 
      default: 
               #line 3219 
      ;
      #line 3219 
      __bad_percpu_size();
    }
    #line 3219 
    pscr_ret__ = pfo_ret__;
    #line 3219 
    break;
    #line 3219 
    case (unsigned long)2: 
                           #line 3219 
    ;
    #line 3219 
    switch (4UL) {
      #line 3219 
      case (unsigned long)1: 
                             #line 3219 
      ;
      #line 3220 
      ldv_inline_asm();
      #line 3219 
      break;
      #line 3219 
      case (unsigned long)2: 
                             #line 3219 
      ;
      #line 3220 
      ldv_inline_asm();
      #line 3219 
      break;
      #line 3219 
      case (unsigned long)4: 
                             #line 3219 
      ;
      #line 3220 
      ldv_inline_asm();
      #line 3219 
      break;
      #line 3219 
      case (unsigned long)8: 
                             #line 3219 
      ;
      #line 3220 
      ldv_inline_asm();
      #line 3219 
      break;
      #line 3219 
      default: 
               #line 3219 
      ;
      #line 3219 
      __bad_percpu_size();
    }
    #line 3219 
    pscr_ret__ = pfo_ret___0;
    #line 3219 
    break;
    #line 3219 
    case (unsigned long)4: 
                           #line 3219 
    ;
    #line 3219 
    switch (4UL) {
      #line 3219 
      case (unsigned long)1: 
                             #line 3219 
      ;
      #line 3220 
      ldv_inline_asm();
      #line 3219 
      break;
      #line 3219 
      case (unsigned long)2: 
                             #line 3219 
      ;
      #line 3220 
      ldv_inline_asm();
      #line 3219 
      break;
      #line 3219 
      case (unsigned long)4: 
                             #line 3219 
      ;
      #line 3220 
      ldv_inline_asm();
      #line 3219 
      break;
      #line 3219 
      case (unsigned long)8: 
                             #line 3219 
      ;
      #line 3220 
      ldv_inline_asm();
      #line 3219 
      break;
      #line 3219 
      default: 
               #line 3219 
      ;
      #line 3219 
      __bad_percpu_size();
    }
    #line 3219 
    pscr_ret__ = pfo_ret___1;
    #line 3219 
    break;
    #line 3219 
    case (unsigned long)8: 
                           #line 3219 
    ;
    #line 3219 
    switch (4UL) {
      #line 3219 
      case (unsigned long)1: 
                             #line 3219 
      ;
      #line 3220 
      ldv_inline_asm();
      #line 3219 
      break;
      #line 3219 
      case (unsigned long)2: 
                             #line 3219 
      ;
      #line 3220 
      ldv_inline_asm();
      #line 3219 
      break;
      #line 3219 
      case (unsigned long)4: 
                             #line 3219 
      ;
      #line 3220 
      ldv_inline_asm();
      #line 3219 
      break;
      #line 3219 
      case (unsigned long)8: 
                             #line 3219 
      ;
      #line 3220 
      ldv_inline_asm();
      #line 3219 
      break;
      #line 3219 
      default: 
               #line 3219 
      ;
      #line 3219 
      __bad_percpu_size();
    }
    #line 3219 
    pscr_ret__ = pfo_ret___2;
    #line 3219 
    break;
    #line 3219 
    default: 
             #line 3219 
    ;
    #line 3219 
    __bad_size_call_parameter();
    #line 3219 
    break;
  }
  #line 3219 
  ;
  #line 3219 
  thread = mvpp2_cpu_to_thread(port->priv,pscr_ret__);
  #line 3221 
  txq_id = skb_get_queue_mapping(skb);
  #line 3222 
  txq = *(port->txqs + (unsigned long)txq_id);
  {
    #line 3223 
    void *__vpp_verify_0 = (void *)0;
    #line 3223 
    void *tmp_6 = __vpp_verify_0;
  }
  #line 3224 
  ldv_inline_asm();
  #line 3223 
  txq_pcpu = ((struct mvpp2_txq_pcpu *)(__per_cpu_offset[thread] + __ptr));
  #line 3224 
  aggr_txq = (port->priv)->aggr_txqs + (unsigned long)thread;
  #line 3226 
  if ((int)test_bit((long)thread,& (port->priv)->lock_map) != 0) 
                                                                 #line 3227 
                                                                 cif___ldv_spin_lock_NOT_ARG_SIGN(& port->tx_lock[thread]);
  #line 3229 
  if ((int)skb_is_gso(skb) != 0) {
    #line 3230 
    frags = mvpp2_tx_tso(skb,dev,txq,aggr_txq,txq_pcpu);
    #line 3231 
    goto out;
  }
  #line 3233 
  frags = (int)((struct skb_shared_info *)skb_end_pointer(skb))->nr_frags + 1;
  #line 3236 
  if (mvpp2_aggr_desc_num_check(port,aggr_txq,frags) != 0) 
                                                           #line 3236 
                                                           goto _LOR;
  else {
    #line 3236 
    if (mvpp2_txq_reserved_desc_num_proc(port,txq,txq_pcpu,frags) != 0) {
      #line 3236 
      _LOR: {
              #line 3238 
              frags = 0;
              #line 3239 
              goto out;
            }
    }
  }
  #line 3243 
  tx_desc = mvpp2_txq_next_desc_get(aggr_txq);
  #line 3244 
  mvpp2_txdesc_txq_set(port,tx_desc,(unsigned int)txq->id);
  #line 3245 
  ;
  #line 3245 
  ;
  #line 3245 
  mvpp2_txdesc_size_set(port,tx_desc,(unsigned long)skb_headlen(skb));
  #line 3247 
  ;
  #line 3247 
  ;
  #line 3247 
  buf_dma_addr = dma_map_single_attrs(dev->dev.parent,(void *)skb->data,(unsigned long)skb_headlen(skb),(enum dma_data_direction)DMA_TO_DEVICE,0UL);
  #line 3249 
  if ((long)(dma_mapping_error(dev->dev.parent,buf_dma_addr) != 0) != 0L) {
    #line 3250 
    mvpp2_txq_desc_put(txq);
    #line 3251 
    frags = 0;
    #line 3252 
    goto out;
  }
  #line 3255 
  mvpp2_txdesc_dma_addr_set(port,tx_desc,buf_dma_addr);
  #line 3257 
  tx_cmd = mvpp2_skb_tx_csum(port,skb);
  #line 3259 
  if (frags == 1) {
    #line 3261 
    tx_cmd |= 805306368U;
    #line 3262 
    mvpp2_txdesc_cmd_set(port,tx_desc,tx_cmd);
    #line 3263 
    mvpp2_txq_inc_put(port,txq_pcpu,skb,tx_desc);
  }
  else {
    #line 3266 
    tx_cmd |= 545259520U;
    #line 3267 
    mvpp2_txdesc_cmd_set(port,tx_desc,tx_cmd);
    #line 3268 
    mvpp2_txq_inc_put(port,txq_pcpu,(struct sk_buff *)0,tx_desc);
    #line 3271 
    if (mvpp2_tx_frag_process(port,skb,aggr_txq,txq) != 0) {
      #line 3272 
      tx_desc_unmap_put(port,txq,tx_desc);
      #line 3273 
      frags = 0;
    }
  }
  #line 3277 
  out: 
       #line 3277 
  ;
  #line 3278 
  if (frags > 0) {
    #line 3279 
    unsigned long __ptr_0;
    {
      #line 3279 
      void *__vpp_verify_1 = (void *)0;
      #line 3279 
      void *tmp_17 = __vpp_verify_1;
    }
    #line 3280 
    ldv_inline_asm();
    #line 3279 
    struct mvpp2_pcpu_stats *stats = ((struct mvpp2_pcpu_stats *)(__per_cpu_offset[thread] + __ptr_0));
    #line 3280 
    struct netdev_queue *nq = netdev_get_tx_queue(dev,(unsigned int)txq_id);
    #line 3282 
    txq_pcpu->reserved_num -= frags;
    #line 3283 
    txq_pcpu->count += frags;
    #line 3284 
    aggr_txq->count += frags;
    #line 3285 
    ldv_inline_asm();
    #line 3288 
    mvpp2_aggr_txq_pend_desc_add(port,frags);
    #line 3290 
    if (txq_pcpu->count >= txq_pcpu->stop_threshold) 
                                                     #line 3291 
                                                     netif_tx_stop_queue(nq);
    #line 3293 
    u64_stats_init(& stats->syncp);
    #line 3294 
    (stats->tx_packets) ++;
    #line 3295 
    stats->tx_bytes += (unsigned long long)skb->len;
    #line 3296 
    u64_stats_init(& stats->syncp);
  }
  else {
    #line 3298 
    (dev->stats.tx_dropped) ++;
    #line 3299 
    dev_kfree_skb_any(skb);
  }
  #line 3303 
  if (! port->has_tx_irqs && (unsigned int)txq_pcpu->count >= txq->done_pkts_coal) 
    #line 3304 
    mvpp2_txq_done(port,txq,txq_pcpu);
  #line 3307 
  if ((! port->has_tx_irqs && txq_pcpu->count <= frags) && txq_pcpu->count > 0) {
    #line 3309 
    unsigned long __ptr_1;
    {
      #line 3309 
      void *__vpp_verify_2 = (void *)0;
      #line 3309 
      void *tmp_20 = __vpp_verify_2;
    }
    #line 3310 
    ldv_inline_asm();
    #line 3309 
    struct mvpp2_port_pcpu *port_pcpu = ((struct mvpp2_port_pcpu *)(__per_cpu_offset[thread] + __ptr_1));
    #line 3311 
    if (! port_pcpu->timer_scheduled) {
      #line 3312 
      port_pcpu->timer_scheduled = (_Bool)1;
      #line 3313 
      hrtimer_start(& port_pcpu->tx_done_timer,1000000LL,(enum hrtimer_mode)HRTIMER_MODE_REL_PINNED_SOFT);
    }
  }
  #line 3319 
  if ((int)test_bit((long)thread,& (port->priv)->lock_map) != 0) 
                                                                 #line 3320 
                                                                 cif_spin_unlock_irqrestore_NOT_ARG_SIGN(& port->tx_lock[thread],flags);
  #line 3322 
  return NETDEV_TX_OK;
}

#line 3325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
__inline static void mvpp2_cause_error(struct net_device *dev, int cause)
{
  #line 3327 
  if (((unsigned long)cause & 33554432UL) != 0UL) 
                                                  #line 3328 
                                                  netdev_err(dev,(char *)"FCS error\n");
  #line 3329 
  if (((unsigned long)cause & 16777216UL) != 0UL) 
                                                  #line 3330 
                                                  netdev_err(dev,(char *)"rx fifo overrun error\n");
  #line 3331 
  if (((unsigned long)cause & 67108864UL) != 0UL) 
                                                  #line 3332 
                                                  netdev_err(dev,(char *)"tx fifo underrun error\n");
  #line 3333 
  return;
}

#line 3335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static int mvpp2_poll(struct napi_struct *napi, int budget)
{
  #line 3341 
  int pscr_ret__;
  #line 3343 
  void *__mptr;
  #line 3337 
  u32 cause_rx_tx;
  #line 3337 
  u32 cause_rx;
  #line 3337 
  u32 cause_tx;
  #line 3337 
  u32 cause_misc;
  #line 3340 
  struct mvpp2_queue_vector *qv;
  #line 3378 
  unsigned int tmp_8;
  #line 3338 
  int rx_done = 0;
  #line 3339 
  struct mvpp2_port *port = netdev_priv(napi->dev);
  #line 3341 
  __this_cpu_preempt_check((char *)"read");
  {
    #line 3341 
    void *__vpp_verify = (void *)0;
    #line 3341 
    void *tmp_2 = __vpp_verify;
  }
  #line 3341 
  switch (4UL) {
    #line 3341 
    int pfo_ret___1;
    #line 3341 
    int pfo_ret___2;
    #line 3341 
    int pfo_ret__;
    #line 3341 
    int pfo_ret___0;
    #line 3341 
    case (unsigned long)1: 
                           #line 3341 
    ;
    #line 3341 
    switch (4UL) {
      #line 3341 
      case (unsigned long)1: 
                             #line 3341 
      ;
      #line 3342 
      ldv_inline_asm();
      #line 3341 
      break;
      #line 3341 
      case (unsigned long)2: 
                             #line 3341 
      ;
      #line 3342 
      ldv_inline_asm();
      #line 3341 
      break;
      #line 3341 
      case (unsigned long)4: 
                             #line 3341 
      ;
      #line 3342 
      ldv_inline_asm();
      #line 3341 
      break;
      #line 3341 
      case (unsigned long)8: 
                             #line 3341 
      ;
      #line 3342 
      ldv_inline_asm();
      #line 3341 
      break;
      #line 3341 
      default: 
               #line 3341 
      ;
      #line 3341 
      __bad_percpu_size();
    }
    #line 3341 
    pscr_ret__ = pfo_ret__;
    #line 3341 
    break;
    #line 3341 
    case (unsigned long)2: 
                           #line 3341 
    ;
    #line 3341 
    switch (4UL) {
      #line 3341 
      case (unsigned long)1: 
                             #line 3341 
      ;
      #line 3342 
      ldv_inline_asm();
      #line 3341 
      break;
      #line 3341 
      case (unsigned long)2: 
                             #line 3341 
      ;
      #line 3342 
      ldv_inline_asm();
      #line 3341 
      break;
      #line 3341 
      case (unsigned long)4: 
                             #line 3341 
      ;
      #line 3342 
      ldv_inline_asm();
      #line 3341 
      break;
      #line 3341 
      case (unsigned long)8: 
                             #line 3341 
      ;
      #line 3342 
      ldv_inline_asm();
      #line 3341 
      break;
      #line 3341 
      default: 
               #line 3341 
      ;
      #line 3341 
      __bad_percpu_size();
    }
    #line 3341 
    pscr_ret__ = pfo_ret___0;
    #line 3341 
    break;
    #line 3341 
    case (unsigned long)4: 
                           #line 3341 
    ;
    #line 3341 
    switch (4UL) {
      #line 3341 
      case (unsigned long)1: 
                             #line 3341 
      ;
      #line 3342 
      ldv_inline_asm();
      #line 3341 
      break;
      #line 3341 
      case (unsigned long)2: 
                             #line 3341 
      ;
      #line 3342 
      ldv_inline_asm();
      #line 3341 
      break;
      #line 3341 
      case (unsigned long)4: 
                             #line 3341 
      ;
      #line 3342 
      ldv_inline_asm();
      #line 3341 
      break;
      #line 3341 
      case (unsigned long)8: 
                             #line 3341 
      ;
      #line 3342 
      ldv_inline_asm();
      #line 3341 
      break;
      #line 3341 
      default: 
               #line 3341 
      ;
      #line 3341 
      __bad_percpu_size();
    }
    #line 3341 
    pscr_ret__ = pfo_ret___1;
    #line 3341 
    break;
    #line 3341 
    case (unsigned long)8: 
                           #line 3341 
    ;
    #line 3341 
    switch (4UL) {
      #line 3341 
      case (unsigned long)1: 
                             #line 3341 
      ;
      #line 3342 
      ldv_inline_asm();
      #line 3341 
      break;
      #line 3341 
      case (unsigned long)2: 
                             #line 3341 
      ;
      #line 3342 
      ldv_inline_asm();
      #line 3341 
      break;
      #line 3341 
      case (unsigned long)4: 
                             #line 3341 
      ;
      #line 3342 
      ldv_inline_asm();
      #line 3341 
      break;
      #line 3341 
      case (unsigned long)8: 
                             #line 3341 
      ;
      #line 3342 
      ldv_inline_asm();
      #line 3341 
      break;
      #line 3341 
      default: 
               #line 3341 
      ;
      #line 3341 
      __bad_percpu_size();
    }
    #line 3341 
    pscr_ret__ = pfo_ret___2;
    #line 3341 
    break;
    #line 3341 
    default: 
             #line 3341 
    ;
    #line 3341 
    __bad_size_call_parameter();
    #line 3341 
    break;
  }
  #line 3341 
  ;
  #line 3341 
  unsigned int thread = mvpp2_cpu_to_thread(port->priv,pscr_ret__);
  #line 3343 
  __mptr = (void *)napi;
  #line 3343 
  qv = ((struct mvpp2_queue_vector *)(__mptr + 18446744073709551608U));
  #line 3355 
  cause_rx_tx = mvpp2_thread_read_relaxed(port->priv,(unsigned int)qv->sw_thread_id,(unsigned int)(((int)port->id + 5408) * 4));
  #line 3358 
  cause_misc = cause_rx_tx & 2147483648U;
  #line 3359 
  if (cause_misc != 0U) {
    #line 3360 
    mvpp2_cause_error(port->dev,(int)cause_misc);
    #line 3363 
    mvpp2_write(port->priv,21936U,0U);
    #line 3364 
    mvpp2_thread_write(port->priv,thread,(unsigned int)(((int)port->id + 5408) * 4),cause_rx_tx & 2147483647U);
  }
  #line 3369 
  if ((int)port->has_tx_irqs != 0) {
    #line 3370 
    cause_tx = cause_rx_tx & 16711680U;
    #line 3371 
    if (cause_tx != 0U) {
      #line 3372 
      cause_tx >>= 16;
      #line 3373 
      mvpp2_tx_done(port,cause_tx,(unsigned int)qv->sw_thread_id);
    }
  }
  #line 3378 
  if ((port->priv)->hw_version == (unsigned int)MVPP21) 
                                                        #line 3378 
                                                        tmp_8 = 65535U; else 
                                                                    #line 3378 
                                                                    tmp_8 = 255U;
  #line 3378 
  cause_rx = tmp_8 & cause_rx_tx;
  #line 3380 
  cause_rx <<= qv->first_rxq;
  #line 3381 
  cause_rx = qv->pending_cause_rx | cause_rx;
  #line 3382 
  while (cause_rx != 0U && budget > 0) {
    #line 3383 
    int count;
    #line 3384 
    struct mvpp2_rx_queue *rxq;
    #line 3386 
    rxq = mvpp2_get_rx_queue(port,cause_rx);
    #line 3387 
    if (rxq == (struct mvpp2_rx_queue *)0) 
                                           #line 3388 
                                           break;
    #line 3390 
    count = mvpp2_rx(port,napi,budget,rxq);
    #line 3391 
    rx_done += count;
    #line 3392 
    budget -= count;
    #line 3393 
    if (budget > 0) 
                    #line 3398 
                    cause_rx = (unsigned int)(~ (1 << rxq->logic_rxq)) & cause_rx;
  }
  #line 3402 
  if (budget > 0) {
    #line 3403 
    cause_rx = 0U;
    #line 3404 
    napi_complete_done(napi,rx_done);
    #line 3406 
    mvpp2_qvec_interrupt_enable(qv);
  }
  #line 3408 
  qv->pending_cause_rx = cause_rx;
  #line 3409 
  return rx_done;
}

#line 3412  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static void mvpp22_mode_reconfigure(struct mvpp2_port *port)
{
  #line 3414 
  u32 ctrl3;
  #line 3417 
  mvpp2_mac_reset_assert(port);
  #line 3420 
  mvpp22_pcs_reset_assert(port);
  #line 3423 
  mvpp22_comphy_init(port);
  #line 3426 
  mvpp22_gop_init(port);
  #line 3428 
  mvpp22_pcs_reset_deassert(port);
  #line 3431 
  if (port->gop_id == 0) {
    #line 3432 
    ctrl3 = readl(port->base + 284U);
    #line 3433 
    ctrl3 &= 4294909951U;
    #line 3435 
    if ((int)mvpp2_is_xlg(port->phy_interface) != 0) 
                                                     #line 3436 
                                                     ctrl3 |= 8192U; else 
                                                                    #line 3438 
                                                                    ctrl3 = ctrl3;
    #line 3440 
    writel(ctrl3,port->base + 284U);
  }
  #line 3443 
  if (port->gop_id == 0) {
    #line 3443 
    if ((int)mvpp2_is_xlg(port->phy_interface) != 0) 
                                                     #line 3444 
                                                     mvpp2_xlg_max_rx_size_set(port); else 
                                                                    #line 3446 
                                                                    mvpp2_gmac_max_rx_size_set(port);
  }
  else 
       #line 3446 
       mvpp2_gmac_max_rx_size_set(port);
  #line 3447 
  return;
}

#line 3450  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static void mvpp2_start_dev(struct mvpp2_port *port)
{
  #line 3452 
  int i;
  #line 3454 
  mvpp2_txp_max_tx_size_set(port);
  #line 3456 
  i = 0;
  #line 3456 
  while (port->nqvecs > (unsigned int)i) {
    #line 3457 
    napi_enable(& port->qvecs[i].napi);
    #line 3456 
    i ++;
  }
  #line 3460 
  mvpp2_interrupts_enable(port);
  #line 3462 
  if ((port->priv)->hw_version == (unsigned int)MVPP22) 
                                                        #line 3463 
                                                        mvpp22_mode_reconfigure(port);
  #line 3465 
  if (port->phylink != (struct phylink *)0) 
                                            #line 3466 
                                            phylink_start(port->phylink);
  else {
    #line 3472 
    struct phylink_link_state state = {.advertising = {0UL, 0UL}, .lp_advertising = {0UL, 0UL}, .interface = port->phy_interface, .speed = 0, .duplex = 0, .pause = 0, .link = 0U, .an_enabled = 0U, .an_complete = 0U};
    #line 3475 
    mvpp2_mac_config(& port->phylink_config,2U,& state);
    #line 3476 
    mvpp2_mac_link_up(& port->phylink_config,2U,port->phy_interface,(struct phy_device *)0);
  }
  #line 3480 
  netif_tx_start_all_queues(port->dev);
  #line 3481 
  return;
}

#line 3484  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static void mvpp2_stop_dev(struct mvpp2_port *port)
{
  #line 3486 
  int i;
  #line 3489 
  mvpp2_interrupts_disable(port);
  #line 3491 
  i = 0;
  #line 3491 
  while (port->nqvecs > (unsigned int)i) {
    #line 3492 
    napi_disable(& port->qvecs[i].napi);
    #line 3491 
    i ++;
  }
  #line 3494 
  if (port->phylink != (struct phylink *)0) 
                                            #line 3495 
                                            phylink_stop(port->phylink);
  #line 3496 
  phy_power_off(port->comphy);
  #line 3497 
  return;
}

#line 3499  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static int mvpp2_check_ringparam_valid(struct net_device *dev, struct ethtool_ringparam *ring)
{
  #line 3502 
  u16 new_rx_pending = (unsigned short)ring->rx_pending;
  #line 3503 
  u16 new_tx_pending = (unsigned short)ring->tx_pending;
  #line 3505 
  if (ring->rx_pending == 0U || ring->tx_pending == 0U) 
                                                        #line 3506 
                                                        return -22;
  #line 3508 
  if (ring->rx_pending > 1024U) 
                                #line 3509 
                                new_rx_pending = (unsigned short)1024U;
  else 
    #line 3510 
    if ((ring->rx_pending & 15U) != 0U) 
                                        #line 3511 
                                        new_rx_pending = (unsigned short)(((unsigned int)((unsigned short)ring->rx_pending) + 15U) & 65520U);
  #line 3513 
  if (ring->tx_pending > 2048U) 
                                #line 3514 
                                new_tx_pending = (unsigned short)2048U;
  else 
    #line 3515 
    if ((ring->tx_pending & 31U) != 0U) 
                                        #line 3516 
                                        new_tx_pending = (unsigned short)(((unsigned int)((unsigned short)ring->tx_pending) + 31U) & 65504U);
  #line 3521 
  if ((unsigned int)new_tx_pending <= 616U) 
                                            #line 3522 
                                            new_tx_pending = (unsigned short)640U;
  #line 3524 
  if (ring->rx_pending != (unsigned int)new_rx_pending) {
    #line 3525 
    netdev_info(dev,(char *)"illegal Rx ring size value %d, round to %d\n",ring->rx_pending,(int)new_rx_pending);
    #line 3527 
    ring->rx_pending = (unsigned int)new_rx_pending;
  }
  #line 3530 
  if (ring->tx_pending != (unsigned int)new_tx_pending) {
    #line 3531 
    netdev_info(dev,(char *)"illegal Tx ring size value %d, round to %d\n",ring->tx_pending,(int)new_tx_pending);
    #line 3533 
    ring->tx_pending = (unsigned int)new_tx_pending;
  }
  #line 3536 
  return 0;
}

#line 3539  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static void mvpp21_get_mac_address(struct mvpp2_port *port, unsigned char *addr)
{
  #line 3541 
  u32 mac_addr_l;
  #line 3541 
  u32 mac_addr_m;
  #line 3541 
  u32 mac_addr_h;
  #line 3543 
  mac_addr_l = readl(port->base + 4U);
  #line 3544 
  mac_addr_m = readl((port->priv)->lms_base + 36U);
  #line 3545 
  mac_addr_h = readl((port->priv)->lms_base + 40U);
  #line 3546 
  *addr = (unsigned char)(mac_addr_h >> 24);
  #line 3547 
  *(addr + 1U) = (unsigned char)(mac_addr_h >> 16);
  #line 3548 
  *(addr + 2U) = (unsigned char)(mac_addr_h >> 8);
  #line 3549 
  *(addr + 3U) = (unsigned char)mac_addr_h;
  #line 3550 
  *(addr + 4U) = (unsigned char)mac_addr_m;
  #line 3551 
  *(addr + 5U) = (unsigned char)(mac_addr_l >> 7);
  #line 3552 
  return;
}

#line 3554  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static int mvpp2_irqs_init(struct mvpp2_port *port)
{
  #line 3556 
  int err;
  #line 3556 
  int i;
  #line 3558 
  i = 0;
  #line 3558 
  while (port->nqvecs > (unsigned int)i) {
    {
      #line 3559 
      struct mvpp2_queue_vector *qv = (struct mvpp2_queue_vector *)(& port->qvecs) + (unsigned long)i;
      #line 3561 
      if (qv->type == (unsigned int)MVPP2_QUEUE_VECTOR_PRIVATE) {
        #line 3562 
        qv->mask = (struct cpumask *)kzalloc((unsigned long)cpumask_size(),3264U);
        #line 3563 
        if (qv->mask == (struct cpumask *)0) {
          #line 3564 
          err = -12;
          #line 3565 
          goto err;
        }
        #line 3568 
        irq_set_status_flags((unsigned int)qv->irq,8192UL);
      }
      #line 3571 
      err = cif_request_irq((unsigned int)qv->irq,& mvpp2_isr,0UL,(char *)(& (port->dev)->name),(void *)qv);
      #line 3572 
      if (err != 0) 
                    #line 3573 
                    goto err;
      #line 3575 
      if (qv->type == (unsigned int)MVPP2_QUEUE_VECTOR_PRIVATE) {
        #line 3576 
        unsigned int cpu;
        #line 3578 
        cpu = 4294967295U;
        #line 3578 
        while (1) {
          #line 3578 
          cpu = cpumask_next((int)cpu,& __cpu_present_mask);
          #line 3578 
          if (! (cpu < nr_cpu_ids)) 
                                    #line 3578 
                                    break;
          #line 3579 
          ;
          #line 3579 
          if (mvpp2_cpu_to_thread(port->priv,(int)cpu) == (unsigned int)qv->sw_thread_id) 
            #line 3581 
            cpumask_set_cpu(cpu,qv->mask);
        }
        #line 3584 
        irq_set_affinity_hint((unsigned int)qv->irq,qv->mask);
      }
    }
    #line 3558 
    i ++;
  }
  #line 3588 
  return 0;
  #line 3589 
  err: 
       #line 3589 
  ;
  #line 3590 
  i = 0;
  #line 3590 
  while (port->nqvecs > (unsigned int)i) {
    {
      #line 3591 
      struct mvpp2_queue_vector *qv_0 = (struct mvpp2_queue_vector *)(& port->qvecs) + (unsigned long)i;
      #line 3593 
      irq_set_affinity_hint((unsigned int)qv_0->irq,(struct cpumask *)0);
      #line 3594 
      kfree((void *)qv_0->mask);
      #line 3595 
      qv_0->mask = (struct cpumask *)0;
      #line 3596 
      cif_free_irq((unsigned int)qv_0->irq,(void *)qv_0);
    }
    #line 3590 
    i ++;
  }
  #line 3599 
  return err;
}

#line 3602  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static void mvpp2_irqs_deinit(struct mvpp2_port *port)
{
  #line 3604 
  int i;
  #line 3606 
  i = 0;
  #line 3606 
  while (port->nqvecs > (unsigned int)i) {
    {
      #line 3607 
      struct mvpp2_queue_vector *qv = (struct mvpp2_queue_vector *)(& port->qvecs) + (unsigned long)i;
      #line 3609 
      irq_set_affinity_hint((unsigned int)qv->irq,(struct cpumask *)0);
      #line 3610 
      kfree((void *)qv->mask);
      #line 3611 
      qv->mask = (struct cpumask *)0;
      #line 3612 
      irq_clear_status_flags((unsigned int)qv->irq,8192UL);
      #line 3613 
      cif_free_irq((unsigned int)qv->irq,(void *)qv);
    }
    #line 3606 
    i ++;
  }
  #line 3615 
  return;
}

#line 3617  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static bool mvpp22_rss_is_supported(void)
{
  #line 3619 
  return (_Bool)(queue_mode == 1);
}

#line 3622  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static int mvpp2_open(struct net_device *dev)
{
  #line 3629 
  int err;
  #line 3624 
  struct mvpp2_port *port = netdev_priv(dev);
  #line 3625 
  struct mvpp2 *priv = port->priv;
  #line 3626 
  unsigned char mac_bcast[6U] = {(unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U};
  #line 3628 
  bool valid = (_Bool)0;
  #line 3631 
  err = mvpp2_prs_mac_da_accept(port,(u8 *)(& mac_bcast),(_Bool)1);
  #line 3632 
  if (err != 0) {
    #line 3633 
    netdev_err(dev,(char *)"mvpp2_prs_mac_da_accept BC failed\n");
    #line 3634 
    return err;
  }
  #line 3636 
  err = mvpp2_prs_mac_da_accept(port,dev->dev_addr,(_Bool)1);
  #line 3637 
  if (err != 0) {
    #line 3638 
    netdev_err(dev,(char *)"mvpp2_prs_mac_da_accept own addr failed\n");
    #line 3639 
    return err;
  }
  #line 3641 
  err = mvpp2_prs_tag_mode_set(port->priv,(int)port->id,1);
  #line 3642 
  if (err != 0) {
    #line 3643 
    netdev_err(dev,(char *)"mvpp2_prs_tag_mode_set failed\n");
    #line 3644 
    return err;
  }
  #line 3646 
  err = mvpp2_prs_def_flow(port);
  #line 3647 
  if (err != 0) {
    #line 3648 
    netdev_err(dev,(char *)"mvpp2_prs_def_flow failed\n");
    #line 3649 
    return err;
  }
  #line 3653 
  err = mvpp2_setup_rxqs(port);
  #line 3654 
  if (err != 0) {
    #line 3655 
    netdev_err(port->dev,(char *)"cannot allocate Rx queues\n");
    #line 3656 
    return err;
  }
  #line 3659 
  err = mvpp2_setup_txqs(port);
  #line 3660 
  if (err != 0) {
    #line 3661 
    netdev_err(port->dev,(char *)"cannot allocate Tx queues\n");
    #line 3662 
    goto err_cleanup_rxqs;
  }
  #line 3665 
  err = mvpp2_irqs_init(port);
  #line 3666 
  if (err != 0) {
    #line 3667 
    netdev_err(port->dev,(char *)"cannot init IRQs\n");
    #line 3668 
    goto err_cleanup_txqs;
  }
  #line 3672 
  if (port->of_node != (struct device_node *)0) {
    #line 3673 
    err = phylink_of_phy_connect(port->phylink,port->of_node,0U);
    #line 3674 
    if (err != 0) {
      #line 3675 
      netdev_err(port->dev,(char *)"could not attach PHY (%d)\n",err);
      #line 3677 
      goto err_free_irq;
    }
    #line 3680 
    valid = (_Bool)1;
  }
  #line 3683 
  if (priv->hw_version == (unsigned int)MVPP22 && port->link_irq != 0) {
    #line 3684 
    err = cif_request_irq((unsigned int)port->link_irq,& mvpp2_link_status_isr,0UL,(char *)(& dev->name),(void *)port);
    #line 3686 
    if (err != 0) {
      #line 3687 
      netdev_err(port->dev,(char *)"cannot request link IRQ %d\n",port->link_irq);
      #line 3689 
      goto err_free_irq;
    }
    #line 3692 
    mvpp22_gop_setup_irq(port);
    #line 3695 
    netif_carrier_off(port->dev);
    #line 3697 
    valid = (_Bool)1;
  }
  else 
       #line 3699 
       port->link_irq = 0;
  #line 3702 
  if (! valid) {
    #line 3703 
    netdev_err(port->dev,(char *)"invalid configuration: no dt or link IRQ");
    #line 3705 
    goto err_free_irq;
  }
  #line 3709 
  on_each_cpu(& mvpp2_interrupts_unmask,(void *)port,1);
  #line 3710 
  mvpp2_shared_interrupt_mask_unmask(port,(_Bool)0);
  #line 3712 
  mvpp2_start_dev(port);
  #line 3715 
  cif_queue_delayed_work(priv->stats_queue,& port->stats_work,250UL);
  #line 3718 
  return 0;
  #line 3720 
  err_free_irq: 
                #line 3720 
  ;
  #line 3721 
  mvpp2_irqs_deinit(port);
  #line 3722 
  err_cleanup_txqs: 
                    #line 3722 
  ;
  #line 3723 
  mvpp2_cleanup_txqs(port);
  #line 3724 
  err_cleanup_rxqs: 
                    #line 3724 
  ;
  #line 3725 
  mvpp2_cleanup_rxqs(port);
  #line 3726 
  return err;
}

#line 3729  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static int mvpp2_stop(struct net_device *dev)
{
  #line 3732 
  struct mvpp2_port_pcpu *port_pcpu;
  #line 3733 
  unsigned int thread;
  #line 3731 
  struct mvpp2_port *port = netdev_priv(dev);
  #line 3735 
  mvpp2_stop_dev(port);
  #line 3738 
  on_each_cpu(& mvpp2_interrupts_mask,(void *)port,1);
  #line 3739 
  mvpp2_shared_interrupt_mask_unmask(port,(_Bool)1);
  #line 3741 
  if (port->phylink != (struct phylink *)0) 
                                            #line 3742 
                                            phylink_disconnect_phy(port->phylink);
  #line 3743 
  if (port->link_irq != 0) 
                           #line 3744 
                           cif_free_irq((unsigned int)port->link_irq,(void *)port);
  #line 3746 
  mvpp2_irqs_deinit(port);
  #line 3747 
  if (! port->has_tx_irqs) {
    #line 3748 
    thread = 0U;
    #line 3748 
    while ((port->priv)->nthreads > thread) {
      {
        #line 3749 
        unsigned long __ptr;
        {
          #line 3749 
          void *__vpp_verify = (void *)0;
          #line 3749 
          void *tmp_2 = __vpp_verify;
        }
        #line 3750 
        ldv_inline_asm();
        #line 3749 
        port_pcpu = ((struct mvpp2_port_pcpu *)(__per_cpu_offset[thread] + __ptr));
        #line 3751 
        hrtimer_cancel(& port_pcpu->tx_done_timer);
        #line 3752 
        port_pcpu->timer_scheduled = (_Bool)0;
      }
      #line 3748 
      thread ++;
    }
  }
  #line 3755 
  mvpp2_cleanup_rxqs(port);
  #line 3756 
  mvpp2_cleanup_txqs(port);
  #line 3758 
  cancel_delayed_work_sync(& port->stats_work);
  #line 3760 
  mvpp2_mac_reset_assert(port);
  #line 3761 
  mvpp22_pcs_reset_assert(port);
  #line 3763 
  return 0;
}

#line 3766  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static int mvpp2_prs_mac_da_accept_list(struct mvpp2_port *port, struct netdev_hw_addr_list *list)
{
  #line 3772 
  void *__mptr;
  #line 3769 
  struct netdev_hw_addr *ha;
  #line 3770 
  int ret;
  #line 3772 
  __mptr = (void *)list->list.next;
  #line 3772 
  ha = ((struct netdev_hw_addr *)__mptr);
  #line 3772 
  while ((void *)ha != (void *)list) {
    #line 3772 
    void *__mptr_0;
    #line 3773 
    ret = mvpp2_prs_mac_da_accept(port,(u8 *)(& ha->addr),(_Bool)1);
    #line 3774 
    if (ret != 0) 
                  #line 3775 
                  return ret;
    #line 3772 
    __mptr_0 = (void *)ha->list.next;
    #line 3772 
    ha = ((struct netdev_hw_addr *)__mptr_0);
  }
  #line 3778 
  return 0;
}

#line 3781  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static void mvpp2_set_rx_promisc(struct mvpp2_port *port, bool enable)
{
  #line 3783 
  if (! enable && ((port->dev)->features & 512ULL) != 0ULL) 
                                                            #line 3784 
                                                            mvpp2_prs_vid_enable_filtering(port); else 
                                                                    #line 3786 
                                                                    mvpp2_prs_vid_disable_filtering(port);
  #line 3788 
  mvpp2_prs_mac_promisc_set(port->priv,(int)port->id,(enum mvpp2_prs_l2_cast)MVPP2_PRS_L2_UNI_CAST,(_Bool)((bool)((int)enable) != 0));
  #line 3791 
  mvpp2_prs_mac_promisc_set(port->priv,(int)port->id,(enum mvpp2_prs_l2_cast)MVPP2_PRS_L2_MULTI_CAST,(_Bool)((bool)((int)enable) != 0));
  #line 3792 
  return;
}

#line 3795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static void mvpp2_set_rx_mode(struct net_device *dev)
{
  #line 3797 
  struct mvpp2_port *port = netdev_priv(dev);
  #line 3800 
  mvpp2_prs_mac_del_all(port);
  #line 3802 
  if ((dev->flags & 256U) != 0U) {
    #line 3803 
    mvpp2_set_rx_promisc(port,(_Bool)1);
    #line 3804 
    return;
  }
  #line 3807 
  mvpp2_set_rx_promisc(port,(_Bool)0);
  #line 3809 
  if (dev->uc.count > 4) 
                         #line 3811 
                         mvpp2_prs_mac_promisc_set(port->priv,(int)port->id,(enum mvpp2_prs_l2_cast)MVPP2_PRS_L2_UNI_CAST,(_Bool)1);
  else {
    #line 3809 
    if (mvpp2_prs_mac_da_accept_list(port,& dev->uc) != 0) 
                                                           #line 3811 
                                                           mvpp2_prs_mac_promisc_set(port->priv,(int)port->id,(enum mvpp2_prs_l2_cast)MVPP2_PRS_L2_UNI_CAST,(_Bool)1);
  }
  #line 3814 
  if ((dev->flags & 512U) != 0U) {
    #line 3815 
    mvpp2_prs_mac_promisc_set(port->priv,(int)port->id,(enum mvpp2_prs_l2_cast)MVPP2_PRS_L2_MULTI_CAST,(_Bool)1);
    #line 3817 
    return;
  }
  #line 3820 
  if (dev->mc.count > 21) 
                          #line 3822 
                          mvpp2_prs_mac_promisc_set(port->priv,(int)port->id,(enum mvpp2_prs_l2_cast)MVPP2_PRS_L2_MULTI_CAST,(_Bool)1);
  else {
    #line 3820 
    if (mvpp2_prs_mac_da_accept_list(port,& dev->mc) != 0) 
                                                           #line 3822 
                                                           mvpp2_prs_mac_promisc_set(port->priv,(int)port->id,(enum mvpp2_prs_l2_cast)MVPP2_PRS_L2_MULTI_CAST,(_Bool)1);
  }
  #line 3823 
  return;
}

#line 3826  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static int mvpp2_set_mac_address(struct net_device *dev, void *p)
{
  #line 3829 
  int err;
  #line 3828 
  struct sockaddr *addr = (struct sockaddr *)p;
  #line 3831 
  if (! is_valid_ether_addr((u8 *)(& addr->sa_data))) 
                                                      #line 3832 
                                                      return -99;
  #line 3834 
  err = mvpp2_prs_update_mac_da(dev,(u8 *)(& addr->sa_data));
  #line 3835 
  if (err != 0) {
    #line 3837 
    mvpp2_prs_update_mac_da(dev,dev->dev_addr);
    #line 3838 
    netdev_err(dev,(char *)"failed to change MAC address\n");
  }
  #line 3840 
  return err;
}

#line 3846  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static int mvpp2_bm_switch_buffers(struct mvpp2 *priv, bool percpu)
{
  #line 3848 
  int i;
  #line 3850 
  bool status[4U];
  #line 3848 
  int numbufs = 3;
  #line 3849 
  struct mvpp2_port *port = (struct mvpp2_port *)0;
  #line 3852 
  i = 0;
  #line 3852 
  while (priv->port_count > i) {
    #line 3853 
    port = priv->port_list[i];
    #line 3854 
    status[i] = netif_running(port->dev);
    #line 3855 
    if ((int)status[i] != 0) 
                             #line 3856 
                             mvpp2_stop(port->dev);
    #line 3852 
    i ++;
  }
  #line 3860 
  if (priv->percpu_pools != 0) 
                               #line 3861 
                               numbufs = (int)(port->nrxqs * 2U);
  #line 3863 
  i = 0;
  #line 3863 
  while (i < numbufs) {
    #line 3864 
    mvpp2_bm_pool_destroy((port->dev)->dev.parent,priv,priv->bm_pools + (unsigned long)i);
    #line 3863 
    i ++;
  }
  #line 3866 
  devm_kfree((port->dev)->dev.parent,(void *)priv->bm_pools);
  #line 3867 
  priv->percpu_pools = (int)percpu;
  #line 3868 
  mvpp2_bm_init((port->dev)->dev.parent,priv);
  #line 3870 
  i = 0;
  #line 3870 
  while (priv->port_count > i) {
    #line 3871 
    port = priv->port_list[i];
    #line 3872 
    mvpp2_swf_bm_pool_init(port);
    #line 3873 
    if ((int)status[i] != 0) 
                             #line 3874 
                             mvpp2_open(port->dev);
    #line 3870 
    i ++;
  }
  #line 3877 
  return 0;
}

#line 3880  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static int mvpp2_change_mtu(struct net_device *dev, int mtu)
{
  #line 3885 
  int err;
  #line 3882 
  struct mvpp2_port *port = netdev_priv(dev);
  #line 3883 
  bool running = netif_running(dev);
  #line 3884 
  struct mvpp2 *priv = port->priv;
  #line 3887 
  if (((((mtu + 24) + (boot_cpu_data.x86_cache_alignment + -1)) & - boot_cpu_data.x86_cache_alignment) & 7) != 0) {
    #line 3888 
    netdev_info(dev,(char *)"illegal MTU value %d, round to %d\n",mtu,((((mtu + 24) + (boot_cpu_data.x86_cache_alignment + -1)) & - boot_cpu_data.x86_cache_alignment) + 7) & -8);
    #line 3890 
    mtu = ((((mtu + 24) + (boot_cpu_data.x86_cache_alignment + -1)) & - boot_cpu_data.x86_cache_alignment) + 7) & -8;
  }
  #line 3893 
  if ((unsigned int)(((mtu + 24) + (boot_cpu_data.x86_cache_alignment + -1)) & - boot_cpu_data.x86_cache_alignment) > 1664U) {
    #line 3894 
    if (priv->percpu_pools != 0) {
      #line 3895 
      netdev_warn(dev,(char *)"mtu %d too high, switching to shared buffers",mtu);
      #line 3896 
      mvpp2_bm_switch_buffers(priv,(_Bool)0);
    }
  }
  else {
    #line 3900 
    int i;
    #line 3899 
    bool jumbo = (_Bool)0;
    #line 3902 
    i = 0;
    #line 3902 
    while (priv->port_count > i) {
      #line 3903 
      if (priv->port_list[i] != port && (((((priv->port_list[i])->dev)->mtu + (unsigned int)boot_cpu_data.x86_cache_alignment) + 23U) & - ((unsigned int)boot_cpu_data.x86_cache_alignment)) > 1664U) {
        #line 3906 
        jumbo = (_Bool)1;
        #line 3907 
        break;
      }
      #line 3902 
      i ++;
    }
    #line 3911 
    if (! jumbo) {
      #line 3912 
      _dev_info((port->dev)->dev.parent,(char *)"all ports have a low MTU, switching to per-cpu buffers");
      #line 3914 
      mvpp2_bm_switch_buffers(priv,(_Bool)1);
    }
  }
  #line 3918 
  if ((int)running != 0) 
                         #line 3919 
                         mvpp2_stop_dev(port);
  #line 3921 
  err = mvpp2_bm_update_mtu(dev,mtu);
  #line 3922 
  if (err != 0) {
    #line 3923 
    netdev_err(dev,(char *)"failed to change MTU\n");
    #line 3925 
    mvpp2_bm_update_mtu(dev,(int)dev->mtu);
  }
  else 
       #line 3927 
       port->pkt_size = ((mtu + 24) + (boot_cpu_data.x86_cache_alignment + -1)) & - boot_cpu_data.x86_cache_alignment;
  #line 3930 
  if ((int)running != 0) {
    #line 3931 
    mvpp2_start_dev(port);
    #line 3932 
    mvpp2_egress_enable(port);
    #line 3933 
    mvpp2_ingress_enable(port);
  }
  #line 3936 
  return err;
}

#line 3940  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static void mvpp2_get_stats64(struct net_device *dev, struct rtnl_link_stats64 *stats)
{
  #line 3943 
  unsigned int start;
  #line 3944 
  unsigned int cpu;
  #line 3942 
  struct mvpp2_port *port = netdev_priv(dev);
  #line 3946 
  cpu = 4294967295U;
  #line 3946 
  while (1) {
    #line 3946 
    cpu = cpumask_next((int)cpu,& __cpu_possible_mask);
    #line 3946 
    if (! (cpu < nr_cpu_ids)) 
                              #line 3946 
                              break;
    {
      #line 3953 
      unsigned long __ptr;
      #line 3947 
      struct mvpp2_pcpu_stats *cpu_stats;
      #line 3948 
      u64 rx_packets;
      #line 3949 
      u64 rx_bytes;
      #line 3950 
      u64 tx_packets;
      #line 3951 
      u64 tx_bytes;
      {
        #line 3953 
        void *__vpp_verify = (void *)0;
        #line 3953 
        void *tmp_2 = __vpp_verify;
      }
      #line 3954 
      ldv_inline_asm();
      #line 3953 
      cpu_stats = ((struct mvpp2_pcpu_stats *)(__per_cpu_offset[cpu] + __ptr));
      #line 3954 
      while (1) {
        #line 3955 
        start = u64_stats_fetch_begin_irq(& cpu_stats->syncp);
        #line 3956 
        rx_packets = cpu_stats->rx_packets;
        #line 3957 
        rx_bytes = cpu_stats->rx_bytes;
        #line 3958 
        tx_packets = cpu_stats->tx_packets;
        #line 3959 
        tx_bytes = cpu_stats->tx_bytes;
        #line 3960 
        if (! ((int)u64_stats_fetch_retry_irq(& cpu_stats->syncp,start) != 0)) 
          #line 3954 
          break;
      }
      #line 3962 
      stats->rx_packets += rx_packets;
      #line 3963 
      stats->rx_bytes += rx_bytes;
      #line 3964 
      stats->tx_packets += tx_packets;
      #line 3965 
      stats->tx_bytes += tx_bytes;
    }
  }
  #line 3968 
  stats->rx_errors = (unsigned long long)dev->stats.rx_errors;
  #line 3969 
  stats->rx_dropped = (unsigned long long)dev->stats.rx_dropped;
  #line 3970 
  stats->tx_dropped = (unsigned long long)dev->stats.tx_dropped;
  #line 3971 
  return;
}

#line 3973  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static int mvpp2_ioctl(struct net_device *dev, struct ifreq *ifr, int cmd)
{
  #line 3975 
  struct mvpp2_port *port = netdev_priv(dev);
  #line 3977 
  if (port->phylink == (struct phylink *)0) 
                                            #line 3978 
                                            return -524;
  #line 3980 
  return phylink_mii_ioctl(port->phylink,ifr,cmd);
}

#line 3983  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static int mvpp2_vlan_rx_add_vid(struct net_device *dev, __be16 proto, u16 vid)
{
  #line 3986 
  int ret;
  #line 3985 
  struct mvpp2_port *port = netdev_priv(dev);
  #line 3988 
  ret = mvpp2_prs_vid_entry_add(port,(unsigned short)((int)vid));
  #line 3989 
  if (ret != 0) 
                #line 3990 
                netdev_err(dev,(char *)"rx-vlan-filter offloading cannot accept more than %d VIDs per port\n",10);
  #line 3992 
  return ret;
}

#line 3995  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static int mvpp2_vlan_rx_kill_vid(struct net_device *dev, __be16 proto, u16 vid)
{
  #line 3997 
  struct mvpp2_port *port = netdev_priv(dev);
  #line 3999 
  mvpp2_prs_vid_entry_remove(port,(unsigned short)((int)vid));
  #line 4000 
  return 0;
}

#line 4003  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static int mvpp2_set_features(struct net_device *dev, netdev_features_t features)
{
  #line 4006 
  netdev_features_t changed = dev->features ^ features;
  #line 4007 
  struct mvpp2_port *port = netdev_priv(dev);
  #line 4009 
  if ((changed & 512ULL) != 0ULL) 
    #line 4010 
    if ((features & 512ULL) != 0ULL) 
                                     #line 4011 
                                     mvpp2_prs_vid_enable_filtering(port);
    else {
      #line 4016 
      mvpp2_prs_vid_remove_all(port);
      #line 4018 
      mvpp2_prs_vid_disable_filtering(port);
    }
  #line 4022 
  if ((changed & 274877906944ULL) != 0ULL) 
    #line 4023 
    if ((features & 274877906944ULL) != 0ULL) 
                                              #line 4024 
                                              mvpp22_port_rss_enable(port); else 
                                                                    #line 4026 
                                                                    mvpp22_port_rss_disable(port);
  #line 4029 
  return 0;
}

#line 4034  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static int mvpp2_ethtool_nway_reset(struct net_device *dev)
{
  #line 4036 
  struct mvpp2_port *port = netdev_priv(dev);
  #line 4038 
  if (port->phylink == (struct phylink *)0) 
                                            #line 4039 
                                            return -524;
  #line 4041 
  return phylink_ethtool_nway_reset(port->phylink);
}

#line 4045  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static int mvpp2_ethtool_set_coalesce(struct net_device *dev, struct ethtool_coalesce *c)
{
  #line 4049 
  int queue;
  #line 4048 
  struct mvpp2_port *port = netdev_priv(dev);
  #line 4051 
  queue = 0;
  #line 4051 
  while (port->nrxqs > (unsigned int)queue) {
    {
      #line 4052 
      struct mvpp2_rx_queue *rxq = *(port->rxqs + (unsigned long)queue);
      #line 4054 
      rxq->time_coal = c->rx_coalesce_usecs;
      #line 4055 
      rxq->pkts_coal = c->rx_max_coalesced_frames;
      #line 4056 
      mvpp2_rx_pkts_coal_set(port,rxq);
      #line 4057 
      mvpp2_rx_time_coal_set(port,rxq);
    }
    #line 4051 
    queue ++;
  }
  #line 4060 
  if ((int)port->has_tx_irqs != 0) {
    #line 4061 
    port->tx_time_coal = c->tx_coalesce_usecs;
    #line 4062 
    mvpp2_tx_time_coal_set(port);
  }
  #line 4065 
  queue = 0;
  #line 4065 
  while (port->ntxqs > (unsigned int)queue) {
    {
      #line 4066 
      struct mvpp2_tx_queue *txq = *(port->txqs + (unsigned long)queue);
      #line 4068 
      txq->done_pkts_coal = c->tx_max_coalesced_frames;
      #line 4070 
      if ((int)port->has_tx_irqs != 0) 
                                       #line 4071 
                                       mvpp2_tx_pkts_coal_set(port,txq);
    }
    #line 4065 
    queue ++;
  }
  #line 4074 
  return 0;
}

#line 4078  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static int mvpp2_ethtool_get_coalesce(struct net_device *dev, struct ethtool_coalesce *c)
{
  #line 4081 
  struct mvpp2_port *port = netdev_priv(dev);
  #line 4083 
  c->rx_coalesce_usecs = (*(port->rxqs))->time_coal;
  #line 4084 
  c->rx_max_coalesced_frames = (*(port->rxqs))->pkts_coal;
  #line 4085 
  c->tx_max_coalesced_frames = (*(port->txqs))->done_pkts_coal;
  #line 4086 
  c->tx_coalesce_usecs = port->tx_time_coal;
  #line 4087 
  return 0;
}

#line 4090  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static void mvpp2_ethtool_get_drvinfo(struct net_device *dev, struct ethtool_drvinfo *drvinfo)
{
  #line 4093 
  strlcpy((char *)(& drvinfo->driver),(char *)"mvpp2",32UL);
  #line 4095 
  strlcpy((char *)(& drvinfo->version),(char *)"1.0",32UL);
  #line 4097 
  ;
  #line 4097 
  strlcpy((char *)(& drvinfo->bus_info),dev_name(& dev->dev),32UL);
  #line 4098 
  return;
}

#line 4101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static void mvpp2_ethtool_get_ringparam(struct net_device *dev, struct ethtool_ringparam *ring)
{
  #line 4104 
  struct mvpp2_port *port = netdev_priv(dev);
  #line 4106 
  ring->rx_max_pending = 1024U;
  #line 4107 
  ring->tx_max_pending = 2048U;
  #line 4108 
  ring->rx_pending = (unsigned int)port->rx_ring_size;
  #line 4109 
  ring->tx_pending = (unsigned int)port->tx_ring_size;
  #line 4110 
  return;
}

#line 4112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static int mvpp2_ethtool_set_ringparam(struct net_device *dev, struct ethtool_ringparam *ring)
{
  #line 4118 
  int err;
  #line 4115 
  struct mvpp2_port *port = netdev_priv(dev);
  #line 4116 
  u16 prev_rx_ring_size = port->rx_ring_size;
  #line 4117 
  u16 prev_tx_ring_size = port->tx_ring_size;
  #line 4120 
  err = mvpp2_check_ringparam_valid(dev,ring);
  #line 4121 
  if (err != 0) 
                #line 4122 
                return err;
  #line 4124 
  if (! netif_running(dev)) {
    #line 4125 
    port->rx_ring_size = (unsigned short)ring->rx_pending;
    #line 4126 
    port->tx_ring_size = (unsigned short)ring->tx_pending;
    #line 4127 
    return 0;
  }
  #line 4133 
  mvpp2_stop_dev(port);
  #line 4134 
  mvpp2_cleanup_rxqs(port);
  #line 4135 
  mvpp2_cleanup_txqs(port);
  #line 4137 
  port->rx_ring_size = (unsigned short)ring->rx_pending;
  #line 4138 
  port->tx_ring_size = (unsigned short)ring->tx_pending;
  #line 4140 
  err = mvpp2_setup_rxqs(port);
  #line 4141 
  if (err != 0) {
    #line 4143 
    port->rx_ring_size = prev_rx_ring_size;
    #line 4144 
    ring->rx_pending = (unsigned int)prev_rx_ring_size;
    #line 4145 
    err = mvpp2_setup_rxqs(port);
    #line 4146 
    if (err != 0) 
                  #line 4147 
                  goto err_out;
  }
  #line 4149 
  err = mvpp2_setup_txqs(port);
  #line 4150 
  if (err != 0) {
    #line 4152 
    port->tx_ring_size = prev_tx_ring_size;
    #line 4153 
    ring->tx_pending = (unsigned int)prev_tx_ring_size;
    #line 4154 
    err = mvpp2_setup_txqs(port);
    #line 4155 
    if (err != 0) 
                  #line 4156 
                  goto err_clean_rxqs;
  }
  #line 4159 
  mvpp2_start_dev(port);
  #line 4160 
  mvpp2_egress_enable(port);
  #line 4161 
  mvpp2_ingress_enable(port);
  #line 4163 
  return 0;
  #line 4165 
  err_clean_rxqs: 
                  #line 4165 
  ;
  #line 4166 
  mvpp2_cleanup_rxqs(port);
  #line 4167 
  err_out: 
           #line 4167 
  ;
  #line 4168 
  netdev_err(dev,(char *)"failed to change ring parameters");
  #line 4169 
  return err;
}

#line 4172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static void mvpp2_ethtool_get_pause_param(struct net_device *dev, struct ethtool_pauseparam *pause)
{
  #line 4175 
  struct mvpp2_port *port = netdev_priv(dev);
  #line 4177 
  if (port->phylink == (struct phylink *)0) 
                                            #line 4178 
                                            return;
  #line 4180 
  phylink_ethtool_get_pauseparam(port->phylink,pause);
  #line 4181 
  return;
}

#line 4183  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static int mvpp2_ethtool_set_pause_param(struct net_device *dev, struct ethtool_pauseparam *pause)
{
  #line 4186 
  struct mvpp2_port *port = netdev_priv(dev);
  #line 4188 
  if (port->phylink == (struct phylink *)0) 
                                            #line 4189 
                                            return -524;
  #line 4191 
  return phylink_ethtool_set_pauseparam(port->phylink,pause);
}

#line 4194  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static int mvpp2_ethtool_get_link_ksettings(struct net_device *dev, struct ethtool_link_ksettings *cmd)
{
  #line 4197 
  struct mvpp2_port *port = netdev_priv(dev);
  #line 4199 
  if (port->phylink == (struct phylink *)0) 
                                            #line 4200 
                                            return -524;
  #line 4202 
  return phylink_ethtool_ksettings_get(port->phylink,cmd);
}

#line 4205  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static int mvpp2_ethtool_set_link_ksettings(struct net_device *dev, struct ethtool_link_ksettings *cmd)
{
  #line 4208 
  struct mvpp2_port *port = netdev_priv(dev);
  #line 4210 
  if (port->phylink == (struct phylink *)0) 
                                            #line 4211 
                                            return -524;
  #line 4213 
  return phylink_ethtool_ksettings_set(port->phylink,cmd);
}

#line 4216  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static int mvpp2_ethtool_get_rxnfc(struct net_device *dev, struct ethtool_rxnfc *info, u32 *rules)
{
  #line 4220 
  int i;
  #line 4219 
  struct mvpp2_port *port = netdev_priv(dev);
  #line 4220 
  int ret = 0;
  #line 4220 
  int loc = 0;
  #line 4222 
  if (! mvpp22_rss_is_supported()) 
                                   #line 4223 
                                   return -95;
  #line 4225 
  switch (info->cmd) {
    #line 4226 
    case (__u32)41: 
                    #line 4226 
    ;
    #line 4227 
    ret = mvpp2_ethtool_rxfh_get(port,info);
    #line 4228 
    break;
    #line 4229 
    case (__u32)45: 
                    #line 4229 
    ;
    #line 4230 
    info->data = (unsigned long long)port->nrxqs;
    #line 4231 
    break;
    #line 4232 
    case (__u32)46: 
                    #line 4232 
    ;
    #line 4233 
    info->__anonCompField_ethtool_rxnfc_99.rule_cnt = (unsigned int)port->n_rfs_rules;
    #line 4234 
    break;
    #line 4235 
    case (__u32)47: 
                    #line 4235 
    ;
    #line 4236 
    ret = mvpp2_ethtool_cls_rule_get(port,info);
    #line 4237 
    break;
    #line 4238 
    case (__u32)48: 
                    #line 4238 
    ;
    #line 4239 
    i = 0;
    #line 4239 
    while (i <= 3) {
      #line 4240 
      if (port->rfs_rules[i] != (struct mvpp2_ethtool_fs *)0) {
        #line 4241 
        int tmp_1;
        #line 4241 
        tmp_1 = loc;
        #line 4241 
        loc ++;
        #line 4241 
        *(rules + (unsigned long)tmp_1) = (unsigned int)i;
      }
      #line 4239 
      i ++;
    }
    #line 4243 
    break;
    #line 4244 
    default: 
             #line 4244 
    ;
    #line 4245 
    return -524;
  }
  #line 4248 
  return ret;
}

#line 4251  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static int mvpp2_ethtool_set_rxnfc(struct net_device *dev, struct ethtool_rxnfc *info)
{
  #line 4254 
  struct mvpp2_port *port = netdev_priv(dev);
  #line 4255 
  int ret = 0;
  #line 4257 
  if (! mvpp22_rss_is_supported()) 
                                   #line 4258 
                                   return -95;
  #line 4260 
  switch (info->cmd) {
    #line 4261 
    case (__u32)42: 
                    #line 4261 
    ;
    #line 4262 
    ret = mvpp2_ethtool_rxfh_set(port,info);
    #line 4263 
    break;
    #line 4264 
    case (__u32)50: 
                    #line 4264 
    ;
    #line 4265 
    ret = mvpp2_ethtool_cls_rule_ins(port,info);
    #line 4266 
    break;
    #line 4267 
    case (__u32)49: 
                    #line 4267 
    ;
    #line 4268 
    ret = mvpp2_ethtool_cls_rule_del(port,info);
    #line 4269 
    break;
    #line 4270 
    default: 
             #line 4270 
    ;
    #line 4271 
    return -95;
  }
  #line 4273 
  return ret;
}

#line 4276  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static u32 mvpp2_ethtool_get_rxfh_indir_size(struct net_device *dev)
{
  #line 4278 
  unsigned int tmp_0;
  #line 4278 
  if ((int)mvpp22_rss_is_supported() != 0) 
                                           #line 4278 
                                           tmp_0 = 32U; else 
                                                             #line 4278 
                                                             tmp_0 = 0U;
  #line 4278 
  return tmp_0;
}

#line 4281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static int mvpp2_ethtool_get_rxfh(struct net_device *dev, u32 *indir, u8 *key, u8 *hfunc)
{
  #line 4284 
  struct mvpp2_port *port = netdev_priv(dev);
  #line 4285 
  int ret = 0;
  #line 4287 
  if (! mvpp22_rss_is_supported()) 
                                   #line 4288 
                                   return -95;
  #line 4290 
  if (indir != (u32 *)0U) 
                          #line 4291 
                          ret = mvpp22_port_rss_ctx_indir_get(port,0U,indir);
  #line 4293 
  if (hfunc != (u8 *)0U) 
                         #line 4294 
                         *hfunc = (unsigned char)4U;
  #line 4296 
  return ret;
}

#line 4299  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static int mvpp2_ethtool_set_rxfh(struct net_device *dev, u32 *indir, u8 *key, u8 hfunc)
{
  #line 4302 
  struct mvpp2_port *port = netdev_priv(dev);
  #line 4303 
  int ret = 0;
  #line 4305 
  if (! mvpp22_rss_is_supported()) 
                                   #line 4306 
                                   return -95;
  #line 4308 
  if ((unsigned int)hfunc != 0U && (unsigned int)hfunc != 4U) 
                                                              #line 4309 
                                                              return -95;
  #line 4311 
  if (key != (u8 *)0U) 
                       #line 4312 
                       return -95;
  #line 4314 
  if (indir != (u32 *)0U) 
                          #line 4315 
                          ret = mvpp22_port_rss_ctx_indir_set(port,0U,indir);
  #line 4317 
  return ret;
}

#line 4320  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static int mvpp2_ethtool_get_rxfh_context(struct net_device *dev, u32 *indir, u8 *key, u8 *hfunc, u32 rss_context)
{
  #line 4323 
  struct mvpp2_port *port = netdev_priv(dev);
  #line 4324 
  int ret = 0;
  #line 4326 
  if (! mvpp22_rss_is_supported()) 
                                   #line 4327 
                                   return -95;
  #line 4329 
  if (hfunc != (u8 *)0U) 
                         #line 4330 
                         *hfunc = (unsigned char)4U;
  #line 4332 
  if (indir != (u32 *)0U) 
                          #line 4333 
                          ret = mvpp22_port_rss_ctx_indir_get(port,rss_context,indir);
  #line 4335 
  return ret;
}

#line 4338  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static int mvpp2_ethtool_set_rxfh_context(struct net_device *dev, u32 *indir, u8 *key, u8 hfunc, u32 *rss_context, bool delete)
{
  #line 4344 
  int ret;
  #line 4343 
  struct mvpp2_port *port = netdev_priv(dev);
  #line 4346 
  if (! mvpp22_rss_is_supported()) 
                                   #line 4347 
                                   return -95;
  #line 4349 
  if ((unsigned int)hfunc != 0U && (unsigned int)hfunc != 4U) 
                                                              #line 4350 
                                                              return -95;
  #line 4352 
  if (key != (u8 *)0U) 
                       #line 4353 
                       return -95;
  #line 4355 
  if ((int)delete != 0) {
    #line 4356 
    return mvpp22_port_rss_ctx_delete(port,*rss_context);
  }
  #line 4358 
  if (*rss_context == 4294967295U) {
    #line 4359 
    ret = mvpp22_port_rss_ctx_create(port,rss_context);
    #line 4360 
    if (ret != 0) 
                  #line 4361 
                  return ret;
  }
  #line 4364 
  return mvpp22_port_rss_ctx_indir_set(port,*rss_context,indir);
}

#line 4368  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static struct net_device_ops mvpp2_netdev_ops = {.ndo_open = & mvpp2_open, .ndo_stop = & mvpp2_stop, .ndo_start_xmit = & mvpp2_tx, .ndo_set_rx_mode = & mvpp2_set_rx_mode, .ndo_set_mac_address = & mvpp2_set_mac_address, .ndo_do_ioctl = & mvpp2_ioctl, .ndo_change_mtu = & mvpp2_change_mtu, .ndo_get_stats64 = & mvpp2_get_stats64, .ndo_vlan_rx_add_vid = & mvpp2_vlan_rx_add_vid, .ndo_vlan_rx_kill_vid = & mvpp2_vlan_rx_kill_vid, .ndo_set_features = & mvpp2_set_features};
#line 4382  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static struct ethtool_ops mvpp2_eth_tool_ops = {.get_drvinfo = & mvpp2_ethtool_get_drvinfo, .nway_reset = & mvpp2_ethtool_nway_reset, .get_link = & ethtool_op_get_link, .get_coalesce = & mvpp2_ethtool_get_coalesce, .set_coalesce = & mvpp2_ethtool_set_coalesce, .get_ringparam = & mvpp2_ethtool_get_ringparam, .set_ringparam = & mvpp2_ethtool_set_ringparam, .get_pauseparam = & mvpp2_ethtool_get_pause_param, .set_pauseparam = & mvpp2_ethtool_set_pause_param, .get_strings = & mvpp2_ethtool_get_strings, .get_ethtool_stats = & mvpp2_ethtool_get_stats, .get_sset_count = & mvpp2_ethtool_get_sset_count, .get_rxnfc = & mvpp2_ethtool_get_rxnfc, .set_rxnfc = & mvpp2_ethtool_set_rxnfc, .get_rxfh_indir_size = & mvpp2_ethtool_get_rxfh_indir_size, .get_rxfh = & mvpp2_ethtool_get_rxfh, .set_rxfh = & mvpp2_ethtool_set_rxfh, .get_rxfh_context = & mvpp2_ethtool_get_rxfh_context, .set_rxfh_context = & mvpp2_ethtool_set_rxfh_context, .get_link_ksettings = & mvpp2_ethtool_get_link_ksettings, .set_link_ksettings = & mvpp2_ethtool_set_link_ksettings};
#line 4409  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static int mvpp2_simple_queue_vectors_init(struct mvpp2_port *port, struct device_node *port_node)
{
  #line 4412 
  struct mvpp2_queue_vector *v = & port->qvecs[0];
  #line 4414 
  v->first_rxq = 0;
  #line 4415 
  v->nrxqs = (int)port->nrxqs;
  #line 4416 
  v->type = MVPP2_QUEUE_VECTOR_SHARED;
  #line 4417 
  v->sw_thread_id = 0;
  #line 4418 
  v->sw_thread_mask = (unsigned short)*((unsigned long *)(& __cpu_online_mask));
  #line 4419 
  v->port = port;
  #line 4420 
  v->irq = (int)irq_of_parse_and_map(port_node,0);
  #line 4421 
  if (v->irq <= 0) 
                   #line 4422 
                   return -22;
  #line 4423 
  netif_napi_add(port->dev,& v->napi,& mvpp2_poll,64);
  #line 4426 
  port->nqvecs = 1U;
  #line 4428 
  return 0;
}

#line 4431  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static int mvpp2_multi_queue_vectors_init(struct mvpp2_port *port, struct device_node *port_node)
{
  #line 4435 
  struct mvpp2_queue_vector *v;
  #line 4436 
  int i;
  #line 4436 
  int ret;
  #line 4434 
  struct mvpp2 *priv = port->priv;
  #line 4438 
  switch (queue_mode) {
    #line 4439 
    case 0: 
            #line 4439 
    ;
    #line 4440 
    port->nqvecs = priv->nthreads + 1U;
    #line 4441 
    break;
    #line 4442 
    case 1: 
            #line 4442 
    ;
    #line 4443 
    port->nqvecs = priv->nthreads;
    #line 4444 
    break;
  }
  #line 4447 
  i = 0;
  #line 4447 
  while (port->nqvecs > (unsigned int)i) {
    {
      #line 4448 
      char irqname[16U];
      #line 4450 
      v = (struct mvpp2_queue_vector *)(& port->qvecs) + (unsigned long)i;
      #line 4452 
      v->port = port;
      #line 4453 
      v->type = MVPP2_QUEUE_VECTOR_PRIVATE;
      #line 4454 
      v->sw_thread_id = i;
      #line 4455 
      v->sw_thread_mask = (unsigned short)(1UL << i);
      #line 4457 
      if ((port->flags & 2UL) != 0UL) 
                                      #line 4458 
                                      snprintf((char *)(& irqname),16UL,(char *)"tx-cpu%d",i); else 
                                                                    #line 4460 
                                                                    snprintf((char *)(& irqname),16UL,(char *)"hif%d",i);
      #line 4462 
      if (queue_mode == 1) {
        #line 4463 
        v->first_rxq = i;
        #line 4464 
        v->nrxqs = 1;
      }
      else 
        #line 4465 
        if (queue_mode == 0 && port->nqvecs + 4294967295U == (unsigned int)i) {
          #line 4467 
          v->first_rxq = 0;
          #line 4468 
          v->nrxqs = (int)port->nrxqs;
          #line 4469 
          v->type = MVPP2_QUEUE_VECTOR_SHARED;
          #line 4471 
          if ((port->flags & 2UL) != 0UL) 
                                          #line 4472 
                                          strncpy((char *)(& irqname),(char *)"rx-shared",16UL);
        }
      #line 4475 
      if (port_node != (struct device_node *)0) 
                                                #line 4476 
                                                v->irq = of_irq_get_byname(port_node,(char *)(& irqname)); else 
                                                                    #line 4478 
                                                                    v->irq = fwnode_irq_get(port->fwnode,(unsigned int)i);
      #line 4479 
      if (v->irq <= 0) {
        #line 4480 
        ret = -22;
        #line 4481 
        goto err;
      }
      #line 4484 
      netif_napi_add(port->dev,& v->napi,& mvpp2_poll,64);
    }
    #line 4447 
    i ++;
  }
  #line 4488 
  return 0;
  #line 4490 
  err: 
       #line 4490 
  ;
  #line 4491 
  i = 0;
  #line 4491 
  while (port->nqvecs > (unsigned int)i) {
    #line 4492 
    irq_dispose_mapping((unsigned int)port->qvecs[i].irq);
    #line 4491 
    i ++;
  }
  #line 4493 
  return ret;
}

#line 4496  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static int mvpp2_queue_vectors_init(struct mvpp2_port *port, struct device_node *port_node)
{
  #line 4499 
  if ((int)port->has_tx_irqs != 0) {
    #line 4500 
    return mvpp2_multi_queue_vectors_init(port,port_node);
  }
  else {
    #line 4502 
    return mvpp2_simple_queue_vectors_init(port,port_node);
  }
}

#line 4505  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static void mvpp2_queue_vectors_deinit(struct mvpp2_port *port)
{
  #line 4507 
  int i;
  #line 4509 
  i = 0;
  #line 4509 
  while (port->nqvecs > (unsigned int)i) {
    #line 4510 
    irq_dispose_mapping((unsigned int)port->qvecs[i].irq);
    #line 4509 
    i ++;
  }
  #line 4511 
  return;
}

#line 4514  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static void mvpp2_rx_irqs_setup(struct mvpp2_port *port)
{
  #line 4517 
  u32 val;
  #line 4518 
  int i;
  #line 4516 
  struct mvpp2 *priv = port->priv;
  #line 4520 
  if (priv->hw_version == (unsigned int)MVPP21) {
    #line 4521 
    mvpp2_write(priv,(unsigned int)(((int)port->id + 5376) * 4),port->nrxqs);
    #line 4523 
    return;
  }
  #line 4527 
  i = 0;
  #line 4527 
  while (port->nqvecs > (unsigned int)i) {
    {
      #line 4528 
      struct mvpp2_queue_vector *qv = (struct mvpp2_queue_vector *)(& port->qvecs) + (unsigned long)i;
      #line 4530 
      if (qv->nrxqs == 0) 
                          #line 4531 
                          goto __Cont;
      #line 4533 
      val = (unsigned int)qv->sw_thread_id;
      #line 4534 
      val = (unsigned int)((int)port->id << 7) | val;
      #line 4535 
      mvpp2_write(priv,21504U,val);
      #line 4537 
      val = (unsigned int)qv->first_rxq;
      #line 4538 
      val = (unsigned int)(qv->nrxqs << 8) | val;
      #line 4539 
      mvpp2_write(priv,21508U,val);
    }
    #line 4527 
    __Cont: 
            #line 4527 
    i ++;
  }
  #line 4541 
  return;
}

#line 4544  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static int mvpp2_port_init(struct mvpp2_port *port)
{
  #line 4548 
  struct mvpp2_txq_pcpu *txq_pcpu;
  #line 4549 
  unsigned int thread;
  #line 4550 
  int queue;
  #line 4550 
  int err;
  #line 4546 
  struct device *dev = (port->dev)->dev.parent;
  #line 4547 
  struct mvpp2 *priv = port->priv;
  #line 4553 
  if ((unsigned int)port->first_rxq + port->nrxqs > priv->max_port_rxqs * 4U) 
    #line 4555 
    return -22;
  #line 4557 
  if (port->nrxqs > priv->max_port_rxqs || port->ntxqs > 8U) 
                                                             #line 4558 
                                                             return -22;
  #line 4561 
  mvpp2_egress_disable(port);
  #line 4562 
  mvpp2_port_disable(port);
  #line 4564 
  port->tx_time_coal = 1000U;
  #line 4566 
  port->txqs = (struct mvpp2_tx_queue **)cif_devm_kcalloc_0(dev,(unsigned long)port->ntxqs,8UL,3264U);
  #line 4568 
  if (port->txqs == (struct mvpp2_tx_queue **)0) 
                                                 #line 4569 
                                                 return -12;
  #line 4574 
  queue = 0;
  #line 4574 
  while (port->ntxqs > (unsigned int)queue) {
    {
      #line 4576 
      struct mvpp2_tx_queue *txq;
      #line 4575 
      int queue_phy_id = mvpp2_txq_phys((int)port->id,queue);
      #line 4578 
      txq = (struct mvpp2_tx_queue *)cif_devm_kzalloc(dev,56UL,3264U);
      #line 4579 
      if (txq == (struct mvpp2_tx_queue *)0) {
        #line 4580 
        err = -12;
        #line 4581 
        goto err_free_percpu;
      }
      #line 4584 
      txq->pcpu = (struct mvpp2_txq_pcpu *)__alloc_percpu(56UL,8UL);
      #line 4585 
      if (txq->pcpu == (struct mvpp2_txq_pcpu *)0) {
        #line 4586 
        err = -12;
        #line 4587 
        goto err_free_percpu;
      }
      #line 4590 
      txq->id = (unsigned char)queue_phy_id;
      #line 4591 
      txq->log_id = (unsigned char)queue;
      #line 4592 
      txq->done_pkts_coal = 64U;
      #line 4593 
      thread = 0U;
      #line 4593 
      while (priv->nthreads > thread) {
        {
          #line 4594 
          unsigned long __ptr;
          {
            #line 4594 
            void *__vpp_verify = (void *)0;
            #line 4594 
            void *tmp_3 = __vpp_verify;
          }
          #line 4595 
          ldv_inline_asm();
          #line 4594 
          txq_pcpu = ((struct mvpp2_txq_pcpu *)(__per_cpu_offset[thread] + __ptr));
          #line 4595 
          txq_pcpu->thread = thread;
        }
        #line 4593 
        thread ++;
      }
      #line 4598 
      *(port->txqs + (unsigned long)queue) = txq;
    }
    #line 4574 
    queue ++;
  }
  #line 4601 
  port->rxqs = (struct mvpp2_rx_queue **)cif_devm_kcalloc_0(dev,(unsigned long)port->nrxqs,8UL,3264U);
  #line 4603 
  if (port->rxqs == (struct mvpp2_rx_queue **)0) {
    #line 4604 
    err = -12;
    #line 4605 
    goto err_free_percpu;
  }
  #line 4609 
  queue = 0;
  #line 4609 
  while (port->nrxqs > (unsigned int)queue) {
    {
      #line 4610 
      struct mvpp2_rx_queue *rxq;
      #line 4613 
      rxq = (struct mvpp2_rx_queue *)cif_devm_kzalloc(dev,48UL,3264U);
      #line 4614 
      if (rxq == (struct mvpp2_rx_queue *)0) {
        #line 4615 
        err = -12;
        #line 4616 
        goto err_free_percpu;
      }
      #line 4619 
      rxq->id = (unsigned char)((int)port->first_rxq + (int)((unsigned char)queue));
      #line 4620 
      rxq->port = (int)port->id;
      #line 4621 
      rxq->logic_rxq = queue;
      #line 4623 
      *(port->rxqs + (unsigned long)queue) = rxq;
    }
    #line 4609 
    queue ++;
  }
  #line 4626 
  mvpp2_rx_irqs_setup(port);
  #line 4629 
  queue = 0;
  #line 4629 
  while (port->nrxqs > (unsigned int)queue) {
    {
      #line 4630 
      struct mvpp2_rx_queue *rxq_0 = *(port->rxqs + (unsigned long)queue);
      #line 4632 
      rxq_0->size = (int)port->rx_ring_size;
      #line 4633 
      rxq_0->pkts_coal = 32U;
      #line 4634 
      rxq_0->time_coal = 64U;
    }
    #line 4629 
    queue ++;
  }
  #line 4637 
  mvpp2_ingress_disable(port);
  #line 4640 
  mvpp2_defaults_set(port);
  #line 4643 
  mvpp2_cls_oversize_rxq_set(port);
  #line 4644 
  mvpp2_cls_port_config(port);
  #line 4646 
  if ((int)mvpp22_rss_is_supported() != 0) 
                                           #line 4647 
                                           mvpp22_port_rss_init(port);
  #line 4650 
  port->pkt_size = (int)((((port->dev)->mtu + (unsigned int)boot_cpu_data.x86_cache_alignment) + 23U) & - ((unsigned int)boot_cpu_data.x86_cache_alignment));
  #line 4653 
  err = mvpp2_swf_bm_pool_init(port);
  #line 4654 
  if (err != 0) 
                #line 4655 
                goto err_free_percpu;
  #line 4658 
  mvpp2_read_stats(port);
  #line 4659 
  memset((void *)port->ethtool_stats,0,((unsigned long)port->ntxqs * 72UL + (unsigned long)port->nrxqs * 32UL) + 232UL);
  #line 4662 
  return 0;
  #line 4664 
  err_free_percpu: 
                   #line 4664 
  ;
  #line 4665 
  queue = 0;
  #line 4665 
  while (port->ntxqs > (unsigned int)queue) {
    #line 4666 
    if (*(port->txqs + (unsigned long)queue) == (struct mvpp2_tx_queue *)0) 
      #line 4667 
      goto __Cont;
    #line 4668 
    free_percpu((void *)(*(port->txqs + (unsigned long)queue))->pcpu);
    #line 4665 
    __Cont: 
            #line 4665 
    queue ++;
  }
  #line 4670 
  return err;
}

#line 4673  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static bool mvpp22_port_has_legacy_tx_irqs(struct device_node *port_node, unsigned long *flags)
{
  #line 4678 
  int i;
  #line 4676 
  char *irqs[5U] = {(char *)"rx-shared", (char *)"tx-cpu0", (char *)"tx-cpu1", (char *)"tx-cpu2", (char *)"tx-cpu3"};
  #line 4680 
  i = 0;
  #line 4680 
  while (i <= 4) {
    #line 4681 
    if (of_property_match_string(port_node,(char *)"interrupt-names",irqs[i]) < 0) 
      #line 4683 
      return (_Bool)0;
    #line 4680 
    i ++;
  }
  #line 4685 
  *flags |= 2UL;
  #line 4686 
  return (_Bool)1;
}

#line 4697  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static bool mvpp2_port_has_irqs(struct mvpp2 *priv, struct device_node *port_node, unsigned long *flags)
{
  #line 4701 
  char name[5U];
  #line 4702 
  int i;
  #line 4705 
  if (port_node == (struct device_node *)0) 
                                            #line 4706 
                                            return (_Bool)1;
  #line 4708 
  if (priv->hw_version == (unsigned int)MVPP21) 
                                                #line 4709 
                                                return (_Bool)0;
  #line 4711 
  if ((int)mvpp22_port_has_legacy_tx_irqs(port_node,flags) != 0) 
                                                                 #line 4712 
                                                                 return (_Bool)1;
  #line 4714 
  i = 0;
  #line 4714 
  while (i <= 8) {
    {
      #line 4715 
      snprintf((char *)(& name),5UL,(char *)"hif%d",i);
      #line 4716 
      if (of_property_match_string(port_node,(char *)"interrupt-names",
                                 (char *)(& name)) < 0) 
        #line 4718 
        return (_Bool)0;
    }
    #line 4714 
    i ++;
  }
  #line 4721 
  return (_Bool)1;
}

#line 4724  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static void mvpp2_port_copy_mac_addr(struct net_device *dev, struct mvpp2 *priv, struct fwnode_handle *fwnode, char **mac_from)
{
  #line 4730 
  char fw_mac_addr[6U];
  #line 4728 
  struct mvpp2_port *port = netdev_priv(dev);
  #line 4729 
  char hw_mac_addr[6U] = {(char)0};
  #line 4732 
  if (fwnode_get_mac_address(fwnode,(char *)(& fw_mac_addr),6) != (void *)0) {
    #line 4733 
    *mac_from = (char *)"firmware node";
    #line 4734 
    ether_addr_copy(dev->dev_addr,(u8 *)(& fw_mac_addr));
    #line 4735 
    return;
  }
  #line 4738 
  if (priv->hw_version == (unsigned int)MVPP21) {
    #line 4739 
    mvpp21_get_mac_address(port,(unsigned char *)(& hw_mac_addr));
    #line 4740 
    if ((int)is_valid_ether_addr((u8 *)(& hw_mac_addr)) != 0) {
      #line 4741 
      *mac_from = (char *)"hardware";
      #line 4742 
      ether_addr_copy(dev->dev_addr,(u8 *)(& hw_mac_addr));
      #line 4743 
      return;
    }
  }
  #line 4747 
  *mac_from = (char *)"random";
  #line 4748 
  eth_hw_addr_random(dev);
  #line 4749 
  return;
}

#line 4751  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static void mvpp2_phylink_validate(struct phylink_config *config, unsigned long *supported, struct phylink_link_state *state)
{
  #line 4755 
  void *__mptr;
  #line 4755 
  __mptr = (void *)config;
  #line 4755 
  struct mvpp2_port *port = ((struct mvpp2_port *)(__mptr + 18446744073709549808U));
  #line 4757 
  unsigned long mask[2U] = {0UL};
  #line 4760 
  switch ((unsigned int)state->interface) {
    #line 4761 
    case (unsigned int)22: 
                           #line 4761 
    ;
    #line 4762 
    case (unsigned int)21: 
                           #line 4762 
    ;
    #line 4763 
    if (port->gop_id != 0) 
                           #line 4764 
                           goto empty_set;
    #line 4765 
    break;
    #line 4766 
    case (unsigned int)8: 
                          #line 4766 
    ;
    #line 4767 
    case (unsigned int)9: 
                          #line 4767 
    ;
    #line 4768 
    case (unsigned int)10: 
                           #line 4768 
    ;
    #line 4769 
    case (unsigned int)11: 
                           #line 4769 
    ;
    #line 4770 
    if ((port->priv)->hw_version == (unsigned int)MVPP22 && port->gop_id == 0) 
      #line 4771 
      goto empty_set;
    #line 4772 
    break;
    #line 4773 
    default: 
             #line 4773 
    ;
    #line 4774 
    break;
  }
  #line 4777 
  __set_bit(6L,(unsigned long *)(& mask));
  #line 4778 
  phylink_set_port_modes((unsigned long *)(& mask));
  #line 4779 
  __set_bit(13L,(unsigned long *)(& mask));
  #line 4780 
  __set_bit(14L,(unsigned long *)(& mask));
  #line 4782 
  switch ((unsigned int)state->interface) {
    #line 4783 
    case (unsigned int)22: 
                           #line 4783 
    ;
    #line 4784 
    case (unsigned int)21: 
                           #line 4784 
    ;
    #line 4785 
    case (unsigned int)0: 
                          #line 4785 
    ;
    #line 4786 
    if (port->gop_id == 0) {
      #line 4787 
      __set_bit(12L,(unsigned long *)(& mask));
      #line 4788 
      __set_bit(42L,(unsigned long *)(& mask));
      #line 4789 
      __set_bit(43L,(unsigned long *)(& mask));
      #line 4790 
      __set_bit(44L,(unsigned long *)(& mask));
      #line 4791 
      __set_bit(45L,(unsigned long *)(& mask));
      #line 4792 
      __set_bit(46L,(unsigned long *)(& mask));
      #line 4793 
      __set_bit(19L,(unsigned long *)(& mask));
    }
    #line 4796 
    case (unsigned int)8: 
                          #line 4796 
    ;
    #line 4797 
    case (unsigned int)9: 
                          #line 4797 
    ;
    #line 4798 
    case (unsigned int)10: 
                           #line 4798 
    ;
    #line 4799 
    case (unsigned int)11: 
                           #line 4799 
    ;
    #line 4800 
    case (unsigned int)4: 
                          #line 4800 
    ;
    #line 4801 
    __set_bit(0L,(unsigned long *)(& mask));
    #line 4802 
    __set_bit(1L,(unsigned long *)(& mask));
    #line 4803 
    __set_bit(2L,(unsigned long *)(& mask));
    #line 4804 
    __set_bit(3L,(unsigned long *)(& mask));
    #line 4806 
    case (unsigned int)18: 
                           #line 4806 
    ;
    #line 4807 
    case (unsigned int)19: 
                           #line 4807 
    ;
    #line 4808 
    __set_bit(5L,(unsigned long *)(& mask));
    #line 4809 
    __set_bit(41L,(unsigned long *)(& mask));
    #line 4810 
    __set_bit(47L,(unsigned long *)(& mask));
    #line 4811 
    __set_bit(15L,(unsigned long *)(& mask));
    #line 4812 
    break;
    #line 4813 
    default: 
             #line 4813 
    ;
    #line 4814 
    goto empty_set;
  }
  #line 4817 
  bitmap_and(supported,supported,(unsigned long *)(& mask),74U);
  #line 4818 
  bitmap_and((unsigned long *)(& state->advertising),(unsigned long *)(& state->advertising),(unsigned long *)(& mask),74U);
  #line 4820 
  return;
  #line 4822 
  empty_set: 
             #line 4822 
  ;
  #line 4823 
  cif_bitmap_zero(supported,74U);
  #line 4824 
  return;
}

#line 4826  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static void mvpp22_xlg_pcs_get_state(struct mvpp2_port *port, struct phylink_link_state *state)
{
  #line 4829 
  u32 val;
  #line 4831 
  state->speed = 10000;
  #line 4832 
  state->duplex = 1;
  #line 4833 
  state->an_complete = (unsigned int)1U;
  #line 4835 
  val = readl(port->base + 268U);
  #line 4836 
  state->link = (unsigned int)(((unsigned long)val & 1UL) != 0UL);
  #line 4838 
  state->pause = 0;
  #line 4839 
  val = readl(port->base + 256U);
  #line 4840 
  if (((unsigned long)val & 256UL) != 0UL) 
                                           #line 4841 
                                           state->pause |= 8;
  #line 4842 
  if (((unsigned long)val & 128UL) != 0UL) 
                                           #line 4843 
                                           state->pause |= 4;
  #line 4844 
  return;
}

#line 4846  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static void mvpp2_gmac_pcs_get_state(struct mvpp2_port *port, struct phylink_link_state *state)
{
  #line 4849 
  u32 val;
  #line 4851 
  val = readl(port->base + 16U);
  #line 4853 
  state->an_complete = (unsigned int)(((unsigned long)val & 2048UL) != 0UL);
  #line 4854 
  state->link = (unsigned int)(((unsigned long)val & 1UL) != 0UL);
  #line 4855 
  state->duplex = ((unsigned long)val & 8UL) != 0UL;
  #line 4857 
  switch ((unsigned int)port->phy_interface) {
    #line 4858 
    case (unsigned int)18: 
                           #line 4858 
    ;
    #line 4859 
    state->speed = 1000;
    #line 4860 
    break;
    #line 4861 
    case (unsigned int)19: 
                           #line 4861 
    ;
    #line 4862 
    state->speed = 2500;
    #line 4863 
    break;
    #line 4864 
    default: 
             #line 4864 
    ;
    #line 4865 
    if (((unsigned long)val & 2UL) != 0UL) 
                                           #line 4866 
                                           state->speed = 1000;
    else 
      #line 4867 
      if (((unsigned long)val & 4UL) != 0UL) 
                                             #line 4868 
                                             state->speed = 100; else 
                                                                   #line 4870 
                                                                   state->speed = 10;
  }
  #line 4873 
  state->pause = 0;
  #line 4874 
  if (((unsigned long)val & 16UL) != 0UL) 
                                          #line 4875 
                                          state->pause |= 4;
  #line 4876 
  if (((unsigned long)val & 32UL) != 0UL) 
                                          #line 4877 
                                          state->pause |= 8;
  #line 4878 
  return;
}

#line 4880  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static void mvpp2_phylink_mac_pcs_get_state(struct phylink_config *config, struct phylink_link_state *state)
{
  #line 4883 
  void *__mptr;
  #line 4883 
  __mptr = (void *)config;
  #line 4883 
  struct mvpp2_port *port = ((struct mvpp2_port *)(__mptr + 18446744073709549808U));
  #line 4886 
  if ((port->priv)->hw_version == (unsigned int)MVPP22 && port->gop_id == 0) {
    #line 4887 
    u32 mode = readl(port->base + 284U);
    #line 4888 
    mode &= 57344U;
    #line 4890 
    if (mode == 8192U) {
      #line 4891 
      mvpp22_xlg_pcs_get_state(port,state);
      #line 4892 
      return;
    }
  }
  #line 4896 
  mvpp2_gmac_pcs_get_state(port,state);
  #line 4897 
  return;
}

#line 4899  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static void mvpp2_mac_an_restart(struct phylink_config *config)
{
  #line 4901 
  void *__mptr;
  #line 4901 
  __mptr = (void *)config;
  #line 4901 
  struct mvpp2_port *port = ((struct mvpp2_port *)(__mptr + 18446744073709549808U));
  #line 4903 
  u32 val = readl(port->base + 12U);
  #line 4905 
  writel(val | 16U,port->base + 12U);
  #line 4907 
  writel(val & 4294967279U,port->base + 12U);
  #line 4909 
  return;
}

#line 4911  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static void mvpp2_xlg_config(struct mvpp2_port *port, unsigned int mode, struct phylink_link_state *state)
{
  #line 4914 
  u32 old_ctrl0;
  #line 4914 
  u32 ctrl0;
  #line 4915 
  u32 old_ctrl4;
  #line 4915 
  u32 ctrl4;
  #line 4917 
  ctrl0 = readl(port->base + 256U);
  #line 4917 
  old_ctrl0 = ctrl0;
  #line 4918 
  ctrl4 = readl(port->base + 388U);
  #line 4918 
  old_ctrl4 = ctrl4;
  #line 4920 
  ctrl0 |= 2U;
  #line 4922 
  if ((state->pause & 8) != 0) 
                               #line 4923 
                               ctrl0 |= 256U; else 
                                                   #line 4925 
                                                   ctrl0 &= 4294967039U;
  #line 4927 
  if ((state->pause & 4) != 0) 
                               #line 4928 
                               ctrl0 |= 128U; else 
                                                   #line 4930 
                                                   ctrl0 &= 4294967167U;
  #line 4932 
  ctrl4 &= 4294946815U;
  #line 4934 
  ctrl4 |= 96U;
  #line 4936 
  if (old_ctrl0 != ctrl0) 
                          #line 4937 
                          writel(ctrl0,port->base + 256U);
  #line 4938 
  if (old_ctrl4 != ctrl4) 
                          #line 4939 
                          writel(ctrl4,port->base + 388U);
  #line 4941 
  if (((unsigned long)old_ctrl0 & 2UL) == 0UL) 
    #line 4942 
    while (1) {
      #line 4942 
      if (! (((unsigned long)readl(port->base + 256U) & 2UL) == 0UL)) 
        #line 4942 
        break;
      #line 4944 
      continue;
    }
  #line 4945 
  return;
}

#line 4948  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static void mvpp2_gmac_config(struct mvpp2_port *port, unsigned int mode, struct phylink_link_state *state)
{
  #line 4951 
  u32 old_an;
  #line 4951 
  u32 an;
  #line 4952 
  u32 old_ctrl0;
  #line 4952 
  u32 ctrl0;
  #line 4953 
  u32 old_ctrl2;
  #line 4953 
  u32 ctrl2;
  #line 4954 
  u32 old_ctrl4;
  #line 4954 
  u32 ctrl4;
  #line 4956 
  an = readl(port->base + 12U);
  #line 4956 
  old_an = an;
  #line 4957 
  ctrl0 = readl(port->base);
  #line 4957 
  old_ctrl0 = ctrl0;
  #line 4958 
  ctrl2 = readl(port->base + 8U);
  #line 4958 
  old_ctrl2 = ctrl2;
  #line 4959 
  ctrl4 = readl(port->base + 144U);
  #line 4959 
  old_ctrl4 = ctrl4;
  #line 4961 
  an &= 4294951187U;
  #line 4966 
  ctrl0 &= 4294967293U;
  #line 4967 
  ctrl2 &= 4294967222U;
  #line 4969 
  ctrl4 &= 4294967271U;
  #line 4972 
  if ((int)phy_interface_mode_is_8023z(state->interface) != 0) {
    #line 4973 
    ctrl2 |= 8U;
    #line 4974 
    ctrl4 &= 4294967294U;
    #line 4975 
    ctrl4 |= 224U;
  }
  else 
    #line 4978 
    if (state->interface == (unsigned int)PHY_INTERFACE_MODE_SGMII) {
      #line 4979 
      ctrl2 |= 9U;
      #line 4980 
      ctrl4 &= 4294967294U;
      #line 4981 
      ctrl4 |= 224U;
    }
    else {
      #line 4984 
      if ((int)phy_interface_mode_is_rgmii(state->interface) != 0) {
        #line 4985 
        ctrl4 &= 4294967263U;
        #line 4986 
        ctrl4 |= 193U;
      }
    }
  #line 4992 
  if ((int)test_bit(13L,(unsigned long *)(& state->advertising)) != 0) 
    #line 4993 
    an |= 512U;
  #line 4994 
  if ((int)test_bit(14L,(unsigned long *)(& state->advertising)) != 0) 
    #line 4995 
    an |= 1024U;
  #line 4998 
  if (phylink_autoneg_inband(mode)) 
    #line 5012 
    if (state->interface == (unsigned int)PHY_INTERFACE_MODE_SGMII) {
      #line 5015 
      an &= 4294967292U;
      #line 5016 
      an |= 8324U;
      #line 5020 
      if ((state->pause & 8) != 0) 
                                   #line 5021 
                                   ctrl4 |= 16U;
      #line 5022 
      if ((state->pause & 4) != 0) 
                                   #line 5023 
                                   ctrl4 |= 8U;
    }
    else {
      #line 5024 
      if ((int)phy_interface_mode_is_8023z(state->interface) != 0) {
        #line 5030 
        ctrl0 |= 2U;
        #line 5031 
        an &= 4294967292U;
        #line 5032 
        an |= 4164U;
        #line 5036 
        if ((state->pause & 16) != 0 && (unsigned int)state->an_enabled != 0U) 
          #line 5037 
          an |= 2048U;
        else {
          #line 5039 
          if ((state->pause & 8) != 0) 
                                       #line 5040 
                                       ctrl4 |= 16U;
          #line 5041 
          if ((state->pause & 4) != 0) 
                                       #line 5042 
                                       ctrl4 |= 8U;
        }
      }
    }
  else {
    #line 5000 
    if (state->duplex != 0) 
                            #line 5001 
                            an |= 4096U;
    #line 5003 
    if (state->speed == 1000 || state->speed == 2500) 
                                                      #line 5004 
                                                      an |= 64U;
    else 
      #line 5005 
      if (state->speed == 100) 
                               #line 5006 
                               an |= 32U;
    #line 5008 
    if ((state->pause & 8) != 0) 
                                 #line 5009 
                                 ctrl4 |= 16U;
    #line 5010 
    if ((state->pause & 4) != 0) 
                                 #line 5011 
                                 ctrl4 |= 8U;
  }
  #line 5056 
  if ((((unsigned long)(old_ctrl0 ^ ctrl0) & 2UL) != 0UL || ((unsigned long)(old_ctrl2 ^ ctrl2) & 1UL) != 0UL) || ((unsigned long)(old_an ^ an) & 12524UL) != 0UL) {
    #line 5060 
    old_an &= 4294967293U;
    #line 5061 
    old_an |= 1U;
    #line 5062 
    writel(old_an,port->base + 12U);
    #line 5067 
    old_ctrl2 |= 64U;
    #line 5068 
    writel(old_ctrl2,port->base + 8U);
  }
  #line 5071 
  if (old_ctrl0 != ctrl0) 
                          #line 5072 
                          writel(ctrl0,port->base);
  #line 5073 
  if (old_ctrl2 != ctrl2) 
                          #line 5074 
                          writel(ctrl2,port->base + 8U);
  #line 5075 
  if (old_ctrl4 != ctrl4) 
                          #line 5076 
                          writel(ctrl4,port->base + 144U);
  #line 5077 
  if (old_an != an) 
                    #line 5078 
                    writel(an,port->base + 12U);
  #line 5080 
  if (((unsigned long)old_ctrl2 & 64UL) != 0UL) 
    #line 5081 
    while (1) {
      #line 5081 
      if (! (((unsigned long)readl(port->base + 8U) & 64UL) != 0UL)) 
        #line 5081 
        break;
      #line 5083 
      continue;
    }
  #line 5084 
  return;
}

#line 5087  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static void mvpp2_mac_config(struct phylink_config *config, unsigned int mode, struct phylink_link_state *state)
{
  #line 5090 
  void *__mptr;
  #line 5090 
  __mptr = (void *)config->dev;
  #line 5090 
  struct net_device *dev = ((struct net_device *)(__mptr + 18446744073709550144U));
  #line 5091 
  struct mvpp2_port *port = netdev_priv(dev);
  #line 5092 
  bool change_interface = (_Bool)(port->phy_interface != state->interface);
  #line 5095 
  if ((int)mvpp2_is_xlg(state->interface) != 0) 
    #line 5095 
    if (port->gop_id != 0) {
      #line 5096 
      netdev_err(dev,(char *)"Invalid mode on %s\n",(char *)(& dev->name));
      #line 5097 
      return;
    }
  #line 5101 
  mvpp2_port_disable(port);
  #line 5103 
  if ((port->priv)->hw_version == (unsigned int)MVPP22 && (int)change_interface != 0) {
    #line 5104 
    mvpp22_gop_mask_irq(port);
    #line 5106 
    port->phy_interface = state->interface;
    #line 5109 
    phy_power_off(port->comphy);
    #line 5110 
    mvpp22_mode_reconfigure(port);
  }
  #line 5114 
  if ((int)mvpp2_is_xlg(state->interface) != 0) 
                                                #line 5115 
                                                mvpp2_xlg_config(port,mode,state);
  else {
    #line 5116 
    if ((int)phy_interface_mode_is_rgmii(state->interface) != 0) 
                                                                 #line 5119 
                                                                 mvpp2_gmac_config(port,mode,state);
    else {
      #line 5116 
      if ((int)phy_interface_mode_is_8023z(state->interface) != 0) 
                                                                   #line 5119 
                                                                   mvpp2_gmac_config(port,mode,state);
      else 
        #line 5117 
        if (state->interface == (unsigned int)PHY_INTERFACE_MODE_SGMII) 
          #line 5119 
          mvpp2_gmac_config(port,mode,state);
    }
  }
  #line 5121 
  if ((port->priv)->hw_version == (unsigned int)MVPP21 && (port->flags & 1UL) != 0UL) 
    #line 5122 
    mvpp2_port_loopback_set(port,state);
  #line 5124 
  if ((port->priv)->hw_version == (unsigned int)MVPP22 && (int)change_interface != 0) 
    #line 5125 
    mvpp22_gop_unmask_irq(port);
  #line 5127 
  mvpp2_port_enable(port);
  #line 5128 
  return;
}

#line 5130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static void mvpp2_mac_link_up(struct phylink_config *config, unsigned int mode, phy_interface_t interface, struct phy_device *phy)
{
  #line 5133 
  void *__mptr;
  #line 5135 
  u32 val;
  #line 5133 
  __mptr = (void *)config->dev;
  #line 5133 
  struct net_device *dev = ((struct net_device *)(__mptr + 18446744073709550144U));
  #line 5134 
  struct mvpp2_port *port = netdev_priv(dev);
  #line 5137 
  if (! phylink_autoneg_inband(mode)) {
    #line 5138 
    if ((int)mvpp2_is_xlg(interface) != 0) {
      #line 5139 
      val = readl(port->base + 256U);
      #line 5140 
      val &= 4294967291U;
      #line 5141 
      val |= 8U;
      #line 5142 
      writel(val,port->base + 256U);
    }
    else {
      #line 5144 
      val = readl(port->base + 12U);
      #line 5145 
      val &= 4294967294U;
      #line 5146 
      val |= 2U;
      #line 5147 
      writel(val,port->base + 12U);
    }
  }
  #line 5151 
  mvpp2_port_enable(port);
  #line 5153 
  mvpp2_egress_enable(port);
  #line 5154 
  mvpp2_ingress_enable(port);
  #line 5155 
  netif_tx_wake_all_queues(dev);
  #line 5156 
  return;
}

#line 5158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static void mvpp2_mac_link_down(struct phylink_config *config, unsigned int mode, phy_interface_t interface)
{
  #line 5161 
  void *__mptr;
  #line 5163 
  u32 val;
  #line 5161 
  __mptr = (void *)config->dev;
  #line 5161 
  struct net_device *dev = ((struct net_device *)(__mptr + 18446744073709550144U));
  #line 5162 
  struct mvpp2_port *port = netdev_priv(dev);
  #line 5165 
  if (! phylink_autoneg_inband(mode)) {
    #line 5166 
    if ((int)mvpp2_is_xlg(interface) != 0) {
      #line 5167 
      val = readl(port->base + 256U);
      #line 5168 
      val &= 4294967287U;
      #line 5169 
      val |= 4U;
      #line 5170 
      writel(val,port->base + 256U);
    }
    else {
      #line 5172 
      val = readl(port->base + 12U);
      #line 5173 
      val &= 4294967293U;
      #line 5174 
      val |= 1U;
      #line 5175 
      writel(val,port->base + 12U);
    }
  }
  #line 5179 
  netif_tx_stop_all_queues(dev);
  #line 5180 
  mvpp2_egress_disable(port);
  #line 5181 
  mvpp2_ingress_disable(port);
  #line 5183 
  mvpp2_port_disable(port);
  #line 5184 
  return;
}

#line 5186  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static struct phylink_mac_ops mvpp2_phylink_ops = {.validate = & mvpp2_phylink_validate, .mac_pcs_get_state = & mvpp2_phylink_mac_pcs_get_state, .mac_config = & mvpp2_mac_config, .mac_an_restart = & mvpp2_mac_an_restart, .mac_link_down = & mvpp2_mac_link_down, .mac_link_up = & mvpp2_mac_link_up};
#line 5196  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static int mvpp2_port_probe(struct platform_device *pdev, struct fwnode_handle *port_fwnode, struct mvpp2 *priv)
{
  #line 5203 
  void *__mptr;
  #line 5203 
  struct device_node *tmp_1;
  #line 5322 
  struct mvpp2_pcpu_stats *pcpu_stats;
  #line 5201 
  struct mvpp2_port *port;
  #line 5202 
  struct mvpp2_port_pcpu *port_pcpu;
  #line 5204 
  netdev_features_t features;
  #line 5205 
  struct net_device *dev;
  #line 5206 
  struct phylink *phylink;
  #line 5208 
  unsigned int ntxqs;
  #line 5208 
  unsigned int nrxqs;
  #line 5208 
  unsigned int thread;
  #line 5210 
  bool has_tx_irqs;
  #line 5211 
  u32 id;
  #line 5212 
  int phy_mode;
  #line 5213 
  int err;
  #line 5213 
  int i;
  #line 5421 
  int tmp_25;
  #line 5200 
  struct phy *comphy = (struct phy *)0;
  {
    #line 5203 
    struct fwnode_handle *__to_of_node_fwnode = port_fwnode;
    #line 5203 
    if ((int)is_of_node(__to_of_node_fwnode) != 0) {
      #line 5203 
      __mptr = (void *)__to_of_node_fwnode;
      #line 5203 
      tmp_1 = ((struct device_node *)(__mptr + 18446744073709551592U));
    }
    else 
         #line 5203 
         tmp_1 = (struct device_node *)0;
    }
  #line 5203 
  struct device_node *port_node = tmp_1;
  #line 5207 
  char *mac_from = (char *)"";
  #line 5209 
  unsigned long flags = 0UL;
  #line 5215 
  has_tx_irqs = mvpp2_port_has_irqs(priv,port_node,& flags);
  #line 5216 
  if (! has_tx_irqs && queue_mode == 1) {
    #line 5217 
    _dev_err(& pdev->dev,(char *)"not enough IRQs to support multi queue mode\n");
    #line 5219 
    return -22;
  }
  #line 5222 
  ntxqs = 8U;
  #line 5223 
  nrxqs = (unsigned int)mvpp2_get_nrxqs(priv);
  #line 5225 
  dev = cif_alloc_etherdev_mqs(5904,ntxqs,nrxqs);
  #line 5226 
  if (dev == (struct net_device *)0) 
                                     #line 5227 
                                     return -12;
  #line 5229 
  phy_mode = fwnode_get_phy_mode(port_fwnode);
  #line 5230 
  if (phy_mode < 0) {
    #line 5231 
    _dev_err(& pdev->dev,(char *)"incorrect phy mode\n");
    #line 5232 
    err = phy_mode;
    #line 5233 
    goto err_free_netdev;
  }
  #line 5236 
  if (port_node != (struct device_node *)0) {
    #line 5237 
    comphy = devm_of_phy_get(& pdev->dev,port_node,(char *)0);
    #line 5238 
    if ((int)IS_ERR((void *)comphy) != 0) {
      #line 5239 
      if (PTR_ERR((void *)comphy) == -517L) {
        #line 5240 
        err = -517;
        #line 5241 
        goto err_free_netdev;
      }
      #line 5243 
      comphy = (struct phy *)0;
    }
  }
  #line 5247 
  if (fwnode_property_read_u32(port_fwnode,(char *)"port-id",& id) != 0) {
    #line 5248 
    err = -22;
    #line 5249 
    _dev_err(& pdev->dev,(char *)"missing port-id value\n");
    #line 5250 
    goto err_free_netdev;
  }
  #line 5253 
  dev->tx_queue_len = 2048U;
  #line 5254 
  dev->watchdog_timeo = 1250;
  #line 5255 
  dev->netdev_ops = & mvpp2_netdev_ops;
  #line 5256 
  dev->ethtool_ops = & mvpp2_eth_tool_ops;
  #line 5258 
  port = (struct mvpp2_port *)netdev_priv(dev);
  #line 5259 
  port->dev = dev;
  #line 5260 
  port->fwnode = port_fwnode;
  #line 5261 
  port->has_phy = (_Bool)(of_find_property(port_node,(char *)"phy",(int *)0) != (struct property *)0);
  #line 5262 
  port->ntxqs = ntxqs;
  #line 5263 
  port->nrxqs = nrxqs;
  #line 5264 
  port->priv = priv;
  #line 5265 
  port->has_tx_irqs = has_tx_irqs;
  #line 5266 
  port->flags = flags;
  #line 5268 
  err = mvpp2_queue_vectors_init(port,port_node);
  #line 5269 
  if (err != 0) 
                #line 5270 
                goto err_free_netdev;
  #line 5272 
  if (port_node != (struct device_node *)0) 
                                            #line 5273 
                                            port->link_irq = of_irq_get_byname(port_node,(char *)"link"); else 
                                                                    #line 5275 
                                                                    port->link_irq = fwnode_irq_get(port_fwnode,port->nqvecs + 1U);
  #line 5276 
  if (port->link_irq == -517) {
    #line 5277 
    err = -517;
    #line 5278 
    goto err_deinit_qvecs;
  }
  #line 5280 
  if (port->link_irq <= 0) 
                           #line 5282 
                           port->link_irq = 0;
  #line 5284 
  if ((int)fwnode_property_read_bool(port_fwnode,(char *)"marvell,loopback") != 0) 
    #line 5285 
    port->flags |= 1UL;
  #line 5287 
  port->id = (unsigned char)id;
  #line 5288 
  if (priv->hw_version == (unsigned int)MVPP21) 
                                                #line 5289 
                                                port->first_rxq = (unsigned char)((int)port->id * (int)((unsigned char)port->nrxqs)); else 
                                                                    #line 5291 
                                                                    port->first_rxq = (unsigned char)((int)port->id * (int)((unsigned char)priv->max_port_rxqs));
  #line 5293 
  port->of_node = port_node;
  #line 5294 
  port->phy_interface = (enum ldv_19579)phy_mode;
  #line 5295 
  port->comphy = comphy;
  #line 5297 
  if (priv->hw_version == (unsigned int)MVPP21) {
    #line 5298 
    port->base = devm_platform_ioremap_resource(pdev,id + 2U);
    #line 5299 
    if ((int)IS_ERR(port->base) != 0) {
      #line 5300 
      err = (int)PTR_ERR(port->base);
      #line 5301 
      goto err_free_irq;
    }
    #line 5304 
    port->stats_base = (port->priv)->lms_base + ((unsigned long)(port->gop_id * 1024) + (unsigned long)4096U);
  }
  else {
    #line 5308 
    if (fwnode_property_read_u32(port_fwnode,(char *)"gop-port-id",
                                  (u32 *)(& port->gop_id)) != 0) {
      #line 5310 
      err = -22;
      #line 5311 
      _dev_err(& pdev->dev,(char *)"missing gop-port-id value\n");
      #line 5312 
      goto err_deinit_qvecs;
    }
    #line 5315 
    port->base = priv->iface_base + ((unsigned long)((port->gop_id + 7) * 4096) + (unsigned long)3584U);
    #line 5316 
    port->stats_base = (port->priv)->iface_base + (unsigned long)(port->gop_id * 256);
  }
  #line 5322 
  pcpu_stats = (struct mvpp2_pcpu_stats *)__alloc_percpu_gfp(32UL,8UL,3264U);
  #line 5322 
  if (pcpu_stats != (struct mvpp2_pcpu_stats *)0) {
    #line 5322 
    int __cpu;
    #line 5322 
    __cpu = -1;
    #line 5322 
    while (1) {
      #line 5322 
      __cpu = (int)cpumask_next(__cpu,& __cpu_possible_mask);
      #line 5322 
      if (! ((unsigned int)__cpu < nr_cpu_ids)) 
                                                #line 5322 
                                                break;
      {
        #line 5322 
        unsigned long __ptr;
        #line 5322 
        struct mvpp2_pcpu_stats *stat;
        {
          #line 5322 
          void *__vpp_verify = (void *)0;
          #line 5322 
          void *tmp_14 = __vpp_verify;
        }
        #line 5323 
        ldv_inline_asm();
        #line 5322 
        stat = ((struct mvpp2_pcpu_stats *)(__per_cpu_offset[__cpu] + __ptr));
        #line 5322 
        u64_stats_init(& stat->syncp);
      }
    }
  }
  #line 5322 
  port->stats = pcpu_stats;
  #line 5323 
  if (port->stats == (struct mvpp2_pcpu_stats *)0) {
    #line 5324 
    err = -12;
    #line 5325 
    goto err_free_irq;
  }
  #line 5328 
  port->ethtool_stats = (u64 *)cif_devm_kcalloc_0(& pdev->dev,((unsigned long)ntxqs * 9UL + (unsigned long)nrxqs * 4UL) + 29UL,8UL,3264U);
  #line 5331 
  if (port->ethtool_stats == (u64 *)0ULL) {
    #line 5332 
    err = -12;
    #line 5333 
    goto err_free_stats;
  }
  {
    #line 5336 
    struct lock_class_key __key;
    #line 5336 
    __mutex_init(& port->gather_stats_lock,(char *)"&port->gather_stats_lock",& __key);
  }
  {
    #line 5337 
    struct lock_class_key __key_0;
    #line 5337 
    __init_work(& port->stats_work.work,0);
    #line 5337 
    atomic_long_t __constr_expr_44 = {.counter = 137438953408LL};
    #line 5337 
    port->stats_work.work.data = __constr_expr_44;
    #line 5337 
    lockdep_init_map(& port->stats_work.work.lockdep_map,(char *)"(work_completion)",& __key_0,0);
    #line 5337 
    INIT_LIST_HEAD(& port->stats_work.work.entry);
    #line 5337 
    port->stats_work.work.func = & mvpp2_gather_hw_statistics;
  }
  {
    #line 5337 
    struct lock_class_key __key_1;
    #line 5337 
    init_timer_key(& port->stats_work.timer,& delayed_work_timer_fn,2097152U,(char *)"&(&port->stats_work)->timer",& __key_1);
  }
  #line 5339 
  mvpp2_port_copy_mac_addr(dev,priv,port_fwnode,& mac_from);
  #line 5341 
  port->tx_ring_size = (unsigned short)1024U;
  #line 5342 
  port->rx_ring_size = (unsigned short)128U;
  #line 5343 
  dev->dev.parent = & pdev->dev;
  #line 5345 
  err = mvpp2_port_init(port);
  #line 5346 
  if (err < 0) {
    #line 5347 
    _dev_err(& pdev->dev,(char *)"failed to init port %d\n",id);
    #line 5348 
    goto err_free_stats;
  }
  #line 5351 
  mvpp2_port_periodic_xon_disable(port);
  #line 5353 
  mvpp2_mac_reset_assert(port);
  #line 5354 
  mvpp22_pcs_reset_assert(port);
  #line 5356 
  port->pcpu = (struct mvpp2_port_pcpu *)__alloc_percpu(80UL,8UL);
  #line 5357 
  if (port->pcpu == (struct mvpp2_port_pcpu *)0) {
    #line 5358 
    err = -12;
    #line 5359 
    goto err_free_txq_pcpu;
  }
  #line 5362 
  if (! port->has_tx_irqs) {
    #line 5363 
    thread = 0U;
    #line 5363 
    while (priv->nthreads > thread) {
      {
        #line 5364 
        unsigned long __ptr_0;
        {
          #line 5364 
          void *__vpp_verify_0 = (void *)0;
          #line 5364 
          void *tmp_20 = __vpp_verify_0;
        }
        #line 5365 
        ldv_inline_asm();
        #line 5364 
        port_pcpu = ((struct mvpp2_port_pcpu *)(__per_cpu_offset[thread] + __ptr_0));
        #line 5366 
        hrtimer_init(& port_pcpu->tx_done_timer,1,(enum hrtimer_mode)HRTIMER_MODE_REL_PINNED_SOFT);
        #line 5368 
        port_pcpu->tx_done_timer.function = & mvpp2_hr_timer_cb;
        #line 5369 
        port_pcpu->timer_scheduled = (_Bool)0;
        #line 5370 
        port_pcpu->dev = dev;
      }
      #line 5363 
      thread ++;
    }
  }
  #line 5374 
  features = 65555ULL;
  #line 5376 
  dev->features = features | 549755813888ULL;
  #line 5377 
  dev->hw_features = (dev->hw_features | features) | 549755830784ULL;
  #line 5380 
  if ((int)mvpp22_rss_is_supported() != 0) {
    #line 5381 
    dev->hw_features |= 274877906944ULL;
    #line 5382 
    dev->features |= 137438953472ULL;
  }
  #line 5385 
  if ((port->priv)->percpu_pools == 0) 
                                       #line 5386 
                                       mvpp2_set_hw_csum(port,(enum mvpp2_bm_pool_log_num)(port->pool_long)->id);
  #line 5388 
  dev->vlan_features |= features;
  #line 5389 
  dev->gso_max_segs = (unsigned short)300U;
  #line 5390 
  dev->priv_flags |= 4096U;
  #line 5393 
  dev->min_mtu = 68U;
  #line 5395 
  dev->max_mtu = 9856U;
  #line 5396 
  dev->dev.of_node = port_node;
  #line 5399 
  if (port_node != (struct device_node *)0) {
    #line 5400 
    port->phylink_config.dev = & dev->dev;
    #line 5401 
    port->phylink_config.type = PHYLINK_NETDEV;
    #line 5403 
    phylink = phylink_create(& port->phylink_config,port_fwnode,(enum ldv_19579)phy_mode,& mvpp2_phylink_ops);
    #line 5405 
    if ((int)IS_ERR((void *)phylink) != 0) {
      #line 5406 
      err = (int)PTR_ERR((void *)phylink);
      #line 5407 
      goto err_free_port_pcpu;
    }
    #line 5409 
    port->phylink = phylink;
  }
  else 
       #line 5411 
       port->phylink = (struct phylink *)0;
  #line 5414 
  err = cif_register_netdev(dev);
  #line 5415 
  if (err < 0) {
    #line 5416 
    _dev_err(& pdev->dev,(char *)"failed to register netdev\n");
    #line 5417 
    goto err_phylink;
  }
  #line 5419 
  netdev_info(dev,(char *)"Using %s mac address %pM\n",mac_from,dev->dev_addr);
  #line 5421 
  tmp_25 = priv->port_count;
  #line 5421 
  (priv->port_count) ++;
  #line 5421 
  priv->port_list[tmp_25] = port;
  #line 5423 
  return 0;
  #line 5425 
  err_phylink: 
               #line 5425 
  ;
  #line 5426 
  if (port->phylink != (struct phylink *)0) 
                                            #line 5427 
                                            phylink_destroy(port->phylink);
  #line 5428 
  err_free_port_pcpu: 
                      #line 5428 
  ;
  #line 5429 
  free_percpu((void *)port->pcpu);
  #line 5430 
  err_free_txq_pcpu: 
                     #line 5430 
  ;
  #line 5431 
  i = 0;
  #line 5431 
  while (port->ntxqs > (unsigned int)i) {
    #line 5432 
    free_percpu((void *)(*(port->txqs + (unsigned long)i))->pcpu);
    #line 5431 
    i ++;
  }
  #line 5433 
  err_free_stats: 
                  #line 5433 
  ;
  #line 5434 
  free_percpu((void *)port->stats);
  #line 5435 
  err_free_irq: 
                #line 5435 
  ;
  #line 5436 
  if (port->link_irq != 0) 
                           #line 5437 
                           irq_dispose_mapping((unsigned int)port->link_irq);
  #line 5438 
  err_deinit_qvecs: 
                    #line 5438 
  ;
  #line 5439 
  mvpp2_queue_vectors_deinit(port);
  #line 5440 
  err_free_netdev: 
                   #line 5440 
  ;
  #line 5441 
  cif_free_netdev(dev);
  #line 5442 
  return err;
}

#line 5446  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static void mvpp2_port_remove(struct mvpp2_port *port)
{
  #line 5448 
  int i;
  #line 5450 
  cif_unregister_netdev(port->dev);
  #line 5451 
  if (port->phylink != (struct phylink *)0) 
                                            #line 5452 
                                            phylink_destroy(port->phylink);
  #line 5453 
  free_percpu((void *)port->pcpu);
  #line 5454 
  free_percpu((void *)port->stats);
  #line 5455 
  i = 0;
  #line 5455 
  while (port->ntxqs > (unsigned int)i) {
    #line 5456 
    free_percpu((void *)(*(port->txqs + (unsigned long)i))->pcpu);
    #line 5455 
    i ++;
  }
  #line 5457 
  mvpp2_queue_vectors_deinit(port);
  #line 5458 
  if (port->link_irq != 0) 
                           #line 5459 
                           irq_dispose_mapping((unsigned int)port->link_irq);
  #line 5460 
  cif_free_netdev(port->dev);
  #line 5461 
  return;
}

#line 5464  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static void mvpp2_conf_mbus_windows(struct mbus_dram_target_info *dram, struct mvpp2 *priv)
{
  #line 5467 
  u32 win_enable;
  #line 5468 
  int i;
  #line 5470 
  i = 0;
  #line 5470 
  while (i <= 5) {
    #line 5471 
    mvpp2_write(priv,(unsigned int)((i << 2) + 16384),0U);
    #line 5472 
    mvpp2_write(priv,(unsigned int)((i << 2) + 16416),0U);
    #line 5474 
    if (i <= 3) 
                #line 5475 
                mvpp2_write(priv,(unsigned int)((i << 2) + 16448),0U);
    #line 5470 
    i ++;
  }
  #line 5478 
  win_enable = 0U;
  #line 5480 
  i = 0;
  #line 5480 
  while (dram->num_cs > i) {
    {
      #line 5481 
      struct mbus_dram_window *cs = (struct mbus_dram_window *)(& dram->cs) + (unsigned long)i;
      #line 5483 
      mvpp2_write(priv,(unsigned int)((i << 2) + 16384),(((unsigned int)cs->base & 4294901760U) | (unsigned int)((int)cs->mbus_attr << 8)) | (unsigned int)dram->mbus_dram_target_id);
      #line 5487 
      mvpp2_write(priv,(unsigned int)((i << 2) + 16416),((unsigned int)cs->size + 4294967295U) & 4294901760U);
      #line 5490 
      win_enable = (unsigned int)(1 << i) | win_enable;
    }
    #line 5480 
    i ++;
  }
  #line 5493 
  mvpp2_write(priv,16480U,win_enable);
  #line 5494 
  return;
}

#line 5497  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static void mvpp2_rx_fifo_init(struct mvpp2 *priv)
{
  #line 5499 
  int port;
  #line 5501 
  port = 0;
  #line 5501 
  while (port <= 3) {
    #line 5502 
    mvpp2_write(priv,(unsigned int)(port * 4),4096U);
    #line 5504 
    mvpp2_write(priv,(unsigned int)((port + 8) * 4),64U);
    #line 5501 
    port ++;
  }
  #line 5508 
  mvpp2_write(priv,96U,128U);
  #line 5510 
  mvpp2_write(priv,100U,1U);
  #line 5511 
  return;
}

#line 5513  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static void mvpp22_rx_fifo_init(struct mvpp2 *priv)
{
  #line 5515 
  int port;
  #line 5524 
  mvpp2_write(priv,0U,32768U);
  #line 5526 
  mvpp2_write(priv,32U,512U);
  #line 5529 
  mvpp2_write(priv,4U,8192U);
  #line 5531 
  mvpp2_write(priv,36U,128U);
  #line 5534 
  port = 2;
  #line 5534 
  while (port <= 3) {
    #line 5535 
    mvpp2_write(priv,(unsigned int)(port * 4),4096U);
    #line 5537 
    mvpp2_write(priv,(unsigned int)((port + 8) * 4),64U);
    #line 5534 
    port ++;
  }
  #line 5541 
  mvpp2_write(priv,96U,128U);
  #line 5543 
  mvpp2_write(priv,100U,1U);
  #line 5544 
  return;
}

#line 5550  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static void mvpp22_tx_fifo_init(struct mvpp2 *priv)
{
  #line 5552 
  int port;
  #line 5552 
  int size;
  #line 5552 
  int thrs;
  #line 5554 
  port = 0;
  #line 5554 
  while (port <= 3) {
    #line 5555 
    if (port == 0) {
      #line 5556 
      size = 10;
      #line 5557 
      thrs = 9984;
    }
    else {
      #line 5559 
      size = 3;
      #line 5560 
      thrs = 2816;
    }
    #line 5562 
    mvpp2_write(priv,(unsigned int)((port + 8728) * 4),(unsigned int)size);
    #line 5563 
    mvpp2_write(priv,(unsigned int)((port + 8720) * 4),(unsigned int)thrs);
    #line 5554 
    port ++;
  }
  #line 5565 
  return;
}

#line 5567  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static void mvpp2_axi_init(struct mvpp2 *priv)
{
  #line 5569 
  u32 val;
  #line 5569 
  u32 rdval;
  #line 5569 
  u32 wrval;
  #line 5571 
  mvpp2_write(priv,25796U,0U);
  #line 5575 
  rdval = 11U;
  #line 5577 
  rdval |= 8192U;
  #line 5580 
  wrval = 7U;
  #line 5582 
  wrval |= 8192U;
  #line 5586 
  mvpp2_write(priv,16640U,wrval);
  #line 5587 
  mvpp2_write(priv,16644U,rdval);
  #line 5590 
  mvpp2_write(priv,16656U,rdval);
  #line 5591 
  mvpp2_write(priv,16660U,wrval);
  #line 5592 
  mvpp2_write(priv,16664U,rdval);
  #line 5593 
  mvpp2_write(priv,16668U,wrval);
  #line 5596 
  mvpp2_write(priv,16688U,rdval);
  #line 5597 
  mvpp2_write(priv,16672U,wrval);
  #line 5599 
  val = 3U;
  #line 5601 
  val |= 48U;
  #line 5603 
  mvpp2_write(priv,16720U,val);
  #line 5604 
  mvpp2_write(priv,16736U,val);
  #line 5606 
  val = 11U;
  #line 5608 
  val |= 32U;
  #line 5611 
  mvpp2_write(priv,16724U,val);
  #line 5613 
  val = 7U;
  #line 5615 
  val |= 32U;
  #line 5618 
  mvpp2_write(priv,16740U,val);
  #line 5619 
  return;
}

#line 5622  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static int mvpp2_init(struct platform_device *pdev, struct mvpp2 *priv)
{
  #line 5624 
  struct mbus_dram_target_info *dram_target_info;
  #line 5625 
  int err;
  #line 5625 
  int i;
  #line 5626 
  u32 val;
  #line 5629 
  dram_target_info = mv_mbus_dram_info();
  #line 5630 
  if (dram_target_info != (struct mbus_dram_target_info *)0) 
                                                             #line 5631 
                                                             mvpp2_conf_mbus_windows(dram_target_info,priv);
  #line 5633 
  if (priv->hw_version == (unsigned int)MVPP22) 
                                                #line 5634 
                                                mvpp2_axi_init(priv);
  #line 5637 
  if (priv->hw_version == (unsigned int)MVPP21) {
    #line 5638 
    val = readl(priv->lms_base + 52U);
    #line 5639 
    val |= 128U;
    #line 5640 
    writel(val,priv->lms_base + 52U);
  }
  else {
    #line 5642 
    val = readl(priv->iface_base + 4612U);
    #line 5643 
    val &= 4294966271U;
    #line 5644 
    writel(val,priv->iface_base + 4612U);
  }
  #line 5648 
  priv->aggr_txqs = (struct mvpp2_tx_queue *)cif_devm_kcalloc_0(& pdev->dev,9UL,56UL,3264U);
  #line 5651 
  if (priv->aggr_txqs == (struct mvpp2_tx_queue *)0) 
                                                     #line 5652 
                                                     return -12;
  #line 5654 
  i = 0;
  #line 5654 
  while (i <= 8) {
    #line 5655 
    (priv->aggr_txqs + (unsigned long)i)->id = (unsigned char)i;
    #line 5656 
    (priv->aggr_txqs + (unsigned long)i)->size = 256;
    #line 5657 
    err = mvpp2_aggr_txq_init(pdev,priv->aggr_txqs + (unsigned long)i,(unsigned int)i,priv);
    #line 5658 
    if (err < 0) 
                 #line 5659 
                 return err;
    #line 5654 
    i ++;
  }
  #line 5663 
  if (priv->hw_version == (unsigned int)MVPP21) 
                                                #line 5664 
                                                mvpp2_rx_fifo_init(priv);
  else {
    #line 5666 
    mvpp22_rx_fifo_init(priv);
    #line 5667 
    mvpp22_tx_fifo_init(priv);
  }
  #line 5670 
  if (priv->hw_version == (unsigned int)MVPP21) 
                                                #line 5671 
                                                writel(39U,priv->lms_base + 12380U);
  #line 5675 
  mvpp2_write(priv,34816U,1U);
  #line 5678 
  err = mvpp2_bm_init(& pdev->dev,priv);
  #line 5679 
  if (err < 0) 
               #line 5680 
               return err;
  #line 5683 
  err = mvpp2_prs_default_init(pdev,priv);
  #line 5684 
  if (err < 0) 
               #line 5685 
               return err;
  #line 5688 
  mvpp2_cls_init(priv);
  #line 5690 
  return 0;
}

#line 5693  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static int mvpp2_probe(struct platform_device *pdev)
{
  #line 5771 
  unsigned int __UNIQUE_ID___x587;
  #line 5771 
  unsigned int tmp_13;
  #line 5695 
  struct acpi_device_id *acpi_id;
  #line 5697 
  struct fwnode_handle *port_fwnode;
  #line 5698 
  struct mvpp2 *priv;
  #line 5699 
  struct resource *res;
  #line 5700 
  void *base;
  #line 5701 
  int i;
  #line 5701 
  int shared;
  #line 5702 
  int err;
  #line 5891 
  char *tmp_30;
  #line 5696 
  struct fwnode_handle *fwnode = pdev->dev.fwnode;
  #line 5704 
  priv = (struct mvpp2 *)cif_devm_kzalloc(& pdev->dev,368UL,3264U);
  #line 5705 
  if (priv == (struct mvpp2 *)0) 
                                 #line 5706 
                                 return -12;
  #line 5708 
  if ((int)has_acpi_companion(& pdev->dev) != 0) {
    #line 5709 
    acpi_id = acpi_match_device((pdev->dev.driver)->acpi_match_table,& pdev->dev);
    #line 5711 
    if (acpi_id == (struct acpi_device_id *)0) 
                                               #line 5712 
                                               return -22;
    #line 5713 
    priv->hw_version = (enum ldv_19831)acpi_id->driver_data;
  }
  else {
    #line 5715 
    priv->hw_version = (enum ldv_19831)((long)of_device_get_match_data(& pdev->dev));
  }
  #line 5722 
  if (priv->hw_version == (unsigned int)MVPP21) 
                                                #line 5723 
                                                queue_mode = 0;
  #line 5725 
  base = devm_platform_ioremap_resource(pdev,0U);
  #line 5726 
  if ((int)IS_ERR(base) != 0) {
    #line 5727 
    return (int)PTR_ERR(base);
  }
  #line 5729 
  if (priv->hw_version == (unsigned int)MVPP21) {
    #line 5730 
    priv->lms_base = devm_platform_ioremap_resource(pdev,1U);
    #line 5731 
    if ((int)IS_ERR(priv->lms_base) != 0) {
      #line 5732 
      return (int)PTR_ERR(priv->lms_base);
    }
  }
  else {
    #line 5734 
    res = platform_get_resource(pdev,512U,1U);
    #line 5735 
    if ((int)has_acpi_companion(& pdev->dev) != 0) 
                                                   #line 5744 
                                                   release_resource(res);
    #line 5746 
    priv->iface_base = devm_ioremap_resource(& pdev->dev,res);
    #line 5747 
    if ((int)IS_ERR(priv->iface_base) != 0) {
      #line 5748 
      return (int)PTR_ERR(priv->iface_base);
    }
  }
  #line 5751 
  if (priv->hw_version == (unsigned int)MVPP22) {
    #line 5751 
    if (dev_of_node(& pdev->dev) != (struct device_node *)0) {
      #line 5752 
      priv->sysctrl_base = syscon_regmap_lookup_by_phandle(pdev->dev.of_node,(char *)"marvell,system-controller");
      #line 5755 
      if ((int)IS_ERR((void *)priv->sysctrl_base) != 0) 
                                                        #line 5761 
                                                        priv->sysctrl_base = (struct regmap *)0;
    }
  }
  #line 5764 
  if (priv->hw_version == (unsigned int)MVPP22) {
    #line 5764 
    if (mvpp2_get_nrxqs(priv) * 2 <= 8) 
                                        #line 5766 
                                        priv->percpu_pools = 1;
  }
  #line 5768 
  mvpp2_setup_bm_pool();
  {
    #line 5771 
    __UNIQUE_ID___x587 = cpumask_weight(& __cpu_present_mask);
    #line 5771 
    unsigned int __UNIQUE_ID___y588 = 9U;
    #line 5771 
    if (__UNIQUE_ID___x587 < __UNIQUE_ID___y588) 
                                                 #line 5771 
                                                 tmp_13 = __UNIQUE_ID___x587; else 
                                                                    #line 5771 
                                                                    tmp_13 = __UNIQUE_ID___y588;
    }
  #line 5771 
  priv->nthreads = tmp_13;
  #line 5774 
  shared = (int)(cpumask_weight(& __cpu_present_mask) - priv->nthreads);
  #line 5775 
  if (shared > 0) {
    #line 5777 
    int __UNIQUE_ID___x589;
    #line 5777 
    int tmp_16;
    {
      #line 5777 
      __UNIQUE_ID___x589 = shared;
      #line 5777 
      int __UNIQUE_ID___y590 = 9;
      #line 5777 
      if (__UNIQUE_ID___x589 < __UNIQUE_ID___y590) 
                                                   #line 5777 
                                                   tmp_16 = __UNIQUE_ID___x589; else 
                                                                    #line 5777 
                                                                    tmp_16 = __UNIQUE_ID___y590;
      }
    #line 5776 
    ;
    #line 5776 
    bitmap_fill(& priv->lock_map,(unsigned int)tmp_16);
  }
  #line 5779 
  i = 0;
  #line 5779 
  while (i <= 8) {
    {
      #line 5780 
      u32 addr_space_sz;
      #line 5782 
      if (priv->hw_version == (unsigned int)MVPP21) 
                                                    #line 5782 
                                                    addr_space_sz = 0U; else 
                                                                    #line 5782 
                                                                    addr_space_sz = 65536U;
      #line 5784 
      priv->swth_base[i] = base + (unsigned long)((unsigned int)i * addr_space_sz);
    }
    #line 5779 
    i ++;
  }
  #line 5787 
  if (priv->hw_version == (unsigned int)MVPP21) 
                                                #line 5788 
                                                priv->max_port_rxqs = 8U; else 
                                                                    #line 5790 
                                                                    priv->max_port_rxqs = 32U;
  #line 5792 
  if (dev_of_node(& pdev->dev) != (struct device_node *)0) {
    #line 5793 
    priv->pp_clk = devm_clk_get(& pdev->dev,(char *)"pp_clk");
    #line 5794 
    if ((int)IS_ERR((void *)priv->pp_clk) != 0) {
      #line 5795 
      return (int)PTR_ERR((void *)priv->pp_clk);
    }
    #line 5796 
    err = clk_prepare_enable(priv->pp_clk);
    #line 5797 
    if (err < 0) 
                 #line 5798 
                 return err;
    #line 5800 
    priv->gop_clk = devm_clk_get(& pdev->dev,(char *)"gop_clk");
    #line 5801 
    if ((int)IS_ERR((void *)priv->gop_clk) != 0) {
      #line 5802 
      err = (int)PTR_ERR((void *)priv->gop_clk);
      #line 5803 
      goto err_pp_clk;
    }
    #line 5805 
    err = clk_prepare_enable(priv->gop_clk);
    #line 5806 
    if (err < 0) 
                 #line 5807 
                 goto err_pp_clk;
    #line 5809 
    if (priv->hw_version == (unsigned int)MVPP22) {
      #line 5810 
      priv->mg_clk = devm_clk_get(& pdev->dev,(char *)"mg_clk");
      #line 5811 
      if ((int)IS_ERR((void *)priv->mg_clk) != 0) {
        #line 5812 
        err = (int)PTR_ERR((void *)priv->mg_clk);
        #line 5813 
        goto err_gop_clk;
      }
      #line 5816 
      err = clk_prepare_enable(priv->mg_clk);
      #line 5817 
      if (err < 0) 
                   #line 5818 
                   goto err_gop_clk;
      #line 5820 
      priv->mg_core_clk = devm_clk_get(& pdev->dev,(char *)"mg_core_clk");
      #line 5821 
      if ((int)IS_ERR((void *)priv->mg_core_clk) != 0) 
                                                       #line 5822 
                                                       priv->mg_core_clk = (struct clk *)0;
      else {
        #line 5824 
        err = clk_prepare_enable(priv->mg_core_clk);
        #line 5825 
        if (err < 0) 
                     #line 5826 
                     goto err_mg_clk;
      }
    }
    #line 5830 
    priv->axi_clk = devm_clk_get(& pdev->dev,(char *)"axi_clk");
    #line 5831 
    if ((int)IS_ERR((void *)priv->axi_clk) != 0) {
      #line 5832 
      err = (int)PTR_ERR((void *)priv->axi_clk);
      #line 5833 
      if (err == -517) 
                       #line 5834 
                       goto err_mg_core_clk;
      #line 5835 
      priv->axi_clk = (struct clk *)0;
    }
    else {
      #line 5837 
      err = clk_prepare_enable(priv->axi_clk);
      #line 5838 
      if (err < 0) 
                   #line 5839 
                   goto err_mg_core_clk;
    }
    #line 5843 
    priv->tclk = (unsigned int)clk_get_rate(priv->pp_clk);
  }
  else {
    #line 5844 
    if (device_property_read_u32(& pdev->dev,(char *)"clock-frequency",
                                  & priv->tclk) != 0) {
      #line 5846 
      _dev_err(& pdev->dev,(char *)"missing clock-frequency value\n");
      #line 5847 
      return -22;
    }
  }
  #line 5850 
  if (priv->hw_version == (unsigned int)MVPP22) {
    #line 5851 
    err = dma_set_mask(& pdev->dev,1099511627775ULL);
    #line 5852 
    if (err != 0) 
                  #line 5853 
                  goto err_axi_clk;
    #line 5859 
    err = dma_set_coherent_mask(& pdev->dev,4294967295ULL);
    #line 5860 
    if (err != 0) 
                  #line 5861 
                  goto err_axi_clk;
  }
  #line 5865 
  err = mvpp2_init(pdev,priv);
  #line 5866 
  if (err < 0) {
    #line 5867 
    _dev_err(& pdev->dev,(char *)"failed to initialize controller\n");
    #line 5868 
    goto err_axi_clk;
  }
  #line 5872 
  port_fwnode = fwnode_get_next_available_child_node(fwnode,(struct fwnode_handle *)0);
  #line 5872 
  while (port_fwnode != (struct fwnode_handle *)0) {
    #line 5873 
    err = mvpp2_port_probe(pdev,port_fwnode,priv);
    #line 5874 
    if (err < 0) 
                 #line 5875 
                 goto err_port_probe;
    #line 5872 
    port_fwnode = fwnode_get_next_available_child_node(fwnode,port_fwnode);
  }
  #line 5878 
  if (priv->port_count == 0) {
    #line 5879 
    _dev_err(& pdev->dev,(char *)"no ports enabled\n");
    #line 5880 
    err = -19;
    #line 5881 
    goto err_axi_clk;
  }
  #line 5891 
  if (priv->port_count > 1) 
                            #line 5891 
                            tmp_30 = (char *)"+"; else 
                                                       #line 5891 
                                                       tmp_30 = (char *)"";
  #line 5890 
  ;
  #line 5890 
  snprintf((char *)(& priv->queue_name),30UL,(char *)"stats-wq-%s%s",netdev_name((priv->port_list[0])->dev),tmp_30);
  #line 5893 
  priv->stats_queue = alloc_workqueue((char *)"%s",917514U,1,(char *)(& priv->queue_name));
  #line 5894 
  if (priv->stats_queue == (struct workqueue_struct *)0) {
    #line 5895 
    err = -12;
    #line 5896 
    goto err_port_probe;
  }
  #line 5899 
  mvpp2_dbgfs_init(priv,pdev->name);
  #line 5901 
  platform_set_drvdata(pdev,(void *)priv);
  #line 5902 
  return 0;
  #line 5904 
  err_port_probe: 
                  #line 5904 
  ;
  #line 5905 
  i = 0;
  #line 5906 
  port_fwnode = fwnode_get_next_available_child_node(fwnode,(struct fwnode_handle *)0);
  #line 5906 
  while (port_fwnode != (struct fwnode_handle *)0) {
    #line 5907 
    if (priv->port_list[i] != (struct mvpp2_port *)0) 
                                                      #line 5908 
                                                      mvpp2_port_remove(priv->port_list[i]);
    #line 5909 
    i ++;
    #line 5906 
    port_fwnode = fwnode_get_next_available_child_node(fwnode,port_fwnode);
  }
  #line 5911 
  err_axi_clk: 
               #line 5911 
  ;
  #line 5912 
  clk_disable_unprepare(priv->axi_clk);
  #line 5914 
  err_mg_core_clk: 
                   #line 5914 
  ;
  #line 5915 
  if (priv->hw_version == (unsigned int)MVPP22) 
                                                #line 5916 
                                                clk_disable_unprepare(priv->mg_core_clk);
  #line 5917 
  err_mg_clk: 
              #line 5917 
  ;
  #line 5918 
  if (priv->hw_version == (unsigned int)MVPP22) 
                                                #line 5919 
                                                clk_disable_unprepare(priv->mg_clk);
  #line 5920 
  err_gop_clk: 
               #line 5920 
  ;
  #line 5921 
  clk_disable_unprepare(priv->gop_clk);
  #line 5922 
  err_pp_clk: 
              #line 5922 
  ;
  #line 5923 
  clk_disable_unprepare(priv->pp_clk);
  #line 5924 
  return err;
}

#line 5927  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static int mvpp2_remove(struct platform_device *pdev)
{
  #line 5931 
  struct fwnode_handle *port_fwnode;
  #line 5929 
  struct mvpp2 *priv = platform_get_drvdata(pdev);
  #line 5930 
  struct fwnode_handle *fwnode = pdev->dev.fwnode;
  #line 5932 
  int i = 0;
  #line 5934 
  mvpp2_dbgfs_cleanup(priv);
  #line 5936 
  port_fwnode = fwnode_get_next_available_child_node(fwnode,(struct fwnode_handle *)0);
  #line 5936 
  while (port_fwnode != (struct fwnode_handle *)0) {
    #line 5937 
    if (priv->port_list[i] != (struct mvpp2_port *)0) {
      #line 5938 
      mutex_destroy(& (priv->port_list[i])->gather_stats_lock);
      #line 5939 
      mvpp2_port_remove(priv->port_list[i]);
    }
    #line 5941 
    i ++;
    #line 5936 
    port_fwnode = fwnode_get_next_available_child_node(fwnode,port_fwnode);
  }
  #line 5944 
  destroy_workqueue(priv->stats_queue);
  #line 5946 
  i = 0;
  #line 5946 
  while (i <= 2) {
    {
      #line 5947 
      struct mvpp2_bm_pool *bm_pool = priv->bm_pools + (unsigned long)i;
      #line 5949 
      mvpp2_bm_pool_destroy(& pdev->dev,priv,bm_pool);
    }
    #line 5946 
    i ++;
  }
  #line 5952 
  i = 0;
  #line 5952 
  while (i <= 8) {
    {
      #line 5953 
      struct mvpp2_tx_queue *aggr_txq = priv->aggr_txqs + (unsigned long)i;
      #line 5955 
      dma_free_coherent(& pdev->dev,8192UL,(void *)aggr_txq->descs,aggr_txq->descs_dma);
    }
    #line 5952 
    i ++;
  }
  #line 5961 
  if ((int)is_acpi_node(port_fwnode) != 0) 
                                           #line 5962 
                                           return 0;
  #line 5964 
  clk_disable_unprepare(priv->axi_clk);
  #line 5965 
  clk_disable_unprepare(priv->mg_core_clk);
  #line 5966 
  clk_disable_unprepare(priv->mg_clk);
  #line 5967 
  clk_disable_unprepare(priv->pp_clk);
  #line 5968 
  clk_disable_unprepare(priv->gop_clk);
  #line 5970 
  return 0;
}

#line 5973  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static struct of_device_id mvpp2_match[3U] = {{.compatible = {(char)'m', (char)'a', (char)'r', (char)'v', (char)'e', (char)'l', (char)'l', (char)',', (char)'a', (char)'r', (char)'m', (char)'a', (char)'d', (char)'a', (char)'-', (char)'3', (char)'7', (char)'5', (char)'-', (char)'p', (char)'p', (char)'2'}}, {.compatible = {(char)'m', (char)'a', (char)'r', (char)'v', (char)'e', (char)'l', (char)'l', (char)',', (char)'a', (char)'r', (char)'m', (char)'a', (char)'d', (char)'a', (char)'-', (char)'7', (char)'k', (char)'-', (char)'p', (char)'p', (char)'2', (char)'2'}, .data = (void *)1}};
#line 5984  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
struct of_device_id __mod_of__mvpp2_match_device_table[3U];
#line 5986  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static struct acpi_device_id mvpp2_acpi_match[2U] = {{.id = {(unsigned char)'M', (unsigned char)'R', (unsigned char)'V', (unsigned char)'L', (unsigned char)'0', (unsigned char)'1', (unsigned char)'1', (unsigned char)'0'}, .driver_data = 1UL}};
#line 5990  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
struct acpi_device_id __mod_acpi__mvpp2_acpi_match_device_table[2U];
#line 5992  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static struct platform_driver mvpp2_driver = {.probe = & mvpp2_probe, .remove = & mvpp2_remove, .driver = {.name = (char *)"mvpp2", .of_match_table = (struct of_device_id *)(& mvpp2_match), .acpi_match_table = (struct acpi_device_id *)(& mvpp2_acpi_match)}};
#line 6002  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static int mvpp2_driver_init(void)
{
  #line 6002 
  return cif___platform_driver_register(& mvpp2_driver,& __this_module);
}

#line 6002  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_main.c"
static void mvpp2_driver_exit(void)
{
  #line 6002 
  cif_platform_driver_unregister(& mvpp2_driver);
  #line 6003 
  return;
}

#line 93  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_main.i.aux"
struct platform_driver *emg_alias_mvpp2_driver = & mvpp2_driver;
#line 96 
#line 96 
int emg___platform_driver_register(struct platform_driver *arg0, struct module *arg1);
#line 97 
#line 97 
struct net_device *emg_alloc_etherdev_mqs(int arg0, unsigned int arg1, unsigned int arg2);
#line 98 
#line 98 
void *emg_free_irq(unsigned int arg0, void *arg1);
#line 99 
#line 99 
void emg_free_netdev(struct net_device *arg0);
#line 100 
#line 100 
void emg_platform_driver_unregister(struct platform_driver *arg0);
#line 101 
#line 101 
_Bool emg_queue_delayed_work(struct workqueue_struct *arg0, struct delayed_work *arg1, unsigned long arg2);
#line 102 
#line 102 
int emg_register_netdev(struct net_device *arg0);
#line 103 
#line 103 
int emg_request_irq(unsigned int arg0, enum irqreturn (*arg1)(int , void *), unsigned long arg2, char *arg3, void *arg4);
#line 104 
#line 104 
void emg_unregister_netdev(struct net_device *arg0);
#line 108  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_main.i.aux"
int emg_wrapper_mvpp2_change_mtu(struct net_device *arg0, int arg1)
{
  #line 109 
  return mvpp2_change_mtu(arg0,arg1);
}

#line 113  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_main.i.aux"
int emg_wrapper_mvpp2_ethtool_get_coalesce(struct net_device *arg0, struct ethtool_coalesce *arg1)
{
  #line 114 
  return mvpp2_ethtool_get_coalesce(arg0,arg1);
}

#line 118  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_main.i.aux"
void emg_wrapper_mvpp2_ethtool_get_drvinfo(struct net_device *arg0, struct ethtool_drvinfo *arg1)
{
  #line 119 
  mvpp2_ethtool_get_drvinfo(arg0,arg1);
  #line 120 
  return;
}

#line 123  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_main.i.aux"
int emg_wrapper_mvpp2_ethtool_get_link_ksettings(struct net_device *arg0, struct ethtool_link_ksettings *arg1)
{
  #line 124 
  return mvpp2_ethtool_get_link_ksettings(arg0,arg1);
}

#line 128  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_main.i.aux"
void emg_wrapper_mvpp2_ethtool_get_pause_param(struct net_device *arg0, struct ethtool_pauseparam *arg1)
{
  #line 129 
  mvpp2_ethtool_get_pause_param(arg0,arg1);
  #line 130 
  return;
}

#line 133  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_main.i.aux"
void emg_wrapper_mvpp2_ethtool_get_ringparam(struct net_device *arg0, struct ethtool_ringparam *arg1)
{
  #line 134 
  mvpp2_ethtool_get_ringparam(arg0,arg1);
  #line 135 
  return;
}

#line 138  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_main.i.aux"
int emg_wrapper_mvpp2_ethtool_get_rxfh(struct net_device *arg0, unsigned int *arg1, unsigned char *arg2, unsigned char *arg3)
{
  #line 139 
  return mvpp2_ethtool_get_rxfh(arg0,arg1,arg2,arg3);
}

#line 143  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_main.i.aux"
int emg_wrapper_mvpp2_ethtool_get_rxfh_context(struct net_device *arg0, unsigned int *arg1, unsigned char *arg2, unsigned char *arg3, unsigned int arg4)
{
  #line 144 
  return mvpp2_ethtool_get_rxfh_context(arg0,arg1,arg2,arg3,arg4);
}

#line 148  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_main.i.aux"
unsigned int emg_wrapper_mvpp2_ethtool_get_rxfh_indir_size(struct net_device *arg0)
{
  #line 149 
  return mvpp2_ethtool_get_rxfh_indir_size(arg0);
}

#line 153  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_main.i.aux"
int emg_wrapper_mvpp2_ethtool_get_rxnfc(struct net_device *arg0, struct ethtool_rxnfc *arg1, unsigned int *arg2)
{
  #line 154 
  return mvpp2_ethtool_get_rxnfc(arg0,arg1,arg2);
}

#line 158  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_main.i.aux"
int emg_wrapper_mvpp2_ethtool_get_sset_count(struct net_device *arg0, int arg1)
{
  #line 159 
  return mvpp2_ethtool_get_sset_count(arg0,arg1);
}

#line 163  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_main.i.aux"
void emg_wrapper_mvpp2_ethtool_get_stats(struct net_device *arg0, struct ethtool_stats *arg1, unsigned long long *arg2)
{
  #line 164 
  mvpp2_ethtool_get_stats(arg0,arg1,arg2);
  #line 165 
  return;
}

#line 168  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_main.i.aux"
void emg_wrapper_mvpp2_ethtool_get_strings(struct net_device *arg0, unsigned int arg1, unsigned char *arg2)
{
  #line 169 
  mvpp2_ethtool_get_strings(arg0,arg1,arg2);
  #line 170 
  return;
}

#line 173  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_main.i.aux"
int emg_wrapper_mvpp2_ethtool_nway_reset(struct net_device *arg0)
{
  #line 174 
  return mvpp2_ethtool_nway_reset(arg0);
}

#line 178  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_main.i.aux"
int emg_wrapper_mvpp2_ethtool_set_coalesce(struct net_device *arg0, struct ethtool_coalesce *arg1)
{
  #line 179 
  return mvpp2_ethtool_set_coalesce(arg0,arg1);
}

#line 183  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_main.i.aux"
int emg_wrapper_mvpp2_ethtool_set_link_ksettings(struct net_device *arg0, struct ethtool_link_ksettings *arg1)
{
  #line 184 
  return mvpp2_ethtool_set_link_ksettings(arg0,arg1);
}

#line 188  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_main.i.aux"
int emg_wrapper_mvpp2_ethtool_set_pause_param(struct net_device *arg0, struct ethtool_pauseparam *arg1)
{
  #line 189 
  return mvpp2_ethtool_set_pause_param(arg0,arg1);
}

#line 193  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_main.i.aux"
int emg_wrapper_mvpp2_ethtool_set_ringparam(struct net_device *arg0, struct ethtool_ringparam *arg1)
{
  #line 194 
  return mvpp2_ethtool_set_ringparam(arg0,arg1);
}

#line 198  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_main.i.aux"
int emg_wrapper_mvpp2_ethtool_set_rxfh(struct net_device *arg0, unsigned int *arg1, unsigned char *arg2, unsigned char arg3)
{
  #line 199 
  return mvpp2_ethtool_set_rxfh(arg0,arg1,arg2,(unsigned char)((int)arg3));
}

#line 203  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_main.i.aux"
int emg_wrapper_mvpp2_ethtool_set_rxfh_context(struct net_device *arg0, unsigned int *arg1, unsigned char *arg2, unsigned char arg3, unsigned int *arg4, _Bool arg5)
{
  #line 204 
  return mvpp2_ethtool_set_rxfh_context(arg0,arg1,arg2,
                                     (unsigned char)((int)arg3),arg4,
                                     (_Bool)((bool)((int)arg5) != 0));
}

#line 208  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_main.i.aux"
int emg_wrapper_mvpp2_ethtool_set_rxnfc(struct net_device *arg0, struct ethtool_rxnfc *arg1)
{
  #line 209 
  return mvpp2_ethtool_set_rxnfc(arg0,arg1);
}

#line 213  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_main.i.aux"
void emg_wrapper_mvpp2_get_stats64(struct net_device *arg0, struct rtnl_link_stats64 *arg1)
{
  #line 214 
  mvpp2_get_stats64(arg0,arg1);
  #line 215 
  return;
}

#line 218  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_main.i.aux"
int emg_wrapper_mvpp2_ioctl(struct net_device *arg0, struct ifreq *arg1, int arg2)
{
  #line 219 
  return mvpp2_ioctl(arg0,arg1,arg2);
}

#line 223  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_main.i.aux"
enum irqreturn emg_wrapper_mvpp2_isr(int arg0, void *arg1)
{
  #line 224 
  return mvpp2_isr(arg0,arg1);
}

#line 228  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_main.i.aux"
enum irqreturn emg_wrapper_mvpp2_link_status_isr(int arg0, void *arg1)
{
  #line 229 
  return mvpp2_link_status_isr(arg0,arg1);
}

#line 233  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_main.i.aux"
int emg_wrapper_mvpp2_open(struct net_device *arg0)
{
  #line 234 
  return mvpp2_open(arg0);
}

#line 238  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_main.i.aux"
int emg_wrapper_mvpp2_probe(struct platform_device *arg0)
{
  #line 239 
  return mvpp2_probe(arg0);
}

#line 243  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_main.i.aux"
int emg_wrapper_mvpp2_remove(struct platform_device *arg0)
{
  #line 244 
  return mvpp2_remove(arg0);
}

#line 248  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_main.i.aux"
int emg_wrapper_mvpp2_set_features(struct net_device *arg0, unsigned long long arg1)
{
  #line 249 
  return mvpp2_set_features(arg0,arg1);
}

#line 253  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_main.i.aux"
int emg_wrapper_mvpp2_set_mac_address(struct net_device *arg0, void *arg1)
{
  #line 254 
  return mvpp2_set_mac_address(arg0,arg1);
}

#line 258  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_main.i.aux"
void emg_wrapper_mvpp2_set_rx_mode(struct net_device *arg0)
{
  #line 259 
  mvpp2_set_rx_mode(arg0);
  #line 260 
  return;
}

#line 263  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_main.i.aux"
int emg_wrapper_mvpp2_stop(struct net_device *arg0)
{
  #line 264 
  return mvpp2_stop(arg0);
}

#line 268  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_main.i.aux"
enum netdev_tx emg_wrapper_mvpp2_tx(struct sk_buff *arg0, struct net_device *arg1)
{
  #line 269 
  return mvpp2_tx(arg0,arg1);
}

#line 273  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_main.i.aux"
int emg_wrapper_mvpp2_vlan_rx_add_vid(struct net_device *arg0, unsigned short arg1, unsigned short arg2)
{
  #line 274 
  return mvpp2_vlan_rx_add_vid(arg0,(unsigned short)((int)arg1),
                            (unsigned short)((int)arg2));
}

#line 278  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_main.i.aux"
int emg_wrapper_mvpp2_vlan_rx_kill_vid(struct net_device *arg0, unsigned short arg1, unsigned short arg2)
{
  #line 279 
  return mvpp2_vlan_rx_kill_vid(arg0,(unsigned short)((int)arg1),
                             (unsigned short)((int)arg2));
}

#line 283  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_main.i.aux"
void emg_mvpp2_driver_exit(void)
{
  #line 284 
  mvpp2_driver_exit();
  #line 285 
  return;
}

#line 287  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_main.i.aux"
int emg_mvpp2_driver_init(void)
{
  #line 288 
  return mvpp2_driver_init();
}

#line 306  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_main.i.aux"
static void cif_set_bit(long nr, unsigned long *addr)
{
  #line 309 
  ldv_set_bit(nr,addr);
  #line 310 
  return;
}

#line 313  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_main.i.aux"
static void cif_clear_bit(long nr, unsigned long *addr)
{
  #line 316 
  ldv_clear_bit(nr,addr);
  #line 317 
  return;
}

#line 320  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_main.i.aux"
static void INIT_LIST_HEAD(struct list_head *list)
{
  #line 323 
  ldv_init_list_head(list);
  #line 324 
  return;
}

#line 383  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_main.i.aux"
static void cif_bitmap_zero(unsigned long *dst, unsigned int nbits)
{
  #line 386 
  ldv_bitmap_zero(dst,nbits);
  #line 387 
  return;
}

#line 397  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_main.i.aux"
static long PTR_ERR(void *ptr)
{
  #line 400 
  return ldv_ptr_err(ptr);
}

#line 404  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_main.i.aux"
static bool IS_ERR(void *ptr)
{
  #line 407 
  return ldv_is_err(ptr);
}

#line 411  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_main.i.aux"
static bool IS_ERR_OR_NULL(void *ptr)
{
  #line 414 
  return ldv_is_err_or_null(ptr);
}

#line 490  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_main.i.aux"
static bool cif_queue_delayed_work(struct workqueue_struct *wq, struct delayed_work *dwork, unsigned long delay)
{
  #line 494 
  return emg_queue_delayed_work(wq,dwork,delay);
}

#line 577  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_main.i.aux"
static void *kmalloc(size_t size, gfp_t flags)
{
  #line 580 
  return ldv_kmalloc(size,flags);
}

#line 584  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_main.i.aux"
static void *kmalloc_array(size_t n, size_t size, gfp_t flags)
{
  #line 587 
  return ldv_kmalloc_array(n,size,flags);
}

#line 612  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_main.i.aux"
static void *kzalloc(size_t size, gfp_t flags)
{
  #line 615 
  return ldv_kzalloc(size,flags);
}

#line 1020  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_main.i.aux"
static void *cif_devm_kcalloc_0(struct device *dev, size_t n, size_t size, gfp_t flags)
{
  #line 1023 
  return ldv_devm_kcalloc(n,size,flags);
}

#line 1027  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_main.i.aux"
static void cif___ldv_spin_lock_NOT_ARG_SIGN(spinlock_t *lock)
{
  #line 1030 
  ldv_spin_model_lock((char *)"NOT_ARG_SIGN");
  #line 1032 
  __ldv_spin_lock(lock);
  #line 1033 
  return;
}

#line 1036  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_main.i.aux"
static void cif_spin_unlock_irqrestore_NOT_ARG_SIGN(spinlock_t *lock, unsigned long flags)
{
  #line 1039 
  ldv_spin_model_unlock((char *)"NOT_ARG_SIGN");
  #line 1041 
  spin_unlock_irqrestore(lock,flags);
  #line 1042 
  return;
}

#line 1045  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_main.i.aux"
static void cif_mutex_lock_gather_stats_lock_of_mvpp2_port(struct mutex *lock)
{
  #line 1048 
  ldv_mutex_model_lock(lock,(char *)"gather_stats_lock_of_mvpp2_port");
  #line 1049 
  return;
}

#line 1052  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_main.i.aux"
static void cif_mutex_unlock_gather_stats_lock_of_mvpp2_port(struct mutex *lock)
{
  #line 1055 
  ldv_mutex_model_unlock(lock,(char *)"gather_stats_lock_of_mvpp2_port");
  #line 1056 
  return;
}

#line 1059  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_main.i.aux"
static int cif_request_irq(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char *name, void *dev)
{
  #line 1063 
  return emg_request_irq(irq,handler,flags,name,dev);
}

#line 1067  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_main.i.aux"
static void *cif_free_irq(unsigned int ldv_func_arg1, void *ldv_func_arg2)
{
  #line 1071 
  return emg_free_irq(ldv_func_arg1,ldv_func_arg2);
}

#line 1075  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_main.i.aux"
static void *cif_devm_kzalloc(struct device *dev, size_t size, gfp_t flags)
{
  #line 1078 
  return ldv_devm_kzalloc(size,flags);
}

#line 1082  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_main.i.aux"
static struct net_device *cif_alloc_etherdev_mqs(int sizeof_priv, unsigned int txqs, unsigned int rxqs)
{
  #line 1086 
  return emg_alloc_etherdev_mqs(sizeof_priv,txqs,rxqs);
}

#line 1090  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_main.i.aux"
static int cif_register_netdev(struct net_device *dev)
{
  #line 1094 
  return emg_register_netdev(dev);
}

#line 1098  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_main.i.aux"
static void cif_free_netdev(struct net_device *dev)
{
  #line 1102 
  emg_free_netdev(dev);
  #line 1103 
  return;
}

#line 1106  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_main.i.aux"
static void cif_unregister_netdev(struct net_device *dev)
{
  #line 1110 
  emg_unregister_netdev(dev);
  #line 1111 
  return;
}

#line 1114  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_main.i.aux"
static int cif___platform_driver_register(struct platform_driver *ldv_func_arg1, struct module *ldv_func_arg2)
{
  #line 1118 
  return emg___platform_driver_register(ldv_func_arg1,ldv_func_arg2);
}

#line 1122  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_main.i.aux"
static void cif_platform_driver_unregister(struct platform_driver *ldv_func_arg1)
{
  #line 1126 
  emg_platform_driver_unregister(ldv_func_arg1);
  #line 1127 
  return;
}

/* compiler builtin: 
   unsigned short __builtin_bswap16(unsigned short);   */
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/find.h"
#line 110  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_cls.i.aux"
static unsigned long cif_find_next_bit(unsigned long *addr, unsigned long size, unsigned long offset);
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/find.h"
#line 152  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_cls.i.aux"
static unsigned long cif_find_first_bit(unsigned long *addr, unsigned long size);
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/arch_hweight.h"
__inline static unsigned int __arch_hweight32(unsigned int w)
{
  #line 17 
  unsigned int res;
  #line 18 
  ldv_inline_asm();
  #line 23 
  return res;
}

#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/arch_hweight.h"
__inline static unsigned int __arch_hweight16(unsigned int w)
{
  #line 28 
  return __arch_hweight32(w & 65535U);
}

#line 358  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
__inline static int cpumask_test_cpu(int cpu, struct cpumask *cpumask)
{
  #line 360 
  ;
  #line 360 
  return (int)test_bit((long)cpumask_check((unsigned int)cpu),
                 (unsigned long *)(& cpumask->bits));
}

#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/err.h"
#line 208  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_cls.i.aux"
static long PTR_ERR_0(void *ptr);
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/err.h"
#line 215  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_cls.i.aux"
static bool IS_ERR_0(void *ptr);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 21 
unsigned long ldv_find_first_bit(unsigned long *addr, unsigned long size);
#line 22 
#line 22 
unsigned long ldv_find_next_bit(unsigned long *addr, unsigned long size, unsigned long offset);
#line 668  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 362  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_cls.i.aux"
static void *kzalloc_0(size_t size, gfp_t flags);
#line 332  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
__inline static bool dissector_uses_key(struct flow_dissector *flow_dissector, enum flow_dissector_key_id key_id)
{
  #line 335 
  return (_Bool)((flow_dissector->used_keys & (unsigned int)(1 << (unsigned int)key_id)) != 0U);
}

#line 96  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
__inline static u32 ethtool_rxfh_indir_default(u32 index, u32 n_rx_rings)
{
  #line 98 
  return index % n_rx_rings;
}

#line 420 
#line 420 
struct ethtool_rx_flow_rule *ethtool_rx_flow_rule_create(struct ethtool_rx_flow_spec_input *);
#line 421 
#line 421 
void ethtool_rx_flow_rule_destroy(struct ethtool_rx_flow_rule *);
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
#line 81 
void flow_rule_match_vlan(struct flow_rule *, struct flow_match_vlan *);
#line 91 
#line 91 
void flow_rule_match_ports(struct flow_rule *, struct flow_match_ports *);
#line 250  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
__inline static bool flow_rule_match_key(struct flow_rule *rule, enum flow_dissector_key_id key)
{
  #line 253 
  return dissector_uses_key(rule->match.dissector,key);
}

#line 284  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_cls.h"
#line 417  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_cls.c"
int mvpp2_cls_flow_eng_get(struct mvpp2_cls_flow_entry *fe);
#line 286  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_cls.h"
#line 772  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_cls.c"
u16 mvpp2_flow_get_hek_fields(struct mvpp2_cls_flow_entry *fe);
#line 288  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_cls.h"
#line 715  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_cls.c"
struct mvpp2_cls_flow *mvpp2_cls_flow_get(int flow);
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_cls.h"
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_cls.c"
u32 mvpp2_cls_flow_hits(struct mvpp2 *priv, int index);
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_cls.h"
#line 332  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_cls.c"
void mvpp2_cls_flow_read(struct mvpp2 *priv, int index, struct mvpp2_cls_flow_entry *fe);
#line 295  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_cls.h"
#line 352  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_cls.c"
u32 mvpp2_cls_lookup_hits(struct mvpp2 *priv, int index);
#line 297  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_cls.h"
#line 359  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_cls.c"
void mvpp2_cls_lookup_read(struct mvpp2 *priv, int lkpid, int way, struct mvpp2_cls_lookup_entry *le);
#line 300  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_cls.h"
#line 977  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_cls.c"
u32 mvpp2_cls_c2_hit_count(struct mvpp2 *priv, int c2_index);
#line 302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_cls.h"
#line 523  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_cls.c"
void mvpp2_cls_c2_read(struct mvpp2 *priv, int index, struct mvpp2_cls_c2_entry *c2);
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_cls.c"
static struct mvpp2_cls_flow cls_flows[52U] = {{.flow_type = 11, .flow_id = (unsigned short)8U, .supported_hash_opts = (unsigned short)816U, .prs_ri = {.ri = 4198400U, .ri_mask = 29519884U}}, {.flow_type = 11, .flow_id = (unsigned short)8U, .supported_hash_opts = (unsigned short)816U, .prs_ri = {.ri = 4202496U, .ri_mask = 29519884U}}, {.flow_type = 11, .flow_id = (unsigned short)8U, .supported_hash_opts = (unsigned short)816U, .prs_ri = {.ri = 4206592U, .ri_mask = 29519884U}}, {.flow_type = 11, .flow_id = (unsigned short)10U, .supported_hash_opts = (unsigned short)822U, .prs_ri = {.ri = 4198400U, .ri_mask = 29519872U}}, {.flow_type = 11, .flow_id = (unsigned short)10U, .supported_hash_opts = (unsigned short)822U, .prs_ri = {.ri = 4202496U, .ri_mask = 29519872U}}, {.flow_type = 11, .flow_id = (unsigned short)10U, .supported_hash_opts = (unsigned short)822U, .prs_ri = {.ri = 4206592U, .ri_mask = 29519872U}}, {.flow_type = 11, .flow_id = (unsigned short)16U, .supported_hash_opts = (unsigned short)48U, .prs_ri = {.ri = 4198400U, .ri_mask = 29519884U}}, {.flow_type = 11, .flow_id = (unsigned short)16U, .supported_hash_opts = (unsigned short)48U, .prs_ri = {.ri = 4202496U, .ri_mask = 29519884U}}, {.flow_type = 11, .flow_id = (unsigned short)16U, .supported_hash_opts = (unsigned short)48U, .prs_ri = {.ri = 4206592U, .ri_mask = 29519884U}}, {.flow_type = 11, .flow_id = (unsigned short)18U, .supported_hash_opts = (unsigned short)54U, .prs_ri = {.ri = 4198400U, .ri_mask = 29519872U}}, {.flow_type = 11, .flow_id = (unsigned short)18U, .supported_hash_opts = (unsigned short)54U, .prs_ri = {.ri = 4202496U, .ri_mask = 29519872U}}, {.flow_type = 11, .flow_id = (unsigned short)18U, .supported_hash_opts = (unsigned short)54U, .prs_ri = {.ri = 4206592U, .ri_mask = 29519872U}}, {.flow_type = 19, .flow_id = (unsigned short)9U, .supported_hash_opts = (unsigned short)816U, .prs_ri = {.ri = 8392704U, .ri_mask = 29519884U}}, {.flow_type = 19, .flow_id = (unsigned short)9U, .supported_hash_opts = (unsigned short)816U, .prs_ri = {.ri = 8396800U, .ri_mask = 29519884U}}, {.flow_type = 19, .flow_id = (unsigned short)9U, .supported_hash_opts = (unsigned short)816U, .prs_ri = {.ri = 8400896U, .ri_mask = 29519884U}}, {.flow_type = 19, .flow_id = (unsigned short)11U, .supported_hash_opts = (unsigned short)822U, .prs_ri = {.ri = 8392704U, .ri_mask = 29519872U}}, {.flow_type = 19, .flow_id = (unsigned short)11U, .supported_hash_opts = (unsigned short)822U, .prs_ri = {.ri = 8396800U, .ri_mask = 29519872U}}, {.flow_type = 19, .flow_id = (unsigned short)11U, .supported_hash_opts = (unsigned short)822U, .prs_ri = {.ri = 8400896U, .ri_mask = 29519872U}}, {.flow_type = 19, .flow_id = (unsigned short)17U, .supported_hash_opts = (unsigned short)48U, .prs_ri = {.ri = 8392704U, .ri_mask = 29519884U}}, {.flow_type = 19, .flow_id = (unsigned short)17U, .supported_hash_opts = (unsigned short)48U, .prs_ri = {.ri = 8396800U, .ri_mask = 29519884U}}, {.flow_type = 19, .flow_id = (unsigned short)17U, .supported_hash_opts = (unsigned short)48U, .prs_ri = {.ri = 8400896U, .ri_mask = 29519884U}}, {.flow_type = 19, .flow_id = (unsigned short)19U, .supported_hash_opts = (unsigned short)54U, .prs_ri = {.ri = 8392704U, .ri_mask = 29519872U}}, {.flow_type = 19, .flow_id = (unsigned short)19U, .supported_hash_opts = (unsigned short)54U, .prs_ri = {.ri = 8396800U, .ri_mask = 29519872U}}, {.flow_type = 19, .flow_id = (unsigned short)19U, .supported_hash_opts = (unsigned short)54U, .prs_ri = {.ri = 8400896U, .ri_mask = 29519872U}}, {.flow_type = 13, .flow_id = (unsigned short)12U, .supported_hash_opts = (unsigned short)960U, .prs_ri = {.ri = 4210688U, .ri_mask = 29519884U}}, {.flow_type = 13, .flow_id = (unsigned short)12U, .supported_hash_opts = (unsigned short)960U, .prs_ri = {.ri = 4214784U, .ri_mask = 29519884U}}, {.flow_type = 13, .flow_id = (unsigned short)14U, .supported_hash_opts = (unsigned short)966U, .prs_ri = {.ri = 4210688U, .ri_mask = 29519872U}}, {.flow_type = 13, .flow_id = (unsigned short)14U, .supported_hash_opts = (unsigned short)966U, .prs_ri = {.ri = 4214784U, .ri_mask = 29519872U}}, {.flow_type = 13, .flow_id = (unsigned short)20U, .supported_hash_opts = (unsigned short)192U, .prs_ri = {.ri = 4341760U, .ri_mask = 29519884U}}, {.flow_type = 13, .flow_id = (unsigned short)20U, .supported_hash_opts = (unsigned short)192U, .prs_ri = {.ri = 4345856U, .ri_mask = 29519884U}}, {.flow_type = 13, .flow_id = (unsigned short)22U, .supported_hash_opts = (unsigned short)198U, .prs_ri = {.ri = 4341760U, .ri_mask = 29519872U}}, {.flow_type = 13, .flow_id = (unsigned short)22U, .supported_hash_opts = (unsigned short)198U, .prs_ri = {.ri = 4345856U, .ri_mask = 29519872U}}, {.flow_type = 21, .flow_id = (unsigned short)13U, .supported_hash_opts = (unsigned short)960U, .prs_ri = {.ri = 8404992U, .ri_mask = 29519884U}}, {.flow_type = 21, .flow_id = (unsigned short)13U, .supported_hash_opts = (unsigned short)960U, .prs_ri = {.ri = 8409088U, .ri_mask = 29519884U}}, {.flow_type = 21, .flow_id = (unsigned short)15U, .supported_hash_opts = (unsigned short)966U, .prs_ri = {.ri = 8404992U, .ri_mask = 29519872U}}, {.flow_type = 21, .flow_id = (unsigned short)15U, .supported_hash_opts = (unsigned short)966U, .prs_ri = {.ri = 8409088U, .ri_mask = 29519872U}}, {.flow_type = 21, .flow_id = (unsigned short)21U, .supported_hash_opts = (unsigned short)192U, .prs_ri = {.ri = 8536064U, .ri_mask = 29519884U}}, {.flow_type = 21, .flow_id = (unsigned short)21U, .supported_hash_opts = (unsigned short)192U, .prs_ri = {.ri = 8540160U, .ri_mask = 29519884U}}, {.flow_type = 21, .flow_id = (unsigned short)23U, .supported_hash_opts = (unsigned short)198U, .prs_ri = {.ri = 8536064U, .ri_mask = 29519872U}}, {.flow_type = 21, .flow_id = (unsigned short)23U, .supported_hash_opts = (unsigned short)198U, .prs_ri = {.ri = 8540160U, .ri_mask = 29519872U}}, {.flow_type = 3, .flow_id = (unsigned short)24U, .supported_hash_opts = (unsigned short)48U, .prs_ri = {.ri = 4096U, .ri_mask = 28684U}}, {.flow_type = 3, .flow_id = (unsigned short)24U, .supported_hash_opts = (unsigned short)48U, .prs_ri = {.ri = 8192U, .ri_mask = 28684U}}, {.flow_type = 3, .flow_id = (unsigned short)24U, .supported_hash_opts = (unsigned short)48U, .prs_ri = {.ri = 12288U, .ri_mask = 28684U}}, {.flow_type = 3, .flow_id = (unsigned short)25U, .supported_hash_opts = (unsigned short)54U, .prs_ri = {.ri = 4096U, .ri_mask = 28672U}}, {.flow_type = 3, .flow_id = (unsigned short)25U, .supported_hash_opts = (unsigned short)54U, .prs_ri = {.ri = 8192U, .ri_mask = 28672U}}, {.flow_type = 3, .flow_id = (unsigned short)25U, .supported_hash_opts = (unsigned short)54U, .prs_ri = {.ri = 12288U, .ri_mask = 28672U}}, {.flow_type = 5, .flow_id = (unsigned short)26U, .supported_hash_opts = (unsigned short)192U, .prs_ri = {.ri = 16384U, .ri_mask = 28684U}}, {.flow_type = 5, .flow_id = (unsigned short)26U, .supported_hash_opts = (unsigned short)192U, .prs_ri = {.ri = 16384U, .ri_mask = 28684U}}, {.flow_type = 5, .flow_id = (unsigned short)27U, .supported_hash_opts = (unsigned short)198U, .prs_ri = {.ri = 16384U, .ri_mask = 28672U}}, {.flow_type = 5, .flow_id = (unsigned short)27U, .supported_hash_opts = (unsigned short)198U, .prs_ri = {.ri = 16384U, .ri_mask = 28672U}}, {.flow_type = 1, .flow_id = (unsigned short)28U, .prs_ri = {.ri_mask = 12U}}, {.flow_type = 1, .flow_id = (unsigned short)29U, .supported_hash_opts = (unsigned short)4U}};
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_cls.c"
u32 mvpp2_cls_flow_hits(struct mvpp2 *priv, int index)
{
  #line 327 
  mvpp2_write(priv,28736U,(unsigned int)index);
  #line 329 
  return mvpp2_read(priv,30468U);
}

#line 332  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_cls.c"
void mvpp2_cls_flow_read(struct mvpp2 *priv, int index, struct mvpp2_cls_flow_entry *fe)
{
  #line 335 
  fe->index = (unsigned int)index;
  #line 336 
  mvpp2_write(priv,6176U,(unsigned int)index);
  #line 337 
  fe->data[0] = mvpp2_read(priv,6180U);
  #line 338 
  fe->data[1] = mvpp2_read(priv,6184U);
  #line 339 
  fe->data[2] = mvpp2_read(priv,6188U);
  #line 340 
  return;
}

#line 343  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_cls.c"
static void mvpp2_cls_flow_write(struct mvpp2 *priv, struct mvpp2_cls_flow_entry *fe)
{
  #line 346 
  mvpp2_write(priv,6176U,fe->index);
  #line 347 
  mvpp2_write(priv,6180U,fe->data[0]);
  #line 348 
  mvpp2_write(priv,6184U,fe->data[1]);
  #line 349 
  mvpp2_write(priv,6188U,fe->data[2]);
  #line 350 
  return;
}

#line 352  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_cls.c"
u32 mvpp2_cls_lookup_hits(struct mvpp2 *priv, int index)
{
  #line 354 
  mvpp2_write(priv,28736U,(unsigned int)index);
  #line 356 
  return mvpp2_read(priv,30464U);
}

#line 359  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_cls.c"
void mvpp2_cls_lookup_read(struct mvpp2 *priv, int lkpid, int way, struct mvpp2_cls_lookup_entry *le)
{
  #line 362 
  u32 val;
  #line 364 
  val = (unsigned int)((way << 6) | lkpid);
  #line 365 
  mvpp2_write(priv,6164U,val);
  #line 366 
  le->way = (unsigned int)way;
  #line 367 
  le->lkpid = (unsigned int)lkpid;
  #line 368 
  le->data = mvpp2_read(priv,6168U);
  #line 369 
  return;
}

#line 372  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_cls.c"
static void mvpp2_cls_lookup_write(struct mvpp2 *priv, struct mvpp2_cls_lookup_entry *le)
{
  #line 375 
  u32 val;
  #line 377 
  val = (le->way << 6) | le->lkpid;
  #line 378 
  mvpp2_write(priv,6164U,val);
  #line 379 
  mvpp2_write(priv,6168U,le->data);
  #line 380 
  return;
}

#line 383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_cls.c"
static int mvpp2_cls_flow_hek_num_get(struct mvpp2_cls_flow_entry *fe)
{
  #line 385 
  return (int)fe->data[1] & 7;
}

#line 388  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_cls.c"
static void mvpp2_cls_flow_hek_num_set(struct mvpp2_cls_flow_entry *fe, int num_of_fields)
{
  #line 391 
  fe->data[1] &= 4294967288U;
  #line 392 
  fe->data[1] |= (unsigned int)num_of_fields;
  #line 393 
  return;
}

#line 395  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_cls.c"
static int mvpp2_cls_flow_hek_get(struct mvpp2_cls_flow_entry *fe, int field_index)
{
  #line 398 
  return (int)(fe->data[2] >> field_index * 6) & 63;
}

#line 402  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_cls.c"
static void mvpp2_cls_flow_hek_set(struct mvpp2_cls_flow_entry *fe, int field_index, int field_id)
{
  #line 405 
  fe->data[2] &= (unsigned int)(~ (63 << field_index * 6));
  #line 407 
  fe->data[2] |= (unsigned int)(field_id << field_index * 6);
  #line 408 
  return;
}

#line 410  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_cls.c"
static void mvpp2_cls_flow_eng_set(struct mvpp2_cls_flow_entry *fe, int engine)
{
  #line 413 
  fe->data[0] &= 4294967281U;
  #line 414 
  fe->data[0] |= (unsigned int)(engine << 1);
  #line 415 
  return;
}

#line 417  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_cls.c"
int mvpp2_cls_flow_eng_get(struct mvpp2_cls_flow_entry *fe)
{
  #line 419 
  return (int)(fe->data[0] >> 1) & 7;
}

#line 423  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_cls.c"
static void mvpp2_cls_flow_port_id_sel(struct mvpp2_cls_flow_entry *fe, bool from_packet)
{
  #line 426 
  if ((int)from_packet != 0) 
                             #line 427 
                             fe->data[0] |= 8388608U; else 
                                                           #line 429 
                                                           fe->data[0] &= 4286578687U;
  #line 430 
  return;
}

#line 432  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_cls.c"
static void mvpp2_cls_flow_last_set(struct mvpp2_cls_flow_entry *fe, bool is_last)
{
  #line 435 
  fe->data[0] &= 4294967294U;
  #line 436 
  fe->data[0] |= (unsigned int)((int)is_last != 0);
  #line 437 
  return;
}

#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_cls.c"
static void mvpp2_cls_flow_pri_set(struct mvpp2_cls_flow_entry *fe, int prio)
{
  #line 441 
  fe->data[1] &= 4294935039U;
  #line 442 
  fe->data[1] |= (unsigned int)(prio << 9);
  #line 443 
  return;
}

#line 445  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_cls.c"
static void mvpp2_cls_flow_port_add(struct mvpp2_cls_flow_entry *fe, u32 port)
{
  #line 448 
  fe->data[0] |= port << 4;
  #line 449 
  return;
}

#line 451  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_cls.c"
static void mvpp2_cls_flow_port_remove(struct mvpp2_cls_flow_entry *fe, u32 port)
{
  #line 454 
  fe->data[0] &= ~ (port << 4);
  #line 455 
  return;
}

#line 457  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_cls.c"
static void mvpp2_cls_flow_lu_type_set(struct mvpp2_cls_flow_entry *fe, u8 lu_type)
{
  #line 460 
  fe->data[1] &= 4294966791U;
  #line 461 
  fe->data[1] |= (unsigned int)((int)lu_type << 3) & 504U;
  #line 462 
  return;
}

#line 465  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_cls.c"
static void mvpp2_cls_flow_prs_init(struct mvpp2 *priv, struct mvpp2_cls_flow *flow)
{
  #line 468 
  mvpp2_prs_add_flow(priv,(int)flow->flow_id,flow->prs_ri.ri,flow->prs_ri.ri_mask);
  #line 470 
  return;
}

#line 473  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_cls.c"
static void mvpp2_cls_flow_lkp_init(struct mvpp2 *priv, struct mvpp2_cls_flow *flow)
{
  #line 476 
  struct mvpp2_cls_lookup_entry le;
  #line 478 
  le.way = 0U;
  #line 479 
  le.lkpid = (unsigned int)flow->flow_id;
  #line 482 
  le.data = 0U;
  #line 487 
  le.data |= (unsigned int)(((int)flow->flow_id + -8) * 21 << 16);
  #line 490 
  le.data |= 33554432U;
  #line 492 
  mvpp2_cls_lookup_write(priv,& le);
  #line 493 
  return;
}

#line 495  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_cls.c"
static void mvpp2_cls_c2_write(struct mvpp2 *priv, struct mvpp2_cls_c2_entry *c2)
{
  #line 498 
  u32 val;
  #line 499 
  mvpp2_write(priv,6912U,c2->index);
  #line 501 
  val = mvpp2_read(priv,6948U);
  #line 502 
  if ((unsigned int)c2->valid != 0U) 
                                     #line 503 
                                     val &= 2147483647U; else 
                                                              #line 505 
                                                              val |= 2147483648U;
  #line 506 
  mvpp2_write(priv,6948U,val);
  #line 508 
  mvpp2_write(priv,7008U,c2->act);
  #line 510 
  mvpp2_write(priv,7012U,c2->attr[0]);
  #line 511 
  mvpp2_write(priv,7016U,c2->attr[1]);
  #line 512 
  mvpp2_write(priv,7020U,c2->attr[2]);
  #line 513 
  mvpp2_write(priv,7024U,c2->attr[3]);
  #line 515 
  mvpp2_write(priv,6928U,c2->tcam[0]);
  #line 516 
  mvpp2_write(priv,6932U,c2->tcam[1]);
  #line 517 
  mvpp2_write(priv,6936U,c2->tcam[2]);
  #line 518 
  mvpp2_write(priv,6940U,c2->tcam[3]);
  #line 520 
  mvpp2_write(priv,6944U,c2->tcam[4]);
  #line 521 
  return;
}

#line 523  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_cls.c"
void mvpp2_cls_c2_read(struct mvpp2 *priv, int index, struct mvpp2_cls_c2_entry *c2)
{
  #line 526 
  u32 val;
  #line 527 
  mvpp2_write(priv,6912U,(unsigned int)index);
  #line 529 
  c2->index = (unsigned int)index;
  #line 531 
  c2->tcam[0] = mvpp2_read(priv,6928U);
  #line 532 
  c2->tcam[1] = mvpp2_read(priv,6932U);
  #line 533 
  c2->tcam[2] = mvpp2_read(priv,6936U);
  #line 534 
  c2->tcam[3] = mvpp2_read(priv,6940U);
  #line 535 
  c2->tcam[4] = mvpp2_read(priv,6944U);
  #line 537 
  c2->act = mvpp2_read(priv,7008U);
  #line 539 
  c2->attr[0] = mvpp2_read(priv,7012U);
  #line 540 
  c2->attr[1] = mvpp2_read(priv,7016U);
  #line 541 
  c2->attr[2] = mvpp2_read(priv,7020U);
  #line 542 
  c2->attr[3] = mvpp2_read(priv,7024U);
  #line 544 
  val = mvpp2_read(priv,6948U);
  #line 545 
  c2->valid = (unsigned char)(((unsigned long)val & 2147483648UL) == 0UL);
  #line 546 
  return;
}

#line 548  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_cls.c"
static int mvpp2_cls_ethtool_flow_to_type(int flow_type)
{
  #line 550 
  switch ((unsigned int)flow_type & 536870911U) {
    #line 551 
    case (unsigned int)18: 
                           #line 551 
    ;
    #line 552 
    return 1;
    #line 553 
    case (unsigned int)1: 
                          #line 553 
    ;
    #line 554 
    return 11;
    #line 555 
    case (unsigned int)5: 
                          #line 555 
    ;
    #line 556 
    return 13;
    #line 557 
    case (unsigned int)2: 
                          #line 557 
    ;
    #line 558 
    return 19;
    #line 559 
    case (unsigned int)6: 
                          #line 559 
    ;
    #line 560 
    return 21;
    #line 561 
    case (unsigned int)16: 
                           #line 561 
    ;
    #line 562 
    return 3;
    #line 563 
    case (unsigned int)17: 
                           #line 563 
    ;
    #line 564 
    return 5;
    #line 565 
    default: 
             #line 565 
    ;
    #line 566 
    return -95;
  }
}

#line 570  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_cls.c"
static int mvpp2_cls_c2_port_flow_index(struct mvpp2_port *port, int loc)
{
  #line 572 
  return (int)port->id * 5 + loc;
}

#line 576  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_cls.c"
static void mvpp2_cls_flow_init(struct mvpp2 *priv, struct mvpp2_cls_flow *flow)
{
  #line 579 
  struct mvpp2_cls_flow_entry fe;
  #line 580 
  int i;
  #line 580 
  int pri = 0;
  #line 583 
  i = ((int)flow->flow_id + -8) * 21;
  #line 583 
  while (((int)flow->flow_id + -7) * 21 > i) {
    {
      #line 587 
      int tmp;
      #line 585 
      memset((void *)(& fe),0,16UL);
      #line 586 
      fe.index = (unsigned int)i;
      #line 587 
      tmp = pri;
      #line 587 
      pri ++;
      #line 587 
      ;
      #line 587 
      mvpp2_cls_flow_pri_set(& fe,tmp);
      #line 589 
      if (((int)flow->flow_id + -7) * 21 + -1 == i) 
                                                    #line 590 
                                                    mvpp2_cls_flow_last_set(& fe,(_Bool)1);
      #line 592 
      mvpp2_cls_flow_write(priv,& fe);
    }
    #line 584 
    i ++;
  }
  #line 596 
  mvpp2_cls_flow_read(priv,((int)flow->flow_id + -8) * 21 + 16,& fe);
  #line 599 
  mvpp2_cls_flow_eng_set(& fe,1);
  #line 600 
  mvpp2_cls_flow_port_id_sel(& fe,(_Bool)1);
  #line 601 
  mvpp2_cls_flow_lu_type_set(& fe,(unsigned char)63);
  #line 604 
  i = 0;
  #line 604 
  while (i <= 3) {
    #line 605 
    mvpp2_cls_flow_port_add(& fe,(unsigned int)(1UL << i));
    #line 604 
    i ++;
  }
  #line 607 
  mvpp2_cls_flow_write(priv,& fe);
  #line 610 
  i = 0;
  #line 610 
  while (i <= 3) {
    #line 611 
    mvpp2_cls_flow_read(priv,(((int)flow->flow_id + -8) * 21 + 17) + i,& fe);
    #line 618 
    mvpp2_cls_flow_eng_set(& fe,6);
    #line 619 
    mvpp2_cls_flow_port_id_sel(& fe,(_Bool)1);
    #line 620 
    mvpp2_cls_flow_port_add(& fe,(unsigned int)(1UL << i));
    #line 622 
    mvpp2_cls_flow_write(priv,& fe);
    #line 610 
    i ++;
  }
  #line 624 
  return;
}

#line 627  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_cls.c"
static int mvpp2_flow_add_hek_field(struct mvpp2_cls_flow_entry *fe, u32 field_id)
{
  #line 630 
  int nb_fields = mvpp2_cls_flow_hek_num_get(fe);
  #line 632 
  if (nb_fields == 4) 
                      #line 633 
                      return -22;
  #line 635 
  mvpp2_cls_flow_hek_set(fe,nb_fields,(int)field_id);
  #line 637 
  mvpp2_cls_flow_hek_num_set(fe,nb_fields + 1);
  #line 639 
  return 0;
}

#line 642  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_cls.c"
static int mvpp2_flow_set_hek_fields(struct mvpp2_cls_flow_entry *fe, unsigned long hash_opts)
{
  #line 645 
  u32 field_id;
  #line 646 
  int i;
  #line 649 
  mvpp2_cls_flow_hek_num_set(fe,0);
  #line 650 
  fe->data[2] = 0U;
  #line 652 
  i = (int)cif_find_first_bit(& hash_opts,10UL);
  #line 652 
  while (i <= 9) {
    {
      #line 653 
      switch (1UL << i) {
        #line 654 
        case (unsigned long)1: 
                               #line 654 
        ;
        #line 655 
        field_id = 3U;
        #line 656 
        break;
        #line 657 
        case (unsigned long)4: 
                               #line 657 
        ;
        #line 658 
        field_id = 6U;
        #line 659 
        break;
        #line 660 
        case (unsigned long)2: 
                               #line 660 
        ;
        #line 661 
        field_id = 5U;
        #line 662 
        break;
        #line 663 
        case (unsigned long)16: 
                                #line 663 
        ;
        #line 664 
        field_id = 16U;
        #line 665 
        break;
        #line 666 
        case (unsigned long)32: 
                                #line 666 
        ;
        #line 667 
        field_id = 17U;
        #line 668 
        break;
        #line 669 
        case (unsigned long)64: 
                                #line 669 
        ;
        #line 670 
        field_id = 23U;
        #line 671 
        break;
        #line 672 
        case (unsigned long)128: 
                                 #line 672 
        ;
        #line 673 
        field_id = 26U;
        #line 674 
        break;
        #line 675 
        case (unsigned long)256: 
                                 #line 675 
        ;
        #line 676 
        field_id = 29U;
        #line 677 
        break;
        #line 678 
        case (unsigned long)512: 
                                 #line 678 
        ;
        #line 679 
        field_id = 30U;
        #line 680 
        break;
        #line 681 
        default: 
                 #line 681 
        ;
        #line 682 
        return -22;
      }
      #line 684 
      if (mvpp2_flow_add_hek_field(fe,field_id) != 0) 
                                                      #line 685 
                                                      return -22;
    }
    #line 652 
    i = (int)cif_find_next_bit(& hash_opts,10UL,(unsigned long)(i + 1));
  }
  #line 688 
  return 0;
}

#line 692  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_cls.c"
static int mvpp2_cls_hek_field_size(u32 field)
{
  #line 694 
  switch (field) {
    #line 695 
    case (u32)1: 
                 #line 695 
    ;
    #line 696 
    return 48;
    #line 697 
    case (u32)4: 
                 #line 697 
    ;
    #line 698 
    return 12;
    #line 699 
    case (u32)2: 
                 #line 699 
    ;
    #line 700 
    return 3;
    #line 701 
    case (u32)16: 
                  #line 701 
    ;
    #line 702 
    case (u32)32: 
                  #line 702 
    ;
    #line 703 
    return 32;
    #line 704 
    case (u32)64: 
                  #line 704 
    ;
    #line 705 
    case (u32)128: 
                   #line 705 
    ;
    #line 706 
    return 128;
    #line 707 
    case (u32)256: 
                   #line 707 
    ;
    #line 708 
    case (u32)512: 
                   #line 708 
    ;
    #line 709 
    return 16;
    #line 710 
    default: 
             #line 710 
    ;
    #line 711 
    return -1;
  }
}

#line 715  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_cls.c"
struct mvpp2_cls_flow *mvpp2_cls_flow_get(int flow)
{
  #line 717 
  if (flow > 51) 
                 #line 718 
                 return (struct mvpp2_cls_flow *)0;
  #line 720 
  return & cls_flows[flow];
}

#line 734  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_cls.c"
static int mvpp2_port_rss_hash_opts_set(struct mvpp2_port *port, int flow_type, u16 requested_opts)
{
  #line 737 
  struct mvpp2_cls_flow *flow;
  #line 738 
  struct mvpp2_cls_flow_entry fe;
  #line 739 
  int i;
  #line 739 
  int engine;
  #line 739 
  int flow_index;
  #line 740 
  u16 hash_opts;
  #line 742 
  i = 0;
  #line 742 
  while (i <= 51) {
    #line 742 
    if (! (i > 0 && (int)cls_flows[i].flow_id == (int)cls_flows[i + -1].flow_id)) 
      #line 742 
      if (cls_flows[i].flow_type != flow_type) 
                                               #line 742 
                                               goto __Cont;
      else {
        #line 743 
        flow = mvpp2_cls_flow_get(i);
        #line 744 
        if (flow == (struct mvpp2_cls_flow *)0) 
                                                #line 745 
                                                return -22;
        #line 747 
        flow_index = (((int)flow->flow_id + -8) * 21 + 17) + (int)port->id;
        #line 749 
        mvpp2_cls_flow_read(port->priv,flow_index,& fe);
        #line 751 
        hash_opts = (unsigned short)((int)flow->supported_hash_opts & (int)requested_opts);
        #line 756 
        if (((unsigned long)hash_opts & 768UL) != 0UL) 
                                                       #line 757 
                                                       engine = 7; else 
                                                                    #line 759 
                                                                    engine = 6;
        #line 761 
        if (mvpp2_flow_set_hek_fields(& fe,(unsigned long)hash_opts) != 0) 
          #line 762 
          return -22;
        #line 764 
        mvpp2_cls_flow_eng_set(& fe,engine);
        #line 766 
        mvpp2_cls_flow_write(port->priv,& fe);
      }
    #line 742 
    __Cont: 
            #line 742 
    i ++;
  }
  #line 769 
  return 0;
}

#line 772  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_cls.c"
u16 mvpp2_flow_get_hek_fields(struct mvpp2_cls_flow_entry *fe)
{
  #line 775 
  int n_fields;
  #line 775 
  int i;
  #line 775 
  int field;
  #line 774 
  u16 hash_opts = (unsigned short)0U;
  #line 777 
  n_fields = mvpp2_cls_flow_hek_num_get(fe);
  #line 779 
  i = 0;
  #line 779 
  while (i < n_fields) {
    #line 780 
    field = mvpp2_cls_flow_hek_get(fe,i);
    #line 782 
    switch (field) {
      #line 783 
      case 3: 
              #line 783 
      ;
      #line 784 
      hash_opts = (unsigned short)((unsigned int)hash_opts | 1U);
      #line 785 
      break;
      #line 786 
      case 6: 
              #line 786 
      ;
      #line 787 
      hash_opts = (unsigned short)((unsigned int)hash_opts | 4U);
      #line 788 
      break;
      #line 789 
      case 5: 
              #line 789 
      ;
      #line 790 
      hash_opts = (unsigned short)((unsigned int)hash_opts | 2U);
      #line 791 
      break;
      #line 792 
      case 15: 
               #line 792 
      ;
      #line 793 
      hash_opts = (unsigned short)((unsigned int)hash_opts | 8U);
      #line 794 
      break;
      #line 795 
      case 16: 
               #line 795 
      ;
      #line 796 
      hash_opts = (unsigned short)((unsigned int)hash_opts | 16U);
      #line 797 
      break;
      #line 798 
      case 17: 
               #line 798 
      ;
      #line 799 
      hash_opts = (unsigned short)((unsigned int)hash_opts | 32U);
      #line 800 
      break;
      #line 801 
      case 23: 
               #line 801 
      ;
      #line 802 
      hash_opts = (unsigned short)((unsigned int)hash_opts | 64U);
      #line 803 
      break;
      #line 804 
      case 26: 
               #line 804 
      ;
      #line 805 
      hash_opts = (unsigned short)((unsigned int)hash_opts | 128U);
      #line 806 
      break;
      #line 807 
      case 29: 
               #line 807 
      ;
      #line 808 
      hash_opts = (unsigned short)((unsigned int)hash_opts | 256U);
      #line 809 
      break;
      #line 810 
      case 30: 
               #line 810 
      ;
      #line 811 
      hash_opts = (unsigned short)((unsigned int)hash_opts | 512U);
      #line 812 
      break;
      #line 813 
      default: 
               #line 813 
      ;
      #line 814 
      break;
    }
    #line 779 
    i ++;
  }
  #line 817 
  return hash_opts;
}

#line 823  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_cls.c"
static u16 mvpp2_port_rss_hash_opts_get(struct mvpp2_port *port, int flow_type)
{
  #line 825 
  struct mvpp2_cls_flow *flow;
  #line 826 
  struct mvpp2_cls_flow_entry fe;
  #line 827 
  int i;
  #line 827 
  int flow_index;
  #line 828 
  u16 hash_opts = (unsigned short)0U;
  #line 830 
  i = 0;
  #line 830 
  while (i <= 51) {
    #line 830 
    if (! (i > 0 && (int)cls_flows[i].flow_id == (int)cls_flows[i + -1].flow_id)) 
      #line 830 
      if (cls_flows[i].flow_type != flow_type) 
                                               #line 830 
                                               goto __Cont;
      else {
        #line 831 
        flow = mvpp2_cls_flow_get(i);
        #line 832 
        if (flow == (struct mvpp2_cls_flow *)0) 
                                                #line 833 
                                                return (unsigned short)0U;
        #line 835 
        flow_index = (((int)flow->flow_id + -8) * 21 + 17) + (int)port->id;
        #line 837 
        mvpp2_cls_flow_read(port->priv,flow_index,& fe);
        #line 839 
        hash_opts = (unsigned short)((int)mvpp2_flow_get_hek_fields(& fe) | (int)hash_opts);
      }
    #line 830 
    __Cont: 
            #line 830 
    i ++;
  }
  #line 842 
  return hash_opts;
}

#line 845  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_cls.c"
static void mvpp2_cls_port_init_flows(struct mvpp2 *priv)
{
  #line 847 
  struct mvpp2_cls_flow *flow;
  #line 848 
  int i;
  #line 850 
  i = 0;
  #line 850 
  while (i <= 51) {
    #line 851 
    flow = mvpp2_cls_flow_get(i);
    #line 852 
    if (flow == (struct mvpp2_cls_flow *)0) 
                                            #line 853 
                                            break;
    #line 855 
    mvpp2_cls_flow_prs_init(priv,flow);
    #line 856 
    mvpp2_cls_flow_lkp_init(priv,flow);
    #line 857 
    mvpp2_cls_flow_init(priv,flow);
    #line 850 
    i ++;
  }
  #line 859 
  return;
}

#line 861  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_cls.c"
static void mvpp2_port_c2_cls_init(struct mvpp2_port *port)
{
  #line 863 
  struct mvpp2_cls_c2_entry c2;
  #line 864 
  u8 qh;
  #line 864 
  u8 ql;
  #line 864 
  u8 pmap;
  #line 866 
  memset((void *)(& c2),0,52UL);
  #line 868 
  c2.index = (unsigned int)(((int)port->id + 1) * 5 + -1);
  #line 870 
  pmap = (unsigned char)(1UL << (int)port->id);
  #line 871 
  c2.tcam[4] = (unsigned int)((int)pmap << 8);
  #line 872 
  c2.tcam[4] |= (unsigned int)((int)pmap << 24);
  #line 875 
  c2.tcam[4] |= 4128768U;
  #line 876 
  c2.tcam[4] |= 63U;
  #line 879 
  c2.act = 1572864U;
  #line 882 
  c2.act |= 24576U;
  #line 887 
  c2.act |= 5120U;
  #line 890 
  qh = (unsigned char)((int)port->first_rxq >> 3);
  #line 891 
  ql = (unsigned char)((unsigned int)port->first_rxq & 7U);
  #line 893 
  c2.attr[0] = (unsigned int)((((int)qh << 24) & 520093696) | (((int)ql << 21) & 14680064));
  #line 896 
  c2.valid = (unsigned char)1U;
  #line 898 
  mvpp2_cls_c2_write(port->priv,& c2);
  #line 899 
  return;
}

#line 902  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_cls.c"
void mvpp2_cls_init(struct mvpp2 *priv)
{
  #line 904 
  struct mvpp2_cls_lookup_entry le;
  #line 905 
  struct mvpp2_cls_flow_entry fe;
  #line 906 
  struct mvpp2_cls_c2_entry c2;
  #line 907 
  int index;
  #line 910 
  mvpp2_write(priv,6144U,1U);
  #line 913 
  memset((void *)(& fe.data),0,12UL);
  #line 914 
  index = 0;
  #line 914 
  while (index <= 511) {
    #line 915 
    fe.index = (unsigned int)index;
    #line 916 
    mvpp2_cls_flow_write(priv,& fe);
    #line 914 
    index ++;
  }
  #line 920 
  le.data = 0U;
  #line 921 
  index = 0;
  #line 921 
  while (index <= 63) {
    #line 922 
    le.lkpid = (unsigned int)index;
    #line 923 
    le.way = 0U;
    #line 924 
    mvpp2_cls_lookup_write(priv,& le);
    #line 926 
    le.way = 1U;
    #line 927 
    mvpp2_cls_lookup_write(priv,& le);
    #line 921 
    index ++;
  }
  #line 931 
  memset((void *)(& c2),0,52UL);
  #line 932 
  c2.valid = (unsigned char)0U;
  #line 933 
  index = 0;
  #line 933 
  while (index <= 255) {
    #line 934 
    c2.index = (unsigned int)index;
    #line 935 
    mvpp2_cls_c2_write(priv,& c2);
    #line 933 
    index ++;
  }
  #line 941 
  mvpp2_write(priv,7056U,1U);
  #line 944 
  mvpp2_cls_port_init_flows(priv);
  #line 945 
  return;
}

#line 947  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_cls.c"
void mvpp2_cls_port_config(struct mvpp2_port *port)
{
  #line 949 
  struct mvpp2_cls_lookup_entry le;
  #line 950 
  u32 val;
  #line 953 
  val = mvpp2_read(port->priv,6160U);
  #line 954 
  val = (unsigned int)(~ (1 << (int)port->id)) & val;
  #line 955 
  mvpp2_write(port->priv,6160U,val);
  #line 960 
  le.lkpid = (unsigned int)port->id;
  #line 961 
  le.way = 0U;
  #line 962 
  le.data = 0U;
  #line 965 
  le.data &= 4294967040U;
  #line 966 
  le.data |= (unsigned int)port->first_rxq;
  #line 969 
  le.data &= 4261412863U;
  #line 972 
  mvpp2_cls_lookup_write(port->priv,& le);
  #line 974 
  mvpp2_port_c2_cls_init(port);
  #line 975 
  return;
}

#line 977  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_cls.c"
u32 mvpp2_cls_c2_hit_count(struct mvpp2 *priv, int c2_index)
{
  #line 979 
  mvpp2_write(priv,6912U,(unsigned int)c2_index);
  #line 981 
  return mvpp2_read(priv,6992U);
}

#line 984  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_cls.c"
static void mvpp2_rss_port_c2_enable(struct mvpp2_port *port, u32 ctx)
{
  #line 986 
  struct mvpp2_cls_c2_entry c2;
  #line 987 
  u8 qh;
  #line 987 
  u8 ql;
  #line 989 
  mvpp2_cls_c2_read(port->priv,((int)port->id + 1) * 5 + -1,& c2);
  #line 994 
  qh = (unsigned char)((unsigned int)((unsigned char)(ctx >> 3)) & 31U);
  #line 995 
  ql = (unsigned char)((unsigned int)((unsigned char)ctx) & 7U);
  #line 997 
  c2.attr[0] = (unsigned int)((((int)qh << 24) & 520093696) | (((int)ql << 21) & 14680064));
  #line 1000 
  c2.attr[2] |= 1073741824U;
  #line 1002 
  mvpp2_cls_c2_write(port->priv,& c2);
  #line 1003 
  return;
}

#line 1005  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_cls.c"
static void mvpp2_rss_port_c2_disable(struct mvpp2_port *port)
{
  #line 1007 
  struct mvpp2_cls_c2_entry c2;
  #line 1008 
  u8 qh;
  #line 1008 
  u8 ql;
  #line 1010 
  mvpp2_cls_c2_read(port->priv,((int)port->id + 1) * 5 + -1,& c2);
  #line 1013 
  qh = (unsigned char)((int)port->first_rxq >> 3);
  #line 1014 
  ql = (unsigned char)((unsigned int)port->first_rxq & 7U);
  #line 1016 
  c2.attr[0] = (unsigned int)((((int)qh << 24) & 520093696) | (((int)ql << 21) & 14680064));
  #line 1019 
  c2.attr[2] &= 3221225471U;
  #line 1021 
  mvpp2_cls_c2_write(port->priv,& c2);
  #line 1022 
  return;
}

#line 1024  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_cls.c"
__inline static int mvpp22_rss_ctx(struct mvpp2_port *port, int port_rss_ctx)
{
  #line 1026 
  return port->rss_ctx[port_rss_ctx];
}

#line 1029  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_cls.c"
int mvpp22_port_rss_enable(struct mvpp2_port *port)
{
  #line 1031 
  if (mvpp22_rss_ctx(port,0) < 0) 
                                  #line 1032 
                                  return -22;
  #line 1034 
  ;
  #line 1034 
  mvpp2_rss_port_c2_enable(port,(unsigned int)mvpp22_rss_ctx(port,0));
  #line 1036 
  return 0;
}

#line 1039  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_cls.c"
int mvpp22_port_rss_disable(struct mvpp2_port *port)
{
  #line 1041 
  if (mvpp22_rss_ctx(port,0) < 0) 
                                  #line 1042 
                                  return -22;
  #line 1044 
  mvpp2_rss_port_c2_disable(port);
  #line 1046 
  return 0;
}

#line 1049  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_cls.c"
static void mvpp22_port_c2_lookup_disable(struct mvpp2_port *port, int entry)
{
  #line 1051 
  struct mvpp2_cls_c2_entry c2;
  #line 1053 
  mvpp2_cls_c2_read(port->priv,entry,& c2);
  #line 1056 
  c2.tcam[4] &= ~ ((unsigned int)(1UL << (int)port->id) << 8U);
  #line 1058 
  mvpp2_cls_c2_write(port->priv,& c2);
  #line 1059 
  return;
}

#line 1062  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_cls.c"
void mvpp2_cls_oversize_rxq_set(struct mvpp2_port *port)
{
  #line 1064 
  u32 val;
  #line 1066 
  mvpp2_write(port->priv,(unsigned int)(((int)port->id + 1632) * 4),(unsigned int)port->first_rxq & 7U);
  #line 1069 
  mvpp2_write(port->priv,(unsigned int)(((int)port->id + 1644) * 4),(unsigned int)((int)port->first_rxq >> 3));
  #line 1072 
  val = mvpp2_read(port->priv,6608U);
  #line 1073 
  val = (unsigned int)(1 << (int)port->id) | val;
  #line 1074 
  mvpp2_write(port->priv,6608U,val);
  #line 1075 
  return;
}

#line 1077  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_cls.c"
static int mvpp2_port_c2_tcam_rule_add(struct mvpp2_port *port, struct mvpp2_rfs_rule *rule)
{
  #line 1080 
  struct flow_action_entry *act;
  #line 1081 
  struct mvpp2_cls_c2_entry c2;
  #line 1082 
  u8 qh;
  #line 1082 
  u8 ql;
  #line 1082 
  u8 pmap;
  #line 1083 
  int index;
  #line 1083 
  int ctx;
  #line 1085 
  memset((void *)(& c2),0,52UL);
  #line 1087 
  index = mvpp2_cls_c2_port_flow_index(port,rule->loc);
  #line 1088 
  if (index < 0) 
                 #line 1089 
                 return -22;
  #line 1090 
  c2.index = (unsigned int)index;
  #line 1092 
  act = & (rule->flow)->action.entries[0];
  #line 1094 
  rule->c2_index = (int)c2.index;
  #line 1096 
  c2.tcam[3] = ((unsigned int)rule->c2_tcam & 65535U) | ((unsigned int)rule->c2_tcam_mask << 16U);
  #line 1098 
  c2.tcam[2] = ((unsigned int)(rule->c2_tcam >> 16) & 65535U) | ((unsigned int)rule->c2_tcam_mask & 4294901760U);
  #line 1100 
  c2.tcam[1] = ((unsigned int)(rule->c2_tcam >> 32) & 65535U) | ((unsigned int)(rule->c2_tcam_mask >> 32) << 16U);
  #line 1102 
  c2.tcam[0] = (unsigned int)(rule->c2_tcam >> 48) | ((unsigned int)(rule->c2_tcam_mask >> 48) << 16U);
  #line 1105 
  pmap = (unsigned char)(1UL << (int)port->id);
  #line 1106 
  c2.tcam[4] = (unsigned int)((int)pmap << 8);
  #line 1107 
  c2.tcam[4] |= (unsigned int)((int)pmap << 24);
  #line 1110 
  c2.tcam[4] |= 4128768U;
  #line 1111 
  c2.tcam[4] |= (unsigned int)rule->loc & 63U;
  #line 1113 
  if (act->id == (unsigned int)FLOW_ACTION_DROP) 
                                                 #line 1114 
                                                 c2.act = 7U;
  else {
    #line 1121 
    c2.act = 1U;
    #line 1124 
    if (act->__anonCompField_flow_action_entry_169.queue.ctx != 0U) 
                                                                    #line 1125 
                                                                    c2.attr[2] |= 1073741824U;
    #line 1131 
    c2.act = 1572864U;
    #line 1134 
    c2.act |= 24576U;
    #line 1136 
    c2.act |= 7680U;
    #line 1139 
    if (act->__anonCompField_flow_action_entry_169.queue.ctx != 0U) {
      #line 1141 
      ctx = mvpp22_rss_ctx(port,(int)act->__anonCompField_flow_action_entry_169.queue.ctx);
      #line 1142 
      if (ctx < 0) 
                   #line 1143 
                   return -22;
      #line 1145 
      qh = (unsigned char)((unsigned int)((unsigned char)(ctx >> 3)) & 31U);
      #line 1146 
      ql = (unsigned char)((unsigned int)((unsigned char)ctx) & 7U);
    }
    else {
      #line 1148 
      qh = (unsigned char)((unsigned int)((unsigned char)((act->__anonCompField_flow_action_entry_169.queue.index + (unsigned int)port->first_rxq) >> 3)) & 31U);
      #line 1150 
      ql = (unsigned char)((unsigned int)((int)((unsigned char)act->__anonCompField_flow_action_entry_169.queue.index) + (int)port->first_rxq) & 7U);
    }
    #line 1154 
    c2.attr[0] = (unsigned int)((((int)qh << 24) & 520093696) | (((int)ql << 21) & 14680064));
  }
  #line 1158 
  c2.valid = (unsigned char)1U;
  #line 1160 
  mvpp2_cls_c2_write(port->priv,& c2);
  #line 1162 
  return 0;
}

#line 1165  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_cls.c"
static int mvpp2_port_c2_rfs_rule_insert(struct mvpp2_port *port, struct mvpp2_rfs_rule *rule)
{
  #line 1168 
  return mvpp2_port_c2_tcam_rule_add(port,rule);
}

#line 1171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_cls.c"
static int mvpp2_port_cls_rfs_rule_remove(struct mvpp2_port *port, struct mvpp2_rfs_rule *rule)
{
  #line 1174 
  struct mvpp2_cls_flow *flow;
  #line 1175 
  struct mvpp2_cls_flow_entry fe;
  #line 1176 
  int index;
  #line 1176 
  int i;
  #line 1178 
  i = 0;
  #line 1178 
  while (i <= 51) {
    #line 1178 
    if (! (i > 0 && (int)cls_flows[i].flow_id == (int)cls_flows[i + -1].flow_id)) 
      #line 1178 
      if ((cls_flows[i].flow_type & rule->flow_type) != rule->flow_type) 
        #line 1178 
        goto __Cont;
      else {
        #line 1179 
        flow = mvpp2_cls_flow_get(i);
        #line 1180 
        if (flow == (struct mvpp2_cls_flow *)0) 
                                                #line 1181 
                                                return 0;
        #line 1183 
        index = (((int)flow->flow_id + -8) * 21 + (int)port->id * 4) + rule->loc;
        #line 1185 
        mvpp2_cls_flow_read(port->priv,index,& fe);
        #line 1186 
        mvpp2_cls_flow_port_remove(& fe,(unsigned int)(1UL << (int)port->id));
        #line 1187 
        mvpp2_cls_flow_write(port->priv,& fe);
      }
    #line 1178 
    __Cont: 
            #line 1178 
    i ++;
  }
  #line 1190 
  if (rule->c2_index >= 0) 
                           #line 1191 
                           mvpp22_port_c2_lookup_disable(port,rule->c2_index);
  #line 1193 
  return 0;
}

#line 1196  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_cls.c"
static int mvpp2_port_flt_rfs_rule_insert(struct mvpp2_port *port, struct mvpp2_rfs_rule *rule)
{
  #line 1199 
  struct mvpp2_cls_flow *flow;
  #line 1201 
  struct mvpp2_cls_flow_entry fe;
  #line 1202 
  int index;
  #line 1202 
  int ret;
  #line 1202 
  int i;
  #line 1200 
  struct mvpp2 *priv = port->priv;
  #line 1204 
  if ((unsigned int)rule->engine != 1U) 
                                        #line 1205 
                                        return -95;
  #line 1207 
  ret = mvpp2_port_c2_rfs_rule_insert(port,rule);
  #line 1208 
  if (ret != 0) 
                #line 1209 
                return ret;
  #line 1211 
  i = 0;
  #line 1211 
  while (i <= 51) {
    #line 1211 
    if (! (i > 0 && (int)cls_flows[i].flow_id == (int)cls_flows[i + -1].flow_id)) 
      #line 1211 
      if ((cls_flows[i].flow_type & rule->flow_type) != rule->flow_type) 
        #line 1211 
        goto __Cont;
      else {
        #line 1212 
        flow = mvpp2_cls_flow_get(i);
        #line 1213 
        if (flow == (struct mvpp2_cls_flow *)0) 
                                                #line 1214 
                                                return 0;
        #line 1216 
        if (((int)rule->hek_fields & (int)flow->supported_hash_opts) != (int)rule->hek_fields) 
          #line 1217 
          goto __Cont;
        #line 1219 
        index = (((int)flow->flow_id + -8) * 21 + (int)port->id * 4) + rule->loc;
        #line 1221 
        mvpp2_cls_flow_read(priv,index,& fe);
        #line 1222 
        mvpp2_cls_flow_eng_set(& fe,(int)rule->engine);
        #line 1223 
        mvpp2_cls_flow_port_id_sel(& fe,(_Bool)1);
        #line 1224 
        mvpp2_flow_set_hek_fields(& fe,(unsigned long)rule->hek_fields);
        #line 1225 
        mvpp2_cls_flow_lu_type_set(& fe,(unsigned char)((int)((unsigned char)rule->loc)));
        #line 1226 
        mvpp2_cls_flow_port_add(& fe,15U);
        #line 1228 
        mvpp2_cls_flow_write(priv,& fe);
      }
    #line 1211 
    __Cont: 
            #line 1211 
    i ++;
  }
  #line 1231 
  return 0;
}

#line 1234  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_cls.c"
static int mvpp2_cls_c2_build_match(struct mvpp2_rfs_rule *rule)
{
  #line 1297 
  int tmp_8;
  #line 1236 
  struct flow_rule *flow = rule->flow;
  #line 1237 
  int offs = 0;
  #line 1242 
  if ((int)flow_rule_match_key(flow,
                          (enum flow_dissector_key_id)FLOW_DISSECTOR_KEY_VLAN) != 0) {
    #line 1243 
    struct flow_match_vlan match;
    #line 1245 
    flow_rule_match_vlan(flow,& match);
    #line 1246 
    if ((unsigned int)(match.mask)->__anonCompField_flow_dissector_key_vlan_75.__anonCompField___anonunion_2537_74.vlan_id != 0U) {
      #line 1247 
      rule->hek_fields = (unsigned short)((unsigned int)rule->hek_fields | 4U);
      #line 1249 
      rule->c2_tcam |= (unsigned long long)(match.key)->__anonCompField_flow_dissector_key_vlan_75.__anonCompField___anonunion_2537_74.vlan_id << offs;
      #line 1250 
      rule->c2_tcam_mask |= (unsigned long long)(match.mask)->__anonCompField_flow_dissector_key_vlan_75.__anonCompField___anonunion_2537_74.vlan_id << offs;
    }
    #line 1255 
    if ((unsigned int)(match.mask)->__anonCompField_flow_dissector_key_vlan_75.__anonCompField___anonunion_2537_74.vlan_priority != 0U) {
      #line 1256 
      rule->hek_fields = (unsigned short)((unsigned int)rule->hek_fields | 2U);
      #line 1261 
      rule->c2_tcam |= (unsigned long long)(match.key)->__anonCompField_flow_dissector_key_vlan_75.__anonCompField___anonunion_2537_74.vlan_priority << (offs + 13);
      #line 1263 
      rule->c2_tcam_mask |= (unsigned long long)(match.mask)->__anonCompField_flow_dissector_key_vlan_75.__anonCompField___anonunion_2537_74.vlan_priority << (offs + 13);
    }
    #line 1267 
    if ((unsigned int)(match.mask)->__anonCompField_flow_dissector_key_vlan_75.__anonCompField___anonunion_2537_74.vlan_dei != 0U) 
      #line 1268 
      return -95;
    #line 1273 
    offs += 16;
  }
  #line 1276 
  if ((int)flow_rule_match_key(flow,
                            (enum flow_dissector_key_id)FLOW_DISSECTOR_KEY_PORTS) != 0) {
    #line 1277 
    struct flow_match_ports match_0;
    #line 1279 
    flow_rule_match_ports(flow,& match_0);
    #line 1280 
    if ((unsigned int)(match_0.mask)->__anonCompField_flow_dissector_key_ports_78.__anonCompField___anonunion_2540_77.src != 0U) {
      #line 1281 
      rule->hek_fields = (unsigned short)((unsigned int)rule->hek_fields | 256U);
      #line 1283 
      rule->c2_tcam |= (unsigned long long)__builtin_bswap16((unsigned short)((int)(match_0.key)->__anonCompField_flow_dissector_key_ports_78.__anonCompField___anonunion_2540_77.src)) << offs;
      #line 1284 
      rule->c2_tcam_mask |= (unsigned long long)__builtin_bswap16((unsigned short)((int)(match_0.mask)->__anonCompField_flow_dissector_key_ports_78.__anonCompField___anonunion_2540_77.src)) << offs;
      #line 1285 
      offs = mvpp2_cls_hek_field_size(256U) + offs;
    }
    #line 1288 
    if ((unsigned int)(match_0.mask)->__anonCompField_flow_dissector_key_ports_78.__anonCompField___anonunion_2540_77.dst != 0U) {
      #line 1289 
      rule->hek_fields = (unsigned short)((unsigned int)rule->hek_fields | 512U);
      #line 1291 
      rule->c2_tcam |= (unsigned long long)__builtin_bswap16((unsigned short)((int)(match_0.key)->__anonCompField_flow_dissector_key_ports_78.__anonCompField___anonunion_2540_77.dst)) << offs;
      #line 1292 
      rule->c2_tcam_mask |= (unsigned long long)__builtin_bswap16((unsigned short)((int)(match_0.mask)->__anonCompField_flow_dissector_key_ports_78.__anonCompField___anonunion_2540_77.dst)) << offs;
      #line 1293 
      offs = mvpp2_cls_hek_field_size(512U) + offs;
    }
  }
  #line 1297 
  if (0 != 0) 
              #line 1297 
              tmp_8 = (unsigned int)((((((((((unsigned long long)rule->hek_fields & 1ULL) != 0ULL) + (((unsigned long long)rule->hek_fields & 2ULL) != 0ULL)) + (((unsigned long long)rule->hek_fields & 4ULL) != 0ULL)) + (((unsigned long long)rule->hek_fields & 8ULL) != 0ULL)) + (((unsigned long long)rule->hek_fields & 16ULL) != 0ULL)) + (((unsigned long long)rule->hek_fields & 32ULL) != 0ULL)) + (((unsigned long long)rule->hek_fields & 64ULL) != 0ULL)) + (((unsigned long long)rule->hek_fields & 128ULL) != 0ULL)) + (unsigned int)((((((((((unsigned long long)((int)rule->hek_fields >> 8) & 1ULL) != 0ULL) + (((unsigned long long)((int)rule->hek_fields >> 8) & 2ULL) != 0ULL)) + (((unsigned long long)((int)rule->hek_fields >> 8) & 4ULL) != 0ULL)) + (((unsigned long long)((int)rule->hek_fields >> 8) & 8ULL) != 0ULL)) + (((unsigned long long)((int)rule->hek_fields >> 8) & 16ULL) != 0ULL)) + (((unsigned long long)((int)rule->hek_fields >> 8) & 32ULL) != 0ULL)) + (((unsigned long long)((int)rule->hek_fields >> 8) & 64ULL) != 0ULL)) + (((unsigned long long)((int)rule->hek_fields >> 8) & 128ULL) != 0ULL)) > 4U;
  else {
    #line 1297 
    tmp_8 = __arch_hweight16((unsigned int)rule->hek_fields) > 4U;
  }
  #line 1297 
  if (tmp_8) 
             #line 1298 
             return -95;
  #line 1300 
  return 0;
}

#line 1303  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_cls.c"
static int mvpp2_cls_rfs_parse_rule(struct mvpp2_rfs_rule *rule)
{
  #line 1306 
  struct flow_action_entry *act;
  #line 1305 
  struct flow_rule *flow = rule->flow;
  #line 1308 
  act = & flow->action.entries[0];
  #line 1309 
  if (act->id != (unsigned int)FLOW_ACTION_QUEUE && act->id != (unsigned int)FLOW_ACTION_DROP) 
    #line 1310 
    return -95;
  #line 1316 
  if (act->__anonCompField_flow_action_entry_169.queue.ctx != 0U && act->__anonCompField_flow_action_entry_169.queue.index != 0U) 
    #line 1317 
    return -95;
  #line 1322 
  rule->engine = (unsigned char)1U;
  #line 1324 
  if (mvpp2_cls_c2_build_match(rule) != 0) 
                                           #line 1325 
                                           return -22;
  #line 1327 
  return 0;
}

#line 1330  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_cls.c"
int mvpp2_ethtool_cls_rule_get(struct mvpp2_port *port, struct ethtool_rxnfc *rxnfc)
{
  #line 1333 
  struct mvpp2_ethtool_fs *efs;
  #line 1335 
  if (rxnfc->fs.location > 3U) 
                               #line 1336 
                               return -22;
  #line 1338 
  efs = port->rfs_rules[rxnfc->fs.location];
  #line 1339 
  if (efs == (struct mvpp2_ethtool_fs *)0) 
                                           #line 1340 
                                           return -2;
  #line 1342 
  memcpy((void *)rxnfc,(void *)(& efs->rxnfc),192UL);
  #line 1344 
  return 0;
}

#line 1347  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_cls.c"
int mvpp2_ethtool_cls_rule_ins(struct mvpp2_port *port, struct ethtool_rxnfc *info)
{
  #line 1351 
  struct ethtool_rx_flow_rule *ethtool_rule;
  #line 1352 
  struct mvpp2_ethtool_fs *efs;
  #line 1352 
  struct mvpp2_ethtool_fs *old_efs;
  #line 1350 
  struct ethtool_rx_flow_spec_input input = {.fs = (struct ethtool_rx_flow_spec *)0, .rss_ctx = 0U};
  #line 1353 
  int ret = 0;
  #line 1355 
  if (info->fs.location > 3U) 
                              #line 1356 
                              return -22;
  #line 1358 
  efs = (struct mvpp2_ethtool_fs *)kzalloc_0(232UL,3264U);
  #line 1359 
  if (efs == (struct mvpp2_ethtool_fs *)0) 
                                           #line 1360 
                                           return -12;
  #line 1362 
  input.fs = & info->fs;
  #line 1367 
  if ((info->fs.flow_type & 536870912U) != 0U) 
                                               #line 1368 
                                               input.rss_ctx = info->__anonCompField_ethtool_rxnfc_99.rss_context;
  #line 1370 
  ethtool_rule = ethtool_rx_flow_rule_create(& input);
  #line 1371 
  if ((int)IS_ERR_0((void *)ethtool_rule) != 0) {
    #line 1372 
    ret = (int)PTR_ERR_0((void *)ethtool_rule);
    #line 1373 
    goto clean_rule;
  }
  #line 1376 
  efs->rule.flow = ethtool_rule->rule;
  #line 1377 
  efs->rule.flow_type = mvpp2_cls_ethtool_flow_to_type((int)info->fs.flow_type);
  #line 1378 
  if (efs->rule.flow_type < 0) {
    #line 1379 
    ret = efs->rule.flow_type;
    #line 1380 
    goto clean_rule;
  }
  #line 1383 
  ret = mvpp2_cls_rfs_parse_rule(& efs->rule);
  #line 1384 
  if (ret != 0) 
                #line 1385 
                goto clean_eth_rule;
  #line 1387 
  efs->rule.loc = (int)info->fs.location;
  #line 1390 
  if (port->rfs_rules[efs->rule.loc] != (struct mvpp2_ethtool_fs *)0) {
    #line 1391 
    old_efs = port->rfs_rules[efs->rule.loc];
    #line 1392 
    ret = mvpp2_port_cls_rfs_rule_remove(port,& old_efs->rule);
    #line 1393 
    if (ret != 0) 
                  #line 1394 
                  goto clean_eth_rule;
    #line 1395 
    kfree((void *)old_efs);
    #line 1396 
    (port->n_rfs_rules) --;
  }
  #line 1399 
  ret = mvpp2_port_flt_rfs_rule_insert(port,& efs->rule);
  #line 1400 
  if (ret != 0) 
                #line 1401 
                goto clean_eth_rule;
  #line 1403 
  ethtool_rx_flow_rule_destroy(ethtool_rule);
  #line 1404 
  efs->rule.flow = (struct flow_rule *)0;
  #line 1406 
  memcpy((void *)(& efs->rxnfc),(void *)info,192UL);
  #line 1407 
  port->rfs_rules[efs->rule.loc] = efs;
  #line 1408 
  (port->n_rfs_rules) ++;
  #line 1410 
  return ret;
  #line 1412 
  clean_eth_rule: 
                  #line 1412 
  ;
  #line 1413 
  ethtool_rx_flow_rule_destroy(ethtool_rule);
  #line 1414 
  clean_rule: 
              #line 1414 
  ;
  #line 1415 
  kfree((void *)efs);
  #line 1416 
  return ret;
}

#line 1419  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_cls.c"
int mvpp2_ethtool_cls_rule_del(struct mvpp2_port *port, struct ethtool_rxnfc *info)
{
  #line 1422 
  struct mvpp2_ethtool_fs *efs;
  #line 1423 
  int ret;
  #line 1425 
  efs = port->rfs_rules[info->fs.location];
  #line 1426 
  if (efs == (struct mvpp2_ethtool_fs *)0) 
                                           #line 1427 
                                           return -22;
  #line 1430 
  ret = mvpp2_port_cls_rfs_rule_remove(port,& efs->rule);
  #line 1431 
  if (ret != 0) 
                #line 1432 
                return ret;
  #line 1434 
  (port->n_rfs_rules) --;
  #line 1435 
  port->rfs_rules[info->fs.location] = (struct mvpp2_ethtool_fs *)0;
  #line 1436 
  kfree((void *)efs);
  #line 1438 
  return 0;
}

#line 1441  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_cls.c"
__inline static u32 mvpp22_rxfh_indir(struct mvpp2_port *port, u32 rxq)
{
  #line 1443 
  int nrxqs;
  #line 1443 
  int cpu;
  #line 1443 
  int cpus = (int)cpumask_weight(& __cpu_possible_mask);
  #line 1446 
  nrxqs = (int)(port->nrxqs / (unsigned int)cpus);
  #line 1449 
  cpu = (int)(rxq / (unsigned int)nrxqs);
  #line 1451 
  if (cpumask_test_cpu(cpu,& __cpu_online_mask) == 0) 
                                                      #line 1452 
                                                      return (unsigned int)port->first_rxq;
  #line 1457 
  return (unsigned int)port->first_rxq + (rxq * (unsigned int)nrxqs + rxq / (unsigned int)cpus) % port->nrxqs;
}

#line 1460  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_cls.c"
static void mvpp22_rss_fill_table(struct mvpp2_port *port, struct mvpp2_rss_table *table, u32 rss_ctx)
{
  #line 1465 
  int i;
  #line 1464 
  struct mvpp2 *priv = port->priv;
  #line 1467 
  i = 0;
  #line 1467 
  while (i <= 31) {
    {
      #line 1468 
      u32 sel = (rss_ctx << 8) | (unsigned int)i;
      #line 1470 
      mvpp2_write(priv,5376U,sel);
      #line 1472 
      ;
      #line 1472 
      mvpp2_write(priv,5384U,mvpp22_rxfh_indir(port,table->indir[i]));
    }
    #line 1467 
    i ++;
  }
  #line 1475 
  return;
}

#line 1477  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_cls.c"
static int mvpp22_rss_context_create(struct mvpp2_port *port, u32 *rss_ctx)
{
  #line 1480 
  u32 ctx;
  #line 1479 
  struct mvpp2 *priv = port->priv;
  #line 1483 
  ctx = 0U;
  #line 1483 
  while (ctx <= 7U) {
    #line 1484 
    if (priv->rss_tables[ctx] == (struct mvpp2_rss_table *)0) 
                                                              #line 1485 
                                                              break;
    #line 1483 
    ctx ++;
  }
  #line 1488 
  if (ctx == 8U) 
                 #line 1489 
                 return -22;
  #line 1491 
  priv->rss_tables[ctx] = (struct mvpp2_rss_table *)kzalloc_0(128UL,3264U);
  #line 1493 
  if (priv->rss_tables[ctx] == (struct mvpp2_rss_table *)0) 
                                                            #line 1494 
                                                            return -12;
  #line 1496 
  *rss_ctx = ctx;
  #line 1501 
  mvpp2_write(priv,5376U,ctx << 8);
  #line 1502 
  mvpp2_write(priv,5388U,8U);
  #line 1504 
  mvpp2_write(priv,5376U,ctx << 16);
  #line 1505 
  mvpp2_write(priv,5380U,ctx);
  #line 1507 
  return 0;
}

#line 1510  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_cls.c"
int mvpp22_port_rss_ctx_create(struct mvpp2_port *port, u32 *port_ctx)
{
  #line 1512 
  u32 rss_ctx;
  #line 1513 
  int ret;
  #line 1513 
  int i;
  #line 1515 
  ret = mvpp22_rss_context_create(port,& rss_ctx);
  #line 1516 
  if (ret != 0) 
                #line 1517 
                return ret;
  #line 1522 
  i = 1;
  #line 1522 
  while (i <= 7) {
    #line 1523 
    if (port->rss_ctx[i] < 0) 
                              #line 1524 
                              break;
    #line 1522 
    i ++;
  }
  #line 1527 
  if (i == 8) 
              #line 1528 
              return -22;
  #line 1530 
  port->rss_ctx[i] = (int)rss_ctx;
  #line 1531 
  *port_ctx = (unsigned int)i;
  #line 1533 
  return 0;
}

#line 1536  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_cls.c"
static struct mvpp2_rss_table *mvpp22_rss_table_get(struct mvpp2 *priv, int rss_ctx)
{
  #line 1539 
  if ((unsigned int)rss_ctx > 7U) 
                                  #line 1540 
                                  return (struct mvpp2_rss_table *)0;
  #line 1542 
  return priv->rss_tables[rss_ctx];
}

#line 1545  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_cls.c"
int mvpp22_port_rss_ctx_delete(struct mvpp2_port *port, u32 port_ctx)
{
  #line 1548 
  struct ethtool_rxnfc *rxnfc;
  #line 1549 
  int i;
  #line 1549 
  int rss_ctx;
  #line 1549 
  int ret;
  #line 1547 
  struct mvpp2 *priv = port->priv;
  #line 1551 
  rss_ctx = mvpp22_rss_ctx(port,(int)port_ctx);
  #line 1553 
  if ((unsigned int)rss_ctx > 7U) 
                                  #line 1554 
                                  return -22;
  #line 1557 
  i = 0;
  #line 1557 
  while (i <= 3) {
    #line 1558 
    if (port->rfs_rules[i] == (struct mvpp2_ethtool_fs *)0) 
                                                            #line 1559 
                                                            goto __Cont;
    #line 1561 
    rxnfc = & (port->rfs_rules[i])->rxnfc;
    #line 1562 
    if ((rxnfc->fs.flow_type & 536870912U) == 0U || rxnfc->__anonCompField_ethtool_rxnfc_99.rss_context != port_ctx) 
      #line 1564 
      goto __Cont;
    #line 1566 
    ret = mvpp2_ethtool_cls_rule_del(port,rxnfc);
    #line 1567 
    if (ret != 0) 
                  #line 1568 
                  netdev_warn(port->dev,(char *)"couldn\'t remove classification rule %d associated to this context",rxnfc->fs.location);
    #line 1557 
    __Cont: 
            #line 1557 
    i ++;
  }
  #line 1574 
  kfree((void *)priv->rss_tables[rss_ctx]);
  #line 1576 
  priv->rss_tables[rss_ctx] = (struct mvpp2_rss_table *)0;
  #line 1577 
  port->rss_ctx[port_ctx] = -1;
  #line 1579 
  return 0;
}

#line 1582  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_cls.c"
int mvpp22_port_rss_ctx_indir_set(struct mvpp2_port *port, u32 port_ctx, u32 *indir)
{
  #line 1585 
  int rss_ctx = mvpp22_rss_ctx(port,(int)port_ctx);
  #line 1586 
  struct mvpp2_rss_table *rss_table = mvpp22_rss_table_get(port->priv,rss_ctx);
  #line 1589 
  if (rss_table == (struct mvpp2_rss_table *)0) 
                                                #line 1590 
                                                return -22;
  #line 1592 
  memcpy((void *)(& rss_table->indir),(void *)indir,128UL);
  #line 1595 
  mvpp22_rss_fill_table(port,rss_table,(unsigned int)rss_ctx);
  #line 1597 
  return 0;
}

#line 1600  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_cls.c"
int mvpp22_port_rss_ctx_indir_get(struct mvpp2_port *port, u32 port_ctx, u32 *indir)
{
  #line 1603 
  int rss_ctx = mvpp22_rss_ctx(port,(int)port_ctx);
  #line 1604 
  struct mvpp2_rss_table *rss_table = mvpp22_rss_table_get(port->priv,rss_ctx);
  #line 1607 
  if (rss_table == (struct mvpp2_rss_table *)0) 
                                                #line 1608 
                                                return -22;
  #line 1610 
  memcpy((void *)indir,(void *)(& rss_table->indir),128UL);
  #line 1613 
  return 0;
}

#line 1616  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_cls.c"
int mvpp2_ethtool_rxfh_set(struct mvpp2_port *port, struct ethtool_rxnfc *info)
{
  #line 1619 
  u32 flow_type;
  #line 1618 
  u16 hash_opts = (unsigned short)0U;
  #line 1621 
  flow_type = (unsigned int)mvpp2_cls_ethtool_flow_to_type((int)info->flow_type);
  #line 1623 
  switch (flow_type) {
    #line 1624 
    case (u32)11: 
                  #line 1624 
    ;
    #line 1625 
    case (u32)19: 
                  #line 1625 
    ;
    #line 1626 
    case (u32)13: 
                  #line 1626 
    ;
    #line 1627 
    case (u32)21: 
                  #line 1627 
    ;
    #line 1628 
    if ((info->data & 64ULL) != 0ULL) 
                                      #line 1629 
                                      hash_opts = (unsigned short)((unsigned int)hash_opts | 256U);
    #line 1630 
    if ((info->data & 128ULL) != 0ULL) 
                                       #line 1631 
                                       hash_opts = (unsigned short)((unsigned int)hash_opts | 512U);
    #line 1633 
    case (u32)3: 
                 #line 1633 
    ;
    #line 1634 
    case (u32)5: 
                 #line 1634 
    ;
    #line 1635 
    if ((info->data & 2ULL) != 0ULL) 
                                     #line 1636 
                                     hash_opts = (unsigned short)((unsigned int)hash_opts | 1U);
    #line 1637 
    if ((info->data & 4ULL) != 0ULL) 
                                     #line 1638 
                                     hash_opts = (unsigned short)((unsigned int)hash_opts | 4U);
    #line 1639 
    if ((info->data & 8ULL) != 0ULL) 
                                     #line 1640 
                                     hash_opts = (unsigned short)((unsigned int)hash_opts | 8U);
    #line 1641 
    if ((info->data & 16ULL) != 0ULL) 
                                      #line 1642 
                                      hash_opts = (unsigned short)((unsigned int)hash_opts | 80U);
    #line 1644 
    if ((info->data & 32ULL) != 0ULL) 
                                      #line 1645 
                                      hash_opts = (unsigned short)((unsigned int)hash_opts | 160U);
    #line 1647 
    break;
    #line 1648 
    default: 
             #line 1648 
    ;
    #line 1648 
    return -95;
  }
  #line 1651 
  return mvpp2_port_rss_hash_opts_set(port,(int)flow_type,
                                     (unsigned short)((int)hash_opts));
}

#line 1654  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_cls.c"
int mvpp2_ethtool_rxfh_get(struct mvpp2_port *port, struct ethtool_rxnfc *info)
{
  #line 1656 
  unsigned long hash_opts;
  #line 1657 
  u32 flow_type;
  #line 1658 
  int i;
  #line 1660 
  flow_type = (unsigned int)mvpp2_cls_ethtool_flow_to_type((int)info->flow_type);
  #line 1662 
  hash_opts = (unsigned long)mvpp2_port_rss_hash_opts_get(port,(int)flow_type);
  #line 1663 
  info->data = 0ULL;
  #line 1665 
  i = (int)cif_find_first_bit(& hash_opts,10UL);
  #line 1665 
  while (i <= 9) {
    #line 1666 
    switch (1UL << i) {
      #line 1667 
      case (unsigned long)1: 
                             #line 1667 
      ;
      #line 1668 
      info->data |= 2ULL;
      #line 1669 
      break;
      #line 1670 
      case (unsigned long)4: 
                             #line 1670 
      ;
      #line 1671 
      info->data |= 4ULL;
      #line 1672 
      break;
      #line 1673 
      case (unsigned long)8: 
                             #line 1673 
      ;
      #line 1674 
      info->data |= 8ULL;
      #line 1675 
      break;
      #line 1676 
      case (unsigned long)16: 
                              #line 1676 
      ;
      #line 1677 
      case (unsigned long)64: 
                              #line 1677 
      ;
      #line 1678 
      info->data |= 16ULL;
      #line 1679 
      break;
      #line 1680 
      case (unsigned long)32: 
                              #line 1680 
      ;
      #line 1681 
      case (unsigned long)128: 
                               #line 1681 
      ;
      #line 1682 
      info->data |= 32ULL;
      #line 1683 
      break;
      #line 1684 
      case (unsigned long)256: 
                               #line 1684 
      ;
      #line 1685 
      info->data |= 64ULL;
      #line 1686 
      break;
      #line 1687 
      case (unsigned long)512: 
                               #line 1687 
      ;
      #line 1688 
      info->data |= 128ULL;
      #line 1689 
      break;
      #line 1690 
      default: 
               #line 1690 
      ;
      #line 1691 
      return -22;
    }
    #line 1665 
    i = (int)cif_find_next_bit(& hash_opts,10UL,(unsigned long)(i + 1));
  }
  #line 1694 
  return 0;
}

#line 1697  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_cls.c"
int mvpp22_port_rss_init(struct mvpp2_port *port)
{
  #line 1699 
  struct mvpp2_rss_table *table;
  #line 1701 
  int i;
  #line 1701 
  int ret;
  #line 1700 
  u32 context = 0U;
  #line 1703 
  i = 0;
  #line 1703 
  while (i <= 7) {
    #line 1704 
    port->rss_ctx[i] = -1;
    #line 1703 
    i ++;
  }
  #line 1706 
  ret = mvpp22_rss_context_create(port,& context);
  #line 1707 
  if (ret != 0) 
                #line 1708 
                return ret;
  #line 1710 
  table = mvpp22_rss_table_get(port->priv,(int)context);
  #line 1711 
  if (table == (struct mvpp2_rss_table *)0) 
                                            #line 1712 
                                            return -22;
  #line 1714 
  port->rss_ctx[0] = (int)context;
  #line 1719 
  i = 0;
  #line 1719 
  while (i <= 31) {
    #line 1720 
    table->indir[i] = ethtool_rxfh_indir_default((unsigned int)i,port->nrxqs);
    #line 1719 
    i ++;
  }
  #line 1722 
  ;
  #line 1722 
  ;
  #line 1722 
  mvpp22_rss_fill_table(port,table,(unsigned int)mvpp22_rss_ctx(port,0));
  #line 1725 
  mvpp2_port_rss_hash_opts_set(port,3,(unsigned short)48);
  #line 1726 
  mvpp2_port_rss_hash_opts_set(port,5,(unsigned short)192);
  #line 1727 
  mvpp2_port_rss_hash_opts_set(port,11,(unsigned short)816);
  #line 1728 
  mvpp2_port_rss_hash_opts_set(port,13,(unsigned short)960);
  #line 1729 
  mvpp2_port_rss_hash_opts_set(port,19,(unsigned short)816);
  #line 1730 
  mvpp2_port_rss_hash_opts_set(port,21,(unsigned short)960);
  #line 1732 
  return 0;
}

#line 110  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_cls.i.aux"
static unsigned long cif_find_next_bit(unsigned long *addr, unsigned long size, unsigned long offset)
{
  #line 113 
  return ldv_find_next_bit(addr,size,offset);
}

#line 152  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_cls.i.aux"
static unsigned long cif_find_first_bit(unsigned long *addr, unsigned long size)
{
  #line 155 
  return ldv_find_first_bit(addr,size);
}

#line 208  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_cls.i.aux"
static long PTR_ERR_0(void *ptr)
{
  #line 211 
  return ldv_ptr_err(ptr);
}

#line 215  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_cls.i.aux"
static bool IS_ERR_0(void *ptr)
{
  #line 218 
  return ldv_is_err(ptr);
}

#line 362  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_cls.i.aux"
static void *kzalloc_0(size_t size, gfp_t flags)
{
  #line 365 
  return ldv_kzalloc(size,flags);
}

#line 469  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernel.h"
#line 469 
int sprintf(char *, char * , ...);
#line 668  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 483  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_debugfs.i.aux"
static void *kzalloc_1(size_t size, gfp_t flags);
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seq_file.h"
#line 110 
ssize_t seq_read(struct file *, char *, size_t, loff_t *);
#line 111 
#line 111 
loff_t seq_lseek(struct file *, loff_t, int);
#line 118 
#line 118 
void seq_printf(struct seq_file *, char * , ...);
#line 142 
#line 142 
int single_open(struct file *, int (*)(struct seq_file *, void *), void *);
#line 144 
#line 144 
int single_release(struct inode *, struct file *);
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/debugfs.h"
#line 61 
struct dentry *debugfs_lookup(char *, struct dentry *);
#line 66 
#line 812  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_debugfs.i.aux"
static struct dentry *cif_debugfs_create_file(char *name, umode_t mode, struct dentry *parent, void *data, struct file_operations *fops);
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/debugfs.h"
#line 804  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_debugfs.i.aux"
static struct dentry *cif_debugfs_create_dir(char *name, struct dentry *parent);
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/debugfs.h"
#line 85 
void debugfs_remove_recursive(struct dentry *);
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_debugfs.c"
static int mvpp2_dbgfs_flow_flt_hits_show(struct seq_file *s, void *unused)
{
  #line 60 
  struct mvpp2_dbgfs_flow_tbl_entry *entry = (struct mvpp2_dbgfs_flow_tbl_entry *)s->private;
  #line 62 
  u32 hits = mvpp2_cls_flow_hits(entry->priv,entry->id);
  #line 64 
  seq_printf(s,(char *)"%u\n",hits);
  #line 66 
  return 0;
}

#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_debugfs.c"
static int mvpp2_dbgfs_flow_flt_hits_open(struct inode *inode, struct file *file)
{
  #line 69 
  return single_open(file,& mvpp2_dbgfs_flow_flt_hits_show,inode->i_private);
}

#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_debugfs.c"
static struct file_operations mvpp2_dbgfs_flow_flt_hits_fops = {.owner = & __this_module, .llseek = & seq_lseek, .read = & seq_read, .open = & mvpp2_dbgfs_flow_flt_hits_open, .release = & single_release};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_debugfs.c"
static int mvpp2_dbgfs_flow_dec_hits_show(struct seq_file *s, void *unused)
{
  #line 73 
  struct mvpp2_dbgfs_flow_entry *entry = (struct mvpp2_dbgfs_flow_entry *)s->private;
  #line 75 
  u32 hits = mvpp2_cls_lookup_hits(entry->priv,entry->flow);
  #line 77 
  seq_printf(s,(char *)"%u\n",hits);
  #line 79 
  return 0;
}

#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_debugfs.c"
static int mvpp2_dbgfs_flow_dec_hits_open(struct inode *inode, struct file *file)
{
  #line 82 
  return single_open(file,& mvpp2_dbgfs_flow_dec_hits_show,inode->i_private);
}

#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_debugfs.c"
static struct file_operations mvpp2_dbgfs_flow_dec_hits_fops = {.owner = & __this_module, .llseek = & seq_lseek, .read = & seq_read, .open = & mvpp2_dbgfs_flow_dec_hits_open, .release = & single_release};
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_debugfs.c"
static int mvpp2_dbgfs_flow_type_show(struct seq_file *s, void *unused)
{
  #line 87 
  struct mvpp2_cls_flow *f;
  #line 88 
  char *flow_name;
  #line 86 
  struct mvpp2_dbgfs_flow_entry *entry = (struct mvpp2_dbgfs_flow_entry *)s->private;
  #line 90 
  f = mvpp2_cls_flow_get(entry->flow);
  #line 91 
  if (f == (struct mvpp2_cls_flow *)0) 
                                       #line 92 
                                       return -22;
  #line 94 
  switch (f->flow_type) {
    #line 95 
    case 16: 
             #line 95 
    ;
    #line 96 
    flow_name = (char *)"ipv4";
    #line 97 
    break;
    #line 98 
    case 17: 
             #line 98 
    ;
    #line 99 
    flow_name = (char *)"ipv6";
    #line 100 
    break;
    #line 101 
    case 1: 
            #line 101 
    ;
    #line 102 
    flow_name = (char *)"tcp4";
    #line 103 
    break;
    #line 104 
    case 5: 
            #line 104 
    ;
    #line 105 
    flow_name = (char *)"tcp6";
    #line 106 
    break;
    #line 107 
    case 2: 
            #line 107 
    ;
    #line 108 
    flow_name = (char *)"udp4";
    #line 109 
    break;
    #line 110 
    case 6: 
            #line 110 
    ;
    #line 111 
    flow_name = (char *)"udp6";
    #line 112 
    break;
    #line 113 
    default: 
             #line 113 
    ;
    #line 114 
    flow_name = (char *)"other";
  }
  #line 117 
  seq_printf(s,(char *)"%s\n",flow_name);
  #line 119 
  return 0;
}

#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_debugfs.c"
static int mvpp2_dbgfs_flow_type_open(struct inode *inode, struct file *file)
{
  #line 122 
  return single_open(file,& mvpp2_dbgfs_flow_type_show,inode->i_private);
}

#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_debugfs.c"
static struct file_operations mvpp2_dbgfs_flow_type_fops = {.owner = & __this_module, .llseek = & seq_lseek, .read = & seq_read, .open = & mvpp2_dbgfs_flow_type_open, .release = & single_release};
#line 124  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_debugfs.c"
static int mvpp2_dbgfs_flow_id_show(struct seq_file *s, void *unused)
{
  #line 127 
  struct mvpp2_cls_flow *f;
  #line 126 
  struct mvpp2_dbgfs_flow_entry *entry = (struct mvpp2_dbgfs_flow_entry *)s->private;
  #line 129 
  f = mvpp2_cls_flow_get(entry->flow);
  #line 130 
  if (f == (struct mvpp2_cls_flow *)0) 
                                       #line 131 
                                       return -22;
  #line 133 
  seq_printf(s,(char *)"%d\n",(int)f->flow_id);
  #line 135 
  return 0;
}

#line 138  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_debugfs.c"
static int mvpp2_dbgfs_flow_id_open(struct inode *inode, struct file *file)
{
  #line 138 
  return single_open(file,& mvpp2_dbgfs_flow_id_show,inode->i_private);
}

#line 138  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_debugfs.c"
static struct file_operations mvpp2_dbgfs_flow_id_fops = {.owner = & __this_module, .llseek = & seq_lseek, .read = & seq_read, .open = & mvpp2_dbgfs_flow_id_open, .release = & single_release};
#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_debugfs.c"
static int mvpp2_dbgfs_port_flow_hash_opt_show(struct seq_file *s, void *unused)
{
  #line 144 
  struct mvpp2_cls_flow_entry fe;
  #line 145 
  struct mvpp2_cls_flow *f;
  #line 146 
  int flow_index;
  #line 147 
  u16 hash_opts;
  #line 142 
  struct mvpp2_dbgfs_port_flow_entry *entry = (struct mvpp2_dbgfs_port_flow_entry *)s->private;
  #line 143 
  struct mvpp2_port *port = entry->port;
  #line 149 
  f = mvpp2_cls_flow_get((entry->dbg_fe)->flow);
  #line 150 
  if (f == (struct mvpp2_cls_flow *)0) 
                                       #line 151 
                                       return -22;
  #line 153 
  flow_index = (((int)f->flow_id + -8) * 21 + 17) + (int)(entry->port)->id;
  #line 155 
  mvpp2_cls_flow_read(port->priv,flow_index,& fe);
  #line 157 
  hash_opts = mvpp2_flow_get_hek_fields(& fe);
  #line 159 
  seq_printf(s,(char *)"0x%04x\n",(int)hash_opts);
  #line 161 
  return 0;
}

#line 164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_debugfs.c"
static int mvpp2_dbgfs_port_flow_hash_opt_open(struct inode *inode, struct file *file)
{
  #line 164 
  return single_open(file,& mvpp2_dbgfs_port_flow_hash_opt_show,
                  inode->i_private);
}

#line 164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_debugfs.c"
static struct file_operations mvpp2_dbgfs_port_flow_hash_opt_fops = {.owner = & __this_module, .llseek = & seq_lseek, .read = & seq_read, .open = & mvpp2_dbgfs_port_flow_hash_opt_open, .release = & single_release};
#line 166  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_debugfs.c"
static int mvpp2_dbgfs_port_flow_engine_show(struct seq_file *s, void *unused)
{
  #line 170 
  struct mvpp2_cls_flow_entry fe;
  #line 171 
  struct mvpp2_cls_flow *f;
  #line 172 
  int flow_index;
  #line 172 
  int engine;
  #line 168 
  struct mvpp2_dbgfs_port_flow_entry *entry = (struct mvpp2_dbgfs_port_flow_entry *)s->private;
  #line 169 
  struct mvpp2_port *port = entry->port;
  #line 174 
  f = mvpp2_cls_flow_get((entry->dbg_fe)->flow);
  #line 175 
  if (f == (struct mvpp2_cls_flow *)0) 
                                       #line 176 
                                       return -22;
  #line 178 
  flow_index = (((int)f->flow_id + -8) * 21 + 17) + (int)(entry->port)->id;
  #line 180 
  mvpp2_cls_flow_read(port->priv,flow_index,& fe);
  #line 182 
  engine = mvpp2_cls_flow_eng_get(& fe);
  #line 184 
  seq_printf(s,(char *)"%d\n",engine);
  #line 186 
  return 0;
}

#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_debugfs.c"
static int mvpp2_dbgfs_port_flow_engine_open(struct inode *inode, struct file *file)
{
  #line 189 
  return single_open(file,& mvpp2_dbgfs_port_flow_engine_show,inode->i_private);
}

#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_debugfs.c"
static struct file_operations mvpp2_dbgfs_port_flow_engine_fops = {.owner = & __this_module, .llseek = & seq_lseek, .read = & seq_read, .open = & mvpp2_dbgfs_port_flow_engine_open, .release = & single_release};
#line 191  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_debugfs.c"
static int mvpp2_dbgfs_flow_c2_hits_show(struct seq_file *s, void *unused)
{
  #line 194 
  u32 hits;
  #line 193 
  struct mvpp2_dbgfs_c2_entry *entry = (struct mvpp2_dbgfs_c2_entry *)s->private;
  #line 196 
  hits = mvpp2_cls_c2_hit_count(entry->priv,entry->id);
  #line 198 
  seq_printf(s,(char *)"%u\n",hits);
  #line 200 
  return 0;
}

#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_debugfs.c"
static int mvpp2_dbgfs_flow_c2_hits_open(struct inode *inode, struct file *file)
{
  #line 203 
  return single_open(file,& mvpp2_dbgfs_flow_c2_hits_show,inode->i_private);
}

#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_debugfs.c"
static struct file_operations mvpp2_dbgfs_flow_c2_hits_fops = {.owner = & __this_module, .llseek = & seq_lseek, .read = & seq_read, .open = & mvpp2_dbgfs_flow_c2_hits_open, .release = & single_release};
#line 205  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_debugfs.c"
static int mvpp2_dbgfs_flow_c2_rxq_show(struct seq_file *s, void *unused)
{
  #line 208 
  struct mvpp2_cls_c2_entry c2;
  #line 209 
  u8 qh;
  #line 209 
  u8 ql;
  #line 207 
  struct mvpp2_dbgfs_c2_entry *entry = (struct mvpp2_dbgfs_c2_entry *)s->private;
  #line 211 
  mvpp2_cls_c2_read(entry->priv,entry->id,& c2);
  #line 213 
  qh = (unsigned char)((unsigned int)((unsigned char)(c2.attr[0] >> 24)) & 31U);
  #line 216 
  ql = (unsigned char)((unsigned int)((unsigned char)(c2.attr[0] >> 21)) & 7U);
  #line 219 
  seq_printf(s,(char *)"%d\n",((int)qh << 3) | (int)ql);
  #line 221 
  return 0;
}

#line 224  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_debugfs.c"
static int mvpp2_dbgfs_flow_c2_rxq_open(struct inode *inode, struct file *file)
{
  #line 224 
  return single_open(file,& mvpp2_dbgfs_flow_c2_rxq_show,inode->i_private);
}

#line 224  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_debugfs.c"
static struct file_operations mvpp2_dbgfs_flow_c2_rxq_fops = {.owner = & __this_module, .llseek = & seq_lseek, .read = & seq_read, .open = & mvpp2_dbgfs_flow_c2_rxq_open, .release = & single_release};
#line 226  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_debugfs.c"
static int mvpp2_dbgfs_flow_c2_enable_show(struct seq_file *s, void *unused)
{
  #line 229 
  struct mvpp2_cls_c2_entry c2;
  #line 230 
  int enabled;
  #line 228 
  struct mvpp2_dbgfs_c2_entry *entry = (struct mvpp2_dbgfs_c2_entry *)s->private;
  #line 232 
  mvpp2_cls_c2_read(entry->priv,entry->id,& c2);
  #line 234 
  enabled = ((unsigned long)c2.attr[2] & 1073741824UL) != 0UL;
  #line 236 
  seq_printf(s,(char *)"%d\n",enabled);
  #line 238 
  return 0;
}

#line 241  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_debugfs.c"
static int mvpp2_dbgfs_flow_c2_enable_open(struct inode *inode, struct file *file)
{
  #line 241 
  return single_open(file,& mvpp2_dbgfs_flow_c2_enable_show,inode->i_private);
}

#line 241  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_debugfs.c"
static struct file_operations mvpp2_dbgfs_flow_c2_enable_fops = {.owner = & __this_module, .llseek = & seq_lseek, .read = & seq_read, .open = & mvpp2_dbgfs_flow_c2_enable_open, .release = & single_release};
#line 243  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_debugfs.c"
static int mvpp2_dbgfs_port_vid_show(struct seq_file *s, void *unused)
{
  #line 246 
  unsigned char byte[2U];
  #line 246 
  unsigned char enable[2U];
  #line 248 
  struct mvpp2_prs_entry pe;
  #line 249 
  unsigned long pmap;
  #line 250 
  u16 rvid;
  #line 251 
  int tid;
  #line 245 
  struct mvpp2_port *port = (struct mvpp2_port *)s->private;
  #line 247 
  struct mvpp2 *priv = port->priv;
  #line 253 
  tid = (int)port->id * 11 + 193;
  #line 253 
  while ((int)port->id * 11 + 202 >= tid) {
    {
      #line 255 
      mvpp2_prs_init_from_hw(priv,& pe,tid);
      #line 257 
      pmap = (unsigned long)mvpp2_prs_tcam_port_map_get(& pe);
      #line 259 
      if (! (priv->prs_shadow + (unsigned long)tid)->valid) 
                                                            #line 260 
                                                            goto __Cont;
      #line 262 
      if (! test_bit((long)port->id,& pmap)) 
                                             #line 263 
                                             goto __Cont;
      #line 265 
      mvpp2_prs_tcam_data_byte_get(& pe,2U,byte,enable);
      #line 266 
      mvpp2_prs_tcam_data_byte_get(& pe,3U,& byte[1],& enable[1]);
      #line 268 
      rvid = (unsigned short)(((unsigned int)((unsigned short)((int)byte[0] << 8)) & 3840U) + (unsigned int)((unsigned short)byte[1]));
      #line 270 
      seq_printf(s,(char *)"%u\n",(int)rvid);
    }
    #line 253 
    __Cont: 
            #line 254 
    tid ++;
  }
  #line 273 
  return 0;
}

#line 276  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_debugfs.c"
static int mvpp2_dbgfs_port_vid_open(struct inode *inode, struct file *file)
{
  #line 276 
  return single_open(file,& mvpp2_dbgfs_port_vid_show,inode->i_private);
}

#line 276  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_debugfs.c"
static struct file_operations mvpp2_dbgfs_port_vid_fops = {.owner = & __this_module, .llseek = & seq_lseek, .read = & seq_read, .open = & mvpp2_dbgfs_port_vid_open, .release = & single_release};
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_debugfs.c"
static int mvpp2_dbgfs_port_parser_show(struct seq_file *s, void *unused)
{
  #line 282 
  struct mvpp2_prs_entry pe;
  #line 283 
  unsigned long pmap;
  #line 284 
  int i;
  #line 280 
  struct mvpp2_port *port = (struct mvpp2_port *)s->private;
  #line 281 
  struct mvpp2 *priv = port->priv;
  #line 286 
  i = 0;
  #line 286 
  while (i <= 255) {
    {
      #line 287 
      mvpp2_prs_init_from_hw(port->priv,& pe,i);
      #line 289 
      pmap = (unsigned long)mvpp2_prs_tcam_port_map_get(& pe);
      #line 290 
      if ((int)(priv->prs_shadow + (unsigned long)i)->valid != 0) {
        #line 290 
        if ((int)test_bit((long)port->id,& pmap) != 0) 
                                                       #line 291 
                                                       seq_printf(s,(char *)"%03d\n",i);
      }
    }
    #line 286 
    i ++;
  }
  #line 294 
  return 0;
}

#line 297  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_debugfs.c"
static int mvpp2_dbgfs_port_parser_open(struct inode *inode, struct file *file)
{
  #line 297 
  return single_open(file,& mvpp2_dbgfs_port_parser_show,inode->i_private);
}

#line 297  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_debugfs.c"
static struct file_operations mvpp2_dbgfs_port_parser_fops = {.owner = & __this_module, .llseek = & seq_lseek, .read = & seq_read, .open = & mvpp2_dbgfs_port_parser_open, .release = & single_release};
#line 299  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_debugfs.c"
static int mvpp2_dbgfs_filter_show(struct seq_file *s, void *unused)
{
  #line 303 
  struct mvpp2_prs_entry pe;
  #line 304 
  unsigned long pmap;
  #line 305 
  int index;
  #line 305 
  int tid;
  #line 301 
  struct mvpp2_port *port = (struct mvpp2_port *)s->private;
  #line 302 
  struct mvpp2 *priv = port->priv;
  #line 307 
  tid = 113;
  #line 307 
  while (tid <= 192) {
    {
      #line 309 
      unsigned char da[6U];
      #line 309 
      unsigned char da_mask[6U];
      #line 311 
      if ((! (priv->prs_shadow + (unsigned long)tid)->valid || (priv->prs_shadow + (unsigned long)tid)->lu != 1) || (priv->prs_shadow + (unsigned long)tid)->udf != 0) 
        #line 314 
        goto __Cont;
      #line 316 
      mvpp2_prs_init_from_hw(priv,& pe,tid);
      #line 318 
      pmap = (unsigned long)mvpp2_prs_tcam_port_map_get(& pe);
      #line 321 
      if (! test_bit((long)port->id,& pmap)) 
                                             #line 322 
                                             goto __Cont;
      #line 325 
      index = 0;
      #line 325 
      while (index <= 5) {
        #line 326 
        mvpp2_prs_tcam_data_byte_get(& pe,(unsigned int)index,& da[index],& da_mask[index]);
        #line 325 
        index ++;
      }
      #line 329 
      seq_printf(s,(char *)"%pM\n",(unsigned char *)(& da));
    }
    #line 307 
    __Cont: 
            #line 308 
    tid ++;
  }
  #line 332 
  return 0;
}

#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_debugfs.c"
static int mvpp2_dbgfs_filter_open(struct inode *inode, struct file *file)
{
  #line 335 
  return single_open(file,& mvpp2_dbgfs_filter_show,inode->i_private);
}

#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_debugfs.c"
static struct file_operations mvpp2_dbgfs_filter_fops = {.owner = & __this_module, .llseek = & seq_lseek, .read = & seq_read, .open = & mvpp2_dbgfs_filter_open, .release = & single_release};
#line 337  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_debugfs.c"
static int mvpp2_dbgfs_prs_lu_show(struct seq_file *s, void *unused)
{
  #line 339 
  struct mvpp2_dbgfs_prs_entry *entry = (struct mvpp2_dbgfs_prs_entry *)s->private;
  #line 340 
  struct mvpp2 *priv = entry->priv;
  #line 342 
  seq_printf(s,(char *)"%x\n",(priv->prs_shadow + (unsigned long)entry->tid)->lu);
  #line 344 
  return 0;
}

#line 347  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_debugfs.c"
static int mvpp2_dbgfs_prs_lu_open(struct inode *inode, struct file *file)
{
  #line 347 
  return single_open(file,& mvpp2_dbgfs_prs_lu_show,inode->i_private);
}

#line 347  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_debugfs.c"
static struct file_operations mvpp2_dbgfs_prs_lu_fops = {.owner = & __this_module, .llseek = & seq_lseek, .read = & seq_read, .open = & mvpp2_dbgfs_prs_lu_open, .release = & single_release};
#line 349  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_debugfs.c"
static int mvpp2_dbgfs_prs_pmap_show(struct seq_file *s, void *unused)
{
  #line 352 
  struct mvpp2_prs_entry pe;
  #line 353 
  unsigned int pmap;
  #line 351 
  struct mvpp2_dbgfs_prs_entry *entry = (struct mvpp2_dbgfs_prs_entry *)s->private;
  #line 355 
  mvpp2_prs_init_from_hw(entry->priv,& pe,entry->tid);
  #line 357 
  pmap = mvpp2_prs_tcam_port_map_get(& pe);
  #line 358 
  pmap &= 255U;
  #line 360 
  seq_printf(s,(char *)"%02x\n",pmap);
  #line 362 
  return 0;
}

#line 365  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_debugfs.c"
static int mvpp2_dbgfs_prs_pmap_open(struct inode *inode, struct file *file)
{
  #line 365 
  return single_open(file,& mvpp2_dbgfs_prs_pmap_show,inode->i_private);
}

#line 365  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_debugfs.c"
static struct file_operations mvpp2_dbgfs_prs_pmap_fops = {.owner = & __this_module, .llseek = & seq_lseek, .read = & seq_read, .open = & mvpp2_dbgfs_prs_pmap_open, .release = & single_release};
#line 367  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_debugfs.c"
static int mvpp2_dbgfs_prs_ai_show(struct seq_file *s, void *unused)
{
  #line 370 
  struct mvpp2_prs_entry pe;
  #line 371 
  unsigned char ai;
  #line 371 
  unsigned char ai_mask;
  #line 369 
  struct mvpp2_dbgfs_prs_entry *entry = (struct mvpp2_dbgfs_prs_entry *)s->private;
  #line 373 
  mvpp2_prs_init_from_hw(entry->priv,& pe,entry->tid);
  #line 375 
  ai = (unsigned char)pe.tcam[4];
  #line 376 
  ai_mask = (unsigned char)(pe.tcam[4] >> 16);
  #line 378 
  seq_printf(s,(char *)"%02x %02x\n",(int)ai,(int)ai_mask);
  #line 380 
  return 0;
}

#line 383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_debugfs.c"
static int mvpp2_dbgfs_prs_ai_open(struct inode *inode, struct file *file)
{
  #line 383 
  return single_open(file,& mvpp2_dbgfs_prs_ai_show,inode->i_private);
}

#line 383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_debugfs.c"
static struct file_operations mvpp2_dbgfs_prs_ai_fops = {.owner = & __this_module, .llseek = & seq_lseek, .read = & seq_read, .open = & mvpp2_dbgfs_prs_ai_open, .release = & single_release};
#line 385  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_debugfs.c"
static int mvpp2_dbgfs_prs_hdata_show(struct seq_file *s, void *unused)
{
  #line 388 
  struct mvpp2_prs_entry pe;
  #line 389 
  unsigned char data[8U];
  #line 389 
  unsigned char mask[8U];
  #line 390 
  int i;
  #line 387 
  struct mvpp2_dbgfs_prs_entry *entry = (struct mvpp2_dbgfs_prs_entry *)s->private;
  #line 392 
  mvpp2_prs_init_from_hw(entry->priv,& pe,entry->tid);
  #line 394 
  i = 0;
  #line 394 
  while (i <= 7) {
    #line 395 
    mvpp2_prs_tcam_data_byte_get(& pe,(unsigned int)i,& data[i],& mask[i]);
    #line 394 
    i ++;
  }
  #line 397 
  seq_printf(s,(char *)"%*phN %*phN\n",8,(unsigned char *)(& data),8,(unsigned char *)(& mask));
  #line 399 
  return 0;
}

#line 402  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_debugfs.c"
static int mvpp2_dbgfs_prs_hdata_open(struct inode *inode, struct file *file)
{
  #line 402 
  return single_open(file,& mvpp2_dbgfs_prs_hdata_show,inode->i_private);
}

#line 402  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_debugfs.c"
static struct file_operations mvpp2_dbgfs_prs_hdata_fops = {.owner = & __this_module, .llseek = & seq_lseek, .read = & seq_read, .open = & mvpp2_dbgfs_prs_hdata_open, .release = & single_release};
#line 404  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_debugfs.c"
static int mvpp2_dbgfs_prs_sram_show(struct seq_file *s, void *unused)
{
  #line 407 
  struct mvpp2_prs_entry pe;
  #line 406 
  struct mvpp2_dbgfs_prs_entry *entry = (struct mvpp2_dbgfs_prs_entry *)s->private;
  #line 409 
  mvpp2_prs_init_from_hw(entry->priv,& pe,entry->tid);
  #line 411 
  seq_printf(s,(char *)"%*phN\n",14,(u32 *)(& pe.sram));
  #line 413 
  return 0;
}

#line 416  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_debugfs.c"
static int mvpp2_dbgfs_prs_sram_open(struct inode *inode, struct file *file)
{
  #line 416 
  return single_open(file,& mvpp2_dbgfs_prs_sram_show,inode->i_private);
}

#line 416  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_debugfs.c"
static struct file_operations mvpp2_dbgfs_prs_sram_fops = {.owner = & __this_module, .llseek = & seq_lseek, .read = & seq_read, .open = & mvpp2_dbgfs_prs_sram_open, .release = & single_release};
#line 418  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_debugfs.c"
static int mvpp2_dbgfs_prs_hits_show(struct seq_file *s, void *unused)
{
  #line 421 
  int val;
  #line 420 
  struct mvpp2_dbgfs_prs_entry *entry = (struct mvpp2_dbgfs_prs_entry *)s->private;
  #line 423 
  val = mvpp2_prs_hits(entry->priv,entry->tid);
  #line 424 
  if (val < 0) 
               #line 425 
               return val;
  #line 427 
  seq_printf(s,(char *)"%d\n",val);
  #line 429 
  return 0;
}

#line 432  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_debugfs.c"
static int mvpp2_dbgfs_prs_hits_open(struct inode *inode, struct file *file)
{
  #line 432 
  return single_open(file,& mvpp2_dbgfs_prs_hits_show,inode->i_private);
}

#line 432  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_debugfs.c"
static struct file_operations mvpp2_dbgfs_prs_hits_fops = {.owner = & __this_module, .llseek = & seq_lseek, .read = & seq_read, .open = & mvpp2_dbgfs_prs_hits_open, .release = & single_release};
#line 434  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_debugfs.c"
static int mvpp2_dbgfs_prs_valid_show(struct seq_file *s, void *unused)
{
  #line 436 
  struct mvpp2_dbgfs_prs_entry *entry = (struct mvpp2_dbgfs_prs_entry *)s->private;
  #line 437 
  struct mvpp2 *priv = entry->priv;
  #line 438 
  int tid = entry->tid;
  #line 440 
  seq_printf(s,(char *)"%d\n",(int)(priv->prs_shadow + (unsigned long)tid)->valid != 0);
  #line 442 
  return 0;
}

#line 445  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_debugfs.c"
static int mvpp2_dbgfs_prs_valid_open(struct inode *inode, struct file *file)
{
  #line 445 
  return single_open(file,& mvpp2_dbgfs_prs_valid_show,inode->i_private);
}

#line 445  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_debugfs.c"
static struct file_operations mvpp2_dbgfs_prs_valid_fops = {.owner = & __this_module, .llseek = & seq_lseek, .read = & seq_read, .open = & mvpp2_dbgfs_prs_valid_open, .release = & single_release};
#line 447  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_debugfs.c"
static int mvpp2_dbgfs_flow_port_init(struct dentry *parent, struct mvpp2_port *port, struct mvpp2_dbgfs_flow_entry *entry)
{
  #line 451 
  struct mvpp2_dbgfs_port_flow_entry *port_entry;
  #line 452 
  struct dentry *port_dir;
  #line 454 
  port_dir = cif_debugfs_create_dir((char *)(& (port->dev)->name),parent);
  #line 456 
  port_entry = & ((port->priv)->dbgfs_entries)->port_flow_entries[(int)port->id];
  #line 458 
  port_entry->port = port;
  #line 459 
  port_entry->dbg_fe = entry;
  #line 461 
  cif_debugfs_create_file((char *)"hash_opts",(unsigned short)292,port_dir,(void *)port_entry,& mvpp2_dbgfs_port_flow_hash_opt_fops);
  #line 464 
  cif_debugfs_create_file((char *)"engine",(unsigned short)292,port_dir,(void *)port_entry,& mvpp2_dbgfs_port_flow_engine_fops);
  #line 467 
  return 0;
}

#line 470  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_debugfs.c"
static int mvpp2_dbgfs_flow_entry_init(struct dentry *parent, struct mvpp2 *priv, int flow)
{
  #line 473 
  struct mvpp2_dbgfs_flow_entry *entry;
  #line 474 
  struct dentry *flow_entry_dir;
  #line 475 
  char flow_entry_name[10U];
  #line 476 
  int i;
  #line 476 
  int ret;
  #line 478 
  sprintf((char *)(& flow_entry_name),(char *)"%02d",flow);
  #line 480 
  flow_entry_dir = cif_debugfs_create_dir((char *)(& flow_entry_name),parent);
  #line 482 
  entry = & (priv->dbgfs_entries)->flow_entries[flow];
  #line 484 
  entry->flow = flow;
  #line 485 
  entry->priv = priv;
  #line 487 
  cif_debugfs_create_file((char *)"dec_hits",(unsigned short)292,flow_entry_dir,(void *)entry,& mvpp2_dbgfs_flow_dec_hits_fops);
  #line 490 
  cif_debugfs_create_file((char *)"type",(unsigned short)292,flow_entry_dir,(void *)entry,& mvpp2_dbgfs_flow_type_fops);
  #line 493 
  cif_debugfs_create_file((char *)"id",(unsigned short)292,flow_entry_dir,(void *)entry,& mvpp2_dbgfs_flow_id_fops);
  #line 497 
  i = 0;
  #line 497 
  while (priv->port_count > i) {
    #line 498 
    ret = mvpp2_dbgfs_flow_port_init(flow_entry_dir,priv->port_list[i],entry);
    #line 500 
    if (ret != 0) 
                  #line 501 
                  return ret;
    #line 497 
    i ++;
  }
  #line 504 
  return 0;
}

#line 507  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_debugfs.c"
static int mvpp2_dbgfs_flow_init(struct dentry *parent, struct mvpp2 *priv)
{
  #line 509 
  struct dentry *flow_dir;
  #line 510 
  int i;
  #line 510 
  int ret;
  #line 512 
  flow_dir = cif_debugfs_create_dir((char *)"flows",parent);
  #line 514 
  i = 0;
  #line 514 
  while (i <= 51) {
    #line 515 
    ret = mvpp2_dbgfs_flow_entry_init(flow_dir,priv,i);
    #line 516 
    if (ret != 0) 
                  #line 517 
                  return ret;
    #line 514 
    i ++;
  }
  #line 520 
  return 0;
}

#line 523  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_debugfs.c"
static int mvpp2_dbgfs_prs_entry_init(struct dentry *parent, struct mvpp2 *priv, int tid)
{
  #line 526 
  struct mvpp2_dbgfs_prs_entry *entry;
  #line 527 
  struct dentry *prs_entry_dir;
  #line 528 
  char prs_entry_name[10U];
  #line 530 
  if (tid > 255) 
                 #line 531 
                 return -22;
  #line 533 
  sprintf((char *)(& prs_entry_name),(char *)"%03d",tid);
  #line 535 
  prs_entry_dir = cif_debugfs_create_dir((char *)(& prs_entry_name),parent);
  #line 537 
  entry = & (priv->dbgfs_entries)->prs_entries[tid];
  #line 539 
  entry->tid = tid;
  #line 540 
  entry->priv = priv;
  #line 543 
  cif_debugfs_create_file((char *)"sram",(unsigned short)292,prs_entry_dir,(void *)entry,& mvpp2_dbgfs_prs_sram_fops);
  #line 546 
  cif_debugfs_create_file((char *)"valid",(unsigned short)420,prs_entry_dir,(void *)entry,& mvpp2_dbgfs_prs_valid_fops);
  #line 549 
  cif_debugfs_create_file((char *)"lookup_id",(unsigned short)420,prs_entry_dir,(void *)entry,& mvpp2_dbgfs_prs_lu_fops);
  #line 552 
  cif_debugfs_create_file((char *)"ai",(unsigned short)420,prs_entry_dir,(void *)entry,& mvpp2_dbgfs_prs_ai_fops);
  #line 555 
  cif_debugfs_create_file((char *)"header_data",(unsigned short)420,prs_entry_dir,(void *)entry,& mvpp2_dbgfs_prs_hdata_fops);
  #line 558 
  cif_debugfs_create_file((char *)"hits",(unsigned short)292,prs_entry_dir,(void *)entry,& mvpp2_dbgfs_prs_hits_fops);
  #line 561 
  cif_debugfs_create_file((char *)"pmap",(unsigned short)292,prs_entry_dir,(void *)entry,& mvpp2_dbgfs_prs_pmap_fops);
  #line 564 
  return 0;
}

#line 567  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_debugfs.c"
static int mvpp2_dbgfs_prs_init(struct dentry *parent, struct mvpp2 *priv)
{
  #line 569 
  struct dentry *prs_dir;
  #line 570 
  int i;
  #line 570 
  int ret;
  #line 572 
  prs_dir = cif_debugfs_create_dir((char *)"parser",parent);
  #line 574 
  i = 0;
  #line 574 
  while (i <= 255) {
    #line 575 
    ret = mvpp2_dbgfs_prs_entry_init(prs_dir,priv,i);
    #line 576 
    if (ret != 0) 
                  #line 577 
                  return ret;
    #line 574 
    i ++;
  }
  #line 580 
  return 0;
}

#line 583  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_debugfs.c"
static int mvpp2_dbgfs_c2_entry_init(struct dentry *parent, struct mvpp2 *priv, int id)
{
  #line 586 
  struct mvpp2_dbgfs_c2_entry *entry;
  #line 587 
  struct dentry *c2_entry_dir;
  #line 588 
  char c2_entry_name[10U];
  #line 590 
  if (id > 255) 
                #line 591 
                return -22;
  #line 593 
  sprintf((char *)(& c2_entry_name),(char *)"%03d",id);
  #line 595 
  c2_entry_dir = cif_debugfs_create_dir((char *)(& c2_entry_name),parent);
  #line 596 
  if (c2_entry_dir == (struct dentry *)0) 
                                          #line 597 
                                          return -12;
  #line 599 
  entry = & (priv->dbgfs_entries)->c2_entries[id];
  #line 601 
  entry->id = id;
  #line 602 
  entry->priv = priv;
  #line 604 
  cif_debugfs_create_file((char *)"hits",(unsigned short)292,c2_entry_dir,(void *)entry,& mvpp2_dbgfs_flow_c2_hits_fops);
  #line 607 
  cif_debugfs_create_file((char *)"default_rxq",(unsigned short)292,c2_entry_dir,(void *)entry,& mvpp2_dbgfs_flow_c2_rxq_fops);
  #line 610 
  cif_debugfs_create_file((char *)"rss_enable",(unsigned short)292,c2_entry_dir,(void *)entry,& mvpp2_dbgfs_flow_c2_enable_fops);
  #line 613 
  return 0;
}

#line 616  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_debugfs.c"
static int mvpp2_dbgfs_flow_tbl_entry_init(struct dentry *parent, struct mvpp2 *priv, int id)
{
  #line 619 
  struct mvpp2_dbgfs_flow_tbl_entry *entry;
  #line 620 
  struct dentry *flow_tbl_entry_dir;
  #line 621 
  char flow_tbl_entry_name[10U];
  #line 623 
  if (id > 511) 
                #line 624 
                return -22;
  #line 626 
  sprintf((char *)(& flow_tbl_entry_name),(char *)"%03d",id);
  #line 628 
  flow_tbl_entry_dir = cif_debugfs_create_dir((char *)(& flow_tbl_entry_name),parent);
  #line 629 
  if (flow_tbl_entry_dir == (struct dentry *)0) 
                                                #line 630 
                                                return -12;
  #line 632 
  entry = & (priv->dbgfs_entries)->flt_entries[id];
  #line 634 
  entry->id = id;
  #line 635 
  entry->priv = priv;
  #line 637 
  cif_debugfs_create_file((char *)"hits",(unsigned short)292,flow_tbl_entry_dir,(void *)entry,& mvpp2_dbgfs_flow_flt_hits_fops);
  #line 640 
  return 0;
}

#line 643  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_debugfs.c"
static int mvpp2_dbgfs_cls_init(struct dentry *parent, struct mvpp2 *priv)
{
  #line 645 
  struct dentry *cls_dir;
  #line 645 
  struct dentry *c2_dir;
  #line 645 
  struct dentry *flow_tbl_dir;
  #line 646 
  int i;
  #line 646 
  int ret;
  #line 648 
  cls_dir = cif_debugfs_create_dir((char *)"classifier",parent);
  #line 649 
  if (cls_dir == (struct dentry *)0) 
                                     #line 650 
                                     return -12;
  #line 652 
  c2_dir = cif_debugfs_create_dir((char *)"c2",cls_dir);
  #line 653 
  if (c2_dir == (struct dentry *)0) 
                                    #line 654 
                                    return -12;
  #line 656 
  i = 0;
  #line 656 
  while (i <= 255) {
    #line 657 
    ret = mvpp2_dbgfs_c2_entry_init(c2_dir,priv,i);
    #line 658 
    if (ret != 0) 
                  #line 659 
                  return ret;
    #line 656 
    i ++;
  }
  #line 662 
  flow_tbl_dir = cif_debugfs_create_dir((char *)"flow_table",cls_dir);
  #line 663 
  if (flow_tbl_dir == (struct dentry *)0) 
                                          #line 664 
                                          return -12;
  #line 666 
  i = 0;
  #line 666 
  while (i <= 511) {
    #line 667 
    ret = mvpp2_dbgfs_flow_tbl_entry_init(flow_tbl_dir,priv,i);
    #line 668 
    if (ret != 0) 
                  #line 669 
                  return ret;
    #line 666 
    i ++;
  }
  #line 672 
  return 0;
}

#line 675  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_debugfs.c"
static int mvpp2_dbgfs_port_init(struct dentry *parent, struct mvpp2_port *port)
{
  #line 678 
  struct dentry *port_dir;
  #line 680 
  port_dir = cif_debugfs_create_dir((char *)(& (port->dev)->name),parent);
  #line 682 
  cif_debugfs_create_file((char *)"parser_entries",(unsigned short)292,port_dir,(void *)port,& mvpp2_dbgfs_port_parser_fops);
  #line 685 
  cif_debugfs_create_file((char *)"mac_filter",(unsigned short)292,port_dir,(void *)port,& mvpp2_dbgfs_filter_fops);
  #line 688 
  cif_debugfs_create_file((char *)"vid_filter",(unsigned short)292,port_dir,(void *)port,& mvpp2_dbgfs_port_vid_fops);
  #line 691 
  return 0;
}

#line 694  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_debugfs.c"
void mvpp2_dbgfs_cleanup(struct mvpp2 *priv)
{
  #line 696 
  debugfs_remove_recursive(priv->dbgfs_dir);
  #line 698 
  kfree((void *)priv->dbgfs_entries);
  #line 699 
  return;
}

#line 701  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/marvell/mvpp2/mvpp2_debugfs.c"
void mvpp2_dbgfs_init(struct mvpp2 *priv, char *name)
{
  #line 703 
  struct dentry *mvpp2_dir;
  #line 703 
  struct dentry *mvpp2_root;
  #line 704 
  int ret;
  #line 704 
  int i;
  #line 706 
  mvpp2_root = debugfs_lookup((char *)"mvpp2",(struct dentry *)0);
  #line 707 
  if (mvpp2_root == (struct dentry *)0) 
                                        #line 708 
                                        mvpp2_root = cif_debugfs_create_dir((char *)"mvpp2",(struct dentry *)0);
  #line 710 
  mvpp2_dir = cif_debugfs_create_dir(name,mvpp2_root);
  #line 712 
  priv->dbgfs_dir = mvpp2_dir;
  #line 713 
  priv->dbgfs_entries = (struct mvpp2_dbgfs_entries *)kzalloc_1(17280UL,3264U);
  #line 714 
  if (priv->dbgfs_entries == (struct mvpp2_dbgfs_entries *)0) 
                                                              #line 715 
                                                              goto err;
  #line 717 
  ret = mvpp2_dbgfs_prs_init(mvpp2_dir,priv);
  #line 718 
  if (ret != 0) 
                #line 719 
                goto err;
  #line 721 
  ret = mvpp2_dbgfs_cls_init(mvpp2_dir,priv);
  #line 722 
  if (ret != 0) 
                #line 723 
                goto err;
  #line 725 
  i = 0;
  #line 725 
  while (priv->port_count > i) {
    #line 726 
    ret = mvpp2_dbgfs_port_init(mvpp2_dir,priv->port_list[i]);
    #line 727 
    if (ret != 0) 
                  #line 728 
                  goto err;
    #line 725 
    i ++;
  }
  #line 731 
  ret = mvpp2_dbgfs_flow_init(mvpp2_dir,priv);
  #line 732 
  if (ret != 0) 
                #line 733 
                goto err;
  #line 735 
  return;
  #line 736 
  err: 
       #line 736 
  ;
  #line 737 
  mvpp2_dbgfs_cleanup(priv);
  #line 738 
  return;
}

#line 93  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_debugfs.i.aux"
struct file_operations *emg_alias_mvpp2_dbgfs_filter_fops = & mvpp2_dbgfs_filter_fops;
#line 94  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_debugfs.i.aux"
struct file_operations *emg_alias_mvpp2_dbgfs_flow_c2_enable_fops = & mvpp2_dbgfs_flow_c2_enable_fops;
#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_debugfs.i.aux"
struct file_operations *emg_alias_mvpp2_dbgfs_flow_c2_hits_fops = & mvpp2_dbgfs_flow_c2_hits_fops;
#line 96  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_debugfs.i.aux"
struct file_operations *emg_alias_mvpp2_dbgfs_flow_c2_rxq_fops = & mvpp2_dbgfs_flow_c2_rxq_fops;
#line 97  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_debugfs.i.aux"
struct file_operations *emg_alias_mvpp2_dbgfs_flow_dec_hits_fops = & mvpp2_dbgfs_flow_dec_hits_fops;
#line 98  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_debugfs.i.aux"
struct file_operations *emg_alias_mvpp2_dbgfs_flow_flt_hits_fops = & mvpp2_dbgfs_flow_flt_hits_fops;
#line 99  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_debugfs.i.aux"
struct file_operations *emg_alias_mvpp2_dbgfs_flow_id_fops = & mvpp2_dbgfs_flow_id_fops;
#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_debugfs.i.aux"
struct file_operations *emg_alias_mvpp2_dbgfs_flow_type_fops = & mvpp2_dbgfs_flow_type_fops;
#line 101  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_debugfs.i.aux"
struct file_operations *emg_alias_mvpp2_dbgfs_port_flow_engine_fops = & mvpp2_dbgfs_port_flow_engine_fops;
#line 102  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_debugfs.i.aux"
struct file_operations *emg_alias_mvpp2_dbgfs_port_flow_hash_opt_fops = & mvpp2_dbgfs_port_flow_hash_opt_fops;
#line 103  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_debugfs.i.aux"
struct file_operations *emg_alias_mvpp2_dbgfs_port_parser_fops = & mvpp2_dbgfs_port_parser_fops;
#line 104  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_debugfs.i.aux"
struct file_operations *emg_alias_mvpp2_dbgfs_port_vid_fops = & mvpp2_dbgfs_port_vid_fops;
#line 105  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_debugfs.i.aux"
struct file_operations *emg_alias_mvpp2_dbgfs_prs_ai_fops = & mvpp2_dbgfs_prs_ai_fops;
#line 106  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_debugfs.i.aux"
struct file_operations *emg_alias_mvpp2_dbgfs_prs_hdata_fops = & mvpp2_dbgfs_prs_hdata_fops;
#line 107  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_debugfs.i.aux"
struct file_operations *emg_alias_mvpp2_dbgfs_prs_hits_fops = & mvpp2_dbgfs_prs_hits_fops;
#line 108  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_debugfs.i.aux"
struct file_operations *emg_alias_mvpp2_dbgfs_prs_lu_fops = & mvpp2_dbgfs_prs_lu_fops;
#line 109  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_debugfs.i.aux"
struct file_operations *emg_alias_mvpp2_dbgfs_prs_pmap_fops = & mvpp2_dbgfs_prs_pmap_fops;
#line 110  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_debugfs.i.aux"
struct file_operations *emg_alias_mvpp2_dbgfs_prs_sram_fops = & mvpp2_dbgfs_prs_sram_fops;
#line 111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_debugfs.i.aux"
struct file_operations *emg_alias_mvpp2_dbgfs_prs_valid_fops = & mvpp2_dbgfs_prs_valid_fops;
#line 112  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_debugfs.i.aux"
int (*emg_alias_single_release)(struct inode *, struct file *) = & single_release;
#line 116 
#line 116 
struct dentry *emg_debugfs_create_dir(char *arg0, struct dentry *arg1);
#line 117 
#line 117 
struct dentry *emg_debugfs_create_file(char *arg0, unsigned short arg1, struct dentry *arg2, void *arg3, struct file_operations *arg4);
#line 128  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_debugfs.i.aux"
int emg_wrapper_mvpp2_dbgfs_filter_open(struct inode *arg0, struct file *arg1)
{
  #line 129 
  return mvpp2_dbgfs_filter_open(arg0,arg1);
}

#line 133  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_debugfs.i.aux"
int emg_wrapper_mvpp2_dbgfs_flow_c2_enable_open(struct inode *arg0, struct file *arg1)
{
  #line 134 
  return mvpp2_dbgfs_flow_c2_enable_open(arg0,arg1);
}

#line 138  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_debugfs.i.aux"
int emg_wrapper_mvpp2_dbgfs_flow_c2_hits_open(struct inode *arg0, struct file *arg1)
{
  #line 139 
  return mvpp2_dbgfs_flow_c2_hits_open(arg0,arg1);
}

#line 143  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_debugfs.i.aux"
int emg_wrapper_mvpp2_dbgfs_flow_c2_rxq_open(struct inode *arg0, struct file *arg1)
{
  #line 144 
  return mvpp2_dbgfs_flow_c2_rxq_open(arg0,arg1);
}

#line 148  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_debugfs.i.aux"
int emg_wrapper_mvpp2_dbgfs_flow_dec_hits_open(struct inode *arg0, struct file *arg1)
{
  #line 149 
  return mvpp2_dbgfs_flow_dec_hits_open(arg0,arg1);
}

#line 153  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_debugfs.i.aux"
int emg_wrapper_mvpp2_dbgfs_flow_flt_hits_open(struct inode *arg0, struct file *arg1)
{
  #line 154 
  return mvpp2_dbgfs_flow_flt_hits_open(arg0,arg1);
}

#line 158  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_debugfs.i.aux"
int emg_wrapper_mvpp2_dbgfs_flow_id_open(struct inode *arg0, struct file *arg1)
{
  #line 159 
  return mvpp2_dbgfs_flow_id_open(arg0,arg1);
}

#line 163  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_debugfs.i.aux"
int emg_wrapper_mvpp2_dbgfs_flow_type_open(struct inode *arg0, struct file *arg1)
{
  #line 164 
  return mvpp2_dbgfs_flow_type_open(arg0,arg1);
}

#line 168  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_debugfs.i.aux"
int emg_wrapper_mvpp2_dbgfs_port_flow_engine_open(struct inode *arg0, struct file *arg1)
{
  #line 169 
  return mvpp2_dbgfs_port_flow_engine_open(arg0,arg1);
}

#line 173  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_debugfs.i.aux"
int emg_wrapper_mvpp2_dbgfs_port_flow_hash_opt_open(struct inode *arg0, struct file *arg1)
{
  #line 174 
  return mvpp2_dbgfs_port_flow_hash_opt_open(arg0,arg1);
}

#line 178  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_debugfs.i.aux"
int emg_wrapper_mvpp2_dbgfs_port_parser_open(struct inode *arg0, struct file *arg1)
{
  #line 179 
  return mvpp2_dbgfs_port_parser_open(arg0,arg1);
}

#line 183  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_debugfs.i.aux"
int emg_wrapper_mvpp2_dbgfs_port_vid_open(struct inode *arg0, struct file *arg1)
{
  #line 184 
  return mvpp2_dbgfs_port_vid_open(arg0,arg1);
}

#line 188  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_debugfs.i.aux"
int emg_wrapper_mvpp2_dbgfs_prs_ai_open(struct inode *arg0, struct file *arg1)
{
  #line 189 
  return mvpp2_dbgfs_prs_ai_open(arg0,arg1);
}

#line 193  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_debugfs.i.aux"
int emg_wrapper_mvpp2_dbgfs_prs_hdata_open(struct inode *arg0, struct file *arg1)
{
  #line 194 
  return mvpp2_dbgfs_prs_hdata_open(arg0,arg1);
}

#line 198  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_debugfs.i.aux"
int emg_wrapper_mvpp2_dbgfs_prs_hits_open(struct inode *arg0, struct file *arg1)
{
  #line 199 
  return mvpp2_dbgfs_prs_hits_open(arg0,arg1);
}

#line 203  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_debugfs.i.aux"
int emg_wrapper_mvpp2_dbgfs_prs_lu_open(struct inode *arg0, struct file *arg1)
{
  #line 204 
  return mvpp2_dbgfs_prs_lu_open(arg0,arg1);
}

#line 208  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_debugfs.i.aux"
int emg_wrapper_mvpp2_dbgfs_prs_pmap_open(struct inode *arg0, struct file *arg1)
{
  #line 209 
  return mvpp2_dbgfs_prs_pmap_open(arg0,arg1);
}

#line 213  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_debugfs.i.aux"
int emg_wrapper_mvpp2_dbgfs_prs_sram_open(struct inode *arg0, struct file *arg1)
{
  #line 214 
  return mvpp2_dbgfs_prs_sram_open(arg0,arg1);
}

#line 218  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_debugfs.i.aux"
int emg_wrapper_mvpp2_dbgfs_prs_valid_open(struct inode *arg0, struct file *arg1)
{
  #line 219 
  return mvpp2_dbgfs_prs_valid_open(arg0,arg1);
}

#line 483  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_debugfs.i.aux"
static void *kzalloc_1(size_t size, gfp_t flags)
{
  #line 486 
  return ldv_kzalloc(size,flags);
}

#line 804  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_debugfs.i.aux"
static struct dentry *cif_debugfs_create_dir(char *name, struct dentry *parent)
{
  #line 808 
  return emg_debugfs_create_dir(name,parent);
}

#line 812  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/0/concurrency safety/weaver/mvpp2_debugfs.i.aux"
static struct dentry *cif_debugfs_create_file(char *name, umode_t mode, struct dentry *parent, void *data, struct file_operations *fops)
{
  #line 816 
  return emg_debugfs_create_file(name,(unsigned short)((int)mode),parent,data,
                              fops);
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/common/inline_asm.c"
void ldv_inline_asm(void)
{
  #line 24 
  return;
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_add(int i, atomic_t *v)
{
  #line 22 
  v->counter += i;
  #line 23 
  return;
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_sub(int i, atomic_t *v)
{
  #line 27 
  v->counter -= i;
  #line 28 
  return;
}

#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_sub_and_test(int i, atomic_t *v)
{
  #line 32 
  v->counter -= i;
  #line 33 
  if (v->counter != 0) 
                       #line 34 
                       return 0;
  #line 36 
  return 1;
}

#line 39  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_inc(atomic_t *v)
{
  #line 41 
  (v->counter) ++;
  #line 42 
  return;
}

#line 44  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_dec(atomic_t *v)
{
  #line 46 
  (v->counter) --;
  #line 47 
  return;
}

#line 49  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_dec_and_test(atomic_t *v)
{
  #line 51 
  (v->counter) --;
  #line 52 
  if (v->counter != 0) 
                       #line 53 
                       return 0;
  #line 55 
  return 1;
}

#line 58  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_inc_and_test(atomic_t *v)
{
  #line 60 
  (v->counter) ++;
  #line 61 
  if (v->counter != 0) 
                       #line 62 
                       return 0;
  #line 64 
  return 1;
}

#line 67  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_add_return(int i, atomic_t *v)
{
  #line 69 
  v->counter += i;
  #line 70 
  return v->counter;
}

#line 73  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_add_negative(int i, atomic_t *v)
{
  #line 75 
  v->counter += i;
  #line 76 
  return v->counter < 0;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_inc_short(short *v)
{
  #line 81 
  *v = (short)((unsigned int)*v + 1U);
  #line 82 
  return (int)*v;
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/current.c"
static struct task_struct ldv_current;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/current.c"
struct task_struct *ldv_get_current(void)
{
  #line 28 
  ldv_current.pid = 1;
  #line 29 
  return & ldv_current;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_interrupt_context(void);
#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_process_context(void);
#line 50  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
bool ldv_in_interrupt_context(void);
#line 112  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_init(int init_ret_val);
#line 132  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_probe(int probe_ret_val);
#line 133  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 133 
void ldv_check_return_value_probe(int);
#line 141 
#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_filter_err_code(int ret_val);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
#line 23 
void __VERIFIER_assume(int);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
static bool __ldv_in_interrupt_context = (_Bool)0;
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_interrupt_context(void)
{
  #line 31 
  __ldv_in_interrupt_context = (_Bool)1;
  #line 32 
  return;
}

#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_process_context(void)
{
  #line 37 
  __ldv_in_interrupt_context = (_Bool)0;
  #line 38 
  return;
}

#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
bool ldv_in_interrupt_context(void)
{
  #line 42 
  return __ldv_in_interrupt_context;
}

#line 45  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
static int ldv_filter_positive_int(int val)
{
  #line 47 
  __VERIFIER_assume(val <= 0);
  #line 48 
  return val;
}

#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_init(int init_ret_val)
{
  #line 57 
  return ldv_filter_positive_int(init_ret_val);
}

#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_probe(int probe_ret_val)
{
  #line 63 
  ldv_check_return_value_probe(probe_ret_val);
  #line 64 
  return ldv_filter_positive_int(probe_ret_val);
}

#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_filter_err_code(int ret_val)
{
  #line 70 
  return ldv_filter_positive_int(ret_val);
}

#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/common/list.h"
#line 28 
void ldv_save_allocated_memory_to_list(void *);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
void *ldv_dev_get_drvdata(struct device *dev);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
int ldv_dev_set_drvdata(struct device *dev, void *data);
#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 57 
void *ldv_xzalloc(size_t size);
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
void *ldv_dev_get_drvdata(struct device *dev)
{
  #line 31 
  if (dev != (struct device *)0 && dev->p != (struct device_private *)0) 
    #line 32 
    return (dev->p)->driver_data;
  #line 34 
  return (void *)0;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
int ldv_dev_set_drvdata(struct device *dev, void *data)
{
  #line 45 
  dev->p = (struct device_private *)ldv_xzalloc(8UL);
  #line 46 
  ldv_save_allocated_memory_to_list((void *)dev->p);
  #line 47 
  (dev->p)->driver_data = data;
  #line 49 
  return 0;
}

#line 156  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 156 
void ldv_check_alloc_flags(gfp_t);
#line 48  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 48 
void *ldv_malloc(size_t size);
#line 49 
#line 49 
void *ldv_calloc(size_t nmemb, size_t size);
#line 50 
#line 50 
void *ldv_zalloc(size_t size);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kmalloc(size_t size, gfp_t flags)
{
  #line 26 
  void *res;
  #line 28 
  ldv_check_alloc_flags(flags);
  #line 29 
  res = ldv_malloc(size);
  #line 30 
  ldv_save_allocated_memory_to_list(res);
  #line 32 
  return res;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kzalloc(size_t size, gfp_t flags)
{
  #line 37 
  void *res;
  #line 39 
  ldv_check_alloc_flags(flags);
  #line 40 
  res = ldv_zalloc(size);
  #line 41 
  ldv_save_allocated_memory_to_list(res);
  #line 43 
  return res;
}

#line 46  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kmalloc_array(size_t n, size_t size, gfp_t flags)
{
  #line 48 
  void *res;
  #line 50 
  ldv_check_alloc_flags(flags);
  #line 51 
  res = ldv_malloc(n * size);
  #line 52 
  ldv_save_allocated_memory_to_list(res);
  #line 54 
  return res;
}

#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kcalloc(size_t n, size_t size, gfp_t flags)
{
  #line 59 
  void *res;
  #line 61 
  ldv_check_alloc_flags(flags);
  #line 62 
  res = ldv_calloc(n,size);
  #line 63 
  ldv_save_allocated_memory_to_list(res);
  #line 65 
  return res;
}

#line 51  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 51 
void ldv_free(void *s);
#line 59 
#line 59 
void *ldv_malloc_unknown_size(void);
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 31 
int ldv_undef_int_positive(void);
#line 40 
#line 40 
int ldv_undef_int_nonpositive(void);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/firmware_loader.c"
int ldv_request_firmware(struct firmware **fw)
{
  #line 27 
  int retval;
  #line 26 
  struct firmware *_fw = (struct firmware *)0;
  #line 29 
  retval = ldv_undef_int_nonpositive();
  #line 31 
  if (retval == 0) {
    #line 33 
    _fw = (struct firmware *)ldv_xzalloc(32UL);
    #line 34 
    _fw->data = (u8 *)ldv_malloc_unknown_size();
    #line 35 
    __VERIFIER_assume(_fw->data != (u8 *)0U);
    #line 36 
    _fw->size = (unsigned long)ldv_undef_int_positive();
  }
  #line 39 
  *fw = _fw;
  #line 41 
  return retval;
}

#line 44  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/firmware_loader.c"
void ldv_release_firmware(struct firmware *fw)
{
  #line 46 
  if (fw != (struct firmware *)0) {
    #line 48 
    ldv_free((void *)fw->data);
    #line 49 
    ldv_free((void *)fw);
  }
  #line 51 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/i2c.h"
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/i2c/i2c-core-smbus.c"
s32 ldv_i2c_smbus_read_block_data(u8 *values);
#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 55 
void *ldv_xmalloc(size_t size);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 23 
int ldv_undef_int(void);
#line 34 
#line 34 
int ldv_undef_int_negative(void);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/i2c/i2c-core-smbus.c"
s32 ldv_i2c_smbus_read_block_data(u8 *values)
{
  #line 27 
  __u8 size;
  #line 28 
  char *bytes;
  #line 30 
  if (ldv_undef_int() != 0) {
    #line 33 
    size = (unsigned char)ldv_undef_int_positive();
    #line 35 
    __VERIFIER_assume((unsigned int)size <= 32U);
    #line 37 
    bytes = (char *)ldv_xmalloc((unsigned long)size);
    #line 39 
    memcpy((void *)values,(void *)bytes,(unsigned long)size);
    #line 40 
    ldv_free((void *)bytes);
    #line 42 
    return (int)size;
  }
  else {
    #line 46 
    return ldv_undef_int_negative();
  }
}

#line 988  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
__inline static void v4l2_set_subdevdata(struct v4l2_subdev *sd, void *p)
{
  #line 990 
  sd->dev_priv = p;
  #line 991 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/media/v4l2-common.h"
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/media/v4l2-core/v4l2-i2c.c"
void ldv_v4l2_i2c_subdev_init(struct v4l2_subdev *sd, struct i2c_client *client, struct v4l2_subdev_ops *ops);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/media/v4l2-core/v4l2-i2c.c"
void ldv_v4l2_i2c_subdev_init(struct v4l2_subdev *sd, struct i2c_client *client, struct v4l2_subdev_ops *ops)
{
  #line 26 
  sd->ops = ops;
  #line 27 
  v4l2_set_subdevdata(sd,(void *)client);
  #line 28 
  ldv_dev_set_drvdata(& client->dev,(void *)sd);
  #line 29 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/spi.c"
struct spi_controller *ldv_spi_alloc_master(struct device *host, unsigned int size)
{
  #line 25 
  struct spi_controller *master;
  #line 27 
  master = (struct spi_controller *)ldv_zalloc((unsigned long)size + 2936UL);
  #line 29 
  if (master == (struct spi_controller *)0) 
                                            #line 30 
                                            return (struct spi_controller *)0;
  #line 32 
  ldv_dev_set_drvdata(& master->dev,(void *)(master + 1U));
  #line 34 
  return master;
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/fb.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
struct fb_info *ldv_framebuffer_alloc(size_t size);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/fb.h"
#line 38  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
void ldv_framebuffer_release(struct fb_info *info);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
struct fb_info *ldv_framebuffer_alloc(size_t size)
{
  #line 25 
  struct fb_info *info;
  #line 27 
  info = (struct fb_info *)ldv_zalloc(size + 1568UL);
  #line 29 
  if (info == (struct fb_info *)0) 
                                   #line 30 
                                   return (struct fb_info *)0;
  #line 32 
  if (size != 0UL) 
                   #line 33 
                   info->par = (void *)((char *)info + 1568UL);
  #line 35 
  return info;
}

#line 38  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
void ldv_framebuffer_release(struct fb_info *info)
{
  #line 40 
  if (info == (struct fb_info *)0) 
                                   #line 41 
                                   return;
  #line 44 
  ldv_free((void *)info->apertures);
  #line 46 
  ldv_free((void *)info);
  #line 47 
  return;
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
void *ldv_err_ptr(long error);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err(void *ptr)
{
  #line 29 
  if ((unsigned long)ptr > 18446744073709547520UL) 
                                                   #line 30 
                                                   return (_Bool)1; else 
                                                                    #line 32 
                                                                    return (_Bool)0;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
void *ldv_err_ptr(long error)
{
  #line 37 
  unsigned long result;
  #line 39 
  __VERIFIER_assume(error < 0L);
  #line 40 
  __VERIFIER_assume(error >= -4095L);
  #line 41 
  result = 18446744073709547520UL - (unsigned long)error;
  #line 42 
  __VERIFIER_assume(result > 18446744073709547520UL);
  #line 44 
  return (void *)result;
}

#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
long ldv_ptr_err(void *ptr)
{
  #line 49 
  long result;
  #line 51 
  __VERIFIER_assume((unsigned long)ptr > 18446744073709547520UL);
  #line 52 
  result = (long)(18446744073709547520UL - (unsigned long)ptr);
  #line 53 
  __VERIFIER_assume(result < 0L);
  #line 54 
  __VERIFIER_assume(result >= -4095L);
  #line 56 
  return result;
}

#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err_or_null(void *ptr)
{
  #line 61 
  int tmp_0;
  #line 61 
  if (ptr == (void *)0) 
                        #line 61 
                        tmp_0 = 1;
  else {
    #line 61 
    if ((int)ldv_is_err(ptr) != 0) 
                                   #line 61 
                                   tmp_0 = 1; else 
                                                   #line 61 
                                                   tmp_0 = 0;
  }
  #line 61 
  return (_Bool)(tmp_0 != 0);
}

#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/panic.h"
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/kernel/panic.c"
void ldv_panic(void);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/kernel/panic.c"
void ldv_panic(void)
{
  #line 23 
  __VERIFIER_assume(0);
  #line 24 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_set(unsigned long *map, unsigned int start, int nbits);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_clear(unsigned long *map, unsigned int start, int nbits);
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 78  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
unsigned long ldv_bitmap_find_next_zero_area(unsigned long *map, unsigned long size, unsigned long start, unsigned int nr, unsigned long align_mask);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 23 
unsigned long ldv_find_next_zero_bit(unsigned long *addr, unsigned long size, unsigned long offset);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_set_bit(long nr, unsigned long *addr)
{
  #line 24 
  *(addr + (unsigned long)nr / 64UL) |= 1UL << ((unsigned long)nr & 63UL);
  #line 25 
  return;
}

#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_clear_bit(long nr, unsigned long *addr)
{
  #line 29 
  *(addr + (unsigned long)nr / 64UL) &= ~ (1UL << ((unsigned long)nr & 63UL));
  #line 30 
  return;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_set(unsigned long *map, unsigned int start, int nbits)
{
  #line 34 
  unsigned long *p = map + (unsigned long)(start / 64U);
  #line 35 
  unsigned int size = start + (unsigned int)nbits;
  #line 36 
  int bits_to_set = (int)(64U - (start & 63U));
  #line 37 
  unsigned long mask_to_set = 18446744073709551615UL << ((unsigned long)start & 63UL);
  #line 39 
  while (nbits - bits_to_set >= 0) {
    #line 40 
    *p |= mask_to_set;
    #line 41 
    nbits -= bits_to_set;
    #line 42 
    bits_to_set = 64;
    #line 43 
    mask_to_set = 18446744073709551615UL;
    #line 44 
    p ++;
  }
  #line 46 
  if (nbits != 0) {
    #line 47 
    mask_to_set = (18446744073709551615UL >> ((unsigned long)(- size) & 63UL)) & mask_to_set;
    #line 48 
    *p |= mask_to_set;
  }
  #line 50 
  return;
}

#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_clear(unsigned long *map, unsigned int start, int nbits)
{
  #line 54 
  unsigned long *p = map + (unsigned long)(start / 64U);
  #line 55 
  unsigned int size = start + (unsigned int)nbits;
  #line 56 
  int bits_to_clear = (int)(64U - (start & 63U));
  #line 57 
  unsigned long mask_to_clear = 18446744073709551615UL << ((unsigned long)start & 63UL);
  #line 59 
  while (nbits - bits_to_clear >= 0) {
    #line 60 
    *p &= ~ mask_to_clear;
    #line 61 
    nbits -= bits_to_clear;
    #line 62 
    bits_to_clear = 64;
    #line 63 
    mask_to_clear = 18446744073709551615UL;
    #line 64 
    p ++;
  }
  #line 66 
  if (nbits != 0) {
    #line 67 
    mask_to_clear = (18446744073709551615UL >> ((unsigned long)(- size) & 63UL)) & mask_to_clear;
    #line 68 
    *p &= ~ mask_to_clear;
  }
  #line 70 
  return;
}

#line 72  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_zero(unsigned long *dst, unsigned int nbits)
{
  #line 74 
  unsigned int len = (unsigned int)(((unsigned long)nbits + 63UL) / 64UL) * 8U;
  #line 75 
  memset((void *)dst,0,(unsigned long)len);
  #line 76 
  return;
}

#line 78  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
unsigned long ldv_bitmap_find_next_zero_area(unsigned long *map, unsigned long size, unsigned long start, unsigned int nr, unsigned long align_mask)
{
  #line 80 
  unsigned long index;
  #line 80 
  unsigned long end;
  #line 80 
  unsigned long i;
  #line 82 
  again: 
         #line 82 
  ;
  #line 83 
  index = ldv_find_next_zero_bit(map,size,start);
  #line 84 
  index = (index + align_mask) & ~ align_mask;
  #line 85 
  end = (unsigned long)nr + index;
  #line 87 
  if (end > size) 
                  #line 88 
                  return end;
  #line 90 
  i = ldv_find_next_bit(map,end,index);
  #line 92 
  if (i < end) {
    #line 93 
    start = i + 1UL;
    #line 94 
    goto again;
  }
  #line 97 
  return index;
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 25 
void ldv_check_find_bit_offset(unsigned long, unsigned long);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_ffs(unsigned long word)
{
  #line 23 
  int num = 0;
  #line 25 
  if ((word & 4294967295UL) == 0UL) {
    #line 26 
    num += 32;
    #line 27 
    word >>= 32;
  }
  #line 29 
  if ((word & 65535UL) == 0UL) {
    #line 30 
    num += 16;
    #line 31 
    word >>= 16;
  }
  #line 33 
  if ((word & 255UL) == 0UL) {
    #line 34 
    num += 8;
    #line 35 
    word >>= 8;
  }
  #line 37 
  if ((word & 15UL) == 0UL) {
    #line 38 
    num += 4;
    #line 39 
    word >>= 4;
  }
  #line 41 
  if ((word & 3UL) == 0UL) {
    #line 42 
    num += 2;
    #line 43 
    word >>= 2;
  }
  #line 45 
  if ((word & 1UL) == 0UL) 
                           #line 46 
                           num ++;
  #line 48 
  return (unsigned long)num;
}

#line 51  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_min(unsigned long a, unsigned long b)
{
  #line 53 
  if (a < b) 
             #line 54 
             return a;
  #line 56 
  return b;
}

#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_restrict_find_bit_res(unsigned long res, unsigned long size)
{
  #line 62 
  __VERIFIER_assume(1);
  #line 63 
  __VERIFIER_assume(res <= size);
  #line 65 
  return res;
}

#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_first_bit(unsigned long *addr, unsigned long size)
{
  #line 70 
  unsigned long i;
  #line 72 
  i = 0UL;
  #line 72 
  while (i * 64UL < size) {
    #line 73 
    if (*(addr + i) != 0UL) {
      #line 74 
      ;
      #line 74 
      ;
      #line 74 
      ;
      #line 74 
      return ldv_restrict_find_bit_res(ldv_min(i * 64UL + ldv_ffs(*(addr + i)),size),
                                  size);
    }
    #line 72 
    i ++;
  }
  #line 76 
  return size;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_next_bit(unsigned long *addr, unsigned long size, unsigned long offset)
{
  #line 81 
  unsigned long tmp;
  #line 83 
  ldv_check_find_bit_offset(size,offset);
  #line 85 
  tmp = *(addr + offset / 64UL);
  #line 86 
  tmp = (unsigned long)((18446744073709551615ULL << (offset & 63UL)) & (unsigned long long)tmp);
  #line 87 
  offset &= 18446744073709551552UL;
  #line 89 
  while (tmp == 0UL) {
    #line 90 
    offset += 64UL;
    #line 91 
    if (offset >= size) 
                        #line 92 
                        return size;
    #line 94 
    tmp = *(addr + offset / 64UL);
  }
  #line 97 
  ;
  #line 97 
  ;
  #line 97 
  ;
  #line 97 
  return ldv_restrict_find_bit_res(ldv_min(ldv_ffs(tmp) + offset,size),size);
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_next_zero_bit(unsigned long *addr, unsigned long size, unsigned long offset)
{
  #line 102 
  unsigned long tmp;
  #line 104 
  ldv_check_find_bit_offset(size,offset);
  #line 106 
  tmp = *(addr + offset / 64UL);
  #line 107 
  tmp = ~ tmp;
  #line 108 
  tmp = (unsigned long)((18446744073709551615ULL << (offset & 63UL)) & (unsigned long long)tmp);
  #line 109 
  offset &= 18446744073709551552UL;
  #line 111 
  while (tmp == 0UL) {
    #line 112 
    offset += 64UL;
    #line 113 
    if (offset >= size) 
                        #line 114 
                        return size;
    #line 116 
    tmp = *(addr + offset / 64UL);
    #line 117 
    tmp = ~ tmp;
  }
  #line 120 
  ;
  #line 120 
  ;
  #line 120 
  ;
  #line 120 
  return ldv_restrict_find_bit_res(ldv_min(ldv_ffs(tmp) + offset,size),size);
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
size_t ldv_strlen(char *s);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strcmp(char *cs, char *ct);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strncmp(char *cs, char *ct, __kernel_size_t count);
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 70  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
char *ldv_strstr(char *cs, char *ct);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
size_t ldv_strlen(char *s)
{
  #line 23 
  unsigned int len = 0U;
  #line 25 
  while ((int)*s != 0) {
    #line 26 
    len ++;
    #line 25 
    s ++;
  }
  #line 28 
  return (unsigned long)len;
}

#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strcmp(char *cs, char *ct)
{
  #line 33 
  while ((int)*cs != 0 && (int)*ct != 0) {
    #line 34 
    if ((int)*cs != (int)*ct) 
                              #line 35 
                              break;
    #line 33 
    cs ++;
    #line 33 
    ct ++;
  }
  #line 37 
  return (int)*cs - (int)*ct;
}

#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strncmp(char *cs, char *ct, __kernel_size_t count)
{
  #line 42 
  if (count == 0UL) 
                    #line 43 
                    return 0;
  #line 45 
  while ((int)*cs != 0 && (int)*ct != 0) {
    #line 46 
    if ((int)*cs != (int)*ct) 
                              #line 47 
                              break;
    #line 49 
    count --;
    #line 51 
    if (count == 0UL) 
                      #line 52 
                      break;
    #line 45 
    cs ++;
    #line 45 
    ct ++;
  }
  #line 55 
  return (int)*cs - (int)*ct;
}

#line 58  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_memcmp(void *cs, void *ct, size_t count)
{
  #line 60 
  unsigned char *su1;
  #line 60 
  unsigned char *su2;
  #line 61 
  int res = 0;
  #line 63 
  su1 = (unsigned char *)cs;
  #line 63 
  su2 = (unsigned char *)ct;
  #line 63 
  while (count != 0UL) {
    #line 64 
    res = (int)*su1 - (int)*su2;
    #line 64 
    if (res != 0) 
                  #line 65 
                  break;
    #line 63 
    su1 ++;
    #line 63 
    su2 ++;
    #line 63 
    count --;
  }
  #line 67 
  return res;
}

#line 70  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
char *ldv_strstr(char *cs, char *ct)
{
  #line 72 
  size_t cs_len;
  #line 72 
  size_t ct_len;
  #line 74 
  cs_len = ldv_strlen(cs);
  #line 75 
  ct_len = ldv_strlen(ct);
  #line 77 
  while (cs_len >= ct_len) {
    #line 78 
    if (ldv_memcmp((void *)cs,(void *)ct,ct_len) == 0) 
                                                       #line 79 
                                                       return cs;
    #line 81 
    cs_len --;
    #line 82 
    cs ++;
  }
  #line 85 
  return (char *)0;
}

#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/list.c"
void ldv_init_list_head(struct list_head *list)
{
  #line 23 
  list->next = list;
  #line 24 
  list->prev = list;
  #line 25 
  return;
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kcalloc(size_t n, size_t size, gfp_t flags);
#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct kmem_cache *ldv_kmem_cache_create(char *name, unsigned int size);
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_alloc(struct kmem_cache *cachep, gfp_t flags);
#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_zalloc(struct kmem_cache *cachep, gfp_t flags);
#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_free(struct kmem_cache *cachep, void *objp);
#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_destroy(struct kmem_cache *cachep);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc(size_t size, gfp_t flags)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_flags(flags);
  #line 28 
  res = ldv_malloc(size);
  #line 30 
  return res;
}

#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kzalloc(size_t size, gfp_t flags)
{
  #line 35 
  void *res;
  #line 37 
  ldv_check_alloc_flags(flags);
  #line 38 
  res = ldv_zalloc(size);
  #line 40 
  return res;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc_array(size_t n, size_t size, gfp_t flags)
{
  #line 45 
  void *res;
  #line 47 
  ldv_check_alloc_flags(flags);
  #line 48 
  res = ldv_malloc(n * size);
  #line 50 
  return res;
}

#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kcalloc(size_t n, size_t size, gfp_t flags)
{
  #line 55 
  void *res;
  #line 57 
  ldv_check_alloc_flags(flags);
  #line 58 
  res = ldv_calloc(n,size);
  #line 60 
  return res;
}

#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct kmem_cache *ldv_kmem_cache_create(char *name, unsigned int size)
{
  #line 71 
  struct kmem_cache *res;
  #line 72 
  struct ldv_kmem_cache *ldv_res;
  #line 74 
  res = (struct kmem_cache *)ldv_zalloc(16UL);
  #line 76 
  if (res != (struct kmem_cache *)0) {
    #line 77 
    ldv_res = (struct ldv_kmem_cache *)res;
    #line 78 
    ldv_res->name = name;
    #line 79 
    ldv_res->size = size;
  }
  #line 82 
  return res;
}

#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_alloc(struct kmem_cache *cachep, gfp_t flags)
{
  #line 87 
  return ldv_kmalloc((unsigned long)((struct ldv_kmem_cache *)cachep)->size,
                  flags);
}

#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_zalloc(struct kmem_cache *cachep, gfp_t flags)
{
  #line 92 
  return ldv_kzalloc((unsigned long)((struct ldv_kmem_cache *)cachep)->size,
                  flags);
}

#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_free(struct kmem_cache *cachep, void *objp)
{
  #line 97 
  ldv_free(objp);
  #line 98 
  return;
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_destroy(struct kmem_cache *cachep)
{
  #line 102 
  ldv_free((void *)cachep);
  #line 103 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/util.c"
void *ldv_kmemdup(void *src, size_t len, gfp_t gfp);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/util.c"
void *ldv_kmemdup(void *src, size_t len, gfp_t gfp)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_flags(gfp);
  #line 28 
  res = ldv_malloc(len);
  #line 30 
  if (res != (void *)0) 
                        #line 31 
                        memcpy(res,src,len);
  #line 33 
  return res;
}

#line 162  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 162 
void ldv_check_alloc_nonatomic(void);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/vmalloc.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vmalloc(unsigned long size);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/vmalloc.h"
#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vzalloc(unsigned long size);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/vmalloc.h"
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void ldv_vfree(void *addr);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vmalloc(unsigned long size)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_nonatomic();
  #line 28 
  res = ldv_malloc(size);
  #line 30 
  return res;
}

#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vzalloc(unsigned long size)
{
  #line 35 
  void *res;
  #line 37 
  ldv_check_alloc_nonatomic();
  #line 38 
  res = ldv_zalloc(size);
  #line 40 
  return res;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void ldv_vfree(void *addr)
{
  #line 45 
  ldv_free(addr);
  #line 46 
  return;
}

#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 28 
void *malloc(size_t);
#line 29 
#line 29 
void *calloc(size_t, size_t);
#line 30 
#line 30 
void free(void *);
#line 45 
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
unsigned int ldv_is_memory_alloc_failures;
#line 56  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xcalloc(size_t nmemb, size_t size);
#line 60  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc_unknown_size(void);
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 97  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc_unknown_size(void);
#line 64  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc(size_t size);
#line 65  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc(size_t nmemb, size_t size);
#line 66  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc(size_t size);
#line 67  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void ldv_reference_free(void *s);
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_realloc(void *ptr, size_t size);
#line 71  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 80  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc(size_t size);
#line 72  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xcalloc(size_t nmemb, size_t size);
#line 73  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xzalloc(size_t size);
#line 75  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 110  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc_unknown_size(void);
#line 76  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 124  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc_unknown_size(void);
#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc_unknown_size(void);
#line 83  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 106  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc_unknown_size(size_t size);
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 144  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc_unknown_size(size_t size);
#line 87  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 87 
void *external_allocated_data(void);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
unsigned int ldv_is_memory_alloc_failures = 1U;
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc(size_t size)
{
  #line 26 
  void *res;
  #line 28 
  if (ldv_is_memory_alloc_failures != 0U) {
    #line 28 
    if (ldv_undef_int() != 0) 
                              #line 29 
                              return (void *)0;
  }
  #line 32 
  res = malloc(size);
  #line 33 
  __VERIFIER_assume(res != (void *)0);
  #line 34 
  return res;
}

#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc(size_t nmemb, size_t size)
{
  #line 39 
  return calloc(nmemb,size);
}

#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc(size_t size)
{
  #line 44 
  return calloc(1UL,size);
}

#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void ldv_reference_free(void *s)
{
  #line 49 
  free(s);
  #line 50 
  return;
}

#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_realloc(void *ptr, size_t size)
{
  #line 54 
  void *res;
  #line 56 
  if (ptr != (void *)0 && size == 0UL) {
    #line 57 
    free(ptr);
    #line 58 
    return (void *)0;
  }
  #line 61 
  if (ptr == (void *)0) {
    #line 62 
    res = malloc(size);
    #line 63 
    return res;
  }
  #line 66 
  if (ldv_undef_int() != 0) {
    #line 68 
    res = malloc(size);
    #line 69 
    __VERIFIER_assume(res != (void *)0);
    #line 71 
    memcpy(res,ptr,size);
    #line 72 
    free(ptr);
    #line 74 
    return res;
  }
  else 
       #line 77 
       return (void *)0;
}

#line 80  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc(size_t size)
{
  #line 82 
  void *res;
  #line 84 
  res = malloc(size);
  #line 85 
  __VERIFIER_assume(res != (void *)0);
  #line 87 
  return res;
}

#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xcalloc(size_t nmemb, size_t size)
{
  #line 92 
  void *res;
  #line 94 
  res = calloc(nmemb,size);
  #line 95 
  __VERIFIER_assume(res != (void *)0);
  #line 97 
  return res;
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xzalloc(size_t size)
{
  #line 102 
  void *res;
  #line 104 
  res = calloc(1UL,size);
  #line 105 
  __VERIFIER_assume(res != (void *)0);
  #line 107 
  return res;
}

#line 110  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc_unknown_size(void)
{
  #line 112 
  void *res;
  #line 114 
  if (ldv_undef_int() != 0) {
    #line 116 
    res = external_allocated_data();
    #line 117 
    __VERIFIER_assume(res != (void *)0);
    #line 118 
    return res;
  }
  else 
       #line 121 
       return (void *)0;
}

#line 124  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc_unknown_size(void)
{
  #line 126 
  void *res;
  #line 128 
  if (ldv_undef_int() != 0) {
    #line 130 
    res = external_allocated_data();
    #line 131 
    memset(res,0,8UL);
    #line 132 
    __VERIFIER_assume(res != (void *)0);
    #line 133 
    return res;
  }
  else 
       #line 136 
       return (void *)0;
}

#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc_unknown_size(void)
{
  #line 141 
  return ldv_reference_calloc_unknown_size();
}

#line 144  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc_unknown_size(size_t size)
{
  #line 146 
  void *res;
  #line 149 
  res = external_allocated_data();
  #line 150 
  __VERIFIER_assume(res != (void *)0);
  #line 152 
  return res;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_malloc(size_t size)
{
  #line 25 
  void *res;
  #line 26 
  res = ldv_reference_malloc(size);
  #line 27 
  if (res != (void *)0) {
    #line 28 
    int tmp_0;
    #line 28 
    if (ldv_is_err(res)) 
                         #line 28 
                         tmp_0 = 0; else 
                                         #line 28 
                                         tmp_0 = 1;
    #line 28 
    __VERIFIER_assume(tmp_0);
  }
  #line 29 
  return res;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc(size_t nmemb, size_t size)
{
  #line 34 
  void *res;
  #line 35 
  res = ldv_reference_calloc(nmemb,size);
  #line 36 
  if (res != (void *)0) {
    #line 37 
    int tmp_0;
    #line 37 
    if (ldv_is_err(res)) 
                         #line 37 
                         tmp_0 = 0; else 
                                         #line 37 
                                         tmp_0 = 1;
    #line 37 
    __VERIFIER_assume(tmp_0);
  }
  #line 38 
  return res;
}

#line 41  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc(size_t size)
{
  #line 43 
  void *res;
  #line 44 
  res = ldv_reference_zalloc(size);
  #line 45 
  if (res != (void *)0) {
    #line 46 
    int tmp_0;
    #line 46 
    if (ldv_is_err(res)) 
                         #line 46 
                         tmp_0 = 0; else 
                                         #line 46 
                                         tmp_0 = 1;
    #line 46 
    __VERIFIER_assume(tmp_0);
  }
  #line 47 
  return res;
}

#line 50  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void ldv_free(void *s)
{
  #line 52 
  ldv_reference_free(s);
  #line 53 
  return;
}

#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc(size_t size)
{
  #line 57 
  void *res;
  #line 59 
  int tmp_0;
  #line 58 
  res = ldv_reference_xmalloc(size);
  #line 59 
  if (ldv_is_err(res)) 
                       #line 59 
                       tmp_0 = 0; else 
                                       #line 59 
                                       tmp_0 = 1;
  #line 59 
  __VERIFIER_assume(tmp_0);
  #line 60 
  return res;
}

#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xcalloc(size_t nmemb, size_t size)
{
  #line 65 
  void *res;
  #line 67 
  int tmp_0;
  #line 66 
  res = ldv_reference_xcalloc(nmemb,size);
  #line 67 
  if (ldv_is_err(res)) 
                       #line 67 
                       tmp_0 = 0; else 
                                       #line 67 
                                       tmp_0 = 1;
  #line 67 
  __VERIFIER_assume(tmp_0);
  #line 68 
  return res;
}

#line 71  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xzalloc(size_t size)
{
  #line 73 
  void *res;
  #line 75 
  int tmp_0;
  #line 74 
  res = ldv_reference_xzalloc(size);
  #line 75 
  if (ldv_is_err(res)) 
                       #line 75 
                       tmp_0 = 0; else 
                                       #line 75 
                                       tmp_0 = 1;
  #line 75 
  __VERIFIER_assume(tmp_0);
  #line 76 
  return res;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_malloc_unknown_size(void)
{
  #line 81 
  void *res;
  #line 82 
  res = ldv_reference_malloc_unknown_size();
  #line 83 
  if (res != (void *)0) {
    #line 84 
    int tmp_0;
    #line 84 
    if (ldv_is_err(res)) 
                         #line 84 
                         tmp_0 = 0; else 
                                         #line 84 
                                         tmp_0 = 1;
    #line 84 
    __VERIFIER_assume(tmp_0);
  }
  #line 85 
  return res;
}

#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc_unknown_size(void)
{
  #line 90 
  void *res;
  #line 91 
  res = ldv_reference_calloc_unknown_size();
  #line 92 
  if (res != (void *)0) {
    #line 93 
    int tmp_0;
    #line 93 
    if (ldv_is_err(res)) 
                         #line 93 
                         tmp_0 = 0; else 
                                         #line 93 
                                         tmp_0 = 1;
    #line 93 
    __VERIFIER_assume(tmp_0);
  }
  #line 94 
  return res;
}

#line 97  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc_unknown_size(void)
{
  #line 99 
  void *res;
  #line 100 
  res = ldv_reference_zalloc_unknown_size();
  #line 101 
  if (res != (void *)0) {
    #line 102 
    int tmp_0;
    #line 102 
    if (ldv_is_err(res)) 
                         #line 102 
                         tmp_0 = 0; else 
                                         #line 102 
                                         tmp_0 = 1;
    #line 102 
    __VERIFIER_assume(tmp_0);
  }
  #line 103 
  return res;
}

#line 106  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc_unknown_size(size_t size)
{
  #line 108 
  void *res;
  #line 110 
  int tmp_0;
  #line 109 
  res = ldv_reference_xmalloc_unknown_size(size);
  #line 110 
  if (ldv_is_err(res)) 
                       #line 110 
                       tmp_0 = 0; else 
                                       #line 110 
                                       tmp_0 = 1;
  #line 110 
  __VERIFIER_assume(tmp_0);
  #line 111 
  return res;
}

/* compiler builtin: 
   long __builtin_expect(long exp, long c);   */
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
#line 22 
void __VERIFIER_error(void);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
long __builtin_expect(long exp, long c)
{
  #line 26 
  return exp;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/gcc.c"
void __builtin_trap(void)
{
  #line 37 
  __VERIFIER_error();
  #line 38 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
long ldv_undef_long(void);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned int ldv_undef_uint(void);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long ldv_undef_ulong(void);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long long ldv_undef_ulonglong(void);
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr(void);
#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonnegative(void);
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr_non_null(void);
#line 54  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range(int begin, int end);
#line 56  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 151  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range2(int begin, int end);
#line 29 
#line 29 
int __VERIFIER_nondet_int(void);
#line 31 
#line 31 
long __VERIFIER_nondet_long(void);
#line 38 
#line 38 
unsigned int __VERIFIER_nondet_uint(void);
#line 41 
#line 41 
unsigned long __VERIFIER_nondet_ulong(void);
#line 42 
#line 42 
unsigned long long __VERIFIER_nondet_ulonglong(void);
#line 43 
#line 43 
void *__VERIFIER_nondet_pointer(void);
#line 45  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int(void)
{
  #line 48 
  int undef_int = __VERIFIER_nondet_int();
  #line 50 
  return undef_int;
}

#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
long ldv_undef_long(void)
{
  #line 56 
  long undef_long = __VERIFIER_nondet_long();
  #line 58 
  return undef_long;
}

#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned int ldv_undef_uint(void)
{
  #line 64 
  unsigned int undef_uint = __VERIFIER_nondet_uint();
  #line 66 
  return undef_uint;
}

#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr(void)
{
  #line 72 
  void *undef_ptr = __VERIFIER_nondet_pointer();
  #line 74 
  return undef_ptr;
}

#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long ldv_undef_ulong(void)
{
  #line 80 
  unsigned long undef_ulong = __VERIFIER_nondet_ulong();
  #line 82 
  return undef_ulong;
}

#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long long ldv_undef_ulonglong(void)
{
  #line 88 
  unsigned long long undef_ulonglong = __VERIFIER_nondet_ulonglong();
  #line 90 
  return undef_ulonglong;
}

#line 93  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_positive(void)
{
  #line 95 
  int ret = ldv_undef_int();
  #line 97 
  __VERIFIER_assume(ret > 0);
  #line 99 
  return ret;
}

#line 102  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_negative(void)
{
  #line 104 
  int ret = ldv_undef_int();
  #line 106 
  __VERIFIER_assume(ret < 0);
  #line 108 
  return ret;
}

#line 111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonnegative(void)
{
  #line 113 
  int ret = ldv_undef_int();
  #line 115 
  __VERIFIER_assume(ret >= 0);
  #line 117 
  return ret;
}

#line 120  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonpositive(void)
{
  #line 122 
  int ret = ldv_undef_int();
  #line 124 
  __VERIFIER_assume(ret <= 0);
  #line 126 
  return ret;
}

#line 129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr_non_null(void)
{
  #line 131 
  void *ret = ldv_undef_ptr();
  #line 133 
  __VERIFIER_assume(ret != (void *)0);
  #line 135 
  return ret;
}

#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range(int begin, int end)
{
  #line 141 
  int ret;
  #line 143 
  ret = ldv_undef_int();
  #line 144 
  __VERIFIER_assume(ret >= begin);
  #line 145 
  __VERIFIER_assume(ret <= end);
  #line 147 
  return ret;
}

#line 151  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range2(int begin, int end)
{
  #line 153 
  int ret;
  #line 155 
  ret = begin;
  #line 155 
  while (ret < end) {
    #line 156 
    if (ldv_undef_int() != 0) 
                              #line 157 
                              break;
    #line 155 
    ret ++;
  }
  #line 159 
  return ret;
}

#line 62  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 62 
void ldv_initialize(void);
#line 97 
#line 97 
void ldv_failed_register_netdev(void);
#line 123 
#line 123 
void ldv_pre_probe(void);
#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
#line 35 
int pthread_create(pthread_t *, pthread_attr_t *, void *(*)(void *), void *);
#line 39 
#line 39 
int pthread_join(pthread_t, void **);
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/err.h"
__inline static void *ERR_PTR(long error)
{
  #line 26 
  return (void *)error;
}

#line 134  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/emg/0/environment_model.c"
#line 435 
void emg_dispatch_deregister_12(struct net_device *arg0);
#line 135 
#line 389 
void emg_dispatch_deregister_8(struct platform_driver *arg0);
#line 136 
#line 373 
void emg_dispatch_irq_deregister_6(int arg0);
#line 137 
#line 409 
void emg_dispatch_irq_register_11(int arg0, enum irqreturn (*arg1)(int , void *), enum irqreturn (*arg2)(int , void *), void *arg3);
#line 138 
#line 398 
void emg_dispatch_register_10(struct net_device *arg0);
#line 139 
#line 201 
void emg_dispatch_register_2(struct platform_driver *arg0);
#line 140 
#line 212 
void emg_dispatch_register_5(struct file_operations *arg0);
#line 141 
#line 4875 
void *emg_entry_point_insmod(void *arg0);
#line 142 
#line 444 
void *emg_file_operations_character_driver_scenario_mvpp2_dbgfs_filter_fops(void *arg0);
#line 143 
#line 621 
void *emg_file_operations_character_driver_scenario_mvpp2_dbgfs_flow_c2_enable_fops(void *arg0);
#line 144 
#line 798 
void *emg_file_operations_character_driver_scenario_mvpp2_dbgfs_flow_c2_hits_fops(void *arg0);
#line 145 
#line 975 
void *emg_file_operations_character_driver_scenario_mvpp2_dbgfs_flow_c2_rxq_fops(void *arg0);
#line 146 
#line 1152 
void *emg_file_operations_character_driver_scenario_mvpp2_dbgfs_flow_dec_hits_fops(void *arg0);
#line 147 
#line 1329 
void *emg_file_operations_character_driver_scenario_mvpp2_dbgfs_flow_flt_hits_fops(void *arg0);
#line 148 
#line 1506 
void *emg_file_operations_character_driver_scenario_mvpp2_dbgfs_flow_id_fops(void *arg0);
#line 149 
#line 1683 
void *emg_file_operations_character_driver_scenario_mvpp2_dbgfs_flow_type_fops(void *arg0);
#line 150 
#line 1860 
void *emg_file_operations_character_driver_scenario_mvpp2_dbgfs_port_flow_engine_fops(void *arg0);
#line 151 
#line 2037 
void *emg_file_operations_character_driver_scenario_mvpp2_dbgfs_port_flow_hash_opt_fops(void *arg0);
#line 152 
#line 2214 
void *emg_file_operations_character_driver_scenario_mvpp2_dbgfs_port_parser_fops(void *arg0);
#line 153 
#line 2391 
void *emg_file_operations_character_driver_scenario_mvpp2_dbgfs_port_vid_fops(void *arg0);
#line 154 
#line 2568 
void *emg_file_operations_character_driver_scenario_mvpp2_dbgfs_prs_ai_fops(void *arg0);
#line 155 
#line 2745 
void *emg_file_operations_character_driver_scenario_mvpp2_dbgfs_prs_hdata_fops(void *arg0);
#line 156 
#line 2922 
void *emg_file_operations_character_driver_scenario_mvpp2_dbgfs_prs_hits_fops(void *arg0);
#line 157 
#line 3099 
void *emg_file_operations_character_driver_scenario_mvpp2_dbgfs_prs_lu_fops(void *arg0);
#line 158 
#line 3276 
void *emg_file_operations_character_driver_scenario_mvpp2_dbgfs_prs_pmap_fops(void *arg0);
#line 159 
#line 3453 
void *emg_file_operations_character_driver_scenario_mvpp2_dbgfs_prs_sram_fops(void *arg0);
#line 160 
#line 3630 
void *emg_file_operations_character_driver_scenario_mvpp2_dbgfs_prs_valid_fops(void *arg0);
#line 163 
#line 3807 
void *emg_interrupt_interrupt_scenario_mvpp2_isr(void *arg0);
#line 164 
#line 3870 
void *emg_interrupt_interrupt_scenario_mvpp2_link_status_isr(void *arg0);
#line 165 
#line 3933 
void *emg_net_random_allocationless_scenario_mvpp2_ethtool_get_coalesce(void *arg0);
#line 167 
#line 4393 
void *emg_platform_platform_instance_mvpp2_driver(void *arg0);
#line 172 
#line 4904 
int main(void);
#line 175  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_13;
#line 176  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_14;
#line 177  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_15;
#line 178  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_16;
#line 179  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_17;
#line 180  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_18;
#line 181  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_19;
#line 182  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_20;
#line 183  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_21;
#line 184  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_22;
#line 185  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_23;
#line 186  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_24;
#line 187  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_25;
#line 188  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_26;
#line 189  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_27;
#line 190  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_28;
#line 191  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_29;
#line 192  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_30;
#line 193  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_31;
#line 194  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_32;
#line 195  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_33;
#line 196  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_34;
#line 197  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_35;
#line 201  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_register_2(struct platform_driver *arg0)
{
  #line 202 
  int ret;
  #line 203 
  struct emg_struct_platform_instance_mvpp2_driver_35 *cf_arg_35;
  #line 204 
  cf_arg_35 = (struct emg_struct_platform_instance_mvpp2_driver_35 *)ldv_xmalloc(16UL);
  #line 205 
  cf_arg_35->arg0 = arg0;
  #line 206 
  ret = pthread_create(& emg_thread_35,(pthread_attr_t *)0,& emg_platform_platform_instance_mvpp2_driver,(void *)cf_arg_35);
  #line 207 
  __VERIFIER_assume(ret == 0);
  #line 208 
  return;
}

#line 212  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_register_5(struct file_operations *arg0)
{
  #line 213 
  int ret;
  #line 214 
  struct emg_struct_character_driver_scenario_mvpp2_dbgfs_filter_fops_13 *cf_arg_13;
  #line 215 
  struct emg_struct_character_driver_scenario_mvpp2_dbgfs_filter_fops_13 *cf_arg_14;
  #line 216 
  struct emg_struct_character_driver_scenario_mvpp2_dbgfs_filter_fops_13 *cf_arg_15;
  #line 217 
  struct emg_struct_character_driver_scenario_mvpp2_dbgfs_filter_fops_13 *cf_arg_16;
  #line 218 
  struct emg_struct_character_driver_scenario_mvpp2_dbgfs_filter_fops_13 *cf_arg_17;
  #line 219 
  struct emg_struct_character_driver_scenario_mvpp2_dbgfs_filter_fops_13 *cf_arg_18;
  #line 220 
  struct emg_struct_character_driver_scenario_mvpp2_dbgfs_filter_fops_13 *cf_arg_19;
  #line 221 
  struct emg_struct_character_driver_scenario_mvpp2_dbgfs_filter_fops_13 *cf_arg_20;
  #line 222 
  struct emg_struct_character_driver_scenario_mvpp2_dbgfs_filter_fops_13 *cf_arg_21;
  #line 223 
  struct emg_struct_character_driver_scenario_mvpp2_dbgfs_filter_fops_13 *cf_arg_22;
  #line 224 
  struct emg_struct_character_driver_scenario_mvpp2_dbgfs_filter_fops_13 *cf_arg_23;
  #line 225 
  struct emg_struct_character_driver_scenario_mvpp2_dbgfs_filter_fops_13 *cf_arg_24;
  #line 226 
  struct emg_struct_character_driver_scenario_mvpp2_dbgfs_filter_fops_13 *cf_arg_25;
  #line 227 
  struct emg_struct_character_driver_scenario_mvpp2_dbgfs_filter_fops_13 *cf_arg_26;
  #line 228 
  struct emg_struct_character_driver_scenario_mvpp2_dbgfs_filter_fops_13 *cf_arg_27;
  #line 229 
  struct emg_struct_character_driver_scenario_mvpp2_dbgfs_filter_fops_13 *cf_arg_28;
  #line 230 
  struct emg_struct_character_driver_scenario_mvpp2_dbgfs_filter_fops_13 *cf_arg_29;
  #line 231 
  struct emg_struct_character_driver_scenario_mvpp2_dbgfs_filter_fops_13 *cf_arg_30;
  #line 232 
  struct emg_struct_character_driver_scenario_mvpp2_dbgfs_filter_fops_13 *cf_arg_31;
  #line 233 
  switch (ldv_undef_int()) {
    #line 234 
    case 0: 
            #line 234 
    ;
    #line 235 
    cf_arg_13 = (struct emg_struct_character_driver_scenario_mvpp2_dbgfs_filter_fops_13 *)ldv_xmalloc(16UL);
    #line 236 
    cf_arg_13->arg0 = arg0;
    #line 237 
    ret = pthread_create(& emg_thread_13,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_mvpp2_dbgfs_filter_fops,(void *)cf_arg_13);
    #line 238 
    __VERIFIER_assume(ret == 0);
    #line 239 
    break;
    #line 241 
    case 1: 
            #line 241 
    ;
    #line 242 
    cf_arg_14 = (struct emg_struct_character_driver_scenario_mvpp2_dbgfs_filter_fops_13 *)ldv_xmalloc(16UL);
    #line 243 
    cf_arg_14->arg0 = arg0;
    #line 244 
    ret = pthread_create(& emg_thread_14,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_mvpp2_dbgfs_flow_c2_enable_fops,(void *)cf_arg_14);
    #line 245 
    __VERIFIER_assume(ret == 0);
    #line 246 
    break;
    #line 248 
    case 2: 
            #line 248 
    ;
    #line 249 
    cf_arg_15 = (struct emg_struct_character_driver_scenario_mvpp2_dbgfs_filter_fops_13 *)ldv_xmalloc(16UL);
    #line 250 
    cf_arg_15->arg0 = arg0;
    #line 251 
    ret = pthread_create(& emg_thread_15,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_mvpp2_dbgfs_flow_c2_hits_fops,(void *)cf_arg_15);
    #line 252 
    __VERIFIER_assume(ret == 0);
    #line 253 
    break;
    #line 255 
    case 3: 
            #line 255 
    ;
    #line 256 
    cf_arg_16 = (struct emg_struct_character_driver_scenario_mvpp2_dbgfs_filter_fops_13 *)ldv_xmalloc(16UL);
    #line 257 
    cf_arg_16->arg0 = arg0;
    #line 258 
    ret = pthread_create(& emg_thread_16,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_mvpp2_dbgfs_flow_c2_rxq_fops,(void *)cf_arg_16);
    #line 259 
    __VERIFIER_assume(ret == 0);
    #line 260 
    break;
    #line 262 
    case 4: 
            #line 262 
    ;
    #line 263 
    cf_arg_17 = (struct emg_struct_character_driver_scenario_mvpp2_dbgfs_filter_fops_13 *)ldv_xmalloc(16UL);
    #line 264 
    cf_arg_17->arg0 = arg0;
    #line 265 
    ret = pthread_create(& emg_thread_17,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_mvpp2_dbgfs_flow_dec_hits_fops,(void *)cf_arg_17);
    #line 266 
    __VERIFIER_assume(ret == 0);
    #line 267 
    break;
    #line 269 
    case 5: 
            #line 269 
    ;
    #line 270 
    cf_arg_18 = (struct emg_struct_character_driver_scenario_mvpp2_dbgfs_filter_fops_13 *)ldv_xmalloc(16UL);
    #line 271 
    cf_arg_18->arg0 = arg0;
    #line 272 
    ret = pthread_create(& emg_thread_18,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_mvpp2_dbgfs_flow_flt_hits_fops,(void *)cf_arg_18);
    #line 273 
    __VERIFIER_assume(ret == 0);
    #line 274 
    break;
    #line 276 
    case 6: 
            #line 276 
    ;
    #line 277 
    cf_arg_19 = (struct emg_struct_character_driver_scenario_mvpp2_dbgfs_filter_fops_13 *)ldv_xmalloc(16UL);
    #line 278 
    cf_arg_19->arg0 = arg0;
    #line 279 
    ret = pthread_create(& emg_thread_19,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_mvpp2_dbgfs_flow_id_fops,(void *)cf_arg_19);
    #line 280 
    __VERIFIER_assume(ret == 0);
    #line 281 
    break;
    #line 283 
    case 7: 
            #line 283 
    ;
    #line 284 
    cf_arg_20 = (struct emg_struct_character_driver_scenario_mvpp2_dbgfs_filter_fops_13 *)ldv_xmalloc(16UL);
    #line 285 
    cf_arg_20->arg0 = arg0;
    #line 286 
    ret = pthread_create(& emg_thread_20,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_mvpp2_dbgfs_flow_type_fops,(void *)cf_arg_20);
    #line 287 
    __VERIFIER_assume(ret == 0);
    #line 288 
    break;
    #line 290 
    case 8: 
            #line 290 
    ;
    #line 291 
    cf_arg_21 = (struct emg_struct_character_driver_scenario_mvpp2_dbgfs_filter_fops_13 *)ldv_xmalloc(16UL);
    #line 292 
    cf_arg_21->arg0 = arg0;
    #line 293 
    ret = pthread_create(& emg_thread_21,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_mvpp2_dbgfs_port_flow_engine_fops,(void *)cf_arg_21);
    #line 294 
    __VERIFIER_assume(ret == 0);
    #line 295 
    break;
    #line 297 
    case 9: 
            #line 297 
    ;
    #line 298 
    cf_arg_22 = (struct emg_struct_character_driver_scenario_mvpp2_dbgfs_filter_fops_13 *)ldv_xmalloc(16UL);
    #line 299 
    cf_arg_22->arg0 = arg0;
    #line 300 
    ret = pthread_create(& emg_thread_22,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_mvpp2_dbgfs_port_flow_hash_opt_fops,(void *)cf_arg_22);
    #line 301 
    __VERIFIER_assume(ret == 0);
    #line 302 
    break;
    #line 304 
    case 10: 
             #line 304 
    ;
    #line 305 
    cf_arg_23 = (struct emg_struct_character_driver_scenario_mvpp2_dbgfs_filter_fops_13 *)ldv_xmalloc(16UL);
    #line 306 
    cf_arg_23->arg0 = arg0;
    #line 307 
    ret = pthread_create(& emg_thread_23,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_mvpp2_dbgfs_port_parser_fops,(void *)cf_arg_23);
    #line 308 
    __VERIFIER_assume(ret == 0);
    #line 309 
    break;
    #line 311 
    case 11: 
             #line 311 
    ;
    #line 312 
    cf_arg_24 = (struct emg_struct_character_driver_scenario_mvpp2_dbgfs_filter_fops_13 *)ldv_xmalloc(16UL);
    #line 313 
    cf_arg_24->arg0 = arg0;
    #line 314 
    ret = pthread_create(& emg_thread_24,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_mvpp2_dbgfs_port_vid_fops,(void *)cf_arg_24);
    #line 315 
    __VERIFIER_assume(ret == 0);
    #line 316 
    break;
    #line 318 
    case 12: 
             #line 318 
    ;
    #line 319 
    cf_arg_25 = (struct emg_struct_character_driver_scenario_mvpp2_dbgfs_filter_fops_13 *)ldv_xmalloc(16UL);
    #line 320 
    cf_arg_25->arg0 = arg0;
    #line 321 
    ret = pthread_create(& emg_thread_25,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_mvpp2_dbgfs_prs_ai_fops,(void *)cf_arg_25);
    #line 322 
    __VERIFIER_assume(ret == 0);
    #line 323 
    break;
    #line 325 
    case 13: 
             #line 325 
    ;
    #line 326 
    cf_arg_26 = (struct emg_struct_character_driver_scenario_mvpp2_dbgfs_filter_fops_13 *)ldv_xmalloc(16UL);
    #line 327 
    cf_arg_26->arg0 = arg0;
    #line 328 
    ret = pthread_create(& emg_thread_26,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_mvpp2_dbgfs_prs_hdata_fops,(void *)cf_arg_26);
    #line 329 
    __VERIFIER_assume(ret == 0);
    #line 330 
    break;
    #line 332 
    case 14: 
             #line 332 
    ;
    #line 333 
    cf_arg_27 = (struct emg_struct_character_driver_scenario_mvpp2_dbgfs_filter_fops_13 *)ldv_xmalloc(16UL);
    #line 334 
    cf_arg_27->arg0 = arg0;
    #line 335 
    ret = pthread_create(& emg_thread_27,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_mvpp2_dbgfs_prs_hits_fops,(void *)cf_arg_27);
    #line 336 
    __VERIFIER_assume(ret == 0);
    #line 337 
    break;
    #line 339 
    case 15: 
             #line 339 
    ;
    #line 340 
    cf_arg_28 = (struct emg_struct_character_driver_scenario_mvpp2_dbgfs_filter_fops_13 *)ldv_xmalloc(16UL);
    #line 341 
    cf_arg_28->arg0 = arg0;
    #line 342 
    ret = pthread_create(& emg_thread_28,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_mvpp2_dbgfs_prs_lu_fops,(void *)cf_arg_28);
    #line 343 
    __VERIFIER_assume(ret == 0);
    #line 344 
    break;
    #line 346 
    case 16: 
             #line 346 
    ;
    #line 347 
    cf_arg_29 = (struct emg_struct_character_driver_scenario_mvpp2_dbgfs_filter_fops_13 *)ldv_xmalloc(16UL);
    #line 348 
    cf_arg_29->arg0 = arg0;
    #line 349 
    ret = pthread_create(& emg_thread_29,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_mvpp2_dbgfs_prs_pmap_fops,(void *)cf_arg_29);
    #line 350 
    __VERIFIER_assume(ret == 0);
    #line 351 
    break;
    #line 353 
    case 17: 
             #line 353 
    ;
    #line 354 
    cf_arg_30 = (struct emg_struct_character_driver_scenario_mvpp2_dbgfs_filter_fops_13 *)ldv_xmalloc(16UL);
    #line 355 
    cf_arg_30->arg0 = arg0;
    #line 356 
    ret = pthread_create(& emg_thread_30,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_mvpp2_dbgfs_prs_sram_fops,(void *)cf_arg_30);
    #line 357 
    __VERIFIER_assume(ret == 0);
    #line 358 
    break;
    #line 360 
    case 18: 
             #line 360 
    ;
    #line 361 
    cf_arg_31 = (struct emg_struct_character_driver_scenario_mvpp2_dbgfs_filter_fops_13 *)ldv_xmalloc(16UL);
    #line 362 
    cf_arg_31->arg0 = arg0;
    #line 363 
    ret = pthread_create(& emg_thread_31,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_mvpp2_dbgfs_prs_valid_fops,(void *)cf_arg_31);
    #line 364 
    __VERIFIER_assume(ret == 0);
    #line 365 
    break;
    #line 367 
    default: 
             #line 367 
    ;
    #line 367 
    __VERIFIER_assume(0);
  }
  #line 369 
  return;
}

#line 373  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_irq_deregister_6(int arg0)
{
  #line 374 
  int ret;
  #line 375 
  struct emg_struct_free_irq_6 *cf_arg_32;
  #line 376 
  struct emg_struct_free_irq_6 *cf_arg_33;
  #line 377 
  if (ldv_undef_int() != 0) {
    #line 378 
    ret = pthread_join(emg_thread_32,(void **)0);
    #line 379 
    __VERIFIER_assume(ret == 0);
  }
  else {
    #line 382 
    ret = pthread_join(emg_thread_33,(void **)0);
    #line 383 
    __VERIFIER_assume(ret == 0);
  }
  #line 385 
  return;
}

#line 389  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_deregister_8(struct platform_driver *arg0)
{
  #line 390 
  int ret;
  #line 391 
  struct emg_struct_platform_instance_mvpp2_driver_35 *cf_arg_35;
  #line 392 
  ret = pthread_join(emg_thread_35,(void **)0);
  #line 393 
  __VERIFIER_assume(ret == 0);
  #line 394 
  return;
}

#line 398  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_register_10(struct net_device *arg0)
{
  #line 399 
  int ret;
  #line 400 
  struct emg_struct_random_allocationless_scenario_mvpp2_ethtool_get_coalesce_34 *cf_arg_34;
  #line 401 
  cf_arg_34 = (struct emg_struct_random_allocationless_scenario_mvpp2_ethtool_get_coalesce_34 *)ldv_xmalloc(16UL);
  #line 402 
  cf_arg_34->arg0 = arg0;
  #line 403 
  ret = pthread_create(& emg_thread_34,(pthread_attr_t *)0,& emg_net_random_allocationless_scenario_mvpp2_ethtool_get_coalesce,(void *)cf_arg_34);
  #line 404 
  __VERIFIER_assume(ret == 0);
  #line 405 
  return;
}

#line 409  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_irq_register_11(int arg0, enum irqreturn (*arg1)(int , void *), enum irqreturn (*arg2)(int , void *), void *arg3)
{
  #line 410 
  int ret;
  #line 411 
  struct emg_struct_interrupt_scenario_mvpp2_isr_32 *cf_arg_32;
  #line 412 
  struct emg_struct_interrupt_scenario_mvpp2_isr_32 *cf_arg_33;
  #line 413 
  if (ldv_undef_int() != 0) {
    #line 414 
    cf_arg_32 = (struct emg_struct_interrupt_scenario_mvpp2_isr_32 *)ldv_xmalloc(40UL);
    #line 415 
    cf_arg_32->arg0 = arg0;
    #line 416 
    cf_arg_32->arg1 = arg1;
    #line 417 
    cf_arg_32->arg2 = arg2;
    #line 418 
    cf_arg_32->arg3 = arg3;
    #line 419 
    ret = pthread_create(& emg_thread_32,(pthread_attr_t *)0,& emg_interrupt_interrupt_scenario_mvpp2_isr,(void *)cf_arg_32);
    #line 420 
    __VERIFIER_assume(ret == 0);
  }
  else {
    #line 423 
    cf_arg_33 = (struct emg_struct_interrupt_scenario_mvpp2_isr_32 *)ldv_xmalloc(40UL);
    #line 424 
    cf_arg_33->arg0 = arg0;
    #line 425 
    cf_arg_33->arg1 = arg1;
    #line 426 
    cf_arg_33->arg2 = arg2;
    #line 427 
    cf_arg_33->arg3 = arg3;
    #line 428 
    ret = pthread_create(& emg_thread_33,(pthread_attr_t *)0,& emg_interrupt_interrupt_scenario_mvpp2_link_status_isr,(void *)cf_arg_33);
    #line 429 
    __VERIFIER_assume(ret == 0);
  }
  #line 431 
  return;
}

#line 435  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_deregister_12(struct net_device *arg0)
{
  #line 436 
  int ret;
  #line 437 
  struct emg_struct_random_allocationless_scenario_mvpp2_ethtool_get_coalesce_34 *cf_arg_34;
  #line 438 
  ret = pthread_join(emg_thread_34,(void **)0);
  #line 439 
  __VERIFIER_assume(ret == 0);
  #line 440 
  return;
}

#line 444  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_mvpp2_dbgfs_filter_fops(void *arg0)
{
  #line 447 
  struct file_operations *emg_13_container;
  #line 448 
  long long emg_13_emg_param_1_0;
  #line 449 
  char *emg_13_emg_param_1_2;
  #line 450 
  char *emg_13_emg_param_1_4;
  #line 451 
  int emg_13_emg_param_2_1;
  #line 452 
  long long *emg_13_emg_param_3_3;
  #line 453 
  long long *emg_13_emg_param_3_5;
  #line 454 
  struct file *emg_13_resource_0;
  #line 455 
  struct inode *emg_13_resource_1;
  #line 456 
  int emg_13_ret;
  #line 457 
  unsigned long emg_13_size_cnt;
  #line 458 
  int emg_repeat_cnt_call_13 = 1;
  #line 459 
  int emg_repeat_cnt_main_13_0 = 1;
  #line 460 
  int emg_repeat_cnt_main_13_1 = 1;
  #line 462 
  struct emg_struct_character_driver_scenario_mvpp2_dbgfs_filter_fops_13 *data = (struct emg_struct_character_driver_scenario_mvpp2_dbgfs_filter_fops_13 *)arg0;
  #line 466 
  emg_13_ret = ldv_undef_int();
  #line 467 
  emg_13_container = emg_alias_mvpp2_dbgfs_filter_fops;
  #line 468 
  emg_13_ret = ldv_undef_int();
  #line 470 
  __VERIFIER_assume(data->arg0 == emg_alias_mvpp2_dbgfs_filter_fops);
  #line 472 
  if (data != (struct emg_struct_character_driver_scenario_mvpp2_dbgfs_filter_fops_13 *)0) {
    #line 473 
    emg_13_container = data->arg0;
    #line 474 
    ldv_free((void *)data);
  }
  #line 479 
  emg_13_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 480 
  emg_13_size_cnt = (unsigned long)ldv_undef_int();
  #line 484 
  goto emg_main_13;
  #line 488 
  return (void *)0;
  #line 491 
  emg_call_13: 
               #line 491 
  ;
  #line 492 
  if (ldv_undef_int() != 0) {
    #line 493 
    switch (ldv_undef_int()) {
      #line 494 
      case 0: 
              #line 494 
      ;
      #line 496 
      emg_13_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 496 
      emg_13_emg_param_1_2 = emg_13_emg_param_1_2;
      #line 497 
      emg_13_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 497 
      emg_13_emg_param_3_3 = emg_13_emg_param_3_3;
      #line 501 
      seq_read(emg_13_resource_0,emg_13_emg_param_1_2,emg_13_size_cnt,emg_13_emg_param_3_3);
      #line 505 
      ldv_free((void *)emg_13_emg_param_1_2);
      #line 506 
      ldv_free((void *)emg_13_emg_param_3_3);
      #line 508 
      break;
      #line 510 
      case 1: 
              #line 510 
      ;
      #line 512 
      seq_lseek(emg_13_resource_0,emg_13_emg_param_1_0,emg_13_emg_param_2_1);
      #line 514 
      break;
      #line 516 
      case 2: 
              #line 516 
      ;
      #line 523 
      __VERIFIER_assume(emg_13_size_cnt <= 2147479552UL);
      #line 524 
      emg_13_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 524 
      emg_13_emg_param_1_4 = emg_13_emg_param_1_4;
      #line 525 
      emg_13_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 525 
      emg_13_emg_param_3_5 = emg_13_emg_param_3_5;
      #line 529 
      if (emg_13_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 530 
        (*(emg_13_container->write))(emg_13_resource_0,emg_13_emg_param_1_4,emg_13_size_cnt,emg_13_emg_param_3_5);
      #line 535 
      ldv_free((void *)emg_13_emg_param_1_4);
      #line 536 
      ldv_free((void *)emg_13_emg_param_3_5);
      #line 538 
      break;
      #line 540 
      default: 
               #line 540 
      ;
      #line 540 
      __VERIFIER_assume(0);
    }
    #line 543 
    if (emg_repeat_cnt_call_13 > 0) {
      #line 544 
      emg_repeat_cnt_call_13 --;
      #line 546 
      goto emg_call_13;
    }
    else 
         #line 548 
         __VERIFIER_assume(0);
  }
  else {
    #line 554 
    (*emg_alias_single_release)(emg_13_resource_1,emg_13_resource_0);
    #line 557 
    if (emg_repeat_cnt_main_13_0 > 0) {
      #line 558 
      emg_repeat_cnt_main_13_0 --;
      #line 560 
      goto emg_main_13;
    }
    else 
         #line 562 
         __VERIFIER_assume(0);
  }
  #line 568 
  return (void *)0;
  #line 571 
  emg_main_13: 
               #line 571 
  ;
  #line 572 
  if (ldv_undef_int() != 0) {
    #line 574 
    emg_13_ret = emg_wrapper_mvpp2_dbgfs_filter_open(emg_13_resource_1,emg_13_resource_0);
    #line 579 
    emg_13_ret = ldv_filter_err_code(emg_13_ret);
    #line 582 
    if (ldv_undef_int() != 0) {
      #line 584 
      __VERIFIER_assume(emg_13_ret == 0);
      #line 588 
      goto emg_call_13;
    }
    else {
      #line 593 
      __VERIFIER_assume(emg_13_ret != 0);
      #line 596 
      if (emg_repeat_cnt_main_13_1 > 0) {
        #line 597 
        emg_repeat_cnt_main_13_1 --;
        #line 599 
        goto emg_main_13;
      }
      else 
           #line 601 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 608 
       ldv_free((void *)emg_13_resource_0);
  #line 616 
  return (void *)0;
}

#line 621  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_mvpp2_dbgfs_flow_c2_enable_fops(void *arg0)
{
  #line 624 
  struct file_operations *emg_14_container;
  #line 625 
  long long emg_14_emg_param_1_0;
  #line 626 
  char *emg_14_emg_param_1_2;
  #line 627 
  char *emg_14_emg_param_1_4;
  #line 628 
  int emg_14_emg_param_2_1;
  #line 629 
  long long *emg_14_emg_param_3_3;
  #line 630 
  long long *emg_14_emg_param_3_5;
  #line 631 
  struct file *emg_14_resource_0;
  #line 632 
  struct inode *emg_14_resource_1;
  #line 633 
  int emg_14_ret;
  #line 634 
  unsigned long emg_14_size_cnt;
  #line 635 
  int emg_repeat_cnt_main_14_1 = 1;
  #line 636 
  int emg_repeat_cnt_main_14_0 = 1;
  #line 637 
  int emg_repeat_cnt_call_14 = 1;
  #line 639 
  struct emg_struct_character_driver_scenario_mvpp2_dbgfs_filter_fops_13 *data = (struct emg_struct_character_driver_scenario_mvpp2_dbgfs_filter_fops_13 *)arg0;
  #line 643 
  emg_14_ret = ldv_undef_int();
  #line 644 
  emg_14_container = emg_alias_mvpp2_dbgfs_flow_c2_enable_fops;
  #line 645 
  emg_14_ret = ldv_undef_int();
  #line 647 
  __VERIFIER_assume(data->arg0 == emg_alias_mvpp2_dbgfs_flow_c2_enable_fops);
  #line 649 
  if (data != (struct emg_struct_character_driver_scenario_mvpp2_dbgfs_filter_fops_13 *)0) {
    #line 650 
    emg_14_container = data->arg0;
    #line 651 
    ldv_free((void *)data);
  }
  #line 656 
  emg_14_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 657 
  emg_14_size_cnt = (unsigned long)ldv_undef_int();
  #line 661 
  goto emg_main_14;
  #line 665 
  return (void *)0;
  #line 668 
  emg_call_14: 
               #line 668 
  ;
  #line 669 
  if (ldv_undef_int() != 0) {
    #line 670 
    switch (ldv_undef_int()) {
      #line 671 
      case 0: 
              #line 671 
      ;
      #line 673 
      emg_14_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 673 
      emg_14_emg_param_1_2 = emg_14_emg_param_1_2;
      #line 674 
      emg_14_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 674 
      emg_14_emg_param_3_3 = emg_14_emg_param_3_3;
      #line 678 
      seq_read(emg_14_resource_0,emg_14_emg_param_1_2,emg_14_size_cnt,emg_14_emg_param_3_3);
      #line 682 
      ldv_free((void *)emg_14_emg_param_1_2);
      #line 683 
      ldv_free((void *)emg_14_emg_param_3_3);
      #line 685 
      break;
      #line 687 
      case 1: 
              #line 687 
      ;
      #line 689 
      seq_lseek(emg_14_resource_0,emg_14_emg_param_1_0,emg_14_emg_param_2_1);
      #line 691 
      break;
      #line 693 
      case 2: 
              #line 693 
      ;
      #line 700 
      __VERIFIER_assume(emg_14_size_cnt <= 2147479552UL);
      #line 701 
      emg_14_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 701 
      emg_14_emg_param_1_4 = emg_14_emg_param_1_4;
      #line 702 
      emg_14_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 702 
      emg_14_emg_param_3_5 = emg_14_emg_param_3_5;
      #line 706 
      if (emg_14_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 707 
        (*(emg_14_container->write))(emg_14_resource_0,emg_14_emg_param_1_4,emg_14_size_cnt,emg_14_emg_param_3_5);
      #line 712 
      ldv_free((void *)emg_14_emg_param_1_4);
      #line 713 
      ldv_free((void *)emg_14_emg_param_3_5);
      #line 715 
      break;
      #line 717 
      default: 
               #line 717 
      ;
      #line 717 
      __VERIFIER_assume(0);
    }
    #line 720 
    if (emg_repeat_cnt_call_14 > 0) {
      #line 721 
      emg_repeat_cnt_call_14 --;
      #line 723 
      goto emg_call_14;
    }
    else 
         #line 725 
         __VERIFIER_assume(0);
  }
  else {
    #line 731 
    (*emg_alias_single_release)(emg_14_resource_1,emg_14_resource_0);
    #line 734 
    if (emg_repeat_cnt_main_14_0 > 0) {
      #line 735 
      emg_repeat_cnt_main_14_0 --;
      #line 737 
      goto emg_main_14;
    }
    else 
         #line 739 
         __VERIFIER_assume(0);
  }
  #line 745 
  return (void *)0;
  #line 748 
  emg_main_14: 
               #line 748 
  ;
  #line 749 
  if (ldv_undef_int() != 0) {
    #line 751 
    emg_14_ret = emg_wrapper_mvpp2_dbgfs_flow_c2_enable_open(emg_14_resource_1,emg_14_resource_0);
    #line 756 
    emg_14_ret = ldv_filter_err_code(emg_14_ret);
    #line 759 
    if (ldv_undef_int() != 0) {
      #line 761 
      __VERIFIER_assume(emg_14_ret == 0);
      #line 765 
      goto emg_call_14;
    }
    else {
      #line 770 
      __VERIFIER_assume(emg_14_ret != 0);
      #line 773 
      if (emg_repeat_cnt_main_14_1 > 0) {
        #line 774 
        emg_repeat_cnt_main_14_1 --;
        #line 776 
        goto emg_main_14;
      }
      else 
           #line 778 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 785 
       ldv_free((void *)emg_14_resource_0);
  #line 793 
  return (void *)0;
}

#line 798  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_mvpp2_dbgfs_flow_c2_hits_fops(void *arg0)
{
  #line 801 
  struct file_operations *emg_15_container;
  #line 802 
  long long emg_15_emg_param_1_0;
  #line 803 
  char *emg_15_emg_param_1_2;
  #line 804 
  char *emg_15_emg_param_1_4;
  #line 805 
  int emg_15_emg_param_2_1;
  #line 806 
  long long *emg_15_emg_param_3_3;
  #line 807 
  long long *emg_15_emg_param_3_5;
  #line 808 
  struct file *emg_15_resource_0;
  #line 809 
  struct inode *emg_15_resource_1;
  #line 810 
  int emg_15_ret;
  #line 811 
  unsigned long emg_15_size_cnt;
  #line 812 
  int emg_repeat_cnt_call_15 = 1;
  #line 813 
  int emg_repeat_cnt_main_15_0 = 1;
  #line 814 
  int emg_repeat_cnt_main_15_1 = 1;
  #line 816 
  struct emg_struct_character_driver_scenario_mvpp2_dbgfs_filter_fops_13 *data = (struct emg_struct_character_driver_scenario_mvpp2_dbgfs_filter_fops_13 *)arg0;
  #line 820 
  emg_15_ret = ldv_undef_int();
  #line 821 
  emg_15_container = emg_alias_mvpp2_dbgfs_flow_c2_hits_fops;
  #line 822 
  emg_15_ret = ldv_undef_int();
  #line 824 
  __VERIFIER_assume(data->arg0 == emg_alias_mvpp2_dbgfs_flow_c2_hits_fops);
  #line 826 
  if (data != (struct emg_struct_character_driver_scenario_mvpp2_dbgfs_filter_fops_13 *)0) {
    #line 827 
    emg_15_container = data->arg0;
    #line 828 
    ldv_free((void *)data);
  }
  #line 833 
  emg_15_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 834 
  emg_15_size_cnt = (unsigned long)ldv_undef_int();
  #line 838 
  goto emg_main_15;
  #line 842 
  return (void *)0;
  #line 845 
  emg_call_15: 
               #line 845 
  ;
  #line 846 
  if (ldv_undef_int() != 0) {
    #line 847 
    switch (ldv_undef_int()) {
      #line 848 
      case 0: 
              #line 848 
      ;
      #line 850 
      emg_15_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 850 
      emg_15_emg_param_1_2 = emg_15_emg_param_1_2;
      #line 851 
      emg_15_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 851 
      emg_15_emg_param_3_3 = emg_15_emg_param_3_3;
      #line 855 
      seq_read(emg_15_resource_0,emg_15_emg_param_1_2,emg_15_size_cnt,emg_15_emg_param_3_3);
      #line 859 
      ldv_free((void *)emg_15_emg_param_1_2);
      #line 860 
      ldv_free((void *)emg_15_emg_param_3_3);
      #line 862 
      break;
      #line 864 
      case 1: 
              #line 864 
      ;
      #line 866 
      seq_lseek(emg_15_resource_0,emg_15_emg_param_1_0,emg_15_emg_param_2_1);
      #line 868 
      break;
      #line 870 
      case 2: 
              #line 870 
      ;
      #line 877 
      __VERIFIER_assume(emg_15_size_cnt <= 2147479552UL);
      #line 878 
      emg_15_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 878 
      emg_15_emg_param_1_4 = emg_15_emg_param_1_4;
      #line 879 
      emg_15_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 879 
      emg_15_emg_param_3_5 = emg_15_emg_param_3_5;
      #line 883 
      if (emg_15_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 884 
        (*(emg_15_container->write))(emg_15_resource_0,emg_15_emg_param_1_4,emg_15_size_cnt,emg_15_emg_param_3_5);
      #line 889 
      ldv_free((void *)emg_15_emg_param_1_4);
      #line 890 
      ldv_free((void *)emg_15_emg_param_3_5);
      #line 892 
      break;
      #line 894 
      default: 
               #line 894 
      ;
      #line 894 
      __VERIFIER_assume(0);
    }
    #line 897 
    if (emg_repeat_cnt_call_15 > 0) {
      #line 898 
      emg_repeat_cnt_call_15 --;
      #line 900 
      goto emg_call_15;
    }
    else 
         #line 902 
         __VERIFIER_assume(0);
  }
  else {
    #line 908 
    (*emg_alias_single_release)(emg_15_resource_1,emg_15_resource_0);
    #line 911 
    if (emg_repeat_cnt_main_15_0 > 0) {
      #line 912 
      emg_repeat_cnt_main_15_0 --;
      #line 914 
      goto emg_main_15;
    }
    else 
         #line 916 
         __VERIFIER_assume(0);
  }
  #line 922 
  return (void *)0;
  #line 925 
  emg_main_15: 
               #line 925 
  ;
  #line 926 
  if (ldv_undef_int() != 0) {
    #line 928 
    emg_15_ret = emg_wrapper_mvpp2_dbgfs_flow_c2_hits_open(emg_15_resource_1,emg_15_resource_0);
    #line 933 
    emg_15_ret = ldv_filter_err_code(emg_15_ret);
    #line 936 
    if (ldv_undef_int() != 0) {
      #line 938 
      __VERIFIER_assume(emg_15_ret == 0);
      #line 942 
      goto emg_call_15;
    }
    else {
      #line 947 
      __VERIFIER_assume(emg_15_ret != 0);
      #line 950 
      if (emg_repeat_cnt_main_15_1 > 0) {
        #line 951 
        emg_repeat_cnt_main_15_1 --;
        #line 953 
        goto emg_main_15;
      }
      else 
           #line 955 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 962 
       ldv_free((void *)emg_15_resource_0);
  #line 970 
  return (void *)0;
}

#line 975  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_mvpp2_dbgfs_flow_c2_rxq_fops(void *arg0)
{
  #line 978 
  struct file_operations *emg_16_container;
  #line 979 
  long long emg_16_emg_param_1_0;
  #line 980 
  char *emg_16_emg_param_1_2;
  #line 981 
  char *emg_16_emg_param_1_4;
  #line 982 
  int emg_16_emg_param_2_1;
  #line 983 
  long long *emg_16_emg_param_3_3;
  #line 984 
  long long *emg_16_emg_param_3_5;
  #line 985 
  struct file *emg_16_resource_0;
  #line 986 
  struct inode *emg_16_resource_1;
  #line 987 
  int emg_16_ret;
  #line 988 
  unsigned long emg_16_size_cnt;
  #line 989 
  int emg_repeat_cnt_call_16 = 1;
  #line 990 
  int emg_repeat_cnt_main_16_0 = 1;
  #line 991 
  int emg_repeat_cnt_main_16_1 = 1;
  #line 993 
  struct emg_struct_character_driver_scenario_mvpp2_dbgfs_filter_fops_13 *data = (struct emg_struct_character_driver_scenario_mvpp2_dbgfs_filter_fops_13 *)arg0;
  #line 997 
  emg_16_ret = ldv_undef_int();
  #line 998 
  emg_16_container = emg_alias_mvpp2_dbgfs_flow_c2_rxq_fops;
  #line 999 
  emg_16_ret = ldv_undef_int();
  #line 1001 
  __VERIFIER_assume(data->arg0 == emg_alias_mvpp2_dbgfs_flow_c2_rxq_fops);
  #line 1003 
  if (data != (struct emg_struct_character_driver_scenario_mvpp2_dbgfs_filter_fops_13 *)0) {
    #line 1004 
    emg_16_container = data->arg0;
    #line 1005 
    ldv_free((void *)data);
  }
  #line 1010 
  emg_16_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 1011 
  emg_16_size_cnt = (unsigned long)ldv_undef_int();
  #line 1015 
  goto emg_main_16;
  #line 1019 
  return (void *)0;
  #line 1022 
  emg_call_16: 
               #line 1022 
  ;
  #line 1023 
  if (ldv_undef_int() != 0) {
    #line 1024 
    switch (ldv_undef_int()) {
      #line 1025 
      case 0: 
              #line 1025 
      ;
      #line 1027 
      emg_16_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 1027 
      emg_16_emg_param_1_2 = emg_16_emg_param_1_2;
      #line 1028 
      emg_16_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 1028 
      emg_16_emg_param_3_3 = emg_16_emg_param_3_3;
      #line 1032 
      seq_read(emg_16_resource_0,emg_16_emg_param_1_2,emg_16_size_cnt,emg_16_emg_param_3_3);
      #line 1036 
      ldv_free((void *)emg_16_emg_param_1_2);
      #line 1037 
      ldv_free((void *)emg_16_emg_param_3_3);
      #line 1039 
      break;
      #line 1041 
      case 1: 
              #line 1041 
      ;
      #line 1043 
      seq_lseek(emg_16_resource_0,emg_16_emg_param_1_0,emg_16_emg_param_2_1);
      #line 1045 
      break;
      #line 1047 
      case 2: 
              #line 1047 
      ;
      #line 1054 
      __VERIFIER_assume(emg_16_size_cnt <= 2147479552UL);
      #line 1055 
      emg_16_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 1055 
      emg_16_emg_param_1_4 = emg_16_emg_param_1_4;
      #line 1056 
      emg_16_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 1056 
      emg_16_emg_param_3_5 = emg_16_emg_param_3_5;
      #line 1060 
      if (emg_16_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 1061 
        (*(emg_16_container->write))(emg_16_resource_0,emg_16_emg_param_1_4,emg_16_size_cnt,emg_16_emg_param_3_5);
      #line 1066 
      ldv_free((void *)emg_16_emg_param_1_4);
      #line 1067 
      ldv_free((void *)emg_16_emg_param_3_5);
      #line 1069 
      break;
      #line 1071 
      default: 
               #line 1071 
      ;
      #line 1071 
      __VERIFIER_assume(0);
    }
    #line 1074 
    if (emg_repeat_cnt_call_16 > 0) {
      #line 1075 
      emg_repeat_cnt_call_16 --;
      #line 1077 
      goto emg_call_16;
    }
    else 
         #line 1079 
         __VERIFIER_assume(0);
  }
  else {
    #line 1085 
    (*emg_alias_single_release)(emg_16_resource_1,emg_16_resource_0);
    #line 1088 
    if (emg_repeat_cnt_main_16_1 > 0) {
      #line 1089 
      emg_repeat_cnt_main_16_1 --;
      #line 1091 
      goto emg_main_16;
    }
    else 
         #line 1093 
         __VERIFIER_assume(0);
  }
  #line 1099 
  return (void *)0;
  #line 1102 
  emg_main_16: 
               #line 1102 
  ;
  #line 1103 
  if (ldv_undef_int() != 0) {
    #line 1105 
    emg_16_ret = emg_wrapper_mvpp2_dbgfs_flow_c2_rxq_open(emg_16_resource_1,emg_16_resource_0);
    #line 1110 
    emg_16_ret = ldv_filter_err_code(emg_16_ret);
    #line 1113 
    if (ldv_undef_int() != 0) {
      #line 1115 
      __VERIFIER_assume(emg_16_ret == 0);
      #line 1119 
      goto emg_call_16;
    }
    else {
      #line 1124 
      __VERIFIER_assume(emg_16_ret != 0);
      #line 1127 
      if (emg_repeat_cnt_main_16_0 > 0) {
        #line 1128 
        emg_repeat_cnt_main_16_0 --;
        #line 1130 
        goto emg_main_16;
      }
      else 
           #line 1132 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 1139 
       ldv_free((void *)emg_16_resource_0);
  #line 1147 
  return (void *)0;
}

#line 1152  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_mvpp2_dbgfs_flow_dec_hits_fops(void *arg0)
{
  #line 1155 
  struct file_operations *emg_17_container;
  #line 1156 
  long long emg_17_emg_param_1_0;
  #line 1157 
  char *emg_17_emg_param_1_2;
  #line 1158 
  char *emg_17_emg_param_1_4;
  #line 1159 
  int emg_17_emg_param_2_1;
  #line 1160 
  long long *emg_17_emg_param_3_3;
  #line 1161 
  long long *emg_17_emg_param_3_5;
  #line 1162 
  struct file *emg_17_resource_0;
  #line 1163 
  struct inode *emg_17_resource_1;
  #line 1164 
  int emg_17_ret;
  #line 1165 
  unsigned long emg_17_size_cnt;
  #line 1166 
  int emg_repeat_cnt_main_17_0 = 1;
  #line 1167 
  int emg_repeat_cnt_call_17 = 1;
  #line 1168 
  int emg_repeat_cnt_main_17_1 = 1;
  #line 1170 
  struct emg_struct_character_driver_scenario_mvpp2_dbgfs_filter_fops_13 *data = (struct emg_struct_character_driver_scenario_mvpp2_dbgfs_filter_fops_13 *)arg0;
  #line 1174 
  emg_17_ret = ldv_undef_int();
  #line 1175 
  emg_17_container = emg_alias_mvpp2_dbgfs_flow_dec_hits_fops;
  #line 1176 
  emg_17_ret = ldv_undef_int();
  #line 1178 
  __VERIFIER_assume(data->arg0 == emg_alias_mvpp2_dbgfs_flow_dec_hits_fops);
  #line 1180 
  if (data != (struct emg_struct_character_driver_scenario_mvpp2_dbgfs_filter_fops_13 *)0) {
    #line 1181 
    emg_17_container = data->arg0;
    #line 1182 
    ldv_free((void *)data);
  }
  #line 1187 
  emg_17_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 1188 
  emg_17_size_cnt = (unsigned long)ldv_undef_int();
  #line 1192 
  goto emg_main_17;
  #line 1196 
  return (void *)0;
  #line 1199 
  emg_call_17: 
               #line 1199 
  ;
  #line 1200 
  if (ldv_undef_int() != 0) {
    #line 1201 
    switch (ldv_undef_int()) {
      #line 1202 
      case 0: 
              #line 1202 
      ;
      #line 1204 
      emg_17_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 1204 
      emg_17_emg_param_1_2 = emg_17_emg_param_1_2;
      #line 1205 
      emg_17_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 1205 
      emg_17_emg_param_3_3 = emg_17_emg_param_3_3;
      #line 1209 
      seq_read(emg_17_resource_0,emg_17_emg_param_1_2,emg_17_size_cnt,emg_17_emg_param_3_3);
      #line 1213 
      ldv_free((void *)emg_17_emg_param_1_2);
      #line 1214 
      ldv_free((void *)emg_17_emg_param_3_3);
      #line 1216 
      break;
      #line 1218 
      case 1: 
              #line 1218 
      ;
      #line 1220 
      seq_lseek(emg_17_resource_0,emg_17_emg_param_1_0,emg_17_emg_param_2_1);
      #line 1222 
      break;
      #line 1224 
      case 2: 
              #line 1224 
      ;
      #line 1231 
      __VERIFIER_assume(emg_17_size_cnt <= 2147479552UL);
      #line 1232 
      emg_17_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 1232 
      emg_17_emg_param_1_4 = emg_17_emg_param_1_4;
      #line 1233 
      emg_17_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 1233 
      emg_17_emg_param_3_5 = emg_17_emg_param_3_5;
      #line 1237 
      if (emg_17_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 1238 
        (*(emg_17_container->write))(emg_17_resource_0,emg_17_emg_param_1_4,emg_17_size_cnt,emg_17_emg_param_3_5);
      #line 1243 
      ldv_free((void *)emg_17_emg_param_1_4);
      #line 1244 
      ldv_free((void *)emg_17_emg_param_3_5);
      #line 1246 
      break;
      #line 1248 
      default: 
               #line 1248 
      ;
      #line 1248 
      __VERIFIER_assume(0);
    }
    #line 1251 
    if (emg_repeat_cnt_call_17 > 0) {
      #line 1252 
      emg_repeat_cnt_call_17 --;
      #line 1254 
      goto emg_call_17;
    }
    else 
         #line 1256 
         __VERIFIER_assume(0);
  }
  else {
    #line 1262 
    (*emg_alias_single_release)(emg_17_resource_1,emg_17_resource_0);
    #line 1265 
    if (emg_repeat_cnt_main_17_1 > 0) {
      #line 1266 
      emg_repeat_cnt_main_17_1 --;
      #line 1268 
      goto emg_main_17;
    }
    else 
         #line 1270 
         __VERIFIER_assume(0);
  }
  #line 1276 
  return (void *)0;
  #line 1279 
  emg_main_17: 
               #line 1279 
  ;
  #line 1280 
  if (ldv_undef_int() != 0) {
    #line 1282 
    emg_17_ret = emg_wrapper_mvpp2_dbgfs_flow_dec_hits_open(emg_17_resource_1,emg_17_resource_0);
    #line 1287 
    emg_17_ret = ldv_filter_err_code(emg_17_ret);
    #line 1290 
    if (ldv_undef_int() != 0) {
      #line 1292 
      __VERIFIER_assume(emg_17_ret == 0);
      #line 1296 
      goto emg_call_17;
    }
    else {
      #line 1301 
      __VERIFIER_assume(emg_17_ret != 0);
      #line 1304 
      if (emg_repeat_cnt_main_17_0 > 0) {
        #line 1305 
        emg_repeat_cnt_main_17_0 --;
        #line 1307 
        goto emg_main_17;
      }
      else 
           #line 1309 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 1316 
       ldv_free((void *)emg_17_resource_0);
  #line 1324 
  return (void *)0;
}

#line 1329  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_mvpp2_dbgfs_flow_flt_hits_fops(void *arg0)
{
  #line 1332 
  struct file_operations *emg_18_container;
  #line 1333 
  long long emg_18_emg_param_1_0;
  #line 1334 
  char *emg_18_emg_param_1_2;
  #line 1335 
  char *emg_18_emg_param_1_4;
  #line 1336 
  int emg_18_emg_param_2_1;
  #line 1337 
  long long *emg_18_emg_param_3_3;
  #line 1338 
  long long *emg_18_emg_param_3_5;
  #line 1339 
  struct file *emg_18_resource_0;
  #line 1340 
  struct inode *emg_18_resource_1;
  #line 1341 
  int emg_18_ret;
  #line 1342 
  unsigned long emg_18_size_cnt;
  #line 1343 
  int emg_repeat_cnt_call_18 = 1;
  #line 1344 
  int emg_repeat_cnt_main_18_1 = 1;
  #line 1345 
  int emg_repeat_cnt_main_18_0 = 1;
  #line 1347 
  struct emg_struct_character_driver_scenario_mvpp2_dbgfs_filter_fops_13 *data = (struct emg_struct_character_driver_scenario_mvpp2_dbgfs_filter_fops_13 *)arg0;
  #line 1351 
  emg_18_ret = ldv_undef_int();
  #line 1352 
  emg_18_container = emg_alias_mvpp2_dbgfs_flow_flt_hits_fops;
  #line 1353 
  emg_18_ret = ldv_undef_int();
  #line 1355 
  __VERIFIER_assume(data->arg0 == emg_alias_mvpp2_dbgfs_flow_flt_hits_fops);
  #line 1357 
  if (data != (struct emg_struct_character_driver_scenario_mvpp2_dbgfs_filter_fops_13 *)0) {
    #line 1358 
    emg_18_container = data->arg0;
    #line 1359 
    ldv_free((void *)data);
  }
  #line 1364 
  emg_18_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 1365 
  emg_18_size_cnt = (unsigned long)ldv_undef_int();
  #line 1369 
  goto emg_main_18;
  #line 1373 
  return (void *)0;
  #line 1376 
  emg_call_18: 
               #line 1376 
  ;
  #line 1377 
  if (ldv_undef_int() != 0) {
    #line 1378 
    switch (ldv_undef_int()) {
      #line 1379 
      case 0: 
              #line 1379 
      ;
      #line 1381 
      emg_18_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 1381 
      emg_18_emg_param_1_2 = emg_18_emg_param_1_2;
      #line 1382 
      emg_18_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 1382 
      emg_18_emg_param_3_3 = emg_18_emg_param_3_3;
      #line 1386 
      seq_read(emg_18_resource_0,emg_18_emg_param_1_2,emg_18_size_cnt,emg_18_emg_param_3_3);
      #line 1390 
      ldv_free((void *)emg_18_emg_param_1_2);
      #line 1391 
      ldv_free((void *)emg_18_emg_param_3_3);
      #line 1393 
      break;
      #line 1395 
      case 1: 
              #line 1395 
      ;
      #line 1397 
      seq_lseek(emg_18_resource_0,emg_18_emg_param_1_0,emg_18_emg_param_2_1);
      #line 1399 
      break;
      #line 1401 
      case 2: 
              #line 1401 
      ;
      #line 1408 
      __VERIFIER_assume(emg_18_size_cnt <= 2147479552UL);
      #line 1409 
      emg_18_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 1409 
      emg_18_emg_param_1_4 = emg_18_emg_param_1_4;
      #line 1410 
      emg_18_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 1410 
      emg_18_emg_param_3_5 = emg_18_emg_param_3_5;
      #line 1414 
      if (emg_18_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 1415 
        (*(emg_18_container->write))(emg_18_resource_0,emg_18_emg_param_1_4,emg_18_size_cnt,emg_18_emg_param_3_5);
      #line 1420 
      ldv_free((void *)emg_18_emg_param_1_4);
      #line 1421 
      ldv_free((void *)emg_18_emg_param_3_5);
      #line 1423 
      break;
      #line 1425 
      default: 
               #line 1425 
      ;
      #line 1425 
      __VERIFIER_assume(0);
    }
    #line 1428 
    if (emg_repeat_cnt_call_18 > 0) {
      #line 1429 
      emg_repeat_cnt_call_18 --;
      #line 1431 
      goto emg_call_18;
    }
    else 
         #line 1433 
         __VERIFIER_assume(0);
  }
  else {
    #line 1439 
    (*emg_alias_single_release)(emg_18_resource_1,emg_18_resource_0);
    #line 1442 
    if (emg_repeat_cnt_main_18_1 > 0) {
      #line 1443 
      emg_repeat_cnt_main_18_1 --;
      #line 1445 
      goto emg_main_18;
    }
    else 
         #line 1447 
         __VERIFIER_assume(0);
  }
  #line 1453 
  return (void *)0;
  #line 1456 
  emg_main_18: 
               #line 1456 
  ;
  #line 1457 
  if (ldv_undef_int() != 0) {
    #line 1459 
    emg_18_ret = emg_wrapper_mvpp2_dbgfs_flow_flt_hits_open(emg_18_resource_1,emg_18_resource_0);
    #line 1464 
    emg_18_ret = ldv_filter_err_code(emg_18_ret);
    #line 1467 
    if (ldv_undef_int() != 0) {
      #line 1469 
      __VERIFIER_assume(emg_18_ret == 0);
      #line 1473 
      goto emg_call_18;
    }
    else {
      #line 1478 
      __VERIFIER_assume(emg_18_ret != 0);
      #line 1481 
      if (emg_repeat_cnt_main_18_0 > 0) {
        #line 1482 
        emg_repeat_cnt_main_18_0 --;
        #line 1484 
        goto emg_main_18;
      }
      else 
           #line 1486 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 1493 
       ldv_free((void *)emg_18_resource_0);
  #line 1501 
  return (void *)0;
}

#line 1506  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_mvpp2_dbgfs_flow_id_fops(void *arg0)
{
  #line 1509 
  struct file_operations *emg_19_container;
  #line 1510 
  long long emg_19_emg_param_1_0;
  #line 1511 
  char *emg_19_emg_param_1_2;
  #line 1512 
  char *emg_19_emg_param_1_4;
  #line 1513 
  int emg_19_emg_param_2_1;
  #line 1514 
  long long *emg_19_emg_param_3_3;
  #line 1515 
  long long *emg_19_emg_param_3_5;
  #line 1516 
  struct file *emg_19_resource_0;
  #line 1517 
  struct inode *emg_19_resource_1;
  #line 1518 
  int emg_19_ret;
  #line 1519 
  unsigned long emg_19_size_cnt;
  #line 1520 
  int emg_repeat_cnt_main_19_0 = 1;
  #line 1521 
  int emg_repeat_cnt_main_19_1 = 1;
  #line 1522 
  int emg_repeat_cnt_call_19 = 1;
  #line 1524 
  struct emg_struct_character_driver_scenario_mvpp2_dbgfs_filter_fops_13 *data = (struct emg_struct_character_driver_scenario_mvpp2_dbgfs_filter_fops_13 *)arg0;
  #line 1528 
  emg_19_ret = ldv_undef_int();
  #line 1529 
  emg_19_container = emg_alias_mvpp2_dbgfs_flow_id_fops;
  #line 1530 
  emg_19_ret = ldv_undef_int();
  #line 1532 
  __VERIFIER_assume(data->arg0 == emg_alias_mvpp2_dbgfs_flow_id_fops);
  #line 1534 
  if (data != (struct emg_struct_character_driver_scenario_mvpp2_dbgfs_filter_fops_13 *)0) {
    #line 1535 
    emg_19_container = data->arg0;
    #line 1536 
    ldv_free((void *)data);
  }
  #line 1541 
  emg_19_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 1542 
  emg_19_size_cnt = (unsigned long)ldv_undef_int();
  #line 1546 
  goto emg_main_19;
  #line 1550 
  return (void *)0;
  #line 1553 
  emg_call_19: 
               #line 1553 
  ;
  #line 1554 
  if (ldv_undef_int() != 0) {
    #line 1555 
    switch (ldv_undef_int()) {
      #line 1556 
      case 0: 
              #line 1556 
      ;
      #line 1558 
      emg_19_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 1558 
      emg_19_emg_param_1_2 = emg_19_emg_param_1_2;
      #line 1559 
      emg_19_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 1559 
      emg_19_emg_param_3_3 = emg_19_emg_param_3_3;
      #line 1563 
      seq_read(emg_19_resource_0,emg_19_emg_param_1_2,emg_19_size_cnt,emg_19_emg_param_3_3);
      #line 1567 
      ldv_free((void *)emg_19_emg_param_1_2);
      #line 1568 
      ldv_free((void *)emg_19_emg_param_3_3);
      #line 1570 
      break;
      #line 1572 
      case 1: 
              #line 1572 
      ;
      #line 1574 
      seq_lseek(emg_19_resource_0,emg_19_emg_param_1_0,emg_19_emg_param_2_1);
      #line 1576 
      break;
      #line 1578 
      case 2: 
              #line 1578 
      ;
      #line 1585 
      __VERIFIER_assume(emg_19_size_cnt <= 2147479552UL);
      #line 1586 
      emg_19_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 1586 
      emg_19_emg_param_1_4 = emg_19_emg_param_1_4;
      #line 1587 
      emg_19_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 1587 
      emg_19_emg_param_3_5 = emg_19_emg_param_3_5;
      #line 1591 
      if (emg_19_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 1592 
        (*(emg_19_container->write))(emg_19_resource_0,emg_19_emg_param_1_4,emg_19_size_cnt,emg_19_emg_param_3_5);
      #line 1597 
      ldv_free((void *)emg_19_emg_param_1_4);
      #line 1598 
      ldv_free((void *)emg_19_emg_param_3_5);
      #line 1600 
      break;
      #line 1602 
      default: 
               #line 1602 
      ;
      #line 1602 
      __VERIFIER_assume(0);
    }
    #line 1605 
    if (emg_repeat_cnt_call_19 > 0) {
      #line 1606 
      emg_repeat_cnt_call_19 --;
      #line 1608 
      goto emg_call_19;
    }
    else 
         #line 1610 
         __VERIFIER_assume(0);
  }
  else {
    #line 1616 
    (*emg_alias_single_release)(emg_19_resource_1,emg_19_resource_0);
    #line 1619 
    if (emg_repeat_cnt_main_19_1 > 0) {
      #line 1620 
      emg_repeat_cnt_main_19_1 --;
      #line 1622 
      goto emg_main_19;
    }
    else 
         #line 1624 
         __VERIFIER_assume(0);
  }
  #line 1630 
  return (void *)0;
  #line 1633 
  emg_main_19: 
               #line 1633 
  ;
  #line 1634 
  if (ldv_undef_int() != 0) {
    #line 1636 
    emg_19_ret = emg_wrapper_mvpp2_dbgfs_flow_id_open(emg_19_resource_1,emg_19_resource_0);
    #line 1641 
    emg_19_ret = ldv_filter_err_code(emg_19_ret);
    #line 1644 
    if (ldv_undef_int() != 0) {
      #line 1646 
      __VERIFIER_assume(emg_19_ret == 0);
      #line 1650 
      goto emg_call_19;
    }
    else {
      #line 1655 
      __VERIFIER_assume(emg_19_ret != 0);
      #line 1658 
      if (emg_repeat_cnt_main_19_0 > 0) {
        #line 1659 
        emg_repeat_cnt_main_19_0 --;
        #line 1661 
        goto emg_main_19;
      }
      else 
           #line 1663 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 1670 
       ldv_free((void *)emg_19_resource_0);
  #line 1678 
  return (void *)0;
}

#line 1683  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_mvpp2_dbgfs_flow_type_fops(void *arg0)
{
  #line 1686 
  struct file_operations *emg_20_container;
  #line 1687 
  long long emg_20_emg_param_1_0;
  #line 1688 
  char *emg_20_emg_param_1_2;
  #line 1689 
  char *emg_20_emg_param_1_4;
  #line 1690 
  int emg_20_emg_param_2_1;
  #line 1691 
  long long *emg_20_emg_param_3_3;
  #line 1692 
  long long *emg_20_emg_param_3_5;
  #line 1693 
  struct file *emg_20_resource_0;
  #line 1694 
  struct inode *emg_20_resource_1;
  #line 1695 
  int emg_20_ret;
  #line 1696 
  unsigned long emg_20_size_cnt;
  #line 1697 
  int emg_repeat_cnt_main_20_0 = 1;
  #line 1698 
  int emg_repeat_cnt_call_20 = 1;
  #line 1699 
  int emg_repeat_cnt_main_20_1 = 1;
  #line 1701 
  struct emg_struct_character_driver_scenario_mvpp2_dbgfs_filter_fops_13 *data = (struct emg_struct_character_driver_scenario_mvpp2_dbgfs_filter_fops_13 *)arg0;
  #line 1705 
  emg_20_ret = ldv_undef_int();
  #line 1706 
  emg_20_container = emg_alias_mvpp2_dbgfs_flow_type_fops;
  #line 1707 
  emg_20_ret = ldv_undef_int();
  #line 1709 
  __VERIFIER_assume(data->arg0 == emg_alias_mvpp2_dbgfs_flow_type_fops);
  #line 1711 
  if (data != (struct emg_struct_character_driver_scenario_mvpp2_dbgfs_filter_fops_13 *)0) {
    #line 1712 
    emg_20_container = data->arg0;
    #line 1713 
    ldv_free((void *)data);
  }
  #line 1718 
  emg_20_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 1719 
  emg_20_size_cnt = (unsigned long)ldv_undef_int();
  #line 1723 
  goto emg_main_20;
  #line 1727 
  return (void *)0;
  #line 1730 
  emg_call_20: 
               #line 1730 
  ;
  #line 1731 
  if (ldv_undef_int() != 0) {
    #line 1732 
    switch (ldv_undef_int()) {
      #line 1733 
      case 0: 
              #line 1733 
      ;
      #line 1735 
      emg_20_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 1735 
      emg_20_emg_param_1_2 = emg_20_emg_param_1_2;
      #line 1736 
      emg_20_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 1736 
      emg_20_emg_param_3_3 = emg_20_emg_param_3_3;
      #line 1740 
      seq_read(emg_20_resource_0,emg_20_emg_param_1_2,emg_20_size_cnt,emg_20_emg_param_3_3);
      #line 1744 
      ldv_free((void *)emg_20_emg_param_1_2);
      #line 1745 
      ldv_free((void *)emg_20_emg_param_3_3);
      #line 1747 
      break;
      #line 1749 
      case 1: 
              #line 1749 
      ;
      #line 1751 
      seq_lseek(emg_20_resource_0,emg_20_emg_param_1_0,emg_20_emg_param_2_1);
      #line 1753 
      break;
      #line 1755 
      case 2: 
              #line 1755 
      ;
      #line 1762 
      __VERIFIER_assume(emg_20_size_cnt <= 2147479552UL);
      #line 1763 
      emg_20_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 1763 
      emg_20_emg_param_1_4 = emg_20_emg_param_1_4;
      #line 1764 
      emg_20_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 1764 
      emg_20_emg_param_3_5 = emg_20_emg_param_3_5;
      #line 1768 
      if (emg_20_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 1769 
        (*(emg_20_container->write))(emg_20_resource_0,emg_20_emg_param_1_4,emg_20_size_cnt,emg_20_emg_param_3_5);
      #line 1774 
      ldv_free((void *)emg_20_emg_param_1_4);
      #line 1775 
      ldv_free((void *)emg_20_emg_param_3_5);
      #line 1777 
      break;
      #line 1779 
      default: 
               #line 1779 
      ;
      #line 1779 
      __VERIFIER_assume(0);
    }
    #line 1782 
    if (emg_repeat_cnt_call_20 > 0) {
      #line 1783 
      emg_repeat_cnt_call_20 --;
      #line 1785 
      goto emg_call_20;
    }
    else 
         #line 1787 
         __VERIFIER_assume(0);
  }
  else {
    #line 1793 
    (*emg_alias_single_release)(emg_20_resource_1,emg_20_resource_0);
    #line 1796 
    if (emg_repeat_cnt_main_20_1 > 0) {
      #line 1797 
      emg_repeat_cnt_main_20_1 --;
      #line 1799 
      goto emg_main_20;
    }
    else 
         #line 1801 
         __VERIFIER_assume(0);
  }
  #line 1807 
  return (void *)0;
  #line 1810 
  emg_main_20: 
               #line 1810 
  ;
  #line 1811 
  if (ldv_undef_int() != 0) {
    #line 1813 
    emg_20_ret = emg_wrapper_mvpp2_dbgfs_flow_type_open(emg_20_resource_1,emg_20_resource_0);
    #line 1818 
    emg_20_ret = ldv_filter_err_code(emg_20_ret);
    #line 1821 
    if (ldv_undef_int() != 0) {
      #line 1823 
      __VERIFIER_assume(emg_20_ret == 0);
      #line 1827 
      goto emg_call_20;
    }
    else {
      #line 1832 
      __VERIFIER_assume(emg_20_ret != 0);
      #line 1835 
      if (emg_repeat_cnt_main_20_0 > 0) {
        #line 1836 
        emg_repeat_cnt_main_20_0 --;
        #line 1838 
        goto emg_main_20;
      }
      else 
           #line 1840 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 1847 
       ldv_free((void *)emg_20_resource_0);
  #line 1855 
  return (void *)0;
}

#line 1860  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_mvpp2_dbgfs_port_flow_engine_fops(void *arg0)
{
  #line 1863 
  struct file_operations *emg_21_container;
  #line 1864 
  long long emg_21_emg_param_1_0;
  #line 1865 
  char *emg_21_emg_param_1_2;
  #line 1866 
  char *emg_21_emg_param_1_4;
  #line 1867 
  int emg_21_emg_param_2_1;
  #line 1868 
  long long *emg_21_emg_param_3_3;
  #line 1869 
  long long *emg_21_emg_param_3_5;
  #line 1870 
  struct file *emg_21_resource_0;
  #line 1871 
  struct inode *emg_21_resource_1;
  #line 1872 
  int emg_21_ret;
  #line 1873 
  unsigned long emg_21_size_cnt;
  #line 1874 
  int emg_repeat_cnt_main_21_1 = 1;
  #line 1875 
  int emg_repeat_cnt_call_21 = 1;
  #line 1876 
  int emg_repeat_cnt_main_21_0 = 1;
  #line 1878 
  struct emg_struct_character_driver_scenario_mvpp2_dbgfs_filter_fops_13 *data = (struct emg_struct_character_driver_scenario_mvpp2_dbgfs_filter_fops_13 *)arg0;
  #line 1882 
  emg_21_ret = ldv_undef_int();
  #line 1883 
  emg_21_container = emg_alias_mvpp2_dbgfs_port_flow_engine_fops;
  #line 1884 
  emg_21_ret = ldv_undef_int();
  #line 1886 
  __VERIFIER_assume(data->arg0 == emg_alias_mvpp2_dbgfs_port_flow_engine_fops);
  #line 1888 
  if (data != (struct emg_struct_character_driver_scenario_mvpp2_dbgfs_filter_fops_13 *)0) {
    #line 1889 
    emg_21_container = data->arg0;
    #line 1890 
    ldv_free((void *)data);
  }
  #line 1895 
  emg_21_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 1896 
  emg_21_size_cnt = (unsigned long)ldv_undef_int();
  #line 1900 
  goto emg_main_21;
  #line 1904 
  return (void *)0;
  #line 1907 
  emg_call_21: 
               #line 1907 
  ;
  #line 1908 
  if (ldv_undef_int() != 0) {
    #line 1909 
    switch (ldv_undef_int()) {
      #line 1910 
      case 0: 
              #line 1910 
      ;
      #line 1912 
      emg_21_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 1912 
      emg_21_emg_param_1_2 = emg_21_emg_param_1_2;
      #line 1913 
      emg_21_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 1913 
      emg_21_emg_param_3_3 = emg_21_emg_param_3_3;
      #line 1917 
      seq_read(emg_21_resource_0,emg_21_emg_param_1_2,emg_21_size_cnt,emg_21_emg_param_3_3);
      #line 1921 
      ldv_free((void *)emg_21_emg_param_1_2);
      #line 1922 
      ldv_free((void *)emg_21_emg_param_3_3);
      #line 1924 
      break;
      #line 1926 
      case 1: 
              #line 1926 
      ;
      #line 1928 
      seq_lseek(emg_21_resource_0,emg_21_emg_param_1_0,emg_21_emg_param_2_1);
      #line 1930 
      break;
      #line 1932 
      case 2: 
              #line 1932 
      ;
      #line 1939 
      __VERIFIER_assume(emg_21_size_cnt <= 2147479552UL);
      #line 1940 
      emg_21_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 1940 
      emg_21_emg_param_1_4 = emg_21_emg_param_1_4;
      #line 1941 
      emg_21_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 1941 
      emg_21_emg_param_3_5 = emg_21_emg_param_3_5;
      #line 1945 
      if (emg_21_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 1946 
        (*(emg_21_container->write))(emg_21_resource_0,emg_21_emg_param_1_4,emg_21_size_cnt,emg_21_emg_param_3_5);
      #line 1951 
      ldv_free((void *)emg_21_emg_param_1_4);
      #line 1952 
      ldv_free((void *)emg_21_emg_param_3_5);
      #line 1954 
      break;
      #line 1956 
      default: 
               #line 1956 
      ;
      #line 1956 
      __VERIFIER_assume(0);
    }
    #line 1959 
    if (emg_repeat_cnt_call_21 > 0) {
      #line 1960 
      emg_repeat_cnt_call_21 --;
      #line 1962 
      goto emg_call_21;
    }
    else 
         #line 1964 
         __VERIFIER_assume(0);
  }
  else {
    #line 1970 
    (*emg_alias_single_release)(emg_21_resource_1,emg_21_resource_0);
    #line 1973 
    if (emg_repeat_cnt_main_21_1 > 0) {
      #line 1974 
      emg_repeat_cnt_main_21_1 --;
      #line 1976 
      goto emg_main_21;
    }
    else 
         #line 1978 
         __VERIFIER_assume(0);
  }
  #line 1984 
  return (void *)0;
  #line 1987 
  emg_main_21: 
               #line 1987 
  ;
  #line 1988 
  if (ldv_undef_int() != 0) {
    #line 1990 
    emg_21_ret = emg_wrapper_mvpp2_dbgfs_port_flow_engine_open(emg_21_resource_1,emg_21_resource_0);
    #line 1995 
    emg_21_ret = ldv_filter_err_code(emg_21_ret);
    #line 1998 
    if (ldv_undef_int() != 0) {
      #line 2000 
      __VERIFIER_assume(emg_21_ret == 0);
      #line 2004 
      goto emg_call_21;
    }
    else {
      #line 2009 
      __VERIFIER_assume(emg_21_ret != 0);
      #line 2012 
      if (emg_repeat_cnt_main_21_0 > 0) {
        #line 2013 
        emg_repeat_cnt_main_21_0 --;
        #line 2015 
        goto emg_main_21;
      }
      else 
           #line 2017 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 2024 
       ldv_free((void *)emg_21_resource_0);
  #line 2032 
  return (void *)0;
}

#line 2037  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_mvpp2_dbgfs_port_flow_hash_opt_fops(void *arg0)
{
  #line 2040 
  struct file_operations *emg_22_container;
  #line 2041 
  long long emg_22_emg_param_1_0;
  #line 2042 
  char *emg_22_emg_param_1_2;
  #line 2043 
  char *emg_22_emg_param_1_4;
  #line 2044 
  int emg_22_emg_param_2_1;
  #line 2045 
  long long *emg_22_emg_param_3_3;
  #line 2046 
  long long *emg_22_emg_param_3_5;
  #line 2047 
  struct file *emg_22_resource_0;
  #line 2048 
  struct inode *emg_22_resource_1;
  #line 2049 
  int emg_22_ret;
  #line 2050 
  unsigned long emg_22_size_cnt;
  #line 2051 
  int emg_repeat_cnt_main_22_0 = 1;
  #line 2052 
  int emg_repeat_cnt_call_22 = 1;
  #line 2053 
  int emg_repeat_cnt_main_22_1 = 1;
  #line 2055 
  struct emg_struct_character_driver_scenario_mvpp2_dbgfs_filter_fops_13 *data = (struct emg_struct_character_driver_scenario_mvpp2_dbgfs_filter_fops_13 *)arg0;
  #line 2059 
  emg_22_ret = ldv_undef_int();
  #line 2060 
  emg_22_container = emg_alias_mvpp2_dbgfs_port_flow_hash_opt_fops;
  #line 2061 
  emg_22_ret = ldv_undef_int();
  #line 2063 
  __VERIFIER_assume(data->arg0 == emg_alias_mvpp2_dbgfs_port_flow_hash_opt_fops);
  #line 2065 
  if (data != (struct emg_struct_character_driver_scenario_mvpp2_dbgfs_filter_fops_13 *)0) {
    #line 2066 
    emg_22_container = data->arg0;
    #line 2067 
    ldv_free((void *)data);
  }
  #line 2072 
  emg_22_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 2073 
  emg_22_size_cnt = (unsigned long)ldv_undef_int();
  #line 2077 
  goto emg_main_22;
  #line 2081 
  return (void *)0;
  #line 2084 
  emg_call_22: 
               #line 2084 
  ;
  #line 2085 
  if (ldv_undef_int() != 0) {
    #line 2086 
    switch (ldv_undef_int()) {
      #line 2087 
      case 0: 
              #line 2087 
      ;
      #line 2089 
      emg_22_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 2089 
      emg_22_emg_param_1_2 = emg_22_emg_param_1_2;
      #line 2090 
      emg_22_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 2090 
      emg_22_emg_param_3_3 = emg_22_emg_param_3_3;
      #line 2094 
      seq_read(emg_22_resource_0,emg_22_emg_param_1_2,emg_22_size_cnt,emg_22_emg_param_3_3);
      #line 2098 
      ldv_free((void *)emg_22_emg_param_1_2);
      #line 2099 
      ldv_free((void *)emg_22_emg_param_3_3);
      #line 2101 
      break;
      #line 2103 
      case 1: 
              #line 2103 
      ;
      #line 2105 
      seq_lseek(emg_22_resource_0,emg_22_emg_param_1_0,emg_22_emg_param_2_1);
      #line 2107 
      break;
      #line 2109 
      case 2: 
              #line 2109 
      ;
      #line 2116 
      __VERIFIER_assume(emg_22_size_cnt <= 2147479552UL);
      #line 2117 
      emg_22_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 2117 
      emg_22_emg_param_1_4 = emg_22_emg_param_1_4;
      #line 2118 
      emg_22_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 2118 
      emg_22_emg_param_3_5 = emg_22_emg_param_3_5;
      #line 2122 
      if (emg_22_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 2123 
        (*(emg_22_container->write))(emg_22_resource_0,emg_22_emg_param_1_4,emg_22_size_cnt,emg_22_emg_param_3_5);
      #line 2128 
      ldv_free((void *)emg_22_emg_param_1_4);
      #line 2129 
      ldv_free((void *)emg_22_emg_param_3_5);
      #line 2131 
      break;
      #line 2133 
      default: 
               #line 2133 
      ;
      #line 2133 
      __VERIFIER_assume(0);
    }
    #line 2136 
    if (emg_repeat_cnt_call_22 > 0) {
      #line 2137 
      emg_repeat_cnt_call_22 --;
      #line 2139 
      goto emg_call_22;
    }
    else 
         #line 2141 
         __VERIFIER_assume(0);
  }
  else {
    #line 2147 
    (*emg_alias_single_release)(emg_22_resource_1,emg_22_resource_0);
    #line 2150 
    if (emg_repeat_cnt_main_22_1 > 0) {
      #line 2151 
      emg_repeat_cnt_main_22_1 --;
      #line 2153 
      goto emg_main_22;
    }
    else 
         #line 2155 
         __VERIFIER_assume(0);
  }
  #line 2161 
  return (void *)0;
  #line 2164 
  emg_main_22: 
               #line 2164 
  ;
  #line 2165 
  if (ldv_undef_int() != 0) {
    #line 2167 
    emg_22_ret = emg_wrapper_mvpp2_dbgfs_port_flow_hash_opt_open(emg_22_resource_1,emg_22_resource_0);
    #line 2172 
    emg_22_ret = ldv_filter_err_code(emg_22_ret);
    #line 2175 
    if (ldv_undef_int() != 0) {
      #line 2177 
      __VERIFIER_assume(emg_22_ret == 0);
      #line 2181 
      goto emg_call_22;
    }
    else {
      #line 2186 
      __VERIFIER_assume(emg_22_ret != 0);
      #line 2189 
      if (emg_repeat_cnt_main_22_0 > 0) {
        #line 2190 
        emg_repeat_cnt_main_22_0 --;
        #line 2192 
        goto emg_main_22;
      }
      else 
           #line 2194 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 2201 
       ldv_free((void *)emg_22_resource_0);
  #line 2209 
  return (void *)0;
}

#line 2214  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_mvpp2_dbgfs_port_parser_fops(void *arg0)
{
  #line 2217 
  struct file_operations *emg_23_container;
  #line 2218 
  long long emg_23_emg_param_1_0;
  #line 2219 
  char *emg_23_emg_param_1_2;
  #line 2220 
  char *emg_23_emg_param_1_4;
  #line 2221 
  int emg_23_emg_param_2_1;
  #line 2222 
  long long *emg_23_emg_param_3_3;
  #line 2223 
  long long *emg_23_emg_param_3_5;
  #line 2224 
  struct file *emg_23_resource_0;
  #line 2225 
  struct inode *emg_23_resource_1;
  #line 2226 
  int emg_23_ret;
  #line 2227 
  unsigned long emg_23_size_cnt;
  #line 2228 
  int emg_repeat_cnt_main_23_0 = 1;
  #line 2229 
  int emg_repeat_cnt_call_23 = 1;
  #line 2230 
  int emg_repeat_cnt_main_23_1 = 1;
  #line 2232 
  struct emg_struct_character_driver_scenario_mvpp2_dbgfs_filter_fops_13 *data = (struct emg_struct_character_driver_scenario_mvpp2_dbgfs_filter_fops_13 *)arg0;
  #line 2236 
  emg_23_ret = ldv_undef_int();
  #line 2237 
  emg_23_container = emg_alias_mvpp2_dbgfs_port_parser_fops;
  #line 2238 
  emg_23_ret = ldv_undef_int();
  #line 2240 
  __VERIFIER_assume(data->arg0 == emg_alias_mvpp2_dbgfs_port_parser_fops);
  #line 2242 
  if (data != (struct emg_struct_character_driver_scenario_mvpp2_dbgfs_filter_fops_13 *)0) {
    #line 2243 
    emg_23_container = data->arg0;
    #line 2244 
    ldv_free((void *)data);
  }
  #line 2249 
  emg_23_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 2250 
  emg_23_size_cnt = (unsigned long)ldv_undef_int();
  #line 2254 
  goto emg_main_23;
  #line 2258 
  return (void *)0;
  #line 2261 
  emg_call_23: 
               #line 2261 
  ;
  #line 2262 
  if (ldv_undef_int() != 0) {
    #line 2263 
    switch (ldv_undef_int()) {
      #line 2264 
      case 0: 
              #line 2264 
      ;
      #line 2266 
      emg_23_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 2266 
      emg_23_emg_param_1_2 = emg_23_emg_param_1_2;
      #line 2267 
      emg_23_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 2267 
      emg_23_emg_param_3_3 = emg_23_emg_param_3_3;
      #line 2271 
      seq_read(emg_23_resource_0,emg_23_emg_param_1_2,emg_23_size_cnt,emg_23_emg_param_3_3);
      #line 2275 
      ldv_free((void *)emg_23_emg_param_1_2);
      #line 2276 
      ldv_free((void *)emg_23_emg_param_3_3);
      #line 2278 
      break;
      #line 2280 
      case 1: 
              #line 2280 
      ;
      #line 2282 
      seq_lseek(emg_23_resource_0,emg_23_emg_param_1_0,emg_23_emg_param_2_1);
      #line 2284 
      break;
      #line 2286 
      case 2: 
              #line 2286 
      ;
      #line 2293 
      __VERIFIER_assume(emg_23_size_cnt <= 2147479552UL);
      #line 2294 
      emg_23_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 2294 
      emg_23_emg_param_1_4 = emg_23_emg_param_1_4;
      #line 2295 
      emg_23_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 2295 
      emg_23_emg_param_3_5 = emg_23_emg_param_3_5;
      #line 2299 
      if (emg_23_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 2300 
        (*(emg_23_container->write))(emg_23_resource_0,emg_23_emg_param_1_4,emg_23_size_cnt,emg_23_emg_param_3_5);
      #line 2305 
      ldv_free((void *)emg_23_emg_param_1_4);
      #line 2306 
      ldv_free((void *)emg_23_emg_param_3_5);
      #line 2308 
      break;
      #line 2310 
      default: 
               #line 2310 
      ;
      #line 2310 
      __VERIFIER_assume(0);
    }
    #line 2313 
    if (emg_repeat_cnt_call_23 > 0) {
      #line 2314 
      emg_repeat_cnt_call_23 --;
      #line 2316 
      goto emg_call_23;
    }
    else 
         #line 2318 
         __VERIFIER_assume(0);
  }
  else {
    #line 2324 
    (*emg_alias_single_release)(emg_23_resource_1,emg_23_resource_0);
    #line 2327 
    if (emg_repeat_cnt_main_23_1 > 0) {
      #line 2328 
      emg_repeat_cnt_main_23_1 --;
      #line 2330 
      goto emg_main_23;
    }
    else 
         #line 2332 
         __VERIFIER_assume(0);
  }
  #line 2338 
  return (void *)0;
  #line 2341 
  emg_main_23: 
               #line 2341 
  ;
  #line 2342 
  if (ldv_undef_int() != 0) {
    #line 2344 
    emg_23_ret = emg_wrapper_mvpp2_dbgfs_port_parser_open(emg_23_resource_1,emg_23_resource_0);
    #line 2349 
    emg_23_ret = ldv_filter_err_code(emg_23_ret);
    #line 2352 
    if (ldv_undef_int() != 0) {
      #line 2354 
      __VERIFIER_assume(emg_23_ret == 0);
      #line 2358 
      goto emg_call_23;
    }
    else {
      #line 2363 
      __VERIFIER_assume(emg_23_ret != 0);
      #line 2366 
      if (emg_repeat_cnt_main_23_0 > 0) {
        #line 2367 
        emg_repeat_cnt_main_23_0 --;
        #line 2369 
        goto emg_main_23;
      }
      else 
           #line 2371 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 2378 
       ldv_free((void *)emg_23_resource_0);
  #line 2386 
  return (void *)0;
}

#line 2391  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_mvpp2_dbgfs_port_vid_fops(void *arg0)
{
  #line 2394 
  struct file_operations *emg_24_container;
  #line 2395 
  long long emg_24_emg_param_1_0;
  #line 2396 
  char *emg_24_emg_param_1_2;
  #line 2397 
  char *emg_24_emg_param_1_4;
  #line 2398 
  int emg_24_emg_param_2_1;
  #line 2399 
  long long *emg_24_emg_param_3_3;
  #line 2400 
  long long *emg_24_emg_param_3_5;
  #line 2401 
  struct file *emg_24_resource_0;
  #line 2402 
  struct inode *emg_24_resource_1;
  #line 2403 
  int emg_24_ret;
  #line 2404 
  unsigned long emg_24_size_cnt;
  #line 2405 
  int emg_repeat_cnt_call_24 = 1;
  #line 2406 
  int emg_repeat_cnt_main_24_0 = 1;
  #line 2407 
  int emg_repeat_cnt_main_24_1 = 1;
  #line 2409 
  struct emg_struct_character_driver_scenario_mvpp2_dbgfs_filter_fops_13 *data = (struct emg_struct_character_driver_scenario_mvpp2_dbgfs_filter_fops_13 *)arg0;
  #line 2413 
  emg_24_ret = ldv_undef_int();
  #line 2414 
  emg_24_container = emg_alias_mvpp2_dbgfs_port_vid_fops;
  #line 2415 
  emg_24_ret = ldv_undef_int();
  #line 2417 
  __VERIFIER_assume(data->arg0 == emg_alias_mvpp2_dbgfs_port_vid_fops);
  #line 2419 
  if (data != (struct emg_struct_character_driver_scenario_mvpp2_dbgfs_filter_fops_13 *)0) {
    #line 2420 
    emg_24_container = data->arg0;
    #line 2421 
    ldv_free((void *)data);
  }
  #line 2426 
  emg_24_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 2427 
  emg_24_size_cnt = (unsigned long)ldv_undef_int();
  #line 2431 
  goto emg_main_24;
  #line 2435 
  return (void *)0;
  #line 2438 
  emg_call_24: 
               #line 2438 
  ;
  #line 2439 
  if (ldv_undef_int() != 0) {
    #line 2440 
    switch (ldv_undef_int()) {
      #line 2441 
      case 0: 
              #line 2441 
      ;
      #line 2443 
      emg_24_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 2443 
      emg_24_emg_param_1_2 = emg_24_emg_param_1_2;
      #line 2444 
      emg_24_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 2444 
      emg_24_emg_param_3_3 = emg_24_emg_param_3_3;
      #line 2448 
      seq_read(emg_24_resource_0,emg_24_emg_param_1_2,emg_24_size_cnt,emg_24_emg_param_3_3);
      #line 2452 
      ldv_free((void *)emg_24_emg_param_1_2);
      #line 2453 
      ldv_free((void *)emg_24_emg_param_3_3);
      #line 2455 
      break;
      #line 2457 
      case 1: 
              #line 2457 
      ;
      #line 2459 
      seq_lseek(emg_24_resource_0,emg_24_emg_param_1_0,emg_24_emg_param_2_1);
      #line 2461 
      break;
      #line 2463 
      case 2: 
              #line 2463 
      ;
      #line 2470 
      __VERIFIER_assume(emg_24_size_cnt <= 2147479552UL);
      #line 2471 
      emg_24_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 2471 
      emg_24_emg_param_1_4 = emg_24_emg_param_1_4;
      #line 2472 
      emg_24_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 2472 
      emg_24_emg_param_3_5 = emg_24_emg_param_3_5;
      #line 2476 
      if (emg_24_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 2477 
        (*(emg_24_container->write))(emg_24_resource_0,emg_24_emg_param_1_4,emg_24_size_cnt,emg_24_emg_param_3_5);
      #line 2482 
      ldv_free((void *)emg_24_emg_param_1_4);
      #line 2483 
      ldv_free((void *)emg_24_emg_param_3_5);
      #line 2485 
      break;
      #line 2487 
      default: 
               #line 2487 
      ;
      #line 2487 
      __VERIFIER_assume(0);
    }
    #line 2490 
    if (emg_repeat_cnt_call_24 > 0) {
      #line 2491 
      emg_repeat_cnt_call_24 --;
      #line 2493 
      goto emg_call_24;
    }
    else 
         #line 2495 
         __VERIFIER_assume(0);
  }
  else {
    #line 2501 
    (*emg_alias_single_release)(emg_24_resource_1,emg_24_resource_0);
    #line 2504 
    if (emg_repeat_cnt_main_24_0 > 0) {
      #line 2505 
      emg_repeat_cnt_main_24_0 --;
      #line 2507 
      goto emg_main_24;
    }
    else 
         #line 2509 
         __VERIFIER_assume(0);
  }
  #line 2515 
  return (void *)0;
  #line 2518 
  emg_main_24: 
               #line 2518 
  ;
  #line 2519 
  if (ldv_undef_int() != 0) {
    #line 2521 
    emg_24_ret = emg_wrapper_mvpp2_dbgfs_port_vid_open(emg_24_resource_1,emg_24_resource_0);
    #line 2526 
    emg_24_ret = ldv_filter_err_code(emg_24_ret);
    #line 2529 
    if (ldv_undef_int() != 0) {
      #line 2531 
      __VERIFIER_assume(emg_24_ret == 0);
      #line 2535 
      goto emg_call_24;
    }
    else {
      #line 2540 
      __VERIFIER_assume(emg_24_ret != 0);
      #line 2543 
      if (emg_repeat_cnt_main_24_1 > 0) {
        #line 2544 
        emg_repeat_cnt_main_24_1 --;
        #line 2546 
        goto emg_main_24;
      }
      else 
           #line 2548 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 2555 
       ldv_free((void *)emg_24_resource_0);
  #line 2563 
  return (void *)0;
}

#line 2568  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_mvpp2_dbgfs_prs_ai_fops(void *arg0)
{
  #line 2571 
  struct file_operations *emg_25_container;
  #line 2572 
  long long emg_25_emg_param_1_0;
  #line 2573 
  char *emg_25_emg_param_1_2;
  #line 2574 
  char *emg_25_emg_param_1_4;
  #line 2575 
  int emg_25_emg_param_2_1;
  #line 2576 
  long long *emg_25_emg_param_3_3;
  #line 2577 
  long long *emg_25_emg_param_3_5;
  #line 2578 
  struct file *emg_25_resource_0;
  #line 2579 
  struct inode *emg_25_resource_1;
  #line 2580 
  int emg_25_ret;
  #line 2581 
  unsigned long emg_25_size_cnt;
  #line 2582 
  int emg_repeat_cnt_call_25 = 1;
  #line 2583 
  int emg_repeat_cnt_main_25_0 = 1;
  #line 2584 
  int emg_repeat_cnt_main_25_1 = 1;
  #line 2586 
  struct emg_struct_character_driver_scenario_mvpp2_dbgfs_filter_fops_13 *data = (struct emg_struct_character_driver_scenario_mvpp2_dbgfs_filter_fops_13 *)arg0;
  #line 2590 
  emg_25_ret = ldv_undef_int();
  #line 2591 
  emg_25_container = emg_alias_mvpp2_dbgfs_prs_ai_fops;
  #line 2592 
  emg_25_ret = ldv_undef_int();
  #line 2594 
  __VERIFIER_assume(data->arg0 == emg_alias_mvpp2_dbgfs_prs_ai_fops);
  #line 2596 
  if (data != (struct emg_struct_character_driver_scenario_mvpp2_dbgfs_filter_fops_13 *)0) {
    #line 2597 
    emg_25_container = data->arg0;
    #line 2598 
    ldv_free((void *)data);
  }
  #line 2603 
  emg_25_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 2604 
  emg_25_size_cnt = (unsigned long)ldv_undef_int();
  #line 2608 
  goto emg_main_25;
  #line 2612 
  return (void *)0;
  #line 2615 
  emg_call_25: 
               #line 2615 
  ;
  #line 2616 
  if (ldv_undef_int() != 0) {
    #line 2617 
    switch (ldv_undef_int()) {
      #line 2618 
      case 0: 
              #line 2618 
      ;
      #line 2620 
      emg_25_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 2620 
      emg_25_emg_param_1_2 = emg_25_emg_param_1_2;
      #line 2621 
      emg_25_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 2621 
      emg_25_emg_param_3_3 = emg_25_emg_param_3_3;
      #line 2625 
      seq_read(emg_25_resource_0,emg_25_emg_param_1_2,emg_25_size_cnt,emg_25_emg_param_3_3);
      #line 2629 
      ldv_free((void *)emg_25_emg_param_1_2);
      #line 2630 
      ldv_free((void *)emg_25_emg_param_3_3);
      #line 2632 
      break;
      #line 2634 
      case 1: 
              #line 2634 
      ;
      #line 2636 
      seq_lseek(emg_25_resource_0,emg_25_emg_param_1_0,emg_25_emg_param_2_1);
      #line 2638 
      break;
      #line 2640 
      case 2: 
              #line 2640 
      ;
      #line 2647 
      __VERIFIER_assume(emg_25_size_cnt <= 2147479552UL);
      #line 2648 
      emg_25_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 2648 
      emg_25_emg_param_1_4 = emg_25_emg_param_1_4;
      #line 2649 
      emg_25_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 2649 
      emg_25_emg_param_3_5 = emg_25_emg_param_3_5;
      #line 2653 
      if (emg_25_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 2654 
        (*(emg_25_container->write))(emg_25_resource_0,emg_25_emg_param_1_4,emg_25_size_cnt,emg_25_emg_param_3_5);
      #line 2659 
      ldv_free((void *)emg_25_emg_param_1_4);
      #line 2660 
      ldv_free((void *)emg_25_emg_param_3_5);
      #line 2662 
      break;
      #line 2664 
      default: 
               #line 2664 
      ;
      #line 2664 
      __VERIFIER_assume(0);
    }
    #line 2667 
    if (emg_repeat_cnt_call_25 > 0) {
      #line 2668 
      emg_repeat_cnt_call_25 --;
      #line 2670 
      goto emg_call_25;
    }
    else 
         #line 2672 
         __VERIFIER_assume(0);
  }
  else {
    #line 2678 
    (*emg_alias_single_release)(emg_25_resource_1,emg_25_resource_0);
    #line 2681 
    if (emg_repeat_cnt_main_25_0 > 0) {
      #line 2682 
      emg_repeat_cnt_main_25_0 --;
      #line 2684 
      goto emg_main_25;
    }
    else 
         #line 2686 
         __VERIFIER_assume(0);
  }
  #line 2692 
  return (void *)0;
  #line 2695 
  emg_main_25: 
               #line 2695 
  ;
  #line 2696 
  if (ldv_undef_int() != 0) {
    #line 2698 
    emg_25_ret = emg_wrapper_mvpp2_dbgfs_prs_ai_open(emg_25_resource_1,emg_25_resource_0);
    #line 2703 
    emg_25_ret = ldv_filter_err_code(emg_25_ret);
    #line 2706 
    if (ldv_undef_int() != 0) {
      #line 2708 
      __VERIFIER_assume(emg_25_ret == 0);
      #line 2712 
      goto emg_call_25;
    }
    else {
      #line 2717 
      __VERIFIER_assume(emg_25_ret != 0);
      #line 2720 
      if (emg_repeat_cnt_main_25_1 > 0) {
        #line 2721 
        emg_repeat_cnt_main_25_1 --;
        #line 2723 
        goto emg_main_25;
      }
      else 
           #line 2725 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 2732 
       ldv_free((void *)emg_25_resource_0);
  #line 2740 
  return (void *)0;
}

#line 2745  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_mvpp2_dbgfs_prs_hdata_fops(void *arg0)
{
  #line 2748 
  struct file_operations *emg_26_container;
  #line 2749 
  long long emg_26_emg_param_1_0;
  #line 2750 
  char *emg_26_emg_param_1_2;
  #line 2751 
  char *emg_26_emg_param_1_4;
  #line 2752 
  int emg_26_emg_param_2_1;
  #line 2753 
  long long *emg_26_emg_param_3_3;
  #line 2754 
  long long *emg_26_emg_param_3_5;
  #line 2755 
  struct file *emg_26_resource_0;
  #line 2756 
  struct inode *emg_26_resource_1;
  #line 2757 
  int emg_26_ret;
  #line 2758 
  unsigned long emg_26_size_cnt;
  #line 2759 
  int emg_repeat_cnt_main_26_1 = 1;
  #line 2760 
  int emg_repeat_cnt_main_26_0 = 1;
  #line 2761 
  int emg_repeat_cnt_call_26 = 1;
  #line 2763 
  struct emg_struct_character_driver_scenario_mvpp2_dbgfs_filter_fops_13 *data = (struct emg_struct_character_driver_scenario_mvpp2_dbgfs_filter_fops_13 *)arg0;
  #line 2767 
  emg_26_ret = ldv_undef_int();
  #line 2768 
  emg_26_container = emg_alias_mvpp2_dbgfs_prs_hdata_fops;
  #line 2769 
  emg_26_ret = ldv_undef_int();
  #line 2771 
  __VERIFIER_assume(data->arg0 == emg_alias_mvpp2_dbgfs_prs_hdata_fops);
  #line 2773 
  if (data != (struct emg_struct_character_driver_scenario_mvpp2_dbgfs_filter_fops_13 *)0) {
    #line 2774 
    emg_26_container = data->arg0;
    #line 2775 
    ldv_free((void *)data);
  }
  #line 2780 
  emg_26_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 2781 
  emg_26_size_cnt = (unsigned long)ldv_undef_int();
  #line 2785 
  goto emg_main_26;
  #line 2789 
  return (void *)0;
  #line 2792 
  emg_call_26: 
               #line 2792 
  ;
  #line 2793 
  if (ldv_undef_int() != 0) {
    #line 2794 
    switch (ldv_undef_int()) {
      #line 2795 
      case 0: 
              #line 2795 
      ;
      #line 2797 
      emg_26_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 2797 
      emg_26_emg_param_1_2 = emg_26_emg_param_1_2;
      #line 2798 
      emg_26_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 2798 
      emg_26_emg_param_3_3 = emg_26_emg_param_3_3;
      #line 2802 
      seq_read(emg_26_resource_0,emg_26_emg_param_1_2,emg_26_size_cnt,emg_26_emg_param_3_3);
      #line 2806 
      ldv_free((void *)emg_26_emg_param_1_2);
      #line 2807 
      ldv_free((void *)emg_26_emg_param_3_3);
      #line 2809 
      break;
      #line 2811 
      case 1: 
              #line 2811 
      ;
      #line 2813 
      seq_lseek(emg_26_resource_0,emg_26_emg_param_1_0,emg_26_emg_param_2_1);
      #line 2815 
      break;
      #line 2817 
      case 2: 
              #line 2817 
      ;
      #line 2824 
      __VERIFIER_assume(emg_26_size_cnt <= 2147479552UL);
      #line 2825 
      emg_26_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 2825 
      emg_26_emg_param_1_4 = emg_26_emg_param_1_4;
      #line 2826 
      emg_26_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 2826 
      emg_26_emg_param_3_5 = emg_26_emg_param_3_5;
      #line 2830 
      if (emg_26_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 2831 
        (*(emg_26_container->write))(emg_26_resource_0,emg_26_emg_param_1_4,emg_26_size_cnt,emg_26_emg_param_3_5);
      #line 2836 
      ldv_free((void *)emg_26_emg_param_1_4);
      #line 2837 
      ldv_free((void *)emg_26_emg_param_3_5);
      #line 2839 
      break;
      #line 2841 
      default: 
               #line 2841 
      ;
      #line 2841 
      __VERIFIER_assume(0);
    }
    #line 2844 
    if (emg_repeat_cnt_call_26 > 0) {
      #line 2845 
      emg_repeat_cnt_call_26 --;
      #line 2847 
      goto emg_call_26;
    }
    else 
         #line 2849 
         __VERIFIER_assume(0);
  }
  else {
    #line 2855 
    (*emg_alias_single_release)(emg_26_resource_1,emg_26_resource_0);
    #line 2858 
    if (emg_repeat_cnt_main_26_1 > 0) {
      #line 2859 
      emg_repeat_cnt_main_26_1 --;
      #line 2861 
      goto emg_main_26;
    }
    else 
         #line 2863 
         __VERIFIER_assume(0);
  }
  #line 2869 
  return (void *)0;
  #line 2872 
  emg_main_26: 
               #line 2872 
  ;
  #line 2873 
  if (ldv_undef_int() != 0) {
    #line 2875 
    emg_26_ret = emg_wrapper_mvpp2_dbgfs_prs_hdata_open(emg_26_resource_1,emg_26_resource_0);
    #line 2880 
    emg_26_ret = ldv_filter_err_code(emg_26_ret);
    #line 2883 
    if (ldv_undef_int() != 0) {
      #line 2885 
      __VERIFIER_assume(emg_26_ret == 0);
      #line 2889 
      goto emg_call_26;
    }
    else {
      #line 2894 
      __VERIFIER_assume(emg_26_ret != 0);
      #line 2897 
      if (emg_repeat_cnt_main_26_0 > 0) {
        #line 2898 
        emg_repeat_cnt_main_26_0 --;
        #line 2900 
        goto emg_main_26;
      }
      else 
           #line 2902 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 2909 
       ldv_free((void *)emg_26_resource_0);
  #line 2917 
  return (void *)0;
}

#line 2922  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_mvpp2_dbgfs_prs_hits_fops(void *arg0)
{
  #line 2925 
  struct file_operations *emg_27_container;
  #line 2926 
  long long emg_27_emg_param_1_0;
  #line 2927 
  char *emg_27_emg_param_1_2;
  #line 2928 
  char *emg_27_emg_param_1_4;
  #line 2929 
  int emg_27_emg_param_2_1;
  #line 2930 
  long long *emg_27_emg_param_3_3;
  #line 2931 
  long long *emg_27_emg_param_3_5;
  #line 2932 
  struct file *emg_27_resource_0;
  #line 2933 
  struct inode *emg_27_resource_1;
  #line 2934 
  int emg_27_ret;
  #line 2935 
  unsigned long emg_27_size_cnt;
  #line 2936 
  int emg_repeat_cnt_main_27_1 = 1;
  #line 2937 
  int emg_repeat_cnt_main_27_0 = 1;
  #line 2938 
  int emg_repeat_cnt_call_27 = 1;
  #line 2940 
  struct emg_struct_character_driver_scenario_mvpp2_dbgfs_filter_fops_13 *data = (struct emg_struct_character_driver_scenario_mvpp2_dbgfs_filter_fops_13 *)arg0;
  #line 2944 
  emg_27_ret = ldv_undef_int();
  #line 2945 
  emg_27_container = emg_alias_mvpp2_dbgfs_prs_hits_fops;
  #line 2946 
  emg_27_ret = ldv_undef_int();
  #line 2948 
  __VERIFIER_assume(data->arg0 == emg_alias_mvpp2_dbgfs_prs_hits_fops);
  #line 2950 
  if (data != (struct emg_struct_character_driver_scenario_mvpp2_dbgfs_filter_fops_13 *)0) {
    #line 2951 
    emg_27_container = data->arg0;
    #line 2952 
    ldv_free((void *)data);
  }
  #line 2957 
  emg_27_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 2958 
  emg_27_size_cnt = (unsigned long)ldv_undef_int();
  #line 2962 
  goto emg_main_27;
  #line 2966 
  return (void *)0;
  #line 2969 
  emg_call_27: 
               #line 2969 
  ;
  #line 2970 
  if (ldv_undef_int() != 0) {
    #line 2971 
    switch (ldv_undef_int()) {
      #line 2972 
      case 0: 
              #line 2972 
      ;
      #line 2974 
      emg_27_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 2974 
      emg_27_emg_param_1_2 = emg_27_emg_param_1_2;
      #line 2975 
      emg_27_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 2975 
      emg_27_emg_param_3_3 = emg_27_emg_param_3_3;
      #line 2979 
      seq_read(emg_27_resource_0,emg_27_emg_param_1_2,emg_27_size_cnt,emg_27_emg_param_3_3);
      #line 2983 
      ldv_free((void *)emg_27_emg_param_1_2);
      #line 2984 
      ldv_free((void *)emg_27_emg_param_3_3);
      #line 2986 
      break;
      #line 2988 
      case 1: 
              #line 2988 
      ;
      #line 2990 
      seq_lseek(emg_27_resource_0,emg_27_emg_param_1_0,emg_27_emg_param_2_1);
      #line 2992 
      break;
      #line 2994 
      case 2: 
              #line 2994 
      ;
      #line 3001 
      __VERIFIER_assume(emg_27_size_cnt <= 2147479552UL);
      #line 3002 
      emg_27_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 3002 
      emg_27_emg_param_1_4 = emg_27_emg_param_1_4;
      #line 3003 
      emg_27_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 3003 
      emg_27_emg_param_3_5 = emg_27_emg_param_3_5;
      #line 3007 
      if (emg_27_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 3008 
        (*(emg_27_container->write))(emg_27_resource_0,emg_27_emg_param_1_4,emg_27_size_cnt,emg_27_emg_param_3_5);
      #line 3013 
      ldv_free((void *)emg_27_emg_param_1_4);
      #line 3014 
      ldv_free((void *)emg_27_emg_param_3_5);
      #line 3016 
      break;
      #line 3018 
      default: 
               #line 3018 
      ;
      #line 3018 
      __VERIFIER_assume(0);
    }
    #line 3021 
    if (emg_repeat_cnt_call_27 > 0) {
      #line 3022 
      emg_repeat_cnt_call_27 --;
      #line 3024 
      goto emg_call_27;
    }
    else 
         #line 3026 
         __VERIFIER_assume(0);
  }
  else {
    #line 3032 
    (*emg_alias_single_release)(emg_27_resource_1,emg_27_resource_0);
    #line 3035 
    if (emg_repeat_cnt_main_27_1 > 0) {
      #line 3036 
      emg_repeat_cnt_main_27_1 --;
      #line 3038 
      goto emg_main_27;
    }
    else 
         #line 3040 
         __VERIFIER_assume(0);
  }
  #line 3046 
  return (void *)0;
  #line 3049 
  emg_main_27: 
               #line 3049 
  ;
  #line 3050 
  if (ldv_undef_int() != 0) {
    #line 3052 
    emg_27_ret = emg_wrapper_mvpp2_dbgfs_prs_hits_open(emg_27_resource_1,emg_27_resource_0);
    #line 3057 
    emg_27_ret = ldv_filter_err_code(emg_27_ret);
    #line 3060 
    if (ldv_undef_int() != 0) {
      #line 3062 
      __VERIFIER_assume(emg_27_ret == 0);
      #line 3066 
      goto emg_call_27;
    }
    else {
      #line 3071 
      __VERIFIER_assume(emg_27_ret != 0);
      #line 3074 
      if (emg_repeat_cnt_main_27_0 > 0) {
        #line 3075 
        emg_repeat_cnt_main_27_0 --;
        #line 3077 
        goto emg_main_27;
      }
      else 
           #line 3079 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 3086 
       ldv_free((void *)emg_27_resource_0);
  #line 3094 
  return (void *)0;
}

#line 3099  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_mvpp2_dbgfs_prs_lu_fops(void *arg0)
{
  #line 3102 
  struct file_operations *emg_28_container;
  #line 3103 
  long long emg_28_emg_param_1_0;
  #line 3104 
  char *emg_28_emg_param_1_2;
  #line 3105 
  char *emg_28_emg_param_1_4;
  #line 3106 
  int emg_28_emg_param_2_1;
  #line 3107 
  long long *emg_28_emg_param_3_3;
  #line 3108 
  long long *emg_28_emg_param_3_5;
  #line 3109 
  struct file *emg_28_resource_0;
  #line 3110 
  struct inode *emg_28_resource_1;
  #line 3111 
  int emg_28_ret;
  #line 3112 
  unsigned long emg_28_size_cnt;
  #line 3113 
  int emg_repeat_cnt_call_28 = 1;
  #line 3114 
  int emg_repeat_cnt_main_28_1 = 1;
  #line 3115 
  int emg_repeat_cnt_main_28_0 = 1;
  #line 3117 
  struct emg_struct_character_driver_scenario_mvpp2_dbgfs_filter_fops_13 *data = (struct emg_struct_character_driver_scenario_mvpp2_dbgfs_filter_fops_13 *)arg0;
  #line 3121 
  emg_28_ret = ldv_undef_int();
  #line 3122 
  emg_28_container = emg_alias_mvpp2_dbgfs_prs_lu_fops;
  #line 3123 
  emg_28_ret = ldv_undef_int();
  #line 3125 
  __VERIFIER_assume(data->arg0 == emg_alias_mvpp2_dbgfs_prs_lu_fops);
  #line 3127 
  if (data != (struct emg_struct_character_driver_scenario_mvpp2_dbgfs_filter_fops_13 *)0) {
    #line 3128 
    emg_28_container = data->arg0;
    #line 3129 
    ldv_free((void *)data);
  }
  #line 3134 
  emg_28_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 3135 
  emg_28_size_cnt = (unsigned long)ldv_undef_int();
  #line 3139 
  goto emg_main_28;
  #line 3143 
  return (void *)0;
  #line 3146 
  emg_call_28: 
               #line 3146 
  ;
  #line 3147 
  if (ldv_undef_int() != 0) {
    #line 3148 
    switch (ldv_undef_int()) {
      #line 3149 
      case 0: 
              #line 3149 
      ;
      #line 3151 
      emg_28_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 3151 
      emg_28_emg_param_1_2 = emg_28_emg_param_1_2;
      #line 3152 
      emg_28_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 3152 
      emg_28_emg_param_3_3 = emg_28_emg_param_3_3;
      #line 3156 
      seq_read(emg_28_resource_0,emg_28_emg_param_1_2,emg_28_size_cnt,emg_28_emg_param_3_3);
      #line 3160 
      ldv_free((void *)emg_28_emg_param_1_2);
      #line 3161 
      ldv_free((void *)emg_28_emg_param_3_3);
      #line 3163 
      break;
      #line 3165 
      case 1: 
              #line 3165 
      ;
      #line 3167 
      seq_lseek(emg_28_resource_0,emg_28_emg_param_1_0,emg_28_emg_param_2_1);
      #line 3169 
      break;
      #line 3171 
      case 2: 
              #line 3171 
      ;
      #line 3178 
      __VERIFIER_assume(emg_28_size_cnt <= 2147479552UL);
      #line 3179 
      emg_28_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 3179 
      emg_28_emg_param_1_4 = emg_28_emg_param_1_4;
      #line 3180 
      emg_28_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 3180 
      emg_28_emg_param_3_5 = emg_28_emg_param_3_5;
      #line 3184 
      if (emg_28_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 3185 
        (*(emg_28_container->write))(emg_28_resource_0,emg_28_emg_param_1_4,emg_28_size_cnt,emg_28_emg_param_3_5);
      #line 3190 
      ldv_free((void *)emg_28_emg_param_1_4);
      #line 3191 
      ldv_free((void *)emg_28_emg_param_3_5);
      #line 3193 
      break;
      #line 3195 
      default: 
               #line 3195 
      ;
      #line 3195 
      __VERIFIER_assume(0);
    }
    #line 3198 
    if (emg_repeat_cnt_call_28 > 0) {
      #line 3199 
      emg_repeat_cnt_call_28 --;
      #line 3201 
      goto emg_call_28;
    }
    else 
         #line 3203 
         __VERIFIER_assume(0);
  }
  else {
    #line 3209 
    (*emg_alias_single_release)(emg_28_resource_1,emg_28_resource_0);
    #line 3212 
    if (emg_repeat_cnt_main_28_0 > 0) {
      #line 3213 
      emg_repeat_cnt_main_28_0 --;
      #line 3215 
      goto emg_main_28;
    }
    else 
         #line 3217 
         __VERIFIER_assume(0);
  }
  #line 3223 
  return (void *)0;
  #line 3226 
  emg_main_28: 
               #line 3226 
  ;
  #line 3227 
  if (ldv_undef_int() != 0) {
    #line 3229 
    emg_28_ret = emg_wrapper_mvpp2_dbgfs_prs_lu_open(emg_28_resource_1,emg_28_resource_0);
    #line 3234 
    emg_28_ret = ldv_filter_err_code(emg_28_ret);
    #line 3237 
    if (ldv_undef_int() != 0) {
      #line 3239 
      __VERIFIER_assume(emg_28_ret == 0);
      #line 3243 
      goto emg_call_28;
    }
    else {
      #line 3248 
      __VERIFIER_assume(emg_28_ret != 0);
      #line 3251 
      if (emg_repeat_cnt_main_28_1 > 0) {
        #line 3252 
        emg_repeat_cnt_main_28_1 --;
        #line 3254 
        goto emg_main_28;
      }
      else 
           #line 3256 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 3263 
       ldv_free((void *)emg_28_resource_0);
  #line 3271 
  return (void *)0;
}

#line 3276  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_mvpp2_dbgfs_prs_pmap_fops(void *arg0)
{
  #line 3279 
  struct file_operations *emg_29_container;
  #line 3280 
  long long emg_29_emg_param_1_0;
  #line 3281 
  char *emg_29_emg_param_1_2;
  #line 3282 
  char *emg_29_emg_param_1_4;
  #line 3283 
  int emg_29_emg_param_2_1;
  #line 3284 
  long long *emg_29_emg_param_3_3;
  #line 3285 
  long long *emg_29_emg_param_3_5;
  #line 3286 
  struct file *emg_29_resource_0;
  #line 3287 
  struct inode *emg_29_resource_1;
  #line 3288 
  int emg_29_ret;
  #line 3289 
  unsigned long emg_29_size_cnt;
  #line 3290 
  int emg_repeat_cnt_main_29_0 = 1;
  #line 3291 
  int emg_repeat_cnt_call_29 = 1;
  #line 3292 
  int emg_repeat_cnt_main_29_1 = 1;
  #line 3294 
  struct emg_struct_character_driver_scenario_mvpp2_dbgfs_filter_fops_13 *data = (struct emg_struct_character_driver_scenario_mvpp2_dbgfs_filter_fops_13 *)arg0;
  #line 3298 
  emg_29_ret = ldv_undef_int();
  #line 3299 
  emg_29_container = emg_alias_mvpp2_dbgfs_prs_pmap_fops;
  #line 3300 
  emg_29_ret = ldv_undef_int();
  #line 3302 
  __VERIFIER_assume(data->arg0 == emg_alias_mvpp2_dbgfs_prs_pmap_fops);
  #line 3304 
  if (data != (struct emg_struct_character_driver_scenario_mvpp2_dbgfs_filter_fops_13 *)0) {
    #line 3305 
    emg_29_container = data->arg0;
    #line 3306 
    ldv_free((void *)data);
  }
  #line 3311 
  emg_29_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 3312 
  emg_29_size_cnt = (unsigned long)ldv_undef_int();
  #line 3316 
  goto emg_main_29;
  #line 3320 
  return (void *)0;
  #line 3323 
  emg_call_29: 
               #line 3323 
  ;
  #line 3324 
  if (ldv_undef_int() != 0) {
    #line 3325 
    switch (ldv_undef_int()) {
      #line 3326 
      case 0: 
              #line 3326 
      ;
      #line 3328 
      emg_29_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 3328 
      emg_29_emg_param_1_2 = emg_29_emg_param_1_2;
      #line 3329 
      emg_29_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 3329 
      emg_29_emg_param_3_3 = emg_29_emg_param_3_3;
      #line 3333 
      seq_read(emg_29_resource_0,emg_29_emg_param_1_2,emg_29_size_cnt,emg_29_emg_param_3_3);
      #line 3337 
      ldv_free((void *)emg_29_emg_param_1_2);
      #line 3338 
      ldv_free((void *)emg_29_emg_param_3_3);
      #line 3340 
      break;
      #line 3342 
      case 1: 
              #line 3342 
      ;
      #line 3344 
      seq_lseek(emg_29_resource_0,emg_29_emg_param_1_0,emg_29_emg_param_2_1);
      #line 3346 
      break;
      #line 3348 
      case 2: 
              #line 3348 
      ;
      #line 3355 
      __VERIFIER_assume(emg_29_size_cnt <= 2147479552UL);
      #line 3356 
      emg_29_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 3356 
      emg_29_emg_param_1_4 = emg_29_emg_param_1_4;
      #line 3357 
      emg_29_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 3357 
      emg_29_emg_param_3_5 = emg_29_emg_param_3_5;
      #line 3361 
      if (emg_29_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 3362 
        (*(emg_29_container->write))(emg_29_resource_0,emg_29_emg_param_1_4,emg_29_size_cnt,emg_29_emg_param_3_5);
      #line 3367 
      ldv_free((void *)emg_29_emg_param_1_4);
      #line 3368 
      ldv_free((void *)emg_29_emg_param_3_5);
      #line 3370 
      break;
      #line 3372 
      default: 
               #line 3372 
      ;
      #line 3372 
      __VERIFIER_assume(0);
    }
    #line 3375 
    if (emg_repeat_cnt_call_29 > 0) {
      #line 3376 
      emg_repeat_cnt_call_29 --;
      #line 3378 
      goto emg_call_29;
    }
    else 
         #line 3380 
         __VERIFIER_assume(0);
  }
  else {
    #line 3386 
    (*emg_alias_single_release)(emg_29_resource_1,emg_29_resource_0);
    #line 3389 
    if (emg_repeat_cnt_main_29_1 > 0) {
      #line 3390 
      emg_repeat_cnt_main_29_1 --;
      #line 3392 
      goto emg_main_29;
    }
    else 
         #line 3394 
         __VERIFIER_assume(0);
  }
  #line 3400 
  return (void *)0;
  #line 3403 
  emg_main_29: 
               #line 3403 
  ;
  #line 3404 
  if (ldv_undef_int() != 0) {
    #line 3406 
    emg_29_ret = emg_wrapper_mvpp2_dbgfs_prs_pmap_open(emg_29_resource_1,emg_29_resource_0);
    #line 3411 
    emg_29_ret = ldv_filter_err_code(emg_29_ret);
    #line 3414 
    if (ldv_undef_int() != 0) {
      #line 3416 
      __VERIFIER_assume(emg_29_ret == 0);
      #line 3420 
      goto emg_call_29;
    }
    else {
      #line 3425 
      __VERIFIER_assume(emg_29_ret != 0);
      #line 3428 
      if (emg_repeat_cnt_main_29_0 > 0) {
        #line 3429 
        emg_repeat_cnt_main_29_0 --;
        #line 3431 
        goto emg_main_29;
      }
      else 
           #line 3433 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 3440 
       ldv_free((void *)emg_29_resource_0);
  #line 3448 
  return (void *)0;
}

#line 3453  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_mvpp2_dbgfs_prs_sram_fops(void *arg0)
{
  #line 3456 
  struct file_operations *emg_30_container;
  #line 3457 
  long long emg_30_emg_param_1_0;
  #line 3458 
  char *emg_30_emg_param_1_2;
  #line 3459 
  char *emg_30_emg_param_1_4;
  #line 3460 
  int emg_30_emg_param_2_1;
  #line 3461 
  long long *emg_30_emg_param_3_3;
  #line 3462 
  long long *emg_30_emg_param_3_5;
  #line 3463 
  struct file *emg_30_resource_0;
  #line 3464 
  struct inode *emg_30_resource_1;
  #line 3465 
  int emg_30_ret;
  #line 3466 
  unsigned long emg_30_size_cnt;
  #line 3467 
  int emg_repeat_cnt_call_30 = 1;
  #line 3468 
  int emg_repeat_cnt_main_30_1 = 1;
  #line 3469 
  int emg_repeat_cnt_main_30_0 = 1;
  #line 3471 
  struct emg_struct_character_driver_scenario_mvpp2_dbgfs_filter_fops_13 *data = (struct emg_struct_character_driver_scenario_mvpp2_dbgfs_filter_fops_13 *)arg0;
  #line 3475 
  emg_30_ret = ldv_undef_int();
  #line 3476 
  emg_30_container = emg_alias_mvpp2_dbgfs_prs_sram_fops;
  #line 3477 
  emg_30_ret = ldv_undef_int();
  #line 3479 
  __VERIFIER_assume(data->arg0 == emg_alias_mvpp2_dbgfs_prs_sram_fops);
  #line 3481 
  if (data != (struct emg_struct_character_driver_scenario_mvpp2_dbgfs_filter_fops_13 *)0) {
    #line 3482 
    emg_30_container = data->arg0;
    #line 3483 
    ldv_free((void *)data);
  }
  #line 3488 
  emg_30_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 3489 
  emg_30_size_cnt = (unsigned long)ldv_undef_int();
  #line 3493 
  goto emg_main_30;
  #line 3497 
  return (void *)0;
  #line 3500 
  emg_call_30: 
               #line 3500 
  ;
  #line 3501 
  if (ldv_undef_int() != 0) {
    #line 3502 
    switch (ldv_undef_int()) {
      #line 3503 
      case 0: 
              #line 3503 
      ;
      #line 3505 
      emg_30_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 3505 
      emg_30_emg_param_1_2 = emg_30_emg_param_1_2;
      #line 3506 
      emg_30_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 3506 
      emg_30_emg_param_3_3 = emg_30_emg_param_3_3;
      #line 3510 
      seq_read(emg_30_resource_0,emg_30_emg_param_1_2,emg_30_size_cnt,emg_30_emg_param_3_3);
      #line 3514 
      ldv_free((void *)emg_30_emg_param_1_2);
      #line 3515 
      ldv_free((void *)emg_30_emg_param_3_3);
      #line 3517 
      break;
      #line 3519 
      case 1: 
              #line 3519 
      ;
      #line 3521 
      seq_lseek(emg_30_resource_0,emg_30_emg_param_1_0,emg_30_emg_param_2_1);
      #line 3523 
      break;
      #line 3525 
      case 2: 
              #line 3525 
      ;
      #line 3532 
      __VERIFIER_assume(emg_30_size_cnt <= 2147479552UL);
      #line 3533 
      emg_30_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 3533 
      emg_30_emg_param_1_4 = emg_30_emg_param_1_4;
      #line 3534 
      emg_30_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 3534 
      emg_30_emg_param_3_5 = emg_30_emg_param_3_5;
      #line 3538 
      if (emg_30_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 3539 
        (*(emg_30_container->write))(emg_30_resource_0,emg_30_emg_param_1_4,emg_30_size_cnt,emg_30_emg_param_3_5);
      #line 3544 
      ldv_free((void *)emg_30_emg_param_1_4);
      #line 3545 
      ldv_free((void *)emg_30_emg_param_3_5);
      #line 3547 
      break;
      #line 3549 
      default: 
               #line 3549 
      ;
      #line 3549 
      __VERIFIER_assume(0);
    }
    #line 3552 
    if (emg_repeat_cnt_call_30 > 0) {
      #line 3553 
      emg_repeat_cnt_call_30 --;
      #line 3555 
      goto emg_call_30;
    }
    else 
         #line 3557 
         __VERIFIER_assume(0);
  }
  else {
    #line 3563 
    (*emg_alias_single_release)(emg_30_resource_1,emg_30_resource_0);
    #line 3566 
    if (emg_repeat_cnt_main_30_1 > 0) {
      #line 3567 
      emg_repeat_cnt_main_30_1 --;
      #line 3569 
      goto emg_main_30;
    }
    else 
         #line 3571 
         __VERIFIER_assume(0);
  }
  #line 3577 
  return (void *)0;
  #line 3580 
  emg_main_30: 
               #line 3580 
  ;
  #line 3581 
  if (ldv_undef_int() != 0) {
    #line 3583 
    emg_30_ret = emg_wrapper_mvpp2_dbgfs_prs_sram_open(emg_30_resource_1,emg_30_resource_0);
    #line 3588 
    emg_30_ret = ldv_filter_err_code(emg_30_ret);
    #line 3591 
    if (ldv_undef_int() != 0) {
      #line 3593 
      __VERIFIER_assume(emg_30_ret == 0);
      #line 3597 
      goto emg_call_30;
    }
    else {
      #line 3602 
      __VERIFIER_assume(emg_30_ret != 0);
      #line 3605 
      if (emg_repeat_cnt_main_30_0 > 0) {
        #line 3606 
        emg_repeat_cnt_main_30_0 --;
        #line 3608 
        goto emg_main_30;
      }
      else 
           #line 3610 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 3617 
       ldv_free((void *)emg_30_resource_0);
  #line 3625 
  return (void *)0;
}

#line 3630  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_mvpp2_dbgfs_prs_valid_fops(void *arg0)
{
  #line 3633 
  struct file_operations *emg_31_container;
  #line 3634 
  long long emg_31_emg_param_1_0;
  #line 3635 
  char *emg_31_emg_param_1_2;
  #line 3636 
  char *emg_31_emg_param_1_4;
  #line 3637 
  int emg_31_emg_param_2_1;
  #line 3638 
  long long *emg_31_emg_param_3_3;
  #line 3639 
  long long *emg_31_emg_param_3_5;
  #line 3640 
  struct file *emg_31_resource_0;
  #line 3641 
  struct inode *emg_31_resource_1;
  #line 3642 
  int emg_31_ret;
  #line 3643 
  unsigned long emg_31_size_cnt;
  #line 3644 
  int emg_repeat_cnt_main_31_0 = 1;
  #line 3645 
  int emg_repeat_cnt_main_31_1 = 1;
  #line 3646 
  int emg_repeat_cnt_call_31 = 1;
  #line 3648 
  struct emg_struct_character_driver_scenario_mvpp2_dbgfs_filter_fops_13 *data = (struct emg_struct_character_driver_scenario_mvpp2_dbgfs_filter_fops_13 *)arg0;
  #line 3652 
  emg_31_ret = ldv_undef_int();
  #line 3653 
  emg_31_container = emg_alias_mvpp2_dbgfs_prs_valid_fops;
  #line 3654 
  emg_31_ret = ldv_undef_int();
  #line 3656 
  __VERIFIER_assume(data->arg0 == emg_alias_mvpp2_dbgfs_prs_valid_fops);
  #line 3658 
  if (data != (struct emg_struct_character_driver_scenario_mvpp2_dbgfs_filter_fops_13 *)0) {
    #line 3659 
    emg_31_container = data->arg0;
    #line 3660 
    ldv_free((void *)data);
  }
  #line 3665 
  emg_31_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 3666 
  emg_31_size_cnt = (unsigned long)ldv_undef_int();
  #line 3670 
  goto emg_main_31;
  #line 3674 
  return (void *)0;
  #line 3677 
  emg_call_31: 
               #line 3677 
  ;
  #line 3678 
  if (ldv_undef_int() != 0) {
    #line 3679 
    switch (ldv_undef_int()) {
      #line 3680 
      case 0: 
              #line 3680 
      ;
      #line 3682 
      emg_31_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 3682 
      emg_31_emg_param_1_2 = emg_31_emg_param_1_2;
      #line 3683 
      emg_31_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 3683 
      emg_31_emg_param_3_3 = emg_31_emg_param_3_3;
      #line 3687 
      seq_read(emg_31_resource_0,emg_31_emg_param_1_2,emg_31_size_cnt,emg_31_emg_param_3_3);
      #line 3691 
      ldv_free((void *)emg_31_emg_param_1_2);
      #line 3692 
      ldv_free((void *)emg_31_emg_param_3_3);
      #line 3694 
      break;
      #line 3696 
      case 1: 
              #line 3696 
      ;
      #line 3698 
      seq_lseek(emg_31_resource_0,emg_31_emg_param_1_0,emg_31_emg_param_2_1);
      #line 3700 
      break;
      #line 3702 
      case 2: 
              #line 3702 
      ;
      #line 3709 
      __VERIFIER_assume(emg_31_size_cnt <= 2147479552UL);
      #line 3710 
      emg_31_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 3710 
      emg_31_emg_param_1_4 = emg_31_emg_param_1_4;
      #line 3711 
      emg_31_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 3711 
      emg_31_emg_param_3_5 = emg_31_emg_param_3_5;
      #line 3715 
      if (emg_31_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 3716 
        (*(emg_31_container->write))(emg_31_resource_0,emg_31_emg_param_1_4,emg_31_size_cnt,emg_31_emg_param_3_5);
      #line 3721 
      ldv_free((void *)emg_31_emg_param_1_4);
      #line 3722 
      ldv_free((void *)emg_31_emg_param_3_5);
      #line 3724 
      break;
      #line 3726 
      default: 
               #line 3726 
      ;
      #line 3726 
      __VERIFIER_assume(0);
    }
    #line 3729 
    if (emg_repeat_cnt_call_31 > 0) {
      #line 3730 
      emg_repeat_cnt_call_31 --;
      #line 3732 
      goto emg_call_31;
    }
    else 
         #line 3734 
         __VERIFIER_assume(0);
  }
  else {
    #line 3740 
    (*emg_alias_single_release)(emg_31_resource_1,emg_31_resource_0);
    #line 3743 
    if (emg_repeat_cnt_main_31_0 > 0) {
      #line 3744 
      emg_repeat_cnt_main_31_0 --;
      #line 3746 
      goto emg_main_31;
    }
    else 
         #line 3748 
         __VERIFIER_assume(0);
  }
  #line 3754 
  return (void *)0;
  #line 3757 
  emg_main_31: 
               #line 3757 
  ;
  #line 3758 
  if (ldv_undef_int() != 0) {
    #line 3760 
    emg_31_ret = emg_wrapper_mvpp2_dbgfs_prs_valid_open(emg_31_resource_1,emg_31_resource_0);
    #line 3765 
    emg_31_ret = ldv_filter_err_code(emg_31_ret);
    #line 3768 
    if (ldv_undef_int() != 0) {
      #line 3770 
      __VERIFIER_assume(emg_31_ret == 0);
      #line 3774 
      goto emg_call_31;
    }
    else {
      #line 3779 
      __VERIFIER_assume(emg_31_ret != 0);
      #line 3782 
      if (emg_repeat_cnt_main_31_1 > 0) {
        #line 3783 
        emg_repeat_cnt_main_31_1 --;
        #line 3785 
        goto emg_main_31;
      }
      else 
           #line 3787 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 3794 
       ldv_free((void *)emg_31_resource_0);
  #line 3802 
  return (void *)0;
}

#line 3807  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/emg/0/environment_model.c"
void *emg_interrupt_interrupt_scenario_mvpp2_isr(void *arg0)
{
  #line 3810 
  enum irqreturn (*emg_32_callback)(int , void *);
  #line 3811 
  void *emg_32_data;
  #line 3812 
  int emg_32_line;
  #line 3813 
  enum irqreturn emg_32_ret_val;
  #line 3814 
  enum irqreturn (*emg_32_thread)(int , void *);
  #line 3816 
  struct emg_struct_interrupt_scenario_mvpp2_isr_32 *data = (struct emg_struct_interrupt_scenario_mvpp2_isr_32 *)arg0;
  #line 3819 
  emg_32_callback = & emg_wrapper_mvpp2_isr;
  #line 3822 
  if (data != (struct emg_struct_interrupt_scenario_mvpp2_isr_32 *)0) {
    #line 3823 
    emg_32_line = data->arg0;
    #line 3824 
    emg_32_callback = data->arg1;
    #line 3825 
    emg_32_thread = data->arg2;
    #line 3826 
    emg_32_data = data->arg3;
    #line 3827 
    ldv_free((void *)data);
  }
  #line 3833 
  ldv_switch_to_interrupt_context();
  #line 3837 
  emg_32_ret_val = emg_wrapper_mvpp2_isr(emg_32_line,emg_32_data);
  #line 3842 
  ldv_switch_to_process_context();
  #line 3845 
  if (ldv_undef_int() != 0) {
    #line 3847 
    __VERIFIER_assume(emg_32_ret_val == (unsigned int)IRQ_WAKE_THREAD);
    #line 3851 
    if (emg_32_thread != (enum irqreturn (*)(int , void *))0) 
                                                              #line 3852 
                                                              (*emg_32_thread)(emg_32_line,emg_32_data);
  }
  else 
       #line 3857 
       __VERIFIER_assume(emg_32_ret_val != (unsigned int)IRQ_WAKE_THREAD);
  #line 3865 
  return (void *)0;
}

#line 3870  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/emg/0/environment_model.c"
void *emg_interrupt_interrupt_scenario_mvpp2_link_status_isr(void *arg0)
{
  #line 3873 
  enum irqreturn (*emg_33_callback)(int , void *);
  #line 3874 
  void *emg_33_data;
  #line 3875 
  int emg_33_line;
  #line 3876 
  enum irqreturn emg_33_ret_val;
  #line 3877 
  enum irqreturn (*emg_33_thread)(int , void *);
  #line 3879 
  struct emg_struct_interrupt_scenario_mvpp2_isr_32 *data = (struct emg_struct_interrupt_scenario_mvpp2_isr_32 *)arg0;
  #line 3882 
  emg_33_callback = & emg_wrapper_mvpp2_link_status_isr;
  #line 3885 
  if (data != (struct emg_struct_interrupt_scenario_mvpp2_isr_32 *)0) {
    #line 3886 
    emg_33_line = data->arg0;
    #line 3887 
    emg_33_callback = data->arg1;
    #line 3888 
    emg_33_thread = data->arg2;
    #line 3889 
    emg_33_data = data->arg3;
    #line 3890 
    ldv_free((void *)data);
  }
  #line 3896 
  ldv_switch_to_interrupt_context();
  #line 3900 
  emg_33_ret_val = emg_wrapper_mvpp2_link_status_isr(emg_33_line,emg_33_data);
  #line 3905 
  ldv_switch_to_process_context();
  #line 3908 
  if (ldv_undef_int() != 0) {
    #line 3910 
    __VERIFIER_assume(emg_33_ret_val == (unsigned int)IRQ_WAKE_THREAD);
    #line 3914 
    if (emg_33_thread != (enum irqreturn (*)(int , void *))0) 
                                                              #line 3915 
                                                              (*emg_33_thread)(emg_33_line,emg_33_data);
  }
  else 
       #line 3920 
       __VERIFIER_assume(emg_33_ret_val != (unsigned int)IRQ_WAKE_THREAD);
  #line 3928 
  return (void *)0;
}

#line 3933  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/emg/0/environment_model.c"
void *emg_net_random_allocationless_scenario_mvpp2_ethtool_get_coalesce(void *arg0)
{
  #line 3936 
  struct net_device *emg_34_container;
  #line 3937 
  struct sk_buff *emg_34_emg_param_0_25;
  #line 3938 
  struct ethtool_coalesce *emg_34_emg_param_1_0;
  #line 3939 
  struct ethtool_drvinfo *emg_34_emg_param_1_1;
  #line 3940 
  unsigned int *emg_34_emg_param_1_10;
  #line 3941 
  struct ethtool_rxnfc *emg_34_emg_param_1_14;
  #line 3942 
  int emg_34_emg_param_1_16;
  #line 3943 
  unsigned int emg_34_emg_param_1_17;
  #line 3944 
  int emg_34_emg_param_1_19;
  #line 3945 
  struct ethtool_stats *emg_34_emg_param_1_2;
  #line 3946 
  struct ifreq *emg_34_emg_param_1_20;
  #line 3947 
  struct rtnl_link_stats64 *emg_34_emg_param_1_22;
  #line 3948 
  unsigned long long emg_34_emg_param_1_23;
  #line 3949 
  void *emg_34_emg_param_1_24;
  #line 3950 
  unsigned short emg_34_emg_param_1_26;
  #line 3951 
  unsigned short emg_34_emg_param_1_28;
  #line 3952 
  struct ethtool_coalesce *emg_34_emg_param_1_30;
  #line 3953 
  struct ethtool_link_ksettings *emg_34_emg_param_1_31;
  #line 3954 
  struct ethtool_pauseparam *emg_34_emg_param_1_32;
  #line 3955 
  struct ethtool_ringparam *emg_34_emg_param_1_33;
  #line 3956 
  unsigned int *emg_34_emg_param_1_34;
  #line 3957 
  unsigned int *emg_34_emg_param_1_37;
  #line 3958 
  struct ethtool_link_ksettings *emg_34_emg_param_1_4;
  #line 3959 
  struct ethtool_rxnfc *emg_34_emg_param_1_42;
  #line 3960 
  struct ethtool_pauseparam *emg_34_emg_param_1_5;
  #line 3961 
  struct ethtool_ringparam *emg_34_emg_param_1_6;
  #line 3962 
  unsigned int *emg_34_emg_param_1_7;
  #line 3963 
  unsigned char *emg_34_emg_param_2_11;
  #line 3964 
  unsigned int *emg_34_emg_param_2_15;
  #line 3965 
  unsigned char *emg_34_emg_param_2_18;
  #line 3966 
  int emg_34_emg_param_2_21;
  #line 3967 
  unsigned short emg_34_emg_param_2_27;
  #line 3968 
  unsigned short emg_34_emg_param_2_29;
  #line 3969 
  unsigned long long *emg_34_emg_param_2_3;
  #line 3970 
  unsigned char *emg_34_emg_param_2_35;
  #line 3971 
  unsigned char *emg_34_emg_param_2_38;
  #line 3972 
  unsigned char *emg_34_emg_param_2_8;
  #line 3973 
  unsigned char *emg_34_emg_param_3_12;
  #line 3974 
  unsigned char emg_34_emg_param_3_36;
  #line 3975 
  unsigned char emg_34_emg_param_3_39;
  #line 3976 
  unsigned char *emg_34_emg_param_3_9;
  #line 3977 
  unsigned int emg_34_emg_param_4_13;
  #line 3978 
  unsigned int *emg_34_emg_param_4_40;
  #line 3979 
  _Bool emg_34_emg_param_5_41;
  #line 3980 
  int emg_repeat_cnt_call_34 = 1;
  #line 3982 
  struct emg_struct_random_allocationless_scenario_mvpp2_ethtool_get_coalesce_34 *data = (struct emg_struct_random_allocationless_scenario_mvpp2_ethtool_get_coalesce_34 *)arg0;
  #line 3987 
  if (data != (struct emg_struct_random_allocationless_scenario_mvpp2_ethtool_get_coalesce_34 *)0) {
    #line 3988 
    emg_34_container = data->arg0;
    #line 3989 
    ldv_free((void *)data);
  }
  #line 3994 
  goto emg_call_34;
  #line 3998 
  return (void *)0;
  #line 4001 
  emg_call_34: 
               #line 4001 
  ;
  #line 4002 
  switch (ldv_undef_int()) {
    #line 4003 
    case 0: 
            #line 4003 
    ;
    #line 4005 
    emg_34_emg_param_1_42 = (struct ethtool_rxnfc *)ldv_xmalloc_unknown_size(0UL);
    #line 4005 
    emg_34_emg_param_1_42 = emg_34_emg_param_1_42;
    #line 4009 
    emg_wrapper_mvpp2_ethtool_set_rxnfc(emg_34_container,emg_34_emg_param_1_42);
    #line 4013 
    ldv_free((void *)emg_34_emg_param_1_42);
    #line 4015 
    break;
    #line 4017 
    case 1: 
            #line 4017 
    ;
    #line 4019 
    emg_34_emg_param_1_37 = (unsigned int *)ldv_xmalloc_unknown_size(0UL);
    #line 4019 
    emg_34_emg_param_1_37 = emg_34_emg_param_1_37;
    #line 4020 
    emg_34_emg_param_2_38 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 4020 
    emg_34_emg_param_2_38 = emg_34_emg_param_2_38;
    #line 4021 
    emg_34_emg_param_4_40 = (unsigned int *)ldv_xmalloc_unknown_size(0UL);
    #line 4021 
    emg_34_emg_param_4_40 = emg_34_emg_param_4_40;
    #line 4025 
    emg_wrapper_mvpp2_ethtool_set_rxfh_context(emg_34_container,emg_34_emg_param_1_37,emg_34_emg_param_2_38,(unsigned char)((int)emg_34_emg_param_3_39),emg_34_emg_param_4_40,(_Bool)((_Bool)((int)emg_34_emg_param_5_41) != 0));
    #line 4029 
    ldv_free((void *)emg_34_emg_param_1_37);
    #line 4030 
    ldv_free((void *)emg_34_emg_param_2_38);
    #line 4031 
    ldv_free((void *)emg_34_emg_param_4_40);
    #line 4033 
    break;
    #line 4035 
    case 2: 
            #line 4035 
    ;
    #line 4037 
    emg_34_emg_param_1_34 = (unsigned int *)ldv_xmalloc_unknown_size(0UL);
    #line 4037 
    emg_34_emg_param_1_34 = emg_34_emg_param_1_34;
    #line 4038 
    emg_34_emg_param_2_35 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 4038 
    emg_34_emg_param_2_35 = emg_34_emg_param_2_35;
    #line 4042 
    emg_wrapper_mvpp2_ethtool_set_rxfh(emg_34_container,emg_34_emg_param_1_34,emg_34_emg_param_2_35,(unsigned char)((int)emg_34_emg_param_3_36));
    #line 4046 
    ldv_free((void *)emg_34_emg_param_1_34);
    #line 4047 
    ldv_free((void *)emg_34_emg_param_2_35);
    #line 4049 
    break;
    #line 4051 
    case 3: 
            #line 4051 
    ;
    #line 4053 
    emg_34_emg_param_1_33 = (struct ethtool_ringparam *)ldv_xmalloc_unknown_size(0UL);
    #line 4053 
    emg_34_emg_param_1_33 = emg_34_emg_param_1_33;
    #line 4057 
    emg_wrapper_mvpp2_ethtool_set_ringparam(emg_34_container,emg_34_emg_param_1_33);
    #line 4061 
    ldv_free((void *)emg_34_emg_param_1_33);
    #line 4063 
    break;
    #line 4065 
    case 4: 
            #line 4065 
    ;
    #line 4067 
    emg_34_emg_param_1_32 = (struct ethtool_pauseparam *)ldv_xmalloc_unknown_size(0UL);
    #line 4067 
    emg_34_emg_param_1_32 = emg_34_emg_param_1_32;
    #line 4071 
    emg_wrapper_mvpp2_ethtool_set_pause_param(emg_34_container,emg_34_emg_param_1_32);
    #line 4075 
    ldv_free((void *)emg_34_emg_param_1_32);
    #line 4077 
    break;
    #line 4079 
    case 5: 
            #line 4079 
    ;
    #line 4081 
    emg_34_emg_param_1_31 = (struct ethtool_link_ksettings *)ldv_xmalloc_unknown_size(0UL);
    #line 4081 
    emg_34_emg_param_1_31 = emg_34_emg_param_1_31;
    #line 4085 
    emg_wrapper_mvpp2_ethtool_set_link_ksettings(emg_34_container,emg_34_emg_param_1_31);
    #line 4089 
    ldv_free((void *)emg_34_emg_param_1_31);
    #line 4091 
    break;
    #line 4093 
    case 6: 
            #line 4093 
    ;
    #line 4095 
    emg_34_emg_param_1_30 = (struct ethtool_coalesce *)ldv_xmalloc_unknown_size(0UL);
    #line 4095 
    emg_34_emg_param_1_30 = emg_34_emg_param_1_30;
    #line 4099 
    emg_wrapper_mvpp2_ethtool_set_coalesce(emg_34_container,emg_34_emg_param_1_30);
    #line 4103 
    ldv_free((void *)emg_34_emg_param_1_30);
    #line 4105 
    break;
    #line 4107 
    case 7: 
            #line 4107 
    ;
    #line 4109 
    emg_wrapper_mvpp2_ethtool_nway_reset(emg_34_container);
    #line 4111 
    break;
    #line 4113 
    case 8: 
            #line 4113 
    ;
    #line 4115 
    emg_wrapper_mvpp2_vlan_rx_kill_vid(emg_34_container,(unsigned short)((int)emg_34_emg_param_1_28),(unsigned short)((int)emg_34_emg_param_2_29));
    #line 4117 
    break;
    #line 4119 
    case 9: 
            #line 4119 
    ;
    #line 4121 
    emg_wrapper_mvpp2_vlan_rx_add_vid(emg_34_container,(unsigned short)((int)emg_34_emg_param_1_26),(unsigned short)((int)emg_34_emg_param_2_27));
    #line 4123 
    break;
    #line 4125 
    case 10: 
             #line 4125 
    ;
    #line 4127 
    emg_34_emg_param_0_25 = (struct sk_buff *)ldv_xmalloc_unknown_size(0UL);
    #line 4127 
    emg_34_emg_param_0_25 = emg_34_emg_param_0_25;
    #line 4131 
    emg_wrapper_mvpp2_tx(emg_34_emg_param_0_25,emg_34_container);
    #line 4135 
    ldv_free((void *)emg_34_emg_param_0_25);
    #line 4137 
    break;
    #line 4139 
    case 11: 
             #line 4139 
    ;
    #line 4141 
    emg_wrapper_mvpp2_set_rx_mode(emg_34_container);
    #line 4143 
    break;
    #line 4145 
    case 12: 
             #line 4145 
    ;
    #line 4147 
    emg_34_emg_param_1_24 = ldv_xmalloc_unknown_size(0UL);
    #line 4147 
    emg_34_emg_param_1_24 = emg_34_emg_param_1_24;
    #line 4151 
    emg_wrapper_mvpp2_set_mac_address(emg_34_container,emg_34_emg_param_1_24);
    #line 4155 
    ldv_free(emg_34_emg_param_1_24);
    #line 4157 
    break;
    #line 4159 
    case 13: 
             #line 4159 
    ;
    #line 4161 
    emg_wrapper_mvpp2_set_features(emg_34_container,emg_34_emg_param_1_23);
    #line 4163 
    break;
    #line 4165 
    case 14: 
             #line 4165 
    ;
    #line 4167 
    emg_34_emg_param_1_22 = (struct rtnl_link_stats64 *)ldv_xmalloc_unknown_size(0UL);
    #line 4167 
    emg_34_emg_param_1_22 = emg_34_emg_param_1_22;
    #line 4171 
    emg_wrapper_mvpp2_get_stats64(emg_34_container,emg_34_emg_param_1_22);
    #line 4175 
    ldv_free((void *)emg_34_emg_param_1_22);
    #line 4177 
    break;
    #line 4179 
    case 15: 
             #line 4179 
    ;
    #line 4181 
    emg_34_emg_param_1_20 = (struct ifreq *)ldv_xmalloc_unknown_size(0UL);
    #line 4181 
    emg_34_emg_param_1_20 = emg_34_emg_param_1_20;
    #line 4185 
    emg_wrapper_mvpp2_ioctl(emg_34_container,emg_34_emg_param_1_20,emg_34_emg_param_2_21);
    #line 4189 
    ldv_free((void *)emg_34_emg_param_1_20);
    #line 4191 
    break;
    #line 4193 
    case 16: 
             #line 4193 
    ;
    #line 4195 
    emg_wrapper_mvpp2_change_mtu(emg_34_container,emg_34_emg_param_1_19);
    #line 4197 
    break;
    #line 4199 
    case 17: 
             #line 4199 
    ;
    #line 4201 
    emg_34_emg_param_2_18 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 4201 
    emg_34_emg_param_2_18 = emg_34_emg_param_2_18;
    #line 4205 
    emg_wrapper_mvpp2_ethtool_get_strings(emg_34_container,emg_34_emg_param_1_17,emg_34_emg_param_2_18);
    #line 4209 
    ldv_free((void *)emg_34_emg_param_2_18);
    #line 4211 
    break;
    #line 4213 
    case 18: 
             #line 4213 
    ;
    #line 4215 
    emg_wrapper_mvpp2_ethtool_get_sset_count(emg_34_container,emg_34_emg_param_1_16);
    #line 4217 
    break;
    #line 4219 
    case 19: 
             #line 4219 
    ;
    #line 4221 
    emg_34_emg_param_1_14 = (struct ethtool_rxnfc *)ldv_xmalloc_unknown_size(0UL);
    #line 4221 
    emg_34_emg_param_1_14 = emg_34_emg_param_1_14;
    #line 4222 
    emg_34_emg_param_2_15 = (unsigned int *)ldv_xmalloc_unknown_size(0UL);
    #line 4222 
    emg_34_emg_param_2_15 = emg_34_emg_param_2_15;
    #line 4226 
    emg_wrapper_mvpp2_ethtool_get_rxnfc(emg_34_container,emg_34_emg_param_1_14,emg_34_emg_param_2_15);
    #line 4230 
    ldv_free((void *)emg_34_emg_param_1_14);
    #line 4231 
    ldv_free((void *)emg_34_emg_param_2_15);
    #line 4233 
    break;
    #line 4235 
    case 20: 
             #line 4235 
    ;
    #line 4237 
    emg_wrapper_mvpp2_ethtool_get_rxfh_indir_size(emg_34_container);
    #line 4239 
    break;
    #line 4241 
    case 21: 
             #line 4241 
    ;
    #line 4243 
    emg_34_emg_param_1_10 = (unsigned int *)ldv_xmalloc_unknown_size(0UL);
    #line 4243 
    emg_34_emg_param_1_10 = emg_34_emg_param_1_10;
    #line 4244 
    emg_34_emg_param_2_11 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 4244 
    emg_34_emg_param_2_11 = emg_34_emg_param_2_11;
    #line 4245 
    emg_34_emg_param_3_12 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 4245 
    emg_34_emg_param_3_12 = emg_34_emg_param_3_12;
    #line 4249 
    emg_wrapper_mvpp2_ethtool_get_rxfh_context(emg_34_container,emg_34_emg_param_1_10,emg_34_emg_param_2_11,emg_34_emg_param_3_12,emg_34_emg_param_4_13);
    #line 4253 
    ldv_free((void *)emg_34_emg_param_1_10);
    #line 4254 
    ldv_free((void *)emg_34_emg_param_2_11);
    #line 4255 
    ldv_free((void *)emg_34_emg_param_3_12);
    #line 4257 
    break;
    #line 4259 
    case 22: 
             #line 4259 
    ;
    #line 4261 
    emg_34_emg_param_1_7 = (unsigned int *)ldv_xmalloc_unknown_size(0UL);
    #line 4261 
    emg_34_emg_param_1_7 = emg_34_emg_param_1_7;
    #line 4262 
    emg_34_emg_param_2_8 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 4262 
    emg_34_emg_param_2_8 = emg_34_emg_param_2_8;
    #line 4263 
    emg_34_emg_param_3_9 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 4263 
    emg_34_emg_param_3_9 = emg_34_emg_param_3_9;
    #line 4267 
    emg_wrapper_mvpp2_ethtool_get_rxfh(emg_34_container,emg_34_emg_param_1_7,emg_34_emg_param_2_8,emg_34_emg_param_3_9);
    #line 4271 
    ldv_free((void *)emg_34_emg_param_1_7);
    #line 4272 
    ldv_free((void *)emg_34_emg_param_2_8);
    #line 4273 
    ldv_free((void *)emg_34_emg_param_3_9);
    #line 4275 
    break;
    #line 4277 
    case 23: 
             #line 4277 
    ;
    #line 4279 
    emg_34_emg_param_1_6 = (struct ethtool_ringparam *)ldv_xmalloc_unknown_size(0UL);
    #line 4279 
    emg_34_emg_param_1_6 = emg_34_emg_param_1_6;
    #line 4283 
    emg_wrapper_mvpp2_ethtool_get_ringparam(emg_34_container,emg_34_emg_param_1_6);
    #line 4287 
    ldv_free((void *)emg_34_emg_param_1_6);
    #line 4289 
    break;
    #line 4291 
    case 24: 
             #line 4291 
    ;
    #line 4293 
    emg_34_emg_param_1_5 = (struct ethtool_pauseparam *)ldv_xmalloc_unknown_size(0UL);
    #line 4293 
    emg_34_emg_param_1_5 = emg_34_emg_param_1_5;
    #line 4297 
    emg_wrapper_mvpp2_ethtool_get_pause_param(emg_34_container,emg_34_emg_param_1_5);
    #line 4301 
    ldv_free((void *)emg_34_emg_param_1_5);
    #line 4303 
    break;
    #line 4305 
    case 25: 
             #line 4305 
    ;
    #line 4307 
    emg_34_emg_param_1_4 = (struct ethtool_link_ksettings *)ldv_xmalloc_unknown_size(0UL);
    #line 4307 
    emg_34_emg_param_1_4 = emg_34_emg_param_1_4;
    #line 4311 
    emg_wrapper_mvpp2_ethtool_get_link_ksettings(emg_34_container,emg_34_emg_param_1_4);
    #line 4315 
    ldv_free((void *)emg_34_emg_param_1_4);
    #line 4317 
    break;
    #line 4319 
    case 26: 
             #line 4319 
    ;
    #line 4321 
    ethtool_op_get_link(emg_34_container);
    #line 4323 
    break;
    #line 4325 
    case 27: 
             #line 4325 
    ;
    #line 4327 
    emg_34_emg_param_1_2 = (struct ethtool_stats *)ldv_xmalloc_unknown_size(0UL);
    #line 4327 
    emg_34_emg_param_1_2 = emg_34_emg_param_1_2;
    #line 4328 
    emg_34_emg_param_2_3 = (unsigned long long *)ldv_xmalloc_unknown_size(0UL);
    #line 4328 
    emg_34_emg_param_2_3 = emg_34_emg_param_2_3;
    #line 4332 
    emg_wrapper_mvpp2_ethtool_get_stats(emg_34_container,emg_34_emg_param_1_2,emg_34_emg_param_2_3);
    #line 4336 
    ldv_free((void *)emg_34_emg_param_1_2);
    #line 4337 
    ldv_free((void *)emg_34_emg_param_2_3);
    #line 4339 
    break;
    #line 4341 
    case 28: 
             #line 4341 
    ;
    #line 4343 
    emg_34_emg_param_1_1 = (struct ethtool_drvinfo *)ldv_xmalloc_unknown_size(0UL);
    #line 4343 
    emg_34_emg_param_1_1 = emg_34_emg_param_1_1;
    #line 4347 
    emg_wrapper_mvpp2_ethtool_get_drvinfo(emg_34_container,emg_34_emg_param_1_1);
    #line 4351 
    ldv_free((void *)emg_34_emg_param_1_1);
    #line 4353 
    break;
    #line 4355 
    case 29: 
             #line 4355 
    ;
    #line 4357 
    emg_34_emg_param_1_0 = (struct ethtool_coalesce *)ldv_xmalloc_unknown_size(0UL);
    #line 4357 
    emg_34_emg_param_1_0 = emg_34_emg_param_1_0;
    #line 4361 
    emg_wrapper_mvpp2_ethtool_get_coalesce(emg_34_container,emg_34_emg_param_1_0);
    #line 4365 
    ldv_free((void *)emg_34_emg_param_1_0);
    #line 4368 
    if (emg_repeat_cnt_call_34 > 0) {
      #line 4369 
      emg_repeat_cnt_call_34 --;
      #line 4371 
      goto emg_call_34;
    }
    else 
         #line 4373 
         __VERIFIER_assume(0);
    #line 4377 
    break;
    #line 4379 
    case 30: 
             #line 4379 
    ;
    #line 4383 
    break;
    #line 4385 
    default: 
             #line 4385 
    ;
    #line 4385 
    __VERIFIER_assume(0);
  }
  #line 4388 
  return (void *)0;
}

#line 4393  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/emg/0/environment_model.c"
void *emg_platform_platform_instance_mvpp2_driver(void *arg0)
{
  #line 4396 
  struct platform_driver *emg_35_container;
  #line 4397 
  struct pm_message *emg_35_emg_param_1_0;
  #line 4398 
  int emg_35_probed;
  #line 4399 
  struct platform_device *emg_35_resource;
  #line 4400 
  int emg_repeat_cnt_call_35 = 1;
  #line 4401 
  int emg_repeat_cnt_main_35_1 = 1;
  #line 4402 
  int emg_repeat_cnt_main_35_0 = 1;
  #line 4404 
  struct emg_struct_platform_instance_mvpp2_driver_35 *data = (struct emg_struct_platform_instance_mvpp2_driver_35 *)arg0;
  #line 4408 
  emg_35_probed = 1;
  #line 4409 
  emg_35_container = emg_alias_mvpp2_driver;
  #line 4410 
  emg_35_probed = 1;
  #line 4412 
  __VERIFIER_assume(data->arg0 == emg_alias_mvpp2_driver);
  #line 4414 
  if (data != (struct emg_struct_platform_instance_mvpp2_driver_35 *)0) {
    #line 4415 
    emg_35_container = data->arg0;
    #line 4416 
    ldv_free((void *)data);
  }
  #line 4421 
  emg_35_resource = (struct platform_device *)ldv_xmalloc(1632UL);
  #line 4422 
  emg_35_resource->id_entry = emg_35_container->id_table;
  #line 4423 
  emg_35_resource->dev.platform_data = ldv_xmalloc_unknown_size(0UL);
  #line 4427 
  goto emg_main_35;
  #line 4431 
  return (void *)0;
  #line 4434 
  emg_call_35: 
               #line 4434 
  ;
  #line 4435 
  if (ldv_undef_int() != 0) {
    #line 4436 
    switch (ldv_undef_int()) {
      #line 4437 
      case 0: 
              #line 4437 
      ;
      #line 4439 
      emg_35_emg_param_1_0 = (struct pm_message *)ldv_xmalloc_unknown_size(0UL);
      #line 4439 
      emg_35_emg_param_1_0 = emg_35_emg_param_1_0;
      #line 4443 
      if (emg_35_container->suspend != (int (*)(struct platform_device *, pm_message_t ))0) 
        #line 4444 
        (*(emg_35_container->suspend))(emg_35_resource,*emg_35_emg_param_1_0);
      #line 4449 
      ldv_free((void *)emg_35_emg_param_1_0);
      #line 4453 
      if (emg_35_container->resume != (int (*)(struct platform_device *))0) 
        #line 4454 
        (*(emg_35_container->resume))(emg_35_resource);
      #line 4457 
      break;
      #line 4459 
      case 1: 
              #line 4459 
      ;
      #line 4467 
      break;
      #line 4469 
      case 2: 
              #line 4469 
      ;
      #line 4472 
      break;
      #line 4474 
      default: 
               #line 4474 
      ;
      #line 4474 
      __VERIFIER_assume(0);
    }
    #line 4477 
    if (emg_repeat_cnt_call_35 > 0) {
      #line 4478 
      emg_repeat_cnt_call_35 --;
      #line 4480 
      goto emg_call_35;
    }
    else 
         #line 4482 
         __VERIFIER_assume(0);
  }
  else {
    #line 4488 
    if (emg_35_container->shutdown != (void (*)(struct platform_device *))0) 
      #line 4489 
      (*(emg_35_container->shutdown))(emg_35_resource);
    #line 4494 
    emg_wrapper_mvpp2_remove(emg_35_resource);
    #line 4498 
    emg_35_probed = 1;
    #line 4501 
    if (emg_repeat_cnt_main_35_1 > 0) {
      #line 4502 
      emg_repeat_cnt_main_35_1 --;
      #line 4504 
      goto emg_main_35;
    }
    else 
         #line 4506 
         __VERIFIER_assume(0);
  }
  #line 4512 
  return (void *)0;
  #line 4515 
  emg_main_35: 
               #line 4515 
  ;
  #line 4516 
  if (ldv_undef_int() != 0) {
    #line 4519 
    ldv_pre_probe();
    #line 4523 
    emg_35_probed = emg_wrapper_mvpp2_probe(emg_35_resource);
    #line 4528 
    emg_35_probed = ldv_post_probe(emg_35_probed);
    #line 4531 
    if (ldv_undef_int() != 0) {
      #line 4533 
      __VERIFIER_assume(emg_35_probed == 0);
      #line 4537 
      goto emg_call_35;
    }
    else {
      #line 4542 
      __VERIFIER_assume(emg_35_probed != 0);
      #line 4545 
      if (emg_repeat_cnt_main_35_0 > 0) {
        #line 4546 
        emg_repeat_cnt_main_35_0 --;
        #line 4548 
        goto emg_main_35;
      }
      else 
           #line 4550 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 4557 
       ldv_free((void *)emg_35_resource);
  #line 4565 
  return (void *)0;
}

#line 4570  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/emg/0/environment_model.c"
int emg___platform_driver_register(struct platform_driver *arg0, struct module *arg1)
{
  #line 4573 
  struct platform_driver *emg_2_platform_driver;
  #line 4575 
  emg_2_platform_driver = emg_alias_mvpp2_driver;
  #line 4576 
  if (ldv_undef_int() != 0) {
    #line 4578 
    emg_2_platform_driver = arg0;
    #line 4582 
    emg_dispatch_register_2(emg_2_platform_driver);
    #line 4586 
    return 0;
  }
  else {
    #line 4590 
    return ldv_undef_int_negative();
  }
}

#line 4598  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/emg/0/environment_model.c"
struct net_device *emg_alloc_etherdev_mqs(int arg0, unsigned int arg1, unsigned int arg2)
{
  #line 4601 
  struct net_device *emg_3_netdev;
  #line 4603 
  if (ldv_undef_int() != 0) {
    #line 4605 
    emg_3_netdev = (struct net_device *)ldv_xmalloc(3328UL);
    #line 4609 
    return emg_3_netdev;
  }
  else 
       #line 4613 
       return (struct net_device *)0;
}

#line 4621  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/emg/0/environment_model.c"
struct dentry *emg_debugfs_create_dir(char *arg0, struct dentry *arg1)
{
  #line 4624 
  struct dentry *emg_4_dentry;
  #line 4625 
  struct inode *emg_4_inode;
  #line 4627 
  if (ldv_undef_int() != 0) {
    #line 4629 
    emg_4_dentry = (struct dentry *)ldv_xmalloc(320UL);
    #line 4630 
    emg_4_inode = (struct inode *)ldv_xmalloc(1072UL);
    #line 4631 
    emg_4_inode->i_mode = (unsigned short)16877U;
    #line 4632 
    emg_4_dentry->d_parent = arg1;
    #line 4633 
    emg_4_dentry->d_inode = emg_4_inode;
    #line 4634 
    return emg_4_dentry;
  }
  else {
    #line 4638 
    return (struct dentry *)ERR_PTR(-19L);
  }
}

#line 4646  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/emg/0/environment_model.c"
struct dentry *emg_debugfs_create_file(char *arg0, unsigned short arg1, struct dentry *arg2, void *arg3, struct file_operations *arg4)
{
  #line 4649 
  struct dentry *emg_5_dentry;
  #line 4650 
  struct file_operations *emg_5_file_operations;
  #line 4651 
  struct inode *emg_5_inode;
  #line 4653 
  if (ldv_undef_int() != 0) {
    #line 4655 
    emg_5_dentry = (struct dentry *)ldv_xmalloc(320UL);
    #line 4656 
    emg_5_inode = (struct inode *)ldv_xmalloc(1072UL);
    #line 4657 
    emg_5_inode->i_mode = arg1;
    #line 4658 
    emg_5_dentry->d_parent = arg2;
    #line 4659 
    emg_5_inode->i_private = arg3;
    #line 4660 
    emg_5_file_operations = arg4;
    #line 4661 
    emg_5_dentry->d_inode = emg_5_inode;
    #line 4662 
    ldv_save_allocated_memory_to_list((void *)emg_5_dentry);
    #line 4666 
    emg_dispatch_register_5(emg_5_file_operations);
    #line 4670 
    return emg_5_dentry;
  }
  else {
    #line 4674 
    return (struct dentry *)ERR_PTR(-19L);
  }
}

#line 4682  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/emg/0/environment_model.c"
void *emg_free_irq(unsigned int arg0, void *arg1)
{
  #line 4685 
  int emg_6_line;
  #line 4688 
  emg_6_line = (int)arg0;
  #line 4692 
  emg_dispatch_irq_deregister_6(emg_6_line);
  #line 4693 
  ;
  #line 4693 
  return (void *)0;
}

#line 4699  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/emg/0/environment_model.c"
void emg_free_netdev(struct net_device *arg0)
{
  #line 4702 
  struct net_device *emg_7_netdev;
  #line 4705 
  emg_7_netdev = arg0;
  #line 4706 
  ldv_free((void *)emg_7_netdev);
  #line 4709 
  return;
}

#line 4714  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/emg/0/environment_model.c"
void emg_platform_driver_unregister(struct platform_driver *arg0)
{
  #line 4717 
  struct platform_driver *emg_8_platform_driver;
  #line 4719 
  emg_8_platform_driver = emg_alias_mvpp2_driver;
  #line 4721 
  emg_8_platform_driver = arg0;
  #line 4725 
  emg_dispatch_deregister_8(emg_8_platform_driver);
  #line 4728 
  return;
}

#line 4733  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/emg/0/environment_model.c"
_Bool emg_queue_delayed_work(struct workqueue_struct *arg0, struct delayed_work *arg1, unsigned long arg2)
{
  #line 4736 
  struct delayed_work *emg_9_delayed_work;
  #line 4737 
  struct work_struct *emg_9_emg_param_0_0;
  #line 4739 
  if (ldv_undef_int() != 0) {
    #line 4741 
    emg_9_delayed_work = arg1;
    #line 4745 
    emg_9_emg_param_0_0 = (struct work_struct *)ldv_xmalloc_unknown_size(0UL);
    #line 4745 
    emg_9_emg_param_0_0 = emg_9_emg_param_0_0;
    #line 4749 
    if (emg_9_delayed_work->work.func != (void (*)(struct work_struct *))0) 
      #line 4750 
      (*(emg_9_delayed_work->work.func))(emg_9_emg_param_0_0);
    #line 4755 
    ldv_free((void *)emg_9_emg_param_0_0);
    #line 4759 
    return (_Bool)1;
  }
  else 
       #line 4763 
       return (_Bool)0;
}

#line 4771  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/emg/0/environment_model.c"
int emg_register_netdev(struct net_device *arg0)
{
  #line 4774 
  struct net_device *emg_10_netdev;
  #line 4775 
  int emg_10_ret;
  #line 4778 
  emg_10_ret = ldv_undef_int();
  #line 4779 
  emg_10_ret = ldv_undef_int();
  #line 4780 
  if (ldv_undef_int() != 0) {
    #line 4782 
    emg_10_netdev = arg0;
    #line 4786 
    emg_10_ret = emg_wrapper_mvpp2_open(emg_10_netdev);
    #line 4789 
    if (ldv_undef_int() != 0) {
      #line 4791 
      __VERIFIER_assume(emg_10_ret == 0);
      #line 4795 
      emg_dispatch_register_10(emg_10_netdev);
      #line 4799 
      return 0;
    }
    else {
      #line 4803 
      __VERIFIER_assume(emg_10_ret != 0);
      #line 4804 
      ldv_failed_register_netdev();
      #line 4805 
      return ldv_undef_int_negative();
    }
  }
  else {
    #line 4810 
    ldv_failed_register_netdev();
    #line 4811 
    return ldv_undef_int_negative();
  }
}

#line 4819  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/emg/0/environment_model.c"
int emg_request_irq(unsigned int arg0, enum irqreturn (*arg1)(int , void *), unsigned long arg2, char *arg3, void *arg4)
{
  #line 4822 
  enum irqreturn (*emg_11_callback)(int , void *);
  #line 4823 
  void *emg_11_data;
  #line 4824 
  int emg_11_line;
  #line 4825 
  enum irqreturn (*emg_11_thread)(int , void *);
  #line 4827 
  emg_11_callback = & emg_wrapper_mvpp2_isr;
  #line 4828 
  if (ldv_undef_int() != 0) {
    #line 4830 
    emg_11_line = (int)arg0;
    #line 4831 
    emg_11_callback = arg1;
    #line 4832 
    emg_11_thread = (enum irqreturn (*)(int , void *))0;
    #line 4833 
    emg_11_data = arg4;
    #line 4837 
    emg_dispatch_irq_register_11(emg_11_line,emg_11_callback,emg_11_thread,emg_11_data);
    #line 4841 
    return 0;
  }
  else {
    #line 4845 
    return ldv_undef_int_negative();
  }
}

#line 4853  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/emg/0/environment_model.c"
void emg_unregister_netdev(struct net_device *arg0)
{
  #line 4856 
  struct net_device *emg_12_netdev;
  #line 4859 
  emg_12_netdev = arg0;
  #line 4863 
  emg_wrapper_mvpp2_stop(emg_12_netdev);
  #line 4867 
  emg_dispatch_deregister_12(emg_12_netdev);
  #line 4870 
  return;
}

#line 4875  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/emg/0/environment_model.c"
void *emg_entry_point_insmod(void *arg0)
{
  #line 4878 
  int emg_1_ret;
  #line 4881 
  emg_1_ret = emg_mvpp2_driver_init();
  #line 4882 
  emg_1_ret = ldv_post_init(emg_1_ret);
  #line 4885 
  if (ldv_undef_int() != 0) {
    #line 4887 
    __VERIFIER_assume(emg_1_ret == 0);
    #line 4891 
    emg_mvpp2_driver_exit();
  }
  else 
       #line 4895 
       __VERIFIER_assume(emg_1_ret != 0);
  #line 4899 
  return (void *)0;
}

#line 4904  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/marvell/mvpp2/mvpp2.ko/concurrency safety/emg/0/environment_model.c"
int main(void)
{
  #line 4906 
  ldv_initialize();
  #line 4908 
  emg_entry_point_insmod((void *)0);
  #line 4910 
  return 0;
}

