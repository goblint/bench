/* Generated by Frama-C */
#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compiler_types.h"
typedef signed char __s8;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned char __u8;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef short __s16;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned short __u16;
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef int __s32;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned int __u32;
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef long long __s64;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned long long __u64;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u8 u8;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s16 s16;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u16 u16;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s32 s32;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u32 u32;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s64 s64;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u64 u64;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/uapi/asm/posix_types_64.h"
typedef long __kernel_long_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned long __kernel_ulong_t;
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_pid_t;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_uid32_t;
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_gid32_t;
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_ulong_t __kernel_size_t;
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_ssize_t;
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_ptrdiff_t;
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef long long __kernel_loff_t;
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef long long __kernel_time64_t;
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_clock_t;
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_timer_t;
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_clockid_t;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u16 __be16;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __be32;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __wsum;
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef unsigned int __poll_t;
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef u32 __kernel_dev_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_dev_t dev_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned short umode_t;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_pid_t pid_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_clockid_t clockid_t;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef _Bool bool;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_uid32_t uid_t;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_gid32_t gid_t;
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_loff_t loff_t;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_size_t size_t;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_ssize_t ssize_t;
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_ptrdiff_t ptrdiff_t;
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef s32 int32_t;
#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u32 uint32_t;
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 sector_t;
#line 131  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 blkcnt_t;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 dma_addr_t;
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int gfp_t;
#line 155  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int fmode_t;
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 phys_addr_t;
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef phys_addr_t resource_size_t;
#line 170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct __anonstruct_atomic_t_6 {
   int counter ;
};
#line 170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef struct __anonstruct_atomic_t_6 atomic_t;
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct __anonstruct_atomic64_t_7 {
   s64 counter ;
};
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef struct __anonstruct_atomic64_t_7 atomic64_t;
#line 181  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};
#line 185 
struct hlist_node;
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct hlist_head {
   struct hlist_node *first ;
};
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};
#line 219  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct callback_head {
   struct callback_head *next ;
   void (*func)(struct callback_head *) ;
} __attribute__((__aligned__(8)));
#line 14  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/0/concurrency safety/weaver/vxge-traffic.i.aux"
struct task_struct;
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/init.h"
struct file_system_type;
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
struct ctl_table;
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_debug.h"
struct device;
#line 65 
struct net_device;
#line 476  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
struct file_operations;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/div64.h"
struct completion;
#line 88 
struct pt_regs;
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/math64.h"
typedef __s64 time64_t;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/time_types.h"
struct __kernel_timespec {
   __kernel_time64_t tv_sec ;
   long long tv_nsec ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/time64.h"
struct timespec64 {
   time64_t tv_sec ;
   long tv_nsec ;
};
#line 165 
struct old_timespec32;
#line 167 
enum timespec_type {
    TT_NONE = 0,
    TT_NATIVE = 1,
    TT_COMPAT = 2
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_futex_27 {
   u32 *uaddr ;
   u32 val ;
   u32 flags ;
   u32 bitset ;
   u64 time ;
   u32 *uaddr2 ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
union __anonunion_29 {
   struct __kernel_timespec *rmtp ;
   struct old_timespec32 *compat_rmtp ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_nanosleep_28 {
   clockid_t clockid ;
   enum timespec_type type ;
   union __anonunion_29 __anonCompField___anonstruct_nanosleep_28_5 ;
   u64 expires ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_poll_30 {
   struct pollfd *ufds ;
   int nfds ;
   int has_timeout ;
   unsigned long tv_sec ;
   unsigned long tv_nsec ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
union __anonunion_26 {
   struct __anonstruct_futex_27 futex ;
   struct __anonstruct_nanosleep_28 nanosleep ;
   struct __anonstruct_poll_30 poll ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct restart_block {
   long (*fn)(struct restart_block *) ;
   union __anonunion_26 __anonCompField_restart_block_6 ;
};
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/page_64.h"
struct page;
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/getorder.h"
struct mm_struct;
#line 49 
struct io_bitmap;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/ptrace.h"
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/desc_defs.h"
struct desc_struct {
   u16 limit0 ;
   u16 base0 ;
   u16 base1 : 8 ;
   u16 type : 4 ;
   u16 s : 1 ;
   u16 dpl : 2 ;
   u16 p : 1 ;
   u16 limit1 : 4 ;
   u16 avl : 1 ;
   u16 l : 1 ;
   u16 d : 1 ;
   u16 g : 1 ;
   u16 base2 : 8 ;
} __attribute__((__packed__));
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/desc_defs.h"
typedef unsigned long pteval_t;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pmdval_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pudval_t;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgdval_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgprotval_t;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
struct __anonstruct_pte_t_53 {
   pteval_t pte ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef struct __anonstruct_pte_t_53 pte_t;
#line 265  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct pgprot {
   pgprotval_t pgprot ;
};
#line 267  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct pgprot pgprot_t;
#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pgd_t_54 {
   pgdval_t pgd ;
};
#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pgd_t_54 pgd_t;
#line 319  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pud_t_56 {
   pudval_t pud ;
};
#line 319  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pud_t_56 pud_t;
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pmd_t_57 {
   pmdval_t pmd ;
};
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pmd_t_57 pmd_t;
#line 505  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct page *pgtable_t;
#line 519 
struct file;
#line 530 
struct seq_file;
#line 360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/nospec-branch.h"
struct thread_struct;
#line 362 
struct cpumask;
#line 365 
struct vm_area_struct;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct __anonstruct_59 {
   u8 locked ;
   u8 pending ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct __anonstruct_60 {
   u16 locked_pending ;
   u16 tail ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
union __anonunion_58 {
   atomic_t val ;
   struct __anonstruct_59 __anonCompField___anonunion_58_7 ;
   struct __anonstruct_60 __anonCompField___anonunion_58_8 ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct qspinlock {
   union __anonunion_58 __anonCompField_qspinlock_9 ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
typedef struct qspinlock arch_spinlock_t;
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
struct __anonstruct_62 {
   u8 wlocked ;
   u8 __lstate[3U] ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
union __anonunion_61 {
   atomic_t cnts ;
   struct __anonstruct_62 __anonCompField___anonunion_61_10 ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
struct qrwlock {
   union __anonunion_61 __anonCompField_qrwlock_11 ;
   arch_spinlock_t wait_lock ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
typedef struct qrwlock arch_rwlock_t;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/math_emu.h"
struct math_emu_info {
   long ___orig_eip ;
   struct pt_regs *regs ;
};
#line 2288  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/atomic-fallback.h"
typedef atomic64_t atomic_long_t;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
struct cpumask {
   unsigned long bits[128U] ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
typedef struct cpumask cpumask_t;
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fregs_state {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u32 status ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct __anonstruct_90 {
   u64 rip ;
   u64 rdp ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct __anonstruct_91 {
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union __anonunion_89 {
   struct __anonstruct_90 __anonCompField___anonunion_89_17 ;
   struct __anonstruct_91 __anonCompField___anonunion_89_18 ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union __anonunion_92 {
   u32 padding1[12U] ;
   u32 sw_reserved[12U] ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fxregs_state {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   union __anonunion_89 __anonCompField_fxregs_state_19 ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32U] ;
   u32 xmm_space[64U] ;
   u32 padding[12U] ;
   union __anonunion_92 __anonCompField_fxregs_state_20 ;
} __attribute__((__aligned__(16)));
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct swregs_state {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u8 ftop ;
   u8 changed ;
   u8 lookahead ;
   u8 no_update ;
   u8 rm ;
   u8 alimit ;
   struct math_emu_info *info ;
   u32 entry_eip ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct xstate_header {
   u64 xfeatures ;
   u64 xcomp_bv ;
   u64 reserved[6U] ;
} __attribute__((__packed__));
#line 253  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct xregs_state {
   struct fxregs_state i387 ;
   struct xstate_header header ;
   u8 extended_state_area[0U] ;
} __attribute__((__packed__, __aligned__(64)));
#line 268  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union fpregs_state {
   struct fregs_state fsave ;
   struct fxregs_state fxsave ;
   struct swregs_state soft ;
   struct xregs_state xsave ;
   u8 __padding[4096U] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fpu {
   unsigned int last_cpu ;
   unsigned long avx512_timestamp ;
   union fpregs_state state ;
};
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct seq_operations;
#line 478 
struct perf_event;
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct __anonstruct_mm_segment_t_95 {
   unsigned long seg ;
};
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
typedef struct __anonstruct_mm_segment_t_95 mm_segment_t;
#line 485  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct thread_struct {
   struct desc_struct tls_array[3U] ;
   unsigned long sp ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long fsbase ;
   unsigned long gsbase ;
   struct perf_event *ptrace_bps[4U] ;
   unsigned long debugreg6 ;
   unsigned long ptrace_dr7 ;
   unsigned long cr2 ;
   unsigned long trap_nr ;
   unsigned long error_code ;
   struct io_bitmap *io_bitmap ;
   unsigned long iopl_emul ;
   mm_segment_t addr_limit ;
   unsigned int sig_on_uaccess_err : 1 ;
   unsigned int uaccess_err : 1 ;
   struct fpu fpu ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/thread_info.h"
struct thread_info {
   unsigned long flags ;
   u32 status ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bottom_half.h"
struct lockdep_map;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lockdep_subclass_key {
   char __one_byte ;
} __attribute__((__packed__));
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
union __anonunion_96 {
   struct hlist_node hash_entry ;
   struct lockdep_subclass_key subkeys[8U] ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lock_class_key {
   union __anonunion_96 __anonCompField_lock_class_key_23 ;
};
#line 68 
struct lock_trace;
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lock_class {
   struct hlist_node hash_entry ;
   struct list_head lock_entry ;
   struct list_head locks_after ;
   struct list_head locks_before ;
   struct lockdep_subclass_key *key ;
   unsigned int subclass ;
   unsigned int dep_gen_id ;
   unsigned long usage_mask ;
   struct lock_trace *usage_traces[9U] ;
   int name_version ;
   char *name ;
   unsigned long contention_point[4U] ;
   unsigned long contending_point[4U] ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lockdep_map {
   struct lock_class_key *key ;
   struct lock_class *class_cache[2U] ;
   char *name ;
   int cpu ;
   unsigned long ip ;
};
#line 226  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct held_lock {
   u64 prev_chain_key ;
   unsigned long acquire_ip ;
   struct lockdep_map *instance ;
   struct lockdep_map *nest_lock ;
   u64 waittime_stamp ;
   u64 holdtime_stamp ;
   unsigned int class_idx : 13 ;
   unsigned int irq_context : 2 ;
   unsigned int trylock : 1 ;
   unsigned int read : 2 ;
   unsigned int check : 1 ;
   unsigned int hardirqs_off : 1 ;
   unsigned int references : 12 ;
   unsigned int pin_count ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct raw_spinlock {
   arch_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct raw_spinlock raw_spinlock_t;
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct __anonstruct_98 {
   u8 __padding[24U] ;
   struct lockdep_map dep_map ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
union __anonunion_97 {
   struct raw_spinlock rlock ;
   struct __anonstruct_98 __anonCompField___anonunion_97_24 ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct spinlock {
   union __anonunion_97 __anonCompField_spinlock_25 ;
};
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct spinlock spinlock_t;
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct __anonstruct_rwlock_t_99 {
   arch_rwlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct __anonstruct_rwlock_t_99 rwlock_t;
#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
struct mutex;
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
struct kmem_cache;
#line 48  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
struct seqcount {
   unsigned int sequence ;
   struct lockdep_map dep_map ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
typedef struct seqcount seqcount_t;
#line 403  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
struct __anonstruct_seqlock_t_112 {
   struct seqcount seqcount ;
   spinlock_t lock ;
};
#line 403  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
typedef struct __anonstruct_seqlock_t_112 seqlock_t;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timex.h"
typedef s32 old_time32_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/time32.h"
struct old_timespec32 {
   old_time32_t tv_sec ;
   s32 tv_nsec ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
struct wait_queue_head {
   spinlock_t lock ;
   struct list_head head ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
typedef struct wait_queue_head wait_queue_head_t;
#line 1133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
struct __anonstruct_nodemask_t_113 {
   unsigned long bits[16U] ;
};
#line 1133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
typedef struct __anonstruct_nodemask_t_113 nodemask_t;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/tlbbatch.h"
struct arch_tlbflush_unmap_batch {
   struct cpumask cpumask ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct vmacache {
   u64 seqnum ;
   struct vm_area_struct *vmas[4U] ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct task_rss_stat {
   int events ;
   int count[4U] ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct mm_rss_stat {
   atomic_long_t count[4U] ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct page_frag {
   struct page *page ;
   __u32 offset ;
   __u32 size ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct tlbflush_unmap_batch {
   struct arch_tlbflush_unmap_batch arch ;
   bool flush_required ;
   bool writable ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_node {
   unsigned long __rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
} __attribute__((__aligned__(8)));
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_root {
   struct rb_node *rb_node ;
};
#line 125  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_root_cached {
   struct rb_root rb_root ;
   struct rb_node *rb_leftmost ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/osq_lock.h"
struct optimistic_spin_queue {
   atomic_t tail ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rwsem.h"
struct rw_semaphore {
   atomic_long_t count ;
   atomic_long_t owner ;
   struct optimistic_spin_queue osq ;
   raw_spinlock_t wait_lock ;
   struct list_head wait_list ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/completion.h"
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};
#line 120 
struct inode;
#line 121 
struct notifier_block;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct ww_acquire_ctx;
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
struct mutex {
   atomic_long_t owner ;
   spinlock_t wait_lock ;
   struct optimistic_spin_queue osq ;
   struct list_head wait_list ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   struct ww_acquire_ctx *ww_ctx ;
   void *magic ;
};
#line 461  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
typedef s64 ktime_t;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
struct timer_list {
   struct hlist_node entry ;
   unsigned long expires ;
   void (*function)(struct timer_list *) ;
   u32 flags ;
   struct lockdep_map lockdep_map ;
};
#line 195 
struct hrtimer;
#line 196 
enum hrtimer_restart;
#line 220 
struct workqueue_struct;
#line 221 
struct work_struct;
#line 102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct *) ;
   struct lockdep_map lockdep_map ;
};
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct delayed_work {
   struct work_struct work ;
   struct timer_list timer ;
   struct workqueue_struct *wq ;
   int cpu ;
};
#line 124  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct rcu_work {
   struct work_struct work ;
   struct callback_head rcu ;
   struct workqueue_struct *wq ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/notifier.h"
struct notifier_block {
   int (*notifier_call)(struct notifier_block *, unsigned long , void *) ;
   struct notifier_block *next ;
   int priority ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/notifier.h"
struct raw_notifier_head {
   struct notifier_block *head ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/uprobes.h"
struct arch_uprobe_task {
   unsigned long saved_scratch_register ;
   unsigned int saved_trap_nr ;
   unsigned int saved_tf ;
};
#line 57 
enum uprobe_task_state {
    UTASK_RUNNING = 0,
    UTASK_SSTEP = 1,
    UTASK_SSTEP_ACK = 2,
    UTASK_SSTEP_TRAPPED = 3
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_126 {
   struct arch_uprobe_task autask ;
   unsigned long vaddr ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_127 {
   struct callback_head dup_xol_work ;
   unsigned long dup_xol_addr ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
union __anonunion_125 {
   struct __anonstruct_126 __anonCompField___anonunion_125_28 ;
   struct __anonstruct_127 __anonCompField___anonunion_125_29 ;
};
#line 61 
struct uprobe;
#line 61 
struct return_instance;
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct uprobe_task {
   enum uprobe_task_state state ;
   union __anonunion_125 __anonCompField_uprobe_task_30 ;
   struct uprobe *active_uprobe ;
   unsigned long xol_vaddr ;
   struct return_instance *return_instances ;
   unsigned int depth ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct return_instance {
   struct uprobe *uprobe ;
   unsigned long func ;
   unsigned long stack ;
   unsigned long orig_ret_vaddr ;
   bool chained ;
   struct return_instance *next ;
};
#line 98 
struct xol_area;
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct uprobes_state {
   struct xol_area *xol_area ;
};
#line 140 
struct ldt_struct;
#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_mm_context_t_128 {
   u64 ctx_id ;
   atomic64_t tlb_gen ;
   struct rw_semaphore ldt_usr_sem ;
   struct ldt_struct *ldt ;
   unsigned short ia32_compat ;
   struct mutex lock ;
   void *vdso ;
   struct vdso_image *vdso_image ;
   atomic_t perf_rdpmc_allowed ;
   u16 pkey_allocation_map ;
   s16 execute_only_pkey ;
   void *bd_addr ;
};
#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
typedef struct __anonstruct_mm_context_t_128 mm_context_t;
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct address_space;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_130 {
   struct list_head lru ;
   struct address_space *mapping ;
   unsigned long index ;
   unsigned long private ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_131 {
   dma_addr_t dma_addr ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_134 {
   struct page *next ;
   int pages ;
   int pobjects ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_133 {
   struct list_head slab_list ;
   struct __anonstruct_134 __anonCompField___anonunion_133_33 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_136 {
   unsigned int inuse : 16 ;
   unsigned int objects : 15 ;
   unsigned int frozen : 1 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_135 {
   void *s_mem ;
   unsigned long counters ;
   struct __anonstruct_136 __anonCompField___anonunion_135_35 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_132 {
   union __anonunion_133 __anonCompField___anonstruct_132_34 ;
   struct kmem_cache *slab_cache ;
   void *freelist ;
   union __anonunion_135 __anonCompField___anonstruct_132_36 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_137 {
   unsigned long compound_head ;
   unsigned char compound_dtor ;
   unsigned char compound_order ;
   atomic_t compound_mapcount ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_138 {
   unsigned long _compound_pad_1 ;
   unsigned long _compound_pad_2 ;
   struct list_head deferred_list ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_140 {
   struct mm_struct *pt_mm ;
   atomic_t pt_frag_refcount ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_139 {
   unsigned long _pt_pad_1 ;
   pgtable_t pmd_huge_pte ;
   unsigned long _pt_pad_2 ;
   union __anonunion_140 __anonCompField___anonstruct_139_40 ;
   spinlock_t *ptl ;
};
#line 68 
struct dev_pagemap;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_141 {
   struct dev_pagemap *pgmap ;
   void *zone_device_data ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_129 {
   struct __anonstruct_130 __anonCompField___anonunion_129_31 ;
   struct __anonstruct_131 __anonCompField___anonunion_129_32 ;
   struct __anonstruct_132 __anonCompField___anonunion_129_37 ;
   struct __anonstruct_137 __anonCompField___anonunion_129_38 ;
   struct __anonstruct_138 __anonCompField___anonunion_129_39 ;
   struct __anonstruct_139 __anonCompField___anonunion_129_41 ;
   struct __anonstruct_141 __anonCompField___anonunion_129_42 ;
   struct callback_head callback_head ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_142 {
   atomic_t _mapcount ;
   unsigned int page_type ;
   unsigned int active ;
   int units ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct page {
   unsigned long flags ;
   union __anonunion_129 __anonCompField_page_43 ;
   union __anonunion_142 __anonCompField_page_44 ;
   atomic_t _refcount ;
   struct mem_cgroup *mem_cgroup ;
} __attribute__((__aligned__(16)));
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct userfaultfd_ctx;
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct vm_userfaultfd_ctx {
   struct userfaultfd_ctx *ctx ;
};
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_shared_143 {
   struct rb_node rb ;
   unsigned long rb_subtree_last ;
};
#line 292 
struct anon_vma;
#line 292 
struct vm_operations_struct;
#line 292 
struct mempolicy;
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct vm_area_struct {
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   struct vm_area_struct *vm_prev ;
   struct rb_node vm_rb ;
   unsigned long rb_subtree_gap ;
   struct mm_struct *vm_mm ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   struct __anonstruct_shared_143 shared ;
   struct list_head anon_vma_chain ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   atomic_long_t swap_readahead_info ;
   struct mempolicy *vm_policy ;
   struct vm_userfaultfd_ctx vm_userfaultfd_ctx ;
} __attribute__((__designated_init__));
#line 358  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct core_thread {
   struct task_struct *task ;
   struct core_thread *next ;
};
#line 363  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct core_state {
   atomic_t nr_threads ;
   struct core_thread dumper ;
   struct completion startup ;
};
#line 368 
struct kioctx_table;
#line 370 
struct linux_binfmt;
#line 370 
struct user_namespace;
#line 370 
struct mmu_notifier_mm;
#line 370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_144 {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   u64 vmacache_seqnum ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   unsigned long mmap_base ;
   unsigned long mmap_legacy_base ;
   unsigned long mmap_compat_base ;
   unsigned long mmap_compat_legacy_base ;
   unsigned long task_size ;
   unsigned long highest_vm_end ;
   pgd_t *pgd ;
   atomic_t membarrier_state ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   atomic_long_t pgtables_bytes ;
   int map_count ;
   spinlock_t page_table_lock ;
   struct rw_semaphore mmap_sem ;
   struct list_head mmlist ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   atomic64_t pinned_vm ;
   unsigned long data_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long def_flags ;
   spinlock_t arg_lock ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[46U] ;
   struct mm_rss_stat rss_stat ;
   struct linux_binfmt *binfmt ;
   mm_context_t context ;
   unsigned long flags ;
   struct core_state *core_state ;
   spinlock_t ioctx_lock ;
   struct kioctx_table *ioctx_table ;
   struct task_struct *owner ;
   struct user_namespace *user_ns ;
   struct file *exe_file ;
   struct mmu_notifier_mm *mmu_notifier_mm ;
   unsigned long numa_next_scan ;
   unsigned long numa_scan_offset ;
   int numa_scan_seq ;
   atomic_t tlb_flush_pending ;
   bool tlb_flush_batched ;
   struct uprobes_state uprobes_state ;
   atomic_long_t hugetlb_usage ;
   struct work_struct async_put_work ;
} __attribute__((__designated_init__));
#line 370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct mm_struct {
   struct __anonstruct_144 __anonCompField_mm_struct_45 ;
   unsigned long cpu_bitmap[] ;
};
#line 642 
struct vm_fault;
#line 643  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
typedef unsigned int vm_fault_t;
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
typedef unsigned int isolate_mode_t;
#line 824 
struct resource;
#line 825 
struct vmem_altmap;
#line 440  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/io.h"
struct fwnode_operations;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_handle {
   struct fwnode_handle *secondary ;
   struct fwnode_operations *ops ;
   struct device *dev ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_endpoint {
   unsigned int port ;
   unsigned int id ;
   struct fwnode_handle *local_fwnode ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_reference_args {
   struct fwnode_handle *fwnode ;
   unsigned int nargs ;
   u64 args[8U] ;
};
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_operations {
   struct fwnode_handle *(*get)(struct fwnode_handle *) ;
   void (*put)(struct fwnode_handle *) ;
   bool (*device_is_available)(struct fwnode_handle *) ;
   void *(*device_get_match_data)(struct fwnode_handle *, struct device *) ;
   bool (*property_present)(struct fwnode_handle *, char *) ;
   int (*property_read_int_array)(struct fwnode_handle *, char *, unsigned int , void *, size_t ) ;
   int (*property_read_string_array)(struct fwnode_handle *, char *, char **, size_t ) ;
   char *(*get_name)(struct fwnode_handle *) ;
   char *(*get_name_prefix)(struct fwnode_handle *) ;
   struct fwnode_handle *(*get_parent)(struct fwnode_handle *) ;
   struct fwnode_handle *(*get_next_child_node)(struct fwnode_handle *, struct fwnode_handle *) ;
   struct fwnode_handle *(*get_named_child_node)(struct fwnode_handle *, char *) ;
   int (*get_reference_args)(struct fwnode_handle *, char *, char *, unsigned int , unsigned int , struct fwnode_reference_args *) ;
   struct fwnode_handle *(*graph_get_next_endpoint)(struct fwnode_handle *, struct fwnode_handle *) ;
   struct fwnode_handle *(*graph_get_remote_endpoint)(struct fwnode_handle *) ;
   struct fwnode_handle *(*graph_get_port_parent)(struct fwnode_handle *) ;
   int (*graph_parse_endpoint)(struct fwnode_handle *, struct fwnode_endpoint *) ;
   int (*add_links)(struct fwnode_handle *, struct device *) ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/llist.h"
struct llist_node;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/llist.h"
struct llist_node {
   struct llist_node *next ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmalloc.h"
struct vm_struct {
   struct vm_struct *next ;
   void *addr ;
   unsigned long size ;
   unsigned long flags ;
   struct page **pages ;
   unsigned int nr_pages ;
   phys_addr_t phys_addr ;
   void *caller ;
};
#line 623  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/gfp.h"
struct percpu_ref;
#line 624  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/gfp.h"
typedef void percpu_ref_func_t(struct percpu_ref *);
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-refcount.h"
struct percpu_ref {
   atomic_long_t count ;
   unsigned long percpu_count_ptr ;
   percpu_ref_func_t *release ;
   percpu_ref_func_t *confirm_switch ;
   bool force_atomic : 1 ;
   bool allow_reinit : 1 ;
   struct callback_head rcu ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shrinker.h"
struct shrink_control {
   gfp_t gfp_mask ;
   int nid ;
   unsigned long nr_to_scan ;
   unsigned long nr_scanned ;
   struct mem_cgroup *memcg ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shrinker.h"
struct shrinker {
   unsigned long (*count_objects)(struct shrinker *, struct shrink_control *) ;
   unsigned long (*scan_objects)(struct shrinker *, struct shrink_control *) ;
   long batch ;
   int seeks ;
   unsigned int flags ;
   struct list_head list ;
   int id ;
   atomic_long_t *nr_deferred ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/resource.h"
struct rlimit {
   __kernel_ulong_t rlim_cur ;
   __kernel_ulong_t rlim_max ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ioport.h"
struct resource {
   resource_size_t start ;
   resource_size_t end ;
   char *name ;
   unsigned long flags ;
   unsigned long desc ;
   struct resource *parent ;
   struct resource *sibling ;
   struct resource *child ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct vmem_altmap {
   unsigned long base_pfn ;
   unsigned long end_pfn ;
   unsigned long reserve ;
   unsigned long free ;
   unsigned long align ;
   unsigned long alloc ;
};
#line 26 
enum memory_type {
    MEMORY_DEVICE_PRIVATE = 1,
    MEMORY_DEVICE_FS_DAX = 2,
    MEMORY_DEVICE_DEVDAX = 3,
    MEMORY_DEVICE_PCI_P2PDMA = 4
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct dev_pagemap_ops {
   void (*page_free)(struct page *) ;
   void (*kill)(struct dev_pagemap *) ;
   void (*cleanup)(struct dev_pagemap *) ;
   vm_fault_t (*migrate_to_ram)(struct vm_fault *) ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct dev_pagemap {
   struct vmem_altmap altmap ;
   struct resource res ;
   struct percpu_ref *ref ;
   struct percpu_ref internal_ref ;
   struct completion done ;
   enum memory_type type ;
   unsigned int flags ;
   struct dev_pagemap_ops *ops ;
};
#line 176 
struct file_ra_state;
#line 177 
struct user_struct;
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
struct refcount_struct {
   atomic_t refs ;
};
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
typedef struct refcount_struct refcount_t;
#line 305 
enum pid_type {
    PIDTYPE_PID = 0,
    PIDTYPE_TGID = 1,
    PIDTYPE_PGID = 2,
    PIDTYPE_SID = 3,
    PIDTYPE_MAX = 4
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct pid_namespace;
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct upid {
   int nr ;
   struct pid_namespace *ns ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct pid {
   refcount_t count ;
   unsigned int level ;
   struct hlist_head tasks[4U] ;
   wait_queue_head_t wait_pidfd ;
   struct callback_head rcu ;
   struct upid numbers[1U] ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
struct __anonstruct_kuid_t_272 {
   uid_t val ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
typedef struct __anonstruct_kuid_t_272 kuid_t;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
struct __anonstruct_kgid_t_273 {
   gid_t val ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
typedef struct __anonstruct_kgid_t_273 kgid_t;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhash_head {
   struct rhash_head *next ;
};
#line 33 
struct rhashtable;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable_compare_arg {
   struct rhashtable *ht ;
   void *key ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable_params {
   u16 nelem_hint ;
   u16 key_len ;
   u16 key_offset ;
   u16 head_offset ;
   unsigned int max_size ;
   u16 min_size ;
   bool automatic_shrinking ;
   u32 (*hashfn)(void *, u32 , u32 ) ;
   u32 (*obj_hashfn)(void *, u32 , u32 ) ;
   int (*obj_cmpfn)(struct rhashtable_compare_arg *, void *) ;
};
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable {
   struct bucket_table *tbl ;
   unsigned int key_len ;
   unsigned int max_elems ;
   struct rhashtable_params p ;
   bool rhlist ;
   struct work_struct run_work ;
   struct mutex mutex ;
   spinlock_t lock ;
   atomic_t nelems ;
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/sem.h"
struct sem_undo_list;
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sem.h"
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shm.h"
struct sysv_shm {
   struct list_head shm_clist ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/plist.h"
struct plist_node {
   int prio ;
   struct list_head prio_list ;
   struct list_head node_list ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timerqueue.h"
struct timerqueue_node {
   struct rb_node node ;
   ktime_t expires ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timerqueue.h"
struct timerqueue_head {
   struct rb_root_cached rb_root ;
};
#line 60 
struct hrtimer_clock_base;
#line 61 
struct hrtimer_cpu_base;
#line 80 
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
};
#line 117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer {
   struct timerqueue_node node ;
   ktime_t _softexpires ;
   enum hrtimer_restart (*function)(struct hrtimer *) ;
   struct hrtimer_clock_base *base ;
   u8 state ;
   u8 is_rel ;
   u8 is_soft ;
   u8 is_hard ;
};
#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   unsigned int index ;
   clockid_t clockid ;
   seqcount_t seq ;
   struct hrtimer *running ;
   struct timerqueue_head active ;
   ktime_t (*get_time)(void) ;
   ktime_t offset ;
} __attribute__((__aligned__(64)));
#line 213  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer_cpu_base {
   raw_spinlock_t lock ;
   unsigned int cpu ;
   unsigned int active_bases ;
   unsigned int clock_was_set_seq ;
   unsigned int hres_active : 1 ;
   unsigned int in_hrtirq : 1 ;
   unsigned int hang_detected : 1 ;
   unsigned int softirq_activated : 1 ;
   unsigned int nr_events ;
   unsigned short nr_retries ;
   unsigned short nr_hangs ;
   unsigned int max_hang_time ;
   ktime_t expires_next ;
   struct hrtimer *next_timer ;
   ktime_t softirq_expires_next ;
   struct hrtimer *softirq_next_timer ;
   struct hrtimer_clock_base clock_base[8U] ;
} __attribute__((__aligned__(64)));
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/seccomp.h"
struct seccomp_filter;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seccomp.h"
struct seccomp {
   int mode ;
   struct seccomp_filter *filter ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/latencytop.h"
struct latency_record {
   unsigned long backtrace[12U] ;
   unsigned int count ;
   unsigned long time ;
   unsigned long max ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/types.h"
struct task_cputime {
   u64 stime ;
   u64 utime ;
   unsigned long long sum_exec_runtime ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
struct __anonstruct_sigset_t_276 {
   unsigned long sig[1U] ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
typedef struct __anonstruct_sigset_t_276 sigset_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
typedef void __signalfn_t(int );
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef __signalfn_t *__sighandler_t;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef void __restorefn_t(void);
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef __restorefn_t *__sigrestore_t;
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union sigval {
   int sival_int ;
   void *sival_ptr ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
typedef union sigval sigval_t;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__kill_277 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__timer_278 {
   __kernel_timer_t _tid ;
   int _overrun ;
   sigval_t _sigval ;
   int _sys_private ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__rt_279 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   sigval_t _sigval ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigchld_280 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   int _status ;
   __kernel_clock_t _utime ;
   __kernel_clock_t _stime ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__addr_bnd_283 {
   char _dummy_bnd[8U] ;
   void *_lower ;
   void *_upper ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__addr_pkey_284 {
   char _dummy_pkey[8U] ;
   __u32 _pkey ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union __anonunion_282 {
   short _addr_lsb ;
   struct __anonstruct__addr_bnd_283 _addr_bnd ;
   struct __anonstruct__addr_pkey_284 _addr_pkey ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigfault_281 {
   void *_addr ;
   union __anonunion_282 __anonCompField___anonstruct__sigfault_281_47 ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigpoll_285 {
   long _band ;
   int _fd ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigsys_286 {
   void *_call_addr ;
   int _syscall ;
   unsigned int _arch ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union __sifields {
   struct __anonstruct__kill_277 _kill ;
   struct __anonstruct__timer_278 _timer ;
   struct __anonstruct__rt_279 _rt ;
   struct __anonstruct__sigchld_280 _sigchld ;
   struct __anonstruct__sigfault_281 _sigfault ;
   struct __anonstruct__sigpoll_285 _sigpoll ;
   struct __anonstruct__sigsys_286 _sigsys ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct __anonstruct_291 {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __sifields _sifields ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct kernel_siginfo {
   struct __anonstruct_291 __anonCompField_kernel_siginfo_50 ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
typedef struct kernel_siginfo kernel_siginfo_t;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct k_sigaction {
   struct sigaction sa ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/task_io_accounting.h"
struct task_io_accounting {
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/posix-timers.h"
struct posix_cputimer_base {
   u64 nextevt ;
   struct timerqueue_head tqhead ;
};
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/posix-timers.h"
struct posix_cputimers {
   struct posix_cputimer_base bases[3U] ;
   unsigned int timers_active ;
   unsigned int expiry_active ;
};
#line 193 
struct signal_struct;
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rseq.h"
union __anonunion_rseq_cs_296 {
   __u64 ptr64 ;
   __u64 ptr ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rseq.h"
struct rseq {
   __u32 cpu_id_start ;
   __u32 cpu_id ;
   union __anonunion_rseq_cs_296 rseq_cs ;
   __u32 flags ;
} __attribute__((__aligned__(32)));
#line 146 
struct audit_context;
#line 150 
struct capture_control;
#line 151 
struct cfs_rq;
#line 152 
struct fs_struct;
#line 153 
struct futex_pi_state;
#line 154 
struct io_context;
#line 155 
struct nameidata;
#line 156 
struct nsproxy;
#line 157 
struct perf_event_context;
#line 158 
struct pipe_inode_info;
#line 160 
struct reclaim_state;
#line 161 
struct robust_list_head;
#line 166 
struct sighand_struct;
#line 167 
struct task_delay_info;
#line 168 
struct task_group;
#line 242  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct prev_cputime {
   u64 utime ;
   u64 stime ;
   raw_spinlock_t lock ;
};
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_info {
   unsigned long pcount ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
};
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct load_weight {
   unsigned long weight ;
   u32 inv_weight ;
};
#line 352  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct util_est {
   unsigned int enqueued ;
   unsigned int ewma ;
} __attribute__((__aligned__(8)));
#line 401  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_avg {
   u64 last_update_time ;
   u64 load_sum ;
   u64 runnable_load_sum ;
   u32 util_sum ;
   u32 period_contrib ;
   unsigned long load_avg ;
   unsigned long runnable_load_avg ;
   unsigned long util_avg ;
   struct util_est util_est ;
} __attribute__((__aligned__(64)));
#line 413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_statistics {
   u64 wait_start ;
   u64 wait_max ;
   u64 wait_count ;
   u64 wait_sum ;
   u64 iowait_count ;
   u64 iowait_sum ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
};
#line 449  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_entity {
   struct load_weight load ;
   unsigned long runnable_weight ;
   struct rb_node run_node ;
   struct list_head group_node ;
   unsigned int on_rq ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 nr_migrations ;
   struct sched_statistics statistics ;
   int depth ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
   struct sched_avg avg ;
};
#line 486 
struct rt_rq;
#line 486  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_rt_entity {
   struct list_head run_list ;
   unsigned long timeout ;
   unsigned long watchdog_stamp ;
   unsigned int time_slice ;
   unsigned short on_rq ;
   unsigned short on_list ;
   struct sched_rt_entity *back ;
   struct sched_rt_entity *parent ;
   struct rt_rq *rt_rq ;
   struct rt_rq *my_q ;
} __attribute__((__designated_init__));
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_dl_entity {
   struct rb_node rb_node ;
   u64 dl_runtime ;
   u64 dl_deadline ;
   u64 dl_period ;
   u64 dl_bw ;
   u64 dl_density ;
   s64 runtime ;
   u64 deadline ;
   unsigned int flags ;
   unsigned int dl_throttled : 1 ;
   unsigned int dl_boosted : 1 ;
   unsigned int dl_yielded : 1 ;
   unsigned int dl_non_contending : 1 ;
   unsigned int dl_overrun : 1 ;
   struct hrtimer dl_timer ;
   struct hrtimer inactive_timer ;
};
#line 600  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct uclamp_se {
   unsigned int value : 11 ;
   unsigned int bucket_id : 3 ;
   unsigned int active : 1 ;
   unsigned int user_defined : 1 ;
};
#line 625  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct wake_q_node {
   struct wake_q_node *next ;
};
#line 629 
struct sched_class;
#line 629 
struct cred;
#line 629 
struct key;
#line 629 
struct files_struct;
#line 629 
struct rt_mutex_waiter;
#line 629 
struct css_set;
#line 629 
struct compat_robust_list_head;
#line 629 
struct numa_group;
#line 629  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
union __anonunion_298 {
   refcount_t rcu_users ;
   struct callback_head rcu ;
};
#line 629 
struct ftrace_ret_stack;
#line 629 
struct kcov;
#line 629  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct task_struct {
   struct thread_info thread_info ;
   long state ;
   void *stack ;
   refcount_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   struct llist_node wake_entry ;
   int on_cpu ;
   unsigned int cpu ;
   unsigned int wakee_flips ;
   unsigned long wakee_flip_decay_ts ;
   struct task_struct *last_wakee ;
   int recent_used_cpu ;
   int wake_cpu ;
   int on_rq ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   unsigned int rt_priority ;
   struct sched_class *sched_class ;
   struct sched_entity se ;
   struct sched_rt_entity rt ;
   struct task_group *sched_task_group ;
   struct sched_dl_entity dl ;
   struct uclamp_se uclamp_req[2U] ;
   struct uclamp_se uclamp[2U] ;
   struct hlist_head preempt_notifiers ;
   unsigned int btrace_seq ;
   unsigned int policy ;
   int nr_cpus_allowed ;
   cpumask_t *cpus_ptr ;
   cpumask_t cpus_mask ;
   unsigned long rcu_tasks_nvcsw ;
   u8 rcu_tasks_holdout ;
   u8 rcu_tasks_idx ;
   int rcu_tasks_idle_cpu ;
   struct list_head rcu_tasks_holdout_list ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct plist_node pushable_tasks ;
   struct rb_node pushable_dl_tasks ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   struct vmacache vmacache ;
   struct task_rss_stat rss_stat ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned long jobctl ;
   unsigned int personality ;
   unsigned int sched_reset_on_fork : 1 ;
   unsigned int sched_contributes_to_load : 1 ;
   unsigned int sched_migrated : 1 ;
   unsigned int sched_remote_wakeup : 1 ;
   unsigned int sched_psi_wake_requeue : 1 ;
   unsigned int  ;
   unsigned int in_execve : 1 ;
   unsigned int in_iowait : 1 ;
   unsigned int restore_sigmask : 1 ;
   unsigned int in_user_fault : 1 ;
   unsigned int brk_randomized : 1 ;
   unsigned int no_cgroup_migration : 1 ;
   unsigned int frozen : 1 ;
   unsigned int use_memdelay : 1 ;
   unsigned long atomic_flags ;
   struct restart_block restart_block ;
   pid_t pid ;
   pid_t tgid ;
   unsigned long stack_canary ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct list_head ptraced ;
   struct list_head ptrace_entry ;
   struct pid *thread_pid ;
   struct hlist_node pid_links[4U] ;
   struct list_head thread_group ;
   struct list_head thread_node ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   u64 utime ;
   u64 stime ;
   u64 gtime ;
   struct prev_cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   u64 start_time ;
   u64 start_boottime ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   struct posix_cputimers posix_cputimers ;
   struct cred *ptracer_cred ;
   struct cred *real_cred ;
   struct cred *cred ;
   struct key *cached_requested_key ;
   char comm[16U] ;
   struct nameidata *nameidata ;
   struct sysv_sem sysvsem ;
   struct sysv_shm sysvshm ;
   unsigned long last_switch_count ;
   unsigned long last_switch_time ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t sas_ss_size ;
   unsigned int sas_ss_flags ;
   struct callback_head *task_works ;
   struct audit_context *audit_context ;
   kuid_t loginuid ;
   unsigned int sessionid ;
   struct seccomp seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   raw_spinlock_t pi_lock ;
   struct wake_q_node wake_q ;
   struct rb_root_cached pi_waiters ;
   struct task_struct *pi_top_task ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct mutex_waiter *blocked_on ;
   int non_block_count ;
   unsigned int irq_events ;
   unsigned long hardirq_enable_ip ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned int hardirq_disable_event ;
   int hardirqs_enabled ;
   int hardirq_context ;
   unsigned long softirq_disable_ip ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_disable_event ;
   unsigned int softirq_enable_event ;
   int softirqs_enabled ;
   int softirq_context ;
   u64 curr_chain_key ;
   int lockdep_depth ;
   unsigned int lockdep_recursion ;
   struct held_lock held_locks[48U] ;
   unsigned int in_ubsan ;
   void *journal_info ;
   struct bio_list *bio_list ;
   struct blk_plug *plug ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   struct capture_control *capture_control ;
   unsigned long ptrace_message ;
   kernel_siginfo_t *last_siginfo ;
   struct task_io_accounting ioac ;
   unsigned int psi_flags ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   u64 acct_timexpd ;
   nodemask_t mems_allowed ;
   seqcount_t mems_allowed_seq ;
   int cpuset_mem_spread_rotor ;
   int cpuset_slab_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   u32 closid ;
   u32 rmid ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   struct mutex futex_exit_mutex ;
   unsigned int futex_state ;
   struct perf_event_context *perf_event_ctxp[2U] ;
   struct mutex perf_event_mutex ;
   struct list_head perf_event_list ;
   struct mempolicy *mempolicy ;
   short il_prev ;
   short pref_node_fork ;
   int numa_scan_seq ;
   unsigned int numa_scan_period ;
   unsigned int numa_scan_period_max ;
   int numa_preferred_nid ;
   unsigned long numa_migrate_retry ;
   u64 node_stamp ;
   u64 last_task_numa_placement ;
   u64 last_sum_exec_runtime ;
   struct callback_head numa_work ;
   struct numa_group *numa_group ;
   unsigned long *numa_faults ;
   unsigned long total_numa_faults ;
   unsigned long numa_faults_locality[3U] ;
   unsigned long numa_pages_migrated ;
   struct rseq *rseq ;
   u32 rseq_sig ;
   unsigned long rseq_event_mask ;
   struct tlbflush_unmap_batch tlb_ubc ;
   union __anonunion_298 __anonCompField_task_struct_52 ;
   struct pipe_inode_info *splice_pipe ;
   struct page_frag task_frag ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   unsigned int fail_nth ;
   int nr_dirtied ;
   int nr_dirtied_pause ;
   unsigned long dirty_paused_when ;
   int latency_record_count ;
   struct latency_record latency_record[32U] ;
   u64 timer_slack_ns ;
   u64 default_timer_slack_ns ;
   unsigned int kasan_depth ;
   int curr_ret_stack ;
   int curr_ret_depth ;
   struct ftrace_ret_stack *ret_stack ;
   unsigned long long ftrace_timestamp ;
   atomic_t trace_overrun ;
   atomic_t tracing_graph_pause ;
   unsigned long trace ;
   unsigned long trace_recursion ;
   unsigned int kcov_mode ;
   unsigned int kcov_size ;
   void *kcov_area ;
   struct kcov *kcov ;
   u64 kcov_handle ;
   int kcov_sequence ;
   struct mem_cgroup *memcg_in_oom ;
   gfp_t memcg_oom_gfp_mask ;
   int memcg_oom_order ;
   unsigned int memcg_nr_pages_over_high ;
   struct mem_cgroup *active_memcg ;
   struct request_queue *throttle_queue ;
   struct uprobe_task *utask ;
   unsigned int sequential_io ;
   unsigned int sequential_io_avg ;
   unsigned long task_state_change ;
   int pagefault_disabled ;
   struct task_struct *oom_reaper_list ;
   struct vm_struct *stack_vm_area ;
   refcount_t stack_refcount ;
   int patch_state ;
   void *security ;
   struct thread_struct thread ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/extable.h"
struct exception_table_entry {
   int insn ;
   int fixup ;
   int handler ;
};
#line 417  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
struct vm_fault {
   struct vm_area_struct *vma ;
   unsigned int flags ;
   gfp_t gfp_mask ;
   unsigned long pgoff ;
   unsigned long address ;
   pmd_t *pmd ;
   pud_t *pud ;
   pte_t orig_pte ;
   struct page *cow_page ;
   struct mem_cgroup *memcg ;
   struct page *page ;
   pte_t *pte ;
   spinlock_t *ptl ;
   pgtable_t prealloc_pte ;
};
#line 448 
enum page_entry_size {
    PE_SIZE_PTE = 0,
    PE_SIZE_PMD = 1,
    PE_SIZE_PUD = 2
};
#line 467  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
struct vm_operations_struct {
   void (*open)(struct vm_area_struct *) ;
   void (*close)(struct vm_area_struct *) ;
   int (*split)(struct vm_area_struct *, unsigned long ) ;
   int (*mremap)(struct vm_area_struct *) ;
   vm_fault_t (*fault)(struct vm_fault *) ;
   vm_fault_t (*huge_fault)(struct vm_fault *, enum page_entry_size ) ;
   void (*map_pages)(struct vm_fault *, unsigned long , unsigned long ) ;
   unsigned long (*pagesize)(struct vm_area_struct *) ;
   vm_fault_t (*page_mkwrite)(struct vm_fault *) ;
   vm_fault_t (*pfn_mkwrite)(struct vm_fault *) ;
   int (*access)(struct vm_area_struct *, unsigned long , void *, int , int ) ;
   char *(*name)(struct vm_area_struct *) ;
   int (*set_policy)(struct vm_area_struct *, struct mempolicy *) ;
   struct mempolicy *(*get_policy)(struct vm_area_struct *, unsigned long ) ;
   struct page *(*find_special_page)(struct vm_area_struct *, unsigned long ) ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_node;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_head {
   struct hlist_bl_node *first ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_node {
   struct hlist_bl_node *next ;
   struct hlist_bl_node **pprev ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
struct __anonstruct_387 {
   spinlock_t lock ;
   int count ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
union __anonunion_386 {
   struct __anonstruct_387 __anonCompField___anonunion_386_53 ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
struct lockref {
   union __anonunion_386 __anonCompField_lockref_54 ;
};
#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/stringhash.h"
struct path;
#line 79 
struct vfsmount;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct __anonstruct_389 {
   u32 hash ;
   u32 len ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_388 {
   struct __anonstruct_389 __anonCompField___anonunion_388_55 ;
   u64 hash_len ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct qstr {
   union __anonunion_388 __anonCompField_qstr_56 ;
   unsigned char *name ;
};
#line 89 
struct dentry_operations;
#line 89 
struct super_block;
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_390 {
   struct list_head d_lru ;
   wait_queue_head_t *d_wait ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_d_u_391 {
   struct hlist_node d_alias ;
   struct hlist_bl_node d_in_lookup_hash ;
   struct callback_head d_rcu ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct dentry {
   unsigned int d_flags ;
   seqcount_t d_seq ;
   struct hlist_bl_node d_hash ;
   struct dentry *d_parent ;
   struct qstr d_name ;
   struct inode *d_inode ;
   unsigned char d_iname[32U] ;
   struct lockref d_lockref ;
   struct dentry_operations *d_op ;
   struct super_block *d_sb ;
   unsigned long d_time ;
   void *d_fsdata ;
   union __anonunion_390 __anonCompField_dentry_57 ;
   struct list_head d_child ;
   struct list_head d_subdirs ;
   union __anonunion_d_u_391 d_u ;
} __attribute__((__designated_init__));
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct dentry_operations {
   int (*d_revalidate)(struct dentry *, unsigned int ) ;
   int (*d_weak_revalidate)(struct dentry *, unsigned int ) ;
   int (*d_hash)(struct dentry *, struct qstr *) ;
   int (*d_compare)(struct dentry *, unsigned int , char *, struct qstr *) ;
   int (*d_delete)(struct dentry *) ;
   int (*d_init)(struct dentry *) ;
   void (*d_release)(struct dentry *) ;
   void (*d_prune)(struct dentry *) ;
   void (*d_iput)(struct dentry *, struct inode *) ;
   char *(*d_dname)(struct dentry *, char *, int ) ;
   struct vfsmount *(*d_automount)(struct path *) ;
   int (*d_manage)(struct path *, bool ) ;
   struct dentry *(*d_real)(struct dentry *, struct inode *) ;
} __attribute__((__aligned__(64)));
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/path.h"
struct path {
   struct vfsmount *mnt ;
   struct dentry *dentry ;
} __attribute__((__designated_init__));
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/stat.h"
struct kstat {
   u32 result_mask ;
   umode_t mode ;
   unsigned int nlink ;
   uint32_t blksize ;
   u64 attributes ;
   u64 attributes_mask ;
   u64 ino ;
   dev_t dev ;
   dev_t rdev ;
   kuid_t uid ;
   kgid_t gid ;
   loff_t size ;
   struct timespec64 atime ;
   struct timespec64 mtime ;
   struct timespec64 ctime ;
   struct timespec64 btime ;
   u64 blocks ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_one {
   struct list_head list ;
   long nr_items ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_memcg {
   struct callback_head rcu ;
   struct list_lru_one *lru[0U] ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_node {
   spinlock_t lock ;
   struct list_lru_one lru ;
   struct list_lru_memcg *memcg_lrus ;
   long nr_items ;
} __attribute__((__aligned__(64)));
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru {
   struct list_lru_node *node ;
   struct list_head list ;
   int shrinker_id ;
   bool memcg_aware ;
};
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/xarray.h"
struct xarray {
   spinlock_t xa_lock ;
   gfp_t xa_flags ;
   void *xa_head ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/capability.h"
struct kernel_cap_struct {
   __u32 cap[2U] ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/capability.h"
typedef struct kernel_cap_struct kernel_cap_t;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fiemap.h"
struct fiemap_extent {
   __u64 fe_logical ;
   __u64 fe_physical ;
   __u64 fe_length ;
   __u64 fe_reserved64[2U] ;
   __u32 fe_flags ;
   __u32 fe_reserved[3U] ;
};
#line 39 
enum migrate_mode {
    MIGRATE_ASYNC = 0,
    MIGRATE_SYNC_LIGHT = 1,
    MIGRATE_SYNC = 2,
    MIGRATE_SYNC_NO_COPY = 3
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcuwait.h"
struct rcuwait {
   struct task_struct *task ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcu_sync.h"
struct rcu_sync {
   int gp_state ;
   int gp_count ;
   wait_queue_head_t gp_wait ;
   struct callback_head cb_head ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-rwsem.h"
struct percpu_rw_semaphore {
   struct rcu_sync rss ;
   unsigned int *read_count ;
   struct rw_semaphore rw_sem ;
   struct rcuwait writer ;
   int readers_block ;
};
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/delayed_call.h"
struct delayed_call {
   void (*fn)(void *) ;
   void *arg ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uuid.h"
struct __anonstruct_uuid_t_409 {
   __u8 b[16U] ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uuid.h"
typedef struct __anonstruct_uuid_t_409 uuid_t;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uuid.h"
typedef u32 errseq_t;
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
union __anonunion_410 {
   struct list_head q_node ;
   struct kmem_cache *__rcu_icq_cache ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
union __anonunion_411 {
   struct hlist_node ioc_node ;
   struct callback_head __rcu_head ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
struct io_cq {
   struct request_queue *q ;
   struct io_context *ioc ;
   union __anonunion_410 __anonCompField_io_cq_60 ;
   union __anonunion_411 __anonCompField_io_cq_61 ;
   unsigned int flags ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
struct io_context {
   atomic_long_t refcount ;
   atomic_t active_ref ;
   atomic_t nr_tasks ;
   spinlock_t lock ;
   unsigned short ioprio ;
   int nr_batch_requests ;
   unsigned long last_waited ;
   struct xarray icq_tree ;
   struct io_cq *icq_hint ;
   struct hlist_head icq_list ;
   struct work_struct release_work ;
};
#line 287  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fs.h"
struct export_operations;
#line 289 
struct iovec;
#line 290 
struct kiocb;
#line 291 
struct kobject;
#line 293 
struct kstatfs;
#line 294 
struct swap_info_struct;
#line 295 
struct iov_iter;
#line 296 
struct fscrypt_info;
#line 297 
struct fscrypt_operations;
#line 298 
struct fsverity_info;
#line 299 
struct fsverity_operations;
#line 300 
struct fs_context;
#line 301 
struct fs_parameter_description;
#line 224  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct iattr {
   unsigned int ia_valid ;
   umode_t ia_mode ;
   kuid_t ia_uid ;
   kgid_t ia_gid ;
   loff_t ia_size ;
   struct timespec64 ia_atime ;
   struct timespec64 ia_mtime ;
   struct timespec64 ia_ctime ;
   struct file *ia_file ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu_counter.h"
struct percpu_counter {
   raw_spinlock_t lock ;
   s64 count ;
   struct list_head list ;
   s32 *counters ;
};
#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dqblk_xfs.h"
struct dquot;
#line 215 
struct kqid;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
typedef __kernel_uid32_t projid_t;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
struct __anonstruct_kprojid_t_412 {
   projid_t val ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
typedef struct __anonstruct_kprojid_t_412 kprojid_t;
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/quota.h"
enum quota_type {
    USRQUOTA = 0,
    GRPQUOTA = 1,
    PRJQUOTA = 2
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
typedef long long qsize_t;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
union __anonunion_413 {
   kuid_t uid ;
   kgid_t gid ;
   kprojid_t projid ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct kqid {
   union __anonunion_413 __anonCompField_kqid_62 ;
   enum quota_type type ;
};
#line 205  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct mem_dqblk {
   qsize_t dqb_bhardlimit ;
   qsize_t dqb_bsoftlimit ;
   qsize_t dqb_curspace ;
   qsize_t dqb_rsvspace ;
   qsize_t dqb_ihardlimit ;
   qsize_t dqb_isoftlimit ;
   qsize_t dqb_curinodes ;
   time64_t dqb_btime ;
   time64_t dqb_itime ;
};
#line 216 
struct quota_format_type;
#line 222  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct mem_dqinfo {
   struct quota_format_type *dqi_format ;
   int dqi_fmt_id ;
   struct list_head dqi_dirty_list ;
   unsigned long dqi_flags ;
   unsigned int dqi_bgrace ;
   unsigned int dqi_igrace ;
   qsize_t dqi_max_spc_limit ;
   qsize_t dqi_max_ino_limit ;
   void *dqi_priv ;
};
#line 294  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct dquot {
   struct hlist_node dq_hash ;
   struct list_head dq_inuse ;
   struct list_head dq_free ;
   struct list_head dq_dirty ;
   struct mutex dq_lock ;
   spinlock_t dq_dqb_lock ;
   atomic_t dq_count ;
   struct super_block *dq_sb ;
   struct kqid dq_id ;
   loff_t dq_off ;
   unsigned long dq_flags ;
   struct mem_dqblk dq_dqb ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_format_ops {
   int (*check_quota_file)(struct super_block *, int ) ;
   int (*read_file_info)(struct super_block *, int ) ;
   int (*write_file_info)(struct super_block *, int ) ;
   int (*free_file_info)(struct super_block *, int ) ;
   int (*read_dqblk)(struct dquot *) ;
   int (*commit_dqblk)(struct dquot *) ;
   int (*release_dqblk)(struct dquot *) ;
   int (*get_next_id)(struct super_block *, struct kqid *) ;
};
#line 322  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct dquot_operations {
   int (*write_dquot)(struct dquot *) ;
   struct dquot *(*alloc_dquot)(struct super_block *, int ) ;
   void (*destroy_dquot)(struct dquot *) ;
   int (*acquire_dquot)(struct dquot *) ;
   int (*release_dquot)(struct dquot *) ;
   int (*mark_dirty)(struct dquot *) ;
   int (*write_info)(struct super_block *, int ) ;
   qsize_t *(*get_reserved_space)(struct inode *) ;
   int (*get_projid)(struct inode *, kprojid_t *) ;
   int (*get_inode_usage)(struct inode *, qsize_t *) ;
   int (*get_next_id)(struct super_block *, struct kqid *) ;
};
#line 343  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_dqblk {
   int d_fieldmask ;
   u64 d_spc_hardlimit ;
   u64 d_spc_softlimit ;
   u64 d_ino_hardlimit ;
   u64 d_ino_softlimit ;
   u64 d_space ;
   u64 d_ino_count ;
   s64 d_ino_timer ;
   s64 d_spc_timer ;
   int d_ino_warns ;
   int d_spc_warns ;
   u64 d_rt_spc_hardlimit ;
   u64 d_rt_spc_softlimit ;
   u64 d_rt_space ;
   s64 d_rt_spc_timer ;
   int d_rt_spc_warns ;
};
#line 395  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_type_state {
   unsigned int flags ;
   unsigned int spc_timelimit ;
   unsigned int ino_timelimit ;
   unsigned int rt_spc_timelimit ;
   unsigned int spc_warnlimit ;
   unsigned int ino_warnlimit ;
   unsigned int rt_spc_warnlimit ;
   unsigned long long ino ;
   blkcnt_t blocks ;
   blkcnt_t nextents ;
};
#line 409  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_state {
   unsigned int s_incoredqs ;
   struct qc_type_state s_state[3U] ;
};
#line 415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_info {
   int i_fieldmask ;
   unsigned int i_flags ;
   unsigned int i_spc_timelimit ;
   unsigned int i_ino_timelimit ;
   unsigned int i_rt_spc_timelimit ;
   unsigned int i_spc_warnlimit ;
   unsigned int i_ino_warnlimit ;
   unsigned int i_rt_spc_warnlimit ;
};
#line 428  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quotactl_ops {
   int (*quota_on)(struct super_block *, int , int , struct path *) ;
   int (*quota_off)(struct super_block *, int ) ;
   int (*quota_enable)(struct super_block *, unsigned int ) ;
   int (*quota_disable)(struct super_block *, unsigned int ) ;
   int (*quota_sync)(struct super_block *, int ) ;
   int (*set_info)(struct super_block *, int , struct qc_info *) ;
   int (*get_dqblk)(struct super_block *, struct kqid , struct qc_dqblk *) ;
   int (*get_nextdqblk)(struct super_block *, struct kqid *, struct qc_dqblk *) ;
   int (*set_dqblk)(struct super_block *, struct kqid , struct qc_dqblk *) ;
   int (*get_state)(struct super_block *, struct qc_state *) ;
   int (*rm_xquota)(struct super_block *, unsigned int ) ;
};
#line 443  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_format_type {
   int qf_fmt_id ;
   struct quota_format_ops *qf_ops ;
   struct module *qf_owner ;
   struct quota_format_type *qf_next ;
};
#line 518  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_info {
   unsigned int flags ;
   struct rw_semaphore dqio_sem ;
   struct inode *files[3U] ;
   struct mem_dqinfo info[3U] ;
   struct quota_format_ops *ops[3U] ;
};
#line 538 
enum rw_hint {
    WRITE_LIFE_NOT_SET = 0,
    WRITE_LIFE_NONE = 1,
    WRITE_LIFE_SHORT = 2,
    WRITE_LIFE_MEDIUM = 3,
    WRITE_LIFE_LONG = 4,
    WRITE_LIFE_EXTREME = 5
};
#line 318  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct kiocb {
   struct file *ki_filp ;
   loff_t ki_pos ;
   void (*ki_complete)(struct kiocb *, long , long ) ;
   void *private ;
   int ki_flags ;
   u16 ki_hint ;
   u16 ki_ioprio ;
   unsigned int ki_cookie ;
};
#line 362  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct address_space_operations {
   int (*writepage)(struct page *, struct writeback_control *) ;
   int (*readpage)(struct file *, struct page *) ;
   int (*writepages)(struct address_space *, struct writeback_control *) ;
   int (*set_page_dirty)(struct page *) ;
   int (*readpages)(struct file *, struct address_space *, struct list_head *, unsigned int ) ;
   int (*write_begin)(struct file *, struct address_space *, loff_t , unsigned int , unsigned int , struct page **, void **) ;
   int (*write_end)(struct file *, struct address_space *, loff_t , unsigned int , unsigned int , struct page *, void *) ;
   sector_t (*bmap)(struct address_space *, sector_t ) ;
   void (*invalidatepage)(struct page *, unsigned int , unsigned int ) ;
   int (*releasepage)(struct page *, gfp_t ) ;
   void (*freepage)(struct page *) ;
   ssize_t (*direct_IO)(struct kiocb *, struct iov_iter *) ;
   int (*migratepage)(struct address_space *, struct page *, struct page *, enum migrate_mode ) ;
   bool (*isolate_page)(struct page *, isolate_mode_t ) ;
   void (*putback_page)(struct page *) ;
   int (*launder_page)(struct page *) ;
   int (*is_partially_uptodate)(struct page *, unsigned long , unsigned long ) ;
   void (*is_dirty_writeback)(struct page *, bool *, bool *) ;
   int (*error_remove_page)(struct address_space *, struct page *) ;
   int (*swap_activate)(struct swap_info_struct *, struct file *, sector_t *) ;
   void (*swap_deactivate)(struct file *) ;
};
#line 445  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct address_space {
   struct inode *host ;
   struct xarray i_pages ;
   gfp_t gfp_mask ;
   atomic_t i_mmap_writable ;
   atomic_t nr_thps ;
   struct rb_root_cached i_mmap ;
   struct rw_semaphore i_mmap_rwsem ;
   unsigned long nrpages ;
   unsigned long nrexceptional ;
   unsigned long writeback_index ;
   struct address_space_operations *a_ops ;
   unsigned long flags ;
   errseq_t wb_err ;
   spinlock_t private_lock ;
   struct list_head private_list ;
   void *private_data ;
} __attribute__((__designated_init__, __aligned__(8)));
#line 473  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct block_device {
   dev_t bd_dev ;
   int bd_openers ;
   struct inode *bd_inode ;
   struct super_block *bd_super ;
   struct mutex bd_mutex ;
   void *bd_claiming ;
   void *bd_holder ;
   int bd_holders ;
   bool bd_write_holder ;
   struct list_head bd_holder_disks ;
   struct block_device *bd_contains ;
   unsigned int bd_block_size ;
   u8 bd_partno ;
   struct hd_struct *bd_part ;
   unsigned int bd_part_count ;
   int bd_invalidated ;
   struct gendisk *bd_disk ;
   struct request_queue *bd_queue ;
   struct backing_dev_info *bd_bdi ;
   struct list_head bd_list ;
   unsigned long bd_private ;
   int bd_fsfreeze_count ;
   struct mutex bd_fsfreeze_mutex ;
} __attribute__((__designated_init__));
#line 587 
struct posix_acl;
#line 614 
struct fsnotify_mark_connector;
#line 628 
struct inode_operations;
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_418 {
   unsigned int i_nlink ;
   unsigned int __i_nlink ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_419 {
   struct hlist_head i_dentry ;
   struct callback_head i_rcu ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_420 {
   struct file_operations *i_fop ;
   void (*free_inode)(struct inode *) ;
};
#line 628 
struct file_lock_context;
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_421 {
   struct pipe_inode_info *i_pipe ;
   struct block_device *i_bdev ;
   struct cdev *i_cdev ;
   char *i_link ;
   unsigned int i_dir_seq ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct inode {
   umode_t i_mode ;
   unsigned short i_opflags ;
   kuid_t i_uid ;
   kgid_t i_gid ;
   unsigned int i_flags ;
   struct posix_acl *i_acl ;
   struct posix_acl *i_default_acl ;
   struct inode_operations *i_op ;
   struct super_block *i_sb ;
   struct address_space *i_mapping ;
   void *i_security ;
   unsigned long i_ino ;
   union __anonunion_418 __anonCompField_inode_63 ;
   dev_t i_rdev ;
   loff_t i_size ;
   struct timespec64 i_atime ;
   struct timespec64 i_mtime ;
   struct timespec64 i_ctime ;
   spinlock_t i_lock ;
   unsigned short i_bytes ;
   u8 i_blkbits ;
   u8 i_write_hint ;
   blkcnt_t i_blocks ;
   unsigned long i_state ;
   struct rw_semaphore i_rwsem ;
   unsigned long dirtied_when ;
   unsigned long dirtied_time_when ;
   struct hlist_node i_hash ;
   struct list_head i_io_list ;
   struct bdi_writeback *i_wb ;
   int i_wb_frn_winner ;
   u16 i_wb_frn_avg_time ;
   u16 i_wb_frn_history ;
   struct list_head i_lru ;
   struct list_head i_sb_list ;
   struct list_head i_wb_list ;
   union __anonunion_419 __anonCompField_inode_64 ;
   atomic64_t i_version ;
   atomic_t i_count ;
   atomic_t i_dio_count ;
   atomic_t i_writecount ;
   atomic_t i_readcount ;
   union __anonunion_420 __anonCompField_inode_65 ;
   struct file_lock_context *i_flctx ;
   struct address_space i_data ;
   struct list_head i_devices ;
   union __anonunion_421 __anonCompField_inode_66 ;
   __u32 i_generation ;
   __u32 i_fsnotify_mask ;
   struct fsnotify_mark_connector *i_fsnotify_marks ;
   struct fscrypt_info *i_crypt_info ;
   struct fsverity_info *i_verity_info ;
   void *i_private ;
} __attribute__((__designated_init__));
#line 904  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fown_struct {
   rwlock_t lock ;
   struct pid *pid ;
   enum pid_type pid_type ;
   kuid_t uid ;
   kuid_t euid ;
   int signum ;
};
#line 915  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_ra_state {
   unsigned long start ;
   unsigned int size ;
   unsigned int async_size ;
   unsigned int ra_pages ;
   unsigned int mmap_miss ;
   loff_t prev_pos ;
};
#line 935  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_f_u_422 {
   struct llist_node fu_llist ;
   struct callback_head fu_rcuhead ;
};
#line 935  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file {
   union __anonunion_f_u_422 f_u ;
   struct path f_path ;
   struct inode *f_inode ;
   struct file_operations *f_op ;
   spinlock_t f_lock ;
   enum rw_hint f_write_hint ;
   atomic_long_t f_count ;
   unsigned int f_flags ;
   fmode_t f_mode ;
   struct mutex f_pos_lock ;
   loff_t f_pos ;
   struct fown_struct f_owner ;
   struct cred *f_cred ;
   struct file_ra_state f_ra ;
   u64 f_version ;
   void *f_security ;
   void *private_data ;
   struct list_head f_ep_links ;
   struct list_head f_tfile_llink ;
   struct address_space *f_mapping ;
   errseq_t f_wb_err ;
} __attribute__((__designated_init__, __aligned__(4)));
#line 988  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
typedef void *fl_owner_t;
#line 1026 
struct file_lock;
#line 1029  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock_operations {
   void (*fl_copy_lock)(struct file_lock *, struct file_lock *) ;
   void (*fl_release_private)(struct file_lock *) ;
};
#line 1034  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct lock_manager_operations {
   fl_owner_t (*lm_get_owner)(fl_owner_t ) ;
   void (*lm_put_owner)(fl_owner_t ) ;
   void (*lm_notify)(struct file_lock *) ;
   int (*lm_grant)(struct file_lock *, int ) ;
   bool (*lm_break)(struct file_lock *) ;
   int (*lm_change)(struct file_lock *, int , struct list_head *) ;
   void (*lm_setup)(struct file_lock *, void **) ;
};
#line 1052 
struct net;
#line 1058 
struct nlm_lockowner;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nfs_fs_i.h"
struct nfs_lock_info {
   u32 state ;
   struct nlm_lockowner *owner ;
   struct list_head list ;
};
#line 15 
struct nfs4_lock_state;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nfs_fs_i.h"
struct nfs4_lock_info {
   struct nfs4_lock_state *owner ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fasync_struct;
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct __anonstruct_afs_424 {
   struct list_head link ;
   int state ;
   unsigned int debug_id ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_fl_u_423 {
   struct nfs_lock_info nfs_fl ;
   struct nfs4_lock_info nfs4_fl ;
   struct __anonstruct_afs_424 afs ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock {
   struct file_lock *fl_blocker ;
   struct list_head fl_list ;
   struct hlist_node fl_link ;
   struct list_head fl_blocked_requests ;
   struct list_head fl_blocked_member ;
   fl_owner_t fl_owner ;
   unsigned int fl_flags ;
   unsigned char fl_type ;
   unsigned int fl_pid ;
   int fl_link_cpu ;
   wait_queue_head_t fl_wait ;
   struct file *fl_file ;
   loff_t fl_start ;
   loff_t fl_end ;
   struct fasync_struct *fl_fasync ;
   unsigned long fl_break_time ;
   unsigned long fl_downgrade_time ;
   struct file_lock_operations *fl_ops ;
   struct lock_manager_operations *fl_lmops ;
   union __anonunion_fl_u_423 fl_u ;
} __attribute__((__designated_init__));
#line 1117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock_context {
   spinlock_t flc_lock ;
   struct list_head flc_flock ;
   struct list_head flc_posix ;
   struct list_head flc_lease ;
};
#line 1331  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fasync_struct {
   rwlock_t fa_lock ;
   int magic ;
   int fa_fd ;
   struct fasync_struct *fa_next ;
   struct file *fa_file ;
   struct callback_head fa_rcu ;
};
#line 1418  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct sb_writers {
   int frozen ;
   wait_queue_head_t wait_unfrozen ;
   struct percpu_rw_semaphore rw_sem[3U] ;
};
#line 1424 
struct super_operations;
#line 1424 
struct xattr_handler;
#line 1424 
struct mtd_info;
#line 1424  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct super_block {
   struct list_head s_list ;
   dev_t s_dev ;
   unsigned char s_blocksize_bits ;
   unsigned long s_blocksize ;
   loff_t s_maxbytes ;
   struct file_system_type *s_type ;
   struct super_operations *s_op ;
   struct dquot_operations *dq_op ;
   struct quotactl_ops *s_qcop ;
   struct export_operations *s_export_op ;
   unsigned long s_flags ;
   unsigned long s_iflags ;
   unsigned long s_magic ;
   struct dentry *s_root ;
   struct rw_semaphore s_umount ;
   int s_count ;
   atomic_t s_active ;
   void *s_security ;
   struct xattr_handler **s_xattr ;
   struct fscrypt_operations *s_cop ;
   struct key *s_master_keys ;
   struct fsverity_operations *s_vop ;
   struct hlist_bl_head s_roots ;
   struct list_head s_mounts ;
   struct block_device *s_bdev ;
   struct backing_dev_info *s_bdi ;
   struct mtd_info *s_mtd ;
   struct hlist_node s_instances ;
   unsigned int s_quota_types ;
   struct quota_info s_dquot ;
   struct sb_writers s_writers ;
   void *s_fs_info ;
   u32 s_time_gran ;
   time64_t s_time_min ;
   time64_t s_time_max ;
   __u32 s_fsnotify_mask ;
   struct fsnotify_mark_connector *s_fsnotify_marks ;
   char s_id[32U] ;
   uuid_t s_uuid ;
   unsigned int s_max_links ;
   fmode_t s_mode ;
   struct mutex s_vfs_rename_mutex ;
   char *s_subtype ;
   struct dentry_operations *s_d_op ;
   int cleancache_poolid ;
   struct shrinker s_shrink ;
   atomic_long_t s_remove_count ;
   atomic_long_t s_fsnotify_inode_refs ;
   int s_readonly_remount ;
   struct workqueue_struct *s_dio_done_wq ;
   struct hlist_head s_pins ;
   struct user_namespace *s_user_ns ;
   struct list_lru s_dentry_lru ;
   struct list_lru s_inode_lru ;
   struct callback_head rcu ;
   struct work_struct destroy_work ;
   struct mutex s_sync_lock ;
   int s_stack_depth ;
   spinlock_t s_inode_list_lock ;
   struct list_head s_inodes ;
   spinlock_t s_inode_wblist_lock ;
   struct list_head s_inodes_wb ;
} __attribute__((__designated_init__));
#line 1746  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fiemap_extent_info {
   unsigned int fi_flags ;
   unsigned int fi_extents_mapped ;
   unsigned int fi_extents_max ;
   struct fiemap_extent *fi_extents_start ;
};
#line 1756 
struct dir_context;
#line 1767  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct dir_context {
   int (*actor)(struct dir_context *, char *, int , loff_t , u64 , unsigned int ) ;
   loff_t pos ;
};
#line 1821  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_operations {
   struct module *owner ;
   loff_t (*llseek)(struct file *, loff_t , int ) ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*read_iter)(struct kiocb *, struct iov_iter *) ;
   ssize_t (*write_iter)(struct kiocb *, struct iov_iter *) ;
   int (*iopoll)(struct kiocb *, bool ) ;
   int (*iterate)(struct file *, struct dir_context *) ;
   int (*iterate_shared)(struct file *, struct dir_context *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*unlocked_ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl)(struct file *, unsigned int , unsigned long ) ;
   int (*mmap)(struct file *, struct vm_area_struct *) ;
   unsigned long mmap_supported_flags ;
   int (*open)(struct inode *, struct file *) ;
   int (*flush)(struct file *, fl_owner_t ) ;
   int (*release)(struct inode *, struct file *) ;
   int (*fsync)(struct file *, loff_t , loff_t , int ) ;
   int (*fasync)(int , struct file *, int ) ;
   int (*lock)(struct file *, int , struct file_lock *) ;
   ssize_t (*sendpage)(struct file *, struct page *, int , size_t , loff_t *, int ) ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   int (*check_flags)(int ) ;
   int (*flock)(struct file *, int , struct file_lock *) ;
   ssize_t (*splice_write)(struct pipe_inode_info *, struct file *, loff_t *, size_t , unsigned int ) ;
   ssize_t (*splice_read)(struct file *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ) ;
   int (*setlease)(struct file *, long , struct file_lock **, void **) ;
   long (*fallocate)(struct file *, int , loff_t , loff_t ) ;
   void (*show_fdinfo)(struct seq_file *, struct file *) ;
   ssize_t (*copy_file_range)(struct file *, loff_t , struct file *, loff_t , size_t , unsigned int ) ;
   loff_t (*remap_file_range)(struct file *, loff_t , struct file *, loff_t , loff_t , unsigned int ) ;
   int (*fadvise)(struct file *, loff_t , loff_t , int ) ;
} __attribute__((__designated_init__));
#line 1863  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct inode_operations {
   struct dentry *(*lookup)(struct inode *, struct dentry *, unsigned int ) ;
   char *(*get_link)(struct dentry *, struct inode *, struct delayed_call *) ;
   int (*permission)(struct inode *, int ) ;
   struct posix_acl *(*get_acl)(struct inode *, int ) ;
   int (*readlink)(struct dentry *, char *, int ) ;
   int (*create)(struct inode *, struct dentry *, umode_t , bool ) ;
   int (*link)(struct dentry *, struct inode *, struct dentry *) ;
   int (*unlink)(struct inode *, struct dentry *) ;
   int (*symlink)(struct inode *, struct dentry *, char *) ;
   int (*mkdir)(struct inode *, struct dentry *, umode_t ) ;
   int (*rmdir)(struct inode *, struct dentry *) ;
   int (*mknod)(struct inode *, struct dentry *, umode_t , dev_t ) ;
   int (*rename)(struct inode *, struct dentry *, struct inode *, struct dentry *, unsigned int ) ;
   int (*setattr)(struct dentry *, struct iattr *) ;
   int (*getattr)(struct path *, struct kstat *, u32 , unsigned int ) ;
   ssize_t (*listxattr)(struct dentry *, char *, size_t ) ;
   int (*fiemap)(struct inode *, struct fiemap_extent_info *, u64 , u64 ) ;
   int (*update_time)(struct inode *, struct timespec64 *, int ) ;
   int (*atomic_open)(struct inode *, struct dentry *, struct file *, unsigned int , umode_t ) ;
   int (*tmpfile)(struct inode *, struct dentry *, umode_t ) ;
   int (*set_acl)(struct inode *, struct posix_acl *, int ) ;
} __attribute__((__aligned__(64)));
#line 1942  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct super_operations {
   struct inode *(*alloc_inode)(struct super_block *) ;
   void (*destroy_inode)(struct inode *) ;
   void (*free_inode)(struct inode *) ;
   void (*dirty_inode)(struct inode *, int ) ;
   int (*write_inode)(struct inode *, struct writeback_control *) ;
   int (*drop_inode)(struct inode *) ;
   void (*evict_inode)(struct inode *) ;
   void (*put_super)(struct super_block *) ;
   int (*sync_fs)(struct super_block *, int ) ;
   int (*freeze_super)(struct super_block *) ;
   int (*freeze_fs)(struct super_block *) ;
   int (*thaw_super)(struct super_block *) ;
   int (*unfreeze_fs)(struct super_block *) ;
   int (*statfs)(struct dentry *, struct kstatfs *) ;
   int (*remount_fs)(struct super_block *, int *, char *) ;
   void (*umount_begin)(struct super_block *) ;
   int (*show_options)(struct seq_file *, struct dentry *) ;
   int (*show_devname)(struct seq_file *, struct dentry *) ;
   int (*show_path)(struct seq_file *, struct dentry *) ;
   int (*show_stats)(struct seq_file *, struct dentry *) ;
   ssize_t (*quota_read)(struct super_block *, int , char *, size_t , loff_t ) ;
   ssize_t (*quota_write)(struct super_block *, int , char *, size_t , loff_t ) ;
   struct dquot **(*get_dquots)(struct inode *) ;
   int (*bdev_try_to_free_page)(struct super_block *, struct page *, gfp_t ) ;
   long (*nr_cached_objects)(struct super_block *, struct shrink_control *) ;
   long (*free_cached_objects)(struct super_block *, struct shrink_control *) ;
};
#line 2217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_system_type {
   char *name ;
   int fs_flags ;
   int (*init_fs_context)(struct fs_context *) ;
   struct fs_parameter_description *parameters ;
   struct dentry *(*mount)(struct file_system_type *, int , char *, void *) ;
   void (*kill_sb)(struct super_block *) ;
   struct module *owner ;
   struct file_system_type *next ;
   struct hlist_head fs_supers ;
   struct lock_class_key s_lock_key ;
   struct lock_class_key s_umount_key ;
   struct lock_class_key s_vfs_rename_key ;
   struct lock_class_key s_writers_key[3U] ;
   struct lock_class_key i_lock_key ;
   struct lock_class_key i_mutex_key ;
   struct lock_class_key i_mutex_dir_key ;
};
#line 1565  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
struct kvec;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bvec.h"
struct bio_vec {
   struct page *bv_page ;
   unsigned int bv_len ;
   unsigned int bv_offset ;
};
#line 686  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
struct scatterlist;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uio.h"
struct iovec {
   void *iov_base ;
   __kernel_size_t iov_len ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct kvec {
   void *iov_base ;
   size_t iov_len ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
union __anonunion_438 {
   struct iovec *iov ;
   struct kvec *kvec ;
   struct bio_vec *bvec ;
   struct pipe_inode_info *pipe ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct __anonstruct_440 {
   unsigned int head ;
   unsigned int start_head ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
union __anonunion_439 {
   unsigned long nr_segs ;
   struct __anonstruct_440 __anonCompField___anonunion_439_68 ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct iov_iter {
   unsigned int type ;
   size_t iov_offset ;
   size_t count ;
   union __anonunion_438 __anonCompField_iov_iter_67 ;
   union __anonunion_439 __anonCompField_iov_iter_69 ;
};
#line 285  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
typedef unsigned short __kernel_sa_family_t;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
typedef __kernel_sa_family_t sa_family_t;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
struct sockaddr {
   sa_family_t sa_family ;
   char sa_data[14U] ;
};
#line 422 
struct ns_common;
#line 125  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct sk_buff;
#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/checksum_64.h"
struct in6_addr;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/idr.h"
struct idr {
   struct xarray idr_rt ;
   unsigned int idr_base ;
   unsigned int idr_next ;
};
#line 323 
struct kernfs_open_node;
#line 324 
struct kernfs_iattrs;
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_root;
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_dir {
   unsigned long subdirs ;
   struct rb_root children ;
   struct kernfs_root *root ;
};
#line 96 
struct kernfs_node;
#line 96  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_symlink {
   struct kernfs_node *target_kn ;
};
#line 100 
struct kernfs_ops;
#line 100  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_attr {
   struct kernfs_ops *ops ;
   struct kernfs_open_node *open ;
   loff_t size ;
   struct kernfs_node *notify_next ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
union __anonunion_463 {
   struct kernfs_elem_dir dir ;
   struct kernfs_elem_symlink symlink ;
   struct kernfs_elem_attr attr ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_node {
   atomic_t count ;
   atomic_t active ;
   struct lockdep_map dep_map ;
   struct kernfs_node *parent ;
   char *name ;
   struct rb_node rb ;
   void *ns ;
   unsigned int hash ;
   union __anonunion_463 __anonCompField_kernfs_node_72 ;
   void *priv ;
   u64 id ;
   unsigned short flags ;
   umode_t mode ;
   struct kernfs_iattrs *iattr ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_syscall_ops {
   int (*show_options)(struct seq_file *, struct kernfs_root *) ;
   int (*mkdir)(struct kernfs_node *, char *, umode_t ) ;
   int (*rmdir)(struct kernfs_node *) ;
   int (*rename)(struct kernfs_node *, struct kernfs_node *, char *) ;
   int (*show_path)(struct seq_file *, struct kernfs_node *, struct kernfs_root *) ;
};
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_root {
   struct kernfs_node *kn ;
   unsigned int flags ;
   struct idr ino_idr ;
   u32 last_id_lowbits ;
   u32 id_highbits ;
   struct kernfs_syscall_ops *syscall_ops ;
   struct list_head supers ;
   wait_queue_head_t deactivate_waitq ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_open_file {
   struct kernfs_node *kn ;
   struct file *file ;
   struct seq_file *seq_file ;
   void *priv ;
   struct mutex mutex ;
   struct mutex prealloc_mutex ;
   int event ;
   struct list_head list ;
   char *prealloc_buf ;
   size_t atomic_write_len ;
   bool mmapped : 1 ;
   bool released : 1 ;
   struct vm_operations_struct *vm_ops ;
};
#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_ops {
   int (*open)(struct kernfs_open_file *) ;
   void (*release)(struct kernfs_open_file *) ;
   int (*seq_show)(struct seq_file *, void *) ;
   void *(*seq_start)(struct seq_file *, loff_t *) ;
   void *(*seq_next)(struct seq_file *, void *, loff_t *) ;
   void (*seq_stop)(struct seq_file *, void *) ;
   ssize_t (*read)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   size_t atomic_write_len ;
   bool prealloc ;
   ssize_t (*write)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   __poll_t (*poll)(struct kernfs_open_file *, struct poll_table_struct *) ;
   int (*mmap)(struct kernfs_open_file *, struct vm_area_struct *) ;
   struct lock_class_key lockdep_key ;
};
#line 595 
enum kobj_ns_type {
    KOBJ_NS_TYPE_NONE = 0,
    KOBJ_NS_TYPE_NET = 1,
    KOBJ_NS_TYPES = 2
};
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject_ns.h"
struct kobj_ns_type_operations {
   enum kobj_ns_type type ;
   bool (*current_may_mount)(void) ;
   void *(*grab_current_ns)(void) ;
   void *(*netlink_ns)(struct sock *) ;
   void *(*initial_ns)(void) ;
   void (*drop_ns)(void *) ;
};
#line 58 
struct bin_attribute;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct attribute {
   char *name ;
   umode_t mode ;
   bool ignore_lockdep : 1 ;
   struct lock_class_key *key ;
   struct lock_class_key skey ;
};
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct attribute_group {
   char *name ;
   umode_t (*is_visible)(struct kobject *, struct attribute *, int ) ;
   umode_t (*is_bin_visible)(struct kobject *, struct bin_attribute *, int ) ;
   struct attribute **attrs ;
   struct bin_attribute **bin_attrs ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct bin_attribute {
   struct attribute attr ;
   size_t size ;
   void *private ;
   ssize_t (*read)(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t , size_t ) ;
   ssize_t (*write)(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t , size_t ) ;
   int (*mmap)(struct file *, struct kobject *, struct bin_attribute *, struct vm_area_struct *) ;
};
#line 223  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct sysfs_ops {
   ssize_t (*show)(struct kobject *, struct attribute *, char *) ;
   ssize_t (*store)(struct kobject *, struct attribute *, char *, size_t ) ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kref.h"
struct kref {
   refcount_t refcount ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset;
#line 65 
struct kobj_type;
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobject {
   char *name ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct kernfs_node *sd ;
   struct kref kref ;
   struct delayed_work release ;
   unsigned int state_initialized : 1 ;
   unsigned int state_in_sysfs : 1 ;
   unsigned int state_add_uevent_sent : 1 ;
   unsigned int state_remove_uevent_sent : 1 ;
   unsigned int uevent_suppress : 1 ;
};
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobj_type {
   void (*release)(struct kobject *) ;
   struct sysfs_ops *sysfs_ops ;
   struct attribute **default_attrs ;
   struct attribute_group **default_groups ;
   struct kobj_ns_type_operations *(*child_ns_type)(struct kobject *) ;
   void *(*namespace)(struct kobject *) ;
   void (*get_ownership)(struct kobject *, kuid_t *, kgid_t *) ;
};
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobj_uevent_env {
   char *argv[3U] ;
   char *envp[32U] ;
   int envp_idx ;
   char buf[2048U] ;
   int buflen ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset_uevent_ops {
   int (*filter)(struct kset *, struct kobject *) ;
   char *(*name)(struct kset *, struct kobject *) ;
   int (*uevent)(struct kset *, struct kobject *, struct kobj_uevent_env *) ;
};
#line 193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops *uevent_ops ;
} __attribute__((__designated_init__));
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct pm_message {
   int event ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
typedef struct pm_message pm_message_t;
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_ops {
   int (*prepare)(struct device *) ;
   void (*complete)(struct device *) ;
   int (*suspend)(struct device *) ;
   int (*resume)(struct device *) ;
   int (*freeze)(struct device *) ;
   int (*thaw)(struct device *) ;
   int (*poweroff)(struct device *) ;
   int (*restore)(struct device *) ;
   int (*suspend_late)(struct device *) ;
   int (*resume_early)(struct device *) ;
   int (*freeze_late)(struct device *) ;
   int (*thaw_early)(struct device *) ;
   int (*poweroff_late)(struct device *) ;
   int (*restore_early)(struct device *) ;
   int (*suspend_noirq)(struct device *) ;
   int (*resume_noirq)(struct device *) ;
   int (*freeze_noirq)(struct device *) ;
   int (*thaw_noirq)(struct device *) ;
   int (*poweroff_noirq)(struct device *) ;
   int (*restore_noirq)(struct device *) ;
   int (*runtime_suspend)(struct device *) ;
   int (*runtime_resume)(struct device *) ;
   int (*runtime_idle)(struct device *) ;
};
#line 303 
enum rpm_status {
    RPM_ACTIVE = 0,
    RPM_RESUMING = 1,
    RPM_SUSPENDED = 2,
    RPM_SUSPENDING = 3
};
#line 310 
enum rpm_request {
    RPM_REQ_NONE = 0,
    RPM_REQ_IDLE = 1,
    RPM_REQ_SUSPEND = 2,
    RPM_REQ_AUTOSUSPEND = 3,
    RPM_REQ_RESUME = 4
};
#line 318 
struct wakeup_source;
#line 319 
struct wake_irq;
#line 320 
struct pm_domain_data;
#line 530  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct pm_subsys_data {
   spinlock_t lock ;
   unsigned int refcount ;
   struct list_head clock_list ;
   struct pm_domain_data *domain_data ;
};
#line 573 
struct dev_pm_qos;
#line 573  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned int can_wakeup : 1 ;
   unsigned int async_suspend : 1 ;
   bool in_dpm_list : 1 ;
   bool is_prepared : 1 ;
   bool is_suspended : 1 ;
   bool is_noirq_suspended : 1 ;
   bool is_late_suspended : 1 ;
   bool no_pm : 1 ;
   bool early_init : 1 ;
   bool direct_complete : 1 ;
   u32 driver_flags ;
   spinlock_t lock ;
   struct list_head entry ;
   struct completion completion ;
   struct wakeup_source *wakeup ;
   bool wakeup_path : 1 ;
   bool syscore : 1 ;
   bool no_pm_callbacks : 1 ;
   unsigned int must_resume : 1 ;
   unsigned int may_skip_resume : 1 ;
   struct hrtimer suspend_timer ;
   unsigned long timer_expires ;
   struct work_struct work ;
   wait_queue_head_t wait_queue ;
   struct wake_irq *wakeirq ;
   atomic_t usage_count ;
   atomic_t child_count ;
   unsigned int disable_depth : 3 ;
   unsigned int idle_notification : 1 ;
   unsigned int request_pending : 1 ;
   unsigned int deferred_resume : 1 ;
   unsigned int runtime_auto : 1 ;
   bool ignore_children : 1 ;
   unsigned int no_callbacks : 1 ;
   unsigned int irq_safe : 1 ;
   unsigned int use_autosuspend : 1 ;
   unsigned int timer_autosuspends : 1 ;
   unsigned int memalloc_noio : 1 ;
   unsigned int links_count ;
   enum rpm_request request ;
   enum rpm_status runtime_status ;
   int runtime_error ;
   int autosuspend_delay ;
   u64 last_busy ;
   u64 active_time ;
   u64 suspended_time ;
   u64 accounting_timestamp ;
   struct pm_subsys_data *subsys_data ;
   void (*set_latency_tolerance)(struct device *, s32 ) ;
   struct dev_pm_qos *qos ;
};
#line 650  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_domain {
   struct dev_pm_ops ops ;
   int (*start)(struct device *) ;
   void (*detach)(struct device *, bool ) ;
   int (*activate)(struct device *) ;
   void (*sync)(struct device *) ;
   void (*dismiss)(struct device *) ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ratelimit.h"
struct ratelimit_state {
   raw_spinlock_t lock ;
   int interval ;
   int burst ;
   int printed ;
   int missed ;
   unsigned long begin ;
   unsigned long flags ;
};
#line 5  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/device.h"
struct dev_archdata {
   void *iommu ;
};
#line 12 
struct dma_map_ops;
#line 23 
struct device_driver;
#line 24 
struct driver_private;
#line 25 
struct class;
#line 26 
struct subsys_private;
#line 27 
struct bus_type;
#line 28 
struct iommu_ops;
#line 29 
struct iommu_group;
#line 30 
struct iommu_fwspec;
#line 31 
struct dev_pin_info;
#line 32 
struct iommu_param;
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct bus_type {
   char *name ;
   char *dev_name ;
   struct device *dev_root ;
   struct attribute_group **bus_groups ;
   struct attribute_group **dev_groups ;
   struct attribute_group **drv_groups ;
   int (*match)(struct device *, struct device_driver *) ;
   int (*uevent)(struct device *, struct kobj_uevent_env *) ;
   int (*probe)(struct device *) ;
   void (*sync_state)(struct device *) ;
   int (*remove)(struct device *) ;
   void (*shutdown)(struct device *) ;
   int (*online)(struct device *) ;
   int (*offline)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   int (*num_vf)(struct device *) ;
   int (*dma_configure)(struct device *) ;
   struct dev_pm_ops *pm ;
   struct iommu_ops *iommu_ops ;
   struct subsys_private *p ;
   struct lock_class_key lock_key ;
   bool need_parent_lock ;
};
#line 164 
struct device_type;
#line 309 
enum probe_type {
    PROBE_DEFAULT_STRATEGY = 0,
    PROBE_PREFER_ASYNCHRONOUS = 1,
    PROBE_FORCE_SYNCHRONOUS = 2
};
#line 383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_driver {
   char *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char *mod_name ;
   bool suppress_bind_attrs ;
   enum probe_type probe_type ;
   struct of_device_id *of_match_table ;
   struct acpi_device_id *acpi_match_table ;
   int (*probe)(struct device *) ;
   void (*sync_state)(struct device *) ;
   int (*remove)(struct device *) ;
   void (*shutdown)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   struct attribute_group **groups ;
   struct attribute_group **dev_groups ;
   struct dev_pm_ops *pm ;
   void (*coredump)(struct device *) ;
   struct driver_private *p ;
};
#line 589  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct class {
   char *name ;
   struct module *owner ;
   struct attribute_group **class_groups ;
   struct attribute_group **dev_groups ;
   struct kobject *dev_kobj ;
   int (*dev_uevent)(struct device *, struct kobj_uevent_env *) ;
   char *(*devnode)(struct device *, umode_t *) ;
   void (*class_release)(struct class *) ;
   void (*dev_release)(struct device *) ;
   int (*shutdown_pre)(struct device *) ;
   struct kobj_ns_type_operations *ns_type ;
   void *(*namespace)(struct device *) ;
   void (*get_ownership)(struct device *, kuid_t *, kgid_t *) ;
   struct dev_pm_ops *pm ;
   struct subsys_private *p ;
};
#line 809  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_type {
   char *name ;
   struct attribute_group **groups ;
   int (*uevent)(struct device *, struct kobj_uevent_env *) ;
   char *(*devnode)(struct device *, umode_t *, kuid_t *, kgid_t *) ;
   void (*release)(struct device *) ;
   struct dev_pm_ops *pm ;
};
#line 1008  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};
#line 1139 
enum dl_dev_state {
    DL_DEV_NO_DRIVER = 0,
    DL_DEV_PROBING = 1,
    DL_DEV_DRIVER_BOUND = 2,
    DL_DEV_UNBINDING = 3
};
#line 1164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct dev_links_info {
   struct list_head suppliers ;
   struct list_head consumers ;
   struct list_head needs_suppliers ;
   struct list_head defer_sync ;
   bool need_for_probe ;
   enum dl_dev_state status ;
};
#line 1259 
struct dma_coherent_mem;
#line 1259 
struct cma;
#line 1259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device {
   struct kobject kobj ;
   struct device *parent ;
   struct device_private *p ;
   char *init_name ;
   struct device_type *type ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *platform_data ;
   void *driver_data ;
   struct mutex lockdep_mutex ;
   struct mutex mutex ;
   struct dev_links_info links ;
   struct dev_pm_info power ;
   struct dev_pm_domain *pm_domain ;
   struct irq_domain *msi_domain ;
   struct dev_pin_info *pins ;
   struct list_head msi_list ;
   struct dma_map_ops *dma_ops ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   u64 bus_dma_limit ;
   unsigned long dma_pfn_offset ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct cma *cma_area ;
   struct dev_archdata archdata ;
   struct device_node *of_node ;
   struct fwnode_handle *fwnode ;
   int numa_node ;
   dev_t devt ;
   u32 id ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct class *class ;
   struct attribute_group **groups ;
   void (*release)(struct device *) ;
   struct iommu_group *iommu_group ;
   struct iommu_fwspec *iommu_fwspec ;
   struct iommu_param *iommu_param ;
   bool offline_disabled : 1 ;
   bool offline : 1 ;
   bool of_node_reused : 1 ;
   bool state_synced : 1 ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_wakeup.h"
struct wakeup_source {
   char *name ;
   int id ;
   struct list_head entry ;
   spinlock_t lock ;
   struct wake_irq *wakeirq ;
   struct timer_list timer ;
   unsigned long timer_expires ;
   ktime_t total_time ;
   ktime_t max_time ;
   ktime_t last_time ;
   ktime_t start_prevent_time ;
   ktime_t prevent_sleep_time ;
   unsigned long event_count ;
   unsigned long active_count ;
   unsigned long relax_count ;
   unsigned long expire_count ;
   unsigned long wakeup_count ;
   struct device *dev ;
   bool active : 1 ;
   bool autosleep_enabled : 1 ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-debug.h"
enum dma_data_direction {
    DMA_BIDIRECTIONAL = 0,
    DMA_TO_DEVICE = 1,
    DMA_FROM_DEVICE = 2,
    DMA_NONE = 3
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/scatterlist.h"
struct scatterlist {
   unsigned long page_link ;
   unsigned int offset ;
   unsigned int length ;
   dma_addr_t dma_address ;
   unsigned int dma_length ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/scatterlist.h"
struct sg_table {
   struct scatterlist *sgl ;
   unsigned int nents ;
   unsigned int orig_nents ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
struct dma_map_ops {
   void *(*alloc)(struct device *, size_t , dma_addr_t *, gfp_t , unsigned long ) ;
   void (*free)(struct device *, size_t , void *, dma_addr_t , unsigned long ) ;
   int (*mmap)(struct device *, struct vm_area_struct *, void *, dma_addr_t , size_t , unsigned long ) ;
   int (*get_sgtable)(struct device *, struct sg_table *, void *, dma_addr_t , size_t , unsigned long ) ;
   dma_addr_t (*map_page)(struct device *, struct page *, unsigned long , size_t , enum dma_data_direction , unsigned long ) ;
   void (*unmap_page)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   int (*map_sg)(struct device *, struct scatterlist *, int , enum dma_data_direction , unsigned long ) ;
   void (*unmap_sg)(struct device *, struct scatterlist *, int , enum dma_data_direction , unsigned long ) ;
   dma_addr_t (*map_resource)(struct device *, phys_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   void (*unmap_resource)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   void (*sync_single_for_cpu)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) ;
   void (*sync_single_for_device)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) ;
   void (*sync_sg_for_cpu)(struct device *, struct scatterlist *, int , enum dma_data_direction ) ;
   void (*sync_sg_for_device)(struct device *, struct scatterlist *, int , enum dma_data_direction ) ;
   void (*cache_sync)(struct device *, void *, size_t , enum dma_data_direction ) ;
   int (*dma_supported)(struct device *, u64 ) ;
   u64 (*get_required_mask)(struct device *) ;
   size_t (*max_mapping_size)(struct device *) ;
   unsigned long (*get_merge_boundary)(struct device *) ;
};
#line 803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
typedef u64 netdev_features_t;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/in6.h"
union __anonunion_in6_u_466 {
   __u8 u6_addr8[16U] ;
   __be16 u6_addr16[8U] ;
   __be32 u6_addr32[4U] ;
};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/in6.h"
struct in6_addr {
   union __anonunion_in6_u_466 in6_u ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/in6.h"
struct __anonstruct_siphash_key_t_467 {
   u64 key[2U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/in6.h"
typedef struct __anonstruct_siphash_key_t_467 siphash_key_t;
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_ether.h"
struct ethhdr {
   unsigned char h_dest[6U] ;
   unsigned char h_source[6U] ;
   __be16 h_proto ;
} __attribute__((__packed__));
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buf_operations;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buffer {
   struct page *page ;
   unsigned int offset ;
   unsigned int len ;
   struct pipe_buf_operations *ops ;
   unsigned int flags ;
   unsigned long private ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_inode_info {
   struct mutex mutex ;
   wait_queue_head_t wait ;
   unsigned int head ;
   unsigned int tail ;
   unsigned int max_usage ;
   unsigned int ring_size ;
   unsigned int readers ;
   unsigned int writers ;
   unsigned int files ;
   unsigned int r_counter ;
   unsigned int w_counter ;
   struct page *tmp_page ;
   struct fasync_struct *fasync_readers ;
   struct fasync_struct *fasync_writers ;
   struct pipe_buffer *bufs ;
   struct user_struct *user ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buf_operations {
   int (*confirm)(struct pipe_inode_info *, struct pipe_buffer *) ;
   void (*release)(struct pipe_inode_info *, struct pipe_buffer *) ;
   int (*steal)(struct pipe_inode_info *, struct pipe_buffer *) ;
   bool (*get)(struct pipe_inode_info *, struct pipe_buffer *) ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netfilter/nf_conntrack_common.h"
struct ip_conntrack_stat {
   unsigned int found ;
   unsigned int invalid ;
   unsigned int ignore ;
   unsigned int insert ;
   unsigned int insert_failed ;
   unsigned int drop ;
   unsigned int early_drop ;
   unsigned int error ;
   unsigned int expect_new ;
   unsigned int expect_create ;
   unsigned int expect_delete ;
   unsigned int search_restart ;
};
#line 43 
union bpf_attr;
#line 44 
struct skb_ext;
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct sk_buff_head {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   __u32 qlen ;
   spinlock_t lock ;
};
#line 562  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
typedef unsigned int sk_buff_data_t;
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_489 {
   struct net_device *dev ;
   unsigned long dev_scratch ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_488 {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   union __anonunion_489 __anonCompField___anonstruct_488_85 ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_487 {
   struct __anonstruct_488 __anonCompField___anonunion_487_86 ;
   struct rb_node rbnode ;
   struct list_head list ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_490 {
   struct sock *sk ;
   int ip_defrag_offset ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_491 {
   ktime_t tstamp ;
   u64 skb_mstamp_ns ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_493 {
   unsigned long _skb_refdst ;
   void (*destructor)(struct sk_buff *) ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_492 {
   struct __anonstruct_493 __anonCompField___anonunion_492_90 ;
   struct list_head tcp_tsorted_anchor ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_495 {
   __u16 csum_start ;
   __u16 csum_offset ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_494 {
   __wsum csum ;
   struct __anonstruct_495 __anonCompField___anonunion_494_92 ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_496 {
   unsigned int napi_id ;
   unsigned int sender_cpu ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_497 {
   __u32 mark ;
   __u32 reserved_tailroom ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_498 {
   __be16 inner_protocol ;
   __u8 inner_ipproto ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct sk_buff {
   union __anonunion_487 __anonCompField_sk_buff_87 ;
   union __anonunion_490 __anonCompField_sk_buff_88 ;
   union __anonunion_491 __anonCompField_sk_buff_89 ;
   char cb[48U] ;
   union __anonunion_492 __anonCompField_sk_buff_91 ;
   unsigned long _nfct ;
   unsigned int len ;
   unsigned int data_len ;
   __u16 mac_len ;
   __u16 hdr_len ;
   __u16 queue_mapping ;
   __u8 __cloned_offset[0U] ;
   __u8 cloned : 1 ;
   __u8 nohdr : 1 ;
   __u8 fclone : 2 ;
   __u8 peeked : 1 ;
   __u8 head_frag : 1 ;
   __u8 pfmemalloc : 1 ;
   __u8 active_extensions ;
   __u32 headers_start[0U] ;
   __u8 __pkt_type_offset[0U] ;
   __u8 pkt_type : 3 ;
   __u8 ignore_df : 1 ;
   __u8 nf_trace : 1 ;
   __u8 ip_summed : 2 ;
   __u8 ooo_okay : 1 ;
   __u8 l4_hash : 1 ;
   __u8 sw_hash : 1 ;
   __u8 wifi_acked_valid : 1 ;
   __u8 wifi_acked : 1 ;
   __u8 no_fcs : 1 ;
   __u8 encapsulation : 1 ;
   __u8 encap_hdr_csum : 1 ;
   __u8 csum_valid : 1 ;
   __u8 __pkt_vlan_present_offset[0U] ;
   __u8 vlan_present : 1 ;
   __u8 csum_complete_sw : 1 ;
   __u8 csum_level : 2 ;
   __u8 csum_not_inet : 1 ;
   __u8 dst_pending_confirm : 1 ;
   __u8 ndisc_nodetype : 2 ;
   __u8 ipvs_property : 1 ;
   __u8 inner_protocol_type : 1 ;
   __u8 remcsum_offload : 1 ;
   __u8 offload_fwd_mark : 1 ;
   __u8 offload_l3_fwd_mark : 1 ;
   __u8 tc_skip_classify : 1 ;
   __u8 tc_at_ingress : 1 ;
   __u8 tc_redirected : 1 ;
   __u8 tc_from_ingress : 1 ;
   __u8 decrypted : 1 ;
   __u16 tc_index ;
   union __anonunion_494 __anonCompField_sk_buff_93 ;
   __u32 priority ;
   int skb_iif ;
   __u32 hash ;
   __be16 vlan_proto ;
   __u16 vlan_tci ;
   union __anonunion_496 __anonCompField_sk_buff_94 ;
   __u32 secmark ;
   union __anonunion_497 __anonCompField_sk_buff_95 ;
   union __anonunion_498 __anonCompField_sk_buff_96 ;
   __u16 inner_transport_header ;
   __u16 inner_network_header ;
   __u16 inner_mac_header ;
   __be16 protocol ;
   __u16 transport_header ;
   __u16 network_header ;
   __u16 mac_header ;
   __u32 headers_end[0U] ;
   sk_buff_data_t tail ;
   sk_buff_data_t end ;
   unsigned char *head ;
   unsigned char *data ;
   unsigned int truesize ;
   refcount_t users ;
   struct skb_ext *extensions ;
};
#line 4108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct skb_ext {
   refcount_t refcnt ;
   u8 offset[3U] ;
   u8 chunks ;
   char data[0U] ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
struct dql {
   unsigned int num_queued ;
   unsigned int adj_limit ;
   unsigned int last_obj_cnt ;
   unsigned int limit ;
   unsigned int num_completed ;
   unsigned int prev_ovlimit ;
   unsigned int prev_num_queued ;
   unsigned int prev_last_obj_cnt ;
   unsigned int lowest_slack ;
   unsigned long slack_start_time ;
   unsigned int max_limit ;
   unsigned int min_limit ;
   unsigned int slack_hold_time ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
struct __anonstruct_sync_serial_settings_528 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
typedef struct __anonstruct_sync_serial_settings_528 sync_serial_settings;
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_te1_settings_529 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
   unsigned int slot_map ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_te1_settings_529 te1_settings;
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_raw_hdlc_proto_530 {
   unsigned short encoding ;
   unsigned short parity ;
};
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_raw_hdlc_proto_530 raw_hdlc_proto;
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_531 {
   unsigned int t391 ;
   unsigned int t392 ;
   unsigned int n391 ;
   unsigned int n392 ;
   unsigned int n393 ;
   unsigned short lmi ;
   unsigned short dce ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_531 fr_proto;
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_532 {
   unsigned int dlci ;
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_532 fr_proto_pvc;
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_info_533 {
   unsigned int dlci ;
   char master[16U] ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_info_533 fr_proto_pvc_info;
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_cisco_proto_534 {
   unsigned int interval ;
   unsigned int timeout ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_cisco_proto_534 cisco_proto;
#line 195  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct ifmap {
   unsigned long mem_start ;
   unsigned long mem_end ;
   unsigned short base_addr ;
   unsigned char irq ;
   unsigned char dma ;
   unsigned char port ;
};
#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifs_ifsu_535 {
   raw_hdlc_proto *raw_hdlc ;
   cisco_proto *cisco ;
   fr_proto *fr ;
   fr_proto_pvc *fr_pvc ;
   fr_proto_pvc_info *fr_pvc_info ;
   sync_serial_settings *sync ;
   te1_settings *te1 ;
};
#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct if_settings {
   unsigned int type ;
   unsigned int size ;
   union __anonunion_ifs_ifsu_535 ifs_ifsu ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifr_ifrn_536 {
   char ifrn_name[16U] ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifr_ifru_537 {
   struct sockaddr ifru_addr ;
   struct sockaddr ifru_dstaddr ;
   struct sockaddr ifru_broadaddr ;
   struct sockaddr ifru_netmask ;
   struct sockaddr ifru_hwaddr ;
   short ifru_flags ;
   int ifru_ivalue ;
   int ifru_mtu ;
   struct ifmap ifru_map ;
   char ifru_slave[16U] ;
   char ifru_newname[16U] ;
   void *ifru_data ;
   struct if_settings ifru_settings ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct ifreq {
   union __anonunion_ifr_ifrn_536 ifr_ifrn ;
   union __anonunion_ifr_ifru_537 ifr_ifru ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/compat.h"
typedef s32 compat_long_t;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/compat.h"
typedef u32 compat_uptr_t;
#line 367  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compat.h"
struct compat_robust_list {
   compat_uptr_t next ;
};
#line 371  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compat.h"
struct compat_robust_list_head {
   struct compat_robust_list list ;
   compat_long_t futex_offset ;
   compat_uptr_t list_op_pending ;
};
#line 177  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_drvinfo {
   __u32 cmd ;
   char driver[32U] ;
   char version[32U] ;
   char fw_version[32U] ;
   char bus_info[32U] ;
   char erom_version[32U] ;
   char reserved2[12U] ;
   __u32 n_priv_flags ;
   __u32 n_stats ;
   __u32 testinfo_len ;
   __u32 eedump_len ;
   __u32 regdump_len ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_wolinfo {
   __u32 cmd ;
   __u32 supported ;
   __u32 wolopts ;
   __u8 sopass[6U] ;
};
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tunable {
   __u32 cmd ;
   __u32 id ;
   __u32 type_id ;
   __u32 len ;
   void *data[0U] ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_regs {
   __u32 cmd ;
   __u32 version ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_eeprom {
   __u32 cmd ;
   __u32 magic ;
   __u32 offset ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_eee {
   __u32 cmd ;
   __u32 supported ;
   __u32 advertised ;
   __u32 lp_advertised ;
   __u32 eee_active ;
   __u32 eee_enabled ;
   __u32 tx_lpi_enabled ;
   __u32 tx_lpi_timer ;
   __u32 reserved[2U] ;
};
#line 382  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_modinfo {
   __u32 cmd ;
   __u32 type ;
   __u32 eeprom_len ;
   __u32 reserved[8U] ;
};
#line 462  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_coalesce {
   __u32 cmd ;
   __u32 rx_coalesce_usecs ;
   __u32 rx_max_coalesced_frames ;
   __u32 rx_coalesce_usecs_irq ;
   __u32 rx_max_coalesced_frames_irq ;
   __u32 tx_coalesce_usecs ;
   __u32 tx_max_coalesced_frames ;
   __u32 tx_coalesce_usecs_irq ;
   __u32 tx_max_coalesced_frames_irq ;
   __u32 stats_block_coalesce_usecs ;
   __u32 use_adaptive_rx_coalesce ;
   __u32 use_adaptive_tx_coalesce ;
   __u32 pkt_rate_low ;
   __u32 rx_coalesce_usecs_low ;
   __u32 rx_max_coalesced_frames_low ;
   __u32 tx_coalesce_usecs_low ;
   __u32 tx_max_coalesced_frames_low ;
   __u32 pkt_rate_high ;
   __u32 rx_coalesce_usecs_high ;
   __u32 rx_max_coalesced_frames_high ;
   __u32 tx_coalesce_usecs_high ;
   __u32 tx_max_coalesced_frames_high ;
   __u32 rate_sample_interval ;
};
#line 513  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ringparam {
   __u32 cmd ;
   __u32 rx_max_pending ;
   __u32 rx_mini_max_pending ;
   __u32 rx_jumbo_max_pending ;
   __u32 tx_max_pending ;
   __u32 rx_pending ;
   __u32 rx_mini_pending ;
   __u32 rx_jumbo_pending ;
   __u32 tx_pending ;
};
#line 541  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_channels {
   __u32 cmd ;
   __u32 max_rx ;
   __u32 max_tx ;
   __u32 max_other ;
   __u32 max_combined ;
   __u32 rx_count ;
   __u32 tx_count ;
   __u32 other_count ;
   __u32 combined_count ;
};
#line 575  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_pauseparam {
   __u32 cmd ;
   __u32 autoneg ;
   __u32 rx_pause ;
   __u32 tx_pause ;
};
#line 683  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_test {
   __u32 cmd ;
   __u32 flags ;
   __u32 reserved ;
   __u32 len ;
   __u64 data[0U] ;
};
#line 702  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_stats {
   __u32 cmd ;
   __u32 n_stats ;
   __u64 data[0U] ;
};
#line 758  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tcpip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tos ;
};
#line 775  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ah_espip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 spi ;
   __u8 tos ;
};
#line 793  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_usrip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 l4_4_bytes ;
   __u8 tos ;
   __u8 ip_ver ;
   __u8 proto ;
};
#line 812  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tcpip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tclass ;
};
#line 829  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ah_espip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be32 spi ;
   __u8 tclass ;
};
#line 844  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_usrip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be32 l4_4_bytes ;
   __u8 tclass ;
   __u8 l4_proto ;
};
#line 852  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
union ethtool_flow_union {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   struct ethtool_tcpip6_spec tcp_ip6_spec ;
   struct ethtool_tcpip6_spec udp_ip6_spec ;
   struct ethtool_tcpip6_spec sctp_ip6_spec ;
   struct ethtool_ah_espip6_spec ah_ip6_spec ;
   struct ethtool_ah_espip6_spec esp_ip6_spec ;
   struct ethtool_usrip6_spec usr_ip6_spec ;
   struct ethhdr ether_spec ;
   __u8 hdata[52U] ;
};
#line 880  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_flow_ext {
   __u8 padding[2U] ;
   unsigned char h_dest[6U] ;
   __be16 vlan_etype ;
   __be16 vlan_tci ;
   __be32 data[2U] ;
};
#line 905  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_rx_flow_spec {
   __u32 flow_type ;
   union ethtool_flow_union h_u ;
   struct ethtool_flow_ext h_ext ;
   union ethtool_flow_union m_u ;
   struct ethtool_flow_ext m_ext ;
   __u64 ring_cookie ;
   __u32 location ;
};
#line 1001  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
union __anonunion_556 {
   __u32 rule_cnt ;
   __u32 rss_context ;
};
#line 1001  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_rxnfc {
   __u32 cmd ;
   __u32 flow_type ;
   __u64 data ;
   struct ethtool_rx_flow_spec fs ;
   union __anonunion_556 __anonCompField_ethtool_rxnfc_99 ;
   __u32 rule_locs[0U] ;
};
#line 1130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_flash {
   __u32 cmd ;
   __u32 region ;
   char data[128U] ;
};
#line 1150  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_dump {
   __u32 cmd ;
   __u32 version ;
   __u32 flag ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 1230  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ts_info {
   __u32 cmd ;
   __u32 so_timestamping ;
   __s32 phc_index ;
   __u32 tx_types ;
   __u32 tx_reserved[3U] ;
   __u32 rx_filters ;
   __u32 rx_reserved[3U] ;
};
#line 1302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_fecparam {
   __u32 cmd ;
   __u32 active_fec ;
   __u32 fec ;
   __u32 reserved ;
};
#line 1876  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_link_settings {
   __u32 cmd ;
   __u32 speed ;
   __u8 duplex ;
   __u8 port ;
   __u8 phy_address ;
   __u8 autoneg ;
   __u8 mdio_support ;
   __u8 eth_tp_mdix ;
   __u8 eth_tp_mdix_ctrl ;
   __s8 link_mode_masks_nwords ;
   __u8 transceiver ;
   __u8 reserved1[3U] ;
   __u32 reserved[7U] ;
   __u32 link_mode_masks[0U] ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
enum ethtool_phys_id_state {
    ETHTOOL_ID_INACTIVE = 0,
    ETHTOOL_ID_ACTIVE = 1,
    ETHTOOL_ID_ON = 2,
    ETHTOOL_ID_OFF = 3
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct __anonstruct_link_modes_559 {
   unsigned long supported[2U] ;
   unsigned long advertising[2U] ;
   unsigned long lp_advertising[2U] ;
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct ethtool_link_ksettings {
   struct ethtool_link_settings base ;
   struct __anonstruct_link_modes_559 link_modes ;
};
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct ethtool_ops {
   void (*get_drvinfo)(struct net_device *, struct ethtool_drvinfo *) ;
   int (*get_regs_len)(struct net_device *) ;
   void (*get_regs)(struct net_device *, struct ethtool_regs *, void *) ;
   void (*get_wol)(struct net_device *, struct ethtool_wolinfo *) ;
   int (*set_wol)(struct net_device *, struct ethtool_wolinfo *) ;
   u32 (*get_msglevel)(struct net_device *) ;
   void (*set_msglevel)(struct net_device *, u32 ) ;
   int (*nway_reset)(struct net_device *) ;
   u32 (*get_link)(struct net_device *) ;
   int (*get_eeprom_len)(struct net_device *) ;
   int (*get_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*set_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_coalesce)(struct net_device *, struct ethtool_coalesce *) ;
   int (*set_coalesce)(struct net_device *, struct ethtool_coalesce *) ;
   void (*get_ringparam)(struct net_device *, struct ethtool_ringparam *) ;
   int (*set_ringparam)(struct net_device *, struct ethtool_ringparam *) ;
   void (*get_pauseparam)(struct net_device *, struct ethtool_pauseparam *) ;
   int (*set_pauseparam)(struct net_device *, struct ethtool_pauseparam *) ;
   void (*self_test)(struct net_device *, struct ethtool_test *, u64 *) ;
   void (*get_strings)(struct net_device *, u32 , u8 *) ;
   int (*set_phys_id)(struct net_device *, enum ethtool_phys_id_state ) ;
   void (*get_ethtool_stats)(struct net_device *, struct ethtool_stats *, u64 *) ;
   int (*begin)(struct net_device *) ;
   void (*complete)(struct net_device *) ;
   u32 (*get_priv_flags)(struct net_device *) ;
   int (*set_priv_flags)(struct net_device *, u32 ) ;
   int (*get_sset_count)(struct net_device *, int ) ;
   int (*get_rxnfc)(struct net_device *, struct ethtool_rxnfc *, u32 *) ;
   int (*set_rxnfc)(struct net_device *, struct ethtool_rxnfc *) ;
   int (*flash_device)(struct net_device *, struct ethtool_flash *) ;
   int (*reset)(struct net_device *, u32 *) ;
   u32 (*get_rxfh_key_size)(struct net_device *) ;
   u32 (*get_rxfh_indir_size)(struct net_device *) ;
   int (*get_rxfh)(struct net_device *, u32 *, u8 *, u8 *) ;
   int (*set_rxfh)(struct net_device *, u32 *, u8 *, u8 ) ;
   int (*get_rxfh_context)(struct net_device *, u32 *, u8 *, u8 *, u32 ) ;
   int (*set_rxfh_context)(struct net_device *, u32 *, u8 *, u8 , u32 *, bool ) ;
   void (*get_channels)(struct net_device *, struct ethtool_channels *) ;
   int (*set_channels)(struct net_device *, struct ethtool_channels *) ;
   int (*get_dump_flag)(struct net_device *, struct ethtool_dump *) ;
   int (*get_dump_data)(struct net_device *, struct ethtool_dump *, void *) ;
   int (*set_dump)(struct net_device *, struct ethtool_dump *) ;
   int (*get_ts_info)(struct net_device *, struct ethtool_ts_info *) ;
   int (*get_module_info)(struct net_device *, struct ethtool_modinfo *) ;
   int (*get_module_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_eee)(struct net_device *, struct ethtool_eee *) ;
   int (*set_eee)(struct net_device *, struct ethtool_eee *) ;
   int (*get_tunable)(struct net_device *, struct ethtool_tunable *, void *) ;
   int (*set_tunable)(struct net_device *, struct ethtool_tunable *, void *) ;
   int (*get_per_queue_coalesce)(struct net_device *, u32 , struct ethtool_coalesce *) ;
   int (*set_per_queue_coalesce)(struct net_device *, u32 , struct ethtool_coalesce *) ;
   int (*get_link_ksettings)(struct net_device *, struct ethtool_link_ksettings *) ;
   int (*set_link_ksettings)(struct net_device *, struct ethtool_link_ksettings *) ;
   int (*get_fecparam)(struct net_device *, struct ethtool_fecparam *) ;
   int (*set_fecparam)(struct net_device *, struct ethtool_fecparam *) ;
   void (*get_ethtool_phy_stats)(struct net_device *, struct ethtool_stats *, u64 *) ;
};
#line 822  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/sysctl.h"
struct ctl_table_root;
#line 823 
struct ctl_table_header;
#line 824 
struct ctl_dir;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
typedef int proc_handler(struct ctl_table *, int , void *, size_t *, loff_t *);
#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_poll {
   atomic_t event ;
   wait_queue_head_t wait ;
};
#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table {
   char *procname ;
   void *data ;
   int maxlen ;
   umode_t mode ;
   struct ctl_table *child ;
   proc_handler *proc_handler ;
   struct ctl_table_poll *poll ;
   void *extra1 ;
   void *extra2 ;
} __attribute__((__designated_init__));
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_node {
   struct rb_node node ;
   struct ctl_table_header *header ;
};
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct __anonstruct_561 {
   struct ctl_table *ctl_table ;
   int used ;
   int count ;
   int nreg ;
};
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
union __anonunion_560 {
   struct __anonstruct_561 __anonCompField___anonunion_560_100 ;
   struct callback_head rcu ;
};
#line 142 
struct ctl_table_set;
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_header {
   union __anonunion_560 __anonCompField_ctl_table_header_101 ;
   struct completion *unregistering ;
   struct ctl_table *ctl_table_arg ;
   struct ctl_table_root *root ;
   struct ctl_table_set *set ;
   struct ctl_dir *parent ;
   struct ctl_node *node ;
   struct hlist_head inodes ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_dir {
   struct ctl_table_header header ;
   struct rb_root root ;
};
#line 167  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_set {
   int (*is_seen)(struct ctl_table_set *) ;
   struct ctl_dir dir ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_root {
   struct ctl_table_set default_set ;
   struct ctl_table_set *(*lookup)(struct ctl_table_root *) ;
   void (*set_ownership)(struct ctl_table_header *, struct ctl_table *, kuid_t *, kgid_t *) ;
   int (*permissions)(struct ctl_table_header *, struct ctl_table *) ;
};
#line 242 
struct prot_inuse;
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/core.h"
struct netns_core {
   struct ctl_table_header *sysctl_hdr ;
   int sysctl_somaxconn ;
   int *sock_inuse ;
   struct prot_inuse *prot_inuse ;
};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct u64_stats_sync {
   };
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct __anonstruct_local_t_562 {
   atomic_long_t a ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
typedef struct __anonstruct_local_t_562 local_t;
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/local.h"
struct __anonstruct_local64_t_563 {
   local_t a ;
};
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/local.h"
typedef struct __anonstruct_local64_t_563 local64_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/local64.h"
struct __anonstruct_u64_stats_t_564 {
   local64_t v ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/local64.h"
typedef struct __anonstruct_u64_stats_t_564 u64_stats_t;
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct ipstats_mib {
   u64 mibs[37U] ;
   struct u64_stats_sync syncp ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmp_mib {
   unsigned long mibs[28U] ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpmsg_mib {
   atomic_long_t mibs[512U] ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6_mib {
   unsigned long mibs[6U] ;
};
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6msg_mib {
   atomic_long_t mibs[512U] ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct tcp_mib {
   unsigned long mibs[16U] ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct udp_mib {
   unsigned long mibs[9U] ;
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_mib {
   unsigned long mibs[120U] ;
};
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_xfrm_mib {
   unsigned long mibs[29U] ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_tls_mib {
   unsigned long mibs[11U] ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/mib.h"
struct proc_dir_entry;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/mib.h"
struct netns_mib {
   struct tcp_mib *tcp_statistics ;
   struct ipstats_mib *ip_statistics ;
   struct linux_mib *net_statistics ;
   struct udp_mib *udp_statistics ;
   struct udp_mib *udplite_statistics ;
   struct icmp_mib *icmp_statistics ;
   struct icmpmsg_mib *icmpmsg_statistics ;
   struct proc_dir_entry *proc_net_devsnmp6 ;
   struct udp_mib *udp_stats_in6 ;
   struct udp_mib *udplite_stats_in6 ;
   struct ipstats_mib *ipv6_statistics ;
   struct icmpv6_mib *icmpv6_statistics ;
   struct icmpv6msg_mib *icmpv6msg_statistics ;
   struct linux_xfrm_mib *xfrm_statistics ;
   struct linux_tls_mib *tls_statistics ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/unix.h"
struct netns_unix {
   int sysctl_max_dgram_qlen ;
   struct ctl_table_header *ctl ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/packet.h"
struct netns_packet {
   struct mutex sklist_lock ;
   struct hlist_head sklist ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frags;
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct fqdir {
   long high_thresh ;
   long low_thresh ;
   int timeout ;
   int max_dist ;
   struct inet_frags *f ;
   struct net *net ;
   bool dead ;
   struct rhashtable rhashtable ;
   atomic_long_t mem ;
   struct work_struct destroy_work ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct frag_v4_compare_key {
   __be32 saddr ;
   __be32 daddr ;
   u32 user ;
   u32 vif ;
   __be16 id ;
   u16 protocol ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct frag_v6_compare_key {
   struct in6_addr saddr ;
   struct in6_addr daddr ;
   u32 user ;
   __be32 id ;
   u32 iif ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
union __anonunion_key_565 {
   struct frag_v4_compare_key v4 ;
   struct frag_v6_compare_key v6 ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frag_queue {
   struct rhash_head node ;
   union __anonunion_key_565 key ;
   struct timer_list timer ;
   spinlock_t lock ;
   refcount_t refcnt ;
   struct rb_root rb_fragments ;
   struct sk_buff *fragments_tail ;
   struct sk_buff *last_run_head ;
   ktime_t stamp ;
   int len ;
   int meat ;
   __u8 flags ;
   u16 max_size ;
   struct fqdir *fqdir ;
   struct callback_head rcu ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frags {
   unsigned int qsize ;
   void (*constructor)(struct inet_frag_queue *, void *) ;
   void (*destructor)(struct inet_frag_queue *) ;
   void (*frag_expire)(struct timer_list *) ;
   struct kmem_cache *frags_cachep ;
   char *frags_cache_name ;
   struct rhashtable_params rhash_params ;
   refcount_t refcnt ;
   struct completion completion ;
};
#line 177 
struct ipv4_devconf;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct local_ports {
   seqlock_t lock ;
   int range[2U] ;
   bool warned ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct ping_group_range {
   seqlock_t lock ;
   kgid_t range[2U] ;
};
#line 31 
struct inet_hashinfo;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct inet_timewait_death_row {
   atomic_t tw_count ;
   struct inet_hashinfo *hashinfo ;
   int sysctl_max_tw_buckets ;
};
#line 40 
struct tcp_fastopen_context;
#line 43 
struct xt_table;
#line 43 
struct tcp_congestion_ops;
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct netns_ipv4 {
   struct ctl_table_header *forw_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *ipv4_hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *xfrm4_hdr ;
   struct ipv4_devconf *devconf_all ;
   struct ipv4_devconf *devconf_dflt ;
   struct ip_ra_chain *ra_chain ;
   struct mutex ra_mutex ;
   struct fib_rules_ops *rules_ops ;
   bool fib_has_custom_rules ;
   unsigned int fib_rules_require_fldissect ;
   struct fib_table *fib_main ;
   struct fib_table *fib_default ;
   bool fib_has_custom_local_routes ;
   int fib_num_tclassid_users ;
   struct hlist_head *fib_table_hash ;
   bool fib_offload_disabled ;
   struct sock *fibnl ;
   struct sock **icmp_sk ;
   struct sock *mc_autojoin_sk ;
   struct inet_peer_base *peers ;
   struct sock **tcp_sk ;
   struct fqdir *fqdir ;
   struct xt_table *iptable_filter ;
   struct xt_table *iptable_mangle ;
   struct xt_table *iptable_raw ;
   struct xt_table *arptable_filter ;
   struct xt_table *iptable_security ;
   struct xt_table *nat_table ;
   int sysctl_icmp_echo_ignore_all ;
   int sysctl_icmp_echo_ignore_broadcasts ;
   int sysctl_icmp_ignore_bogus_error_responses ;
   int sysctl_icmp_ratelimit ;
   int sysctl_icmp_ratemask ;
   int sysctl_icmp_errors_use_inbound_ifaddr ;
   struct local_ports ip_local_ports ;
   int sysctl_tcp_ecn ;
   int sysctl_tcp_ecn_fallback ;
   int sysctl_ip_default_ttl ;
   int sysctl_ip_no_pmtu_disc ;
   int sysctl_ip_fwd_use_pmtu ;
   int sysctl_ip_fwd_update_priority ;
   int sysctl_ip_nonlocal_bind ;
   int sysctl_ip_dynaddr ;
   int sysctl_ip_early_demux ;
   int sysctl_raw_l3mdev_accept ;
   int sysctl_tcp_early_demux ;
   int sysctl_udp_early_demux ;
   int sysctl_fwmark_reflect ;
   int sysctl_tcp_fwmark_accept ;
   int sysctl_tcp_l3mdev_accept ;
   int sysctl_tcp_mtu_probing ;
   int sysctl_tcp_mtu_probe_floor ;
   int sysctl_tcp_base_mss ;
   int sysctl_tcp_min_snd_mss ;
   int sysctl_tcp_probe_threshold ;
   u32 sysctl_tcp_probe_interval ;
   int sysctl_tcp_keepalive_time ;
   int sysctl_tcp_keepalive_probes ;
   int sysctl_tcp_keepalive_intvl ;
   int sysctl_tcp_syn_retries ;
   int sysctl_tcp_synack_retries ;
   int sysctl_tcp_syncookies ;
   int sysctl_tcp_reordering ;
   int sysctl_tcp_retries1 ;
   int sysctl_tcp_retries2 ;
   int sysctl_tcp_orphan_retries ;
   int sysctl_tcp_fin_timeout ;
   unsigned int sysctl_tcp_notsent_lowat ;
   int sysctl_tcp_tw_reuse ;
   int sysctl_tcp_sack ;
   int sysctl_tcp_window_scaling ;
   int sysctl_tcp_timestamps ;
   int sysctl_tcp_early_retrans ;
   int sysctl_tcp_recovery ;
   int sysctl_tcp_thin_linear_timeouts ;
   int sysctl_tcp_slow_start_after_idle ;
   int sysctl_tcp_retrans_collapse ;
   int sysctl_tcp_stdurg ;
   int sysctl_tcp_rfc1337 ;
   int sysctl_tcp_abort_on_overflow ;
   int sysctl_tcp_fack ;
   int sysctl_tcp_max_reordering ;
   int sysctl_tcp_dsack ;
   int sysctl_tcp_app_win ;
   int sysctl_tcp_adv_win_scale ;
   int sysctl_tcp_frto ;
   int sysctl_tcp_nometrics_save ;
   int sysctl_tcp_moderate_rcvbuf ;
   int sysctl_tcp_tso_win_divisor ;
   int sysctl_tcp_workaround_signed_windows ;
   int sysctl_tcp_limit_output_bytes ;
   int sysctl_tcp_challenge_ack_limit ;
   int sysctl_tcp_min_tso_segs ;
   int sysctl_tcp_min_rtt_wlen ;
   int sysctl_tcp_autocorking ;
   int sysctl_tcp_invalid_ratelimit ;
   int sysctl_tcp_pacing_ss_ratio ;
   int sysctl_tcp_pacing_ca_ratio ;
   int sysctl_tcp_wmem[3U] ;
   int sysctl_tcp_rmem[3U] ;
   int sysctl_tcp_comp_sack_nr ;
   unsigned long sysctl_tcp_comp_sack_delay_ns ;
   struct inet_timewait_death_row tcp_death_row ;
   int sysctl_max_syn_backlog ;
   int sysctl_tcp_fastopen ;
   struct tcp_congestion_ops *tcp_congestion_control ;
   struct tcp_fastopen_context *tcp_fastopen_ctx ;
   spinlock_t tcp_fastopen_ctx_lock ;
   unsigned int sysctl_tcp_fastopen_blackhole_timeout ;
   atomic_t tfo_active_disable_times ;
   unsigned long tfo_active_disable_stamp ;
   int sysctl_udp_wmem_min ;
   int sysctl_udp_rmem_min ;
   int sysctl_udp_l3mdev_accept ;
   int sysctl_igmp_max_memberships ;
   int sysctl_igmp_max_msf ;
   int sysctl_igmp_llm_reports ;
   int sysctl_igmp_qrv ;
   struct ping_group_range ping_group_range ;
   atomic_t dev_addr_genid ;
   unsigned long *sysctl_local_reserved_ports ;
   int sysctl_ip_prot_sock ;
   struct list_head mr_tables ;
   struct fib_rules_ops *mr_rules_ops ;
   int sysctl_fib_multipath_use_neigh ;
   int sysctl_fib_multipath_hash_policy ;
   struct fib_notifier_ops *notifier_ops ;
   unsigned int fib_seq ;
   struct fib_notifier_ops *ipmr_notifier_ops ;
   unsigned int ipmr_seq ;
   atomic_t rt_genid ;
   siphash_key_t ip_id_key ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst_ops.h"
struct dst_ops {
   unsigned short family ;
   unsigned int gc_thresh ;
   int (*gc)(struct dst_ops *) ;
   struct dst_entry *(*check)(struct dst_entry *, __u32 ) ;
   unsigned int (*default_advmss)(struct dst_entry *) ;
   unsigned int (*mtu)(struct dst_entry *) ;
   u32 *(*cow_metrics)(struct dst_entry *, unsigned long ) ;
   void (*destroy)(struct dst_entry *) ;
   void (*ifdown)(struct dst_entry *, struct net_device *, int ) ;
   struct dst_entry *(*negative_advice)(struct dst_entry *) ;
   void (*link_failure)(struct sk_buff *) ;
   void (*update_pmtu)(struct dst_entry *, struct sock *, struct sk_buff *, u32 , bool ) ;
   void (*redirect)(struct dst_entry *, struct sock *, struct sk_buff *) ;
   int (*local_out)(struct net *, struct sock *, struct sk_buff *) ;
   struct neighbour *(*neigh_lookup)(struct dst_entry *, struct sk_buff *, void *) ;
   void (*confirm_neigh)(struct dst_entry *, void *) ;
   struct kmem_cache *kmem_cachep ;
   struct percpu_counter pcpuc_entries ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_sysctl_ipv6 {
   struct ctl_table_header *hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *icmp_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *xfrm6_hdr ;
   int bindv6only ;
   int flush_delay ;
   int ip6_rt_max_size ;
   int ip6_rt_gc_min_interval ;
   int ip6_rt_gc_timeout ;
   int ip6_rt_gc_interval ;
   int ip6_rt_gc_elasticity ;
   int ip6_rt_mtu_expires ;
   int ip6_rt_min_advmss ;
   int multipath_hash_policy ;
   int flowlabel_consistency ;
   int auto_flowlabels ;
   int icmpv6_time ;
   int icmpv6_echo_ignore_all ;
   int icmpv6_echo_ignore_multicast ;
   int icmpv6_echo_ignore_anycast ;
   unsigned long icmpv6_ratemask[4U] ;
   unsigned long *icmpv6_ratemask_ptr ;
   int anycast_src_echo_reply ;
   int ip_nonlocal_bind ;
   int fwmark_reflect ;
   int idgen_retries ;
   int idgen_delay ;
   int flowlabel_state_ranges ;
   int flowlabel_reflect ;
   int max_dst_opts_cnt ;
   int max_hbh_opts_cnt ;
   int max_dst_opts_len ;
   int max_hbh_opts_len ;
   int seg6_flowlabel ;
   bool skip_notify_on_dev_down ;
};
#line 56 
struct fib6_info;
#line 56 
struct rt6_info;
#line 56 
struct rt6_statistics;
#line 56 
struct fib6_table;
#line 56 
struct seg6_pernet_data;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct __anonstruct_ip6addrlbl_table_567 {
   struct hlist_head head ;
   spinlock_t lock ;
   u32 seq ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_ipv6 {
   struct netns_sysctl_ipv6 sysctl ;
   struct ipv6_devconf *devconf_all ;
   struct ipv6_devconf *devconf_dflt ;
   struct inet_peer_base *peers ;
   struct fqdir *fqdir ;
   struct xt_table *ip6table_filter ;
   struct xt_table *ip6table_mangle ;
   struct xt_table *ip6table_raw ;
   struct xt_table *ip6table_security ;
   struct xt_table *ip6table_nat ;
   struct fib6_info *fib6_null_entry ;
   struct rt6_info *ip6_null_entry ;
   struct rt6_statistics *rt6_stats ;
   struct timer_list ip6_fib_timer ;
   struct hlist_head *fib_table_hash ;
   struct fib6_table *fib6_main_tbl ;
   struct list_head fib6_walkers ;
   struct dst_ops ip6_dst_ops ;
   rwlock_t fib6_walker_lock ;
   spinlock_t fib6_gc_lock ;
   unsigned int ip6_rt_gc_expire ;
   unsigned long ip6_rt_last_gc ;
   unsigned int fib6_rules_require_fldissect ;
   bool fib6_has_custom_rules ;
   unsigned int fib6_routes_require_src ;
   struct rt6_info *ip6_prohibit_entry ;
   struct rt6_info *ip6_blk_hole_entry ;
   struct fib6_table *fib6_local_tbl ;
   struct fib_rules_ops *fib6_rules_ops ;
   struct sock **icmp_sk ;
   struct sock *ndisc_sk ;
   struct sock *tcp_sk ;
   struct sock *igmp_sk ;
   struct sock *mc_autojoin_sk ;
   struct list_head mr6_tables ;
   struct fib_rules_ops *mr6_rules_ops ;
   atomic_t dev_addr_genid ;
   atomic_t fib6_sernum ;
   struct seg6_pernet_data *seg6_data ;
   struct fib_notifier_ops *notifier_ops ;
   struct fib_notifier_ops *ip6mr_notifier_ops ;
   unsigned int ipmr_seq ;
   struct __anonstruct_ip6addrlbl_table_567 ip6addrlbl_table ;
};
#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_nf_frag {
   struct fqdir *fqdir ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/nexthop.h"
struct netns_nexthop {
   struct rb_root rb_root ;
   struct hlist_head *devhash ;
   unsigned int seq ;
   u32 last_id_allocated ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ieee802154_6lowpan.h"
struct netns_sysctl_lowpan {
   struct ctl_table_header *frags_hdr ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ieee802154_6lowpan.h"
struct netns_ieee802154_lowpan {
   struct netns_sysctl_lowpan sysctl ;
   struct fqdir *fqdir ;
};
#line 21 
struct sctp_mib;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/sctp.h"
struct netns_sctp {
   struct sctp_mib *sctp_statistics ;
   struct proc_dir_entry *proc_net_sctp ;
   struct ctl_table_header *sysctl_header ;
   struct sock *ctl_sock ;
   struct list_head local_addr_list ;
   struct list_head addr_waitq ;
   struct timer_list addr_wq_timer ;
   struct list_head auto_asconf_splist ;
   spinlock_t addr_wq_lock ;
   spinlock_t local_addr_lock ;
   unsigned int rto_initial ;
   unsigned int rto_min ;
   unsigned int rto_max ;
   int rto_alpha ;
   int rto_beta ;
   int max_burst ;
   int cookie_preserve_enable ;
   char *sctp_hmac_alg ;
   unsigned int valid_cookie_life ;
   unsigned int sack_timeout ;
   unsigned int hb_interval ;
   int max_retrans_association ;
   int max_retrans_path ;
   int max_retrans_init ;
   int pf_retrans ;
   int ps_retrans ;
   int pf_enable ;
   int pf_expose ;
   int sndbuf_policy ;
   int rcvbuf_policy ;
   int default_auto_asconf ;
   int addip_enable ;
   int addip_noauth ;
   int prsctp_enable ;
   int reconf_enable ;
   int auth_enable ;
   int intl_enable ;
   int ecn_enable ;
   int scope_policy ;
   int rwnd_upd_shift ;
   unsigned long max_autoclose ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/dccp.h"
struct netns_dccp {
   struct sock *v4_ctl_sk ;
   struct sock *v6_ctl_sk ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netfilter.h"
struct nf_logger;
#line 76 
struct nf_queue_handler;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/netfilter.h"
struct nf_hook_entries;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/netfilter.h"
struct netns_nf {
   struct proc_dir_entry *proc_netfilter ;
   struct nf_queue_handler *queue_handler ;
   struct nf_logger *nf_loggers[13U] ;
   struct ctl_table_header *nf_log_dir_header ;
   struct nf_hook_entries *hooks_ipv4[5U] ;
   struct nf_hook_entries *hooks_ipv6[5U] ;
   struct nf_hook_entries *hooks_arp[3U] ;
   struct nf_hook_entries *hooks_bridge[5U] ;
   struct nf_hook_entries *hooks_decnet[7U] ;
   bool defrag_ipv4 ;
   bool defrag_ipv6 ;
};
#line 37 
struct ebt_table;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/x_tables.h"
struct netns_xt {
   struct list_head tables[13U] ;
   bool notrack_deprecated_warning ;
   bool clusterip_deprecated_warning ;
   struct ebt_table *broute_table ;
   struct ebt_table *frame_filter ;
   struct ebt_table *frame_nat ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_node;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_head {
   struct hlist_nulls_node *first ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_node {
   struct hlist_nulls_node *next ;
   struct hlist_nulls_node **pprev ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_generic_net {
   unsigned int timeout ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_tcp_net {
   unsigned int timeouts[14U] ;
   int tcp_loose ;
   int tcp_be_liberal ;
   int tcp_max_retrans ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_udp_net {
   unsigned int timeouts[2U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_icmp_net {
   unsigned int timeout ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_dccp_net {
   int dccp_loose ;
   unsigned int dccp_timeout[10U] ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_sctp_net {
   unsigned int timeouts[10U] ;
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_gre_net {
   struct list_head keymap_list ;
   unsigned int timeouts[2U] ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_ip_net {
   struct nf_generic_net generic ;
   struct nf_tcp_net tcp ;
   struct nf_udp_net udp ;
   struct nf_icmp_net icmp ;
   struct nf_icmp_net icmpv6 ;
   struct nf_dccp_net dccp ;
   struct nf_sctp_net sctp ;
   struct nf_gre_net gre ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct ct_pcpu {
   spinlock_t lock ;
   struct hlist_nulls_head unconfirmed ;
   struct hlist_nulls_head dying ;
};
#line 95 
struct nf_ct_event_notifier;
#line 95 
struct nf_exp_event_notifier;
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct netns_ct {
   atomic_t count ;
   unsigned int expect_count ;
   struct delayed_work ecache_dwork ;
   bool ecache_dwork_pending ;
   bool auto_assign_helper_warned ;
   struct ctl_table_header *sysctl_header ;
   unsigned int sysctl_log_invalid ;
   int sysctl_events ;
   int sysctl_acct ;
   int sysctl_auto_assign_helper ;
   int sysctl_tstamp ;
   int sysctl_checksum ;
   struct ct_pcpu *pcpu_lists ;
   struct ip_conntrack_stat *stat ;
   struct nf_ct_event_notifier *nf_conntrack_event_cb ;
   struct nf_exp_event_notifier *nf_expect_event_cb ;
   struct nf_ip_net nf_ct_proto ;
   unsigned int labels_used ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/nftables.h"
struct netns_nftables {
   struct list_head tables ;
   struct list_head commit_list ;
   struct list_head module_list ;
   struct mutex commit_mutex ;
   unsigned int base_seq ;
   u8 gencursor ;
   u8 validate_state ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct xfrm_policy_hash {
   struct hlist_head *table ;
   unsigned int hmask ;
   u8 dbits4 ;
   u8 sbits4 ;
   u8 dbits6 ;
   u8 sbits6 ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct xfrm_policy_hthresh {
   struct work_struct work ;
   seqlock_t lock ;
   u8 lbits4 ;
   u8 rbits4 ;
   u8 lbits6 ;
   u8 rbits6 ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct netns_xfrm {
   struct list_head state_all ;
   struct hlist_head *state_bydst ;
   struct hlist_head *state_bysrc ;
   struct hlist_head *state_byspi ;
   unsigned int state_hmask ;
   unsigned int state_num ;
   struct work_struct state_hash_work ;
   struct list_head policy_all ;
   struct hlist_head *policy_byidx ;
   unsigned int policy_idx_hmask ;
   struct hlist_head policy_inexact[3U] ;
   struct xfrm_policy_hash policy_bydst[3U] ;
   unsigned int policy_count[6U] ;
   struct work_struct policy_hash_work ;
   struct xfrm_policy_hthresh policy_hthresh ;
   struct list_head inexact_bins ;
   struct sock *nlsk ;
   struct sock *nlsk_stash ;
   u32 sysctl_aevent_etime ;
   u32 sysctl_aevent_rseqth ;
   int sysctl_larval_drop ;
   u32 sysctl_acq_expires ;
   struct ctl_table_header *sysctl_hdr ;
   struct dst_ops xfrm4_dst_ops ;
   struct dst_ops xfrm6_dst_ops ;
   spinlock_t xfrm_state_lock ;
   spinlock_t xfrm_policy_lock ;
   struct mutex xfrm_cfg_mutex ;
};
#line 79 
struct mpls_route;
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/mpls.h"
struct netns_mpls {
   int ip_ttl_propagate ;
   int default_ttl ;
   size_t platform_labels ;
   struct mpls_route **platform_label ;
   struct ctl_table_header *ctl ;
};
#line 20 
struct can_dev_rcv_lists;
#line 21 
struct can_pkg_stats;
#line 22 
struct can_rcv_lists_stats;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/can.h"
struct netns_can {
   struct proc_dir_entry *proc_dir ;
   struct proc_dir_entry *pde_version ;
   struct proc_dir_entry *pde_stats ;
   struct proc_dir_entry *pde_reset_stats ;
   struct proc_dir_entry *pde_rcvlist_all ;
   struct proc_dir_entry *pde_rcvlist_fil ;
   struct proc_dir_entry *pde_rcvlist_inv ;
   struct proc_dir_entry *pde_rcvlist_sff ;
   struct proc_dir_entry *pde_rcvlist_eff ;
   struct proc_dir_entry *pde_rcvlist_err ;
   struct proc_dir_entry *bcmproc_dir ;
   struct can_dev_rcv_lists *rx_alldev_list ;
   spinlock_t rcvlists_lock ;
   struct timer_list stattimer ;
   struct can_pkg_stats *pkg_stats ;
   struct can_rcv_lists_stats *rcv_lists_stats ;
   struct hlist_head cgw_list ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xdp.h"
struct netns_xdp {
   struct mutex lock ;
   struct hlist_head list ;
};
#line 12 
struct proc_ns_operations;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ns_common.h"
struct ns_common {
   atomic_long_t stashed ;
   struct proc_ns_operations *ops ;
   unsigned int inum ;
};
#line 12 
struct net_generic;
#line 13 
struct uevent_sock;
#line 14 
struct netns_ipvs;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct key_tag;
#line 55 
struct ucounts;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct net {
   refcount_t passive ;
   refcount_t count ;
   spinlock_t rules_mod_lock ;
   unsigned int dev_unreg_count ;
   unsigned int dev_base_seq ;
   int ifindex ;
   spinlock_t nsid_lock ;
   atomic_t fnhe_genid ;
   struct list_head list ;
   struct list_head exit_list ;
   struct llist_node cleanup_list ;
   struct key_tag *key_domain ;
   struct user_namespace *user_ns ;
   struct ucounts *ucounts ;
   struct idr netns_ids ;
   struct ns_common ns ;
   struct list_head dev_base_head ;
   struct proc_dir_entry *proc_net ;
   struct proc_dir_entry *proc_net_stat ;
   struct ctl_table_set sysctls ;
   struct sock *rtnl ;
   struct sock *genl_sock ;
   struct uevent_sock *uevent_sock ;
   struct hlist_head *dev_name_head ;
   struct hlist_head *dev_index_head ;
   struct raw_notifier_head netdev_chain ;
   u32 hash_mix ;
   struct net_device *loopback_dev ;
   struct list_head rules_ops ;
   struct netns_core core ;
   struct netns_mib mib ;
   struct netns_packet packet ;
   struct netns_unix unx ;
   struct netns_nexthop nexthop ;
   struct netns_ipv4 ipv4 ;
   struct netns_ipv6 ipv6 ;
   struct netns_ieee802154_lowpan ieee802154_lowpan ;
   struct netns_sctp sctp ;
   struct netns_dccp dccp ;
   struct netns_nf nf ;
   struct netns_xt xt ;
   struct netns_ct ct ;
   struct netns_nftables nft ;
   struct netns_nf_frag nf_frag ;
   struct ctl_table_header *nf_frag_frags_hdr ;
   struct sock *nfnl ;
   struct sock *nfnl_stash ;
   struct list_head nfnl_acct_list ;
   struct list_head nfct_timeout_list ;
   struct sk_buff_head wext_nlevents ;
   struct net_generic *gen ;
   struct bpf_prog *flow_dissector_prog ;
   struct netns_xfrm xfrm ;
   struct netns_ipvs *ipvs ;
   struct netns_mpls mpls ;
   struct netns_can can ;
   struct netns_xdp xdp ;
   struct sock *crypto_nlsk ;
   struct sock *diag_nlsk ;
} __attribute__((__designated_init__));
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
struct assoc_array_ptr;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
struct assoc_array {
   struct assoc_array_ptr *root ;
   unsigned long nr_leaves_on_tree ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
typedef int32_t key_serial_t;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
typedef uint32_t key_perm_t;
#line 32 
struct key_type;
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key_tag {
   struct callback_head rcu ;
   refcount_t usage ;
   bool removed ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_580 {
   u16 desc_len ;
   char desc[6U] ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_579 {
   struct __anonstruct_580 __anonCompField___anonunion_579_102 ;
   unsigned long x ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct keyring_index_key {
   unsigned long hash ;
   union __anonunion_579 __anonCompField_keyring_index_key_103 ;
   struct key_type *type ;
   struct key_tag *domain_tag ;
   char *description ;
};
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union key_payload {
   void *rcu_data0 ;
   void *data[4U] ;
};
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key_restriction {
   int (*check)(struct key *, struct key_type *, union key_payload *, struct key *) ;
   struct key *key ;
   struct key_type *keytype ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_581 {
   struct list_head graveyard_link ;
   struct rb_node serial_node ;
};
#line 172 
struct key_user;
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_582 {
   time64_t expiry ;
   time64_t revoked_at ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_584 {
   unsigned long hash ;
   unsigned long len_desc ;
   struct key_type *type ;
   struct key_tag *domain_tag ;
   char *description ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_583 {
   struct keyring_index_key index_key ;
   struct __anonstruct_584 __anonCompField___anonunion_583_106 ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_586 {
   struct list_head name_link ;
   struct assoc_array keys ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_585 {
   union key_payload payload ;
   struct __anonstruct_586 __anonCompField___anonunion_585_108 ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key {
   refcount_t usage ;
   key_serial_t serial ;
   union __anonunion_581 __anonCompField_key_104 ;
   struct rw_semaphore sem ;
   struct key_user *user ;
   void *security ;
   union __anonunion_582 __anonCompField_key_105 ;
   time64_t last_used_at ;
   kuid_t uid ;
   kgid_t gid ;
   key_perm_t perm ;
   unsigned short quotalen ;
   unsigned short datalen ;
   short state ;
   unsigned long flags ;
   union __anonunion_583 __anonCompField_key_107 ;
   union __anonunion_585 __anonCompField_key_109 ;
   struct key_restriction *restrict_link ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/user.h"
struct user_struct {
   refcount_t __count ;
   atomic_t processes ;
   atomic_t sigpending ;
   atomic_t fanotify_listeners ;
   atomic_long_t epoll_watches ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   unsigned long unix_inflight ;
   atomic_long_t pipe_bufs ;
   struct hlist_node uidhash_node ;
   kuid_t uid ;
   atomic_long_t locked_vm ;
   struct ratelimit_state ratelimit ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
struct group_info {
   atomic_t usage ;
   int ngroups ;
   kgid_t gid[0U] ;
} __attribute__((__designated_init__));
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
union __anonunion_589 {
   int non_rcu ;
   struct callback_head rcu ;
};
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
struct cred {
   atomic_t usage ;
   atomic_t subscribers ;
   void *put_addr ;
   unsigned int magic ;
   kuid_t uid ;
   kgid_t gid ;
   kuid_t suid ;
   kgid_t sgid ;
   kuid_t euid ;
   kgid_t egid ;
   kuid_t fsuid ;
   kgid_t fsgid ;
   unsigned int securebits ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_bset ;
   kernel_cap_t cap_ambient ;
   unsigned char jit_keyring ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct key *thread_keyring ;
   struct key *request_key_auth ;
   void *security ;
   struct user_struct *user ;
   struct user_namespace *user_ns ;
   struct group_info *group_info ;
   union __anonunion_589 __anonCompField_cred_110 ;
} __attribute__((__designated_init__));
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seq_file.h"
struct seq_file {
   char *buf ;
   size_t size ;
   size_t from ;
   size_t count ;
   size_t pad_until ;
   loff_t index ;
   loff_t read_pos ;
   u64 version ;
   struct mutex lock ;
   struct seq_operations *op ;
   int poll_event ;
   struct file *file ;
   void *private ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seq_file.h"
struct seq_operations {
   void *(*start)(struct seq_file *, loff_t *) ;
   void (*stop)(struct seq_file *, void *) ;
   void *(*next)(struct seq_file *, void *, loff_t *) ;
   int (*show)(struct seq_file *, void *) ;
};
#line 275  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct __anonstruct_possible_net_t_590 {
   struct net *net ;
};
#line 275  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
typedef struct __anonstruct_possible_net_t_590 possible_net_t;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_ets {
   __u8 willing ;
   __u8 ets_cap ;
   __u8 cbs ;
   __u8 tc_tx_bw[8U] ;
   __u8 tc_rx_bw[8U] ;
   __u8 tc_tsa[8U] ;
   __u8 prio_tc[8U] ;
   __u8 tc_reco_bw[8U] ;
   __u8 tc_reco_tsa[8U] ;
   __u8 reco_prio_tc[8U] ;
};
#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_maxrate {
   __u64 tc_maxrate[8U] ;
};
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_qcn {
   __u8 rpg_enable[8U] ;
   __u32 rppp_max_rps[8U] ;
   __u32 rpg_time_reset[8U] ;
   __u32 rpg_byte_reset[8U] ;
   __u32 rpg_threshold[8U] ;
   __u32 rpg_max_rate[8U] ;
   __u32 rpg_ai_rate[8U] ;
   __u32 rpg_hai_rate[8U] ;
   __u32 rpg_gd[8U] ;
   __u32 rpg_min_dec_fac[8U] ;
   __u32 rpg_min_rate[8U] ;
   __u32 cndd_state_machine[8U] ;
};
#line 141  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_qcn_stats {
   __u64 rppp_rp_centiseconds[8U] ;
   __u32 rppp_created_rps[8U] ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_pfc {
   __u8 pfc_cap ;
   __u8 pfc_en ;
   __u8 mbc ;
   __u16 delay ;
   __u64 requests[8U] ;
   __u64 indications[8U] ;
};
#line 168  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcbnl_buffer {
   __u8 prio2buffer[8U] ;
   __u32 buffer_size[8U] ;
   __u32 total_size ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct cee_pg {
   __u8 willing ;
   __u8 error ;
   __u8 pg_en ;
   __u8 tcs_supported ;
   __u8 pg_bw[8U] ;
   __u8 prio_pg[8U] ;
};
#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct cee_pfc {
   __u8 willing ;
   __u8 error ;
   __u8 pfc_en ;
   __u8 tcs_supported ;
};
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcb_app {
   __u8 selector ;
   __u8 priority ;
   __u16 protocol ;
};
#line 259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcb_peer_app_info {
   __u8 willing ;
   __u8 error ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dcbnl.h"
struct dcbnl_rtnl_ops {
   int (*ieee_getets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_setets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_getmaxrate)(struct net_device *, struct ieee_maxrate *) ;
   int (*ieee_setmaxrate)(struct net_device *, struct ieee_maxrate *) ;
   int (*ieee_getqcn)(struct net_device *, struct ieee_qcn *) ;
   int (*ieee_setqcn)(struct net_device *, struct ieee_qcn *) ;
   int (*ieee_getqcnstats)(struct net_device *, struct ieee_qcn_stats *) ;
   int (*ieee_getpfc)(struct net_device *, struct ieee_pfc *) ;
   int (*ieee_setpfc)(struct net_device *, struct ieee_pfc *) ;
   int (*ieee_getapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_setapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_delapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_peer_getets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_peer_getpfc)(struct net_device *, struct ieee_pfc *) ;
   u8 (*getstate)(struct net_device *) ;
   u8 (*setstate)(struct net_device *, u8 ) ;
   void (*getpermhwaddr)(struct net_device *, u8 *) ;
   void (*setpgtccfgtx)(struct net_device *, int , u8 , u8 , u8 , u8 ) ;
   void (*setpgbwgcfgtx)(struct net_device *, int , u8 ) ;
   void (*setpgtccfgrx)(struct net_device *, int , u8 , u8 , u8 , u8 ) ;
   void (*setpgbwgcfgrx)(struct net_device *, int , u8 ) ;
   void (*getpgtccfgtx)(struct net_device *, int , u8 *, u8 *, u8 *, u8 *) ;
   void (*getpgbwgcfgtx)(struct net_device *, int , u8 *) ;
   void (*getpgtccfgrx)(struct net_device *, int , u8 *, u8 *, u8 *, u8 *) ;
   void (*getpgbwgcfgrx)(struct net_device *, int , u8 *) ;
   void (*setpfccfg)(struct net_device *, int , u8 ) ;
   void (*getpfccfg)(struct net_device *, int , u8 *) ;
   u8 (*setall)(struct net_device *) ;
   u8 (*getcap)(struct net_device *, int , u8 *) ;
   int (*getnumtcs)(struct net_device *, int , u8 *) ;
   int (*setnumtcs)(struct net_device *, int , u8 ) ;
   u8 (*getpfcstate)(struct net_device *) ;
   void (*setpfcstate)(struct net_device *, u8 ) ;
   void (*getbcncfg)(struct net_device *, int , u32 *) ;
   void (*setbcncfg)(struct net_device *, int , u32 ) ;
   void (*getbcnrp)(struct net_device *, int , u8 *) ;
   void (*setbcnrp)(struct net_device *, int , u8 ) ;
   int (*setapp)(struct net_device *, u8 , u16 , u8 ) ;
   int (*getapp)(struct net_device *, u8 , u16 ) ;
   u8 (*getfeatcfg)(struct net_device *, int , u8 *) ;
   u8 (*setfeatcfg)(struct net_device *, int , u8 ) ;
   u8 (*getdcbx)(struct net_device *) ;
   u8 (*setdcbx)(struct net_device *, u8 ) ;
   int (*peer_getappinfo)(struct net_device *, struct dcb_peer_app_info *, u16 *) ;
   int (*peer_getapptable)(struct net_device *, struct dcb_app *) ;
   int (*cee_peer_getpg)(struct net_device *, struct cee_pg *) ;
   int (*cee_peer_getpfc)(struct net_device *, struct cee_pfc *) ;
   int (*dcbnl_getbuffer)(struct net_device *, struct dcbnl_buffer *) ;
   int (*dcbnl_setbuffer)(struct net_device *, struct dcbnl_buffer *) ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/taskstats.h"
struct taskstats {
   __u16 version ;
   __u32 ac_exitcode ;
   __u8 ac_flag ;
   __u8 ac_nice ;
   __u64 cpu_count ;
   __u64 cpu_delay_total ;
   __u64 blkio_count ;
   __u64 blkio_delay_total ;
   __u64 swapin_count ;
   __u64 swapin_delay_total ;
   __u64 cpu_run_real_total ;
   __u64 cpu_run_virtual_total ;
   char ac_comm[32U] ;
   __u8 ac_sched ;
   __u8 ac_pad[3U] ;
   __u32 ac_uid ;
   __u32 ac_gid ;
   __u32 ac_pid ;
   __u32 ac_ppid ;
   __u32 ac_btime ;
   __u64 ac_etime ;
   __u64 ac_utime ;
   __u64 ac_stime ;
   __u64 ac_minflt ;
   __u64 ac_majflt ;
   __u64 coremem ;
   __u64 virtmem ;
   __u64 hiwater_rss ;
   __u64 hiwater_vm ;
   __u64 read_char ;
   __u64 write_char ;
   __u64 read_syscalls ;
   __u64 write_syscalls ;
   __u64 read_bytes ;
   __u64 write_bytes ;
   __u64 cancelled_write_bytes ;
   __u64 nvcsw ;
   __u64 nivcsw ;
   __u64 ac_utimescaled ;
   __u64 ac_stimescaled ;
   __u64 cpu_scaled_run_real_total ;
   __u64 freepages_count ;
   __u64 freepages_delay_total ;
   __u64 thrashing_count ;
   __u64 thrashing_delay_total ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/cgroupstats.h"
struct mnt_namespace;
#line 60 
struct uts_namespace;
#line 61 
struct ipc_namespace;
#line 62 
struct cgroup_namespace;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nsproxy.h"
struct nsproxy {
   atomic_t count ;
   struct uts_namespace *uts_ns ;
   struct ipc_namespace *ipc_ns ;
   struct mnt_namespace *mnt_ns ;
   struct pid_namespace *pid_ns_for_children ;
   struct net *net_ns ;
   struct cgroup_namespace *cgroup_ns ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct uid_gid_extent {
   u32 first ;
   u32 lower_first ;
   u32 count ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct __anonstruct_592 {
   struct uid_gid_extent *forward ;
   struct uid_gid_extent *reverse ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
union __anonunion_591 {
   struct uid_gid_extent extent[5U] ;
   struct __anonstruct_592 __anonCompField___anonunion_591_111 ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct uid_gid_map {
   u32 nr_extents ;
   union __anonunion_591 __anonCompField_uid_gid_map_112 ;
};
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct user_namespace {
   struct uid_gid_map uid_map ;
   struct uid_gid_map gid_map ;
   struct uid_gid_map projid_map ;
   atomic_t count ;
   struct user_namespace *parent ;
   int level ;
   kuid_t owner ;
   kgid_t group ;
   struct ns_common ns ;
   unsigned long flags ;
   struct list_head keyring_name_list ;
   struct key *user_keyring_register ;
   struct rw_semaphore keyring_sem ;
   struct key *persistent_keyring_register ;
   struct work_struct work ;
   struct ctl_table_set set ;
   struct ctl_table_header *sysctls ;
   struct ucounts *ucounts ;
   int ucount_max[9U] ;
} __attribute__((__designated_init__));
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct ucounts {
   struct hlist_node node ;
   struct user_namespace *ns ;
   kuid_t uid ;
   int count ;
   atomic_t ucount[9U] ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_insn {
   __u8 code ;
   __u8 dst_reg : 4 ;
   __u8 src_reg : 4 ;
   __s16 off ;
   __s32 imm ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_cgroup_storage_key {
   __u64 cgroup_inode_id ;
   __u32 attach_type ;
};
#line 110 
enum bpf_map_type {
    BPF_MAP_TYPE_UNSPEC = 0,
    BPF_MAP_TYPE_HASH = 1,
    BPF_MAP_TYPE_ARRAY = 2,
    BPF_MAP_TYPE_PROG_ARRAY = 3,
    BPF_MAP_TYPE_PERF_EVENT_ARRAY = 4,
    BPF_MAP_TYPE_PERCPU_HASH = 5,
    BPF_MAP_TYPE_PERCPU_ARRAY = 6,
    BPF_MAP_TYPE_STACK_TRACE = 7,
    BPF_MAP_TYPE_CGROUP_ARRAY = 8,
    BPF_MAP_TYPE_LRU_HASH = 9,
    BPF_MAP_TYPE_LRU_PERCPU_HASH = 10,
    BPF_MAP_TYPE_LPM_TRIE = 11,
    BPF_MAP_TYPE_ARRAY_OF_MAPS = 12,
    BPF_MAP_TYPE_HASH_OF_MAPS = 13,
    BPF_MAP_TYPE_DEVMAP = 14,
    BPF_MAP_TYPE_SOCKMAP = 15,
    BPF_MAP_TYPE_CPUMAP = 16,
    BPF_MAP_TYPE_XSKMAP = 17,
    BPF_MAP_TYPE_SOCKHASH = 18,
    BPF_MAP_TYPE_CGROUP_STORAGE = 19,
    BPF_MAP_TYPE_REUSEPORT_SOCKARRAY = 20,
    BPF_MAP_TYPE_PERCPU_CGROUP_STORAGE = 21,
    BPF_MAP_TYPE_QUEUE = 22,
    BPF_MAP_TYPE_STACK = 23,
    BPF_MAP_TYPE_SK_STORAGE = 24,
    BPF_MAP_TYPE_DEVMAP_HASH = 25
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_594 {
   __u32 map_type ;
   __u32 key_size ;
   __u32 value_size ;
   __u32 max_entries ;
   __u32 map_flags ;
   __u32 inner_map_fd ;
   __u32 numa_node ;
   char map_name[16U] ;
   __u32 map_ifindex ;
   __u32 btf_fd ;
   __u32 btf_key_type_id ;
   __u32 btf_value_type_id ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union __anonunion_596 {
   __u64 value ;
   __u64 next_key ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_595 {
   __u32 map_fd ;
   __u64 key ;
   union __anonunion_596 __anonCompField___anonstruct_595_115 ;
   __u64 flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_597 {
   __u32 prog_type ;
   __u32 insn_cnt ;
   __u64 insns ;
   __u64 license ;
   __u32 log_level ;
   __u32 log_size ;
   __u64 log_buf ;
   __u32 kern_version ;
   __u32 prog_flags ;
   char prog_name[16U] ;
   __u32 prog_ifindex ;
   __u32 expected_attach_type ;
   __u32 prog_btf_fd ;
   __u32 func_info_rec_size ;
   __u64 func_info ;
   __u32 func_info_cnt ;
   __u32 line_info_rec_size ;
   __u64 line_info ;
   __u32 line_info_cnt ;
   __u32 attach_btf_id ;
   __u32 attach_prog_fd ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_598 {
   __u64 pathname ;
   __u32 bpf_fd ;
   __u32 file_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_599 {
   __u32 target_fd ;
   __u32 attach_bpf_fd ;
   __u32 attach_type ;
   __u32 attach_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_test_600 {
   __u32 prog_fd ;
   __u32 retval ;
   __u32 data_size_in ;
   __u32 data_size_out ;
   __u64 data_in ;
   __u64 data_out ;
   __u32 repeat ;
   __u32 duration ;
   __u32 ctx_size_in ;
   __u32 ctx_size_out ;
   __u64 ctx_in ;
   __u64 ctx_out ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union __anonunion_602 {
   __u32 start_id ;
   __u32 prog_id ;
   __u32 map_id ;
   __u32 btf_id ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_601 {
   union __anonunion_602 __anonCompField___anonstruct_601_120 ;
   __u32 next_id ;
   __u32 open_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_info_603 {
   __u32 bpf_fd ;
   __u32 info_len ;
   __u64 info ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_query_604 {
   __u32 target_fd ;
   __u32 attach_type ;
   __u32 query_flags ;
   __u32 attach_flags ;
   __u64 prog_ids ;
   __u32 prog_cnt ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_raw_tracepoint_605 {
   __u64 name ;
   __u32 prog_fd ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_606 {
   __u64 btf ;
   __u64 btf_log_buf ;
   __u32 btf_size ;
   __u32 btf_log_size ;
   __u32 btf_log_level ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_task_fd_query_607 {
   __u32 pid ;
   __u32 fd ;
   __u32 flags ;
   __u32 buf_len ;
   __u64 buf ;
   __u32 prog_id ;
   __u32 fd_type ;
   __u64 probe_offset ;
   __u64 probe_addr ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union bpf_attr {
   struct __anonstruct_594 __anonCompField_bpf_attr_114 ;
   struct __anonstruct_595 __anonCompField_bpf_attr_116 ;
   struct __anonstruct_597 __anonCompField_bpf_attr_117 ;
   struct __anonstruct_598 __anonCompField_bpf_attr_118 ;
   struct __anonstruct_599 __anonCompField_bpf_attr_119 ;
   struct __anonstruct_test_600 test ;
   struct __anonstruct_601 __anonCompField_bpf_attr_121 ;
   struct __anonstruct_info_603 info ;
   struct __anonstruct_query_604 query ;
   struct __anonstruct_raw_tracepoint_605 raw_tracepoint ;
   struct __anonstruct_606 __anonCompField_bpf_attr_122 ;
   struct __anonstruct_task_fd_query_607 task_fd_query ;
} __attribute__((__aligned__(8)));
#line 3653  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_func_info {
   __u32 insn_off ;
   __u32 type_id ;
};
#line 3661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_line_info {
   __u32 insn_off ;
   __u32 file_name_off ;
   __u32 line_off ;
   __u32 line_col ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree_latch.h"
struct latch_tree_node {
   struct rb_node node[2U] ;
};
#line 215 
struct bpf_prog_aux;
#line 216 
struct bpf_map;
#line 217 
struct btf;
#line 218 
struct btf_type;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_ops {
   int (*map_alloc_check)(union bpf_attr *) ;
   struct bpf_map *(*map_alloc)(union bpf_attr *) ;
   void (*map_release)(struct bpf_map *, struct file *) ;
   void (*map_free)(struct bpf_map *) ;
   int (*map_get_next_key)(struct bpf_map *, void *, void *) ;
   void (*map_release_uref)(struct bpf_map *) ;
   void *(*map_lookup_elem_sys_only)(struct bpf_map *, void *) ;
   void *(*map_lookup_elem)(struct bpf_map *, void *) ;
   int (*map_update_elem)(struct bpf_map *, void *, void *, u64 ) ;
   int (*map_delete_elem)(struct bpf_map *, void *) ;
   int (*map_push_elem)(struct bpf_map *, void *, u64 ) ;
   int (*map_pop_elem)(struct bpf_map *, void *) ;
   int (*map_peek_elem)(struct bpf_map *, void *) ;
   void *(*map_fd_get_ptr)(struct bpf_map *, struct file *, int ) ;
   void (*map_fd_put_ptr)(void *) ;
   u32 (*map_gen_lookup)(struct bpf_map *, struct bpf_insn *) ;
   u32 (*map_fd_sys_lookup_elem)(void *) ;
   void (*map_seq_show_elem)(struct bpf_map *, void *, struct seq_file *) ;
   int (*map_check_btf)(struct bpf_map *, struct btf *, struct btf_type *, struct btf_type *) ;
   int (*map_poke_track)(struct bpf_map *, struct bpf_prog_aux *) ;
   void (*map_poke_untrack)(struct bpf_map *, struct bpf_prog_aux *) ;
   void (*map_poke_run)(struct bpf_map *, u32 , struct bpf_prog *, struct bpf_prog *) ;
   int (*map_direct_value_addr)(struct bpf_map *, u64 *, u32 ) ;
   int (*map_direct_value_meta)(struct bpf_map *, u64 , u32 *) ;
   int (*map_mmap)(struct bpf_map *, struct vm_area_struct *) ;
};
#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_memory {
   u32 pages ;
   struct user_struct *user ;
};
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map {
   struct bpf_map_ops *ops ;
   struct bpf_map *inner_map_meta ;
   void *security ;
   enum bpf_map_type map_type ;
   u32 key_size ;
   u32 value_size ;
   u32 max_entries ;
   u32 map_flags ;
   int spin_lock_off ;
   u32 id ;
   int numa_node ;
   u32 btf_key_type_id ;
   u32 btf_value_type_id ;
   struct btf *btf ;
   struct bpf_map_memory memory ;
   char name[16U] ;
   bool unpriv_array ;
   bool frozen ;
   atomic64_t refcnt ;
   atomic64_t usercnt ;
   struct work_struct work ;
   struct mutex freeze_mutex ;
   u64 writecnt ;
};
#line 151 
struct bpf_offload_dev;
#line 152 
struct bpf_offloaded_map;
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_dev_ops {
   int (*map_get_next_key)(struct bpf_offloaded_map *, void *, void *) ;
   int (*map_lookup_elem)(struct bpf_offloaded_map *, void *, void *) ;
   int (*map_update_elem)(struct bpf_offloaded_map *, void *, void *, u64 ) ;
   int (*map_delete_elem)(struct bpf_offloaded_map *, void *) ;
};
#line 166  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_offloaded_map {
   struct bpf_map map ;
   struct net_device *netdev ;
   struct bpf_map_dev_ops *dev_ops ;
   void *dev_priv ;
   struct list_head offloads ;
};
#line 327  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_ops {
   int (*test_run)(struct bpf_prog *, union bpf_attr *, union bpf_attr *) ;
};
#line 369  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_offload {
   struct bpf_prog *prog ;
   struct net_device *netdev ;
   struct bpf_offload_dev *offdev ;
   void *dev_priv ;
   struct list_head offloads ;
   bool dev_state ;
   bool opt_failed ;
   void *jited_image ;
   u32 jited_len ;
};
#line 394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_stats {
   u64 cnt ;
   u64 nsecs ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 400  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct btf_func_model {
   u8 ret_size ;
   u8 nr_args ;
   u8 arg_size[12U] ;
};
#line 447 
enum bpf_tramp_prog_type {
    BPF_TRAMP_FENTRY = 0,
    BPF_TRAMP_FEXIT = 1,
    BPF_TRAMP_MAX = 2
};
#line 454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct __anonstruct_func_640 {
   struct btf_func_model model ;
   void *addr ;
   bool ftrace_managed ;
};
#line 454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_trampoline {
   struct hlist_node hlist ;
   struct mutex mutex ;
   refcount_t refcnt ;
   u64 key ;
   struct __anonstruct_func_640 func ;
   struct hlist_head progs_hlist[2U] ;
   int progs_cnt[2U] ;
   void *image ;
   u64 selector ;
};
#line 495  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_func_info_aux {
   bool unreliable ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct __anonstruct_tail_call_642 {
   struct bpf_map *map ;
   u32 key ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
union __anonunion_641 {
   struct __anonstruct_tail_call_642 tail_call ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_jit_poke_descriptor {
   void *ip ;
   union __anonunion_641 __anonCompField_bpf_jit_poke_descriptor_147 ;
   bool ip_stable ;
   u8 adj_off ;
   u16 reason ;
};
#line 517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
union __anonunion_643 {
   struct work_struct work ;
   struct callback_head rcu ;
};
#line 517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_aux {
   atomic64_t refcnt ;
   u32 used_map_cnt ;
   u32 max_ctx_offset ;
   u32 max_pkt_offset ;
   u32 max_tp_access ;
   u32 stack_depth ;
   u32 id ;
   u32 func_cnt ;
   u32 func_idx ;
   u32 attach_btf_id ;
   struct bpf_prog *linked_prog ;
   bool verifier_zext ;
   bool offload_requested ;
   bool attach_btf_trace ;
   bool func_proto_unreliable ;
   enum bpf_tramp_prog_type trampoline_prog_type ;
   struct bpf_trampoline *trampoline ;
   struct hlist_node tramp_hlist ;
   struct btf_type *attach_func_proto ;
   char *attach_func_name ;
   struct bpf_prog **func ;
   void *jit_data ;
   struct bpf_jit_poke_descriptor *poke_tab ;
   u32 size_poke_tab ;
   struct latch_tree_node ksym_tnode ;
   struct list_head ksym_lnode ;
   struct bpf_prog_ops *ops ;
   struct bpf_map **used_maps ;
   struct bpf_prog *prog ;
   struct user_struct *user ;
   u64 load_time ;
   struct bpf_map *cgroup_storage[2U] ;
   char name[16U] ;
   void *security ;
   struct bpf_prog_offload *offload ;
   struct btf *btf ;
   struct bpf_func_info *func_info ;
   struct bpf_func_info_aux *func_info_aux ;
   struct bpf_line_info *linfo ;
   void **jited_linfo ;
   u32 func_info_cnt ;
   u32 nr_linfo ;
   u32 linfo_idx ;
   u32 num_exentries ;
   struct exception_table_entry *extable ;
   struct bpf_prog_stats *stats ;
   union __anonunion_643 __anonCompField_bpf_prog_aux_148 ;
};
#line 686 
struct bpf_cgroup_storage;
#line 686  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_array_item {
   struct bpf_prog *prog ;
   struct bpf_cgroup_storage *cgroup_storage[2U] ;
};
#line 691  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_array {
   struct callback_head rcu ;
   struct bpf_prog_array_item items[0U] ;
};
#line 1335 
struct cgroup;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_cgroup_storage_map;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_storage_buffer {
   struct callback_head rcu ;
   char data[0U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
union __anonunion_645 {
   struct bpf_storage_buffer *buf ;
   void *percpu_buf ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_cgroup_storage {
   union __anonunion_645 __anonCompField_bpf_cgroup_storage_150 ;
   struct bpf_cgroup_storage_map *map ;
   struct bpf_cgroup_storage_key key ;
   struct list_head list ;
   struct rb_node node ;
   struct callback_head rcu ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct cgroup_bpf {
   struct bpf_prog_array *effective[26U] ;
   struct list_head progs[26U] ;
   u32 flags[26U] ;
   struct bpf_prog_array *inactive ;
   struct percpu_ref refcnt ;
   struct work_struct release_work ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_work;
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_worker {
   unsigned int flags ;
   raw_spinlock_t lock ;
   struct list_head work_list ;
   struct list_head delayed_work_list ;
   struct task_struct *task ;
   struct kthread_work *current_work ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_work {
   struct list_head node ;
   void (*func)(struct kthread_work *) ;
   struct kthread_worker *worker ;
   int canceling ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_delayed_work {
   struct kthread_work work ;
   struct timer_list timer ;
};
#line 199 
struct cgroup_subsys_state;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/psi_types.h"
struct psi_group_cpu {
   seqcount_t seq ;
   unsigned int tasks[3U] ;
   u32 state_mask ;
   u32 times[6U] ;
   u64 state_start ;
   u32 times_prev[2U][6U] ;
};
#line 96 
struct psi_group;
#line 128  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/psi_types.h"
struct psi_group {
   struct mutex avgs_lock ;
   struct psi_group_cpu *pcpu ;
   u64 avg_total[5U] ;
   u64 avg_last_update ;
   u64 avg_next_update ;
   struct delayed_work avgs_work ;
   u64 total[2U][5U] ;
   unsigned long avg[5U][3U] ;
   atomic_t poll_scheduled ;
   struct kthread_worker *poll_kworker ;
   struct kthread_delayed_work poll_work ;
   struct mutex trigger_lock ;
   struct list_head triggers ;
   u32 nr_triggers[5U] ;
   u32 poll_states ;
   u64 poll_min_period ;
   u64 polling_total[5U] ;
   u64 polling_next_update ;
   u64 polling_until ;
};
#line 166 
struct cgroup_root;
#line 167 
struct cgroup_subsys;
#line 168 
struct cgroup_taskset;
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_file {
   struct kernfs_node *kn ;
   unsigned long notified_at ;
   struct timer_list notify_timer ;
};
#line 133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_subsys_state {
   struct cgroup *cgroup ;
   struct cgroup_subsys *ss ;
   struct percpu_ref refcnt ;
   struct list_head sibling ;
   struct list_head children ;
   struct list_head rstat_css_node ;
   int id ;
   unsigned int flags ;
   u64 serial_nr ;
   atomic_t online_cnt ;
   struct work_struct destroy_work ;
   struct rcu_work destroy_rwork ;
   struct cgroup_subsys_state *parent ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct css_set {
   struct cgroup_subsys_state *subsys[14U] ;
   refcount_t refcount ;
   struct css_set *dom_cset ;
   struct cgroup *dfl_cgrp ;
   int nr_tasks ;
   struct list_head tasks ;
   struct list_head mg_tasks ;
   struct list_head dying_tasks ;
   struct list_head task_iters ;
   struct list_head e_cset_node[14U] ;
   struct list_head threaded_csets ;
   struct list_head threaded_csets_node ;
   struct hlist_node hlist ;
   struct list_head cgrp_links ;
   struct list_head mg_preload_node ;
   struct list_head mg_node ;
   struct cgroup *mg_src_cgrp ;
   struct cgroup *mg_dst_cgrp ;
   struct css_set *mg_dst_cset ;
   bool dead ;
   struct callback_head callback_head ;
};
#line 279  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_base_stat {
   struct task_cputime cputime ;
};
#line 303  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_rstat_cpu {
   struct u64_stats_sync bsync ;
   struct cgroup_base_stat bstat ;
   struct cgroup_base_stat last_bstat ;
   struct cgroup *updated_children ;
   struct cgroup *updated_next ;
};
#line 332  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_freezer_state {
   bool freeze ;
   int e_freeze ;
   int nr_frozen_descendants ;
   int nr_frozen_tasks ;
};
#line 351  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup {
   struct cgroup_subsys_state self ;
   unsigned long flags ;
   int level ;
   int max_depth ;
   int nr_descendants ;
   int nr_dying_descendants ;
   int max_descendants ;
   int nr_populated_csets ;
   int nr_populated_domain_children ;
   int nr_populated_threaded_children ;
   int nr_threaded_children ;
   struct kernfs_node *kn ;
   struct cgroup_file procs_file ;
   struct cgroup_file events_file ;
   u16 subtree_control ;
   u16 subtree_ss_mask ;
   u16 old_subtree_control ;
   u16 old_subtree_ss_mask ;
   struct cgroup_subsys_state *subsys[14U] ;
   struct cgroup_root *root ;
   struct list_head cset_links ;
   struct list_head e_csets[14U] ;
   struct cgroup *dom_cgrp ;
   struct cgroup *old_dom_cgrp ;
   struct cgroup_rstat_cpu *rstat_cpu ;
   struct list_head rstat_css_list ;
   struct cgroup_base_stat last_bstat ;
   struct cgroup_base_stat bstat ;
   struct prev_cputime prev_cputime ;
   struct list_head pidlists ;
   struct mutex pidlist_mutex ;
   wait_queue_head_t offline_waitq ;
   struct work_struct release_agent_work ;
   struct psi_group psi ;
   struct cgroup_bpf bpf ;
   atomic_t congestion_count ;
   struct cgroup_freezer_state freezer ;
   u64 ancestor_ids[] ;
};
#line 489  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_root {
   struct kernfs_root *kf_root ;
   unsigned int subsys_mask ;
   int hierarchy_id ;
   struct cgroup cgrp ;
   u64 cgrp_ancestor_id_storage ;
   atomic_t nr_cgrps ;
   struct list_head root_list ;
   unsigned int flags ;
   char release_agent_path[4096U] ;
   char name[64U] ;
};
#line 527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cftype {
   char name[64U] ;
   unsigned long private ;
   size_t max_write_len ;
   unsigned int flags ;
   unsigned int file_offset ;
   struct cgroup_subsys *ss ;
   struct list_head node ;
   struct kernfs_ops *kf_ops ;
   int (*open)(struct kernfs_open_file *) ;
   void (*release)(struct kernfs_open_file *) ;
   u64 (*read_u64)(struct cgroup_subsys_state *, struct cftype *) ;
   s64 (*read_s64)(struct cgroup_subsys_state *, struct cftype *) ;
   int (*seq_show)(struct seq_file *, void *) ;
   void *(*seq_start)(struct seq_file *, loff_t *) ;
   void *(*seq_next)(struct seq_file *, void *, loff_t *) ;
   void (*seq_stop)(struct seq_file *, void *) ;
   int (*write_u64)(struct cgroup_subsys_state *, struct cftype *, u64 ) ;
   int (*write_s64)(struct cgroup_subsys_state *, struct cftype *, s64 ) ;
   ssize_t (*write)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   __poll_t (*poll)(struct kernfs_open_file *, struct poll_table_struct *) ;
   struct lock_class_key lockdep_key ;
};
#line 616  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_subsys {
   struct cgroup_subsys_state *(*css_alloc)(struct cgroup_subsys_state *) ;
   int (*css_online)(struct cgroup_subsys_state *) ;
   void (*css_offline)(struct cgroup_subsys_state *) ;
   void (*css_released)(struct cgroup_subsys_state *) ;
   void (*css_free)(struct cgroup_subsys_state *) ;
   void (*css_reset)(struct cgroup_subsys_state *) ;
   void (*css_rstat_flush)(struct cgroup_subsys_state *, int ) ;
   int (*css_extra_stat_show)(struct seq_file *, struct cgroup_subsys_state *) ;
   int (*can_attach)(struct cgroup_taskset *) ;
   void (*cancel_attach)(struct cgroup_taskset *) ;
   void (*attach)(struct cgroup_taskset *) ;
   void (*post_attach)(void) ;
   int (*can_fork)(struct task_struct *) ;
   void (*cancel_fork)(struct task_struct *) ;
   void (*fork)(struct task_struct *) ;
   void (*exit)(struct task_struct *) ;
   void (*release)(struct task_struct *) ;
   void (*bind)(struct cgroup_subsys_state *) ;
   bool early_init : 1 ;
   bool implicit_on_dfl : 1 ;
   bool threaded : 1 ;
   bool broken_hierarchy : 1 ;
   bool warned_broken_hierarchy : 1 ;
   int id ;
   char *name ;
   char *legacy_name ;
   struct cgroup_root *root ;
   struct idr css_idr ;
   struct list_head cfts ;
   struct cftype *dfl_cftypes ;
   struct cftype *legacy_cftypes ;
   unsigned int depends_on ;
};
#line 848  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup.h"
struct cgroup_namespace {
   refcount_t count ;
   struct ns_common ns ;
   struct user_namespace *user_ns ;
   struct ucounts *ucounts ;
   struct css_set *root_cset ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netprio_cgroup.h"
struct netprio_map {
   struct callback_head rcu ;
   u32 priomap_len ;
   u32 priomap[] ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_mem_info {
   u32 type ;
   u32 id ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_rxq_info {
   struct net_device *dev ;
   u32 queue_index ;
   u32 reg_state ;
   struct xdp_mem_info mem ;
} __attribute__((__aligned__(64)));
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_frame {
   void *data ;
   u16 len ;
   u16 headroom ;
   u16 metasize ;
   struct xdp_mem_info mem ;
   struct net_device *dev_rx ;
};
#line 175 
struct netdev_bpf;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/security.h"
struct xfrm_state;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct sighand_struct {
   spinlock_t siglock ;
   refcount_t count ;
   wait_queue_head_t signalfd_wqh ;
   struct k_sigaction action[64U] ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   u64 ac_utime ;
   u64 ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct cpu_itimer {
   u64 expires ;
   u64 incr ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct task_cputime_atomic {
   atomic64_t utime ;
   atomic64_t stime ;
   atomic64_t sum_exec_runtime ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct thread_group_cputimer {
   struct task_cputime_atomic cputime_atomic ;
};
#line 80 
struct tty_struct;
#line 80 
struct autogroup;
#line 80 
struct tty_audit_buf;
#line 80  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct signal_struct {
   refcount_t sigcnt ;
   atomic_t live ;
   int nr_threads ;
   struct list_head thread_head ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   struct hlist_head multiprocess ;
   int group_exit_code ;
   int notify_count ;
   struct task_struct *group_exit_task ;
   int group_stop_count ;
   unsigned int flags ;
   unsigned int is_child_subreaper : 1 ;
   unsigned int has_child_subreaper : 1 ;
   int posix_timer_id ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   ktime_t it_real_incr ;
   struct cpu_itimer it[2U] ;
   struct thread_group_cputimer cputimer ;
   struct posix_cputimers posix_cputimers ;
   struct pid *pids[4U] ;
   struct pid *tty_old_pgrp ;
   int leader ;
   struct tty_struct *tty ;
   struct autogroup *autogroup ;
   seqlock_t stats_lock ;
   u64 utime ;
   u64 stime ;
   u64 cutime ;
   u64 cstime ;
   u64 gtime ;
   u64 cgtime ;
   struct prev_cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   unsigned long maxrss ;
   unsigned long cmaxrss ;
   struct task_io_accounting ioac ;
   unsigned long long sum_sched_runtime ;
   struct rlimit rlim[16U] ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   struct tty_audit_buf *tty_audit_buf ;
   bool oom_flag_origin ;
   short oom_score_adj ;
   short oom_score_adj_min ;
   struct mm_struct *oom_mm ;
   struct mutex cred_guard_mutex ;
} __attribute__((__designated_init__));
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netlink.h"
struct nlmsghdr {
   __u32 nlmsg_len ;
   __u16 nlmsg_type ;
   __u16 nlmsg_flags ;
   __u32 nlmsg_seq ;
   __u32 nlmsg_pid ;
};
#line 211  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netlink.h"
struct nlattr {
   __u16 nla_len ;
   __u16 nla_type ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
struct netlink_ext_ack {
   char *_msg ;
   struct nlattr *bad_attr ;
   u8 cookie[20U] ;
   u8 cookie_len ;
};
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
union __anonunion_670 {
   u8 ctx[48U] ;
   long args[6U] ;
};
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
struct netlink_callback {
   struct sk_buff *skb ;
   struct nlmsghdr *nlh ;
   int (*dump)(struct sk_buff *, struct netlink_callback *) ;
   int (*done)(struct netlink_callback *) ;
   void *data ;
   struct module *module ;
   struct netlink_ext_ack *extack ;
   u16 family ;
   u16 min_dump_alloc ;
   bool strict_check ;
   u16 answer_flags ;
   unsigned int prev_seq ;
   unsigned int seq ;
   union __anonunion_670 __anonCompField_netlink_callback_153 ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/neighbour.h"
struct ndmsg {
   __u8 ndm_family ;
   __u8 ndm_pad1 ;
   __u16 ndm_pad2 ;
   __s32 ndm_ifindex ;
   __u16 ndm_state ;
   __u8 ndm_flags ;
   __u8 ndm_type ;
};
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_link.h"
struct rtnl_link_stats64 {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 rx_errors ;
   __u64 tx_errors ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
   __u64 multicast ;
   __u64 collisions ;
   __u64 rx_length_errors ;
   __u64 rx_over_errors ;
   __u64 rx_crc_errors ;
   __u64 rx_frame_errors ;
   __u64 rx_fifo_errors ;
   __u64 rx_missed_errors ;
   __u64 tx_aborted_errors ;
   __u64 tx_carrier_errors ;
   __u64 tx_fifo_errors ;
   __u64 tx_heartbeat_errors ;
   __u64 tx_window_errors ;
   __u64 rx_compressed ;
   __u64 tx_compressed ;
   __u64 rx_nohandler ;
};
#line 753  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_link.h"
struct ifla_vf_guid {
   __u32 vf ;
   __u64 guid ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_link.h"
struct ifla_vf_stats {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 broadcast ;
   __u64 multicast ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_link.h"
struct ifla_vf_info {
   __u32 vf ;
   __u8 mac[32U] ;
   __u32 vlan ;
   __u32 qos ;
   __u32 spoofchk ;
   __u32 linkstate ;
   __u32 min_tx_rate ;
   __u32 max_tx_rate ;
   __u32 rss_query_en ;
   __u32 trusted ;
   __be16 vlan_proto ;
};
#line 118  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hashtable.h"
struct netpoll_info;
#line 119 
struct phy_device;
#line 120 
struct dsa_port;
#line 121 
struct sfp_bus;
#line 122 
struct wireless_dev;
#line 123 
struct wpan_dev;
#line 124 
struct mpls_dev;
#line 125 
struct udp_tunnel_info;
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
enum netdev_tx {
    __NETDEV_TX_MIN = -2147483648,
    NETDEV_TX_OK = 0,
    NETDEV_TX_BUSY = 16
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef enum netdev_tx netdev_tx_t;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device_stats {
   unsigned long rx_packets ;
   unsigned long tx_packets ;
   unsigned long rx_bytes ;
   unsigned long tx_bytes ;
   unsigned long rx_errors ;
   unsigned long tx_errors ;
   unsigned long rx_dropped ;
   unsigned long tx_dropped ;
   unsigned long multicast ;
   unsigned long collisions ;
   unsigned long rx_length_errors ;
   unsigned long rx_over_errors ;
   unsigned long rx_crc_errors ;
   unsigned long rx_frame_errors ;
   unsigned long rx_fifo_errors ;
   unsigned long rx_missed_errors ;
   unsigned long tx_aborted_errors ;
   unsigned long tx_carrier_errors ;
   unsigned long tx_fifo_errors ;
   unsigned long tx_heartbeat_errors ;
   unsigned long tx_window_errors ;
   unsigned long rx_compressed ;
   unsigned long tx_compressed ;
};
#line 217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_hw_addr_list {
   struct list_head list ;
   int count ;
};
#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct hh_cache {
   unsigned int hh_len ;
   seqlock_t hh_lock ;
   unsigned long hh_data[16U] ;
};
#line 263  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct header_ops {
   int (*create)(struct sk_buff *, struct net_device *, unsigned short , void *, void *, unsigned int ) ;
   int (*parse)(struct sk_buff *, unsigned char *) ;
   int (*cache)(struct neighbour *, struct hh_cache *, __be16 ) ;
   void (*cache_update)(struct hh_cache *, struct net_device *, unsigned char *) ;
   bool (*validate)(char *, unsigned int ) ;
   __be16 (*parse_protocol)(struct sk_buff *) ;
};
#line 372 
enum rx_handler_result {
    RX_HANDLER_CONSUMED = 0,
    RX_HANDLER_ANOTHER = 1,
    RX_HANDLER_EXACT = 2,
    RX_HANDLER_PASS = 3
};
#line 379  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef enum rx_handler_result rx_handler_result_t;
#line 421  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef rx_handler_result_t rx_handler_func_t(struct sk_buff **);
#line 589 
struct xdp_umem;
#line 589  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_queue {
   struct net_device *dev ;
   struct Qdisc *qdisc ;
   struct Qdisc *qdisc_sleeping ;
   struct kobject kobj ;
   int numa_node ;
   unsigned long tx_maxrate ;
   unsigned long trans_timeout ;
   struct net_device *sb_dev ;
   struct xdp_umem *umem ;
   spinlock_t _xmit_lock ;
   int xmit_lock_owner ;
   unsigned long trans_start ;
   unsigned long state ;
   struct dql dql ;
} __attribute__((__aligned__(64)));
#line 662  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_map {
   unsigned int len ;
   struct callback_head rcu ;
   u16 cpus[0U] ;
};
#line 674  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_dev_flow {
   u16 cpu ;
   u16 filter ;
   unsigned int last_qtail ;
};
#line 684  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_dev_flow_table {
   unsigned int mask ;
   struct callback_head rcu ;
   struct rps_dev_flow flows[0U] ;
};
#line 736  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_rx_queue {
   struct rps_map *rps_map ;
   struct rps_dev_flow_table *rps_flow_table ;
   struct kobject kobj ;
   struct net_device *dev ;
   struct xdp_rxq_info xdp_rxq ;
   struct xdp_umem *umem ;
} __attribute__((__aligned__(64)));
#line 764  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xps_map {
   unsigned int len ;
   unsigned int alloc_len ;
   struct callback_head rcu ;
   u16 queues[0U] ;
};
#line 777  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xps_dev_maps {
   struct callback_head rcu ;
   struct xps_map *attr_map[0U] ;
};
#line 793  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_tc_txq {
   u16 count ;
   u16 offset ;
};
#line 803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_fcoe_hbainfo {
   char manufacturer[64U] ;
   char serial_number[64U] ;
   char hardware_version[64U] ;
   char driver_version[64U] ;
   char optionrom_version[64U] ;
   char firmware_version[64U] ;
   char model[256U] ;
   char model_description[256U] ;
};
#line 820  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_phys_item_id {
   unsigned char id[32U] ;
   unsigned char id_len ;
};
#line 833 
enum tc_setup_type {
    TC_SETUP_QDISC_MQPRIO = 0,
    TC_SETUP_CLSU32 = 1,
    TC_SETUP_CLSFLOWER = 2,
    TC_SETUP_CLSMATCHALL = 3,
    TC_SETUP_CLSBPF = 4,
    TC_SETUP_BLOCK = 5,
    TC_SETUP_QDISC_CBS = 6,
    TC_SETUP_QDISC_RED = 7,
    TC_SETUP_QDISC_PRIO = 8,
    TC_SETUP_QDISC_MQ = 9,
    TC_SETUP_QDISC_ETF = 10,
    TC_SETUP_ROOT_QDISC = 11,
    TC_SETUP_QDISC_GRED = 12,
    TC_SETUP_QDISC_TAPRIO = 13,
    TC_SETUP_FT = 14
};
#line 851 
enum bpf_netdev_command {
    XDP_SETUP_PROG = 0,
    XDP_SETUP_PROG_HW = 1,
    XDP_QUERY_PROG = 2,
    XDP_QUERY_PROG_HW = 3,
    BPF_OFFLOAD_MAP_ALLOC = 4,
    BPF_OFFLOAD_MAP_FREE = 5,
    XDP_SETUP_XSK_UMEM = 6
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_675 {
   u32 flags ;
   struct bpf_prog *prog ;
   struct netlink_ext_ack *extack ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_676 {
   u32 prog_id ;
   u32 prog_flags ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_677 {
   struct bpf_offloaded_map *offmap ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_xsk_678 {
   struct xdp_umem *umem ;
   u16 queue_id ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
union __anonunion_674 {
   struct __anonstruct_675 __anonCompField___anonunion_674_155 ;
   struct __anonstruct_676 __anonCompField___anonunion_674_156 ;
   struct __anonstruct_677 __anonCompField___anonunion_674_157 ;
   struct __anonstruct_xsk_678 xsk ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_bpf {
   enum bpf_netdev_command command ;
   union __anonunion_674 __anonCompField_netdev_bpf_158 ;
};
#line 911  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xfrmdev_ops {
   int (*xdo_dev_state_add)(struct xfrm_state *) ;
   void (*xdo_dev_state_delete)(struct xfrm_state *) ;
   void (*xdo_dev_state_free)(struct xfrm_state *) ;
   bool (*xdo_dev_offload_ok)(struct sk_buff *, struct xfrm_state *) ;
   void (*xdo_dev_state_advance_esn)(struct xfrm_state *) ;
};
#line 921  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct dev_ifalias {
   struct callback_head rcuhead ;
   char ifalias[] ;
};
#line 926 
struct tlsdev_ops;
#line 929  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_name_node {
   struct hlist_node hlist ;
   struct list_head list ;
   struct net_device *dev ;
   char *name ;
};
#line 1257 
struct devlink_port;
#line 1257  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device_ops {
   int (*ndo_init)(struct net_device *) ;
   void (*ndo_uninit)(struct net_device *) ;
   int (*ndo_open)(struct net_device *) ;
   int (*ndo_stop)(struct net_device *) ;
   netdev_tx_t (*ndo_start_xmit)(struct sk_buff *, struct net_device *) ;
   netdev_features_t (*ndo_features_check)(struct sk_buff *, struct net_device *, netdev_features_t ) ;
   u16 (*ndo_select_queue)(struct net_device *, struct sk_buff *, struct net_device *) ;
   void (*ndo_change_rx_flags)(struct net_device *, int ) ;
   void (*ndo_set_rx_mode)(struct net_device *) ;
   int (*ndo_set_mac_address)(struct net_device *, void *) ;
   int (*ndo_validate_addr)(struct net_device *) ;
   int (*ndo_do_ioctl)(struct net_device *, struct ifreq *, int ) ;
   int (*ndo_set_config)(struct net_device *, struct ifmap *) ;
   int (*ndo_change_mtu)(struct net_device *, int ) ;
   int (*ndo_neigh_setup)(struct net_device *, struct neigh_parms *) ;
   void (*ndo_tx_timeout)(struct net_device *) ;
   void (*ndo_get_stats64)(struct net_device *, struct rtnl_link_stats64 *) ;
   bool (*ndo_has_offload_stats)(struct net_device *, int ) ;
   int (*ndo_get_offload_stats)(int , struct net_device *, void *) ;
   struct net_device_stats *(*ndo_get_stats)(struct net_device *) ;
   int (*ndo_vlan_rx_add_vid)(struct net_device *, __be16 , u16 ) ;
   int (*ndo_vlan_rx_kill_vid)(struct net_device *, __be16 , u16 ) ;
   void (*ndo_poll_controller)(struct net_device *) ;
   int (*ndo_netpoll_setup)(struct net_device *, struct netpoll_info *) ;
   void (*ndo_netpoll_cleanup)(struct net_device *) ;
   int (*ndo_set_vf_mac)(struct net_device *, int , u8 *) ;
   int (*ndo_set_vf_vlan)(struct net_device *, int , u16 , u8 , __be16 ) ;
   int (*ndo_set_vf_rate)(struct net_device *, int , int , int ) ;
   int (*ndo_set_vf_spoofchk)(struct net_device *, int , bool ) ;
   int (*ndo_set_vf_trust)(struct net_device *, int , bool ) ;
   int (*ndo_get_vf_config)(struct net_device *, int , struct ifla_vf_info *) ;
   int (*ndo_set_vf_link_state)(struct net_device *, int , int ) ;
   int (*ndo_get_vf_stats)(struct net_device *, int , struct ifla_vf_stats *) ;
   int (*ndo_set_vf_port)(struct net_device *, int , struct nlattr **) ;
   int (*ndo_get_vf_port)(struct net_device *, int , struct sk_buff *) ;
   int (*ndo_get_vf_guid)(struct net_device *, int , struct ifla_vf_guid *, struct ifla_vf_guid *) ;
   int (*ndo_set_vf_guid)(struct net_device *, int , u64 , int ) ;
   int (*ndo_set_vf_rss_query_en)(struct net_device *, int , bool ) ;
   int (*ndo_setup_tc)(struct net_device *, enum tc_setup_type , void *) ;
   int (*ndo_fcoe_enable)(struct net_device *) ;
   int (*ndo_fcoe_disable)(struct net_device *) ;
   int (*ndo_fcoe_ddp_setup)(struct net_device *, u16 , struct scatterlist *, unsigned int ) ;
   int (*ndo_fcoe_ddp_done)(struct net_device *, u16 ) ;
   int (*ndo_fcoe_ddp_target)(struct net_device *, u16 , struct scatterlist *, unsigned int ) ;
   int (*ndo_fcoe_get_hbainfo)(struct net_device *, struct netdev_fcoe_hbainfo *) ;
   int (*ndo_fcoe_get_wwn)(struct net_device *, u64 *, int ) ;
   int (*ndo_rx_flow_steer)(struct net_device *, struct sk_buff *, u16 , u32 ) ;
   int (*ndo_add_slave)(struct net_device *, struct net_device *, struct netlink_ext_ack *) ;
   int (*ndo_del_slave)(struct net_device *, struct net_device *) ;
   netdev_features_t (*ndo_fix_features)(struct net_device *, netdev_features_t ) ;
   int (*ndo_set_features)(struct net_device *, netdev_features_t ) ;
   int (*ndo_neigh_construct)(struct net_device *, struct neighbour *) ;
   void (*ndo_neigh_destroy)(struct net_device *, struct neighbour *) ;
   int (*ndo_fdb_add)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char *, u16 , u16 , struct netlink_ext_ack *) ;
   int (*ndo_fdb_del)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char *, u16 ) ;
   int (*ndo_fdb_dump)(struct sk_buff *, struct netlink_callback *, struct net_device *, struct net_device *, int *) ;
   int (*ndo_fdb_get)(struct sk_buff *, struct nlattr **, struct net_device *, unsigned char *, u16 , u32 , u32 , struct netlink_ext_ack *) ;
   int (*ndo_bridge_setlink)(struct net_device *, struct nlmsghdr *, u16 , struct netlink_ext_ack *) ;
   int (*ndo_bridge_getlink)(struct sk_buff *, u32 , u32 , struct net_device *, u32 , int ) ;
   int (*ndo_bridge_dellink)(struct net_device *, struct nlmsghdr *, u16 ) ;
   int (*ndo_change_carrier)(struct net_device *, bool ) ;
   int (*ndo_get_phys_port_id)(struct net_device *, struct netdev_phys_item_id *) ;
   int (*ndo_get_port_parent_id)(struct net_device *, struct netdev_phys_item_id *) ;
   int (*ndo_get_phys_port_name)(struct net_device *, char *, size_t ) ;
   void (*ndo_udp_tunnel_add)(struct net_device *, struct udp_tunnel_info *) ;
   void (*ndo_udp_tunnel_del)(struct net_device *, struct udp_tunnel_info *) ;
   void *(*ndo_dfwd_add_station)(struct net_device *, struct net_device *) ;
   void (*ndo_dfwd_del_station)(struct net_device *, void *) ;
   int (*ndo_set_tx_maxrate)(struct net_device *, int , u32 ) ;
   int (*ndo_get_iflink)(struct net_device *) ;
   int (*ndo_change_proto_down)(struct net_device *, bool ) ;
   int (*ndo_fill_metadata_dst)(struct net_device *, struct sk_buff *) ;
   void (*ndo_set_rx_headroom)(struct net_device *, int ) ;
   int (*ndo_bpf)(struct net_device *, struct netdev_bpf *) ;
   int (*ndo_xdp_xmit)(struct net_device *, int , struct xdp_frame **, u32 ) ;
   int (*ndo_xsk_wakeup)(struct net_device *, u32 , u32 ) ;
   struct devlink_port *(*ndo_get_devlink_port)(struct net_device *) ;
};
#line 1492 
enum ldv_14504 {
    NETREG_UNINITIALIZED = 0,
    NETREG_REGISTERED = 1,
    NETREG_UNREGISTERING = 2,
    NETREG_UNREGISTERED = 3,
    NETREG_RELEASED = 4,
    NETREG_DUMMY = 5
};
#line 1501 
enum ldv_14505 {
    RTNL_LINK_INITIALIZED = 0,
    RTNL_LINK_INITIALIZING = 1
};
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_adj_list_679 {
   struct list_head upper ;
   struct list_head lower ;
};
#line 1795 
struct iw_handler_def;
#line 1795 
struct iw_public_data;
#line 1795 
struct vlan_info;
#line 1795 
struct tipc_bearer;
#line 1795 
struct in_device;
#line 1795 
struct dn_dev;
#line 1795 
struct cpu_rmap;
#line 1795 
struct pcpu_lstats;
#line 1795 
struct pcpu_sw_netstats;
#line 1795 
struct pcpu_dstats;
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
union __anonunion_680 {
   void *ml_priv ;
   struct pcpu_lstats *lstats ;
   struct pcpu_sw_netstats *tstats ;
   struct pcpu_dstats *dstats ;
};
#line 1795 
struct garp_port;
#line 1795 
struct mrp_port;
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device {
   char name[16U] ;
   struct netdev_name_node *name_node ;
   struct dev_ifalias *ifalias ;
   unsigned long mem_end ;
   unsigned long mem_start ;
   unsigned long base_addr ;
   int irq ;
   unsigned long state ;
   struct list_head dev_list ;
   struct list_head napi_list ;
   struct list_head unreg_list ;
   struct list_head close_list ;
   struct list_head ptype_all ;
   struct list_head ptype_specific ;
   struct __anonstruct_adj_list_679 adj_list ;
   netdev_features_t features ;
   netdev_features_t hw_features ;
   netdev_features_t wanted_features ;
   netdev_features_t vlan_features ;
   netdev_features_t hw_enc_features ;
   netdev_features_t mpls_features ;
   netdev_features_t gso_partial_features ;
   int ifindex ;
   int group ;
   struct net_device_stats stats ;
   atomic_long_t rx_dropped ;
   atomic_long_t tx_dropped ;
   atomic_long_t rx_nohandler ;
   atomic_t carrier_up_count ;
   atomic_t carrier_down_count ;
   struct iw_handler_def *wireless_handlers ;
   struct iw_public_data *wireless_data ;
   struct net_device_ops *netdev_ops ;
   struct ethtool_ops *ethtool_ops ;
   struct l3mdev_ops *l3mdev_ops ;
   struct ndisc_ops *ndisc_ops ;
   struct xfrmdev_ops *xfrmdev_ops ;
   struct tlsdev_ops *tlsdev_ops ;
   struct header_ops *header_ops ;
   unsigned int flags ;
   unsigned int priv_flags ;
   unsigned short gflags ;
   unsigned short padded ;
   unsigned char operstate ;
   unsigned char link_mode ;
   unsigned char if_port ;
   unsigned char dma ;
   unsigned int mtu ;
   unsigned int min_mtu ;
   unsigned int max_mtu ;
   unsigned short type ;
   unsigned short hard_header_len ;
   unsigned char min_header_len ;
   unsigned short needed_headroom ;
   unsigned short needed_tailroom ;
   unsigned char perm_addr[32U] ;
   unsigned char addr_assign_type ;
   unsigned char addr_len ;
   unsigned char upper_level ;
   unsigned char lower_level ;
   unsigned short neigh_priv_len ;
   unsigned short dev_id ;
   unsigned short dev_port ;
   spinlock_t addr_list_lock ;
   unsigned char name_assign_type ;
   bool uc_promisc ;
   struct netdev_hw_addr_list uc ;
   struct netdev_hw_addr_list mc ;
   struct netdev_hw_addr_list dev_addrs ;
   struct kset *queues_kset ;
   unsigned int promiscuity ;
   unsigned int allmulti ;
   struct vlan_info *vlan_info ;
   struct dsa_port *dsa_ptr ;
   struct tipc_bearer *tipc_ptr ;
   void *atalk_ptr ;
   struct in_device *ip_ptr ;
   struct dn_dev *dn_ptr ;
   struct inet6_dev *ip6_ptr ;
   void *ax25_ptr ;
   struct wireless_dev *ieee80211_ptr ;
   struct wpan_dev *ieee802154_ptr ;
   struct mpls_dev *mpls_ptr ;
   unsigned char *dev_addr ;
   struct netdev_rx_queue *_rx ;
   unsigned int num_rx_queues ;
   unsigned int real_num_rx_queues ;
   struct bpf_prog *xdp_prog ;
   unsigned long gro_flush_timeout ;
   rx_handler_func_t *rx_handler ;
   void *rx_handler_data ;
   struct mini_Qdisc *miniq_ingress ;
   struct netdev_queue *ingress_queue ;
   struct nf_hook_entries *nf_hooks_ingress ;
   unsigned char broadcast[32U] ;
   struct cpu_rmap *rx_cpu_rmap ;
   struct hlist_node index_hlist ;
   struct netdev_queue *_tx ;
   unsigned int num_tx_queues ;
   unsigned int real_num_tx_queues ;
   struct Qdisc *qdisc ;
   struct hlist_head qdisc_hash[16U] ;
   unsigned int tx_queue_len ;
   spinlock_t tx_global_lock ;
   int watchdog_timeo ;
   struct xps_dev_maps *xps_cpus_map ;
   struct xps_dev_maps *xps_rxqs_map ;
   struct mini_Qdisc *miniq_egress ;
   struct timer_list watchdog_timer ;
   int *pcpu_refcnt ;
   struct list_head todo_list ;
   struct list_head link_watch_list ;
   enum ldv_14504 reg_state : 8 ;
   bool dismantle ;
   enum ldv_14505 rtnl_link_state : 16 ;
   bool needs_free_netdev ;
   void (*priv_destructor)(struct net_device *) ;
   struct netpoll_info *npinfo ;
   possible_net_t nd_net ;
   union __anonunion_680 __anonCompField_net_device_159 ;
   struct garp_port *garp_port ;
   struct mrp_port *mrp_port ;
   struct device dev ;
   struct attribute_group *sysfs_groups[4U] ;
   struct attribute_group *sysfs_rx_queue_group ;
   struct rtnl_link_ops *rtnl_link_ops ;
   unsigned int gso_max_size ;
   u16 gso_max_segs ;
   struct dcbnl_rtnl_ops *dcbnl_ops ;
   s16 num_tc ;
   struct netdev_tc_txq tc_to_txq[16U] ;
   u8 prio_tc_map[16U] ;
   unsigned int fcoe_ddp_xid ;
   struct netprio_map *priomap ;
   struct phy_device *phydev ;
   struct sfp_bus *sfp_bus ;
   struct lock_class_key qdisc_tx_busylock_key ;
   struct lock_class_key qdisc_running_key ;
   struct lock_class_key qdisc_xmit_lock_key ;
   struct lock_class_key addr_list_lock_key ;
   bool proto_down ;
   unsigned int wol_enabled : 1 ;
};
#line 2400  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct pcpu_sw_netstats {
   u64 rx_packets ;
   u64 rx_bytes ;
   u64 tx_packets ;
   u64 tx_bytes ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(32)));
#line 2408  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct pcpu_lstats {
   u64_stats_t packets ;
   u64_stats_t bytes ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 595  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-reg.h"
struct vxge_hw_legacy_reg {
   u8 unused00010[16U] ;
   u64 toc_swapper_fb ;
   u64 pifm_rd_swap_en ;
   u64 pifm_rd_flip_en ;
   u64 pifm_wr_swap_en ;
   u64 pifm_wr_flip_en ;
   u64 toc_first_pointer ;
   u64 host_access_en ;
} __attribute__((__packed__));
#line 616  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-reg.h"
struct vxge_hw_toc_reg {
   u8 unused00050[80U] ;
   u64 toc_common_pointer ;
   u64 toc_memrepair_pointer ;
   u64 toc_pcicfgmgmt_pointer[17U] ;
   u8 unused001e0[248U] ;
   u64 toc_mrpcim_pointer ;
   u64 toc_srpcim_pointer[17U] ;
   u8 unused00278[8U] ;
   u64 toc_vpmgmt_pointer[17U] ;
   u8 unused00390[144U] ;
   u64 toc_vpath_pointer[17U] ;
   u8 unused004a0[136U] ;
   u64 toc_kdfc ;
   u64 toc_usdc ;
   u64 toc_kdfc_vpath_stride ;
   u64 toc_kdfc_fifo_stride ;
} __attribute__((__packed__));
#line 657  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-reg.h"
struct vxge_hw_common_reg {
   u8 unused00a00[2560U] ;
   u64 prc_status1 ;
   u64 rxdcm_reset_in_progress ;
   u64 replicq_flush_in_progress ;
   u64 rxpe_cmds_reset_in_progress ;
   u64 mxp_cmds_reset_in_progress ;
   u64 noffload_reset_in_progress ;
   u64 rd_req_in_progress ;
   u64 rd_req_outstanding ;
   u64 kdfc_reset_in_progress ;
   u8 unused00b00[184U] ;
   u64 one_cfg_vp ;
   u64 one_common ;
   u8 unused00b80[112U] ;
   u64 tim_int_en ;
   u64 tim_set_int_en ;
   u64 tim_clr_int_en ;
   u64 tim_mask_int_during_reset ;
   u64 tim_reset_in_progress ;
   u64 tim_outstanding_bmap ;
   u8 unused00c00[80U] ;
   u64 msg_reset_in_progress ;
   u64 msg_mxp_mr_ready ;
   u64 msg_uxp_mr_ready ;
   u64 msg_dmq_noni_rtl_prefetch ;
   u64 msg_umq_rtl_bwr ;
   u8 unused00d00[216U] ;
   u64 cmn_rsthdlr_cfg0 ;
   u64 cmn_rsthdlr_cfg1 ;
   u64 cmn_rsthdlr_cfg2 ;
   u64 cmn_rsthdlr_cfg3 ;
   u64 cmn_rsthdlr_cfg4 ;
   u8 unused00d40[24U] ;
   u64 cmn_rsthdlr_cfg8 ;
   u64 stats_cfg0 ;
   u8 unused00da8[88U] ;
   u64 clear_msix_mask_vect[4U] ;
   u64 set_msix_mask_vect[4U] ;
   u64 clear_msix_mask_all_vect ;
   u64 set_msix_mask_all_vect ;
   u64 mask_vector[4U] ;
   u64 msix_pending_vector[4U] ;
   u64 clr_msix_one_shot_vec[4U] ;
   u64 titan_asic_id ;
   u64 titan_general_int_status ;
   u8 unused00e70[8U] ;
   u64 titan_mask_all_int ;
   u8 unused00e80[8U] ;
   u64 tim_int_status0 ;
   u64 tim_int_mask0 ;
   u64 tim_int_status1 ;
   u64 tim_int_mask1 ;
   u64 rti_int_status ;
   u64 rti_int_mask ;
   u64 adapter_status ;
   u64 gen_ctrl ;
   u8 unused00ed0[16U] ;
   u64 adapter_ready ;
   u64 outstanding_read ;
   u64 vpath_rst_in_prog ;
   u64 vpath_reg_modified ;
   u8 unused00fc0[208U] ;
   u64 cp_reset_in_progress ;
   u8 unused01080[184U] ;
   u64 xgmac_ready ;
   u8 unused010c0[56U] ;
   u64 fbif_ready ;
   u8 unused01100[56U] ;
   u64 vplane_assignments ;
   u64 vpath_assignments ;
   u64 resource_assignments ;
   u64 host_type_assignments ;
   u8 unused01128[8U] ;
   u64 max_resource_assignments ;
   u64 pf_vpath_assignments ;
   u8 unused01200[200U] ;
   u64 rts_access_icmp ;
   u64 rts_access_tcpsyn ;
   u64 rts_access_zl4pyld ;
   u64 rts_access_l4prtcl_tcp ;
   u64 rts_access_l4prtcl_udp ;
   u64 rts_access_l4prtcl_flex ;
   u64 rts_access_ipfrag ;
} __attribute__((__packed__));
#line 889  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-reg.h"
struct vxge_hw_mrpcim_reg {
   u64 g3fbct_int_status ;
   u64 g3fbct_int_mask ;
   u64 g3fbct_err_reg ;
   u64 g3fbct_err_mask ;
   u64 g3fbct_err_alarm ;
   u8 unused00a00[2520U] ;
   u64 wrdma_int_status ;
   u64 wrdma_int_mask ;
   u64 rc_alarm_reg ;
   u64 rc_alarm_mask ;
   u64 rc_alarm_alarm ;
   u64 rxdrm_sm_err_reg ;
   u64 rxdrm_sm_err_mask ;
   u64 rxdrm_sm_err_alarm ;
   u64 rxdcm_sm_err_reg ;
   u64 rxdcm_sm_err_mask ;
   u64 rxdcm_sm_err_alarm ;
   u64 rxdwm_sm_err_reg ;
   u64 rxdwm_sm_err_mask ;
   u64 rxdwm_sm_err_alarm ;
   u64 rda_err_reg ;
   u64 rda_err_mask ;
   u64 rda_err_alarm ;
   u64 rda_ecc_db_reg ;
   u64 rda_ecc_db_mask ;
   u64 rda_ecc_db_alarm ;
   u64 rda_ecc_sg_reg ;
   u64 rda_ecc_sg_mask ;
   u64 rda_ecc_sg_alarm ;
   u64 rqa_err_reg ;
   u64 rqa_err_mask ;
   u64 rqa_err_alarm ;
   u64 frf_alarm_reg ;
   u64 frf_alarm_mask ;
   u64 frf_alarm_alarm ;
   u64 rocrc_alarm_reg ;
   u64 rocrc_alarm_mask ;
   u64 rocrc_alarm_alarm ;
   u64 wde0_alarm_reg ;
   u64 wde0_alarm_mask ;
   u64 wde0_alarm_alarm ;
   u64 wde1_alarm_reg ;
   u64 wde1_alarm_mask ;
   u64 wde1_alarm_alarm ;
   u64 wde2_alarm_reg ;
   u64 wde2_alarm_mask ;
   u64 wde2_alarm_alarm ;
   u64 wde3_alarm_reg ;
   u64 wde3_alarm_mask ;
   u64 wde3_alarm_alarm ;
   u8 unused00be8[136U] ;
   u64 rx_w_round_robin_0 ;
   u64 rx_w_round_robin_1 ;
   u64 rx_w_round_robin_2 ;
   u64 rx_w_round_robin_3 ;
   u64 rx_w_round_robin_4 ;
   u64 rx_w_round_robin_5 ;
   u64 rx_w_round_robin_6 ;
   u64 rx_w_round_robin_7 ;
   u64 rx_w_round_robin_8 ;
   u64 rx_w_round_robin_9 ;
   u64 rx_w_round_robin_10 ;
   u64 rx_w_round_robin_11 ;
   u64 rx_w_round_robin_12 ;
   u64 rx_w_round_robin_13 ;
   u64 rx_w_round_robin_14 ;
   u64 rx_w_round_robin_15 ;
   u64 rx_w_round_robin_16 ;
   u64 rx_w_round_robin_17 ;
   u64 rx_w_round_robin_18 ;
   u64 rx_w_round_robin_19 ;
   u64 rx_w_round_robin_20 ;
   u64 rx_w_round_robin_21 ;
   u64 rx_queue_priority_0 ;
   u64 rx_queue_priority_1 ;
   u64 rx_queue_priority_2 ;
   u8 unused00cc8[24U] ;
   u64 replication_queue_priority ;
   u64 rx_queue_select ;
   u64 rqa_vpbp_ctrl ;
   u64 rx_multi_cast_ctrl ;
   u64 wde_prm_ctrl ;
   u64 noa_ctrl ;
   u64 phase_cfg ;
   u64 rcq_bypq_cfg ;
   u8 unused00e00[248U] ;
   u64 doorbell_int_status ;
   u64 doorbell_int_mask ;
   u64 kdfc_err_reg ;
   u64 kdfc_err_mask ;
   u64 kdfc_err_reg_alarm ;
   u8 unused00e40[24U] ;
   u64 kdfc_vp_partition_0 ;
   u64 kdfc_vp_partition_1 ;
   u64 kdfc_vp_partition_2 ;
   u64 kdfc_vp_partition_3 ;
   u64 kdfc_vp_partition_4 ;
   u64 kdfc_vp_partition_5 ;
   u64 kdfc_vp_partition_6 ;
   u64 kdfc_vp_partition_7 ;
   u64 kdfc_vp_partition_8 ;
   u64 kdfc_w_round_robin_0 ;
   u8 unused0f28[152U] ;
   u64 kdfc_w_round_robin_20 ;
   u8 unused0fc8[152U] ;
   u64 kdfc_w_round_robin_40 ;
   u8 unused1068[152U] ;
   u64 kdfc_entry_type_sel_0 ;
   u64 kdfc_entry_type_sel_1 ;
   u64 kdfc_fifo_0_ctrl ;
   u8 unused1100[128U] ;
   u64 kdfc_fifo_17_ctrl ;
   u8 unused1600[1272U] ;
   u64 rxmac_int_status ;
   u64 rxmac_int_mask ;
   u8 unused01618[8U] ;
   u64 rxmac_gen_err_reg ;
   u64 rxmac_gen_err_mask ;
   u64 rxmac_gen_err_alarm ;
   u64 rxmac_ecc_err_reg ;
   u64 rxmac_ecc_err_mask ;
   u64 rxmac_ecc_err_alarm ;
   u64 rxmac_various_err_reg ;
   u64 rxmac_various_err_mask ;
   u64 rxmac_various_err_alarm ;
   u64 rxmac_gen_cfg ;
   u64 rxmac_authorize_all_addr ;
   u64 rxmac_authorize_all_vid ;
   u8 unused016c0[72U] ;
   u64 rxmac_red_rate_repl_queue ;
   u8 unused016e0[24U] ;
   u64 rxmac_cfg0_port[3U] ;
   u8 unused01710[24U] ;
   u64 rxmac_cfg2_port[3U] ;
   u64 rxmac_pause_cfg_port[3U] ;
   u8 unused01758[24U] ;
   u64 rxmac_red_cfg0_port[3U] ;
   u64 rxmac_red_cfg1_port[3U] ;
   u64 rxmac_red_cfg2_port[3U] ;
   u64 rxmac_link_util_port[3U] ;
   u8 unused017d0[24U] ;
   u64 rxmac_status_port[3U] ;
   u8 unused01800[24U] ;
   u64 rxmac_rx_pa_cfg0 ;
   u64 rxmac_rx_pa_cfg1 ;
   u8 unused01828[24U] ;
   u64 rts_mgr_cfg0 ;
   u64 rts_mgr_cfg1 ;
   u64 rts_mgr_criteria_priority ;
   u64 rts_mgr_da_pause_cfg ;
   u64 rts_mgr_da_slow_proto_cfg ;
   u8 unused01890[64U] ;
   u64 rts_mgr_cbasin_cfg ;
   u8 unused01968[208U] ;
   u64 dbg_stat_rx_any_frms ;
   u8 unused01a00[144U] ;
   u64 rxmac_red_rate_vp[17U] ;
   u8 unused01e00[888U] ;
   u64 xgmac_int_status ;
   u64 xgmac_int_mask ;
   u64 xmac_gen_err_reg ;
   u64 xmac_gen_err_mask ;
   u64 xmac_gen_err_alarm ;
   u64 xmac_link_err_port0_reg ;
   u64 xmac_link_err_port0_mask ;
   u64 xmac_link_err_port0_alarm ;
   u64 xmac_link_err_port1_reg ;
   u64 xmac_link_err_port1_mask ;
   u64 xmac_link_err_port1_alarm ;
   u64 xgxs_gen_err_reg ;
   u64 xgxs_gen_err_mask ;
   u64 xgxs_gen_err_alarm ;
   u64 asic_ntwk_err_reg ;
   u64 asic_ntwk_err_mask ;
   u64 asic_ntwk_err_alarm ;
   u64 asic_gpio_err_reg ;
   u64 asic_gpio_err_mask ;
   u64 asic_gpio_err_alarm ;
   u64 xgmac_gen_status ;
   u64 xgmac_gen_fw_memo_status ;
   u64 xgmac_gen_fw_memo_mask ;
   u64 xgmac_gen_fw_vpath_to_vsport_status ;
   u64 xgmac_main_cfg_port[2U] ;
   u8 unused01f40[112U] ;
   u64 xmac_gen_cfg ;
   u64 xmac_timestamp ;
   u64 xmac_stats_gen_cfg ;
   u64 xmac_stats_sys_cmd ;
   u64 xmac_stats_sys_data ;
   u8 unused01f80[24U] ;
   u64 asic_ntwk_ctrl ;
   u64 asic_ntwk_cfg_show_port_info ;
   u64 asic_ntwk_cfg_port_num ;
   u64 xmac_cfg_port[3U] ;
   u64 xmac_station_addr_port[2U] ;
   u8 unused02020[96U] ;
   u64 lag_cfg ;
   u64 lag_status ;
   u64 lag_active_passive_cfg ;
   u8 unused02040[8U] ;
   u64 lag_lacp_cfg ;
   u64 lag_timer_cfg_1 ;
   u64 lag_timer_cfg_2 ;
   u64 lag_sys_id ;
   u64 lag_sys_cfg ;
   u8 unused02070[8U] ;
   u64 lag_aggr_addr_cfg[2U] ;
   u64 lag_aggr_id_cfg[2U] ;
   u64 lag_aggr_admin_key[2U] ;
   u64 lag_aggr_alt_admin_key ;
   u64 lag_aggr_oper_key[2U] ;
   u64 lag_aggr_partner_sys_id[2U] ;
   u64 lag_aggr_partner_info[2U] ;
   u64 lag_aggr_state[2U] ;
   u8 unused020f0[8U] ;
   u64 lag_port_cfg[2U] ;
   u64 lag_port_actor_admin_cfg[2U] ;
   u64 lag_port_actor_admin_state[2U] ;
   u64 lag_port_partner_admin_sys_id[2U] ;
   u64 lag_port_partner_admin_cfg[2U] ;
   u64 lag_port_partner_admin_state[2U] ;
   u64 lag_port_to_aggr[2U] ;
   u64 lag_port_actor_oper_key[2U] ;
   u64 lag_port_actor_oper_state[2U] ;
   u64 lag_port_partner_oper_sys_id[2U] ;
   u64 lag_port_partner_oper_info[2U] ;
   u64 lag_port_partner_oper_state[2U] ;
   u64 lag_port_state_vars[2U] ;
   u64 lag_port_timer_cntr[2U] ;
   u8 unused02208[1328U] ;
   u64 rtdma_int_status ;
   u64 rtdma_int_mask ;
   u64 pda_alarm_reg ;
   u64 pda_alarm_mask ;
   u64 pda_alarm_alarm ;
   u64 pcc_error_reg ;
   u64 pcc_error_mask ;
   u64 pcc_error_alarm ;
   u64 lso_error_reg ;
   u64 lso_error_mask ;
   u64 lso_error_alarm ;
   u64 sm_error_reg ;
   u64 sm_error_mask ;
   u64 sm_error_alarm ;
   u8 unused027a8[56U] ;
   u64 txd_ownership_ctrl ;
   u64 pcc_cfg ;
   u64 pcc_control ;
   u64 pda_status1 ;
   u64 rtdma_bw_timer ;
   u8 unused02900[304U] ;
   u64 g3cmct_int_status ;
   u64 g3cmct_int_mask ;
   u64 g3cmct_err_reg ;
   u64 g3cmct_err_mask ;
   u64 g3cmct_err_alarm ;
   u8 unused03000[1752U] ;
   u64 mc_int_status ;
   u64 mc_int_mask ;
   u64 mc_err_reg ;
   u64 mc_err_mask ;
   u64 mc_err_alarm ;
   u64 grocrc_alarm_reg ;
   u64 grocrc_alarm_mask ;
   u64 grocrc_alarm_alarm ;
   u8 unused03100[192U] ;
   u64 rx_thresh_cfg_repl ;
   u8 unused033b8[688U] ;
   u64 fbmc_ecc_cfg ;
   u8 unused03400[64U] ;
   u64 pcipif_int_status ;
   u64 pcipif_int_mask ;
   u64 dbecc_err_reg ;
   u64 dbecc_err_mask ;
   u64 dbecc_err_alarm ;
   u64 sbecc_err_reg ;
   u64 sbecc_err_mask ;
   u64 sbecc_err_alarm ;
   u64 general_err_reg ;
   u64 general_err_mask ;
   u64 general_err_alarm ;
   u64 srpcim_msg_reg ;
   u64 srpcim_msg_mask ;
   u64 srpcim_msg_alarm ;
   u8 unused03600[400U] ;
   u64 gcmg1_int_status ;
   u64 gcmg1_int_mask ;
   u8 unused03a00[1008U] ;
   u64 pcmg1_int_status ;
   u64 pcmg1_int_mask ;
   u8 unused04000[1520U] ;
   u64 one_int_status ;
   u64 one_int_mask ;
   u8 unused04818[2056U] ;
   u64 noa_wct_ctrl ;
   u64 rc_cfg2 ;
   u64 rc_cfg3 ;
   u64 rx_multi_cast_ctrl1 ;
   u64 rxdm_dbg_rd ;
   u64 rxdm_dbg_rd_data ;
   u64 rqa_top_prty_for_vh[17U] ;
   u8 unused04900[48U] ;
   u64 tim_status ;
   u64 tim_ecc_enable ;
   u64 tim_bp_ctrl ;
   u64 tim_resource_assignment_vh[17U] ;
   u64 tim_bmap_mapping_vp_err[17U] ;
   u8 unused04b00[216U] ;
   u64 gcmg2_int_status ;
   u64 gcmg2_int_mask ;
   u64 gxtmc_err_reg ;
   u64 gxtmc_err_mask ;
   u64 gxtmc_err_alarm ;
   u64 cmc_err_reg ;
   u64 cmc_err_mask ;
   u64 cmc_err_alarm ;
   u64 gcp_err_reg ;
   u64 gcp_err_mask ;
   u64 gcp_err_alarm ;
   u8 unused04f00[936U] ;
   u64 pcmg2_int_status ;
   u64 pcmg2_int_mask ;
   u64 pxtmc_err_reg ;
   u64 pxtmc_err_mask ;
   u64 pxtmc_err_alarm ;
   u64 cp_err_reg ;
   u64 cp_err_mask ;
   u64 cp_err_alarm ;
   u8 unused04fe8[16U] ;
   u64 cp_exc_reg ;
   u64 cp_exc_mask ;
   u64 cp_exc_alarm ;
   u64 cp_exc_cause ;
   u8 unused05200[656U] ;
   u64 msg_int_status ;
   u64 msg_int_mask ;
   u64 tim_err_reg ;
   u64 tim_err_mask ;
   u64 tim_err_alarm ;
   u64 msg_err_reg ;
   u64 msg_err_mask ;
   u64 msg_err_alarm ;
   u8 unused05340[256U] ;
   u64 msg_exc_reg ;
   u64 msg_exc_mask ;
   u64 msg_exc_alarm ;
   u64 msg_exc_cause ;
   u8 unused05368[32U] ;
   u64 msg_err2_reg ;
   u64 msg_err2_mask ;
   u64 msg_err2_alarm ;
   u64 msg_err3_reg ;
   u64 msg_err3_mask ;
   u64 msg_err3_alarm ;
   u8 unused05600[592U] ;
   u64 fau_gen_err_reg ;
   u64 fau_gen_err_mask ;
   u64 fau_gen_err_alarm ;
   u64 fau_ecc_err_reg ;
   u64 fau_ecc_err_mask ;
   u64 fau_ecc_err_alarm ;
   u8 unused05658[40U] ;
   u64 fau_pa_cfg ;
   u8 unused05668[8U] ;
   u64 dbg_stats_fau_rx_path ;
   u8 unused056c0[80U] ;
   u64 fau_lag_cfg ;
   u8 unused05800[312U] ;
   u64 tpa_int_status ;
   u64 tpa_int_mask ;
   u64 orp_err_reg ;
   u64 orp_err_mask ;
   u64 orp_err_alarm ;
   u64 ptm_alarm_reg ;
   u64 ptm_alarm_mask ;
   u64 ptm_alarm_alarm ;
   u64 tpa_error_reg ;
   u64 tpa_error_mask ;
   u64 tpa_error_alarm ;
   u64 tpa_global_cfg ;
   u8 unused05868[16U] ;
   u64 ptm_ecc_cfg ;
   u64 ptm_phase_cfg ;
   u8 unused05898[24U] ;
   u64 dbg_stats_tpa_tx_path ;
   u8 unused05900[96U] ;
   u64 tmac_int_status ;
   u64 tmac_int_mask ;
   u64 txmac_gen_err_reg ;
   u64 txmac_gen_err_mask ;
   u64 txmac_gen_err_alarm ;
   u64 txmac_ecc_err_reg ;
   u64 txmac_ecc_err_mask ;
   u64 txmac_ecc_err_alarm ;
   u8 unused05978[56U] ;
   u64 dbg_stat_tx_any_frms ;
   u8 unused059a0[32U] ;
   u64 txmac_link_util_port[3U] ;
   u64 txmac_cfg0_port[3U] ;
   u64 txmac_cfg1_port[3U] ;
   u64 txmac_status_port[3U] ;
   u8 unused05a20[32U] ;
   u64 lag_distrib_dest ;
   u64 lag_marker_cfg ;
   u64 lag_tx_cfg ;
   u64 lag_tx_status ;
   u8 unused05d48[776U] ;
   u64 srpcim_to_mrpcim_vplane_rmsg[17U] ;
   u8 unused06420[1616U] ;
   u64 mrpcim_to_srpcim_vplane_wmsg[17U] ;
   u64 mrpcim_to_srpcim_vplane_wmsg_trig[17U] ;
   u64 debug_stats0 ;
   u64 debug_stats1 ;
   u64 debug_stats2 ;
   u64 debug_stats3_vplane[17U] ;
   u64 debug_stats4_vplane[17U] ;
   u8 unused07000[2472U] ;
   u64 mrpcim_general_int_status ;
   u64 mrpcim_general_int_mask ;
   u64 mrpcim_ppif_int_status ;
   u64 mrpcim_ppif_int_mask ;
   u8 unused07028[8U] ;
   u64 ini_errors_reg ;
   u64 ini_errors_mask ;
   u64 ini_errors_alarm ;
   u64 dma_errors_reg ;
   u64 dma_errors_mask ;
   u64 dma_errors_alarm ;
   u64 tgt_errors_reg ;
   u64 tgt_errors_mask ;
   u64 tgt_errors_alarm ;
   u64 config_errors_reg ;
   u64 config_errors_mask ;
   u64 config_errors_alarm ;
   u8 unused07090[8U] ;
   u64 crdt_errors_reg ;
   u64 crdt_errors_mask ;
   u64 crdt_errors_alarm ;
   u8 unused070b0[8U] ;
   u64 mrpcim_general_errors_reg ;
   u64 mrpcim_general_errors_mask ;
   u64 mrpcim_general_errors_alarm ;
   u8 unused070d0[8U] ;
   u64 pll_errors_reg ;
   u64 pll_errors_mask ;
   u64 pll_errors_alarm ;
   u64 srpcim_to_mrpcim_alarm_reg ;
   u64 srpcim_to_mrpcim_alarm_mask ;
   u64 srpcim_to_mrpcim_alarm_alarm ;
   u64 vpath_to_mrpcim_alarm_reg ;
   u64 vpath_to_mrpcim_alarm_mask ;
   u64 vpath_to_mrpcim_alarm_alarm ;
   u8 unused07128[16U] ;
   u64 crdt_errors_vplane_reg[17U] ;
   u64 crdt_errors_vplane_mask[17U] ;
   u64 crdt_errors_vplane_alarm[17U] ;
   u8 unused072f0[48U] ;
   u64 mrpcim_rst_in_prog ;
   u64 mrpcim_reg_modified ;
   u8 unused07378[120U] ;
   u64 write_arb_pending ;
   u64 read_arb_pending ;
   u64 dmaif_dmadbl_pending ;
   u64 wrcrdtarb_status0_vplane[17U] ;
   u64 wrcrdtarb_status1_vplane[17U] ;
   u8 unused07500[96U] ;
   u64 mrpcim_general_cfg1 ;
   u64 mrpcim_general_cfg2 ;
   u64 mrpcim_general_cfg3 ;
   u64 mrpcim_stats_start_host_addr ;
   u8 unused07950[1072U] ;
   u64 rdcrdtarb_cfg0 ;
   u8 unused07be8[656U] ;
   u64 bf_sw_reset ;
   u64 sw_reset_status ;
   u8 unused07d30[312U] ;
   u64 mrpcim_debug_stats0 ;
   u64 mrpcim_debug_stats1_vplane[17U] ;
   u64 mrpcim_debug_stats2_vplane[17U] ;
   u64 mrpcim_debug_stats3_vplane[17U] ;
   u64 mrpcim_debug_stats4 ;
   u64 genstats_count01 ;
   u64 genstats_count23 ;
   u64 genstats_count4 ;
   u64 genstats_count5 ;
   u8 unused07f08[16U] ;
   u64 genstats_cfg[6U] ;
   u64 genstat_64bit_cfg ;
   u8 unused08000[192U] ;
   u64 gcmg3_int_status ;
   u64 gcmg3_int_mask ;
   u8 unused09000[4080U] ;
   u64 g3ifcmd_fb_int_status ;
   u64 g3ifcmd_fb_int_mask ;
   u64 g3ifcmd_fb_err_reg ;
   u64 g3ifcmd_fb_err_mask ;
   u64 g3ifcmd_fb_err_alarm ;
   u8 unused09400[984U] ;
   u64 g3ifcmd_cmu_int_status ;
   u64 g3ifcmd_cmu_int_mask ;
   u64 g3ifcmd_cmu_err_reg ;
   u64 g3ifcmd_cmu_err_mask ;
   u64 g3ifcmd_cmu_err_alarm ;
   u8 unused09800[984U] ;
   u64 g3ifcmd_cml_int_status ;
   u64 g3ifcmd_cml_int_mask ;
   u64 g3ifcmd_cml_err_reg ;
   u64 g3ifcmd_cml_err_mask ;
   u64 g3ifcmd_cml_err_alarm ;
   u8 unused09b00[728U] ;
   u64 vpath_to_vplane_map[17U] ;
   u8 unused09c30[168U] ;
   u64 xgxs_cfg_port[2U] ;
   u64 xgxs_rxber_cfg_port[2U] ;
   u64 xgxs_rxber_status_port[2U] ;
   u64 xgxs_status_port[2U] ;
   u64 xgxs_pma_reset_port[2U] ;
   u8 unused09c90[16U] ;
   u64 xgxs_static_cfg_port[2U] ;
   u8 unused09d40[160U] ;
   u64 xgxs_info_port[2U] ;
   u64 ratemgmt_cfg_port[2U] ;
   u64 ratemgmt_status_port[2U] ;
   u8 unused09d80[16U] ;
   u64 ratemgmt_fixed_cfg_port[2U] ;
   u64 ratemgmt_antp_cfg_port[2U] ;
   u64 ratemgmt_anbe_cfg_port[2U] ;
   u64 anbe_cfg_port[2U] ;
   u64 anbe_mgr_ctrl_port[2U] ;
   u8 unused09de0[16U] ;
   u64 anbe_fw_mstr_port[2U] ;
   u64 anbe_hwfsm_gen_status_port[2U] ;
   u64 anbe_hwfsm_bp_status_port[2U] ;
   u64 anbe_hwfsm_np_status_port[2U] ;
   u8 unused09e30[16U] ;
   u64 antp_gen_cfg_port[2U] ;
   u64 antp_hwfsm_gen_status_port[2U] ;
   u64 antp_hwfsm_bp_status_port[2U] ;
   u64 antp_hwfsm_xnp_status_port[2U] ;
   u64 mdio_mgr_access_port[2U] ;
   u8 unused0a200[896U] ;
   u64 xmac_vsport_choices_vh[17U] ;
   u8 unused0a400[376U] ;
   u64 rx_thresh_cfg_vp[17U] ;
   u8 unused0ac90[2056U] ;
} __attribute__((__packed__));
#line 3609  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-reg.h"
struct vxge_hw_srpcim_reg {
   u64 tim_mr2sr_resource_assignment_vh ;
   u8 unused00100[248U] ;
   u64 srpcim_pcipif_int_status ;
   u64 srpcim_pcipif_int_mask ;
   u64 mrpcim_msg_reg ;
   u64 mrpcim_msg_mask ;
   u64 mrpcim_msg_alarm ;
   u64 vpath_msg_reg ;
   u64 vpath_msg_mask ;
   u64 vpath_msg_alarm ;
   u8 unused00160[32U] ;
   u64 srpcim_to_mrpcim_wmsg ;
   u64 srpcim_to_mrpcim_wmsg_trig ;
   u64 mrpcim_to_srpcim_rmsg ;
   u64 vpath_to_srpcim_rmsg_sel ;
   u64 vpath_to_srpcim_rmsg ;
   u8 unused00200[120U] ;
   u64 srpcim_general_int_status ;
   u8 unused00210[8U] ;
   u64 srpcim_general_int_mask ;
   u8 unused00220[8U] ;
   u64 srpcim_ppif_int_status ;
   u64 srpcim_ppif_int_mask ;
   u64 srpcim_gen_errors_reg ;
   u64 srpcim_gen_errors_mask ;
   u64 srpcim_gen_errors_alarm ;
   u64 mrpcim_to_srpcim_alarm_reg ;
   u64 mrpcim_to_srpcim_alarm_mask ;
   u64 mrpcim_to_srpcim_alarm_alarm ;
   u64 vpath_to_srpcim_alarm_reg ;
   u64 vpath_to_srpcim_alarm_mask ;
   u64 vpath_to_srpcim_alarm_alarm ;
   u8 unused00280[8U] ;
   u64 pf_sw_reset ;
   u64 srpcim_general_cfg1 ;
   u64 srpcim_interrupt_cfg1 ;
   u8 unused002a8[16U] ;
   u64 srpcim_clear_msix_mask ;
   u64 srpcim_set_msix_mask ;
   u64 srpcim_clr_msix_one_shot ;
   u64 srpcim_rst_in_prog ;
   u64 srpcim_reg_modified ;
   u64 tgt_pf_illegal_access ;
   u64 srpcim_msix_status ;
   u8 unused00880[1440U] ;
   u64 xgmac_sr_int_status ;
   u64 xgmac_sr_int_mask ;
   u64 asic_ntwk_sr_err_reg ;
   u64 asic_ntwk_sr_err_mask ;
   u64 asic_ntwk_sr_err_alarm ;
   u8 unused008c0[24U] ;
   u64 xmac_vsport_choices_sr_clone ;
   u8 unused00900[56U] ;
   u64 mr_rqa_top_prty_for_vh ;
   u64 umq_vh_data_list_empty ;
   u64 wde_cfg ;
} __attribute__((__packed__));
#line 3779  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-reg.h"
struct vxge_hw_vpmgmt_reg {
   u8 unused00040[64U] ;
   u64 vpath_to_func_map_cfg1 ;
   u64 vpath_is_first ;
   u64 srpcim_to_vpath_wmsg ;
   u64 srpcim_to_vpath_wmsg_trig ;
   u8 unused00100[160U] ;
   u64 tim_vpath_assignment ;
   u8 unused00140[56U] ;
   u64 rqa_top_prty_for_vp ;
   u8 unused001c0[120U] ;
   u64 rxmac_rx_pa_cfg0_vpmgmt_clone ;
   u64 rts_mgr_cfg0_vpmgmt_clone ;
   u64 rts_mgr_criteria_priority_vpmgmt_clone ;
   u64 rxmac_cfg0_port_vpmgmt_clone[3U] ;
   u64 rxmac_pause_cfg_port_vpmgmt_clone[3U] ;
   u8 unused00240[56U] ;
   u64 xmac_vsport_choices_vp ;
   u8 unused00260[24U] ;
   u64 xgmac_gen_status_vpmgmt_clone ;
   u64 xgmac_status_port_vpmgmt_clone[2U] ;
   u64 xmac_gen_cfg_vpmgmt_clone ;
   u64 xmac_timestamp_vpmgmt_clone ;
   u64 xmac_stats_gen_cfg_vpmgmt_clone ;
   u64 xmac_cfg_port_vpmgmt_clone[3U] ;
   u8 unused002c0[24U] ;
   u64 txmac_gen_cfg0_vpmgmt_clone ;
   u64 txmac_cfg0_port_vpmgmt_clone[3U] ;
   u8 unused00300[32U] ;
   u64 wol_mp_crc ;
   u64 wol_mp_mask_a ;
   u64 wol_mp_mask_b ;
   u8 unused00360[72U] ;
   u64 fau_pa_cfg_vpmgmt_clone ;
   u64 rx_datapath_util_vp_clone ;
   u8 unused00380[16U] ;
   u64 tx_datapath_util_vp_clone ;
} __attribute__((__packed__));
#line 3979  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-reg.h"
struct vxge_hw_vpath_reg {
   u8 unused00300[768U] ;
   u64 usdc_vpath ;
   u8 unused00a00[1784U] ;
   u64 wrdma_alarm_status ;
   u64 wrdma_alarm_mask ;
   u8 unused00a30[32U] ;
   u64 prc_alarm_reg ;
   u64 prc_alarm_mask ;
   u64 prc_alarm_alarm ;
   u64 prc_cfg1 ;
   u8 unused00a60[16U] ;
   u64 prc_cfg4 ;
   u64 prc_cfg5 ;
   u64 prc_cfg6 ;
   u64 prc_cfg7 ;
   u64 tim_dest_addr ;
   u64 prc_rxd_doorbell ;
   u64 rqa_prty_for_vp ;
   u64 rxdmem_size ;
   u64 frm_in_progress_cnt ;
   u64 rx_multi_cast_stats ;
   u64 rx_frm_transferred ;
   u64 rxd_returned ;
   u8 unused00c00[320U] ;
   u64 kdfc_fifo_trpl_partition ;
   u64 kdfc_fifo_trpl_ctrl ;
   u64 kdfc_trpl_fifo_0_ctrl ;
   u64 kdfc_trpl_fifo_1_ctrl ;
   u64 kdfc_trpl_fifo_2_ctrl ;
   u64 kdfc_trpl_fifo_0_wb_address ;
   u64 kdfc_trpl_fifo_1_wb_address ;
   u64 kdfc_trpl_fifo_2_wb_address ;
   u64 kdfc_trpl_fifo_offset ;
   u64 kdfc_drbl_triplet_total ;
   u8 unused00c60[16U] ;
   u64 usdc_drbl_ctrl ;
   u64 usdc_vp_ready ;
   u64 kdfc_status ;
   u8 unused00c80[8U] ;
   u64 xmac_rpa_vcfg ;
   u64 rxmac_vcfg0 ;
   u64 rxmac_vcfg1 ;
   u64 rts_access_steer_ctrl ;
   u64 rts_access_steer_data0 ;
   u64 rts_access_steer_data1 ;
   u8 unused00d00[80U] ;
   u64 xmac_vsport_choice ;
   u64 xmac_stats_cfg ;
   u64 xmac_stats_access_cmd ;
   u64 xmac_stats_access_data ;
   u64 asic_ntwk_vp_ctrl ;
   u8 unused00d30[8U] ;
   u64 xgmac_vp_int_status ;
   u64 xgmac_vp_int_mask ;
   u64 asic_ntwk_vp_err_reg ;
   u64 asic_ntwk_vp_err_mask ;
   u64 asic_ntwk_vp_err_alarm ;
   u8 unused00d80[40U] ;
   u64 rtdma_bw_ctrl ;
   u64 rtdma_rd_optimization_ctrl ;
   u64 pda_pcc_job_monitor ;
   u64 tx_protocol_assist_cfg ;
   u8 unused01000[608U] ;
   u64 tim_cfg1_int_num[4U] ;
   u64 tim_cfg2_int_num[4U] ;
   u64 tim_cfg3_int_num[4U] ;
   u64 tim_wrkld_clc ;
   u64 tim_bitmap ;
   u64 tim_ring_assn ;
   u64 tim_remap ;
   u64 tim_vpath_map ;
   u64 tim_pci_cfg ;
   u8 unused01100[112U] ;
   u64 sgrp_assign ;
   u64 sgrp_aoa_and_result ;
   u64 rpe_pci_cfg ;
   u64 rpe_lro_cfg ;
   u64 pe_mr2vp_ack_blk_limit ;
   u64 pe_mr2vp_rirr_lirr_blk_limit ;
   u64 txpe_pci_nce_cfg ;
   u8 unused01180[72U] ;
   u64 msg_qpad_en_cfg ;
   u64 msg_pci_cfg ;
   u64 umqdmq_ir_init ;
   u64 dmq_ir_int ;
   u64 dmq_bwr_init_add ;
   u64 dmq_bwr_init_byte ;
   u64 dmq_ir ;
   u64 umq_int ;
   u64 umq_mr2vp_bwr_pfch_init ;
   u64 umq_bwr_pfch_ctrl ;
   u64 umq_mr2vp_bwr_eol ;
   u64 umq_bwr_init_add ;
   u64 umq_bwr_init_byte ;
   u64 gendma_int ;
   u64 umqdmq_ir_init_notify ;
   u64 dmq_init_notify ;
   u64 umq_init_notify ;
   u8 unused01380[376U] ;
   u64 tpa_cfg ;
   u8 unused01400[120U] ;
   u64 tx_vp_reset_discarded_frms ;
   u8 unused01480[120U] ;
   u64 fau_rpa_vcfg ;
   u8 unused014d0[72U] ;
   u64 dbg_stats_rx_mpa ;
   u64 dbg_stats_rx_fau ;
   u8 unused014f0[16U] ;
   u64 fbmc_vp_rdy ;
   u8 unused01e00[2312U] ;
   u64 vpath_pcipif_int_status ;
   u64 vpath_pcipif_int_mask ;
   u8 unused01e20[16U] ;
   u64 srpcim_msg_to_vpath_reg ;
   u64 srpcim_msg_to_vpath_mask ;
   u64 srpcim_msg_to_vpath_alarm ;
   u8 unused01ea0[104U] ;
   u64 vpath_to_srpcim_wmsg ;
   u64 vpath_to_srpcim_wmsg_trig ;
   u8 unused02000[336U] ;
   u64 vpath_general_int_status ;
   u64 vpath_general_int_mask ;
   u64 vpath_ppif_int_status ;
   u64 vpath_ppif_int_mask ;
   u64 kdfcctl_errors_reg ;
   u64 kdfcctl_errors_mask ;
   u64 kdfcctl_errors_alarm ;
   u8 unused02040[8U] ;
   u64 general_errors_reg ;
   u64 general_errors_mask ;
   u64 general_errors_alarm ;
   u64 pci_config_errors_reg ;
   u64 pci_config_errors_mask ;
   u64 pci_config_errors_alarm ;
   u64 mrpcim_to_vpath_alarm_reg ;
   u64 mrpcim_to_vpath_alarm_mask ;
   u64 mrpcim_to_vpath_alarm_alarm ;
   u64 srpcim_to_vpath_alarm_reg ;
   u64 srpcim_to_vpath_alarm_mask ;
   u64 srpcim_to_vpath_alarm_alarm ;
   u8 unused02108[104U] ;
   u64 kdfcctl_status ;
   u64 rsthdlr_status ;
   u64 fifo0_status ;
   u64 fifo1_status ;
   u64 fifo2_status ;
   u8 unused02158[40U] ;
   u64 tgt_illegal_access ;
   u8 unused02200[160U] ;
   u64 vpath_general_cfg1 ;
   u64 vpath_general_cfg2 ;
   u64 vpath_general_cfg3 ;
   u8 unused02220[8U] ;
   u64 kdfcctl_cfg0 ;
   u8 unused02268[64U] ;
   u64 stats_cfg ;
   u64 interrupt_cfg0 ;
   u8 unused02280[8U] ;
   u64 interrupt_cfg2 ;
   u64 one_shot_vect0_en ;
   u64 one_shot_vect1_en ;
   u64 one_shot_vect2_en ;
   u64 one_shot_vect3_en ;
   u8 unused022b0[8U] ;
   u64 pci_config_access_cfg1 ;
   u64 pci_config_access_cfg2 ;
   u64 pci_config_access_status ;
   u8 unused02300[56U] ;
   u64 vpath_debug_stats0 ;
   u64 vpath_debug_stats1 ;
   u64 vpath_debug_stats2 ;
   u64 vpath_debug_stats3 ;
   u64 vpath_debug_stats4 ;
   u64 vpath_debug_stats5 ;
   u64 vpath_debug_stats6 ;
   u64 vpath_genstats_count01 ;
   u64 vpath_genstats_count23 ;
   u64 vpath_genstats_count4 ;
   u64 vpath_genstats_count5 ;
   u8 unused02648[752U] ;
} __attribute__((__packed__));
#line 4628 
struct __vxge_hw_device;
#line 4629 
struct __vxge_hw_vpath_handle;
#line 4630 
struct vxge_hw_vp_config;
#line 4631 
struct __vxge_hw_virtualpath;
#line 4632 
struct __vxge_hw_channel;
#line 4633 
struct __vxge_hw_fifo;
#line 4634 
struct __vxge_hw_ring;
#line 4636 
struct vxge_hw_mempool;
#line 4637 
enum vxge_hw_event {
    VXGE_HW_EVENT_UNKNOWN = 0,
    VXGE_HW_EVENT_RESET_START = 1,
    VXGE_HW_EVENT_RESET_COMPLETE = 2,
    VXGE_HW_EVENT_LINK_DOWN = 3,
    VXGE_HW_EVENT_LINK_UP = 4,
    VXGE_HW_EVENT_ALARM_CLEARED = 5,
    VXGE_HW_EVENT_ECCERR = 6,
    VXGE_HW_EVENT_MRPCIM_ECCERR = 7,
    VXGE_HW_EVENT_FIFO_ERR = 8,
    VXGE_HW_EVENT_VPATH_ERR = 9,
    VXGE_HW_EVENT_CRITICAL_ERR = 10,
    VXGE_HW_EVENT_SERR = 11,
    VXGE_HW_EVENT_SRPCIM_SERR = 12,
    VXGE_HW_EVENT_MRPCIM_SERR = 13,
    VXGE_HW_EVENT_SLOT_FREEZE = 14
};
#line 117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.h"
struct vxge_hw_mempool_dma {
   dma_addr_t addr ;
   struct pci_dev *handle ;
   struct pci_dev *acc_handle ;
};
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.h"
struct vxge_hw_mempool {
   void (*item_func_alloc)(struct vxge_hw_mempool *, u32 , struct vxge_hw_mempool_dma *, u32 , u32 ) ;
   void *userdata ;
   void **memblocks_arr ;
   void **memblocks_priv_arr ;
   struct vxge_hw_mempool_dma *memblocks_dma_arr ;
   struct __vxge_hw_device *devh ;
   u32 memblock_size ;
   u32 memblocks_max ;
   u32 memblocks_allocated ;
   u32 item_size ;
   u32 items_max ;
   u32 items_initial ;
   u32 items_current ;
   u32 items_per_memblock ;
   void **items_arr ;
   u32 items_priv_size ;
};
#line 233  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.h"
struct vxge_hw_tim_intr_config {
   u32 intr_enable ;
   u32 btimer_val ;
   u32 timer_ac_en ;
   u32 timer_ci_en ;
   u32 timer_ri_en ;
   u32 rtimer_val ;
   u32 util_sel ;
   u32 ltimer_val ;
   u32 urange_a ;
   u32 uec_a ;
   u32 urange_b ;
   u32 uec_b ;
   u32 urange_c ;
   u32 uec_c ;
   u32 uec_d ;
};
#line 890  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.h"
struct vxge_hw_xmac_vpath_tx_stats {
   u64 tx_ttl_eth_frms ;
   u64 tx_ttl_eth_octets ;
   u64 tx_data_octets ;
   u64 tx_mcast_frms ;
   u64 tx_bcast_frms ;
   u64 tx_ucast_frms ;
   u64 tx_tagged_frms ;
   u64 tx_vld_ip ;
   u64 tx_vld_ip_octets ;
   u64 tx_icmp ;
   u64 tx_tcp ;
   u64 tx_rst_tcp ;
   u64 tx_udp ;
   u32 tx_unknown_protocol ;
   u32 tx_lost_ip ;
   u32 unused1 ;
   u32 tx_parse_error ;
   u64 tx_tcp_offload ;
   u64 tx_retx_tcp_offload ;
   u64 tx_lost_ip_offload ;
} __attribute__((__packed__));
#line 1040  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.h"
struct vxge_hw_xmac_vpath_rx_stats {
   u64 rx_ttl_eth_frms ;
   u64 rx_vld_frms ;
   u64 rx_offload_frms ;
   u64 rx_ttl_eth_octets ;
   u64 rx_data_octets ;
   u64 rx_offload_octets ;
   u64 rx_vld_mcast_frms ;
   u64 rx_vld_bcast_frms ;
   u64 rx_accepted_ucast_frms ;
   u64 rx_accepted_nucast_frms ;
   u64 rx_tagged_frms ;
   u64 rx_long_frms ;
   u64 rx_usized_frms ;
   u64 rx_osized_frms ;
   u64 rx_frag_frms ;
   u64 rx_jabber_frms ;
   u64 rx_ttl_64_frms ;
   u64 rx_ttl_65_127_frms ;
   u64 rx_ttl_128_255_frms ;
   u64 rx_ttl_256_511_frms ;
   u64 rx_ttl_512_1023_frms ;
   u64 rx_ttl_1024_1518_frms ;
   u64 rx_ttl_1519_4095_frms ;
   u64 rx_ttl_4096_8191_frms ;
   u64 rx_ttl_8192_max_frms ;
   u64 rx_ttl_gt_max_frms ;
   u64 rx_ip ;
   u64 rx_accepted_ip ;
   u64 rx_ip_octets ;
   u64 rx_err_ip ;
   u64 rx_icmp ;
   u64 rx_tcp ;
   u64 rx_udp ;
   u64 rx_err_tcp ;
   u64 rx_lost_frms ;
   u64 rx_lost_ip ;
   u64 rx_lost_ip_offload ;
   u16 rx_various_discard ;
   u16 rx_sleep_discard ;
   u16 rx_red_discard ;
   u16 rx_queue_full_discard ;
   u64 rx_mpa_ok_frms ;
} __attribute__((__packed__));
#line 1160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.h"
struct vxge_hw_vpath_stats_hw_info {
   u32 ini_num_mwr_sent ;
   u32 unused1 ;
   u32 ini_num_mrd_sent ;
   u32 unused2 ;
   u32 ini_num_cpl_rcvd ;
   u32 unused3 ;
   u64 ini_num_mwr_byte_sent ;
   u64 ini_num_cpl_byte_rcvd ;
   u32 wrcrdtarb_xoff ;
   u32 unused4 ;
   u32 rdcrdtarb_xoff ;
   u32 unused5 ;
   u32 vpath_genstats_count0 ;
   u32 vpath_genstats_count1 ;
   u32 vpath_genstats_count2 ;
   u32 vpath_genstats_count3 ;
   u32 vpath_genstats_count4 ;
   u32 unused6 ;
   u32 vpath_genstats_count5 ;
   u32 unused7 ;
   struct vxge_hw_xmac_vpath_tx_stats tx_stats ;
   struct vxge_hw_xmac_vpath_rx_stats rx_stats ;
   u64 unused9 ;
   u32 prog_event_vnum1 ;
   u32 prog_event_vnum0 ;
   u32 prog_event_vnum3 ;
   u32 prog_event_vnum2 ;
   u16 rx_multi_cast_frame_discard ;
   u8 unused10[6U] ;
   u32 rx_frm_transferred ;
   u32 unused11 ;
   u16 rxd_returned ;
   u8 unused12[6U] ;
   u16 rx_mpa_len_fail_frms ;
   u16 rx_mpa_mrk_fail_frms ;
   u16 rx_mpa_crc_fail_frms ;
   u16 rx_permitted_frms ;
   u64 rx_vp_reset_discarded_frms ;
   u64 rx_wol_frms ;
   u64 tx_vp_reset_discarded_frms ;
} __attribute__((__packed__));
#line 1536  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.h"
struct vxge_hw_device_stats_hw_info {
   struct vxge_hw_vpath_stats_hw_info *vpath_info[17U] ;
   struct vxge_hw_vpath_stats_hw_info vpath_info_sav[17U] ;
};
#line 1556  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.h"
struct vxge_hw_vpath_stats_sw_common_info {
   u32 full_cnt ;
   u32 usage_cnt ;
   u32 usage_max ;
   u32 reserve_free_swaps_cnt ;
   u32 total_compl_cnt ;
};
#line 1579  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.h"
struct vxge_hw_vpath_stats_sw_fifo_info {
   struct vxge_hw_vpath_stats_sw_common_info common_stats ;
   u32 total_posts ;
   u32 total_buffers ;
   u32 txd_t_code_err_cnt[16U] ;
};
#line 1600  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.h"
struct vxge_hw_vpath_stats_sw_ring_info {
   struct vxge_hw_vpath_stats_sw_common_info common_stats ;
   u32 rxd_t_code_err_cnt[16U] ;
};
#line 1626  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.h"
struct vxge_hw_vpath_stats_sw_err {
   u32 unknown_alarms ;
   u32 network_sustained_fault ;
   u32 network_sustained_ok ;
   u32 kdfcctl_fifo0_overwrite ;
   u32 kdfcctl_fifo0_poison ;
   u32 kdfcctl_fifo0_dma_error ;
   u32 dblgen_fifo0_overflow ;
   u32 statsb_pif_chain_error ;
   u32 statsb_drop_timeout ;
   u32 target_illegal_access ;
   u32 ini_serr_det ;
   u32 prc_ring_bumps ;
   u32 prc_rxdcm_sc_err ;
   u32 prc_rxdcm_sc_abort ;
   u32 prc_quanta_size_err ;
};
#line 1654  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.h"
struct vxge_hw_vpath_stats_sw_info {
   u32 soft_reset_cnt ;
   struct vxge_hw_vpath_stats_sw_err error_stats ;
   struct vxge_hw_vpath_stats_sw_ring_info ring_stats ;
   struct vxge_hw_vpath_stats_sw_fifo_info fifo_stats ;
};
#line 1675  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.h"
struct vxge_hw_device_stats_sw_info {
   u32 not_traffic_intr_cnt ;
   u32 traffic_intr_cnt ;
   u32 total_intr_cnt ;
   u32 soft_reset_cnt ;
   struct vxge_hw_vpath_stats_sw_info vpath_info[17U] ;
};
#line 1690  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.h"
struct vxge_hw_device_stats_sw_err {
   u32 vpath_alarms ;
};
#line 1715  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.h"
struct vxge_hw_device_stats {
   struct __vxge_hw_device *devh ;
   struct vxge_hw_device_stats_hw_info hw_dev_info_stats ;
   struct vxge_hw_device_stats_sw_err sw_dev_err_stats ;
   struct vxge_hw_device_stats_sw_info sw_dev_info_stats ;
};
#line 1728 
enum vxge_hw_status;
#line 1787 
enum vxge_hw_rxd_state {
    VXGE_HW_RXD_STATE_NONE = 0,
    VXGE_HW_RXD_STATE_AVAIL = 1,
    VXGE_HW_RXD_STATE_POSTED = 2,
    VXGE_HW_RXD_STATE_FREED = 3
};
#line 1958 
enum vxge_hw_fifo_tcode {
    VXGE_HW_FIFO_T_CODE_OK = 0,
    VXGE_HW_FIFO_T_CODE_PCI_READ_CORRUPT = 1,
    VXGE_HW_FIFO_T_CODE_PCI_READ_FAIL = 2,
    VXGE_HW_FIFO_T_CODE_INVALID_MSS = 3,
    VXGE_HW_FIFO_T_CODE_LSO_ERROR = 4,
    VXGE_HW_FIFO_T_CODE_UNUSED = 7,
    VXGE_HW_FIFO_T_CODE_MULTI_ERROR = 8
};
#line 2147 
enum vxge_hw_vpath_mac_addr_add_mode {
    VXGE_HW_VPATH_MAC_ADDR_ADD_DUPLICATE = 0,
    VXGE_HW_VPATH_MAC_ADDR_DISCARD_DUPLICATE = 1,
    VXGE_HW_VPATH_MAC_ADDR_REPLACE_DUPLICATE = 2
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.h"
enum vxge_hw_status {
    VXGE_HW_OK = 0,
    VXGE_HW_FAIL = 1,
    VXGE_HW_PENDING = 2,
    VXGE_HW_COMPLETIONS_REMAIN = 3,
    VXGE_HW_INF_NO_MORE_COMPLETED_DESCRIPTORS = 101,
    VXGE_HW_INF_OUT_OF_DESCRIPTORS = 102,
    VXGE_HW_ERR_INVALID_HANDLE = 201,
    VXGE_HW_ERR_OUT_OF_MEMORY = 202,
    VXGE_HW_ERR_VPATH_NOT_AVAILABLE = 203,
    VXGE_HW_ERR_VPATH_NOT_OPEN = 204,
    VXGE_HW_ERR_WRONG_IRQ = 205,
    VXGE_HW_ERR_SWAPPER_CTRL = 206,
    VXGE_HW_ERR_INVALID_MTU_SIZE = 207,
    VXGE_HW_ERR_INVALID_INDEX = 208,
    VXGE_HW_ERR_INVALID_TYPE = 209,
    VXGE_HW_ERR_INVALID_OFFSET = 210,
    VXGE_HW_ERR_INVALID_DEVICE = 211,
    VXGE_HW_ERR_VERSION_CONFLICT = 212,
    VXGE_HW_ERR_INVALID_PCI_INFO = 213,
    VXGE_HW_ERR_INVALID_TCODE = 214,
    VXGE_HW_ERR_INVALID_BLOCK_SIZE = 215,
    VXGE_HW_ERR_INVALID_STATE = 216,
    VXGE_HW_ERR_PRIVILEGED_OPERATION = 217,
    VXGE_HW_ERR_INVALID_PORT = 218,
    VXGE_HW_ERR_FIFO = 219,
    VXGE_HW_ERR_VPATH = 220,
    VXGE_HW_ERR_CRITICAL = 221,
    VXGE_HW_ERR_SLOT_FREEZE = 222,
    VXGE_HW_BADCFG_RING_INDICATE_MAX_PKTS = 301,
    VXGE_HW_BADCFG_FIFO_BLOCKS = 302,
    VXGE_HW_BADCFG_VPATH_MTU = 303,
    VXGE_HW_BADCFG_VPATH_RPA_STRIP_VLAN_TAG = 304,
    VXGE_HW_BADCFG_VPATH_MIN_BANDWIDTH = 305,
    VXGE_HW_BADCFG_INTR_MODE = 306,
    VXGE_HW_BADCFG_RTS_MAC_EN = 307,
    VXGE_HW_EOF_TRACE_BUF = -1
};
#line 87 
enum vxge_hw_device_link_state {
    VXGE_HW_LINK_NONE = 0,
    VXGE_HW_LINK_DOWN = 1,
    VXGE_HW_LINK_UP = 2
};
#line 251  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.h"
struct vxge_hw_fifo_config {
   u32 enable ;
   u32 fifo_blocks ;
   u32 max_frags ;
   u32 memblock_size ;
   u32 alignment_size ;
   u32 intr ;
   u32 no_snoop_bits ;
};
#line 312  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.h"
struct vxge_hw_ring_config {
   u32 enable ;
   u32 ring_blocks ;
   u32 buffer_mode ;
   u32 scatter_mode ;
   u64 rxds_limit ;
};
#line 360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.h"
struct vxge_hw_vp_config {
   u32 vp_id ;
   u32 min_bandwidth ;
   struct vxge_hw_ring_config ring ;
   struct vxge_hw_fifo_config fifo ;
   struct vxge_hw_tim_intr_config tti ;
   struct vxge_hw_tim_intr_config rti ;
   u32 mtu ;
   u32 rpa_strip_vlan_tag ;
};
#line 416  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.h"
struct vxge_hw_device_config {
   u32 device_poll_millis ;
   u32 dma_blockpool_initial ;
   u32 dma_blockpool_max ;
   u32 intr_mode : 2 ;
   u32 rth_en : 1 ;
   u32 rth_it_type : 1 ;
   u32 rts_mac_en : 1 ;
   u32 hwts_en : 1 ;
   struct vxge_hw_vp_config vp_config[17U] ;
};
#line 512  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.h"
struct vxge_hw_uld_cbs {
   void (*link_up)(struct __vxge_hw_device *) ;
   void (*link_down)(struct __vxge_hw_device *) ;
   void (*crit_err)(struct __vxge_hw_device *, enum vxge_hw_event , u64 ) ;
};
#line 531  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.h"
struct __vxge_hw_blockpool_entry {
   struct list_head item ;
   u32 length ;
   void *memblock ;
   dma_addr_t dma_addr ;
   struct pci_dev *dma_handle ;
   struct pci_dev *acc_handle ;
};
#line 552  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.h"
struct __vxge_hw_blockpool {
   struct __vxge_hw_device *hldev ;
   u32 block_size ;
   u32 pool_size ;
   u32 pool_max ;
   u32 req_out ;
   struct list_head free_block_list ;
   struct list_head free_entry_list ;
};
#line 561 
enum __vxge_hw_channel_type {
    VXGE_HW_CHANNEL_TYPE_UNKNOWN = 0,
    VXGE_HW_CHANNEL_TYPE_FIFO = 1,
    VXGE_HW_CHANNEL_TYPE_RING = 2,
    VXGE_HW_CHANNEL_TYPE_MAX = 3
};
#line 625  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.h"
struct __vxge_hw_channel {
   struct list_head item ;
   enum __vxge_hw_channel_type type ;
   struct __vxge_hw_device *devh ;
   struct __vxge_hw_vpath_handle *vph ;
   u32 length ;
   u32 vp_id ;
   void **reserve_arr ;
   u32 reserve_ptr ;
   u32 reserve_top ;
   void **work_arr ;
   u32 post_index ;
   u32 compl_index ;
   void **free_arr ;
   u32 free_ptr ;
   void **orig_arr ;
   u32 per_dtr_space ;
   void *userdata ;
   struct vxge_hw_common_reg *common_reg ;
   u32 first_vp_id ;
   struct vxge_hw_vpath_stats_sw_common_info *stats ;
} __attribute__((__aligned__(64)));
#line 674 
struct __vxge_hw_non_offload_db_wrapper;
#line 674  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.h"
struct __vxge_hw_virtualpath {
   u32 vp_id ;
   u32 vp_open ;
   struct __vxge_hw_device *hldev ;
   struct vxge_hw_vp_config *vp_config ;
   struct vxge_hw_vpath_reg *vp_reg ;
   struct vxge_hw_vpmgmt_reg *vpmgmt_reg ;
   struct __vxge_hw_non_offload_db_wrapper *nofl_db ;
   u32 max_mtu ;
   u32 vsport_number ;
   u32 max_kdfc_db ;
   u32 max_nofl_db ;
   u64 tim_tti_cfg1_saved ;
   u64 tim_tti_cfg3_saved ;
   u64 tim_rti_cfg1_saved ;
   u64 tim_rti_cfg3_saved ;
   struct __vxge_hw_ring *ringh ;
   struct __vxge_hw_fifo *fifoh ;
   struct list_head vpath_handles ;
   struct __vxge_hw_blockpool_entry *stats_block ;
   struct vxge_hw_vpath_stats_hw_info *hw_stats ;
   struct vxge_hw_vpath_stats_hw_info *hw_stats_sav ;
   struct vxge_hw_vpath_stats_sw_info *sw_stats ;
   spinlock_t lock ;
};
#line 713  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.h"
struct __vxge_hw_vpath_handle {
   struct list_head item ;
   struct __vxge_hw_virtualpath *vpath ;
};
#line 733  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.h"
struct __vxge_hw_device {
   u32 magic ;
   void *bar0 ;
   struct pci_dev *pdev ;
   struct net_device *ndev ;
   struct vxge_hw_device_config config ;
   enum vxge_hw_device_link_state link_state ;
   struct vxge_hw_uld_cbs *uld_callbacks ;
   u32 host_type ;
   u32 func_id ;
   u32 access_rights ;
   struct vxge_hw_legacy_reg *legacy_reg ;
   struct vxge_hw_toc_reg *toc_reg ;
   struct vxge_hw_common_reg *common_reg ;
   struct vxge_hw_mrpcim_reg *mrpcim_reg ;
   struct vxge_hw_srpcim_reg *srpcim_reg[17U] ;
   struct vxge_hw_vpmgmt_reg *vpmgmt_reg[17U] ;
   struct vxge_hw_vpath_reg *vpath_reg[17U] ;
   u8 *kdfc ;
   u8 *usdc ;
   struct __vxge_hw_virtualpath virtual_paths[17U] ;
   u64 vpath_assignments ;
   u64 vpaths_deployed ;
   u32 first_vp_id ;
   u64 tim_int_mask0[4U] ;
   u32 tim_int_mask1[4U] ;
   struct __vxge_hw_blockpool block_pool ;
   struct vxge_hw_device_stats stats ;
   u32 debug_module_mask ;
   u32 debug_level ;
   u32 level_err ;
   u32 level_trace ;
   u16 eprom_versions[8U] ;
};
#line 917  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.h"
struct __vxge_hw_ring {
   struct __vxge_hw_channel channel ;
   struct vxge_hw_mempool *mempool ;
   struct vxge_hw_vpath_reg *vp_reg ;
   struct vxge_hw_common_reg *common_reg ;
   u32 ring_length ;
   u32 buffer_mode ;
   u32 rxd_size ;
   u32 rxd_priv_size ;
   u32 per_rxd_space ;
   u32 rxds_per_block ;
   u32 rxdblock_priv_size ;
   u32 cmpl_cnt ;
   u32 vp_id ;
   u32 doorbell_cnt ;
   u32 total_db_cnt ;
   u64 rxds_limit ;
   u32 rtimer ;
   u64 tim_rti_cfg1_saved ;
   u64 tim_rti_cfg3_saved ;
   enum vxge_hw_status (*callback)(struct __vxge_hw_ring *, void *, u8 , void *) ;
   enum vxge_hw_status (*rxd_init)(void *, void *) ;
   void (*rxd_term)(void *, enum vxge_hw_rxd_state , void *) ;
   struct vxge_hw_vpath_stats_sw_ring_info *stats ;
   struct vxge_hw_ring_config *config ;
} __attribute__((__aligned__(64)));
#line 956 
enum vxge_hw_txdl_state {
    VXGE_HW_TXDL_STATE_NONE = 0,
    VXGE_HW_TXDL_STATE_AVAIL = 1,
    VXGE_HW_TXDL_STATE_POSTED = 2,
    VXGE_HW_TXDL_STATE_FREED = 3
};
#line 1002  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.h"
struct __vxge_hw_fifo {
   struct __vxge_hw_channel channel ;
   struct vxge_hw_mempool *mempool ;
   struct vxge_hw_fifo_config *config ;
   struct vxge_hw_vpath_reg *vp_reg ;
   struct __vxge_hw_non_offload_db_wrapper *nofl_db ;
   u64 interrupt_type ;
   u32 no_snoop_bits ;
   u32 txdl_per_memblock ;
   u32 txdl_size ;
   u32 priv_size ;
   u32 per_txdl_space ;
   u32 vp_id ;
   u32 tx_intr_num ;
   u32 rtimer ;
   u64 tim_tti_cfg1_saved ;
   u64 tim_tti_cfg3_saved ;
   enum vxge_hw_status (*callback)(struct __vxge_hw_fifo *, void *, enum vxge_hw_fifo_tcode , void *, struct sk_buff ***, int , int *) ;
   void (*txdl_term)(void *, enum vxge_hw_txdl_state , void *) ;
   struct vxge_hw_vpath_stats_sw_fifo_info *stats ;
} __attribute__((__aligned__(64)));
#line 1077 
struct vxge_hw_fifo_txd;
#line 1077  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.h"
struct __vxge_hw_fifo_txdl_priv {
   dma_addr_t dma_addr ;
   struct pci_dev *dma_handle ;
   ptrdiff_t dma_offset ;
   u32 frags ;
   u8 *align_vaddr_start ;
   u8 *align_vaddr ;
   dma_addr_t align_dma_addr ;
   struct pci_dev *align_dma_handle ;
   struct pci_dev *align_dma_acch ;
   ptrdiff_t align_dma_offset ;
   u32 align_used_frags ;
   u32 alloc_frags ;
   u32 unused ;
   struct __vxge_hw_fifo_txdl_priv *next_txdl_priv ;
   struct vxge_hw_fifo_txd *first_txdp ;
   void *memblock ;
};
#line 1111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.h"
struct __vxge_hw_non_offload_db_wrapper {
   u64 control_0 ;
   u64 txdl_ptr ;
};
#line 1259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.h"
struct vxge_hw_fifo_txd {
   u64 control_0 ;
   u64 control_1 ;
   u64 buffer_pointer ;
   u64 host_control ;
};
#line 1385  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.h"
struct vxge_hw_ring_rxd_1 {
   u64 host_control ;
   u64 control_0 ;
   u64 control_1 ;
   u64 buffer0_ptr ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef __s8 s8;
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __u16 __le16;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u64 __be64;
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u16 __sum16;
#line 154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int slab_flags_t;
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/export.h"
struct kernel_symbol {
   int value_offset ;
   int name_offset ;
   int namespace_offset ;
};
#line 136  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/init.h"
typedef void (*ctor_fn_t)(void);
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct jump_entry;
#line 87 
struct static_key_mod;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
union __anonunion_709 {
   unsigned long type ;
   struct jump_entry *entries ;
   struct static_key_mod *next ;
};
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct static_key {
   atomic_t enabled ;
   union __anonunion_709 __anonCompField_static_key_4 ;
};
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct jump_entry {
   s32 code ;
   s32 target ;
   long key ;
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_714 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_716 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 268  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_718 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bug.h"
struct bug_entry {
   int bug_addr_disp ;
   int file_disp ;
   unsigned short line ;
   unsigned short flags ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct tracepoint_func {
   void *func ;
   void *data ;
   int prio ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct tracepoint {
   char *name ;
   struct static_key key ;
   int (*regfunc)(void) ;
   void (*unregfunc)(void) ;
   struct tracepoint_func *funcs ;
};
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
typedef int tracepoint_ptr_t;
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct bpf_raw_event_map {
   struct tracepoint *tp ;
   void *bpf_func ;
   u32 num_args ;
   u32 writable_size ;
} __attribute__((__aligned__(32)));
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/orc_types.h"
struct orc_entry {
   s16 sp_offset ;
   s16 bp_offset ;
   unsigned int sp_reg : 4 ;
   unsigned int bp_reg : 4 ;
   unsigned int type : 2 ;
   unsigned int end : 1 ;
} __attribute__((__packed__));
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
struct firmware;
#line 196  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/smp.h"
struct __call_single_data {
   struct llist_node llist ;
   void (*func)(void *) ;
   void *info ;
   unsigned int flags ;
};
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/topology.h"
struct pci_bus;
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcu_segcblist.h"
struct rcu_segcblist {
   struct callback_head *head ;
   struct callback_head **tails[4U] ;
   unsigned long gp_seq[4U] ;
   atomic_long_t len ;
   long len_lazy ;
   u8 enabled ;
   u8 offloaded ;
};
#line 80 
struct srcu_struct;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcu.h"
struct srcu_node;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_data {
   unsigned long srcu_lock_count[2U] ;
   unsigned long srcu_unlock_count[2U] ;
   spinlock_t lock ;
   struct rcu_segcblist srcu_cblist ;
   unsigned long srcu_gp_seq_needed ;
   unsigned long srcu_gp_seq_needed_exp ;
   bool srcu_cblist_invoking ;
   struct timer_list delay_work ;
   struct work_struct work ;
   struct callback_head srcu_barrier_head ;
   struct srcu_node *mynode ;
   unsigned long grpmask ;
   int cpu ;
   struct srcu_struct *ssp ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_node {
   spinlock_t lock ;
   unsigned long srcu_have_cbs[4U] ;
   unsigned long srcu_data_have_cbs[4U] ;
   unsigned long srcu_gp_seq_needed_exp ;
   struct srcu_node *srcu_parent ;
   int grplo ;
   int grphi ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_struct {
   struct srcu_node node[521U] ;
   struct srcu_node *level[4U] ;
   struct mutex srcu_cb_mutex ;
   spinlock_t lock ;
   struct mutex srcu_gp_mutex ;
   unsigned int srcu_idx ;
   unsigned long srcu_gp_seq ;
   unsigned long srcu_gp_seq_needed ;
   unsigned long srcu_gp_seq_needed_exp ;
   unsigned long srcu_last_gp_end ;
   struct srcu_data *sda ;
   unsigned long srcu_barrier_seq ;
   struct mutex srcu_barrier_mutex ;
   struct completion srcu_barrier_completion ;
   atomic_t srcu_barrier_cpu_cnt ;
   struct delayed_work work ;
   struct lockdep_map dep_map ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct free_area {
   struct list_head free_list[6U] ;
   unsigned long nr_free ;
};
#line 158 
struct pglist_data;
#line 168  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zone_padding {
   char x[0U] ;
} __attribute__((__aligned__(4096)));
#line 285  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zone_reclaim_stat {
   unsigned long recent_rotated[2U] ;
   unsigned long recent_scanned[2U] ;
};
#line 304  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct lruvec {
   struct list_head lists[5U] ;
   struct zone_reclaim_stat reclaim_stat ;
   atomic_long_t inactive_age ;
   unsigned long refaults ;
   unsigned long flags ;
   struct pglist_data *pgdat ;
};
#line 340  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct per_cpu_pages {
   int count ;
   int high ;
   int batch ;
   struct list_head lists[3U] ;
};
#line 349  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct per_cpu_pageset {
   struct per_cpu_pages pcp ;
   s8 expire ;
   u16 vm_numa_stat_diff[6U] ;
   s8 stat_threshold ;
   s8 vm_stat_diff[13U] ;
};
#line 361  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct per_cpu_nodestat {
   s8 stat_threshold ;
   s8 vm_node_stat_diff[32U] ;
};
#line 365 
enum zone_type {
    ZONE_DMA = 0,
    ZONE_DMA32 = 1,
    ZONE_NORMAL = 2,
    ZONE_MOVABLE = 3,
    ZONE_DEVICE = 4,
    __MAX_NR_ZONES = 5
};
#line 432  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zone {
   unsigned long _watermark[3U] ;
   unsigned long watermark_boost ;
   unsigned long nr_reserved_highatomic ;
   long lowmem_reserve[5U] ;
   int node ;
   struct pglist_data *zone_pgdat ;
   struct per_cpu_pageset *pageset ;
   unsigned long zone_start_pfn ;
   atomic_long_t managed_pages ;
   unsigned long spanned_pages ;
   unsigned long present_pages ;
   char *name ;
   unsigned long nr_isolate_pageblock ;
   seqlock_t span_seqlock ;
   int initialized ;
   struct zone_padding _pad1_ ;
   struct free_area free_area[11U] ;
   unsigned long flags ;
   spinlock_t lock ;
   struct zone_padding _pad2_ ;
   unsigned long percpu_drift_mark ;
   unsigned long compact_cached_free_pfn ;
   unsigned long compact_cached_migrate_pfn[2U] ;
   unsigned long compact_init_migrate_pfn ;
   unsigned long compact_init_free_pfn ;
   unsigned int compact_considered ;
   unsigned int compact_defer_shift ;
   int compact_order_failed ;
   bool compact_blockskip_flush ;
   bool contiguous ;
   struct zone_padding _pad3_ ;
   atomic_long_t vm_stat[13U] ;
   atomic_long_t vm_numa_stat[6U] ;
} __attribute__((__aligned__(4096)));
#line 665  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zoneref {
   struct zone *zone ;
   int zone_idx ;
};
#line 684  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zonelist {
   struct zoneref _zonerefs[5121U] ;
};
#line 694  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct deferred_split {
   spinlock_t split_queue_lock ;
   struct list_head split_queue ;
   unsigned long split_queue_len ;
};
#line 710  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct pglist_data {
   struct zone node_zones[5U] ;
   struct zonelist node_zonelists[2U] ;
   int nr_zones ;
   spinlock_t node_size_lock ;
   unsigned long node_start_pfn ;
   unsigned long node_present_pages ;
   unsigned long node_spanned_pages ;
   int node_id ;
   wait_queue_head_t kswapd_wait ;
   wait_queue_head_t pfmemalloc_wait ;
   struct task_struct *kswapd ;
   int kswapd_order ;
   enum zone_type kswapd_classzone_idx ;
   int kswapd_failures ;
   int kcompactd_max_order ;
   enum zone_type kcompactd_classzone_idx ;
   wait_queue_head_t kcompactd_wait ;
   struct task_struct *kcompactd ;
   unsigned long totalreserve_pages ;
   unsigned long min_unmapped_pages ;
   unsigned long min_slab_pages ;
   struct zone_padding _pad1_ ;
   spinlock_t lru_lock ;
   unsigned long first_deferred_pfn ;
   struct deferred_split deferred_split_queue ;
   struct lruvec __lruvec ;
   unsigned long flags ;
   struct zone_padding _pad2_ ;
   struct per_cpu_nodestat *per_cpu_nodestats ;
   atomic_long_t vm_stat[32U] ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/socket.h"
struct socket;
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
struct msghdr {
   void *msg_name ;
   int msg_namelen ;
   struct iov_iter msg_iter ;
   void *msg_control ;
   __kernel_size_t msg_controllen ;
   unsigned int msg_flags ;
   struct kiocb *msg_iocb ;
};
#line 287  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fs.h"
struct bio;
#line 289 
struct hd_geometry;
#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_arg_1139 {
   char *buf ;
   void *data ;
};
#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct __anonstruct_read_descriptor_t_1138 {
   size_t written ;
   size_t count ;
   union __anonunion_arg_1139 arg ;
   int error ;
};
#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
typedef struct __anonstruct_read_descriptor_t_1138 read_descriptor_t;
#line 1771 
struct block_device_operations;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bvec.h"
struct bvec_iter {
   sector_t bi_sector ;
   unsigned int bi_size ;
   unsigned int bi_idx ;
   unsigned int bi_bvec_done ;
};
#line 201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/random.h"
enum ldv_9120 {
    SS_FREE = 0,
    SS_UNCONNECTED = 1,
    SS_CONNECTING = 2,
    SS_CONNECTED = 3,
    SS_DISCONNECTING = 4
};
#line 209  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/random.h"
typedef enum ldv_9120 socket_state;
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct socket_wq {
   wait_queue_head_t wait ;
   struct fasync_struct *fasync_list ;
   unsigned long flags ;
   struct callback_head rcu ;
} __attribute__((__aligned__(64)));
#line 112 
struct proto_ops;
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct socket {
   socket_state state ;
   short type ;
   unsigned long flags ;
   struct file *file ;
   struct sock *sk ;
   struct proto_ops *ops ;
   struct socket_wq wq ;
};
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct proto_ops {
   int family ;
   struct module *owner ;
   int (*release)(struct socket *) ;
   int (*bind)(struct socket *, struct sockaddr *, int ) ;
   int (*connect)(struct socket *, struct sockaddr *, int , int ) ;
   int (*socketpair)(struct socket *, struct socket *) ;
   int (*accept)(struct socket *, struct socket *, int , bool ) ;
   int (*getname)(struct socket *, struct sockaddr *, int ) ;
   __poll_t (*poll)(struct file *, struct socket *, struct poll_table_struct *) ;
   int (*ioctl)(struct socket *, unsigned int , unsigned long ) ;
   int (*compat_ioctl)(struct socket *, unsigned int , unsigned long ) ;
   int (*gettstamp)(struct socket *, void *, bool , bool ) ;
   int (*listen)(struct socket *, int ) ;
   int (*shutdown)(struct socket *, int ) ;
   int (*setsockopt)(struct socket *, int , int , char *, unsigned int ) ;
   int (*getsockopt)(struct socket *, int , int , char *, int *) ;
   int (*compat_setsockopt)(struct socket *, int , int , char *, unsigned int ) ;
   int (*compat_getsockopt)(struct socket *, int , int , char *, int *) ;
   int (*sendmsg)(struct socket *, struct msghdr *, size_t ) ;
   int (*recvmsg)(struct socket *, struct msghdr *, size_t , int ) ;
   int (*mmap)(struct file *, struct socket *, struct vm_area_struct *) ;
   ssize_t (*sendpage)(struct socket *, struct page *, int , size_t , int ) ;
   ssize_t (*splice_read)(struct socket *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ) ;
   int (*set_peek_off)(struct sock *, int ) ;
   int (*peek_len)(struct socket *) ;
   int (*read_sock)(struct sock *, read_descriptor_t *, int (*)(read_descriptor_t *, struct sk_buff *, unsigned int , size_t )) ;
   int (*sendpage_locked)(struct sock *, struct page *, int , size_t , int ) ;
   int (*sendmsg_locked)(struct sock *, struct msghdr *, size_t ) ;
   int (*set_rcvlowat)(struct sock *, int ) ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi_tunnel {
   __be64 tun_id ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi_common {
   int flowic_oif ;
   int flowic_iif ;
   __u32 flowic_mark ;
   __u8 flowic_tos ;
   __u8 flowic_scope ;
   __u8 flowic_proto ;
   __u8 flowic_flags ;
   __u32 flowic_secid ;
   kuid_t flowic_uid ;
   struct flowi_tunnel flowic_tun_key ;
   __u32 flowic_multipath_hash ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_ports_1211 {
   __be16 dport ;
   __be16 sport ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_icmpt_1212 {
   __u8 type ;
   __u8 code ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_dnports_1213 {
   __le16 dport ;
   __le16 sport ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_mht_1214 {
   __u8 type ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
union flowi_uli {
   struct __anonstruct_ports_1211 ports ;
   struct __anonstruct_icmpt_1212 icmpt ;
   struct __anonstruct_dnports_1213 dnports ;
   __be32 spi ;
   __be32 gre_key ;
   struct __anonstruct_mht_1214 mht ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi4 {
   struct flowi_common __fl_common ;
   __be32 saddr ;
   __be32 daddr ;
   union flowi_uli uli ;
} __attribute__((__aligned__(8)));
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi6 {
   struct flowi_common __fl_common ;
   struct in6_addr daddr ;
   struct in6_addr saddr ;
   __be32 flowlabel ;
   union flowi_uli uli ;
   __u32 mp_hash ;
} __attribute__((__aligned__(8)));
#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowidn {
   struct flowi_common __fl_common ;
   __le16 daddr ;
   __le16 saddr ;
   union flowi_uli uli ;
} __attribute__((__aligned__(8)));
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
union __anonunion_u_1215 {
   struct flowi_common __fl_common ;
   struct flowi4 ip4 ;
   struct flowi6 ip6 ;
   struct flowidn dn ;
};
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi {
   union __anonunion_u_1215 u ;
} __attribute__((__aligned__(8)));
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netfilter/nf_conntrack_common.h"
struct napi_struct;
#line 313  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
typedef struct bio_vec skb_frag_t;
#line 416  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct skb_shared_hwtstamps {
   ktime_t hwtstamp ;
};
#line 510  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct skb_shared_info {
   __u8 __unused ;
   __u8 meta_len ;
   __u8 nr_frags ;
   __u8 tx_flags ;
   unsigned short gso_size ;
   unsigned short gso_segs ;
   struct sk_buff *frag_list ;
   struct skb_shared_hwtstamps hwtstamps ;
   unsigned int gso_type ;
   u32 tskey ;
   atomic_t dataref ;
   void *destructor_arg ;
   skb_frag_t frags[17U] ;
};
#line 1165 
enum pkt_hash_types {
    PKT_HASH_TYPE_NONE = 0,
    PKT_HASH_TYPE_L2 = 1,
    PKT_HASH_TYPE_L3 = 2,
    PKT_HASH_TYPE_L4 = 3
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6_mib_device {
   atomic_long_t mibs[6U] ;
};
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6msg_mib_device {
   atomic_long_t mibs[512U] ;
};
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
enum irqreturn {
    IRQ_NONE = 0,
    IRQ_HANDLED = 1,
    IRQ_WAKE_THREAD = 2
};
#line 145  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
typedef enum irqreturn irqreturn_t;
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
enum bpf_prog_type {
    BPF_PROG_TYPE_UNSPEC = 0,
    BPF_PROG_TYPE_SOCKET_FILTER = 1,
    BPF_PROG_TYPE_KPROBE = 2,
    BPF_PROG_TYPE_SCHED_CLS = 3,
    BPF_PROG_TYPE_SCHED_ACT = 4,
    BPF_PROG_TYPE_TRACEPOINT = 5,
    BPF_PROG_TYPE_XDP = 6,
    BPF_PROG_TYPE_PERF_EVENT = 7,
    BPF_PROG_TYPE_CGROUP_SKB = 8,
    BPF_PROG_TYPE_CGROUP_SOCK = 9,
    BPF_PROG_TYPE_LWT_IN = 10,
    BPF_PROG_TYPE_LWT_OUT = 11,
    BPF_PROG_TYPE_LWT_XMIT = 12,
    BPF_PROG_TYPE_SOCK_OPS = 13,
    BPF_PROG_TYPE_SK_SKB = 14,
    BPF_PROG_TYPE_CGROUP_DEVICE = 15,
    BPF_PROG_TYPE_SK_MSG = 16,
    BPF_PROG_TYPE_RAW_TRACEPOINT = 17,
    BPF_PROG_TYPE_CGROUP_SOCK_ADDR = 18,
    BPF_PROG_TYPE_LWT_SEG6LOCAL = 19,
    BPF_PROG_TYPE_LIRC_MODE2 = 20,
    BPF_PROG_TYPE_SK_REUSEPORT = 21,
    BPF_PROG_TYPE_FLOW_DISSECTOR = 22,
    BPF_PROG_TYPE_CGROUP_SYSCTL = 23,
    BPF_PROG_TYPE_RAW_TRACEPOINT_WRITABLE = 24,
    BPF_PROG_TYPE_CGROUP_SOCKOPT = 25,
    BPF_PROG_TYPE_TRACING = 26
};
#line 169 
enum bpf_attach_type {
    BPF_CGROUP_INET_INGRESS = 0,
    BPF_CGROUP_INET_EGRESS = 1,
    BPF_CGROUP_INET_SOCK_CREATE = 2,
    BPF_CGROUP_SOCK_OPS = 3,
    BPF_SK_SKB_STREAM_PARSER = 4,
    BPF_SK_SKB_STREAM_VERDICT = 5,
    BPF_CGROUP_DEVICE = 6,
    BPF_SK_MSG_VERDICT = 7,
    BPF_CGROUP_INET4_BIND = 8,
    BPF_CGROUP_INET6_BIND = 9,
    BPF_CGROUP_INET4_CONNECT = 10,
    BPF_CGROUP_INET6_CONNECT = 11,
    BPF_CGROUP_INET4_POST_BIND = 12,
    BPF_CGROUP_INET6_POST_BIND = 13,
    BPF_CGROUP_UDP4_SENDMSG = 14,
    BPF_CGROUP_UDP6_SENDMSG = 15,
    BPF_LIRC_MODE2 = 16,
    BPF_FLOW_DISSECTOR = 17,
    BPF_CGROUP_SYSCTL = 18,
    BPF_CGROUP_UDP4_RECVMSG = 19,
    BPF_CGROUP_UDP6_RECVMSG = 20,
    BPF_CGROUP_GETSOCKOPT = 21,
    BPF_CGROUP_SETSOCKOPT = 22,
    BPF_TRACE_RAW_TP = 23,
    BPF_TRACE_FENTRY = 24,
    BPF_TRACE_FEXIT = 25,
    __MAX_BPF_ATTACH_TYPE = 26
};
#line 783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct __anonstruct_1348 {
   u8 is_data ;
   u8 padding ;
   u16 prioidx ;
   u32 classid ;
} __attribute__((__packed__));
#line 783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
union __anonunion_1347 {
   struct __anonstruct_1348 __anonCompField___anonunion_1347_151 ;
   u64 val ;
};
#line 783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct sock_cgroup_data {
   union __anonunion_1347 __anonCompField_sock_cgroup_data_152 ;
};
#line 160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/security.h"
struct xfrm_policy;
#line 178 
struct request_sock;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/pkt_sched.h"
struct tc_stats {
   __u64 bytes ;
   __u32 packets ;
   __u32 drops ;
   __u32 overlimits ;
   __u32 bps ;
   __u32 pps ;
   __u32 qlen ;
   __u32 backlog ;
};
#line 102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/pkt_sched.h"
struct tc_sizespec {
   unsigned char cell_log ;
   unsigned char size_log ;
   short cell_align ;
   int overhead ;
   unsigned int linklayer ;
   unsigned int mpu ;
   unsigned int mtu ;
   unsigned int tsize ;
};
#line 201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_hw_addr {
   struct list_head list ;
   unsigned char addr[32U] ;
   unsigned char type ;
   bool global_use ;
   int sync_cnt ;
   int refcount ;
   int synced ;
   struct callback_head callback_head ;
};
#line 302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct gro_list {
   struct list_head list ;
   int count ;
};
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct napi_struct {
   struct list_head poll_list ;
   unsigned long state ;
   int weight ;
   unsigned long gro_bitmask ;
   int (*poll)(struct napi_struct *, int ) ;
   int poll_owner ;
   struct net_device *dev ;
   struct gro_list gro_hash[8U] ;
   struct sk_buff *skb ;
   struct list_head rx_list ;
   int rx_count ;
   struct hrtimer timer ;
   struct list_head dev_list ;
   struct hlist_node napi_hash_node ;
   unsigned int napi_id ;
};
#line 362 
enum gro_result {
    GRO_MERGED = 0,
    GRO_MERGED_FREE = 1,
    GRO_HELD = 2,
    GRO_NORMAL = 3,
    GRO_DROP = 4,
    GRO_CONSUMED = 5
};
#line 371  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef enum gro_result gro_result_t;
#line 3610 
enum skb_free_reason {
    SKB_REASON_CONSUMED = 0,
    SKB_REASON_DROPPED = 1
};
#line 567  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rtnetlink.h"
struct tcmsg {
   unsigned char tcm_family ;
   unsigned char tcm__pad1 ;
   unsigned short tcm__pad2 ;
   int tcm_ifindex ;
   __u32 tcm_handle ;
   __u32 tcm_parent ;
   __u32 tcm_info ;
};
#line 747  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
typedef unsigned long kernel_ulong_t;
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct pci_device_id {
   __u32 vendor ;
   __u32 device ;
   __u32 subvendor ;
   __u32 subdevice ;
   __u32 class ;
   __u32 class_mask ;
   kernel_ulong_t driver_data ;
};
#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct acpi_device_id {
   __u8 id[9U] ;
   kernel_ulong_t driver_data ;
   __u32 cls ;
   __u32 cls_msk ;
};
#line 260  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct of_device_id {
   char name[32U] ;
   char type[32U] ;
   char compatible[128U] ;
   void *data ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct hotplug_slot;
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_slot {
   struct pci_bus *bus ;
   struct list_head list ;
   struct hotplug_slot *hotplug ;
   unsigned char number ;
   struct kobject kobj ;
};
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef int pci_power_t;
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned int pci_channel_state_t;
#line 162 
enum pci_channel_state {
    pci_channel_io_normal = 1,
    pci_channel_io_frozen = 2,
    pci_channel_io_perm_failure = 3
};
#line 181  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned short pci_dev_flags_t;
#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned short pci_bus_flags_t;
#line 282 
struct pcie_link_state;
#line 283 
struct pci_vpd;
#line 284 
struct pci_sriov;
#line 285 
struct pci_p2pdma;
#line 290 
struct aer_stats;
#line 290 
struct pci_driver;
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
union __anonunion_1399 {
   struct pci_sriov *sriov ;
   struct pci_dev *physfn ;
};
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_dev {
   struct list_head bus_list ;
   struct pci_bus *bus ;
   struct pci_bus *subordinate ;
   void *sysdata ;
   struct proc_dir_entry *procent ;
   struct pci_slot *slot ;
   unsigned int devfn ;
   unsigned short vendor ;
   unsigned short device ;
   unsigned short subsystem_vendor ;
   unsigned short subsystem_device ;
   unsigned int class ;
   u8 revision ;
   u8 hdr_type ;
   u16 aer_cap ;
   struct aer_stats *aer_stats ;
   u8 pcie_cap ;
   u8 msi_cap ;
   u8 msix_cap ;
   u8 pcie_mpss : 3 ;
   u8 rom_base_reg ;
   u8 pin ;
   u16 pcie_flags_reg ;
   unsigned long *dma_alias_mask ;
   struct pci_driver *driver ;
   u64 dma_mask ;
   struct device_dma_parameters dma_parms ;
   pci_power_t current_state ;
   unsigned int imm_ready : 1 ;
   u8 pm_cap ;
   unsigned int pme_support : 5 ;
   unsigned int pme_poll : 1 ;
   unsigned int d1_support : 1 ;
   unsigned int d2_support : 1 ;
   unsigned int no_d1d2 : 1 ;
   unsigned int no_d3cold : 1 ;
   unsigned int bridge_d3 : 1 ;
   unsigned int d3cold_allowed : 1 ;
   unsigned int mmio_always_on : 1 ;
   unsigned int wakeup_prepared : 1 ;
   unsigned int runtime_d3cold : 1 ;
   unsigned int skip_bus_pm : 1 ;
   unsigned int ignore_hotplug : 1 ;
   unsigned int hotplug_user_indicators : 1 ;
   unsigned int clear_retrain_link : 1 ;
   unsigned int d3_delay ;
   unsigned int d3cold_delay ;
   struct pcie_link_state *link_state ;
   unsigned int ltr_path : 1 ;
   unsigned int eetlp_prefix_path : 1 ;
   pci_channel_state_t error_state ;
   struct device dev ;
   int cfg_size ;
   unsigned int irq ;
   struct resource resource[17U] ;
   bool match_driver ;
   unsigned int transparent : 1 ;
   unsigned int io_window : 1 ;
   unsigned int pref_window : 1 ;
   unsigned int pref_64_window : 1 ;
   unsigned int multifunction : 1 ;
   unsigned int is_busmaster : 1 ;
   unsigned int no_msi : 1 ;
   unsigned int no_64bit_msi : 1 ;
   unsigned int block_cfg_access : 1 ;
   unsigned int broken_parity_status : 1 ;
   unsigned int irq_reroute_variant : 2 ;
   unsigned int msi_enabled : 1 ;
   unsigned int msix_enabled : 1 ;
   unsigned int ari_enabled : 1 ;
   unsigned int ats_enabled : 1 ;
   unsigned int pasid_enabled : 1 ;
   unsigned int pri_enabled : 1 ;
   unsigned int is_managed : 1 ;
   unsigned int needs_freset : 1 ;
   unsigned int state_saved : 1 ;
   unsigned int is_physfn : 1 ;
   unsigned int is_virtfn : 1 ;
   unsigned int reset_fn : 1 ;
   unsigned int is_hotplug_bridge : 1 ;
   unsigned int shpc_managed : 1 ;
   unsigned int is_thunderbolt : 1 ;
   unsigned int untrusted : 1 ;
   unsigned int __aer_firmware_first_valid : 1 ;
   unsigned int __aer_firmware_first : 1 ;
   unsigned int broken_intx_masking : 1 ;
   unsigned int io_window_1k : 1 ;
   unsigned int irq_managed : 1 ;
   unsigned int non_compliant_bars : 1 ;
   unsigned int is_probed : 1 ;
   unsigned int link_active_reporting : 1 ;
   unsigned int no_vf_scan : 1 ;
   pci_dev_flags_t dev_flags ;
   atomic_t enable_cnt ;
   u32 saved_config_space[16U] ;
   struct hlist_head saved_cap_space ;
   struct bin_attribute *rom_attr ;
   int rom_attr_enabled ;
   struct bin_attribute *res_attr[17U] ;
   struct bin_attribute *res_attr_wc[17U] ;
   unsigned int broken_cmd_compl : 1 ;
   unsigned int ptm_root : 1 ;
   unsigned int ptm_enabled : 1 ;
   u8 ptm_granularity ;
   struct attribute_group **msi_irq_groups ;
   struct pci_vpd *vpd ;
   union __anonunion_1399 __anonCompField_pci_dev_160 ;
   u16 ats_cap ;
   u8 ats_stu ;
   u16 pri_cap ;
   u32 pri_reqs_alloc ;
   unsigned int pasid_required : 1 ;
   u16 pasid_cap ;
   u16 pasid_features ;
   struct pci_p2pdma *p2pdma ;
   phys_addr_t rom ;
   size_t romlen ;
   char *driver_override ;
   unsigned long priv_flags ;
};
#line 493 
struct pci_ops;
#line 493 
struct msi_controller;
#line 571  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_bus {
   struct list_head node ;
   struct pci_bus *parent ;
   struct list_head children ;
   struct list_head devices ;
   struct pci_dev *self ;
   struct list_head slots ;
   struct resource *resource[4U] ;
   struct list_head resources ;
   struct resource busn_res ;
   struct pci_ops *ops ;
   struct msi_controller *msi ;
   void *sysdata ;
   struct proc_dir_entry *procdir ;
   unsigned char number ;
   unsigned char primary ;
   unsigned char max_bus_speed ;
   unsigned char cur_bus_speed ;
   char name[48U] ;
   unsigned short bridge_ctl ;
   pci_bus_flags_t bus_flags ;
   struct device *bridge ;
   struct device dev ;
   struct bin_attribute *legacy_io ;
   struct bin_attribute *legacy_mem ;
   unsigned int is_added : 1 ;
};
#line 697  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_ops {
   int (*add_bus)(struct pci_bus *) ;
   void (*remove_bus)(struct pci_bus *) ;
   void *(*map_bus)(struct pci_bus *, unsigned int , int ) ;
   int (*read)(struct pci_bus *, unsigned int , int , int , u32 *) ;
   int (*write)(struct pci_bus *, unsigned int , int , int , u32 ) ;
};
#line 725  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_dynids {
   spinlock_t lock ;
   struct list_head list ;
};
#line 729  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned int pci_ers_result_t;
#line 761  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_error_handlers {
   pci_ers_result_t (*error_detected)(struct pci_dev *, enum pci_channel_state ) ;
   pci_ers_result_t (*mmio_enabled)(struct pci_dev *) ;
   pci_ers_result_t (*slot_reset)(struct pci_dev *) ;
   void (*reset_prepare)(struct pci_dev *) ;
   void (*reset_done)(struct pci_dev *) ;
   void (*resume)(struct pci_dev *) ;
};
#line 824  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_driver {
   struct list_head node ;
   char *name ;
   struct pci_device_id *id_table ;
   int (*probe)(struct pci_dev *, struct pci_device_id *) ;
   void (*remove)(struct pci_dev *) ;
   int (*suspend)(struct pci_dev *, pm_message_t ) ;
   int (*resume)(struct pci_dev *) ;
   void (*shutdown)(struct pci_dev *) ;
   int (*sriov_configure)(struct pci_dev *, int ) ;
   struct pci_error_handlers *err_handler ;
   struct attribute_group **groups ;
   struct device_driver driver ;
   struct pci_dynids dynids ;
};
#line 1424  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct msix_entry {
   u32 vector ;
   u16 entry ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page_counter.h"
struct page_counter {
   atomic_long_t usage ;
   unsigned long min ;
   unsigned long low ;
   unsigned long max ;
   struct page_counter *parent ;
   unsigned long emin ;
   atomic_long_t min_usage ;
   atomic_long_t children_min_usage ;
   unsigned long elow ;
   atomic_long_t low_usage ;
   atomic_long_t children_low_usage ;
   unsigned long watermark ;
   unsigned long failcnt ;
};
#line 66 
struct eventfd_ctx;
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmpressure.h"
struct vmpressure {
   unsigned long scanned ;
   unsigned long reclaimed ;
   unsigned long tree_scanned ;
   unsigned long tree_reclaimed ;
   spinlock_t sr_lock ;
   struct list_head events ;
   struct mutex events_lock ;
   struct work_struct work ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/flex_proportions.h"
struct fprop_global {
   struct percpu_counter events ;
   unsigned int period ;
   seqcount_t sequence ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/flex_proportions.h"
struct fprop_local_percpu {
   struct percpu_counter events ;
   unsigned int period ;
   raw_spinlock_t lock ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/flex_proportions.h"
typedef int congested_fn(void *, int );
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
enum wb_reason {
    WB_REASON_BACKGROUND = 0,
    WB_REASON_VMSCAN = 1,
    WB_REASON_SYNC = 2,
    WB_REASON_PERIODIC = 3,
    WB_REASON_LAPTOP_TIMER = 4,
    WB_REASON_FREE_MORE_MEM = 5,
    WB_REASON_FS_FREE_SPACE = 6,
    WB_REASON_FORKER_THREAD = 7,
    WB_REASON_FOREIGN_FLUSH = 8,
    WB_REASON_MAX = 9
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct wb_completion {
   atomic_t cnt ;
   wait_queue_head_t *waitq ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct bdi_writeback_congested {
   unsigned long state ;
   refcount_t refcnt ;
   struct backing_dev_info *__bdi ;
   int blkcg_id ;
   struct rb_node rb_node ;
};
#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
union __anonunion_1400 {
   struct work_struct release_work ;
   struct callback_head rcu ;
};
#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct bdi_writeback {
   struct backing_dev_info *bdi ;
   unsigned long state ;
   unsigned long last_old_flush ;
   struct list_head b_dirty ;
   struct list_head b_io ;
   struct list_head b_more_io ;
   struct list_head b_dirty_time ;
   spinlock_t list_lock ;
   struct percpu_counter stat[4U] ;
   struct bdi_writeback_congested *congested ;
   unsigned long bw_time_stamp ;
   unsigned long dirtied_stamp ;
   unsigned long written_stamp ;
   unsigned long write_bandwidth ;
   unsigned long avg_write_bandwidth ;
   unsigned long dirty_ratelimit ;
   unsigned long balanced_dirty_ratelimit ;
   struct fprop_local_percpu completions ;
   int dirty_exceeded ;
   enum wb_reason start_all_reason ;
   spinlock_t work_lock ;
   struct list_head work_list ;
   struct delayed_work dwork ;
   unsigned long dirty_sleep ;
   struct list_head bdi_node ;
   struct percpu_ref refcnt ;
   struct fprop_local_percpu memcg_completions ;
   struct cgroup_subsys_state *memcg_css ;
   struct cgroup_subsys_state *blkcg_css ;
   struct list_head memcg_node ;
   struct list_head blkcg_node ;
   union __anonunion_1400 __anonCompField_bdi_writeback_161 ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct backing_dev_info {
   u64 id ;
   struct rb_node rb_node ;
   struct list_head bdi_list ;
   unsigned long ra_pages ;
   unsigned long io_pages ;
   congested_fn *congested_fn ;
   void *congested_data ;
   char *name ;
   struct kref refcnt ;
   unsigned int capabilities ;
   unsigned int min_ratio ;
   unsigned int max_ratio ;
   unsigned int max_prop_frac ;
   atomic_long_t tot_write_bandwidth ;
   struct bdi_writeback wb ;
   struct list_head wb_list ;
   struct xarray cgwb_tree ;
   struct rb_root cgwb_congested_tree ;
   struct mutex cgwb_release_mutex ;
   struct rw_semaphore wb_switch_rwsem ;
   wait_queue_head_t wb_waitq ;
   struct device *dev ;
   struct device *owner ;
   struct timer_list laptop_mode_wb_timer ;
   struct dentry *debug_dir ;
};
#line 306 
struct bio_set;
#line 307 
struct bio_integrity_payload;
#line 308  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
typedef void bio_end_io_t(struct bio *);
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
typedef u8 blk_status_t;
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
struct bio_issue {
   u64 value ;
};
#line 144 
struct blkcg_gq;
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
union __anonunion_1401 {
   struct bio_integrity_payload *bi_integrity ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
struct bio {
   struct bio *bi_next ;
   struct gendisk *bi_disk ;
   unsigned int bi_opf ;
   unsigned short bi_flags ;
   unsigned short bi_ioprio ;
   unsigned short bi_write_hint ;
   blk_status_t bi_status ;
   u8 bi_partno ;
   atomic_t __bi_remaining ;
   struct bvec_iter bi_iter ;
   bio_end_io_t *bi_end_io ;
   void *bi_private ;
   struct blkcg_gq *bi_blkg ;
   struct bio_issue bi_issue ;
   u64 bi_iocost_cost ;
   union __anonunion_1401 __anonCompField_bio_162 ;
   unsigned short bi_vcnt ;
   unsigned short bi_max_vecs ;
   atomic_t __bi_cnt ;
   struct bio_vec *bi_io_vec ;
   struct bio_set *bi_pool ;
   struct bio_vec bi_inline_vecs[0U] ;
};
#line 452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
typedef unsigned int blk_qc_t;
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
struct blk_rq_stat {
   u64 mean ;
   u64 min ;
   u64 max ;
   u32 nr_samples ;
   u64 batch ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct disk_stats {
   u64 nsecs[4U] ;
   unsigned long sectors[4U] ;
   unsigned long ios[4U] ;
   unsigned long merges[4U] ;
   unsigned long io_ticks ;
   unsigned long time_in_queue ;
   local_t in_flight[2U] ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct partition_meta_info {
   char uuid[37U] ;
   u8 volname[64U] ;
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct hd_struct {
   sector_t start_sect ;
   sector_t nr_sects ;
   seqcount_t nr_sects_seq ;
   sector_t alignment_offset ;
   unsigned int discard_alignment ;
   struct device __dev ;
   struct kobject *holder_dir ;
   int policy ;
   int partno ;
   struct partition_meta_info *info ;
   int make_it_fail ;
   unsigned long stamp ;
   struct disk_stats *dkstats ;
   struct percpu_ref ref ;
   struct rcu_work rcu_work ;
};
#line 160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct disk_part_tbl {
   struct callback_head callback_head ;
   int len ;
   struct hd_struct *last_lookup ;
   struct hd_struct *part[] ;
};
#line 166 
struct disk_events;
#line 167 
struct badblocks;
#line 172 
struct blk_integrity_profile;
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct blk_integrity {
   struct blk_integrity_profile *profile ;
   unsigned char flags ;
   unsigned char tuple_size ;
   unsigned char interval_exp ;
   unsigned char tag_size ;
};
#line 182 
struct timer_rand_state;
#line 182  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct gendisk {
   int major ;
   int first_minor ;
   int minors ;
   char disk_name[32U] ;
   char *(*devnode)(struct gendisk *, umode_t *) ;
   unsigned short events ;
   unsigned short event_flags ;
   struct disk_part_tbl *part_tbl ;
   struct hd_struct part0 ;
   struct block_device_operations *fops ;
   struct request_queue *queue ;
   void *private_data ;
   int flags ;
   struct rw_semaphore lookup_sem ;
   struct kobject *slave_dir ;
   struct timer_rand_state *random ;
   atomic_t sync_io ;
   struct disk_events *ev ;
   struct kobject integrity_kobj ;
   int node_id ;
   struct badblocks *bb ;
   struct lockdep_map lockdep_map ;
};
#line 637  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pagemap.h"
typedef void *mempool_alloc_t(gfp_t , void *);
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mempool.h"
typedef void mempool_free_t(void *, void *);
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mempool.h"
struct mempool_s {
   spinlock_t lock ;
   int min_nr ;
   int curr_nr ;
   void **elements ;
   void *pool_data ;
   mempool_alloc_t *alloc ;
   mempool_free_t *free ;
   wait_queue_head_t wait ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mempool.h"
typedef struct mempool_s mempool_t;
#line 307  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bio.h"
struct bio_integrity_payload {
   struct bio *bip_bio ;
   struct bvec_iter bip_iter ;
   unsigned short bip_slab ;
   unsigned short bip_vcnt ;
   unsigned short bip_max_vcnt ;
   unsigned short bip_flags ;
   struct bvec_iter bio_iter ;
   struct work_struct bip_work ;
   struct bio_vec *bip_vec ;
   struct bio_vec bip_inline_vecs[0U] ;
};
#line 575  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bio.h"
struct bio_list {
   struct bio *head ;
   struct bio *tail ;
};
#line 703  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bio.h"
struct bio_set {
   struct kmem_cache *bio_slab ;
   unsigned int front_pad ;
   mempool_t bio_pool ;
   mempool_t bvec_pool ;
   mempool_t bio_integrity_pool ;
   mempool_t bvec_integrity_pool ;
   spinlock_t rescue_lock ;
   struct bio_list rescue_list ;
   struct work_struct rescue_work ;
   struct workqueue_struct *rescue_workqueue ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bsg.h"
struct sg_io_v4 {
   __s32 guard ;
   __u32 protocol ;
   __u32 subprotocol ;
   __u32 request_len ;
   __u64 request ;
   __u64 request_tag ;
   __u32 request_attr ;
   __u32 request_priority ;
   __u32 request_extra ;
   __u32 max_response_len ;
   __u64 response ;
   __u32 dout_iovec_count ;
   __u32 dout_xfer_len ;
   __u32 din_iovec_count ;
   __u32 din_xfer_len ;
   __u64 dout_xferp ;
   __u64 din_xferp ;
   __u32 timeout ;
   __u32 flags ;
   __u64 usr_ptr ;
   __u32 spare_in ;
   __u32 driver_status ;
   __u32 transport_status ;
   __u32 device_status ;
   __u32 retry_delay ;
   __u32 info ;
   __u32 duration ;
   __u32 response_len ;
   __s32 din_resid ;
   __s32 dout_resid ;
   __u64 generated_tag ;
   __u32 spare_out ;
   __u32 padding ;
};
#line 65 
struct request;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bsg.h"
struct bsg_ops {
   int (*check_proto)(struct sg_io_v4 *) ;
   int (*fill_hdr)(struct request *, struct sg_io_v4 *, fmode_t ) ;
   int (*complete_rq)(struct request *, struct sg_io_v4 *) ;
   void (*free_rq)(struct request *) ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bsg.h"
struct bsg_class_device {
   struct device *class_dev ;
   int minor ;
   struct request_queue *queue ;
   struct bsg_ops *ops ;
};
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/blkzoned.h"
struct blk_zone {
   __u64 start ;
   __u64 len ;
   __u64 wp ;
   __u8 type ;
   __u8 cond ;
   __u8 non_seq ;
   __u8 reset ;
   __u8 reserved[36U] ;
};
#line 134 
struct elevator_queue;
#line 135 
struct blk_trace;
#line 138 
struct blk_flush_queue;
#line 139 
struct pr_ops;
#line 140 
struct rq_qos;
#line 141 
struct blk_queue_stats;
#line 142 
struct blk_stat_callback;
#line 143  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/blkzoned.h"
typedef void rq_end_io_fn(struct request *, blk_status_t );
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef __u32 req_flags_t;
#line 67 
enum mq_rq_state {
    MQ_RQ_IDLE = 0,
    MQ_RQ_IN_FLIGHT = 1,
    MQ_RQ_COMPLETE = 2
};
#line 132 
struct blk_mq_ctx;
#line 132 
struct blk_mq_hw_ctx;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_1404 {
   struct hlist_node hash ;
   struct list_head ipi_list ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_1405 {
   struct rb_node rb_node ;
   struct bio_vec special_vec ;
   void *completion_data ;
   int error_count ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct __anonstruct_elv_1407 {
   struct io_cq *icq ;
   void *priv[2U] ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct __anonstruct_flush_1408 {
   unsigned int seq ;
   struct list_head list ;
   rq_end_io_fn *saved_end_io ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_1406 {
   struct __anonstruct_elv_1407 elv ;
   struct __anonstruct_flush_1408 flush ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_1409 {
   struct __call_single_data csd ;
   u64 fifo_time ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct request {
   struct request_queue *q ;
   struct blk_mq_ctx *mq_ctx ;
   struct blk_mq_hw_ctx *mq_hctx ;
   unsigned int cmd_flags ;
   req_flags_t rq_flags ;
   int tag ;
   int internal_tag ;
   unsigned int __data_len ;
   sector_t __sector ;
   struct bio *bio ;
   struct bio *biotail ;
   struct list_head queuelist ;
   union __anonunion_1404 __anonCompField_request_163 ;
   union __anonunion_1405 __anonCompField_request_164 ;
   union __anonunion_1406 __anonCompField_request_165 ;
   struct gendisk *rq_disk ;
   struct hd_struct *part ;
   u64 alloc_time_ns ;
   u64 start_time_ns ;
   u64 io_start_time_ns ;
   unsigned short wbt_flags ;
   unsigned short stats_sectors ;
   unsigned short nr_phys_segments ;
   unsigned short nr_integrity_segments ;
   unsigned short write_hint ;
   unsigned short ioprio ;
   unsigned int extra_len ;
   enum mq_rq_state state ;
   refcount_t ref ;
   unsigned int timeout ;
   unsigned long deadline ;
   union __anonunion_1409 __anonCompField_request_166 ;
   rq_end_io_fn *end_io ;
   void *end_io_data ;
};
#line 285 
struct elevator_type;
#line 286 
struct blk_mq_debugfs_attr;
#line 287 
enum elv_merge {
    ELEVATOR_NO_MERGE = 0,
    ELEVATOR_FRONT_MERGE = 1,
    ELEVATOR_BACK_MERGE = 2,
    ELEVATOR_DISCARD_MERGE = 3
};
#line 294 
struct blk_mq_alloc_data;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elevator_mq_ops {
   int (*init_sched)(struct request_queue *, struct elevator_type *) ;
   void (*exit_sched)(struct elevator_queue *) ;
   int (*init_hctx)(struct blk_mq_hw_ctx *, unsigned int ) ;
   void (*exit_hctx)(struct blk_mq_hw_ctx *, unsigned int ) ;
   void (*depth_updated)(struct blk_mq_hw_ctx *) ;
   bool (*allow_merge)(struct request_queue *, struct request *, struct bio *) ;
   bool (*bio_merge)(struct blk_mq_hw_ctx *, struct bio *, unsigned int ) ;
   int (*request_merge)(struct request_queue *, struct request **, struct bio *) ;
   void (*request_merged)(struct request_queue *, struct request *, enum elv_merge ) ;
   void (*requests_merged)(struct request_queue *, struct request *, struct request *) ;
   void (*limit_depth)(unsigned int , struct blk_mq_alloc_data *) ;
   void (*prepare_request)(struct request *, struct bio *) ;
   void (*finish_request)(struct request *) ;
   void (*insert_requests)(struct blk_mq_hw_ctx *, struct list_head *, bool ) ;
   struct request *(*dispatch_request)(struct blk_mq_hw_ctx *) ;
   bool (*has_work)(struct blk_mq_hw_ctx *) ;
   void (*completed_request)(struct request *, u64 ) ;
   void (*requeue_request)(struct request *) ;
   struct request *(*former_request)(struct request_queue *, struct request *) ;
   struct request *(*next_request)(struct request_queue *, struct request *) ;
   void (*init_icq)(struct io_cq *) ;
   void (*exit_icq)(struct io_cq *) ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elv_fs_entry {
   struct attribute attr ;
   ssize_t (*show)(struct elevator_queue *, char *) ;
   ssize_t (*store)(struct elevator_queue *, char *, size_t ) ;
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elevator_type {
   struct kmem_cache *icq_cache ;
   struct elevator_mq_ops ops ;
   size_t icq_size ;
   size_t icq_align ;
   struct elv_fs_entry *elevator_attrs ;
   char *elevator_name ;
   char *elevator_alias ;
   unsigned int elevator_features ;
   struct module *elevator_owner ;
   struct blk_mq_debugfs_attr *queue_debugfs_attrs ;
   struct blk_mq_debugfs_attr *hctx_debugfs_attrs ;
   char icq_cache_name[22U] ;
   struct list_head list ;
};
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elevator_queue {
   struct elevator_type *type ;
   void *elevator_data ;
   struct kobject kobj ;
   struct mutex sysfs_lock ;
   unsigned int registered : 1 ;
   struct hlist_head hash[64U] ;
};
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
typedef blk_qc_t make_request_fn(struct request_queue *, struct bio *);
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef int dma_drain_needed_fn(struct request *);
#line 304 
enum blk_zoned_model {
    BLK_ZONED_NONE = 0,
    BLK_ZONED_HA = 1,
    BLK_ZONED_HM = 2
};
#line 320  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct queue_limits {
   unsigned long bounce_pfn ;
   unsigned long seg_boundary_mask ;
   unsigned long virt_boundary_mask ;
   unsigned int max_hw_sectors ;
   unsigned int max_dev_sectors ;
   unsigned int chunk_sectors ;
   unsigned int max_sectors ;
   unsigned int max_segment_size ;
   unsigned int physical_block_size ;
   unsigned int logical_block_size ;
   unsigned int alignment_offset ;
   unsigned int io_min ;
   unsigned int io_opt ;
   unsigned int max_discard_sectors ;
   unsigned int max_hw_discard_sectors ;
   unsigned int max_write_same_sectors ;
   unsigned int max_write_zeroes_sectors ;
   unsigned int discard_granularity ;
   unsigned int discard_alignment ;
   unsigned short max_segments ;
   unsigned short max_integrity_segments ;
   unsigned short max_discard_segments ;
   unsigned char misaligned ;
   unsigned char discard_misaligned ;
   unsigned char raid_partial_stripes_expensive ;
   enum blk_zoned_model zoned ;
};
#line 394 
struct blk_mq_ops;
#line 394 
struct throtl_data;
#line 394 
struct blk_mq_tag_set;
#line 394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct request_queue {
   struct request *last_merge ;
   struct elevator_queue *elevator ;
   struct blk_queue_stats *stats ;
   struct rq_qos *rq_qos ;
   make_request_fn *make_request_fn ;
   dma_drain_needed_fn *dma_drain_needed ;
   struct blk_mq_ops *mq_ops ;
   struct blk_mq_ctx *queue_ctx ;
   unsigned int queue_depth ;
   struct blk_mq_hw_ctx **queue_hw_ctx ;
   unsigned int nr_hw_queues ;
   struct backing_dev_info *backing_dev_info ;
   void *queuedata ;
   unsigned long queue_flags ;
   atomic_t pm_only ;
   int id ;
   gfp_t bounce_gfp ;
   spinlock_t queue_lock ;
   struct kobject kobj ;
   struct kobject *mq_kobj ;
   struct blk_integrity integrity ;
   struct device *dev ;
   int rpm_status ;
   unsigned int nr_pending ;
   unsigned long nr_requests ;
   unsigned int dma_drain_size ;
   void *dma_drain_buffer ;
   unsigned int dma_pad_mask ;
   unsigned int dma_alignment ;
   unsigned int rq_timeout ;
   int poll_nsec ;
   struct blk_stat_callback *poll_cb ;
   struct blk_rq_stat poll_stat[16U] ;
   struct timer_list timeout ;
   struct work_struct timeout_work ;
   struct list_head icq_list ;
   unsigned long blkcg_pols[1U] ;
   struct blkcg_gq *root_blkg ;
   struct list_head blkg_list ;
   struct queue_limits limits ;
   unsigned int required_elevator_features ;
   unsigned int nr_zones ;
   unsigned long *conv_zones_bitmap ;
   unsigned long *seq_zones_wlock ;
   unsigned int sg_timeout ;
   unsigned int sg_reserved_size ;
   int node ;
   struct blk_trace *blk_trace ;
   struct mutex blk_trace_mutex ;
   struct blk_flush_queue *fq ;
   struct list_head requeue_list ;
   spinlock_t requeue_lock ;
   struct delayed_work requeue_work ;
   struct mutex sysfs_lock ;
   struct mutex sysfs_dir_lock ;
   struct list_head unused_hctx_list ;
   spinlock_t unused_hctx_lock ;
   int mq_freeze_depth ;
   struct bsg_class_device bsg_dev ;
   struct throtl_data *td ;
   struct callback_head callback_head ;
   wait_queue_head_t mq_freeze_wq ;
   struct mutex mq_freeze_lock ;
   struct percpu_ref q_usage_counter ;
   struct blk_mq_tag_set *tag_set ;
   struct list_head tag_set_list ;
   struct bio_set bio_split ;
   struct dentry *debugfs_dir ;
   struct dentry *sched_debugfs_dir ;
   struct dentry *rqos_debugfs_dir ;
   bool mq_sysfs_init_done ;
   size_t cmd_size ;
   struct work_struct release_work ;
   u64 write_hints[5U] ;
};
#line 1160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct blk_plug {
   struct list_head mq_list ;
   struct list_head cb_list ;
   unsigned short rq_count ;
   bool multiple_queues ;
};
#line 1514  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct blk_integrity_iter {
   void *prot_buf ;
   void *data_buf ;
   sector_t seed ;
   unsigned int data_size ;
   unsigned short interval ;
   char *disk_name ;
};
#line 1522  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef blk_status_t integrity_processing_fn(struct blk_integrity_iter *);
#line 1524  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef void integrity_prepare_fn(struct request *);
#line 1525  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef void integrity_complete_fn(struct request *, unsigned int );
#line 1527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct blk_integrity_profile {
   integrity_processing_fn *generate_fn ;
   integrity_processing_fn *verify_fn ;
   integrity_prepare_fn *prepare_fn ;
   integrity_complete_fn *complete_fn ;
   char *name ;
};
#line 1693  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct block_device_operations {
   int (*open)(struct block_device *, fmode_t ) ;
   void (*release)(struct gendisk *, fmode_t ) ;
   int (*rw_page)(struct block_device *, sector_t , struct page *, unsigned int ) ;
   int (*ioctl)(struct block_device *, fmode_t , unsigned int , unsigned long ) ;
   int (*compat_ioctl)(struct block_device *, fmode_t , unsigned int , unsigned long ) ;
   unsigned int (*check_events)(struct gendisk *, unsigned int ) ;
   int (*media_changed)(struct gendisk *) ;
   void (*unlock_native_capacity)(struct gendisk *) ;
   int (*revalidate_disk)(struct gendisk *) ;
   int (*getgeo)(struct block_device *, struct hd_geometry *) ;
   void (*swap_slot_free_notify)(struct block_device *, unsigned long ) ;
   int (*report_zones)(struct gendisk *, sector_t , unsigned int , int (*)(struct blk_zone *, unsigned int , void *), void *) ;
   struct module *owner ;
   struct pr_ops *pr_ops ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg_policy_data;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg {
   struct cgroup_subsys_state css ;
   spinlock_t lock ;
   struct xarray blkg_tree ;
   struct blkcg_gq *blkg_hint ;
   struct hlist_head blkg_list ;
   struct blkcg_policy_data *cpd[5U] ;
   struct list_head all_blkcgs_node ;
   struct list_head cgwb_list ;
   refcount_t cgwb_refcnt ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkg_iostat {
   u64 bytes[3U] ;
   u64 ios[3U] ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkg_iostat_set {
   struct u64_stats_sync sync ;
   struct blkg_iostat cur ;
   struct blkg_iostat last ;
};
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkg_policy_data {
   struct blkcg_gq *blkg ;
   int plid ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg_policy_data {
   struct blkcg *blkcg ;
   int plid ;
};
#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg_gq {
   struct request_queue *q ;
   struct list_head q_node ;
   struct hlist_node blkcg_node ;
   struct blkcg *blkcg ;
   struct bdi_writeback_congested *wb_congested ;
   struct blkcg_gq *parent ;
   struct percpu_ref refcnt ;
   bool online ;
   struct blkg_iostat_set *iostat_cpu ;
   struct blkg_iostat_set iostat ;
   struct blkg_policy_data *pd[5U] ;
   spinlock_t async_bio_lock ;
   struct bio_list async_bios ;
   struct work_struct async_bio_work ;
   atomic_t use_delay ;
   atomic64_t delay_nsec ;
   atomic64_t delay_start ;
   u64 last_delay ;
   int last_use ;
   struct callback_head callback_head ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/writeback.h"
enum writeback_sync_modes {
    WB_SYNC_NONE = 0,
    WB_SYNC_ALL = 1
};
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/writeback.h"
struct writeback_control {
   long nr_to_write ;
   long pages_skipped ;
   loff_t range_start ;
   loff_t range_end ;
   enum writeback_sync_modes sync_mode ;
   unsigned int for_kupdate : 1 ;
   unsigned int for_background : 1 ;
   unsigned int tagged_writepages : 1 ;
   unsigned int for_reclaim : 1 ;
   unsigned int range_cyclic : 1 ;
   unsigned int for_sync : 1 ;
   unsigned int no_cgroup_owner : 1 ;
   unsigned int punt_to_cgroup : 1 ;
   struct bdi_writeback *wb ;
   struct inode *inode ;
   int wb_id ;
   int wb_lcand_id ;
   int wb_tcand_id ;
   size_t wb_bytes ;
   size_t wb_lcand_bytes ;
   size_t wb_tcand_bytes ;
};
#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/writeback.h"
struct wb_domain {
   spinlock_t lock ;
   struct fprop_global completions ;
   struct timer_list period_timer ;
   unsigned long period_time ;
   unsigned long dirty_limit_tstamp ;
   unsigned long dirty_limit ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_id {
   int id ;
   refcount_t ref ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_vmstats_percpu {
   long stat[38U] ;
   unsigned long events[91U] ;
   unsigned long nr_page_events ;
   unsigned long targets[2U] ;
};
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_reclaim_iter {
   struct mem_cgroup *position ;
   unsigned int generation ;
};
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct lruvec_stat {
   long count[32U] ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_shrinker_map {
   struct callback_head rcu ;
   unsigned long map[0U] ;
};
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_per_node {
   struct lruvec lruvec ;
   struct lruvec_stat *lruvec_stat_local ;
   struct lruvec_stat *lruvec_stat_cpu ;
   atomic_long_t lruvec_stat[32U] ;
   unsigned long lru_zone_size[5U][5U] ;
   struct mem_cgroup_reclaim_iter iter ;
   struct memcg_shrinker_map *shrinker_map ;
   struct rb_node tree_node ;
   unsigned long usage_in_excess ;
   bool on_tree ;
   struct mem_cgroup *memcg ;
};
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_threshold {
   struct eventfd_ctx *eventfd ;
   unsigned long threshold ;
};
#line 145  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_threshold_ary {
   int current_threshold ;
   unsigned int size ;
   struct mem_cgroup_threshold entries[0U] ;
};
#line 154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_thresholds {
   struct mem_cgroup_threshold_ary *primary ;
   struct mem_cgroup_threshold_ary *spare ;
};
#line 164 
enum memcg_kmem_state {
    KMEM_NONE = 0,
    KMEM_ALLOCATED = 1,
    KMEM_ONLINE = 2
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_padding {
   char x[0U] ;
} __attribute__((__aligned__(4096)));
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_cgwb_frn {
   u64 bdi_id ;
   int memcg_id ;
   u64 at ;
   struct wb_completion done ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup {
   struct cgroup_subsys_state css ;
   struct mem_cgroup_id id ;
   struct page_counter memory ;
   struct page_counter swap ;
   struct page_counter memsw ;
   struct page_counter kmem ;
   struct page_counter tcpmem ;
   unsigned long high ;
   struct work_struct high_work ;
   unsigned long soft_limit ;
   struct vmpressure vmpressure ;
   bool use_hierarchy ;
   bool oom_group ;
   bool oom_lock ;
   int under_oom ;
   int swappiness ;
   int oom_kill_disable ;
   struct cgroup_file events_file ;
   struct cgroup_file events_local_file ;
   struct cgroup_file swap_events_file ;
   struct mutex thresholds_lock ;
   struct mem_cgroup_thresholds thresholds ;
   struct mem_cgroup_thresholds memsw_thresholds ;
   struct list_head oom_notify ;
   unsigned long move_charge_at_immigrate ;
   spinlock_t move_lock ;
   unsigned long move_lock_flags ;
   struct memcg_padding _pad1_ ;
   atomic_t moving_account ;
   struct task_struct *move_lock_task ;
   struct memcg_vmstats_percpu *vmstats_local ;
   struct memcg_vmstats_percpu *vmstats_percpu ;
   struct memcg_padding _pad2_ ;
   atomic_long_t vmstats[38U] ;
   atomic_long_t vmevents[91U] ;
   atomic_long_t memory_events[7U] ;
   atomic_long_t memory_events_local[7U] ;
   unsigned long socket_pressure ;
   bool tcpmem_active ;
   int tcpmem_pressure ;
   int kmemcg_id ;
   enum memcg_kmem_state kmem_state ;
   struct list_head kmem_caches ;
   struct list_head cgwb_list ;
   struct wb_domain cgwb_domain ;
   struct memcg_cgwb_frn cgwb_frn[4U] ;
   struct list_head event_list ;
   spinlock_t event_list_lock ;
   struct deferred_split deferred_split_queue ;
   struct mem_cgroup_per_node *nodeinfo[0U] ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/vdso.h"
struct vdso_image {
   void *data ;
   unsigned long size ;
   unsigned long alt ;
   unsigned long alt_len ;
   long sym_vvar_start ;
   long sym_vvar_page ;
   long sym_pvclock_page ;
   long sym_hvclock_page ;
   long sym_VDSO32_NOTE_MASK ;
   long sym___kernel_sigreturn ;
   long sym___kernel_rt_sigreturn ;
   long sym___kernel_vsyscall ;
   long sym_int80_landing_pad ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Addr;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u16 Elf64_Half;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Off;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u32 Elf64_Word;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Xword;
#line 192  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};
#line 200  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_sym Elf64_Sym;
#line 221  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_hdr {
   unsigned char e_ident[16U] ;
   Elf64_Half e_type ;
   Elf64_Half e_machine ;
   Elf64_Word e_version ;
   Elf64_Addr e_entry ;
   Elf64_Off e_phoff ;
   Elf64_Off e_shoff ;
   Elf64_Word e_flags ;
   Elf64_Half e_ehsize ;
   Elf64_Half e_phentsize ;
   Elf64_Half e_phnum ;
   Elf64_Half e_shentsize ;
   Elf64_Half e_shnum ;
   Elf64_Half e_shstrndx ;
};
#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_hdr Elf64_Ehdr;
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_shdr {
   Elf64_Word sh_name ;
   Elf64_Word sh_type ;
   Elf64_Xword sh_flags ;
   Elf64_Addr sh_addr ;
   Elf64_Off sh_offset ;
   Elf64_Xword sh_size ;
   Elf64_Word sh_link ;
   Elf64_Word sh_info ;
   Elf64_Xword sh_addralign ;
   Elf64_Xword sh_entsize ;
};
#line 328  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_shdr Elf64_Shdr;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elf.h"
struct kernel_param;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kernel_param_ops {
   unsigned int flags ;
   int (*set)(char *, struct kernel_param *) ;
   int (*get)(char *, struct kernel_param *) ;
   void (*free)(void *) ;
};
#line 69 
struct kparam_string;
#line 69 
struct kparam_array;
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
union __anonunion_1428 {
   void *arg ;
   struct kparam_string *str ;
   struct kparam_array *arr ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kernel_param {
   char *name ;
   struct module *mod ;
   struct kernel_param_ops *ops ;
   u16 perm ;
   s8 level ;
   u8 flags ;
   union __anonunion_1428 __anonCompField_kernel_param_167 ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kparam_string {
   unsigned int maxlen ;
   char *string ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kparam_array {
   unsigned int max ;
   unsigned int elemsize ;
   unsigned int *num ;
   struct kernel_param_ops *ops ;
   void *elem ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/error-injection.h"
struct error_injection_entry {
   unsigned long addr ;
   int etype ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/module.h"
struct mod_arch_specific {
   unsigned int num_orcs ;
   int *orc_unwind_ip ;
   struct orc_entry *orc_unwind ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_param_attrs;
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
   struct module_param_attrs *mp ;
   struct completion *kobj_completion ;
} __attribute__((__designated_init__));
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute *, struct module_kobject *, char *) ;
   ssize_t (*store)(struct module_attribute *, struct module_kobject *, char *, size_t ) ;
   void (*setup)(struct module *, char *) ;
   int (*test)(struct module *) ;
   void (*free)(struct module *) ;
};
#line 297 
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2,
    MODULE_STATE_UNFORMED = 3
};
#line 305  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct mod_tree_node {
   struct module *mod ;
   struct latch_tree_node node ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_layout {
   void *base ;
   unsigned int size ;
   unsigned int text_size ;
   unsigned int ro_size ;
   unsigned int ro_after_init_size ;
   struct mod_tree_node mtn ;
};
#line 334  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct mod_kallsyms {
   Elf64_Sym *symtab ;
   unsigned int num_symtab ;
   char *strtab ;
   char *typetab ;
};
#line 342  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct klp_modinfo {
   Elf64_Ehdr hdr ;
   Elf64_Shdr *sechdrs ;
   char *secstrings ;
   unsigned int symndx ;
};
#line 350 
struct module_sect_attrs;
#line 350 
struct module_notes_attrs;
#line 350 
struct trace_event_call;
#line 350 
struct trace_eval_map;
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[56U] ;
   struct module_kobject mkobj ;
   struct module_attribute *modinfo_attrs ;
   char *version ;
   char *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol *syms ;
   s32 *crcs ;
   unsigned int num_syms ;
   struct mutex param_lock ;
   struct kernel_param *kp ;
   unsigned int num_kp ;
   unsigned int num_gpl_syms ;
   struct kernel_symbol *gpl_syms ;
   s32 *gpl_crcs ;
   struct kernel_symbol *unused_syms ;
   s32 *unused_crcs ;
   unsigned int num_unused_syms ;
   unsigned int num_unused_gpl_syms ;
   struct kernel_symbol *unused_gpl_syms ;
   s32 *unused_gpl_crcs ;
   bool sig_ok ;
   bool async_probe_requested ;
   struct kernel_symbol *gpl_future_syms ;
   s32 *gpl_future_crcs ;
   unsigned int num_gpl_future_syms ;
   unsigned int num_exentries ;
   struct exception_table_entry *extable ;
   int (*init)(void) ;
   struct module_layout core_layout ;
   struct module_layout init_layout ;
   struct mod_arch_specific arch ;
   unsigned long taints ;
   unsigned int num_bugs ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   struct mod_kallsyms *kallsyms ;
   struct mod_kallsyms core_kallsyms ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   char *args ;
   void *percpu ;
   unsigned int percpu_size ;
   unsigned int num_tracepoints ;
   tracepoint_ptr_t *tracepoints_ptrs ;
   unsigned int num_srcu_structs ;
   struct srcu_struct **srcu_struct_ptrs ;
   unsigned int num_bpf_raw_events ;
   struct bpf_raw_event_map *bpf_raw_events ;
   struct jump_entry *jump_entries ;
   unsigned int num_jump_entries ;
   unsigned int num_trace_bprintk_fmt ;
   char **trace_bprintk_fmt_start ;
   struct trace_event_call **trace_events ;
   unsigned int num_trace_events ;
   struct trace_eval_map **trace_evals ;
   unsigned int num_trace_evals ;
   unsigned int num_ftrace_callsites ;
   unsigned long *ftrace_callsites ;
   bool klp ;
   bool klp_alive ;
   struct klp_modinfo *klp_info ;
   struct list_head source_list ;
   struct list_head target_list ;
   void (*exit)(void) ;
   atomic_t refcnt ;
   ctor_fn_t *ctors ;
   unsigned int num_ctors ;
   struct error_injection_entry *ei_funcs ;
   unsigned int num_ei_funcs ;
} __attribute__((__designated_init__, __aligned__(64)));
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/gen_stats.h"
struct gnet_stats_queue {
   __u32 qlen ;
   __u32 backlog ;
   __u32 drops ;
   __u32 requeues ;
   __u32 overlimits ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/gen_stats.h"
struct gnet_stats_basic_packed {
   __u64 bytes ;
   __u64 packets ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/gen_stats.h"
struct gnet_stats_basic_cpu {
   struct gnet_stats_basic_packed bstats ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 20 
struct net_rate_estimator;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/gen_stats.h"
struct gnet_dump {
   spinlock_t *lock ;
   struct sk_buff *skb ;
   struct nlattr *tail ;
   int compat_tc_stats ;
   int compat_xstats ;
   int padattr ;
   void *xstats ;
   int xstats_len ;
   struct tc_stats tc_stats ;
};
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
struct __anonstruct_1430 {
   s16 min ;
   s16 max ;
};
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
union __anonunion_1429 {
   void *validation_data ;
   struct __anonstruct_1430 __anonCompField___anonunion_1429_168 ;
   int (*validate)(struct nlattr *, struct netlink_ext_ack *) ;
   u16 strict_start_type ;
};
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
struct nla_policy {
   u8 type ;
   u8 validation_type ;
   u16 len ;
   union __anonunion_1429 __anonCompField_nla_policy_169 ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/rtnetlink.h"
struct rtnl_link_ops {
   struct list_head list ;
   char *kind ;
   size_t priv_size ;
   void (*setup)(struct net_device *) ;
   unsigned int maxtype ;
   struct nla_policy *policy ;
   int (*validate)(struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   int (*newlink)(struct net *, struct net_device *, struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   int (*changelink)(struct net_device *, struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   void (*dellink)(struct net_device *, struct list_head *) ;
   size_t (*get_size)(struct net_device *) ;
   int (*fill_info)(struct sk_buff *, struct net_device *) ;
   size_t (*get_xstats_size)(struct net_device *) ;
   int (*fill_xstats)(struct sk_buff *, struct net_device *) ;
   unsigned int (*get_num_tx_queues)(void) ;
   unsigned int (*get_num_rx_queues)(void) ;
   unsigned int slave_maxtype ;
   struct nla_policy *slave_policy ;
   int (*slave_changelink)(struct net_device *, struct net_device *, struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   size_t (*get_slave_size)(struct net_device *, struct net_device *) ;
   int (*fill_slave_info)(struct sk_buff *, struct net_device *, struct net_device *) ;
   struct net *(*get_link_net)(struct net_device *) ;
   size_t (*get_linkxstats_size)(struct net_device *, int ) ;
   int (*fill_linkxstats)(struct sk_buff *, struct net_device *, int *, int ) ;
};
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jhash.h"
struct rhash_lock_head {
   };
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable.h"
struct bucket_table {
   unsigned int size ;
   unsigned int nest ;
   u32 hash_rnd ;
   struct list_head walkers ;
   struct callback_head rcu ;
   struct bucket_table *future_tbl ;
   struct lockdep_map dep_map ;
   struct rhash_lock_head *buckets[] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct flow_block {
   struct list_head cb_list ;
};
#line 298  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
typedef int flow_setup_cb_t(enum tc_setup_type , void *, void *);
#line 412 
struct Qdisc_ops;
#line 413 
struct qdisc_walker;
#line 414 
struct tcf_walker;
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct qdisc_size_table {
   struct callback_head rcu ;
   struct list_head list ;
   struct tc_sizespec szopts ;
   int refcnt ;
   u16 data[] ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct qdisc_skb_head {
   struct sk_buff *head ;
   struct sk_buff *tail ;
   __u32 qlen ;
   spinlock_t lock ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct Qdisc {
   int (*enqueue)(struct sk_buff *, struct Qdisc *, struct sk_buff **) ;
   struct sk_buff *(*dequeue)(struct Qdisc *) ;
   unsigned int flags ;
   u32 limit ;
   struct Qdisc_ops *ops ;
   struct qdisc_size_table *stab ;
   struct hlist_node hash ;
   u32 handle ;
   u32 parent ;
   struct netdev_queue *dev_queue ;
   struct net_rate_estimator *rate_est ;
   struct gnet_stats_basic_cpu *cpu_bstats ;
   struct gnet_stats_queue *cpu_qstats ;
   int padded ;
   refcount_t refcnt ;
   struct sk_buff_head gso_skb ;
   struct qdisc_skb_head q ;
   struct gnet_stats_basic_packed bstats ;
   seqcount_t running ;
   struct gnet_stats_queue qstats ;
   unsigned long state ;
   struct Qdisc *next_sched ;
   struct sk_buff_head skb_bad_txq ;
   spinlock_t busylock ;
   spinlock_t seqlock ;
   bool empty ;
   struct callback_head rcu ;
};
#line 195 
struct tcf_block;
#line 195  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct Qdisc_class_ops {
   unsigned int flags ;
   struct netdev_queue *(*select_queue)(struct Qdisc *, struct tcmsg *) ;
   int (*graft)(struct Qdisc *, unsigned long , struct Qdisc *, struct Qdisc **, struct netlink_ext_ack *) ;
   struct Qdisc *(*leaf)(struct Qdisc *, unsigned long ) ;
   void (*qlen_notify)(struct Qdisc *, unsigned long ) ;
   unsigned long (*find)(struct Qdisc *, u32 ) ;
   int (*change)(struct Qdisc *, u32 , u32 , struct nlattr **, unsigned long *, struct netlink_ext_ack *) ;
   int (*delete)(struct Qdisc *, unsigned long ) ;
   void (*walk)(struct Qdisc *, struct qdisc_walker *) ;
   struct tcf_block *(*tcf_block)(struct Qdisc *, unsigned long , struct netlink_ext_ack *) ;
   unsigned long (*bind_tcf)(struct Qdisc *, unsigned long , u32 ) ;
   void (*unbind_tcf)(struct Qdisc *, unsigned long ) ;
   int (*dump)(struct Qdisc *, unsigned long , struct sk_buff *, struct tcmsg *) ;
   int (*dump_stats)(struct Qdisc *, unsigned long , struct gnet_dump *) ;
};
#line 235  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct Qdisc_ops {
   struct Qdisc_ops *next ;
   struct Qdisc_class_ops *cl_ops ;
   char id[16U] ;
   int priv_size ;
   unsigned int static_flags ;
   int (*enqueue)(struct sk_buff *, struct Qdisc *, struct sk_buff **) ;
   struct sk_buff *(*dequeue)(struct Qdisc *) ;
   struct sk_buff *(*peek)(struct Qdisc *) ;
   int (*init)(struct Qdisc *, struct nlattr *, struct netlink_ext_ack *) ;
   void (*reset)(struct Qdisc *) ;
   void (*destroy)(struct Qdisc *) ;
   int (*change)(struct Qdisc *, struct nlattr *, struct netlink_ext_ack *) ;
   void (*attach)(struct Qdisc *) ;
   int (*change_tx_queue_len)(struct Qdisc *, unsigned int ) ;
   int (*dump)(struct Qdisc *, struct sk_buff *) ;
   int (*dump_stats)(struct Qdisc *, struct gnet_dump *) ;
   void (*ingress_block_set)(struct Qdisc *, u32 ) ;
   void (*egress_block_set)(struct Qdisc *, u32 ) ;
   u32 (*ingress_block_get)(struct Qdisc *) ;
   u32 (*egress_block_get)(struct Qdisc *) ;
   struct module *owner ;
};
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct __anonstruct_1504 {
   unsigned long class ;
   u32 classid ;
};
#line 272 
struct tcf_proto;
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct __anonstruct_1505 {
   bool ingress ;
   struct gnet_stats_queue *qstats ;
};
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
union __anonunion_1503 {
   struct __anonstruct_1504 __anonCompField___anonunion_1503_171 ;
   struct tcf_proto *goto_tp ;
   struct __anonstruct_1505 __anonCompField___anonunion_1503_172 ;
};
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_result {
   union __anonunion_1503 __anonCompField_tcf_result_173 ;
};
#line 287 
struct tcf_chain;
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_proto_ops {
   struct list_head head ;
   char kind[16U] ;
   int (*classify)(struct sk_buff *, struct tcf_proto *, struct tcf_result *) ;
   int (*init)(struct tcf_proto *) ;
   void (*destroy)(struct tcf_proto *, bool , struct netlink_ext_ack *) ;
   void *(*get)(struct tcf_proto *, u32 ) ;
   void (*put)(struct tcf_proto *, void *) ;
   int (*change)(struct net *, struct sk_buff *, struct tcf_proto *, unsigned long , u32 , struct nlattr **, void **, bool , bool , struct netlink_ext_ack *) ;
   int (*delete)(struct tcf_proto *, void *, bool *, bool , struct netlink_ext_ack *) ;
   bool (*delete_empty)(struct tcf_proto *) ;
   void (*walk)(struct tcf_proto *, struct tcf_walker *, bool ) ;
   int (*reoffload)(struct tcf_proto *, bool , flow_setup_cb_t *, void *, struct netlink_ext_ack *) ;
   void (*hw_add)(struct tcf_proto *, void *) ;
   void (*hw_del)(struct tcf_proto *, void *) ;
   void (*bind_class)(void *, u32 , unsigned long ) ;
   void *(*tmplt_create)(struct net *, struct tcf_chain *, struct nlattr **, struct netlink_ext_ack *) ;
   void (*tmplt_destroy)(void *) ;
   int (*dump)(struct net *, struct tcf_proto *, void *, struct sk_buff *, struct tcmsg *, bool ) ;
   int (*tmplt_dump)(struct sk_buff *, struct net *, void *) ;
   struct module *owner ;
   int flags ;
};
#line 348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_proto {
   struct tcf_proto *next ;
   void *root ;
   int (*classify)(struct sk_buff *, struct tcf_proto *, struct tcf_result *) ;
   __be16 protocol ;
   u32 prio ;
   void *data ;
   struct tcf_proto_ops *ops ;
   struct tcf_chain *chain ;
   spinlock_t lock ;
   bool deleting ;
   refcount_t refcnt ;
   struct callback_head rcu ;
   struct hlist_node destroy_ht_node ;
};
#line 386  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_chain {
   struct mutex filter_chain_lock ;
   struct tcf_proto *filter_chain ;
   struct list_head list ;
   struct tcf_block *block ;
   u32 index ;
   unsigned int refcnt ;
   unsigned int action_refcnt ;
   bool explicitly_created ;
   bool flushing ;
   struct tcf_proto_ops *tmplt_ops ;
   void *tmplt_priv ;
   struct callback_head rcu ;
};
#line 402  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct __anonstruct_chain0_1507 {
   struct tcf_chain *chain ;
   struct list_head filter_chain_list ;
};
#line 402  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_block {
   struct mutex lock ;
   struct list_head chain_list ;
   u32 index ;
   refcount_t refcnt ;
   struct net *net ;
   struct Qdisc *q ;
   struct rw_semaphore cb_lock ;
   struct flow_block flow_block ;
   struct list_head owner_list ;
   bool keep_dst ;
   atomic_t offloadcnt ;
   unsigned int nooffloaddevcnt ;
   unsigned int lockeddevcnt ;
   struct __anonstruct_chain0_1507 chain0 ;
   struct callback_head rcu ;
   struct hlist_head proto_destroy_ht[128U] ;
   struct mutex proto_destroy_lock ;
};
#line 1269  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct mini_Qdisc {
   struct tcf_proto *filter_list ;
   struct gnet_stats_basic_cpu *cpu_bstats ;
   struct gnet_stats_queue *cpu_qstats ;
   struct callback_head rcu ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/filter.h"
struct sock_filter {
   __u16 code ;
   __u8 jt ;
   __u8 jf ;
   __u32 k ;
};
#line 35 
struct sock_reuseport;
#line 513  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
struct sock_fprog_kern {
   u16 len ;
   struct sock_filter *filter ;
};
#line 526  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
union __anonunion_1520 {
   struct sock_filter insns[0U] ;
   struct bpf_insn insnsi[0U] ;
};
#line 526  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
struct bpf_prog {
   u16 pages ;
   u16 jited : 1 ;
   u16 jit_requested : 1 ;
   u16 gpl_compatible : 1 ;
   u16 cb_access : 1 ;
   u16 dst_needed : 1 ;
   u16 blinded : 1 ;
   u16 is_func : 1 ;
   u16 kprobe_override : 1 ;
   u16 has_callchain_buf : 1 ;
   u16 enforce_expected_attach_type : 1 ;
   enum bpf_prog_type type ;
   enum bpf_attach_type expected_attach_type ;
   u32 len ;
   u32 jited_len ;
   u8 tag[8U] ;
   struct bpf_prog_aux *aux ;
   struct sock_fprog_kern *orig_prog ;
   unsigned int (*bpf_func)(void *, struct bpf_insn *) ;
   union __anonunion_1520 __anonCompField_bpf_prog_175 ;
};
#line 554  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
struct sk_filter {
   refcount_t refcnt ;
   struct callback_head rcu ;
   struct bpf_prog *prog ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/poll.h"
struct pollfd {
   int fd ;
   short events ;
   short revents ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/poll.h"
struct poll_table_struct {
   void (*_qproc)(struct file *, wait_queue_head_t *, struct poll_table_struct *) ;
   __poll_t _key ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_table;
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_parms {
   possible_net_t net ;
   struct net_device *dev ;
   struct list_head list ;
   int (*neigh_setup)(struct neighbour *) ;
   struct neigh_table *tbl ;
   void *sysctl_table ;
   int dead ;
   refcount_t refcnt ;
   struct callback_head callback_head ;
   int reachable_time ;
   int data[13U] ;
   unsigned long data_state[1U] ;
};
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_statistics {
   unsigned long allocs ;
   unsigned long destroys ;
   unsigned long hash_grows ;
   unsigned long res_failed ;
   unsigned long lookups ;
   unsigned long hits ;
   unsigned long rcv_probes_mcast ;
   unsigned long rcv_probes_ucast ;
   unsigned long periodic_gc_runs ;
   unsigned long forced_gc_runs ;
   unsigned long unres_discards ;
   unsigned long table_fulls ;
};
#line 134 
struct neigh_ops;
#line 134  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neighbour {
   struct neighbour *next ;
   struct neigh_table *tbl ;
   struct neigh_parms *parms ;
   unsigned long confirmed ;
   unsigned long updated ;
   rwlock_t lock ;
   refcount_t refcnt ;
   unsigned int arp_queue_len_bytes ;
   struct sk_buff_head arp_queue ;
   struct timer_list timer ;
   unsigned long used ;
   atomic_t probes ;
   __u8 flags ;
   __u8 nud_state ;
   __u8 type ;
   __u8 dead ;
   u8 protocol ;
   seqlock_t ha_lock ;
   unsigned char ha[32U] ;
   struct hh_cache hh ;
   int (*output)(struct neighbour *, struct sk_buff *) ;
   struct neigh_ops *ops ;
   struct list_head gc_list ;
   struct callback_head rcu ;
   struct net_device *dev ;
   u8 primary_key[0U] ;
} __attribute__((__designated_init__));
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_ops {
   int family ;
   void (*solicit)(struct neighbour *, struct sk_buff *) ;
   void (*error_report)(struct neighbour *, struct sk_buff *) ;
   int (*output)(struct neighbour *, struct sk_buff *) ;
   int (*connected_output)(struct neighbour *, struct sk_buff *) ;
};
#line 171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct pneigh_entry {
   struct pneigh_entry *next ;
   possible_net_t net ;
   struct net_device *dev ;
   u8 flags ;
   u8 protocol ;
   u8 key[0U] ;
};
#line 186  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_hash_table {
   struct neighbour **hash_buckets ;
   unsigned int hash_shift ;
   __u32 hash_rnd[4U] ;
   struct callback_head rcu ;
};
#line 194  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_table {
   int family ;
   unsigned int entry_size ;
   unsigned int key_len ;
   __be16 protocol ;
   __u32 (*hash)(void *, struct net_device *, __u32 *) ;
   bool (*key_eq)(struct neighbour *, void *) ;
   int (*constructor)(struct neighbour *) ;
   int (*pconstructor)(struct pneigh_entry *) ;
   void (*pdestructor)(struct pneigh_entry *) ;
   void (*proxy_redo)(struct sk_buff *) ;
   bool (*allow_add)(struct net_device *, struct netlink_ext_ack *) ;
   char *id ;
   struct neigh_parms parms ;
   struct list_head parms_list ;
   int gc_interval ;
   int gc_thresh1 ;
   int gc_thresh2 ;
   int gc_thresh3 ;
   unsigned long last_flush ;
   struct delayed_work gc_work ;
   struct timer_list proxy_timer ;
   struct sk_buff_head proxy_queue ;
   atomic_t entries ;
   atomic_t gc_entries ;
   struct list_head gc_list ;
   rwlock_t lock ;
   unsigned long last_rand ;
   struct neigh_statistics *stats ;
   struct neigh_hash_table *nht ;
   struct pneigh_entry **phash_buckets ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst.h"
struct lwtunnel_state;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst.h"
struct dst_entry {
   struct net_device *dev ;
   struct dst_ops *ops ;
   unsigned long _metrics ;
   unsigned long expires ;
   struct xfrm_state *xfrm ;
   int (*input)(struct sk_buff *) ;
   int (*output)(struct net *, struct sock *, struct sk_buff *) ;
   unsigned short flags ;
   short obsolete ;
   unsigned short header_len ;
   unsigned short trailer_len ;
   atomic_t __refcnt ;
   int __use ;
   unsigned long lastuse ;
   struct lwtunnel_state *lwtstate ;
   struct callback_head callback_head ;
   short error ;
   short __pad ;
   __u32 tclassid ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/net_tstamp.h"
struct hwtstamp_config {
   int flags ;
   int tx_type ;
   int rx_filter ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fib_rules.h"
struct fib_rule_hdr {
   __u8 family ;
   __u8 dst_len ;
   __u8 src_len ;
   __u8 tos ;
   __u8 table ;
   __u8 res1 ;
   __u8 res2 ;
   __u8 action ;
   __u32 flags ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fib_rules.h"
struct fib_rule_port_range {
   __u16 start ;
   __u16 end ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_notifier.h"
struct fib_notifier_ops {
   int family ;
   struct list_head list ;
   unsigned int (*fib_seq_read)(struct net *) ;
   int (*fib_dump)(struct net *, struct notifier_block *, struct netlink_ext_ack *) ;
   struct module *owner ;
   struct callback_head rcu ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_kuid_range {
   kuid_t start ;
   kuid_t end ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_rule {
   struct list_head list ;
   int iifindex ;
   int oifindex ;
   u32 mark ;
   u32 mark_mask ;
   u32 flags ;
   u32 table ;
   u8 action ;
   u8 l3mdev ;
   u8 proto ;
   u8 ip_proto ;
   u32 target ;
   __be64 tun_id ;
   struct fib_rule *ctarget ;
   struct net *fr_net ;
   refcount_t refcnt ;
   u32 pref ;
   int suppress_ifgroup ;
   int suppress_prefixlen ;
   char iifname[16U] ;
   char oifname[16U] ;
   struct fib_kuid_range uid_range ;
   struct fib_rule_port_range sport_range ;
   struct fib_rule_port_range dport_range ;
   struct callback_head rcu ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_lookup_arg {
   void *lookup_ptr ;
   void *lookup_data ;
   void *result ;
   struct fib_rule *rule ;
   u32 table ;
   int flags ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_rules_ops {
   int family ;
   struct list_head list ;
   int rule_size ;
   int addr_size ;
   int unresolved_rules ;
   int nr_goto_rules ;
   unsigned int fib_rules_seq ;
   int (*action)(struct fib_rule *, struct flowi *, int , struct fib_lookup_arg *) ;
   bool (*suppress)(struct fib_rule *, struct fib_lookup_arg *) ;
   int (*match)(struct fib_rule *, struct flowi *, int ) ;
   int (*configure)(struct fib_rule *, struct sk_buff *, struct fib_rule_hdr *, struct nlattr **, struct netlink_ext_ack *) ;
   int (*delete)(struct fib_rule *) ;
   int (*compare)(struct fib_rule *, struct fib_rule_hdr *, struct nlattr **) ;
   int (*fill)(struct fib_rule *, struct sk_buff *, struct fib_rule_hdr *) ;
   size_t (*nlmsg_payload)(struct fib_rule *) ;
   void (*flush_cache)(struct fib_rules_ops *) ;
   int nlgroup ;
   struct nla_policy *policy ;
   struct list_head rules_list ;
   struct module *owner ;
   struct net *fro_net ;
   struct callback_head rcu ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/l3mdev.h"
struct l3mdev_ops {
   u32 (*l3mdev_fib_table)(struct net_device *) ;
   struct sk_buff *(*l3mdev_l3_rcv)(struct net_device *, struct sk_buff *, u16 ) ;
   struct sk_buff *(*l3mdev_l3_out)(struct net_device *, struct sock *, struct sk_buff *, u16 ) ;
   struct dst_entry *(*l3mdev_link_scope_lookup)(struct net_device *, struct flowi6 *) ;
};
#line 202  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/l3mdev.h"
struct __anonstruct_socket_lock_t_1542 {
   spinlock_t slock ;
   int owned ;
   wait_queue_head_t wq ;
   struct lockdep_map dep_map ;
};
#line 202  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/l3mdev.h"
typedef struct __anonstruct_socket_lock_t_1542 socket_lock_t;
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct proto;
#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
typedef __u32 __portpair;
#line 114  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
typedef __u64 __addrpair;
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct __anonstruct_1544 {
   __be32 skc_daddr ;
   __be32 skc_rcv_saddr ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_1543 {
   __addrpair skc_addrpair ;
   struct __anonstruct_1544 __anonCompField___anonunion_1543_177 ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_1545 {
   unsigned int skc_hash ;
   __u16 skc_u16hashes[2U] ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct __anonstruct_1547 {
   __be16 skc_dport ;
   __u16 skc_num ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_1546 {
   __portpair skc_portpair ;
   struct __anonstruct_1547 __anonCompField___anonunion_1546_180 ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_1548 {
   struct hlist_node skc_bind_node ;
   struct hlist_node skc_portaddr_node ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_1549 {
   unsigned long skc_flags ;
   struct sock *skc_listener ;
   struct inet_timewait_death_row *skc_tw_dr ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_1550 {
   struct hlist_node skc_node ;
   struct hlist_nulls_node skc_nulls_node ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_1551 {
   int skc_incoming_cpu ;
   u32 skc_rcv_wnd ;
   u32 skc_tw_rcv_nxt ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_1552 {
   u32 skc_rxhash ;
   u32 skc_window_clamp ;
   u32 skc_tw_snd_nxt ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct sock_common {
   union __anonunion_1543 __anonCompField_sock_common_178 ;
   union __anonunion_1545 __anonCompField_sock_common_179 ;
   union __anonunion_1546 __anonCompField_sock_common_181 ;
   unsigned short skc_family ;
   unsigned char skc_state ;
   unsigned char skc_reuse : 4 ;
   unsigned char skc_reuseport : 1 ;
   unsigned char skc_ipv6only : 1 ;
   unsigned char skc_net_refcnt : 1 ;
   int skc_bound_dev_if ;
   union __anonunion_1548 __anonCompField_sock_common_182 ;
   struct proto *skc_prot ;
   possible_net_t skc_net ;
   struct in6_addr skc_v6_daddr ;
   struct in6_addr skc_v6_rcv_saddr ;
   atomic64_t skc_cookie ;
   union __anonunion_1549 __anonCompField_sock_common_183 ;
   int skc_dontcopy_begin[0U] ;
   union __anonunion_1550 __anonCompField_sock_common_184 ;
   unsigned short skc_tx_queue_mapping ;
   unsigned short skc_rx_queue_mapping ;
   union __anonunion_1551 __anonCompField_sock_common_185 ;
   refcount_t skc_refcnt ;
   int skc_dontcopy_end[0U] ;
   union __anonunion_1552 __anonCompField_sock_common_186 ;
};
#line 231 
struct bpf_sk_storage;
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct __anonstruct_sk_backlog_1553 {
   atomic_t rmem_alloc ;
   int len ;
   struct sk_buff *head ;
   struct sk_buff *tail ;
};
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_1554 {
   struct socket_wq *sk_wq ;
   struct socket_wq *sk_wq_raw ;
};
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_1555 {
   struct sk_buff *sk_send_head ;
   struct rb_root tcp_rtx_queue ;
};
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct sock {
   struct sock_common __sk_common ;
   socket_lock_t sk_lock ;
   atomic_t sk_drops ;
   int sk_rcvlowat ;
   struct sk_buff_head sk_error_queue ;
   struct sk_buff *sk_rx_skb_cache ;
   struct sk_buff_head sk_receive_queue ;
   struct __anonstruct_sk_backlog_1553 sk_backlog ;
   int sk_forward_alloc ;
   unsigned int sk_ll_usec ;
   unsigned int sk_napi_id ;
   int sk_rcvbuf ;
   struct sk_filter *sk_filter ;
   union __anonunion_1554 __anonCompField_sock_187 ;
   struct xfrm_policy *sk_policy[2U] ;
   struct dst_entry *sk_rx_dst ;
   struct dst_entry *sk_dst_cache ;
   atomic_t sk_omem_alloc ;
   int sk_sndbuf ;
   int sk_wmem_queued ;
   refcount_t sk_wmem_alloc ;
   unsigned long sk_tsq_flags ;
   union __anonunion_1555 __anonCompField_sock_188 ;
   struct sk_buff *sk_tx_skb_cache ;
   struct sk_buff_head sk_write_queue ;
   __s32 sk_peek_off ;
   int sk_write_pending ;
   __u32 sk_dst_pending_confirm ;
   u32 sk_pacing_status ;
   long sk_sndtimeo ;
   struct timer_list sk_timer ;
   __u32 sk_priority ;
   __u32 sk_mark ;
   unsigned long sk_pacing_rate ;
   unsigned long sk_max_pacing_rate ;
   struct page_frag sk_frag ;
   netdev_features_t sk_route_caps ;
   netdev_features_t sk_route_nocaps ;
   netdev_features_t sk_route_forced_caps ;
   int sk_gso_type ;
   unsigned int sk_gso_max_size ;
   gfp_t sk_allocation ;
   __u32 sk_txhash ;
   unsigned int __sk_flags_offset[0U] ;
   unsigned int sk_padding : 1 ;
   unsigned int sk_kern_sock : 1 ;
   unsigned int sk_no_check_tx : 1 ;
   unsigned int sk_no_check_rx : 1 ;
   unsigned int sk_userlocks : 4 ;
   unsigned int sk_protocol : 8 ;
   unsigned int sk_type : 16 ;
   u16 sk_gso_max_segs ;
   u8 sk_pacing_shift ;
   unsigned long sk_lingertime ;
   struct proto *sk_prot_creator ;
   rwlock_t sk_callback_lock ;
   int sk_err ;
   int sk_err_soft ;
   u32 sk_ack_backlog ;
   u32 sk_max_ack_backlog ;
   kuid_t sk_uid ;
   struct pid *sk_peer_pid ;
   struct cred *sk_peer_cred ;
   long sk_rcvtimeo ;
   ktime_t sk_stamp ;
   u16 sk_tsflags ;
   u8 sk_shutdown ;
   u32 sk_tskey ;
   atomic_t sk_zckey ;
   u8 sk_clockid ;
   u8 sk_txtime_deadline_mode : 1 ;
   u8 sk_txtime_report_errors : 1 ;
   u8 sk_txtime_unused : 6 ;
   struct socket *sk_socket ;
   void *sk_user_data ;
   void *sk_security ;
   struct sock_cgroup_data sk_cgrp_data ;
   struct mem_cgroup *sk_memcg ;
   void (*sk_state_change)(struct sock *) ;
   void (*sk_data_ready)(struct sock *) ;
   void (*sk_write_space)(struct sock *) ;
   void (*sk_error_report)(struct sock *) ;
   int (*sk_backlog_rcv)(struct sock *, struct sk_buff *) ;
   struct sk_buff *(*sk_validate_xmit_skb)(struct sock *, struct net_device *, struct sk_buff *) ;
   void (*sk_destruct)(struct sock *) ;
   struct sock_reuseport *sk_reuseport_cb ;
   struct bpf_sk_storage *sk_bpf_storage ;
   struct callback_head sk_rcu ;
};
#line 1048 
struct request_sock_ops;
#line 1049 
struct timewait_sock_ops;
#line 1050 
struct raw_hashinfo;
#line 1051 
struct smc_hashinfo;
#line 1071 
struct udp_table;
#line 1071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_h_1590 {
   struct inet_hashinfo *hashinfo ;
   struct udp_table *udp_table ;
   struct raw_hashinfo *raw_hash ;
   struct smc_hashinfo *smc_hash ;
};
#line 1071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct proto {
   void (*close)(struct sock *, long ) ;
   int (*pre_connect)(struct sock *, struct sockaddr *, int ) ;
   int (*connect)(struct sock *, struct sockaddr *, int ) ;
   int (*disconnect)(struct sock *, int ) ;
   struct sock *(*accept)(struct sock *, int , int *, bool ) ;
   int (*ioctl)(struct sock *, int , unsigned long ) ;
   int (*init)(struct sock *) ;
   void (*destroy)(struct sock *) ;
   void (*shutdown)(struct sock *, int ) ;
   int (*setsockopt)(struct sock *, int , int , char *, unsigned int ) ;
   int (*getsockopt)(struct sock *, int , int , char *, int *) ;
   void (*keepalive)(struct sock *, int ) ;
   int (*compat_setsockopt)(struct sock *, int , int , char *, unsigned int ) ;
   int (*compat_getsockopt)(struct sock *, int , int , char *, int *) ;
   int (*compat_ioctl)(struct sock *, unsigned int , unsigned long ) ;
   int (*sendmsg)(struct sock *, struct msghdr *, size_t ) ;
   int (*recvmsg)(struct sock *, struct msghdr *, size_t , int , int , int *) ;
   int (*sendpage)(struct sock *, struct page *, int , size_t , int ) ;
   int (*bind)(struct sock *, struct sockaddr *, int ) ;
   int (*backlog_rcv)(struct sock *, struct sk_buff *) ;
   void (*release_cb)(struct sock *) ;
   int (*hash)(struct sock *) ;
   void (*unhash)(struct sock *) ;
   void (*rehash)(struct sock *) ;
   int (*get_port)(struct sock *, unsigned short ) ;
   unsigned int inuse_idx ;
   bool (*stream_memory_free)(struct sock *, int ) ;
   bool (*stream_memory_read)(struct sock *) ;
   void (*enter_memory_pressure)(struct sock *) ;
   void (*leave_memory_pressure)(struct sock *) ;
   atomic_long_t *memory_allocated ;
   struct percpu_counter *sockets_allocated ;
   unsigned long *memory_pressure ;
   long *sysctl_mem ;
   int *sysctl_wmem ;
   int *sysctl_rmem ;
   u32 sysctl_wmem_offset ;
   u32 sysctl_rmem_offset ;
   int max_header ;
   bool no_autobind ;
   struct kmem_cache *slab ;
   unsigned int obj_size ;
   slab_flags_t slab_flags ;
   unsigned int useroffset ;
   unsigned int usersize ;
   struct percpu_counter *orphan_count ;
   struct request_sock_ops *rsk_prot ;
   struct timewait_sock_ops *twsk_prot ;
   union __anonunion_h_1590 h ;
   struct module *owner ;
   char name[32U] ;
   struct list_head node ;
   int (*diag_destroy)(struct sock *, int ) ;
} __attribute__((__designated_init__));
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/request_sock.h"
struct request_sock_ops {
   int family ;
   unsigned int obj_size ;
   struct kmem_cache *slab ;
   char *slab_name ;
   int (*rtx_syn_ack)(struct sock *, struct request_sock *) ;
   void (*send_ack)(struct sock *, struct sk_buff *, struct request_sock *) ;
   void (*send_reset)(struct sock *, struct sk_buff *) ;
   void (*destructor)(struct request_sock *) ;
   void (*syn_ack_timeout)(struct request_sock *) ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/request_sock.h"
struct request_sock {
   struct sock_common __req_common ;
   struct request_sock *dl_next ;
   u16 mss ;
   u8 num_retrans ;
   u8 cookie_ts : 1 ;
   u8 num_timeout : 7 ;
   u32 ts_recent ;
   struct timer_list rsk_timer ;
   struct request_sock_ops *rsk_ops ;
   struct sock *sk ;
   u32 *saved_syn ;
   u32 secid ;
   u32 peer_secid ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/timewait_sock.h"
struct timewait_sock_ops {
   struct kmem_cache *twsk_slab ;
   char *twsk_slab_name ;
   unsigned int twsk_obj_size ;
   int (*twsk_unique)(struct sock *, struct sock *, void *) ;
   void (*twsk_destructor)(struct sock *) ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/tcp.h"
struct tcphdr {
   __be16 source ;
   __be16 dest ;
   __be32 seq ;
   __be32 ack_seq ;
   __u16 res1 : 4 ;
   __u16 doff : 4 ;
   __u16 fin : 1 ;
   __u16 syn : 1 ;
   __u16 rst : 1 ;
   __u16 psh : 1 ;
   __u16 ack : 1 ;
   __u16 urg : 1 ;
   __u16 ece : 1 ;
   __u16 cwr : 1 ;
   __be16 window ;
   __sum16 check ;
   __be16 urg_ptr ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ip.h"
struct iphdr {
   __u8 ihl : 4 ;
   __u8 version : 4 ;
   __u8 tos ;
   __be16 tot_len ;
   __be16 id ;
   __be16 frag_off ;
   __u8 ttl ;
   __u8 protocol ;
   __sum16 check ;
   __be32 saddr ;
   __be32 daddr ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ipv6.h"
struct ipv6_stable_secret {
   bool initialized ;
   struct in6_addr secret ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ipv6.h"
struct ipv6_devconf {
   __s32 forwarding ;
   __s32 hop_limit ;
   __s32 mtu6 ;
   __s32 accept_ra ;
   __s32 accept_redirects ;
   __s32 autoconf ;
   __s32 dad_transmits ;
   __s32 rtr_solicits ;
   __s32 rtr_solicit_interval ;
   __s32 rtr_solicit_max_interval ;
   __s32 rtr_solicit_delay ;
   __s32 force_mld_version ;
   __s32 mldv1_unsolicited_report_interval ;
   __s32 mldv2_unsolicited_report_interval ;
   __s32 use_tempaddr ;
   __s32 temp_valid_lft ;
   __s32 temp_prefered_lft ;
   __s32 regen_max_retry ;
   __s32 max_desync_factor ;
   __s32 max_addresses ;
   __s32 accept_ra_defrtr ;
   __s32 accept_ra_min_hop_limit ;
   __s32 accept_ra_pinfo ;
   __s32 ignore_routes_with_linkdown ;
   __s32 accept_ra_rtr_pref ;
   __s32 rtr_probe_interval ;
   __s32 accept_ra_rt_info_min_plen ;
   __s32 accept_ra_rt_info_max_plen ;
   __s32 proxy_ndp ;
   __s32 accept_source_route ;
   __s32 accept_ra_from_local ;
   __s32 optimistic_dad ;
   __s32 use_optimistic ;
   __s32 mc_forwarding ;
   __s32 disable_ipv6 ;
   __s32 drop_unicast_in_l2_multicast ;
   __s32 accept_dad ;
   __s32 force_tllao ;
   __s32 ndisc_notify ;
   __s32 suppress_frag_ndisc ;
   __s32 accept_ra_mtu ;
   __s32 drop_unsolicited_na ;
   struct ipv6_stable_secret stable_secret ;
   __s32 use_oif_addrs_only ;
   __s32 keep_addr_on_down ;
   __s32 seg6_enabled ;
   __s32 seg6_require_hmac ;
   __u32 enhanced_dad ;
   __u32 addr_gen_mode ;
   __s32 disable_policy ;
   __s32 ndisc_tclass ;
   struct ctl_table_header *sysctl_header ;
};
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct ip6_sf_list {
   struct ip6_sf_list *sf_next ;
   struct in6_addr sf_addr ;
   unsigned long sf_count[2U] ;
   unsigned char sf_gsresp ;
   unsigned char sf_oldin ;
   unsigned char sf_crcount ;
};
#line 114  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct ifmcaddr6 {
   struct in6_addr mca_addr ;
   struct inet6_dev *idev ;
   struct ifmcaddr6 *next ;
   struct ip6_sf_list *mca_sources ;
   struct ip6_sf_list *mca_tomb ;
   unsigned int mca_sfmode ;
   unsigned char mca_crcount ;
   unsigned long mca_sfcount[2U] ;
   struct timer_list mca_timer ;
   unsigned int mca_flags ;
   int mca_users ;
   refcount_t mca_refcnt ;
   spinlock_t mca_lock ;
   unsigned long mca_cstamp ;
   unsigned long mca_tstamp ;
};
#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct ifacaddr6 {
   struct in6_addr aca_addr ;
   struct fib6_info *aca_rt ;
   struct ifacaddr6 *aca_next ;
   struct hlist_node aca_addr_lst ;
   int aca_users ;
   refcount_t aca_refcnt ;
   unsigned long aca_cstamp ;
   unsigned long aca_tstamp ;
   struct callback_head rcu ;
};
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct ipv6_devstat {
   struct proc_dir_entry *proc_dir_entry ;
   struct ipstats_mib *ipv6 ;
   struct icmpv6_mib_device *icmpv6dev ;
   struct icmpv6msg_mib_device *icmpv6msgdev ;
};
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct inet6_dev {
   struct net_device *dev ;
   struct list_head addr_list ;
   struct ifmcaddr6 *mc_list ;
   struct ifmcaddr6 *mc_tomb ;
   spinlock_t mc_lock ;
   unsigned char mc_qrv ;
   unsigned char mc_gq_running ;
   unsigned char mc_ifc_count ;
   unsigned char mc_dad_count ;
   unsigned long mc_v1_seen ;
   unsigned long mc_qi ;
   unsigned long mc_qri ;
   unsigned long mc_maxdelay ;
   struct timer_list mc_gq_timer ;
   struct timer_list mc_ifc_timer ;
   struct timer_list mc_dad_timer ;
   struct ifacaddr6 *ac_list ;
   rwlock_t lock ;
   refcount_t refcnt ;
   __u32 if_flags ;
   int dead ;
   u32 desync_factor ;
   u8 rndid[8U] ;
   struct list_head tempaddr_list ;
   struct in6_addr token ;
   struct neigh_parms *nd_parms ;
   struct ipv6_devconf cnf ;
   struct ipv6_devstat stats ;
   struct timer_list rs_timer ;
   __s32 rs_interval ;
   __u8 rs_probes ;
   unsigned long tstamp ;
   struct callback_head rcu ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_arp.h"
struct prefix_info;
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ndisc.h"
struct nd_opt_hdr {
   __u8 nd_opt_type ;
   __u8 nd_opt_len ;
} __attribute__((__packed__));
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ndisc.h"
struct ndisc_options {
   struct nd_opt_hdr *nd_opt_array[15U] ;
   struct nd_opt_hdr *nd_opts_ri ;
   struct nd_opt_hdr *nd_opts_ri_end ;
   struct nd_opt_hdr *nd_useropts ;
   struct nd_opt_hdr *nd_useropts_end ;
   struct nd_opt_hdr *nd_802154_opt_array[3U] ;
};
#line 201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ndisc.h"
struct ndisc_ops {
   int (*is_useropt)(u8 ) ;
   int (*parse_options)(struct net_device *, struct nd_opt_hdr *, struct ndisc_options *) ;
   void (*update)(struct net_device *, struct neighbour *, u32 , u8 , struct ndisc_options *) ;
   int (*opt_addr_space)(struct net_device *, u8 , struct neighbour *, u8 *, u8 **) ;
   void (*fill_addr_option)(struct net_device *, struct sk_buff *, u8 , u8 *) ;
   void (*prefix_rcv_add_addr)(struct net *, struct net_device *, struct prefix_info *, struct inet6_dev *, struct in6_addr *, int , u32 , bool , bool , __u32 , u32 , bool ) ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inetpeer.h"
struct inet_peer_base {
   struct rb_root rb_root ;
   seqlock_t lock ;
   int total ;
};
#line 235  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip_fib.h"
struct fib_table {
   struct hlist_node tb_hlist ;
   u32 tb_id ;
   int tb_num_default ;
   struct callback_head rcu ;
   unsigned long *tb_data ;
   unsigned long __data[0U] ;
};
#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip.h"
union __anonunion_1687 {
   void (*destructor)(struct sock *) ;
   struct sock *saved_sk ;
};
#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip.h"
struct ip_ra_chain {
   struct ip_ra_chain *next ;
   struct sock *sk ;
   union __anonunion_1687 __anonCompField_ip_ra_chain_196 ;
   struct callback_head rcu ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/firmware.h"
struct firmware {
   size_t size ;
   u8 *data ;
   struct page **pages ;
   void *priv ;
};
#line 4635  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-reg.h"
struct vxge_hw_ring_attr;
#line 1728  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.h"
enum vxge_hw_status;
#line 1753 
enum vxge_hw_mgmt_reg_type {
    vxge_hw_mgmt_reg_type_legacy = 0,
    vxge_hw_mgmt_reg_type_toc = 1,
    vxge_hw_mgmt_reg_type_common = 2,
    vxge_hw_mgmt_reg_type_mrpcim = 3,
    vxge_hw_mgmt_reg_type_srpcim = 4,
    vxge_hw_mgmt_reg_type_vpmgmt = 5,
    vxge_hw_mgmt_reg_type_vpath = 6
};
#line 1843  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.h"
struct vxge_hw_ring_rxd_info {
   u32 syn_flag ;
   u32 is_icmp ;
   u32 fast_path_eligible ;
   u32 l3_cksum_valid ;
   u32 l3_cksum ;
   u32 l4_cksum_valid ;
   u32 l4_cksum ;
   u32 frame ;
   u32 proto ;
   u32 is_vlan ;
   u32 vlan ;
   u32 rth_bucket ;
   u32 rth_it_hit ;
   u32 rth_spdm_hit ;
   u32 rth_hash_type ;
   u32 rth_value ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.h"
struct eprom_image {
   u8 is_valid : 1 ;
   u8 index ;
   u8 type ;
   u16 version ;
};
#line 42 
enum vxge_debug_level {
    VXGE_NONE = 0,
    VXGE_TRACE = 1,
    VXGE_ERR = 2
};
#line 213  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.h"
struct vxge_hw_device_date {
   u32 day ;
   u32 month ;
   u32 year ;
   char date[32U] ;
};
#line 220  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.h"
struct vxge_hw_device_version {
   u32 major ;
   u32 minor ;
   u32 build ;
   char version[32U] ;
};
#line 796  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.h"
struct vxge_hw_device_hw_info {
   u32 host_type ;
   u64 function_mode ;
   u32 func_id ;
   u64 vpath_mask ;
   struct vxge_hw_device_version fw_version ;
   struct vxge_hw_device_date fw_date ;
   struct vxge_hw_device_version flash_version ;
   struct vxge_hw_device_date flash_date ;
   u8 serial_number[64U] ;
   u8 part_number[64U] ;
   u8 product_desc[64U] ;
   u8 mac_addrs[17U][6U] ;
   u8 mac_addr_masks[17U][6U] ;
};
#line 840  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.h"
struct vxge_hw_device_attr {
   void *bar0 ;
   struct pci_dev *pdev ;
   struct vxge_hw_uld_cbs *uld_callbacks ;
};
#line 1435 
enum vxge_hw_rth_algoritms {
    RTH_ALG_JENKINS = 0,
    RTH_ALG_MS_RSS = 1,
    RTH_ALG_CRC32C = 2
};
#line 1455  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.h"
struct vxge_hw_rth_hash_types {
   u8 hash_type_tcpipv4_en : 1 ;
   u8 hash_type_ipv4_en : 1 ;
   u8 hash_type_tcpipv6_en : 1 ;
   u8 hash_type_ipv6_en : 1 ;
   u8 hash_type_tcpipv6ex_en : 1 ;
   u8 hash_type_ipv6ex_en : 1 ;
};
#line 1719  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.h"
struct vxge_hw_ring_attr {
   enum vxge_hw_status (*callback)(struct __vxge_hw_ring *, void *, u8 , void *) ;
   enum vxge_hw_status (*rxd_init)(void *, void *) ;
   void (*rxd_term)(void *, enum vxge_hw_rxd_state , void *) ;
   void *userdata ;
   u32 per_rxd_space ;
};
#line 1815  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.h"
struct vxge_hw_fifo_attr {
   enum vxge_hw_status (*callback)(struct __vxge_hw_fifo *, void *, enum vxge_hw_fifo_tcode , void *, struct sk_buff ***, int , int *) ;
   void (*txdl_term)(void *, enum vxge_hw_txdl_state , void *) ;
   void *userdata ;
   u32 per_txdl_space ;
};
#line 1843  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.h"
struct vxge_hw_vpath_attr {
   u32 vp_id ;
   struct vxge_hw_ring_attr ring_attr ;
   struct vxge_hw_fifo_attr fifo_attr ;
};
#line 2104 
enum vxge_mac_addr_state {
    VXGE_LL_MAC_ADDR_IN_LIST = 0,
    VXGE_LL_MAC_ADDR_IN_DA_TABLE = 1
};
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-main.h"
struct vxge_drv_config {
   int config_dev_cnt ;
   int total_dev_cnt ;
   int g_no_cpus ;
   unsigned int vpath_per_dev ;
};
#line 160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-main.h"
struct macInfo {
   unsigned char macaddr[6U] ;
   unsigned char macmask[6U] ;
   unsigned int vpath_no ;
   enum vxge_mac_addr_state state ;
};
#line 167  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-main.h"
struct vxge_config {
   int tx_pause_enable ;
   int rx_pause_enable ;
   int napi_weight ;
   int intr_type ;
   int addr_learn_en ;
   u32 rth_steering : 2 ;
   u32 rth_algorithm : 2 ;
   u32 rth_hash_type_tcpipv4 : 1 ;
   u32 rth_hash_type_ipv4 : 1 ;
   u32 rth_hash_type_tcpipv6 : 1 ;
   u32 rth_hash_type_ipv6 : 1 ;
   u32 rth_hash_type_tcpipv6ex : 1 ;
   u32 rth_hash_type_ipv6ex : 1 ;
   u32 rth_bkt_sz : 8 ;
   int rth_jhash_golden_ratio ;
   int tx_steering_type ;
   int fifo_indicate_max_pkts ;
   struct vxge_hw_device_hw_info device_hw_info ;
};
#line 195  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-main.h"
struct vxge_msix_entry {
   u16 vector ;
   u16 entry ;
   u16 in_use ;
   void *arg ;
};
#line 205  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-main.h"
struct vxge_sw_stats {
   unsigned long vpaths_open ;
   unsigned long vpath_open_fail ;
   unsigned long link_up ;
   unsigned long link_down ;
};
#line 216  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-main.h"
struct vxge_mac_addrs {
   struct list_head item ;
   u64 macaddr ;
   u64 macmask ;
   enum vxge_mac_addr_state state ;
};
#line 222 
struct vxgedev;
#line 225  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-main.h"
struct vxge_fifo_stats {
   struct u64_stats_sync syncp ;
   u64 tx_frms ;
   u64 tx_bytes ;
   unsigned long tx_errors ;
   unsigned long txd_not_free ;
   unsigned long txd_out_of_desc ;
   unsigned long pci_map_fail ;
};
#line 236  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-main.h"
struct vxge_fifo {
   struct net_device *ndev ;
   struct pci_dev *pdev ;
   struct __vxge_hw_fifo *handle ;
   struct netdev_queue *txq ;
   int tx_steering_type ;
   int indicate_max_pkts ;
   unsigned long interrupt_count ;
   unsigned long jiffies ;
   u32 tx_vector_no ;
   struct vxge_fifo_stats stats ;
} __attribute__((__aligned__(64)));
#line 254  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-main.h"
struct vxge_ring_stats {
   struct u64_stats_sync syncp ;
   u64 rx_frms ;
   u64 rx_mcast ;
   u64 rx_bytes ;
   unsigned long rx_errors ;
   unsigned long rx_dropped ;
   unsigned long prev_rx_frms ;
   unsigned long pci_map_fail ;
   unsigned long skb_alloc_fail ;
};
#line 267  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-main.h"
struct vxge_ring {
   struct net_device *ndev ;
   struct pci_dev *pdev ;
   struct __vxge_hw_ring *handle ;
   int driver_id ;
   unsigned long interrupt_count ;
   unsigned long jiffies ;
   u32 rx_hwts : 1 ;
   int pkts_processed ;
   int budget ;
   struct napi_struct napi ;
   struct napi_struct *napi_p ;
   int vlan_tag_strip ;
   u32 rx_vector_no ;
   enum vxge_hw_status last_status ;
   struct vxge_ring_stats stats ;
} __attribute__((__aligned__(64)));
#line 299  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-main.h"
struct vxge_vpath {
   struct vxge_fifo fifo ;
   struct vxge_ring ring ;
   struct __vxge_hw_vpath_handle *handle ;
   int device_id ;
   int max_mac_addr_cnt ;
   int is_configured ;
   int is_open ;
   struct vxgedev *vdev ;
   u8 macaddr[6U] ;
   u8 macmask[6U] ;
   u16 mac_addr_cnt ;
   u16 mcast_addr_cnt ;
   struct list_head mac_addr_list ;
   u32 level_err ;
   u32 level_trace ;
};
#line 332  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-main.h"
struct vxgedev {
   struct net_device *ndev ;
   struct pci_dev *pdev ;
   struct __vxge_hw_device *devh ;
   unsigned long active_vlans[64U] ;
   int vlan_tag_strip ;
   struct vxge_config config ;
   unsigned long state ;
   unsigned long vp_reset ;
   struct timer_list vp_reset_timer ;
   struct timer_list vp_lockup_timer ;
   u16 all_multi_flg ;
   u32 rx_hwts : 1 ;
   u32 titan1 : 1 ;
   struct vxge_msix_entry *vxge_entries ;
   struct msix_entry *entries ;
   char desc[68U][80U] ;
   enum vxge_hw_event cric_err_event ;
   int max_vpath_supported ;
   int no_of_vpath ;
   struct napi_struct napi ;
   int exec_mode ;
   int max_config_port ;
   struct vxge_vpath *vpaths ;
   struct __vxge_hw_vpath_handle *vp_handles[17U] ;
   void *bar0 ;
   struct vxge_sw_stats stats ;
   int mtu ;
   u8 vpath_selector[17U] ;
   u64 vpaths_deployed ;
   u32 intr_cnt ;
   u32 level_err ;
   u32 level_trace ;
   char fw_version[32U] ;
   struct work_struct reset_task ;
};
#line 403  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-main.h"
struct vxge_rx_priv {
   struct sk_buff *skb ;
   unsigned char *skb_data ;
   dma_addr_t data_dma ;
   dma_addr_t data_size ;
};
#line 410  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-main.h"
struct vxge_tx_priv {
   struct sk_buff *skb ;
   dma_addr_t dma_buffers[18U] ;
};
#line 2620  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-main.c"
union __anonunion___u_1700 {
   u64 __val ;
   char __c[1U] ;
};
#line 683  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/0/concurrency safety/weaver/vxge-main.i.aux"
typedef int ldv_func_ret_type;
#line 196  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 384  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.h"
struct vxge_hw_xmac_aggr_stats {
   u64 tx_frms ;
   u64 tx_data_octets ;
   u64 tx_mcast_frms ;
   u64 tx_bcast_frms ;
   u64 tx_discarded_frms ;
   u64 tx_errored_frms ;
   u64 rx_frms ;
   u64 rx_data_octets ;
   u64 rx_mcast_frms ;
   u64 rx_bcast_frms ;
   u64 rx_discarded_frms ;
   u64 rx_errored_frms ;
   u64 rx_unknown_slow_proto_frms ;
} __attribute__((__packed__));
#line 739  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.h"
struct vxge_hw_xmac_port_stats {
   u64 tx_ttl_frms ;
   u64 tx_ttl_octets ;
   u64 tx_data_octets ;
   u64 tx_mcast_frms ;
   u64 tx_bcast_frms ;
   u64 tx_ucast_frms ;
   u64 tx_tagged_frms ;
   u64 tx_vld_ip ;
   u64 tx_vld_ip_octets ;
   u64 tx_icmp ;
   u64 tx_tcp ;
   u64 tx_rst_tcp ;
   u64 tx_udp ;
   u32 tx_parse_error ;
   u32 tx_unknown_protocol ;
   u64 tx_pause_ctrl_frms ;
   u32 tx_marker_pdu_frms ;
   u32 tx_lacpdu_frms ;
   u32 tx_drop_ip ;
   u32 tx_marker_resp_pdu_frms ;
   u32 tx_xgmii_char2_match ;
   u32 tx_xgmii_char1_match ;
   u32 tx_xgmii_column2_match ;
   u32 tx_xgmii_column1_match ;
   u32 unused1 ;
   u16 tx_any_err_frms ;
   u16 tx_drop_frms ;
   u64 rx_ttl_frms ;
   u64 rx_vld_frms ;
   u64 rx_offload_frms ;
   u64 rx_ttl_octets ;
   u64 rx_data_octets ;
   u64 rx_offload_octets ;
   u64 rx_vld_mcast_frms ;
   u64 rx_vld_bcast_frms ;
   u64 rx_accepted_ucast_frms ;
   u64 rx_accepted_nucast_frms ;
   u64 rx_tagged_frms ;
   u64 rx_long_frms ;
   u64 rx_usized_frms ;
   u64 rx_osized_frms ;
   u64 rx_frag_frms ;
   u64 rx_jabber_frms ;
   u64 rx_ttl_64_frms ;
   u64 rx_ttl_65_127_frms ;
   u64 rx_ttl_128_255_frms ;
   u64 rx_ttl_256_511_frms ;
   u64 rx_ttl_512_1023_frms ;
   u64 rx_ttl_1024_1518_frms ;
   u64 rx_ttl_1519_4095_frms ;
   u64 rx_ttl_4096_8191_frms ;
   u64 rx_ttl_8192_max_frms ;
   u64 rx_ttl_gt_max_frms ;
   u64 rx_ip ;
   u64 rx_accepted_ip ;
   u64 rx_ip_octets ;
   u64 rx_err_ip ;
   u64 rx_icmp ;
   u64 rx_tcp ;
   u64 rx_udp ;
   u64 rx_err_tcp ;
   u64 rx_pause_count ;
   u64 rx_pause_ctrl_frms ;
   u64 rx_unsup_ctrl_frms ;
   u64 rx_fcs_err_frms ;
   u64 rx_in_rng_len_err_frms ;
   u64 rx_out_rng_len_err_frms ;
   u64 rx_drop_frms ;
   u64 rx_discarded_frms ;
   u64 rx_drop_ip ;
   u64 rx_drop_udp ;
   u32 rx_marker_pdu_frms ;
   u32 rx_lacpdu_frms ;
   u32 rx_unknown_pdu_frms ;
   u32 rx_marker_resp_pdu_frms ;
   u32 rx_fcs_discard ;
   u32 rx_illegal_pdu_frms ;
   u32 rx_switch_discard ;
   u32 rx_len_discard ;
   u32 rx_rpa_discard ;
   u32 rx_l2_mgmt_discard ;
   u32 rx_rts_discard ;
   u32 rx_trash_discard ;
   u32 rx_buff_full_discard ;
   u32 rx_red_discard ;
   u32 rx_xgmii_ctrl_err_cnt ;
   u32 rx_xgmii_data_err_cnt ;
   u32 rx_xgmii_char1_match ;
   u32 rx_xgmii_err_sym ;
   u32 rx_xgmii_column1_match ;
   u32 rx_xgmii_char2_match ;
   u32 rx_local_fault ;
   u32 rx_xgmii_column2_match ;
   u32 rx_jettison ;
   u32 rx_remote_fault ;
} __attribute__((__packed__));
#line 1095  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.h"
struct vxge_hw_xmac_stats {
   struct vxge_hw_xmac_aggr_stats aggr_stats[2U] ;
   struct vxge_hw_xmac_port_stats port_stats[3U] ;
   struct vxge_hw_xmac_vpath_tx_stats vpath_tx_stats[17U] ;
   struct vxge_hw_xmac_vpath_rx_stats vpath_rx_stats[17U] ;
};
#line 1728 
enum vxge_hw_status;
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_2416 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_2418 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 268  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_2420 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 196  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 1728  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.h"
enum vxge_hw_status;
#line 2081  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.h"
struct vxge_hw_mempool_cbs {
   void (*item_func_alloc)(struct vxge_hw_mempool *, u32 , struct vxge_hw_mempool_dma *, u32 , u32 ) ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 197 
enum hrtimer_restart;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
struct device_private {
   void *driver_data ;
};
#line 164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned long irq_hw_number_t;
#line 303  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ioport.h"
struct irq_data;
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/idr.h"
struct ida {
   struct xarray xa ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/property.h"
typedef u32 phandle;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/of.h"
struct property {
   char *name ;
   int length ;
   void *value ;
   struct property *next ;
   unsigned long _flags ;
   struct bin_attribute attr ;
};
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/of.h"
struct device_node {
   char *name ;
   phandle phandle ;
   char *full_name ;
   struct fwnode_handle fwnode ;
   struct property *properties ;
   struct property *deadprops ;
   struct device_node *parent ;
   struct device_node *child ;
   struct device_node *sibling ;
   struct kobject kobj ;
   unsigned long _flags ;
   void *data ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_fwspec {
   struct fwnode_handle *fwnode ;
   int param_count ;
   u32 param[16U] ;
};
#line 68 
enum irq_domain_bus_token {
    DOMAIN_BUS_ANY = 0,
    DOMAIN_BUS_WIRED = 1,
    DOMAIN_BUS_GENERIC_MSI = 2,
    DOMAIN_BUS_PCI_MSI = 3,
    DOMAIN_BUS_PLATFORM_MSI = 4,
    DOMAIN_BUS_NEXUS = 5,
    DOMAIN_BUS_IPI = 6,
    DOMAIN_BUS_FSL_MC_MSI = 7,
    DOMAIN_BUS_TI_SCI_INTA_MSI = 8,
    DOMAIN_BUS_WAKEUP = 9
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_domain_ops {
   int (*match)(struct irq_domain *, struct device_node *, enum irq_domain_bus_token ) ;
   int (*select)(struct irq_domain *, struct irq_fwspec *, enum irq_domain_bus_token ) ;
   int (*map)(struct irq_domain *, unsigned int , irq_hw_number_t ) ;
   void (*unmap)(struct irq_domain *, unsigned int ) ;
   int (*xlate)(struct irq_domain *, struct device_node *, u32 *, unsigned int , unsigned long *, unsigned int *) ;
   int (*alloc)(struct irq_domain *, unsigned int , unsigned int , void *) ;
   void (*free)(struct irq_domain *, unsigned int , unsigned int ) ;
   int (*activate)(struct irq_domain *, struct irq_data *, bool ) ;
   void (*deactivate)(struct irq_domain *, struct irq_data *) ;
   int (*translate)(struct irq_domain *, struct irq_fwspec *, unsigned long *, unsigned int *) ;
   void (*debug_show)(struct seq_file *, struct irq_domain *, struct irq_data *, int ) ;
};
#line 132 
struct irq_domain_chip_generic;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_domain {
   struct list_head link ;
   char *name ;
   struct irq_domain_ops *ops ;
   void *host_data ;
   unsigned int flags ;
   unsigned int mapcount ;
   struct fwnode_handle *fwnode ;
   enum irq_domain_bus_token bus_token ;
   struct irq_domain_chip_generic *gc ;
   struct irq_domain *parent ;
   struct dentry *debugfs_file ;
   irq_hw_number_t hwirq_max ;
   unsigned int revmap_direct_max_irq ;
   unsigned int revmap_size ;
   struct xarray revmap_tree ;
   struct mutex revmap_tree_mutex ;
   unsigned int linear_revmap[] ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rtmutex.h"
struct rt_mutex {
   raw_spinlock_t wait_lock ;
   struct rb_root_cached waiters ;
   struct task_struct *owner ;
   int save_state ;
   char *name ;
   char *file ;
   int line ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/i2c.h"
struct i2c_msg {
   __u16 addr ;
   __u16 flags ;
   __u16 len ;
   __u8 *buf ;
};
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/i2c.h"
union i2c_smbus_data {
   __u8 byte ;
   __u16 word ;
   __u8 block[34U] ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_algorithm;
#line 28 
struct i2c_adapter;
#line 29 
struct i2c_client;
#line 33 
enum i2c_slave_event;
#line 33 
enum i2c_slave_event;
#line 314  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_client {
   unsigned short flags ;
   unsigned short addr ;
   char name[20U] ;
   struct i2c_adapter *adapter ;
   struct device dev ;
   int init_irq ;
   int irq ;
   struct list_head detected ;
   int (*slave_cb)(struct i2c_client *, enum i2c_slave_event , u8 *) ;
};
#line 360 
enum i2c_slave_event {
    I2C_SLAVE_READ_REQUESTED = 0,
    I2C_SLAVE_WRITE_REQUESTED = 1,
    I2C_SLAVE_READ_PROCESSED = 2,
    I2C_SLAVE_WRITE_RECEIVED = 3,
    I2C_SLAVE_STOP = 4
};
#line 527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_algorithm {
   int (*master_xfer)(struct i2c_adapter *, struct i2c_msg *, int ) ;
   int (*master_xfer_atomic)(struct i2c_adapter *, struct i2c_msg *, int ) ;
   int (*smbus_xfer)(struct i2c_adapter *, u16 , unsigned short , char , u8 , int , union i2c_smbus_data *) ;
   int (*smbus_xfer_atomic)(struct i2c_adapter *, u16 , unsigned short , char , u8 , int , union i2c_smbus_data *) ;
   u32 (*functionality)(struct i2c_adapter *) ;
   int (*reg_slave)(struct i2c_client *) ;
   int (*unreg_slave)(struct i2c_client *) ;
};
#line 565  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_lock_operations {
   void (*lock_bus)(struct i2c_adapter *, unsigned int ) ;
   int (*trylock_bus)(struct i2c_adapter *, unsigned int ) ;
   void (*unlock_bus)(struct i2c_adapter *, unsigned int ) ;
};
#line 618 
struct gpio_desc;
#line 618  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_bus_recovery_info {
   int (*recover_bus)(struct i2c_adapter *) ;
   int (*get_scl)(struct i2c_adapter *) ;
   void (*set_scl)(struct i2c_adapter *, int ) ;
   int (*get_sda)(struct i2c_adapter *) ;
   void (*set_sda)(struct i2c_adapter *, int ) ;
   int (*get_bus_free)(struct i2c_adapter *) ;
   void (*prepare_recovery)(struct i2c_adapter *) ;
   void (*unprepare_recovery)(struct i2c_adapter *) ;
   struct gpio_desc *scl_gpiod ;
   struct gpio_desc *sda_gpiod ;
};
#line 661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_adapter_quirks {
   u64 flags ;
   int max_num_msgs ;
   u16 max_write_len ;
   u16 max_read_len ;
   u16 max_comb_1st_msg_len ;
   u16 max_comb_2nd_msg_len ;
};
#line 692  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_adapter {
   struct module *owner ;
   unsigned int class ;
   struct i2c_algorithm *algo ;
   void *algo_data ;
   struct i2c_lock_operations *lock_ops ;
   struct rt_mutex bus_lock ;
   struct rt_mutex mux_lock ;
   int timeout ;
   int retries ;
   struct device dev ;
   unsigned long locked_flags ;
   int nr ;
   char name[48U] ;
   struct completion dev_released ;
   struct mutex userspace_clients_lock ;
   struct list_head userspace_clients ;
   struct i2c_bus_recovery_info *bus_recovery_info ;
   struct i2c_adapter_quirks *quirks ;
   struct irq_domain *host_notify_domain ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cdev.h"
struct cdev {
   struct kobject kobj ;
   struct module *owner ;
   struct file_operations *ops ;
   struct list_head list ;
   dev_t dev ;
   unsigned int count ;
} __attribute__((__designated_init__));
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-common.h"
struct v4l2_edid {
   __u32 pad ;
   __u32 start_block ;
   __u32 blocks ;
   __u32 reserved[5U] ;
   __u8 *edid ;
};
#line 754 
enum v4l2_priority {
    V4L2_PRIORITY_UNSET = 0,
    V4L2_PRIORITY_BACKGROUND = 1,
    V4L2_PRIORITY_INTERACTIVE = 2,
    V4L2_PRIORITY_RECORD = 3,
    V4L2_PRIORITY_DEFAULT = 2
};
#line 413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_rect {
   __s32 left ;
   __s32 top ;
   __u32 width ;
   __u32 height ;
};
#line 420  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_fract {
   __u32 numerator ;
   __u32 denominator ;
};
#line 1212  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
typedef __u64 v4l2_std_id;
#line 1394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_bt_timings {
   __u32 width ;
   __u32 height ;
   __u32 interlaced ;
   __u32 polarities ;
   __u64 pixelclock ;
   __u32 hfrontporch ;
   __u32 hsync ;
   __u32 hbackporch ;
   __u32 vfrontporch ;
   __u32 vsync ;
   __u32 vbackporch ;
   __u32 il_vfrontporch ;
   __u32 il_vsync ;
   __u32 il_vbackporch ;
   __u32 standards ;
   __u32 flags ;
   struct v4l2_fract picture_aspect ;
   __u8 cea861_vic ;
   __u8 hdmi_vic ;
   __u8 reserved[46U] ;
} __attribute__((__packed__));
#line 1517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_4885 {
   struct v4l2_bt_timings bt ;
   __u32 reserved[32U] ;
};
#line 1517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dv_timings {
   __u32 type ;
   union __anonunion_4885 __anonCompField_v4l2_dv_timings_77 ;
} __attribute__((__packed__));
#line 1536  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_enum_dv_timings {
   __u32 index ;
   __u32 pad ;
   __u32 reserved[2U] ;
   struct v4l2_dv_timings timings ;
};
#line 1554  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_bt_timings_cap {
   __u32 min_width ;
   __u32 max_width ;
   __u32 min_height ;
   __u32 max_height ;
   __u64 min_pixelclock ;
   __u64 max_pixelclock ;
   __u32 standards ;
   __u32 capabilities ;
   __u32 reserved[16U] ;
} __attribute__((__packed__));
#line 1581  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_4886 {
   struct v4l2_bt_timings_cap bt ;
   __u32 raw_data[32U] ;
};
#line 1581  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dv_timings_cap {
   __u32 type ;
   __u32 pad ;
   __u32 reserved[2U] ;
   union __anonunion_4886 __anonCompField_v4l2_dv_timings_cap_78 ;
};
#line 1803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_tuner {
   __u32 index ;
   __u8 name[32U] ;
   __u32 type ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 rxsubchans ;
   __u32 audmode ;
   __s32 signal ;
   __s32 afc ;
   __u32 reserved[4U] ;
};
#line 1817  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_modulator {
   __u32 index ;
   __u8 name[32U] ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 txsubchans ;
   __u32 type ;
   __u32 reserved[3U] ;
};
#line 1860  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_frequency {
   __u32 tuner ;
   __u32 type ;
   __u32 frequency ;
   __u32 reserved[8U] ;
};
#line 1871  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_frequency_band {
   __u32 tuner ;
   __u32 type ;
   __u32 index ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 modulation ;
   __u32 reserved[9U] ;
};
#line 2043  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_vbi_format {
   __u32 sampling_rate ;
   __u32 offset ;
   __u32 samples_per_line ;
   __u32 sample_format ;
   __s32 start[2U] ;
   __u32 count[2U] ;
   __u32 flags ;
   __u32 reserved[2U] ;
};
#line 2071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_format {
   __u16 service_set ;
   __u16 service_lines[2U][24U] ;
   __u32 io_size ;
   __u32 reserved[2U] ;
};
#line 2095  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_cap {
   __u16 service_set ;
   __u16 service_lines[2U][24U] ;
   __u32 type ;
   __u32 reserved[3U] ;
};
#line 2106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_data {
   __u32 id ;
   __u32 field ;
   __u32 line ;
   __u32 reserved ;
   __u8 data[48U] ;
};
#line 2350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_event_subscription {
   __u32 type ;
   __u32 id ;
   __u32 flags ;
   __u32 reserved[5U] ;
};
#line 2375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_4902 {
   __u32 addr ;
   char name[32U] ;
};
#line 2375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dbg_match {
   __u32 type ;
   union __anonunion_4902 __anonCompField_v4l2_dbg_match_87 ;
} __attribute__((__packed__));
#line 2383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dbg_register {
   struct v4l2_dbg_match match ;
   __u32 size ;
   __u64 reg ;
   __u64 val ;
} __attribute__((__packed__));
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_device;
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_gobj {
   struct media_device *mdev ;
   u32 id ;
   struct list_head list ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity_enum {
   unsigned long *bmap ;
   int idx_max ;
};
#line 88 
struct media_entity;
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct __anonstruct_stack_4906 {
   struct media_entity *entity ;
   struct list_head *link ;
};
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_graph {
   struct __anonstruct_stack_4906 stack[16U] ;
   struct media_entity_enum ent_enum ;
   int top ;
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_pipeline {
   int streaming_count ;
   struct media_graph graph ;
};
#line 132 
struct media_pad;
#line 132 
struct media_interface;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_4907 {
   struct media_gobj *gobj0 ;
   struct media_pad *source ;
   struct media_interface *intf ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_4908 {
   struct media_gobj *gobj1 ;
   struct media_pad *sink ;
   struct media_entity *entity ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_link {
   struct media_gobj graph_obj ;
   struct list_head list ;
   union __anonunion_4907 __anonCompField_media_link_90 ;
   union __anonunion_4908 __anonCompField_media_link_91 ;
   struct media_link *reverse ;
   unsigned long flags ;
   bool is_backlink ;
};
#line 149 
enum media_pad_signal_type {
    PAD_SIGNAL_DEFAULT = 0,
    PAD_SIGNAL_ANALOG = 1,
    PAD_SIGNAL_DV = 2,
    PAD_SIGNAL_AUDIO = 3
};
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_pad {
   struct media_gobj graph_obj ;
   struct media_entity *entity ;
   u16 index ;
   enum media_pad_signal_type sig_type ;
   unsigned long flags ;
};
#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity_operations {
   int (*get_fwnode_pad)(struct fwnode_endpoint *) ;
   int (*link_setup)(struct media_entity *, struct media_pad *, struct media_pad *, u32 ) ;
   int (*link_validate)(struct media_link *) ;
};
#line 221 
enum media_entity_type {
    MEDIA_ENTITY_TYPE_BASE = 0,
    MEDIA_ENTITY_TYPE_VIDEO_DEVICE = 1,
    MEDIA_ENTITY_TYPE_V4L2_SUBDEV = 2
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct __anonstruct_dev_4910 {
   u32 major ;
   u32 minor ;
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_info_4909 {
   struct __anonstruct_dev_4910 dev ;
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity {
   struct media_gobj graph_obj ;
   char *name ;
   enum media_entity_type obj_type ;
   u32 function ;
   unsigned long flags ;
   u16 num_pads ;
   u16 num_links ;
   u16 num_backlinks ;
   int internal_idx ;
   struct media_pad *pads ;
   struct list_head links ;
   struct media_entity_operations *ops ;
   int stream_count ;
   int use_count ;
   struct media_pipeline *pipe ;
   union __anonunion_info_4909 info ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_interface {
   struct media_gobj graph_obj ;
   struct list_head links ;
   u32 type ;
   u32 flags ;
};
#line 349  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_intf_devnode {
   struct media_interface intf ;
   u32 major ;
   u32 minor ;
};
#line 1087 
enum vfl_devnode_type {
    VFL_TYPE_GRABBER = 0,
    VFL_TYPE_VBI = 1,
    VFL_TYPE_RADIO = 2,
    VFL_TYPE_SUBDEV = 3,
    VFL_TYPE_SDR = 4,
    VFL_TYPE_TOUCH = 5,
    VFL_TYPE_MAX = 6
};
#line 1097 
enum vfl_devnode_direction {
    VFL_DIR_RX = 0,
    VFL_DIR_TX = 1,
    VFL_DIR_M2M = 2
};
#line 1104 
struct video_device;
#line 1105 
struct v4l2_device;
#line 1106 
struct v4l2_ctrl_handler;
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct v4l2_prio_state {
   atomic_t prios[4U] ;
};
#line 193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct v4l2_file_operations {
   struct module *owner ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*unlocked_ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl32)(struct file *, unsigned int , unsigned long ) ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   int (*mmap)(struct file *, struct vm_area_struct *) ;
   int (*open)(struct file *) ;
   int (*release)(struct file *) ;
};
#line 256 
struct vb2_queue;
#line 256 
struct v4l2_ioctl_ops;
#line 256  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct video_device {
   struct media_entity entity ;
   struct media_intf_devnode *intf_devnode ;
   struct media_pipeline pipe ;
   struct v4l2_file_operations *fops ;
   u32 device_caps ;
   struct device dev ;
   struct cdev *cdev ;
   struct v4l2_device *v4l2_dev ;
   struct device *dev_parent ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   struct vb2_queue *queue ;
   struct v4l2_prio_state *prio ;
   char name[32U] ;
   enum vfl_devnode_type vfl_type ;
   enum vfl_devnode_direction vfl_dir ;
   int minor ;
   u16 num ;
   unsigned long flags ;
   int index ;
   spinlock_t fh_lock ;
   struct list_head fh_list ;
   int dev_debug ;
   v4l2_std_id tvnorms ;
   void (*release)(struct video_device *) ;
   struct v4l2_ioctl_ops *ioctl_ops ;
   unsigned long valid_ioctls[3U] ;
   struct mutex *lock ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-common.h"
struct v4l2_subdev;
#line 96 
struct v4l2_subdev_ops;
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-common.h"
struct v4l2_priv_tun_config {
   int tuner ;
   void *priv ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-devnode.h"
struct media_file_operations {
   struct module *owner ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl)(struct file *, unsigned int , unsigned long ) ;
   int (*open)(struct file *) ;
   int (*release)(struct file *) ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-devnode.h"
struct media_devnode {
   struct media_device *media_dev ;
   struct media_file_operations *fops ;
   struct device dev ;
   struct cdev cdev ;
   struct device *parent ;
   int minor ;
   unsigned long flags ;
   void (*release)(struct media_devnode *) ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_request;
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_device_ops {
   int (*link_notify)(struct media_link *, u32 , unsigned int ) ;
   struct media_request *(*req_alloc)(struct media_device *) ;
   void (*req_free)(struct media_request *) ;
   int (*req_validate)(struct media_request *) ;
   void (*req_queue)(struct media_request *) ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_device {
   struct device *dev ;
   struct media_devnode *devnode ;
   char model[32U] ;
   char driver_name[32U] ;
   char serial[40U] ;
   char bus_info[32U] ;
   u32 hw_revision ;
   u64 topology_version ;
   u32 id ;
   struct ida entity_internal_idx ;
   int entity_internal_idx_max ;
   struct list_head entities ;
   struct list_head interfaces ;
   struct list_head pads ;
   struct list_head links ;
   struct list_head entity_notify ;
   struct mutex graph_mutex ;
   struct media_graph pm_count_walk ;
   void *source_priv ;
   int (*enable_source)(struct media_entity *, struct media_pipeline *) ;
   void (*disable_source)(struct media_entity *) ;
   struct media_device_ops *ops ;
   struct mutex req_queue_mutex ;
   atomic_t request_id ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-mediabus.h"
struct v4l2_mbus_framefmt {
   __u32 width ;
   __u32 height ;
   __u32 code ;
   __u32 field ;
   __u32 colorspace ;
   __u16 ycbcr_enc ;
   __u16 quantization ;
   __u16 xfer_func ;
   __u16 reserved[11U] ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_format {
   __u32 which ;
   __u32 pad ;
   struct v4l2_mbus_framefmt format ;
   __u32 reserved[8U] ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_mbus_code_enum {
   __u32 pad ;
   __u32 index ;
   __u32 code ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_size_enum {
   __u32 index ;
   __u32 pad ;
   __u32 code ;
   __u32 min_width ;
   __u32 max_width ;
   __u32 min_height ;
   __u32 max_height ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_interval {
   __u32 pad ;
   struct v4l2_fract interval ;
   __u32 reserved[9U] ;
};
#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_interval_enum {
   __u32 index ;
   __u32 pad ;
   __u32 code ;
   __u32 width ;
   __u32 height ;
   struct v4l2_fract interval ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_selection {
   __u32 which ;
   __u32 pad ;
   __u32 target ;
   __u32 flags ;
   struct v4l2_rect r ;
   __u32 reserved[8U] ;
};
#line 157 
struct v4l2_async_notifier;
#line 158 
enum v4l2_async_match_type {
    V4L2_ASYNC_MATCH_CUSTOM = 0,
    V4L2_ASYNC_MATCH_DEVNAME = 1,
    V4L2_ASYNC_MATCH_I2C = 2,
    V4L2_ASYNC_MATCH_FWNODE = 3
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct __anonstruct_i2c_4924 {
   int adapter_id ;
   unsigned short address ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct __anonstruct_custom_4925 {
   bool (*match)(struct device *, struct v4l2_async_subdev *) ;
   void *priv ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
union __anonunion_match_4923 {
   struct fwnode_handle *fwnode ;
   char *device_name ;
   struct __anonstruct_i2c_4924 i2c ;
   struct __anonstruct_custom_4925 custom ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_subdev {
   enum v4l2_async_match_type match_type ;
   union __anonunion_match_4923 match ;
   struct list_head list ;
   struct list_head asd_list ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_notifier_operations {
   int (*bound)(struct v4l2_async_notifier *, struct v4l2_subdev *, struct v4l2_async_subdev *) ;
   int (*complete)(struct v4l2_async_notifier *) ;
   void (*unbind)(struct v4l2_async_notifier *, struct v4l2_subdev *, struct v4l2_async_subdev *) ;
};
#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_notifier {
   struct v4l2_async_notifier_operations *ops ;
   struct v4l2_device *v4l2_dev ;
   struct v4l2_subdev *sd ;
   struct v4l2_async_notifier *parent ;
   struct list_head asd_list ;
   struct list_head waiting ;
   struct list_head done ;
   struct list_head list ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-fh.h"
struct v4l2_m2m_ctx;
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-fh.h"
struct v4l2_fh {
   struct list_head list ;
   struct video_device *vdev ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   enum v4l2_priority prio ;
   wait_queue_head_t wait ;
   struct mutex subscribe_lock ;
   struct list_head subscribed ;
   struct list_head available ;
   unsigned int navailable ;
   u32 sequence ;
   struct v4l2_m2m_ctx *m2m_ctx ;
};
#line 162 
enum v4l2_mbus_type {
    V4L2_MBUS_UNKNOWN = 0,
    V4L2_MBUS_PARALLEL = 1,
    V4L2_MBUS_BT656 = 2,
    V4L2_MBUS_CSI1 = 3,
    V4L2_MBUS_CCP2 = 4,
    V4L2_MBUS_CSI2_DPHY = 5,
    V4L2_MBUS_CSI2_CPHY = 6
};
#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-mediabus.h"
struct v4l2_mbus_config {
   enum v4l2_mbus_type type ;
   unsigned int flags ;
};
#line 184 
struct v4l2_subdev_fh;
#line 185 
struct tuner_setup;
#line 186 
struct v4l2_mbus_frame_desc;
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_decode_vbi_line {
   u32 is_second_field ;
   u8 *p ;
   u32 line ;
   u32 type ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_io_pin_config {
   u32 flags ;
   u8 pin ;
   u8 function ;
   u8 value ;
   u8 strength ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_core_ops {
   int (*log_status)(struct v4l2_subdev *) ;
   int (*s_io_pin_config)(struct v4l2_subdev *, size_t , struct v4l2_subdev_io_pin_config *) ;
   int (*init)(struct v4l2_subdev *, u32 ) ;
   int (*load_fw)(struct v4l2_subdev *) ;
   int (*reset)(struct v4l2_subdev *, u32 ) ;
   int (*s_gpio)(struct v4l2_subdev *, u32 ) ;
   long (*ioctl)(struct v4l2_subdev *, unsigned int , void *) ;
   long (*compat_ioctl32)(struct v4l2_subdev *, unsigned int , unsigned long ) ;
   int (*g_register)(struct v4l2_subdev *, struct v4l2_dbg_register *) ;
   int (*s_register)(struct v4l2_subdev *, struct v4l2_dbg_register *) ;
   int (*s_power)(struct v4l2_subdev *, int ) ;
   int (*interrupt_service_routine)(struct v4l2_subdev *, u32 , bool *) ;
   int (*subscribe_event)(struct v4l2_subdev *, struct v4l2_fh *, struct v4l2_event_subscription *) ;
   int (*unsubscribe_event)(struct v4l2_subdev *, struct v4l2_fh *, struct v4l2_event_subscription *) ;
};
#line 264  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_tuner_ops {
   int (*standby)(struct v4l2_subdev *) ;
   int (*s_radio)(struct v4l2_subdev *) ;
   int (*s_frequency)(struct v4l2_subdev *, struct v4l2_frequency *) ;
   int (*g_frequency)(struct v4l2_subdev *, struct v4l2_frequency *) ;
   int (*enum_freq_bands)(struct v4l2_subdev *, struct v4l2_frequency_band *) ;
   int (*g_tuner)(struct v4l2_subdev *, struct v4l2_tuner *) ;
   int (*s_tuner)(struct v4l2_subdev *, struct v4l2_tuner *) ;
   int (*g_modulator)(struct v4l2_subdev *, struct v4l2_modulator *) ;
   int (*s_modulator)(struct v4l2_subdev *, struct v4l2_modulator *) ;
   int (*s_type_addr)(struct v4l2_subdev *, struct tuner_setup *) ;
   int (*s_config)(struct v4l2_subdev *, struct v4l2_priv_tun_config *) ;
};
#line 304  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_audio_ops {
   int (*s_clock_freq)(struct v4l2_subdev *, u32 ) ;
   int (*s_i2s_clock_freq)(struct v4l2_subdev *, u32 ) ;
   int (*s_routing)(struct v4l2_subdev *, u32 , u32 , u32 ) ;
   int (*s_stream)(struct v4l2_subdev *, int ) ;
};
#line 310 
enum v4l2_mbus_frame_desc_flags {
    V4L2_MBUS_FRAME_DESC_FL_LEN_MAX = 1,
    V4L2_MBUS_FRAME_DESC_FL_BLOB = 2
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_mbus_frame_desc_entry {
   enum v4l2_mbus_frame_desc_flags flags ;
   u32 pixelcode ;
   u32 length ;
};
#line 348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_mbus_frame_desc {
   struct v4l2_mbus_frame_desc_entry entry[4U] ;
   unsigned short num_entries ;
};
#line 415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_video_ops {
   int (*s_routing)(struct v4l2_subdev *, u32 , u32 , u32 ) ;
   int (*s_crystal_freq)(struct v4l2_subdev *, u32 , u32 ) ;
   int (*g_std)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*s_std)(struct v4l2_subdev *, v4l2_std_id ) ;
   int (*s_std_output)(struct v4l2_subdev *, v4l2_std_id ) ;
   int (*g_std_output)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*querystd)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_tvnorms)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_tvnorms_output)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_input_status)(struct v4l2_subdev *, u32 *) ;
   int (*s_stream)(struct v4l2_subdev *, int ) ;
   int (*g_pixelaspect)(struct v4l2_subdev *, struct v4l2_fract *) ;
   int (*g_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_frame_interval *) ;
   int (*s_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_frame_interval *) ;
   int (*s_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*g_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*query_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*g_mbus_config)(struct v4l2_subdev *, struct v4l2_mbus_config *) ;
   int (*s_mbus_config)(struct v4l2_subdev *, struct v4l2_mbus_config *) ;
   int (*s_rx_buffer)(struct v4l2_subdev *, void *, unsigned int *) ;
};
#line 481  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_vbi_ops {
   int (*decode_vbi_line)(struct v4l2_subdev *, struct v4l2_decode_vbi_line *) ;
   int (*s_vbi_data)(struct v4l2_subdev *, struct v4l2_sliced_vbi_data *) ;
   int (*g_vbi_data)(struct v4l2_subdev *, struct v4l2_sliced_vbi_data *) ;
   int (*g_sliced_vbi_cap)(struct v4l2_subdev *, struct v4l2_sliced_vbi_cap *) ;
   int (*s_raw_fmt)(struct v4l2_subdev *, struct v4l2_vbi_format *) ;
   int (*g_sliced_fmt)(struct v4l2_subdev *, struct v4l2_sliced_vbi_format *) ;
   int (*s_sliced_fmt)(struct v4l2_subdev *, struct v4l2_sliced_vbi_format *) ;
};
#line 501  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_sensor_ops {
   int (*g_skip_top_lines)(struct v4l2_subdev *, u32 *) ;
   int (*g_skip_frames)(struct v4l2_subdev *, u32 *) ;
};
#line 505 
enum v4l2_subdev_ir_mode {
    V4L2_SUBDEV_IR_MODE_PULSE_WIDTH = 0
};
#line 540  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ir_parameters {
   unsigned int bytes_per_data_element ;
   enum v4l2_subdev_ir_mode mode ;
   bool enable ;
   bool interrupt_enable ;
   bool shutdown ;
   bool modulation ;
   u32 max_pulse_width ;
   unsigned int carrier_freq ;
   unsigned int duty_cycle ;
   bool invert_level ;
   bool invert_carrier_sense ;
   u32 noise_filter_min_width ;
   unsigned int carrier_range_lower ;
   unsigned int carrier_range_upper ;
   u32 resolution ;
};
#line 599  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ir_ops {
   int (*rx_read)(struct v4l2_subdev *, u8 *, size_t , ssize_t *) ;
   int (*rx_g_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*rx_s_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*tx_write)(struct v4l2_subdev *, u8 *, size_t , ssize_t *) ;
   int (*tx_g_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*tx_s_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
};
#line 630  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_pad_config {
   struct v4l2_mbus_framefmt try_fmt ;
   struct v4l2_rect try_crop ;
   struct v4l2_rect try_compose ;
};
#line 674  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_pad_ops {
   int (*init_cfg)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *) ;
   int (*enum_mbus_code)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_mbus_code_enum *) ;
   int (*enum_frame_size)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_frame_size_enum *) ;
   int (*enum_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_frame_interval_enum *) ;
   int (*get_fmt)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_format *) ;
   int (*set_fmt)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_format *) ;
   int (*get_selection)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_selection *) ;
   int (*set_selection)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_selection *) ;
   int (*get_edid)(struct v4l2_subdev *, struct v4l2_edid *) ;
   int (*set_edid)(struct v4l2_subdev *, struct v4l2_edid *) ;
   int (*dv_timings_cap)(struct v4l2_subdev *, struct v4l2_dv_timings_cap *) ;
   int (*enum_dv_timings)(struct v4l2_subdev *, struct v4l2_enum_dv_timings *) ;
   int (*link_validate)(struct v4l2_subdev *, struct media_link *, struct v4l2_subdev_format *, struct v4l2_subdev_format *) ;
   int (*get_frame_desc)(struct v4l2_subdev *, unsigned int , struct v4l2_mbus_frame_desc *) ;
   int (*set_frame_desc)(struct v4l2_subdev *, unsigned int , struct v4l2_mbus_frame_desc *) ;
};
#line 727  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ops {
   struct v4l2_subdev_core_ops *core ;
   struct v4l2_subdev_tuner_ops *tuner ;
   struct v4l2_subdev_audio_ops *audio ;
   struct v4l2_subdev_video_ops *video ;
   struct v4l2_subdev_vbi_ops *vbi ;
   struct v4l2_subdev_ir_ops *ir ;
   struct v4l2_subdev_sensor_ops *sensor ;
   struct v4l2_subdev_pad_ops *pad ;
};
#line 765  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_internal_ops {
   int (*registered)(struct v4l2_subdev *) ;
   void (*unregistered)(struct v4l2_subdev *) ;
   int (*open)(struct v4l2_subdev *, struct v4l2_subdev_fh *) ;
   int (*close)(struct v4l2_subdev *, struct v4l2_subdev_fh *) ;
   void (*release)(struct v4l2_subdev *) ;
};
#line 772 
struct regulator_bulk_data;
#line 797  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_platform_data {
   struct regulator_bulk_data *regulators ;
   int num_regulators ;
   void *host_priv ;
};
#line 848  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev {
   struct media_entity entity ;
   struct list_head list ;
   struct module *owner ;
   bool owner_v4l2_dev ;
   u32 flags ;
   struct v4l2_device *v4l2_dev ;
   struct v4l2_subdev_ops *ops ;
   struct v4l2_subdev_internal_ops *internal_ops ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   char name[32U] ;
   u32 grp_id ;
   void *dev_priv ;
   void *host_priv ;
   struct video_device *devnode ;
   struct device *dev ;
   struct fwnode_handle *fwnode ;
   struct list_head async_list ;
   struct v4l2_async_subdev *asd ;
   struct v4l2_async_notifier *notifier ;
   struct v4l2_async_notifier *subdev_notifier ;
   struct v4l2_subdev_platform_data *pdata ;
};
#line 906  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_fh {
   struct v4l2_fh vfh ;
   struct module *owner ;
   struct v4l2_subdev_pad_config *pad ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-device.h"
struct v4l2_device {
   struct device *dev ;
   struct media_device *mdev ;
   struct list_head subdevs ;
   spinlock_t lock ;
   char name[36U] ;
   void (*notify)(struct v4l2_subdev *, unsigned int , void *) ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   struct v4l2_prio_state prio ;
   struct kref ref ;
   void (*release)(struct v4l2_device *) ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ptp_clock_kernel.h"
struct ptp_system_timestamp {
   struct timespec64 pre_ts ;
   struct timespec64 post_ts ;
};
#line 277 
struct dma_chan;
#line 279 
struct spi_controller;
#line 280 
struct spi_transfer;
#line 281 
struct spi_controller_mem_ops;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_statistics {
   spinlock_t lock ;
   unsigned long messages ;
   unsigned long transfers ;
   unsigned long errors ;
   unsigned long timedout ;
   unsigned long spi_sync ;
   unsigned long spi_sync_immediate ;
   unsigned long spi_async ;
   unsigned long long bytes ;
   unsigned long long bytes_rx ;
   unsigned long long bytes_tx ;
   unsigned long transfer_bytes_histo[17U] ;
   unsigned long transfers_split_maxsize ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_delay {
   u16 value ;
   u8 unit ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_device {
   struct device dev ;
   struct spi_controller *controller ;
   struct spi_controller *master ;
   u32 max_speed_hz ;
   u8 chip_select ;
   u8 bits_per_word ;
   bool rt ;
   u32 mode ;
   int irq ;
   void *controller_state ;
   void *controller_data ;
   char modalias[32U] ;
   char *driver_override ;
   int cs_gpio ;
   struct gpio_desc *cs_gpiod ;
   struct spi_delay word_delay ;
   struct spi_statistics statistics ;
};
#line 247 
struct spi_message;
#line 452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_controller {
   struct device dev ;
   struct list_head list ;
   s16 bus_num ;
   u16 num_chipselect ;
   u16 dma_alignment ;
   u32 mode_bits ;
   u32 bits_per_word_mask ;
   u32 min_speed_hz ;
   u32 max_speed_hz ;
   u16 flags ;
   bool slave ;
   size_t (*max_transfer_size)(struct spi_device *) ;
   size_t (*max_message_size)(struct spi_device *) ;
   struct mutex io_mutex ;
   spinlock_t bus_lock_spinlock ;
   struct mutex bus_lock_mutex ;
   bool bus_lock_flag ;
   int (*setup)(struct spi_device *) ;
   int (*set_cs_timing)(struct spi_device *, struct spi_delay *, struct spi_delay *, struct spi_delay *) ;
   int (*transfer)(struct spi_device *, struct spi_message *) ;
   void (*cleanup)(struct spi_device *) ;
   bool (*can_dma)(struct spi_controller *, struct spi_device *, struct spi_transfer *) ;
   bool queued ;
   struct kthread_worker kworker ;
   struct task_struct *kworker_task ;
   struct kthread_work pump_messages ;
   spinlock_t queue_lock ;
   struct list_head queue ;
   struct spi_message *cur_msg ;
   bool idling ;
   bool busy ;
   bool running ;
   bool rt ;
   bool auto_runtime_pm ;
   bool cur_msg_prepared ;
   bool cur_msg_mapped ;
   struct completion xfer_completion ;
   size_t max_dma_len ;
   int (*prepare_transfer_hardware)(struct spi_controller *) ;
   int (*transfer_one_message)(struct spi_controller *, struct spi_message *) ;
   int (*unprepare_transfer_hardware)(struct spi_controller *) ;
   int (*prepare_message)(struct spi_controller *, struct spi_message *) ;
   int (*unprepare_message)(struct spi_controller *, struct spi_message *) ;
   int (*slave_abort)(struct spi_controller *) ;
   void (*set_cs)(struct spi_device *, bool ) ;
   int (*transfer_one)(struct spi_controller *, struct spi_device *, struct spi_transfer *) ;
   void (*handle_err)(struct spi_controller *, struct spi_message *) ;
   struct spi_controller_mem_ops *mem_ops ;
   struct spi_delay cs_setup ;
   struct spi_delay cs_hold ;
   struct spi_delay cs_inactive ;
   int *cs_gpios ;
   struct gpio_desc **cs_gpiods ;
   bool use_gpio_descriptors ;
   struct spi_statistics statistics ;
   struct dma_chan *dma_tx ;
   struct dma_chan *dma_rx ;
   void *dummy_rx ;
   void *dummy_tx ;
   int (*fw_translate_cs)(struct spi_controller *, unsigned int ) ;
   bool ptp_sts_supported ;
   unsigned long irq_flags ;
};
#line 890  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_transfer {
   void *tx_buf ;
   void *rx_buf ;
   unsigned int len ;
   dma_addr_t tx_dma ;
   dma_addr_t rx_dma ;
   struct sg_table tx_sg ;
   struct sg_table rx_sg ;
   unsigned int cs_change : 1 ;
   unsigned int tx_nbits : 3 ;
   unsigned int rx_nbits : 3 ;
   u8 bits_per_word ;
   u16 delay_usecs ;
   struct spi_delay delay ;
   struct spi_delay cs_change_delay ;
   struct spi_delay word_delay ;
   u32 speed_hz ;
   u32 effective_speed_hz ;
   unsigned int ptp_sts_word_pre ;
   unsigned int ptp_sts_word_post ;
   struct ptp_system_timestamp *ptp_sts ;
   bool timestamped_pre ;
   bool timestamped_post ;
   struct list_head transfer_list ;
};
#line 961  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_message {
   struct list_head transfers ;
   struct spi_device *spi ;
   unsigned int is_dma_mapped : 1 ;
   void (*complete)(void *) ;
   void *context ;
   unsigned int frame_length ;
   unsigned int actual_length ;
   int status ;
   struct list_head queue ;
   void *state ;
   struct list_head resources ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_fix_screeninfo {
   char id[16U] ;
   unsigned long smem_start ;
   __u32 smem_len ;
   __u32 type ;
   __u32 type_aux ;
   __u32 visual ;
   __u16 xpanstep ;
   __u16 ypanstep ;
   __u16 ywrapstep ;
   __u32 line_length ;
   unsigned long mmio_start ;
   __u32 mmio_len ;
   __u32 accel ;
   __u16 capabilities ;
   __u16 reserved[2U] ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_bitfield {
   __u32 offset ;
   __u32 length ;
   __u32 msb_right ;
};
#line 241  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_var_screeninfo {
   __u32 xres ;
   __u32 yres ;
   __u32 xres_virtual ;
   __u32 yres_virtual ;
   __u32 xoffset ;
   __u32 yoffset ;
   __u32 bits_per_pixel ;
   __u32 grayscale ;
   struct fb_bitfield red ;
   struct fb_bitfield green ;
   struct fb_bitfield blue ;
   struct fb_bitfield transp ;
   __u32 nonstd ;
   __u32 activate ;
   __u32 height ;
   __u32 width ;
   __u32 accel_flags ;
   __u32 pixclock ;
   __u32 left_margin ;
   __u32 right_margin ;
   __u32 upper_margin ;
   __u32 lower_margin ;
   __u32 hsync_len ;
   __u32 vsync_len ;
   __u32 sync ;
   __u32 vmode ;
   __u32 rotate ;
   __u32 colorspace ;
   __u32 reserved[4U] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_cmap {
   __u32 start ;
   __u32 len ;
   __u16 *red ;
   __u16 *green ;
   __u16 *blue ;
   __u16 *transp ;
};
#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_copyarea {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 sx ;
   __u32 sy ;
};
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_fillrect {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 color ;
   __u32 rop ;
};
#line 359  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_image {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 fg_color ;
   __u32 bg_color ;
   __u8 depth ;
   char *data ;
   struct fb_cmap cmap ;
};
#line 383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fbcurpos {
   __u16 x ;
   __u16 y ;
};
#line 387  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_cursor {
   __u16 set ;
   __u16 enable ;
   __u16 rop ;
   char *mask ;
   struct fbcurpos hot ;
   struct fb_image image ;
};
#line 400 
enum backlight_type {
    BACKLIGHT_RAW = 1,
    BACKLIGHT_PLATFORM = 2,
    BACKLIGHT_FIRMWARE = 3,
    BACKLIGHT_TYPE_MAX = 4
};
#line 412 
enum backlight_scale {
    BACKLIGHT_SCALE_UNKNOWN = 0,
    BACKLIGHT_SCALE_LINEAR = 1,
    BACKLIGHT_SCALE_NON_LINEAR = 2
};
#line 418 
struct backlight_device;
#line 419 
struct fb_info;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_ops {
   unsigned int options ;
   int (*update_status)(struct backlight_device *) ;
   int (*get_brightness)(struct backlight_device *) ;
   int (*check_fb)(struct backlight_device *, struct fb_info *) ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_properties {
   int brightness ;
   int max_brightness ;
   int power ;
   int fb_blank ;
   enum backlight_type type ;
   unsigned int state ;
   enum backlight_scale scale ;
};
#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_device {
   struct backlight_properties props ;
   struct mutex update_lock ;
   struct mutex ops_lock ;
   struct backlight_ops *ops ;
   struct notifier_block fb_notif ;
   struct list_head entry ;
   struct device dev ;
   bool fb_bl_on[32U] ;
   int use_count ;
};
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_chroma {
   __u32 redx ;
   __u32 greenx ;
   __u32 bluex ;
   __u32 whitex ;
   __u32 redy ;
   __u32 greeny ;
   __u32 bluey ;
   __u32 whitey ;
};
#line 63 
struct fb_videomode;
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_monspecs {
   struct fb_chroma chroma ;
   struct fb_videomode *modedb ;
   __u8 manufacturer[4U] ;
   __u8 monitor[14U] ;
   __u8 serial_no[14U] ;
   __u8 ascii[14U] ;
   __u32 modedb_len ;
   __u32 model ;
   __u32 serial ;
   __u32 year ;
   __u32 week ;
   __u32 hfmin ;
   __u32 hfmax ;
   __u32 dclkmin ;
   __u32 dclkmax ;
   __u16 input ;
   __u16 dpms ;
   __u16 signal ;
   __u16 vfmin ;
   __u16 vfmax ;
   __u16 gamma ;
   __u16 gtf : 1 ;
   __u16 misc ;
   __u8 version ;
   __u8 revision ;
   __u8 max_x ;
   __u8 max_y ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_blit_caps {
   u32 x ;
   u32 y ;
   u32 len ;
   u32 flags ;
};
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_pixmap {
   u8 *addr ;
   u32 size ;
   u32 offset ;
   u32 buf_align ;
   u32 scan_align ;
   u32 access_align ;
   u32 flags ;
   u32 blit_x ;
   u32 blit_y ;
   void (*writeio)(struct fb_info *, void *, void *, unsigned int ) ;
   void (*readio)(struct fb_info *, void *, void *, unsigned int ) ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_deferred_io {
   unsigned long delay ;
   struct mutex lock ;
   struct list_head pagelist ;
   void (*first_io)(struct fb_info *) ;
   void (*deferred_io)(struct fb_info *, struct list_head *) ;
};
#line 228  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_ops {
   struct module *owner ;
   int (*fb_open)(struct fb_info *, int ) ;
   int (*fb_release)(struct fb_info *, int ) ;
   ssize_t (*fb_read)(struct fb_info *, char *, size_t , loff_t *) ;
   ssize_t (*fb_write)(struct fb_info *, char *, size_t , loff_t *) ;
   int (*fb_check_var)(struct fb_var_screeninfo *, struct fb_info *) ;
   int (*fb_set_par)(struct fb_info *) ;
   int (*fb_setcolreg)(unsigned int , unsigned int , unsigned int , unsigned int , unsigned int , struct fb_info *) ;
   int (*fb_setcmap)(struct fb_cmap *, struct fb_info *) ;
   int (*fb_blank)(int , struct fb_info *) ;
   int (*fb_pan_display)(struct fb_var_screeninfo *, struct fb_info *) ;
   void (*fb_fillrect)(struct fb_info *, struct fb_fillrect *) ;
   void (*fb_copyarea)(struct fb_info *, struct fb_copyarea *) ;
   void (*fb_imageblit)(struct fb_info *, struct fb_image *) ;
   int (*fb_cursor)(struct fb_info *, struct fb_cursor *) ;
   int (*fb_sync)(struct fb_info *) ;
   int (*fb_ioctl)(struct fb_info *, unsigned int , unsigned long ) ;
   int (*fb_compat_ioctl)(struct fb_info *, unsigned int , unsigned long ) ;
   int (*fb_mmap)(struct fb_info *, struct vm_area_struct *) ;
   void (*fb_get_caps)(struct fb_info *, struct fb_blit_caps *, struct fb_var_screeninfo *) ;
   void (*fb_destroy)(struct fb_info *) ;
   int (*fb_debug_enter)(struct fb_info *) ;
   int (*fb_debug_leave)(struct fb_info *) ;
};
#line 306  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilemap {
   __u32 width ;
   __u32 height ;
   __u32 depth ;
   __u32 length ;
   __u8 *data ;
};
#line 315  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilerect {
   __u32 sx ;
   __u32 sy ;
   __u32 width ;
   __u32 height ;
   __u32 index ;
   __u32 fg ;
   __u32 bg ;
   __u32 rop ;
};
#line 326  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilearea {
   __u32 sx ;
   __u32 sy ;
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tileblit {
   __u32 sx ;
   __u32 sy ;
   __u32 width ;
   __u32 height ;
   __u32 fg ;
   __u32 bg ;
   __u32 length ;
   __u32 *indices ;
};
#line 346  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilecursor {
   __u32 sx ;
   __u32 sy ;
   __u32 mode ;
   __u32 shape ;
   __u32 fg ;
   __u32 bg ;
};
#line 355  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tile_ops {
   void (*fb_settile)(struct fb_info *, struct fb_tilemap *) ;
   void (*fb_tilecopy)(struct fb_info *, struct fb_tilearea *) ;
   void (*fb_tilefill)(struct fb_info *, struct fb_tilerect *) ;
   void (*fb_tileblit)(struct fb_info *, struct fb_tileblit *) ;
   void (*fb_tilecursor)(struct fb_info *, struct fb_tilecursor *) ;
   int (*fb_get_tilemax)(struct fb_info *) ;
};
#line 499  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct aperture {
   resource_size_t base ;
   resource_size_t size ;
};
#line 497  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct apertures_struct {
   unsigned int count ;
   struct aperture ranges[0U] ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
union __anonunion_5826 {
   char *screen_base ;
   char *screen_buffer ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_info {
   atomic_t count ;
   int node ;
   int flags ;
   int fbcon_rotate_hint ;
   struct mutex lock ;
   struct mutex mm_lock ;
   struct fb_var_screeninfo var ;
   struct fb_fix_screeninfo fix ;
   struct fb_monspecs monspecs ;
   struct work_struct queue ;
   struct fb_pixmap pixmap ;
   struct fb_pixmap sprite ;
   struct fb_cmap cmap ;
   struct list_head modelist ;
   struct fb_videomode *mode ;
   struct backlight_device *bl_dev ;
   struct mutex bl_curve_mutex ;
   u8 bl_curve[128U] ;
   struct delayed_work deferred_work ;
   struct fb_deferred_io *fbdefio ;
   struct fb_ops *fbops ;
   struct device *device ;
   struct device *dev ;
   int class_flag ;
   struct fb_tile_ops *tileops ;
   union __anonunion_5826 __anonCompField_fb_info_73 ;
   unsigned long screen_size ;
   void *pseudo_palette ;
   u32 state ;
   void *fbcon_par ;
   void *par ;
   struct apertures_struct *apertures ;
   bool skip_vt_switch ;
};
#line 767  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_videomode {
   char *name ;
   u32 refresh ;
   u32 xres ;
   u32 yres ;
   u32 pixclock ;
   u32 left_margin ;
   u32 right_margin ;
   u32 upper_margin ;
   u32 lower_margin ;
   u32 hsync_len ;
   u32 vsync_len ;
   u32 sync ;
   u32 vmode ;
   u32 flag ;
};
#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct ldv_kmem_cache {
   char *name ;
   unsigned int size ;
};
#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
typedef unsigned long pthread_t;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
union pthread_attr_t {
   char __size[56U] ;
   long __align ;
};
#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
typedef union pthread_attr_t pthread_attr_t;
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 15  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_free_irq_6 {
   int arg0 ;
   int signal_pending ;
};
#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_interrupt_scenario_vxge_alarm_msix_handle_14 {
   int arg0 ;
   enum irqreturn (*arg1)(int , void *) ;
   enum irqreturn (*arg2)(int , void *) ;
   void *arg3 ;
   int signal_pending ;
};
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_random_allocationless_scenario_vxge_fw_flash_18 {
   struct net_device *arg0 ;
   int signal_pending ;
};
#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_pci_scenario_vxge_driver_19 {
   struct pci_driver *arg0 ;
   int signal_pending ;
};
#line 38  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_timer_scenario_6_20 {
   struct timer_list *arg0 ;
   int signal_pending ;
};
/* compiler builtin: 
   void __builtin_prefetch(void const * , ...);   */
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/common/inline_asm.h"
#line 22 
void ldv_inline_asm(void);
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
#line 20 
unsigned long native_save_fl(void);
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
unsigned long native_save_fl(void)
{
  #line 22 
  unsigned long flags;
  #line 23 
  ldv_inline_asm();
  #line 35 
  return flags;
}

#line 38 
#line 39 
void native_restore_fl(unsigned long flags);
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
void native_restore_fl(unsigned long flags)
{
  #line 41 
  ldv_inline_asm();
  #line 42 
  return;
}

#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/io.h"
__inline static unsigned int readl(void *addr)
{
  #line 59 
  unsigned int ret;
  #line 60 
  ldv_inline_asm();
  #line 59 
  return ret;
}

#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/io.h"
__inline static void writel(unsigned int val, void *addr)
{
  #line 69 
  ldv_inline_asm();
  #line 70 
  return;
}

#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/io.h"
__inline static u64 readq(void *addr)
{
  #line 95 
  u64 ret;
  #line 96 
  ldv_inline_asm();
  #line 95 
  return ret;
}

#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/io.h"
__inline static void writeq(u64 val, void *addr)
{
  #line 99 
  ldv_inline_asm();
  #line 100 
  return;
}

#line 1907  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.h"
#line 1133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.c"
enum vxge_hw_status vxge_hw_ring_rxd_reserve(struct __vxge_hw_ring *ring, void **rxdh);
#line 1912  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.h"
#line 1194  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.c"
void vxge_hw_ring_rxd_pre_post(struct __vxge_hw_ring *ring, void *rxdh);
#line 1917  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.h"
#line 1210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.c"
void vxge_hw_ring_rxd_post_post(struct __vxge_hw_ring *ring, void *rxdh);
#line 1922  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.h"
#line 1253  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.c"
void vxge_hw_ring_rxd_post_post_wmb(struct __vxge_hw_ring *ring, void *rxdh);
#line 1926  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.h"
#line 1230  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.c"
void vxge_hw_ring_rxd_post(struct __vxge_hw_ring *ring, void *rxdh);
#line 1930  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.h"
#line 1292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.c"
enum vxge_hw_status vxge_hw_ring_rxd_next_completed(struct __vxge_hw_ring *ring, void **rxdh, u8 *t_code);
#line 1935  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.h"
#line 1357  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.c"
enum vxge_hw_status vxge_hw_ring_handle_tcode(struct __vxge_hw_ring *ring, void *rxdh, u8 t_code);
#line 1940  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.h"
#line 1177  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.c"
void vxge_hw_ring_rxd_free(struct __vxge_hw_ring *ring, void *rxdh);
#line 2012  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.h"
#line 1435  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.c"
enum vxge_hw_status vxge_hw_fifo_txdl_reserve(struct __vxge_hw_fifo *fifo, void **txdlh, void **txdl_priv);
#line 2017  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.h"
#line 1490  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.c"
void vxge_hw_fifo_txdl_buffer_set(struct __vxge_hw_fifo *fifo, void *txdlh, u32 frag_idx, dma_addr_t dma_pointer, u32 size);
#line 2024  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.h"
#line 1536  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.c"
void vxge_hw_fifo_txdl_post(struct __vxge_hw_fifo *fifo, void *txdlh);
#line 2028  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.h"
#line 1410  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.c"
u32 vxge_hw_fifo_free_txdl_count_get(struct __vxge_hw_fifo *fifoh);
#line 2031  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.h"
#line 1597  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.c"
enum vxge_hw_status vxge_hw_fifo_txdl_next_completed(struct __vxge_hw_fifo *fifo, void **txdlh, enum vxge_hw_fifo_tcode *t_code);
#line 2036  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.h"
#line 1652  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.c"
enum vxge_hw_status vxge_hw_fifo_handle_tcode(struct __vxge_hw_fifo *fifo, void *txdlh, enum vxge_hw_fifo_tcode t_code);
#line 2041  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.h"
#line 1692  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.c"
void vxge_hw_fifo_txdl_free(struct __vxge_hw_fifo *fifo, void *txdlh);
#line 2094  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.h"
#line 2094 
enum vxge_hw_status __vxge_hw_vpath_rts_table_get(struct __vxge_hw_vpath_handle *vp, u32 action, u32 rts_table, u32 offset, u64 *data0, u64 *data1);
#line 2103 
#line 2103 
enum vxge_hw_status __vxge_hw_vpath_rts_table_set(struct __vxge_hw_vpath_handle *vp, u32 action, u32 rts_table, u32 offset, u64 steer_data0, u64 steer_data1);
#line 2116 
#line 367  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.c"
void vxge_hw_device_intr_enable(struct __vxge_hw_device *hldev);
#line 2119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.h"
#line 343  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.c"
u32 vxge_hw_device_set_intr_type(struct __vxge_hw_device *hldev, u32 intr_mode);
#line 2121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.h"
#line 421  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.c"
void vxge_hw_device_intr_disable(struct __vxge_hw_device *hldev);
#line 2124  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.h"
#line 450  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.c"
void vxge_hw_device_mask_all(struct __vxge_hw_device *hldev);
#line 2127  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.h"
#line 469  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.c"
void vxge_hw_device_unmask_all(struct __vxge_hw_device *hldev);
#line 2130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.h"
#line 891  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.c"
enum vxge_hw_status vxge_hw_device_begin_irq(struct __vxge_hw_device *hldev, u32 skip_alarms, u64 *reason);
#line 2135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.h"
#line 977  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.c"
void vxge_hw_device_clear_tx_rx(struct __vxge_hw_device *hldev);
#line 2142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.h"
#line 269  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.c"
void vxge_hw_vpath_dynamic_rti_rtimer_set(struct __vxge_hw_ring *ring);
#line 2144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.h"
#line 253  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.c"
void vxge_hw_vpath_dynamic_tti_rtimer_set(struct __vxge_hw_fifo *fifo);
#line 2156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.h"
#line 1717  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.c"
enum vxge_hw_status vxge_hw_vpath_mac_addr_add(struct __vxge_hw_vpath_handle *vp, u8 *macaddr, u8 *macaddr_mask, enum vxge_hw_vpath_mac_addr_add_mode duplicate_mode);
#line 2163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.h"
#line 1780  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.c"
enum vxge_hw_status vxge_hw_vpath_mac_addr_get(struct __vxge_hw_vpath_handle *vp, u8 *macaddr, u8 *macaddr_mask);
#line 2169  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.h"
#line 1832  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.c"
enum vxge_hw_status vxge_hw_vpath_mac_addr_get_next(struct __vxge_hw_vpath_handle *vp, u8 *macaddr, u8 *macaddr_mask);
#line 2175  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.h"
#line 1885  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.c"
enum vxge_hw_status vxge_hw_vpath_mac_addr_delete(struct __vxge_hw_vpath_handle *vp, u8 *macaddr, u8 *macaddr_mask);
#line 2181  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.h"
#line 1929  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.c"
enum vxge_hw_status vxge_hw_vpath_vid_add(struct __vxge_hw_vpath_handle *vp, u64 vid);
#line 2186  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.h"
#line 1957  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.c"
enum vxge_hw_status vxge_hw_vpath_vid_delete(struct __vxge_hw_vpath_handle *vp, u64 vid);
#line 2210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.h"
#line 1982  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.c"
enum vxge_hw_status vxge_hw_vpath_promisc_enable(struct __vxge_hw_vpath_handle *vp);
#line 2213  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.h"
#line 2024  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.c"
enum vxge_hw_status vxge_hw_vpath_promisc_disable(struct __vxge_hw_vpath_handle *vp);
#line 2216  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.h"
#line 2058  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.c"
enum vxge_hw_status vxge_hw_vpath_bcast_enable(struct __vxge_hw_vpath_handle *vp);
#line 2219  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.h"
#line 2090  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.c"
enum vxge_hw_status vxge_hw_vpath_mcast_enable(struct __vxge_hw_vpath_handle *vp);
#line 2222  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.h"
#line 2124  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.c"
enum vxge_hw_status vxge_hw_vpath_mcast_disable(struct __vxge_hw_vpath_handle *vp);
#line 2225  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.h"
#line 2373  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.c"
enum vxge_hw_status vxge_hw_vpath_poll_rx(struct __vxge_hw_ring *ring);
#line 2228  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.h"
#line 2427  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.c"
enum vxge_hw_status vxge_hw_vpath_poll_tx(struct __vxge_hw_fifo *fifo, struct sk_buff ***skb_ptr, int nr_skb, int *more);
#line 2232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.h"
#line 2155  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.c"
enum vxge_hw_status vxge_hw_vpath_alarm_process(struct __vxge_hw_vpath_handle *vp, u32 skip_alarms);
#line 2237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.h"
#line 2184  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.c"
void vxge_hw_vpath_msix_set(struct __vxge_hw_vpath_handle *vp, int *tim_msix_id, int alarm_msix_id);
#line 2241  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.h"
#line 2230  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.c"
void vxge_hw_vpath_msix_mask(struct __vxge_hw_vpath_handle *vp, int msix_id);
#line 2244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.h"
#line 2250  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.c"
void vxge_hw_vpath_msix_clear(struct __vxge_hw_vpath_handle *vp, int msix_id);
#line 2246  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.h"
#line 488  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.c"
void vxge_hw_device_flush_io(struct __vxge_hw_device *hldev);
#line 2249  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.h"
#line 2277  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.c"
void vxge_hw_vpath_msix_unmask(struct __vxge_hw_vpath_handle *vp, int msix_id);
#line 2252  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.h"
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.c"
enum vxge_hw_status vxge_hw_vpath_intr_enable(struct __vxge_hw_vpath_handle *vp);
#line 2255  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.h"
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.c"
enum vxge_hw_status vxge_hw_vpath_intr_disable(struct __vxge_hw_vpath_handle *vp);
#line 2258  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.h"
#line 2293  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.c"
void vxge_hw_vpath_inta_mask_tx_rx(struct __vxge_hw_vpath_handle *vp);
#line 2261  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.h"
#line 2331  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.c"
void vxge_hw_vpath_inta_unmask_tx_rx(struct __vxge_hw_vpath_handle *vp);
#line 2265  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.h"
#line 294  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.c"
void vxge_hw_channel_msix_mask(struct __vxge_hw_channel *channel, int msix_id);
#line 2268  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.h"
#line 312  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.c"
void vxge_hw_channel_msix_unmask(struct __vxge_hw_channel *channel, int msix_id);
#line 2271  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.h"
#line 330  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.c"
void vxge_hw_channel_msix_clear(struct __vxge_hw_channel *channel, int msix_id);
#line 2274  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.h"
#line 1067  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.c"
void vxge_hw_channel_dtr_try_complete(struct __vxge_hw_channel *channel, void **dtrh);
#line 2278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.h"
#line 1082  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.c"
void vxge_hw_channel_dtr_complete(struct __vxge_hw_channel *channel);
#line 2281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.h"
#line 1101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.c"
void vxge_hw_channel_dtr_free(struct __vxge_hw_channel *channel, void *dtrh);
#line 2284  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.h"
#line 1113  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.c"
int vxge_hw_channel_dtr_count(struct __vxge_hw_channel *channel);
#line 2286  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.h"
#line 223  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.c"
void vxge_hw_vpath_tti_ci_set(struct __vxge_hw_fifo *fifo);
#line 2288  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.h"
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.c"
void vxge_hw_vpath_dynamic_rti_ci_set(struct __vxge_hw_ring *ring);
#line 1976  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.h"
__inline static struct __vxge_hw_fifo_txdl_priv *__vxge_hw_fifo_txdl_priv(struct __vxge_hw_fifo *fifo, struct vxge_hw_fifo_txd *txdp)
{
  #line 1980 
  return (struct __vxge_hw_fifo_txdl_priv *)((unsigned long)fifo->per_txdl_space + (unsigned long)txdp->host_control);
}

#line 2014  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.h"
__inline static void __vxge_hw_pio_mem_write32_upper(u32 val, void *addr)
{
  #line 2016 
  writel(val,addr + 4U);
  #line 2017 
  return;
}

#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.c"
enum vxge_hw_status vxge_hw_vpath_intr_enable(struct __vxge_hw_vpath_handle *vp)
{
  #line 33 
  u64 val64;
  #line 35 
  struct __vxge_hw_virtualpath *vpath;
  #line 36 
  struct vxge_hw_vpath_reg *vp_reg;
  #line 37 
  enum vxge_hw_status status = 0;
  #line 38 
  if (vp == (struct __vxge_hw_vpath_handle *)0) {
    #line 39 
    status = VXGE_HW_ERR_INVALID_HANDLE;
    #line 40 
    goto exit;
  }
  #line 43 
  vpath = vp->vpath;
  #line 45 
  if (vpath->vp_open == 0U) {
    #line 46 
    status = VXGE_HW_ERR_VPATH_NOT_OPEN;
    #line 47 
    goto exit;
  }
  #line 50 
  vp_reg = vpath->vp_reg;
  #line 52 
  writeq(18446744073709551615ULL,(void *)(& vp_reg->kdfcctl_errors_reg));
  #line 54 
  __vxge_hw_pio_mem_write32_upper(4294967295U,(void *)(& vp_reg->general_errors_reg));
  #line 57 
  __vxge_hw_pio_mem_write32_upper(4294967295U,(void *)(& vp_reg->pci_config_errors_reg));
  #line 60 
  __vxge_hw_pio_mem_write32_upper(4294967295U,(void *)(& vp_reg->mrpcim_to_vpath_alarm_reg));
  #line 63 
  __vxge_hw_pio_mem_write32_upper(4294967295U,(void *)(& vp_reg->srpcim_to_vpath_alarm_reg));
  #line 66 
  __vxge_hw_pio_mem_write32_upper(4294967295U,(void *)(& vp_reg->vpath_ppif_int_status));
  #line 69 
  __vxge_hw_pio_mem_write32_upper(4294967295U,(void *)(& vp_reg->srpcim_msg_to_vpath_reg));
  #line 72 
  __vxge_hw_pio_mem_write32_upper(4294967295U,(void *)(& vp_reg->vpath_pcipif_int_status));
  #line 75 
  __vxge_hw_pio_mem_write32_upper(4294967295U,(void *)(& vp_reg->prc_alarm_reg));
  #line 78 
  __vxge_hw_pio_mem_write32_upper(4294967295U,(void *)(& vp_reg->wrdma_alarm_status));
  #line 81 
  __vxge_hw_pio_mem_write32_upper(4294967295U,(void *)(& vp_reg->asic_ntwk_vp_err_reg));
  #line 84 
  __vxge_hw_pio_mem_write32_upper(4294967295U,(void *)(& vp_reg->xgmac_vp_int_status));
  #line 87 
  val64 = readq((void *)(& vp_reg->vpath_general_int_status));
  #line 91 
  __vxge_hw_pio_mem_write32_upper(4294967295U,(void *)(& vp_reg->vpath_pcipif_int_mask));
  #line 94 
  __vxge_hw_pio_mem_write32_upper(4294967295U,(void *)(& vp_reg->srpcim_msg_to_vpath_mask));
  #line 97 
  __vxge_hw_pio_mem_write32_upper(4294967295U,(void *)(& vp_reg->srpcim_to_vpath_alarm_mask));
  #line 100 
  __vxge_hw_pio_mem_write32_upper(4294967295U,(void *)(& vp_reg->mrpcim_to_vpath_alarm_mask));
  #line 103 
  __vxge_hw_pio_mem_write32_upper(4294967295U,(void *)(& vp_reg->pci_config_errors_mask));
  #line 108 
  writeq(17895424ULL,(void *)(& vp_reg->general_errors_mask));
  #line 114 
  __vxge_hw_pio_mem_write32_upper(17830144U,(void *)(& vp_reg->kdfcctl_errors_mask));
  #line 123 
  __vxge_hw_pio_mem_write32_upper(0U,(void *)(& vp_reg->vpath_ppif_int_mask));
  #line 125 
  __vxge_hw_pio_mem_write32_upper(2147483648U,(void *)(& vp_reg->prc_alarm_mask));
  #line 129 
  __vxge_hw_pio_mem_write32_upper(0U,(void *)(& vp_reg->wrdma_alarm_mask));
  #line 130 
  __vxge_hw_pio_mem_write32_upper(0U,(void *)(& vp_reg->xgmac_vp_int_mask));
  #line 132 
  if ((vpath->hldev)->first_vp_id != vpath->vp_id) 
                                                   #line 133 
                                                   __vxge_hw_pio_mem_write32_upper(4294967295U,(void *)(& vp_reg->asic_ntwk_vp_err_mask)); else 
                                                                    #line 136 
                                                                    __vxge_hw_pio_mem_write32_upper(4352U,(void *)(& vp_reg->asic_ntwk_vp_err_mask));
  #line 141 
  __vxge_hw_pio_mem_write32_upper(0U,(void *)(& vp_reg->vpath_general_int_mask));
  #line 143 
  exit: 
        #line 143 
  ;
  #line 144 
  return status;
}

#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.c"
enum vxge_hw_status vxge_hw_vpath_intr_disable(struct __vxge_hw_vpath_handle *vp)
{
  #line 160 
  u64 val64;
  #line 162 
  struct __vxge_hw_virtualpath *vpath;
  #line 164 
  struct vxge_hw_vpath_reg *vp_reg;
  #line 163 
  enum vxge_hw_status status = 0;
  #line 165 
  if (vp == (struct __vxge_hw_vpath_handle *)0) {
    #line 166 
    status = VXGE_HW_ERR_INVALID_HANDLE;
    #line 167 
    goto exit;
  }
  #line 170 
  vpath = vp->vpath;
  #line 172 
  if (vpath->vp_open == 0U) {
    #line 173 
    status = VXGE_HW_ERR_VPATH_NOT_OPEN;
    #line 174 
    goto exit;
  }
  #line 176 
  vp_reg = vpath->vp_reg;
  #line 178 
  __vxge_hw_pio_mem_write32_upper(4294967295U,(void *)(& vp_reg->vpath_general_int_mask));
  #line 182 
  val64 = 9223372036854775808ULL >> (1 << (16U - vpath->vp_id));
  #line 184 
  writeq(18446744073709551615ULL,(void *)(& vp_reg->kdfcctl_errors_mask));
  #line 186 
  __vxge_hw_pio_mem_write32_upper(4294967295U,(void *)(& vp_reg->general_errors_mask));
  #line 189 
  __vxge_hw_pio_mem_write32_upper(4294967295U,(void *)(& vp_reg->pci_config_errors_mask));
  #line 192 
  __vxge_hw_pio_mem_write32_upper(4294967295U,(void *)(& vp_reg->mrpcim_to_vpath_alarm_mask));
  #line 195 
  __vxge_hw_pio_mem_write32_upper(4294967295U,(void *)(& vp_reg->srpcim_to_vpath_alarm_mask));
  #line 198 
  __vxge_hw_pio_mem_write32_upper(4294967295U,(void *)(& vp_reg->vpath_ppif_int_mask));
  #line 201 
  __vxge_hw_pio_mem_write32_upper(4294967295U,(void *)(& vp_reg->srpcim_msg_to_vpath_mask));
  #line 204 
  __vxge_hw_pio_mem_write32_upper(4294967295U,(void *)(& vp_reg->vpath_pcipif_int_mask));
  #line 207 
  __vxge_hw_pio_mem_write32_upper(4294967295U,(void *)(& vp_reg->wrdma_alarm_mask));
  #line 210 
  __vxge_hw_pio_mem_write32_upper(4294967295U,(void *)(& vp_reg->prc_alarm_mask));
  #line 213 
  __vxge_hw_pio_mem_write32_upper(4294967295U,(void *)(& vp_reg->xgmac_vp_int_mask));
  #line 216 
  __vxge_hw_pio_mem_write32_upper(4294967295U,(void *)(& vp_reg->asic_ntwk_vp_err_mask));
  #line 219 
  exit: 
        #line 219 
  ;
  #line 220 
  return status;
}

#line 223  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.c"
void vxge_hw_vpath_tti_ci_set(struct __vxge_hw_fifo *fifo)
{
  #line 233 
  void *__mptr;
  #line 225 
  struct vxge_hw_vpath_reg *vp_reg;
  #line 226 
  struct vxge_hw_vp_config *config;
  #line 227 
  u64 val64;
  #line 229 
  if ((fifo->config)->enable != 1U) 
                                    #line 230 
                                    return;
  #line 232 
  vp_reg = fifo->vp_reg;
  #line 233 
  __mptr = (void *)fifo->config;
  #line 233 
  config = ((struct vxge_hw_vp_config *)(__mptr + 18446744073709551584U));
  #line 235 
  if (config->tti.timer_ci_en != 1U) {
    #line 236 
    config->tti.timer_ci_en = 1U;
    #line 237 
    val64 = readq((void *)(& vp_reg->tim_cfg1_int_num[0]));
    #line 238 
    val64 |= 16777216ULL;
    #line 239 
    fifo->tim_tti_cfg1_saved = val64;
    #line 240 
    writeq(val64,(void *)(& vp_reg->tim_cfg1_int_num[0]));
  }
  #line 242 
  return;
}

#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.c"
void vxge_hw_vpath_dynamic_rti_ci_set(struct __vxge_hw_ring *ring)
{
  #line 246 
  u64 val64 = ring->tim_rti_cfg1_saved;
  #line 248 
  val64 |= 16777216ULL;
  #line 249 
  ring->tim_rti_cfg1_saved = val64;
  #line 250 
  writeq(val64,(void *)(& (ring->vp_reg)->tim_cfg1_int_num[1]));
  #line 251 
  return;
}

#line 253  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.c"
void vxge_hw_vpath_dynamic_tti_rtimer_set(struct __vxge_hw_fifo *fifo)
{
  #line 255 
  u64 val64 = fifo->tim_tti_cfg3_saved;
  #line 256 
  u64 timer = (unsigned long long)((fifo->rtimer * 1000U) / 272U);
  #line 258 
  val64 &= 18158513701852807167ULL;
  #line 259 
  if (timer != 0ULL) 
                     #line 260 
                     val64 = ((timer << 32) | val64) | 2882303761517117440ULL;
  #line 263 
  writeq(val64,(void *)(& (fifo->vp_reg)->tim_cfg3_int_num[0]));
  #line 264 
  return;
}

#line 269  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.c"
void vxge_hw_vpath_dynamic_rti_rtimer_set(struct __vxge_hw_ring *ring)
{
  #line 271 
  u64 val64 = ring->tim_rti_cfg3_saved;
  #line 272 
  u64 timer = (unsigned long long)((ring->rtimer * 1000U) / 272U);
  #line 274 
  val64 &= 18158513701852807167ULL;
  #line 275 
  if (timer != 0ULL) 
                     #line 276 
                     val64 = ((timer << 32) | val64) | 2305843009213693952ULL;
  #line 279 
  writeq(val64,(void *)(& (ring->vp_reg)->tim_cfg3_int_num[1]));
  #line 280 
  return;
}

#line 294  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.c"
void vxge_hw_channel_msix_mask(struct __vxge_hw_channel *channel, int msix_id)
{
  #line 297 
  __vxge_hw_pio_mem_write32_upper((unsigned int)((9223372036854775808ULL >> (msix_id >> 2)) >> 32),(void *)(& (channel->common_reg)->set_msix_mask_vect[msix_id % 4]));
  #line 300 
  return;
}

#line 312  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.c"
void vxge_hw_channel_msix_unmask(struct __vxge_hw_channel *channel, int msix_id)
{
  #line 315 
  __vxge_hw_pio_mem_write32_upper((unsigned int)((9223372036854775808ULL >> (msix_id >> 2)) >> 32),(void *)(& (channel->common_reg)->clear_msix_mask_vect[msix_id % 4]));
  #line 318 
  return;
}

#line 330  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.c"
void vxge_hw_channel_msix_clear(struct __vxge_hw_channel *channel, int msix_id)
{
  #line 332 
  __vxge_hw_pio_mem_write32_upper((unsigned int)((9223372036854775808ULL >> (msix_id >> 2)) >> 32),(void *)(& (channel->common_reg)->clr_msix_one_shot_vec[msix_id % 4]));
  #line 335 
  return;
}

#line 343  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.c"
u32 vxge_hw_device_set_intr_type(struct __vxge_hw_device *hldev, u32 intr_mode)
{
  #line 346 
  if (intr_mode > 2U) 
                      #line 350 
                      intr_mode = 0U;
  #line 352 
  hldev->config.intr_mode = (unsigned int)intr_mode;
  #line 353 
  return intr_mode;
}

#line 367  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.c"
void vxge_hw_device_intr_enable(struct __vxge_hw_device *hldev)
{
  #line 369 
  u32 i;
  #line 370 
  u64 val64;
  #line 371 
  u32 val32;
  #line 373 
  vxge_hw_device_mask_all(hldev);
  #line 375 
  i = 0U;
  #line 375 
  while (i <= 16U) {
    #line 377 
    if ((hldev->vpaths_deployed & (9223372036854775808ULL >> i)) == 0ULL) 
      #line 378 
      goto __Cont;
    #line 380 
    vxge_hw_vpath_intr_enable((struct __vxge_hw_vpath_handle *)hldev->virtual_paths[i].vpath_handles.next);
    #line 375 
    __Cont: 
            #line 375 
    i ++;
  }
  #line 384 
  if ((unsigned int)hldev->config.intr_mode == 0U) {
    #line 385 
    val64 = hldev->tim_int_mask0[0] | hldev->tim_int_mask0[1];
    #line 388 
    if (val64 != 0ULL) {
      #line 389 
      writeq(val64,(void *)(& (hldev->common_reg)->tim_int_status0));
      #line 391 
      writeq(~ val64,(void *)(& (hldev->common_reg)->tim_int_mask0));
    }
    #line 394 
    val32 = hldev->tim_int_mask1[0] | hldev->tim_int_mask1[1];
    #line 397 
    if (val32 != 0U) {
      #line 398 
      __vxge_hw_pio_mem_write32_upper(val32,(void *)(& (hldev->common_reg)->tim_int_status1));
      #line 401 
      __vxge_hw_pio_mem_write32_upper(~ val32,(void *)(& (hldev->common_reg)->tim_int_mask1));
    }
  }
  #line 406 
  val64 = readq((void *)(& (hldev->common_reg)->titan_general_int_status));
  #line 408 
  vxge_hw_device_unmask_all(hldev);
  #line 409 
  return;
}

#line 421  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.c"
void vxge_hw_device_intr_disable(struct __vxge_hw_device *hldev)
{
  #line 423 
  u32 i;
  #line 425 
  vxge_hw_device_mask_all(hldev);
  #line 428 
  writeq(18446744073709551615ULL,(void *)(& (hldev->common_reg)->tim_int_mask0));
  #line 429 
  __vxge_hw_pio_mem_write32_upper(4294967295U,(void *)(& (hldev->common_reg)->tim_int_mask1));
  #line 432 
  i = 0U;
  #line 432 
  while (i <= 16U) {
    #line 434 
    if ((hldev->vpaths_deployed & (9223372036854775808ULL >> i)) == 0ULL) 
      #line 435 
      goto __Cont;
    #line 437 
    vxge_hw_vpath_intr_disable((struct __vxge_hw_vpath_handle *)hldev->virtual_paths[i].vpath_handles.next);
    #line 432 
    __Cont: 
            #line 432 
    i ++;
  }
  #line 440 
  return;
}

#line 450  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.c"
void vxge_hw_device_mask_all(struct __vxge_hw_device *hldev)
{
  #line 452 
  u64 val64;
  #line 454 
  val64 = 72339069014638592ULL;
  #line 457 
  __vxge_hw_pio_mem_write32_upper((unsigned int)(val64 >> 32),(void *)(& (hldev->common_reg)->titan_mask_all_int));
  #line 459 
  return;
}

#line 469  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.c"
void vxge_hw_device_unmask_all(struct __vxge_hw_device *hldev)
{
  #line 471 
  u64 val64 = 0ULL;
  #line 473 
  if ((unsigned int)hldev->config.intr_mode == 0U) 
                                                   #line 474 
                                                   val64 = 281474976710656ULL;
  #line 476 
  __vxge_hw_pio_mem_write32_upper((unsigned int)(val64 >> 32),(void *)(& (hldev->common_reg)->titan_mask_all_int));
  #line 478 
  return;
}

#line 488  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.c"
void vxge_hw_device_flush_io(struct __vxge_hw_device *hldev)
{
  #line 490 
  u32 val32;
  #line 492 
  val32 = readl((void *)(& (hldev->common_reg)->titan_general_int_status));
  #line 493 
  return;
}

#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.c"
static enum vxge_hw_status __vxge_hw_device_handle_error(struct __vxge_hw_device *hldev, u32 vp_id, enum vxge_hw_event type)
{
  #line 507 
  switch ((unsigned int)type) {
    #line 508 
    case (unsigned int)0: 
                          #line 508 
    ;
    #line 509 
    break;
    #line 510 
    case (unsigned int)1: 
                          #line 510 
    ;
    #line 511 
    case (unsigned int)2: 
                          #line 511 
    ;
    #line 512 
    case (unsigned int)3: 
                          #line 512 
    ;
    #line 513 
    case (unsigned int)4: 
                          #line 513 
    ;
    #line 514 
    goto out;
    #line 515 
    case (unsigned int)5: 
                          #line 515 
    ;
    #line 516 
    goto out;
    #line 517 
    case (unsigned int)6: 
                          #line 517 
    ;
    #line 518 
    case (unsigned int)7: 
                          #line 518 
    ;
    #line 519 
    goto out;
    #line 520 
    case (unsigned int)8: 
                          #line 520 
    ;
    #line 521 
    case (unsigned int)9: 
                          #line 521 
    ;
    #line 522 
    case (unsigned int)10: 
                           #line 522 
    ;
    #line 523 
    case (unsigned int)11: 
                           #line 523 
    ;
    #line 524 
    break;
    #line 525 
    case (unsigned int)12: 
                           #line 525 
    ;
    #line 526 
    case (unsigned int)13: 
                           #line 526 
    ;
    #line 527 
    goto out;
    #line 528 
    case (unsigned int)14: 
                           #line 528 
    ;
    #line 529 
    break;
    #line 530 
    default: 
             #line 530 
    ;
    #line 532 
    goto out;
  }
  #line 536 
  if ((hldev->uld_callbacks)->crit_err != (void (*)(struct __vxge_hw_device *, enum vxge_hw_event , u64 ))0) 
    #line 537 
    (*((hldev->uld_callbacks)->crit_err))(hldev,type,(unsigned long long)vp_id);
  #line 539 
  out: 
       #line 539 
  ;
  #line 541 
  return VXGE_HW_OK;
}

#line 552  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.c"
static enum vxge_hw_status __vxge_hw_device_handle_link_down_ind(struct __vxge_hw_device *hldev)
{
  #line 557 
  if (hldev->link_state == (unsigned int)VXGE_HW_LINK_DOWN) 
                                                            #line 558 
                                                            goto exit;
  #line 560 
  hldev->link_state = VXGE_HW_LINK_DOWN;
  #line 563 
  if ((hldev->uld_callbacks)->link_down != (void (*)(struct __vxge_hw_device *))0) 
    #line 564 
    (*((hldev->uld_callbacks)->link_down))(hldev);
  #line 565 
  exit: 
        #line 565 
  ;
  #line 566 
  return VXGE_HW_OK;
}

#line 577  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.c"
static enum vxge_hw_status __vxge_hw_device_handle_link_up_ind(struct __vxge_hw_device *hldev)
{
  #line 582 
  if (hldev->link_state == (unsigned int)VXGE_HW_LINK_UP) 
                                                          #line 583 
                                                          goto exit;
  #line 585 
  hldev->link_state = VXGE_HW_LINK_UP;
  #line 588 
  if ((hldev->uld_callbacks)->link_up != (void (*)(struct __vxge_hw_device *))0) 
    #line 589 
    (*((hldev->uld_callbacks)->link_up))(hldev);
  #line 590 
  exit: 
        #line 590 
  ;
  #line 591 
  return VXGE_HW_OK;
}

#line 603  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.c"
static enum vxge_hw_status __vxge_hw_vpath_alarm_process(struct __vxge_hw_virtualpath *vpath, u32 skip_alarms)
{
  #line 866 
  int tmp;
  #line 606 
  u64 val64;
  #line 607 
  u64 alarm_status;
  #line 608 
  u64 pic_status;
  #line 611 
  u64 mask64;
  #line 612 
  struct vxge_hw_vpath_stats_sw_info *sw_stats;
  #line 613 
  struct vxge_hw_vpath_reg *vp_reg;
  #line 867 
  int tmp_0;
  #line 609 
  struct __vxge_hw_device *hldev = (struct __vxge_hw_device *)0;
  #line 610 
  enum vxge_hw_event alarm_event = VXGE_HW_EVENT_UNKNOWN;
  #line 615 
  if (vpath == (struct __vxge_hw_virtualpath *)0) {
    #line 616 
    alarm_event = alarm_event;
    #line 618 
    goto out2;
  }
  #line 621 
  hldev = vpath->hldev;
  #line 622 
  vp_reg = vpath->vp_reg;
  #line 623 
  alarm_status = readq((void *)(& vp_reg->vpath_general_int_status));
  #line 625 
  if (alarm_status == 18446744073709551615ULL) {
    #line 626 
    if ((unsigned int)VXGE_HW_EVENT_SLOT_FREEZE > alarm_event) 
                                                               #line 626 
                                                               alarm_event = VXGE_HW_EVENT_SLOT_FREEZE; else 
                                                                    #line 626 
                                                                    alarm_event = alarm_event;
    #line 628 
    goto out;
  }
  #line 631 
  sw_stats = vpath->sw_stats;
  #line 633 
  if ((alarm_status & 17221465907902021631ULL) != 0ULL) {
    #line 638 
    (sw_stats->error_stats.unknown_alarms) ++;
    #line 640 
    alarm_event = alarm_event;
    #line 642 
    goto out;
  }
  #line 645 
  if ((alarm_status & 17592186044416ULL) != 0ULL) {
    #line 647 
    val64 = readq((void *)(& vp_reg->xgmac_vp_int_status));
    #line 649 
    if ((val64 & 1152921504606846976ULL) != 0ULL) {
      #line 652 
      val64 = readq((void *)(& vp_reg->asic_ntwk_vp_err_reg));
      #line 654 
      if ((val64 & 1152921504606846976ULL) != 0ULL && (val64 & 72057594037927936ULL) == 0ULL || (val64 & 4503599627370496ULL) != 0ULL && (val64 & 281474976710656ULL) == 0ULL) {
        #line 663 
        (sw_stats->error_stats.network_sustained_fault) ++;
        #line 665 
        writeq(1152921504606846976ULL,(void *)(& vp_reg->asic_ntwk_vp_err_mask));
        #line 669 
        __vxge_hw_device_handle_link_down_ind(hldev);
        #line 670 
        if ((unsigned int)VXGE_HW_EVENT_LINK_DOWN > alarm_event) 
                                                                 #line 670 
                                                                 alarm_event = VXGE_HW_EVENT_LINK_DOWN; else 
                                                                    #line 670 
                                                                    alarm_event = alarm_event;
      }
      #line 674 
      if ((val64 & 72057594037927936ULL) != 0ULL && (val64 & 1152921504606846976ULL) == 0ULL || (val64 & 281474976710656ULL) != 0ULL && (val64 & 4503599627370496ULL) == 0ULL) {
        #line 684 
        (sw_stats->error_stats.network_sustained_ok) ++;
        #line 686 
        writeq(72057594037927936ULL,(void *)(& vp_reg->asic_ntwk_vp_err_mask));
        #line 690 
        __vxge_hw_device_handle_link_up_ind(hldev);
        #line 691 
        if ((unsigned int)VXGE_HW_EVENT_LINK_UP > alarm_event) 
                                                               #line 691 
                                                               alarm_event = VXGE_HW_EVENT_LINK_UP; else 
                                                                    #line 691 
                                                                    alarm_event = alarm_event;
      }
      #line 695 
      writeq(18446744073709551615ULL,(void *)(& vp_reg->asic_ntwk_vp_err_reg));
      #line 698 
      if ((unsigned int)VXGE_HW_EVENT_ALARM_CLEARED > alarm_event) 
                                                                   #line 698 
                                                                   alarm_event = VXGE_HW_EVENT_ALARM_CLEARED; else 
                                                                    #line 698 
                                                                    alarm_event = alarm_event;
      #line 701 
      if (skip_alarms != 0U) 
                             #line 702 
                             return VXGE_HW_OK;
    }
  }
  #line 706 
  if ((alarm_status & 1152921504606846976ULL) != 0ULL) {
    #line 708 
    pic_status = readq((void *)(& vp_reg->vpath_ppif_int_status));
    #line 710 
    if ((pic_status & 72057594037927936ULL) != 0ULL) {
      #line 713 
      val64 = readq((void *)(& vp_reg->general_errors_reg));
      #line 714 
      mask64 = readq((void *)(& vp_reg->general_errors_mask));
      #line 716 
      if (((~ mask64 & val64) & 4294967296ULL) != 0ULL) {
        #line 719 
        (sw_stats->error_stats.ini_serr_det) ++;
        #line 721 
        if ((unsigned int)VXGE_HW_EVENT_SERR > alarm_event) 
                                                            #line 721 
                                                            alarm_event = VXGE_HW_EVENT_SERR; else 
                                                                    #line 721 
                                                                    alarm_event = alarm_event;
      }
      #line 725 
      if (((~ mask64 & val64) & 1152921504606846976ULL) != 0ULL) {
        #line 728 
        (sw_stats->error_stats.dblgen_fifo0_overflow) ++;
        #line 730 
        if ((unsigned int)VXGE_HW_EVENT_FIFO_ERR > alarm_event) 
                                                                #line 730 
                                                                alarm_event = VXGE_HW_EVENT_FIFO_ERR; else 
                                                                    #line 730 
                                                                    alarm_event = alarm_event;
      }
      #line 734 
      if (((~ mask64 & val64) & 281474976710656ULL) != 0ULL) 
                                                             #line 737 
                                                             (sw_stats->error_stats.statsb_pif_chain_error) ++;
      #line 739 
      if (((~ mask64 & val64) & 17592186044416ULL) != 0ULL) 
                                                            #line 742 
                                                            (sw_stats->error_stats.statsb_drop_timeout) ++;
      #line 744 
      if (((~ mask64 & val64) & 68719476736ULL) != 0ULL) 
                                                         #line 747 
                                                         (sw_stats->error_stats.target_illegal_access) ++;
      #line 749 
      if (skip_alarms == 0U) {
        #line 750 
        writeq(18446744073709551615ULL,(void *)(& vp_reg->general_errors_reg));
        #line 752 
        if ((unsigned int)VXGE_HW_EVENT_ALARM_CLEARED > alarm_event) 
          #line 752 
          alarm_event = VXGE_HW_EVENT_ALARM_CLEARED; else 
                                                          #line 752 
                                                          alarm_event = alarm_event;
      }
    }
    #line 758 
    if ((pic_status & 1152921504606846976ULL) != 0ULL) {
      #line 761 
      val64 = readq((void *)(& vp_reg->kdfcctl_errors_reg));
      #line 762 
      mask64 = readq((void *)(& vp_reg->kdfcctl_errors_mask));
      #line 764 
      if (((~ mask64 & val64) & 1152921504606846976ULL) != 0ULL) {
        #line 767 
        (sw_stats->error_stats.kdfcctl_fifo0_overwrite) ++;
        #line 769 
        if ((unsigned int)VXGE_HW_EVENT_FIFO_ERR > alarm_event) 
                                                                #line 769 
                                                                alarm_event = VXGE_HW_EVENT_FIFO_ERR; else 
                                                                    #line 769 
                                                                    alarm_event = alarm_event;
      }
      #line 774 
      if (((~ mask64 & val64) & 281474976710656ULL) != 0ULL) {
        #line 777 
        (sw_stats->error_stats.kdfcctl_fifo0_poison) ++;
        #line 779 
        if ((unsigned int)VXGE_HW_EVENT_FIFO_ERR > alarm_event) 
                                                                #line 779 
                                                                alarm_event = VXGE_HW_EVENT_FIFO_ERR; else 
                                                                    #line 779 
                                                                    alarm_event = alarm_event;
      }
      #line 784 
      if (((~ mask64 & val64) & 4294967296ULL) != 0ULL) {
        #line 787 
        (sw_stats->error_stats.kdfcctl_fifo0_dma_error) ++;
        #line 789 
        if ((unsigned int)VXGE_HW_EVENT_FIFO_ERR > alarm_event) 
                                                                #line 789 
                                                                alarm_event = VXGE_HW_EVENT_FIFO_ERR; else 
                                                                    #line 789 
                                                                    alarm_event = alarm_event;
      }
      #line 794 
      if (skip_alarms == 0U) {
        #line 795 
        writeq(18446744073709551615ULL,(void *)(& vp_reg->kdfcctl_errors_reg));
        #line 797 
        if ((unsigned int)VXGE_HW_EVENT_ALARM_CLEARED > alarm_event) 
          #line 797 
          alarm_event = VXGE_HW_EVENT_ALARM_CLEARED; else 
                                                          #line 797 
                                                          alarm_event = alarm_event;
      }
    }
  }
  #line 805 
  if ((alarm_status & 281474976710656ULL) != 0ULL) {
    #line 807 
    val64 = readq((void *)(& vp_reg->wrdma_alarm_status));
    #line 809 
    if ((val64 & 4611686018427387904ULL) != 0ULL) {
      #line 811 
      val64 = readq((void *)(& vp_reg->prc_alarm_reg));
      #line 812 
      mask64 = readq((void *)(& vp_reg->prc_alarm_mask));
      #line 814 
      if (((~ mask64 & val64) & 9223372036854775808ULL) != 0ULL) 
                                                                 #line 816 
                                                                 (sw_stats->error_stats.prc_ring_bumps) ++;
      #line 818 
      if (((~ mask64 & val64) & 4611686018427387904ULL) != 0ULL) {
        #line 820 
        (sw_stats->error_stats.prc_rxdcm_sc_err) ++;
        #line 822 
        if ((unsigned int)VXGE_HW_EVENT_VPATH_ERR > alarm_event) 
                                                                 #line 822 
                                                                 alarm_event = VXGE_HW_EVENT_VPATH_ERR; else 
                                                                    #line 822 
                                                                    alarm_event = alarm_event;
      }
      #line 827 
      if (((~ mask64 & val64) & 2305843009213693952ULL) != 0ULL) {
        #line 829 
        (sw_stats->error_stats.prc_rxdcm_sc_abort) ++;
        #line 831 
        if ((unsigned int)VXGE_HW_EVENT_VPATH_ERR > alarm_event) 
                                                                 #line 831 
                                                                 alarm_event = VXGE_HW_EVENT_VPATH_ERR; else 
                                                                    #line 831 
                                                                    alarm_event = alarm_event;
      }
      #line 836 
      if (((~ mask64 & val64) & 1152921504606846976ULL) != 0ULL) {
        #line 838 
        (sw_stats->error_stats.prc_quanta_size_err) ++;
        #line 840 
        if ((unsigned int)VXGE_HW_EVENT_VPATH_ERR > alarm_event) 
                                                                 #line 840 
                                                                 alarm_event = VXGE_HW_EVENT_VPATH_ERR; else 
                                                                    #line 840 
                                                                    alarm_event = alarm_event;
      }
      #line 845 
      if (skip_alarms == 0U) {
        #line 846 
        writeq(18446744073709551615ULL,(void *)(& vp_reg->prc_alarm_reg));
        #line 848 
        if ((unsigned int)VXGE_HW_EVENT_ALARM_CLEARED > alarm_event) 
          #line 848 
          alarm_event = VXGE_HW_EVENT_ALARM_CLEARED; else 
                                                          #line 848 
                                                          alarm_event = alarm_event;
      }
    }
  }
  #line 854 
  out: 
       #line 854 
  ;
  #line 855 
  (hldev->stats.sw_dev_err_stats.vpath_alarms) ++;
  #line 856 
  out2: 
        #line 856 
  ;
  #line 857 
  if (alarm_event == (unsigned int)VXGE_HW_EVENT_ALARM_CLEARED || alarm_event == (unsigned int)VXGE_HW_EVENT_UNKNOWN) 
    #line 859 
    return VXGE_HW_OK;
  #line 861 
  __vxge_hw_device_handle_error(hldev,vpath->vp_id,alarm_event);
  #line 863 
  if (alarm_event == (unsigned int)VXGE_HW_EVENT_SERR) 
                                                       #line 864 
                                                       return VXGE_HW_ERR_CRITICAL;
  #line 867 
  if (alarm_event != (unsigned int)VXGE_HW_EVENT_SLOT_FREEZE) {
    #line 866 
    if (alarm_event == (unsigned int)VXGE_HW_EVENT_FIFO_ERR) 
                                                             #line 866 
                                                             tmp = VXGE_HW_ERR_FIFO; else 
                                                                    #line 866 
                                                                    tmp = VXGE_HW_ERR_VPATH;
    #line 867 
    tmp_0 = tmp;
  }
  else 
       #line 867 
       tmp_0 = VXGE_HW_ERR_SLOT_FREEZE;
  #line 867 
  return tmp_0;
}

#line 891  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.c"
enum vxge_hw_status vxge_hw_device_begin_irq(struct __vxge_hw_device *hldev, u32 skip_alarms, u64 *reason)
{
  #line 894 
  u32 i;
  #line 895 
  u64 val64;
  #line 896 
  u64 adapter_status;
  #line 897 
  u64 vpath_mask;
  #line 898 
  enum vxge_hw_status ret = 0;
  #line 900 
  val64 = readq((void *)(& (hldev->common_reg)->titan_general_int_status));
  #line 902 
  if ((long)(val64 == 0ULL) != 0L) {
    #line 904 
    *reason = 0ULL;
    #line 905 
    ret = VXGE_HW_ERR_WRONG_IRQ;
    #line 906 
    goto exit;
  }
  #line 909 
  if ((long)(val64 == 18446744073709551615ULL) != 0L) {
    #line 911 
    adapter_status = readq((void *)(& (hldev->common_reg)->adapter_status));
    #line 913 
    if (adapter_status == 18446744073709551615ULL) {
      #line 915 
      __vxge_hw_device_handle_error(hldev,4294967295U,(enum vxge_hw_event)VXGE_HW_EVENT_SLOT_FREEZE);
      #line 917 
      *reason = 0ULL;
      #line 918 
      ret = VXGE_HW_ERR_SLOT_FREEZE;
      #line 919 
      goto exit;
    }
  }
  #line 923 
  (hldev->stats.sw_dev_info_stats.total_intr_cnt) ++;
  #line 925 
  *reason = val64;
  #line 927 
  vpath_mask = hldev->vpaths_deployed >> 47;
  #line 930 
  if (((vpath_mask << 44) & val64) != 0ULL) {
    #line 932 
    (hldev->stats.sw_dev_info_stats.traffic_intr_cnt) ++;
    #line 934 
    return VXGE_HW_OK;
  }
  #line 937 
  (hldev->stats.sw_dev_info_stats.not_traffic_intr_cnt) ++;
  #line 939 
  if ((long)((val64 & 2305843009213693952ULL) != 0ULL) != 0L) {
    #line 942 
    enum vxge_hw_status error_level = 0;
    #line 944 
    (hldev->stats.sw_dev_err_stats.vpath_alarms) ++;
    #line 946 
    i = 0U;
    #line 946 
    while (i <= 16U) {
      #line 948 
      if ((hldev->vpaths_deployed & (9223372036854775808ULL >> i)) == 0ULL) 
        #line 949 
        goto __Cont;
      #line 951 
      ret = __vxge_hw_vpath_alarm_process(& hldev->virtual_paths[i],skip_alarms);
      #line 954 
      if (ret > error_level) 
                             #line 954 
                             error_level = ret; else 
                                                     #line 954 
                                                     error_level = error_level;
      #line 956 
      if ((long)((unsigned int)ret + 4294967075U <= 1U) != 0L) 
                                                               #line 958 
                                                               break;
      #line 946 
      __Cont: 
              #line 946 
      i ++;
    }
    #line 961 
    ret = error_level;
  }
  #line 963 
  exit: 
        #line 963 
  ;
  #line 964 
  return ret;
}

#line 977  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.c"
void vxge_hw_device_clear_tx_rx(struct __vxge_hw_device *hldev)
{
  #line 980 
  if (hldev->tim_int_mask0[0] != 0ULL || hldev->tim_int_mask0[1] != 0ULL) 
    #line 982 
    writeq(hldev->tim_int_mask0[0] | hldev->tim_int_mask0[1],(void *)(& (hldev->common_reg)->tim_int_status0));
  #line 987 
  if (hldev->tim_int_mask1[0] != 0U || hldev->tim_int_mask1[1] != 0U) 
    #line 989 
    __vxge_hw_pio_mem_write32_upper(hldev->tim_int_mask1[0] | hldev->tim_int_mask1[1],(void *)(& (hldev->common_reg)->tim_int_status1));
  #line 993 
  return;
}

#line 1006  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.c"
static enum vxge_hw_status vxge_hw_channel_dtr_alloc(struct __vxge_hw_channel *channel, void **dtrh)
{
  #line 1008 
  if (channel->reserve_ptr != channel->reserve_top) {
    #line 1009 
    _alloc_after_swap: 
                       #line 1009 
    ;
    #line 1010 
    (channel->reserve_ptr) --;
    #line 1010 
    *dtrh = *(channel->reserve_arr + (unsigned long)channel->reserve_ptr);
    #line 1012 
    return VXGE_HW_OK;
  }
  #line 1021 
  if (channel->length != channel->free_ptr) {
    {
      #line 1022 
      void **__tmp = channel->reserve_arr;
      #line 1022 
      channel->reserve_arr = channel->free_arr;
      #line 1022 
      channel->free_arr = __tmp;
    }
    #line 1023 
    channel->reserve_ptr = channel->length;
    #line 1024 
    channel->reserve_top = channel->free_ptr;
    #line 1025 
    channel->free_ptr = channel->length;
    #line 1027 
    ((channel->stats)->reserve_free_swaps_cnt) ++;
    #line 1029 
    goto _alloc_after_swap;
  }
  #line 1032 
  ((channel->stats)->full_cnt) ++;
  #line 1034 
  *dtrh = (void *)0;
  #line 1035 
  return VXGE_HW_INF_OUT_OF_DESCRIPTORS;
}

#line 1047  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.c"
static void vxge_hw_channel_dtr_post(struct __vxge_hw_channel *channel, void *dtrh)
{
  #line 1051 
  u32 tmp;
  #line 1051 
  tmp = channel->post_index;
  #line 1051 
  (channel->post_index) ++;
  #line 1051 
  *(channel->work_arr + (unsigned long)tmp) = dtrh;
  #line 1054 
  if (channel->post_index == channel->length) 
                                              #line 1055 
                                              channel->post_index = 0U;
  #line 1056 
  return;
}

#line 1067  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.c"
void vxge_hw_channel_dtr_try_complete(struct __vxge_hw_channel *channel, void **dtrh)
{
  #line 1071 
  *dtrh = *(channel->work_arr + (unsigned long)channel->compl_index);
  #line 1072 
  __builtin_prefetch((void const *)*dtrh);
  #line 1073 
  return;
}

#line 1082  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.c"
void vxge_hw_channel_dtr_complete(struct __vxge_hw_channel *channel)
{
  #line 1084 
  *(channel->work_arr + (unsigned long)channel->compl_index) = (void *)0;
  #line 1087 
  (channel->compl_index) ++;
  #line 1087 
  ;
  #line 1087 
  if (channel->compl_index == channel->length) 
                                               #line 1088 
                                               channel->compl_index = 0U;
  #line 1090 
  ((channel->stats)->total_compl_cnt) ++;
  #line 1091 
  return;
}

#line 1101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.c"
void vxge_hw_channel_dtr_free(struct __vxge_hw_channel *channel, void *dtrh)
{
  #line 1103 
  (channel->free_ptr) --;
  #line 1103 
  *(channel->free_arr + (unsigned long)channel->free_ptr) = dtrh;
  #line 1104 
  return;
}

#line 1113  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.c"
int vxge_hw_channel_dtr_count(struct __vxge_hw_channel *channel)
{
  #line 1115 
  return (int)((channel->reserve_ptr - channel->reserve_top) + (channel->length - channel->free_ptr));
}

#line 1133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.c"
enum vxge_hw_status vxge_hw_ring_rxd_reserve(struct __vxge_hw_ring *ring, void **rxdh)
{
  #line 1136 
  enum vxge_hw_status status;
  #line 1137 
  struct __vxge_hw_channel *channel;
  #line 1139 
  channel = & ring->channel;
  #line 1141 
  status = vxge_hw_channel_dtr_alloc(channel,rxdh);
  #line 1143 
  if (status == VXGE_HW_OK) {
    #line 1144 
    struct vxge_hw_ring_rxd_1 *rxdp = (struct vxge_hw_ring_rxd_1 *)*rxdh;
    #line 1147 
    rxdp->control_1 = 0ULL;
    #line 1147 
    rxdp->control_0 = 0ULL;
  }
  #line 1150 
  return status;
}

#line 1177  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.c"
void vxge_hw_ring_rxd_free(struct __vxge_hw_ring *ring, void *rxdh)
{
  #line 1179 
  struct __vxge_hw_channel *channel;
  #line 1181 
  channel = & ring->channel;
  #line 1183 
  vxge_hw_channel_dtr_free(channel,rxdh);
  #line 1184 
  return;
}

#line 1194  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.c"
void vxge_hw_ring_rxd_pre_post(struct __vxge_hw_ring *ring, void *rxdh)
{
  #line 1196 
  struct __vxge_hw_channel *channel;
  #line 1198 
  channel = & ring->channel;
  #line 1200 
  vxge_hw_channel_dtr_post(channel,rxdh);
  #line 1201 
  return;
}

#line 1210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.c"
void vxge_hw_ring_rxd_post_post(struct __vxge_hw_ring *ring, void *rxdh)
{
  #line 1212 
  struct vxge_hw_ring_rxd_1 *rxdp = (struct vxge_hw_ring_rxd_1 *)rxdh;
  #line 1214 
  rxdp->control_0 = 72057594037927936ULL;
  #line 1216 
  if ((ring->stats)->common_stats.usage_cnt != 0U) 
                                                   #line 1217 
                                                   ((ring->stats)->common_stats.usage_cnt) --;
  #line 1218 
  return;
}

#line 1230  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.c"
void vxge_hw_ring_rxd_post(struct __vxge_hw_ring *ring, void *rxdh)
{
  #line 1233 
  struct __vxge_hw_channel *channel;
  #line 1232 
  struct vxge_hw_ring_rxd_1 *rxdp = (struct vxge_hw_ring_rxd_1 *)rxdh;
  #line 1235 
  channel = & ring->channel;
  #line 1236 
  ldv_inline_asm();
  #line 1238 
  rxdp->control_0 = 72057594037927936ULL;
  #line 1240 
  vxge_hw_channel_dtr_post(channel,rxdh);
  #line 1242 
  if ((ring->stats)->common_stats.usage_cnt != 0U) 
                                                   #line 1243 
                                                   ((ring->stats)->common_stats.usage_cnt) --;
  #line 1244 
  return;
}

#line 1253  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.c"
void vxge_hw_ring_rxd_post_post_wmb(struct __vxge_hw_ring *ring, void *rxdh)
{
  #line 1255 
  ldv_inline_asm();
  #line 1256 
  vxge_hw_ring_rxd_post_post(ring,rxdh);
  #line 1257 
  return;
}

#line 1292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.c"
enum vxge_hw_status vxge_hw_ring_rxd_next_completed(struct __vxge_hw_ring *ring, void **rxdh, u8 *t_code)
{
  #line 1295 
  struct __vxge_hw_channel *channel;
  #line 1296 
  struct vxge_hw_ring_rxd_1 *rxdp;
  #line 1298 
  u64 control_0;
  #line 1298 
  u64 own;
  #line 1297 
  enum vxge_hw_status status = 0;
  #line 1300 
  channel = & ring->channel;
  #line 1302 
  vxge_hw_channel_dtr_try_complete(channel,rxdh);
  #line 1304 
  rxdp = (struct vxge_hw_ring_rxd_1 *)*rxdh;
  #line 1305 
  if (rxdp == (struct vxge_hw_ring_rxd_1 *)0) {
    #line 1306 
    status = VXGE_HW_INF_NO_MORE_COMPLETED_DESCRIPTORS;
    #line 1307 
    goto exit;
  }
  #line 1310 
  control_0 = rxdp->control_0;
  #line 1311 
  own = control_0 & 72057594037927936ULL;
  #line 1312 
  *t_code = (unsigned char)((unsigned int)((unsigned char)(control_0 >> 48)) & 15U);
  #line 1315 
  if (own == 0ULL || (unsigned int)*t_code == 12U) {
    #line 1320 
    (ring->cmpl_cnt) ++;
    #line 1321 
    vxge_hw_channel_dtr_complete(channel);
    #line 1325 
    ((ring->stats)->common_stats.usage_cnt) ++;
    #line 1326 
    if ((ring->stats)->common_stats.usage_max < (ring->stats)->common_stats.usage_cnt) 
      #line 1328 
      (ring->stats)->common_stats.usage_max = (ring->stats)->common_stats.usage_cnt;
    #line 1331 
    status = VXGE_HW_OK;
    #line 1332 
    goto exit;
  }
  #line 1337 
  *rxdh = (void *)0;
  #line 1338 
  status = VXGE_HW_INF_NO_MORE_COMPLETED_DESCRIPTORS;
  #line 1339 
  exit: 
        #line 1339 
  ;
  #line 1340 
  return status;
}

#line 1357  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.c"
enum vxge_hw_status vxge_hw_ring_handle_tcode(struct __vxge_hw_ring *ring, void *rxdh, u8 t_code)
{
  #line 1360 
  enum vxge_hw_status status = 0;
  #line 1367 
  if ((unsigned int)t_code == 0U || (unsigned int)t_code == 5U) {
    #line 1369 
    status = VXGE_HW_OK;
    #line 1370 
    goto exit;
  }
  #line 1373 
  if ((unsigned int)t_code > 15U) {
    #line 1374 
    status = VXGE_HW_ERR_INVALID_TCODE;
    #line 1375 
    goto exit;
  }
  #line 1378 
  ((ring->stats)->rxd_t_code_err_cnt[(int)t_code]) ++;
  #line 1379 
  exit: 
        #line 1379 
  ;
  #line 1380 
  return status;
}

#line 1394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.c"
static void __vxge_hw_non_offload_db_post(struct __vxge_hw_fifo *fifo, u64 txdl_ptr, u32 num_txds, u32 no_snoop)
{
  #line 1397 
  writeq(((unsigned long long)num_txds << 24) | ((unsigned long long)no_snoop & 255ULL),(void *)(& (fifo->nofl_db)->control_0));
  #line 1402 
  writeq(txdl_ptr,(void *)(& (fifo->nofl_db)->txdl_ptr));
  #line 1403 
  return;
}

#line 1410  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.c"
u32 vxge_hw_fifo_free_txdl_count_get(struct __vxge_hw_fifo *fifoh)
{
  #line 1412 
  return (unsigned int)vxge_hw_channel_dtr_count(& fifoh->channel);
}

#line 1435  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.c"
enum vxge_hw_status vxge_hw_fifo_txdl_reserve(struct __vxge_hw_fifo *fifo, void **txdlh, void **txdl_priv)
{
  #line 1439 
  struct __vxge_hw_channel *channel;
  #line 1440 
  enum vxge_hw_status status;
  #line 1441 
  int i;
  #line 1443 
  channel = & fifo->channel;
  #line 1445 
  status = vxge_hw_channel_dtr_alloc(channel,txdlh);
  #line 1447 
  if (status == VXGE_HW_OK) {
    #line 1450 
    struct __vxge_hw_fifo_txdl_priv *priv;
    #line 1448 
    struct vxge_hw_fifo_txd *txdp = (struct vxge_hw_fifo_txd *)*txdlh;
    #line 1452 
    priv = __vxge_hw_fifo_txdl_priv(fifo,txdp);
    #line 1455 
    priv->align_dma_offset = 0L;
    #line 1456 
    priv->align_vaddr_start = priv->align_vaddr;
    #line 1457 
    priv->align_used_frags = 0U;
    #line 1458 
    priv->frags = 0U;
    #line 1459 
    priv->alloc_frags = (fifo->config)->max_frags;
    #line 1460 
    priv->next_txdl_priv = (struct __vxge_hw_fifo_txdl_priv *)0;
    #line 1462 
    *txdl_priv = (void *)txdp->host_control;
    #line 1464 
    i = 0;
    #line 1464 
    while ((fifo->config)->max_frags > (unsigned int)i) {
      {
        #line 1465 
        txdp = (struct vxge_hw_fifo_txd *)*txdlh + (unsigned long)i;
        #line 1466 
        txdp->control_1 = 0ULL;
        #line 1466 
        txdp->control_0 = 0ULL;
      }
      #line 1464 
      i ++;
    }
  }
  #line 1470 
  return status;
}

#line 1490  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.c"
void vxge_hw_fifo_txdl_buffer_set(struct __vxge_hw_fifo *fifo, void *txdlh, u32 frag_idx, dma_addr_t dma_pointer, u32 size)
{
  #line 1494 
  struct __vxge_hw_fifo_txdl_priv *txdl_priv;
  #line 1495 
  struct vxge_hw_fifo_txd *txdp;
  #line 1495 
  struct vxge_hw_fifo_txd *txdp_last;
  #line 1497 
  txdl_priv = __vxge_hw_fifo_txdl_priv(fifo,(struct vxge_hw_fifo_txd *)txdlh);
  #line 1498 
  txdp = (struct vxge_hw_fifo_txd *)txdlh + (unsigned long)txdl_priv->frags;
  #line 1500 
  if (frag_idx != 0U) {
    #line 1501 
    txdp->control_1 = 0ULL;
    #line 1501 
    txdp->control_0 = 0ULL;
  }
  else {
    #line 1503 
    txdp->control_0 |= 2199023255552ULL;
    #line 1505 
    txdp->control_1 |= fifo->interrupt_type;
    #line 1506 
    txdp->control_1 |= (unsigned long long)fifo->tx_intr_num << 24;
    #line 1508 
    if (txdl_priv->frags != 0U) {
      #line 1509 
      txdp_last = (struct vxge_hw_fifo_txd *)txdlh + (unsigned long)(txdl_priv->frags + 4294967295U);
      #line 1511 
      txdp_last->control_0 |= 1099511627776ULL;
    }
  }
  #line 1518 
  txdp->buffer_pointer = dma_pointer;
  #line 1519 
  txdp->control_0 |= (unsigned long long)size;
  #line 1520 
  ((fifo->stats)->total_buffers) ++;
  #line 1521 
  (txdl_priv->frags) ++;
  #line 1522 
  return;
}

#line 1536  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.c"
void vxge_hw_fifo_txdl_post(struct __vxge_hw_fifo *fifo, void *txdlh)
{
  #line 1538 
  struct __vxge_hw_fifo_txdl_priv *txdl_priv;
  #line 1539 
  struct vxge_hw_fifo_txd *txdp_last;
  #line 1540 
  struct vxge_hw_fifo_txd *txdp_first;
  #line 1542 
  txdl_priv = __vxge_hw_fifo_txdl_priv(fifo,(struct vxge_hw_fifo_txd *)txdlh);
  #line 1543 
  txdp_first = (struct vxge_hw_fifo_txd *)txdlh;
  #line 1545 
  txdp_last = (struct vxge_hw_fifo_txd *)txdlh + (unsigned long)(txdl_priv->frags + 4294967295U);
  #line 1546 
  txdp_last->control_0 |= 1099511627776ULL;
  #line 1548 
  txdp_first->control_0 |= 72057594037927936ULL;
  #line 1550 
  vxge_hw_channel_dtr_post(& fifo->channel,txdlh);
  #line 1552 
  __vxge_hw_non_offload_db_post(fifo,txdl_priv->dma_addr,txdl_priv->frags + 4294967295U,fifo->no_snoop_bits);
  #line 1557 
  ((fifo->stats)->total_posts) ++;
  #line 1558 
  ((fifo->stats)->common_stats.usage_cnt) ++;
  #line 1559 
  if ((fifo->stats)->common_stats.usage_max < (fifo->stats)->common_stats.usage_cnt) 
    #line 1561 
    (fifo->stats)->common_stats.usage_max = (fifo->stats)->common_stats.usage_cnt;
  #line 1563 
  return;
}

#line 1597  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.c"
enum vxge_hw_status vxge_hw_fifo_txdl_next_completed(struct __vxge_hw_fifo *fifo, void **txdlh, enum vxge_hw_fifo_tcode *t_code)
{
  #line 1601 
  struct __vxge_hw_channel *channel;
  #line 1602 
  struct vxge_hw_fifo_txd *txdp;
  #line 1603 
  enum vxge_hw_status status = 0;
  #line 1605 
  channel = & fifo->channel;
  #line 1607 
  vxge_hw_channel_dtr_try_complete(channel,txdlh);
  #line 1609 
  txdp = (struct vxge_hw_fifo_txd *)*txdlh;
  #line 1610 
  if (txdp == (struct vxge_hw_fifo_txd *)0) {
    #line 1611 
    status = VXGE_HW_INF_NO_MORE_COMPLETED_DESCRIPTORS;
    #line 1612 
    goto exit;
  }
  #line 1616 
  if ((txdp->control_0 & 72057594037927936ULL) == 0ULL) {
    #line 1620 
    vxge_hw_channel_dtr_complete(channel);
    #line 1622 
    *t_code = (enum vxge_hw_fifo_tcode)((unsigned int)((unsigned char)(txdp->control_0 >> 48)) & 15U);
    #line 1624 
    if ((fifo->stats)->common_stats.usage_cnt != 0U) 
                                                     #line 1625 
                                                     ((fifo->stats)->common_stats.usage_cnt) --;
    #line 1627 
    status = VXGE_HW_OK;
    #line 1628 
    goto exit;
  }
  #line 1632 
  *txdlh = (void *)0;
  #line 1633 
  status = VXGE_HW_INF_NO_MORE_COMPLETED_DESCRIPTORS;
  #line 1634 
  exit: 
        #line 1634 
  ;
  #line 1635 
  return status;
}

#line 1652  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.c"
enum vxge_hw_status vxge_hw_fifo_handle_tcode(struct __vxge_hw_fifo *fifo, void *txdlh, enum vxge_hw_fifo_tcode t_code)
{
  #line 1656 
  enum vxge_hw_status status = 0;
  #line 1658 
  if (((unsigned int)t_code & 7U) > 4U) {
    #line 1659 
    status = VXGE_HW_ERR_INVALID_TCODE;
    #line 1660 
    goto exit;
  }
  #line 1663 
  ((fifo->stats)->txd_t_code_err_cnt[(unsigned int)t_code]) ++;
  #line 1664 
  exit: 
        #line 1664 
  ;
  #line 1665 
  return status;
}

#line 1692  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.c"
void vxge_hw_fifo_txdl_free(struct __vxge_hw_fifo *fifo, void *txdlh)
{
  #line 1694 
  struct __vxge_hw_channel *channel;
  #line 1696 
  channel = & fifo->channel;
  #line 1698 
  vxge_hw_channel_dtr_free(channel,txdlh);
  #line 1699 
  return;
}

#line 1717  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.c"
enum vxge_hw_status vxge_hw_vpath_mac_addr_add(struct __vxge_hw_vpath_handle *vp, u8 *macaddr, u8 *macaddr_mask, enum vxge_hw_vpath_mac_addr_add_mode duplicate_mode)
{
  #line 1723 
  u32 i;
  #line 1724 
  u64 data1 = 0ULL;
  #line 1725 
  u64 data2 = 0ULL;
  #line 1726 
  enum vxge_hw_status status = 0;
  #line 1728 
  if (vp == (struct __vxge_hw_vpath_handle *)0) {
    #line 1729 
    status = VXGE_HW_ERR_INVALID_HANDLE;
    #line 1730 
    goto exit;
  }
  #line 1733 
  i = 0U;
  #line 1733 
  while (i <= 5U) {
    #line 1734 
    data1 <<= 8;
    #line 1735 
    data1 = (unsigned long long)*(macaddr + (unsigned long)i) | data1;
    #line 1737 
    data2 <<= 8;
    #line 1738 
    data2 = (unsigned long long)*(macaddr_mask + (unsigned long)i) | data2;
    #line 1733 
    i ++;
  }
  #line 1741 
  switch ((unsigned int)duplicate_mode) {
    #line 1742 
    case (unsigned int)0: 
                          #line 1742 
    ;
    #line 1743 
    i = 0U;
    #line 1744 
    break;
    #line 1745 
    case (unsigned int)1: 
                          #line 1745 
    ;
    #line 1746 
    i = 1U;
    #line 1747 
    break;
    #line 1748 
    case (unsigned int)2: 
                          #line 1748 
    ;
    #line 1749 
    i = 2U;
    #line 1750 
    break;
    #line 1751 
    default: 
             #line 1751 
    ;
    #line 1752 
    i = 0U;
    #line 1753 
    break;
  }
  #line 1756 
  status = __vxge_hw_vpath_rts_table_set(vp,0U,0U,0U,data1 << 16,(data2 << 16) | (unsigned long long)i);
  #line 1763 
  exit: 
        #line 1763 
  ;
  #line 1764 
  return status;
}

#line 1780  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.c"
enum vxge_hw_status vxge_hw_vpath_mac_addr_get(struct __vxge_hw_vpath_handle *vp, u8 *macaddr, u8 *macaddr_mask)
{
  #line 1785 
  u32 i;
  #line 1786 
  u64 data1 = 0ULL;
  #line 1787 
  u64 data2 = 0ULL;
  #line 1788 
  enum vxge_hw_status status = 0;
  #line 1790 
  if (vp == (struct __vxge_hw_vpath_handle *)0) {
    #line 1791 
    status = VXGE_HW_ERR_INVALID_HANDLE;
    #line 1792 
    goto exit;
  }
  #line 1795 
  status = __vxge_hw_vpath_rts_table_get(vp,2U,0U,0U,& data1,& data2);
  #line 1800 
  if (status != VXGE_HW_OK) 
                            #line 1801 
                            goto exit;
  #line 1803 
  data1 >>= 16;
  #line 1805 
  data2 >>= 16;
  #line 1807 
  i = 6U;
  #line 1807 
  while (i != 0U) {
    #line 1808 
    *(macaddr + (unsigned long)(i + 4294967295U)) = (unsigned char)data1;
    #line 1809 
    data1 >>= 8;
    #line 1811 
    *(macaddr_mask + (unsigned long)(i + 4294967295U)) = (unsigned char)data2;
    #line 1812 
    data2 >>= 8;
    #line 1807 
    i --;
  }
  #line 1814 
  exit: 
        #line 1814 
  ;
  #line 1815 
  return status;
}

#line 1832  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.c"
enum vxge_hw_status vxge_hw_vpath_mac_addr_get_next(struct __vxge_hw_vpath_handle *vp, u8 *macaddr, u8 *macaddr_mask)
{
  #line 1837 
  u32 i;
  #line 1838 
  u64 data1 = 0ULL;
  #line 1839 
  u64 data2 = 0ULL;
  #line 1840 
  enum vxge_hw_status status = 0;
  #line 1842 
  if (vp == (struct __vxge_hw_vpath_handle *)0) {
    #line 1843 
    status = VXGE_HW_ERR_INVALID_HANDLE;
    #line 1844 
    goto exit;
  }
  #line 1847 
  status = __vxge_hw_vpath_rts_table_get(vp,3U,0U,0U,& data1,& data2);
  #line 1852 
  if (status != VXGE_HW_OK) 
                            #line 1853 
                            goto exit;
  #line 1855 
  data1 >>= 16;
  #line 1857 
  data2 >>= 16;
  #line 1859 
  i = 6U;
  #line 1859 
  while (i != 0U) {
    #line 1860 
    *(macaddr + (unsigned long)(i + 4294967295U)) = (unsigned char)data1;
    #line 1861 
    data1 >>= 8;
    #line 1863 
    *(macaddr_mask + (unsigned long)(i + 4294967295U)) = (unsigned char)data2;
    #line 1864 
    data2 >>= 8;
    #line 1859 
    i --;
  }
  #line 1867 
  exit: 
        #line 1867 
  ;
  #line 1868 
  return status;
}

#line 1885  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.c"
enum vxge_hw_status vxge_hw_vpath_mac_addr_delete(struct __vxge_hw_vpath_handle *vp, u8 *macaddr, u8 *macaddr_mask)
{
  #line 1890 
  u32 i;
  #line 1891 
  u64 data1 = 0ULL;
  #line 1892 
  u64 data2 = 0ULL;
  #line 1893 
  enum vxge_hw_status status = 0;
  #line 1895 
  if (vp == (struct __vxge_hw_vpath_handle *)0) {
    #line 1896 
    status = VXGE_HW_ERR_INVALID_HANDLE;
    #line 1897 
    goto exit;
  }
  #line 1900 
  i = 0U;
  #line 1900 
  while (i <= 5U) {
    #line 1901 
    data1 <<= 8;
    #line 1902 
    data1 = (unsigned long long)*(macaddr + (unsigned long)i) | data1;
    #line 1904 
    data2 <<= 8;
    #line 1905 
    data2 = (unsigned long long)*(macaddr_mask + (unsigned long)i) | data2;
    #line 1900 
    i ++;
  }
  #line 1908 
  status = __vxge_hw_vpath_rts_table_set(vp,1U,0U,0U,data1 << 16,data2 << 16);
  #line 1914 
  exit: 
        #line 1914 
  ;
  #line 1915 
  return status;
}

#line 1929  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.c"
enum vxge_hw_status vxge_hw_vpath_vid_add(struct __vxge_hw_vpath_handle *vp, u64 vid)
{
  #line 1931 
  enum vxge_hw_status status = 0;
  #line 1933 
  if (vp == (struct __vxge_hw_vpath_handle *)0) {
    #line 1934 
    status = VXGE_HW_ERR_INVALID_HANDLE;
    #line 1935 
    goto exit;
  }
  #line 1938 
  status = __vxge_hw_vpath_rts_table_set(vp,0U,1U,0U,vid << 52,0ULL);
  #line 1942 
  exit: 
        #line 1942 
  ;
  #line 1943 
  return status;
}

#line 1957  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.c"
enum vxge_hw_status vxge_hw_vpath_vid_delete(struct __vxge_hw_vpath_handle *vp, u64 vid)
{
  #line 1959 
  enum vxge_hw_status status = 0;
  #line 1961 
  if (vp == (struct __vxge_hw_vpath_handle *)0) {
    #line 1962 
    status = VXGE_HW_ERR_INVALID_HANDLE;
    #line 1963 
    goto exit;
  }
  #line 1966 
  status = __vxge_hw_vpath_rts_table_set(vp,1U,1U,0U,vid << 52,0ULL);
  #line 1970 
  exit: 
        #line 1970 
  ;
  #line 1971 
  return status;
}

#line 1982  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.c"
enum vxge_hw_status vxge_hw_vpath_promisc_enable(struct __vxge_hw_vpath_handle *vp)
{
  #line 1985 
  u64 val64;
  #line 1986 
  struct __vxge_hw_virtualpath *vpath;
  #line 1987 
  enum vxge_hw_status status = 0;
  #line 1989 
  if (vp == (struct __vxge_hw_vpath_handle *)0 || (vp->vpath)->ringh == (struct __vxge_hw_ring *)0) {
    #line 1990 
    status = VXGE_HW_ERR_INVALID_HANDLE;
    #line 1991 
    goto exit;
  }
  #line 1994 
  vpath = vp->vpath;
  #line 1997 
  if (((vpath->hldev)->access_rights & 4U) == 0U) 
                                                  #line 1999 
                                                  return VXGE_HW_OK;
  #line 2001 
  val64 = readq((void *)(& (vpath->vp_reg)->rxmac_vcfg0));
  #line 2003 
  if ((val64 & 1048576ULL) == 0ULL) {
    #line 2005 
    val64 |= 1118464ULL;
    #line 2010 
    writeq(val64,(void *)(& (vpath->vp_reg)->rxmac_vcfg0));
  }
  #line 2012 
  exit: 
        #line 2012 
  ;
  #line 2013 
  return status;
}

#line 2024  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.c"
enum vxge_hw_status vxge_hw_vpath_promisc_disable(struct __vxge_hw_vpath_handle *vp)
{
  #line 2027 
  u64 val64;
  #line 2028 
  struct __vxge_hw_virtualpath *vpath;
  #line 2029 
  enum vxge_hw_status status = 0;
  #line 2031 
  if (vp == (struct __vxge_hw_vpath_handle *)0 || (vp->vpath)->ringh == (struct __vxge_hw_ring *)0) {
    #line 2032 
    status = VXGE_HW_ERR_INVALID_HANDLE;
    #line 2033 
    goto exit;
  }
  #line 2036 
  vpath = vp->vpath;
  #line 2038 
  val64 = readq((void *)(& (vpath->vp_reg)->rxmac_vcfg0));
  #line 2040 
  if ((val64 & 1048576ULL) != 0ULL) {
    #line 2042 
    val64 &= 18446744073708437247ULL;
    #line 2046 
    writeq(val64,(void *)(& (vpath->vp_reg)->rxmac_vcfg0));
  }
  #line 2048 
  exit: 
        #line 2048 
  ;
  #line 2049 
  return status;
}

#line 2058  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.c"
enum vxge_hw_status vxge_hw_vpath_bcast_enable(struct __vxge_hw_vpath_handle *vp)
{
  #line 2061 
  u64 val64;
  #line 2062 
  struct __vxge_hw_virtualpath *vpath;
  #line 2063 
  enum vxge_hw_status status = 0;
  #line 2065 
  if (vp == (struct __vxge_hw_vpath_handle *)0 || (vp->vpath)->ringh == (struct __vxge_hw_ring *)0) {
    #line 2066 
    status = VXGE_HW_ERR_INVALID_HANDLE;
    #line 2067 
    goto exit;
  }
  #line 2070 
  vpath = vp->vpath;
  #line 2072 
  val64 = readq((void *)(& (vpath->vp_reg)->rxmac_vcfg0));
  #line 2074 
  if ((val64 & 4096ULL) == 0ULL) {
    #line 2075 
    val64 |= 4096ULL;
    #line 2076 
    writeq(val64,(void *)(& (vpath->vp_reg)->rxmac_vcfg0));
  }
  #line 2078 
  exit: 
        #line 2078 
  ;
  #line 2079 
  return status;
}

#line 2090  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.c"
enum vxge_hw_status vxge_hw_vpath_mcast_enable(struct __vxge_hw_vpath_handle *vp)
{
  #line 2093 
  u64 val64;
  #line 2094 
  struct __vxge_hw_virtualpath *vpath;
  #line 2095 
  enum vxge_hw_status status = 0;
  #line 2097 
  if (vp == (struct __vxge_hw_vpath_handle *)0 || (vp->vpath)->ringh == (struct __vxge_hw_ring *)0) {
    #line 2098 
    status = VXGE_HW_ERR_INVALID_HANDLE;
    #line 2099 
    goto exit;
  }
  #line 2102 
  vpath = vp->vpath;
  #line 2104 
  val64 = readq((void *)(& (vpath->vp_reg)->rxmac_vcfg0));
  #line 2106 
  if ((val64 & 65536ULL) == 0ULL) {
    #line 2107 
    val64 |= 65536ULL;
    #line 2108 
    writeq(val64,(void *)(& (vpath->vp_reg)->rxmac_vcfg0));
  }
  #line 2110 
  exit: 
        #line 2110 
  ;
  #line 2111 
  return status;
}

#line 2124  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.c"
enum vxge_hw_status vxge_hw_vpath_mcast_disable(struct __vxge_hw_vpath_handle *vp)
{
  #line 2126 
  u64 val64;
  #line 2127 
  struct __vxge_hw_virtualpath *vpath;
  #line 2128 
  enum vxge_hw_status status = 0;
  #line 2130 
  if (vp == (struct __vxge_hw_vpath_handle *)0 || (vp->vpath)->ringh == (struct __vxge_hw_ring *)0) {
    #line 2131 
    status = VXGE_HW_ERR_INVALID_HANDLE;
    #line 2132 
    goto exit;
  }
  #line 2135 
  vpath = vp->vpath;
  #line 2137 
  val64 = readq((void *)(& (vpath->vp_reg)->rxmac_vcfg0));
  #line 2139 
  if ((val64 & 65536ULL) != 0ULL) {
    #line 2140 
    val64 &= 18446744073709486079ULL;
    #line 2141 
    writeq(val64,(void *)(& (vpath->vp_reg)->rxmac_vcfg0));
  }
  #line 2143 
  exit: 
        #line 2143 
  ;
  #line 2144 
  return status;
}

#line 2155  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.c"
enum vxge_hw_status vxge_hw_vpath_alarm_process(struct __vxge_hw_vpath_handle *vp, u32 skip_alarms)
{
  #line 2159 
  enum vxge_hw_status status = 0;
  #line 2161 
  if (vp == (struct __vxge_hw_vpath_handle *)0) {
    #line 2162 
    status = VXGE_HW_ERR_INVALID_HANDLE;
    #line 2163 
    goto exit;
  }
  #line 2166 
  status = __vxge_hw_vpath_alarm_process(vp->vpath,skip_alarms);
  #line 2167 
  exit: 
        #line 2167 
  ;
  #line 2168 
  return status;
}

#line 2184  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.c"
void vxge_hw_vpath_msix_set(struct __vxge_hw_vpath_handle *vp, int *tim_msix_id, int alarm_msix_id)
{
  #line 2187 
  u64 val64;
  #line 2188 
  struct __vxge_hw_virtualpath *vpath = vp->vpath;
  #line 2189 
  struct vxge_hw_vpath_reg *vp_reg = vpath->vp_reg;
  #line 2190 
  u32 vp_id = (vp->vpath)->vp_id;
  #line 2192 
  val64 = ((unsigned long long)(vp_id * 4U + (unsigned int)*tim_msix_id) << 48) | ((unsigned long long)(vp_id * 4U + (unsigned int)*(tim_msix_id + 1U)) << 40);
  #line 2197 
  writeq(val64,(void *)(& vp_reg->interrupt_cfg0));
  #line 2199 
  writeq((unsigned long long)((vpath->hldev)->first_vp_id * 4U + (unsigned int)alarm_msix_id) << 56,(void *)(& vp_reg->interrupt_cfg2));
  #line 2203 
  if ((unsigned int)(vpath->hldev)->config.intr_mode == 2U) {
    #line 2205 
    __vxge_hw_pio_mem_write32_upper(268435456U,(void *)(& vp_reg->one_shot_vect0_en));
    #line 2208 
    __vxge_hw_pio_mem_write32_upper(268435456U,(void *)(& vp_reg->one_shot_vect1_en));
    #line 2211 
    __vxge_hw_pio_mem_write32_upper(268435456U,(void *)(& vp_reg->one_shot_vect2_en));
  }
  #line 2215 
  return;
}

#line 2230  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.c"
void vxge_hw_vpath_msix_mask(struct __vxge_hw_vpath_handle *vp, int msix_id)
{
  #line 2232 
  struct __vxge_hw_device *hldev = (vp->vpath)->hldev;
  #line 2233 
  __vxge_hw_pio_mem_write32_upper((unsigned int)((9223372036854775808ULL >> (msix_id >> 2)) >> 32),(void *)(& (hldev->common_reg)->set_msix_mask_vect[msix_id % 4]));
  #line 2236 
  return;
}

#line 2250  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.c"
void vxge_hw_vpath_msix_clear(struct __vxge_hw_vpath_handle *vp, int msix_id)
{
  #line 2252 
  struct __vxge_hw_device *hldev = (vp->vpath)->hldev;
  #line 2254 
  if ((unsigned int)hldev->config.intr_mode == 2U) 
                                                   #line 2255 
                                                   __vxge_hw_pio_mem_write32_upper((unsigned int)((9223372036854775808ULL >> (msix_id >> 2)) >> 32),(void *)(& (hldev->common_reg)->clr_msix_one_shot_vec[msix_id % 4])); else 
                                                                    #line 2259 
                                                                    __vxge_hw_pio_mem_write32_upper((unsigned int)((9223372036854775808ULL >> (msix_id >> 2)) >> 32),(void *)(& (hldev->common_reg)->clear_msix_mask_vect[msix_id % 4]));
  #line 2262 
  return;
}

#line 2277  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.c"
void vxge_hw_vpath_msix_unmask(struct __vxge_hw_vpath_handle *vp, int msix_id)
{
  #line 2279 
  struct __vxge_hw_device *hldev = (vp->vpath)->hldev;
  #line 2280 
  __vxge_hw_pio_mem_write32_upper((unsigned int)((9223372036854775808ULL >> (msix_id >> 2)) >> 32),(void *)(& (hldev->common_reg)->clear_msix_mask_vect[msix_id % 4]));
  #line 2283 
  return;
}

#line 2293  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.c"
void vxge_hw_vpath_inta_mask_tx_rx(struct __vxge_hw_vpath_handle *vp)
{
  #line 2297 
  u64 val64;
  #line 2295 
  u64 tim_int_mask0[4U] = {0ULL, 0ULL, 0ULL, 0ULL};
  #line 2296 
  u32 tim_int_mask1[4U] = {0U, 0U, 0U, 0U};
  #line 2298 
  struct __vxge_hw_device *hldev = (vp->vpath)->hldev;
  #line 2300 
  if ((vp->vpath)->vp_id <= 15U) {
    #line 2300 
    tim_int_mask0[0] |= 8ULL << (1073741839U - (vp->vpath)->vp_id) * 4U;
    #line 2300 
    tim_int_mask0[1] |= 4ULL << (1073741839U - (vp->vpath)->vp_id) * 4U;
  }
  else {
    #line 2300 
    tim_int_mask1[0] = 2147483648U;
    #line 2300 
    tim_int_mask1[1] = 1073741824U;
  }
  #line 2303 
  val64 = readq((void *)(& (hldev->common_reg)->tim_int_mask0));
  #line 2305 
  if (tim_int_mask0[0] != 0ULL || tim_int_mask0[1] != 0ULL) 
                                                            #line 2307 
                                                            writeq((tim_int_mask0[0] | tim_int_mask0[1]) | val64,(void *)(& (hldev->common_reg)->tim_int_mask0));
  #line 2312 
  val64 = (unsigned long long)readl((void *)(& (hldev->common_reg)->tim_int_mask1));
  #line 2314 
  if (tim_int_mask1[0] != 0U || tim_int_mask1[1] != 0U) 
                                                        #line 2316 
                                                        __vxge_hw_pio_mem_write32_upper((tim_int_mask1[0] | tim_int_mask1[1]) | (unsigned int)val64,(void *)(& (hldev->common_reg)->tim_int_mask1));
  #line 2320 
  return;
}

#line 2331  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.c"
void vxge_hw_vpath_inta_unmask_tx_rx(struct __vxge_hw_vpath_handle *vp)
{
  #line 2335 
  u64 val64;
  #line 2333 
  u64 tim_int_mask0[4U] = {0ULL, 0ULL, 0ULL, 0ULL};
  #line 2334 
  u32 tim_int_mask1[4U] = {0U, 0U, 0U, 0U};
  #line 2336 
  struct __vxge_hw_device *hldev = (vp->vpath)->hldev;
  #line 2338 
  if ((vp->vpath)->vp_id <= 15U) {
    #line 2338 
    tim_int_mask0[0] |= 8ULL << (1073741839U - (vp->vpath)->vp_id) * 4U;
    #line 2338 
    tim_int_mask0[1] |= 4ULL << (1073741839U - (vp->vpath)->vp_id) * 4U;
  }
  else {
    #line 2338 
    tim_int_mask1[0] = 2147483648U;
    #line 2338 
    tim_int_mask1[1] = 1073741824U;
  }
  #line 2341 
  val64 = readq((void *)(& (hldev->common_reg)->tim_int_mask0));
  #line 2343 
  if (tim_int_mask0[0] != 0ULL || tim_int_mask0[1] != 0ULL) 
                                                            #line 2345 
                                                            writeq(~ (tim_int_mask0[0] | tim_int_mask0[1]) & val64,(void *)(& (hldev->common_reg)->tim_int_mask0));
  #line 2350 
  if (tim_int_mask1[0] != 0U || tim_int_mask1[1] != 0U) 
                                                        #line 2352 
                                                        __vxge_hw_pio_mem_write32_upper(~ (tim_int_mask1[0] | tim_int_mask1[1]) & (unsigned int)val64,(void *)(& (hldev->common_reg)->tim_int_mask1));
  #line 2356 
  return;
}

#line 2373  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.c"
enum vxge_hw_status vxge_hw_vpath_poll_rx(struct __vxge_hw_ring *ring)
{
  #line 2375 
  u8 t_code;
  #line 2377 
  void *first_rxdh;
  #line 2376 
  enum vxge_hw_status status = 0;
  #line 2378 
  u64 val64 = 0ULL;
  #line 2379 
  int new_count = 0;
  #line 2381 
  ring->cmpl_cnt = 0U;
  #line 2383 
  status = vxge_hw_ring_rxd_next_completed(ring,& first_rxdh,& t_code);
  #line 2384 
  if (status == VXGE_HW_OK) 
                            #line 2385 
                            (*(ring->callback))(ring,first_rxdh,(unsigned char)((int)t_code),ring->channel.userdata);
  #line 2388 
  if (ring->cmpl_cnt != 0U) {
    #line 2389 
    ring->doorbell_cnt += ring->cmpl_cnt;
    #line 2390 
    if ((unsigned long long)ring->doorbell_cnt >= ring->rxds_limit) {
      #line 2395 
      new_count = (int)(ring->doorbell_cnt * 4U);
      #line 2398 
      ring->total_db_cnt += ring->doorbell_cnt;
      #line 2399 
      if (ring->total_db_cnt >= ring->rxds_per_block) {
        #line 2400 
        new_count += 4;
        #line 2402 
        ring->total_db_cnt %= ring->rxds_per_block;
      }
      #line 2404 
      writeq((unsigned long long)new_count,(void *)(& (ring->vp_reg)->prc_rxd_doorbell));
      #line 2406 
      val64 = (unsigned long long)readl((void *)(& (ring->common_reg)->titan_general_int_status));
      #line 2408 
      ring->doorbell_cnt = 0U;
    }
  }
  #line 2412 
  return status;
}

#line 2427  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.c"
enum vxge_hw_status vxge_hw_vpath_poll_tx(struct __vxge_hw_fifo *fifo, struct sk_buff ***skb_ptr, int nr_skb, int *more)
{
  #line 2431 
  enum vxge_hw_fifo_tcode t_code;
  #line 2432 
  void *first_txdlh;
  #line 2434 
  struct __vxge_hw_channel *channel;
  #line 2433 
  enum vxge_hw_status status = 0;
  #line 2436 
  channel = & fifo->channel;
  #line 2438 
  status = vxge_hw_fifo_txdl_next_completed(fifo,& first_txdlh,& t_code);
  #line 2440 
  if (status == VXGE_HW_OK) {
    #line 2441 
    if ((*(fifo->callback))(fifo,first_txdlh,t_code,channel->userdata,skb_ptr,
                          nr_skb,more) != VXGE_HW_OK) 
      #line 2443 
      status = VXGE_HW_COMPLETIONS_REMAIN;
  }
  #line 2445 
  return status;
}

/* compiler builtin: 
   unsigned short __builtin_bswap16(unsigned short);   */
/* compiler builtin: 
   void *__builtin_memcpy(void *, void const *, unsigned long);   */
/* compiler builtin: 
   unsigned long __builtin_object_size(void *, int);   */
/* compiler builtin: 
   void __builtin_unreachable(void);   */
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/export.h"
#line 16 
extern struct module __this_module;
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compiler.h"
__inline static void __read_once_size(void *p, void *res, int size)
{
  #line 199 
  switch (size) {
    #line 199 
    case 1: 
            #line 199 
    ;
    #line 199 
    *((__u8 *)res) = *((__u8 *)p);
    #line 199 
    break;
    #line 199 
    case 2: 
            #line 199 
    ;
    #line 199 
    *((__u16 *)res) = *((__u16 *)p);
    #line 199 
    break;
    #line 199 
    case 4: 
            #line 199 
    ;
    #line 199 
    *((__u32 *)res) = *((__u32 *)p);
    #line 199 
    break;
    #line 199 
    case 8: 
            #line 199 
    ;
    #line 199 
    *((__u64 *)res) = *((__u64 *)p);
    #line 199 
    break;
    #line 199 
    default: 
             #line 199 
    ;
    #line 200 
    ldv_inline_asm();
    #line 199 
    __builtin_memcpy(res,(void const *)p,(unsigned long)size);
    #line 200 
    ldv_inline_asm();
  }
  #line 203 
  return;
}

#line 220  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compiler.h"
__inline static void __write_once_size(void *p, void *res, int size)
{
  #line 222 
  switch (size) {
    #line 223 
    case 1: 
            #line 223 
    ;
    #line 223 
    *((__u8 *)p) = *((__u8 *)res);
    #line 223 
    break;
    #line 224 
    case 2: 
            #line 224 
    ;
    #line 224 
    *((__u16 *)p) = *((__u16 *)res);
    #line 224 
    break;
    #line 225 
    case 4: 
            #line 225 
    ;
    #line 225 
    *((__u32 *)p) = *((__u32 *)res);
    #line 225 
    break;
    #line 226 
    case 8: 
            #line 226 
    ;
    #line 226 
    *((__u64 *)p) = *((__u64 *)res);
    #line 226 
    break;
    #line 227 
    default: 
             #line 227 
    ;
    #line 228 
    ldv_inline_asm();
    #line 229 
    __builtin_memcpy(p,(void const *)res,(unsigned long)size);
    #line 230 
    ldv_inline_asm();
  }
  #line 232 
  return;
}

#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kasan-checks.h"
__inline static bool kasan_check_read(void *p, unsigned int size)
{
  #line 36 
  return (_Bool)1;
}

#line 136  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static bool arch_test_and_set_bit(long nr, unsigned long *addr)
{
  #line 138 
  bool c;
  #line 139 
  ldv_inline_asm();
  #line 138 
  return c;
}

#line 204  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static bool constant_test_bit(long nr, unsigned long *addr)
{
  #line 207 
  return (_Bool)(((*(addr + (unsigned long)(nr >> 6)) >> (nr & 63L)) & 1UL) != 0UL);
}

#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static bool variable_test_bit(long nr, unsigned long *addr)
{
  #line 212 
  bool oldbit;
  #line 213 
  ldv_inline_asm();
  #line 219 
  return oldbit;
}

#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/find.h"
#line 238  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/0/concurrency safety/weaver/vxge-main.i.aux"
static unsigned long cif_find_next_bit(unsigned long *addr, unsigned long size, unsigned long offset);
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/find.h"
#line 280  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/0/concurrency safety/weaver/vxge-main.i.aux"
static unsigned long cif_find_first_bit(unsigned long *addr, unsigned long size);
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 245  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/0/concurrency safety/weaver/vxge-main.i.aux"
static void cif_set_bit(long nr, unsigned long *addr);
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 252  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/0/concurrency safety/weaver/vxge-main.i.aux"
static void cif_clear_bit(long nr, unsigned long *addr);
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
__inline static bool test_and_set_bit(long nr, unsigned long *addr)
{
  #line 70 
  kasan_check_read((void *)(addr + (unsigned long)(nr / 64L)),8U);
  #line 71 
  return arch_test_and_set_bit(nr,addr);
}

#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-non-atomic.h"
__inline static bool test_bit(long nr, unsigned long *addr)
{
  #line 111 
  int tmp_1;
  #line 110 
  kasan_check_read((void *)(addr + (unsigned long)(nr / 64L)),8U);
  #line 111 
  if (0 != 0) {
    #line 111 
    tmp_1 = (int)constant_test_bit(nr,addr) != 0;
  }
  else {
    #line 111 
    tmp_1 = (int)variable_test_bit(nr,addr) != 0;
  }
  #line 111 
  return (_Bool)(tmp_1 != 0);
}

#line 171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
#line 171 
int printk(char * , ...);
#line 472  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernel.h"
#line 472 
int snprintf(char *, size_t, char * , ...);
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
#line 259  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/0/concurrency safety/weaver/vxge-main.i.aux"
static void INIT_LIST_HEAD(struct list_head *list);
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
#line 33 
bool __list_add_valid(struct list_head *, struct list_head *, struct list_head *);
#line 36 
#line 36 
bool __list_del_entry_valid(struct list_head *);
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_add(struct list_head *new, struct list_head *prev, struct list_head *next)
{
  #line 60 
  if (! __list_add_valid(new,prev,next)) 
                                         #line 61 
                                         return;
  #line 63 
  next->prev = new;
  #line 64 
  new->next = next;
  #line 65 
  new->prev = prev;
  {
    #line 67 
    union __anonunion___u_714 __u = {.__val = new};
    #line 66 
    __write_once_size((void *)(& prev->next),(void *)(& __u.__c),8);
    #line 66 
    struct list_head *tmp_2 = __u.__val;
  }
  #line 68 
  return;
}

#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_add(struct list_head *new, struct list_head *head)
{
  #line 79 
  __list_add(new,head,head->next);
  #line 80 
  return;
}

#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_del(struct list_head *prev, struct list_head *next)
{
  #line 97 
  next->prev = prev;
  {
    #line 107 
    union __anonunion___u_716 __u = {.__val = next};
    #line 106 
    __write_once_size((void *)(& prev->next),(void *)(& __u.__c),8);
    #line 106 
    struct list_head *tmp = __u.__val;
  }
  #line 108 
  return;
}

#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_del_entry(struct list_head *entry)
{
  #line 131 
  if (! __list_del_entry_valid(entry)) 
                                       #line 132 
                                       return;
  #line 134 
  __list_del(entry->prev,entry->next);
  #line 135 
  return;
}

#line 137  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_del(struct list_head *entry)
{
  #line 139 
  __list_del_entry(entry);
  #line 140 
  entry->next = (struct list_head *)(-2401263026318606080);
  #line 141 
  entry->prev = (struct list_head *)(-2401263026318606046);
  #line 142 
  return;
}

#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static int list_empty(struct list_head *head)
{
  #line 269 
  union __anonunion___u_718 __u;
  #line 268 
  __read_once_size((void *)(& head->next),(void *)(& __u.__c),8);
  #line 268 
  ;
  #line 268 
  return (__u.__val) == head;
}

#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/percpu.h"
#line 88 
void __bad_percpu_size(void);
#line 309  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-defs.h"
#line 309 
void __bad_size_call_parameter(void);
#line 314  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-defs.h"
__inline static void __this_cpu_preempt_check(char *op)
{
  #line 316 
  return;
}

#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bug.h"
#line 89 
void __warn_printk(char * , ...);
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/page_64.h"
#line 15 
extern unsigned long vmalloc_base;
#line 16 
#line 16 
extern unsigned long vmemmap_base;
#line 29 
#line 29 
unsigned long __phys_addr(unsigned long);
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/string_64.h"
#line 14 
void *memcpy(void *, void *, size_t);
#line 18 
#line 18 
void *memset(void *, int, size_t);
#line 63 
#line 63 
char *strcpy(char *, char *);
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/string.h"
#line 29 
size_t strlcpy(char *, char *, size_t);
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cpufeature.h"
__inline static bool _static_cpu_has(u16 bit)
{
  #line 177 
  ldv_inline_asm();
  #line 178 
  ldv_inline_asm();
  #line 211 
  t_yes: 
         #line 211 
  ;
  #line 212 
  return (_Bool)1;
  #line 213 
  t_no: 
        #line 213 
  ;
  #line 214 
  return (_Bool)0;
}

#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/thread_info.h"
#line 112 
void __check_object_size(void *, unsigned long, bool);
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/thread_info.h"
__inline static void check_object_size(void *ptr, unsigned long n, bool to_user)
{
  #line 118 
  if (0 == 0) 
              #line 119 
              __check_object_size(ptr,n,(_Bool)((bool)((int)to_user) != 0));
  #line 120 
  return;
}

#line 128 
#line 128 
void __bad_copy_from(void);
#line 130 
#line 130 
void __bad_copy_to(void);
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/thread_info.h"
__inline static void copy_overflow(int size, unsigned long count)
{
  #line 134 
  int __ret_warn_on = 1;
  #line 134 
  if ((long)(__ret_warn_on != 0) != 0L) {
    #line 134 
    __warn_printk((char *)"Buffer overflow detected (%d < %lu)!\n",size,count);
    #line 135 
    ldv_inline_asm();
    #line 136 
    ldv_inline_asm();
  }
  #line 134 
  long tmp = (long)(__ret_warn_on != 0);
  #line 136 
  return;
}

#line 138  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/thread_info.h"
__inline static bool check_copy_size(void *addr, size_t bytes, bool is_source)
{
  #line 150 
  int __ret_warn_on;
  #line 140 
  int sz = (int)__builtin_object_size(addr,0);
  #line 141 
  if ((long)(sz >= 0) != 0L && (long)((unsigned long)sz < bytes) != 0L) {
    #line 142 
    if (0 == 0) 
                #line 143 
                copy_overflow(sz,bytes);
    else 
      #line 144 
      if ((int)is_source != 0) 
                               #line 145 
                               __bad_copy_from(); else 
                                                       #line 147 
                                                       __bad_copy_to();
    #line 148 
    return (_Bool)0;
  }
  #line 150 
  __ret_warn_on = bytes > 2147483647UL;
  #line 150 
  if ((long)(__ret_warn_on != 0) != 0L) {
    #line 151 
    ldv_inline_asm();
    #line 152 
    ldv_inline_asm();
  }
  #line 150 
  if ((long)((long)(__ret_warn_on != 0)) != 0L) 
                                                #line 151 
                                                return (_Bool)0;
  #line 152 
  check_object_size(addr,bytes,(_Bool)((bool)((int)is_source) != 0));
  #line 153 
  return (_Bool)1;
}

#line 302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
#line 302 
void lockdep_init_map(struct lockdep_map *, char *, struct lock_class_key *, int);
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_api_smp.h"
#line 37 
int _raw_spin_trylock(raw_spinlock_t *);
#line 39 
#line 39 
void _raw_spin_unlock(raw_spinlock_t *);
#line 346  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static int spin_trylock(spinlock_t *lock)
{
  #line 348 
  return _raw_spin_trylock(& lock->__anonCompField_spinlock_25.rlock);
}

#line 350 
#line 681  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/0/concurrency safety/weaver/vxge-main.i.aux"
static int cif_spin_trylock__xmit_lock_of_netdev_queue(spinlock_t *lock);
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock(spinlock_t *lock)
{
  #line 378 
  _raw_spin_unlock(& lock->__anonCompField_spinlock_25.rlock);
  #line 379 
  return;
}

#line 380 
#line 703  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/0/concurrency safety/weaver/vxge-main.i.aux"
static void cif_spin_unlock__xmit_lock_of_netdev_queue(spinlock_t *lock);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 23 
int ldv_undef_int(void);
#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/0/concurrency safety/weaver/vxge-main.i.aux"
#line 40 
void ldv_spin_model_lock(char *);
#line 41 
#line 41 
void ldv_spin_model_unlock(char *);
#line 51 
#line 51 
int ldv_request_firmware(struct firmware **fw);
#line 52 
#line 52 
void ldv_release_firmware(struct firmware *fw);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 21 
void ldv_set_bit(long nr, unsigned long *addr);
#line 22 
#line 22 
void ldv_clear_bit(long nr, unsigned long *addr);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 21 
unsigned long ldv_find_first_bit(unsigned long *addr, unsigned long size);
#line 22 
#line 22 
unsigned long ldv_find_next_bit(unsigned long *addr, unsigned long size, unsigned long offset);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/list.h"
#line 23 
void ldv_init_list_head(struct list_head *list);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 23 
void *ldv_kzalloc(size_t size, gfp_t flags);
#line 25 
#line 25 
void *ldv_kcalloc(size_t n, size_t size, gfp_t flags);
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
#line 81 
extern unsigned long jiffies;
#line 265  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ktime.h"
__inline static ktime_t ns_to_ktime(u64 ns)
{
  #line 267 
  return (long long)ns;
}

#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
#line 90 
void init_timer_key(struct timer_list *, void (*)(struct timer_list *), unsigned int, char *, struct lock_class_key *);
#line 173 
#line 931  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/0/concurrency safety/weaver/vxge-main.i.aux"
static int cif_mod_timer(struct timer_list *timer, unsigned long expires);
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
#line 955  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/0/concurrency safety/weaver/vxge-main.i.aux"
static int cif_del_timer_sync(struct timer_list *timer);
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/delay.h"
#line 59 
void msleep(unsigned int);
#line 209  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/io.h"
#line 209 
void iounmap(void *);
#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
#line 207 
void __init_work(struct work_struct *, int);
#line 462 
#line 987  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/0/concurrency safety/weaver/vxge-main.i.aux"
static bool cif_flush_work(struct work_struct *work);
#line 554  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
#line 809  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/0/concurrency safety/weaver/vxge-main.i.aux"
static bool cif_schedule_work(struct work_struct *work);
#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uaccess.h"
#line 121 
unsigned long _copy_from_user(void *, void *, unsigned long);
#line 137 
#line 137 
unsigned long _copy_to_user(void *, void *, unsigned long);
#line 141  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uaccess.h"
__inline static unsigned long copy_from_user(void *to, void *from, unsigned long n)
{
  #line 143 
  if ((long)((int)check_copy_size(to,n,(_Bool)0) != 0) != 0L) 
                                                              #line 144 
                                                              n = _copy_from_user(to,from,n);
  #line 145 
  return n;
}

#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uaccess.h"
__inline static unsigned long copy_to_user(void *to, void *from, unsigned long n)
{
  #line 151 
  if ((long)((int)check_copy_size(from,n,(_Bool)1) != 0) != 0L) 
                                                                #line 152 
                                                                n = _copy_to_user(to,from,n);
  #line 153 
  return n;
}

#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 189 
void kfree(void *);
#line 607 
#line 461  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/0/concurrency safety/weaver/vxge-main.i.aux"
static void *kcalloc(size_t n, size_t size, gfp_t flags);
#line 668  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 482  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/0/concurrency safety/weaver/vxge-main.i.aux"
static void *kzalloc(size_t size, gfp_t flags);
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static bool is_vmalloc_addr(void *x)
{
  #line 633 
  int tmp_1;
  #line 631 
  unsigned long addr = (unsigned long)x;
  #line 633 
  if (addr >= vmalloc_base) {
    #line 633 
    unsigned long tmp_0;
    #line 633 
    if ((int)_static_cpu_has((unsigned short)528) != 0) 
                                                        #line 633 
                                                        tmp_0 = 14073748835532800UL; else 
                                                                    #line 633 
                                                                    tmp_0 = 35184372088832UL;
    #line 633 
    ;
    #line 633 
    if ((tmp_0 + vmalloc_base) + 18446744073709551615UL > addr) 
                                                                #line 633 
                                                                tmp_1 = 1; else 
                                                                    #line 633 
                                                                    tmp_1 = 0;
  }
  else 
       #line 633 
       tmp_1 = 0;
  #line 633 
  return (_Bool)(tmp_1 != 0);
}

#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
__inline static char *kobject_name(struct kobject *kobj)
{
  #line 91 
  return kobj->name;
}

#line 1370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static char *dev_name(struct device *dev)
{
  #line 1373 
  if (dev->init_name != (char *)0) 
                                   #line 1374 
                                   return dev->init_name;
  #line 1376 
  return kobject_name(& dev->kobj);
}

#line 1417  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static void *dev_get_drvdata(struct device *dev)
{
  #line 1419 
  return dev->driver_data;
}

#line 1422  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static void dev_set_drvdata(struct device *dev, void *data)
{
  #line 1424 
  dev->driver_data = data;
  #line 1425 
  return;
}

#line 1680 
#line 1680 
char *dev_driver_string(struct device *);
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-debug.h"
#line 21 
void debug_dma_map_single(struct device *, void *, unsigned long);
#line 24 
#line 24 
void debug_dma_map_page(struct device *, struct page *, size_t, size_t, int, dma_addr_t);
#line 28 
#line 28 
void debug_dma_mapping_error(struct device *, dma_addr_t);
#line 30 
#line 30 
void debug_dma_unmap_page(struct device *, dma_addr_t, size_t, int);
#line 52 
#line 52 
void debug_dma_sync_single_for_cpu(struct device *, dma_addr_t, size_t, int);
#line 56 
#line 56 
void debug_dma_sync_single_for_device(struct device *, dma_addr_t, size_t, int);
#line 143  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static int valid_dma_direction(int dma_direction)
{
  #line 146 
  return (unsigned int)dma_direction <= 2U;
}

#line 191  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static bool dma_is_direct(struct dma_map_ops *ops)
{
  #line 193 
  return (_Bool)((long)(ops == (struct dma_map_ops *)0) != 0L);
}

#line 200 
#line 200 
dma_addr_t dma_direct_map_page(struct device *, struct page *, unsigned long, size_t, enum dma_data_direction, unsigned long);
#line 210 
#line 210 
void dma_direct_sync_single_for_device(struct device *, dma_addr_t, size_t, enum dma_data_direction);
#line 228 
#line 228 
void dma_direct_unmap_page(struct device *, dma_addr_t, size_t, enum dma_data_direction, unsigned long);
#line 232 
#line 232 
void dma_direct_sync_single_for_cpu(struct device *, dma_addr_t, size_t, enum dma_data_direction);
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/dma-mapping.h"
#line 19 
extern struct dma_map_ops *dma_ops;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/dma-mapping.h"
__inline static struct dma_map_ops *get_arch_dma_ops(struct bus_type *bus)
{
  #line 23 
  return dma_ops;
}

#line 261  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static struct dma_map_ops *get_dma_ops(struct device *dev)
{
  #line 263 
  if (dev->dma_ops != (struct dma_map_ops *)0) 
                                               #line 264 
                                               return dev->dma_ops;
  #line 265 
  return get_arch_dma_ops(dev->bus);
}

#line 274  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static dma_addr_t dma_map_page_attrs(struct device *dev, struct page *page, size_t offset, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 279 
  dma_addr_t addr;
  #line 278 
  struct dma_map_ops *ops = get_dma_ops(dev);
  #line 281 
  if ((long)(valid_dma_direction((int)dir) == 0) != 0L) {
    #line 282 
    ldv_inline_asm();
    #line 283 
    ldv_inline_asm();
    #line 284 
    ldv_inline_asm();
    #line 281 
    ;
  }
  #line 282 
  if ((int)dma_is_direct(ops) != 0) 
                                    #line 283 
                                    addr = dma_direct_map_page(dev,page,offset,size,dir,attrs); else 
                                                                    #line 285 
                                                                    addr = (*(ops->map_page))(dev,page,offset,size,dir,attrs);
  #line 286 
  debug_dma_map_page(dev,page,offset,size,(int)dir,addr);
  #line 288 
  return addr;
}

#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_unmap_page_attrs(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 294 
  struct dma_map_ops *ops = get_dma_ops(dev);
  #line 296 
  if ((long)(valid_dma_direction((int)dir) == 0) != 0L) {
    #line 297 
    ldv_inline_asm();
    #line 298 
    ldv_inline_asm();
    #line 299 
    ldv_inline_asm();
    #line 296 
    ;
  }
  #line 297 
  if ((int)dma_is_direct(ops) != 0) 
                                    #line 298 
                                    dma_direct_unmap_page(dev,addr,size,dir,attrs);
  else 
    #line 299 
    if (ops->unmap_page != (void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ))0) 
      #line 300 
      (*(ops->unmap_page))(dev,addr,size,dir,attrs);
  #line 301 
  debug_dma_unmap_page(dev,addr,size,(int)dir);
  #line 302 
  return;
}

#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_sync_single_for_cpu(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir)
{
  #line 380 
  struct dma_map_ops *ops = get_dma_ops(dev);
  #line 382 
  if ((long)(valid_dma_direction((int)dir) == 0) != 0L) {
    #line 383 
    ldv_inline_asm();
    #line 384 
    ldv_inline_asm();
    #line 385 
    ldv_inline_asm();
    #line 382 
    ;
  }
  #line 383 
  if ((int)dma_is_direct(ops) != 0) 
                                    #line 384 
                                    dma_direct_sync_single_for_cpu(dev,addr,size,dir);
  else 
    #line 385 
    if (ops->sync_single_for_cpu != (void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction ))0) 
      #line 386 
      (*(ops->sync_single_for_cpu))(dev,addr,size,dir);
  #line 387 
  debug_dma_sync_single_for_cpu(dev,addr,size,(int)dir);
  #line 388 
  return;
}

#line 390  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_sync_single_for_device(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir)
{
  #line 394 
  struct dma_map_ops *ops = get_dma_ops(dev);
  #line 396 
  if ((long)(valid_dma_direction((int)dir) == 0) != 0L) {
    #line 397 
    ldv_inline_asm();
    #line 398 
    ldv_inline_asm();
    #line 399 
    ldv_inline_asm();
    #line 396 
    ;
  }
  #line 397 
  if ((int)dma_is_direct(ops) != 0) 
                                    #line 398 
                                    dma_direct_sync_single_for_device(dev,addr,size,dir);
  else 
    #line 399 
    if (ops->sync_single_for_device != (void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction ))0) 
      #line 400 
      (*(ops->sync_single_for_device))(dev,addr,size,dir);
  #line 401 
  debug_dma_sync_single_for_device(dev,addr,size,(int)dir);
  #line 402 
  return;
}

#line 433  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static int dma_mapping_error(struct device *dev, dma_addr_t dma_addr)
{
  #line 435 
  debug_dma_mapping_error(dev,dma_addr);
  #line 437 
  if (dma_addr == 18446744073709551615ULL) 
                                           #line 438 
                                           return -12;
  #line 439 
  return 0;
}

#line 460 
#line 460 
int dma_set_mask(struct device *, u64);
#line 461 
#line 461 
int dma_set_coherent_mask(struct device *, u64);
#line 580  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static dma_addr_t dma_map_single_attrs(struct device *dev, void *ptr, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 584 
  int __ret_warn_once;
  {
    #line 584 
    bool __warned;
    #line 584 
    __ret_warn_once = (int)is_vmalloc_addr(ptr) != 0;
    #line 584 
    if ((long)(__ret_warn_once != 0) != 0L && (long)(! __warned) != 0L) {
      #line 584 
      __warned = (_Bool)1;
      {
        #line 584 
        int __ret_warn_on = 1;
        #line 584 
        if ((long)(__ret_warn_on != 0) != 0L) {
          #line 584 
          __warn_printk((char *)"%s %s: ",dev_driver_string(dev),dev_name(dev));
          #line 585 
          ldv_inline_asm();
          #line 586 
          ldv_inline_asm();
        }
        #line 584 
        long tmp_2 = (long)(__ret_warn_on != 0);
      }
    }
    }
  #line 584 
  if ((long)((long)(__ret_warn_once != 0)) != 0L) 
                                                  #line 586 
                                                  return 18446744073709551615ULL;
  #line 587 
  debug_dma_map_single(dev,ptr,size);
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  return dma_map_page_attrs(dev,
                           (struct page *)((__phys_addr((unsigned long)ptr) >> 12) + vmemmap_base),
                           (unsigned long)ptr & 4095UL,size,dir,attrs);
}

#line 592  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_unmap_single_attrs(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 595 
  dma_unmap_page_attrs(dev,addr,size,dir,attrs);
  #line 596 
  return;
}

#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned int skb_frag_size(skb_frag_t *frag)
{
  #line 327 
  return frag->bv_len;
}

#line 1023 
#line 1023 
void consume_skb(struct sk_buff *);
#line 1214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void __skb_set_hash(struct sk_buff *skb, __u32 hash, bool is_sw, bool is_l4)
{
  #line 1216 
  skb->l4_hash = (unsigned char)is_l4;
  #line 1217 
  skb->sw_hash = (unsigned char)is_sw;
  #line 1218 
  skb->hash = hash;
  #line 1219 
  return;
}

#line 1222  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_set_hash(struct sk_buff *skb, __u32 hash, enum pkt_hash_types type)
{
  #line 1225 
  __skb_set_hash(skb,hash,(_Bool)0,(_Bool)(type == (unsigned int)PKT_HASH_TYPE_L4));
  #line 1226 
  return;
}

#line 1381  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_end_pointer(struct sk_buff *skb)
{
  #line 1383 
  return skb->head + (unsigned long)skb->end;
}

#line 1405  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static struct skb_shared_hwtstamps *skb_hwtstamps(struct sk_buff *skb)
{
  #line 1407 
  return & ((struct skb_shared_info *)skb_end_pointer(skb))->hwtstamps;
}

#line 2070  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned int skb_headlen(struct sk_buff *skb)
{
  #line 2072 
  return skb->len - skb->data_len;
}

#line 2189 
#line 2189 
void *skb_put(struct sk_buff *, unsigned int);
#line 2338  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_reserve(struct sk_buff *skb, int len)
{
  #line 2340 
  skb->data += (unsigned long)len;
  #line 2341 
  skb->tail += (unsigned int)len;
  #line 2342 
  return;
}

#line 2475  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_network_header(struct sk_buff *skb)
{
  #line 2477 
  return skb->head + (unsigned long)skb->network_header;
}

#line 2762 
#line 2762 
struct sk_buff *__netdev_alloc_skb(struct net_device *, unsigned int, gfp_t);
#line 2778  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static struct sk_buff *netdev_alloc_skb(struct net_device *dev, unsigned int length)
{
  #line 2781 
  return __netdev_alloc_skb(dev,length,2592U);
}

#line 2896  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned int skb_frag_off(skb_frag_t *frag)
{
  #line 2898 
  return frag->bv_offset;
}

#line 2938  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static struct page *skb_frag_page(skb_frag_t *frag)
{
  #line 2940 
  return frag->bv_page;
}

#line 3067  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static dma_addr_t skb_frag_dma_map(struct device *dev, skb_frag_t *frag, size_t offset, size_t size, enum dma_data_direction dir)
{
  #line 3072 
  ;
  #line 3072 
  ;
  #line 3072 
  ;
  #line 3072 
  ;
  #line 3072 
  return dma_map_page_attrs(dev,skb_frag_page(frag),
                           (unsigned long)skb_frag_off(frag) + offset,size,
                           dir,0UL);
}

#line 4277  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static u16 skb_get_queue_mapping(struct sk_buff *skb)
{
  #line 4279 
  return skb->queue_mapping;
}

#line 4287  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_record_rx_queue(struct sk_buff *skb, u16 rx_queue)
{
  #line 4289 
  skb->queue_mapping = (unsigned short)((unsigned int)rx_queue + 1U);
  #line 4290 
  return;
}

#line 4467  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_checksum_none_assert(struct sk_buff *skb)
{
  #line 4469 
  return;
}

#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/u64_stats_sync.h"
__inline static void u64_stats_init(struct u64_stats_sync *syncp)
{
  #line 117 
  return;
}

#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/u64_stats_sync.h"
__inline static unsigned int __u64_stats_fetch_begin(struct u64_stats_sync *syncp)
{
  #line 163 
  return 0U;
}

#line 175  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/u64_stats_sync.h"
__inline static bool __u64_stats_fetch_retry(struct u64_stats_sync *syncp, unsigned int start)
{
  #line 181 
  return (_Bool)0;
}

#line 200  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/u64_stats_sync.h"
__inline static unsigned int u64_stats_fetch_begin_irq(struct u64_stats_sync *syncp)
{
  #line 205 
  return __u64_stats_fetch_begin(syncp);
}

#line 208  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/u64_stats_sync.h"
__inline static bool u64_stats_fetch_retry_irq(struct u64_stats_sync *syncp, unsigned int start)
{
  #line 214 
  return __u64_stats_fetch_retry(syncp,start);
}

#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hardirq.h"
#line 12 
void synchronize_irq(unsigned int);
#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 947  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/0/concurrency safety/weaver/vxge-main.i.aux"
static int cif_request_irq(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char *name, void *dev);
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 939  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/0/concurrency safety/weaver/vxge-main.i.aux"
static void *cif_free_irq(unsigned int ldv_func_arg1, void *ldv_func_arg2);
#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 237 
void disable_irq(unsigned int);
#line 239 
#line 239 
void enable_irq(unsigned int);
#line 423  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 423 
void __napi_schedule(struct napi_struct *);
#line 431 
#line 431 
bool napi_schedule_prep(struct napi_struct *);
#line 440  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void napi_schedule(struct napi_struct *n)
{
  #line 442 
  if ((int)napi_schedule_prep(n) != 0) 
                                       #line 443 
                                       __napi_schedule(n);
  #line 444 
  return;
}

#line 468 
#line 468 
bool napi_complete_done(struct napi_struct *, int);
#line 503 
#line 503 
void napi_disable(struct napi_struct *);
#line 512  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void napi_enable(struct napi_struct *n)
{
  #line 514 
  int tmp_0;
  #line 514 
  if (test_bit(0L,& n->state)) 
                               #line 514 
                               tmp_0 = 0; else 
                                               #line 514 
                                               tmp_0 = 1;
  #line 514 
  if ((long)tmp_0 != 0L) {
    #line 515 
    ldv_inline_asm();
    #line 516 
    ldv_inline_asm();
    #line 517 
    ldv_inline_asm();
    #line 514 
    ;
  }
  #line 516 
  cif_clear_bit(0L,& n->state);
  #line 517 
  cif_clear_bit(3L,& n->state);
  #line 518 
  return;
}

#line 2132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static struct netdev_queue *netdev_get_tx_queue(struct net_device *dev, unsigned int index)
{
  #line 2135 
  return dev->_tx + (unsigned long)index;
}

#line 2203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void *netdev_priv(struct net_device *dev)
{
  #line 2205 
  return (void *)((char *)dev + 3328UL);
}

#line 2234 
#line 2234 
void netif_napi_add(struct net_device *, struct napi_struct *, int (*)(struct napi_struct *, int ), int);
#line 2263 
#line 2263 
void netif_napi_del(struct napi_struct *);
#line 2679 
#line 979  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/0/concurrency safety/weaver/vxge-main.i.aux"
static void cif_free_netdev(struct net_device *dev);
#line 3104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_start_queue(struct netdev_queue *dev_queue)
{
  #line 3106 
  cif_clear_bit(0L,& dev_queue->state);
  #line 3107 
  return;
}

#line 3120  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_start_all_queues(struct net_device *dev)
{
  #line 3122 
  unsigned int i;
  #line 3124 
  i = 0U;
  #line 3124 
  while (dev->num_tx_queues > i) {
    {
      #line 3125 
      struct netdev_queue *txq = netdev_get_tx_queue(dev,i);
      #line 3126 
      netif_tx_start_queue(txq);
    }
    #line 3124 
    i ++;
  }
  #line 3128 
  return;
}

#line 3130 
#line 3130 
void netif_tx_wake_queue(struct netdev_queue *);
#line 3144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_wake_all_queues(struct net_device *dev)
{
  #line 3146 
  unsigned int i;
  #line 3148 
  i = 0U;
  #line 3148 
  while (dev->num_tx_queues > i) {
    {
      #line 3149 
      struct netdev_queue *txq = netdev_get_tx_queue(dev,i);
      #line 3150 
      netif_tx_wake_queue(txq);
    }
    #line 3148 
    i ++;
  }
  #line 3152 
  return;
}

#line 3154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_stop_queue(struct netdev_queue *dev_queue)
{
  #line 3156 
  cif_set_bit(0L,& dev_queue->state);
  #line 3157 
  return;
}

#line 3171 
#line 3171 
void netif_tx_stop_all_queues(struct net_device *);
#line 3174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netif_tx_queue_stopped(struct netdev_queue *dev_queue)
{
  #line 3176 
  return test_bit(0L,& dev_queue->state);
}

#line 3387  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netif_running(struct net_device *dev)
{
  #line 3389 
  return test_bit(0L,& dev->state);
}

#line 3609 
#line 3609 
int netif_get_num_default_rss_queues(void);
#line 3616 
#line 3616 
void __dev_kfree_skb_irq(struct sk_buff *, enum skb_free_reason);
#line 3617 
#line 3617 
void __dev_kfree_skb_any(struct sk_buff *, enum skb_free_reason);
#line 3643  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void dev_consume_skb_irq(struct sk_buff *skb)
{
  #line 3645 
  __dev_kfree_skb_irq(skb,(enum skb_free_reason)SKB_REASON_CONSUMED);
  #line 3646 
  return;
}

#line 3648  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void dev_kfree_skb_any(struct sk_buff *skb)
{
  #line 3650 
  __dev_kfree_skb_any(skb,(enum skb_free_reason)SKB_REASON_DROPPED);
  #line 3651 
  return;
}

#line 3665 
#line 3665 
gro_result_t napi_gro_receive(struct napi_struct *, struct sk_buff *);
#line 3812 
#line 3812 
void netif_carrier_on(struct net_device *);
#line 3814 
#line 3814 
void netif_carrier_off(struct net_device *);
#line 3881 
#line 3881 
void netif_device_detach(struct net_device *);
#line 3883 
#line 3883 
void netif_device_attach(struct net_device *);
#line 3957  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool __netif_tx_trylock(struct netdev_queue *txq)
{
  #line 3959 
  bool ok = (_Bool)(cif_spin_trylock__xmit_lock_of_netdev_queue(& txq->_xmit_lock) != 0);
  #line 3960 
  if ((long)((int)ok != 0) != 0L) {
    #line 3961 
    int pscr_ret__;
    #line 3961 
    __this_cpu_preempt_check((char *)"read");
    {
      #line 3961 
      void *__vpp_verify = (void *)0;
      #line 3961 
      void *tmp_2 = __vpp_verify;
    }
    #line 3961 
    switch (4UL) {
      #line 3961 
      int pfo_ret___0;
      #line 3961 
      int pfo_ret___1;
      #line 3961 
      int pfo_ret___2;
      #line 3961 
      int pfo_ret__;
      #line 3961 
      case (unsigned long)1: 
                             #line 3961 
      ;
      #line 3961 
      switch (4UL) {
        #line 3961 
        case (unsigned long)1: 
                               #line 3961 
        ;
        #line 3962 
        ldv_inline_asm();
        #line 3961 
        break;
        #line 3961 
        case (unsigned long)2: 
                               #line 3961 
        ;
        #line 3962 
        ldv_inline_asm();
        #line 3961 
        break;
        #line 3961 
        case (unsigned long)4: 
                               #line 3961 
        ;
        #line 3962 
        ldv_inline_asm();
        #line 3961 
        break;
        #line 3961 
        case (unsigned long)8: 
                               #line 3961 
        ;
        #line 3962 
        ldv_inline_asm();
        #line 3961 
        break;
        #line 3961 
        default: 
                 #line 3961 
        ;
        #line 3961 
        __bad_percpu_size();
      }
      #line 3961 
      pscr_ret__ = pfo_ret__;
      #line 3961 
      break;
      #line 3961 
      case (unsigned long)2: 
                             #line 3961 
      ;
      #line 3961 
      switch (4UL) {
        #line 3961 
        case (unsigned long)1: 
                               #line 3961 
        ;
        #line 3962 
        ldv_inline_asm();
        #line 3961 
        break;
        #line 3961 
        case (unsigned long)2: 
                               #line 3961 
        ;
        #line 3962 
        ldv_inline_asm();
        #line 3961 
        break;
        #line 3961 
        case (unsigned long)4: 
                               #line 3961 
        ;
        #line 3962 
        ldv_inline_asm();
        #line 3961 
        break;
        #line 3961 
        case (unsigned long)8: 
                               #line 3961 
        ;
        #line 3962 
        ldv_inline_asm();
        #line 3961 
        break;
        #line 3961 
        default: 
                 #line 3961 
        ;
        #line 3961 
        __bad_percpu_size();
      }
      #line 3961 
      pscr_ret__ = pfo_ret___0;
      #line 3961 
      break;
      #line 3961 
      case (unsigned long)4: 
                             #line 3961 
      ;
      #line 3961 
      switch (4UL) {
        #line 3961 
        case (unsigned long)1: 
                               #line 3961 
        ;
        #line 3962 
        ldv_inline_asm();
        #line 3961 
        break;
        #line 3961 
        case (unsigned long)2: 
                               #line 3961 
        ;
        #line 3962 
        ldv_inline_asm();
        #line 3961 
        break;
        #line 3961 
        case (unsigned long)4: 
                               #line 3961 
        ;
        #line 3962 
        ldv_inline_asm();
        #line 3961 
        break;
        #line 3961 
        case (unsigned long)8: 
                               #line 3961 
        ;
        #line 3962 
        ldv_inline_asm();
        #line 3961 
        break;
        #line 3961 
        default: 
                 #line 3961 
        ;
        #line 3961 
        __bad_percpu_size();
      }
      #line 3961 
      pscr_ret__ = pfo_ret___1;
      #line 3961 
      break;
      #line 3961 
      case (unsigned long)8: 
                             #line 3961 
      ;
      #line 3961 
      switch (4UL) {
        #line 3961 
        case (unsigned long)1: 
                               #line 3961 
        ;
        #line 3962 
        ldv_inline_asm();
        #line 3961 
        break;
        #line 3961 
        case (unsigned long)2: 
                               #line 3961 
        ;
        #line 3962 
        ldv_inline_asm();
        #line 3961 
        break;
        #line 3961 
        case (unsigned long)4: 
                               #line 3961 
        ;
        #line 3962 
        ldv_inline_asm();
        #line 3961 
        break;
        #line 3961 
        case (unsigned long)8: 
                               #line 3961 
        ;
        #line 3962 
        ldv_inline_asm();
        #line 3961 
        break;
        #line 3961 
        default: 
                 #line 3961 
        ;
        #line 3961 
        __bad_percpu_size();
      }
      #line 3961 
      pscr_ret__ = pfo_ret___2;
      #line 3961 
      break;
      #line 3961 
      default: 
               #line 3961 
      ;
      #line 3961 
      __bad_size_call_parameter();
      #line 3961 
      break;
    }
    #line 3961 
    txq->xmit_lock_owner = pscr_ret__;
  }
  #line 3962 
  return ok;
}

#line 3965  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void __netif_tx_unlock(struct netdev_queue *txq)
{
  #line 3967 
  txq->xmit_lock_owner = -1;
  #line 3968 
  cif_spin_unlock__xmit_lock_of_netdev_queue(& txq->_xmit_lock);
  #line 3969 
  return;
}

#line 4131 
#line 971  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/0/concurrency safety/weaver/vxge-main.i.aux"
static int cif_register_netdev(struct net_device *dev);
#line 4132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 995  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/0/concurrency safety/weaver/vxge-main.i.aux"
static void cif_unregister_netdev(struct net_device *dev);
#line 4750  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 4750 
void netdev_err(struct net_device *, char * , ...);
#line 4754 
#line 4754 
void netdev_notice(struct net_device *, char * , ...);
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
#line 32 
__be16 eth_type_trans(struct sk_buff *, struct net_device *);
#line 47 
#line 47 
int eth_validate_addr(struct net_device *);
#line 51 
#line 963  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/0/concurrency safety/weaver/vxge-main.i.aux"
static struct net_device *cif_alloc_etherdev_mqs(int sizeof_priv, unsigned int txqs, unsigned int rxqs);
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_zero_ether_addr(u8 *addr)
{
  #line 101 
  return (_Bool)((*((u32 *)addr) | (unsigned int)*((u16 *)(addr + 4U))) == 0U);
}

#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_multicast_ether_addr(u8 *addr)
{
  #line 119 
  u32 a = *((u32 *)addr);
  #line 126 
  return (_Bool)((a & 1U) != 0U);
}

#line 191  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_valid_ether_addr(u8 *addr)
{
  #line 195 
  int tmp_1;
  #line 195 
  if (is_multicast_ether_addr(addr)) 
                                     #line 195 
                                     tmp_1 = 0;
  else {
    #line 195 
    if (is_zero_ether_addr(addr)) 
                                  #line 195 
                                  tmp_1 = 0; else 
                                                  #line 195 
                                                  tmp_1 = 1;
  }
  #line 195 
  return (_Bool)(tmp_1 != 0);
}

#line 315  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool ether_addr_equal(u8 *addr1, u8 *addr2)
{
  #line 318 
  u32 fold = (*((u32 *)addr1) ^ *((u32 *)addr2)) | (unsigned int)((int)*((u16 *)(addr1 + 4U)) ^ (int)*((u16 *)(addr2 + 4U)));
  #line 321 
  return (_Bool)(fold == 0U);
}

#line 510  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
__inline static void __vlan_hwaccel_put_tag(struct sk_buff *skb, __be16 vlan_proto, u16 vlan_tci)
{
  #line 513 
  skb->vlan_proto = vlan_proto;
  #line 514 
  skb->vlan_tci = vlan_tci;
  #line 515 
  skb->vlan_present = (unsigned char)1U;
  #line 516 
  return;
}

#line 488  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static int pci_channel_offline(struct pci_dev *pdev)
{
  #line 490 
  return pdev->error_state != 1U;
}

#line 1042 
#line 1042 
int pci_find_ext_capability(struct pci_dev *, int);
#line 1084 
#line 1084 
int pci_read_config_word(struct pci_dev *, int, u16 *);
#line 1131 
#line 1131 
int pci_enable_device(struct pci_dev *);
#line 1157 
#line 1157 
void pci_disable_device(struct pci_dev *);
#line 1160 
#line 1160 
void pci_set_master(struct pci_dev *);
#line 1284 
#line 1284 
int pci_request_region(struct pci_dev *, int, char *);
#line 1285 
#line 1285 
void pci_release_region(struct pci_dev *, int);
#line 1346 
#line 1017  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/0/concurrency safety/weaver/vxge-main.i.aux"
static int cif___pci_register_driver(struct pci_driver *ldv_func_arg1, struct module *ldv_func_arg2, char *mod_name);
#line 1352  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
#line 1025  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/0/concurrency safety/weaver/vxge-main.i.aux"
static void cif_pci_unregister_driver(struct pci_driver *dev);
#line 1433  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
#line 1433 
void pci_disable_msix(struct pci_dev *);
#line 1437 
#line 1437 
int pci_enable_msix_range(struct pci_dev *, struct msix_entry *, int, int);
#line 1833  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static void *pci_get_drvdata(struct pci_dev *pdev)
{
  #line 1835 
  return dev_get_drvdata(& pdev->dev);
}

#line 1838  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static void pci_set_drvdata(struct pci_dev *pdev, void *data)
{
  #line 1840 
  dev_set_drvdata(& pdev->dev,data);
  #line 1841 
  return;
}

#line 2022 
#line 2022 
void *pci_ioremap_bar(struct pci_dev *, int);
#line 2029 
#line 2029 
int pci_enable_sriov(struct pci_dev *, int);
#line 2030 
#line 2030 
void pci_disable_sriov(struct pci_dev *);
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci-dma-compat.h"
__inline static dma_addr_t pci_map_single(struct pci_dev *hwdev, void *ptr, size_t size, int direction)
{
  #line 40 
  return dma_map_single_attrs(& hwdev->dev,ptr,size,
                           (enum dma_data_direction)direction,0UL);
}

#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci-dma-compat.h"
__inline static void pci_unmap_single(struct pci_dev *hwdev, dma_addr_t dma_addr, size_t size, int direction)
{
  #line 47 
  dma_unmap_single_attrs(& hwdev->dev,dma_addr,size,(enum dma_data_direction)direction,0UL);
  #line 48 
  return;
}

#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci-dma-compat.h"
__inline static void pci_unmap_page(struct pci_dev *hwdev, dma_addr_t dma_address, size_t size, int direction)
{
  #line 61 
  dma_unmap_page_attrs(& hwdev->dev,dma_address,size,(enum dma_data_direction)direction,0UL);
  #line 62 
  return;
}

#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci-dma-compat.h"
__inline static void pci_dma_sync_single_for_cpu(struct pci_dev *hwdev, dma_addr_t dma_handle, size_t size, int direction)
{
  #line 82 
  dma_sync_single_for_cpu(& hwdev->dev,dma_handle,size,(enum dma_data_direction)direction);
  #line 83 
  return;
}

#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci-dma-compat.h"
__inline static void pci_dma_sync_single_for_device(struct pci_dev *hwdev, dma_addr_t dma_handle, size_t size, int direction)
{
  #line 89 
  dma_sync_single_for_device(& hwdev->dev,dma_handle,size,(enum dma_data_direction)direction);
  #line 90 
  return;
}

#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci-dma-compat.h"
__inline static int pci_dma_mapping_error(struct pci_dev *pdev, dma_addr_t dma_addr)
{
  #line 109 
  return dma_mapping_error(& pdev->dev,dma_addr);
}

#line 113  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci-dma-compat.h"
__inline static int pci_set_dma_mask(struct pci_dev *dev, u64 mask)
{
  #line 115 
  return dma_set_mask(& dev->dev,mask);
}

#line 118  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci-dma-compat.h"
__inline static int pci_set_consistent_dma_mask(struct pci_dev *dev, u64 mask)
{
  #line 120 
  return dma_set_coherent_mask(& dev->dev,mask);
}

#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ip.h"
__inline static struct iphdr *ip_hdr(struct sk_buff *skb)
{
  #line 21 
  return (struct iphdr *)skb_network_header(skb);
}

#line 385  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip.h"
__inline static bool ip_is_fragment(struct iphdr *iph)
{
  #line 387 
  return (_Bool)(((int)iph->frag_off & 65343) != 0);
}

#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/firmware.h"
#line 1003  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/0/concurrency safety/weaver/vxge-main.i.aux"
static int cif_request_firmware(struct firmware **fw, char *name, struct device *device);
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/firmware.h"
#line 1010  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/0/concurrency safety/weaver/vxge-main.i.aux"
static void cif_release_firmware(struct firmware *fw);
#line 1744  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.h"
#line 1744 
enum vxge_hw_status vxge_hw_mrpcim_stats_access(struct __vxge_hw_device *hldev, u32 operation, u32 location, u32 offset, u64 *stat);
#line 1779 
#line 1779 
enum vxge_hw_status vxge_hw_mgmt_reg_read(struct __vxge_hw_device *hldev, enum vxge_hw_mgmt_reg_type type, u32 index, u32 offset, u64 *value);
#line 1786 
#line 1786 
enum vxge_hw_status vxge_hw_mgmt_reg_write(struct __vxge_hw_device *hldev, enum vxge_hw_mgmt_reg_type type, u32 index, u32 offset, u64 value);
#line 1464  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.h"
#line 1464 
void vxge_hw_device_debug_set(struct __vxge_hw_device *hldev, enum vxge_debug_level level, u32 mask);
#line 1470 
#line 1470 
u32 vxge_hw_device_error_level_get(struct __vxge_hw_device *hldev);
#line 1473 
#line 1473 
u32 vxge_hw_device_trace_level_get(struct __vxge_hw_device *hldev);
#line 1514  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.h"
__inline static void vxge_hw_ring_rxd_1b_set(void *rxdh, dma_addr_t dma_pointer, u32 size)
{
  #line 1519 
  struct vxge_hw_ring_rxd_1 *rxdp = (struct vxge_hw_ring_rxd_1 *)rxdh;
  #line 1520 
  rxdp->buffer0_ptr = dma_pointer;
  #line 1521 
  rxdp->control_1 &= 13835339530258874367ULL;
  #line 1522 
  rxdp->control_1 |= (unsigned long long)size << 48;
  #line 1523 
  return;
}

#line 1540  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.h"
__inline static void vxge_hw_ring_rxd_1b_get(struct __vxge_hw_ring *ring_handle, void *rxdh, u32 *pkt_length)
{
  #line 1545 
  struct vxge_hw_ring_rxd_1 *rxdp = (struct vxge_hw_ring_rxd_1 *)rxdh;
  #line 1547 
  *pkt_length = (unsigned int)(rxdp->control_1 >> 48) & 16383U;
  #line 1549 
  return;
}

#line 1562  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.h"
__inline static void vxge_hw_ring_rxd_1b_info_get(struct __vxge_hw_ring *ring_handle, void *rxdh, struct vxge_hw_ring_rxd_info *rxd_info)
{
  #line 1568 
  struct vxge_hw_ring_rxd_1 *rxdp = (struct vxge_hw_ring_rxd_1 *)rxdh;
  #line 1569 
  rxd_info->syn_flag = (unsigned int)(rxdp->control_0 >> 47) & 1U;
  #line 1571 
  rxd_info->is_icmp = (unsigned int)(rxdp->control_0 >> 46) & 1U;
  #line 1573 
  rxd_info->fast_path_eligible = (unsigned int)(rxdp->control_0 >> 55) & 1U;
  #line 1575 
  rxd_info->l3_cksum_valid = (unsigned int)(rxdp->control_0 >> 54) & 1U;
  #line 1577 
  rxd_info->l3_cksum = (unsigned int)(rxdp->control_0 >> 16) & 65535U;
  #line 1579 
  rxd_info->l4_cksum_valid = (unsigned int)(rxdp->control_0 >> 53) & 1U;
  #line 1581 
  rxd_info->l4_cksum = (unsigned int)rxdp->control_0 & 65535U;
  #line 1583 
  rxd_info->frame = (unsigned int)(rxdp->control_0 >> 37) & 3U;
  #line 1585 
  rxd_info->proto = (unsigned int)(rxdp->control_0 >> 32) & 31U;
  #line 1587 
  rxd_info->is_vlan = (unsigned int)(rxdp->control_0 >> 39) & 1U;
  #line 1589 
  rxd_info->vlan = (unsigned int)rxdp->control_1 & 65535U;
  #line 1591 
  rxd_info->rth_bucket = (unsigned int)(rxdp->control_0 >> 57) & 127U;
  #line 1593 
  rxd_info->rth_it_hit = (unsigned int)(rxdp->control_0 >> 44) & 1U;
  #line 1595 
  rxd_info->rth_spdm_hit = (unsigned int)(rxdp->control_0 >> 45) & 1U;
  #line 1597 
  rxd_info->rth_hash_type = (unsigned int)(rxdp->control_0 >> 40) & 15U;
  #line 1599 
  rxd_info->rth_value = (unsigned int)(rxdp->control_1 >> 16);
  #line 1601 
  return;
}

#line 1612  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.h"
__inline static void *vxge_hw_ring_rxd_private_get(void *rxdh)
{
  #line 1614 
  struct vxge_hw_ring_rxd_1 *rxdp = (struct vxge_hw_ring_rxd_1 *)rxdh;
  #line 1615 
  return (void *)rxdp->host_control;
}

#line 1634  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.h"
__inline static void vxge_hw_fifo_txdl_cksum_set_bits(void *txdlh, u64 cksum_bits)
{
  #line 1636 
  struct vxge_hw_fifo_txd *txdp = (struct vxge_hw_fifo_txd *)txdlh;
  #line 1637 
  txdp->control_1 |= cksum_bits;
  #line 1638 
  return;
}

#line 1654  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.h"
__inline static void vxge_hw_fifo_txdl_mss_set(void *txdlh, int mss)
{
  #line 1656 
  struct vxge_hw_fifo_txd *txdp = (struct vxge_hw_fifo_txd *)txdlh;
  #line 1658 
  txdp->control_0 |= 8589934592ULL;
  #line 1659 
  txdp->control_0 |= (unsigned long long)mss << 16;
  #line 1660 
  return;
}

#line 1670  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.h"
__inline static void vxge_hw_fifo_txdl_vlan_set(void *txdlh, u16 vlan_tag)
{
  #line 1672 
  struct vxge_hw_fifo_txd *txdp = (struct vxge_hw_fifo_txd *)txdlh;
  #line 1674 
  txdp->control_1 |= 281474976710656ULL;
  #line 1675 
  txdp->control_1 |= (unsigned long long)vlan_tag << 32;
  #line 1676 
  return;
}

#line 1689  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.h"
__inline static void *vxge_hw_fifo_txdl_private_get(void *txdlh)
{
  #line 1691 
  struct vxge_hw_fifo_txd *txdp = (struct vxge_hw_fifo_txd *)txdlh;
  #line 1693 
  return (void *)txdp->host_control;
}

#line 1849 
#line 1849 
enum vxge_hw_status vxge_hw_device_hw_info_get(void *bar0, struct vxge_hw_device_hw_info *hw_info);
#line 1853 
#line 1853 
enum vxge_hw_status vxge_hw_device_config_default_get(struct vxge_hw_device_config *device_config);
#line 1864  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.h"
__inline static enum vxge_hw_device_link_state vxge_hw_device_link_state_get(struct __vxge_hw_device *devh)
{
  #line 1867 
  return devh->link_state;
}

#line 1870 
#line 1870 
void vxge_hw_device_terminate(struct __vxge_hw_device *hldev);
#line 1875 
#line 1875 
u16 vxge_hw_device_link_width_get(struct __vxge_hw_device *hldev);
#line 1880 
#line 1880 
enum vxge_hw_status vxge_hw_device_initialize(struct __vxge_hw_device **devh, struct vxge_hw_device_attr *attr, struct vxge_hw_device_config *device_config);
#line 1891 
#line 1891 
enum vxge_hw_status vxge_hw_device_setpause_data(struct __vxge_hw_device *hldev, u32 port, u32 tx, u32 rx);
#line 1985 
#line 1985 
enum vxge_hw_status vxge_hw_vpath_open(struct __vxge_hw_device *hldev, struct vxge_hw_vpath_attr *attr, struct __vxge_hw_vpath_handle **vpath_handle);
#line 1990 
#line 1990 
enum vxge_hw_status vxge_hw_vpath_close(struct __vxge_hw_vpath_handle *vp);
#line 1994 
#line 1994 
enum vxge_hw_status vxge_hw_vpath_reset(struct __vxge_hw_vpath_handle *vp);
#line 1998 
#line 1998 
enum vxge_hw_status vxge_hw_vpath_recover_from_reset(struct __vxge_hw_vpath_handle *vp);
#line 2002 
#line 2002 
void vxge_hw_vpath_enable(struct __vxge_hw_vpath_handle *vp);
#line 2005 
#line 2005 
enum vxge_hw_status vxge_hw_vpath_check_leak(struct __vxge_hw_ring *ring);
#line 2007 
#line 2007 
enum vxge_hw_status vxge_hw_vpath_mtu_set(struct __vxge_hw_vpath_handle *vp, u32 new_mtu);
#line 2012 
#line 2012 
void vxge_hw_vpath_rx_doorbell_init(struct __vxge_hw_vpath_handle *vp);
#line 2028 
#line 2028 
enum vxge_hw_status vxge_hw_vpath_strip_fcs_check(struct __vxge_hw_device *hldev, u64 vpath_mask);
#line 2054 
#line 2054 
enum vxge_hw_status vxge_hw_vpath_rts_rth_itable_set(struct __vxge_hw_vpath_handle **vpath_handles, u32 vpath_count, u8 *mtable, u8 *itable, u32 itable_size);
#line 2061 
#line 2061 
enum vxge_hw_status vxge_hw_vpath_rts_rth_set(struct __vxge_hw_vpath_handle *vp, enum vxge_hw_rth_algoritms algorithm, struct vxge_hw_rth_hash_types *hash_type, u16 bucket_size);
#line 2068 
#line 2068 
enum vxge_hw_status __vxge_hw_device_is_privilaged(u32 host_type, u32 func_id);
#line 2074 
#line 2074 
void vxge_hw_device_wait_receive_idle(struct __vxge_hw_device *hldev);
#line 2077 
#line 2077 
enum vxge_hw_status vxge_hw_upgrade_read_version(struct __vxge_hw_device *hldev, u32 *major, u32 *minor, u32 *build);
#line 2080 
#line 2080 
enum vxge_hw_status vxge_hw_flash_fw(struct __vxge_hw_device *hldev);
#line 2083 
#line 2083 
enum vxge_hw_status vxge_update_fw_image(struct __vxge_hw_device *hldev, u8 *fwdata, int size);
#line 2087 
#line 2087 
enum vxge_hw_status vxge_hw_vpath_eprom_img_ver_get(struct __vxge_hw_device *hldev, struct eprom_image *img);
#line 2090 
#line 2090 
int vxge_hw_vpath_wait_receive_idle(struct __vxge_hw_device *hldev, u32 vp_id);
#line 420  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-main.h"
__inline static void vxge_os_timer(struct timer_list *timer, void (*func)(struct timer_list *), unsigned long timeout)
{
  {
    #line 423 
    struct lock_class_key __key;
    #line 423 
    init_timer_key(timer,func,0U,(char *)"(timer)",& __key);
  }
  #line 424 
  cif_mod_timer(timer,jiffies + timeout);
  #line 425 
  return;
}

#line 427 
#line 427 
void vxge_initialize_ethtool_ops(struct net_device *ndev);
#line 428 
#line 4131  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-main.c"
int vxge_fw_upgrade(struct vxgedev *vdev, char *fw_name, int override);
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-main.c"
static struct pci_device_id vxge_id_table[3U] = {{.vendor = 6101U, .device = 22323U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 6101U, .device = 22579U, .subvendor = 4294967295U, .subdevice = 4294967295U}};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-main.c"
struct pci_device_id __mod_pci__vxge_id_table_device_table[3U];
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-main.c"
static int vlan_tag_strip = 1;
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-main.c"
static int addr_learn_en = 0;
#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-main.c"
static int max_config_port = 1;
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-main.c"
static int max_config_vpath = -1;
#line 80  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-main.c"
static int max_mac_vpath = 30;
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-main.c"
static int max_config_dev = 255;
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-main.c"
static u16 vpath_selector[17U] = {[1] = (unsigned short)1U, (unsigned short)3U, (unsigned short)3U, (unsigned short)7U, (unsigned short)7U, (unsigned short)7U, (unsigned short)7U, (unsigned short)15U, (unsigned short)15U, (unsigned short)15U, (unsigned short)15U, (unsigned short)15U, (unsigned short)15U, (unsigned short)15U, (unsigned short)15U, (unsigned short)31U};
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-main.c"
static unsigned int bw_percentage[17U] = {255U, 255U, 255U, 255U, 255U, 255U, 255U, 255U, 255U, 255U, 255U, 255U, 255U, 255U, 255U, 255U, 255U};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-main.c"
static struct vxge_drv_config *driver_config;
#line 90 
#line 1970 
static enum vxge_hw_status vxge_reset_all_vpaths(struct vxgedev *vdev);
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-main.c"
__inline static int is_vxge_card_up(struct vxgedev *vdev)
{
  #line 94 
  return (int)test_bit(1L,& vdev->state);
}

#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-main.c"
__inline static void VXGE_COMPLETE_VPATH_TX(struct vxge_fifo *fifo)
{
  #line 100 
  struct sk_buff **temp;
  #line 102 
  struct sk_buff *completed[128U];
  #line 103 
  int more;
  #line 99 
  struct sk_buff **skb_ptr = (struct sk_buff **)0;
  #line 105 
  while (1) {
    {
      #line 106 
      more = 0;
      #line 107 
      skb_ptr = (struct sk_buff **)(& completed);
      #line 109 
      if ((int)__netif_tx_trylock(fifo->txq) != 0) {
        #line 110 
        vxge_hw_vpath_poll_tx(fifo->handle,& skb_ptr,128,& more);
        #line 112 
        __netif_tx_unlock(fifo->txq);
      }
      #line 116 
      temp = (struct sk_buff **)(& completed);
      #line 116 
      while (temp != skb_ptr) {
        #line 117 
        dev_consume_skb_irq(*temp);
        #line 116 
        temp ++;
      }
    }
    #line 118 
    if (! (more != 0)) 
                       #line 105 
                       break;
  }
  #line 119 
  return;
}

#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-main.c"
__inline static void VXGE_COMPLETE_ALL_TX(struct vxgedev *vdev)
{
  #line 123 
  int i;
  #line 126 
  i = 0;
  #line 126 
  while (vdev->no_of_vpath > i) {
    #line 127 
    VXGE_COMPLETE_VPATH_TX(& (vdev->vpaths + (unsigned long)i)->fifo);
    #line 126 
    i ++;
  }
  #line 128 
  return;
}

#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-main.c"
__inline static void VXGE_COMPLETE_ALL_RX(struct vxgedev *vdev)
{
  #line 132 
  int i;
  #line 133 
  struct vxge_ring *ring;
  #line 136 
  i = 0;
  #line 136 
  while (vdev->no_of_vpath > i) {
    #line 137 
    ring = & (vdev->vpaths + (unsigned long)i)->ring;
    #line 138 
    vxge_hw_vpath_poll_rx(ring->handle);
    #line 136 
    i ++;
  }
  #line 140 
  return;
}

#line 148  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-main.c"
static void vxge_callback_link_up(struct __vxge_hw_device *hldev)
{
  #line 150 
  struct net_device *dev = hldev->ndev;
  #line 151 
  struct vxgedev *vdev = netdev_priv(dev);
  #line 153 
  printk((char *)"%s: %s:%d",(char *)(& (vdev->ndev)->name),(char *)"vxge_callback_link_up",154);
  #line 155 
  netdev_notice(vdev->ndev,(char *)"Link Up\n");
  #line 156 
  (vdev->stats.link_up) ++;
  #line 158 
  netif_carrier_on(vdev->ndev);
  #line 159 
  netif_tx_wake_all_queues(vdev->ndev);
  #line 161 
  printk((char *)"%s: %s:%d Exiting...",(char *)(& (vdev->ndev)->name),(char *)"vxge_callback_link_up",162);
  #line 162 
  return;
}

#line 171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-main.c"
static void vxge_callback_link_down(struct __vxge_hw_device *hldev)
{
  #line 173 
  struct net_device *dev = hldev->ndev;
  #line 174 
  struct vxgedev *vdev = netdev_priv(dev);
  #line 176 
  printk((char *)"%s: %s:%d",(char *)(& (vdev->ndev)->name),(char *)"vxge_callback_link_down",177);
  #line 178 
  netdev_notice(vdev->ndev,(char *)"Link Down\n");
  #line 180 
  (vdev->stats.link_down) ++;
  #line 181 
  netif_carrier_off(vdev->ndev);
  #line 182 
  netif_tx_stop_all_queues(vdev->ndev);
  #line 184 
  printk((char *)"%s: %s:%d Exiting...",(char *)(& (vdev->ndev)->name),(char *)"vxge_callback_link_down",185);
  #line 185 
  return;
}

#line 194  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-main.c"
static struct sk_buff *vxge_rx_alloc(void *dtrh, struct vxge_ring *ring, int skb_size)
{
  #line 196 
  struct net_device *dev;
  #line 197 
  struct sk_buff *skb;
  #line 198 
  struct vxge_rx_priv *rx_priv;
  #line 200 
  dev = ring->ndev;
  #line 201 
  printk((char *)"%s: %s:%d",(char *)(& (ring->ndev)->name),(char *)"vxge_rx_alloc",202);
  #line 204 
  rx_priv = (struct vxge_rx_priv *)vxge_hw_ring_rxd_private_get(dtrh);
  #line 207 
  skb = netdev_alloc_skb(dev,(unsigned int)(skb_size + 2));
  #line 209 
  if (skb == (struct sk_buff *)0) {
    #line 210 
    printk((char *)"%s: out of memory to allocate SKB",(char *)(& dev->name));
    #line 212 
    (ring->stats.skb_alloc_fail) ++;
    #line 213 
    return (struct sk_buff *)0;
  }
  #line 216 
  printk((char *)"%s: %s:%d  Skb : 0x%p",(char *)(& (ring->ndev)->name),(char *)"vxge_rx_alloc",218,skb);
  #line 220 
  skb_reserve(skb,2);
  #line 222 
  rx_priv->skb = skb;
  #line 223 
  rx_priv->skb_data = (unsigned char *)0U;
  #line 224 
  rx_priv->data_size = (unsigned long long)skb_size;
  #line 225 
  printk((char *)"%s: %s:%d Exiting...",(char *)(& (ring->ndev)->name),(char *)"vxge_rx_alloc",226);
  #line 228 
  return skb;
}

#line 234  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-main.c"
static int vxge_rx_map(void *dtrh, struct vxge_ring *ring)
{
  #line 236 
  struct vxge_rx_priv *rx_priv;
  #line 237 
  dma_addr_t dma_addr;
  #line 239 
  printk((char *)"%s: %s:%d",(char *)(& (ring->ndev)->name),(char *)"vxge_rx_map",240);
  #line 241 
  rx_priv = (struct vxge_rx_priv *)vxge_hw_ring_rxd_private_get(dtrh);
  #line 243 
  rx_priv->skb_data = (rx_priv->skb)->data;
  #line 244 
  dma_addr = pci_map_single(ring->pdev,(void *)rx_priv->skb_data,(unsigned long)rx_priv->data_size,2);
  #line 247 
  if ((long)(pci_dma_mapping_error(ring->pdev,dma_addr) != 0) != 0L) {
    #line 248 
    (ring->stats.pci_map_fail) ++;
    #line 249 
    return -5;
  }
  #line 251 
  printk((char *)"%s: %s:%d  1 buffer mode dma_addr = 0x%llx",(char *)(& (ring->ndev)->name),(char *)"vxge_rx_map",253,dma_addr);
  #line 255 
  vxge_hw_ring_rxd_1b_set(dtrh,dma_addr,(unsigned int)rx_priv->data_size);
  #line 257 
  rx_priv->data_dma = dma_addr;
  #line 258 
  printk((char *)"%s: %s:%d Exiting...",(char *)(& (ring->ndev)->name),(char *)"vxge_rx_map",259);
  #line 261 
  return 0;
}

#line 269  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-main.c"
static enum vxge_hw_status vxge_rx_initial_replenish(void *dtrh, void *userdata)
{
  #line 272 
  struct vxge_rx_priv *rx_priv;
  #line 271 
  struct vxge_ring *ring = (struct vxge_ring *)userdata;
  #line 274 
  printk((char *)"%s: %s:%d",(char *)(& (ring->ndev)->name),(char *)"vxge_rx_initial_replenish",275);
  #line 276 
  if (vxge_rx_alloc(dtrh,ring,(int)((ring->ndev)->mtu + 26U)) == (struct sk_buff *)0) 
    #line 278 
    return VXGE_HW_FAIL;
  #line 280 
  if (vxge_rx_map(dtrh,ring) != 0) {
    #line 281 
    rx_priv = (struct vxge_rx_priv *)vxge_hw_ring_rxd_private_get(dtrh);
    #line 282 
    consume_skb(rx_priv->skb);
    #line 284 
    return VXGE_HW_FAIL;
  }
  #line 286 
  printk((char *)"%s: %s:%d Exiting...",(char *)(& (ring->ndev)->name),(char *)"vxge_rx_initial_replenish",287);
  #line 289 
  return VXGE_HW_OK;
}

#line 293  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-main.c"
__inline static void vxge_rx_complete(struct vxge_ring *ring, struct sk_buff *skb, u16 vlan, int pkt_length, struct vxge_hw_ring_rxd_info *ext_info)
{
  #line 297 
  printk((char *)"%s: %s:%d",(char *)(& (ring->ndev)->name),(char *)"vxge_rx_complete",298);
  #line 299 
  skb_record_rx_queue(skb,(unsigned short)((int)((unsigned short)ring->driver_id)));
  #line 300 
  skb->protocol = eth_type_trans(skb,ring->ndev);
  #line 302 
  u64_stats_init(& ring->stats.syncp);
  #line 303 
  (ring->stats.rx_frms) ++;
  #line 304 
  ring->stats.rx_bytes += (unsigned long long)pkt_length;
  #line 306 
  if ((unsigned int)skb->pkt_type == 2U) 
                                         #line 307 
                                         (ring->stats.rx_mcast) ++;
  #line 308 
  u64_stats_init(& ring->stats.syncp);
  #line 310 
  printk((char *)"%s: %s:%d  skb protocol = %d",(char *)(& (ring->ndev)->name),(char *)"vxge_rx_complete",312,(int)skb->protocol);
  #line 314 
  if (ext_info->vlan != 0U && ring->vlan_tag_strip == 1) 
                                                         #line 316 
                                                         __vlan_hwaccel_put_tag(skb,(unsigned short)129,(unsigned short)((int)((unsigned short)ext_info->vlan)));
  #line 317 
  napi_gro_receive(ring->napi_p,skb);
  #line 319 
  printk((char *)"%s: %s:%d Exiting...",(char *)(& (ring->ndev)->name),(char *)"vxge_rx_complete",320);
  #line 320 
  return;
}

#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-main.c"
__inline static void vxge_re_pre_post(void *dtr, struct vxge_ring *ring, struct vxge_rx_priv *rx_priv)
{
  #line 326 
  pci_dma_sync_single_for_device(ring->pdev,rx_priv->data_dma,(unsigned long)rx_priv->data_size,2);
  #line 329 
  vxge_hw_ring_rxd_1b_set(dtr,rx_priv->data_dma,(unsigned int)rx_priv->data_size);
  #line 330 
  vxge_hw_ring_rxd_pre_post(ring->handle,dtr);
  #line 331 
  return;
}

#line 333  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-main.c"
__inline static void vxge_post(int *dtr_cnt, void **first_dtr, void *post_dtr, struct __vxge_hw_ring *ringh)
{
  #line 336 
  int dtr_count = *dtr_cnt;
  #line 337 
  if (((unsigned int)*dtr_cnt & 3U) == 0U) {
    #line 338 
    if (*first_dtr != (void *)0) 
                                 #line 339 
                                 vxge_hw_ring_rxd_post_post_wmb(ringh,*first_dtr);
    #line 340 
    *first_dtr = post_dtr;
  }
  else 
       #line 342 
       vxge_hw_ring_rxd_post_post(ringh,post_dtr);
  #line 343 
  dtr_count ++;
  #line 344 
  *dtr_cnt = dtr_count;
  #line 345 
  return;
}

#line 354  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-main.c"
static enum vxge_hw_status vxge_rx_1b_compl(struct __vxge_hw_ring *ringh, void *dtr, u8 t_code, void *userdata)
{
  #line 359 
  unsigned int dma_sizes;
  #line 362 
  int data_size;
  #line 363 
  dma_addr_t data_dma;
  #line 364 
  int pkt_length;
  #line 365 
  struct sk_buff *skb;
  #line 366 
  struct vxge_rx_priv *rx_priv;
  #line 367 
  struct vxge_hw_ring_rxd_info ext_info;
  #line 357 
  struct vxge_ring *ring = (struct vxge_ring *)userdata;
  #line 358 
  struct net_device *dev = ring->ndev;
  #line 360 
  void *first_dtr = (void *)0;
  #line 361 
  int dtr_cnt = 0;
  #line 368 
  printk((char *)"%s: %s:%d",(char *)(& (ring->ndev)->name),(char *)"vxge_rx_1b_compl",369);
  #line 371 
  if (ring->budget <= 0) 
                         #line 372 
                         goto out;
  #line 374 
  while (1) {
    #line 375 
    __builtin_prefetch((void const *)((void *)((char *)dtr + 64U)));
    #line 376 
    rx_priv = (struct vxge_rx_priv *)vxge_hw_ring_rxd_private_get(dtr);
    #line 377 
    skb = rx_priv->skb;
    #line 378 
    data_size = (int)rx_priv->data_size;
    #line 379 
    data_dma = rx_priv->data_dma;
    #line 380 
    __builtin_prefetch((void const *)((void *)rx_priv->skb_data));
    #line 382 
    printk((char *)"%s: %s:%d  skb = 0x%p",(char *)(& (ring->ndev)->name),(char *)"vxge_rx_1b_compl",384,skb);
    #line 386 
    vxge_hw_ring_rxd_1b_get(ringh,dtr,& dma_sizes);
    #line 387 
    pkt_length = (int)dma_sizes;
    #line 389 
    pkt_length += -4;
    #line 391 
    printk((char *)"%s: %s:%d  Packet Length = %d",(char *)(& (ring->ndev)->name),(char *)"vxge_rx_1b_compl",393,pkt_length);
    #line 395 
    vxge_hw_ring_rxd_1b_info_get(ringh,dtr,& ext_info);
    #line 400 
    __builtin_prefetch((void const *)((void *)((char *)skb + 64U)));
    #line 401 
    if ((long)((unsigned int)t_code != 0U) != 0L) {
      #line 402 
      if (vxge_hw_ring_handle_tcode(ringh,dtr,(unsigned char)((int)t_code)) != VXGE_HW_OK) {
        #line 405 
        (ring->stats.rx_errors) ++;
        #line 406 
        printk((char *)"%s: %s :%d Rx T_code is %d",(char *)(& (ring->ndev)->name),(char *)"vxge_rx_1b_compl",409,(int)t_code);
        #line 415 
        vxge_re_pre_post(dtr,ring,rx_priv);
        #line 417 
        vxge_post(& dtr_cnt,& first_dtr,dtr,ringh);
        #line 418 
        (ring->stats.rx_dropped) ++;
        #line 419 
        goto __Cont;
      }
    }
    #line 423 
    if (pkt_length > 256) {
      #line 424 
      if (vxge_rx_alloc(dtr,ring,data_size) != (struct sk_buff *)0) {
        #line 425 
        if (vxge_rx_map(dtr,ring) == 0) {
          #line 426 
          skb_put(skb,(unsigned int)pkt_length);
          #line 428 
          pci_unmap_single(ring->pdev,data_dma,(unsigned long)data_size,2);
          #line 431 
          vxge_hw_ring_rxd_pre_post(ringh,dtr);
          #line 432 
          vxge_post(& dtr_cnt,& first_dtr,dtr,ringh);
        }
        else {
          #line 435 
          consume_skb(rx_priv->skb);
          #line 436 
          rx_priv->skb = skb;
          #line 437 
          rx_priv->data_size = (unsigned long long)data_size;
          #line 438 
          vxge_re_pre_post(dtr,ring,rx_priv);
          #line 440 
          vxge_post(& dtr_cnt,& first_dtr,dtr,ringh);
          #line 442 
          (ring->stats.rx_dropped) ++;
          #line 443 
          break;
        }
      }
      else {
        #line 446 
        vxge_re_pre_post(dtr,ring,rx_priv);
        #line 448 
        vxge_post(& dtr_cnt,& first_dtr,dtr,ringh);
        #line 449 
        (ring->stats.rx_dropped) ++;
        #line 450 
        break;
      }
    }
    else {
      #line 453 
      struct sk_buff *skb_up;
      #line 455 
      skb_up = netdev_alloc_skb(dev,(unsigned int)(pkt_length + 2));
      #line 457 
      if (skb_up != (struct sk_buff *)0) {
        #line 458 
        skb_reserve(skb_up,2);
        #line 461 
        pci_dma_sync_single_for_cpu(ring->pdev,data_dma,(unsigned long)data_size,2);
        #line 465 
        printk((char *)"%s: %s:%d  skb_up = %p",(char *)(& (ring->ndev)->name),(char *)"vxge_rx_1b_compl",468,skb);
        #line 469 
        memcpy((void *)skb_up->data,(void *)skb->data,(unsigned long)pkt_length);
        #line 471 
        vxge_re_pre_post(dtr,ring,rx_priv);
        #line 473 
        vxge_post(& dtr_cnt,& first_dtr,dtr,ringh);
        #line 476 
        skb = skb_up;
        #line 477 
        skb_put(skb,(unsigned int)pkt_length);
      }
      else {
        #line 479 
        vxge_re_pre_post(dtr,ring,rx_priv);
        #line 481 
        vxge_post(& dtr_cnt,& first_dtr,dtr,ringh);
        #line 482 
        printk((char *)"%s: vxge_rx_1b_compl: out of ",(char *)(& dev->name));
        #line 485 
        (ring->stats.skb_alloc_fail) ++;
        #line 486 
        break;
      }
    }
    #line 490 
    if (((((ext_info.proto & 3U) != 0U && (ext_info.proto & 4U) == 0U) && (dev->features & 549755813888ULL) != 0ULL) && ext_info.l3_cksum == 65535U) && ext_info.l4_cksum == 65535U) 
      #line 495 
      skb->ip_summed = (unsigned char)1U; else 
                                               #line 497 
                                               skb_checksum_none_assert(skb);
    #line 500 
    if ((unsigned int)ring->rx_hwts != 0U) {
      #line 501 
      struct skb_shared_hwtstamps *skb_hwts;
      #line 502 
      u32 ns = *((u32 *)(skb->head + (unsigned long)pkt_length));
      #line 504 
      skb_hwts = skb_hwtstamps(skb);
      #line 505 
      skb_hwts->hwtstamp = ns_to_ktime((unsigned long long)ns);
    }
    #line 512 
    if (ext_info.rth_value != 0U) 
                                  #line 513 
                                  skb_set_hash(skb,ext_info.rth_value,(enum pkt_hash_types)PKT_HASH_TYPE_L3);
    #line 516 
    vxge_rx_complete(ring,skb,(unsigned short)((int)((unsigned short)ext_info.vlan)),pkt_length,& ext_info);
    #line 519 
    (ring->budget) --;
    #line 520 
    (ring->pkts_processed) ++;
    #line 521 
    if (ring->budget == 0) 
                           #line 522 
                           break;
    #line 374 
    __Cont: 
    #line 523 
    if (! (vxge_hw_ring_rxd_next_completed(ringh,& dtr,& t_code) == VXGE_HW_OK)) 
      #line 374 
      break;
  }
  #line 527 
  if (first_dtr != (void *)0) 
                              #line 528 
                              vxge_hw_ring_rxd_post_post_wmb(ringh,first_dtr);
  #line 530 
  out: 
       #line 530 
  ;
  #line 531 
  printk((char *)"%s:%d  Exiting...",(char *)"vxge_rx_1b_compl",533);
  #line 534 
  return VXGE_HW_OK;
}

#line 546  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-main.c"
static enum vxge_hw_status vxge_xmit_compl(struct __vxge_hw_fifo *fifo_hw, void *dtr, enum vxge_hw_fifo_tcode t_code, void *userdata, struct sk_buff ***skb_ptr, int nr_skb, int *more)
{
  #line 551 
  struct sk_buff *skb;
  #line 550 
  struct vxge_fifo *fifo = (struct vxge_fifo *)userdata;
  #line 551 
  struct sk_buff **done_skb = *skb_ptr;
  #line 552 
  int pkt_cnt = 0;
  #line 554 
  printk((char *)"%s:%d Entered....",(char *)"vxge_xmit_compl",555);
  #line 557 
  while (1) {
    {
      #line 558 
      int frg_cnt;
      #line 559 
      skb_frag_t *frag;
      #line 560 
      int j;
      #line 589 
      unsigned int tmp_2;
      #line 588 
      int tmp_3;
      #line 606 
      struct sk_buff **tmp_6;
      #line 560 
      int i = 0;
      #line 562 
      struct vxge_tx_priv *txd_priv = vxge_hw_fifo_txdl_private_get(dtr);
      #line 564 
      skb = txd_priv->skb;
      #line 565 
      frg_cnt = (int)((struct skb_shared_info *)skb_end_pointer(skb))->nr_frags;
      #line 566 
      frag = & ((struct skb_shared_info *)skb_end_pointer(skb))->frags[0];
      #line 568 
      printk((char *)"%s: %s:%d fifo_hw = %p dtr = %p ",(char *)(& (fifo->ndev)->name),(char *)"vxge_xmit_compl",571,fifo_hw,dtr,(unsigned int)t_code);
      #line 574 
      printk((char *)"%s: %s:%d skb = %p itxd_priv = %p frg_cnt = %d",(char *)(& (fifo->ndev)->name),(char *)"vxge_xmit_compl",576,skb,txd_priv,frg_cnt);
      #line 578 
      if ((long)(t_code != (unsigned int)VXGE_HW_FIFO_T_CODE_OK) != 0L) {
        #line 579 
        (fifo->stats.tx_errors) ++;
        #line 580 
        printk((char *)"%s: tx: dtr %p completed due to ",(char *)(& (fifo->ndev)->name),dtr,(unsigned int)t_code);
        #line 584 
        vxge_hw_fifo_handle_tcode(fifo_hw,dtr,t_code);
      }
      #line 589 
      tmp_2 = skb_headlen(skb);
      #line 588 
      tmp_3 = i;
      #line 588 
      i ++;
      #line 588 
      ;
      #line 588 
      ;
      #line 588 
      pci_unmap_single(fifo->pdev,txd_priv->dma_buffers[tmp_3],(unsigned long)tmp_2,1);
      #line 591 
      j = 0;
      #line 591 
      while (j < frg_cnt) {
        {
          #line 594 
          unsigned int tmp_4;
          #line 593 
          int tmp_5;
          #line 594 
          tmp_4 = skb_frag_size(frag);
          #line 593 
          tmp_5 = i;
          #line 593 
          i ++;
          #line 592 
          ;
          #line 592 
          ;
          #line 592 
          pci_unmap_page(fifo->pdev,txd_priv->dma_buffers[tmp_5],(unsigned long)tmp_4,1);
          #line 595 
          frag ++;
        }
        #line 591 
        j ++;
      }
      #line 598 
      vxge_hw_fifo_txdl_free(fifo_hw,dtr);
      #line 601 
      u64_stats_init(& fifo->stats.syncp);
      #line 602 
      (fifo->stats.tx_frms) ++;
      #line 603 
      fifo->stats.tx_bytes += (unsigned long long)skb->len;
      #line 604 
      u64_stats_init(& fifo->stats.syncp);
      #line 606 
      tmp_6 = done_skb;
      #line 606 
      done_skb ++;
      #line 606 
      *tmp_6 = skb;
      #line 608 
      nr_skb --;
      #line 608 
      if (nr_skb <= 0) {
        #line 609 
        *more = 1;
        #line 610 
        break;
      }
      #line 613 
      pkt_cnt ++;
      #line 614 
      if (fifo->indicate_max_pkts < pkt_cnt) 
                                             #line 615 
                                             break;
    }
    #line 616 
    if (! (vxge_hw_fifo_txdl_next_completed(fifo_hw,& dtr,& t_code) == VXGE_HW_OK)) 
      #line 557 
      break;
  }
  #line 620 
  *skb_ptr = done_skb;
  #line 621 
  if ((int)netif_tx_queue_stopped(fifo->txq) != 0) 
                                                   #line 622 
                                                   netif_tx_wake_queue(fifo->txq);
  #line 624 
  printk((char *)"%s: %s:%d  Exiting...",(char *)(& (fifo->ndev)->name),(char *)"vxge_xmit_compl",626);
  #line 627 
  return VXGE_HW_OK;
}

#line 631  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-main.c"
static u32 vxge_get_vpath_no(struct vxgedev *vdev, struct sk_buff *skb)
{
  #line 633 
  u16 queue_len;
  #line 633 
  u16 counter = (unsigned short)0U;
  #line 634 
  if ((unsigned int)skb->protocol == 8U) {
    #line 635 
    struct iphdr *ip;
    #line 636 
    struct tcphdr *th;
    #line 638 
    ip = ip_hdr(skb);
    #line 640 
    if (! ip_is_fragment(ip)) {
      #line 641 
      th = (struct tcphdr *)((unsigned char *)ip + (unsigned long)((int)ip->ihl * 4));
      #line 644 
      queue_len = (unsigned short)vdev->no_of_vpath;
      #line 645 
      counter = (unsigned short)(((int)__builtin_bswap16((unsigned short)((int)th->source)) + (int)__builtin_bswap16((unsigned short)((int)th->dest))) & (int)vdev->vpath_selector[(int)queue_len + -1]);
      #line 648 
      if ((int)counter >= (int)queue_len) 
                                          #line 649 
                                          counter = (unsigned short)((unsigned int)queue_len + 65535U);
    }
  }
  #line 652 
  return (unsigned int)counter;
}

#line 655  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-main.c"
static enum vxge_hw_status vxge_search_mac_addr_in_list(struct vxge_vpath *vpath, u64 del_mac)
{
  #line 658 
  struct list_head *entry;
  #line 658 
  struct list_head *next;
  #line 659 
  entry = vpath->mac_addr_list.next;
  #line 659 
  next = entry->next;
  #line 659 
  while (& vpath->mac_addr_list != entry) {
    #line 660 
    if (((struct vxge_mac_addrs *)entry)->macaddr == del_mac) 
                                                              #line 661 
                                                              return VXGE_HW_FAIL;
    #line 659 
    entry = next;
    #line 659 
    next = entry->next;
  }
  #line 663 
  return VXGE_HW_OK;
}

#line 666  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-main.c"
static int vxge_mac_list_add(struct vxge_vpath *vpath, struct macInfo *mac)
{
  #line 668 
  struct vxge_mac_addrs *new_mac_entry;
  #line 669 
  u8 *mac_address = (u8 *)0U;
  #line 671 
  if ((unsigned int)vpath->mac_addr_cnt > 2047U) 
                                                 #line 672 
                                                 return 1;
  #line 674 
  new_mac_entry = (struct vxge_mac_addrs *)kzalloc(40UL,2592U);
  #line 675 
  if (new_mac_entry == (struct vxge_mac_addrs *)0) {
    #line 676 
    printk((char *)"%s: memory allocation failed",(char *)"vxge");
    #line 679 
    return 0;
  }
  #line 682 
  list_add(& new_mac_entry->item,& vpath->mac_addr_list);
  #line 685 
  mac_address = (u8 *)(& new_mac_entry->macaddr);
  #line 686 
  memcpy((void *)mac_address,(void *)(& mac->macaddr),6UL);
  #line 688 
  new_mac_entry->state = mac->state;
  #line 689 
  vpath->mac_addr_cnt = (u16)((int)vpath->mac_addr_cnt + 1);
  #line 691 
  if ((int)is_multicast_ether_addr((u8 *)(& mac->macaddr)) != 0) 
                                                                 #line 692 
                                                                 vpath->mcast_addr_cnt = (u16)((int)vpath->mcast_addr_cnt + 1);
  #line 694 
  return 1;
}

#line 699  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-main.c"
static enum vxge_hw_status vxge_add_mac_addr(struct vxgedev *vdev, struct macInfo *mac)
{
  #line 702 
  struct vxge_vpath *vpath;
  #line 703 
  enum vxge_hw_vpath_mac_addr_add_mode duplicate_mode;
  #line 701 
  enum vxge_hw_status status = 0;
  #line 705 
  if ((int)is_multicast_ether_addr((u8 *)(& mac->macaddr)) != 0) 
                                                                 #line 706 
                                                                 duplicate_mode = VXGE_HW_VPATH_MAC_ADDR_ADD_DUPLICATE; else 
                                                                    #line 708 
                                                                    duplicate_mode = VXGE_HW_VPATH_MAC_ADDR_REPLACE_DUPLICATE;
  #line 710 
  vpath = vdev->vpaths + (unsigned long)mac->vpath_no;
  #line 711 
  status = vxge_hw_vpath_mac_addr_add(vpath->handle,(u8 *)(& mac->macaddr),(u8 *)(& mac->macmask),duplicate_mode);
  #line 713 
  if (status != VXGE_HW_OK) 
                            #line 714 
                            printk((char *)"DA config add entry failed for vpath:%d",vpath->device_id);
  else {
    #line 718 
    if (vxge_mac_list_add(vpath,mac) == 0) 
                                           #line 719 
                                           status = VXGE_HW_EOF_TRACE_BUF;
  }
  #line 721 
  return status;
}

#line 724  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-main.c"
static int vxge_learn_mac(struct vxgedev *vdev, u8 *mac_header)
{
  #line 726 
  struct macInfo mac_info;
  #line 727 
  u8 *mac_address = (u8 *)0U;
  #line 728 
  u64 mac_addr = 0ULL;
  #line 728 
  u64 vpath_vector = 0ULL;
  #line 729 
  int vpath_idx = 0;
  #line 730 
  enum vxge_hw_status status = 0;
  #line 731 
  struct vxge_vpath *vpath = (struct vxge_vpath *)0;
  #line 733 
  mac_address = (u8 *)(& mac_addr);
  #line 734 
  memcpy((void *)mac_address,(void *)mac_header,6UL);
  #line 737 
  vpath_idx = 0;
  #line 737 
  while (vdev->no_of_vpath > vpath_idx) {
    {
      #line 738 
      vpath = vdev->vpaths + (unsigned long)vpath_idx;
      #line 739 
      if (vxge_search_mac_addr_in_list(vpath,mac_addr) != VXGE_HW_OK) 
        #line 740 
        return vpath_idx;
    }
    #line 737 
    vpath_idx ++;
  }
  #line 743 
  memset((void *)(& mac_info),0,20UL);
  #line 744 
  memcpy((void *)(& mac_info.macaddr),(void *)mac_header,6UL);
  #line 747 
  vpath_idx = 0;
  #line 747 
  while (vdev->no_of_vpath > vpath_idx) {
    #line 748 
    vpath = vdev->vpaths + (unsigned long)vpath_idx;
    #line 749 
    if ((int)vpath->mac_addr_cnt < vpath->max_mac_addr_cnt) {
      #line 751 
      mac_info.vpath_no = (unsigned int)vpath_idx;
      #line 752 
      mac_info.state = VXGE_LL_MAC_ADDR_IN_DA_TABLE;
      #line 753 
      status = vxge_add_mac_addr(vdev,& mac_info);
      #line 754 
      if (status != VXGE_HW_OK) 
                                #line 755 
                                return -1;
      #line 756 
      return vpath_idx;
    }
    #line 747 
    vpath_idx ++;
  }
  #line 760 
  mac_info.state = VXGE_LL_MAC_ADDR_IN_LIST;
  #line 761 
  vpath_idx = 0;
  #line 762 
  mac_info.vpath_no = (unsigned int)vpath_idx;
  #line 764 
  vpath = vdev->vpaths + (unsigned long)vpath_idx;
  #line 765 
  if ((int)vpath->mac_addr_cnt > vpath->max_mac_addr_cnt) {
    #line 767 
    if (vxge_mac_list_add(vpath,& mac_info) == 0) 
                                                  #line 768 
                                                  return -1;
    #line 769 
    return vpath_idx;
  }
  #line 773 
  vpath_vector = 9223372036854775808ULL >> vpath->device_id;
  #line 774 
  status = vxge_hw_mgmt_reg_write((vpath->vdev)->devh,(enum vxge_hw_mgmt_reg_type)vxge_hw_mgmt_reg_type_mrpcim,0U,6288U,vpath_vector);
  #line 781 
  if (status != VXGE_HW_OK) {
    #line 782 
    printk((char *)"%s: Unable to set the vpath-%d in catch-basin mode",(char *)"vxge",vpath->device_id);
    #line 785 
    return -1;
  }
  #line 788 
  if (vxge_mac_list_add(vpath,& mac_info) == 0) 
                                                #line 789 
                                                return -1;
  #line 791 
  return vpath_idx;
}

#line 803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-main.c"
static netdev_tx_t vxge_xmit(struct sk_buff *skb, struct net_device *dev)
{
  #line 806 
  void *dtr_priv;
  #line 809 
  enum vxge_hw_status status;
  #line 810 
  int frg_cnt;
  #line 810 
  int first_frg_len;
  #line 811 
  skb_frag_t *frag;
  #line 812 
  int avail;
  #line 813 
  u64 dma_pointer;
  #line 815 
  struct __vxge_hw_fifo *fifo_hw;
  #line 816 
  int offload_type;
  #line 920 
  int tmp_9;
  #line 981 
  unsigned int tmp_20;
  #line 980 
  int tmp_21;
  #line 805 
  struct vxge_fifo *fifo = (struct vxge_fifo *)0;
  #line 807 
  void *dtr = (void *)0;
  #line 808 
  struct vxgedev *vdev = (struct vxgedev *)0;
  #line 812 
  int i = 0;
  #line 812 
  int j = 0;
  #line 814 
  struct vxge_tx_priv *txdl_priv = (struct vxge_tx_priv *)0;
  #line 817 
  int vpath_no = 0;
  #line 819 
  printk((char *)"%s: %s:%d",(char *)(& dev->name),(char *)"vxge_xmit",820);
  #line 823 
  if ((long)(skb->len == 0U) != 0L) {
    #line 824 
    printk((char *)"%s: Buffer has no data..",(char *)(& dev->name));
    #line 826 
    dev_kfree_skb_any(skb);
    #line 827 
    return NETDEV_TX_OK;
  }
  #line 830 
  vdev = (struct vxgedev *)netdev_priv(dev);
  #line 832 
  if ((long)(is_vxge_card_up(vdev) == 0) != 0L) {
    #line 833 
    printk((char *)"%s: vdev not initialized",(char *)(& dev->name));
    #line 835 
    dev_kfree_skb_any(skb);
    #line 836 
    return NETDEV_TX_OK;
  }
  #line 839 
  if (vdev->config.addr_learn_en != 0) {
    #line 840 
    vpath_no = vxge_learn_mac(vdev,skb->data + 6U);
    #line 841 
    if (vpath_no == -1) {
      #line 842 
      printk((char *)"%s: Failed to store the mac address",(char *)(& dev->name));
      #line 845 
      dev_kfree_skb_any(skb);
      #line 846 
      return NETDEV_TX_OK;
    }
  }
  #line 850 
  if (vdev->config.tx_steering_type == 4) {
    #line 851 
    vpath_no = (int)skb_get_queue_mapping(skb);
  }
  else 
    #line 852 
    if (vdev->config.tx_steering_type == 3) {
      #line 853 
      vpath_no = (int)vxge_get_vpath_no(vdev,skb);
    }
  #line 855 
  printk((char *)"%s: vpath_no= %d",(char *)(& dev->name),vpath_no);
  #line 857 
  if (vdev->no_of_vpath <= vpath_no) 
                                     #line 858 
                                     vpath_no = 0;
  #line 860 
  fifo = & (vdev->vpaths + (unsigned long)vpath_no)->fifo;
  #line 861 
  fifo_hw = fifo->handle;
  #line 863 
  if ((int)netif_tx_queue_stopped(fifo->txq) != 0) 
                                                   #line 864 
                                                   return NETDEV_TX_BUSY;
  #line 866 
  avail = (int)vxge_hw_fifo_free_txdl_count_get(fifo_hw);
  #line 867 
  if (avail == 0) {
    #line 868 
    printk((char *)"%s: No free TXDs available",(char *)(& dev->name));
    #line 870 
    (fifo->stats.txd_not_free) ++;
    #line 871 
    goto _exit0;
  }
  #line 877 
  if (avail == 1) 
                  #line 878 
                  netif_tx_stop_queue(fifo->txq);
  #line 880 
  status = vxge_hw_fifo_txdl_reserve(fifo_hw,& dtr,& dtr_priv);
  #line 881 
  if ((long)(status != VXGE_HW_OK) != 0L) {
    #line 882 
    printk((char *)"%s: Out of descriptors .",(char *)(& dev->name));
    #line 884 
    (fifo->stats.txd_out_of_desc) ++;
    #line 885 
    goto _exit0;
  }
  #line 888 
  printk((char *)"%s: %s:%d fifo_hw = %p dtr = %p dtr_priv = %p",(char *)(& dev->name),(char *)"vxge_xmit",890,fifo_hw,dtr,dtr_priv);
  #line 893 
  if ((unsigned int)skb->vlan_present != 0U) {
    #line 894 
    u16 vlan_tag = skb->vlan_tci;
    #line 895 
    vxge_hw_fifo_txdl_vlan_set(dtr,(unsigned short)((int)vlan_tag));
  }
  #line 898 
  first_frg_len = (int)skb_headlen(skb);
  #line 900 
  dma_pointer = pci_map_single(fifo->pdev,(void *)skb->data,(unsigned long)first_frg_len,1);
  #line 903 
  if ((long)(pci_dma_mapping_error(fifo->pdev,dma_pointer) != 0) != 0L) {
    #line 904 
    vxge_hw_fifo_txdl_free(fifo_hw,dtr);
    #line 905 
    (fifo->stats.pci_map_fail) ++;
    #line 906 
    goto _exit0;
  }
  #line 909 
  txdl_priv = (struct vxge_tx_priv *)vxge_hw_fifo_txdl_private_get(dtr);
  #line 910 
  txdl_priv->skb = skb;
  #line 911 
  txdl_priv->dma_buffers[j] = dma_pointer;
  #line 913 
  frg_cnt = (int)((struct skb_shared_info *)skb_end_pointer(skb))->nr_frags;
  #line 914 
  printk((char *)"%s: %s:%d skb = %p txdl_priv = %p ",(char *)(& dev->name),(char *)"vxge_xmit",917,skb,txdl_priv,frg_cnt,dma_pointer);
  #line 920 
  ;
  #line 920 
  ;
  #line 920 
  tmp_9 = j;
  #line 920 
  j ++;
  #line 920 
  ;
  #line 920 
  ;
  #line 920 
  ;
  #line 920 
  vxge_hw_fifo_txdl_buffer_set(fifo_hw,dtr,(unsigned int)tmp_9,dma_pointer,(unsigned int)first_frg_len);
  #line 923 
  frag = & ((struct skb_shared_info *)skb_end_pointer(skb))->frags[0];
  #line 924 
  i = 0;
  #line 924 
  while (i < frg_cnt) {
    {
      #line 941 
      unsigned int tmp_15;
      #line 941 
      int tmp_16;
      #line 926 
      if (skb_frag_size(frag) == 0U) 
                                     #line 927 
                                     goto __Cont;
      #line 929 
      ;
      #line 929 
      ;
      #line 929 
      dma_pointer = skb_frag_dma_map(& (fifo->pdev)->dev,frag,0UL,
                          (unsigned long)skb_frag_size(frag),
                          (enum dma_data_direction)DMA_TO_DEVICE);
      #line 933 
      if ((long)(dma_mapping_error(& (fifo->pdev)->dev,dma_pointer) != 0) != 0L) 
        #line 934 
        goto _exit2;
      #line 935 
      printk((char *)"%s: %s:%d frag = %d dma_pointer = 0x%llx",(char *)(& dev->name),(char *)"vxge_xmit",937,i,dma_pointer);
      #line 940 
      txdl_priv->dma_buffers[j] = dma_pointer;
      #line 941 
      tmp_15 = skb_frag_size(frag);
      #line 941 
      ;
      #line 941 
      tmp_16 = j;
      #line 941 
      j ++;
      #line 941 
      ;
      #line 941 
      ;
      #line 941 
      ;
      #line 941 
      vxge_hw_fifo_txdl_buffer_set(fifo_hw,dtr,(unsigned int)tmp_16,dma_pointer,tmp_15);
      #line 943 
      frag ++;
    }
    #line 924 
    __Cont: 
            #line 924 
    i ++;
  }
  #line 946 
  offload_type = (int)((struct skb_shared_info *)skb_end_pointer(skb))->gso_type;
  #line 948 
  if ((offload_type & 17) != 0) {
    #line 949 
    int mss = (int)((struct skb_shared_info *)skb_end_pointer(skb))->gso_size;
    #line 950 
    if (mss != 0) {
      #line 951 
      printk((char *)"%s: %s:%d mss = %d",(char *)(& dev->name),(char *)"vxge_xmit",952,mss);
      #line 953 
      vxge_hw_fifo_txdl_mss_set(dtr,mss);
    }
    else 
         #line 958 
         goto _exit1;
  }
  #line 962 
  if ((unsigned int)skb->ip_summed == 3U) 
                                          #line 963 
                                          vxge_hw_fifo_txdl_cksum_set_bits(dtr,504403158265495552ULL);
  #line 968 
  vxge_hw_fifo_txdl_post(fifo_hw,dtr);
  #line 970 
  printk((char *)"%s: %s:%d  Exiting...",(char *)(& dev->name),(char *)"vxge_xmit",971);
  #line 972 
  return NETDEV_TX_OK;
  #line 974 
  _exit2: 
          #line 974 
  ;
  #line 975 
  printk((char *)"%s: pci_map_page failed",(char *)(& dev->name));
  #line 976 
  _exit1: 
          #line 976 
  ;
  #line 977 
  j = 0;
  #line 978 
  frag = & ((struct skb_shared_info *)skb_end_pointer(skb))->frags[0];
  #line 981 
  tmp_20 = skb_headlen(skb);
  #line 980 
  tmp_21 = j;
  #line 980 
  j ++;
  #line 980 
  ;
  #line 980 
  ;
  #line 980 
  pci_unmap_single(fifo->pdev,txdl_priv->dma_buffers[tmp_21],(unsigned long)tmp_20,1);
  #line 983 
  while (j < i) {
    {
      #line 984 
      ;
      #line 984 
      ;
      #line 984 
      pci_unmap_page(fifo->pdev,txdl_priv->dma_buffers[j],(unsigned long)skb_frag_size(frag),1);
      #line 986 
      frag ++;
    }
    #line 983 
    j ++;
  }
  #line 989 
  vxge_hw_fifo_txdl_free(fifo_hw,dtr);
  #line 990 
  _exit0: 
          #line 990 
  ;
  #line 991 
  netif_tx_stop_queue(fifo->txq);
  #line 992 
  dev_kfree_skb_any(skb);
  #line 994 
  return NETDEV_TX_OK;
}

#line 1004  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-main.c"
static void vxge_rx_term(void *dtrh, enum vxge_hw_rxd_state state, void *userdata)
{
  #line 1006 
  struct vxge_ring *ring = (struct vxge_ring *)userdata;
  #line 1008 
  struct vxge_rx_priv *rx_priv = vxge_hw_ring_rxd_private_get(dtrh);
  #line 1010 
  printk((char *)"%s: %s:%d",(char *)(& (ring->ndev)->name),(char *)"vxge_rx_term",1011);
  #line 1012 
  if (state != (unsigned int)VXGE_HW_RXD_STATE_POSTED) 
                                                       #line 1013 
                                                       return;
  #line 1015 
  pci_unmap_single(ring->pdev,rx_priv->data_dma,(unsigned long)rx_priv->data_size,2);
  #line 1018 
  consume_skb(rx_priv->skb);
  #line 1019 
  rx_priv->skb_data = (unsigned char *)0U;
  #line 1021 
  printk((char *)"%s: %s:%d  Exiting...",(char *)(& (ring->ndev)->name),(char *)"vxge_rx_term",1023);
  #line 1022 
  return;
}

#line 1032  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-main.c"
static void vxge_tx_term(void *dtrh, enum vxge_hw_txdl_state state, void *userdata)
{
  #line 1035 
  skb_frag_t *frag;
  #line 1036 
  int j;
  #line 1036 
  int frg_cnt;
  #line 1052 
  unsigned int tmp_2;
  #line 1051 
  int tmp_3;
  #line 1034 
  struct vxge_fifo *fifo = (struct vxge_fifo *)userdata;
  #line 1036 
  int i = 0;
  #line 1037 
  struct vxge_tx_priv *txd_priv = vxge_hw_fifo_txdl_private_get(dtrh);
  #line 1038 
  struct sk_buff *skb = txd_priv->skb;
  #line 1040 
  printk((char *)"%s:%d",(char *)"vxge_tx_term",1040);
  #line 1042 
  if (state != (unsigned int)VXGE_HW_TXDL_STATE_POSTED) 
                                                        #line 1043 
                                                        return;
  #line 1047 
  frg_cnt = (int)((struct skb_shared_info *)skb_end_pointer(skb))->nr_frags;
  #line 1048 
  frag = & ((struct skb_shared_info *)skb_end_pointer(skb))->frags[0];
  #line 1052 
  tmp_2 = skb_headlen(skb);
  #line 1051 
  tmp_3 = i;
  #line 1051 
  i ++;
  #line 1051 
  ;
  #line 1051 
  ;
  #line 1051 
  pci_unmap_single(fifo->pdev,txd_priv->dma_buffers[tmp_3],(unsigned long)tmp_2,1);
  #line 1054 
  j = 0;
  #line 1054 
  while (j < frg_cnt) {
    {
      #line 1056 
      unsigned int tmp_4;
      #line 1055 
      int tmp_5;
      #line 1056 
      tmp_4 = skb_frag_size(frag);
      #line 1055 
      tmp_5 = i;
      #line 1055 
      i ++;
      #line 1055 
      ;
      #line 1055 
      ;
      #line 1055 
      pci_unmap_page(fifo->pdev,txd_priv->dma_buffers[tmp_5],(unsigned long)tmp_4,1);
      #line 1057 
      frag ++;
    }
    #line 1054 
    j ++;
  }
  #line 1060 
  consume_skb(skb);
  #line 1062 
  printk((char *)"%s:%d  Exiting...",(char *)"vxge_tx_term",1063);
  #line 1063 
  return;
}

#line 1066  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-main.c"
static int vxge_mac_list_del(struct vxge_vpath *vpath, struct macInfo *mac)
{
  #line 1068 
  struct list_head *entry;
  #line 1068 
  struct list_head *next;
  #line 1069 
  u64 del_mac = 0ULL;
  #line 1070 
  u8 *mac_address = (u8 *)(& del_mac);
  #line 1073 
  memcpy((void *)mac_address,(void *)(& mac->macaddr),6UL);
  #line 1075 
  entry = vpath->mac_addr_list.next;
  #line 1075 
  next = entry->next;
  #line 1075 
  while (& vpath->mac_addr_list != entry) {
    #line 1076 
    if (((struct vxge_mac_addrs *)entry)->macaddr == del_mac) {
      #line 1077 
      list_del(entry);
      #line 1078 
      kfree((void *)entry);
      #line 1079 
      vpath->mac_addr_cnt = (u16)((int)vpath->mac_addr_cnt - 1);
      #line 1081 
      if ((int)is_multicast_ether_addr((u8 *)(& mac->macaddr)) != 0) 
        #line 1082 
        vpath->mcast_addr_cnt = (u16)((int)vpath->mcast_addr_cnt - 1);
      #line 1083 
      return 1;
    }
    #line 1075 
    entry = next;
    #line 1075 
    next = entry->next;
  }
  #line 1087 
  return 0;
}

#line 1092  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-main.c"
static enum vxge_hw_status vxge_del_mac_addr(struct vxgedev *vdev, struct macInfo *mac)
{
  #line 1095 
  struct vxge_vpath *vpath;
  #line 1094 
  enum vxge_hw_status status = 0;
  #line 1097 
  vpath = vdev->vpaths + (unsigned long)mac->vpath_no;
  #line 1098 
  status = vxge_hw_vpath_mac_addr_delete(vpath->handle,(u8 *)(& mac->macaddr),(u8 *)(& mac->macmask));
  #line 1100 
  if (status != VXGE_HW_OK) 
                            #line 1101 
                            printk((char *)"DA config delete entry failed for vpath:%d",vpath->device_id); else 
                                                                    #line 1105 
                                                                    vxge_mac_list_del(vpath,mac);
  #line 1106 
  return status;
}

#line 1120  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-main.c"
static void vxge_set_multicast(struct net_device *dev)
{
  #line 1122 
  struct netdev_hw_addr *ha;
  #line 1123 
  struct vxgedev *vdev;
  #line 1124 
  int i;
  #line 1125 
  struct vxge_vpath *vpath;
  #line 1127 
  struct macInfo mac_info;
  #line 1129 
  struct vxge_mac_addrs *mac_entry;
  #line 1130 
  struct list_head *list_head;
  #line 1131 
  struct list_head *entry;
  #line 1131 
  struct list_head *next;
  #line 1124 
  int mcast_cnt = 0;
  #line 1126 
  enum vxge_hw_status status = 0;
  #line 1128 
  int vpath_idx = 0;
  #line 1132 
  u8 *mac_address = (u8 *)0U;
  #line 1134 
  printk((char *)"%s:%d",(char *)"vxge_set_multicast",1135);
  #line 1137 
  vdev = (struct vxgedev *)netdev_priv(dev);
  #line 1139 
  if ((long)(is_vxge_card_up(vdev) == 0) != 0L) 
                                                #line 1140 
                                                return;
  #line 1142 
  if ((dev->flags & 512U) != 0U && (unsigned int)vdev->all_multi_flg == 0U) {
    #line 1143 
    i = 0;
    #line 1143 
    while (vdev->no_of_vpath > i) {
      #line 1144 
      vpath = vdev->vpaths + (unsigned long)i;
      #line 1146 
      status = vxge_hw_vpath_mcast_enable(vpath->handle);
      #line 1147 
      if (status != VXGE_HW_OK) 
                                #line 1148 
                                printk((char *)"failed to enable ",(int)status);
      #line 1150 
      vdev->all_multi_flg = (unsigned short)1U;
      #line 1143 
      i ++;
    }
  }
  else 
    #line 1152 
    if ((dev->flags & 512U) == 0U && (unsigned int)vdev->all_multi_flg != 0U) {
      #line 1153 
      i = 0;
      #line 1153 
      while (vdev->no_of_vpath > i) {
        #line 1154 
        vpath = vdev->vpaths + (unsigned long)i;
        #line 1156 
        status = vxge_hw_vpath_mcast_disable(vpath->handle);
        #line 1157 
        if (status != VXGE_HW_OK) 
                                  #line 1158 
                                  printk((char *)"failed to disable ",(int)status);
        #line 1160 
        vdev->all_multi_flg = (unsigned short)0U;
        #line 1153 
        i ++;
      }
    }
  #line 1165 
  if (vdev->config.addr_learn_en == 0) {
    #line 1166 
    i = 0;
    #line 1166 
    while (vdev->no_of_vpath > i) {
      #line 1167 
      vpath = vdev->vpaths + (unsigned long)i;
      #line 1170 
      if ((dev->flags & 256U) != 0U) 
                                     #line 1171 
                                     status = vxge_hw_vpath_promisc_enable(vpath->handle); else 
                                                                    #line 1174 
                                                                    status = vxge_hw_vpath_promisc_disable(vpath->handle);
      #line 1176 
      if (status != VXGE_HW_OK) {
        #line 1177 
        char *tmp_1;
        #line 1177 
        ;
        #line 1177 
        if ((dev->flags & 256U) != 0U) 
                                       #line 1177 
                                       tmp_1 = (char *)"enable"; else 
                                                                   #line 1177 
                                                                   tmp_1 = (char *)"disable";
        #line 1177 
        printk((char *)"failed to %s promisc",tmp_1,(int)status);
      }
      #line 1166 
      i ++;
    }
  }
  #line 1183 
  memset((void *)(& mac_info),0,20UL);
  #line 1185 
  if ((unsigned int)vdev->all_multi_flg == 0U && dev->mc.count != 0) {
    #line 1215 
    void *__mptr;
    #line 1186 
    mcast_cnt = (int)(vdev->vpaths)->mcast_addr_cnt;
    #line 1187 
    list_head = & (vdev->vpaths)->mac_addr_list;
    #line 1188 
    if (dev->mc.count + ((int)(vdev->vpaths)->mac_addr_cnt - mcast_cnt) > (vdev->vpaths)->max_mac_addr_cnt) 
      #line 1191 
      goto _set_all_mcast;
    #line 1194 
    i = 0;
    #line 1194 
    while (i < mcast_cnt) {
      #line 1195 
      entry = list_head->next;
      #line 1195 
      next = entry->next;
      #line 1195 
      while (entry != list_head) {
        {
          #line 1196 
          mac_entry = (struct vxge_mac_addrs *)entry;
          #line 1198 
          mac_address = (u8 *)(& mac_entry->macaddr);
          #line 1199 
          memcpy((void *)(& mac_info.macaddr),(void *)mac_address,6UL);
          #line 1201 
          if ((int)is_multicast_ether_addr((u8 *)(& mac_info.macaddr)) != 0) {
            #line 1202 
            vpath_idx = 0;
            #line 1202 
            while (vdev->no_of_vpath > vpath_idx) {
              #line 1205 
              mac_info.vpath_no = (unsigned int)vpath_idx;
              #line 1206 
              status = vxge_del_mac_addr(vdev,& mac_info);
              #line 1202 
              vpath_idx ++;
            }
          }
        }
        #line 1195 
        entry = next;
        #line 1195 
        next = entry->next;
      }
      #line 1194 
      i ++;
    }
    #line 1215 
    __mptr = (void *)dev->mc.list.next;
    #line 1215 
    ha = ((struct netdev_hw_addr *)__mptr);
    #line 1215 
    while (& ha->list != & dev->mc.list) {
      #line 1215 
      void *__mptr_0;
      #line 1216 
      memcpy((void *)(& mac_info.macaddr),(void *)(& ha->addr),6UL);
      #line 1217 
      vpath_idx = 0;
      #line 1217 
      while (vdev->no_of_vpath > vpath_idx) {
        #line 1219 
        mac_info.vpath_no = (unsigned int)vpath_idx;
        #line 1220 
        mac_info.state = VXGE_LL_MAC_ADDR_IN_DA_TABLE;
        #line 1221 
        status = vxge_add_mac_addr(vdev,& mac_info);
        #line 1222 
        if (status != VXGE_HW_OK) {
          #line 1223 
          printk((char *)"%s:%d Setting individual",(char *)"vxge_set_multicast",1226);
          #line 1227 
          goto _set_all_mcast;
        }
        #line 1217 
        vpath_idx ++;
      }
      #line 1215 
      __mptr_0 = (void *)ha->list.next;
      #line 1215 
      ha = ((struct netdev_hw_addr *)__mptr_0);
    }
    #line 1232 
    return;
    #line 1233 
    _set_all_mcast: 
                    #line 1233 
    ;
    #line 1234 
    mcast_cnt = (int)(vdev->vpaths)->mcast_addr_cnt;
    #line 1236 
    i = 0;
    #line 1236 
    while (i < mcast_cnt) {
      #line 1237 
      entry = list_head->next;
      #line 1237 
      next = entry->next;
      #line 1237 
      while (entry != list_head) {
        {
          #line 1238 
          mac_entry = (struct vxge_mac_addrs *)entry;
          #line 1240 
          mac_address = (u8 *)(& mac_entry->macaddr);
          #line 1241 
          memcpy((void *)(& mac_info.macaddr),(void *)mac_address,6UL);
          #line 1243 
          if ((int)is_multicast_ether_addr((u8 *)(& mac_info.macaddr)) != 0) 
            #line 1244 
            break;
        }
        #line 1237 
        entry = next;
        #line 1237 
        next = entry->next;
      }
      #line 1247 
      vpath_idx = 0;
      #line 1247 
      while (vdev->no_of_vpath > vpath_idx) {
        #line 1249 
        mac_info.vpath_no = (unsigned int)vpath_idx;
        #line 1250 
        status = vxge_del_mac_addr(vdev,& mac_info);
        #line 1247 
        vpath_idx ++;
      }
      #line 1236 
      i ++;
    }
    #line 1255 
    i = 0;
    #line 1255 
    while (vdev->no_of_vpath > i) {
      #line 1256 
      vpath = vdev->vpaths + (unsigned long)i;
      #line 1259 
      status = vxge_hw_vpath_mcast_enable(vpath->handle);
      #line 1260 
      if (status != VXGE_HW_OK) 
                                #line 1261 
                                printk((char *)"%s:%d Enabling all multicasts failed",(char *)"vxge_set_multicast",1263);
      #line 1265 
      vdev->all_multi_flg = (unsigned short)1U;
      #line 1255 
      i ++;
    }
    #line 1267 
    dev->flags |= 512U;
  }
  #line 1270 
  printk((char *)"%s:%d  Exiting...",(char *)"vxge_set_multicast",1271);
  #line 1271 
  return;
}

#line 1280  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-main.c"
static int vxge_set_mac_addr(struct net_device *dev, void *p)
{
  #line 1283 
  struct vxgedev *vdev;
  #line 1285 
  struct macInfo mac_info_new;
  #line 1285 
  struct macInfo mac_info_old;
  #line 1282 
  struct sockaddr *addr = (struct sockaddr *)p;
  #line 1284 
  enum vxge_hw_status status = 0;
  #line 1286 
  int vpath_idx = 0;
  #line 1288 
  printk((char *)"%s:%d",(char *)"vxge_set_mac_addr",1288);
  #line 1290 
  vdev = (struct vxgedev *)netdev_priv(dev);
  #line 1292 
  if (! is_valid_ether_addr((u8 *)(& addr->sa_data))) 
                                                      #line 1293 
                                                      return -22;
  #line 1295 
  memset((void *)(& mac_info_new),0,20UL);
  #line 1296 
  memset((void *)(& mac_info_old),0,20UL);
  #line 1298 
  printk((char *)"%s:%d  Exiting...",(char *)"vxge_set_mac_addr",1299);
  #line 1302 
  memcpy((void *)(& mac_info_old.macaddr),(void *)dev->dev_addr,(unsigned long)dev->addr_len);
  #line 1305 
  memcpy((void *)(& mac_info_new.macaddr),(void *)(& addr->sa_data),(unsigned long)dev->addr_len);
  #line 1309 
  vpath_idx = 0;
  #line 1309 
  while (vdev->no_of_vpath > vpath_idx) {
    {
      #line 1310 
      struct vxge_vpath *vpath = vdev->vpaths + (unsigned long)vpath_idx;
      #line 1311 
      if (vpath->is_open == 0) {
        #line 1315 
        vxge_mac_list_del(vpath,& mac_info_old);
        #line 1319 
        vxge_mac_list_add(vpath,& mac_info_new);
        #line 1321 
        goto __Cont;
      }
      #line 1324 
      mac_info_old.vpath_no = (unsigned int)vpath_idx;
      #line 1325 
      status = vxge_del_mac_addr(vdev,& mac_info_old);
    }
    #line 1309 
    __Cont: 
            #line 1309 
    vpath_idx ++;
  }
  #line 1328 
  if ((long)(is_vxge_card_up(vdev) == 0) != 0L) {
    #line 1329 
    memcpy((void *)dev->dev_addr,(void *)(& addr->sa_data),(unsigned long)dev->addr_len);
    #line 1330 
    return 0;
  }
  #line 1334 
  vpath_idx = 0;
  #line 1334 
  while (vdev->no_of_vpath > vpath_idx) {
    #line 1335 
    mac_info_new.vpath_no = (unsigned int)vpath_idx;
    #line 1336 
    mac_info_new.state = VXGE_LL_MAC_ADDR_IN_DA_TABLE;
    #line 1337 
    status = vxge_add_mac_addr(vdev,& mac_info_new);
    #line 1338 
    if (status != VXGE_HW_OK) 
                              #line 1339 
                              return -22;
    #line 1334 
    vpath_idx ++;
  }
  #line 1342 
  memcpy((void *)dev->dev_addr,(void *)(& addr->sa_data),(unsigned long)dev->addr_len);
  #line 1344 
  return (int)status;
}

#line 1354  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-main.c"
static void vxge_vpath_intr_enable(struct vxgedev *vdev, int vp_id)
{
  #line 1356 
  struct vxge_vpath *vpath = vdev->vpaths + (unsigned long)vp_id;
  #line 1357 
  int msix_id = 0;
  #line 1358 
  int tim_msix_id[4U] = {0, 1, 0, 0};
  #line 1359 
  int alarm_msix_id = 2;
  #line 1361 
  vxge_hw_vpath_intr_enable(vpath->handle);
  #line 1363 
  if (vdev->config.intr_type == 0) 
                                   #line 1364 
                                   vxge_hw_vpath_inta_unmask_tx_rx(vpath->handle);
  else {
    #line 1366 
    vxge_hw_vpath_msix_set(vpath->handle,(int *)(& tim_msix_id),alarm_msix_id);
    #line 1369 
    msix_id = vpath->device_id * 4;
    #line 1370 
    vxge_hw_vpath_msix_unmask(vpath->handle,msix_id);
    #line 1371 
    vxge_hw_vpath_msix_unmask(vpath->handle,msix_id + 1);
    #line 1374 
    msix_id = (int)((((vpath->handle)->vpath)->hldev)->first_vp_id * 4U + (unsigned int)alarm_msix_id);
    #line 1376 
    vxge_hw_vpath_msix_unmask(vpath->handle,msix_id);
  }
  #line 1378 
  return;
}

#line 1387  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-main.c"
static void vxge_vpath_intr_disable(struct vxgedev *vdev, int vp_id)
{
  #line 1390 
  struct __vxge_hw_device *hldev;
  #line 1391 
  int msix_id;
  #line 1389 
  struct vxge_vpath *vpath = vdev->vpaths + (unsigned long)vp_id;
  #line 1393 
  hldev = (struct __vxge_hw_device *)pci_get_drvdata(vdev->pdev);
  #line 1395 
  vxge_hw_vpath_wait_receive_idle(hldev,(unsigned int)vpath->device_id);
  #line 1397 
  vxge_hw_vpath_intr_disable(vpath->handle);
  #line 1399 
  if (vdev->config.intr_type == 0) 
                                   #line 1400 
                                   vxge_hw_vpath_inta_mask_tx_rx(vpath->handle);
  else {
    #line 1402 
    msix_id = vpath->device_id * 4;
    #line 1403 
    vxge_hw_vpath_msix_mask(vpath->handle,msix_id);
    #line 1404 
    vxge_hw_vpath_msix_mask(vpath->handle,msix_id + 1);
    #line 1407 
    msix_id = (int)((((vpath->handle)->vpath)->hldev)->first_vp_id * 4U + 2U);
    #line 1409 
    vxge_hw_vpath_msix_mask(vpath->handle,msix_id);
  }
  #line 1411 
  return;
}

#line 1415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-main.c"
static enum vxge_hw_status vxge_search_mac_addr_in_da_table(struct vxge_vpath *vpath, struct macInfo *mac)
{
  #line 1418 
  unsigned char macmask[6U];
  #line 1419 
  unsigned char macaddr[6U];
  #line 1417 
  enum vxge_hw_status status = 0;
  #line 1421 
  status = vxge_hw_vpath_mac_addr_get(vpath->handle,(u8 *)(& macaddr),(u8 *)(& macmask));
  #line 1423 
  if (status != VXGE_HW_OK) {
    #line 1424 
    printk((char *)"DA config list entry failed for vpath:%d",vpath->device_id);
    #line 1427 
    return status;
  }
  #line 1430 
  while (1) {
    #line 1430 
    if (ether_addr_equal((u8 *)(& mac->macaddr),(u8 *)(& macaddr))) 
                                                                    #line 1430 
                                                                    break;
    #line 1431 
    status = vxge_hw_vpath_mac_addr_get_next(vpath->handle,(u8 *)(& macaddr),(u8 *)(& macmask));
    #line 1433 
    if (status != VXGE_HW_OK) 
                              #line 1434 
                              break;
  }
  #line 1437 
  return status;
}

#line 1441  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-main.c"
static enum vxge_hw_status vxge_restore_vpath_mac_addr(struct vxge_vpath *vpath)
{
  #line 1444 
  struct macInfo mac_info;
  #line 1446 
  struct list_head *entry;
  #line 1446 
  struct list_head *next;
  #line 1443 
  enum vxge_hw_status status = 0;
  #line 1445 
  u8 *mac_address = (u8 *)0U;
  #line 1448 
  memset((void *)(& mac_info),0,20UL);
  #line 1450 
  if (vpath->is_open != 0) {
    #line 1451 
    entry = vpath->mac_addr_list.next;
    #line 1451 
    next = entry->next;
    #line 1451 
    while (& vpath->mac_addr_list != entry) {
      #line 1452 
      mac_address = (u8 *)(& ((struct vxge_mac_addrs *)entry)->macaddr);
      #line 1455 
      memcpy((void *)(& mac_info.macaddr),(void *)mac_address,6UL);
      #line 1456 
      ((struct vxge_mac_addrs *)entry)->state = VXGE_LL_MAC_ADDR_IN_DA_TABLE;
      #line 1459 
      status = vxge_search_mac_addr_in_da_table(vpath,& mac_info);
      #line 1461 
      if (status != VXGE_HW_OK) {
        #line 1463 
        status = vxge_hw_vpath_mac_addr_add(vpath->handle,(u8 *)(& mac_info.macaddr),(u8 *)(& mac_info.macmask),(enum vxge_hw_vpath_mac_addr_add_mode)VXGE_HW_VPATH_MAC_ADDR_ADD_DUPLICATE);
        #line 1467 
        if (status != VXGE_HW_OK) {
          #line 1468 
          printk((char *)"DA add entry failed for vpath:%d",vpath->device_id);
          #line 1472 
          ((struct vxge_mac_addrs *)entry)->state = VXGE_LL_MAC_ADDR_IN_LIST;
        }
      }
      #line 1451 
      entry = next;
      #line 1451 
      next = entry->next;
    }
  }
  #line 1478 
  return status;
}

#line 1483  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-main.c"
static enum vxge_hw_status vxge_restore_vpath_vid_table(struct vxge_vpath *vpath)
{
  #line 1487 
  u16 vid;
  #line 1485 
  enum vxge_hw_status status = 0;
  #line 1486 
  struct vxgedev *vdev = vpath->vdev;
  #line 1489 
  if (vpath->is_open == 0) 
                           #line 1490 
                           return status;
  #line 1492 
  vid = (unsigned short)cif_find_first_bit((unsigned long *)(& vdev->active_vlans),4096UL);
  #line 1492 
  while ((unsigned int)vid <= 4095U) {
    #line 1493 
    status = vxge_hw_vpath_vid_add(vpath->handle,(unsigned long long)vid);
    #line 1492 
    vid = (unsigned short)cif_find_next_bit((unsigned long *)(& vdev->active_vlans),4096UL,
                          (unsigned long)((int)vid + 1));
  }
  #line 1495 
  return status;
}

#line 1505  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-main.c"
static int vxge_reset_vpath(struct vxgedev *vdev, int vp_id)
{
  #line 1507 
  enum vxge_hw_status status = 0;
  #line 1508 
  struct vxge_vpath *vpath = vdev->vpaths + (unsigned long)vp_id;
  #line 1509 
  int ret = 0;
  #line 1512 
  if ((long)(is_vxge_card_up(vdev) == 0) != 0L) 
                                                #line 1513 
                                                return 0;
  #line 1516 
  if ((int)test_bit(0L,& vdev->state) != 0) 
                                            #line 1517 
                                            return 0;
  #line 1519 
  if (vpath->handle != (struct __vxge_hw_vpath_handle *)0) {
    #line 1520 
    if (vxge_hw_vpath_reset(vpath->handle) == VXGE_HW_OK) {
      #line 1521 
      if (is_vxge_card_up(vdev) != 0) {
        #line 1521 
        if (vxge_hw_vpath_recover_from_reset(vpath->handle) != VXGE_HW_OK) {
          #line 1524 
          printk((char *)"vxge_hw_vpath_recover_from_reset",vp_id);
          #line 1527 
          return (int)status;
        }
      }
    }
    else {
      #line 1530 
      printk((char *)"vxge_hw_vpath_reset failed for",vp_id);
      #line 1533 
      return (int)status;
    }
  }
  else 
       #line 1536 
       return 1;
  #line 1538 
  vxge_restore_vpath_mac_addr(vpath);
  #line 1539 
  vxge_restore_vpath_vid_table(vpath);
  #line 1542 
  vxge_hw_vpath_bcast_enable(vpath->handle);
  #line 1545 
  if ((unsigned int)vdev->all_multi_flg != 0U) {
    #line 1546 
    status = vxge_hw_vpath_mcast_enable(vpath->handle);
    #line 1547 
    if (status != VXGE_HW_OK) 
                              #line 1548 
                              printk((char *)"%s:%d Enabling multicast failed",(char *)"vxge_reset_vpath",1550);
  }
  #line 1554 
  vxge_vpath_intr_enable(vdev,vp_id);
  #line 1555 
  ldv_inline_asm();
  #line 1559 
  vxge_hw_vpath_enable(vpath->handle);
  #line 1560 
  ldv_inline_asm();
  #line 1562 
  vxge_hw_vpath_rx_doorbell_init(vpath->handle);
  #line 1563 
  vpath->ring.last_status = VXGE_HW_OK;
  #line 1566 
  cif_clear_bit((long)vp_id,& vdev->vp_reset);
  #line 1569 
  if ((int)netif_tx_queue_stopped(vpath->fifo.txq) != 0) 
                                                         #line 1570 
                                                         netif_tx_wake_queue(vpath->fifo.txq);
  #line 1572 
  return ret;
}

#line 1576  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-main.c"
static void vxge_config_ci_for_tti_rti(struct vxgedev *vdev)
{
  #line 1578 
  int i = 0;
  #line 1581 
  if (vdev->config.intr_type == 2) {
    #line 1582 
    i = 0;
    #line 1582 
    while (vdev->no_of_vpath > i) {
      {
        #line 1583 
        struct __vxge_hw_ring *hw_ring;
        #line 1585 
        hw_ring = (vdev->vpaths + (unsigned long)i)->ring.handle;
        #line 1586 
        vxge_hw_vpath_dynamic_rti_ci_set(hw_ring);
      }
      #line 1582 
      i ++;
    }
  }
  #line 1591 
  i = 0;
  #line 1591 
  while (vdev->no_of_vpath > i) {
    {
      #line 1592 
      struct __vxge_hw_fifo *hw_fifo = (vdev->vpaths + (unsigned long)i)->fifo.handle;
      #line 1593 
      vxge_hw_vpath_tti_ci_set(hw_fifo);
      #line 1598 
      if (vdev->config.intr_type == 0 && i == 0) 
                                                 #line 1599 
                                                 break;
    }
    #line 1591 
    i ++;
  }
  #line 1602 
  return;
}

#line 1605  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-main.c"
static int do_vxge_reset(struct vxgedev *vdev, int event)
{
  #line 1607 
  enum vxge_hw_status status;
  #line 1608 
  int vp_id;
  #line 1608 
  int i;
  #line 1608 
  int ret = 0;
  #line 1610 
  printk((char *)"%s:%d",(char *)"do_vxge_reset",1610);
  #line 1612 
  if ((unsigned int)event + 4294967294U <= 1U) {
    #line 1614 
    if ((long)(is_vxge_card_up(vdev) == 0) != 0L) 
                                                  #line 1615 
                                                  return 0;
    #line 1618 
    if ((int)test_and_set_bit(0L,& vdev->state) != 0) 
                                                      #line 1619 
                                                      return 0;
  }
  #line 1622 
  if (event == 2) {
    #line 1623 
    netif_carrier_off(vdev->ndev);
    #line 1626 
    vp_id = 0;
    #line 1626 
    while (vdev->no_of_vpath > vp_id) {
      #line 1627 
      while (1) {
        #line 1627 
        if (! ((int)test_bit((long)vp_id,& vdev->vp_reset) != 0)) 
                                                                  #line 1627 
                                                                  break;
        #line 1628 
        msleep(50U);
      }
      #line 1626 
      vp_id ++;
    }
    #line 1631 
    netif_carrier_on(vdev->ndev);
    #line 1634 
    if ((long)(vdev->exec_mode != 0) != 0L) {
      #line 1635 
      printk((char *)"%s: execution mode is debug, returning..",(char *)(& (vdev->ndev)->name));
      #line 1638 
      cif_clear_bit(1L,& vdev->state);
      #line 1639 
      netif_tx_stop_all_queues(vdev->ndev);
      #line 1640 
      return 0;
    }
  }
  #line 1644 
  if (event == 2) {
    #line 1645 
    vxge_hw_device_wait_receive_idle(vdev->devh);
    #line 1646 
    vxge_hw_device_intr_disable(vdev->devh);
    #line 1648 
    switch ((unsigned int)vdev->cric_err_event) {
      #line 1649 
      case (unsigned int)0: 
                            #line 1649 
      ;
      #line 1650 
      netif_tx_stop_all_queues(vdev->ndev);
      #line 1651 
      printk((char *)"fatal: %s: Disabling device due to",(char *)(& (vdev->ndev)->name));
      #line 1655 
      ret = -1;
      #line 1656 
      goto out;
      #line 1657 
      case (unsigned int)1: 
                            #line 1657 
      ;
      #line 1658 
      break;
      #line 1659 
      case (unsigned int)2: 
                            #line 1659 
      ;
      #line 1660 
      case (unsigned int)3: 
                            #line 1660 
      ;
      #line 1661 
      case (unsigned int)4: 
                            #line 1661 
      ;
      #line 1662 
      case (unsigned int)5: 
                            #line 1662 
      ;
      #line 1663 
      case (unsigned int)6: 
                            #line 1663 
      ;
      #line 1664 
      case (unsigned int)7: 
                            #line 1664 
      ;
      #line 1665 
      ret = -1;
      #line 1666 
      goto out;
      #line 1667 
      case (unsigned int)8: 
                            #line 1667 
      ;
      #line 1668 
      case (unsigned int)9: 
                            #line 1668 
      ;
      #line 1669 
      break;
      #line 1670 
      case (unsigned int)10: 
                             #line 1670 
      ;
      #line 1671 
      netif_tx_stop_all_queues(vdev->ndev);
      #line 1672 
      printk((char *)"fatal: %s: Disabling device due to",(char *)(& (vdev->ndev)->name));
      #line 1678 
      ret = -1;
      #line 1679 
      goto out;
      #line 1680 
      case (unsigned int)11: 
                             #line 1680 
      ;
      #line 1681 
      netif_tx_stop_all_queues(vdev->ndev);
      #line 1682 
      printk((char *)"fatal: %s: Disabling device due to",(char *)(& (vdev->ndev)->name));
      #line 1686 
      ret = -1;
      #line 1687 
      goto out;
      #line 1688 
      case (unsigned int)12: 
                             #line 1688 
      ;
      #line 1689 
      case (unsigned int)13: 
                             #line 1689 
      ;
      #line 1690 
      ret = -1;
      #line 1691 
      goto out;
      #line 1692 
      case (unsigned int)14: 
                             #line 1692 
      ;
      #line 1693 
      netif_tx_stop_all_queues(vdev->ndev);
      #line 1694 
      printk((char *)"fatal: %s: Disabling device due to",(char *)(& (vdev->ndev)->name));
      #line 1698 
      ret = -1;
      #line 1699 
      goto out;
      #line 1700 
      default: 
               #line 1700 
      ;
      #line 1701 
      break;
    }
  }
  #line 1706 
  if ((unsigned int)event + 4294967294U <= 1U) 
                                               #line 1707 
                                               netif_tx_stop_all_queues(vdev->ndev);
  #line 1709 
  if (event == 2) {
    #line 1710 
    status = vxge_reset_all_vpaths(vdev);
    #line 1711 
    if (status != VXGE_HW_OK) {
      #line 1712 
      printk((char *)"fatal: %s: can not reset vpaths",(char *)(& (vdev->ndev)->name));
      #line 1715 
      ret = -1;
      #line 1716 
      goto out;
    }
  }
  #line 1720 
  if (event == 4) {
    #line 1721 
    i = 0;
    #line 1721 
    while (vdev->no_of_vpath > i) {
      #line 1722 
      if ((vdev->vpaths + (unsigned long)i)->handle != (struct __vxge_hw_vpath_handle *)0) {
        #line 1723 
        if (vxge_hw_vpath_recover_from_reset((vdev->vpaths + (unsigned long)i)->handle) != VXGE_HW_OK) {
          #line 1726 
          printk((char *)"vxge_hw_vpath_recover_",i);
          #line 1730 
          ret = -1;
          #line 1731 
          goto out;
        }
      }
      else {
        #line 1734 
        printk((char *)"vxge_hw_vpath_reset failed for ",i);
        #line 1737 
        ret = -1;
        #line 1738 
        goto out;
      }
      #line 1721 
      i ++;
    }
  }
  #line 1742 
  if (event == 2 || event == 4) {
    #line 1744 
    vp_id = 0;
    #line 1744 
    while (vdev->no_of_vpath > vp_id) {
      #line 1745 
      vxge_restore_vpath_mac_addr(vdev->vpaths + (unsigned long)vp_id);
      #line 1746 
      vxge_restore_vpath_vid_table(vdev->vpaths + (unsigned long)vp_id);
      #line 1744 
      vp_id ++;
    }
    #line 1750 
    i = 0;
    #line 1750 
    while (vdev->no_of_vpath > i) {
      #line 1751 
      vxge_vpath_intr_enable(vdev,i);
      #line 1750 
      i ++;
    }
    #line 1753 
    vxge_hw_device_intr_enable(vdev->devh);
    #line 1754 
    ldv_inline_asm();
    #line 1758 
    cif_set_bit(1L,& vdev->state);
    #line 1761 
    i = 0;
    #line 1761 
    while (vdev->no_of_vpath > i) {
      #line 1762 
      vxge_hw_vpath_enable((vdev->vpaths + (unsigned long)i)->handle);
      #line 1763 
      ldv_inline_asm();
      #line 1764 
      vxge_hw_vpath_rx_doorbell_init((vdev->vpaths + (unsigned long)i)->handle);
      #line 1761 
      i ++;
    }
    #line 1767 
    netif_tx_wake_all_queues(vdev->ndev);
  }
  #line 1771 
  vxge_config_ci_for_tti_rti(vdev);
  #line 1773 
  out: 
       #line 1773 
  ;
  #line 1774 
  printk((char *)"%s:%d  Exiting...",(char *)"do_vxge_reset",1775);
  #line 1778 
  if (event == 2 || event == 4) 
                                #line 1779 
                                cif_clear_bit(0L,& vdev->state);
  #line 1780 
  return ret;
}

#line 1789  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-main.c"
static void vxge_reset(struct work_struct *work)
{
  #line 1791 
  void *__mptr;
  #line 1791 
  __mptr = (void *)work;
  #line 1791 
  struct vxgedev *vdev = ((struct vxgedev *)(__mptr + 18446744073709544088U));
  #line 1793 
  if (! netif_running(vdev->ndev)) 
                                   #line 1794 
                                   return;
  #line 1796 
  do_vxge_reset(vdev,2);
  #line 1797 
  return;
}

#line 1811  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-main.c"
static int vxge_poll_msix(struct napi_struct *napi, int budget)
{
  #line 1813 
  void *__mptr;
  #line 1814 
  int pkts_processed;
  #line 1813 
  __mptr = (void *)napi;
  #line 1813 
  struct vxge_ring *ring = ((struct vxge_ring *)(__mptr + 18446744073709551552U));
  #line 1815 
  int budget_org = budget;
  #line 1817 
  ring->budget = budget;
  #line 1818 
  ring->pkts_processed = 0;
  #line 1819 
  vxge_hw_vpath_poll_rx(ring->handle);
  #line 1820 
  pkts_processed = ring->pkts_processed;
  #line 1822 
  if (pkts_processed < budget_org) {
    #line 1823 
    napi_complete_done(napi,pkts_processed);
    #line 1826 
    vxge_hw_channel_msix_unmask((struct __vxge_hw_channel *)ring->handle,(int)ring->rx_vector_no);
  }
  #line 1834 
  return pkts_processed;
}

#line 1837  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-main.c"
static int vxge_poll_inta(struct napi_struct *napi, int budget)
{
  #line 1839 
  void *__mptr;
  #line 1841 
  int i;
  #line 1843 
  struct vxge_ring *ring;
  #line 1839 
  __mptr = (void *)napi;
  #line 1839 
  struct vxgedev *vdev = ((struct vxgedev *)(__mptr + 18446744073709544752U));
  #line 1840 
  int pkts_processed = 0;
  #line 1842 
  int budget_org = budget;
  #line 1845 
  struct __vxge_hw_device *hldev = pci_get_drvdata(vdev->pdev);
  #line 1847 
  i = 0;
  #line 1847 
  while (vdev->no_of_vpath > i) {
    #line 1848 
    ring = & (vdev->vpaths + (unsigned long)i)->ring;
    #line 1849 
    ring->budget = budget;
    #line 1850 
    ring->pkts_processed = 0;
    #line 1851 
    vxge_hw_vpath_poll_rx(ring->handle);
    #line 1852 
    pkts_processed = ring->pkts_processed + pkts_processed;
    #line 1853 
    budget -= ring->pkts_processed;
    #line 1854 
    if (budget <= 0) 
                     #line 1855 
                     break;
    #line 1847 
    i ++;
  }
  #line 1858 
  VXGE_COMPLETE_ALL_TX(vdev);
  #line 1860 
  if (pkts_processed < budget_org) {
    #line 1861 
    napi_complete_done(napi,pkts_processed);
    #line 1863 
    vxge_hw_device_unmask_all(hldev);
    #line 1864 
    vxge_hw_device_flush_io(hldev);
  }
  #line 1867 
  return pkts_processed;
}

#line 1880  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-main.c"
static void vxge_netpoll(struct net_device *dev)
{
  #line 1882 
  struct vxgedev *vdev = netdev_priv(dev);
  #line 1883 
  struct pci_dev *pdev = vdev->pdev;
  #line 1884 
  struct __vxge_hw_device *hldev = pci_get_drvdata(pdev);
  #line 1885 
  int irq = (int)pdev->irq;
  #line 1887 
  printk((char *)"%s:%d",(char *)"vxge_netpoll",1887);
  #line 1889 
  if (pci_channel_offline(pdev) != 0) 
                                      #line 1890 
                                      return;
  #line 1892 
  disable_irq((unsigned int)irq);
  #line 1893 
  vxge_hw_device_clear_tx_rx(hldev);
  #line 1895 
  vxge_hw_device_clear_tx_rx(hldev);
  #line 1896 
  VXGE_COMPLETE_ALL_RX(vdev);
  #line 1897 
  VXGE_COMPLETE_ALL_TX(vdev);
  #line 1899 
  enable_irq((unsigned int)irq);
  #line 1901 
  printk((char *)"%s:%d  Exiting...",(char *)"vxge_netpoll",1902);
  #line 1902 
  return;
}

#line 1907  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-main.c"
static enum vxge_hw_status vxge_rth_configure(struct vxgedev *vdev)
{
  #line 1910 
  struct vxge_hw_rth_hash_types hash_types;
  #line 1913 
  int index;
  #line 1909 
  enum vxge_hw_status status = 0;
  #line 1911 
  u8 itable[256U] = {(unsigned char)0U};
  #line 1912 
  u8 mtable[256U] = {(unsigned char)0U};
  #line 1920 
  index = 0;
  #line 1920 
  while (1 << (int)vdev->config.rth_bkt_sz > index) {
    #line 1921 
    itable[index] = (unsigned char)index;
    #line 1922 
    mtable[index] = (unsigned char)(index % vdev->no_of_vpath);
    #line 1920 
    index ++;
  }
  #line 1926 
  status = vxge_hw_vpath_rts_rth_itable_set((struct __vxge_hw_vpath_handle **)(& vdev->vp_handles),(unsigned int)vdev->no_of_vpath,(u8 *)(& mtable),(u8 *)(& itable),(unsigned int)vdev->config.rth_bkt_sz);
  #line 1930 
  if (status != VXGE_HW_OK) {
    #line 1931 
    printk((char *)"RTH indirection table configuration failed ",(vdev->vpaths)->device_id);
    #line 1934 
    return status;
  }
  #line 1938 
  hash_types.hash_type_tcpipv4_en = (unsigned char)vdev->config.rth_hash_type_tcpipv4;
  #line 1939 
  hash_types.hash_type_ipv4_en = (unsigned char)vdev->config.rth_hash_type_ipv4;
  #line 1940 
  hash_types.hash_type_tcpipv6_en = (unsigned char)vdev->config.rth_hash_type_tcpipv6;
  #line 1941 
  hash_types.hash_type_ipv6_en = (unsigned char)vdev->config.rth_hash_type_ipv6;
  #line 1942 
  hash_types.hash_type_tcpipv6ex_en = (unsigned char)vdev->config.rth_hash_type_tcpipv6ex;
  #line 1944 
  hash_types.hash_type_ipv6ex_en = (unsigned char)vdev->config.rth_hash_type_ipv6ex;
  #line 1952 
  index = 0;
  #line 1952 
  while (vdev->no_of_vpath > index) {
    #line 1953 
    status = vxge_hw_vpath_rts_rth_set((vdev->vpaths + (unsigned long)index)->handle,(enum vxge_hw_rth_algoritms)vdev->config.rth_algorithm,& hash_types,(unsigned short)((int)vdev->config.rth_bkt_sz));
    #line 1958 
    if (status != VXGE_HW_OK) {
      #line 1959 
      printk((char *)"RTH configuration failed for vpath:%d",(vdev->vpaths + (unsigned long)index)->device_id);
      #line 1962 
      return status;
    }
    #line 1952 
    index ++;
  }
  #line 1966 
  return status;
}

#line 1970  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-main.c"
static enum vxge_hw_status vxge_reset_all_vpaths(struct vxgedev *vdev)
{
  #line 1973 
  struct vxge_vpath *vpath;
  #line 1974 
  int i;
  #line 1972 
  enum vxge_hw_status status = 0;
  #line 1976 
  i = 0;
  #line 1976 
  while (vdev->no_of_vpath > i) {
    #line 1977 
    vpath = vdev->vpaths + (unsigned long)i;
    #line 1978 
    if (vpath->handle != (struct __vxge_hw_vpath_handle *)0) {
      #line 1979 
      if (vxge_hw_vpath_reset(vpath->handle) == VXGE_HW_OK) {
        #line 1980 
        if (is_vxge_card_up(vdev) != 0) {
          #line 1980 
          if (vxge_hw_vpath_recover_from_reset(vpath->handle) != VXGE_HW_OK) {
            #line 1983 
            printk((char *)"vxge_hw_vpath_recover_",i);
            #line 1987 
            return status;
          }
        }
      }
      else {
        #line 1990 
        printk((char *)"vxge_hw_vpath_reset failed for ",i);
        #line 1993 
        return status;
      }
    }
    #line 1976 
    i ++;
  }
  #line 1998 
  return status;
}

#line 2002  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-main.c"
static void vxge_close_vpaths(struct vxgedev *vdev, int index)
{
  #line 2004 
  struct vxge_vpath *vpath;
  #line 2005 
  int i;
  #line 2007 
  i = index;
  #line 2007 
  while (vdev->no_of_vpath > i) {
    #line 2008 
    vpath = vdev->vpaths + (unsigned long)i;
    #line 2010 
    if (vpath->handle != (struct __vxge_hw_vpath_handle *)0 && vpath->is_open != 0) {
      #line 2011 
      vxge_hw_vpath_close(vpath->handle);
      #line 2012 
      (vdev->stats.vpaths_open) --;
    }
    #line 2014 
    vpath->is_open = 0;
    #line 2015 
    vpath->handle = (struct __vxge_hw_vpath_handle *)0;
    #line 2007 
    i ++;
  }
  #line 2017 
  return;
}

#line 2020  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-main.c"
static int vxge_open_vpaths(struct vxgedev *vdev)
{
  #line 2022 
  struct vxge_hw_vpath_attr attr;
  #line 2023 
  enum vxge_hw_status status;
  #line 2024 
  struct vxge_vpath *vpath;
  #line 2026 
  int i;
  #line 2025 
  u32 vp_id = 0U;
  #line 2028 
  i = 0;
  #line 2028 
  while (vdev->no_of_vpath > i) {
    #line 2029 
    vpath = vdev->vpaths + (unsigned long)i;
    #line 2032 
    if ((unsigned int)vdev->titan1 == 0U) {
      #line 2033 
      struct vxge_hw_vp_config *vcfg;
      #line 2034 
      vcfg = & (vdev->devh)->config.vp_config[vpath->device_id];
      #line 2036 
      vcfg->rti.urange_a = 1U;
      #line 2037 
      vcfg->rti.urange_b = 20U;
      #line 2038 
      vcfg->rti.urange_c = 50U;
      #line 2039 
      vcfg->tti.uec_a = 30U;
      #line 2040 
      vcfg->tti.uec_b = 80U;
      #line 2041 
      vcfg->tti.uec_c = (unsigned int)((9600 - vdev->mtu) / 93 + 60);
      #line 2042 
      vcfg->tti.uec_d = (unsigned int)((9600 - vdev->mtu) / 37 + 100);
      #line 2043 
      vcfg->tti.ltimer_val = 80U;
      #line 2044 
      vcfg->tti.rtimer_val = 400U;
    }
    #line 2047 
    attr.vp_id = (unsigned int)vpath->device_id;
    #line 2048 
    attr.fifo_attr.callback = & vxge_xmit_compl;
    #line 2049 
    attr.fifo_attr.txdl_term = & vxge_tx_term;
    #line 2050 
    attr.fifo_attr.per_txdl_space = 152U;
    #line 2051 
    attr.fifo_attr.userdata = (void *)(& vpath->fifo);
    #line 2053 
    attr.ring_attr.callback = & vxge_rx_1b_compl;
    #line 2054 
    attr.ring_attr.rxd_init = & vxge_rx_initial_replenish;
    #line 2055 
    attr.ring_attr.rxd_term = & vxge_rx_term;
    #line 2056 
    attr.ring_attr.per_rxd_space = 32U;
    #line 2057 
    attr.ring_attr.userdata = (void *)(& vpath->ring);
    #line 2059 
    vpath->ring.ndev = vdev->ndev;
    #line 2060 
    vpath->ring.pdev = vdev->pdev;
    #line 2062 
    status = vxge_hw_vpath_open(vdev->devh,& attr,& vpath->handle);
    #line 2063 
    if (status == VXGE_HW_OK) {
      #line 2064 
      vpath->fifo.handle = (struct __vxge_hw_fifo *)attr.fifo_attr.userdata;
      #line 2066 
      vpath->ring.handle = (struct __vxge_hw_ring *)attr.ring_attr.userdata;
      #line 2068 
      vpath->fifo.tx_steering_type = vdev->config.tx_steering_type;
      #line 2070 
      vpath->fifo.ndev = vdev->ndev;
      #line 2071 
      vpath->fifo.pdev = vdev->pdev;
      #line 2073 
      u64_stats_init(& vpath->fifo.stats.syncp);
      #line 2074 
      u64_stats_init(& vpath->ring.stats.syncp);
      #line 2076 
      if (vdev->config.tx_steering_type != 0) 
                                              #line 2077 
                                              vpath->fifo.txq = netdev_get_tx_queue(vdev->ndev,(unsigned int)i); else 
                                                                    #line 2080 
                                                                    vpath->fifo.txq = netdev_get_tx_queue(vdev->ndev,0U);
      #line 2082 
      vpath->fifo.indicate_max_pkts = vdev->config.fifo_indicate_max_pkts;
      #line 2084 
      vpath->fifo.tx_vector_no = 0U;
      #line 2085 
      vpath->ring.rx_vector_no = 0U;
      #line 2086 
      vpath->ring.rx_hwts = vdev->rx_hwts;
      #line 2087 
      vpath->is_open = 1;
      #line 2088 
      vdev->vp_handles[i] = vpath->handle;
      #line 2089 
      vpath->ring.vlan_tag_strip = vdev->vlan_tag_strip;
      #line 2090 
      (vdev->stats.vpaths_open) ++;
    }
    else {
      #line 2092 
      (vdev->stats.vpath_open_fail) ++;
      #line 2093 
      printk((char *)"%s: vpath: %d failed to ",(char *)(& (vdev->ndev)->name),vpath->device_id,(int)status);
      #line 2097 
      vxge_close_vpaths(vdev,0);
      #line 2098 
      return -1;
    }
    #line 2101 
    vp_id = ((vpath->handle)->vpath)->vp_id;
    #line 2102 
    vdev->vpaths_deployed |= 9223372036854775808ULL >> vp_id;
    #line 2028 
    i ++;
  }
  #line 2105 
  return 0;
}

#line 2116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-main.c"
static void adaptive_coalesce_tx_interrupts(struct vxge_fifo *fifo)
{
  #line 2118 
  (fifo->interrupt_count) ++;
  {
    #line 2119 
    unsigned long __dummy;
    #line 2119 
    unsigned long __dummy2;
    }
  #line 2119 
  if (1 != 0) {
    {
      #line 2119 
      unsigned long __dummy_0;
      #line 2119 
      unsigned long __dummy2_0;
      }
    #line 2119 
    if (1 != 0) 
      #line 2119 
      if ((long)((fifo->jiffies - jiffies) + 2UL) < 0L) {
        #line 2120 
        struct __vxge_hw_fifo *hw_fifo = fifo->handle;
        #line 2122 
        fifo->jiffies = jiffies;
        #line 2123 
        if (fifo->interrupt_count > 200UL && hw_fifo->rtimer != 10U) {
          #line 2125 
          hw_fifo->rtimer = 10U;
          #line 2126 
          vxge_hw_vpath_dynamic_tti_rtimer_set(hw_fifo);
        }
        else 
          #line 2127 
          if (hw_fifo->rtimer != 0U) {
            #line 2128 
            hw_fifo->rtimer = 0U;
            #line 2129 
            vxge_hw_vpath_dynamic_tti_rtimer_set(hw_fifo);
          }
        #line 2131 
        fifo->interrupt_count = 0UL;
      }
  }
  #line 2133 
  return;
}

#line 2144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-main.c"
static void adaptive_coalesce_rx_interrupts(struct vxge_ring *ring)
{
  #line 2146 
  (ring->interrupt_count) ++;
  {
    #line 2147 
    unsigned long __dummy;
    #line 2147 
    unsigned long __dummy2;
    }
  #line 2147 
  if (1 != 0) {
    {
      #line 2147 
      unsigned long __dummy_0;
      #line 2147 
      unsigned long __dummy2_0;
      }
    #line 2147 
    if (1 != 0) 
      #line 2147 
      if ((long)((ring->jiffies - jiffies) + 2UL) < 0L) {
        #line 2148 
        struct __vxge_hw_ring *hw_ring = ring->handle;
        #line 2150 
        ring->jiffies = jiffies;
        #line 2151 
        if (ring->interrupt_count > 100UL && hw_ring->rtimer != 15U) {
          #line 2153 
          hw_ring->rtimer = 15U;
          #line 2154 
          vxge_hw_vpath_dynamic_rti_rtimer_set(hw_ring);
        }
        else 
          #line 2155 
          if (hw_ring->rtimer != 0U) {
            #line 2156 
            hw_ring->rtimer = 0U;
            #line 2157 
            vxge_hw_vpath_dynamic_rti_rtimer_set(hw_ring);
          }
        #line 2159 
        ring->interrupt_count = 0UL;
      }
  }
  #line 2161 
  return;
}

#line 2173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-main.c"
static irqreturn_t vxge_isr_napi(int irq, void *dev_id)
{
  #line 2175 
  struct __vxge_hw_device *hldev;
  #line 2176 
  u64 reason;
  #line 2177 
  enum vxge_hw_status status;
  #line 2178 
  struct vxgedev *vdev = (struct vxgedev *)dev_id;
  #line 2180 
  printk((char *)"%s:%d",(char *)"vxge_isr_napi",2180);
  #line 2182 
  hldev = (struct __vxge_hw_device *)pci_get_drvdata(vdev->pdev);
  #line 2184 
  if (pci_channel_offline(vdev->pdev) != 0) 
                                            #line 2185 
                                            return IRQ_NONE;
  #line 2187 
  if ((long)(is_vxge_card_up(vdev) == 0) != 0L) 
                                                #line 2188 
                                                return IRQ_HANDLED;
  #line 2190 
  status = vxge_hw_device_begin_irq(hldev,(unsigned int)vdev->exec_mode,& reason);
  #line 2191 
  if (status == VXGE_HW_OK) {
    #line 2192 
    vxge_hw_device_mask_all(hldev);
    #line 2194 
    if ((((vdev->vpaths_deployed >> 47) << 44) & reason) != 0ULL) {
      #line 2199 
      vxge_hw_device_clear_tx_rx(hldev);
      #line 2200 
      napi_schedule(& vdev->napi);
      #line 2201 
      printk((char *)"%s:%d  Exiting...",(char *)"vxge_isr_napi",2202);
      #line 2203 
      return IRQ_HANDLED;
    }
    else 
         #line 2205 
         vxge_hw_device_unmask_all(hldev);
  }
  else 
    #line 2206 
    if ((long)((unsigned int)status + 4294967077U <= 2U) != 0L) {
      #line 2209 
      vxge_hw_device_mask_all(hldev);
      #line 2210 
      vxge_hw_device_flush_io(hldev);
      #line 2211 
      return IRQ_HANDLED;
    }
    else 
      #line 2212 
      if ((long)(status == VXGE_HW_ERR_SLOT_FREEZE) != 0L) 
                                                           #line 2213 
                                                           return IRQ_HANDLED;
  #line 2215 
  printk((char *)"%s:%d  Exiting...",(char *)"vxge_isr_napi",2215);
  #line 2216 
  return IRQ_NONE;
}

#line 2219  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-main.c"
static irqreturn_t vxge_tx_msix_handle(int irq, void *dev_id)
{
  #line 2221 
  struct vxge_fifo *fifo = (struct vxge_fifo *)dev_id;
  #line 2223 
  adaptive_coalesce_tx_interrupts(fifo);
  #line 2225 
  vxge_hw_channel_msix_mask((struct __vxge_hw_channel *)fifo->handle,(int)fifo->tx_vector_no);
  #line 2228 
  vxge_hw_channel_msix_clear((struct __vxge_hw_channel *)fifo->handle,(int)fifo->tx_vector_no);
  #line 2231 
  VXGE_COMPLETE_VPATH_TX(fifo);
  #line 2233 
  vxge_hw_channel_msix_unmask((struct __vxge_hw_channel *)fifo->handle,(int)fifo->tx_vector_no);
  #line 2236 
  return IRQ_HANDLED;
}

#line 2239  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-main.c"
static irqreturn_t vxge_rx_msix_napi_handle(int irq, void *dev_id)
{
  #line 2241 
  struct vxge_ring *ring = (struct vxge_ring *)dev_id;
  #line 2243 
  adaptive_coalesce_rx_interrupts(ring);
  #line 2245 
  vxge_hw_channel_msix_mask((struct __vxge_hw_channel *)ring->handle,(int)ring->rx_vector_no);
  #line 2248 
  vxge_hw_channel_msix_clear((struct __vxge_hw_channel *)ring->handle,(int)ring->rx_vector_no);
  #line 2251 
  napi_schedule(& ring->napi);
  #line 2252 
  return IRQ_HANDLED;
}

#line 2256  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-main.c"
static irqreturn_t vxge_alarm_msix_handle(int irq, void *dev_id)
{
  #line 2258 
  int i;
  #line 2259 
  enum vxge_hw_status status;
  #line 2260 
  struct vxge_vpath *vpath = (struct vxge_vpath *)dev_id;
  #line 2261 
  struct vxgedev *vdev = vpath->vdev;
  #line 2262 
  int msix_id = (int)(((vpath->handle)->vpath)->vp_id * 4U + 2U);
  #line 2265 
  i = 0;
  #line 2265 
  while (vdev->no_of_vpath > i) {
    #line 2270 
    vxge_hw_vpath_msix_mask((vdev->vpaths + (unsigned long)i)->handle,msix_id);
    #line 2271 
    vxge_hw_vpath_msix_clear((vdev->vpaths + (unsigned long)i)->handle,msix_id);
    #line 2273 
    status = vxge_hw_vpath_alarm_process((vdev->vpaths + (unsigned long)i)->handle,(unsigned int)vdev->exec_mode);
    #line 2275 
    if (status == VXGE_HW_OK) {
      #line 2276 
      vxge_hw_vpath_msix_unmask((vdev->vpaths + (unsigned long)i)->handle,msix_id);
      #line 2278 
      goto __Cont;
    }
    #line 2280 
    printk((char *)"%s: vxge_hw_vpath_alarm_process failed %x ",(char *)"vxge",(int)status);
    #line 2265 
    __Cont: 
            #line 2265 
    i ++;
  }
  #line 2284 
  return IRQ_HANDLED;
}

#line 2287  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-main.c"
static int vxge_alloc_msix(struct vxgedev *vdev)
{
  #line 2289 
  int j;
  #line 2289 
  int i;
  #line 2290 
  int temp;
  #line 2289 
  int ret = 0;
  #line 2290 
  int msix_intr_vect = 0;
  #line 2291 
  vdev->intr_cnt = 0U;
  #line 2293 
  start: 
         #line 2293 
  ;
  #line 2295 
  vdev->intr_cnt = (unsigned int)(vdev->no_of_vpath * 2);
  #line 2298 
  (vdev->intr_cnt) ++;
  #line 2300 
  vdev->entries = (struct msix_entry *)kcalloc((unsigned long)vdev->intr_cnt,8UL,3264U);
  #line 2302 
  if (vdev->entries == (struct msix_entry *)0) {
    #line 2303 
    printk((char *)"%s: memory allocation failed",(char *)"vxge");
    #line 2306 
    ret = -12;
    #line 2307 
    goto alloc_entries_failed;
  }
  #line 2310 
  vdev->vxge_entries = (struct vxge_msix_entry *)kcalloc((unsigned long)vdev->intr_cnt,16UL,3264U);
  #line 2313 
  if (vdev->vxge_entries == (struct vxge_msix_entry *)0) {
    #line 2314 
    printk((char *)"%s: memory allocation failed",(char *)"vxge");
    #line 2316 
    ret = -12;
    #line 2317 
    goto alloc_vxge_entries_failed;
  }
  #line 2320 
  i = 0;
  #line 2320 
  j = 0;
  #line 2320 
  while (vdev->no_of_vpath > i) {
    #line 2322 
    msix_intr_vect = i * 4;
    #line 2325 
    (vdev->entries + (unsigned long)j)->entry = (unsigned short)msix_intr_vect;
    #line 2326 
    (vdev->vxge_entries + (unsigned long)j)->entry = (unsigned short)msix_intr_vect;
    #line 2327 
    (vdev->vxge_entries + (unsigned long)j)->in_use = (unsigned short)0U;
    #line 2328 
    j ++;
    #line 2331 
    (vdev->entries + (unsigned long)j)->entry = (unsigned short)((unsigned int)((unsigned short)msix_intr_vect) + 1U);
    #line 2332 
    (vdev->vxge_entries + (unsigned long)j)->entry = (unsigned short)((unsigned int)((unsigned short)msix_intr_vect) + 1U);
    #line 2333 
    (vdev->vxge_entries + (unsigned long)j)->in_use = (unsigned short)0U;
    #line 2334 
    j ++;
    #line 2320 
    i ++;
  }
  #line 2338 
  (vdev->entries + (unsigned long)j)->entry = (unsigned short)2U;
  #line 2339 
  (vdev->vxge_entries + (unsigned long)j)->entry = (unsigned short)2U;
  #line 2340 
  (vdev->vxge_entries + (unsigned long)j)->in_use = (unsigned short)0U;
  #line 2342 
  ret = pci_enable_msix_range(vdev->pdev,vdev->entries,3,(int)vdev->intr_cnt);
  #line 2344 
  if (ret < 0) {
    #line 2345 
    ret = -19;
    #line 2346 
    goto enable_msix_failed;
  }
  else 
    #line 2347 
    if (vdev->intr_cnt > (unsigned int)ret) {
      #line 2348 
      pci_disable_msix(vdev->pdev);
      #line 2350 
      printk((char *)"%s: MSI-X enable failed for %d vectors, ret: %d",(char *)"vxge",vdev->intr_cnt,ret);
      #line 2353 
      if (max_config_vpath != -1) {
        #line 2354 
        ret = -19;
        #line 2355 
        goto enable_msix_failed;
      }
      #line 2358 
      kfree((void *)vdev->entries);
      #line 2359 
      kfree((void *)vdev->vxge_entries);
      #line 2360 
      vdev->entries = (struct msix_entry *)0;
      #line 2361 
      vdev->vxge_entries = (struct vxge_msix_entry *)0;
      #line 2363 
      temp = (ret + -1) / 2;
      #line 2364 
      vxge_close_vpaths(vdev,temp);
      #line 2365 
      vdev->no_of_vpath = temp;
      #line 2366 
      goto start;
    }
  #line 2368 
  return 0;
  #line 2370 
  enable_msix_failed: 
                      #line 2370 
  ;
  #line 2371 
  kfree((void *)vdev->vxge_entries);
  #line 2372 
  alloc_vxge_entries_failed: 
                             #line 2372 
  ;
  #line 2373 
  kfree((void *)vdev->entries);
  #line 2374 
  alloc_entries_failed: 
                        #line 2374 
  ;
  #line 2375 
  return ret;
}

#line 2378  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-main.c"
static int vxge_enable_msix(struct vxgedev *vdev)
{
  #line 2381 
  int i;
  #line 2381 
  int ret = 0;
  #line 2383 
  int tim_msix_id[4U] = {0, 1, 0, 0};
  #line 2385 
  vdev->intr_cnt = 0U;
  #line 2388 
  ret = vxge_alloc_msix(vdev);
  #line 2389 
  if (ret == 0) {
    #line 2390 
    i = 0;
    #line 2390 
    while (vdev->no_of_vpath > i) {
      {
        #line 2391 
        struct vxge_vpath *vpath = vdev->vpaths + (unsigned long)i;
        #line 2396 
        vpath->ring.rx_vector_no = (unsigned int)(vpath->device_id * 4 + 1);
        #line 2399 
        vpath->fifo.tx_vector_no = (unsigned int)(vpath->device_id * 4);
        #line 2402 
        vxge_hw_vpath_msix_set(vpath->handle,(int *)(& tim_msix_id),2);
      }
      #line 2390 
      i ++;
    }
  }
  #line 2407 
  return ret;
}

#line 2410  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-main.c"
static void vxge_rem_msix_isr(struct vxgedev *vdev)
{
  #line 2412 
  int intr_cnt;
  #line 2414 
  intr_cnt = 0;
  #line 2414 
  while (vdev->no_of_vpath * 2 >= intr_cnt) {
    #line 2416 
    if ((unsigned int)(vdev->vxge_entries + (unsigned long)intr_cnt)->in_use != 0U) {
      #line 2417 
      synchronize_irq((vdev->entries + (unsigned long)intr_cnt)->vector);
      #line 2418 
      cif_free_irq((vdev->entries + (unsigned long)intr_cnt)->vector,(vdev->vxge_entries + (unsigned long)intr_cnt)->arg);
      #line 2420 
      (vdev->vxge_entries + (unsigned long)intr_cnt)->in_use = (unsigned short)0U;
    }
    #line 2414 
    intr_cnt ++;
  }
  #line 2424 
  kfree((void *)vdev->entries);
  #line 2425 
  kfree((void *)vdev->vxge_entries);
  #line 2426 
  vdev->entries = (struct msix_entry *)0;
  #line 2427 
  vdev->vxge_entries = (struct vxge_msix_entry *)0;
  #line 2429 
  if (vdev->config.intr_type == 2) 
                                   #line 2430 
                                   pci_disable_msix(vdev->pdev);
  #line 2431 
  return;
}

#line 2433  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-main.c"
static void vxge_rem_isr(struct vxgedev *vdev)
{
  #line 2435 
  if (vdev->config.intr_type == 2) 
                                   #line 2437 
                                   vxge_rem_msix_isr(vdev);
  else 
    #line 2438 
    if (vdev->config.intr_type == 0) {
      #line 2439 
      synchronize_irq((vdev->pdev)->irq);
      #line 2440 
      cif_free_irq((vdev->pdev)->irq,(void *)vdev);
    }
  #line 2442 
  return;
}

#line 2444  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-main.c"
static int vxge_add_isr(struct vxgedev *vdev)
{
  #line 2446 
  int ret = 0;
  #line 2447 
  int vp_idx = 0;
  #line 2447 
  int intr_idx = 0;
  #line 2447 
  int intr_cnt = 0;
  #line 2447 
  int msix_idx = 0;
  #line 2447 
  int irq_req = 0;
  #line 2448 
  int pci_fun = (int)(vdev->pdev)->devfn & 7;
  #line 2450 
  if (vdev->config.intr_type == 2) 
                                   #line 2451 
                                   ret = vxge_enable_msix(vdev);
  #line 2453 
  if (ret != 0) {
    #line 2454 
    printk((char *)"%s: Enabling MSI-X Failed",(char *)"vxge");
    #line 2456 
    printk((char *)"%s: Defaulting to INTA",(char *)"vxge");
    #line 2458 
    vdev->config.intr_type = 0;
  }
  #line 2461 
  if (vdev->config.intr_type == 2) {
    #line 2462 
    intr_idx = 0;
    #line 2462 
    while (vdev->no_of_vpath * 4 > intr_idx) {
      #line 2466 
      msix_idx = intr_idx % 4;
      #line 2467 
      irq_req = 0;
      #line 2469 
      switch (msix_idx) {
        #line 2470 
        case 0: 
                #line 2470 
        ;
        #line 2471 
        snprintf((char *)(& vdev->desc[intr_cnt]),80UL,(char *)"%s:vxge:MSI-X %d - Tx - fn:%d vpath:%d",(char *)(& (vdev->ndev)->name),(int)(vdev->entries + (unsigned long)intr_cnt)->entry,pci_fun,vp_idx);
        #line 2476 
        ret = cif_request_irq((vdev->entries + (unsigned long)intr_cnt)->vector,& vxge_tx_msix_handle,0UL,(char *)(& vdev->desc[intr_cnt]),(void *)(& (vdev->vpaths + (unsigned long)vp_idx)->fifo));
        #line 2481 
        (vdev->vxge_entries + (unsigned long)intr_cnt)->arg = (void *)(& (vdev->vpaths + (unsigned long)vp_idx)->fifo);
        #line 2483 
        irq_req = 1;
        #line 2484 
        break;
        #line 2485 
        case 1: 
                #line 2485 
        ;
        #line 2486 
        snprintf((char *)(& vdev->desc[intr_cnt]),80UL,(char *)"%s:vxge:MSI-X %d - Rx - fn:%d vpath:%d",(char *)(& (vdev->ndev)->name),(int)(vdev->entries + (unsigned long)intr_cnt)->entry,pci_fun,vp_idx);
        #line 2491 
        ret = cif_request_irq((vdev->entries + (unsigned long)intr_cnt)->vector,& vxge_rx_msix_napi_handle,0UL,(char *)(& vdev->desc[intr_cnt]),(void *)(& (vdev->vpaths + (unsigned long)vp_idx)->ring));
        #line 2496 
        (vdev->vxge_entries + (unsigned long)intr_cnt)->arg = (void *)(& (vdev->vpaths + (unsigned long)vp_idx)->ring);
        #line 2498 
        irq_req = 1;
        #line 2499 
        break;
      }
      #line 2502 
      if (ret != 0) {
        #line 2503 
        printk((char *)"%s: MSIX - %d  Registration failed",(char *)(& (vdev->ndev)->name),intr_cnt);
        #line 2506 
        vxge_rem_msix_isr(vdev);
        #line 2507 
        vdev->config.intr_type = 0;
        #line 2508 
        printk((char *)"%s: Defaulting to INTA",(char *)(& (vdev->ndev)->name));
        #line 2511 
        goto INTA_MODE;
      }
      #line 2514 
      if (irq_req != 0) {
        #line 2516 
        (vdev->vxge_entries + (unsigned long)intr_cnt)->in_use = (unsigned short)1U;
        #line 2517 
        msix_idx = (vdev->vpaths + (unsigned long)vp_idx)->device_id * 4 + msix_idx;
        #line 2519 
        vxge_hw_vpath_msix_unmask((vdev->vpaths + (unsigned long)vp_idx)->handle,msix_idx);
        #line 2522 
        intr_cnt ++;
      }
      #line 2526 
      if (((unsigned int)(intr_idx + 1) & 3U) == 0U && vdev->no_of_vpath + -1 > vp_idx) 
        #line 2528 
        vp_idx ++;
      #line 2463 
      intr_idx ++;
    }
    #line 2531 
    intr_cnt = vdev->no_of_vpath * 2;
    #line 2532 
    snprintf((char *)(& vdev->desc[intr_cnt]),80UL,(char *)"%s:vxge:MSI-X %d - Alarm - fn:%d",(char *)(& (vdev->ndev)->name),(int)(vdev->entries + (unsigned long)intr_cnt)->entry,pci_fun);
    #line 2538 
    ret = cif_request_irq((vdev->entries + (unsigned long)intr_cnt)->vector,& vxge_alarm_msix_handle,0UL,(char *)(& vdev->desc[intr_cnt]),(void *)vdev->vpaths);
    #line 2542 
    if (ret != 0) {
      #line 2543 
      printk((char *)"%s: MSIX - %d Registration failed",(char *)(& (vdev->ndev)->name),intr_cnt);
      #line 2546 
      vxge_rem_msix_isr(vdev);
      #line 2547 
      vdev->config.intr_type = 0;
      #line 2548 
      printk((char *)"%s: Defaulting to INTA",(char *)(& (vdev->ndev)->name));
      #line 2551 
      goto INTA_MODE;
    }
    #line 2554 
    msix_idx = (int)((((vdev->vpaths)->handle)->vpath)->vp_id * 4U + 2U);
    #line 2556 
    vxge_hw_vpath_msix_unmask((vdev->vpaths + (unsigned long)vp_idx)->handle,msix_idx);
    #line 2558 
    (vdev->vxge_entries + (unsigned long)intr_cnt)->in_use = (unsigned short)1U;
    #line 2559 
    (vdev->vxge_entries + (unsigned long)intr_cnt)->arg = (void *)vdev->vpaths;
  }
  #line 2562 
  INTA_MODE: 
             #line 2562 
  ;
  #line 2563 
  if (vdev->config.intr_type == 0) {
    #line 2564 
    snprintf((char *)(& vdev->desc[0]),80UL,(char *)"%s:vxge:INTA",(char *)(& (vdev->ndev)->name));
    #line 2566 
    vxge_hw_device_set_intr_type(vdev->devh,0U);
    #line 2569 
    vxge_hw_vpath_tti_ci_set((vdev->vpaths)->fifo.handle);
    #line 2571 
    ret = cif_request_irq((vdev->pdev)->irq,& vxge_isr_napi,128UL,(char *)(& vdev->desc[0]),(void *)vdev);
    #line 2574 
    if (ret != 0) {
      #line 2575 
      printk((char *)"%s %s-%d: ISR registration failed",(char *)"vxge",(char *)"IRQ",(vdev->pdev)->irq);
      #line 2578 
      return -19;
    }
    #line 2580 
    printk((char *)"new %s-%d line allocated",(char *)"IRQ",(vdev->pdev)->irq);
  }
  #line 2585 
  return 0;
}

#line 2588  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-main.c"
static void vxge_poll_vp_reset(struct timer_list *t)
{
  #line 2590 
  void *__mptr;
  #line 2591 
  int i;
  #line 2590 
  __mptr = (void *)t;
  #line 2590 
  struct vxgedev *vdev = ((struct vxgedev *)(__mptr + 18446744073709550408U));
  #line 2591 
  int j = 0;
  #line 2593 
  i = 0;
  #line 2593 
  while (vdev->no_of_vpath > i) {
    #line 2594 
    if ((int)test_bit((long)i,& vdev->vp_reset) != 0) {
      #line 2595 
      vxge_reset_vpath(vdev,i);
      #line 2596 
      j ++;
    }
    #line 2593 
    i ++;
  }
  #line 2599 
  if (j != 0 && vdev->config.intr_type != 2) {
    #line 2600 
    vxge_hw_device_unmask_all(vdev->devh);
    #line 2601 
    vxge_hw_device_flush_io(vdev->devh);
  }
  #line 2604 
  cif_mod_timer(& vdev->vp_reset_timer,jiffies + 125UL);
  #line 2605 
  return;
}

#line 2607  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-main.c"
static void vxge_poll_vp_lockup(struct timer_list *t)
{
  #line 2609 
  void *__mptr;
  #line 2611 
  struct vxge_vpath *vpath;
  #line 2612 
  struct vxge_ring *ring;
  #line 2613 
  int i;
  #line 2614 
  unsigned long rx_frms;
  #line 2609 
  __mptr = (void *)t;
  #line 2609 
  struct vxgedev *vdev = ((struct vxgedev *)(__mptr + 18446744073709550320U));
  #line 2610 
  enum vxge_hw_status status = 0;
  #line 2616 
  i = 0;
  #line 2616 
  while (vdev->no_of_vpath > i) {
    {
      #line 2621 
      union __anonunion___u_1700 __u;
      #line 2617 
      ring = & (vdev->vpaths + (unsigned long)i)->ring;
      #line 2620 
      __read_once_size((void *)(& ring->stats.rx_frms),(void *)(& __u.__c),8);
      #line 2620 
      rx_frms = (unsigned long)(__u.__val);
      #line 2623 
      if (ring->stats.prev_rx_frms == rx_frms) {
        #line 2624 
        status = vxge_hw_vpath_check_leak(ring->handle);
        #line 2627 
        if (status == VXGE_HW_FAIL && ring->last_status == VXGE_HW_FAIL) {
          #line 2631 
          if (! test_and_set_bit((long)i,& vdev->vp_reset)) {
            #line 2632 
            vpath = vdev->vpaths + (unsigned long)i;
            #line 2635 
            vxge_vpath_intr_disable(vdev,i);
            #line 2638 
            netif_tx_stop_queue(vpath->fifo.txq);
            #line 2639 
            goto __Cont;
          }
        }
      }
      #line 2643 
      ring->stats.prev_rx_frms = rx_frms;
      #line 2644 
      ring->last_status = status;
    }
    #line 2616 
    __Cont: 
            #line 2616 
    i ++;
  }
  #line 2648 
  cif_mod_timer(& vdev->vp_lockup_timer,jiffies);
  #line 2649 
  return;
}

#line 2651  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-main.c"
static netdev_features_t vxge_fix_features(struct net_device *dev, netdev_features_t features)
{
  #line 2654 
  netdev_features_t changed = dev->features ^ features;
  #line 2660 
  if ((changed & 274877906944ULL) != 0ULL) {
    #line 2660 
    if ((int)netif_running(dev) != 0) 
                                      #line 2661 
                                      features ^= 274877906944ULL;
  }
  #line 2663 
  return features;
}

#line 2666  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-main.c"
static int vxge_set_features(struct net_device *dev, netdev_features_t features)
{
  #line 2668 
  struct vxgedev *vdev = netdev_priv(dev);
  #line 2669 
  netdev_features_t changed = dev->features ^ features;
  #line 2671 
  if ((changed & 274877906944ULL) == 0ULL) 
                                           #line 2672 
                                           return 0;
  #line 2676 
  (vdev->devh)->config.rth_en = (unsigned int)((features & 274877906944ULL) != 0ULL);
  #line 2677 
  if (vxge_reset_all_vpaths(vdev) != VXGE_HW_OK) {
    #line 2678 
    dev->features = features ^ 274877906944ULL;
    #line 2679 
    (vdev->devh)->config.rth_en = (unsigned int)((dev->features & 274877906944ULL) != 0ULL);
    #line 2680 
    return -5;
  }
  #line 2683 
  return 0;
}

#line 2696  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-main.c"
static int vxge_open(struct net_device *dev)
{
  #line 2698 
  enum vxge_hw_status status;
  #line 2699 
  struct vxgedev *vdev;
  #line 2700 
  struct __vxge_hw_device *hldev;
  #line 2701 
  struct vxge_vpath *vpath;
  #line 2703 
  int i;
  #line 2704 
  u64 val64;
  #line 2764 
  char *tmp_3;
  #line 2702 
  int ret = 0;
  #line 2706 
  printk((char *)"%s: %s:%d",(char *)(& dev->name),(char *)"vxge_open",2707);
  #line 2709 
  vdev = (struct vxgedev *)netdev_priv(dev);
  #line 2710 
  hldev = (struct __vxge_hw_device *)pci_get_drvdata(vdev->pdev);
  #line 2714 
  netif_carrier_off(dev);
  #line 2717 
  status = (enum vxge_hw_status)vxge_open_vpaths(vdev);
  #line 2718 
  if (status != VXGE_HW_OK) {
    #line 2719 
    printk((char *)"%s: fatal: Vpath open failed",(char *)(& (vdev->ndev)->name));
    #line 2721 
    ret = -1;
    #line 2722 
    goto out0;
  }
  #line 2725 
  vdev->mtu = (int)dev->mtu;
  #line 2727 
  status = (enum vxge_hw_status)vxge_add_isr(vdev);
  #line 2728 
  if (status != VXGE_HW_OK) {
    #line 2729 
    printk((char *)"%s: fatal: ISR add failed",(char *)(& dev->name));
    #line 2731 
    ret = -1;
    #line 2732 
    goto out1;
  }
  #line 2735 
  if (vdev->config.intr_type != 2) {
    #line 2736 
    netif_napi_add(dev,& vdev->napi,& vxge_poll_inta,vdev->config.napi_weight);
    #line 2738 
    napi_enable(& vdev->napi);
    #line 2739 
    i = 0;
    #line 2739 
    while (vdev->no_of_vpath > i) {
      #line 2740 
      vpath = vdev->vpaths + (unsigned long)i;
      #line 2741 
      vpath->ring.napi_p = & vdev->napi;
      #line 2739 
      i ++;
    }
  }
  else {
    #line 2744 
    i = 0;
    #line 2744 
    while (vdev->no_of_vpath > i) {
      #line 2745 
      vpath = vdev->vpaths + (unsigned long)i;
      #line 2746 
      netif_napi_add(dev,& vpath->ring.napi,& vxge_poll_msix,vdev->config.napi_weight);
      #line 2748 
      napi_enable(& vpath->ring.napi);
      #line 2749 
      vpath->ring.napi_p = & vpath->ring.napi;
      #line 2744 
      i ++;
    }
  }
  #line 2754 
  if ((unsigned int)vdev->config.rth_steering != 0U) {
    #line 2755 
    status = vxge_rth_configure(vdev);
    #line 2756 
    if (status != VXGE_HW_OK) {
      #line 2757 
      printk((char *)"%s: fatal: RTH configuration failed",(char *)(& dev->name));
      #line 2760 
      ret = -1;
      #line 2761 
      goto out2;
    }
  }
  #line 2764 
  if ((unsigned int)hldev->config.rth_en != 0U) 
                                                #line 2764 
                                                tmp_3 = (char *)"enabled"; else 
                                                                    #line 2764 
                                                                    tmp_3 = (char *)"disabled";
  #line 2764 
  ;
  #line 2764 
  printk((char *)"\001",(char *)(& dev->name),tmp_3);
  #line 2767 
  i = 0;
  #line 2767 
  while (vdev->no_of_vpath > i) {
    #line 2768 
    vpath = vdev->vpaths + (unsigned long)i;
    #line 2771 
    status = vxge_hw_vpath_mtu_set(vpath->handle,(unsigned int)vdev->mtu);
    #line 2772 
    if (status != VXGE_HW_OK) {
      #line 2773 
      printk((char *)"%s: fatal: can not set new MTU",(char *)(& dev->name));
      #line 2775 
      ret = -1;
      #line 2776 
      goto out2;
    }
    #line 2767 
    i ++;
  }
  #line 2780 
  vxge_hw_device_debug_set(vdev->devh,(enum vxge_debug_level)VXGE_TRACE,536870912U);
  #line 2780 
  i = 0;
  #line 2780 
  while (vdev->no_of_vpath > i) {
    #line 2780 
    (vdev->vpaths + (unsigned long)i)->level_err = vxge_hw_device_error_level_get(vdev->devh);
    #line 2780 
    (vdev->vpaths + (unsigned long)i)->level_trace = vxge_hw_device_trace_level_get(vdev->devh);
    #line 2780 
    i ++;
  }
  #line 2780 
  vdev->level_err = vxge_hw_device_error_level_get(vdev->devh);
  #line 2780 
  vdev->level_trace = vxge_hw_device_trace_level_get(vdev->devh);
  #line 2781 
  if (vdev->level_trace != 0U) 
                               #line 2781 
                               printk((char *)"%s: MTU is %d",(char *)(& (vdev->ndev)->name),vdev->mtu);
  #line 2783 
  vxge_hw_device_debug_set(vdev->devh,(enum vxge_debug_level)VXGE_ERR,536870912U);
  #line 2783 
  i = 0;
  #line 2783 
  while (vdev->no_of_vpath > i) {
    #line 2783 
    (vdev->vpaths + (unsigned long)i)->level_err = vxge_hw_device_error_level_get(vdev->devh);
    #line 2783 
    (vdev->vpaths + (unsigned long)i)->level_trace = vxge_hw_device_trace_level_get(vdev->devh);
    #line 2783 
    i ++;
  }
  #line 2783 
  vdev->level_err = vxge_hw_device_error_level_get(vdev->devh);
  #line 2783 
  vdev->level_trace = vxge_hw_device_trace_level_get(vdev->devh);
  #line 2788 
  if ((unsigned int)vdev->all_multi_flg != 0U) {
    #line 2789 
    i = 0;
    #line 2789 
    while (vdev->no_of_vpath > i) {
      #line 2790 
      vpath = vdev->vpaths + (unsigned long)i;
      #line 2791 
      vxge_restore_vpath_mac_addr(vpath);
      #line 2792 
      vxge_restore_vpath_vid_table(vpath);
      #line 2794 
      status = vxge_hw_vpath_mcast_enable(vpath->handle);
      #line 2795 
      if (status != VXGE_HW_OK) 
                                #line 2796 
                                printk((char *)"%s:%d Enabling multicast failed",(char *)"vxge_open",2798);
      #line 2789 
      i ++;
    }
  }
  #line 2806 
  val64 = 0ULL;
  #line 2807 
  i = 0;
  #line 2807 
  while (i <= 16) {
    #line 2808 
    val64 = (9223372036854775808ULL >> i) | val64;
    #line 2807 
    i ++;
  }
  #line 2810 
  vxge_hw_mgmt_reg_write(vdev->devh,(enum vxge_hw_mgmt_reg_type)vxge_hw_mgmt_reg_type_mrpcim,0U,5736U,val64);
  #line 2817 
  vxge_hw_mgmt_reg_write(vdev->devh,(enum vxge_hw_mgmt_reg_type)vxge_hw_mgmt_reg_type_mrpcim,0U,5744U,val64);
  #line 2824 
  vxge_set_multicast(dev);
  #line 2827 
  i = 0;
  #line 2827 
  while (vdev->no_of_vpath > i) {
    #line 2828 
    vpath = vdev->vpaths + (unsigned long)i;
    #line 2829 
    status = vxge_hw_vpath_bcast_enable(vpath->handle);
    #line 2830 
    if (status != VXGE_HW_OK) 
                              #line 2831 
                              printk((char *)"%s : Can not enable bcast for vpath ",(char *)(& dev->name),i);
    #line 2834 
    if (vdev->config.addr_learn_en != 0) {
      #line 2835 
      status = vxge_hw_vpath_mcast_enable(vpath->handle);
      #line 2836 
      if (status != VXGE_HW_OK) 
                                #line 2837 
                                printk((char *)"%s : Can not enable mcast for vpath ",(char *)(& dev->name),i);
    }
    #line 2827 
    i ++;
  }
  #line 2843 
  vxge_hw_device_setpause_data(vdev->devh,0U,(unsigned int)vdev->config.tx_pause_enable,(unsigned int)vdev->config.rx_pause_enable);
  #line 2847 
  if (vdev->vp_reset_timer.function == (void (*)(struct timer_list *))0) 
    #line 2848 
    vxge_os_timer(& vdev->vp_reset_timer,& vxge_poll_vp_reset,125UL);
  #line 2852 
  if ((unsigned int)vdev->titan1 != 0U && vdev->vp_lockup_timer.function == (void (*)(struct timer_list *))0) 
    #line 2853 
    vxge_os_timer(& vdev->vp_lockup_timer,& vxge_poll_vp_lockup,125UL);
  #line 2856 
  cif_set_bit(1L,& vdev->state);
  #line 2857 
  ldv_inline_asm();
  #line 2860 
  if (vxge_hw_device_link_state_get(vdev->devh) == (unsigned int)VXGE_HW_LINK_UP) {
    #line 2861 
    netif_carrier_on(vdev->ndev);
    #line 2862 
    netdev_notice(vdev->ndev,(char *)"Link Up\n");
    #line 2863 
    (vdev->stats.link_up) ++;
  }
  #line 2866 
  vxge_hw_device_intr_enable(vdev->devh);
  #line 2867 
  ldv_inline_asm();
  #line 2870 
  i = 0;
  #line 2870 
  while (vdev->no_of_vpath > i) {
    #line 2871 
    vpath = vdev->vpaths + (unsigned long)i;
    #line 2873 
    vxge_hw_vpath_enable(vpath->handle);
    #line 2874 
    ldv_inline_asm();
    #line 2875 
    vxge_hw_vpath_rx_doorbell_init(vpath->handle);
    #line 2870 
    i ++;
  }
  #line 2878 
  netif_tx_start_all_queues(vdev->ndev);
  #line 2881 
  vxge_config_ci_for_tti_rti(vdev);
  #line 2883 
  goto out0;
  #line 2885 
  out2: 
        #line 2885 
  ;
  #line 2886 
  vxge_rem_isr(vdev);
  #line 2889 
  if (vdev->config.intr_type != 2) 
                                   #line 2890 
                                   napi_disable(& vdev->napi);
  else {
    #line 2892 
    i = 0;
    #line 2892 
    while (vdev->no_of_vpath > i) {
      #line 2893 
      napi_disable(& (vdev->vpaths + (unsigned long)i)->ring.napi);
      #line 2892 
      i ++;
    }
  }
  #line 2896 
  out1: 
        #line 2896 
  ;
  #line 2897 
  vxge_close_vpaths(vdev,0);
  #line 2898 
  out0: 
        #line 2898 
  ;
  #line 2899 
  printk((char *)"%s: %s:%d  Exiting...",(char *)(& dev->name),(char *)"vxge_open",2901);
  #line 2902 
  return ret;
}

#line 2906  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-main.c"
static void vxge_free_mac_add_list(struct vxge_vpath *vpath)
{
  #line 2909 
  struct list_head *entry;
  #line 2909 
  struct list_head *next;
  #line 2910 
  if (list_empty(& vpath->mac_addr_list) != 0) 
                                               #line 2911 
                                               return;
  #line 2913 
  entry = vpath->mac_addr_list.next;
  #line 2913 
  next = entry->next;
  #line 2913 
  while (& vpath->mac_addr_list != entry) {
    #line 2914 
    list_del(entry);
    #line 2915 
    kfree((void *)entry);
    #line 2913 
    entry = next;
    #line 2913 
    next = entry->next;
  }
  #line 2917 
  return;
}

#line 2919  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-main.c"
static void vxge_napi_del_all(struct vxgedev *vdev)
{
  #line 2921 
  int i;
  #line 2922 
  if (vdev->config.intr_type != 2) 
                                   #line 2923 
                                   netif_napi_del(& vdev->napi);
  else {
    #line 2925 
    i = 0;
    #line 2925 
    while (vdev->no_of_vpath > i) {
      #line 2926 
      netif_napi_del(& (vdev->vpaths + (unsigned long)i)->ring.napi);
      #line 2925 
      i ++;
    }
  }
  #line 2928 
  return;
}

#line 2930  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-main.c"
static int do_vxge_close(struct net_device *dev, int do_io)
{
  #line 2932 
  enum vxge_hw_status status;
  #line 2933 
  struct vxgedev *vdev;
  #line 2934 
  struct __vxge_hw_device *hldev;
  #line 2935 
  int i;
  #line 2936 
  u64 val64;
  #line 2936 
  u64 vpath_vector;
  #line 2937 
  printk((char *)"%s: %s:%d",(char *)(& dev->name),(char *)"do_vxge_close",2938);
  #line 2940 
  vdev = (struct vxgedev *)netdev_priv(dev);
  #line 2941 
  hldev = (struct __vxge_hw_device *)pci_get_drvdata(vdev->pdev);
  #line 2943 
  if ((long)(is_vxge_card_up(vdev) == 0) != 0L) 
                                                #line 2944 
                                                return 0;
  #line 2948 
  while (1) {
    #line 2948 
    if (! ((int)test_and_set_bit(0L,& vdev->state) != 0)) 
                                                          #line 2948 
                                                          break;
    #line 2949 
    msleep(50U);
  }
  #line 2951 
  if (do_io != 0) {
    #line 2953 
    vpath_vector = 9223372036854775808ULL >> (vdev->vpaths)->device_id;
    #line 2954 
    status = vxge_hw_mgmt_reg_read(vdev->devh,(enum vxge_hw_mgmt_reg_type)vxge_hw_mgmt_reg_type_mrpcim,0U,6288U,& val64);
    #line 2961 
    if (status == VXGE_HW_OK) {
      #line 2962 
      val64 = ~ vpath_vector & val64;
      #line 2963 
      status = vxge_hw_mgmt_reg_write(vdev->devh,(enum vxge_hw_mgmt_reg_type)vxge_hw_mgmt_reg_type_mrpcim,0U,6288U,val64);
    }
    #line 2973 
    vxge_hw_mgmt_reg_write(vdev->devh,(enum vxge_hw_mgmt_reg_type)vxge_hw_mgmt_reg_type_mrpcim,0U,5736U,0ULL);
    #line 2980 
    vxge_hw_mgmt_reg_write(vdev->devh,(enum vxge_hw_mgmt_reg_type)vxge_hw_mgmt_reg_type_mrpcim,0U,5744U,0ULL);
    #line 2981 
    ldv_inline_asm();
  }
  #line 2990 
  if ((unsigned int)vdev->titan1 != 0U) 
                                        #line 2991 
                                        cif_del_timer_sync(& vdev->vp_lockup_timer);
  #line 2993 
  cif_del_timer_sync(& vdev->vp_reset_timer);
  #line 2995 
  if (do_io != 0) 
                  #line 2996 
                  vxge_hw_device_wait_receive_idle(hldev);
  #line 2998 
  cif_clear_bit(1L,& vdev->state);
  #line 3001 
  if (vdev->config.intr_type != 2) 
                                   #line 3002 
                                   napi_disable(& vdev->napi);
  else {
    #line 3004 
    i = 0;
    #line 3004 
    while (vdev->no_of_vpath > i) {
      #line 3005 
      napi_disable(& (vdev->vpaths + (unsigned long)i)->ring.napi);
      #line 3004 
      i ++;
    }
  }
  #line 3008 
  netif_carrier_off(vdev->ndev);
  #line 3009 
  netdev_notice(vdev->ndev,(char *)"Link Down\n");
  #line 3010 
  netif_tx_stop_all_queues(vdev->ndev);
  #line 3013 
  if (do_io != 0) 
                  #line 3014 
                  vxge_hw_device_intr_disable(vdev->devh);
  #line 3016 
  vxge_rem_isr(vdev);
  #line 3018 
  vxge_napi_del_all(vdev);
  #line 3020 
  if (do_io != 0) 
                  #line 3021 
                  vxge_reset_all_vpaths(vdev);
  #line 3023 
  vxge_close_vpaths(vdev,0);
  #line 3025 
  printk((char *)"%s: %s:%d  Exiting...",(char *)(& dev->name),(char *)"do_vxge_close",3026);
  #line 3028 
  cif_clear_bit(0L,& vdev->state);
  #line 3030 
  return 0;
}

#line 3044  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-main.c"
static int vxge_close(struct net_device *dev)
{
  #line 3046 
  do_vxge_close(dev,1);
  #line 3047 
  return 0;
}

#line 3058  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-main.c"
static int vxge_change_mtu(struct net_device *dev, int new_mtu)
{
  #line 3060 
  struct vxgedev *vdev = netdev_priv(dev);
  #line 3062 
  if (vdev->level_trace != 0U) 
                               #line 3062 
                               printk((char *)"%s:%d",(char *)"vxge_change_mtu",3063);
  #line 3066 
  if ((long)(is_vxge_card_up(vdev) == 0) != 0L) {
    #line 3068 
    dev->mtu = (unsigned int)new_mtu;
    #line 3069 
    if (vdev->level_err != 0U) 
                               #line 3069 
                               printk((char *)"%s",(char *)"device is down on MTU change");
    #line 3071 
    return 0;
  }
  #line 3074 
  if (vdev->level_trace != 0U) 
                               #line 3074 
                               printk((char *)"trying to apply new MTU %d",new_mtu);
  #line 3077 
  if (vxge_close(dev) != 0) 
                            #line 3078 
                            return -5;
  #line 3080 
  dev->mtu = (unsigned int)new_mtu;
  #line 3081 
  vdev->mtu = new_mtu;
  #line 3083 
  if (vxge_open(dev) != 0) 
                           #line 3084 
                           return -5;
  #line 3086 
  if (vdev->level_trace != 0U) 
                               #line 3086 
                               printk((char *)"%s: MTU changed to %d",(char *)(& (vdev->ndev)->name),new_mtu);
  #line 3089 
  if (vdev->level_trace != 0U) 
                               #line 3089 
                               printk((char *)"%s:%d  Exiting...",(char *)"vxge_change_mtu",3090);
  #line 3092 
  return 0;
}

#line 3102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-main.c"
static void vxge_get_stats64(struct net_device *dev, struct rtnl_link_stats64 *net_stats)
{
  #line 3105 
  int k;
  #line 3104 
  struct vxgedev *vdev = netdev_priv(dev);
  #line 3108 
  k = 0;
  #line 3108 
  while (vdev->no_of_vpath > k) {
    {
      #line 3111 
      unsigned int start;
      #line 3112 
      u64 packets;
      #line 3112 
      u64 bytes;
      #line 3112 
      u64 multicast;
      #line 3109 
      struct vxge_ring_stats *rxstats = & (vdev->vpaths + (unsigned long)k)->ring.stats;
      #line 3110 
      struct vxge_fifo_stats *txstats = & (vdev->vpaths + (unsigned long)k)->fifo.stats;
      #line 3114 
      while (1) {
        #line 3115 
        start = u64_stats_fetch_begin_irq(& rxstats->syncp);
        #line 3117 
        packets = rxstats->rx_frms;
        #line 3118 
        multicast = rxstats->rx_mcast;
        #line 3119 
        bytes = rxstats->rx_bytes;
        #line 3120 
        if (! ((int)u64_stats_fetch_retry_irq(& rxstats->syncp,start) != 0)) 
          #line 3114 
          break;
      }
      #line 3122 
      net_stats->rx_packets += packets;
      #line 3123 
      net_stats->rx_bytes += bytes;
      #line 3124 
      net_stats->multicast += multicast;
      #line 3126 
      net_stats->rx_errors += (unsigned long long)rxstats->rx_errors;
      #line 3127 
      net_stats->rx_dropped += (unsigned long long)rxstats->rx_dropped;
      #line 3129 
      while (1) {
        #line 3130 
        start = u64_stats_fetch_begin_irq(& txstats->syncp);
        #line 3132 
        packets = txstats->tx_frms;
        #line 3133 
        bytes = txstats->tx_bytes;
        #line 3134 
        if (! ((int)u64_stats_fetch_retry_irq(& txstats->syncp,start) != 0)) 
          #line 3129 
          break;
      }
      #line 3136 
      net_stats->tx_packets += packets;
      #line 3137 
      net_stats->tx_bytes += bytes;
      #line 3138 
      net_stats->tx_errors += (unsigned long long)txstats->tx_errors;
    }
    #line 3108 
    k ++;
  }
  #line 3140 
  return;
}

#line 3142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-main.c"
static enum vxge_hw_status vxge_timestamp_config(struct __vxge_hw_device *devh)
{
  #line 3144 
  enum vxge_hw_status status;
  #line 3145 
  u64 val64;
  #line 3152 
  val64 = 1152921504606846976ULL;
  #line 3156 
  status = vxge_hw_mgmt_reg_write(devh,(enum vxge_hw_mgmt_reg_type)vxge_hw_mgmt_reg_type_mrpcim,0U,8008U,val64);
  #line 3162 
  vxge_hw_device_flush_io(devh);
  #line 3163 
  devh->config.hwts_en = (unsigned int)1U;
  #line 3164 
  return status;
}

#line 3167  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-main.c"
static int vxge_hwtstamp_set(struct vxgedev *vdev, void *data)
{
  #line 3169 
  struct hwtstamp_config config;
  #line 3170 
  int i;
  #line 3172 
  if (copy_from_user((void *)(& config),data,12UL) != 0UL) 
                                                           #line 3173 
                                                           return -14;
  #line 3176 
  if (config.flags != 0) 
                         #line 3177 
                         return -22;
  #line 3180 
  switch (config.tx_type) {
    #line 3181 
    case 0: 
            #line 3181 
    ;
    #line 3182 
    break;
    #line 3183 
    case 1: 
            #line 3183 
    ;
    #line 3184 
    default: 
             #line 3184 
    ;
    #line 3185 
    return -34;
  }
  #line 3188 
  switch (config.rx_filter) {
    #line 3189 
    case 0: 
            #line 3189 
    ;
    #line 3190 
    vdev->rx_hwts = (unsigned int)0U;
    #line 3191 
    config.rx_filter = 0;
    #line 3192 
    break;
    #line 3194 
    case 1: 
            #line 3194 
    ;
    #line 3195 
    case 2: 
            #line 3195 
    ;
    #line 3196 
    case 3: 
            #line 3196 
    ;
    #line 3197 
    case 4: 
            #line 3197 
    ;
    #line 3198 
    case 5: 
            #line 3198 
    ;
    #line 3199 
    case 6: 
            #line 3199 
    ;
    #line 3200 
    case 7: 
            #line 3200 
    ;
    #line 3201 
    case 8: 
            #line 3201 
    ;
    #line 3202 
    case 9: 
            #line 3202 
    ;
    #line 3203 
    case 10: 
             #line 3203 
    ;
    #line 3204 
    case 11: 
             #line 3204 
    ;
    #line 3205 
    case 12: 
             #line 3205 
    ;
    #line 3206 
    case 13: 
             #line 3206 
    ;
    #line 3207 
    case 14: 
             #line 3207 
    ;
    #line 3208 
    case 15: 
             #line 3208 
    ;
    #line 3209 
    if ((unsigned int)(vdev->devh)->config.hwts_en != 1U) 
                                                          #line 3210 
                                                          return -14;
    #line 3212 
    vdev->rx_hwts = (unsigned int)1U;
    #line 3213 
    config.rx_filter = 1;
    #line 3214 
    break;
    #line 3216 
    default: 
             #line 3216 
    ;
    #line 3217 
    return -34;
  }
  #line 3220 
  i = 0;
  #line 3220 
  while (vdev->no_of_vpath > i) {
    #line 3221 
    (vdev->vpaths + (unsigned long)i)->ring.rx_hwts = vdev->rx_hwts;
    #line 3220 
    i ++;
  }
  #line 3223 
  if (copy_to_user(data,(void *)(& config),12UL) != 0UL) 
                                                         #line 3224 
                                                         return -14;
  #line 3226 
  return 0;
}

#line 3229  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-main.c"
static int vxge_hwtstamp_get(struct vxgedev *vdev, void *data)
{
  #line 3231 
  struct hwtstamp_config config;
  #line 3233 
  config.flags = 0;
  #line 3234 
  config.tx_type = 0;
  #line 3235 
  config.rx_filter = (unsigned int)vdev->rx_hwts != 0U;
  #line 3238 
  if (copy_to_user(data,(void *)(& config),12UL) != 0UL) 
                                                         #line 3239 
                                                         return -14;
  #line 3241 
  return 0;
}

#line 3254  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-main.c"
static int vxge_ioctl(struct net_device *dev, struct ifreq *rq, int cmd)
{
  #line 3256 
  struct vxgedev *vdev = netdev_priv(dev);
  #line 3258 
  switch (cmd) {
    #line 3259 
    case 35248: 
                #line 3259 
    ;
    #line 3260 
    return vxge_hwtstamp_set(vdev,rq->ifr_ifru.ifru_data);
    #line 3261 
    case 35249: 
                #line 3261 
    ;
    #line 3262 
    return vxge_hwtstamp_get(vdev,rq->ifr_ifru.ifru_data);
    #line 3263 
    default: 
             #line 3263 
    ;
    #line 3264 
    return -95;
  }
}

#line 3276  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-main.c"
static void vxge_tx_watchdog(struct net_device *dev)
{
  #line 3278 
  struct vxgedev *vdev;
  #line 3280 
  printk((char *)"%s:%d",(char *)"vxge_tx_watchdog",3280);
  #line 3282 
  vdev = (struct vxgedev *)netdev_priv(dev);
  #line 3284 
  vdev->cric_err_event = VXGE_HW_EVENT_RESET_START;
  #line 3286 
  cif_schedule_work(& vdev->reset_task);
  #line 3287 
  printk((char *)"%s:%d  Exiting...",(char *)"vxge_tx_watchdog",3288);
  #line 3288 
  return;
}

#line 3300  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-main.c"
static int vxge_vlan_rx_add_vid(struct net_device *dev, __be16 proto, u16 vid)
{
  #line 3303 
  struct vxge_vpath *vpath;
  #line 3304 
  int vp_id;
  #line 3302 
  struct vxgedev *vdev = netdev_priv(dev);
  #line 3307 
  vp_id = 0;
  #line 3307 
  while (vdev->no_of_vpath > vp_id) {
    #line 3308 
    vpath = vdev->vpaths + (unsigned long)vp_id;
    #line 3309 
    if (vpath->is_open == 0) 
                             #line 3310 
                             goto __Cont;
    #line 3311 
    vxge_hw_vpath_vid_add(vpath->handle,(unsigned long long)vid);
    #line 3307 
    __Cont: 
            #line 3307 
    vp_id ++;
  }
  #line 3313 
  cif_set_bit((long)vid,(unsigned long *)(& vdev->active_vlans));
  #line 3314 
  return 0;
}

#line 3326  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-main.c"
static int vxge_vlan_rx_kill_vid(struct net_device *dev, __be16 proto, u16 vid)
{
  #line 3329 
  struct vxge_vpath *vpath;
  #line 3330 
  int vp_id;
  #line 3328 
  struct vxgedev *vdev = netdev_priv(dev);
  #line 3332 
  printk((char *)"%s:%d",(char *)"vxge_vlan_rx_kill_vid",3332);
  #line 3335 
  vp_id = 0;
  #line 3335 
  while (vdev->no_of_vpath > vp_id) {
    #line 3336 
    vpath = vdev->vpaths + (unsigned long)vp_id;
    #line 3337 
    if (vpath->is_open == 0) 
                             #line 3338 
                             goto __Cont;
    #line 3339 
    vxge_hw_vpath_vid_delete(vpath->handle,(unsigned long long)vid);
    #line 3335 
    __Cont: 
            #line 3335 
    vp_id ++;
  }
  #line 3341 
  printk((char *)"%s:%d  Exiting...",(char *)"vxge_vlan_rx_kill_vid",3342);
  #line 3343 
  cif_clear_bit((long)vid,(unsigned long *)(& vdev->active_vlans));
  #line 3344 
  return 0;
}

#line 3347  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-main.c"
static struct net_device_ops vxge_netdev_ops = {.ndo_open = & vxge_open, .ndo_stop = & vxge_close, .ndo_start_xmit = & vxge_xmit, .ndo_set_rx_mode = & vxge_set_multicast, .ndo_set_mac_address = & vxge_set_mac_addr, .ndo_validate_addr = & eth_validate_addr, .ndo_do_ioctl = & vxge_ioctl, .ndo_change_mtu = & vxge_change_mtu, .ndo_tx_timeout = & vxge_tx_watchdog, .ndo_get_stats64 = & vxge_get_stats64, .ndo_vlan_rx_add_vid = & vxge_vlan_rx_add_vid, .ndo_vlan_rx_kill_vid = & vxge_vlan_rx_kill_vid, .ndo_poll_controller = & vxge_netpoll, .ndo_fix_features = & vxge_fix_features, .ndo_set_features = & vxge_set_features};
#line 3367  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-main.c"
static int vxge_device_register(struct __vxge_hw_device *hldev, struct vxge_config *config, int high_dma, int no_of_vpath, struct vxgedev **vdev_out)
{
  #line 3371 
  struct net_device *ndev;
  #line 3373 
  struct vxgedev *vdev;
  #line 3375 
  u64 stat;
  #line 3372 
  enum vxge_hw_status status = 0;
  #line 3374 
  int ret = 0;
  #line 3374 
  int no_of_queue = 1;
  #line 3377 
  *vdev_out = (struct vxgedev *)0;
  #line 3378 
  if (config->tx_steering_type != 0) 
                                     #line 3379 
                                     no_of_queue = no_of_vpath;
  #line 3381 
  ndev = cif_alloc_etherdev_mqs(7608,(unsigned int)no_of_queue,(unsigned int)no_of_queue);
  #line 3383 
  if (ndev == (struct net_device *)0) {
    #line 3384 
    if (vxge_hw_device_trace_level_get(hldev) > 1U) 
                                                    #line 3384 
                                                    printk((char *)"%s : device allocation failed",(char *)"vxge_device_register");
    else {
      #line 3384 
      if (vxge_hw_device_trace_level_get(hldev) != 0U) 
                                                       #line 3384 
                                                       printk((char *)"%s : device allocation failed",(char *)"vxge_device_register");
    }
    #line 3387 
    ret = -19;
    #line 3388 
    goto _out0;
  }
  #line 3391 
  if (vxge_hw_device_trace_level_get(hldev) > 1U) 
                                                  #line 3391 
                                                  printk((char *)"%s: %s:%d  Entering...",(char *)(& ndev->name),(char *)"vxge_device_register",3394);
  else {
    #line 3391 
    if (vxge_hw_device_trace_level_get(hldev) != 0U) 
                                                     #line 3391 
                                                     printk((char *)"%s: %s:%d  Entering...",(char *)(& ndev->name),(char *)"vxge_device_register",3394);
  }
  #line 3396 
  vdev = (struct vxgedev *)netdev_priv(ndev);
  #line 3397 
  memset((void *)vdev,0,7608UL);
  #line 3399 
  vdev->ndev = ndev;
  #line 3400 
  vdev->devh = hldev;
  #line 3401 
  vdev->pdev = hldev->pdev;
  #line 3402 
  memcpy((void *)(& vdev->config),(void *)config,648UL);
  #line 3403 
  vdev->rx_hwts = (unsigned int)0U;
  #line 3404 
  vdev->titan1 = (unsigned int)((unsigned int)(vdev->pdev)->revision == 1U);
  #line 3406 
  ndev->dev.parent = & (vdev->pdev)->dev;
  #line 3408 
  ndev->hw_features = 549756928147ULL;
  #line 3412 
  if ((unsigned int)vdev->config.rth_steering != 0U) 
                                                     #line 3413 
                                                     ndev->hw_features |= 274877906944ULL;
  #line 3415 
  ndev->features = (ndev->features | ndev->hw_features) | 768ULL;
  #line 3419 
  ndev->netdev_ops = & vxge_netdev_ops;
  #line 3421 
  ndev->watchdog_timeo = 3750;
  {
    #line 3422 
    struct lock_class_key __key;
    #line 3422 
    __init_work(& vdev->reset_task,0);
    #line 3422 
    atomic_long_t __constr_expr_44 = {.counter = 137438953408LL};
    #line 3422 
    vdev->reset_task.data = __constr_expr_44;
    #line 3422 
    lockdep_init_map(& vdev->reset_task.lockdep_map,(char *)"(work_completion)",& __key,0);
    #line 3422 
    INIT_LIST_HEAD(& vdev->reset_task.entry);
    #line 3422 
    vdev->reset_task.func = & vxge_reset;
  }
  #line 3424 
  vxge_initialize_ethtool_ops(ndev);
  #line 3427 
  vdev->vpaths = (struct vxge_vpath *)kcalloc((unsigned long)no_of_vpath,832UL,3264U);
  #line 3429 
  if (vdev->vpaths == (struct vxge_vpath *)0) {
    #line 3430 
    printk((char *)"%s: vpath memory allocation failed",(char *)(& (vdev->ndev)->name));
    #line 3433 
    ret = -12;
    #line 3434 
    goto _out1;
  }
  #line 3437 
  if (vxge_hw_device_trace_level_get(hldev) > 1U) 
                                                  #line 3437 
                                                  printk((char *)"%s : checksumming enabled",(char *)"vxge_device_register");
  else {
    #line 3437 
    if (vxge_hw_device_trace_level_get(hldev) != 0U) 
                                                     #line 3437 
                                                     printk((char *)"%s : checksumming enabled",(char *)"vxge_device_register");
  }
  #line 3440 
  if (high_dma != 0) {
    #line 3441 
    ndev->features |= 32ULL;
    #line 3442 
    if (vxge_hw_device_trace_level_get(hldev) > 1U) 
                                                    #line 3442 
                                                    printk((char *)"%s : using High DMA",(char *)"vxge_device_register");
    else {
      #line 3442 
      if (vxge_hw_device_trace_level_get(hldev) != 0U) 
                                                       #line 3442 
                                                       printk((char *)"%s : using High DMA",(char *)"vxge_device_register");
    }
  }
  #line 3447 
  ndev->min_mtu = 68U;
  #line 3448 
  ndev->max_mtu = 9600U;
  #line 3450 
  ret = cif_register_netdev(ndev);
  #line 3451 
  if (ret != 0) {
    #line 3452 
    if (vxge_hw_device_trace_level_get(hldev) > 1U) 
                                                    #line 3452 
                                                    printk((char *)"%s: %s : device registration failed!",(char *)(& ndev->name),(char *)"vxge_device_register");
    else {
      #line 3452 
      if (vxge_hw_device_trace_level_get(hldev) != 0U) 
                                                       #line 3452 
                                                       printk((char *)"%s: %s : device registration failed!",(char *)(& ndev->name),(char *)"vxge_device_register");
    }
    #line 3455 
    goto _out2;
  }
  #line 3459 
  ndev->addr_len = (unsigned char)6U;
  #line 3465 
  netif_carrier_off(ndev);
  #line 3467 
  if (vxge_hw_device_trace_level_get(hldev) > 1U) 
                                                  #line 3467 
                                                  printk((char *)"%s: Ethernet device registered",(char *)(& ndev->name));
  else {
    #line 3467 
    if (vxge_hw_device_trace_level_get(hldev) != 0U) 
                                                     #line 3467 
                                                     printk((char *)"%s: Ethernet device registered",(char *)(& ndev->name));
  }
  #line 3471 
  hldev->ndev = ndev;
  #line 3472 
  *vdev_out = vdev;
  #line 3475 
  status = vxge_hw_mrpcim_stats_access(hldev,3U,0U,0U,& stat);
  #line 3482 
  if (status == VXGE_HW_ERR_PRIVILEGED_OPERATION) {
    #line 3483 
    if (vxge_hw_device_trace_level_get(hldev) > 1U) 
                                                    #line 3483 
                                                    printk((char *)"%s: device stats clear returns",(char *)(& ndev->name));
    else {
      #line 3483 
      if (vxge_hw_device_trace_level_get(hldev) != 0U) 
                                                       #line 3483 
                                                       printk((char *)"%s: device stats clear returns",(char *)(& ndev->name));
    }
  }
  #line 3488 
  if (vxge_hw_device_trace_level_get(hldev) > 1U) 
                                                  #line 3488 
                                                  printk((char *)"%s: %s:%d  Exiting...",(char *)(& ndev->name),(char *)"vxge_device_register",3490);
  else {
    #line 3488 
    if (vxge_hw_device_trace_level_get(hldev) != 0U) 
                                                     #line 3488 
                                                     printk((char *)"%s: %s:%d  Exiting...",(char *)(& ndev->name),(char *)"vxge_device_register",3490);
  }
  #line 3492 
  return ret;
  #line 3493 
  _out2: 
         #line 3493 
  ;
  #line 3494 
  kfree((void *)vdev->vpaths);
  #line 3495 
  _out1: 
         #line 3495 
  ;
  #line 3496 
  cif_free_netdev(ndev);
  #line 3497 
  _out0: 
         #line 3497 
  ;
  #line 3498 
  return ret;
}

#line 3506  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-main.c"
static void vxge_device_unregister(struct __vxge_hw_device *hldev)
{
  #line 3508 
  struct vxgedev *vdev;
  #line 3509 
  struct net_device *dev;
  #line 3510 
  char buf[16U];
  #line 3512 
  dev = hldev->ndev;
  #line 3513 
  vdev = (struct vxgedev *)netdev_priv(dev);
  #line 3515 
  if (vdev->level_trace != 0U) 
                               #line 3515 
                               printk((char *)"%s: %s:%d",(char *)(& (vdev->ndev)->name),(char *)"vxge_device_unregister",3516);
  #line 3518 
  strlcpy((char *)(& buf),(char *)(& dev->name),16UL);
  #line 3520 
  cif_flush_work(& vdev->reset_task);
  #line 3523 
  cif_unregister_netdev(dev);
  #line 3525 
  kfree((void *)vdev->vpaths);
  #line 3528 
  cif_free_netdev(dev);
  #line 3530 
  if (vdev->level_trace != 0U) 
                               #line 3530 
                               printk((char *)"%s: ethernet device unregistered",(char *)(& buf));
  #line 3532 
  if (vdev->level_trace != 0U) 
                               #line 3532 
                               printk((char *)"%s: %s:%d  Exiting...",(char *)(& buf),(char *)"vxge_device_unregister",3533);
  #line 3533 
  return;
}

#line 3543  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-main.c"
static void vxge_callback_crit_err(struct __vxge_hw_device *hldev, enum vxge_hw_event type, u64 vp_id)
{
  #line 3549 
  int vpath_idx;
  #line 3546 
  struct net_device *dev = hldev->ndev;
  #line 3547 
  struct vxgedev *vdev = netdev_priv(dev);
  #line 3548 
  struct vxge_vpath *vpath = (struct vxge_vpath *)0;
  #line 3551 
  if (vdev->level_trace != 0U) 
                               #line 3551 
                               printk((char *)"%s: %s:%d",(char *)(& (vdev->ndev)->name),(char *)"vxge_callback_crit_err",3552);
  #line 3557 
  vdev->cric_err_event = type;
  #line 3559 
  vpath_idx = 0;
  #line 3559 
  while (vdev->no_of_vpath > vpath_idx) {
    #line 3560 
    vpath = vdev->vpaths + (unsigned long)vpath_idx;
    #line 3561 
    if ((unsigned long long)vpath->device_id == vp_id) 
                                                       #line 3562 
                                                       break;
    #line 3559 
    vpath_idx ++;
  }
  #line 3565 
  if (! test_bit(0L,& vdev->state)) 
    #line 3566 
    if (type == (unsigned int)VXGE_HW_EVENT_SLOT_FREEZE) 
                                                         #line 3567 
                                                         printk((char *)"%s: Slot is frozen",(char *)(& (vdev->ndev)->name));
    else 
      #line 3569 
      if (type == (unsigned int)VXGE_HW_EVENT_SERR) 
                                                    #line 3570 
                                                    printk((char *)"%s: Encountered Serious Error",(char *)(& (vdev->ndev)->name));
      else 
        #line 3573 
        if (type == (unsigned int)VXGE_HW_EVENT_CRITICAL_ERR) 
                                                              #line 3574 
                                                              printk((char *)"%s: Encountered Critical Error",(char *)(& (vdev->ndev)->name));
  #line 3579 
  if (type == (unsigned int)VXGE_HW_EVENT_SERR || type == (unsigned int)VXGE_HW_EVENT_SLOT_FREEZE) {
    #line 3581 
    if ((long)(vdev->exec_mode != 0) != 0L) 
                                            #line 3582 
                                            cif_clear_bit(1L,& vdev->state);
  }
  else 
    #line 3583 
    if (type == (unsigned int)VXGE_HW_EVENT_CRITICAL_ERR) {
      #line 3584 
      vxge_hw_device_mask_all(hldev);
      #line 3585 
      if ((long)(vdev->exec_mode != 0) != 0L) 
                                              #line 3586 
                                              cif_clear_bit(1L,& vdev->state);
    }
    else 
      #line 3587 
      if ((unsigned int)type + 4294967288U <= 1U) 
        #line 3590 
        if ((long)(vdev->exec_mode != 0) != 0L) 
                                                #line 3591 
                                                cif_clear_bit(1L,& vdev->state);
        else {
          #line 3594 
          if (! test_and_set_bit((long)vpath_idx,& vdev->vp_reset)) {
            #line 3597 
            vxge_vpath_intr_disable(vdev,vpath_idx);
            #line 3600 
            netif_tx_stop_queue(vpath->fifo.txq);
          }
        }
  #line 3605 
  if (vdev->level_trace != 0U) 
                               #line 3605 
                               printk((char *)"%s: %s:%d  Exiting...",(char *)(& (vdev->ndev)->name),(char *)"vxge_callback_crit_err",3607);
  #line 3606 
  return;
}

#line 3610  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-main.c"
static void verify_bandwidth(void)
{
  #line 3612 
  int i;
  #line 3612 
  int band_width;
  #line 3612 
  int total = 0;
  #line 3612 
  int equal_priority = 0;
  #line 3615 
  i = 0;
  #line 3615 
  while (i <= 16) {
    #line 3616 
    if (bw_percentage[i] == 0U) {
      #line 3617 
      equal_priority = 1;
      #line 3618 
      break;
    }
    #line 3615 
    i ++;
  }
  #line 3622 
  if (equal_priority == 0) {
    #line 3624 
    i = 0;
    #line 3624 
    while (i <= 16) {
      #line 3625 
      if (bw_percentage[i] == 255U) 
                                    #line 3626 
                                    break;
      #line 3628 
      total = (int)(bw_percentage[i] + (unsigned int)total);
      #line 3629 
      if (total > 100) {
        #line 3630 
        equal_priority = 1;
        #line 3631 
        break;
      }
      #line 3624 
      i ++;
    }
  }
  #line 3636 
  if (equal_priority == 0) 
    #line 3638 
    if (total <= 99) {
      #line 3639 
      if (i <= 16) {
        #line 3641 
        band_width = (100 - total) / (17 - i);
        #line 3644 
        if (band_width <= 1) 
                             #line 3645 
                             equal_priority = 1;
        else 
          #line 3647 
          while (i <= 16) {
            #line 3649 
            bw_percentage[i] = (unsigned int)band_width;
            #line 3647 
            i ++;
          }
      }
    }
    else 
      #line 3653 
      if (i <= 16) 
                   #line 3654 
                   equal_priority = 1;
  #line 3657 
  if (equal_priority != 0) {
    #line 3658 
    printk((char *)"%s: Assigning equal bandwidth to all the vpaths",(char *)"vxge");
    #line 3661 
    bw_percentage[0] = 5U;
    #line 3663 
    i = 1;
    #line 3663 
    while (i <= 16) {
      #line 3664 
      bw_percentage[i] = bw_percentage[0];
      #line 3663 
      i ++;
    }
  }
  #line 3666 
  return;
}

#line 3671  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-main.c"
static int vxge_config_vpaths(struct vxge_hw_device_config *device_config, u64 vpath_mask, struct vxge_config *config_param)
{
  #line 3674 
  int i;
  #line 3674 
  int temp;
  #line 3675 
  u32 txdl_size;
  #line 3675 
  u32 txdl_per_memblock;
  #line 3674 
  int no_of_vpaths = 0;
  #line 3674 
  int default_no_vpath = 0;
  #line 3677 
  temp = (int)driver_config->vpath_per_dev;
  #line 3678 
  if (driver_config->vpath_per_dev == 4294967295U && max_config_dev == 255) {
    #line 3681 
    if (driver_config->g_no_cpus == -1) 
                                        #line 3682 
                                        return 0;
    #line 3684 
    if (driver_config->g_no_cpus == 0) 
                                       #line 3685 
                                       driver_config->g_no_cpus = netif_get_num_default_rss_queues();
    #line 3688 
    driver_config->vpath_per_dev = (unsigned int)(driver_config->g_no_cpus >> 1);
    #line 3689 
    if (driver_config->vpath_per_dev == 0U) 
                                            #line 3690 
                                            driver_config->vpath_per_dev = 1U;
    #line 3692 
    i = 0;
    #line 3692 
    while (i <= 16) {
      #line 3693 
      if (! (((vpath_mask >> (63 - i)) & 1ULL) == 0ULL)) 
                                                         #line 3696 
                                                         default_no_vpath ++;
      #line 3692 
      __Cont: 
              #line 3692 
      i ++;
    }
    #line 3697 
    if (driver_config->vpath_per_dev > (unsigned int)default_no_vpath) 
      #line 3698 
      driver_config->vpath_per_dev = (unsigned int)default_no_vpath;
    #line 3700 
    driver_config->g_no_cpus = (int)((unsigned int)driver_config->g_no_cpus - driver_config->vpath_per_dev * 2U);
    #line 3702 
    if (driver_config->g_no_cpus <= 0) 
                                       #line 3703 
                                       driver_config->g_no_cpus = -1;
  }
  #line 3706 
  if (driver_config->vpath_per_dev == 1U) {
    #line 3707 
    printk((char *)"%s: Disable tx and rx steering, ",(char *)"vxge");
    #line 3710 
    config_param->rth_steering = (unsigned int)0U;
    #line 3711 
    config_param->tx_steering_type = 0;
    #line 3712 
    device_config->rth_en = (unsigned int)0U;
  }
  #line 3716 
  i = 0;
  #line 3716 
  while (i <= 16) {
    #line 3717 
    device_config->vp_config[i].min_bandwidth = bw_percentage[i];
    #line 3716 
    i ++;
  }
  #line 3719 
  i = 0;
  #line 3719 
  while (i <= 16) {
    #line 3720 
    device_config->vp_config[i].vp_id = (unsigned int)i;
    #line 3721 
    device_config->vp_config[i].mtu = 1500U;
    #line 3722 
    if (driver_config->vpath_per_dev > (unsigned int)no_of_vpaths) 
      #line 3723 
      if (((vpath_mask >> (63 - i)) & 1ULL) == 0ULL) {
        #line 3724 
        printk((char *)"%s: vpath: %d is not available",(char *)"vxge",i);
        #line 3727 
        goto __Cont_0;
      }
      else {
        #line 3729 
        printk((char *)"%s: vpath: %d available",(char *)"vxge",i);
        #line 3732 
        no_of_vpaths ++;
      }
    else {
      #line 3735 
      printk((char *)"%s: vpath: %d is not configured, ",(char *)"vxge",i);
      #line 3739 
      break;
    }
    #line 3743 
    device_config->vp_config[i].fifo.enable = 1U;
    #line 3745 
    device_config->vp_config[i].fifo.max_frags = 18U;
    #line 3747 
    device_config->vp_config[i].fifo.memblock_size = 4096U;
    #line 3750 
    txdl_size = device_config->vp_config[i].fifo.max_frags * 32U;
    #line 3752 
    txdl_per_memblock = 4096U / txdl_size;
    #line 3754 
    device_config->vp_config[i].fifo.fifo_blocks = 83U / txdl_per_memblock + 1U;
    #line 3757 
    device_config->vp_config[i].fifo.intr = 0U;
    #line 3761 
    device_config->vp_config[i].tti.intr_enable = 1U;
    #line 3764 
    device_config->vp_config[i].tti.btimer_val = 919117U;
    #line 3767 
    device_config->vp_config[i].tti.timer_ac_en = 1U;
    #line 3773 
    device_config->vp_config[i].tti.timer_ci_en = 0U;
    #line 3776 
    device_config->vp_config[i].tti.timer_ri_en = 0U;
    #line 3779 
    device_config->vp_config[i].tti.util_sel = 17U;
    #line 3782 
    device_config->vp_config[i].tti.ltimer_val = 3676U;
    #line 3785 
    device_config->vp_config[i].tti.rtimer_val = 0U;
    #line 3788 
    device_config->vp_config[i].tti.urange_a = 5U;
    #line 3789 
    device_config->vp_config[i].tti.urange_b = 15U;
    #line 3790 
    device_config->vp_config[i].tti.urange_c = 40U;
    #line 3791 
    device_config->vp_config[i].tti.uec_a = 5U;
    #line 3792 
    device_config->vp_config[i].tti.uec_b = 40U;
    #line 3793 
    device_config->vp_config[i].tti.uec_c = 60U;
    #line 3794 
    device_config->vp_config[i].tti.uec_d = 100U;
    #line 3797 
    device_config->vp_config[i].ring.enable = 1U;
    #line 3800 
    device_config->vp_config[i].ring.ring_blocks = 2U;
    #line 3803 
    device_config->vp_config[i].ring.buffer_mode = 1U;
    #line 3806 
    device_config->vp_config[i].ring.rxds_limit = 44ULL;
    #line 3809 
    device_config->vp_config[i].ring.scatter_mode = 0U;
    #line 3813 
    device_config->vp_config[i].rti.intr_enable = 1U;
    #line 3816 
    device_config->vp_config[i].rti.btimer_val = 919U;
    #line 3819 
    device_config->vp_config[i].rti.timer_ac_en = 1U;
    #line 3822 
    device_config->vp_config[i].rti.timer_ci_en = 0U;
    #line 3825 
    device_config->vp_config[i].rti.timer_ri_en = 0U;
    #line 3828 
    device_config->vp_config[i].rti.util_sel = 18U;
    #line 3831 
    device_config->vp_config[i].rti.urange_a = 5U;
    #line 3833 
    device_config->vp_config[i].rti.urange_b = 15U;
    #line 3835 
    device_config->vp_config[i].rti.urange_c = 40U;
    #line 3837 
    device_config->vp_config[i].rti.uec_a = 1U;
    #line 3838 
    device_config->vp_config[i].rti.uec_b = 5U;
    #line 3839 
    device_config->vp_config[i].rti.uec_c = 10U;
    #line 3840 
    device_config->vp_config[i].rti.uec_d = 15U;
    #line 3842 
    device_config->vp_config[i].rti.rtimer_val = 0U;
    #line 3845 
    device_config->vp_config[i].rti.ltimer_val = 367U;
    #line 3848 
    device_config->vp_config[i].rpa_strip_vlan_tag = (unsigned int)vlan_tag_strip;
    #line 3719 
    __Cont_0: 
              #line 3719 
    i ++;
  }
  #line 3852 
  driver_config->vpath_per_dev = (unsigned int)temp;
  #line 3853 
  return no_of_vpaths;
}

#line 3857  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-main.c"
static void vxge_device_config_init(struct vxge_hw_device_config *device_config, int *intr_type)
{
  #line 3861 
  device_config->dma_blockpool_initial = 0U;
  #line 3864 
  device_config->dma_blockpool_max = 4096U;
  #line 3867 
  if (max_mac_vpath > 30) 
                          #line 3868 
                          max_mac_vpath = 30;
  #line 3878 
  switch (*intr_type) {
    #line 3879 
    case 0: 
            #line 3879 
    ;
    #line 3880 
    device_config->intr_mode = (unsigned int)0U;
    #line 3881 
    break;
    #line 3883 
    case 2: 
            #line 3883 
    ;
    #line 3884 
    device_config->intr_mode = (unsigned int)2U;
    #line 3885 
    break;
  }
  #line 3889 
  device_config->device_poll_millis = 10000U;
  #line 3892 
  device_config->rts_mac_en = (unsigned int)addr_learn_en;
  #line 3895 
  device_config->rth_it_type = (unsigned int)1U;
  #line 3897 
  printk((char *)"%s : Device Config Params ",(char *)"vxge_device_config_init");
  #line 3899 
  printk((char *)"intr_mode : %d",(int)device_config->intr_mode);
  #line 3901 
  printk((char *)"device_poll_millis : %d",device_config->device_poll_millis);
  #line 3903 
  printk((char *)"rth_en : %d",(int)device_config->rth_en);
  #line 3905 
  printk((char *)"rth_it_type : %d",(int)device_config->rth_it_type);
  #line 3906 
  return;
}

#line 3909  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-main.c"
static void vxge_print_parm(struct vxgedev *vdev, u64 vpath_mask)
{
  #line 3911 
  int i;
  #line 3913 
  printk((char *)"%s: %d Vpath(s) opened",(char *)(& (vdev->ndev)->name),vdev->no_of_vpath);
  #line 3917 
  switch (vdev->config.intr_type) {
    #line 3918 
    case 0: 
            #line 3918 
    ;
    #line 3919 
    printk((char *)"%s: Interrupt type INTA",(char *)(& (vdev->ndev)->name));
    #line 3921 
    break;
    #line 3923 
    case 2: 
            #line 3923 
    ;
    #line 3924 
    printk((char *)"%s: Interrupt type MSI-X",(char *)(& (vdev->ndev)->name));
    #line 3926 
    break;
  }
  #line 3929 
  if ((unsigned int)vdev->config.rth_steering != 0U) 
                                                     #line 3930 
                                                     printk((char *)"%s: RTH steering enabled for TCP_IPV4",(char *)(& (vdev->ndev)->name)); else 
                                                                    #line 3934 
                                                                    printk((char *)"%s: RTH steering disabled",(char *)(& (vdev->ndev)->name));
  #line 3938 
  switch (vdev->config.tx_steering_type) {
    #line 3939 
    case 0: 
            #line 3939 
    ;
    #line 3940 
    printk((char *)"%s: Tx steering disabled",(char *)(& (vdev->ndev)->name));
    #line 3942 
    break;
    #line 3943 
    case 1: 
            #line 3943 
    ;
    #line 3944 
    printk((char *)"%s: Unsupported tx steering option",(char *)(& (vdev->ndev)->name));
    #line 3947 
    printk((char *)"%s: Tx steering disabled",(char *)(& (vdev->ndev)->name));
    #line 3949 
    vdev->config.tx_steering_type = 0;
    #line 3950 
    break;
    #line 3951 
    case 2: 
            #line 3951 
    ;
    #line 3952 
    printk((char *)"%s: Unsupported tx steering option",(char *)(& (vdev->ndev)->name));
    #line 3955 
    printk((char *)"%s: Tx steering disabled",(char *)(& (vdev->ndev)->name));
    #line 3957 
    vdev->config.tx_steering_type = 0;
    #line 3958 
    break;
    #line 3959 
    case 4: 
            #line 3959 
    ;
    #line 3960 
    printk((char *)"%s: Tx multiqueue steering enabled",(char *)(& (vdev->ndev)->name));
    #line 3963 
    break;
    #line 3964 
    case 3: 
            #line 3964 
    ;
    #line 3965 
    printk((char *)"%s: Tx port steering enabled",(char *)(& (vdev->ndev)->name));
    #line 3968 
    break;
    #line 3969 
    default: 
             #line 3969 
    ;
    #line 3970 
    printk((char *)"%s: Unsupported tx steering type",(char *)(& (vdev->ndev)->name));
    #line 3973 
    printk((char *)"%s: Tx steering disabled",(char *)(& (vdev->ndev)->name));
    #line 3975 
    vdev->config.tx_steering_type = 0;
  }
  #line 3978 
  if (vdev->config.addr_learn_en != 0) 
                                       #line 3979 
                                       printk((char *)"%s: MAC Address learning enabled",(char *)(& (vdev->ndev)->name));
  #line 3982 
  i = 0;
  #line 3982 
  while (i <= 16) {
    {
      #line 3989 
      char *tmp;
      #line 3983 
      if (((vpath_mask >> (63 - i)) & 1ULL) == 0ULL) 
                                                     #line 3984 
                                                     goto __Cont;
      #line 3985 
      printk((char *)"%s: MTU size - %d",(char *)(& (vdev->ndev)->name),(vdev->devh)->config.vp_config[i].mtu);
      #line 3989 
      if ((vdev->devh)->config.vp_config[i].rpa_strip_vlan_tag != 0U) 
        #line 3989 
        tmp = (char *)"Enabled"; else 
                                      #line 3989 
                                      tmp = (char *)"Disabled";
      #line 3989 
      ;
      #line 3989 
      printk((char *)"%s: VLAN tag stripping %s",(char *)(& (vdev->ndev)->name),tmp);
      #line 3994 
      printk((char *)"%s: Max frags : %d",(char *)(& (vdev->ndev)->name),(vdev->devh)->config.vp_config[i].fifo.max_frags);
      #line 3998 
      break;
    }
    #line 3982 
    __Cont: 
            #line 3982 
    i ++;
  }
  #line 4000 
  return;
}

#line 4007  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-main.c"
static int vxge_pm_suspend(struct pci_dev *pdev, pm_message_t state)
{
  #line 4009 
  return -38;
}

#line 4015  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-main.c"
static int vxge_pm_resume(struct pci_dev *pdev)
{
  #line 4017 
  return -38;
}

#line 4030  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-main.c"
static pci_ers_result_t vxge_io_error_detected(struct pci_dev *pdev, pci_channel_state_t state)
{
  #line 4033 
  struct __vxge_hw_device *hldev = pci_get_drvdata(pdev);
  #line 4034 
  struct net_device *netdev = hldev->ndev;
  #line 4036 
  netif_device_detach(netdev);
  #line 4038 
  if (state == 3U) 
                   #line 4039 
                   return 4U;
  #line 4041 
  if ((int)netif_running(netdev) != 0) 
                                       #line 4043 
                                       do_vxge_close(netdev,0);
  #line 4046 
  pci_disable_device(pdev);
  #line 4048 
  return 3U;
}

#line 4060  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-main.c"
static pci_ers_result_t vxge_io_slot_reset(struct pci_dev *pdev)
{
  #line 4062 
  struct __vxge_hw_device *hldev = pci_get_drvdata(pdev);
  #line 4063 
  struct net_device *netdev = hldev->ndev;
  #line 4065 
  struct vxgedev *vdev = netdev_priv(netdev);
  #line 4067 
  if (pci_enable_device(pdev) != 0) {
    #line 4068 
    netdev_err(netdev,(char *)"Cannot re-enable device after reset\n");
    #line 4069 
    return 4U;
  }
  #line 4072 
  pci_set_master(pdev);
  #line 4073 
  do_vxge_reset(vdev,2);
  #line 4075 
  return 5U;
}

#line 4085  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-main.c"
static void vxge_io_resume(struct pci_dev *pdev)
{
  #line 4087 
  struct __vxge_hw_device *hldev = pci_get_drvdata(pdev);
  #line 4088 
  struct net_device *netdev = hldev->ndev;
  #line 4090 
  if ((int)netif_running(netdev) != 0) {
    #line 4091 
    if (vxge_open(netdev) != 0) {
      #line 4092 
      netdev_err(netdev,(char *)"Can\'t bring device back up after reset\n");
      #line 4094 
      return;
    }
  }
  #line 4098 
  netif_device_attach(netdev);
  #line 4099 
  return;
}

#line 4101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-main.c"
__inline static u32 vxge_get_num_vfs(u64 function_mode)
{
  #line 4103 
  u32 num_functions = 0U;
  #line 4105 
  switch (function_mode) {
    #line 4106 
    case (u64)1: 
                 #line 4106 
    ;
    #line 4107 
    case (u64)6: 
                 #line 4107 
    ;
    #line 4108 
    num_functions = 8U;
    #line 4109 
    break;
    #line 4110 
    case (u64)0: 
                 #line 4110 
    ;
    #line 4111 
    num_functions = 1U;
    #line 4112 
    break;
    #line 4113 
    case (u64)2: 
                 #line 4113 
    ;
    #line 4114 
    case (u64)3: 
                 #line 4114 
    ;
    #line 4115 
    case (u64)5: 
                 #line 4115 
    ;
    #line 4116 
    num_functions = 17U;
    #line 4117 
    break;
    #line 4118 
    case (u64)7: 
                 #line 4118 
    ;
    #line 4119 
    num_functions = 4U;
    #line 4120 
    break;
    #line 4121 
    case (u64)8: 
                 #line 4121 
    ;
    #line 4122 
    num_functions = 2U;
    #line 4123 
    break;
    #line 4124 
    case (u64)4: 
                 #line 4124 
    ;
    #line 4125 
    num_functions = 8U;
    #line 4126 
    break;
  }
  #line 4128 
  return num_functions;
}

#line 4131  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-main.c"
int vxge_fw_upgrade(struct vxgedev *vdev, char *fw_name, int override)
{
  #line 4134 
  u32 maj;
  #line 4134 
  u32 min;
  #line 4134 
  u32 bld;
  #line 4134 
  u32 cmaj;
  #line 4134 
  u32 cmin;
  #line 4134 
  u32 cbld;
  #line 4135 
  enum vxge_hw_status status;
  #line 4136 
  struct firmware *fw;
  #line 4137 
  int ret;
  #line 4133 
  struct __vxge_hw_device *hldev = vdev->devh;
  #line 4139 
  ret = cif_request_firmware(& fw,fw_name,& (vdev->pdev)->dev);
  #line 4140 
  if (ret != 0) {
    #line 4141 
    printk((char *)"%s: Firmware file \'%s\' not found",(char *)"vxge",fw_name);
    #line 4143 
    goto out;
  }
  #line 4147 
  status = vxge_update_fw_image(hldev,fw->data,(int)fw->size);
  #line 4148 
  if (status != VXGE_HW_OK) {
    #line 4149 
    printk((char *)"%s: FW image download to adapter failed \'%s\'.",(char *)"vxge",fw_name);
    #line 4152 
    ret = -5;
    #line 4153 
    goto out;
  }
  #line 4157 
  status = vxge_hw_upgrade_read_version(hldev,& maj,& min,& bld);
  #line 4158 
  if (status != VXGE_HW_OK) {
    #line 4159 
    printk((char *)"%s: Upgrade read version failed \'%s\'.",(char *)"vxge",fw_name);
    #line 4162 
    ret = -5;
    #line 4163 
    goto out;
  }
  #line 4166 
  cmaj = vdev->config.device_hw_info.fw_version.major;
  #line 4167 
  cmin = vdev->config.device_hw_info.fw_version.minor;
  #line 4168 
  cbld = vdev->config.device_hw_info.fw_version.build;
  #line 4173 
  if (((maj << 16) + (min << 8)) + bld == ((cmaj << 16) + (cmin << 8)) + cbld && override == 0) {
    #line 4175 
    ret = -22;
    #line 4176 
    goto out;
  }
  #line 4179 
  printk((char *)"\001",maj,min,bld);
  #line 4183 
  status = vxge_hw_flash_fw(hldev);
  #line 4184 
  if (status != VXGE_HW_OK) {
    #line 4185 
    printk((char *)"%s: Upgrade commit failed \'%s\'.",(char *)"vxge",fw_name);
    #line 4187 
    ret = -5;
    #line 4188 
    goto out;
  }
  #line 4191 
  printk((char *)"\001");
  #line 4195 
  out: 
       #line 4195 
  ;
  #line 4196 
  cif_release_firmware(fw);
  #line 4197 
  return ret;
}

#line 4200  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-main.c"
static int vxge_probe_fw_update(struct vxgedev *vdev)
{
  #line 4202 
  u32 maj;
  #line 4202 
  u32 min;
  #line 4202 
  u32 bld;
  #line 4203 
  int ret;
  #line 4204 
  char *fw_name;
  #line 4203 
  int gpxe = 0;
  #line 4206 
  maj = vdev->config.device_hw_info.fw_version.major;
  #line 4207 
  min = vdev->config.device_hw_info.fw_version.minor;
  #line 4208 
  bld = vdev->config.device_hw_info.fw_version.build;
  #line 4210 
  if (((maj << 16) + (min << 8)) + bld == 67585U) 
                                                  #line 4211 
                                                  return 0;
  #line 4216 
  if ((maj << 16) + (min << 8) > 67585U) {
    #line 4217 
    printk((char *)"%s: Firmware newer than last known ",(char *)"vxge");
    #line 4220 
    return -22;
  }
  #line 4226 
  if (((maj << 16) + (min << 8)) + bld <= 66564U) {
    #line 4227 
    printk((char *)"%s: Firmware %d.%d.%d cannot be ",(char *)"vxge",maj,min,bld);
    #line 4229 
    return -22;
  }
  #line 4233 
  if (((maj << 16) + (min << 8)) + bld > 67072U) {
    #line 4234 
    int i;
    #line 4235 
    i = 0;
    #line 4235 
    while (i <= 7) {
      #line 4236 
      if ((unsigned int)(vdev->devh)->eprom_versions[i] != 0U) {
        #line 4237 
        gpxe = 1;
        #line 4238 
        break;
      }
      #line 4235 
      i ++;
    }
  }
  #line 4241 
  if (gpxe != 0) 
                 #line 4242 
                 fw_name = (char *)"vxge/X3fw-pxe.ncf"; else 
                                                             #line 4244 
                                                             fw_name = (char *)"vxge/X3fw.ncf";
  #line 4246 
  ret = vxge_fw_upgrade(vdev,fw_name,0);
  #line 4250 
  if (ret != -22 && ret != -2) 
                               #line 4251 
                               return -5; else 
                                               #line 4253 
                                               ret = 0;
  #line 4255 
  if ((maj << 16) + (min << 8) <= 67583U) {
    #line 4257 
    printk((char *)"%s: Firmware %d.%d.%d is too old to",(char *)"vxge",maj,min,bld);
    #line 4260 
    return -22;
  }
  #line 4263 
  return ret;
}

#line 4266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-main.c"
static int is_sriov_initialized(struct pci_dev *pdev)
{
  #line 4268 
  int pos;
  #line 4269 
  u16 ctrl;
  #line 4271 
  pos = pci_find_ext_capability(pdev,16);
  #line 4272 
  if (pos != 0) {
    #line 4273 
    pci_read_config_word(pdev,pos + 8,& ctrl);
    #line 4274 
    if (((int)ctrl & 1) != 0) 
                              #line 4275 
                              return 1;
  }
  #line 4277 
  return 0;
}

#line 4280  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-main.c"
static struct vxge_hw_uld_cbs vxge_callbacks = {.link_up = & vxge_callback_link_up, .link_down = & vxge_callback_link_down, .crit_err = & vxge_callback_crit_err};
#line 4298  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-main.c"
static int vxge_probe(struct pci_dev *pdev, struct pci_device_id *pre)
{
  #line 4300 
  struct __vxge_hw_device *hldev;
  #line 4301 
  enum vxge_hw_status status;
  #line 4302 
  int ret;
  #line 4305 
  struct vxgedev *vdev;
  #line 4308 
  struct vxge_hw_device_attr attr;
  #line 4309 
  int i;
  #line 4309 
  int j;
  #line 4310 
  u8 *macaddr;
  #line 4311 
  struct vxge_mac_addrs *entry;
  #line 4313 
  u32 host_type;
  #line 4315 
  enum vxge_hw_status is_privileged;
  #line 4316 
  u32 function_mode;
  #line 4303 
  int high_dma = 0;
  #line 4304 
  u64 vpath_mask = 0ULL;
  #line 4306 
  struct vxge_config *ll_config = (struct vxge_config *)0;
  #line 4307 
  struct vxge_hw_device_config *device_config = (struct vxge_hw_device_config *)0;
  #line 4309 
  int no_of_vpath = 0;
  #line 4309 
  int max_vpath_supported = 0;
  #line 4312 
  int bus = -1;
  #line 4312 
  int device = -1;
  #line 4314 
  u8 new_device = (unsigned char)0U;
  #line 4317 
  u32 num_vfs = 0U;
  #line 4319 
  printk((char *)"%s:%d",(char *)"vxge_probe",4319);
  #line 4320 
  attr.pdev = pdev;
  #line 4325 
  if (((int)(pdev->bus)->number != bus || ((pdev->devfn >> 3) & 31U) != (unsigned int)device) && (unsigned int)pdev->is_virtfn == 0U) 
    #line 4327 
    new_device = (unsigned char)1U;
  #line 4329 
  bus = (int)(pdev->bus)->number;
  #line 4330 
  device = (int)(pdev->devfn >> 3) & 31;
  #line 4332 
  if ((unsigned int)new_device != 0U) {
    #line 4333 
    if (driver_config->config_dev_cnt != 0 && driver_config->config_dev_cnt != driver_config->total_dev_cnt) 
      #line 4336 
      printk((char *)"%s: Configured %d of %d devices",(char *)"vxge",driver_config->config_dev_cnt,driver_config->total_dev_cnt);
    #line 4341 
    driver_config->config_dev_cnt = 0;
    #line 4342 
    driver_config->total_dev_cnt = 0;
  }
  #line 4348 
  driver_config->g_no_cpus = 0;
  #line 4349 
  driver_config->vpath_per_dev = (unsigned int)max_config_vpath;
  #line 4351 
  (driver_config->total_dev_cnt) ++;
  #line 4352 
  (driver_config->config_dev_cnt) ++;
  #line 4352 
  ;
  #line 4352 
  if (driver_config->config_dev_cnt > max_config_dev) {
    #line 4353 
    ret = 0;
    #line 4354 
    goto _exit0;
  }
  #line 4357 
  device_config = (struct vxge_hw_device_config *)kzalloc(3280UL,3264U);
  #line 4359 
  if (device_config == (struct vxge_hw_device_config *)0) {
    #line 4360 
    ret = -12;
    #line 4361 
    printk((char *)"device_config : malloc failed %s %d",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-main.c",4363);
    #line 4364 
    goto _exit0;
  }
  #line 4367 
  ll_config = (struct vxge_config *)kzalloc(648UL,3264U);
  #line 4368 
  if (ll_config == (struct vxge_config *)0) {
    #line 4369 
    ret = -12;
    #line 4370 
    printk((char *)"device_config : malloc failed %s %d",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-main.c",4372);
    #line 4373 
    goto _exit0;
  }
  #line 4375 
  ll_config->tx_steering_type = 4;
  #line 4376 
  ll_config->intr_type = 2;
  #line 4377 
  ll_config->napi_weight = 64;
  #line 4378 
  ll_config->rth_steering = (unsigned int)2U;
  #line 4381 
  vxge_hw_device_config_default_get(device_config);
  #line 4384 
  vxge_device_config_init(device_config,& ll_config->intr_type);
  #line 4386 
  ret = pci_enable_device(pdev);
  #line 4387 
  if (ret != 0) {
    #line 4388 
    printk((char *)"%s : can not enable PCI device",(char *)"vxge_probe");
    #line 4390 
    goto _exit0;
  }
  #line 4393 
  if (pci_set_dma_mask(pdev,18446744073709551615ULL) == 0) {
    #line 4394 
    printk((char *)"%s : using 64bit DMA",(char *)"vxge_probe");
    #line 4397 
    high_dma = 1;
    #line 4399 
    if (pci_set_consistent_dma_mask(pdev,18446744073709551615ULL) != 0) {
      #line 4401 
      printk((char *)"%s : unable to obtain 64bit DMA for ",(char *)"vxge_probe");
      #line 4404 
      ret = -12;
      #line 4405 
      goto _exit1;
    }
  }
  else {
    #line 4407 
    if (pci_set_dma_mask(pdev,4294967295ULL) == 0) 
                                                   #line 4408 
                                                   printk((char *)"%s : using 32bit DMA",(char *)"vxge_probe");
    else {
      #line 4411 
      ret = -12;
      #line 4412 
      goto _exit1;
    }
  }
  #line 4415 
  ret = pci_request_region(pdev,0,(char *)"vxge");
  #line 4416 
  if (ret != 0) {
    #line 4417 
    printk((char *)"%s : request regions failed",(char *)"vxge_probe");
    #line 4419 
    goto _exit1;
  }
  #line 4422 
  pci_set_master(pdev);
  #line 4424 
  attr.bar0 = pci_ioremap_bar(pdev,0);
  #line 4425 
  if (attr.bar0 == (void *)0) {
    #line 4426 
    printk((char *)"%s : cannot remap io memory bar0",(char *)"vxge_probe");
    #line 4428 
    ret = -19;
    #line 4429 
    goto _exit2;
  }
  #line 4431 
  printk((char *)"pci ioremap bar0: %p:0x%llx",attr.bar0,pdev->resource[0].start);
  #line 4436 
  status = vxge_hw_device_hw_info_get(attr.bar0,& ll_config->device_hw_info);
  #line 4438 
  if (status != VXGE_HW_OK) {
    #line 4439 
    printk((char *)"%s: Reading of hardware info failed.",(char *)"vxge");
    #line 4442 
    ret = -22;
    #line 4443 
    goto _exit3;
  }
  #line 4446 
  vpath_mask = ll_config->device_hw_info.vpath_mask;
  #line 4447 
  if (vpath_mask == 0ULL) {
    #line 4448 
    printk((char *)"%s: No vpaths available in device",(char *)"vxge");
    #line 4450 
    ret = -22;
    #line 4451 
    goto _exit3;
  }
  #line 4454 
  printk((char *)"%s:%d  Vpath mask = %llx",(char *)"vxge_probe",4455,vpath_mask);
  #line 4458 
  function_mode = (unsigned int)ll_config->device_hw_info.function_mode;
  #line 4459 
  host_type = ll_config->device_hw_info.host_type;
  #line 4460 
  is_privileged = __vxge_hw_device_is_privilaged(host_type,ll_config->device_hw_info.func_id);
  #line 4464 
  i = 0;
  #line 4464 
  while (i <= 16) {
    #line 4465 
    if (((9223372036854775808ULL >> i) & vpath_mask) == 0ULL) 
                                                              #line 4466 
                                                              goto __Cont;
    #line 4467 
    max_vpath_supported ++;
    #line 4464 
    __Cont: 
            #line 4464 
    i ++;
  }
  #line 4470 
  if ((unsigned int)new_device != 0U) {
    #line 4471 
    num_vfs = vxge_get_num_vfs((unsigned long long)function_mode) + 4294967295U;
  }
  #line 4474 
  if ((function_mode == 2U || function_mode == 6U) || function_mode == 7U) {
    #line 4474 
    if (is_sriov_initialized(pdev) == 0) 
      #line 4474 
      if (ll_config->intr_type != 0) {
        #line 4476 
        ret = pci_enable_sriov(pdev,(int)num_vfs);
        #line 4477 
        if (ret != 0) 
                      #line 4478 
                      printk((char *)"Failed in enabling SRIOV mode: %d\n",ret);
      }
  }
  #line 4487 
  no_of_vpath = vxge_config_vpaths(device_config,vpath_mask,ll_config);
  #line 4488 
  if (no_of_vpath == 0) {
    #line 4489 
    printk((char *)"%s: No more vpaths to configure",(char *)"vxge");
    #line 4491 
    ret = 0;
    #line 4492 
    goto _exit3;
  }
  #line 4496 
  attr.uld_callbacks = & vxge_callbacks;
  #line 4498 
  status = vxge_hw_device_initialize(& hldev,& attr,device_config);
  #line 4499 
  if (status != VXGE_HW_OK) {
    #line 4500 
    printk((char *)"Failed to initialize device (%d)",(int)status);
    #line 4502 
    ret = -22;
    #line 4503 
    goto _exit3;
  }
  #line 4506 
  if (((ll_config->device_hw_info.fw_version.major << 16) + (ll_config->device_hw_info.fw_version.minor << 8)) + ll_config->device_hw_info.fw_version.build > 67072U) {
    #line 4510 
    struct eprom_image img[8U];
    #line 4512 
    status = vxge_hw_vpath_eprom_img_ver_get(hldev,(struct eprom_image *)(& img));
    #line 4513 
    if (status != VXGE_HW_OK) 
                              #line 4514 
                              printk((char *)"%s: Reading of EPROM failed",(char *)"vxge");
    #line 4519 
    i = 0;
    #line 4519 
    while (i <= 7) {
      #line 4520 
      hldev->eprom_versions[i] = img[i].version;
      #line 4521 
      if ((unsigned int)img[i].is_valid == 0U) 
                                               #line 4522 
                                               break;
      #line 4523 
      printk((char *)"%s: EPROM %d, version ",(char *)"vxge",i,(unsigned int)((int)img[i].version >> 12) & 15U,(unsigned int)((int)img[i].version >> 8) & 15U,(unsigned int)((int)img[i].version >> 4) & 15U,(unsigned int)img[i].version & 15U);
      #line 4519 
      i ++;
    }
  }
  #line 4533 
  status = vxge_hw_vpath_strip_fcs_check(hldev,vpath_mask);
  #line 4534 
  if (status != VXGE_HW_OK) {
    #line 4535 
    printk((char *)"%s: FCS stripping is enabled in MAC",(char *)"vxge");
    #line 4537 
    ret = -22;
    #line 4538 
    goto _exit4;
  }
  #line 4549 
  if (is_privileged == VXGE_HW_OK) {
    #line 4550 
    status = vxge_timestamp_config(hldev);
    #line 4551 
    if (status != VXGE_HW_OK) {
      #line 4552 
      printk((char *)"%s: HWTS enable failed",(char *)"vxge");
      #line 4554 
      ret = -14;
      #line 4555 
      goto _exit4;
    }
  }
  #line 4559 
  vxge_hw_device_debug_set(hldev,(enum vxge_debug_level)VXGE_ERR,536870912U);
  #line 4562 
  pci_set_drvdata(pdev,(void *)hldev);
  #line 4564 
  ll_config->fifo_indicate_max_pkts = 84;
  #line 4565 
  ll_config->addr_learn_en = addr_learn_en;
  #line 4566 
  ll_config->rth_algorithm = (unsigned int)0U;
  #line 4567 
  ll_config->rth_hash_type_tcpipv4 = (unsigned int)1U;
  #line 4568 
  ll_config->rth_hash_type_ipv4 = (unsigned int)0U;
  #line 4569 
  ll_config->rth_hash_type_tcpipv6 = (unsigned int)0U;
  #line 4570 
  ll_config->rth_hash_type_ipv6 = (unsigned int)0U;
  #line 4571 
  ll_config->rth_hash_type_tcpipv6ex = (unsigned int)0U;
  #line 4572 
  ll_config->rth_hash_type_ipv6ex = (unsigned int)0U;
  #line 4573 
  ll_config->rth_bkt_sz = (unsigned int)4U;
  #line 4574 
  ll_config->tx_pause_enable = 1;
  #line 4575 
  ll_config->rx_pause_enable = 1;
  #line 4577 
  ret = vxge_device_register(hldev,ll_config,high_dma,no_of_vpath,& vdev);
  #line 4579 
  if (ret != 0) {
    #line 4580 
    ret = -22;
    #line 4581 
    goto _exit4;
  }
  #line 4584 
  ret = vxge_probe_fw_update(vdev);
  #line 4585 
  if (ret != 0) 
                #line 4586 
                goto _exit5;
  #line 4588 
  vxge_hw_device_debug_set(hldev,(enum vxge_debug_level)VXGE_TRACE,536870912U);
  #line 4589 
  i = 0;
  #line 4589 
  while (vdev->no_of_vpath > i) {
    #line 4589 
    (vdev->vpaths + (unsigned long)i)->level_err = vxge_hw_device_error_level_get(hldev);
    #line 4589 
    (vdev->vpaths + (unsigned long)i)->level_trace = vxge_hw_device_trace_level_get(hldev);
    #line 4589 
    i ++;
  }
  #line 4589 
  vdev->level_err = vxge_hw_device_error_level_get(hldev);
  #line 4589 
  vdev->level_trace = vxge_hw_device_trace_level_get(hldev);
  #line 4593 
  vdev->mtu = 1500;
  #line 4594 
  vdev->bar0 = attr.bar0;
  #line 4595 
  vdev->max_vpath_supported = max_vpath_supported;
  #line 4596 
  vdev->no_of_vpath = no_of_vpath;
  #line 4599 
  i = 0;
  #line 4599 
  j = 0;
  #line 4599 
  while (i <= 16) {
    #line 4600 
    if (((vpath_mask >> (63 - i)) & 1ULL) == 0ULL) 
                                                   #line 4601 
                                                   goto __Cont_0;
    #line 4602 
    if (vdev->no_of_vpath <= j) 
                                #line 4603 
                                break;
    #line 4605 
    (vdev->vpaths + (unsigned long)j)->is_configured = 1;
    #line 4606 
    (vdev->vpaths + (unsigned long)j)->device_id = i;
    #line 4607 
    (vdev->vpaths + (unsigned long)j)->ring.driver_id = j;
    #line 4608 
    (vdev->vpaths + (unsigned long)j)->vdev = vdev;
    #line 4609 
    (vdev->vpaths + (unsigned long)j)->max_mac_addr_cnt = max_mac_vpath;
    #line 4610 
    memcpy((void *)(& (vdev->vpaths + (unsigned long)j)->macaddr),(void *)(& ll_config->device_hw_info.mac_addrs[i]),6UL);
    #line 4615 
    INIT_LIST_HEAD(& (vdev->vpaths + (unsigned long)j)->mac_addr_list);
    #line 4617 
    (vdev->vpaths + (unsigned long)j)->mac_addr_cnt = (unsigned short)0U;
    #line 4618 
    (vdev->vpaths + (unsigned long)j)->mcast_addr_cnt = (unsigned short)0U;
    #line 4619 
    j ++;
    #line 4599 
    __Cont_0: 
              #line 4599 
    i ++;
  }
  #line 4621 
  vdev->exec_mode = 0;
  #line 4622 
  vdev->max_config_port = max_config_port;
  #line 4624 
  vdev->vlan_tag_strip = vlan_tag_strip;
  #line 4627 
  i = 0;
  #line 4627 
  while (vdev->no_of_vpath > i) {
    #line 4628 
    vdev->vpath_selector[i] = (unsigned char)vpath_selector[i];
    #line 4627 
    i ++;
  }
  #line 4630 
  macaddr = (u8 *)(& (vdev->vpaths)->macaddr);
  #line 4632 
  ll_config->device_hw_info.serial_number[63] = (unsigned char)0U;
  #line 4633 
  ll_config->device_hw_info.product_desc[63] = (unsigned char)0U;
  #line 4634 
  ll_config->device_hw_info.part_number[63] = (unsigned char)0U;
  #line 4636 
  printk((char *)"%s: SERIAL NUMBER: %s",(char *)(& (vdev->ndev)->name),(u8 *)(& ll_config->device_hw_info.serial_number));
  #line 4639 
  printk((char *)"%s: PART NUMBER: %s",(char *)(& (vdev->ndev)->name),(u8 *)(& ll_config->device_hw_info.part_number));
  #line 4642 
  printk((char *)"%s: Neterion %s Server Adapter",(char *)(& (vdev->ndev)->name),(u8 *)(& ll_config->device_hw_info.product_desc));
  #line 4645 
  printk((char *)"%s: MAC ADDR: %pM",(char *)(& (vdev->ndev)->name),macaddr);
  #line 4648 
  ;
  #line 4648 
  printk((char *)"%s: Link Width x%d",(char *)(& (vdev->ndev)->name),(int)vxge_hw_device_link_width_get(hldev));
  #line 4651 
  printk((char *)"%s: Firmware version : %s Date : %s",(char *)(& (vdev->ndev)->name),(char *)(& ll_config->device_hw_info.fw_version.version),(char *)(& ll_config->device_hw_info.fw_date.date));
  #line 4656 
  if ((unsigned int)new_device != 0U) 
    #line 4657 
    switch (ll_config->device_hw_info.function_mode) {
      #line 4658 
      case (u64)0: 
                   #line 4658 
      ;
      #line 4659 
      printk((char *)"%s: Single Function Mode Enabled",(char *)(& (vdev->ndev)->name));
      #line 4661 
      break;
      #line 4662 
      case (u64)1: 
                   #line 4662 
      ;
      #line 4663 
      printk((char *)"%s: Multi Function Mode Enabled",(char *)(& (vdev->ndev)->name));
      #line 4665 
      break;
      #line 4666 
      case (u64)2: 
                   #line 4666 
      ;
      #line 4667 
      printk((char *)"%s: Single Root IOV Mode Enabled",(char *)(& (vdev->ndev)->name));
      #line 4669 
      break;
      #line 4670 
      case (u64)3: 
                   #line 4670 
      ;
      #line 4671 
      printk((char *)"%s: Multi Root IOV Mode Enabled",(char *)(& (vdev->ndev)->name));
      #line 4673 
      break;
    }
  #line 4677 
  vxge_print_parm(vdev,vpath_mask);
  #line 4680 
  strcpy((char *)(& vdev->fw_version),(char *)(& ll_config->device_hw_info.fw_version.version));
  #line 4681 
  memcpy((void *)(vdev->ndev)->dev_addr,(void *)(& (vdev->vpaths)->macaddr),6UL);
  #line 4684 
  i = 0;
  #line 4684 
  while (vdev->no_of_vpath > i) {
    #line 4685 
    entry = (struct vxge_mac_addrs *)kzalloc(40UL,3264U);
    #line 4686 
    if (entry == (struct vxge_mac_addrs *)0) {
      #line 4687 
      printk((char *)"%s: mac_addr_list : memory allocation failed",(char *)(& (vdev->ndev)->name));
      #line 4690 
      ret = -1;
      #line 4691 
      goto _exit6;
    }
    #line 4693 
    macaddr = (u8 *)(& entry->macaddr);
    #line 4694 
    memcpy((void *)macaddr,(void *)(vdev->ndev)->dev_addr,6UL);
    #line 4695 
    list_add(& entry->item,& (vdev->vpaths + (unsigned long)i)->mac_addr_list);
    #line 4696 
    (vdev->vpaths + (unsigned long)i)->mac_addr_cnt = (unsigned short)1U;
    #line 4684 
    i ++;
  }
  #line 4699 
  kfree((void *)device_config);
  #line 4716 
  if (ll_config->device_hw_info.function_mode == 1ULL) 
    #line 4718 
    if (vdev->config.intr_type == 0) 
                                     #line 4719 
                                     vxge_hw_device_unmask_all(hldev);
  #line 4721 
  printk((char *)"%s: %s:%d  Exiting...",(char *)(& (vdev->ndev)->name),(char *)"vxge_probe",4722);
  #line 4724 
  vxge_hw_device_debug_set(hldev,(enum vxge_debug_level)VXGE_ERR,536870912U);
  #line 4725 
  i = 0;
  #line 4725 
  while (vdev->no_of_vpath > i) {
    #line 4725 
    (vdev->vpaths + (unsigned long)i)->level_err = vxge_hw_device_error_level_get(hldev);
    #line 4725 
    (vdev->vpaths + (unsigned long)i)->level_trace = vxge_hw_device_trace_level_get(hldev);
    #line 4725 
    i ++;
  }
  #line 4725 
  vdev->level_err = vxge_hw_device_error_level_get(hldev);
  #line 4725 
  vdev->level_trace = vxge_hw_device_trace_level_get(hldev);
  #line 4728 
  kfree((void *)ll_config);
  #line 4729 
  return 0;
  #line 4731 
  _exit6: 
          #line 4731 
  ;
  #line 4732 
  i = 0;
  #line 4732 
  while (vdev->no_of_vpath > i) {
    #line 4733 
    vxge_free_mac_add_list(vdev->vpaths + (unsigned long)i);
    #line 4732 
    i ++;
  }
  #line 4734 
  _exit5: 
          #line 4734 
  ;
  #line 4735 
  vxge_device_unregister(hldev);
  #line 4736 
  _exit4: 
          #line 4736 
  ;
  #line 4737 
  vxge_hw_device_terminate(hldev);
  #line 4738 
  pci_disable_sriov(pdev);
  #line 4739 
  _exit3: 
          #line 4739 
  ;
  #line 4740 
  iounmap(attr.bar0);
  #line 4741 
  _exit2: 
          #line 4741 
  ;
  #line 4742 
  pci_release_region(pdev,0);
  #line 4743 
  _exit1: 
          #line 4743 
  ;
  #line 4744 
  pci_disable_device(pdev);
  #line 4745 
  _exit0: 
          #line 4745 
  ;
  #line 4746 
  kfree((void *)ll_config);
  #line 4747 
  kfree((void *)device_config);
  #line 4748 
  (driver_config->config_dev_cnt) --;
  #line 4749 
  (driver_config->total_dev_cnt) --;
  #line 4750 
  return ret;
}

#line 4759  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-main.c"
static void vxge_remove(struct pci_dev *pdev)
{
  #line 4761 
  struct __vxge_hw_device *hldev;
  #line 4762 
  struct vxgedev *vdev;
  #line 4763 
  int i;
  #line 4765 
  hldev = (struct __vxge_hw_device *)pci_get_drvdata(pdev);
  #line 4766 
  if (hldev == (struct __vxge_hw_device *)0) 
                                             #line 4767 
                                             return;
  #line 4769 
  vdev = (struct vxgedev *)netdev_priv(hldev->ndev);
  #line 4771 
  if (vdev->level_trace != 0U) 
                               #line 4771 
                               printk((char *)"%s:%d",(char *)"vxge_remove",4771);
  #line 4772 
  if (vdev->level_trace != 0U) 
                               #line 4772 
                               printk((char *)"%s : removing PCI device...",(char *)"vxge_remove");
  #line 4775 
  i = 0;
  #line 4775 
  while (vdev->no_of_vpath > i) {
    #line 4776 
    vxge_free_mac_add_list(vdev->vpaths + (unsigned long)i);
    #line 4775 
    i ++;
  }
  #line 4778 
  vxge_device_unregister(hldev);
  #line 4780 
  vxge_hw_device_terminate(hldev);
  #line 4781 
  iounmap(vdev->bar0);
  #line 4782 
  pci_release_region(pdev,0);
  #line 4783 
  pci_disable_device(pdev);
  #line 4784 
  (driver_config->config_dev_cnt) --;
  #line 4785 
  (driver_config->total_dev_cnt) --;
  #line 4787 
  if (vdev->level_trace != 0U) 
                               #line 4787 
                               printk((char *)"%s:%d Device unregistered",(char *)"vxge_remove",4788);
  #line 4789 
  if (vdev->level_trace != 0U) 
                               #line 4789 
                               printk((char *)"%s:%d  Exiting...",(char *)"vxge_remove",4790);
  #line 4790 
  return;
}

#line 4793  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-main.c"
static struct pci_error_handlers vxge_err_handler = {.error_detected = (pci_ers_result_t (*)(struct pci_dev *, enum pci_channel_state ))(& vxge_io_error_detected), .slot_reset = & vxge_io_slot_reset, .resume = & vxge_io_resume};
#line 4799  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-main.c"
static struct pci_driver vxge_driver = {.name = (char *)"vxge", .id_table = (struct pci_device_id *)(& vxge_id_table), .probe = & vxge_probe, .remove = & vxge_remove, .suspend = & vxge_pm_suspend, .resume = & vxge_pm_resume, .err_handler = & vxge_err_handler};
#line 4812  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-main.c"
static int vxge_starter(void)
{
  #line 4814 
  int ret = 0;
  #line 4816 
  printk((char *)"\001");
  #line 4817 
  printk((char *)"\001",(char *)"2");
  #line 4819 
  verify_bandwidth();
  #line 4821 
  driver_config = (struct vxge_drv_config *)kzalloc(16UL,3264U);
  #line 4822 
  if (driver_config == (struct vxge_drv_config *)0) 
                                                    #line 4823 
                                                    return -12;
  #line 4825 
  ret = cif___pci_register_driver(& vxge_driver,& __this_module,(char *)"vxge");
  #line 4826 
  if (ret != 0) {
    #line 4827 
    kfree((void *)driver_config);
    #line 4828 
    goto err;
  }
  #line 4831 
  if (driver_config->config_dev_cnt != 0 && driver_config->config_dev_cnt != driver_config->total_dev_cnt) 
    #line 4833 
    printk((char *)"%s: Configured %d of %d devices",(char *)"vxge",driver_config->config_dev_cnt,driver_config->total_dev_cnt);
  #line 4837 
  err: 
       #line 4837 
  ;
  #line 4838 
  return ret;
}

#line 4842  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-main.c"
static void vxge_closer(void)
{
  #line 4844 
  cif_pci_unregister_driver(& vxge_driver);
  #line 4845 
  kfree((void *)driver_config);
  #line 4846 
  return;
}

#line 93  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/0/concurrency safety/weaver/vxge-main.i.aux"
struct pci_driver *emg_alias_vxge_driver = & vxge_driver;
#line 94  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/0/concurrency safety/weaver/vxge-main.i.aux"
struct pci_device_id (*emg_alias_vxge_id_table)[3U] = & vxge_id_table;
#line 97 
#line 97 
int emg___pci_register_driver(struct pci_driver *arg0, struct module *arg1, char *arg2);
#line 98 
#line 98 
struct net_device *emg_alloc_etherdev_mqs(int arg0, unsigned int arg1, unsigned int arg2);
#line 99 
#line 99 
int emg_del_timer_sync(struct timer_list *arg0);
#line 100 
#line 100 
_Bool emg_flush_work(struct work_struct *arg0);
#line 101 
#line 101 
void *emg_free_irq(unsigned int arg0, void *arg1);
#line 102 
#line 102 
void emg_free_netdev(struct net_device *arg0);
#line 103 
#line 103 
int emg_mod_timer(struct timer_list *arg0, unsigned long arg1);
#line 104 
#line 104 
void emg_pci_unregister_driver(struct pci_driver *arg0);
#line 105 
#line 105 
int emg_register_netdev(struct net_device *arg0);
#line 106 
#line 106 
int emg_request_irq(unsigned int arg0, enum irqreturn (*arg1)(int , void *), unsigned long arg2, char *arg3, void *arg4);
#line 107 
#line 107 
_Bool emg_schedule_work(struct work_struct *arg0);
#line 108 
#line 108 
void emg_unregister_netdev(struct net_device *arg0);
#line 112  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/0/concurrency safety/weaver/vxge-main.i.aux"
enum irqreturn emg_wrapper_vxge_alarm_msix_handle(int arg0, void *arg1)
{
  #line 113 
  return vxge_alarm_msix_handle(arg0,arg1);
}

#line 117  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/0/concurrency safety/weaver/vxge-main.i.aux"
int emg_wrapper_vxge_change_mtu(struct net_device *arg0, int arg1)
{
  #line 118 
  return vxge_change_mtu(arg0,arg1);
}

#line 122  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/0/concurrency safety/weaver/vxge-main.i.aux"
int emg_wrapper_vxge_close(struct net_device *arg0)
{
  #line 123 
  return vxge_close(arg0);
}

#line 127  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/0/concurrency safety/weaver/vxge-main.i.aux"
unsigned long long emg_wrapper_vxge_fix_features(struct net_device *arg0, unsigned long long arg1)
{
  #line 128 
  return vxge_fix_features(arg0,arg1);
}

#line 132  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/0/concurrency safety/weaver/vxge-main.i.aux"
void emg_wrapper_vxge_get_stats64(struct net_device *arg0, struct rtnl_link_stats64 *arg1)
{
  #line 133 
  vxge_get_stats64(arg0,arg1);
  #line 134 
  return;
}

#line 137  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/0/concurrency safety/weaver/vxge-main.i.aux"
int emg_wrapper_vxge_ioctl(struct net_device *arg0, struct ifreq *arg1, int arg2)
{
  #line 138 
  return vxge_ioctl(arg0,arg1,arg2);
}

#line 142  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/0/concurrency safety/weaver/vxge-main.i.aux"
enum irqreturn emg_wrapper_vxge_isr_napi(int arg0, void *arg1)
{
  #line 143 
  return vxge_isr_napi(arg0,arg1);
}

#line 147  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/0/concurrency safety/weaver/vxge-main.i.aux"
void emg_wrapper_vxge_netpoll(struct net_device *arg0)
{
  #line 148 
  vxge_netpoll(arg0);
  #line 149 
  return;
}

#line 152  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/0/concurrency safety/weaver/vxge-main.i.aux"
int emg_wrapper_vxge_open(struct net_device *arg0)
{
  #line 153 
  return vxge_open(arg0);
}

#line 157  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/0/concurrency safety/weaver/vxge-main.i.aux"
int emg_wrapper_vxge_pm_resume(struct pci_dev *arg0)
{
  #line 158 
  return vxge_pm_resume(arg0);
}

#line 162  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/0/concurrency safety/weaver/vxge-main.i.aux"
int emg_wrapper_vxge_pm_suspend(struct pci_dev *arg0, struct pm_message arg1)
{
  #line 163 
  return vxge_pm_suspend(arg0,arg1);
}

#line 167  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/0/concurrency safety/weaver/vxge-main.i.aux"
int emg_wrapper_vxge_probe(struct pci_dev *arg0, struct pci_device_id *arg1)
{
  #line 168 
  return vxge_probe(arg0,arg1);
}

#line 172  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/0/concurrency safety/weaver/vxge-main.i.aux"
void emg_wrapper_vxge_remove(struct pci_dev *arg0)
{
  #line 173 
  vxge_remove(arg0);
  #line 174 
  return;
}

#line 177  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/0/concurrency safety/weaver/vxge-main.i.aux"
enum irqreturn emg_wrapper_vxge_rx_msix_napi_handle(int arg0, void *arg1)
{
  #line 178 
  return vxge_rx_msix_napi_handle(arg0,arg1);
}

#line 182  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/0/concurrency safety/weaver/vxge-main.i.aux"
int emg_wrapper_vxge_set_features(struct net_device *arg0, unsigned long long arg1)
{
  #line 183 
  return vxge_set_features(arg0,arg1);
}

#line 187  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/0/concurrency safety/weaver/vxge-main.i.aux"
int emg_wrapper_vxge_set_mac_addr(struct net_device *arg0, void *arg1)
{
  #line 188 
  return vxge_set_mac_addr(arg0,arg1);
}

#line 192  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/0/concurrency safety/weaver/vxge-main.i.aux"
void emg_wrapper_vxge_set_multicast(struct net_device *arg0)
{
  #line 193 
  vxge_set_multicast(arg0);
  #line 194 
  return;
}

#line 197  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/0/concurrency safety/weaver/vxge-main.i.aux"
enum irqreturn emg_wrapper_vxge_tx_msix_handle(int arg0, void *arg1)
{
  #line 198 
  return vxge_tx_msix_handle(arg0,arg1);
}

#line 202  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/0/concurrency safety/weaver/vxge-main.i.aux"
void emg_wrapper_vxge_tx_watchdog(struct net_device *arg0)
{
  #line 203 
  vxge_tx_watchdog(arg0);
  #line 204 
  return;
}

#line 207  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/0/concurrency safety/weaver/vxge-main.i.aux"
int emg_wrapper_vxge_vlan_rx_add_vid(struct net_device *arg0, unsigned short arg1, unsigned short arg2)
{
  #line 208 
  return vxge_vlan_rx_add_vid(arg0,(unsigned short)((int)arg1),
                           (unsigned short)((int)arg2));
}

#line 212  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/0/concurrency safety/weaver/vxge-main.i.aux"
int emg_wrapper_vxge_vlan_rx_kill_vid(struct net_device *arg0, unsigned short arg1, unsigned short arg2)
{
  #line 213 
  return vxge_vlan_rx_kill_vid(arg0,(unsigned short)((int)arg1),
                            (unsigned short)((int)arg2));
}

#line 217  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/0/concurrency safety/weaver/vxge-main.i.aux"
enum netdev_tx emg_wrapper_vxge_xmit(struct sk_buff *arg0, struct net_device *arg1)
{
  #line 218 
  return vxge_xmit(arg0,arg1);
}

#line 222  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/0/concurrency safety/weaver/vxge-main.i.aux"
void emg_vxge_closer(void)
{
  #line 223 
  vxge_closer();
  #line 224 
  return;
}

#line 226  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/0/concurrency safety/weaver/vxge-main.i.aux"
int emg_vxge_starter(void)
{
  #line 227 
  return vxge_starter();
}

#line 238  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/0/concurrency safety/weaver/vxge-main.i.aux"
static unsigned long cif_find_next_bit(unsigned long *addr, unsigned long size, unsigned long offset)
{
  #line 241 
  return ldv_find_next_bit(addr,size,offset);
}

#line 245  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/0/concurrency safety/weaver/vxge-main.i.aux"
static void cif_set_bit(long nr, unsigned long *addr)
{
  #line 248 
  ldv_set_bit(nr,addr);
  #line 249 
  return;
}

#line 252  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/0/concurrency safety/weaver/vxge-main.i.aux"
static void cif_clear_bit(long nr, unsigned long *addr)
{
  #line 255 
  ldv_clear_bit(nr,addr);
  #line 256 
  return;
}

#line 259  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/0/concurrency safety/weaver/vxge-main.i.aux"
static void INIT_LIST_HEAD(struct list_head *list)
{
  #line 262 
  ldv_init_list_head(list);
  #line 263 
  return;
}

#line 280  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/0/concurrency safety/weaver/vxge-main.i.aux"
static unsigned long cif_find_first_bit(unsigned long *addr, unsigned long size)
{
  #line 283 
  return ldv_find_first_bit(addr,size);
}

#line 461  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/0/concurrency safety/weaver/vxge-main.i.aux"
static void *kcalloc(size_t n, size_t size, gfp_t flags)
{
  #line 464 
  return ldv_kcalloc(n,size,flags);
}

#line 482  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/0/concurrency safety/weaver/vxge-main.i.aux"
static void *kzalloc(size_t size, gfp_t flags)
{
  #line 485 
  return ldv_kzalloc(size,flags);
}

#line 681  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/0/concurrency safety/weaver/vxge-main.i.aux"
static int cif_spin_trylock__xmit_lock_of_netdev_queue(spinlock_t *lock)
{
  #line 685 
  ldv_func_ret_type ldv_func_res = spin_trylock(lock);
  #line 687 
  int is_spin_held_by_another_thread = ldv_undef_int();
  #line 689 
  if (is_spin_held_by_another_thread != 0) 
                                           #line 692 
                                           return 0;
  else {
    #line 694 
    ldv_spin_model_lock((char *)"_xmit_lock_of_netdev_queue");
    #line 696 
    return 1;
  }
  #line 699 
  return ldv_func_res;
}

#line 703  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/0/concurrency safety/weaver/vxge-main.i.aux"
static void cif_spin_unlock__xmit_lock_of_netdev_queue(spinlock_t *lock)
{
  #line 706 
  ldv_spin_model_unlock((char *)"_xmit_lock_of_netdev_queue");
  #line 708 
  spin_unlock(lock);
  #line 709 
  return;
}

#line 809  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/0/concurrency safety/weaver/vxge-main.i.aux"
static bool cif_schedule_work(struct work_struct *work)
{
  #line 813 
  return emg_schedule_work(work);
}

#line 931  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/0/concurrency safety/weaver/vxge-main.i.aux"
static int cif_mod_timer(struct timer_list *timer, unsigned long expires)
{
  #line 935 
  return emg_mod_timer(timer,expires);
}

#line 939  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/0/concurrency safety/weaver/vxge-main.i.aux"
static void *cif_free_irq(unsigned int ldv_func_arg1, void *ldv_func_arg2)
{
  #line 943 
  return emg_free_irq(ldv_func_arg1,ldv_func_arg2);
}

#line 947  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/0/concurrency safety/weaver/vxge-main.i.aux"
static int cif_request_irq(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char *name, void *dev)
{
  #line 951 
  return emg_request_irq(irq,handler,flags,name,dev);
}

#line 955  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/0/concurrency safety/weaver/vxge-main.i.aux"
static int cif_del_timer_sync(struct timer_list *timer)
{
  #line 959 
  return emg_del_timer_sync(timer);
}

#line 963  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/0/concurrency safety/weaver/vxge-main.i.aux"
static struct net_device *cif_alloc_etherdev_mqs(int sizeof_priv, unsigned int txqs, unsigned int rxqs)
{
  #line 967 
  return emg_alloc_etherdev_mqs(sizeof_priv,txqs,rxqs);
}

#line 971  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/0/concurrency safety/weaver/vxge-main.i.aux"
static int cif_register_netdev(struct net_device *dev)
{
  #line 975 
  return emg_register_netdev(dev);
}

#line 979  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/0/concurrency safety/weaver/vxge-main.i.aux"
static void cif_free_netdev(struct net_device *dev)
{
  #line 983 
  emg_free_netdev(dev);
  #line 984 
  return;
}

#line 987  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/0/concurrency safety/weaver/vxge-main.i.aux"
static bool cif_flush_work(struct work_struct *work)
{
  #line 991 
  return emg_flush_work(work);
}

#line 995  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/0/concurrency safety/weaver/vxge-main.i.aux"
static void cif_unregister_netdev(struct net_device *dev)
{
  #line 999 
  emg_unregister_netdev(dev);
  #line 1000 
  return;
}

#line 1003  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/0/concurrency safety/weaver/vxge-main.i.aux"
static int cif_request_firmware(struct firmware **fw, char *name, struct device *device)
{
  #line 1006 
  return ldv_request_firmware(fw);
}

#line 1010  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/0/concurrency safety/weaver/vxge-main.i.aux"
static void cif_release_firmware(struct firmware *fw)
{
  #line 1013 
  ldv_release_firmware(fw);
  #line 1014 
  return;
}

#line 1017  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/0/concurrency safety/weaver/vxge-main.i.aux"
static int cif___pci_register_driver(struct pci_driver *ldv_func_arg1, struct module *ldv_func_arg2, char *mod_name)
{
  #line 1021 
  return emg___pci_register_driver(ldv_func_arg1,ldv_func_arg2,mod_name);
}

#line 1025  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/0/concurrency safety/weaver/vxge-main.i.aux"
static void cif_pci_unregister_driver(struct pci_driver *dev)
{
  #line 1029 
  emg_pci_unregister_driver(dev);
  #line 1030 
  return;
}

#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static void arch___set_bit(long nr, unsigned long *addr)
{
  #line 68 
  ldv_inline_asm();
  #line 69 
  return;
}

#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-non-atomic.h"
__inline static void __set_bit(long nr, unsigned long *addr)
{
  #line 27 
  kasan_check_read((void *)(addr + (unsigned long)(nr / 64L)),8U);
  #line 28 
  arch___set_bit(nr,addr);
  #line 29 
  return;
}

#line 230  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bitmap.h"
#line 260  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/0/concurrency safety/weaver/vxge-ethtool.i.aux"
static void cif_bitmap_zero(unsigned long *dst, unsigned int nbits);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 27 
void ldv_bitmap_zero(unsigned long *dst, unsigned int nbits);
#line 668  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 420  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/0/concurrency safety/weaver/vxge-ethtool.i.aux"
static void *kzalloc_0(size_t size, gfp_t flags);
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
#line 86 
u32 ethtool_op_get_link(struct net_device *);
#line 1843  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static char *pci_name(struct pci_dev *pdev)
{
  #line 1845 
  return dev_name(& pdev->dev);
}

#line 3803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netif_carrier_ok(struct net_device *dev)
{
  #line 3805 
  int tmp_0;
  #line 3805 
  if ((int)test_bit(2L,& dev->state) != 0) 
                                           #line 3805 
                                           tmp_0 = 0; else 
                                                           #line 3805 
                                                           tmp_0 = 1;
  #line 3805 
  return (_Bool)(tmp_0 != 0);
}

#line 1731  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-traffic.h"
#line 1731 
enum vxge_hw_status vxge_hw_device_stats_get(struct __vxge_hw_device *hldev, struct vxge_hw_device_stats_hw_info *hw_stats);
#line 1735 
#line 1735 
enum vxge_hw_status vxge_hw_driver_stats_get(struct __vxge_hw_device *hldev, struct vxge_hw_device_stats_sw_info *sw_stats);
#line 1752 
#line 1752 
enum vxge_hw_status vxge_hw_device_xmac_stats_get(struct __vxge_hw_device *hldev, struct vxge_hw_xmac_stats *xmac_stats);
#line 1885  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.h"
#line 1885 
enum vxge_hw_status vxge_hw_device_getpause_data(struct __vxge_hw_device *hldev, u32 port, u32 *tx, u32 *rx);
#line 2025 
#line 2025 
enum vxge_hw_status vxge_hw_device_flick_link_led(struct __vxge_hw_device *hldev, u64 on_off);
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-ethtool.h"
#line 1097  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-ethtool.c"
static int vxge_ethtool_get_sset_count(struct net_device *dev, int sset);
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-ethtool.h"
static char ethtool_driver_stats_keys[16U][32U] = {{(char)'\n', (char)' ', (char)'D', (char)'R', (char)'I', (char)'V', (char)'E', (char)'R', (char)' ', (char)'S', (char)'T', (char)'A', (char)'T', (char)'I', (char)'S', (char)'T', (char)'I', (char)'C', (char)'S'}, {(char)'v', (char)'p', (char)'a', (char)'t', (char)'h', (char)'s', (char)'_', (char)'o', (char)'p', (char)'e', (char)'n', (char)'e', (char)'d'}, {(char)'v', (char)'p', (char)'a', (char)'t', (char)'h', (char)'_', (char)'o', (char)'p', (char)'e', (char)'n', (char)'_', (char)'f', (char)'a', (char)'i', (char)'l', (char)'_', (char)'c', (char)'n', (char)'t'}, {(char)'l', (char)'i', (char)'n', (char)'k', (char)'_', (char)'u', (char)'p', (char)'_', (char)'c', (char)'n', (char)'t'}, {(char)'l', (char)'i', (char)'n', (char)'k', (char)'_', (char)'d', (char)'o', (char)'w', (char)'n', (char)'_', (char)'c', (char)'n', (char)'t'}, {(char)'t', (char)'x', (char)'_', (char)'f', (char)'r', (char)'m', (char)'s'}, {(char)'t', (char)'x', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}, {(char)'t', (char)'x', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s'}, {(char)'t', (char)'x', (char)'d', (char)'_', (char)'n', (char)'o', (char)'t', (char)'_', (char)'f', (char)'r', (char)'e', (char)'e'}, {(char)'t', (char)'x', (char)'d', (char)'_', (char)'o', (char)'u', (char)'t', (char)'_', (char)'o', (char)'f', (char)'_', (char)'d', (char)'e', (char)'s', (char)'c'}, {(char)'r', (char)'x', (char)'_', (char)'f', (char)'r', (char)'m', (char)'s'}, {(char)'r', (char)'x', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}, {(char)'r', (char)'x', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s'}, {(char)'r', (char)'x', (char)'_', (char)'m', (char)'c', (char)'a', (char)'s', (char)'t'}, {(char)'p', (char)'c', (char)'i', (char)'_', (char)'m', (char)'a', (char)'p', (char)'_', (char)'f', (char)'a', (char)'i', (char)'l', (char)'_', (char)'c', (char)'n', (char)'t'}, {(char)'s', (char)'k', (char)'b', (char)'_', (char)'a', (char)'l', (char)'l', (char)'o', (char)'c', (char)'_', (char)'f', (char)'a', (char)'i', (char)'l', (char)'_', (char)'c', (char)'n', (char)'t'}};
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-ethtool.c"
static int vxge_ethtool_set_link_ksettings(struct net_device *dev, struct ethtool_link_ksettings *cmd)
{
  #line 56 
  if (((unsigned int)cmd->base.autoneg == 1U || cmd->base.speed != 10000U) || (unsigned int)cmd->base.duplex != 1U) 
    #line 59 
    return -22;
  #line 61 
  return 0;
}

#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-ethtool.c"
static int vxge_ethtool_get_link_ksettings(struct net_device *dev, struct ethtool_link_ksettings *cmd)
{
  #line 77 
  cif_bitmap_zero((unsigned long *)(& cmd->link_modes.supported),74U);
  #line 78 
  __set_bit(12L,(unsigned long *)(& cmd->link_modes.supported));
  #line 79 
  __set_bit(10L,(unsigned long *)(& cmd->link_modes.supported));
  #line 81 
  cif_bitmap_zero((unsigned long *)(& cmd->link_modes.advertising),74U);
  #line 82 
  __set_bit(12L,(unsigned long *)(& cmd->link_modes.advertising));
  #line 83 
  __set_bit(10L,(unsigned long *)(& cmd->link_modes.advertising));
  #line 85 
  cmd->base.port = (unsigned char)3U;
  #line 87 
  if ((int)netif_carrier_ok(dev) != 0) {
    #line 88 
    cmd->base.speed = 10000U;
    #line 89 
    cmd->base.duplex = (unsigned char)1U;
  }
  else {
    #line 91 
    cmd->base.speed = 4294967295U;
    #line 92 
    cmd->base.duplex = (unsigned char)255U;
  }
  #line 95 
  cmd->base.autoneg = (unsigned char)0U;
  #line 96 
  return 0;
}

#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-ethtool.c"
static void vxge_ethtool_gdrvinfo(struct net_device *dev, struct ethtool_drvinfo *info)
{
  #line 110 
  struct vxgedev *vdev = netdev_priv(dev);
  #line 111 
  strlcpy((char *)(& info->driver),(char *)"vxge",32UL);
  #line 112 
  strlcpy((char *)(& info->version),(char *)"2",32UL);
  #line 113 
  strlcpy((char *)(& info->fw_version),(char *)(& vdev->fw_version),32UL);
  #line 114 
  ;
  #line 114 
  strlcpy((char *)(& info->bus_info),pci_name(vdev->pdev),32UL);
  #line 115 
  return;
}

#line 127  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-ethtool.c"
static void vxge_ethtool_gregs(struct net_device *dev, struct ethtool_regs *regs, void *space)
{
  #line 130 
  int index;
  #line 130 
  int offset;
  #line 131 
  enum vxge_hw_status status;
  #line 132 
  u64 reg;
  #line 133 
  u64 *reg_space = (u64 *)space;
  #line 134 
  struct vxgedev *vdev = netdev_priv(dev);
  #line 135 
  struct __vxge_hw_device *hldev = vdev->devh;
  #line 137 
  regs->len = (unsigned int)((unsigned long)vdev->no_of_vpath) * 9800U;
  #line 138 
  regs->version = (unsigned int)(vdev->pdev)->subsystem_device;
  #line 139 
  index = 0;
  #line 139 
  while (vdev->no_of_vpath > index) {
    #line 140 
    offset = 0;
    #line 140 
    while ((unsigned int)offset <= 9799U) {
      {
        #line 152 
        u64 *tmp_0;
        #line 142 
        status = vxge_hw_mgmt_reg_read(hldev,(enum vxge_hw_mgmt_reg_type)vxge_hw_mgmt_reg_type_vpath,(unsigned int)(vdev->vpaths + (unsigned long)index)->device_id,(unsigned int)offset,& reg);
        #line 146 
        if (status != VXGE_HW_OK) {
          #line 147 
          printk((char *)"%s:%d Getting reg dump Failed",(char *)"vxge_ethtool_gregs",149);
          #line 150 
          return;
        }
        #line 152 
        tmp_0 = reg_space;
        #line 152 
        reg_space ++;
        #line 152 
        *tmp_0 = reg;
      }
      #line 140 
      offset += 8;
    }
    #line 139 
    index ++;
  }
  #line 155 
  return;
}

#line 165  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-ethtool.c"
static int vxge_ethtool_idnic(struct net_device *dev, enum ethtool_phys_id_state state)
{
  #line 168 
  struct vxgedev *vdev = netdev_priv(dev);
  #line 169 
  struct __vxge_hw_device *hldev = vdev->devh;
  #line 171 
  switch ((unsigned int)state) {
    #line 172 
    case (unsigned int)1: 
                          #line 172 
    ;
    #line 173 
    vxge_hw_device_flick_link_led(hldev,1ULL);
    #line 174 
    break;
    #line 176 
    case (unsigned int)0: 
                          #line 176 
    ;
    #line 177 
    vxge_hw_device_flick_link_led(hldev,0ULL);
    #line 178 
    break;
    #line 180 
    default: 
             #line 180 
    ;
    #line 181 
    return -22;
  }
  #line 184 
  return 0;
}

#line 196  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-ethtool.c"
static void vxge_ethtool_getpause_data(struct net_device *dev, struct ethtool_pauseparam *ep)
{
  #line 199 
  struct vxgedev *vdev = netdev_priv(dev);
  #line 200 
  struct __vxge_hw_device *hldev = vdev->devh;
  #line 202 
  vxge_hw_device_getpause_data(hldev,0U,& ep->tx_pause,& ep->rx_pause);
  #line 203 
  return;
}

#line 215  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-ethtool.c"
static int vxge_ethtool_setpause_data(struct net_device *dev, struct ethtool_pauseparam *ep)
{
  #line 218 
  struct vxgedev *vdev = netdev_priv(dev);
  #line 219 
  struct __vxge_hw_device *hldev = vdev->devh;
  #line 221 
  vxge_hw_device_setpause_data(hldev,0U,ep->tx_pause,ep->rx_pause);
  #line 223 
  vdev->config.tx_pause_enable = (int)ep->tx_pause;
  #line 224 
  vdev->config.rx_pause_enable = (int)ep->rx_pause;
  #line 226 
  return 0;
}

#line 229  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-ethtool.c"
static void vxge_get_ethtool_stats(struct net_device *dev, struct ethtool_stats *estats, u64 *tmp_stats)
{
  #line 232 
  int j;
  #line 232 
  int k;
  #line 233 
  enum vxge_hw_status status;
  #line 234 
  enum vxge_hw_status swstatus;
  #line 238 
  struct vxge_hw_xmac_stats *xmac_stats;
  #line 239 
  struct vxge_hw_device_stats_sw_info *sw_stats;
  #line 240 
  struct vxge_hw_device_stats_hw_info *hw_stats;
  #line 276 
  u64 *tmp_4;
  #line 374 
  u64 *tmp_66;
  #line 390 
  u64 *tmp_80;
  #line 488 
  u64 *tmp_175;
  #line 532 
  u64 *tmp_206;
  #line 572 
  u64 *tmp_234;
  #line 573 
  u64 *tmp_235;
  #line 574 
  u64 *tmp_236;
  #line 575 
  u64 *tmp_237;
  #line 576 
  u64 *tmp_238;
  #line 235 
  struct vxge_vpath *vpath = (struct vxge_vpath *)0;
  #line 236 
  struct vxgedev *vdev = netdev_priv(dev);
  #line 237 
  struct __vxge_hw_device *hldev = vdev->devh;
  #line 242 
  u64 *ptr = tmp_stats;
  #line 244 
  ;
  #line 244 
  memset((void *)tmp_stats,0,(unsigned long)vxge_ethtool_get_sset_count(dev,1) * 8UL);
  #line 247 
  xmac_stats = (struct vxge_hw_xmac_stats *)kzalloc_0(9784UL,3264U);
  #line 248 
  if (xmac_stats == (struct vxge_hw_xmac_stats *)0) {
    #line 249 
    printk((char *)"%s : %d Memory Allocation failed for xmac_stats",(char *)"vxge_get_ethtool_stats",251);
    #line 252 
    return;
  }
  #line 255 
  sw_stats = (struct vxge_hw_device_stats_sw_info *)kzalloc_0(4096UL,3264U);
  #line 257 
  if (sw_stats == (struct vxge_hw_device_stats_sw_info *)0) {
    #line 258 
    kfree((void *)xmac_stats);
    #line 259 
    printk((char *)"%s : %d Memory Allocation failed for sw_stats",(char *)"vxge_get_ethtool_stats",261);
    #line 262 
    return;
  }
  #line 265 
  hw_stats = (struct vxge_hw_device_stats_hw_info *)kzalloc_0(10744UL,3264U);
  #line 267 
  if (hw_stats == (struct vxge_hw_device_stats_hw_info *)0) {
    #line 268 
    kfree((void *)xmac_stats);
    #line 269 
    kfree((void *)sw_stats);
    #line 270 
    printk((char *)"%s : %d Memory Allocation failed for hw_stats",(char *)"vxge_get_ethtool_stats",272);
    #line 273 
    return;
  }
  #line 276 
  tmp_4 = ptr;
  #line 276 
  ptr ++;
  #line 276 
  *tmp_4 = 0ULL;
  #line 277 
  status = vxge_hw_device_xmac_stats_get(hldev,xmac_stats);
  #line 278 
  if (status != VXGE_HW_OK) 
    #line 279 
    if (status != VXGE_HW_ERR_PRIVILEGED_OPERATION) 
                                                    #line 280 
                                                    printk((char *)"%s : %d Failure in getting xmac stats",(char *)"vxge_get_ethtool_stats",282);
  #line 285 
  swstatus = vxge_hw_driver_stats_get(hldev,sw_stats);
  #line 286 
  if (swstatus != VXGE_HW_OK) 
                              #line 287 
                              printk((char *)"%s : %d Failure in getting sw stats",(char *)"vxge_get_ethtool_stats",289);
  #line 292 
  status = vxge_hw_device_stats_get(hldev,hw_stats);
  #line 293 
  if (status != VXGE_HW_OK) 
                            #line 294 
                            printk((char *)"%s : %d hw_stats_get error",(char *)"vxge_get_ethtool_stats",295);
  #line 298 
  k = 0;
  #line 298 
  while (vdev->no_of_vpath > k) {
    {
      #line 299 
      struct vxge_hw_vpath_stats_hw_info *vpath_info;
      #line 312 
      u64 *tmp_5;
      #line 313 
      u64 *tmp_6;
      #line 314 
      u64 *tmp_7;
      #line 315 
      u64 *tmp_8;
      #line 316 
      u64 *tmp_9;
      #line 317 
      u64 *tmp_10;
      #line 318 
      u64 *tmp_11;
      #line 319 
      u64 *tmp_12;
      #line 320 
      u64 *tmp_13;
      #line 321 
      u64 *tmp_14;
      #line 322 
      u64 *tmp_15;
      #line 323 
      u64 *tmp_16;
      #line 324 
      u64 *tmp_17;
      #line 325 
      u64 *tmp_18;
      #line 326 
      u64 *tmp_19;
      #line 327 
      u64 *tmp_20;
      #line 328 
      u64 *tmp_21;
      #line 329 
      u64 *tmp_22;
      #line 330 
      u64 *tmp_23;
      #line 331 
      u64 *tmp_24;
      #line 332 
      u64 *tmp_25;
      #line 333 
      u64 *tmp_26;
      #line 334 
      u64 *tmp_27;
      #line 335 
      u64 *tmp_28;
      #line 336 
      u64 *tmp_29;
      #line 337 
      u64 *tmp_30;
      #line 338 
      u64 *tmp_31;
      #line 339 
      u64 *tmp_32;
      #line 340 
      u64 *tmp_33;
      #line 341 
      u64 *tmp_34;
      #line 342 
      u64 *tmp_35;
      #line 343 
      u64 *tmp_36;
      #line 344 
      u64 *tmp_37;
      #line 345 
      u64 *tmp_38;
      #line 346 
      u64 *tmp_39;
      #line 347 
      u64 *tmp_40;
      #line 348 
      u64 *tmp_41;
      #line 349 
      u64 *tmp_42;
      #line 350 
      u64 *tmp_43;
      #line 351 
      u64 *tmp_44;
      #line 352 
      u64 *tmp_45;
      #line 353 
      u64 *tmp_46;
      #line 354 
      u64 *tmp_47;
      #line 355 
      u64 *tmp_48;
      #line 356 
      u64 *tmp_49;
      #line 357 
      u64 *tmp_50;
      #line 358 
      u64 *tmp_51;
      #line 359 
      u64 *tmp_52;
      #line 360 
      u64 *tmp_53;
      #line 361 
      u64 *tmp_54;
      #line 362 
      u64 *tmp_55;
      #line 363 
      u64 *tmp_56;
      #line 364 
      u64 *tmp_57;
      #line 365 
      u64 *tmp_58;
      #line 366 
      u64 *tmp_59;
      #line 367 
      u64 *tmp_60;
      #line 368 
      u64 *tmp_61;
      #line 369 
      u64 *tmp_62;
      #line 370 
      u64 *tmp_63;
      #line 371 
      u64 *tmp_64;
      #line 372 
      u64 *tmp_65;
      #line 301 
      vpath = vdev->vpaths + (unsigned long)k;
      #line 302 
      j = vpath->device_id;
      #line 303 
      vpath_info = hw_stats->vpath_info[j];
      #line 304 
      if (vpath_info == (struct vxge_hw_vpath_stats_hw_info *)0) {
        #line 305 
        memset((void *)ptr,0,488UL);
        #line 307 
        ptr += 61U;
        #line 309 
        goto __Cont;
      }
      #line 312 
      tmp_5 = ptr;
      #line 312 
      ptr ++;
      #line 312 
      *tmp_5 = vpath_info->tx_stats.tx_ttl_eth_frms;
      #line 313 
      tmp_6 = ptr;
      #line 313 
      ptr ++;
      #line 313 
      *tmp_6 = vpath_info->tx_stats.tx_ttl_eth_octets;
      #line 314 
      tmp_7 = ptr;
      #line 314 
      ptr ++;
      #line 314 
      *tmp_7 = vpath_info->tx_stats.tx_data_octets;
      #line 315 
      tmp_8 = ptr;
      #line 315 
      ptr ++;
      #line 315 
      *tmp_8 = vpath_info->tx_stats.tx_mcast_frms;
      #line 316 
      tmp_9 = ptr;
      #line 316 
      ptr ++;
      #line 316 
      *tmp_9 = vpath_info->tx_stats.tx_bcast_frms;
      #line 317 
      tmp_10 = ptr;
      #line 317 
      ptr ++;
      #line 317 
      *tmp_10 = vpath_info->tx_stats.tx_ucast_frms;
      #line 318 
      tmp_11 = ptr;
      #line 318 
      ptr ++;
      #line 318 
      *tmp_11 = vpath_info->tx_stats.tx_tagged_frms;
      #line 319 
      tmp_12 = ptr;
      #line 319 
      ptr ++;
      #line 319 
      *tmp_12 = vpath_info->tx_stats.tx_vld_ip;
      #line 320 
      tmp_13 = ptr;
      #line 320 
      ptr ++;
      #line 320 
      *tmp_13 = vpath_info->tx_stats.tx_vld_ip_octets;
      #line 321 
      tmp_14 = ptr;
      #line 321 
      ptr ++;
      #line 321 
      *tmp_14 = vpath_info->tx_stats.tx_icmp;
      #line 322 
      tmp_15 = ptr;
      #line 322 
      ptr ++;
      #line 322 
      *tmp_15 = vpath_info->tx_stats.tx_tcp;
      #line 323 
      tmp_16 = ptr;
      #line 323 
      ptr ++;
      #line 323 
      *tmp_16 = vpath_info->tx_stats.tx_rst_tcp;
      #line 324 
      tmp_17 = ptr;
      #line 324 
      ptr ++;
      #line 324 
      *tmp_17 = vpath_info->tx_stats.tx_udp;
      #line 325 
      tmp_18 = ptr;
      #line 325 
      ptr ++;
      #line 325 
      *tmp_18 = (unsigned long long)vpath_info->tx_stats.tx_unknown_protocol;
      #line 326 
      tmp_19 = ptr;
      #line 326 
      ptr ++;
      #line 326 
      *tmp_19 = (unsigned long long)vpath_info->tx_stats.tx_lost_ip;
      #line 327 
      tmp_20 = ptr;
      #line 327 
      ptr ++;
      #line 327 
      *tmp_20 = (unsigned long long)vpath_info->tx_stats.tx_parse_error;
      #line 328 
      tmp_21 = ptr;
      #line 328 
      ptr ++;
      #line 328 
      *tmp_21 = vpath_info->tx_stats.tx_tcp_offload;
      #line 329 
      tmp_22 = ptr;
      #line 329 
      ptr ++;
      #line 329 
      *tmp_22 = vpath_info->tx_stats.tx_retx_tcp_offload;
      #line 330 
      tmp_23 = ptr;
      #line 330 
      ptr ++;
      #line 330 
      *tmp_23 = vpath_info->tx_stats.tx_lost_ip_offload;
      #line 331 
      tmp_24 = ptr;
      #line 331 
      ptr ++;
      #line 331 
      *tmp_24 = vpath_info->rx_stats.rx_ttl_eth_frms;
      #line 332 
      tmp_25 = ptr;
      #line 332 
      ptr ++;
      #line 332 
      *tmp_25 = vpath_info->rx_stats.rx_vld_frms;
      #line 333 
      tmp_26 = ptr;
      #line 333 
      ptr ++;
      #line 333 
      *tmp_26 = vpath_info->rx_stats.rx_offload_frms;
      #line 334 
      tmp_27 = ptr;
      #line 334 
      ptr ++;
      #line 334 
      *tmp_27 = vpath_info->rx_stats.rx_ttl_eth_octets;
      #line 335 
      tmp_28 = ptr;
      #line 335 
      ptr ++;
      #line 335 
      *tmp_28 = vpath_info->rx_stats.rx_data_octets;
      #line 336 
      tmp_29 = ptr;
      #line 336 
      ptr ++;
      #line 336 
      *tmp_29 = vpath_info->rx_stats.rx_offload_octets;
      #line 337 
      tmp_30 = ptr;
      #line 337 
      ptr ++;
      #line 337 
      *tmp_30 = vpath_info->rx_stats.rx_vld_mcast_frms;
      #line 338 
      tmp_31 = ptr;
      #line 338 
      ptr ++;
      #line 338 
      *tmp_31 = vpath_info->rx_stats.rx_vld_bcast_frms;
      #line 339 
      tmp_32 = ptr;
      #line 339 
      ptr ++;
      #line 339 
      *tmp_32 = vpath_info->rx_stats.rx_accepted_ucast_frms;
      #line 340 
      tmp_33 = ptr;
      #line 340 
      ptr ++;
      #line 340 
      *tmp_33 = vpath_info->rx_stats.rx_accepted_nucast_frms;
      #line 341 
      tmp_34 = ptr;
      #line 341 
      ptr ++;
      #line 341 
      *tmp_34 = vpath_info->rx_stats.rx_tagged_frms;
      #line 342 
      tmp_35 = ptr;
      #line 342 
      ptr ++;
      #line 342 
      *tmp_35 = vpath_info->rx_stats.rx_long_frms;
      #line 343 
      tmp_36 = ptr;
      #line 343 
      ptr ++;
      #line 343 
      *tmp_36 = vpath_info->rx_stats.rx_usized_frms;
      #line 344 
      tmp_37 = ptr;
      #line 344 
      ptr ++;
      #line 344 
      *tmp_37 = vpath_info->rx_stats.rx_osized_frms;
      #line 345 
      tmp_38 = ptr;
      #line 345 
      ptr ++;
      #line 345 
      *tmp_38 = vpath_info->rx_stats.rx_frag_frms;
      #line 346 
      tmp_39 = ptr;
      #line 346 
      ptr ++;
      #line 346 
      *tmp_39 = vpath_info->rx_stats.rx_jabber_frms;
      #line 347 
      tmp_40 = ptr;
      #line 347 
      ptr ++;
      #line 347 
      *tmp_40 = vpath_info->rx_stats.rx_ttl_64_frms;
      #line 348 
      tmp_41 = ptr;
      #line 348 
      ptr ++;
      #line 348 
      *tmp_41 = vpath_info->rx_stats.rx_ttl_65_127_frms;
      #line 349 
      tmp_42 = ptr;
      #line 349 
      ptr ++;
      #line 349 
      *tmp_42 = vpath_info->rx_stats.rx_ttl_128_255_frms;
      #line 350 
      tmp_43 = ptr;
      #line 350 
      ptr ++;
      #line 350 
      *tmp_43 = vpath_info->rx_stats.rx_ttl_256_511_frms;
      #line 351 
      tmp_44 = ptr;
      #line 351 
      ptr ++;
      #line 351 
      *tmp_44 = vpath_info->rx_stats.rx_ttl_512_1023_frms;
      #line 352 
      tmp_45 = ptr;
      #line 352 
      ptr ++;
      #line 352 
      *tmp_45 = vpath_info->rx_stats.rx_ttl_1024_1518_frms;
      #line 353 
      tmp_46 = ptr;
      #line 353 
      ptr ++;
      #line 353 
      *tmp_46 = vpath_info->rx_stats.rx_ttl_1519_4095_frms;
      #line 354 
      tmp_47 = ptr;
      #line 354 
      ptr ++;
      #line 354 
      *tmp_47 = vpath_info->rx_stats.rx_ttl_4096_8191_frms;
      #line 355 
      tmp_48 = ptr;
      #line 355 
      ptr ++;
      #line 355 
      *tmp_48 = vpath_info->rx_stats.rx_ttl_8192_max_frms;
      #line 356 
      tmp_49 = ptr;
      #line 356 
      ptr ++;
      #line 356 
      *tmp_49 = vpath_info->rx_stats.rx_ttl_gt_max_frms;
      #line 357 
      tmp_50 = ptr;
      #line 357 
      ptr ++;
      #line 357 
      *tmp_50 = vpath_info->rx_stats.rx_ip;
      #line 358 
      tmp_51 = ptr;
      #line 358 
      ptr ++;
      #line 358 
      *tmp_51 = vpath_info->rx_stats.rx_accepted_ip;
      #line 359 
      tmp_52 = ptr;
      #line 359 
      ptr ++;
      #line 359 
      *tmp_52 = vpath_info->rx_stats.rx_ip_octets;
      #line 360 
      tmp_53 = ptr;
      #line 360 
      ptr ++;
      #line 360 
      *tmp_53 = vpath_info->rx_stats.rx_err_ip;
      #line 361 
      tmp_54 = ptr;
      #line 361 
      ptr ++;
      #line 361 
      *tmp_54 = vpath_info->rx_stats.rx_icmp;
      #line 362 
      tmp_55 = ptr;
      #line 362 
      ptr ++;
      #line 362 
      *tmp_55 = vpath_info->rx_stats.rx_tcp;
      #line 363 
      tmp_56 = ptr;
      #line 363 
      ptr ++;
      #line 363 
      *tmp_56 = vpath_info->rx_stats.rx_udp;
      #line 364 
      tmp_57 = ptr;
      #line 364 
      ptr ++;
      #line 364 
      *tmp_57 = vpath_info->rx_stats.rx_err_tcp;
      #line 365 
      tmp_58 = ptr;
      #line 365 
      ptr ++;
      #line 365 
      *tmp_58 = vpath_info->rx_stats.rx_lost_frms;
      #line 366 
      tmp_59 = ptr;
      #line 366 
      ptr ++;
      #line 366 
      *tmp_59 = vpath_info->rx_stats.rx_lost_ip;
      #line 367 
      tmp_60 = ptr;
      #line 367 
      ptr ++;
      #line 367 
      *tmp_60 = vpath_info->rx_stats.rx_lost_ip_offload;
      #line 368 
      tmp_61 = ptr;
      #line 368 
      ptr ++;
      #line 368 
      *tmp_61 = (unsigned long long)vpath_info->rx_stats.rx_various_discard;
      #line 369 
      tmp_62 = ptr;
      #line 369 
      ptr ++;
      #line 369 
      *tmp_62 = (unsigned long long)vpath_info->rx_stats.rx_sleep_discard;
      #line 370 
      tmp_63 = ptr;
      #line 370 
      ptr ++;
      #line 370 
      *tmp_63 = (unsigned long long)vpath_info->rx_stats.rx_red_discard;
      #line 371 
      tmp_64 = ptr;
      #line 371 
      ptr ++;
      #line 371 
      *tmp_64 = (unsigned long long)vpath_info->rx_stats.rx_queue_full_discard;
      #line 372 
      tmp_65 = ptr;
      #line 372 
      ptr ++;
      #line 372 
      *tmp_65 = vpath_info->rx_stats.rx_mpa_ok_frms;
    }
    #line 298 
    __Cont: 
            #line 298 
    k ++;
  }
  #line 374 
  tmp_66 = ptr;
  #line 374 
  ptr ++;
  #line 374 
  *tmp_66 = 0ULL;
  #line 375 
  k = 0;
  #line 375 
  while (vdev->max_config_port > k) {
    {
      #line 376 
      u64 *tmp_67;
      #line 377 
      u64 *tmp_68;
      #line 378 
      u64 *tmp_69;
      #line 379 
      u64 *tmp_70;
      #line 380 
      u64 *tmp_71;
      #line 381 
      u64 *tmp_72;
      #line 382 
      u64 *tmp_73;
      #line 383 
      u64 *tmp_74;
      #line 384 
      u64 *tmp_75;
      #line 385 
      u64 *tmp_76;
      #line 386 
      u64 *tmp_77;
      #line 387 
      u64 *tmp_78;
      #line 388 
      u64 *tmp_79;
      #line 376 
      tmp_67 = ptr;
      #line 376 
      ptr ++;
      #line 376 
      *tmp_67 = xmac_stats->aggr_stats[k].tx_frms;
      #line 377 
      tmp_68 = ptr;
      #line 377 
      ptr ++;
      #line 377 
      *tmp_68 = xmac_stats->aggr_stats[k].tx_data_octets;
      #line 378 
      tmp_69 = ptr;
      #line 378 
      ptr ++;
      #line 378 
      *tmp_69 = xmac_stats->aggr_stats[k].tx_mcast_frms;
      #line 379 
      tmp_70 = ptr;
      #line 379 
      ptr ++;
      #line 379 
      *tmp_70 = xmac_stats->aggr_stats[k].tx_bcast_frms;
      #line 380 
      tmp_71 = ptr;
      #line 380 
      ptr ++;
      #line 380 
      *tmp_71 = xmac_stats->aggr_stats[k].tx_discarded_frms;
      #line 381 
      tmp_72 = ptr;
      #line 381 
      ptr ++;
      #line 381 
      *tmp_72 = xmac_stats->aggr_stats[k].tx_errored_frms;
      #line 382 
      tmp_73 = ptr;
      #line 382 
      ptr ++;
      #line 382 
      *tmp_73 = xmac_stats->aggr_stats[k].rx_frms;
      #line 383 
      tmp_74 = ptr;
      #line 383 
      ptr ++;
      #line 383 
      *tmp_74 = xmac_stats->aggr_stats[k].rx_data_octets;
      #line 384 
      tmp_75 = ptr;
      #line 384 
      ptr ++;
      #line 384 
      *tmp_75 = xmac_stats->aggr_stats[k].rx_mcast_frms;
      #line 385 
      tmp_76 = ptr;
      #line 385 
      ptr ++;
      #line 385 
      *tmp_76 = xmac_stats->aggr_stats[k].rx_bcast_frms;
      #line 386 
      tmp_77 = ptr;
      #line 386 
      ptr ++;
      #line 386 
      *tmp_77 = xmac_stats->aggr_stats[k].rx_discarded_frms;
      #line 387 
      tmp_78 = ptr;
      #line 387 
      ptr ++;
      #line 387 
      *tmp_78 = xmac_stats->aggr_stats[k].rx_errored_frms;
      #line 388 
      tmp_79 = ptr;
      #line 388 
      ptr ++;
      #line 388 
      *tmp_79 = xmac_stats->aggr_stats[k].rx_unknown_slow_proto_frms;
    }
    #line 375 
    k ++;
  }
  #line 390 
  tmp_80 = ptr;
  #line 390 
  ptr ++;
  #line 390 
  *tmp_80 = 0ULL;
  #line 391 
  k = 0;
  #line 391 
  while (vdev->max_config_port > k) {
    {
      #line 392 
      u64 *tmp_81;
      #line 393 
      u64 *tmp_82;
      #line 394 
      u64 *tmp_83;
      #line 395 
      u64 *tmp_84;
      #line 396 
      u64 *tmp_85;
      #line 397 
      u64 *tmp_86;
      #line 398 
      u64 *tmp_87;
      #line 399 
      u64 *tmp_88;
      #line 400 
      u64 *tmp_89;
      #line 401 
      u64 *tmp_90;
      #line 402 
      u64 *tmp_91;
      #line 403 
      u64 *tmp_92;
      #line 404 
      u64 *tmp_93;
      #line 405 
      u64 *tmp_94;
      #line 406 
      u64 *tmp_95;
      #line 407 
      u64 *tmp_96;
      #line 408 
      u64 *tmp_97;
      #line 409 
      u64 *tmp_98;
      #line 410 
      u64 *tmp_99;
      #line 411 
      u64 *tmp_100;
      #line 412 
      u64 *tmp_101;
      #line 413 
      u64 *tmp_102;
      #line 414 
      u64 *tmp_103;
      #line 415 
      u64 *tmp_104;
      #line 416 
      u64 *tmp_105;
      #line 417 
      u64 *tmp_106;
      #line 418 
      u64 *tmp_107;
      #line 419 
      u64 *tmp_108;
      #line 420 
      u64 *tmp_109;
      #line 421 
      u64 *tmp_110;
      #line 422 
      u64 *tmp_111;
      #line 423 
      u64 *tmp_112;
      #line 424 
      u64 *tmp_113;
      #line 425 
      u64 *tmp_114;
      #line 426 
      u64 *tmp_115;
      #line 427 
      u64 *tmp_116;
      #line 428 
      u64 *tmp_117;
      #line 429 
      u64 *tmp_118;
      #line 430 
      u64 *tmp_119;
      #line 431 
      u64 *tmp_120;
      #line 432 
      u64 *tmp_121;
      #line 433 
      u64 *tmp_122;
      #line 434 
      u64 *tmp_123;
      #line 435 
      u64 *tmp_124;
      #line 436 
      u64 *tmp_125;
      #line 437 
      u64 *tmp_126;
      #line 438 
      u64 *tmp_127;
      #line 439 
      u64 *tmp_128;
      #line 440 
      u64 *tmp_129;
      #line 441 
      u64 *tmp_130;
      #line 442 
      u64 *tmp_131;
      #line 443 
      u64 *tmp_132;
      #line 444 
      u64 *tmp_133;
      #line 445 
      u64 *tmp_134;
      #line 446 
      u64 *tmp_135;
      #line 447 
      u64 *tmp_136;
      #line 448 
      u64 *tmp_137;
      #line 449 
      u64 *tmp_138;
      #line 450 
      u64 *tmp_139;
      #line 451 
      u64 *tmp_140;
      #line 452 
      u64 *tmp_141;
      #line 453 
      u64 *tmp_142;
      #line 454 
      u64 *tmp_143;
      #line 455 
      u64 *tmp_144;
      #line 456 
      u64 *tmp_145;
      #line 457 
      u64 *tmp_146;
      #line 458 
      u64 *tmp_147;
      #line 459 
      u64 *tmp_148;
      #line 460 
      u64 *tmp_149;
      #line 461 
      u64 *tmp_150;
      #line 462 
      u64 *tmp_151;
      #line 463 
      u64 *tmp_152;
      #line 464 
      u64 *tmp_153;
      #line 465 
      u64 *tmp_154;
      #line 466 
      u64 *tmp_155;
      #line 467 
      u64 *tmp_156;
      #line 468 
      u64 *tmp_157;
      #line 469 
      u64 *tmp_158;
      #line 470 
      u64 *tmp_159;
      #line 471 
      u64 *tmp_160;
      #line 472 
      u64 *tmp_161;
      #line 473 
      u64 *tmp_162;
      #line 474 
      u64 *tmp_163;
      #line 475 
      u64 *tmp_164;
      #line 476 
      u64 *tmp_165;
      #line 477 
      u64 *tmp_166;
      #line 478 
      u64 *tmp_167;
      #line 479 
      u64 *tmp_168;
      #line 480 
      u64 *tmp_169;
      #line 481 
      u64 *tmp_170;
      #line 482 
      u64 *tmp_171;
      #line 483 
      u64 *tmp_172;
      #line 484 
      u64 *tmp_173;
      #line 485 
      u64 *tmp_174;
      #line 392 
      tmp_81 = ptr;
      #line 392 
      ptr ++;
      #line 392 
      *tmp_81 = xmac_stats->port_stats[k].tx_ttl_frms;
      #line 393 
      tmp_82 = ptr;
      #line 393 
      ptr ++;
      #line 393 
      *tmp_82 = xmac_stats->port_stats[k].tx_ttl_octets;
      #line 394 
      tmp_83 = ptr;
      #line 394 
      ptr ++;
      #line 394 
      *tmp_83 = xmac_stats->port_stats[k].tx_data_octets;
      #line 395 
      tmp_84 = ptr;
      #line 395 
      ptr ++;
      #line 395 
      *tmp_84 = xmac_stats->port_stats[k].tx_mcast_frms;
      #line 396 
      tmp_85 = ptr;
      #line 396 
      ptr ++;
      #line 396 
      *tmp_85 = xmac_stats->port_stats[k].tx_bcast_frms;
      #line 397 
      tmp_86 = ptr;
      #line 397 
      ptr ++;
      #line 397 
      *tmp_86 = xmac_stats->port_stats[k].tx_ucast_frms;
      #line 398 
      tmp_87 = ptr;
      #line 398 
      ptr ++;
      #line 398 
      *tmp_87 = xmac_stats->port_stats[k].tx_tagged_frms;
      #line 399 
      tmp_88 = ptr;
      #line 399 
      ptr ++;
      #line 399 
      *tmp_88 = xmac_stats->port_stats[k].tx_vld_ip;
      #line 400 
      tmp_89 = ptr;
      #line 400 
      ptr ++;
      #line 400 
      *tmp_89 = xmac_stats->port_stats[k].tx_vld_ip_octets;
      #line 401 
      tmp_90 = ptr;
      #line 401 
      ptr ++;
      #line 401 
      *tmp_90 = xmac_stats->port_stats[k].tx_icmp;
      #line 402 
      tmp_91 = ptr;
      #line 402 
      ptr ++;
      #line 402 
      *tmp_91 = xmac_stats->port_stats[k].tx_tcp;
      #line 403 
      tmp_92 = ptr;
      #line 403 
      ptr ++;
      #line 403 
      *tmp_92 = xmac_stats->port_stats[k].tx_rst_tcp;
      #line 404 
      tmp_93 = ptr;
      #line 404 
      ptr ++;
      #line 404 
      *tmp_93 = xmac_stats->port_stats[k].tx_udp;
      #line 405 
      tmp_94 = ptr;
      #line 405 
      ptr ++;
      #line 405 
      *tmp_94 = (unsigned long long)xmac_stats->port_stats[k].tx_parse_error;
      #line 406 
      tmp_95 = ptr;
      #line 406 
      ptr ++;
      #line 406 
      *tmp_95 = (unsigned long long)xmac_stats->port_stats[k].tx_unknown_protocol;
      #line 407 
      tmp_96 = ptr;
      #line 407 
      ptr ++;
      #line 407 
      *tmp_96 = xmac_stats->port_stats[k].tx_pause_ctrl_frms;
      #line 408 
      tmp_97 = ptr;
      #line 408 
      ptr ++;
      #line 408 
      *tmp_97 = (unsigned long long)xmac_stats->port_stats[k].tx_marker_pdu_frms;
      #line 409 
      tmp_98 = ptr;
      #line 409 
      ptr ++;
      #line 409 
      *tmp_98 = (unsigned long long)xmac_stats->port_stats[k].tx_lacpdu_frms;
      #line 410 
      tmp_99 = ptr;
      #line 410 
      ptr ++;
      #line 410 
      *tmp_99 = (unsigned long long)xmac_stats->port_stats[k].tx_drop_ip;
      #line 411 
      tmp_100 = ptr;
      #line 411 
      ptr ++;
      #line 411 
      *tmp_100 = (unsigned long long)xmac_stats->port_stats[k].tx_marker_resp_pdu_frms;
      #line 412 
      tmp_101 = ptr;
      #line 412 
      ptr ++;
      #line 412 
      *tmp_101 = (unsigned long long)xmac_stats->port_stats[k].tx_xgmii_char2_match;
      #line 413 
      tmp_102 = ptr;
      #line 413 
      ptr ++;
      #line 413 
      *tmp_102 = (unsigned long long)xmac_stats->port_stats[k].tx_xgmii_char1_match;
      #line 414 
      tmp_103 = ptr;
      #line 414 
      ptr ++;
      #line 414 
      *tmp_103 = (unsigned long long)xmac_stats->port_stats[k].tx_xgmii_column2_match;
      #line 415 
      tmp_104 = ptr;
      #line 415 
      ptr ++;
      #line 415 
      *tmp_104 = (unsigned long long)xmac_stats->port_stats[k].tx_xgmii_column1_match;
      #line 416 
      tmp_105 = ptr;
      #line 416 
      ptr ++;
      #line 416 
      *tmp_105 = (unsigned long long)xmac_stats->port_stats[k].tx_any_err_frms;
      #line 417 
      tmp_106 = ptr;
      #line 417 
      ptr ++;
      #line 417 
      *tmp_106 = (unsigned long long)xmac_stats->port_stats[k].tx_drop_frms;
      #line 418 
      tmp_107 = ptr;
      #line 418 
      ptr ++;
      #line 418 
      *tmp_107 = xmac_stats->port_stats[k].rx_ttl_frms;
      #line 419 
      tmp_108 = ptr;
      #line 419 
      ptr ++;
      #line 419 
      *tmp_108 = xmac_stats->port_stats[k].rx_vld_frms;
      #line 420 
      tmp_109 = ptr;
      #line 420 
      ptr ++;
      #line 420 
      *tmp_109 = xmac_stats->port_stats[k].rx_offload_frms;
      #line 421 
      tmp_110 = ptr;
      #line 421 
      ptr ++;
      #line 421 
      *tmp_110 = xmac_stats->port_stats[k].rx_ttl_octets;
      #line 422 
      tmp_111 = ptr;
      #line 422 
      ptr ++;
      #line 422 
      *tmp_111 = xmac_stats->port_stats[k].rx_data_octets;
      #line 423 
      tmp_112 = ptr;
      #line 423 
      ptr ++;
      #line 423 
      *tmp_112 = xmac_stats->port_stats[k].rx_offload_octets;
      #line 424 
      tmp_113 = ptr;
      #line 424 
      ptr ++;
      #line 424 
      *tmp_113 = xmac_stats->port_stats[k].rx_vld_mcast_frms;
      #line 425 
      tmp_114 = ptr;
      #line 425 
      ptr ++;
      #line 425 
      *tmp_114 = xmac_stats->port_stats[k].rx_vld_bcast_frms;
      #line 426 
      tmp_115 = ptr;
      #line 426 
      ptr ++;
      #line 426 
      *tmp_115 = xmac_stats->port_stats[k].rx_accepted_ucast_frms;
      #line 427 
      tmp_116 = ptr;
      #line 427 
      ptr ++;
      #line 427 
      *tmp_116 = xmac_stats->port_stats[k].rx_accepted_nucast_frms;
      #line 428 
      tmp_117 = ptr;
      #line 428 
      ptr ++;
      #line 428 
      *tmp_117 = xmac_stats->port_stats[k].rx_tagged_frms;
      #line 429 
      tmp_118 = ptr;
      #line 429 
      ptr ++;
      #line 429 
      *tmp_118 = xmac_stats->port_stats[k].rx_long_frms;
      #line 430 
      tmp_119 = ptr;
      #line 430 
      ptr ++;
      #line 430 
      *tmp_119 = xmac_stats->port_stats[k].rx_usized_frms;
      #line 431 
      tmp_120 = ptr;
      #line 431 
      ptr ++;
      #line 431 
      *tmp_120 = xmac_stats->port_stats[k].rx_osized_frms;
      #line 432 
      tmp_121 = ptr;
      #line 432 
      ptr ++;
      #line 432 
      *tmp_121 = xmac_stats->port_stats[k].rx_frag_frms;
      #line 433 
      tmp_122 = ptr;
      #line 433 
      ptr ++;
      #line 433 
      *tmp_122 = xmac_stats->port_stats[k].rx_jabber_frms;
      #line 434 
      tmp_123 = ptr;
      #line 434 
      ptr ++;
      #line 434 
      *tmp_123 = xmac_stats->port_stats[k].rx_ttl_64_frms;
      #line 435 
      tmp_124 = ptr;
      #line 435 
      ptr ++;
      #line 435 
      *tmp_124 = xmac_stats->port_stats[k].rx_ttl_65_127_frms;
      #line 436 
      tmp_125 = ptr;
      #line 436 
      ptr ++;
      #line 436 
      *tmp_125 = xmac_stats->port_stats[k].rx_ttl_128_255_frms;
      #line 437 
      tmp_126 = ptr;
      #line 437 
      ptr ++;
      #line 437 
      *tmp_126 = xmac_stats->port_stats[k].rx_ttl_256_511_frms;
      #line 438 
      tmp_127 = ptr;
      #line 438 
      ptr ++;
      #line 438 
      *tmp_127 = xmac_stats->port_stats[k].rx_ttl_512_1023_frms;
      #line 439 
      tmp_128 = ptr;
      #line 439 
      ptr ++;
      #line 439 
      *tmp_128 = xmac_stats->port_stats[k].rx_ttl_1024_1518_frms;
      #line 440 
      tmp_129 = ptr;
      #line 440 
      ptr ++;
      #line 440 
      *tmp_129 = xmac_stats->port_stats[k].rx_ttl_1519_4095_frms;
      #line 441 
      tmp_130 = ptr;
      #line 441 
      ptr ++;
      #line 441 
      *tmp_130 = xmac_stats->port_stats[k].rx_ttl_4096_8191_frms;
      #line 442 
      tmp_131 = ptr;
      #line 442 
      ptr ++;
      #line 442 
      *tmp_131 = xmac_stats->port_stats[k].rx_ttl_8192_max_frms;
      #line 443 
      tmp_132 = ptr;
      #line 443 
      ptr ++;
      #line 443 
      *tmp_132 = xmac_stats->port_stats[k].rx_ttl_gt_max_frms;
      #line 444 
      tmp_133 = ptr;
      #line 444 
      ptr ++;
      #line 444 
      *tmp_133 = xmac_stats->port_stats[k].rx_ip;
      #line 445 
      tmp_134 = ptr;
      #line 445 
      ptr ++;
      #line 445 
      *tmp_134 = xmac_stats->port_stats[k].rx_accepted_ip;
      #line 446 
      tmp_135 = ptr;
      #line 446 
      ptr ++;
      #line 446 
      *tmp_135 = xmac_stats->port_stats[k].rx_ip_octets;
      #line 447 
      tmp_136 = ptr;
      #line 447 
      ptr ++;
      #line 447 
      *tmp_136 = xmac_stats->port_stats[k].rx_err_ip;
      #line 448 
      tmp_137 = ptr;
      #line 448 
      ptr ++;
      #line 448 
      *tmp_137 = xmac_stats->port_stats[k].rx_icmp;
      #line 449 
      tmp_138 = ptr;
      #line 449 
      ptr ++;
      #line 449 
      *tmp_138 = xmac_stats->port_stats[k].rx_tcp;
      #line 450 
      tmp_139 = ptr;
      #line 450 
      ptr ++;
      #line 450 
      *tmp_139 = xmac_stats->port_stats[k].rx_udp;
      #line 451 
      tmp_140 = ptr;
      #line 451 
      ptr ++;
      #line 451 
      *tmp_140 = xmac_stats->port_stats[k].rx_err_tcp;
      #line 452 
      tmp_141 = ptr;
      #line 452 
      ptr ++;
      #line 452 
      *tmp_141 = xmac_stats->port_stats[k].rx_pause_count;
      #line 453 
      tmp_142 = ptr;
      #line 453 
      ptr ++;
      #line 453 
      *tmp_142 = xmac_stats->port_stats[k].rx_pause_ctrl_frms;
      #line 454 
      tmp_143 = ptr;
      #line 454 
      ptr ++;
      #line 454 
      *tmp_143 = xmac_stats->port_stats[k].rx_unsup_ctrl_frms;
      #line 455 
      tmp_144 = ptr;
      #line 455 
      ptr ++;
      #line 455 
      *tmp_144 = xmac_stats->port_stats[k].rx_fcs_err_frms;
      #line 456 
      tmp_145 = ptr;
      #line 456 
      ptr ++;
      #line 456 
      *tmp_145 = xmac_stats->port_stats[k].rx_in_rng_len_err_frms;
      #line 457 
      tmp_146 = ptr;
      #line 457 
      ptr ++;
      #line 457 
      *tmp_146 = xmac_stats->port_stats[k].rx_out_rng_len_err_frms;
      #line 458 
      tmp_147 = ptr;
      #line 458 
      ptr ++;
      #line 458 
      *tmp_147 = xmac_stats->port_stats[k].rx_drop_frms;
      #line 459 
      tmp_148 = ptr;
      #line 459 
      ptr ++;
      #line 459 
      *tmp_148 = xmac_stats->port_stats[k].rx_discarded_frms;
      #line 460 
      tmp_149 = ptr;
      #line 460 
      ptr ++;
      #line 460 
      *tmp_149 = xmac_stats->port_stats[k].rx_drop_ip;
      #line 461 
      tmp_150 = ptr;
      #line 461 
      ptr ++;
      #line 461 
      *tmp_150 = xmac_stats->port_stats[k].rx_drop_udp;
      #line 462 
      tmp_151 = ptr;
      #line 462 
      ptr ++;
      #line 462 
      *tmp_151 = (unsigned long long)xmac_stats->port_stats[k].rx_marker_pdu_frms;
      #line 463 
      tmp_152 = ptr;
      #line 463 
      ptr ++;
      #line 463 
      *tmp_152 = (unsigned long long)xmac_stats->port_stats[k].rx_lacpdu_frms;
      #line 464 
      tmp_153 = ptr;
      #line 464 
      ptr ++;
      #line 464 
      *tmp_153 = (unsigned long long)xmac_stats->port_stats[k].rx_unknown_pdu_frms;
      #line 465 
      tmp_154 = ptr;
      #line 465 
      ptr ++;
      #line 465 
      *tmp_154 = (unsigned long long)xmac_stats->port_stats[k].rx_marker_resp_pdu_frms;
      #line 466 
      tmp_155 = ptr;
      #line 466 
      ptr ++;
      #line 466 
      *tmp_155 = (unsigned long long)xmac_stats->port_stats[k].rx_fcs_discard;
      #line 467 
      tmp_156 = ptr;
      #line 467 
      ptr ++;
      #line 467 
      *tmp_156 = (unsigned long long)xmac_stats->port_stats[k].rx_illegal_pdu_frms;
      #line 468 
      tmp_157 = ptr;
      #line 468 
      ptr ++;
      #line 468 
      *tmp_157 = (unsigned long long)xmac_stats->port_stats[k].rx_switch_discard;
      #line 469 
      tmp_158 = ptr;
      #line 469 
      ptr ++;
      #line 469 
      *tmp_158 = (unsigned long long)xmac_stats->port_stats[k].rx_len_discard;
      #line 470 
      tmp_159 = ptr;
      #line 470 
      ptr ++;
      #line 470 
      *tmp_159 = (unsigned long long)xmac_stats->port_stats[k].rx_rpa_discard;
      #line 471 
      tmp_160 = ptr;
      #line 471 
      ptr ++;
      #line 471 
      *tmp_160 = (unsigned long long)xmac_stats->port_stats[k].rx_l2_mgmt_discard;
      #line 472 
      tmp_161 = ptr;
      #line 472 
      ptr ++;
      #line 472 
      *tmp_161 = (unsigned long long)xmac_stats->port_stats[k].rx_rts_discard;
      #line 473 
      tmp_162 = ptr;
      #line 473 
      ptr ++;
      #line 473 
      *tmp_162 = (unsigned long long)xmac_stats->port_stats[k].rx_trash_discard;
      #line 474 
      tmp_163 = ptr;
      #line 474 
      ptr ++;
      #line 474 
      *tmp_163 = (unsigned long long)xmac_stats->port_stats[k].rx_buff_full_discard;
      #line 475 
      tmp_164 = ptr;
      #line 475 
      ptr ++;
      #line 475 
      *tmp_164 = (unsigned long long)xmac_stats->port_stats[k].rx_red_discard;
      #line 476 
      tmp_165 = ptr;
      #line 476 
      ptr ++;
      #line 476 
      *tmp_165 = (unsigned long long)xmac_stats->port_stats[k].rx_xgmii_ctrl_err_cnt;
      #line 477 
      tmp_166 = ptr;
      #line 477 
      ptr ++;
      #line 477 
      *tmp_166 = (unsigned long long)xmac_stats->port_stats[k].rx_xgmii_data_err_cnt;
      #line 478 
      tmp_167 = ptr;
      #line 478 
      ptr ++;
      #line 478 
      *tmp_167 = (unsigned long long)xmac_stats->port_stats[k].rx_xgmii_char1_match;
      #line 479 
      tmp_168 = ptr;
      #line 479 
      ptr ++;
      #line 479 
      *tmp_168 = (unsigned long long)xmac_stats->port_stats[k].rx_xgmii_err_sym;
      #line 480 
      tmp_169 = ptr;
      #line 480 
      ptr ++;
      #line 480 
      *tmp_169 = (unsigned long long)xmac_stats->port_stats[k].rx_xgmii_column1_match;
      #line 481 
      tmp_170 = ptr;
      #line 481 
      ptr ++;
      #line 481 
      *tmp_170 = (unsigned long long)xmac_stats->port_stats[k].rx_xgmii_char2_match;
      #line 482 
      tmp_171 = ptr;
      #line 482 
      ptr ++;
      #line 482 
      *tmp_171 = (unsigned long long)xmac_stats->port_stats[k].rx_local_fault;
      #line 483 
      tmp_172 = ptr;
      #line 483 
      ptr ++;
      #line 483 
      *tmp_172 = (unsigned long long)xmac_stats->port_stats[k].rx_xgmii_column2_match;
      #line 484 
      tmp_173 = ptr;
      #line 484 
      ptr ++;
      #line 484 
      *tmp_173 = (unsigned long long)xmac_stats->port_stats[k].rx_jettison;
      #line 485 
      tmp_174 = ptr;
      #line 485 
      ptr ++;
      #line 485 
      *tmp_174 = (unsigned long long)xmac_stats->port_stats[k].rx_remote_fault;
    }
    #line 391 
    k ++;
  }
  #line 488 
  tmp_175 = ptr;
  #line 488 
  ptr ++;
  #line 488 
  *tmp_175 = 0ULL;
  #line 489 
  k = 0;
  #line 489 
  while (vdev->no_of_vpath > k) {
    {
      #line 490 
      struct vxge_hw_vpath_stats_sw_info *vpath_info_0;
      #line 496 
      u64 *tmp_176;
      #line 497 
      u64 *tmp_177;
      #line 498 
      u64 *tmp_178;
      #line 499 
      u64 *tmp_179;
      #line 500 
      u64 *tmp_180;
      #line 501 
      u64 *tmp_181;
      #line 502 
      u64 *tmp_182;
      #line 503 
      u64 *tmp_183;
      #line 504 
      u64 *tmp_184;
      #line 505 
      u64 *tmp_185;
      #line 506 
      u64 *tmp_186;
      #line 507 
      u64 *tmp_187;
      #line 508 
      u64 *tmp_188;
      #line 509 
      u64 *tmp_189;
      #line 510 
      u64 *tmp_190;
      #line 511 
      u64 *tmp_191;
      #line 512 
      u64 *tmp_192;
      #line 513 
      u64 *tmp_193;
      #line 514 
      u64 *tmp_194;
      #line 515 
      u64 *tmp_195;
      #line 517 
      u64 *tmp_196;
      #line 520 
      u64 *tmp_198;
      #line 521 
      u64 *tmp_199;
      #line 522 
      u64 *tmp_200;
      #line 523 
      u64 *tmp_201;
      #line 525 
      u64 *tmp_202;
      #line 526 
      u64 *tmp_203;
      #line 527 
      u64 *tmp_204;
      #line 492 
      vpath = vdev->vpaths + (unsigned long)k;
      #line 493 
      j = vpath->device_id;
      #line 494 
      vpath_info_0 = & sw_stats->vpath_info[j];
      #line 496 
      tmp_176 = ptr;
      #line 496 
      ptr ++;
      #line 496 
      *tmp_176 = (unsigned long long)vpath_info_0->soft_reset_cnt;
      #line 497 
      tmp_177 = ptr;
      #line 497 
      ptr ++;
      #line 497 
      *tmp_177 = (unsigned long long)vpath_info_0->error_stats.unknown_alarms;
      #line 498 
      tmp_178 = ptr;
      #line 498 
      ptr ++;
      #line 498 
      *tmp_178 = (unsigned long long)vpath_info_0->error_stats.network_sustained_fault;
      #line 499 
      tmp_179 = ptr;
      #line 499 
      ptr ++;
      #line 499 
      *tmp_179 = (unsigned long long)vpath_info_0->error_stats.network_sustained_ok;
      #line 500 
      tmp_180 = ptr;
      #line 500 
      ptr ++;
      #line 500 
      *tmp_180 = (unsigned long long)vpath_info_0->error_stats.kdfcctl_fifo0_overwrite;
      #line 501 
      tmp_181 = ptr;
      #line 501 
      ptr ++;
      #line 501 
      *tmp_181 = (unsigned long long)vpath_info_0->error_stats.kdfcctl_fifo0_poison;
      #line 502 
      tmp_182 = ptr;
      #line 502 
      ptr ++;
      #line 502 
      *tmp_182 = (unsigned long long)vpath_info_0->error_stats.kdfcctl_fifo0_dma_error;
      #line 503 
      tmp_183 = ptr;
      #line 503 
      ptr ++;
      #line 503 
      *tmp_183 = (unsigned long long)vpath_info_0->error_stats.dblgen_fifo0_overflow;
      #line 504 
      tmp_184 = ptr;
      #line 504 
      ptr ++;
      #line 504 
      *tmp_184 = (unsigned long long)vpath_info_0->error_stats.statsb_pif_chain_error;
      #line 505 
      tmp_185 = ptr;
      #line 505 
      ptr ++;
      #line 505 
      *tmp_185 = (unsigned long long)vpath_info_0->error_stats.statsb_drop_timeout;
      #line 506 
      tmp_186 = ptr;
      #line 506 
      ptr ++;
      #line 506 
      *tmp_186 = (unsigned long long)vpath_info_0->error_stats.target_illegal_access;
      #line 507 
      tmp_187 = ptr;
      #line 507 
      ptr ++;
      #line 507 
      *tmp_187 = (unsigned long long)vpath_info_0->error_stats.ini_serr_det;
      #line 508 
      tmp_188 = ptr;
      #line 508 
      ptr ++;
      #line 508 
      *tmp_188 = (unsigned long long)vpath_info_0->error_stats.prc_ring_bumps;
      #line 509 
      tmp_189 = ptr;
      #line 509 
      ptr ++;
      #line 509 
      *tmp_189 = (unsigned long long)vpath_info_0->error_stats.prc_rxdcm_sc_err;
      #line 510 
      tmp_190 = ptr;
      #line 510 
      ptr ++;
      #line 510 
      *tmp_190 = (unsigned long long)vpath_info_0->error_stats.prc_rxdcm_sc_abort;
      #line 511 
      tmp_191 = ptr;
      #line 511 
      ptr ++;
      #line 511 
      *tmp_191 = (unsigned long long)vpath_info_0->error_stats.prc_quanta_size_err;
      #line 512 
      tmp_192 = ptr;
      #line 512 
      ptr ++;
      #line 512 
      *tmp_192 = (unsigned long long)vpath_info_0->ring_stats.common_stats.full_cnt;
      #line 513 
      tmp_193 = ptr;
      #line 513 
      ptr ++;
      #line 513 
      *tmp_193 = (unsigned long long)vpath_info_0->ring_stats.common_stats.usage_cnt;
      #line 514 
      tmp_194 = ptr;
      #line 514 
      ptr ++;
      #line 514 
      *tmp_194 = (unsigned long long)vpath_info_0->ring_stats.common_stats.usage_max;
      #line 515 
      tmp_195 = ptr;
      #line 515 
      ptr ++;
      #line 515 
      *tmp_195 = (unsigned long long)vpath_info_0->ring_stats.common_stats.reserve_free_swaps_cnt;
      #line 517 
      tmp_196 = ptr;
      #line 517 
      ptr ++;
      #line 517 
      *tmp_196 = (unsigned long long)vpath_info_0->ring_stats.common_stats.total_compl_cnt;
      #line 518 
      j = 0;
      #line 518 
      while (j <= 15) {
        #line 519 
        u64 *tmp_197;
        #line 519 
        tmp_197 = ptr;
        #line 519 
        ptr ++;
        #line 519 
        *tmp_197 = (unsigned long long)vpath_info_0->ring_stats.rxd_t_code_err_cnt[j];
        #line 518 
        j ++;
      }
      #line 520 
      tmp_198 = ptr;
      #line 520 
      ptr ++;
      #line 520 
      *tmp_198 = (unsigned long long)vpath_info_0->fifo_stats.common_stats.full_cnt;
      #line 521 
      tmp_199 = ptr;
      #line 521 
      ptr ++;
      #line 521 
      *tmp_199 = (unsigned long long)vpath_info_0->fifo_stats.common_stats.usage_cnt;
      #line 522 
      tmp_200 = ptr;
      #line 522 
      ptr ++;
      #line 522 
      *tmp_200 = (unsigned long long)vpath_info_0->fifo_stats.common_stats.usage_max;
      #line 523 
      tmp_201 = ptr;
      #line 523 
      ptr ++;
      #line 523 
      *tmp_201 = (unsigned long long)vpath_info_0->fifo_stats.common_stats.reserve_free_swaps_cnt;
      #line 525 
      tmp_202 = ptr;
      #line 525 
      ptr ++;
      #line 525 
      *tmp_202 = (unsigned long long)vpath_info_0->fifo_stats.common_stats.total_compl_cnt;
      #line 526 
      tmp_203 = ptr;
      #line 526 
      ptr ++;
      #line 526 
      *tmp_203 = (unsigned long long)vpath_info_0->fifo_stats.total_posts;
      #line 527 
      tmp_204 = ptr;
      #line 527 
      ptr ++;
      #line 527 
      *tmp_204 = (unsigned long long)vpath_info_0->fifo_stats.total_buffers;
      #line 528 
      j = 0;
      #line 528 
      while (j <= 15) {
        #line 529 
        u64 *tmp_205;
        #line 529 
        tmp_205 = ptr;
        #line 529 
        ptr ++;
        #line 529 
        *tmp_205 = (unsigned long long)vpath_info_0->fifo_stats.txd_t_code_err_cnt[j];
        #line 528 
        j ++;
      }
    }
    #line 489 
    k ++;
  }
  #line 532 
  tmp_206 = ptr;
  #line 532 
  ptr ++;
  #line 532 
  *tmp_206 = 0ULL;
  #line 533 
  k = 0;
  #line 533 
  while (vdev->no_of_vpath > k) {
    {
      #line 534 
      struct vxge_hw_vpath_stats_hw_info *vpath_info_1;
      #line 543 
      u64 *tmp_207;
      #line 544 
      u64 *tmp_208;
      #line 545 
      u64 *tmp_209;
      #line 546 
      u64 *tmp_210;
      #line 547 
      u64 *tmp_211;
      #line 548 
      u64 *tmp_212;
      #line 549 
      u64 *tmp_213;
      #line 550 
      u64 *tmp_214;
      #line 551 
      u64 *tmp_215;
      #line 552 
      u64 *tmp_216;
      #line 553 
      u64 *tmp_217;
      #line 554 
      u64 *tmp_218;
      #line 555 
      u64 *tmp_219;
      #line 556 
      u64 *tmp_220;
      #line 557 
      u64 *tmp_221;
      #line 558 
      u64 *tmp_222;
      #line 559 
      u64 *tmp_223;
      #line 560 
      u64 *tmp_224;
      #line 561 
      u64 *tmp_225;
      #line 562 
      u64 *tmp_226;
      #line 563 
      u64 *tmp_227;
      #line 564 
      u64 *tmp_228;
      #line 565 
      u64 *tmp_229;
      #line 566 
      u64 *tmp_230;
      #line 567 
      u64 *tmp_231;
      #line 568 
      u64 *tmp_232;
      #line 569 
      u64 *tmp_233;
      #line 535 
      vpath = vdev->vpaths + (unsigned long)k;
      #line 536 
      j = vpath->device_id;
      #line 537 
      vpath_info_1 = hw_stats->vpath_info[j];
      #line 538 
      if (vpath_info_1 == (struct vxge_hw_vpath_stats_hw_info *)0) {
        #line 539 
        memset((void *)ptr,0,216UL);
        #line 540 
        ptr += 27U;
        #line 541 
        goto __Cont_0;
      }
      #line 543 
      tmp_207 = ptr;
      #line 543 
      ptr ++;
      #line 543 
      *tmp_207 = (unsigned long long)vpath_info_1->ini_num_mwr_sent;
      #line 544 
      tmp_208 = ptr;
      #line 544 
      ptr ++;
      #line 544 
      *tmp_208 = (unsigned long long)vpath_info_1->ini_num_mrd_sent;
      #line 545 
      tmp_209 = ptr;
      #line 545 
      ptr ++;
      #line 545 
      *tmp_209 = (unsigned long long)vpath_info_1->ini_num_cpl_rcvd;
      #line 546 
      tmp_210 = ptr;
      #line 546 
      ptr ++;
      #line 546 
      *tmp_210 = vpath_info_1->ini_num_mwr_byte_sent;
      #line 547 
      tmp_211 = ptr;
      #line 547 
      ptr ++;
      #line 547 
      *tmp_211 = vpath_info_1->ini_num_cpl_byte_rcvd;
      #line 548 
      tmp_212 = ptr;
      #line 548 
      ptr ++;
      #line 548 
      *tmp_212 = (unsigned long long)vpath_info_1->wrcrdtarb_xoff;
      #line 549 
      tmp_213 = ptr;
      #line 549 
      ptr ++;
      #line 549 
      *tmp_213 = (unsigned long long)vpath_info_1->rdcrdtarb_xoff;
      #line 550 
      tmp_214 = ptr;
      #line 550 
      ptr ++;
      #line 550 
      *tmp_214 = (unsigned long long)vpath_info_1->vpath_genstats_count0;
      #line 551 
      tmp_215 = ptr;
      #line 551 
      ptr ++;
      #line 551 
      *tmp_215 = (unsigned long long)vpath_info_1->vpath_genstats_count1;
      #line 552 
      tmp_216 = ptr;
      #line 552 
      ptr ++;
      #line 552 
      *tmp_216 = (unsigned long long)vpath_info_1->vpath_genstats_count2;
      #line 553 
      tmp_217 = ptr;
      #line 553 
      ptr ++;
      #line 553 
      *tmp_217 = (unsigned long long)vpath_info_1->vpath_genstats_count3;
      #line 554 
      tmp_218 = ptr;
      #line 554 
      ptr ++;
      #line 554 
      *tmp_218 = (unsigned long long)vpath_info_1->vpath_genstats_count4;
      #line 555 
      tmp_219 = ptr;
      #line 555 
      ptr ++;
      #line 555 
      *tmp_219 = (unsigned long long)vpath_info_1->vpath_genstats_count5;
      #line 556 
      tmp_220 = ptr;
      #line 556 
      ptr ++;
      #line 556 
      *tmp_220 = (unsigned long long)vpath_info_1->prog_event_vnum0;
      #line 557 
      tmp_221 = ptr;
      #line 557 
      ptr ++;
      #line 557 
      *tmp_221 = (unsigned long long)vpath_info_1->prog_event_vnum1;
      #line 558 
      tmp_222 = ptr;
      #line 558 
      ptr ++;
      #line 558 
      *tmp_222 = (unsigned long long)vpath_info_1->prog_event_vnum2;
      #line 559 
      tmp_223 = ptr;
      #line 559 
      ptr ++;
      #line 559 
      *tmp_223 = (unsigned long long)vpath_info_1->prog_event_vnum3;
      #line 560 
      tmp_224 = ptr;
      #line 560 
      ptr ++;
      #line 560 
      *tmp_224 = (unsigned long long)vpath_info_1->rx_multi_cast_frame_discard;
      #line 561 
      tmp_225 = ptr;
      #line 561 
      ptr ++;
      #line 561 
      *tmp_225 = (unsigned long long)vpath_info_1->rx_frm_transferred;
      #line 562 
      tmp_226 = ptr;
      #line 562 
      ptr ++;
      #line 562 
      *tmp_226 = (unsigned long long)vpath_info_1->rxd_returned;
      #line 563 
      tmp_227 = ptr;
      #line 563 
      ptr ++;
      #line 563 
      *tmp_227 = (unsigned long long)vpath_info_1->rx_mpa_len_fail_frms;
      #line 564 
      tmp_228 = ptr;
      #line 564 
      ptr ++;
      #line 564 
      *tmp_228 = (unsigned long long)vpath_info_1->rx_mpa_mrk_fail_frms;
      #line 565 
      tmp_229 = ptr;
      #line 565 
      ptr ++;
      #line 565 
      *tmp_229 = (unsigned long long)vpath_info_1->rx_mpa_crc_fail_frms;
      #line 566 
      tmp_230 = ptr;
      #line 566 
      ptr ++;
      #line 566 
      *tmp_230 = (unsigned long long)vpath_info_1->rx_permitted_frms;
      #line 567 
      tmp_231 = ptr;
      #line 567 
      ptr ++;
      #line 567 
      *tmp_231 = vpath_info_1->rx_vp_reset_discarded_frms;
      #line 568 
      tmp_232 = ptr;
      #line 568 
      ptr ++;
      #line 568 
      *tmp_232 = vpath_info_1->rx_wol_frms;
      #line 569 
      tmp_233 = ptr;
      #line 569 
      ptr ++;
      #line 569 
      *tmp_233 = vpath_info_1->tx_vp_reset_discarded_frms;
    }
    #line 533 
    __Cont_0: 
              #line 533 
    k ++;
  }
  #line 572 
  tmp_234 = ptr;
  #line 572 
  ptr ++;
  #line 572 
  *tmp_234 = 0ULL;
  #line 573 
  tmp_235 = ptr;
  #line 573 
  ptr ++;
  #line 573 
  *tmp_235 = (unsigned long long)vdev->stats.vpaths_open;
  #line 574 
  tmp_236 = ptr;
  #line 574 
  ptr ++;
  #line 574 
  *tmp_236 = (unsigned long long)vdev->stats.vpath_open_fail;
  #line 575 
  tmp_237 = ptr;
  #line 575 
  ptr ++;
  #line 575 
  *tmp_237 = (unsigned long long)vdev->stats.link_up;
  #line 576 
  tmp_238 = ptr;
  #line 576 
  ptr ++;
  #line 576 
  *tmp_238 = (unsigned long long)vdev->stats.link_down;
  #line 578 
  k = 0;
  #line 578 
  while (vdev->no_of_vpath > k) {
    #line 579 
    *ptr += (vdev->vpaths + (unsigned long)k)->fifo.stats.tx_frms;
    #line 580 
    *(ptr + 1U) += (unsigned long long)(vdev->vpaths + (unsigned long)k)->fifo.stats.tx_errors;
    #line 581 
    *(ptr + 2U) += (vdev->vpaths + (unsigned long)k)->fifo.stats.tx_bytes;
    #line 582 
    *(ptr + 3U) += (unsigned long long)(vdev->vpaths + (unsigned long)k)->fifo.stats.txd_not_free;
    #line 583 
    *(ptr + 4U) += (unsigned long long)(vdev->vpaths + (unsigned long)k)->fifo.stats.txd_out_of_desc;
    #line 584 
    *(ptr + 5U) += (vdev->vpaths + (unsigned long)k)->ring.stats.rx_frms;
    #line 585 
    *(ptr + 6U) += (unsigned long long)(vdev->vpaths + (unsigned long)k)->ring.stats.rx_errors;
    #line 586 
    *(ptr + 7U) += (vdev->vpaths + (unsigned long)k)->ring.stats.rx_bytes;
    #line 587 
    *(ptr + 8U) += (vdev->vpaths + (unsigned long)k)->ring.stats.rx_mcast;
    #line 588 
    *(ptr + 9U) += (unsigned long long)((vdev->vpaths + (unsigned long)k)->fifo.stats.pci_map_fail + (vdev->vpaths + (unsigned long)k)->ring.stats.pci_map_fail);
    #line 590 
    *(ptr + 10U) += (unsigned long long)(vdev->vpaths + (unsigned long)k)->ring.stats.skb_alloc_fail;
    #line 578 
    k ++;
  }
  #line 593 
  ptr += 12U;
  #line 595 
  kfree((void *)xmac_stats);
  #line 596 
  kfree((void *)sw_stats);
  #line 597 
  kfree((void *)hw_stats);
  #line 598 
  return;
}

#line 600  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-ethtool.c"
static void vxge_ethtool_get_strings(struct net_device *dev, u32 stringset, u8 *data)
{
  #line 604 
  int i;
  #line 604 
  int j;
  #line 603 
  int stat_size = 0;
  #line 605 
  struct vxgedev *vdev = netdev_priv(dev);
  #line 606 
  switch (stringset) {
    #line 607 
    case (u32)1: 
                 #line 607 
    ;
    #line 608 
    snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"VPATH STATISTICS%s\t\t\t",(char *)"");
    #line 608 
    stat_size += 32;
    #line 610 
    i = 0;
    #line 610 
    while (vdev->no_of_vpath > i) {
      #line 611 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"tx_ttl_eth_frms_%d\t\t\t",i);
      #line 611 
      stat_size += 32;
      #line 613 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"tx_ttl_eth_octects_%d\t\t",i);
      #line 613 
      stat_size += 32;
      #line 615 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"tx_data_octects_%d\t\t\t",i);
      #line 615 
      stat_size += 32;
      #line 617 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"tx_mcast_frms_%d\t\t\t",i);
      #line 617 
      stat_size += 32;
      #line 619 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"tx_bcast_frms_%d\t\t\t",i);
      #line 619 
      stat_size += 32;
      #line 621 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"tx_ucast_frms_%d\t\t\t",i);
      #line 621 
      stat_size += 32;
      #line 623 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"tx_tagged_frms_%d\t\t\t",i);
      #line 623 
      stat_size += 32;
      #line 625 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"tx_vld_ip_%d\t\t\t",i);
      #line 625 
      stat_size += 32;
      #line 627 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"tx_vld_ip_octects_%d\t\t",i);
      #line 627 
      stat_size += 32;
      #line 629 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"tx_icmp_%d\t\t\t\t",i);
      #line 629 
      stat_size += 32;
      #line 631 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"tx_tcp_%d\t\t\t\t",i);
      #line 631 
      stat_size += 32;
      #line 633 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"tx_rst_tcp_%d\t\t\t",i);
      #line 633 
      stat_size += 32;
      #line 635 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"tx_udp_%d\t\t\t\t",i);
      #line 635 
      stat_size += 32;
      #line 637 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"tx_unknown_proto_%d\t\t\t",i);
      #line 637 
      stat_size += 32;
      #line 639 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"tx_lost_ip_%d\t\t\t",i);
      #line 639 
      stat_size += 32;
      #line 641 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"tx_parse_error_%d\t\t\t",i);
      #line 641 
      stat_size += 32;
      #line 643 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"tx_tcp_offload_%d\t\t\t",i);
      #line 643 
      stat_size += 32;
      #line 645 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"tx_retx_tcp_offload_%d\t\t",i);
      #line 645 
      stat_size += 32;
      #line 647 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"tx_lost_ip_offload_%d\t\t",i);
      #line 647 
      stat_size += 32;
      #line 649 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"rx_ttl_eth_frms_%d\t\t\t",i);
      #line 649 
      stat_size += 32;
      #line 651 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"rx_vld_frms_%d\t\t\t",i);
      #line 651 
      stat_size += 32;
      #line 653 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"rx_offload_frms_%d\t\t\t",i);
      #line 653 
      stat_size += 32;
      #line 655 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"rx_ttl_eth_octects_%d\t\t",i);
      #line 655 
      stat_size += 32;
      #line 657 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"rx_data_octects_%d\t\t\t",i);
      #line 657 
      stat_size += 32;
      #line 659 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"rx_offload_octects_%d\t\t",i);
      #line 659 
      stat_size += 32;
      #line 661 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"rx_vld_mcast_frms_%d\t\t",i);
      #line 661 
      stat_size += 32;
      #line 663 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"rx_vld_bcast_frms_%d\t\t",i);
      #line 663 
      stat_size += 32;
      #line 665 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"rx_accepted_ucast_frms_%d\t\t",i);
      #line 665 
      stat_size += 32;
      #line 667 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"rx_accepted_nucast_frms_%d\t\t",i);
      #line 667 
      stat_size += 32;
      #line 669 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"rx_tagged_frms_%d\t\t\t",i);
      #line 669 
      stat_size += 32;
      #line 671 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"rx_long_frms_%d\t\t\t",i);
      #line 671 
      stat_size += 32;
      #line 673 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"rx_usized_frms_%d\t\t\t",i);
      #line 673 
      stat_size += 32;
      #line 675 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"rx_osized_frms_%d\t\t\t",i);
      #line 675 
      stat_size += 32;
      #line 677 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"rx_frag_frms_%d\t\t\t",i);
      #line 677 
      stat_size += 32;
      #line 679 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"rx_jabber_frms_%d\t\t\t",i);
      #line 679 
      stat_size += 32;
      #line 681 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"rx_ttl_64_frms_%d\t\t\t",i);
      #line 681 
      stat_size += 32;
      #line 683 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"rx_ttl_65_127_frms_%d\t\t",i);
      #line 683 
      stat_size += 32;
      #line 685 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"rx_ttl_128_255_frms_%d\t\t",i);
      #line 685 
      stat_size += 32;
      #line 687 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"rx_ttl_256_511_frms_%d\t\t",i);
      #line 687 
      stat_size += 32;
      #line 689 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"rx_ttl_512_1023_frms_%d\t\t",i);
      #line 689 
      stat_size += 32;
      #line 691 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"rx_ttl_1024_1518_frms_%d\t\t",i);
      #line 691 
      stat_size += 32;
      #line 693 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"rx_ttl_1519_4095_frms_%d\t\t",i);
      #line 693 
      stat_size += 32;
      #line 695 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"rx_ttl_4096_8191_frms_%d\t\t",i);
      #line 695 
      stat_size += 32;
      #line 697 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"rx_ttl_8192_max_frms_%d\t\t",i);
      #line 697 
      stat_size += 32;
      #line 699 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"rx_ttl_gt_max_frms_%d\t\t",i);
      #line 699 
      stat_size += 32;
      #line 701 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"rx_ip%d\t\t\t\t",i);
      #line 701 
      stat_size += 32;
      #line 703 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"rx_accepted_ip_%d\t\t\t",i);
      #line 703 
      stat_size += 32;
      #line 705 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"rx_ip_octects_%d\t\t\t",i);
      #line 705 
      stat_size += 32;
      #line 707 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"rx_err_ip_%d\t\t\t",i);
      #line 707 
      stat_size += 32;
      #line 709 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"rx_icmp_%d\t\t\t\t",i);
      #line 709 
      stat_size += 32;
      #line 711 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"rx_tcp_%d\t\t\t\t",i);
      #line 711 
      stat_size += 32;
      #line 713 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"rx_udp_%d\t\t\t\t",i);
      #line 713 
      stat_size += 32;
      #line 715 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"rx_err_tcp_%d\t\t\t",i);
      #line 715 
      stat_size += 32;
      #line 717 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"rx_lost_frms_%d\t\t\t",i);
      #line 717 
      stat_size += 32;
      #line 719 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"rx_lost_ip_%d\t\t\t",i);
      #line 719 
      stat_size += 32;
      #line 721 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"rx_lost_ip_offload_%d\t\t",i);
      #line 721 
      stat_size += 32;
      #line 723 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"rx_various_discard_%d\t\t",i);
      #line 723 
      stat_size += 32;
      #line 725 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"rx_sleep_discard_%d\t\t\t",i);
      #line 725 
      stat_size += 32;
      #line 727 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"rx_red_discard_%d\t\t\t",i);
      #line 727 
      stat_size += 32;
      #line 729 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"rx_queue_full_discard_%d\t\t",i);
      #line 729 
      stat_size += 32;
      #line 731 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"rx_mpa_ok_frms_%d\t\t\t",i);
      #line 731 
      stat_size += 32;
      #line 610 
      i ++;
    }
    #line 735 
    snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"\nAGGR STATISTICS%s\t\t\t\t",(char *)"");
    #line 735 
    stat_size += 32;
    #line 737 
    i = 0;
    #line 737 
    while (vdev->max_config_port > i) {
      #line 738 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"tx_frms_%d\t\t\t\t",i);
      #line 738 
      stat_size += 32;
      #line 740 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"tx_data_octects_%d\t\t\t",i);
      #line 740 
      stat_size += 32;
      #line 742 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"tx_mcast_frms_%d\t\t\t",i);
      #line 742 
      stat_size += 32;
      #line 744 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"tx_bcast_frms_%d\t\t\t",i);
      #line 744 
      stat_size += 32;
      #line 746 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"tx_discarded_frms_%d\t\t",i);
      #line 746 
      stat_size += 32;
      #line 748 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"tx_errored_frms_%d\t\t\t",i);
      #line 748 
      stat_size += 32;
      #line 750 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"rx_frms_%d\t\t\t\t",i);
      #line 750 
      stat_size += 32;
      #line 752 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"rx_data_octects_%d\t\t\t",i);
      #line 752 
      stat_size += 32;
      #line 754 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"rx_mcast_frms_%d\t\t\t",i);
      #line 754 
      stat_size += 32;
      #line 756 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"rx_bcast_frms_%d\t\t\t",i);
      #line 756 
      stat_size += 32;
      #line 758 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"rx_discarded_frms_%d\t\t",i);
      #line 758 
      stat_size += 32;
      #line 760 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"rx_errored_frms_%d\t\t\t",i);
      #line 760 
      stat_size += 32;
      #line 762 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"rx_unknown_slow_proto_frms_%d\t",i);
      #line 762 
      stat_size += 32;
      #line 737 
      i ++;
    }
    #line 766 
    snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"\nPORT STATISTICS%s\t\t\t\t",(char *)"");
    #line 766 
    stat_size += 32;
    #line 768 
    i = 0;
    #line 768 
    while (vdev->max_config_port > i) {
      #line 769 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"tx_ttl_frms_%d\t\t\t",i);
      #line 769 
      stat_size += 32;
      #line 771 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"tx_ttl_octects_%d\t\t\t",i);
      #line 771 
      stat_size += 32;
      #line 773 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"tx_data_octects_%d\t\t\t",i);
      #line 773 
      stat_size += 32;
      #line 775 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"tx_mcast_frms_%d\t\t\t",i);
      #line 775 
      stat_size += 32;
      #line 777 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"tx_bcast_frms_%d\t\t\t",i);
      #line 777 
      stat_size += 32;
      #line 779 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"tx_ucast_frms_%d\t\t\t",i);
      #line 779 
      stat_size += 32;
      #line 781 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"tx_tagged_frms_%d\t\t\t",i);
      #line 781 
      stat_size += 32;
      #line 783 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"tx_vld_ip_%d\t\t\t",i);
      #line 783 
      stat_size += 32;
      #line 785 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"tx_vld_ip_octects_%d\t\t",i);
      #line 785 
      stat_size += 32;
      #line 787 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"tx_icmp_%d\t\t\t\t",i);
      #line 787 
      stat_size += 32;
      #line 789 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"tx_tcp_%d\t\t\t\t",i);
      #line 789 
      stat_size += 32;
      #line 791 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"tx_rst_tcp_%d\t\t\t",i);
      #line 791 
      stat_size += 32;
      #line 793 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"tx_udp_%d\t\t\t\t",i);
      #line 793 
      stat_size += 32;
      #line 795 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"tx_parse_error_%d\t\t\t",i);
      #line 795 
      stat_size += 32;
      #line 797 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"tx_unknown_protocol_%d\t\t",i);
      #line 797 
      stat_size += 32;
      #line 799 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"tx_pause_ctrl_frms_%d\t\t",i);
      #line 799 
      stat_size += 32;
      #line 801 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"tx_marker_pdu_frms_%d\t\t",i);
      #line 801 
      stat_size += 32;
      #line 803 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"tx_lacpdu_frms_%d\t\t\t",i);
      #line 803 
      stat_size += 32;
      #line 805 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"tx_drop_ip_%d\t\t\t",i);
      #line 805 
      stat_size += 32;
      #line 807 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"tx_marker_resp_pdu_frms_%d\t\t",i);
      #line 807 
      stat_size += 32;
      #line 809 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"tx_xgmii_char2_match_%d\t\t",i);
      #line 809 
      stat_size += 32;
      #line 811 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"tx_xgmii_char1_match_%d\t\t",i);
      #line 811 
      stat_size += 32;
      #line 813 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"tx_xgmii_column2_match_%d\t\t",i);
      #line 813 
      stat_size += 32;
      #line 815 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"tx_xgmii_column1_match_%d\t\t",i);
      #line 815 
      stat_size += 32;
      #line 817 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"tx_any_err_frms_%d\t\t\t",i);
      #line 817 
      stat_size += 32;
      #line 819 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"tx_drop_frms_%d\t\t\t",i);
      #line 819 
      stat_size += 32;
      #line 821 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"rx_ttl_frms_%d\t\t\t",i);
      #line 821 
      stat_size += 32;
      #line 823 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"rx_vld_frms_%d\t\t\t",i);
      #line 823 
      stat_size += 32;
      #line 825 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"rx_offload_frms_%d\t\t\t",i);
      #line 825 
      stat_size += 32;
      #line 827 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"rx_ttl_octects_%d\t\t\t",i);
      #line 827 
      stat_size += 32;
      #line 829 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"rx_data_octects_%d\t\t\t",i);
      #line 829 
      stat_size += 32;
      #line 831 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"rx_offload_octects_%d\t\t",i);
      #line 831 
      stat_size += 32;
      #line 833 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"rx_vld_mcast_frms_%d\t\t",i);
      #line 833 
      stat_size += 32;
      #line 835 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"rx_vld_bcast_frms_%d\t\t",i);
      #line 835 
      stat_size += 32;
      #line 837 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"rx_accepted_ucast_frms_%d\t\t",i);
      #line 837 
      stat_size += 32;
      #line 839 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"rx_accepted_nucast_frms_%d\t\t",i);
      #line 839 
      stat_size += 32;
      #line 841 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"rx_tagged_frms_%d\t\t\t",i);
      #line 841 
      stat_size += 32;
      #line 843 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"rx_long_frms_%d\t\t\t",i);
      #line 843 
      stat_size += 32;
      #line 845 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"rx_usized_frms_%d\t\t\t",i);
      #line 845 
      stat_size += 32;
      #line 847 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"rx_osized_frms_%d\t\t\t",i);
      #line 847 
      stat_size += 32;
      #line 849 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"rx_frag_frms_%d\t\t\t",i);
      #line 849 
      stat_size += 32;
      #line 851 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"rx_jabber_frms_%d\t\t\t",i);
      #line 851 
      stat_size += 32;
      #line 853 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"rx_ttl_64_frms_%d\t\t\t",i);
      #line 853 
      stat_size += 32;
      #line 855 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"rx_ttl_65_127_frms_%d\t\t",i);
      #line 855 
      stat_size += 32;
      #line 857 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"rx_ttl_128_255_frms_%d\t\t",i);
      #line 857 
      stat_size += 32;
      #line 859 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"rx_ttl_256_511_frms_%d\t\t",i);
      #line 859 
      stat_size += 32;
      #line 861 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"rx_ttl_512_1023_frms_%d\t\t",i);
      #line 861 
      stat_size += 32;
      #line 863 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"rx_ttl_1024_1518_frms_%d\t\t",i);
      #line 863 
      stat_size += 32;
      #line 865 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"rx_ttl_1519_4095_frms_%d\t\t",i);
      #line 865 
      stat_size += 32;
      #line 867 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"rx_ttl_4096_8191_frms_%d\t\t",i);
      #line 867 
      stat_size += 32;
      #line 869 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"rx_ttl_8192_max_frms_%d\t\t",i);
      #line 869 
      stat_size += 32;
      #line 871 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"rx_ttl_gt_max_frms_%d\t\t",i);
      #line 871 
      stat_size += 32;
      #line 873 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"rx_ip_%d\t\t\t\t",i);
      #line 873 
      stat_size += 32;
      #line 875 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"rx_accepted_ip_%d\t\t\t",i);
      #line 875 
      stat_size += 32;
      #line 877 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"rx_ip_octets_%d\t\t\t",i);
      #line 877 
      stat_size += 32;
      #line 879 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"rx_err_ip_%d\t\t\t",i);
      #line 879 
      stat_size += 32;
      #line 881 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"rx_icmp_%d\t\t\t\t",i);
      #line 881 
      stat_size += 32;
      #line 883 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"rx_tcp_%d\t\t\t\t",i);
      #line 883 
      stat_size += 32;
      #line 885 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"rx_udp_%d\t\t\t\t",i);
      #line 885 
      stat_size += 32;
      #line 887 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"rx_err_tcp_%d\t\t\t",i);
      #line 887 
      stat_size += 32;
      #line 889 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"rx_pause_count_%d\t\t\t",i);
      #line 889 
      stat_size += 32;
      #line 891 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"rx_pause_ctrl_frms_%d\t\t",i);
      #line 891 
      stat_size += 32;
      #line 893 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"rx_unsup_ctrl_frms_%d\t\t",i);
      #line 893 
      stat_size += 32;
      #line 895 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"rx_fcs_err_frms_%d\t\t\t",i);
      #line 895 
      stat_size += 32;
      #line 897 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"rx_in_rng_len_err_frms_%d\t\t",i);
      #line 897 
      stat_size += 32;
      #line 899 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"rx_out_rng_len_err_frms_%d\t\t",i);
      #line 899 
      stat_size += 32;
      #line 901 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"rx_drop_frms_%d\t\t\t",i);
      #line 901 
      stat_size += 32;
      #line 903 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"rx_discard_frms_%d\t\t\t",i);
      #line 903 
      stat_size += 32;
      #line 905 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"rx_drop_ip_%d\t\t\t",i);
      #line 905 
      stat_size += 32;
      #line 907 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"rx_drop_udp_%d\t\t\t",i);
      #line 907 
      stat_size += 32;
      #line 909 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"rx_marker_pdu_frms_%d\t\t",i);
      #line 909 
      stat_size += 32;
      #line 911 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"rx_lacpdu_frms_%d\t\t\t",i);
      #line 911 
      stat_size += 32;
      #line 913 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"rx_unknown_pdu_frms_%d\t\t",i);
      #line 913 
      stat_size += 32;
      #line 915 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"rx_marker_resp_pdu_frms_%d\t\t",i);
      #line 915 
      stat_size += 32;
      #line 917 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"rx_fcs_discard_%d\t\t\t",i);
      #line 917 
      stat_size += 32;
      #line 919 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"rx_illegal_pdu_frms_%d\t\t",i);
      #line 919 
      stat_size += 32;
      #line 921 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"rx_switch_discard_%d\t\t",i);
      #line 921 
      stat_size += 32;
      #line 923 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"rx_len_discard_%d\t\t\t",i);
      #line 923 
      stat_size += 32;
      #line 925 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"rx_rpa_discard_%d\t\t\t",i);
      #line 925 
      stat_size += 32;
      #line 927 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"rx_l2_mgmt_discard_%d\t\t",i);
      #line 927 
      stat_size += 32;
      #line 929 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"rx_rts_discard_%d\t\t\t",i);
      #line 929 
      stat_size += 32;
      #line 931 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"rx_trash_discard_%d\t\t\t",i);
      #line 931 
      stat_size += 32;
      #line 933 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"rx_buff_full_discard_%d\t\t",i);
      #line 933 
      stat_size += 32;
      #line 935 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"rx_red_discard_%d\t\t\t",i);
      #line 935 
      stat_size += 32;
      #line 937 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"rx_xgmii_ctrl_err_cnt_%d\t\t",i);
      #line 937 
      stat_size += 32;
      #line 939 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"rx_xgmii_data_err_cnt_%d\t\t",i);
      #line 939 
      stat_size += 32;
      #line 941 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"rx_xgmii_char1_match_%d\t\t",i);
      #line 941 
      stat_size += 32;
      #line 943 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"rx_xgmii_err_sym_%d\t\t\t",i);
      #line 943 
      stat_size += 32;
      #line 945 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"rx_xgmii_column1_match_%d\t\t",i);
      #line 945 
      stat_size += 32;
      #line 947 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"rx_xgmii_char2_match_%d\t\t",i);
      #line 947 
      stat_size += 32;
      #line 949 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"rx_local_fault_%d\t\t\t",i);
      #line 949 
      stat_size += 32;
      #line 951 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"rx_xgmii_column2_match_%d\t\t",i);
      #line 951 
      stat_size += 32;
      #line 953 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"rx_jettison_%d\t\t\t",i);
      #line 953 
      stat_size += 32;
      #line 955 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"rx_remote_fault_%d\t\t\t",i);
      #line 955 
      stat_size += 32;
      #line 768 
      i ++;
    }
    #line 959 
    snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"\n SOFTWARE STATISTICS%s\t\t\t",(char *)"");
    #line 959 
    stat_size += 32;
    #line 961 
    i = 0;
    #line 961 
    while (vdev->no_of_vpath > i) {
      #line 962 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"soft_reset_cnt_%d\t\t\t",i);
      #line 962 
      stat_size += 32;
      #line 964 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"unknown_alarms_%d\t\t\t",i);
      #line 964 
      stat_size += 32;
      #line 966 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"network_sustained_fault_%d\t\t",i);
      #line 966 
      stat_size += 32;
      #line 968 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"network_sustained_ok_%d\t\t",i);
      #line 968 
      stat_size += 32;
      #line 970 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"kdfcctl_fifo0_overwrite_%d\t\t",i);
      #line 970 
      stat_size += 32;
      #line 972 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"kdfcctl_fifo0_poison_%d\t\t",i);
      #line 972 
      stat_size += 32;
      #line 974 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"kdfcctl_fifo0_dma_error_%d\t\t",i);
      #line 974 
      stat_size += 32;
      #line 976 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"dblgen_fifo0_overflow_%d\t\t",i);
      #line 976 
      stat_size += 32;
      #line 978 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"statsb_pif_chain_error_%d\t\t",i);
      #line 978 
      stat_size += 32;
      #line 980 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"statsb_drop_timeout_%d\t\t",i);
      #line 980 
      stat_size += 32;
      #line 982 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"target_illegal_access_%d\t\t",i);
      #line 982 
      stat_size += 32;
      #line 984 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"ini_serr_det_%d\t\t\t",i);
      #line 984 
      stat_size += 32;
      #line 986 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"prc_ring_bumps_%d\t\t\t",i);
      #line 986 
      stat_size += 32;
      #line 988 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"prc_rxdcm_sc_err_%d\t\t\t",i);
      #line 988 
      stat_size += 32;
      #line 990 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"prc_rxdcm_sc_abort_%d\t\t",i);
      #line 990 
      stat_size += 32;
      #line 992 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"prc_quanta_size_err_%d\t\t",i);
      #line 992 
      stat_size += 32;
      #line 994 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"ring_full_cnt_%d\t\t\t",i);
      #line 994 
      stat_size += 32;
      #line 996 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"ring_usage_cnt_%d\t\t\t",i);
      #line 996 
      stat_size += 32;
      #line 998 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"ring_usage_max_%d\t\t\t",i);
      #line 998 
      stat_size += 32;
      #line 1000 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"ring_reserve_free_swaps_cnt_%d\t",i);
      #line 1000 
      stat_size += 32;
      #line 1002 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"ring_total_compl_cnt_%d\t\t",i);
      #line 1002 
      stat_size += 32;
      #line 1004 
      j = 0;
      #line 1004 
      while (j <= 15) {
        #line 1005 
        snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"rxd_t_code_err_cnt%d_%d\t\t",j,i);
        #line 1005 
        stat_size += 32;
        #line 1004 
        j ++;
      }
      #line 1007 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"fifo_full_cnt_%d\t\t\t",i);
      #line 1007 
      stat_size += 32;
      #line 1009 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"fifo_usage_cnt_%d\t\t\t",i);
      #line 1009 
      stat_size += 32;
      #line 1011 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"fifo_usage_max_%d\t\t\t",i);
      #line 1011 
      stat_size += 32;
      #line 1013 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"fifo_reserve_free_swaps_cnt_%d\t",i);
      #line 1013 
      stat_size += 32;
      #line 1015 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"fifo_total_compl_cnt_%d\t\t",i);
      #line 1015 
      stat_size += 32;
      #line 1017 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"fifo_total_posts_%d\t\t\t",i);
      #line 1017 
      stat_size += 32;
      #line 1019 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"fifo_total_buffers_%d\t\t",i);
      #line 1019 
      stat_size += 32;
      #line 1021 
      j = 0;
      #line 1021 
      while (j <= 15) {
        #line 1022 
        snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"txd_t_code_err_cnt%d_%d\t\t",j,i);
        #line 1022 
        stat_size += 32;
        #line 1021 
        j ++;
      }
      #line 961 
      i ++;
    }
    #line 1026 
    snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"\n HARDWARE STATISTICS%s\t\t\t",(char *)"");
    #line 1026 
    stat_size += 32;
    #line 1028 
    i = 0;
    #line 1028 
    while (vdev->no_of_vpath > i) {
      #line 1029 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"ini_num_mwr_sent_%d\t\t\t",i);
      #line 1029 
      stat_size += 32;
      #line 1031 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"ini_num_mrd_sent_%d\t\t\t",i);
      #line 1031 
      stat_size += 32;
      #line 1033 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"ini_num_cpl_rcvd_%d\t\t\t",i);
      #line 1033 
      stat_size += 32;
      #line 1035 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"ini_num_mwr_byte_sent_%d\t\t",i);
      #line 1035 
      stat_size += 32;
      #line 1037 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"ini_num_cpl_byte_rcvd_%d\t\t",i);
      #line 1037 
      stat_size += 32;
      #line 1039 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"wrcrdtarb_xoff_%d\t\t\t",i);
      #line 1039 
      stat_size += 32;
      #line 1041 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"rdcrdtarb_xoff_%d\t\t\t",i);
      #line 1041 
      stat_size += 32;
      #line 1043 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"vpath_genstats_count0_%d\t\t",i);
      #line 1043 
      stat_size += 32;
      #line 1045 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"vpath_genstats_count1_%d\t\t",i);
      #line 1045 
      stat_size += 32;
      #line 1047 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"vpath_genstats_count2_%d\t\t",i);
      #line 1047 
      stat_size += 32;
      #line 1049 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"vpath_genstats_count3_%d\t\t",i);
      #line 1049 
      stat_size += 32;
      #line 1051 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"vpath_genstats_count4_%d\t\t",i);
      #line 1051 
      stat_size += 32;
      #line 1053 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"vpath_genstats_count5_%d\t\t",i);
      #line 1053 
      stat_size += 32;
      #line 1055 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"prog_event_vnum0_%d\t\t\t",i);
      #line 1055 
      stat_size += 32;
      #line 1057 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"prog_event_vnum1_%d\t\t\t",i);
      #line 1057 
      stat_size += 32;
      #line 1059 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"prog_event_vnum2_%d\t\t\t",i);
      #line 1059 
      stat_size += 32;
      #line 1061 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"prog_event_vnum3_%d\t\t\t",i);
      #line 1061 
      stat_size += 32;
      #line 1063 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"rx_multi_cast_frame_discard_%d\t",i);
      #line 1063 
      stat_size += 32;
      #line 1065 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"rx_frm_transferred_%d\t\t",i);
      #line 1065 
      stat_size += 32;
      #line 1067 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"rxd_returned_%d\t\t\t",i);
      #line 1067 
      stat_size += 32;
      #line 1069 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"rx_mpa_len_fail_frms_%d\t\t",i);
      #line 1069 
      stat_size += 32;
      #line 1071 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"rx_mpa_mrk_fail_frms_%d\t\t",i);
      #line 1071 
      stat_size += 32;
      #line 1073 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"rx_mpa_crc_fail_frms_%d\t\t",i);
      #line 1073 
      stat_size += 32;
      #line 1075 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"rx_permitted_frms_%d\t\t",i);
      #line 1075 
      stat_size += 32;
      #line 1077 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"rx_vp_reset_discarded_frms_%d\t",i);
      #line 1077 
      stat_size += 32;
      #line 1079 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"rx_wol_frms_%d\t\t\t",i);
      #line 1079 
      stat_size += 32;
      #line 1081 
      snprintf((char *)(data + (unsigned long)stat_size),32UL,(char *)"tx_vp_reset_discarded_frms_%d\t",i);
      #line 1081 
      stat_size += 32;
      #line 1028 
      i ++;
    }
    #line 1085 
    memcpy((void *)(data + (unsigned long)stat_size),(void *)(& ethtool_driver_stats_keys),512UL);
  }
  #line 1087 
  return;
}

#line 1090  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-ethtool.c"
static int vxge_ethtool_get_regs_len(struct net_device *dev)
{
  #line 1092 
  struct vxgedev *vdev = netdev_priv(dev);
  #line 1094 
  return (int)((unsigned long)vdev->no_of_vpath * (unsigned long)9800U);
}

#line 1097  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-ethtool.c"
static int vxge_ethtool_get_sset_count(struct net_device *dev, int sset)
{
  #line 1099 
  struct vxgedev *vdev = netdev_priv(dev);
  #line 1101 
  switch (sset) {
    #line 1102 
    case 1: 
            #line 1102 
    ;
    #line 1109 
    return (int)((unsigned int)((((((vdev->no_of_vpath * 27 + 5) + vdev->max_config_port * 13) + vdev->max_config_port * 94) + vdev->no_of_vpath * 19) + vdev->no_of_vpath * 42) + vdev->no_of_vpath * 60) + 16U);
    #line 1111 
    default: 
             #line 1111 
    ;
    #line 1112 
    return -95;
  }
}

#line 1116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-ethtool.c"
static int vxge_fw_flash(struct net_device *dev, struct ethtool_flash *parms)
{
  #line 1118 
  struct vxgedev *vdev = netdev_priv(dev);
  #line 1120 
  if (vdev->max_vpath_supported != 17) {
    #line 1121 
    printk((char *)"\001");
    #line 1123 
    return -22;
  }
  #line 1126 
  if ((int)netif_running(dev) != 0) {
    #line 1127 
    printk((char *)"\001",(char *)(& dev->name));
    #line 1129 
    return -16;
  }
  #line 1132 
  return vxge_fw_upgrade(vdev,(char *)(& parms->data),1);
}

#line 1135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-ethtool.c"
static struct ethtool_ops vxge_ethtool_ops = {.get_drvinfo = & vxge_ethtool_gdrvinfo, .get_regs_len = & vxge_ethtool_get_regs_len, .get_regs = & vxge_ethtool_gregs, .get_link = & ethtool_op_get_link, .get_pauseparam = & vxge_ethtool_getpause_data, .set_pauseparam = & vxge_ethtool_setpause_data, .get_strings = & vxge_ethtool_get_strings, .set_phys_id = & vxge_ethtool_idnic, .get_ethtool_stats = & vxge_get_ethtool_stats, .get_sset_count = & vxge_ethtool_get_sset_count, .flash_device = & vxge_fw_flash, .get_link_ksettings = & vxge_ethtool_get_link_ksettings, .set_link_ksettings = & vxge_ethtool_set_link_ksettings};
#line 1151  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-ethtool.c"
void vxge_initialize_ethtool_ops(struct net_device *ndev)
{
  #line 1153 
  ndev->ethtool_ops = & vxge_ethtool_ops;
  #line 1154 
  return;
}

#line 108  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/0/concurrency safety/weaver/vxge-ethtool.i.aux"
void emg_wrapper_vxge_ethtool_gdrvinfo(struct net_device *arg0, struct ethtool_drvinfo *arg1)
{
  #line 109 
  vxge_ethtool_gdrvinfo(arg0,arg1);
  #line 110 
  return;
}

#line 113  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/0/concurrency safety/weaver/vxge-ethtool.i.aux"
int emg_wrapper_vxge_ethtool_get_link_ksettings(struct net_device *arg0, struct ethtool_link_ksettings *arg1)
{
  #line 114 
  return vxge_ethtool_get_link_ksettings(arg0,arg1);
}

#line 118  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/0/concurrency safety/weaver/vxge-ethtool.i.aux"
int emg_wrapper_vxge_ethtool_get_regs_len(struct net_device *arg0)
{
  #line 119 
  return vxge_ethtool_get_regs_len(arg0);
}

#line 123  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/0/concurrency safety/weaver/vxge-ethtool.i.aux"
int emg_wrapper_vxge_ethtool_get_sset_count(struct net_device *arg0, int arg1)
{
  #line 124 
  return vxge_ethtool_get_sset_count(arg0,arg1);
}

#line 128  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/0/concurrency safety/weaver/vxge-ethtool.i.aux"
void emg_wrapper_vxge_ethtool_get_strings(struct net_device *arg0, unsigned int arg1, unsigned char *arg2)
{
  #line 129 
  vxge_ethtool_get_strings(arg0,arg1,arg2);
  #line 130 
  return;
}

#line 133  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/0/concurrency safety/weaver/vxge-ethtool.i.aux"
void emg_wrapper_vxge_ethtool_getpause_data(struct net_device *arg0, struct ethtool_pauseparam *arg1)
{
  #line 134 
  vxge_ethtool_getpause_data(arg0,arg1);
  #line 135 
  return;
}

#line 138  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/0/concurrency safety/weaver/vxge-ethtool.i.aux"
void emg_wrapper_vxge_ethtool_gregs(struct net_device *arg0, struct ethtool_regs *arg1, void *arg2)
{
  #line 139 
  vxge_ethtool_gregs(arg0,arg1,arg2);
  #line 140 
  return;
}

#line 143  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/0/concurrency safety/weaver/vxge-ethtool.i.aux"
int emg_wrapper_vxge_ethtool_idnic(struct net_device *arg0, enum ethtool_phys_id_state arg1)
{
  #line 144 
  return vxge_ethtool_idnic(arg0,arg1);
}

#line 148  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/0/concurrency safety/weaver/vxge-ethtool.i.aux"
int emg_wrapper_vxge_ethtool_set_link_ksettings(struct net_device *arg0, struct ethtool_link_ksettings *arg1)
{
  #line 149 
  return vxge_ethtool_set_link_ksettings(arg0,arg1);
}

#line 153  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/0/concurrency safety/weaver/vxge-ethtool.i.aux"
int emg_wrapper_vxge_ethtool_setpause_data(struct net_device *arg0, struct ethtool_pauseparam *arg1)
{
  #line 154 
  return vxge_ethtool_setpause_data(arg0,arg1);
}

#line 158  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/0/concurrency safety/weaver/vxge-ethtool.i.aux"
int emg_wrapper_vxge_fw_flash(struct net_device *arg0, struct ethtool_flash *arg1)
{
  #line 159 
  return vxge_fw_flash(arg0,arg1);
}

#line 163  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/0/concurrency safety/weaver/vxge-ethtool.i.aux"
void emg_wrapper_vxge_get_ethtool_stats(struct net_device *arg0, struct ethtool_stats *arg1, unsigned long long *arg2)
{
  #line 164 
  vxge_get_ethtool_stats(arg0,arg1,arg2);
  #line 165 
  return;
}

#line 260  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/0/concurrency safety/weaver/vxge-ethtool.i.aux"
static void cif_bitmap_zero(unsigned long *dst, unsigned int nbits)
{
  #line 263 
  ldv_bitmap_zero(dst,nbits);
  #line 264 
  return;
}

#line 420  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/0/concurrency safety/weaver/vxge-ethtool.i.aux"
static void *kzalloc_0(size_t size, gfp_t flags)
{
  #line 423 
  return ldv_kzalloc(size,flags);
}

/* compiler builtin: 
   unsigned long __builtin_bswap64(unsigned long);   */
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
#line 135  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/0/concurrency safety/weaver/vxge-config.i.aux"
static void INIT_LIST_HEAD_0(struct list_head *list);
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_add_0(struct list_head *new, struct list_head *prev, struct list_head *next)
{
  #line 60 
  if (! __list_add_valid(new,prev,next)) 
                                         #line 61 
                                         return;
  #line 63 
  next->prev = new;
  #line 64 
  new->next = next;
  #line 65 
  new->prev = prev;
  {
    #line 67 
    union __anonunion___u_2416 __u = {.__val = new};
    #line 66 
    __write_once_size((void *)(& prev->next),(void *)(& __u.__c),8);
    #line 66 
    struct list_head *tmp_2 = __u.__val;
  }
  #line 68 
  return;
}

#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_add_0(struct list_head *new, struct list_head *head)
{
  #line 79 
  __list_add_0(new,head,head->next);
  #line 80 
  return;
}

#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_del_0(struct list_head *prev, struct list_head *next)
{
  #line 97 
  next->prev = prev;
  {
    #line 107 
    union __anonunion___u_2418 __u = {.__val = next};
    #line 106 
    __write_once_size((void *)(& prev->next),(void *)(& __u.__c),8);
    #line 106 
    struct list_head *tmp = __u.__val;
  }
  #line 108 
  return;
}

#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_del_entry_0(struct list_head *entry)
{
  #line 131 
  if (! __list_del_entry_valid(entry)) 
                                       #line 132 
                                       return;
  #line 134 
  __list_del_0(entry->prev,entry->next);
  #line 135 
  return;
}

#line 137  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_del_0(struct list_head *entry)
{
  #line 139 
  __list_del_entry_0(entry);
  #line 140 
  entry->next = (struct list_head *)(-2401263026318606080);
  #line 141 
  entry->prev = (struct list_head *)(-2401263026318606046);
  #line 142 
  return;
}

#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static int list_empty_0(struct list_head *head)
{
  #line 269 
  union __anonunion___u_2420 __u;
  #line 268 
  __read_once_size((void *)(& head->next),(void *)(& __u.__c),8);
  #line 268 
  ;
  #line 268 
  return (__u.__val) == head;
}

#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/preempt.h"
__inline static int preempt_count(void)
{
  #line 26 
  int pfo_ret__;
  #line 26 
  switch (4UL) {
    #line 26 
    case (unsigned long)1: 
                           #line 26 
    ;
    #line 27 
    ldv_inline_asm();
    #line 26 
    break;
    #line 26 
    case (unsigned long)2: 
                           #line 26 
    ;
    #line 27 
    ldv_inline_asm();
    #line 26 
    break;
    #line 26 
    case (unsigned long)4: 
                           #line 26 
    ;
    #line 27 
    ldv_inline_asm();
    #line 26 
    break;
    #line 26 
    case (unsigned long)8: 
                           #line 26 
    ;
    #line 27 
    ldv_inline_asm();
    #line 26 
    break;
    #line 26 
    default: 
             #line 26 
    ;
    #line 26 
    __bad_percpu_size();
  }
  #line 26 
  return pfo_ret__ & 2147483647;
}

#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 95 
void __raw_spin_lock_init(raw_spinlock_t *, char *, struct lock_class_key *);
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_api_smp.h"
#line 22 
void _raw_spin_lock(raw_spinlock_t *);
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
__inline static raw_spinlock_t *spinlock_check(spinlock_t *lock)
{
  #line 327 
  return & lock->__anonCompField_spinlock_25.rlock;
}

#line 336  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock(spinlock_t *lock)
{
  #line 338 
  _raw_spin_lock(& lock->__anonCompField_spinlock_25.rlock);
  #line 339 
  return;
}

#line 340 
#line 659  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/0/concurrency safety/weaver/vxge-config.i.aux"
static void cif_spin_lock_lock_of___vxge_hw_virtualpath(spinlock_t *lock);
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_0(spinlock_t *lock)
{
  #line 378 
  _raw_spin_unlock(& lock->__anonCompField_spinlock_25.rlock);
  #line 379 
  return;
}

#line 380 
#line 668  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/0/concurrency safety/weaver/vxge-config.i.aux"
static void cif_spin_unlock_lock_of___vxge_hw_virtualpath(spinlock_t *lock);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 24 
void *ldv_kmalloc(size_t size, gfp_t flags);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/vmalloc.h"
#line 21 
void *ldv_vmalloc(unsigned long size);
#line 22 
#line 22 
void *ldv_vzalloc(unsigned long size);
#line 23 
#line 23 
void ldv_vfree(void *addr);
#line 257  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/overflow.h"
#line 257 
extern int ( /* missing proto */ __builtin_mul_overflow)(unsigned long x_0, unsigned long x_1, size_t *x_2);
#line 253  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/overflow.h"
__inline static size_t array_size(size_t a, size_t b)
{
  #line 257 
  size_t __a;
  #line 257 
  size_t __b;
  #line 257 
  size_t *__d;
  #line 255 
  size_t bytes;
  {
    #line 257 
    __a = a;
    #line 257 
    __b = b;
    #line 257 
    __d = & bytes;
    #line 257 
    int tmp = & __a == __d;
    }
  #line 257 
  if (__builtin_mul_overflow(__a,__b,__d) != 0) 
                                                #line 258 
                                                return 18446744073709551615UL;
  #line 260 
  return bytes;
}

#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmalloc.h"
#line 691  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/0/concurrency safety/weaver/vxge-config.i.aux"
static void *cif_vmalloc(unsigned long size);
#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmalloc.h"
#line 677  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/0/concurrency safety/weaver/vxge-config.i.aux"
static void *cif_vzalloc(unsigned long size);
#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmalloc.h"
#line 684  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/0/concurrency safety/weaver/vxge-config.i.aux"
static void cif_vfree(void *addr);
#line 542  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 386  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/0/concurrency safety/weaver/vxge-config.i.aux"
static void *kmalloc(size_t size, gfp_t flags);
#line 607  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 400  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/0/concurrency safety/weaver/vxge-config.i.aux"
static void *kcalloc_0(size_t n, size_t size, gfp_t flags);
#line 668  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 421  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/0/concurrency safety/weaver/vxge-config.i.aux"
static void *kzalloc_1(size_t size, gfp_t flags);
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/delay.h"
#line 11 
void __const_udelay(unsigned long);
#line 1087  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
#line 1087 
int pci_write_config_word(struct pci_dev *, int, u16);
#line 1090 
#line 1090 
int pcie_capability_read_word(struct pci_dev *, int, u16 *);
#line 1219 
#line 1219 
int pci_save_state(struct pci_dev *);
#line 1481  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.h"
__inline static u32 vxge_hw_ring_rxd_size_get(u32 buf_mode)
{
  #line 1483 
  return 32U;
}

#line 1492  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.h"
__inline static u32 vxge_hw_ring_rxds_per_block_get(u32 buf_mode)
{
  #line 1494 
  return 127U;
}

#line 1897  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.h"
__inline static void *vxge_os_dma_malloc(struct pci_dev *pdev, unsigned long size, struct pci_dev **p_dmah, struct pci_dev **p_dma_acch)
{
  #line 1902 
  gfp_t flags;
  #line 1903 
  void *vaddr;
  #line 1904 
  unsigned long misaligned = 0UL;
  #line 1905 
  int realloc_flag = 0;
  #line 1906 
  *p_dmah = ((struct pci_dev *)0);
  #line 1906 
  *p_dma_acch = ((struct pci_dev *)0);
  #line 1908 
  if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                           #line 1909 
                                                           flags = 2593U; else 
                                                                    #line 1911 
                                                                    flags = 3265U;
  #line 1912 
  realloc: 
           #line 1912 
  ;
  #line 1913 
  vaddr = kmalloc(size,flags);
  #line 1914 
  if (vaddr == (void *)0) 
                          #line 1915 
                          return vaddr;
  #line 1916 
  misaligned = (unsigned long)(128ULL - ((unsigned long long)vaddr & 127ULL)) & 127UL;
  #line 1918 
  if (realloc_flag != 0) 
                         #line 1919 
                         goto out;
  #line 1921 
  if (misaligned != 0UL) {
    #line 1925 
    kfree(vaddr);
    #line 1926 
    size += 128UL;
    #line 1927 
    realloc_flag = 1;
    #line 1928 
    goto realloc;
  }
  #line 1930 
  out: 
       #line 1930 
  ;
  #line 1931 
  *((unsigned long *)p_dma_acch) = misaligned;
  #line 1932 
  vaddr = (void *)((u8 *)vaddr + misaligned);
  #line 1933 
  return vaddr;
}

#line 1936  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.h"
__inline static void vxge_os_dma_free(struct pci_dev *pdev, void *vaddr, struct pci_dev **p_dma_acch)
{
  #line 1939 
  unsigned long misaligned = *((unsigned long *)p_dma_acch);
  #line 1940 
  u8 *tmp = (u8 *)vaddr;
  #line 1941 
  tmp += - misaligned;
  #line 1942 
  kfree((void *)tmp);
  #line 1943 
  return;
}

#line 1949  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.h"
__inline static void *__vxge_hw_mempool_item_priv(struct vxge_hw_mempool *mempool, u32 memblock_idx, void *item, u32 *memblock_item_idx)
{
  #line 1955 
  ptrdiff_t offset;
  #line 1956 
  void *memblock = *(mempool->memblocks_arr + (unsigned long)memblock_idx);
  #line 1959 
  offset = (long)((unsigned int)((u8 *)item - (u8 *)memblock));
  #line 1962 
  *memblock_item_idx = (unsigned int)offset / mempool->item_size;
  #line 1965 
  return (void *)((u8 *)*(mempool->memblocks_priv_arr + (unsigned long)memblock_idx) + (unsigned long)(*memblock_item_idx * mempool->items_priv_size));
}

#line 2019  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.h"
__inline static void __vxge_hw_pio_mem_write32_lower(u32 val, void *addr)
{
  #line 2021 
  writel(val,addr);
  #line 2022 
  return;
}

#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.c"
static void vxge_hw_vpath_set_zero_rx_frm_len(struct vxge_hw_vpath_reg *vp_reg)
{
  #line 36 
  u64 val64;
  #line 38 
  val64 = readq((void *)(& vp_reg->rxmac_vcfg0));
  #line 39 
  val64 &= 13835339530258874367ULL;
  #line 40 
  writeq(val64,(void *)(& vp_reg->rxmac_vcfg0));
  #line 41 
  val64 = readq((void *)(& vp_reg->rxmac_vcfg0));
  #line 42 
  return;
}

#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.c"
int vxge_hw_vpath_wait_receive_idle(struct __vxge_hw_device *hldev, u32 vp_id)
{
  #line 49 
  struct vxge_hw_vpath_reg *vp_reg;
  #line 50 
  struct __vxge_hw_virtualpath *vpath;
  #line 51 
  u64 val64;
  #line 51 
  u64 rxd_count;
  #line 51 
  u64 rxd_spat;
  #line 52 
  int count = 0;
  #line 52 
  int total_count = 0;
  #line 54 
  vpath = & hldev->virtual_paths[vp_id];
  #line 55 
  vp_reg = vpath->vp_reg;
  #line 57 
  vxge_hw_vpath_set_zero_rx_frm_len(vp_reg);
  #line 64 
  val64 = readq((void *)(& vp_reg->prc_cfg6));
  #line 65 
  rxd_spat = ((val64 >> 19) & 511ULL) + 1ULL;
  #line 69 
  rxd_spat *= 2ULL;
  #line 71 
  while (1) {
    #line 72 
    __const_udelay(4295000UL);
    #line 74 
    rxd_count = readq((void *)(& vp_reg->prc_rxd_doorbell));
    #line 79 
    val64 = readq((void *)(& vp_reg->frm_in_progress_cnt));
    #line 80 
    if (rxd_count <= rxd_spat || val64 != 0ULL) 
                                                #line 81 
                                                count = 0; else 
                                                                #line 83 
                                                                count ++;
    #line 84 
    total_count ++;
    #line 85 
    if (! (count <= 4 && total_count <= 99)) 
                                             #line 71 
                                             break;
  }
  #line 88 
  if (total_count > 99) 
                        #line 89 
                        printk((char *)"\001",(char *)"vxge_hw_vpath_wait_receive_idle");
  #line 92 
  return total_count;
}

#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.c"
void vxge_hw_device_wait_receive_idle(struct __vxge_hw_device *hldev)
{
  #line 101 
  int i;
  #line 101 
  int total_count = 0;
  #line 103 
  i = 0;
  #line 103 
  while (i <= 16) {
    {
      #line 104 
      if ((hldev->vpaths_deployed & (9223372036854775808ULL >> i)) == 0ULL) 
        #line 105 
        goto __Cont;
      #line 107 
      total_count = vxge_hw_vpath_wait_receive_idle(hldev,(unsigned int)i) + total_count;
      #line 108 
      if (total_count > 99) 
                            #line 109 
                            break;
    }
    #line 103 
    __Cont: 
            #line 103 
    i ++;
  }
  #line 111 
  return;
}

#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.c"
static enum vxge_hw_status __vxge_hw_device_register_poll(void *reg, u64 mask, u32 max_millis)
{
  #line 121 
  u64 val64;
  #line 122 
  u32 i = 0U;
  #line 124 
  __const_udelay(42950UL);
  #line 126 
  while (1) {
    #line 127 
    val64 = readq(reg);
    #line 128 
    if ((val64 & mask) == 0ULL) 
                                #line 129 
                                return VXGE_HW_OK;
    #line 130 
    __const_udelay(429500UL);
    #line 131 
    i ++;
    #line 131 
    if (! (i <= 9U)) 
                     #line 126 
                     break;
  }
  #line 133 
  i = 0U;
  #line 134 
  while (1) {
    #line 135 
    val64 = readq(reg);
    #line 136 
    if ((val64 & mask) == 0ULL) 
                                #line 137 
                                return VXGE_HW_OK;
    #line 138 
    __const_udelay(4295000UL);
    #line 139 
    i ++;
    #line 139 
    ;
    #line 139 
    if (! (i <= max_millis)) 
                             #line 134 
                             break;
  }
  #line 141 
  return VXGE_HW_FAIL;
}

#line 145  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.c"
__inline static enum vxge_hw_status __vxge_hw_pio_mem_write64(u64 val64, void *addr, u64 mask, u32 max_millis)
{
  #line 148 
  __vxge_hw_pio_mem_write32_lower((unsigned int)val64,addr);
  #line 149 
  ldv_inline_asm();
  #line 150 
  __vxge_hw_pio_mem_write32_upper((unsigned int)(val64 >> 32),addr);
  #line 151 
  ldv_inline_asm();
  #line 153 
  return __vxge_hw_device_register_poll(addr,mask,max_millis);
}

#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.c"
static enum vxge_hw_status vxge_hw_vpath_fw_api(struct __vxge_hw_virtualpath *vpath, u32 action, u32 fw_memo, u32 offset, u64 *data0, u64 *data1, u64 *steer_ctrl)
{
  #line 162 
  enum vxge_hw_status status;
  #line 163 
  u64 val64;
  #line 161 
  struct vxge_hw_vpath_reg *vp_reg = vpath->vp_reg;
  #line 164 
  u32 retry = 0U;
  #line 164 
  u32 max_retry = 3U;
  #line 166 
  cif_spin_lock_lock_of___vxge_hw_virtualpath(& vpath->lock);
  #line 167 
  if (vpath->vp_open == 0U) {
    #line 168 
    cif_spin_unlock_lock_of___vxge_hw_virtualpath(& vpath->lock);
    #line 169 
    max_retry = 100U;
  }
  #line 172 
  writeq(*data0,(void *)(& vp_reg->rts_access_steer_data0));
  #line 173 
  writeq(*data1,(void *)(& vp_reg->rts_access_steer_data1));
  #line 174 
  ldv_inline_asm();
  #line 176 
  val64 = (((((unsigned long long)action << 56) | ((unsigned long long)fw_memo << 52)) | ((unsigned long long)offset << 16)) | *steer_ctrl) | 281474976710656ULL;
  #line 182 
  status = __vxge_hw_pio_mem_write64(val64,(void *)(& vp_reg->rts_access_steer_ctrl),281474976710656ULL,1000U);
  #line 195 
  while (1) {
    #line 195 
    if (status != VXGE_HW_OK) {
      #line 195 
      u32 tmp;
      #line 195 
      tmp = retry;
      #line 195 
      retry ++;
      #line 195 
      ;
      #line 195 
      if (! (tmp < max_retry)) 
                               #line 195 
                               break;
    }
    else 
         #line 195 
         break;
    #line 196 
    if (vpath->vp_open == 0U) 
                              #line 197 
                              msleep(20U);
    #line 198 
    status = __vxge_hw_device_register_poll((void *)(& vp_reg->rts_access_steer_ctrl),281474976710656ULL,1000U);
  }
  #line 204 
  if (status != VXGE_HW_OK) 
                            #line 205 
                            goto out;
  #line 207 
  val64 = readq((void *)(& vp_reg->rts_access_steer_ctrl));
  #line 208 
  if ((val64 & 9223372036854775808ULL) != 0ULL) {
    #line 209 
    *data0 = readq((void *)(& vp_reg->rts_access_steer_data0));
    #line 210 
    *data1 = readq((void *)(& vp_reg->rts_access_steer_data1));
    #line 211 
    *steer_ctrl = val64;
  }
  else 
       #line 213 
       status = VXGE_HW_FAIL;
  #line 215 
  out: 
       #line 215 
  ;
  #line 216 
  if (vpath->vp_open != 0U) 
                            #line 217 
                            cif_spin_unlock_lock_of___vxge_hw_virtualpath(& vpath->lock);
  #line 218 
  return status;
}

#line 222  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.c"
enum vxge_hw_status vxge_hw_upgrade_read_version(struct __vxge_hw_device *hldev, u32 *major, u32 *minor, u32 *build)
{
  #line 226 
  struct __vxge_hw_virtualpath *vpath;
  #line 227 
  enum vxge_hw_status status;
  #line 225 
  u64 data0 = 0ULL;
  #line 225 
  u64 data1 = 0ULL;
  #line 225 
  u64 steer_ctrl = 0ULL;
  #line 229 
  vpath = & hldev->virtual_paths[hldev->first_vp_id];
  #line 231 
  status = vxge_hw_vpath_fw_api(vpath,16U,13U,5U,& data0,& data1,& steer_ctrl);
  #line 236 
  if (status != VXGE_HW_OK) 
                            #line 237 
                            return status;
  #line 239 
  *major = (unsigned int)(data0 >> 24) & 255U;
  #line 240 
  *minor = (unsigned int)(data0 >> 16) & 255U;
  #line 241 
  *build = (unsigned int)data0 & 65535U;
  #line 243 
  return status;
}

#line 246  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.c"
enum vxge_hw_status vxge_hw_flash_fw(struct __vxge_hw_device *hldev)
{
  #line 249 
  struct __vxge_hw_virtualpath *vpath;
  #line 250 
  enum vxge_hw_status status;
  #line 251 
  u32 ret;
  #line 248 
  u64 data0 = 0ULL;
  #line 248 
  u64 data1 = 0ULL;
  #line 248 
  u64 steer_ctrl = 0ULL;
  #line 253 
  vpath = & hldev->virtual_paths[hldev->first_vp_id];
  #line 255 
  status = vxge_hw_vpath_fw_api(vpath,16U,13U,4U,& data0,& data1,& steer_ctrl);
  #line 260 
  if (status != VXGE_HW_OK) {
    #line 261 
    printk((char *)"%s: FW upgrade failed",(char *)"vxge_hw_flash_fw");
    #line 262 
    goto exit;
  }
  #line 265 
  ret = (unsigned int)(steer_ctrl >> 56) & 127U;
  #line 266 
  if (ret != 1U) {
    #line 267 
    printk((char *)"%s: FW commit failed with error %d",(char *)"vxge_hw_flash_fw",ret);
    #line 269 
    status = VXGE_HW_FAIL;
  }
  #line 272 
  exit: 
        #line 272 
  ;
  #line 273 
  return status;
}

#line 277  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.c"
enum vxge_hw_status vxge_update_fw_image(struct __vxge_hw_device *hldev, u8 *fwdata, int size)
{
  #line 280 
  struct __vxge_hw_virtualpath *vpath;
  #line 281 
  enum vxge_hw_status status;
  #line 282 
  int ret_code;
  #line 282 
  int sec_code;
  #line 279 
  u64 data0 = 0ULL;
  #line 279 
  u64 data1 = 0ULL;
  #line 279 
  u64 steer_ctrl = 0ULL;
  #line 284 
  vpath = & hldev->virtual_paths[hldev->first_vp_id];
  #line 287 
  status = vxge_hw_vpath_fw_api(vpath,16U,13U,2U,& data0,& data1,& steer_ctrl);
  #line 292 
  if (status != VXGE_HW_OK) {
    #line 293 
    printk((char *)" %s: Upgrade start cmd failed",(char *)"vxge_update_fw_image");
    #line 295 
    return status;
  }
  #line 299 
  while (size > 0) {
    #line 300 
    steer_ctrl = 0ULL;
    #line 303 
    data0 = *((u64 *)fwdata);
    #line 304 
    data1 = *((u64 *)fwdata + 1U);
    #line 306 
    status = vxge_hw_vpath_fw_api(vpath,16U,13U,3U,& data0,& data1,& steer_ctrl);
    #line 311 
    if (status != VXGE_HW_OK) {
      #line 312 
      printk((char *)"%s: Upgrade send failed",(char *)"vxge_update_fw_image");
      #line 314 
      goto out;
    }
    #line 317 
    ret_code = (int)data0 & 255;
    #line 318 
    switch (ret_code) {
      #line 319 
      case 0: 
              #line 319 
      ;
      #line 321 
      break;
      #line 322 
      case 3: 
              #line 322 
      ;
      #line 324 
      fwdata += (data0 >> 8) & 4294967295ULL;
      #line 325 
      break;
      #line 326 
      case 1: 
              #line 326 
      ;
      #line 327 
      goto out;
      #line 328 
      case 2: 
              #line 328 
      ;
      #line 329 
      sec_code = (int)(data0 >> 8) & 255;
      #line 330 
      switch (sec_code) {
        #line 331 
        case 1: 
                #line 331 
        ;
        #line 332 
        case 7: 
                #line 332 
        ;
        #line 333 
        printk((char *)"\001");
        #line 335 
        break;
        #line 336 
        case 3: 
                #line 336 
        ;
        #line 337 
        case 4: 
                #line 337 
        ;
        #line 338 
        case 5: 
                #line 338 
        ;
        #line 339 
        case 6: 
                #line 339 
        ;
        #line 340 
        case 8: 
                #line 340 
        ;
        #line 341 
        printk((char *)"\001");
        #line 342 
        break;
        #line 343 
        case 2: 
                #line 343 
        ;
        #line 344 
        printk((char *)"\001");
        #line 345 
        break;
        #line 346 
        case 10: 
                 #line 346 
        ;
        #line 347 
        printk((char *)"\001");
        #line 348 
        break;
        #line 349 
        case 9: 
                #line 349 
        ;
        #line 350 
        printk((char *)"\001");
        #line 352 
        break;
        #line 353 
        default: 
                 #line 353 
        ;
        #line 354 
        printk((char *)"\001",sec_code);
        #line 356 
        break;
      }
      #line 358 
      status = VXGE_HW_FAIL;
      #line 359 
      goto out;
      #line 360 
      default: 
               #line 360 
      ;
      #line 361 
      printk((char *)"\001",ret_code);
      #line 362 
      status = VXGE_HW_FAIL;
      #line 363 
      goto out;
    }
    #line 366 
    fwdata += 16U;
    #line 299 
    size += -16;
  }
  #line 368 
  out: 
       #line 368 
  ;
  #line 369 
  return status;
}

#line 373  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.c"
enum vxge_hw_status vxge_hw_vpath_eprom_img_ver_get(struct __vxge_hw_device *hldev, struct eprom_image *img)
{
  #line 377 
  struct __vxge_hw_virtualpath *vpath;
  #line 378 
  enum vxge_hw_status status;
  #line 379 
  int i;
  #line 376 
  u64 data0 = 0ULL;
  #line 376 
  u64 data1 = 0ULL;
  #line 376 
  u64 steer_ctrl = 0ULL;
  #line 381 
  vpath = & hldev->virtual_paths[hldev->first_vp_id];
  #line 383 
  i = 0;
  #line 383 
  while (i <= 7) {
    #line 384 
    data0 = (unsigned long long)i << 40;
    #line 385 
    steer_ctrl = 0ULL;
    #line 385 
    data1 = steer_ctrl;
    #line 387 
    status = vxge_hw_vpath_fw_api(vpath,31U,13U,0U,& data0,& data1,& steer_ctrl);
    #line 391 
    if (status != VXGE_HW_OK) 
                              #line 392 
                              break;
    #line 394 
    (img + (unsigned long)i)->is_valid = (unsigned char)(data0 >> 32);
    #line 395 
    (img + (unsigned long)i)->index = (unsigned char)(data0 >> 40);
    #line 396 
    (img + (unsigned long)i)->type = (unsigned char)(data0 >> 16);
    #line 397 
    (img + (unsigned long)i)->version = (unsigned short)data0;
    #line 383 
    i ++;
  }
  #line 400 
  return status;
}

#line 408  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.c"
static void __vxge_hw_channel_free(struct __vxge_hw_channel *channel)
{
  #line 410 
  kfree((void *)channel->work_arr);
  #line 411 
  kfree((void *)channel->free_arr);
  #line 412 
  kfree((void *)channel->reserve_arr);
  #line 413 
  kfree((void *)channel->orig_arr);
  #line 414 
  kfree((void *)channel);
  #line 415 
  return;
}

#line 423  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.c"
static enum vxge_hw_status __vxge_hw_channel_initialize(struct __vxge_hw_channel *channel)
{
  #line 425 
  u32 i;
  #line 426 
  struct __vxge_hw_virtualpath *vpath;
  #line 428 
  vpath = (channel->vph)->vpath;
  #line 430 
  if (channel->reserve_arr != (void **)0 && channel->orig_arr != (void **)0) {
    #line 431 
    i = 0U;
    #line 431 
    while (channel->length > i) {
      #line 432 
      *(channel->orig_arr + (unsigned long)i) = *(channel->reserve_arr + (unsigned long)i);
      #line 431 
      i ++;
    }
  }
  #line 435 
  switch ((unsigned int)channel->type) {
    #line 436 
    case (unsigned int)1: 
                          #line 436 
    ;
    #line 437 
    vpath->fifoh = (struct __vxge_hw_fifo *)channel;
    #line 438 
    channel->stats = & (((struct __vxge_hw_fifo *)channel)->stats)->common_stats;
    #line 440 
    break;
    #line 441 
    case (unsigned int)2: 
                          #line 441 
    ;
    #line 442 
    vpath->ringh = (struct __vxge_hw_ring *)channel;
    #line 443 
    channel->stats = & (((struct __vxge_hw_ring *)channel)->stats)->common_stats;
    #line 445 
    break;
    #line 446 
    default: 
             #line 446 
    ;
    #line 447 
    break;
  }
  #line 450 
  return VXGE_HW_OK;
}

#line 458  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.c"
static enum vxge_hw_status __vxge_hw_channel_reset(struct __vxge_hw_channel *channel)
{
  #line 460 
  u32 i;
  #line 462 
  i = 0U;
  #line 462 
  while (channel->length > i) {
    #line 463 
    if (channel->reserve_arr != (void **)0) 
                                            #line 464 
                                            *(channel->reserve_arr + (unsigned long)i) = *(channel->orig_arr + (unsigned long)i);
    #line 465 
    if (channel->free_arr != (void **)0) 
                                         #line 466 
                                         *(channel->free_arr + (unsigned long)i) = (void *)0;
    #line 467 
    if (channel->work_arr != (void **)0) 
                                         #line 468 
                                         *(channel->work_arr + (unsigned long)i) = (void *)0;
    #line 462 
    i ++;
  }
  #line 470 
  channel->free_ptr = channel->length;
  #line 471 
  channel->reserve_ptr = channel->length;
  #line 472 
  channel->reserve_top = 0U;
  #line 473 
  channel->post_index = 0U;
  #line 474 
  channel->compl_index = 0U;
  #line 476 
  return VXGE_HW_OK;
}

#line 484  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.c"
static void __vxge_hw_device_pci_e_init(struct __vxge_hw_device *hldev)
{
  #line 486 
  u16 cmd = (unsigned short)0U;
  #line 489 
  pci_read_config_word(hldev->pdev,4,& cmd);
  #line 490 
  cmd = (unsigned short)((unsigned int)cmd | 320U);
  #line 491 
  pci_write_config_word(hldev->pdev,4,(unsigned short)((int)cmd));
  #line 493 
  pci_save_state(hldev->pdev);
  #line 494 
  return;
}

#line 501  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.c"
static enum vxge_hw_status __vxge_hw_device_vpath_reset_in_prog_check(u64 *vpath_rst_in_prog)
{
  #line 503 
  enum vxge_hw_status status;
  #line 504 
  status = __vxge_hw_device_register_poll((void *)vpath_rst_in_prog,18446603336221196288ULL,1000U);
  #line 507 
  return status;
}

#line 515  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.c"
static enum vxge_hw_status __vxge_hw_legacy_swapper_set(struct vxge_hw_legacy_reg *legacy_reg)
{
  #line 517 
  u64 val64;
  #line 518 
  enum vxge_hw_status status = 0;
  #line 520 
  val64 = readq((void *)(& legacy_reg->toc_swapper_fb));
  #line 521 
  ldv_inline_asm();
  #line 524 
  switch (val64) {
    #line 525 
    case (u64)(-1985229329): 
                             #line 525 
    ;
    #line 526 
    return status;
    #line 528 
    case (u64)(-425540480): 
                            #line 528 
    ;
    #line 529 
    writeq(18446744073709551615ULL,(void *)(& legacy_reg->pifm_rd_swap_en));
    #line 531 
    writeq(18446744073709551615ULL,(void *)(& legacy_reg->pifm_rd_flip_en));
    #line 533 
    writeq(18446744073709551615ULL,(void *)(& legacy_reg->pifm_wr_swap_en));
    #line 535 
    writeq(18446744073709551615ULL,(void *)(& legacy_reg->pifm_wr_flip_en));
    #line 537 
    break;
    #line 539 
    case (u64)1732584193: 
                          #line 539 
    ;
    #line 540 
    writeq(18446744073709551615ULL,(void *)(& legacy_reg->pifm_rd_swap_en));
    #line 542 
    writeq(18446744073709551615ULL,(void *)(& legacy_reg->pifm_wr_swap_en));
    #line 544 
    break;
    #line 546 
    case (u64)(-1848265737): 
                             #line 546 
    ;
    #line 547 
    writeq(18446744073709551615ULL,(void *)(& legacy_reg->pifm_rd_flip_en));
    #line 549 
    writeq(18446744073709551615ULL,(void *)(& legacy_reg->pifm_wr_flip_en));
    #line 551 
    break;
  }
  #line 553 
  ldv_inline_asm();
  #line 556 
  val64 = readq((void *)(& legacy_reg->toc_swapper_fb));
  #line 558 
  if (val64 != 81985529216486895ULL) 
                                     #line 559 
                                     status = VXGE_HW_ERR_SWAPPER_CTRL;
  #line 561 
  return status;
}

#line 570  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.c"
static struct vxge_hw_toc_reg *__vxge_hw_device_toc_get(void *bar0)
{
  #line 572 
  u64 val64;
  #line 574 
  enum vxge_hw_status status;
  #line 573 
  struct vxge_hw_toc_reg *toc = (struct vxge_hw_toc_reg *)0;
  #line 576 
  struct vxge_hw_legacy_reg *legacy_reg = (struct vxge_hw_legacy_reg *)bar0;
  #line 579 
  status = __vxge_hw_legacy_swapper_set(legacy_reg);
  #line 580 
  if (status != VXGE_HW_OK) 
                            #line 581 
                            goto exit;
  #line 583 
  val64 = readq((void *)(& legacy_reg->toc_first_pointer));
  #line 584 
  toc = (struct vxge_hw_toc_reg *)(bar0 + val64);
  #line 585 
  exit: 
        #line 585 
  ;
  #line 586 
  return toc;
}

#line 596  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.c"
static enum vxge_hw_status __vxge_hw_device_reg_addr_get(struct __vxge_hw_device *hldev)
{
  #line 598 
  u64 val64;
  #line 599 
  u32 i;
  #line 600 
  enum vxge_hw_status status = 0;
  #line 602 
  hldev->legacy_reg = (struct vxge_hw_legacy_reg *)hldev->bar0;
  #line 604 
  hldev->toc_reg = __vxge_hw_device_toc_get(hldev->bar0);
  #line 605 
  if (hldev->toc_reg == (struct vxge_hw_toc_reg *)0) {
    #line 606 
    status = VXGE_HW_FAIL;
    #line 607 
    goto exit;
  }
  #line 610 
  val64 = readq((void *)(& (hldev->toc_reg)->toc_common_pointer));
  #line 611 
  hldev->common_reg = (struct vxge_hw_common_reg *)(hldev->bar0 + val64);
  #line 613 
  val64 = readq((void *)(& (hldev->toc_reg)->toc_mrpcim_pointer));
  #line 614 
  hldev->mrpcim_reg = (struct vxge_hw_mrpcim_reg *)(hldev->bar0 + val64);
  #line 616 
  i = 0U;
  #line 616 
  while (i <= 16U) {
    #line 617 
    val64 = readq((void *)(& (hldev->toc_reg)->toc_srpcim_pointer[i]));
    #line 618 
    hldev->srpcim_reg[i] = (struct vxge_hw_srpcim_reg *)(hldev->bar0 + val64);
    #line 616 
    i ++;
  }
  #line 621 
  i = 0U;
  #line 621 
  while (i <= 16U) {
    #line 622 
    val64 = readq((void *)(& (hldev->toc_reg)->toc_vpmgmt_pointer[i]));
    #line 623 
    hldev->vpmgmt_reg[i] = (struct vxge_hw_vpmgmt_reg *)(hldev->bar0 + val64);
    #line 621 
    i ++;
  }
  #line 626 
  i = 0U;
  #line 626 
  while (i <= 16U) {
    #line 627 
    val64 = readq((void *)(& (hldev->toc_reg)->toc_vpath_pointer[i]));
    #line 628 
    hldev->vpath_reg[i] = (struct vxge_hw_vpath_reg *)(hldev->bar0 + val64);
    #line 626 
    i ++;
  }
  #line 631 
  val64 = readq((void *)(& (hldev->toc_reg)->toc_kdfc));
  #line 633 
  switch (val64 & 7ULL) {
    #line 634 
    case (unsigned long long)0: 
                                #line 634 
    ;
    #line 635 
    hldev->kdfc = (u8 *)(hldev->bar0 + (val64 & 18446744073709551608ULL));
    #line 636 
    break;
    #line 637 
    default: 
             #line 637 
    ;
    #line 638 
    break;
  }
  #line 641 
  status = __vxge_hw_device_vpath_reset_in_prog_check(& (hldev->common_reg)->vpath_rst_in_prog);
  #line 643 
  exit: 
        #line 643 
  ;
  #line 644 
  return status;
}

#line 652  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.c"
static u32 __vxge_hw_device_access_rights_get(u32 host_type, u32 func_id)
{
  #line 654 
  u32 access_rights = 1U;
  #line 656 
  switch (host_type) {
    #line 657 
    case (u32)0: 
                 #line 657 
    ;
    #line 658 
    if (func_id == 0U) 
                       #line 659 
                       access_rights |= 6U;
    #line 662 
    break;
    #line 663 
    case (u32)1: 
                 #line 663 
    ;
    #line 664 
    access_rights |= 6U;
    #line 666 
    break;
    #line 667 
    case (u32)2: 
                 #line 667 
    ;
    #line 668 
    access_rights |= 6U;
    #line 670 
    break;
    #line 671 
    case (u32)3: 
                 #line 671 
    ;
    #line 672 
    case (u32)6: 
                 #line 672 
    ;
    #line 673 
    case (u32)4: 
                 #line 673 
    ;
    #line 674 
    break;
    #line 675 
    case (u32)5: 
                 #line 675 
    ;
    #line 676 
    case (u32)7: 
                 #line 676 
    ;
    #line 677 
    access_rights |= 2U;
    #line 678 
    break;
  }
  #line 681 
  return access_rights;
}

#line 689  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.c"
enum vxge_hw_status __vxge_hw_device_is_privilaged(u32 host_type, u32 func_id)
{
  #line 691 
  if ((__vxge_hw_device_access_rights_get(host_type,func_id) & 4U) != 0U) 
    #line 694 
    return VXGE_HW_OK; else 
                            #line 696 
                            return VXGE_HW_ERR_PRIVILEGED_OPERATION;
}

#line 704  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.c"
static u32 __vxge_hw_vpath_func_id_get(struct vxge_hw_vpmgmt_reg *vpmgmt_reg)
{
  #line 706 
  u64 val64;
  #line 708 
  val64 = readq((void *)(& vpmgmt_reg->vpath_to_func_map_cfg1));
  #line 711 
  return (unsigned int)(val64 >> 56) & 31U;
}

#line 718  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.c"
static void __vxge_hw_device_host_info_get(struct __vxge_hw_device *hldev)
{
  #line 720 
  u64 val64;
  #line 721 
  u32 i;
  #line 723 
  val64 = readq((void *)(& (hldev->common_reg)->host_type_assignments));
  #line 725 
  hldev->host_type = (unsigned int)(val64 >> 56) & 7U;
  #line 728 
  hldev->vpath_assignments = readq((void *)(& (hldev->common_reg)->vpath_assignments));
  #line 730 
  i = 0U;
  #line 730 
  while (i <= 16U) {
    #line 731 
    if ((hldev->vpath_assignments & (9223372036854775808ULL >> i)) == 0ULL) 
      #line 732 
      goto __Cont;
    #line 734 
    hldev->func_id = __vxge_hw_vpath_func_id_get(hldev->vpmgmt_reg[i]);
    #line 737 
    hldev->access_rights = __vxge_hw_device_access_rights_get(hldev->host_type,hldev->func_id);
    #line 740 
    hldev->virtual_paths[i].vp_open = 0U;
    #line 741 
    hldev->virtual_paths[i].vp_reg = hldev->vpath_reg[i];
    #line 743 
    hldev->first_vp_id = i;
    #line 744 
    break;
    #line 730 
    __Cont: 
            #line 730 
    i ++;
  }
  #line 746 
  return;
}

#line 753  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.c"
static enum vxge_hw_status __vxge_hw_verify_pci_e_info(struct __vxge_hw_device *hldev)
{
  #line 756 
  u16 lnk;
  #line 755 
  struct pci_dev *dev = hldev->pdev;
  #line 759 
  pcie_capability_read_word(dev,18,& lnk);
  #line 761 
  if (((int)lnk & 15) != 1) 
                            #line 762 
                            return VXGE_HW_ERR_INVALID_PCI_INFO;
  #line 764 
  switch (((int)lnk >> 4) & 63) {
    #line 765 
    case 0: 
            #line 765 
    ;
    #line 766 
    case 1: 
            #line 766 
    ;
    #line 767 
    case 2: 
            #line 767 
    ;
    #line 768 
    case 4: 
            #line 768 
    ;
    #line 769 
    case 8: 
            #line 769 
    ;
    #line 770 
    break;
    #line 771 
    default: 
             #line 771 
    ;
    #line 772 
    return VXGE_HW_ERR_INVALID_PCI_INFO;
  }
  #line 775 
  return VXGE_HW_OK;
}

#line 783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.c"
static enum vxge_hw_status __vxge_hw_device_initialize(struct __vxge_hw_device *hldev)
{
  #line 785 
  enum vxge_hw_status status = 0;
  #line 787 
  if (__vxge_hw_device_is_privilaged(hldev->host_type,hldev->func_id) == VXGE_HW_OK) {
    #line 790 
    status = __vxge_hw_verify_pci_e_info(hldev);
    #line 791 
    if (status != VXGE_HW_OK) 
                              #line 792 
                              goto exit;
  }
  #line 795 
  exit: 
        #line 795 
  ;
  #line 796 
  return status;
}

#line 804  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.c"
static enum vxge_hw_status __vxge_hw_vpath_fw_ver_get(struct __vxge_hw_virtualpath *vpath, struct vxge_hw_device_hw_info *hw_info)
{
  #line 812 
  enum vxge_hw_status status;
  #line 807 
  struct vxge_hw_device_version *fw_version = & hw_info->fw_version;
  #line 808 
  struct vxge_hw_device_date *fw_date = & hw_info->fw_date;
  #line 809 
  struct vxge_hw_device_version *flash_version = & hw_info->flash_version;
  #line 810 
  struct vxge_hw_device_date *flash_date = & hw_info->flash_date;
  #line 811 
  u64 data0 = 0ULL;
  #line 811 
  u64 data1 = 0ULL;
  #line 811 
  u64 steer_ctrl = 0ULL;
  #line 814 
  status = vxge_hw_vpath_fw_api(vpath,0U,13U,0U,& data0,& data1,& steer_ctrl);
  #line 818 
  if (status != VXGE_HW_OK) 
                            #line 819 
                            goto exit;
  #line 821 
  fw_date->day = (unsigned int)(data0 >> 56) & 255U;
  #line 823 
  fw_date->month = (unsigned int)(data0 >> 48) & 255U;
  #line 825 
  fw_date->year = (unsigned int)(data0 >> 32) & 65535U;
  #line 828 
  snprintf((char *)(& fw_date->date),32UL,(char *)"%2.2d/%2.2d/%4.4d",fw_date->month,fw_date->day,fw_date->year);
  #line 831 
  fw_version->major = (unsigned int)(data0 >> 24) & 255U;
  #line 833 
  fw_version->minor = (unsigned int)(data0 >> 16) & 255U;
  #line 835 
  fw_version->build = (unsigned int)data0 & 65535U;
  #line 838 
  snprintf((char *)(& fw_version->version),32UL,(char *)"%d.%d.%d",fw_version->major,fw_version->minor,fw_version->build);
  #line 841 
  flash_date->day = (unsigned int)(data1 >> 56) & 255U;
  #line 843 
  flash_date->month = (unsigned int)(data1 >> 48) & 255U;
  #line 845 
  flash_date->year = (unsigned int)(data1 >> 32) & 65535U;
  #line 848 
  snprintf((char *)(& flash_date->date),32UL,(char *)"%2.2d/%2.2d/%4.4d",flash_date->month,flash_date->day,flash_date->year);
  #line 851 
  flash_version->major = (unsigned int)(data1 >> 24) & 255U;
  #line 853 
  flash_version->minor = (unsigned int)(data1 >> 16) & 255U;
  #line 855 
  flash_version->build = (unsigned int)data1 & 65535U;
  #line 858 
  snprintf((char *)(& flash_version->version),32UL,(char *)"%d.%d.%d",flash_version->major,flash_version->minor,flash_version->build);
  #line 862 
  exit: 
        #line 862 
  ;
  #line 863 
  return status;
}

#line 871  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.c"
static enum vxge_hw_status __vxge_hw_vpath_card_info_get(struct __vxge_hw_virtualpath *vpath, struct vxge_hw_device_hw_info *hw_info)
{
  #line 874 
  enum vxge_hw_status status;
  #line 875 
  u64 data0;
  #line 879 
  u32 i;
  #line 875 
  u64 data1 = 0ULL;
  #line 875 
  u64 steer_ctrl = 0ULL;
  #line 876 
  u8 *serial_number = (u8 *)(& hw_info->serial_number);
  #line 877 
  u8 *part_number = (u8 *)(& hw_info->part_number);
  #line 878 
  u8 *product_desc = (u8 *)(& hw_info->product_desc);
  #line 879 
  u32 j = 0U;
  #line 881 
  data0 = 1ULL;
  #line 883 
  status = vxge_hw_vpath_fw_api(vpath,3U,13U,0U,& data0,& data1,& steer_ctrl);
  #line 887 
  if (status != VXGE_HW_OK) 
                            #line 888 
                            return status;
  #line 890 
  *((u64 *)serial_number) = (u64)__builtin_bswap64((unsigned long)data0);
  #line 891 
  *((u64 *)serial_number + 1U) = (u64)__builtin_bswap64((unsigned long)data1);
  #line 893 
  data0 = 0ULL;
  #line 894 
  steer_ctrl = 0ULL;
  #line 894 
  data1 = steer_ctrl;
  #line 896 
  status = vxge_hw_vpath_fw_api(vpath,3U,13U,0U,& data0,& data1,& steer_ctrl);
  #line 900 
  if (status != VXGE_HW_OK) 
                            #line 901 
                            return status;
  #line 903 
  *((u64 *)part_number) = (u64)__builtin_bswap64((unsigned long)data0);
  #line 904 
  *((u64 *)part_number + 1U) = (u64)__builtin_bswap64((unsigned long)data1);
  #line 906 
  i = 4U;
  #line 906 
  while (i <= 7U) {
    {
      #line 918 
      u32 tmp_3;
      #line 919 
      u32 tmp_5;
      #line 908 
      data0 = (unsigned long long)i;
      #line 909 
      steer_ctrl = 0ULL;
      #line 909 
      data1 = steer_ctrl;
      #line 911 
      status = vxge_hw_vpath_fw_api(vpath,3U,13U,0U,& data0,& data1,& steer_ctrl);
      #line 915 
      if (status != VXGE_HW_OK) 
                                #line 916 
                                return status;
      #line 918 
      tmp_3 = j;
      #line 918 
      j ++;
      #line 918 
      *((u64 *)product_desc + (unsigned long)tmp_3) = (u64)__builtin_bswap64((unsigned long)data0);
      #line 919 
      tmp_5 = j;
      #line 919 
      j ++;
      #line 919 
      *((u64 *)product_desc + (unsigned long)tmp_5) = (u64)__builtin_bswap64((unsigned long)data1);
    }
    #line 907 
    i ++;
  }
  #line 922 
  return status;
}

#line 930  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.c"
static enum vxge_hw_status __vxge_hw_vpath_pci_func_mode_get(struct __vxge_hw_virtualpath *vpath, struct vxge_hw_device_hw_info *hw_info)
{
  #line 933 
  u64 data0;
  #line 934 
  enum vxge_hw_status status;
  #line 933 
  u64 data1 = 0ULL;
  #line 933 
  u64 steer_ctrl = 0ULL;
  #line 936 
  data0 = 0ULL;
  #line 938 
  status = vxge_hw_vpath_fw_api(vpath,29U,13U,0U,& data0,& data1,& steer_ctrl);
  #line 942 
  if (status != VXGE_HW_OK) 
                            #line 943 
                            return status;
  #line 945 
  hw_info->function_mode = data0 & 255ULL;
  #line 946 
  return status;
}

#line 954  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.c"
static enum vxge_hw_status __vxge_hw_vpath_addr_get(struct __vxge_hw_virtualpath *vpath, u8 *macaddr, u8 *macaddr_mask)
{
  #line 959 
  enum vxge_hw_status status;
  #line 960 
  int i;
  #line 957 
  u64 action = 2ULL;
  #line 958 
  u64 data0 = 0ULL;
  #line 958 
  u64 data1 = 0ULL;
  #line 958 
  u64 steer_ctrl = 0ULL;
  #line 962 
  while (1) {
    #line 963 
    status = vxge_hw_vpath_fw_api(vpath,(unsigned int)action,0U,0U,& data0,& data1,& steer_ctrl);
    #line 966 
    if (status != VXGE_HW_OK) 
                              #line 967 
                              goto exit;
    #line 969 
    data0 >>= 16;
    #line 970 
    data1 >>= 16;
    #line 973 
    i = 6;
    #line 973 
    while (i > 0) {
      #line 974 
      *(macaddr + ((unsigned long)i + 18446744073709551615U)) = (unsigned char)data0;
      #line 975 
      data0 >>= 8;
      #line 977 
      *(macaddr_mask + ((unsigned long)i + 18446744073709551615U)) = (unsigned char)data1;
      #line 978 
      data1 >>= 8;
      #line 973 
      i --;
    }
    #line 981 
    action = 3ULL;
    #line 982 
    data0 = 0ULL;
    #line 982 
    data1 = 0ULL;
    #line 982 
    steer_ctrl = 0ULL;
    #line 984 
    if (is_valid_ether_addr(macaddr)) 
                                      #line 962 
                                      break;
  }
  #line 985 
  exit: 
        #line 985 
  ;
  #line 986 
  return status;
}

#line 996  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.c"
enum vxge_hw_status vxge_hw_device_hw_info_get(void *bar0, struct vxge_hw_device_hw_info *hw_info)
{
  #line 999 
  u32 i;
  #line 1000 
  u64 val64;
  #line 1001 
  struct vxge_hw_toc_reg *toc;
  #line 1002 
  struct vxge_hw_mrpcim_reg *mrpcim_reg;
  #line 1003 
  struct vxge_hw_common_reg *common_reg;
  #line 1004 
  struct vxge_hw_vpmgmt_reg *vpmgmt_reg;
  #line 1005 
  enum vxge_hw_status status;
  #line 1006 
  struct __vxge_hw_virtualpath vpath;
  #line 1008 
  memset((void *)hw_info,0,608UL);
  #line 1010 
  toc = __vxge_hw_device_toc_get(bar0);
  #line 1011 
  if (toc == (struct vxge_hw_toc_reg *)0) {
    #line 1012 
    status = VXGE_HW_ERR_CRITICAL;
    #line 1013 
    goto exit;
  }
  #line 1016 
  val64 = readq((void *)(& toc->toc_common_pointer));
  #line 1017 
  common_reg = (struct vxge_hw_common_reg *)(bar0 + val64);
  #line 1019 
  status = __vxge_hw_device_vpath_reset_in_prog_check(& common_reg->vpath_rst_in_prog);
  #line 1021 
  if (status != VXGE_HW_OK) 
                            #line 1022 
                            goto exit;
  #line 1024 
  hw_info->vpath_mask = readq((void *)(& common_reg->vpath_assignments));
  #line 1026 
  val64 = readq((void *)(& common_reg->host_type_assignments));
  #line 1028 
  hw_info->host_type = (unsigned int)(val64 >> 56) & 7U;
  #line 1031 
  i = 0U;
  #line 1031 
  while (i <= 16U) {
    {
      #line 1032 
      if ((hw_info->vpath_mask & (9223372036854775808ULL >> i)) == 0ULL) 
        #line 1033 
        goto __Cont;
      #line 1035 
      val64 = readq((void *)(& toc->toc_vpmgmt_pointer[i]));
      #line 1037 
      vpmgmt_reg = (struct vxge_hw_vpmgmt_reg *)(bar0 + val64);
      #line 1039 
      hw_info->func_id = __vxge_hw_vpath_func_id_get(vpmgmt_reg);
      #line 1040 
      if ((__vxge_hw_device_access_rights_get(hw_info->host_type,hw_info->func_id) & 4U) != 0U) {
        #line 1044 
        val64 = readq((void *)(& toc->toc_mrpcim_pointer));
        #line 1046 
        mrpcim_reg = (struct vxge_hw_mrpcim_reg *)(bar0 + val64);
        #line 1048 
        writeq(0ULL,(void *)(& mrpcim_reg->xgmac_gen_fw_memo_mask));
        #line 1049 
        ldv_inline_asm();
      }
      #line 1052 
      val64 = readq((void *)(& toc->toc_vpath_pointer[i]));
      #line 1054 
      spinlock_check(& vpath.lock);
      {
        #line 1054 
        struct lock_class_key __key;
        #line 1054 
        __raw_spin_lock_init(& vpath.lock.__anonCompField_spinlock_25.rlock,(char *)"&(&vpath.lock)->rlock",& __key);
      }
      #line 1055 
      vpath.vp_reg = (struct vxge_hw_vpath_reg *)(bar0 + val64);
      #line 1056 
      vpath.vp_open = 0U;
      #line 1058 
      status = __vxge_hw_vpath_pci_func_mode_get(& vpath,hw_info);
      #line 1059 
      if (status != VXGE_HW_OK) 
                                #line 1060 
                                goto exit;
      #line 1062 
      status = __vxge_hw_vpath_fw_ver_get(& vpath,hw_info);
      #line 1063 
      if (status != VXGE_HW_OK) 
                                #line 1064 
                                goto exit;
      #line 1066 
      status = __vxge_hw_vpath_card_info_get(& vpath,hw_info);
      #line 1067 
      if (status != VXGE_HW_OK) 
                                #line 1068 
                                goto exit;
      #line 1070 
      break;
    }
    #line 1031 
    __Cont: 
            #line 1031 
    i ++;
  }
  #line 1073 
  i = 0U;
  #line 1073 
  while (i <= 16U) {
    #line 1074 
    if ((hw_info->vpath_mask & (9223372036854775808ULL >> i)) == 0ULL) 
      #line 1075 
      goto __Cont_0;
    #line 1077 
    val64 = readq((void *)(& toc->toc_vpath_pointer[i]));
    #line 1078 
    vpath.vp_reg = (struct vxge_hw_vpath_reg *)(bar0 + val64);
    #line 1079 
    vpath.vp_open = 0U;
    #line 1081 
    status = __vxge_hw_vpath_addr_get(& vpath,(u8 *)(& hw_info->mac_addrs[i]),(u8 *)(& hw_info->mac_addr_masks[i]));
    #line 1084 
    if (status != VXGE_HW_OK) 
                              #line 1085 
                              goto exit;
    #line 1073 
    __Cont_0: 
              #line 1073 
    i ++;
  }
  #line 1087 
  exit: 
        #line 1087 
  ;
  #line 1088 
  return status;
}

#line 1094  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.c"
static void __vxge_hw_blockpool_destroy(struct __vxge_hw_blockpool *blockpool)
{
  #line 1096 
  struct __vxge_hw_device *hldev;
  #line 1097 
  struct list_head *p;
  #line 1097 
  struct list_head *n;
  #line 1099 
  if (blockpool == (struct __vxge_hw_blockpool *)0) 
                                                    #line 1100 
                                                    return;
  #line 1102 
  hldev = blockpool->hldev;
  #line 1104 
  p = blockpool->free_block_list.next;
  #line 1104 
  n = p->next;
  #line 1104 
  while (& blockpool->free_block_list != p) {
    #line 1105 
    pci_unmap_single(hldev->pdev,((struct __vxge_hw_blockpool_entry *)p)->dma_addr,(unsigned long)((struct __vxge_hw_blockpool_entry *)p)->length,0);
    #line 1110 
    vxge_os_dma_free(hldev->pdev,((struct __vxge_hw_blockpool_entry *)p)->memblock,& ((struct __vxge_hw_blockpool_entry *)p)->acc_handle);
    #line 1114 
    list_del_0(& ((struct __vxge_hw_blockpool_entry *)p)->item);
    #line 1115 
    kfree((void *)p);
    #line 1116 
    (blockpool->pool_size) --;
    #line 1104 
    p = n;
    #line 1104 
    n = p->next;
  }
  #line 1119 
  p = blockpool->free_entry_list.next;
  #line 1119 
  n = p->next;
  #line 1119 
  while (& blockpool->free_entry_list != p) {
    #line 1120 
    list_del_0(& ((struct __vxge_hw_blockpool_entry *)p)->item);
    #line 1121 
    kfree((void *)p);
    #line 1119 
    p = n;
    #line 1119 
    n = p->next;
  }
  #line 1124 
  return;
}

#line 1131  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.c"
static enum vxge_hw_status __vxge_hw_blockpool_create(struct __vxge_hw_device *hldev, struct __vxge_hw_blockpool *blockpool, u32 pool_size, u32 pool_max)
{
  #line 1136 
  u32 i;
  #line 1138 
  void *memblock;
  #line 1139 
  dma_addr_t dma_addr;
  #line 1140 
  struct pci_dev *dma_handle;
  #line 1141 
  struct pci_dev *acc_handle;
  #line 1137 
  struct __vxge_hw_blockpool_entry *entry = (struct __vxge_hw_blockpool_entry *)0;
  #line 1142 
  enum vxge_hw_status status = 0;
  #line 1144 
  if (blockpool == (struct __vxge_hw_blockpool *)0) {
    #line 1145 
    status = VXGE_HW_FAIL;
    #line 1146 
    goto blockpool_create_exit;
  }
  #line 1149 
  blockpool->hldev = hldev;
  #line 1150 
  blockpool->block_size = 4096U;
  #line 1151 
  blockpool->pool_size = 0U;
  #line 1152 
  blockpool->pool_max = pool_max;
  #line 1153 
  blockpool->req_out = 0U;
  #line 1155 
  INIT_LIST_HEAD_0(& blockpool->free_block_list);
  #line 1156 
  INIT_LIST_HEAD_0(& blockpool->free_entry_list);
  #line 1158 
  i = 0U;
  #line 1158 
  while (pool_size + pool_max > i) {
    #line 1159 
    entry = (struct __vxge_hw_blockpool_entry *)kzalloc_1(56UL,3264U);
    #line 1161 
    if (entry == (struct __vxge_hw_blockpool_entry *)0) {
      #line 1162 
      __vxge_hw_blockpool_destroy(blockpool);
      #line 1163 
      status = VXGE_HW_ERR_OUT_OF_MEMORY;
      #line 1164 
      goto blockpool_create_exit;
    }
    #line 1166 
    list_add_0(& entry->item,& blockpool->free_entry_list);
    #line 1158 
    i ++;
  }
  #line 1169 
  i = 0U;
  #line 1169 
  while (i < pool_size) {
    {
      #line 1170 
      memblock = vxge_os_dma_malloc(hldev->pdev,4096UL,& dma_handle,& acc_handle);
      #line 1175 
      if (memblock == (void *)0) {
        #line 1176 
        __vxge_hw_blockpool_destroy(blockpool);
        #line 1177 
        status = VXGE_HW_ERR_OUT_OF_MEMORY;
        #line 1178 
        goto blockpool_create_exit;
      }
      #line 1181 
      dma_addr = pci_map_single(hldev->pdev,memblock,4096UL,0);
      #line 1183 
      if ((long)(pci_dma_mapping_error(hldev->pdev,dma_addr) != 0) != 0L) {
        #line 1185 
        vxge_os_dma_free(hldev->pdev,memblock,& acc_handle);
        #line 1186 
        __vxge_hw_blockpool_destroy(blockpool);
        #line 1187 
        status = VXGE_HW_ERR_OUT_OF_MEMORY;
        #line 1188 
        goto blockpool_create_exit;
      }
      #line 1191 
      if (list_empty_0(& blockpool->free_entry_list) == 0) {
        #line 1193 
        void *__mptr;
        #line 1193 
        __mptr = (void *)blockpool->free_entry_list.next;
        #line 1192 
        entry = ((struct __vxge_hw_blockpool_entry *)__mptr);
      }
      #line 1197 
      if (entry == (struct __vxge_hw_blockpool_entry *)0) 
                                                          #line 1199 
                                                          entry = (struct __vxge_hw_blockpool_entry *)kzalloc_1(56UL,3264U);
      #line 1201 
      if (entry != (struct __vxge_hw_blockpool_entry *)0) {
        #line 1202 
        list_del_0(& entry->item);
        #line 1203 
        entry->length = 4096U;
        #line 1204 
        entry->memblock = memblock;
        #line 1205 
        entry->dma_addr = dma_addr;
        #line 1206 
        entry->acc_handle = acc_handle;
        #line 1207 
        entry->dma_handle = dma_handle;
        #line 1208 
        list_add_0(& entry->item,& blockpool->free_block_list);
        #line 1210 
        (blockpool->pool_size) ++;
      }
      else {
        #line 1212 
        __vxge_hw_blockpool_destroy(blockpool);
        #line 1213 
        status = VXGE_HW_ERR_OUT_OF_MEMORY;
        #line 1214 
        goto blockpool_create_exit;
      }
    }
    #line 1169 
    i ++;
  }
  #line 1218 
  blockpool_create_exit: 
                         #line 1218 
  ;
  #line 1219 
  return status;
}

#line 1227  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.c"
static enum vxge_hw_status __vxge_hw_device_fifo_config_check(struct vxge_hw_fifo_config *fifo_config)
{
  #line 1229 
  if (fifo_config->fifo_blocks + 4294967294U > 126U) 
                                                     #line 1231 
                                                     return VXGE_HW_BADCFG_FIFO_BLOCKS;
  #line 1233 
  return VXGE_HW_OK;
}

#line 1241  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.c"
static enum vxge_hw_status __vxge_hw_device_vpath_config_check(struct vxge_hw_vp_config *vp_config)
{
  #line 1243 
  enum vxge_hw_status status;
  #line 1245 
  if (vp_config->min_bandwidth > 100U) 
                                       #line 1247 
                                       return VXGE_HW_BADCFG_VPATH_MIN_BANDWIDTH;
  #line 1249 
  status = __vxge_hw_device_fifo_config_check(& vp_config->fifo);
  #line 1250 
  if (status != VXGE_HW_OK) 
                            #line 1251 
                            return status;
  #line 1253 
  if (vp_config->mtu != 4294967295U && vp_config->mtu + 4294967228U > 9532U) 
    #line 1256 
    return VXGE_HW_BADCFG_VPATH_MTU;
  #line 1258 
  if ((vp_config->rpa_strip_vlan_tag != 4294967295U && vp_config->rpa_strip_vlan_tag != 1U) && vp_config->rpa_strip_vlan_tag != 0U) 
    #line 1264 
    return VXGE_HW_BADCFG_VPATH_RPA_STRIP_VLAN_TAG;
  #line 1266 
  return VXGE_HW_OK;
}

#line 1274  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.c"
static enum vxge_hw_status __vxge_hw_device_config_check(struct vxge_hw_device_config *new_config)
{
  #line 1276 
  u32 i;
  #line 1277 
  enum vxge_hw_status status;
  #line 1279 
  if ((unsigned int)new_config->intr_mode == 3U) 
                                                 #line 1283 
                                                 return VXGE_HW_BADCFG_INTR_MODE;
  #line 1289 
  i = 0U;
  #line 1289 
  while (i <= 16U) {
    #line 1290 
    status = __vxge_hw_device_vpath_config_check(& new_config->vp_config[i]);
    #line 1292 
    if (status != VXGE_HW_OK) 
                              #line 1293 
                              return status;
    #line 1289 
    i ++;
  }
  #line 1296 
  return VXGE_HW_OK;
}

#line 1309  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.c"
enum vxge_hw_status vxge_hw_device_initialize(struct __vxge_hw_device **devh, struct vxge_hw_device_attr *attr, struct vxge_hw_device_config *device_config)
{
  #line 1314 
  u32 i;
  #line 1315 
  u32 nblocks = 0U;
  #line 1316 
  struct __vxge_hw_device *hldev = (struct __vxge_hw_device *)0;
  #line 1317 
  enum vxge_hw_status status = 0;
  #line 1319 
  status = __vxge_hw_device_config_check(device_config);
  #line 1320 
  if (status != VXGE_HW_OK) 
                            #line 1321 
                            goto exit;
  #line 1323 
  hldev = (struct __vxge_hw_device *)cif_vzalloc(24320UL);
  #line 1324 
  if (hldev == (struct __vxge_hw_device *)0) {
    #line 1325 
    status = VXGE_HW_ERR_OUT_OF_MEMORY;
    #line 1326 
    goto exit;
  }
  #line 1329 
  hldev->magic = 305419896U;
  #line 1331 
  vxge_hw_device_debug_set(hldev,(enum vxge_debug_level)VXGE_ERR,4294967295U);
  #line 1334 
  memcpy((void *)(& hldev->config),(void *)device_config,3280UL);
  #line 1337 
  hldev->bar0 = attr->bar0;
  #line 1338 
  hldev->pdev = attr->pdev;
  #line 1340 
  hldev->uld_callbacks = attr->uld_callbacks;
  #line 1342 
  __vxge_hw_device_pci_e_init(hldev);
  #line 1344 
  status = __vxge_hw_device_reg_addr_get(hldev);
  #line 1345 
  if (status != VXGE_HW_OK) {
    #line 1346 
    cif_vfree((void *)hldev);
    #line 1347 
    goto exit;
  }
  #line 1350 
  __vxge_hw_device_host_info_get(hldev);
  #line 1353 
  nblocks ++;
  #line 1355 
  i = 0U;
  #line 1355 
  while (i <= 16U) {
    #line 1356 
    if ((hldev->vpath_assignments & (9223372036854775808ULL >> i)) == 0ULL) 
      #line 1357 
      goto __Cont;
    #line 1359 
    if (device_config->vp_config[i].ring.enable == 1U) 
                                                       #line 1361 
                                                       nblocks = device_config->vp_config[i].ring.ring_blocks + nblocks;
    #line 1363 
    if (device_config->vp_config[i].fifo.enable == 1U) 
                                                       #line 1365 
                                                       nblocks = device_config->vp_config[i].fifo.fifo_blocks + nblocks;
    #line 1366 
    nblocks ++;
    #line 1355 
    __Cont: 
            #line 1355 
    i ++;
  }
  #line 1369 
  if (__vxge_hw_blockpool_create(hldev,& hldev->block_pool,
                                   device_config->dma_blockpool_initial + nblocks,
                                   device_config->dma_blockpool_max + nblocks) != VXGE_HW_OK) {
    #line 1374 
    vxge_hw_device_terminate(hldev);
    #line 1375 
    status = VXGE_HW_ERR_OUT_OF_MEMORY;
    #line 1376 
    goto exit;
  }
  #line 1379 
  status = __vxge_hw_device_initialize(hldev);
  #line 1380 
  if (status != VXGE_HW_OK) {
    #line 1381 
    vxge_hw_device_terminate(hldev);
    #line 1382 
    goto exit;
  }
  #line 1385 
  *devh = hldev;
  #line 1386 
  exit: 
        #line 1386 
  ;
  #line 1387 
  return status;
}

#line 1395  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.c"
void vxge_hw_device_terminate(struct __vxge_hw_device *hldev)
{
  #line 1399 
  hldev->magic = 3735936685U;
  #line 1400 
  __vxge_hw_blockpool_destroy(& hldev->block_pool);
  #line 1401 
  cif_vfree((void *)hldev);
  #line 1402 
  return;
}

#line 1409  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.c"
static enum vxge_hw_status __vxge_hw_vpath_stats_access(struct __vxge_hw_virtualpath *vpath, u32 operation, u32 offset, u64 *stat)
{
  #line 1412 
  u64 val64;
  #line 1414 
  struct vxge_hw_vpath_reg *vp_reg;
  #line 1413 
  enum vxge_hw_status status = 0;
  #line 1416 
  if (vpath->vp_open == 0U) {
    #line 1417 
    status = VXGE_HW_ERR_VPATH_NOT_OPEN;
    #line 1418 
    goto vpath_stats_access_exit;
  }
  #line 1421 
  vp_reg = vpath->vp_reg;
  #line 1423 
  val64 = (((unsigned long long)operation << 56) | ((unsigned long long)offset << 24)) | 281474976710656ULL;
  #line 1427 
  status = __vxge_hw_pio_mem_write64(val64,(void *)(& vp_reg->xmac_stats_access_cmd),281474976710656ULL,(vpath->hldev)->config.device_poll_millis);
  #line 1431 
  if (status == VXGE_HW_OK && operation == 0U) 
                                               #line 1432 
                                               *stat = readq((void *)(& vp_reg->xmac_stats_access_data)); else 
                                                                    #line 1434 
                                                                    *stat = 0ULL;
  #line 1436 
  vpath_stats_access_exit: 
                           #line 1436 
  ;
  #line 1437 
  return status;
}

#line 1444  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.c"
static enum vxge_hw_status __vxge_hw_vpath_xmac_tx_stats_get(struct __vxge_hw_virtualpath *vpath, struct vxge_hw_xmac_vpath_tx_stats *vpath_tx_stats)
{
  #line 1447 
  u64 *val64;
  #line 1448 
  int i;
  #line 1449 
  u32 offset = 0U;
  #line 1450 
  enum vxge_hw_status status = 0;
  #line 1452 
  val64 = (u64 *)vpath_tx_stats;
  #line 1454 
  if (vpath->vp_open == 0U) {
    #line 1455 
    status = VXGE_HW_ERR_VPATH_NOT_OPEN;
    #line 1456 
    goto exit;
  }
  #line 1459 
  i = 0;
  #line 1459 
  while ((unsigned int)i <= 17U) {
    #line 1460 
    status = __vxge_hw_vpath_stats_access(vpath,0U,offset,val64);
    #line 1463 
    if (status != VXGE_HW_OK) 
                              #line 1464 
                              goto exit;
    #line 1465 
    offset ++;
    #line 1466 
    val64 ++;
    #line 1459 
    i ++;
  }
  #line 1468 
  exit: 
        #line 1468 
  ;
  #line 1469 
  return status;
}

#line 1476  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.c"
static enum vxge_hw_status __vxge_hw_vpath_xmac_rx_stats_get(struct __vxge_hw_virtualpath *vpath, struct vxge_hw_xmac_vpath_rx_stats *vpath_rx_stats)
{
  #line 1479 
  u64 *val64;
  #line 1481 
  int i;
  #line 1480 
  enum vxge_hw_status status = 0;
  #line 1482 
  u32 offset = 144U;
  #line 1483 
  val64 = (u64 *)vpath_rx_stats;
  #line 1485 
  if (vpath->vp_open == 0U) {
    #line 1486 
    status = VXGE_HW_ERR_VPATH_NOT_OPEN;
    #line 1487 
    goto exit;
  }
  #line 1489 
  i = 0;
  #line 1489 
  while ((unsigned int)i <= 38U) {
    #line 1490 
    status = __vxge_hw_vpath_stats_access(vpath,0U,offset >> 3,val64);
    #line 1493 
    if (status != VXGE_HW_OK) 
                              #line 1494 
                              goto exit;
    #line 1496 
    offset += 8U;
    #line 1497 
    val64 ++;
    #line 1489 
    i ++;
  }
  #line 1499 
  exit: 
        #line 1499 
  ;
  #line 1500 
  return status;
}

#line 1507  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.c"
static enum vxge_hw_status __vxge_hw_vpath_stats_get(struct __vxge_hw_virtualpath *vpath, struct vxge_hw_vpath_stats_hw_info *hw_stats)
{
  #line 1510 
  u64 val64;
  #line 1512 
  struct vxge_hw_vpath_reg *vp_reg;
  #line 1511 
  enum vxge_hw_status status = 0;
  #line 1514 
  if (vpath->vp_open == 0U) {
    #line 1515 
    status = VXGE_HW_ERR_VPATH_NOT_OPEN;
    #line 1516 
    goto exit;
  }
  #line 1518 
  vp_reg = vpath->vp_reg;
  #line 1520 
  val64 = readq((void *)(& vp_reg->vpath_debug_stats0));
  #line 1521 
  hw_stats->ini_num_mwr_sent = (unsigned int)(val64 >> 32);
  #line 1524 
  val64 = readq((void *)(& vp_reg->vpath_debug_stats1));
  #line 1525 
  hw_stats->ini_num_mrd_sent = (unsigned int)(val64 >> 32);
  #line 1528 
  val64 = readq((void *)(& vp_reg->vpath_debug_stats2));
  #line 1529 
  hw_stats->ini_num_cpl_rcvd = (unsigned int)(val64 >> 32);
  #line 1532 
  val64 = readq((void *)(& vp_reg->vpath_debug_stats3));
  #line 1533 
  hw_stats->ini_num_mwr_byte_sent = val64;
  #line 1536 
  val64 = readq((void *)(& vp_reg->vpath_debug_stats4));
  #line 1537 
  hw_stats->ini_num_cpl_byte_rcvd = val64;
  #line 1540 
  val64 = readq((void *)(& vp_reg->vpath_debug_stats5));
  #line 1541 
  hw_stats->wrcrdtarb_xoff = (unsigned int)val64;
  #line 1544 
  val64 = readq((void *)(& vp_reg->vpath_debug_stats6));
  #line 1545 
  hw_stats->rdcrdtarb_xoff = (unsigned int)val64;
  #line 1548 
  val64 = readq((void *)(& vp_reg->vpath_genstats_count01));
  #line 1549 
  hw_stats->vpath_genstats_count0 = (unsigned int)val64;
  #line 1553 
  val64 = readq((void *)(& vp_reg->vpath_genstats_count01));
  #line 1554 
  hw_stats->vpath_genstats_count1 = (unsigned int)(val64 >> 32);
  #line 1558 
  val64 = readq((void *)(& vp_reg->vpath_genstats_count23));
  #line 1559 
  hw_stats->vpath_genstats_count2 = (unsigned int)val64;
  #line 1563 
  val64 = readq((void *)(& vp_reg->vpath_genstats_count01));
  #line 1564 
  hw_stats->vpath_genstats_count3 = (unsigned int)(val64 >> 32);
  #line 1568 
  val64 = readq((void *)(& vp_reg->vpath_genstats_count4));
  #line 1569 
  hw_stats->vpath_genstats_count4 = (unsigned int)(val64 >> 32);
  #line 1573 
  val64 = readq((void *)(& vp_reg->vpath_genstats_count5));
  #line 1574 
  hw_stats->vpath_genstats_count5 = (unsigned int)val64;
  #line 1578 
  status = __vxge_hw_vpath_xmac_tx_stats_get(vpath,& hw_stats->tx_stats);
  #line 1579 
  if (status != VXGE_HW_OK) 
                            #line 1580 
                            goto exit;
  #line 1582 
  status = __vxge_hw_vpath_xmac_rx_stats_get(vpath,& hw_stats->rx_stats);
  #line 1583 
  if (status != VXGE_HW_OK) 
                            #line 1584 
                            goto exit;
  #line 1586 
  status = __vxge_hw_vpath_stats_access(vpath,0U,58U,& val64);
  #line 1586 
  if (status != VXGE_HW_OK) 
                            #line 1586 
                            return status;
  #line 1589 
  hw_stats->prog_event_vnum0 = (unsigned int)(val64 >> 32);
  #line 1592 
  hw_stats->prog_event_vnum1 = (unsigned int)val64;
  #line 1595 
  status = __vxge_hw_vpath_stats_access(vpath,0U,59U,& val64);
  #line 1595 
  if (status != VXGE_HW_OK) 
                            #line 1595 
                            return status;
  #line 1598 
  hw_stats->prog_event_vnum2 = (unsigned int)(val64 >> 32);
  #line 1601 
  hw_stats->prog_event_vnum3 = (unsigned int)val64;
  #line 1604 
  val64 = readq((void *)(& vp_reg->rx_multi_cast_stats));
  #line 1605 
  hw_stats->rx_multi_cast_frame_discard = (unsigned short)val64;
  #line 1608 
  val64 = readq((void *)(& vp_reg->rx_frm_transferred));
  #line 1609 
  hw_stats->rx_frm_transferred = (unsigned int)val64;
  #line 1612 
  val64 = readq((void *)(& vp_reg->rxd_returned));
  #line 1613 
  hw_stats->rxd_returned = (unsigned short)val64;
  #line 1616 
  val64 = readq((void *)(& vp_reg->dbg_stats_rx_mpa));
  #line 1617 
  hw_stats->rx_mpa_len_fail_frms = (unsigned short)(val64 >> 16);
  #line 1619 
  hw_stats->rx_mpa_mrk_fail_frms = (unsigned short)(val64 >> 32);
  #line 1621 
  hw_stats->rx_mpa_crc_fail_frms = (unsigned short)(val64 >> 48);
  #line 1624 
  val64 = readq((void *)(& vp_reg->dbg_stats_rx_fau));
  #line 1625 
  hw_stats->rx_permitted_frms = (unsigned short)(val64 >> 16);
  #line 1627 
  hw_stats->rx_vp_reset_discarded_frms = (unsigned long long)((unsigned short)(val64 >> 32));
  #line 1629 
  hw_stats->rx_wol_frms = (unsigned long long)((unsigned short)(val64 >> 48));
  #line 1632 
  val64 = readq((void *)(& vp_reg->tx_vp_reset_discarded_frms));
  #line 1633 
  hw_stats->tx_vp_reset_discarded_frms = (unsigned long long)((unsigned short)val64);
  #line 1636 
  exit: 
        #line 1636 
  ;
  #line 1637 
  return status;
}

#line 1645  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.c"
enum vxge_hw_status vxge_hw_device_stats_get(struct __vxge_hw_device *hldev, struct vxge_hw_device_stats_hw_info *hw_stats)
{
  #line 1648 
  u32 i;
  #line 1649 
  enum vxge_hw_status status = 0;
  #line 1651 
  i = 0U;
  #line 1651 
  while (i <= 16U) {
    #line 1652 
    if ((hldev->vpaths_deployed & (9223372036854775808ULL >> i)) == 0ULL || hldev->virtual_paths[i].vp_open == 0U) 
      #line 1655 
      goto __Cont;
    #line 1657 
    memcpy((void *)hldev->virtual_paths[i].hw_stats_sav,(void *)hldev->virtual_paths[i].hw_stats,624UL);
    #line 1661 
    status = __vxge_hw_vpath_stats_get(& hldev->virtual_paths[i],hldev->virtual_paths[i].hw_stats);
    #line 1651 
    __Cont: 
            #line 1651 
    i ++;
  }
  #line 1666 
  memcpy((void *)hw_stats,(void *)(& hldev->stats.hw_dev_info_stats),10744UL);
  #line 1669 
  return status;
}

#line 1676  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.c"
enum vxge_hw_status vxge_hw_driver_stats_get(struct __vxge_hw_device *hldev, struct vxge_hw_device_stats_sw_info *sw_stats)
{
  #line 1680 
  memcpy((void *)sw_stats,(void *)(& hldev->stats.sw_dev_info_stats),4096UL);
  #line 1683 
  return VXGE_HW_OK;
}

#line 1692  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.c"
enum vxge_hw_status vxge_hw_mrpcim_stats_access(struct __vxge_hw_device *hldev, u32 operation, u32 location, u32 offset, u64 *stat)
{
  #line 1695 
  u64 val64;
  #line 1696 
  enum vxge_hw_status status = 0;
  #line 1698 
  status = __vxge_hw_device_is_privilaged(hldev->host_type,hldev->func_id);
  #line 1700 
  if (status != VXGE_HW_OK) 
                            #line 1701 
                            goto exit;
  #line 1703 
  val64 = ((((unsigned long long)operation << 56) | ((unsigned long long)location << 32)) | ((unsigned long long)offset << 24)) | 281474976710656ULL;
  #line 1708 
  status = __vxge_hw_pio_mem_write64(val64,(void *)(& (hldev->mrpcim_reg)->xmac_stats_sys_cmd),281474976710656ULL,hldev->config.device_poll_millis);
  #line 1713 
  if (status == VXGE_HW_OK && operation == 0U) 
                                               #line 1714 
                                               *stat = readq((void *)(& (hldev->mrpcim_reg)->xmac_stats_sys_data)); else 
                                                                    #line 1716 
                                                                    *stat = 0ULL;
  #line 1717 
  exit: 
        #line 1717 
  ;
  #line 1718 
  return status;
}

#line 1726  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.c"
static enum vxge_hw_status vxge_hw_device_xmac_aggr_stats_get(struct __vxge_hw_device *hldev, u32 port, struct vxge_hw_xmac_aggr_stats *aggr_stats)
{
  #line 1729 
  u64 *val64;
  #line 1730 
  int i;
  #line 1731 
  u32 offset = 1824U;
  #line 1732 
  enum vxge_hw_status status = 0;
  #line 1734 
  val64 = (u64 *)aggr_stats;
  #line 1736 
  status = __vxge_hw_device_is_privilaged(hldev->host_type,hldev->func_id);
  #line 1738 
  if (status != VXGE_HW_OK) 
                            #line 1739 
                            goto exit;
  #line 1741 
  i = 0;
  #line 1741 
  while ((unsigned int)i <= 12U) {
    #line 1742 
    status = vxge_hw_mrpcim_stats_access(hldev,0U,17U,(port * 104U + offset) >> 3,val64);
    #line 1746 
    if (status != VXGE_HW_OK) 
                              #line 1747 
                              goto exit;
    #line 1749 
    offset += 8U;
    #line 1750 
    val64 ++;
    #line 1741 
    i ++;
  }
  #line 1752 
  exit: 
        #line 1752 
  ;
  #line 1753 
  return status;
}

#line 1761  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.c"
static enum vxge_hw_status vxge_hw_device_xmac_port_stats_get(struct __vxge_hw_device *hldev, u32 port, struct vxge_hw_xmac_port_stats *port_stats)
{
  #line 1764 
  u64 *val64;
  #line 1766 
  int i;
  #line 1765 
  enum vxge_hw_status status = 0;
  #line 1767 
  u32 offset = 0U;
  #line 1768 
  val64 = (u64 *)port_stats;
  #line 1770 
  status = __vxge_hw_device_is_privilaged(hldev->host_type,hldev->func_id);
  #line 1772 
  if (status != VXGE_HW_OK) 
                            #line 1773 
                            goto exit;
  #line 1775 
  i = 0;
  #line 1775 
  while ((unsigned int)i <= 75U) {
    #line 1776 
    status = vxge_hw_mrpcim_stats_access(hldev,0U,17U,(port * 608U + offset) >> 3,val64);
    #line 1780 
    if (status != VXGE_HW_OK) 
                              #line 1781 
                              goto exit;
    #line 1783 
    offset += 8U;
    #line 1784 
    val64 ++;
    #line 1775 
    i ++;
  }
  #line 1787 
  exit: 
        #line 1787 
  ;
  #line 1788 
  return status;
}

#line 1796  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.c"
enum vxge_hw_status vxge_hw_device_xmac_stats_get(struct __vxge_hw_device *hldev, struct vxge_hw_xmac_stats *xmac_stats)
{
  #line 1800 
  u32 i;
  #line 1799 
  enum vxge_hw_status status = 0;
  #line 1802 
  status = vxge_hw_device_xmac_aggr_stats_get(hldev,0U,& xmac_stats->aggr_stats[0]);
  #line 1804 
  if (status != VXGE_HW_OK) 
                            #line 1805 
                            goto exit;
  #line 1807 
  status = vxge_hw_device_xmac_aggr_stats_get(hldev,1U,& xmac_stats->aggr_stats[1]);
  #line 1809 
  if (status != VXGE_HW_OK) 
                            #line 1810 
                            goto exit;
  #line 1812 
  i = 0U;
  #line 1812 
  while (i <= 2U) {
    #line 1814 
    status = vxge_hw_device_xmac_port_stats_get(hldev,i,& xmac_stats->port_stats[i]);
    #line 1816 
    if (status != VXGE_HW_OK) 
                              #line 1817 
                              goto exit;
    #line 1812 
    i ++;
  }
  #line 1820 
  i = 0U;
  #line 1820 
  while (i <= 16U) {
    #line 1822 
    if ((hldev->vpaths_deployed & (9223372036854775808ULL >> i)) == 0ULL) 
      #line 1823 
      goto __Cont;
    #line 1825 
    status = __vxge_hw_vpath_xmac_tx_stats_get(& hldev->virtual_paths[i],& xmac_stats->vpath_tx_stats[i]);
    #line 1828 
    if (status != VXGE_HW_OK) 
                              #line 1829 
                              goto exit;
    #line 1831 
    status = __vxge_hw_vpath_xmac_rx_stats_get(& hldev->virtual_paths[i],& xmac_stats->vpath_rx_stats[i]);
    #line 1834 
    if (status != VXGE_HW_OK) 
                              #line 1835 
                              goto exit;
    #line 1820 
    __Cont: 
            #line 1820 
    i ++;
  }
  #line 1837 
  exit: 
        #line 1837 
  ;
  #line 1838 
  return status;
}

#line 1845  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.c"
void vxge_hw_device_debug_set(struct __vxge_hw_device *hldev, enum vxge_debug_level level, u32 mask)
{
  #line 1848 
  if (hldev == (struct __vxge_hw_device *)0) 
                                             #line 1849 
                                             return;
  #line 1853 
  hldev->debug_module_mask = mask;
  #line 1854 
  hldev->debug_level = (unsigned int)level;
  #line 1858 
  hldev->level_err = (unsigned int)level & 2U;
  #line 1862 
  hldev->level_trace = (unsigned int)level & 1U;
  #line 1863 
  return;
}

#line 1870  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.c"
u32 vxge_hw_device_error_level_get(struct __vxge_hw_device *hldev)
{
  #line 1873 
  if (hldev == (struct __vxge_hw_device *)0) 
                                             #line 1874 
                                             return 2U; else 
                                                             #line 1876 
                                                             return hldev->level_err;
}

#line 1886  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.c"
u32 vxge_hw_device_trace_level_get(struct __vxge_hw_device *hldev)
{
  #line 1889 
  if (hldev == (struct __vxge_hw_device *)0) 
                                             #line 1890 
                                             return 1U; else 
                                                             #line 1892 
                                                             return hldev->level_trace;
}

#line 1902  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.c"
enum vxge_hw_status vxge_hw_device_getpause_data(struct __vxge_hw_device *hldev, u32 port, u32 *tx, u32 *rx)
{
  #line 1905 
  u64 val64;
  #line 1906 
  enum vxge_hw_status status = 0;
  #line 1908 
  if (hldev == (struct __vxge_hw_device *)0 || hldev->magic != 305419896U) {
    #line 1909 
    status = VXGE_HW_ERR_INVALID_DEVICE;
    #line 1910 
    goto exit;
  }
  #line 1913 
  if (port > 2U) {
    #line 1914 
    status = VXGE_HW_ERR_INVALID_PORT;
    #line 1915 
    goto exit;
  }
  #line 1918 
  if ((hldev->access_rights & 4U) == 0U) {
    #line 1919 
    status = VXGE_HW_ERR_PRIVILEGED_OPERATION;
    #line 1920 
    goto exit;
  }
  #line 1923 
  val64 = readq((void *)(& (hldev->mrpcim_reg)->rxmac_pause_cfg_port[port]));
  #line 1924 
  if ((val64 & 1152921504606846976ULL) != 0ULL) 
                                                #line 1925 
                                                *tx = 1U;
  #line 1926 
  if ((val64 & 72057594037927936ULL) != 0ULL) 
                                              #line 1927 
                                              *rx = 1U;
  #line 1928 
  exit: 
        #line 1928 
  ;
  #line 1929 
  return status;
}

#line 1937  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.c"
enum vxge_hw_status vxge_hw_device_setpause_data(struct __vxge_hw_device *hldev, u32 port, u32 tx, u32 rx)
{
  #line 1940 
  u64 val64;
  #line 1941 
  enum vxge_hw_status status = 0;
  #line 1943 
  if (hldev == (struct __vxge_hw_device *)0 || hldev->magic != 305419896U) {
    #line 1944 
    status = VXGE_HW_ERR_INVALID_DEVICE;
    #line 1945 
    goto exit;
  }
  #line 1948 
  if (port > 2U) {
    #line 1949 
    status = VXGE_HW_ERR_INVALID_PORT;
    #line 1950 
    goto exit;
  }
  #line 1953 
  status = __vxge_hw_device_is_privilaged(hldev->host_type,hldev->func_id);
  #line 1955 
  if (status != VXGE_HW_OK) 
                            #line 1956 
                            goto exit;
  #line 1958 
  val64 = readq((void *)(& (hldev->mrpcim_reg)->rxmac_pause_cfg_port[port]));
  #line 1959 
  if (tx != 0U) 
                #line 1960 
                val64 |= 1152921504606846976ULL; else 
                                                      #line 1962 
                                                      val64 &= 17293822569102704639ULL;
  #line 1963 
  if (rx != 0U) 
                #line 1964 
                val64 |= 72057594037927936ULL; else 
                                                    #line 1966 
                                                    val64 &= 18374686479671623679ULL;
  #line 1968 
  writeq(val64,(void *)(& (hldev->mrpcim_reg)->rxmac_pause_cfg_port[port]));
  #line 1969 
  exit: 
        #line 1969 
  ;
  #line 1970 
  return status;
}

#line 1973  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.c"
u16 vxge_hw_device_link_width_get(struct __vxge_hw_device *hldev)
{
  #line 1976 
  u16 lnk;
  #line 1975 
  struct pci_dev *dev = hldev->pdev;
  #line 1978 
  pcie_capability_read_word(dev,18,& lnk);
  #line 1979 
  return (unsigned short)((unsigned int)((unsigned short)((int)lnk >> 4)) & 63U);
}

#line 1987  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.c"
__inline static u32 __vxge_hw_ring_block_memblock_idx(u8 *block)
{
  #line 1989 
  return (unsigned int)*((u64 *)(block + 4080U));
}

#line 1997  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.c"
__inline static void __vxge_hw_ring_block_memblock_idx_set(u8 *block, u32 memblock_idx)
{
  #line 1999 
  *((u64 *)(block + 4080U)) = (unsigned long long)memblock_idx;
  #line 2000 
  return;
}

#line 2008  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.c"
__inline static void __vxge_hw_ring_block_next_pointer_set(u8 *block, dma_addr_t dma_next)
{
  #line 2010 
  *((u64 *)(block + 4088U)) = dma_next;
  #line 2011 
  return;
}

#line 2018  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.c"
static u64 __vxge_hw_ring_first_block_address_get(struct __vxge_hw_ring *ring)
{
  #line 2020 
  struct vxge_hw_mempool_dma *dma_object;
  #line 2022 
  dma_object = (ring->mempool)->memblocks_dma_arr;
  #line 2025 
  return dma_object->addr;
}

#line 2032  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.c"
static dma_addr_t __vxge_hw_ring_item_dma_addr(struct vxge_hw_mempool *mempoolh, void *item)
{
  #line 2035 
  u32 memblock_idx;
  #line 2036 
  void *memblock;
  #line 2037 
  struct vxge_hw_mempool_dma *memblock_dma_object;
  #line 2038 
  ptrdiff_t dma_item_offset;
  #line 2041 
  memblock_idx = __vxge_hw_ring_block_memblock_idx((u8 *)item);
  #line 2044 
  memblock = *(mempoolh->memblocks_arr + (unsigned long)memblock_idx);
  #line 2047 
  memblock_dma_object = mempoolh->memblocks_dma_arr + (unsigned long)memblock_idx;
  #line 2050 
  dma_item_offset = (u8 *)item - (u8 *)memblock;
  #line 2052 
  return memblock_dma_object->addr + (unsigned long long)dma_item_offset;
}

#line 2059  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.c"
static void __vxge_hw_ring_rxdblock_link(struct vxge_hw_mempool *mempoolh, struct __vxge_hw_ring *ring, u32 from, u32 to)
{
  #line 2063 
  u8 *to_item;
  #line 2063 
  u8 *from_item;
  #line 2064 
  dma_addr_t to_dma;
  #line 2067 
  from_item = (u8 *)*(mempoolh->items_arr + (unsigned long)from);
  #line 2071 
  to_item = (u8 *)*(mempoolh->items_arr + (unsigned long)to);
  #line 2075 
  to_dma = __vxge_hw_ring_item_dma_addr(mempoolh,(void *)to_item);
  #line 2079 
  __vxge_hw_ring_block_next_pointer_set(from_item,to_dma);
  #line 2080 
  return;
}

#line 2089  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.c"
static void __vxge_hw_ring_mempool_item_alloc(struct vxge_hw_mempool *mempoolh, u32 memblock_index, struct vxge_hw_mempool_dma *dma_object, u32 index, u32 is_last)
{
  #line 2094 
  u32 i;
  #line 2095 
  void *item = *(mempoolh->items_arr + (unsigned long)index);
  #line 2096 
  struct __vxge_hw_ring *ring = (struct __vxge_hw_ring *)mempoolh->userdata;
  #line 2100 
  i = 0U;
  #line 2100 
  while (ring->rxds_per_block > i) {
    {
      #line 2101 
      void *rxdblock_priv;
      #line 2102 
      void *uld_priv;
      #line 2103 
      struct vxge_hw_ring_rxd_1 *rxdp;
      #line 2107 
      u32 memblock_item_idx;
      #line 2105 
      u32 reserve_index = (ring->channel.reserve_ptr - (ring->rxds_per_block * index + i)) + 4294967295U;
      #line 2109 
      *(ring->channel.reserve_arr + (unsigned long)reserve_index) = (void *)((u8 *)item + (unsigned long)(ring->rxd_size * i));
      #line 2115 
      rxdblock_priv = __vxge_hw_mempool_item_priv(mempoolh,memblock_index,item,& memblock_item_idx);
      #line 2119 
      rxdp = (struct vxge_hw_ring_rxd_1 *)*(ring->channel.reserve_arr + (unsigned long)reserve_index);
      #line 2121 
      uld_priv = (void *)((u8 *)rxdblock_priv + (unsigned long)(ring->rxd_priv_size * i));
      #line 2124 
      rxdp->host_control = (unsigned long long)uld_priv;
    }
    #line 2100 
    i ++;
  }
  #line 2127 
  __vxge_hw_ring_block_memblock_idx_set((u8 *)item,memblock_index);
  #line 2129 
  if (is_last != 0U) 
                     #line 2131 
                     __vxge_hw_ring_rxdblock_link(mempoolh,ring,index,0U);
  #line 2134 
  if (index != 0U) 
                   #line 2136 
                   __vxge_hw_ring_rxdblock_link(mempoolh,ring,index + 4294967295U,index);
  #line 2137 
  return;
}

#line 2145  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.c"
static enum vxge_hw_status vxge_hw_ring_replenish(struct __vxge_hw_ring *ring)
{
  #line 2147 
  void *rxd;
  #line 2148 
  struct __vxge_hw_channel *channel;
  #line 2149 
  enum vxge_hw_status status = 0;
  #line 2151 
  channel = & ring->channel;
  #line 2153 
  while (1) {
    #line 2153 
    if (! (vxge_hw_channel_dtr_count(channel) > 0)) 
                                                    #line 2153 
                                                    break;
    #line 2155 
    status = vxge_hw_ring_rxd_reserve(ring,& rxd);
    #line 2159 
    if (ring->rxd_init != (enum vxge_hw_status (*)(void *, void *))0) {
      #line 2160 
      status = (*(ring->rxd_init))(rxd,channel->userdata);
      #line 2161 
      if (status != VXGE_HW_OK) {
        #line 2162 
        vxge_hw_ring_rxd_free(ring,rxd);
        #line 2163 
        goto exit;
      }
    }
    #line 2167 
    vxge_hw_ring_rxd_post(ring,rxd);
  }
  #line 2169 
  status = VXGE_HW_OK;
  #line 2170 
  exit: 
        #line 2170 
  ;
  #line 2171 
  return status;
}

#line 2180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.c"
static struct __vxge_hw_channel *__vxge_hw_channel_allocate(struct __vxge_hw_vpath_handle *vph, enum __vxge_hw_channel_type type, u32 length, u32 per_dtr_space, void *userdata)
{
  #line 2185 
  struct __vxge_hw_channel *channel;
  #line 2186 
  struct __vxge_hw_device *hldev;
  #line 2188 
  u32 vp_id;
  #line 2187 
  int size = 0;
  #line 2190 
  hldev = (vph->vpath)->hldev;
  #line 2191 
  vp_id = (vph->vpath)->vp_id;
  #line 2193 
  switch ((unsigned int)type) {
    #line 2194 
    case (unsigned int)1: 
                          #line 2194 
    ;
    #line 2195 
    size = 512;
    #line 2196 
    break;
    #line 2197 
    case (unsigned int)2: 
                          #line 2197 
    ;
    #line 2198 
    size = 512;
    #line 2199 
    break;
    #line 2200 
    default: 
             #line 2200 
    ;
    #line 2201 
    break;
  }
  #line 2204 
  channel = (struct __vxge_hw_channel *)kzalloc_1((unsigned long)size,3264U);
  #line 2205 
  if (channel == (struct __vxge_hw_channel *)0) 
                                                #line 2206 
                                                goto exit0;
  #line 2207 
  INIT_LIST_HEAD_0(& channel->item);
  #line 2209 
  channel->common_reg = hldev->common_reg;
  #line 2210 
  channel->first_vp_id = hldev->first_vp_id;
  #line 2211 
  channel->type = type;
  #line 2212 
  channel->devh = hldev;
  #line 2213 
  channel->vph = vph;
  #line 2214 
  channel->userdata = userdata;
  #line 2215 
  channel->per_dtr_space = per_dtr_space;
  #line 2216 
  channel->length = length;
  #line 2217 
  channel->vp_id = vp_id;
  #line 2219 
  channel->work_arr = (void **)kcalloc_0((unsigned long)length,8UL,3264U);
  #line 2220 
  if (channel->work_arr == (void **)0) 
                                       #line 2221 
                                       goto exit1;
  #line 2223 
  channel->free_arr = (void **)kcalloc_0((unsigned long)length,8UL,3264U);
  #line 2224 
  if (channel->free_arr == (void **)0) 
                                       #line 2225 
                                       goto exit1;
  #line 2226 
  channel->free_ptr = length;
  #line 2228 
  channel->reserve_arr = (void **)kcalloc_0((unsigned long)length,8UL,3264U);
  #line 2229 
  if (channel->reserve_arr == (void **)0) 
                                          #line 2230 
                                          goto exit1;
  #line 2231 
  channel->reserve_ptr = length;
  #line 2232 
  channel->reserve_top = 0U;
  #line 2234 
  channel->orig_arr = (void **)kcalloc_0((unsigned long)length,8UL,3264U);
  #line 2235 
  if (channel->orig_arr == (void **)0) 
                                       #line 2236 
                                       goto exit1;
  #line 2238 
  return channel;
  #line 2239 
  exit1: 
         #line 2239 
  ;
  #line 2240 
  __vxge_hw_channel_free(channel);
  #line 2242 
  exit0: 
         #line 2242 
  ;
  #line 2243 
  return (struct __vxge_hw_channel *)0;
}

#line 2250  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.c"
static void vxge_hw_blockpool_block_add(struct __vxge_hw_device *devh, void *block_addr, u32 length, struct pci_dev *dma_h, struct pci_dev *acc_handle)
{
  #line 2256 
  struct __vxge_hw_blockpool *blockpool;
  #line 2258 
  dma_addr_t dma_addr;
  #line 2257 
  struct __vxge_hw_blockpool_entry *entry = (struct __vxge_hw_blockpool_entry *)0;
  #line 2260 
  blockpool = & devh->block_pool;
  #line 2262 
  if (block_addr == (void *)0) {
    #line 2263 
    (blockpool->req_out) --;
    #line 2264 
    goto exit;
  }
  #line 2267 
  dma_addr = pci_map_single(devh->pdev,block_addr,(unsigned long)length,0);
  #line 2270 
  if ((long)(pci_dma_mapping_error(devh->pdev,dma_addr) != 0) != 0L) {
    #line 2271 
    vxge_os_dma_free(devh->pdev,block_addr,& acc_handle);
    #line 2272 
    (blockpool->req_out) --;
    #line 2273 
    goto exit;
  }
  #line 2276 
  if (list_empty_0(& blockpool->free_entry_list) == 0) {
    #line 2278 
    void *__mptr;
    #line 2278 
    __mptr = (void *)blockpool->free_entry_list.next;
    #line 2277 
    entry = ((struct __vxge_hw_blockpool_entry *)__mptr);
  }
  #line 2282 
  if (entry == (struct __vxge_hw_blockpool_entry *)0) 
                                                      #line 2283 
                                                      entry = (struct __vxge_hw_blockpool_entry *)cif_vmalloc(56UL); else 
                                                                    #line 2285 
                                                                    list_del_0(& entry->item);
  #line 2287 
  if (entry != (struct __vxge_hw_blockpool_entry *)0) {
    #line 2288 
    entry->length = length;
    #line 2289 
    entry->memblock = block_addr;
    #line 2290 
    entry->dma_addr = dma_addr;
    #line 2291 
    entry->acc_handle = acc_handle;
    #line 2292 
    entry->dma_handle = dma_h;
    #line 2293 
    list_add_0(& entry->item,& blockpool->free_block_list);
    #line 2294 
    (blockpool->pool_size) ++;
  }
  #line 2297 
  (blockpool->req_out) --;
  #line 2299 
  exit: 
        #line 2299 
  ;
  #line 2300 
  return;
}

#line 2304  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.c"
__inline static void vxge_os_dma_malloc_async(struct pci_dev *pdev, void *devh, unsigned long size)
{
  #line 2306 
  gfp_t flags;
  #line 2307 
  void *vaddr;
  #line 2309 
  if (((unsigned long)preempt_count() & 2096896UL) != 0UL) 
                                                           #line 2310 
                                                           flags = 2593U; else 
                                                                    #line 2312 
                                                                    flags = 3265U;
  #line 2314 
  vaddr = kmalloc(size,flags);
  #line 2316 
  vxge_hw_blockpool_block_add((struct __vxge_hw_device *)devh,vaddr,(unsigned int)size,pdev,pdev);
  #line 2317 
  return;
}

#line 2323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.c"
static void __vxge_hw_blockpool_blocks_add(struct __vxge_hw_blockpool *blockpool)
{
  #line 2325 
  u32 i;
  #line 2325 
  u32 nreq = 0U;
  #line 2333 
  i = 0U;
  #line 2333 
  while (i < nreq) {
    #line 2334 
    vxge_os_dma_malloc_async((blockpool->hldev)->pdev,(void *)blockpool->hldev,4096UL);
    #line 2333 
    i ++;
  }
  #line 2337 
  return;
}

#line 2344  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.c"
static void *__vxge_hw_blockpool_malloc(struct __vxge_hw_device *devh, u32 size, struct vxge_hw_mempool_dma *dma_object)
{
  #line 2348 
  struct __vxge_hw_blockpool *blockpool;
  #line 2347 
  struct __vxge_hw_blockpool_entry *entry = (struct __vxge_hw_blockpool_entry *)0;
  #line 2349 
  void *memblock = (void *)0;
  #line 2351 
  blockpool = & devh->block_pool;
  #line 2353 
  if (blockpool->block_size != size) {
    #line 2355 
    memblock = vxge_os_dma_malloc(devh->pdev,(unsigned long)size,& dma_object->handle,& dma_object->acc_handle);
    #line 2359 
    if (memblock == (void *)0) 
                               #line 2360 
                               goto exit;
    #line 2362 
    dma_object->addr = pci_map_single(devh->pdev,memblock,(unsigned long)size,0);
    #line 2365 
    if ((long)(pci_dma_mapping_error(devh->pdev,dma_object->addr) != 0) != 0L) {
      #line 2367 
      vxge_os_dma_free(devh->pdev,memblock,& dma_object->acc_handle);
      #line 2369 
      memblock = (void *)0;
      #line 2370 
      goto exit;
    }
  }
  else {
    #line 2375 
    if (list_empty_0(& blockpool->free_block_list) == 0) {
      #line 2377 
      void *__mptr;
      #line 2377 
      __mptr = (void *)blockpool->free_block_list.next;
      #line 2376 
      entry = ((struct __vxge_hw_blockpool_entry *)__mptr);
    }
    #line 2381 
    if (entry != (struct __vxge_hw_blockpool_entry *)0) {
      #line 2382 
      list_del_0(& entry->item);
      #line 2383 
      dma_object->addr = entry->dma_addr;
      #line 2384 
      dma_object->handle = entry->dma_handle;
      #line 2385 
      dma_object->acc_handle = entry->acc_handle;
      #line 2386 
      memblock = entry->memblock;
      #line 2388 
      list_add_0(& entry->item,& blockpool->free_entry_list);
      #line 2390 
      (blockpool->pool_size) --;
    }
    #line 2393 
    if (memblock != (void *)0) 
                               #line 2394 
                               __vxge_hw_blockpool_blocks_add(blockpool);
  }
  #line 2396 
  exit: 
        #line 2396 
  ;
  #line 2397 
  return memblock;
}

#line 2404  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.c"
static void __vxge_hw_blockpool_blocks_remove(struct __vxge_hw_blockpool *blockpool)
{
  #line 2406 
  struct list_head *p;
  #line 2406 
  struct list_head *n;
  #line 2408 
  p = blockpool->free_block_list.next;
  #line 2408 
  n = p->next;
  #line 2408 
  while (& blockpool->free_block_list != p) {
    #line 2410 
    if (blockpool->pool_size < blockpool->pool_max) 
                                                    #line 2411 
                                                    break;
    #line 2413 
    pci_unmap_single((blockpool->hldev)->pdev,((struct __vxge_hw_blockpool_entry *)p)->dma_addr,(unsigned long)((struct __vxge_hw_blockpool_entry *)p)->length,0);
    #line 2419 
    vxge_os_dma_free((blockpool->hldev)->pdev,((struct __vxge_hw_blockpool_entry *)p)->memblock,& ((struct __vxge_hw_blockpool_entry *)p)->acc_handle);
    #line 2424 
    list_del_0(& ((struct __vxge_hw_blockpool_entry *)p)->item);
    #line 2426 
    list_add_0(p,& blockpool->free_entry_list);
    #line 2428 
    (blockpool->pool_size) --;
    #line 2408 
    p = n;
    #line 2408 
    n = p->next;
  }
  #line 2430 
  return;
}

#line 2437  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.c"
static void __vxge_hw_blockpool_free(struct __vxge_hw_device *devh, void *memblock, u32 size, struct vxge_hw_mempool_dma *dma_object)
{
  #line 2442 
  struct __vxge_hw_blockpool *blockpool;
  #line 2441 
  struct __vxge_hw_blockpool_entry *entry = (struct __vxge_hw_blockpool_entry *)0;
  #line 2443 
  enum vxge_hw_status status = 0;
  #line 2445 
  blockpool = & devh->block_pool;
  #line 2447 
  if (blockpool->block_size != size) {
    #line 2448 
    pci_unmap_single(devh->pdev,dma_object->addr,(unsigned long)size,0);
    #line 2450 
    vxge_os_dma_free(devh->pdev,memblock,& dma_object->acc_handle);
  }
  else {
    #line 2453 
    if (list_empty_0(& blockpool->free_entry_list) == 0) {
      #line 2455 
      void *__mptr;
      #line 2455 
      __mptr = (void *)blockpool->free_entry_list.next;
      #line 2454 
      entry = ((struct __vxge_hw_blockpool_entry *)__mptr);
    }
    #line 2459 
    if (entry == (struct __vxge_hw_blockpool_entry *)0) 
                                                        #line 2460 
                                                        entry = (struct __vxge_hw_blockpool_entry *)cif_vmalloc(56UL); else 
                                                                    #line 2463 
                                                                    list_del_0(& entry->item);
    #line 2465 
    if (entry != (struct __vxge_hw_blockpool_entry *)0) {
      #line 2466 
      entry->length = size;
      #line 2467 
      entry->memblock = memblock;
      #line 2468 
      entry->dma_addr = dma_object->addr;
      #line 2469 
      entry->acc_handle = dma_object->acc_handle;
      #line 2470 
      entry->dma_handle = dma_object->handle;
      #line 2471 
      list_add_0(& entry->item,& blockpool->free_block_list);
      #line 2473 
      (blockpool->pool_size) ++;
      #line 2474 
      status = VXGE_HW_OK;
    }
    else 
         #line 2476 
         status = VXGE_HW_ERR_OUT_OF_MEMORY;
    #line 2478 
    if (status == VXGE_HW_OK) 
                              #line 2479 
                              __vxge_hw_blockpool_blocks_remove(blockpool);
  }
  #line 2481 
  return;
}

#line 2486  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.c"
static void __vxge_hw_mempool_destroy(struct vxge_hw_mempool *mempool)
{
  #line 2488 
  u32 i;
  #line 2488 
  u32 j;
  #line 2489 
  struct __vxge_hw_device *devh = mempool->devh;
  #line 2491 
  i = 0U;
  #line 2491 
  while (mempool->memblocks_allocated > i) {
    {
      #line 2492 
      struct vxge_hw_mempool_dma *dma_object;
      #line 2497 
      dma_object = mempool->memblocks_dma_arr + (unsigned long)i;
      #line 2499 
      j = 0U;
      #line 2499 
      while (mempool->items_per_memblock > j) {
        {
          #line 2500 
          u32 index = mempool->items_per_memblock * i + j;
          #line 2503 
          if (mempool->items_current <= index) 
                                               #line 2504 
                                               break;
        }
        #line 2499 
        j ++;
      }
      #line 2507 
      cif_vfree(*(mempool->memblocks_priv_arr + (unsigned long)i));
      #line 2509 
      __vxge_hw_blockpool_free(devh,*(mempool->memblocks_arr + (unsigned long)i),mempool->memblock_size,dma_object);
    }
    #line 2491 
    i ++;
  }
  #line 2513 
  cif_vfree((void *)mempool->items_arr);
  #line 2514 
  cif_vfree((void *)mempool->memblocks_dma_arr);
  #line 2515 
  cif_vfree((void *)mempool->memblocks_priv_arr);
  #line 2516 
  cif_vfree((void *)mempool->memblocks_arr);
  #line 2517 
  cif_vfree((void *)mempool);
  #line 2518 
  return;
}

#line 2525  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.c"
static enum vxge_hw_status __vxge_hw_mempool_grow(struct vxge_hw_mempool *mempool, u32 num_allocate, u32 *num_allocated)
{
  #line 2528 
  u32 i;
  #line 2528 
  u32 first_time = (unsigned int)(mempool->memblocks_allocated == 0U);
  #line 2529 
  u32 n_items = mempool->items_per_memblock;
  #line 2530 
  u32 start_block_idx = mempool->memblocks_allocated;
  #line 2531 
  u32 end_block_idx = mempool->memblocks_allocated + num_allocate;
  #line 2532 
  enum vxge_hw_status status = 0;
  #line 2534 
  *num_allocated = 0U;
  #line 2536 
  if (mempool->memblocks_max < end_block_idx) {
    #line 2537 
    status = VXGE_HW_ERR_OUT_OF_MEMORY;
    #line 2538 
    goto exit;
  }
  #line 2541 
  i = start_block_idx;
  #line 2541 
  while (i < end_block_idx) {
    {
      #line 2542 
      u32 j;
      #line 2546 
      void *the_memblock;
      #line 2543 
      u32 is_last = (unsigned int)(end_block_idx + 4294967295U == i);
      #line 2544 
      struct vxge_hw_mempool_dma *dma_object = mempool->memblocks_dma_arr + (unsigned long)i;
      #line 2553 
      *(mempool->memblocks_priv_arr + (unsigned long)i) = cif_vzalloc(array_size((unsigned long)mempool->items_priv_size,
                 (unsigned long)n_items));
      #line 2555 
      if (*(mempool->memblocks_priv_arr + (unsigned long)i) == (void *)0) {
        #line 2556 
        status = VXGE_HW_ERR_OUT_OF_MEMORY;
        #line 2557 
        goto exit;
      }
      #line 2561 
      *(mempool->memblocks_arr + (unsigned long)i) = __vxge_hw_blockpool_malloc(mempool->devh,mempool->memblock_size,dma_object);
      #line 2564 
      if (*(mempool->memblocks_arr + (unsigned long)i) == (void *)0) {
        #line 2565 
        cif_vfree(*(mempool->memblocks_priv_arr + (unsigned long)i));
        #line 2566 
        status = VXGE_HW_ERR_OUT_OF_MEMORY;
        #line 2567 
        goto exit;
      }
      #line 2570 
      (*num_allocated) ++;
      #line 2571 
      (mempool->memblocks_allocated) ++;
      #line 2573 
      memset(*(mempool->memblocks_arr + (unsigned long)i),0,(unsigned long)mempool->memblock_size);
      #line 2575 
      the_memblock = *(mempool->memblocks_arr + (unsigned long)i);
      #line 2578 
      j = 0U;
      #line 2578 
      while (j < n_items) {
        {
          #line 2579 
          u32 index = i * n_items + j;
          #line 2581 
          if (first_time != 0U && mempool->items_initial <= index) 
                                                                   #line 2582 
                                                                   break;
          #line 2584 
          *(mempool->items_arr + (unsigned long)index) = (void *)((char *)the_memblock + (unsigned long)(mempool->item_size * j));
          #line 2588 
          if (mempool->item_func_alloc != (void (*)(struct vxge_hw_mempool *, u32 , struct vxge_hw_mempool_dma *, u32 , u32 ))0) 
            #line 2589 
            (*(mempool->item_func_alloc))(mempool,i,dma_object,index,is_last);
          #line 2592 
          mempool->items_current = index + 1U;
        }
        #line 2578 
        j ++;
      }
      #line 2595 
      if (first_time != 0U && mempool->items_current == mempool->items_initial) 
        #line 2597 
        break;
    }
    #line 2541 
    i ++;
  }
  #line 2599 
  exit: 
        #line 2599 
  ;
  #line 2600 
  return status;
}

#line 2611  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.c"
static struct vxge_hw_mempool *__vxge_hw_mempool_create(struct __vxge_hw_device *devh, u32 memblock_size, u32 item_size, u32 items_priv_size, u32 items_initial, u32 items_max, struct vxge_hw_mempool_cbs *mp_callback, void *userdata)
{
  #line 2621 
  u32 memblocks_to_allocate;
  #line 2623 
  u32 allocated;
  #line 2620 
  enum vxge_hw_status status = 0;
  #line 2622 
  struct vxge_hw_mempool *mempool = (struct vxge_hw_mempool *)0;
  #line 2625 
  if (memblock_size < item_size) {
    #line 2626 
    status = VXGE_HW_FAIL;
    #line 2627 
    goto exit;
  }
  #line 2630 
  mempool = (struct vxge_hw_mempool *)cif_vzalloc(96UL);
  #line 2631 
  if (mempool == (struct vxge_hw_mempool *)0) {
    #line 2632 
    status = VXGE_HW_ERR_OUT_OF_MEMORY;
    #line 2633 
    goto exit;
  }
  #line 2636 
  mempool->devh = devh;
  #line 2637 
  mempool->memblock_size = memblock_size;
  #line 2638 
  mempool->items_max = items_max;
  #line 2639 
  mempool->items_initial = items_initial;
  #line 2640 
  mempool->item_size = item_size;
  #line 2641 
  mempool->items_priv_size = items_priv_size;
  #line 2642 
  mempool->item_func_alloc = mp_callback->item_func_alloc;
  #line 2643 
  mempool->userdata = userdata;
  #line 2645 
  mempool->memblocks_allocated = 0U;
  #line 2647 
  mempool->items_per_memblock = memblock_size / item_size;
  #line 2649 
  mempool->memblocks_max = ((mempool->items_per_memblock + items_max) + 4294967295U) / mempool->items_per_memblock;
  #line 2653 
  mempool->memblocks_arr = (void **)cif_vzalloc(array_size(8UL,(unsigned long)mempool->memblocks_max));
  #line 2655 
  if (mempool->memblocks_arr == (void **)0) {
    #line 2656 
    __vxge_hw_mempool_destroy(mempool);
    #line 2657 
    status = VXGE_HW_ERR_OUT_OF_MEMORY;
    #line 2658 
    mempool = (struct vxge_hw_mempool *)0;
    #line 2659 
    goto exit;
  }
  #line 2663 
  mempool->memblocks_priv_arr = (void **)cif_vzalloc(array_size(8UL,(unsigned long)mempool->memblocks_max));
  #line 2665 
  if (mempool->memblocks_priv_arr == (void **)0) {
    #line 2666 
    __vxge_hw_mempool_destroy(mempool);
    #line 2667 
    status = VXGE_HW_ERR_OUT_OF_MEMORY;
    #line 2668 
    mempool = (struct vxge_hw_mempool *)0;
    #line 2669 
    goto exit;
  }
  #line 2673 
  mempool->memblocks_dma_arr = (struct vxge_hw_mempool_dma *)cif_vzalloc(array_size(24UL,(unsigned long)mempool->memblocks_max));
  #line 2676 
  if (mempool->memblocks_dma_arr == (struct vxge_hw_mempool_dma *)0) {
    #line 2677 
    __vxge_hw_mempool_destroy(mempool);
    #line 2678 
    status = VXGE_HW_ERR_OUT_OF_MEMORY;
    #line 2679 
    mempool = (struct vxge_hw_mempool *)0;
    #line 2680 
    goto exit;
  }
  #line 2684 
  mempool->items_arr = (void **)cif_vzalloc(array_size(8UL,(unsigned long)mempool->items_max));
  #line 2686 
  if (mempool->items_arr == (void **)0) {
    #line 2687 
    __vxge_hw_mempool_destroy(mempool);
    #line 2688 
    status = VXGE_HW_ERR_OUT_OF_MEMORY;
    #line 2689 
    mempool = (struct vxge_hw_mempool *)0;
    #line 2690 
    goto exit;
  }
  #line 2694 
  memblocks_to_allocate = ((mempool->items_initial + mempool->items_per_memblock) + 4294967295U) / mempool->items_per_memblock;
  #line 2699 
  status = __vxge_hw_mempool_grow(mempool,memblocks_to_allocate,& allocated);
  #line 2701 
  if (status != VXGE_HW_OK) {
    #line 2702 
    __vxge_hw_mempool_destroy(mempool);
    #line 2703 
    status = VXGE_HW_ERR_OUT_OF_MEMORY;
    #line 2704 
    mempool = (struct vxge_hw_mempool *)0;
    #line 2705 
    goto exit;
  }
  #line 2708 
  exit: 
        #line 2708 
  ;
  #line 2709 
  return mempool;
}

#line 2716  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.c"
static enum vxge_hw_status __vxge_hw_ring_abort(struct __vxge_hw_ring *ring)
{
  #line 2718 
  void *rxdh;
  #line 2719 
  struct __vxge_hw_channel *channel;
  #line 2721 
  channel = & ring->channel;
  #line 2723 
  while (1) {
    #line 2724 
    vxge_hw_channel_dtr_try_complete(channel,& rxdh);
    #line 2726 
    if (rxdh == (void *)0) 
                           #line 2727 
                           break;
    #line 2729 
    vxge_hw_channel_dtr_complete(channel);
    #line 2731 
    if (ring->rxd_term != (void (*)(void *, enum vxge_hw_rxd_state , void *))0) 
      #line 2732 
      (*(ring->rxd_term))(rxdh,(enum vxge_hw_rxd_state)VXGE_HW_RXD_STATE_POSTED,channel->userdata);
    #line 2735 
    vxge_hw_channel_dtr_free(channel,rxdh);
  }
  #line 2738 
  return VXGE_HW_OK;
}

#line 2745  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.c"
static enum vxge_hw_status __vxge_hw_ring_reset(struct __vxge_hw_ring *ring)
{
  #line 2748 
  struct __vxge_hw_channel *channel;
  #line 2747 
  enum vxge_hw_status status = 0;
  #line 2750 
  channel = & ring->channel;
  #line 2752 
  __vxge_hw_ring_abort(ring);
  #line 2754 
  status = __vxge_hw_channel_reset(channel);
  #line 2756 
  if (status != VXGE_HW_OK) 
                            #line 2757 
                            goto exit;
  #line 2759 
  if (ring->rxd_init != (enum vxge_hw_status (*)(void *, void *))0) {
    #line 2760 
    status = vxge_hw_ring_replenish(ring);
    #line 2761 
    if (status != VXGE_HW_OK) 
                              #line 2762 
                              goto exit;
  }
  #line 2764 
  exit: 
        #line 2764 
  ;
  #line 2765 
  return status;
}

#line 2773  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.c"
static enum vxge_hw_status __vxge_hw_ring_delete(struct __vxge_hw_vpath_handle *vp)
{
  #line 2775 
  struct __vxge_hw_ring *ring = (vp->vpath)->ringh;
  #line 2777 
  __vxge_hw_ring_abort(ring);
  #line 2779 
  if (ring->mempool != (struct vxge_hw_mempool *)0) 
                                                    #line 2780 
                                                    __vxge_hw_mempool_destroy(ring->mempool);
  #line 2782 
  (vp->vpath)->ringh = (struct __vxge_hw_ring *)0;
  #line 2783 
  __vxge_hw_channel_free(& ring->channel);
  #line 2785 
  return VXGE_HW_OK;
}

#line 2793  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.c"
static enum vxge_hw_status __vxge_hw_ring_create(struct __vxge_hw_vpath_handle *vp, struct vxge_hw_ring_attr *attr)
{
  #line 2797 
  struct __vxge_hw_ring *ring;
  #line 2798 
  u32 ring_length;
  #line 2799 
  struct vxge_hw_ring_config *config;
  #line 2800 
  struct __vxge_hw_device *hldev;
  #line 2801 
  u32 vp_id;
  #line 2796 
  enum vxge_hw_status status = 0;
  #line 2802 
  struct vxge_hw_mempool_cbs ring_mp_callback = {.item_func_alloc = & __vxge_hw_ring_mempool_item_alloc};
  #line 2806 
  if (vp == (struct __vxge_hw_vpath_handle *)0 || attr == (struct vxge_hw_ring_attr *)0) {
    #line 2807 
    status = VXGE_HW_FAIL;
    #line 2808 
    goto exit;
  }
  #line 2811 
  hldev = (vp->vpath)->hldev;
  #line 2812 
  vp_id = (vp->vpath)->vp_id;
  #line 2814 
  config = & hldev->config.vp_config[vp_id].ring;
  #line 2816 
  ring_length = config->ring_blocks * vxge_hw_ring_rxds_per_block_get(config->buffer_mode);
  #line 2819 
  ring = (struct __vxge_hw_ring *)__vxge_hw_channel_allocate(vp,(enum __vxge_hw_channel_type)VXGE_HW_CHANNEL_TYPE_RING,ring_length,attr->per_rxd_space,attr->userdata);
  #line 2824 
  if (ring == (struct __vxge_hw_ring *)0) {
    #line 2825 
    status = VXGE_HW_ERR_OUT_OF_MEMORY;
    #line 2826 
    goto exit;
  }
  #line 2829 
  (vp->vpath)->ringh = ring;
  #line 2830 
  ring->vp_id = vp_id;
  #line 2831 
  ring->vp_reg = (vp->vpath)->vp_reg;
  #line 2832 
  ring->common_reg = hldev->common_reg;
  #line 2833 
  ring->stats = & ((vp->vpath)->sw_stats)->ring_stats;
  #line 2834 
  ring->config = config;
  #line 2835 
  ring->callback = attr->callback;
  #line 2836 
  ring->rxd_init = attr->rxd_init;
  #line 2837 
  ring->rxd_term = attr->rxd_term;
  #line 2838 
  ring->buffer_mode = config->buffer_mode;
  #line 2839 
  ring->tim_rti_cfg1_saved = (vp->vpath)->tim_rti_cfg1_saved;
  #line 2840 
  ring->tim_rti_cfg3_saved = (vp->vpath)->tim_rti_cfg3_saved;
  #line 2841 
  ring->rxds_limit = config->rxds_limit;
  #line 2843 
  ring->rxd_size = vxge_hw_ring_rxd_size_get(config->buffer_mode);
  #line 2844 
  ring->rxd_priv_size = attr->per_rxd_space + 24U;
  #line 2846 
  ring->per_rxd_space = attr->per_rxd_space;
  #line 2848 
  ring->rxd_priv_size = (ring->rxd_priv_size + 127U) & 4294967168U;
  #line 2854 
  ring->rxds_per_block = vxge_hw_ring_rxds_per_block_get(config->buffer_mode);
  #line 2858 
  ring->rxdblock_priv_size = ring->rxd_priv_size * ring->rxds_per_block;
  #line 2859 
  ring->mempool = __vxge_hw_mempool_create(hldev,4096U,4096U,ring->rxdblock_priv_size,(ring->config)->ring_blocks,(ring->config)->ring_blocks,& ring_mp_callback,(void *)ring);
  #line 2867 
  if (ring->mempool == (struct vxge_hw_mempool *)0) {
    #line 2868 
    __vxge_hw_ring_delete(vp);
    #line 2869 
    return VXGE_HW_ERR_OUT_OF_MEMORY;
  }
  #line 2872 
  status = __vxge_hw_channel_initialize(& ring->channel);
  #line 2873 
  if (status != VXGE_HW_OK) {
    #line 2874 
    __vxge_hw_ring_delete(vp);
    #line 2875 
    goto exit;
  }
  #line 2885 
  if (ring->rxd_init != (enum vxge_hw_status (*)(void *, void *))0) {
    #line 2886 
    status = vxge_hw_ring_replenish(ring);
    #line 2887 
    if (status != VXGE_HW_OK) {
      #line 2888 
      __vxge_hw_ring_delete(vp);
      #line 2889 
      goto exit;
    }
  }
  #line 2895 
  (ring->stats)->common_stats.usage_cnt = 0U;
  #line 2896 
  exit: 
        #line 2896 
  ;
  #line 2897 
  return status;
}

#line 2905  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.c"
enum vxge_hw_status vxge_hw_device_config_default_get(struct vxge_hw_device_config *device_config)
{
  #line 2907 
  u32 i;
  #line 2909 
  device_config->dma_blockpool_initial = 0U;
  #line 2911 
  device_config->dma_blockpool_max = 4096U;
  #line 2912 
  device_config->intr_mode = (unsigned int)0U;
  #line 2913 
  device_config->rth_en = (unsigned int)0U;
  #line 2914 
  device_config->rth_it_type = (unsigned int)0U;
  #line 2915 
  device_config->device_poll_millis = 1000U;
  #line 2916 
  device_config->rts_mac_en = (unsigned int)0U;
  #line 2918 
  i = 0U;
  #line 2918 
  while (i <= 16U) {
    #line 2919 
    device_config->vp_config[i].vp_id = i;
    #line 2921 
    device_config->vp_config[i].min_bandwidth = 0U;
    #line 2924 
    device_config->vp_config[i].ring.enable = 1U;
    #line 2926 
    device_config->vp_config[i].ring.ring_blocks = 2U;
    #line 2929 
    device_config->vp_config[i].ring.buffer_mode = 1U;
    #line 2932 
    device_config->vp_config[i].ring.scatter_mode = 4294967295U;
    #line 2935 
    device_config->vp_config[i].ring.rxds_limit = 44ULL;
    #line 2938 
    device_config->vp_config[i].fifo.enable = 1U;
    #line 2940 
    device_config->vp_config[i].fifo.fifo_blocks = 2U;
    #line 2943 
    device_config->vp_config[i].fifo.max_frags = 256U;
    #line 2946 
    device_config->vp_config[i].fifo.memblock_size = 8096U;
    #line 2949 
    device_config->vp_config[i].fifo.alignment_size = 128U;
    #line 2952 
    device_config->vp_config[i].fifo.intr = 0U;
    #line 2955 
    device_config->vp_config[i].fifo.no_snoop_bits = 0U;
    #line 2957 
    device_config->vp_config[i].tti.intr_enable = 0U;
    #line 2960 
    device_config->vp_config[i].tti.btimer_val = 4294967295U;
    #line 2963 
    device_config->vp_config[i].tti.timer_ac_en = 4294967295U;
    #line 2966 
    device_config->vp_config[i].tti.timer_ci_en = 4294967295U;
    #line 2969 
    device_config->vp_config[i].tti.timer_ri_en = 4294967295U;
    #line 2972 
    device_config->vp_config[i].tti.rtimer_val = 4294967295U;
    #line 2975 
    device_config->vp_config[i].tti.util_sel = 4294967295U;
    #line 2978 
    device_config->vp_config[i].tti.ltimer_val = 4294967295U;
    #line 2981 
    device_config->vp_config[i].tti.urange_a = 4294967295U;
    #line 2984 
    device_config->vp_config[i].tti.uec_a = 4294967295U;
    #line 2987 
    device_config->vp_config[i].tti.urange_b = 4294967295U;
    #line 2990 
    device_config->vp_config[i].tti.uec_b = 4294967295U;
    #line 2993 
    device_config->vp_config[i].tti.urange_c = 4294967295U;
    #line 2996 
    device_config->vp_config[i].tti.uec_c = 4294967295U;
    #line 2999 
    device_config->vp_config[i].tti.uec_d = 4294967295U;
    #line 3002 
    device_config->vp_config[i].rti.intr_enable = 0U;
    #line 3005 
    device_config->vp_config[i].rti.btimer_val = 4294967295U;
    #line 3008 
    device_config->vp_config[i].rti.timer_ac_en = 4294967295U;
    #line 3011 
    device_config->vp_config[i].rti.timer_ci_en = 4294967295U;
    #line 3014 
    device_config->vp_config[i].rti.timer_ri_en = 4294967295U;
    #line 3017 
    device_config->vp_config[i].rti.rtimer_val = 4294967295U;
    #line 3020 
    device_config->vp_config[i].rti.util_sel = 4294967295U;
    #line 3023 
    device_config->vp_config[i].rti.ltimer_val = 4294967295U;
    #line 3026 
    device_config->vp_config[i].rti.urange_a = 4294967295U;
    #line 3029 
    device_config->vp_config[i].rti.uec_a = 4294967295U;
    #line 3032 
    device_config->vp_config[i].rti.urange_b = 4294967295U;
    #line 3035 
    device_config->vp_config[i].rti.uec_b = 4294967295U;
    #line 3038 
    device_config->vp_config[i].rti.urange_c = 4294967295U;
    #line 3041 
    device_config->vp_config[i].rti.uec_c = 4294967295U;
    #line 3044 
    device_config->vp_config[i].rti.uec_d = 4294967295U;
    #line 3047 
    device_config->vp_config[i].mtu = 4294967295U;
    #line 3050 
    device_config->vp_config[i].rpa_strip_vlan_tag = 4294967295U;
    #line 2918 
    i ++;
  }
  #line 3054 
  return VXGE_HW_OK;
}

#line 3062  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.c"
static enum vxge_hw_status __vxge_hw_vpath_swapper_set(struct vxge_hw_vpath_reg *vpath_reg)
{
  #line 3065 
  u64 val64;
  #line 3067 
  val64 = readq((void *)(& vpath_reg->vpath_general_cfg1));
  #line 3068 
  ldv_inline_asm();
  #line 3069 
  val64 |= 281474976710656ULL;
  #line 3070 
  writeq(val64,(void *)(& vpath_reg->vpath_general_cfg1));
  #line 3071 
  ldv_inline_asm();
  #line 3073 
  return VXGE_HW_OK;
}

#line 3081  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.c"
static enum vxge_hw_status __vxge_hw_kdfc_swapper_set(struct vxge_hw_legacy_reg *legacy_reg, struct vxge_hw_vpath_reg *vpath_reg)
{
  #line 3084 
  u64 val64;
  #line 3086 
  val64 = readq((void *)(& legacy_reg->pifm_wr_swap_en));
  #line 3088 
  if (val64 == 18446744073709551615ULL) {
    #line 3089 
    val64 = readq((void *)(& vpath_reg->kdfcctl_cfg0));
    #line 3090 
    ldv_inline_asm();
    #line 3092 
    val64 |= 8070450532247928832ULL;
    #line 3096 
    writeq(val64,(void *)(& vpath_reg->kdfcctl_cfg0));
    #line 3097 
    ldv_inline_asm();
  }
  #line 3100 
  return VXGE_HW_OK;
}

#line 3107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.c"
enum vxge_hw_status vxge_hw_mgmt_reg_read(struct __vxge_hw_device *hldev, enum vxge_hw_mgmt_reg_type type, u32 index, u32 offset, u64 *value)
{
  #line 3111 
  enum vxge_hw_status status = 0;
  #line 3113 
  if (hldev == (struct __vxge_hw_device *)0 || hldev->magic != 305419896U) {
    #line 3114 
    status = VXGE_HW_ERR_INVALID_DEVICE;
    #line 3115 
    goto exit;
  }
  #line 3118 
  switch ((unsigned int)type) {
    #line 3119 
    case (unsigned int)0: 
                          #line 3119 
    ;
    #line 3120 
    if (offset > 64U) {
      #line 3121 
      status = VXGE_HW_ERR_INVALID_OFFSET;
      #line 3122 
      break;
    }
    #line 3124 
    *value = readq((void *)hldev->legacy_reg + (unsigned long)offset);
    #line 3125 
    break;
    #line 3126 
    case (unsigned int)1: 
                          #line 3126 
    ;
    #line 3127 
    if (offset > 1208U) {
      #line 3128 
      status = VXGE_HW_ERR_INVALID_OFFSET;
      #line 3129 
      break;
    }
    #line 3131 
    *value = readq((void *)hldev->toc_reg + (unsigned long)offset);
    #line 3132 
    break;
    #line 3133 
    case (unsigned int)2: 
                          #line 3133 
    ;
    #line 3134 
    if (offset > 4656U) {
      #line 3135 
      status = VXGE_HW_ERR_INVALID_OFFSET;
      #line 3136 
      break;
    }
    #line 3138 
    *value = readq((void *)hldev->common_reg + (unsigned long)offset);
    #line 3139 
    break;
    #line 3140 
    case (unsigned int)3: 
                          #line 3140 
    ;
    #line 3141 
    if ((hldev->access_rights & 4U) == 0U) {
      #line 3143 
      status = VXGE_HW_ERR_PRIVILEGED_OPERATION;
      #line 3144 
      break;
    }
    #line 3146 
    if (offset > 44168U) {
      #line 3147 
      status = VXGE_HW_ERR_INVALID_OFFSET;
      #line 3148 
      break;
    }
    #line 3150 
    *value = readq((void *)hldev->mrpcim_reg + (unsigned long)offset);
    #line 3151 
    break;
    #line 3152 
    case (unsigned int)4: 
                          #line 3152 
    ;
    #line 3153 
    if ((hldev->access_rights & 2U) == 0U) {
      #line 3155 
      status = VXGE_HW_ERR_PRIVILEGED_OPERATION;
      #line 3156 
      break;
    }
    #line 3158 
    if (index > 16U) {
      #line 3159 
      status = VXGE_HW_ERR_INVALID_INDEX;
      #line 3160 
      break;
    }
    #line 3162 
    if (offset > 2320U) {
      #line 3163 
      status = VXGE_HW_ERR_INVALID_OFFSET;
      #line 3164 
      break;
    }
    #line 3166 
    *value = readq((void *)hldev->srpcim_reg[index] + (unsigned long)offset);
    #line 3168 
    break;
    #line 3169 
    case (unsigned int)5: 
                          #line 3169 
    ;
    #line 3170 
    if (index > 16U || (hldev->vpath_assignments & (9223372036854775808ULL >> index)) == 0ULL) {
      #line 3172 
      status = VXGE_HW_ERR_INVALID_INDEX;
      #line 3173 
      break;
    }
    #line 3175 
    if (offset > 896U) {
      #line 3176 
      status = VXGE_HW_ERR_INVALID_OFFSET;
      #line 3177 
      break;
    }
    #line 3179 
    *value = readq((void *)hldev->vpmgmt_reg[index] + (unsigned long)offset);
    #line 3181 
    break;
    #line 3182 
    case (unsigned int)6: 
                          #line 3182 
    ;
    #line 3183 
    if (index > 16U || (hldev->vpath_assignments & (9223372036854775808ULL >> index)) == 0ULL) {
      #line 3185 
      status = VXGE_HW_ERR_INVALID_INDEX;
      #line 3186 
      break;
    }
    #line 3188 
    if (index > 16U) {
      #line 3189 
      status = VXGE_HW_ERR_INVALID_INDEX;
      #line 3190 
      break;
    }
    #line 3192 
    if (offset > 9792U) {
      #line 3193 
      status = VXGE_HW_ERR_INVALID_OFFSET;
      #line 3194 
      break;
    }
    #line 3196 
    *value = readq((void *)hldev->vpath_reg[index] + (unsigned long)offset);
    #line 3198 
    break;
    #line 3199 
    default: 
             #line 3199 
    ;
    #line 3200 
    status = VXGE_HW_ERR_INVALID_TYPE;
    #line 3201 
    break;
  }
  #line 3204 
  exit: 
        #line 3204 
  ;
  #line 3205 
  return status;
}

#line 3212  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.c"
enum vxge_hw_status vxge_hw_vpath_strip_fcs_check(struct __vxge_hw_device *hldev, u64 vpath_mask)
{
  #line 3214 
  struct vxge_hw_vpmgmt_reg *vpmgmt_reg;
  #line 3215 
  int i = 0;
  #line 3215 
  int j = 0;
  #line 3217 
  i = 0;
  #line 3217 
  while (i <= 16) {
    #line 3218 
    if (((9223372036854775808ULL >> i) & vpath_mask) == 0ULL) 
                                                              #line 3219 
                                                              goto __Cont;
    #line 3220 
    vpmgmt_reg = hldev->vpmgmt_reg[i];
    #line 3221 
    j = 0;
    #line 3221 
    while (j <= 1) {
      #line 3222 
      if ((readq((void *)(& vpmgmt_reg->rxmac_cfg0_port_vpmgmt_clone[j])) & 72057594037927936ULL) != 0ULL) 
        #line 3224 
        return VXGE_HW_FAIL;
      #line 3221 
      j ++;
    }
    #line 3217 
    __Cont: 
            #line 3217 
    i ++;
  }
  #line 3227 
  return VXGE_HW_OK;
}

#line 3233  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.c"
enum vxge_hw_status vxge_hw_mgmt_reg_write(struct __vxge_hw_device *hldev, enum vxge_hw_mgmt_reg_type type, u32 index, u32 offset, u64 value)
{
  #line 3237 
  enum vxge_hw_status status = 0;
  #line 3239 
  if (hldev == (struct __vxge_hw_device *)0 || hldev->magic != 305419896U) {
    #line 3240 
    status = VXGE_HW_ERR_INVALID_DEVICE;
    #line 3241 
    goto exit;
  }
  #line 3244 
  switch ((unsigned int)type) {
    #line 3245 
    case (unsigned int)0: 
                          #line 3245 
    ;
    #line 3246 
    if (offset > 64U) {
      #line 3247 
      status = VXGE_HW_ERR_INVALID_OFFSET;
      #line 3248 
      break;
    }
    #line 3250 
    writeq(value,(void *)hldev->legacy_reg + (unsigned long)offset);
    #line 3251 
    break;
    #line 3252 
    case (unsigned int)1: 
                          #line 3252 
    ;
    #line 3253 
    if (offset > 1208U) {
      #line 3254 
      status = VXGE_HW_ERR_INVALID_OFFSET;
      #line 3255 
      break;
    }
    #line 3257 
    writeq(value,(void *)hldev->toc_reg + (unsigned long)offset);
    #line 3258 
    break;
    #line 3259 
    case (unsigned int)2: 
                          #line 3259 
    ;
    #line 3260 
    if (offset > 4656U) {
      #line 3261 
      status = VXGE_HW_ERR_INVALID_OFFSET;
      #line 3262 
      break;
    }
    #line 3264 
    writeq(value,(void *)hldev->common_reg + (unsigned long)offset);
    #line 3265 
    break;
    #line 3266 
    case (unsigned int)3: 
                          #line 3266 
    ;
    #line 3267 
    if ((hldev->access_rights & 4U) == 0U) {
      #line 3269 
      status = VXGE_HW_ERR_PRIVILEGED_OPERATION;
      #line 3270 
      break;
    }
    #line 3272 
    if (offset > 44168U) {
      #line 3273 
      status = VXGE_HW_ERR_INVALID_OFFSET;
      #line 3274 
      break;
    }
    #line 3276 
    writeq(value,(void *)hldev->mrpcim_reg + (unsigned long)offset);
    #line 3277 
    break;
    #line 3278 
    case (unsigned int)4: 
                          #line 3278 
    ;
    #line 3279 
    if ((hldev->access_rights & 2U) == 0U) {
      #line 3281 
      status = VXGE_HW_ERR_PRIVILEGED_OPERATION;
      #line 3282 
      break;
    }
    #line 3284 
    if (index > 16U) {
      #line 3285 
      status = VXGE_HW_ERR_INVALID_INDEX;
      #line 3286 
      break;
    }
    #line 3288 
    if (offset > 2320U) {
      #line 3289 
      status = VXGE_HW_ERR_INVALID_OFFSET;
      #line 3290 
      break;
    }
    #line 3292 
    writeq(value,(void *)hldev->srpcim_reg[index] + (unsigned long)offset);
    #line 3295 
    break;
    #line 3296 
    case (unsigned int)5: 
                          #line 3296 
    ;
    #line 3297 
    if (index > 16U || (hldev->vpath_assignments & (9223372036854775808ULL >> index)) == 0ULL) {
      #line 3299 
      status = VXGE_HW_ERR_INVALID_INDEX;
      #line 3300 
      break;
    }
    #line 3302 
    if (offset > 896U) {
      #line 3303 
      status = VXGE_HW_ERR_INVALID_OFFSET;
      #line 3304 
      break;
    }
    #line 3306 
    writeq(value,(void *)hldev->vpmgmt_reg[index] + (unsigned long)offset);
    #line 3308 
    break;
    #line 3309 
    case (unsigned int)6: 
                          #line 3309 
    ;
    #line 3310 
    if (index > 16U || (hldev->vpath_assignments & (9223372036854775808ULL >> index)) == 0ULL) {
      #line 3312 
      status = VXGE_HW_ERR_INVALID_INDEX;
      #line 3313 
      break;
    }
    #line 3315 
    if (offset > 9792U) {
      #line 3316 
      status = VXGE_HW_ERR_INVALID_OFFSET;
      #line 3317 
      break;
    }
    #line 3319 
    writeq(value,(void *)hldev->vpath_reg[index] + (unsigned long)offset);
    #line 3321 
    break;
    #line 3322 
    default: 
             #line 3322 
    ;
    #line 3323 
    status = VXGE_HW_ERR_INVALID_TYPE;
    #line 3324 
    break;
  }
  #line 3326 
  exit: 
        #line 3326 
  ;
  #line 3327 
  return status;
}

#line 3334  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.c"
static enum vxge_hw_status __vxge_hw_fifo_abort(struct __vxge_hw_fifo *fifo)
{
  #line 3336 
  void *txdlh;
  #line 3338 
  while (1) {
    #line 3339 
    vxge_hw_channel_dtr_try_complete(& fifo->channel,& txdlh);
    #line 3341 
    if (txdlh == (void *)0) 
                            #line 3342 
                            break;
    #line 3344 
    vxge_hw_channel_dtr_complete(& fifo->channel);
    #line 3346 
    if (fifo->txdl_term != (void (*)(void *, enum vxge_hw_txdl_state , void *))0) 
      #line 3347 
      (*(fifo->txdl_term))(txdlh,(enum vxge_hw_txdl_state)VXGE_HW_TXDL_STATE_POSTED,fifo->channel.userdata);
    #line 3352 
    vxge_hw_channel_dtr_free(& fifo->channel,txdlh);
  }
  #line 3355 
  return VXGE_HW_OK;
}

#line 3362  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.c"
static enum vxge_hw_status __vxge_hw_fifo_reset(struct __vxge_hw_fifo *fifo)
{
  #line 3364 
  enum vxge_hw_status status = 0;
  #line 3366 
  __vxge_hw_fifo_abort(fifo);
  #line 3367 
  status = __vxge_hw_channel_reset(& fifo->channel);
  #line 3369 
  return status;
}

#line 3377  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.c"
static enum vxge_hw_status __vxge_hw_fifo_delete(struct __vxge_hw_vpath_handle *vp)
{
  #line 3379 
  struct __vxge_hw_fifo *fifo = (vp->vpath)->fifoh;
  #line 3381 
  __vxge_hw_fifo_abort(fifo);
  #line 3383 
  if (fifo->mempool != (struct vxge_hw_mempool *)0) 
                                                    #line 3384 
                                                    __vxge_hw_mempool_destroy(fifo->mempool);
  #line 3386 
  (vp->vpath)->fifoh = (struct __vxge_hw_fifo *)0;
  #line 3388 
  __vxge_hw_channel_free(& fifo->channel);
  #line 3390 
  return VXGE_HW_OK;
}

#line 3400  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.c"
static void __vxge_hw_fifo_mempool_item_alloc(struct vxge_hw_mempool *mempoolh, u32 memblock_index, struct vxge_hw_mempool_dma *dma_object, u32 index, u32 is_last)
{
  #line 3405 
  u32 memblock_item_idx;
  #line 3406 
  struct __vxge_hw_fifo_txdl_priv *txdl_priv;
  #line 3407 
  struct vxge_hw_fifo_txd *txdp = (struct vxge_hw_fifo_txd *)*(mempoolh->items_arr + (unsigned long)index);
  #line 3409 
  struct __vxge_hw_fifo *fifo = (struct __vxge_hw_fifo *)mempoolh->userdata;
  #line 3411 
  void *memblock = *(mempoolh->memblocks_arr + (unsigned long)memblock_index);
  #line 3415 
  txdp->host_control = (unsigned long long)__vxge_hw_mempool_item_priv(mempoolh,memblock_index,(void *)txdp,
                                  & memblock_item_idx);
  #line 3419 
  txdl_priv = __vxge_hw_fifo_txdl_priv(fifo,txdp);
  #line 3423 
  *(fifo->channel.reserve_arr + (unsigned long)((fifo->channel.reserve_ptr - index) + 4294967295U)) = (void *)txdp;
  #line 3426 
  txdl_priv->dma_offset = (char *)txdp - (char *)memblock;
  #line 3427 
  txdl_priv->dma_addr = dma_object->addr + (unsigned long long)txdl_priv->dma_offset;
  #line 3428 
  txdl_priv->dma_handle = dma_object->handle;
  #line 3429 
  txdl_priv->memblock = memblock;
  #line 3430 
  txdl_priv->first_txdp = txdp;
  #line 3431 
  txdl_priv->next_txdl_priv = (struct __vxge_hw_fifo_txdl_priv *)0;
  #line 3432 
  txdl_priv->alloc_frags = 0U;
  #line 3433 
  return;
}

#line 3440  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.c"
static enum vxge_hw_status __vxge_hw_fifo_create(struct __vxge_hw_vpath_handle *vp, struct vxge_hw_fifo_attr *attr)
{
  #line 3444 
  struct __vxge_hw_fifo *fifo;
  #line 3445 
  struct vxge_hw_fifo_config *config;
  #line 3446 
  u32 txdl_size;
  #line 3446 
  u32 txdl_per_memblock;
  #line 3447 
  struct vxge_hw_mempool_cbs fifo_mp_callback;
  #line 3448 
  struct __vxge_hw_virtualpath *vpath;
  #line 3443 
  enum vxge_hw_status status = 0;
  #line 3450 
  if (vp == (struct __vxge_hw_vpath_handle *)0 || attr == (struct vxge_hw_fifo_attr *)0) {
    #line 3451 
    status = VXGE_HW_ERR_INVALID_HANDLE;
    #line 3452 
    goto exit;
  }
  #line 3454 
  vpath = vp->vpath;
  #line 3455 
  config = & (vpath->hldev)->config.vp_config[vpath->vp_id].fifo;
  #line 3457 
  txdl_size = config->max_frags * 32U;
  #line 3459 
  txdl_per_memblock = config->memblock_size / txdl_size;
  #line 3461 
  fifo = (struct __vxge_hw_fifo *)__vxge_hw_channel_allocate(vp,(enum __vxge_hw_channel_type)VXGE_HW_CHANNEL_TYPE_FIFO,config->fifo_blocks * txdl_per_memblock,attr->per_txdl_space,attr->userdata);
  #line 3466 
  if (fifo == (struct __vxge_hw_fifo *)0) {
    #line 3467 
    status = VXGE_HW_ERR_OUT_OF_MEMORY;
    #line 3468 
    goto exit;
  }
  #line 3471 
  vpath->fifoh = fifo;
  #line 3472 
  fifo->nofl_db = vpath->nofl_db;
  #line 3474 
  fifo->vp_id = vpath->vp_id;
  #line 3475 
  fifo->vp_reg = vpath->vp_reg;
  #line 3476 
  fifo->stats = & (vpath->sw_stats)->fifo_stats;
  #line 3478 
  fifo->config = config;
  #line 3481 
  fifo->interrupt_type = 65536ULL;
  #line 3482 
  fifo->tim_tti_cfg1_saved = vpath->tim_tti_cfg1_saved;
  #line 3483 
  fifo->tim_tti_cfg3_saved = vpath->tim_tti_cfg3_saved;
  #line 3485 
  if ((fifo->config)->intr != 0U) 
                                  #line 3486 
                                  fifo->interrupt_type = 131072ULL;
  #line 3488 
  fifo->no_snoop_bits = config->no_snoop_bits;
  #line 3510 
  fifo->priv_size = attr->per_txdl_space + 120U;
  #line 3512 
  fifo->priv_size = (fifo->priv_size + 127U) & 4294967168U;
  #line 3515 
  fifo->per_txdl_space = attr->per_txdl_space;
  #line 3518 
  fifo->txdl_size = txdl_size;
  #line 3519 
  fifo->txdl_per_memblock = txdl_per_memblock;
  #line 3521 
  fifo->txdl_term = attr->txdl_term;
  #line 3522 
  fifo->callback = attr->callback;
  #line 3524 
  if (fifo->txdl_per_memblock == 0U) {
    #line 3525 
    __vxge_hw_fifo_delete(vp);
    #line 3526 
    status = VXGE_HW_ERR_INVALID_BLOCK_SIZE;
    #line 3527 
    goto exit;
  }
  #line 3530 
  fifo_mp_callback.item_func_alloc = & __vxge_hw_fifo_mempool_item_alloc;
  #line 3532 
  fifo->mempool = __vxge_hw_mempool_create(vpath->hldev,(fifo->config)->memblock_size,fifo->txdl_size,fifo->priv_size,(fifo->config)->fifo_blocks * fifo->txdl_per_memblock,(fifo->config)->fifo_blocks * fifo->txdl_per_memblock,& fifo_mp_callback,(void *)fifo);
  #line 3542 
  if (fifo->mempool == (struct vxge_hw_mempool *)0) {
    #line 3543 
    __vxge_hw_fifo_delete(vp);
    #line 3544 
    status = VXGE_HW_ERR_OUT_OF_MEMORY;
    #line 3545 
    goto exit;
  }
  #line 3548 
  status = __vxge_hw_channel_initialize(& fifo->channel);
  #line 3549 
  if (status != VXGE_HW_OK) {
    #line 3550 
    __vxge_hw_fifo_delete(vp);
    #line 3551 
    goto exit;
  }
  #line 3555 
  exit: 
        #line 3555 
  ;
  #line 3556 
  return status;
}

#line 3565  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.c"
static enum vxge_hw_status __vxge_hw_vpath_pci_read(struct __vxge_hw_virtualpath *vpath, u32 phy_func_0, u32 offset, u32 *val)
{
  #line 3568 
  u64 val64;
  #line 3569 
  enum vxge_hw_status status = 0;
  #line 3570 
  struct vxge_hw_vpath_reg *vp_reg = vpath->vp_reg;
  #line 3572 
  val64 = (unsigned long long)offset << 52;
  #line 3574 
  if (phy_func_0 != 0U) 
                        #line 3575 
                        val64 |= 281474976710656ULL;
  #line 3577 
  writeq(val64,(void *)(& vp_reg->pci_config_access_cfg1));
  #line 3578 
  ldv_inline_asm();
  #line 3579 
  writeq(9223372036854775808ULL,(void *)(& vp_reg->pci_config_access_cfg2));
  #line 3581 
  ldv_inline_asm();
  #line 3583 
  status = __vxge_hw_device_register_poll((void *)(& vp_reg->pci_config_access_cfg2),18446744073709551615ULL,1000U);
  #line 3587 
  if (status != VXGE_HW_OK) 
                            #line 3588 
                            goto exit;
  #line 3590 
  val64 = readq((void *)(& vp_reg->pci_config_access_status));
  #line 3592 
  if ((val64 & 9223372036854775808ULL) != 0ULL) {
    #line 3593 
    status = VXGE_HW_FAIL;
    #line 3594 
    *val = 0U;
  }
  else 
       #line 3596 
       *val = (unsigned int)val64;
  #line 3597 
  exit: 
        #line 3597 
  ;
  #line 3598 
  return status;
}

#line 3609  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.c"
enum vxge_hw_status vxge_hw_device_flick_link_led(struct __vxge_hw_device *hldev, u64 on_off)
{
  #line 3611 
  struct __vxge_hw_virtualpath *vpath;
  #line 3612 
  u64 data0;
  #line 3613 
  enum vxge_hw_status status;
  #line 3612 
  u64 data1 = 0ULL;
  #line 3612 
  u64 steer_ctrl = 0ULL;
  #line 3615 
  if (hldev == (struct __vxge_hw_device *)0) {
    #line 3616 
    status = VXGE_HW_ERR_INVALID_DEVICE;
    #line 3617 
    goto exit;
  }
  #line 3620 
  vpath = & hldev->virtual_paths[hldev->first_vp_id];
  #line 3622 
  data0 = on_off;
  #line 3623 
  status = vxge_hw_vpath_fw_api(vpath,4U,13U,0U,& data0,& data1,& steer_ctrl);
  #line 3627 
  exit: 
        #line 3627 
  ;
  #line 3628 
  return status;
}

#line 3635  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.c"
enum vxge_hw_status __vxge_hw_vpath_rts_table_get(struct __vxge_hw_vpath_handle *vp, u32 action, u32 rts_table, u32 offset, u64 *data0, u64 *data1)
{
  #line 3639 
  enum vxge_hw_status status;
  #line 3640 
  u64 steer_ctrl = 0ULL;
  #line 3642 
  if (vp == (struct __vxge_hw_vpath_handle *)0) {
    #line 3643 
    status = VXGE_HW_ERR_INVALID_HANDLE;
    #line 3644 
    goto exit;
  }
  #line 3647 
  if ((rts_table == 6U || rts_table == 12U) || rts_table + 4294967288U <= 1U) 
    #line 3655 
    steer_ctrl = 68719476736ULL;
  #line 3658 
  status = vxge_hw_vpath_fw_api(vp->vpath,action,rts_table,offset,data0,data1,& steer_ctrl);
  #line 3660 
  if (status != VXGE_HW_OK) 
                            #line 3661 
                            goto exit;
  #line 3663 
  if (rts_table != 0U && rts_table != 12U) 
                                           #line 3666 
                                           *data1 = 0ULL;
  #line 3667 
  exit: 
        #line 3667 
  ;
  #line 3668 
  return status;
}

#line 3675  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.c"
enum vxge_hw_status __vxge_hw_vpath_rts_table_set(struct __vxge_hw_vpath_handle *vp, u32 action, u32 rts_table, u32 offset, u64 steer_data0, u64 steer_data1)
{
  #line 3679 
  u64 data0;
  #line 3680 
  enum vxge_hw_status status;
  #line 3679 
  u64 data1 = 0ULL;
  #line 3679 
  u64 steer_ctrl = 0ULL;
  #line 3682 
  if (vp == (struct __vxge_hw_vpath_handle *)0) {
    #line 3683 
    status = VXGE_HW_ERR_INVALID_HANDLE;
    #line 3684 
    goto exit;
  }
  #line 3687 
  data0 = steer_data0;
  #line 3689 
  if (rts_table == 0U || rts_table == 12U) 
                                           #line 3692 
                                           data1 = steer_data1;
  #line 3694 
  status = vxge_hw_vpath_fw_api(vp->vpath,action,rts_table,offset,& data0,& data1,& steer_ctrl);
  #line 3696 
  exit: 
        #line 3696 
  ;
  #line 3697 
  return status;
}

#line 3703  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.c"
enum vxge_hw_status vxge_hw_vpath_rts_rth_set(struct __vxge_hw_vpath_handle *vp, enum vxge_hw_rth_algoritms algorithm, struct vxge_hw_rth_hash_types *hash_type, u16 bucket_size)
{
  #line 3709 
  u64 data0;
  #line 3709 
  u64 data1;
  #line 3710 
  enum vxge_hw_status status = 0;
  #line 3712 
  if (vp == (struct __vxge_hw_vpath_handle *)0) {
    #line 3713 
    status = VXGE_HW_ERR_INVALID_HANDLE;
    #line 3714 
    goto exit;
  }
  #line 3717 
  status = __vxge_hw_vpath_rts_table_get(vp,0U,5U,0U,& data0,& data1);
  #line 3721 
  if (status != VXGE_HW_OK) 
                            #line 3722 
                            goto exit;
  #line 3724 
  data0 &= 17352369364258521087ULL;
  #line 3727 
  data0 = ((((unsigned long long)bucket_size << 56) | ((unsigned long long)algorithm << 52)) | data0) | 1152921504606846976ULL;
  #line 3731 
  if ((unsigned int)hash_type->hash_type_tcpipv4_en != 0U) 
                                                           #line 3732 
                                                           data0 |= 281474976710656ULL;
  #line 3734 
  if ((unsigned int)hash_type->hash_type_ipv4_en != 0U) 
                                                        #line 3735 
                                                        data0 |= 17592186044416ULL;
  #line 3737 
  if ((unsigned int)hash_type->hash_type_tcpipv6_en != 0U) 
                                                           #line 3738 
                                                           data0 |= 1099511627776ULL;
  #line 3740 
  if ((unsigned int)hash_type->hash_type_ipv6_en != 0U) 
                                                        #line 3741 
                                                        data0 |= 68719476736ULL;
  #line 3743 
  if ((unsigned int)hash_type->hash_type_tcpipv6ex_en != 0U) 
                                                             #line 3744 
                                                             data0 |= 4294967296ULL;
  #line 3747 
  if ((unsigned int)hash_type->hash_type_ipv6ex_en != 0U) 
                                                          #line 3748 
                                                          data0 |= 268435456ULL;
  #line 3750 
  if ((data0 & 16777216ULL) != 0ULL) 
                                     #line 3751 
                                     data0 &= 18446744073692774399ULL; else 
                                                                    #line 3753 
                                                                    data0 |= 16777216ULL;
  #line 3755 
  status = __vxge_hw_vpath_rts_table_set(vp,1U,5U,0U,data0,0ULL);
  #line 3759 
  exit: 
        #line 3759 
  ;
  #line 3760 
  return status;
}

#line 3764  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.c"
static void vxge_hw_rts_rth_data0_data1_get(u32 j, u64 *data0, u64 *data1, u16 flag, u8 *itable)
{
  #line 3767 
  switch ((int)flag) {
    #line 3768 
    case 1: 
            #line 3768 
    ;
    #line 3769 
    *data0 = (((unsigned long long)j << 56) | ((unsigned long long)*(itable + (unsigned long)j) << 48)) | 36028797018963968ULL;
    #line 3774 
    case 2: 
            #line 3774 
    ;
    #line 3775 
    *data0 = (*data0 | (((unsigned long long)j << 40) | ((unsigned long long)*(itable + (unsigned long)j) << 32))) | 549755813888ULL;
    #line 3781 
    case 3: 
            #line 3781 
    ;
    #line 3782 
    *data1 = (((unsigned long long)j << 56) | ((unsigned long long)*(itable + (unsigned long)j) << 48)) | 36028797018963968ULL;
    #line 3787 
    case 4: 
            #line 3787 
    ;
    #line 3788 
    *data1 = (*data1 | (((unsigned long long)j << 40) | ((unsigned long long)*(itable + (unsigned long)j) << 32))) | 549755813888ULL;
    #line 3793 
    default: 
             #line 3793 
    ;
    #line 3794 
    return;
  }
}

#line 3800  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.c"
enum vxge_hw_status vxge_hw_vpath_rts_rth_itable_set(struct __vxge_hw_vpath_handle **vpath_handles, u32 vpath_count, u8 *mtable, u8 *itable, u32 itable_size)
{
  #line 3807 
  u32 i;
  #line 3807 
  u32 j;
  #line 3807 
  u32 action;
  #line 3807 
  u32 rts_table;
  #line 3808 
  u64 data0;
  #line 3809 
  u64 data1;
  #line 3810 
  u32 max_entries;
  #line 3811 
  enum vxge_hw_status status = 0;
  #line 3812 
  struct __vxge_hw_vpath_handle *vp = *vpath_handles;
  #line 3814 
  if (vp == (struct __vxge_hw_vpath_handle *)0) {
    #line 3815 
    status = VXGE_HW_ERR_INVALID_HANDLE;
    #line 3816 
    goto exit;
  }
  #line 3819 
  max_entries = 1U << itable_size;
  #line 3821 
  if ((unsigned int)((vp->vpath)->hldev)->config.rth_it_type == 0U) {
    #line 3823 
    action = 1U;
    #line 3824 
    rts_table = 6U;
    #line 3827 
    j = 0U;
    #line 3827 
    while (j < max_entries) {
      #line 3829 
      data1 = 0ULL;
      #line 3831 
      data0 = (unsigned long long)*(itable + (unsigned long)j) << 48;
      #line 3835 
      status = __vxge_hw_vpath_rts_table_set(*vpath_handles,action,rts_table,j,data0,data1);
      #line 3838 
      if (status != VXGE_HW_OK) 
                                #line 3839 
                                goto exit;
      #line 3827 
      j ++;
    }
    #line 3842 
    j = 0U;
    #line 3842 
    while (j < max_entries) {
      #line 3844 
      data1 = 0ULL;
      #line 3846 
      data0 = ((unsigned long long)*(itable + (unsigned long)j) << 48) | 1152921504606846976ULL;
      #line 3851 
      status = __vxge_hw_vpath_rts_table_set(*(vpath_handles + (unsigned long)*(mtable + (unsigned long)*(itable + (unsigned long)j))),action,rts_table,j,data0,data1);
      #line 3855 
      if (status != VXGE_HW_OK) 
                                #line 3856 
                                goto exit;
      #line 3842 
      j ++;
    }
  }
  else {
    #line 3859 
    action = 1U;
    #line 3860 
    rts_table = 12U;
    #line 3862 
    i = 0U;
    #line 3862 
    while (i < vpath_count) {
      #line 3864 
      j = 0U;
      #line 3864 
      while (j < max_entries) {
        #line 3866 
        data0 = 0ULL;
        #line 3867 
        data1 = 0ULL;
        #line 3869 
        while (j < max_entries) {
          #line 3870 
          if ((unsigned int)*(mtable + (unsigned long)*(itable + (unsigned long)j)) != i) {
            #line 3871 
            j ++;
            #line 3872 
            continue;
          }
          #line 3874 
          vxge_hw_rts_rth_data0_data1_get(j,& data0,& data1,(unsigned short)1,itable);
          #line 3876 
          j ++;
          #line 3877 
          break;
        }
        #line 3880 
        while (j < max_entries) {
          #line 3881 
          if ((unsigned int)*(mtable + (unsigned long)*(itable + (unsigned long)j)) != i) {
            #line 3882 
            j ++;
            #line 3883 
            continue;
          }
          #line 3885 
          vxge_hw_rts_rth_data0_data1_get(j,& data0,& data1,(unsigned short)2,itable);
          #line 3887 
          j ++;
          #line 3888 
          break;
        }
        #line 3891 
        while (j < max_entries) {
          #line 3892 
          if ((unsigned int)*(mtable + (unsigned long)*(itable + (unsigned long)j)) != i) {
            #line 3893 
            j ++;
            #line 3894 
            continue;
          }
          #line 3896 
          vxge_hw_rts_rth_data0_data1_get(j,& data0,& data1,(unsigned short)3,itable);
          #line 3898 
          j ++;
          #line 3899 
          break;
        }
        #line 3902 
        while (j < max_entries) {
          #line 3903 
          if ((unsigned int)*(mtable + (unsigned long)*(itable + (unsigned long)j)) != i) {
            #line 3904 
            j ++;
            #line 3905 
            continue;
          }
          #line 3907 
          vxge_hw_rts_rth_data0_data1_get(j,& data0,& data1,(unsigned short)4,itable);
          #line 3909 
          j ++;
          #line 3910 
          break;
        }
        #line 3913 
        if (data0 != 0ULL) {
          #line 3914 
          status = __vxge_hw_vpath_rts_table_set(*(vpath_handles + (unsigned long)i),action,rts_table,0U,data0,data1);
          #line 3919 
          if (status != VXGE_HW_OK) 
                                    #line 3920 
                                    goto exit;
        }
      }
      #line 3862 
      i ++;
    }
  }
  #line 3925 
  exit: 
        #line 3925 
  ;
  #line 3926 
  return status;
}

#line 3939  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.c"
enum vxge_hw_status vxge_hw_vpath_check_leak(struct __vxge_hw_ring *ring)
{
  #line 3942 
  u64 rxd_new_count;
  #line 3942 
  u64 rxd_spat;
  #line 3941 
  enum vxge_hw_status status = 0;
  #line 3944 
  if (ring == (struct __vxge_hw_ring *)0) 
                                          #line 3945 
                                          return status;
  #line 3947 
  rxd_new_count = (unsigned long long)readl((void *)(& (ring->vp_reg)->prc_rxd_doorbell));
  #line 3948 
  rxd_spat = readq((void *)(& (ring->vp_reg)->prc_cfg6));
  #line 3949 
  rxd_spat <<= 19;
  #line 3951 
  if (rxd_new_count >= rxd_spat) 
                                 #line 3952 
                                 status = VXGE_HW_FAIL;
  #line 3954 
  return status;
}

#line 3962  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.c"
static enum vxge_hw_status __vxge_hw_vpath_mgmt_read(struct __vxge_hw_device *hldev, struct __vxge_hw_virtualpath *vpath)
{
  #line 3966 
  u32 i;
  #line 3967 
  u64 val64;
  #line 3966 
  u32 mtu = 0U;
  #line 3966 
  u32 max_pyld = 0U;
  #line 3969 
  i = 0U;
  #line 3969 
  while (i <= 1U) {
    #line 3971 
    val64 = readq((void *)(& (vpath->vpmgmt_reg)->rxmac_cfg0_port_vpmgmt_clone[i]));
    #line 3973 
    max_pyld = (unsigned int)val64 & 16383U;
    #line 3977 
    if (mtu < max_pyld) 
                        #line 3978 
                        mtu = max_pyld;
    #line 3969 
    i ++;
  }
  #line 3981 
  vpath->max_mtu = mtu + 26U;
  #line 3983 
  val64 = readq((void *)(& (vpath->vpmgmt_reg)->xmac_vsport_choices_vp));
  #line 3985 
  i = 0U;
  #line 3985 
  while (i <= 16U) {
    #line 3986 
    if (((9223372036854775808ULL >> i) & val64) != 0ULL) 
                                                         #line 3987 
                                                         vpath->vsport_number = i;
    #line 3985 
    i ++;
  }
  #line 3990 
  val64 = readq((void *)(& (vpath->vpmgmt_reg)->xgmac_gen_status_vpmgmt_clone));
  #line 3992 
  if ((val64 & 1152921504606846976ULL) != 0ULL) 
                                                #line 3993 
                                                (vpath->hldev)->link_state = VXGE_HW_LINK_UP; else 
                                                                    #line 3995 
                                                                    (vpath->hldev)->link_state = VXGE_HW_LINK_DOWN;
  #line 3997 
  return VXGE_HW_OK;
}

#line 4006  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.c"
static enum vxge_hw_status __vxge_hw_vpath_reset_check(struct __vxge_hw_virtualpath *vpath)
{
  #line 4008 
  enum vxge_hw_status status;
  #line 4010 
  status = __vxge_hw_device_register_poll((void *)(& ((vpath->hldev)->common_reg)->vpath_rst_in_prog),(unsigned long long)(1 << (16U - vpath->vp_id)) << 47,(vpath->hldev)->config.device_poll_millis);
  #line 4016 
  return status;
}

#line 4024  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.c"
static enum vxge_hw_status __vxge_hw_vpath_reset(struct __vxge_hw_device *hldev, u32 vp_id)
{
  #line 4026 
  u64 val64;
  #line 4028 
  val64 = (unsigned long long)(1 << (16U - vp_id)) << 47;
  #line 4030 
  __vxge_hw_pio_mem_write32_upper((unsigned int)(val64 >> 32),(void *)(& (hldev->common_reg)->cmn_rsthdlr_cfg0));
  #line 4033 
  return VXGE_HW_OK;
}

#line 4041  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.c"
static enum vxge_hw_status __vxge_hw_vpath_sw_reset(struct __vxge_hw_device *hldev, u32 vp_id)
{
  #line 4044 
  struct __vxge_hw_virtualpath *vpath;
  #line 4043 
  enum vxge_hw_status status = 0;
  #line 4046 
  vpath = & hldev->virtual_paths[vp_id];
  #line 4048 
  if (vpath->ringh != (struct __vxge_hw_ring *)0) {
    #line 4049 
    status = __vxge_hw_ring_reset(vpath->ringh);
    #line 4050 
    if (status != VXGE_HW_OK) 
                              #line 4051 
                              goto exit;
  }
  #line 4054 
  if (vpath->fifoh != (struct __vxge_hw_fifo *)0) 
                                                  #line 4055 
                                                  status = __vxge_hw_fifo_reset(vpath->fifoh);
  #line 4056 
  exit: 
        #line 4056 
  ;
  #line 4057 
  return status;
}

#line 4066  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.c"
static void __vxge_hw_vpath_prc_configure(struct __vxge_hw_device *hldev, u32 vp_id)
{
  #line 4068 
  u64 val64;
  #line 4069 
  struct __vxge_hw_virtualpath *vpath;
  #line 4070 
  struct vxge_hw_vp_config *vp_config;
  #line 4071 
  struct vxge_hw_vpath_reg *vp_reg;
  #line 4073 
  vpath = & hldev->virtual_paths[vp_id];
  #line 4074 
  vp_reg = vpath->vp_reg;
  #line 4075 
  vp_config = vpath->vp_config;
  #line 4077 
  if (vp_config->ring.enable == 0U) 
                                    #line 4078 
                                    return;
  #line 4080 
  val64 = readq((void *)(& vp_reg->prc_cfg1));
  #line 4081 
  val64 |= 268435456ULL;
  #line 4082 
  writeq(val64,(void *)(& vp_reg->prc_cfg1));
  #line 4084 
  val64 = readq((void *)(& (vpath->vp_reg)->prc_cfg6));
  #line 4085 
  val64 |= 288230376151711744ULL;
  #line 4086 
  writeq(val64,(void *)(& (vpath->vp_reg)->prc_cfg6));
  #line 4088 
  val64 = readq((void *)(& vp_reg->prc_cfg7));
  #line 4090 
  if ((vpath->vp_config)->ring.scatter_mode != 4294967295U) {
    #line 4093 
    val64 &= 18230571291595767807ULL;
    #line 4095 
    switch ((vpath->vp_config)->ring.scatter_mode) {
      #line 4096 
      case (u32)0: 
                   #line 4096 
      ;
      #line 4097 
      val64 = val64;
      #line 4099 
      break;
      #line 4100 
      case (u32)1: 
                   #line 4100 
      ;
      #line 4101 
      val64 |= 144115188075855872ULL;
      #line 4103 
      break;
      #line 4104 
      case (u32)2: 
                   #line 4104 
      ;
      #line 4105 
      val64 |= 72057594037927936ULL;
      #line 4107 
      break;
    }
  }
  #line 4111 
  writeq(val64,(void *)(& vp_reg->prc_cfg7));
  #line 4113 
  ;
  #line 4113 
  writeq((__vxge_hw_ring_first_block_address_get(vpath->ringh) >> 3) << 3,(void *)(& vp_reg->prc_cfg5));
  #line 4117 
  val64 = readq((void *)(& vp_reg->prc_cfg4));
  #line 4118 
  val64 |= 72057594037927936ULL;
  #line 4119 
  val64 &= 18445899648779419647ULL;
  #line 4121 
  val64 = val64;
  #line 4124 
  if ((unsigned int)hldev->config.rth_en == 0U) 
                                                #line 4125 
                                                val64 |= 4294967296ULL; else 
                                                                    #line 4127 
                                                                    val64 &= 18446744069414584319ULL;
  #line 4129 
  writeq(val64,(void *)(& vp_reg->prc_cfg4));
  #line 4130 
  return;
}

#line 4138  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.c"
static enum vxge_hw_status __vxge_hw_vpath_kdfc_configure(struct __vxge_hw_device *hldev, u32 vp_id)
{
  #line 4140 
  u64 val64;
  #line 4141 
  u64 vpath_stride;
  #line 4143 
  struct __vxge_hw_virtualpath *vpath;
  #line 4144 
  struct vxge_hw_vpath_reg *vp_reg;
  #line 4142 
  enum vxge_hw_status status = 0;
  #line 4146 
  vpath = & hldev->virtual_paths[vp_id];
  #line 4147 
  vp_reg = vpath->vp_reg;
  #line 4148 
  status = __vxge_hw_kdfc_swapper_set(hldev->legacy_reg,vp_reg);
  #line 4150 
  if (status != VXGE_HW_OK) 
                            #line 4151 
                            goto exit;
  #line 4153 
  val64 = readq((void *)(& vp_reg->kdfc_drbl_triplet_total));
  #line 4155 
  vpath->max_kdfc_db = ((unsigned int)((val64 + 1ULL) >> 32) & 32767U) / 2U;
  #line 4159 
  if ((vpath->vp_config)->fifo.enable == 1U) {
    #line 4161 
    vpath->max_nofl_db = vpath->max_kdfc_db;
    #line 4163 
    if ((unsigned long)vpath->max_nofl_db < ((unsigned long)(vpath->vp_config)->fifo.memblock_size / ((unsigned long)(vpath->vp_config)->fifo.max_frags * 32UL)) * (unsigned long)(vpath->vp_config)->fifo.fifo_blocks) 
      #line 4169 
      return VXGE_HW_BADCFG_FIFO_BLOCKS;
    #line 4171 
    val64 = (unsigned long long)(vpath->max_nofl_db * 2U + 4294967295U) << 32;
  }
  #line 4175 
  writeq(val64,(void *)(& vp_reg->kdfc_fifo_trpl_partition));
  #line 4177 
  writeq(72057594037927936ULL,(void *)(& vp_reg->kdfc_fifo_trpl_ctrl));
  #line 4180 
  val64 = readq((void *)(& vp_reg->kdfc_trpl_fifo_0_ctrl));
  #line 4182 
  val64 &= 18445899644501229567ULL;
  #line 4185 
  val64 |= 282574488338432ULL;
  #line 4192 
  writeq(val64,(void *)(& vp_reg->kdfc_trpl_fifo_0_ctrl));
  #line 4193 
  writeq(0ULL,(void *)(& vp_reg->kdfc_trpl_fifo_0_wb_address));
  #line 4194 
  ldv_inline_asm();
  #line 4195 
  vpath_stride = readq((void *)(& (hldev->toc_reg)->toc_kdfc_vpath_stride));
  #line 4197 
  vpath->nofl_db = (struct __vxge_hw_non_offload_db_wrapper *)(hldev->kdfc + (unsigned long long)vp_id * vpath_stride);
  #line 4202 
  exit: 
        #line 4202 
  ;
  #line 4203 
  return status;
}

#line 4211  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.c"
static enum vxge_hw_status __vxge_hw_vpath_mac_configure(struct __vxge_hw_device *hldev, u32 vp_id)
{
  #line 4213 
  u64 val64;
  #line 4214 
  struct __vxge_hw_virtualpath *vpath;
  #line 4215 
  struct vxge_hw_vp_config *vp_config;
  #line 4216 
  struct vxge_hw_vpath_reg *vp_reg;
  #line 4218 
  vpath = & hldev->virtual_paths[vp_id];
  #line 4219 
  vp_reg = vpath->vp_reg;
  #line 4220 
  vp_config = vpath->vp_config;
  #line 4222 
  writeq((unsigned long long)vpath->vsport_number << 56,(void *)(& vp_reg->xmac_vsport_choice));
  #line 4225 
  if (vp_config->ring.enable == 1U) {
    #line 4227 
    val64 = readq((void *)(& vp_reg->xmac_rpa_vcfg));
    #line 4229 
    if (vp_config->rpa_strip_vlan_tag != 4294967295U) 
      #line 4231 
      if (vp_config->rpa_strip_vlan_tag != 0U) 
                                               #line 4232 
                                               val64 |= 1099511627776ULL; else 
                                                                    #line 4234 
                                                                    val64 &= 18446742974197923839ULL;
    #line 4237 
    writeq(val64,(void *)(& vp_reg->xmac_rpa_vcfg));
    #line 4238 
    val64 = readq((void *)(& vp_reg->rxmac_vcfg0));
    #line 4240 
    if (vp_config->mtu != 4294967295U) {
      #line 4242 
      val64 &= 13835339530258874367ULL;
      #line 4243 
      if (vp_config->mtu + 26U < vpath->max_mtu) 
                                                 #line 4245 
                                                 val64 = ((unsigned long long)(vp_config->mtu + 26U) << 48) | val64; else 
                                                                    #line 4249 
                                                                    val64 = ((unsigned long long)vpath->max_mtu << 48) | val64;
    }
    #line 4253 
    writeq(val64,(void *)(& vp_reg->rxmac_vcfg0));
    #line 4255 
    val64 = readq((void *)(& vp_reg->rxmac_vcfg1));
    #line 4257 
    val64 &= 18446744073706340351ULL;
    #line 4260 
    if ((unsigned int)hldev->config.rth_it_type == 1U) 
                                                       #line 4262 
                                                       val64 |= 2162688ULL;
    #line 4267 
    writeq(val64,(void *)(& vp_reg->rxmac_vcfg1));
  }
  #line 4269 
  return VXGE_HW_OK;
}

#line 4278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.c"
static enum vxge_hw_status __vxge_hw_vpath_tim_configure(struct __vxge_hw_device *hldev, u32 vp_id)
{
  #line 4280 
  u64 val64;
  #line 4281 
  struct __vxge_hw_virtualpath *vpath;
  #line 4282 
  struct vxge_hw_vpath_reg *vp_reg;
  #line 4283 
  struct vxge_hw_vp_config *config;
  #line 4285 
  vpath = & hldev->virtual_paths[vp_id];
  #line 4286 
  vp_reg = vpath->vp_reg;
  #line 4287 
  config = vpath->vp_config;
  #line 4289 
  writeq(0ULL,(void *)(& vp_reg->tim_dest_addr));
  #line 4290 
  writeq(0ULL,(void *)(& vp_reg->tim_vpath_map));
  #line 4291 
  writeq(0ULL,(void *)(& vp_reg->tim_bitmap));
  #line 4292 
  writeq(0ULL,(void *)(& vp_reg->tim_remap));
  #line 4294 
  if (config->ring.enable == 1U) 
                                 #line 4295 
                                 writeq((unsigned long long)(vp_id * 4U + 1U) << 56,(void *)(& vp_reg->tim_ring_assn));
  #line 4299 
  val64 = readq((void *)(& vp_reg->tim_pci_cfg));
  #line 4300 
  val64 |= 72057594037927936ULL;
  #line 4301 
  writeq(val64,(void *)(& vp_reg->tim_pci_cfg));
  #line 4303 
  if (config->fifo.enable == 1U) {
    #line 4305 
    val64 = readq((void *)(& vp_reg->tim_cfg1_int_num[0]));
    #line 4307 
    if (config->tti.btimer_val != 4294967295U) {
      #line 4308 
      val64 &= 18158513701852807167ULL;
      #line 4310 
      val64 = ((unsigned long long)config->tti.btimer_val << 32) | val64;
    }
    #line 4314 
    val64 &= 18446744073441116159ULL;
    #line 4316 
    if (config->tti.timer_ac_en != 4294967295U) 
      #line 4317 
      if (config->tti.timer_ac_en != 0U) 
                                         #line 4318 
                                         val64 |= 33554432ULL; else 
                                                                    #line 4320 
                                                                    val64 &= 18446744073675997183ULL;
    #line 4323 
    if (config->tti.timer_ci_en != 4294967295U) 
      #line 4324 
      if (config->tti.timer_ci_en != 0U) 
                                         #line 4325 
                                         val64 |= 16777216ULL; else 
                                                                    #line 4327 
                                                                    val64 &= 18446744073692774399ULL;
    #line 4330 
    if (config->tti.urange_a != 4294967295U) {
      #line 4331 
      val64 &= 18446744073705422847ULL;
      #line 4332 
      val64 = ((unsigned long long)config->tti.urange_a << 16) | val64;
    }
    #line 4336 
    if (config->tti.urange_b != 4294967295U) {
      #line 4337 
      val64 &= 18446744073709535487ULL;
      #line 4338 
      val64 = ((unsigned long long)config->tti.urange_b << 8) | val64;
    }
    #line 4342 
    if (config->tti.urange_c != 4294967295U) {
      #line 4343 
      val64 &= 18446744073709551552ULL;
      #line 4344 
      val64 = (unsigned long long)config->tti.urange_c | val64;
    }
    #line 4348 
    writeq(val64,(void *)(& vp_reg->tim_cfg1_int_num[0]));
    #line 4349 
    vpath->tim_tti_cfg1_saved = val64;
    #line 4351 
    val64 = readq((void *)(& vp_reg->tim_cfg2_int_num[0]));
    #line 4353 
    if (config->tti.uec_a != 4294967295U) {
      #line 4354 
      val64 &= 281474976710655ULL;
      #line 4355 
      val64 = ((unsigned long long)config->tti.uec_a << 48) | val64;
    }
    #line 4359 
    if (config->tti.uec_b != 4294967295U) {
      #line 4360 
      val64 &= 18446462603027808255ULL;
      #line 4361 
      val64 = ((unsigned long long)config->tti.uec_b << 32) | val64;
    }
    #line 4365 
    if (config->tti.uec_c != 4294967295U) {
      #line 4366 
      val64 &= 18446744069414649855ULL;
      #line 4367 
      val64 = ((unsigned long long)config->tti.uec_c << 16) | val64;
    }
    #line 4371 
    if (config->tti.uec_d != 4294967295U) {
      #line 4372 
      val64 &= 18446744073709486080ULL;
      #line 4373 
      val64 = (unsigned long long)config->tti.uec_d | val64;
    }
    #line 4377 
    writeq(val64,(void *)(& vp_reg->tim_cfg2_int_num[0]));
    #line 4378 
    val64 = readq((void *)(& vp_reg->tim_cfg3_int_num[0]));
    #line 4380 
    if (config->tti.timer_ri_en != 4294967295U) 
      #line 4381 
      if (config->tti.timer_ri_en != 0U) 
                                         #line 4382 
                                         val64 |= 9223372036854775808ULL; else 
                                                                    #line 4384 
                                                                    val64 &= 9223372036854775807ULL;
    #line 4387 
    if (config->tti.rtimer_val != 4294967295U) {
      #line 4388 
      val64 &= 18158513701852807167ULL;
      #line 4390 
      val64 = ((unsigned long long)config->tti.rtimer_val << 32) | val64;
    }
    #line 4394 
    if (config->tti.util_sel != 4294967295U) {
      #line 4395 
      val64 &= 18446744069481693183ULL;
      #line 4396 
      val64 = ((unsigned long long)vp_id << 26) | val64;
    }
    #line 4399 
    if (config->tti.ltimer_val != 4294967295U) {
      #line 4400 
      val64 &= 18446744073642442752ULL;
      #line 4402 
      val64 = (unsigned long long)config->tti.ltimer_val | val64;
    }
    #line 4406 
    writeq(val64,(void *)(& vp_reg->tim_cfg3_int_num[0]));
    #line 4407 
    vpath->tim_tti_cfg3_saved = val64;
  }
  #line 4410 
  if (config->ring.enable == 1U) {
    #line 4412 
    val64 = readq((void *)(& vp_reg->tim_cfg1_int_num[1]));
    #line 4414 
    if (config->rti.btimer_val != 4294967295U) {
      #line 4415 
      val64 &= 18158513701852807167ULL;
      #line 4417 
      val64 = ((unsigned long long)config->rti.btimer_val << 32) | val64;
    }
    #line 4421 
    val64 &= 18446744073441116159ULL;
    #line 4423 
    if (config->rti.timer_ac_en != 4294967295U) 
      #line 4424 
      if (config->rti.timer_ac_en != 0U) 
                                         #line 4425 
                                         val64 |= 33554432ULL; else 
                                                                    #line 4427 
                                                                    val64 &= 18446744073675997183ULL;
    #line 4430 
    if (config->rti.timer_ci_en != 4294967295U) 
      #line 4431 
      if (config->rti.timer_ci_en != 0U) 
                                         #line 4432 
                                         val64 |= 16777216ULL; else 
                                                                    #line 4434 
                                                                    val64 &= 18446744073692774399ULL;
    #line 4437 
    if (config->rti.urange_a != 4294967295U) {
      #line 4438 
      val64 &= 18446744073705422847ULL;
      #line 4439 
      val64 = ((unsigned long long)config->rti.urange_a << 16) | val64;
    }
    #line 4443 
    if (config->rti.urange_b != 4294967295U) {
      #line 4444 
      val64 &= 18446744073709535487ULL;
      #line 4445 
      val64 = ((unsigned long long)config->rti.urange_b << 8) | val64;
    }
    #line 4449 
    if (config->rti.urange_c != 4294967295U) {
      #line 4450 
      val64 &= 18446744073709551552ULL;
      #line 4451 
      val64 = (unsigned long long)config->rti.urange_c | val64;
    }
    #line 4455 
    writeq(val64,(void *)(& vp_reg->tim_cfg1_int_num[1]));
    #line 4456 
    vpath->tim_rti_cfg1_saved = val64;
    #line 4458 
    val64 = readq((void *)(& vp_reg->tim_cfg2_int_num[1]));
    #line 4460 
    if (config->rti.uec_a != 4294967295U) {
      #line 4461 
      val64 &= 281474976710655ULL;
      #line 4462 
      val64 = ((unsigned long long)config->rti.uec_a << 48) | val64;
    }
    #line 4466 
    if (config->rti.uec_b != 4294967295U) {
      #line 4467 
      val64 &= 18446462603027808255ULL;
      #line 4468 
      val64 = ((unsigned long long)config->rti.uec_b << 32) | val64;
    }
    #line 4472 
    if (config->rti.uec_c != 4294967295U) {
      #line 4473 
      val64 &= 18446744069414649855ULL;
      #line 4474 
      val64 = ((unsigned long long)config->rti.uec_c << 16) | val64;
    }
    #line 4478 
    if (config->rti.uec_d != 4294967295U) {
      #line 4479 
      val64 &= 18446744073709486080ULL;
      #line 4480 
      val64 = (unsigned long long)config->rti.uec_d | val64;
    }
    #line 4484 
    writeq(val64,(void *)(& vp_reg->tim_cfg2_int_num[1]));
    #line 4485 
    val64 = readq((void *)(& vp_reg->tim_cfg3_int_num[1]));
    #line 4487 
    if (config->rti.timer_ri_en != 4294967295U) 
      #line 4488 
      if (config->rti.timer_ri_en != 0U) 
                                         #line 4489 
                                         val64 |= 9223372036854775808ULL; else 
                                                                    #line 4491 
                                                                    val64 &= 9223372036854775807ULL;
    #line 4494 
    if (config->rti.rtimer_val != 4294967295U) {
      #line 4495 
      val64 &= 18158513701852807167ULL;
      #line 4497 
      val64 = ((unsigned long long)config->rti.rtimer_val << 32) | val64;
    }
    #line 4501 
    if (config->rti.util_sel != 4294967295U) {
      #line 4502 
      val64 &= 18446744069481693183ULL;
      #line 4503 
      val64 = ((unsigned long long)vp_id << 26) | val64;
    }
    #line 4506 
    if (config->rti.ltimer_val != 4294967295U) {
      #line 4507 
      val64 &= 18446744073642442752ULL;
      #line 4509 
      val64 = (unsigned long long)config->rti.ltimer_val | val64;
    }
    #line 4513 
    writeq(val64,(void *)(& vp_reg->tim_cfg3_int_num[1]));
    #line 4514 
    vpath->tim_rti_cfg3_saved = val64;
  }
  #line 4517 
  val64 = 0ULL;
  #line 4518 
  writeq(val64,(void *)(& vp_reg->tim_cfg1_int_num[2]));
  #line 4519 
  writeq(val64,(void *)(& vp_reg->tim_cfg2_int_num[2]));
  #line 4520 
  writeq(val64,(void *)(& vp_reg->tim_cfg3_int_num[2]));
  #line 4521 
  writeq(val64,(void *)(& vp_reg->tim_cfg1_int_num[3]));
  #line 4522 
  writeq(val64,(void *)(& vp_reg->tim_cfg2_int_num[3]));
  #line 4523 
  writeq(val64,(void *)(& vp_reg->tim_cfg3_int_num[3]));
  #line 4525 
  val64 = 644245094400ULL;
  #line 4526 
  val64 = val64;
  #line 4527 
  val64 |= 6291456ULL;
  #line 4528 
  writeq(val64,(void *)(& vp_reg->tim_wrkld_clc));
  #line 4530 
  return VXGE_HW_OK;
}

#line 4539  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.c"
static enum vxge_hw_status __vxge_hw_vpath_initialize(struct __vxge_hw_device *hldev, u32 vp_id)
{
  #line 4541 
  u64 val64;
  #line 4542 
  u32 val32;
  #line 4544 
  struct __vxge_hw_virtualpath *vpath;
  #line 4545 
  struct vxge_hw_vpath_reg *vp_reg;
  #line 4543 
  enum vxge_hw_status status = 0;
  #line 4547 
  vpath = & hldev->virtual_paths[vp_id];
  #line 4549 
  if ((hldev->vpath_assignments & (9223372036854775808ULL >> vp_id)) == 0ULL) {
    #line 4550 
    status = VXGE_HW_ERR_VPATH_NOT_AVAILABLE;
    #line 4551 
    goto exit;
  }
  #line 4553 
  vp_reg = vpath->vp_reg;
  #line 4555 
  status = __vxge_hw_vpath_swapper_set(vpath->vp_reg);
  #line 4556 
  if (status != VXGE_HW_OK) 
                            #line 4557 
                            goto exit;
  #line 4559 
  status = __vxge_hw_vpath_mac_configure(hldev,vp_id);
  #line 4560 
  if (status != VXGE_HW_OK) 
                            #line 4561 
                            goto exit;
  #line 4563 
  status = __vxge_hw_vpath_kdfc_configure(hldev,vp_id);
  #line 4564 
  if (status != VXGE_HW_OK) 
                            #line 4565 
                            goto exit;
  #line 4567 
  status = __vxge_hw_vpath_tim_configure(hldev,vp_id);
  #line 4568 
  if (status != VXGE_HW_OK) 
                            #line 4569 
                            goto exit;
  #line 4571 
  val64 = readq((void *)(& vp_reg->rtdma_rd_optimization_ctrl));
  #line 4574 
  status = __vxge_hw_vpath_pci_read(vpath,1U,120U,& val32);
  #line 4575 
  if (status == VXGE_HW_OK) {
    #line 4576 
    val32 = (val32 >> 12) & 7U;
    #line 4577 
    val64 &= 18446736377128157183ULL;
    #line 4579 
    val64 = ((unsigned long long)val32 << 40) | val64;
    #line 4582 
    val64 |= 17592186044416ULL;
  }
  #line 4585 
  val64 &= 18446744073592111103ULL;
  #line 4586 
  val64 |= 33554432ULL;
  #line 4590 
  val64 |= 268435456ULL;
  #line 4591 
  writeq(val64,(void *)(& vp_reg->rtdma_rd_optimization_ctrl));
  #line 4593 
  exit: 
        #line 4593 
  ;
  #line 4594 
  return status;
}

#line 4601  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.c"
static void __vxge_hw_vp_terminate(struct __vxge_hw_device *hldev, u32 vp_id)
{
  #line 4603 
  struct __vxge_hw_virtualpath *vpath;
  #line 4605 
  vpath = & hldev->virtual_paths[vp_id];
  #line 4607 
  if (vpath->vp_open == 0U) 
                            #line 4608 
                            goto exit;
  #line 4610 
  if (vpath->vp_id <= 15U) {
    #line 4610 
    (vpath->hldev)->tim_int_mask0[0] &= ~ (8ULL << (1073741839U - vpath->vp_id) * 4U);
    #line 4610 
    (vpath->hldev)->tim_int_mask0[1] &= ~ (4ULL << (1073741839U - vpath->vp_id) * 4U);
  }
  else {
    #line 4610 
    (vpath->hldev)->tim_int_mask1[0] = 0U;
    #line 4610 
    (vpath->hldev)->tim_int_mask1[1] = 0U;
  }
  #line 4612 
  hldev->stats.hw_dev_info_stats.vpath_info[vpath->vp_id] = (struct vxge_hw_vpath_stats_hw_info *)0;
  #line 4617 
  cif_spin_lock_lock_of___vxge_hw_virtualpath(& vpath->lock);
  #line 4618 
  vpath->vp_open = 0U;
  #line 4619 
  cif_spin_unlock_lock_of___vxge_hw_virtualpath(& vpath->lock);
  #line 4621 
  vpath->vpmgmt_reg = (struct vxge_hw_vpmgmt_reg *)0;
  #line 4622 
  vpath->nofl_db = (struct __vxge_hw_non_offload_db_wrapper *)0;
  #line 4623 
  vpath->max_mtu = 0U;
  #line 4624 
  vpath->vsport_number = 0U;
  #line 4625 
  vpath->max_kdfc_db = 0U;
  #line 4626 
  vpath->max_nofl_db = 0U;
  #line 4627 
  vpath->ringh = (struct __vxge_hw_ring *)0;
  #line 4628 
  vpath->fifoh = (struct __vxge_hw_fifo *)0;
  #line 4629 
  memset((void *)(& vpath->vpath_handles),0,16UL);
  #line 4630 
  vpath->stats_block = (struct __vxge_hw_blockpool_entry *)0;
  #line 4631 
  vpath->hw_stats = (struct vxge_hw_vpath_stats_hw_info *)0;
  #line 4632 
  vpath->hw_stats_sav = (struct vxge_hw_vpath_stats_hw_info *)0;
  #line 4633 
  vpath->sw_stats = (struct vxge_hw_vpath_stats_sw_info *)0;
  #line 4635 
  exit: 
        #line 4635 
  ;
  #line 4636 
  return;
}

#line 4645  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.c"
static enum vxge_hw_status __vxge_hw_vp_initialize(struct __vxge_hw_device *hldev, u32 vp_id, struct vxge_hw_vp_config *config)
{
  #line 4648 
  struct __vxge_hw_virtualpath *vpath;
  #line 4649 
  enum vxge_hw_status status = 0;
  #line 4651 
  if ((hldev->vpath_assignments & (9223372036854775808ULL >> vp_id)) == 0ULL) {
    #line 4652 
    status = VXGE_HW_ERR_VPATH_NOT_AVAILABLE;
    #line 4653 
    goto exit;
  }
  #line 4656 
  vpath = & hldev->virtual_paths[vp_id];
  #line 4658 
  spinlock_check(& vpath->lock);
  {
    #line 4658 
    struct lock_class_key __key;
    #line 4658 
    __raw_spin_lock_init(& vpath->lock.__anonCompField_spinlock_25.rlock,(char *)"&(&vpath->lock)->rlock",& __key);
  }
  #line 4659 
  vpath->vp_id = vp_id;
  #line 4660 
  vpath->vp_open = 1U;
  #line 4661 
  vpath->hldev = hldev;
  #line 4662 
  vpath->vp_config = config;
  #line 4663 
  vpath->vp_reg = hldev->vpath_reg[vp_id];
  #line 4664 
  vpath->vpmgmt_reg = hldev->vpmgmt_reg[vp_id];
  #line 4666 
  __vxge_hw_vpath_reset(hldev,vp_id);
  #line 4668 
  status = __vxge_hw_vpath_reset_check(vpath);
  #line 4669 
  if (status != VXGE_HW_OK) {
    #line 4670 
    memset((void *)vpath,0,320UL);
    #line 4671 
    goto exit;
  }
  #line 4674 
  status = __vxge_hw_vpath_mgmt_read(hldev,vpath);
  #line 4675 
  if (status != VXGE_HW_OK) {
    #line 4676 
    memset((void *)vpath,0,320UL);
    #line 4677 
    goto exit;
  }
  #line 4680 
  INIT_LIST_HEAD_0(& vpath->vpath_handles);
  #line 4682 
  vpath->sw_stats = & hldev->stats.sw_dev_info_stats.vpath_info[vp_id];
  #line 4684 
  if (vp_id <= 15U) {
    #line 4684 
    hldev->tim_int_mask0[0] |= 8ULL << (1073741839U - vp_id) * 4U;
    #line 4684 
    hldev->tim_int_mask0[1] |= 4ULL << (1073741839U - vp_id) * 4U;
  }
  else {
    #line 4684 
    hldev->tim_int_mask1[0] = 2147483648U;
    #line 4684 
    hldev->tim_int_mask1[1] = 1073741824U;
  }
  #line 4687 
  status = __vxge_hw_vpath_initialize(hldev,vp_id);
  #line 4688 
  if (status != VXGE_HW_OK) 
                            #line 4689 
                            __vxge_hw_vp_terminate(hldev,vp_id);
  #line 4690 
  exit: 
        #line 4690 
  ;
  #line 4691 
  return status;
}

#line 4700  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.c"
enum vxge_hw_status vxge_hw_vpath_mtu_set(struct __vxge_hw_vpath_handle *vp, u32 new_mtu)
{
  #line 4702 
  u64 val64;
  #line 4704 
  struct __vxge_hw_virtualpath *vpath;
  #line 4703 
  enum vxge_hw_status status = 0;
  #line 4706 
  if (vp == (struct __vxge_hw_vpath_handle *)0) {
    #line 4707 
    status = VXGE_HW_ERR_INVALID_HANDLE;
    #line 4708 
    goto exit;
  }
  #line 4710 
  vpath = vp->vpath;
  #line 4712 
  new_mtu += 26U;
  #line 4714 
  if (new_mtu <= 67U || vpath->max_mtu < new_mtu) 
                                                  #line 4715 
                                                  status = VXGE_HW_ERR_INVALID_MTU_SIZE;
  #line 4717 
  val64 = readq((void *)(& (vpath->vp_reg)->rxmac_vcfg0));
  #line 4719 
  val64 &= 13835339530258874367ULL;
  #line 4720 
  val64 = ((unsigned long long)new_mtu << 48) | val64;
  #line 4722 
  writeq(val64,(void *)(& (vpath->vp_reg)->rxmac_vcfg0));
  #line 4724 
  (vpath->vp_config)->mtu = new_mtu + 4294967270U;
  #line 4726 
  exit: 
        #line 4726 
  ;
  #line 4727 
  return status;
}

#line 4736  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.c"
static enum vxge_hw_status vxge_hw_vpath_stats_enable(struct __vxge_hw_vpath_handle *vp)
{
  #line 4739 
  struct __vxge_hw_virtualpath *vpath;
  #line 4738 
  enum vxge_hw_status status = 0;
  #line 4741 
  vpath = vp->vpath;
  #line 4743 
  if (vpath->vp_open == 0U) {
    #line 4744 
    status = VXGE_HW_ERR_VPATH_NOT_OPEN;
    #line 4745 
    goto exit;
  }
  #line 4748 
  memcpy((void *)vpath->hw_stats_sav,(void *)vpath->hw_stats,624UL);
  #line 4751 
  status = __vxge_hw_vpath_stats_get(vpath,vpath->hw_stats);
  #line 4752 
  exit: 
        #line 4752 
  ;
  #line 4753 
  return status;
}

#line 4761  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.c"
static struct __vxge_hw_blockpool_entry *__vxge_hw_blockpool_block_allocate(struct __vxge_hw_device *devh, u32 size)
{
  #line 4764 
  struct __vxge_hw_blockpool *blockpool;
  #line 4763 
  struct __vxge_hw_blockpool_entry *entry = (struct __vxge_hw_blockpool_entry *)0;
  #line 4766 
  blockpool = & devh->block_pool;
  #line 4768 
  if (blockpool->block_size == size) {
    #line 4770 
    if (list_empty_0(& blockpool->free_block_list) == 0) {
      #line 4772 
      void *__mptr;
      #line 4772 
      __mptr = (void *)blockpool->free_block_list.next;
      #line 4771 
      entry = ((struct __vxge_hw_blockpool_entry *)__mptr);
    }
    #line 4776 
    if (entry != (struct __vxge_hw_blockpool_entry *)0) {
      #line 4777 
      list_del_0(& entry->item);
      #line 4778 
      (blockpool->pool_size) --;
    }
  }
  #line 4782 
  if (entry != (struct __vxge_hw_blockpool_entry *)0) 
                                                      #line 4783 
                                                      __vxge_hw_blockpool_blocks_add(blockpool);
  #line 4785 
  return entry;
}

#line 4795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.c"
enum vxge_hw_status vxge_hw_vpath_open(struct __vxge_hw_device *hldev, struct vxge_hw_vpath_attr *attr, struct __vxge_hw_vpath_handle **vpath_handle)
{
  #line 4799 
  struct __vxge_hw_virtualpath *vpath;
  #line 4800 
  struct __vxge_hw_vpath_handle *vp;
  #line 4801 
  enum vxge_hw_status status;
  #line 4803 
  vpath = & hldev->virtual_paths[attr->vp_id];
  #line 4805 
  if (vpath->vp_open == 1U) {
    #line 4806 
    status = VXGE_HW_ERR_INVALID_STATE;
    #line 4807 
    goto vpath_open_exit1;
  }
  #line 4810 
  status = __vxge_hw_vp_initialize(hldev,attr->vp_id,& hldev->config.vp_config[attr->vp_id]);
  #line 4812 
  if (status != VXGE_HW_OK) 
                            #line 4813 
                            goto vpath_open_exit1;
  #line 4815 
  vp = (struct __vxge_hw_vpath_handle *)cif_vzalloc(24UL);
  #line 4816 
  if (vp == (struct __vxge_hw_vpath_handle *)0) {
    #line 4817 
    status = VXGE_HW_ERR_OUT_OF_MEMORY;
    #line 4818 
    goto vpath_open_exit2;
  }
  #line 4821 
  vp->vpath = vpath;
  #line 4823 
  if ((vpath->vp_config)->fifo.enable == 1U) {
    #line 4824 
    status = __vxge_hw_fifo_create(vp,& attr->fifo_attr);
    #line 4825 
    if (status != VXGE_HW_OK) 
                              #line 4826 
                              goto vpath_open_exit6;
  }
  #line 4829 
  if ((vpath->vp_config)->ring.enable == 1U) {
    #line 4830 
    status = __vxge_hw_ring_create(vp,& attr->ring_attr);
    #line 4831 
    if (status != VXGE_HW_OK) 
                              #line 4832 
                              goto vpath_open_exit7;
    #line 4834 
    __vxge_hw_vpath_prc_configure(hldev,attr->vp_id);
  }
  #line 4837 
  (vpath->fifoh)->tx_intr_num = attr->vp_id * 4U;
  #line 4841 
  vpath->stats_block = __vxge_hw_blockpool_block_allocate(hldev,4096U);
  #line 4843 
  if (vpath->stats_block == (struct __vxge_hw_blockpool_entry *)0) {
    #line 4844 
    status = VXGE_HW_ERR_OUT_OF_MEMORY;
    #line 4845 
    goto vpath_open_exit8;
  }
  #line 4848 
  vpath->hw_stats = (struct vxge_hw_vpath_stats_hw_info *)(vpath->stats_block)->memblock;
  #line 4849 
  memset((void *)vpath->hw_stats,0,624UL);
  #line 4852 
  hldev->stats.hw_dev_info_stats.vpath_info[attr->vp_id] = vpath->hw_stats;
  #line 4855 
  vpath->hw_stats_sav = & hldev->stats.hw_dev_info_stats.vpath_info_sav[attr->vp_id];
  #line 4857 
  memset((void *)vpath->hw_stats_sav,0,624UL);
  #line 4860 
  writeq((vpath->stats_block)->dma_addr,(void *)(& (vpath->vp_reg)->stats_cfg));
  #line 4862 
  status = vxge_hw_vpath_stats_enable(vp);
  #line 4863 
  if (status != VXGE_HW_OK) 
                            #line 4864 
                            goto vpath_open_exit8;
  #line 4866 
  list_add_0(& vp->item,& vpath->vpath_handles);
  #line 4868 
  hldev->vpaths_deployed |= 9223372036854775808ULL >> vpath->vp_id;
  #line 4870 
  *vpath_handle = vp;
  #line 4872 
  attr->fifo_attr.userdata = (void *)vpath->fifoh;
  #line 4873 
  attr->ring_attr.userdata = (void *)vpath->ringh;
  #line 4875 
  return VXGE_HW_OK;
  #line 4877 
  vpath_open_exit8: 
                    #line 4877 
  ;
  #line 4878 
  if (vpath->ringh != (struct __vxge_hw_ring *)0) 
                                                  #line 4879 
                                                  __vxge_hw_ring_delete(vp);
  #line 4880 
  vpath_open_exit7: 
                    #line 4880 
  ;
  #line 4881 
  if (vpath->fifoh != (struct __vxge_hw_fifo *)0) 
                                                  #line 4882 
                                                  __vxge_hw_fifo_delete(vp);
  #line 4883 
  vpath_open_exit6: 
                    #line 4883 
  ;
  #line 4884 
  cif_vfree((void *)vp);
  #line 4885 
  vpath_open_exit2: 
                    #line 4885 
  ;
  #line 4886 
  __vxge_hw_vp_terminate(hldev,attr->vp_id);
  #line 4887 
  vpath_open_exit1: 
                    #line 4887 
  ;
  #line 4889 
  return status;
}

#line 4900  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.c"
void vxge_hw_vpath_rx_doorbell_init(struct __vxge_hw_vpath_handle *vp)
{
  #line 4928 
  u64 __UNIQUE_ID___x441;
  #line 4928 
  u64 tmp_0;
  #line 4930 
  u64 __UNIQUE_ID___x443;
  #line 4930 
  u64 tmp_2;
  #line 4905 
  u64 new_count;
  #line 4905 
  u64 val64;
  #line 4905 
  u64 val164;
  #line 4902 
  struct __vxge_hw_virtualpath *vpath = vp->vpath;
  #line 4903 
  struct __vxge_hw_ring *ring = vpath->ringh;
  #line 4904 
  struct vxgedev *vdev = netdev_priv((vpath->hldev)->ndev);
  #line 4907 
  if ((unsigned int)vdev->titan1 != 0U) {
    #line 4908 
    new_count = readq((void *)(& (vpath->vp_reg)->rxdmem_size));
    #line 4909 
    new_count &= 8191ULL;
  }
  else 
       #line 4911 
       new_count = (unsigned long long)(((ring->config)->ring_blocks * 4096U) / 8U);
  #line 4913 
  val164 = new_count;
  #line 4915 
  writeq(val164,(void *)(& (vpath->vp_reg)->prc_rxd_doorbell));
  #line 4917 
  readl((void *)(& (vpath->vp_reg)->prc_rxd_doorbell));
  #line 4919 
  val164 /= 2ULL;
  #line 4920 
  val64 = readq((void *)(& (vpath->vp_reg)->prc_cfg6));
  #line 4921 
  val64 <<= 19;
  #line 4922 
  val64 &= 511ULL;
  #line 4927 
  new_count = (new_count - val64) + 18446744073709551615ULL;
  {
    #line 4928 
    __UNIQUE_ID___x441 = val164;
    #line 4928 
    u64 __UNIQUE_ID___y442 = new_count;
    #line 4928 
    if (__UNIQUE_ID___x441 < __UNIQUE_ID___y442) 
                                                 #line 4928 
                                                 tmp_0 = __UNIQUE_ID___x441; else 
                                                                    #line 4928 
                                                                    tmp_0 = __UNIQUE_ID___y442;
    }
  #line 4928 
  val64 = tmp_0 / 4ULL;
  {
    #line 4930 
    __UNIQUE_ID___x443 = ring->rxds_limit;
    #line 4930 
    u64 __UNIQUE_ID___y444 = val64;
    #line 4930 
    if (__UNIQUE_ID___x443 < __UNIQUE_ID___y444) 
                                                 #line 4930 
                                                 tmp_2 = __UNIQUE_ID___x443; else 
                                                                    #line 4930 
                                                                    tmp_2 = __UNIQUE_ID___y444;
    }
  #line 4930 
  ring->rxds_limit = tmp_2;
  #line 4931 
  if (ring->rxds_limit <= 3ULL) 
                                #line 4932 
                                ring->rxds_limit = 4ULL;
  #line 4933 
  return;
}

#line 4943  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.c"
static void __vxge_hw_blockpool_block_free(struct __vxge_hw_device *devh, struct __vxge_hw_blockpool_entry *entry)
{
  #line 4946 
  struct __vxge_hw_blockpool *blockpool;
  #line 4948 
  blockpool = & devh->block_pool;
  #line 4950 
  if (entry->length == blockpool->block_size) {
    #line 4951 
    list_add_0(& entry->item,& blockpool->free_block_list);
    #line 4952 
    (blockpool->pool_size) ++;
  }
  #line 4955 
  __vxge_hw_blockpool_blocks_remove(blockpool);
  #line 4956 
  return;
}

#line 4963  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.c"
enum vxge_hw_status vxge_hw_vpath_close(struct __vxge_hw_vpath_handle *vp)
{
  #line 4965 
  struct __vxge_hw_virtualpath *vpath = (struct __vxge_hw_virtualpath *)0;
  #line 4966 
  struct __vxge_hw_device *devh = (struct __vxge_hw_device *)0;
  #line 4967 
  u32 vp_id = (vp->vpath)->vp_id;
  #line 4968 
  u32 is_empty = 1U;
  #line 4969 
  enum vxge_hw_status status = 0;
  #line 4971 
  vpath = vp->vpath;
  #line 4972 
  devh = vpath->hldev;
  #line 4974 
  if (vpath->vp_open == 0U) {
    #line 4975 
    status = VXGE_HW_ERR_VPATH_NOT_OPEN;
    #line 4976 
    goto vpath_close_exit;
  }
  #line 4979 
  list_del_0(& vp->item);
  #line 4981 
  if (list_empty_0(& vpath->vpath_handles) == 0) {
    #line 4982 
    list_add_0(& vp->item,& vpath->vpath_handles);
    #line 4983 
    is_empty = 0U;
  }
  #line 4986 
  if (is_empty == 0U) {
    #line 4987 
    status = VXGE_HW_FAIL;
    #line 4988 
    goto vpath_close_exit;
  }
  #line 4991 
  devh->vpaths_deployed &= ~ (9223372036854775808ULL >> vp_id);
  #line 4993 
  if (vpath->ringh != (struct __vxge_hw_ring *)0) 
                                                  #line 4994 
                                                  __vxge_hw_ring_delete(vp);
  #line 4996 
  if (vpath->fifoh != (struct __vxge_hw_fifo *)0) 
                                                  #line 4997 
                                                  __vxge_hw_fifo_delete(vp);
  #line 4999 
  if (vpath->stats_block != (struct __vxge_hw_blockpool_entry *)0) 
                                                                   #line 5000 
                                                                   __vxge_hw_blockpool_block_free(devh,vpath->stats_block);
  #line 5002 
  cif_vfree((void *)vp);
  #line 5004 
  __vxge_hw_vp_terminate(devh,vp_id);
  #line 5006 
  vpath_close_exit: 
                    #line 5006 
  ;
  #line 5007 
  return status;
}

#line 5014  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.c"
enum vxge_hw_status vxge_hw_vpath_reset(struct __vxge_hw_vpath_handle *vp)
{
  #line 5016 
  enum vxge_hw_status status;
  #line 5017 
  u32 vp_id;
  #line 5018 
  struct __vxge_hw_virtualpath *vpath = vp->vpath;
  #line 5020 
  vp_id = vpath->vp_id;
  #line 5022 
  if (vpath->vp_open == 0U) {
    #line 5023 
    status = VXGE_HW_ERR_VPATH_NOT_OPEN;
    #line 5024 
    goto exit;
  }
  #line 5027 
  status = __vxge_hw_vpath_reset(vpath->hldev,vp_id);
  #line 5028 
  if (status == VXGE_HW_OK) 
                            #line 5029 
                            ((vpath->sw_stats)->soft_reset_cnt) ++;
  #line 5030 
  exit: 
        #line 5030 
  ;
  #line 5031 
  return status;
}

#line 5040  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.c"
enum vxge_hw_status vxge_hw_vpath_recover_from_reset(struct __vxge_hw_vpath_handle *vp)
{
  #line 5043 
  enum vxge_hw_status status;
  #line 5044 
  struct __vxge_hw_device *hldev;
  #line 5045 
  u32 vp_id;
  #line 5042 
  struct __vxge_hw_virtualpath *vpath = (struct __vxge_hw_virtualpath *)0;
  #line 5047 
  vp_id = (vp->vpath)->vp_id;
  #line 5048 
  vpath = vp->vpath;
  #line 5049 
  hldev = vpath->hldev;
  #line 5051 
  if (vpath->vp_open == 0U) {
    #line 5052 
    status = VXGE_HW_ERR_VPATH_NOT_OPEN;
    #line 5053 
    goto exit;
  }
  #line 5056 
  status = __vxge_hw_vpath_reset_check(vpath);
  #line 5057 
  if (status != VXGE_HW_OK) 
                            #line 5058 
                            goto exit;
  #line 5060 
  status = __vxge_hw_vpath_sw_reset(hldev,vp_id);
  #line 5061 
  if (status != VXGE_HW_OK) 
                            #line 5062 
                            goto exit;
  #line 5064 
  status = __vxge_hw_vpath_initialize(hldev,vp_id);
  #line 5065 
  if (status != VXGE_HW_OK) 
                            #line 5066 
                            goto exit;
  #line 5068 
  if (vpath->ringh != (struct __vxge_hw_ring *)0) 
                                                  #line 5069 
                                                  __vxge_hw_vpath_prc_configure(hldev,vp_id);
  #line 5071 
  memset((void *)vpath->hw_stats,0,624UL);
  #line 5074 
  memset((void *)vpath->hw_stats_sav,0,624UL);
  #line 5077 
  writeq((vpath->stats_block)->dma_addr,(void *)(& (vpath->vp_reg)->stats_cfg));
  #line 5080 
  status = vxge_hw_vpath_stats_enable(vp);
  #line 5082 
  exit: 
        #line 5082 
  ;
  #line 5083 
  return status;
}

#line 5092  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/neterion/vxge/vxge-config.c"
void vxge_hw_vpath_enable(struct __vxge_hw_vpath_handle *vp)
{
  #line 5094 
  struct __vxge_hw_device *hldev;
  #line 5095 
  u64 val64;
  #line 5097 
  hldev = (vp->vpath)->hldev;
  #line 5099 
  val64 = (unsigned long long)(1 << (16U - (vp->vpath)->vp_id)) << 47;
  #line 5102 
  __vxge_hw_pio_mem_write32_upper((unsigned int)(val64 >> 32),(void *)(& (hldev->common_reg)->cmn_rsthdlr_cfg1));
  #line 5104 
  return;
}

#line 135  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/0/concurrency safety/weaver/vxge-config.i.aux"
static void INIT_LIST_HEAD_0(struct list_head *list)
{
  #line 138 
  ldv_init_list_head(list);
  #line 139 
  return;
}

#line 386  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/0/concurrency safety/weaver/vxge-config.i.aux"
static void *kmalloc(size_t size, gfp_t flags)
{
  #line 389 
  return ldv_kmalloc(size,flags);
}

#line 400  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/0/concurrency safety/weaver/vxge-config.i.aux"
static void *kcalloc_0(size_t n, size_t size, gfp_t flags)
{
  #line 403 
  return ldv_kcalloc(n,size,flags);
}

#line 421  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/0/concurrency safety/weaver/vxge-config.i.aux"
static void *kzalloc_1(size_t size, gfp_t flags)
{
  #line 424 
  return ldv_kzalloc(size,flags);
}

#line 659  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/0/concurrency safety/weaver/vxge-config.i.aux"
static void cif_spin_lock_lock_of___vxge_hw_virtualpath(spinlock_t *lock)
{
  #line 662 
  ldv_spin_model_lock((char *)"lock_of___vxge_hw_virtualpath");
  #line 664 
  spin_lock(lock);
  #line 665 
  return;
}

#line 668  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/0/concurrency safety/weaver/vxge-config.i.aux"
static void cif_spin_unlock_lock_of___vxge_hw_virtualpath(spinlock_t *lock)
{
  #line 671 
  ldv_spin_model_unlock((char *)"lock_of___vxge_hw_virtualpath");
  #line 673 
  spin_unlock_0(lock);
  #line 674 
  return;
}

#line 677  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/0/concurrency safety/weaver/vxge-config.i.aux"
static void *cif_vzalloc(unsigned long size)
{
  #line 680 
  return ldv_vzalloc(size);
}

#line 684  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/0/concurrency safety/weaver/vxge-config.i.aux"
static void cif_vfree(void *addr)
{
  #line 687 
  ldv_vfree(addr);
  #line 688 
  return;
}

#line 691  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/0/concurrency safety/weaver/vxge-config.i.aux"
static void *cif_vmalloc(unsigned long size)
{
  #line 694 
  return ldv_vmalloc(size);
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/common/inline_asm.c"
void ldv_inline_asm(void)
{
  #line 24 
  return;
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_add(int i, atomic_t *v)
{
  #line 22 
  v->counter += i;
  #line 23 
  return;
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_sub(int i, atomic_t *v)
{
  #line 27 
  v->counter -= i;
  #line 28 
  return;
}

#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_sub_and_test(int i, atomic_t *v)
{
  #line 32 
  v->counter -= i;
  #line 33 
  if (v->counter != 0) 
                       #line 34 
                       return 0;
  #line 36 
  return 1;
}

#line 39  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_inc(atomic_t *v)
{
  #line 41 
  (v->counter) ++;
  #line 42 
  return;
}

#line 44  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_dec(atomic_t *v)
{
  #line 46 
  (v->counter) --;
  #line 47 
  return;
}

#line 49  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_dec_and_test(atomic_t *v)
{
  #line 51 
  (v->counter) --;
  #line 52 
  if (v->counter != 0) 
                       #line 53 
                       return 0;
  #line 55 
  return 1;
}

#line 58  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_inc_and_test(atomic_t *v)
{
  #line 60 
  (v->counter) ++;
  #line 61 
  if (v->counter != 0) 
                       #line 62 
                       return 0;
  #line 64 
  return 1;
}

#line 67  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_add_return(int i, atomic_t *v)
{
  #line 69 
  v->counter += i;
  #line 70 
  return v->counter;
}

#line 73  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_add_negative(int i, atomic_t *v)
{
  #line 75 
  v->counter += i;
  #line 76 
  return v->counter < 0;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_inc_short(short *v)
{
  #line 81 
  *v = (short)((unsigned int)*v + 1U);
  #line 82 
  return (int)*v;
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/current.c"
static struct task_struct ldv_current;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/current.c"
struct task_struct *ldv_get_current(void)
{
  #line 28 
  ldv_current.pid = 1;
  #line 29 
  return & ldv_current;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_interrupt_context(void);
#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_process_context(void);
#line 50  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
bool ldv_in_interrupt_context(void);
#line 112  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_init(int init_ret_val);
#line 132  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_probe(int probe_ret_val);
#line 133  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 133 
void ldv_check_return_value_probe(int);
#line 141 
#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_filter_err_code(int ret_val);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
#line 23 
void __VERIFIER_assume(int);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
static bool __ldv_in_interrupt_context = (_Bool)0;
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_interrupt_context(void)
{
  #line 31 
  __ldv_in_interrupt_context = (_Bool)1;
  #line 32 
  return;
}

#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_process_context(void)
{
  #line 37 
  __ldv_in_interrupt_context = (_Bool)0;
  #line 38 
  return;
}

#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
bool ldv_in_interrupt_context(void)
{
  #line 42 
  return __ldv_in_interrupt_context;
}

#line 45  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
static int ldv_filter_positive_int(int val)
{
  #line 47 
  __VERIFIER_assume(val <= 0);
  #line 48 
  return val;
}

#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_init(int init_ret_val)
{
  #line 57 
  return ldv_filter_positive_int(init_ret_val);
}

#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_probe(int probe_ret_val)
{
  #line 63 
  ldv_check_return_value_probe(probe_ret_val);
  #line 64 
  return ldv_filter_positive_int(probe_ret_val);
}

#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_filter_err_code(int ret_val)
{
  #line 70 
  return ldv_filter_positive_int(ret_val);
}

#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/common/list.h"
#line 28 
void ldv_save_allocated_memory_to_list(void *);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
void *ldv_dev_get_drvdata(struct device *dev);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
int ldv_dev_set_drvdata(struct device *dev, void *data);
#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 57 
void *ldv_xzalloc(size_t size);
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
void *ldv_dev_get_drvdata(struct device *dev)
{
  #line 31 
  if (dev != (struct device *)0 && dev->p != (struct device_private *)0) 
    #line 32 
    return (dev->p)->driver_data;
  #line 34 
  return (void *)0;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
int ldv_dev_set_drvdata(struct device *dev, void *data)
{
  #line 45 
  dev->p = (struct device_private *)ldv_xzalloc(8UL);
  #line 46 
  ldv_save_allocated_memory_to_list((void *)dev->p);
  #line 47 
  (dev->p)->driver_data = data;
  #line 49 
  return 0;
}

#line 156  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 156 
void ldv_check_alloc_flags(gfp_t);
#line 48  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 48 
void *ldv_malloc(size_t size);
#line 49 
#line 49 
void *ldv_calloc(size_t nmemb, size_t size);
#line 50 
#line 50 
void *ldv_zalloc(size_t size);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kmalloc(size_t size, gfp_t flags)
{
  #line 26 
  void *res;
  #line 28 
  ldv_check_alloc_flags(flags);
  #line 29 
  res = ldv_malloc(size);
  #line 30 
  ldv_save_allocated_memory_to_list(res);
  #line 32 
  return res;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kzalloc(size_t size, gfp_t flags)
{
  #line 37 
  void *res;
  #line 39 
  ldv_check_alloc_flags(flags);
  #line 40 
  res = ldv_zalloc(size);
  #line 41 
  ldv_save_allocated_memory_to_list(res);
  #line 43 
  return res;
}

#line 46  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kmalloc_array(size_t n, size_t size, gfp_t flags)
{
  #line 48 
  void *res;
  #line 50 
  ldv_check_alloc_flags(flags);
  #line 51 
  res = ldv_malloc(n * size);
  #line 52 
  ldv_save_allocated_memory_to_list(res);
  #line 54 
  return res;
}

#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kcalloc(size_t n, size_t size, gfp_t flags)
{
  #line 59 
  void *res;
  #line 61 
  ldv_check_alloc_flags(flags);
  #line 62 
  res = ldv_calloc(n,size);
  #line 63 
  ldv_save_allocated_memory_to_list(res);
  #line 65 
  return res;
}

#line 51  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 51 
void ldv_free(void *s);
#line 59 
#line 59 
void *ldv_malloc_unknown_size(void);
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 31 
int ldv_undef_int_positive(void);
#line 40 
#line 40 
int ldv_undef_int_nonpositive(void);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/firmware_loader.c"
int ldv_request_firmware(struct firmware **fw)
{
  #line 27 
  int retval;
  #line 26 
  struct firmware *_fw = (struct firmware *)0;
  #line 29 
  retval = ldv_undef_int_nonpositive();
  #line 31 
  if (retval == 0) {
    #line 33 
    _fw = (struct firmware *)ldv_xzalloc(32UL);
    #line 34 
    _fw->data = (u8 *)ldv_malloc_unknown_size();
    #line 35 
    __VERIFIER_assume(_fw->data != (u8 *)0U);
    #line 36 
    _fw->size = (unsigned long)ldv_undef_int_positive();
  }
  #line 39 
  *fw = _fw;
  #line 41 
  return retval;
}

#line 44  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/firmware_loader.c"
void ldv_release_firmware(struct firmware *fw)
{
  #line 46 
  if (fw != (struct firmware *)0) {
    #line 48 
    ldv_free((void *)fw->data);
    #line 49 
    ldv_free((void *)fw);
  }
  #line 51 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/i2c.h"
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/i2c/i2c-core-smbus.c"
s32 ldv_i2c_smbus_read_block_data(u8 *values);
#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 55 
void *ldv_xmalloc(size_t size);
#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 34 
int ldv_undef_int_negative(void);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/i2c/i2c-core-smbus.c"
s32 ldv_i2c_smbus_read_block_data(u8 *values)
{
  #line 27 
  __u8 size;
  #line 28 
  char *bytes;
  #line 30 
  if (ldv_undef_int() != 0) {
    #line 33 
    size = (unsigned char)ldv_undef_int_positive();
    #line 35 
    __VERIFIER_assume((unsigned int)size <= 32U);
    #line 37 
    bytes = (char *)ldv_xmalloc((unsigned long)size);
    #line 39 
    memcpy((void *)values,(void *)bytes,(unsigned long)size);
    #line 40 
    ldv_free((void *)bytes);
    #line 42 
    return (int)size;
  }
  else {
    #line 46 
    return ldv_undef_int_negative();
  }
}

#line 988  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
__inline static void v4l2_set_subdevdata(struct v4l2_subdev *sd, void *p)
{
  #line 990 
  sd->dev_priv = p;
  #line 991 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/media/v4l2-common.h"
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/media/v4l2-core/v4l2-i2c.c"
void ldv_v4l2_i2c_subdev_init(struct v4l2_subdev *sd, struct i2c_client *client, struct v4l2_subdev_ops *ops);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/media/v4l2-core/v4l2-i2c.c"
void ldv_v4l2_i2c_subdev_init(struct v4l2_subdev *sd, struct i2c_client *client, struct v4l2_subdev_ops *ops)
{
  #line 26 
  sd->ops = ops;
  #line 27 
  v4l2_set_subdevdata(sd,(void *)client);
  #line 28 
  ldv_dev_set_drvdata(& client->dev,(void *)sd);
  #line 29 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/spi.c"
struct spi_controller *ldv_spi_alloc_master(struct device *host, unsigned int size)
{
  #line 25 
  struct spi_controller *master;
  #line 27 
  master = (struct spi_controller *)ldv_zalloc((unsigned long)size + 2936UL);
  #line 29 
  if (master == (struct spi_controller *)0) 
                                            #line 30 
                                            return (struct spi_controller *)0;
  #line 32 
  ldv_dev_set_drvdata(& master->dev,(void *)(master + 1U));
  #line 34 
  return master;
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/fb.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
struct fb_info *ldv_framebuffer_alloc(size_t size);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/fb.h"
#line 38  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
void ldv_framebuffer_release(struct fb_info *info);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
struct fb_info *ldv_framebuffer_alloc(size_t size)
{
  #line 25 
  struct fb_info *info;
  #line 27 
  info = (struct fb_info *)ldv_zalloc(size + 1568UL);
  #line 29 
  if (info == (struct fb_info *)0) 
                                   #line 30 
                                   return (struct fb_info *)0;
  #line 32 
  if (size != 0UL) 
                   #line 33 
                   info->par = (void *)((char *)info + 1568UL);
  #line 35 
  return info;
}

#line 38  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
void ldv_framebuffer_release(struct fb_info *info)
{
  #line 40 
  if (info == (struct fb_info *)0) 
                                   #line 41 
                                   return;
  #line 44 
  ldv_free((void *)info->apertures);
  #line 46 
  ldv_free((void *)info);
  #line 47 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err(void *ptr);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err_or_null(void *ptr);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
void *ldv_err_ptr(long error);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
long ldv_ptr_err(void *ptr);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err(void *ptr)
{
  #line 29 
  if ((unsigned long)ptr > 18446744073709547520UL) 
                                                   #line 30 
                                                   return (_Bool)1; else 
                                                                    #line 32 
                                                                    return (_Bool)0;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
void *ldv_err_ptr(long error)
{
  #line 37 
  unsigned long result;
  #line 39 
  __VERIFIER_assume(error < 0L);
  #line 40 
  __VERIFIER_assume(error >= -4095L);
  #line 41 
  result = 18446744073709547520UL - (unsigned long)error;
  #line 42 
  __VERIFIER_assume(result > 18446744073709547520UL);
  #line 44 
  return (void *)result;
}

#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
long ldv_ptr_err(void *ptr)
{
  #line 49 
  long result;
  #line 51 
  __VERIFIER_assume((unsigned long)ptr > 18446744073709547520UL);
  #line 52 
  result = (long)(18446744073709547520UL - (unsigned long)ptr);
  #line 53 
  __VERIFIER_assume(result < 0L);
  #line 54 
  __VERIFIER_assume(result >= -4095L);
  #line 56 
  return result;
}

#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err_or_null(void *ptr)
{
  #line 61 
  int tmp_0;
  #line 61 
  if (ptr == (void *)0) 
                        #line 61 
                        tmp_0 = 1;
  else {
    #line 61 
    if ((int)ldv_is_err(ptr) != 0) 
                                   #line 61 
                                   tmp_0 = 1; else 
                                                   #line 61 
                                                   tmp_0 = 0;
  }
  #line 61 
  return (_Bool)(tmp_0 != 0);
}

#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/panic.h"
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/kernel/panic.c"
void ldv_panic(void);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/kernel/panic.c"
void ldv_panic(void)
{
  #line 23 
  __VERIFIER_assume(0);
  #line 24 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_set(unsigned long *map, unsigned int start, int nbits);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_clear(unsigned long *map, unsigned int start, int nbits);
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 78  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
unsigned long ldv_bitmap_find_next_zero_area(unsigned long *map, unsigned long size, unsigned long start, unsigned int nr, unsigned long align_mask);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 23 
unsigned long ldv_find_next_zero_bit(unsigned long *addr, unsigned long size, unsigned long offset);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_set_bit(long nr, unsigned long *addr)
{
  #line 24 
  *(addr + (unsigned long)nr / 64UL) |= 1UL << ((unsigned long)nr & 63UL);
  #line 25 
  return;
}

#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_clear_bit(long nr, unsigned long *addr)
{
  #line 29 
  *(addr + (unsigned long)nr / 64UL) &= ~ (1UL << ((unsigned long)nr & 63UL));
  #line 30 
  return;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_set(unsigned long *map, unsigned int start, int nbits)
{
  #line 34 
  unsigned long *p = map + (unsigned long)(start / 64U);
  #line 35 
  unsigned int size = start + (unsigned int)nbits;
  #line 36 
  int bits_to_set = (int)(64U - (start & 63U));
  #line 37 
  unsigned long mask_to_set = 18446744073709551615UL << ((unsigned long)start & 63UL);
  #line 39 
  while (nbits - bits_to_set >= 0) {
    #line 40 
    *p |= mask_to_set;
    #line 41 
    nbits -= bits_to_set;
    #line 42 
    bits_to_set = 64;
    #line 43 
    mask_to_set = 18446744073709551615UL;
    #line 44 
    p ++;
  }
  #line 46 
  if (nbits != 0) {
    #line 47 
    mask_to_set = (18446744073709551615UL >> ((unsigned long)(- size) & 63UL)) & mask_to_set;
    #line 48 
    *p |= mask_to_set;
  }
  #line 50 
  return;
}

#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_clear(unsigned long *map, unsigned int start, int nbits)
{
  #line 54 
  unsigned long *p = map + (unsigned long)(start / 64U);
  #line 55 
  unsigned int size = start + (unsigned int)nbits;
  #line 56 
  int bits_to_clear = (int)(64U - (start & 63U));
  #line 57 
  unsigned long mask_to_clear = 18446744073709551615UL << ((unsigned long)start & 63UL);
  #line 59 
  while (nbits - bits_to_clear >= 0) {
    #line 60 
    *p &= ~ mask_to_clear;
    #line 61 
    nbits -= bits_to_clear;
    #line 62 
    bits_to_clear = 64;
    #line 63 
    mask_to_clear = 18446744073709551615UL;
    #line 64 
    p ++;
  }
  #line 66 
  if (nbits != 0) {
    #line 67 
    mask_to_clear = (18446744073709551615UL >> ((unsigned long)(- size) & 63UL)) & mask_to_clear;
    #line 68 
    *p &= ~ mask_to_clear;
  }
  #line 70 
  return;
}

#line 72  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_zero(unsigned long *dst, unsigned int nbits)
{
  #line 74 
  unsigned int len = (unsigned int)(((unsigned long)nbits + 63UL) / 64UL) * 8U;
  #line 75 
  memset((void *)dst,0,(unsigned long)len);
  #line 76 
  return;
}

#line 78  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
unsigned long ldv_bitmap_find_next_zero_area(unsigned long *map, unsigned long size, unsigned long start, unsigned int nr, unsigned long align_mask)
{
  #line 80 
  unsigned long index;
  #line 80 
  unsigned long end;
  #line 80 
  unsigned long i;
  #line 82 
  again: 
         #line 82 
  ;
  #line 83 
  index = ldv_find_next_zero_bit(map,size,start);
  #line 84 
  index = (index + align_mask) & ~ align_mask;
  #line 85 
  end = (unsigned long)nr + index;
  #line 87 
  if (end > size) 
                  #line 88 
                  return end;
  #line 90 
  i = ldv_find_next_bit(map,end,index);
  #line 92 
  if (i < end) {
    #line 93 
    start = i + 1UL;
    #line 94 
    goto again;
  }
  #line 97 
  return index;
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 25 
void ldv_check_find_bit_offset(unsigned long, unsigned long);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_ffs(unsigned long word)
{
  #line 23 
  int num = 0;
  #line 25 
  if ((word & 4294967295UL) == 0UL) {
    #line 26 
    num += 32;
    #line 27 
    word >>= 32;
  }
  #line 29 
  if ((word & 65535UL) == 0UL) {
    #line 30 
    num += 16;
    #line 31 
    word >>= 16;
  }
  #line 33 
  if ((word & 255UL) == 0UL) {
    #line 34 
    num += 8;
    #line 35 
    word >>= 8;
  }
  #line 37 
  if ((word & 15UL) == 0UL) {
    #line 38 
    num += 4;
    #line 39 
    word >>= 4;
  }
  #line 41 
  if ((word & 3UL) == 0UL) {
    #line 42 
    num += 2;
    #line 43 
    word >>= 2;
  }
  #line 45 
  if ((word & 1UL) == 0UL) 
                           #line 46 
                           num ++;
  #line 48 
  return (unsigned long)num;
}

#line 51  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_min(unsigned long a, unsigned long b)
{
  #line 53 
  if (a < b) 
             #line 54 
             return a;
  #line 56 
  return b;
}

#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_restrict_find_bit_res(unsigned long res, unsigned long size)
{
  #line 62 
  __VERIFIER_assume(1);
  #line 63 
  __VERIFIER_assume(res <= size);
  #line 65 
  return res;
}

#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_first_bit(unsigned long *addr, unsigned long size)
{
  #line 70 
  unsigned long i;
  #line 72 
  i = 0UL;
  #line 72 
  while (i * 64UL < size) {
    #line 73 
    if (*(addr + i) != 0UL) {
      #line 74 
      ;
      #line 74 
      ;
      #line 74 
      ;
      #line 74 
      return ldv_restrict_find_bit_res(ldv_min(i * 64UL + ldv_ffs(*(addr + i)),size),
                                  size);
    }
    #line 72 
    i ++;
  }
  #line 76 
  return size;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_next_bit(unsigned long *addr, unsigned long size, unsigned long offset)
{
  #line 81 
  unsigned long tmp;
  #line 83 
  ldv_check_find_bit_offset(size,offset);
  #line 85 
  tmp = *(addr + offset / 64UL);
  #line 86 
  tmp = (unsigned long)((18446744073709551615ULL << (offset & 63UL)) & (unsigned long long)tmp);
  #line 87 
  offset &= 18446744073709551552UL;
  #line 89 
  while (tmp == 0UL) {
    #line 90 
    offset += 64UL;
    #line 91 
    if (offset >= size) 
                        #line 92 
                        return size;
    #line 94 
    tmp = *(addr + offset / 64UL);
  }
  #line 97 
  ;
  #line 97 
  ;
  #line 97 
  ;
  #line 97 
  return ldv_restrict_find_bit_res(ldv_min(ldv_ffs(tmp) + offset,size),size);
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_next_zero_bit(unsigned long *addr, unsigned long size, unsigned long offset)
{
  #line 102 
  unsigned long tmp;
  #line 104 
  ldv_check_find_bit_offset(size,offset);
  #line 106 
  tmp = *(addr + offset / 64UL);
  #line 107 
  tmp = ~ tmp;
  #line 108 
  tmp = (unsigned long)((18446744073709551615ULL << (offset & 63UL)) & (unsigned long long)tmp);
  #line 109 
  offset &= 18446744073709551552UL;
  #line 111 
  while (tmp == 0UL) {
    #line 112 
    offset += 64UL;
    #line 113 
    if (offset >= size) 
                        #line 114 
                        return size;
    #line 116 
    tmp = *(addr + offset / 64UL);
    #line 117 
    tmp = ~ tmp;
  }
  #line 120 
  ;
  #line 120 
  ;
  #line 120 
  ;
  #line 120 
  return ldv_restrict_find_bit_res(ldv_min(ldv_ffs(tmp) + offset,size),size);
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
size_t ldv_strlen(char *s);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strcmp(char *cs, char *ct);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strncmp(char *cs, char *ct, __kernel_size_t count);
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 70  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
char *ldv_strstr(char *cs, char *ct);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
size_t ldv_strlen(char *s)
{
  #line 23 
  unsigned int len = 0U;
  #line 25 
  while ((int)*s != 0) {
    #line 26 
    len ++;
    #line 25 
    s ++;
  }
  #line 28 
  return (unsigned long)len;
}

#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strcmp(char *cs, char *ct)
{
  #line 33 
  while ((int)*cs != 0 && (int)*ct != 0) {
    #line 34 
    if ((int)*cs != (int)*ct) 
                              #line 35 
                              break;
    #line 33 
    cs ++;
    #line 33 
    ct ++;
  }
  #line 37 
  return (int)*cs - (int)*ct;
}

#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strncmp(char *cs, char *ct, __kernel_size_t count)
{
  #line 42 
  if (count == 0UL) 
                    #line 43 
                    return 0;
  #line 45 
  while ((int)*cs != 0 && (int)*ct != 0) {
    #line 46 
    if ((int)*cs != (int)*ct) 
                              #line 47 
                              break;
    #line 49 
    count --;
    #line 51 
    if (count == 0UL) 
                      #line 52 
                      break;
    #line 45 
    cs ++;
    #line 45 
    ct ++;
  }
  #line 55 
  return (int)*cs - (int)*ct;
}

#line 58  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_memcmp(void *cs, void *ct, size_t count)
{
  #line 60 
  unsigned char *su1;
  #line 60 
  unsigned char *su2;
  #line 61 
  int res = 0;
  #line 63 
  su1 = (unsigned char *)cs;
  #line 63 
  su2 = (unsigned char *)ct;
  #line 63 
  while (count != 0UL) {
    #line 64 
    res = (int)*su1 - (int)*su2;
    #line 64 
    if (res != 0) 
                  #line 65 
                  break;
    #line 63 
    su1 ++;
    #line 63 
    su2 ++;
    #line 63 
    count --;
  }
  #line 67 
  return res;
}

#line 70  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
char *ldv_strstr(char *cs, char *ct)
{
  #line 72 
  size_t cs_len;
  #line 72 
  size_t ct_len;
  #line 74 
  cs_len = ldv_strlen(cs);
  #line 75 
  ct_len = ldv_strlen(ct);
  #line 77 
  while (cs_len >= ct_len) {
    #line 78 
    if (ldv_memcmp((void *)cs,(void *)ct,ct_len) == 0) 
                                                       #line 79 
                                                       return cs;
    #line 81 
    cs_len --;
    #line 82 
    cs ++;
  }
  #line 85 
  return (char *)0;
}

#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/list.c"
void ldv_init_list_head(struct list_head *list)
{
  #line 23 
  list->next = list;
  #line 24 
  list->prev = list;
  #line 25 
  return;
}

#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc_array(size_t n, size_t size, gfp_t flags);
#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct kmem_cache *ldv_kmem_cache_create(char *name, unsigned int size);
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_alloc(struct kmem_cache *cachep, gfp_t flags);
#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_zalloc(struct kmem_cache *cachep, gfp_t flags);
#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_free(struct kmem_cache *cachep, void *objp);
#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_destroy(struct kmem_cache *cachep);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc(size_t size, gfp_t flags)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_flags(flags);
  #line 28 
  res = ldv_malloc(size);
  #line 30 
  return res;
}

#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kzalloc(size_t size, gfp_t flags)
{
  #line 35 
  void *res;
  #line 37 
  ldv_check_alloc_flags(flags);
  #line 38 
  res = ldv_zalloc(size);
  #line 40 
  return res;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc_array(size_t n, size_t size, gfp_t flags)
{
  #line 45 
  void *res;
  #line 47 
  ldv_check_alloc_flags(flags);
  #line 48 
  res = ldv_malloc(n * size);
  #line 50 
  return res;
}

#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kcalloc(size_t n, size_t size, gfp_t flags)
{
  #line 55 
  void *res;
  #line 57 
  ldv_check_alloc_flags(flags);
  #line 58 
  res = ldv_calloc(n,size);
  #line 60 
  return res;
}

#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct kmem_cache *ldv_kmem_cache_create(char *name, unsigned int size)
{
  #line 71 
  struct kmem_cache *res;
  #line 72 
  struct ldv_kmem_cache *ldv_res;
  #line 74 
  res = (struct kmem_cache *)ldv_zalloc(16UL);
  #line 76 
  if (res != (struct kmem_cache *)0) {
    #line 77 
    ldv_res = (struct ldv_kmem_cache *)res;
    #line 78 
    ldv_res->name = name;
    #line 79 
    ldv_res->size = size;
  }
  #line 82 
  return res;
}

#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_alloc(struct kmem_cache *cachep, gfp_t flags)
{
  #line 87 
  return ldv_kmalloc((unsigned long)((struct ldv_kmem_cache *)cachep)->size,
                  flags);
}

#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_zalloc(struct kmem_cache *cachep, gfp_t flags)
{
  #line 92 
  return ldv_kzalloc((unsigned long)((struct ldv_kmem_cache *)cachep)->size,
                  flags);
}

#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_free(struct kmem_cache *cachep, void *objp)
{
  #line 97 
  ldv_free(objp);
  #line 98 
  return;
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_destroy(struct kmem_cache *cachep)
{
  #line 102 
  ldv_free((void *)cachep);
  #line 103 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/util.c"
void *ldv_kmemdup(void *src, size_t len, gfp_t gfp);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/util.c"
void *ldv_kmemdup(void *src, size_t len, gfp_t gfp)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_flags(gfp);
  #line 28 
  res = ldv_malloc(len);
  #line 30 
  if (res != (void *)0) 
                        #line 31 
                        memcpy(res,src,len);
  #line 33 
  return res;
}

#line 162  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 162 
void ldv_check_alloc_nonatomic(void);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vmalloc(unsigned long size)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_nonatomic();
  #line 28 
  res = ldv_malloc(size);
  #line 30 
  return res;
}

#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vzalloc(unsigned long size)
{
  #line 35 
  void *res;
  #line 37 
  ldv_check_alloc_nonatomic();
  #line 38 
  res = ldv_zalloc(size);
  #line 40 
  return res;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void ldv_vfree(void *addr)
{
  #line 45 
  ldv_free(addr);
  #line 46 
  return;
}

#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 28 
void *malloc(size_t);
#line 29 
#line 29 
void *calloc(size_t, size_t);
#line 30 
#line 30 
void free(void *);
#line 45 
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
unsigned int ldv_is_memory_alloc_failures;
#line 56  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xcalloc(size_t nmemb, size_t size);
#line 60  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc_unknown_size(void);
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 97  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc_unknown_size(void);
#line 64  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc(size_t size);
#line 65  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc(size_t nmemb, size_t size);
#line 66  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc(size_t size);
#line 67  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void ldv_reference_free(void *s);
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_realloc(void *ptr, size_t size);
#line 71  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 80  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc(size_t size);
#line 72  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xcalloc(size_t nmemb, size_t size);
#line 73  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xzalloc(size_t size);
#line 75  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 110  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc_unknown_size(void);
#line 76  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 124  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc_unknown_size(void);
#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc_unknown_size(void);
#line 83  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 106  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc_unknown_size(size_t size);
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 144  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc_unknown_size(size_t size);
#line 87  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 87 
void *external_allocated_data(void);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
unsigned int ldv_is_memory_alloc_failures = 1U;
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc(size_t size)
{
  #line 26 
  void *res;
  #line 28 
  if (ldv_is_memory_alloc_failures != 0U) {
    #line 28 
    if (ldv_undef_int() != 0) 
                              #line 29 
                              return (void *)0;
  }
  #line 32 
  res = malloc(size);
  #line 33 
  __VERIFIER_assume(res != (void *)0);
  #line 34 
  return res;
}

#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc(size_t nmemb, size_t size)
{
  #line 39 
  return calloc(nmemb,size);
}

#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc(size_t size)
{
  #line 44 
  return calloc(1UL,size);
}

#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void ldv_reference_free(void *s)
{
  #line 49 
  free(s);
  #line 50 
  return;
}

#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_realloc(void *ptr, size_t size)
{
  #line 54 
  void *res;
  #line 56 
  if (ptr != (void *)0 && size == 0UL) {
    #line 57 
    free(ptr);
    #line 58 
    return (void *)0;
  }
  #line 61 
  if (ptr == (void *)0) {
    #line 62 
    res = malloc(size);
    #line 63 
    return res;
  }
  #line 66 
  if (ldv_undef_int() != 0) {
    #line 68 
    res = malloc(size);
    #line 69 
    __VERIFIER_assume(res != (void *)0);
    #line 71 
    memcpy(res,ptr,size);
    #line 72 
    free(ptr);
    #line 74 
    return res;
  }
  else 
       #line 77 
       return (void *)0;
}

#line 80  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc(size_t size)
{
  #line 82 
  void *res;
  #line 84 
  res = malloc(size);
  #line 85 
  __VERIFIER_assume(res != (void *)0);
  #line 87 
  return res;
}

#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xcalloc(size_t nmemb, size_t size)
{
  #line 92 
  void *res;
  #line 94 
  res = calloc(nmemb,size);
  #line 95 
  __VERIFIER_assume(res != (void *)0);
  #line 97 
  return res;
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xzalloc(size_t size)
{
  #line 102 
  void *res;
  #line 104 
  res = calloc(1UL,size);
  #line 105 
  __VERIFIER_assume(res != (void *)0);
  #line 107 
  return res;
}

#line 110  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc_unknown_size(void)
{
  #line 112 
  void *res;
  #line 114 
  if (ldv_undef_int() != 0) {
    #line 116 
    res = external_allocated_data();
    #line 117 
    __VERIFIER_assume(res != (void *)0);
    #line 118 
    return res;
  }
  else 
       #line 121 
       return (void *)0;
}

#line 124  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc_unknown_size(void)
{
  #line 126 
  void *res;
  #line 128 
  if (ldv_undef_int() != 0) {
    #line 130 
    res = external_allocated_data();
    #line 131 
    memset(res,0,8UL);
    #line 132 
    __VERIFIER_assume(res != (void *)0);
    #line 133 
    return res;
  }
  else 
       #line 136 
       return (void *)0;
}

#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc_unknown_size(void)
{
  #line 141 
  return ldv_reference_calloc_unknown_size();
}

#line 144  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc_unknown_size(size_t size)
{
  #line 146 
  void *res;
  #line 149 
  res = external_allocated_data();
  #line 150 
  __VERIFIER_assume(res != (void *)0);
  #line 152 
  return res;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_malloc(size_t size)
{
  #line 25 
  void *res;
  #line 26 
  res = ldv_reference_malloc(size);
  #line 27 
  if (res != (void *)0) {
    #line 28 
    int tmp_0;
    #line 28 
    if (ldv_is_err(res)) 
                         #line 28 
                         tmp_0 = 0; else 
                                         #line 28 
                                         tmp_0 = 1;
    #line 28 
    __VERIFIER_assume(tmp_0);
  }
  #line 29 
  return res;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc(size_t nmemb, size_t size)
{
  #line 34 
  void *res;
  #line 35 
  res = ldv_reference_calloc(nmemb,size);
  #line 36 
  if (res != (void *)0) {
    #line 37 
    int tmp_0;
    #line 37 
    if (ldv_is_err(res)) 
                         #line 37 
                         tmp_0 = 0; else 
                                         #line 37 
                                         tmp_0 = 1;
    #line 37 
    __VERIFIER_assume(tmp_0);
  }
  #line 38 
  return res;
}

#line 41  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc(size_t size)
{
  #line 43 
  void *res;
  #line 44 
  res = ldv_reference_zalloc(size);
  #line 45 
  if (res != (void *)0) {
    #line 46 
    int tmp_0;
    #line 46 
    if (ldv_is_err(res)) 
                         #line 46 
                         tmp_0 = 0; else 
                                         #line 46 
                                         tmp_0 = 1;
    #line 46 
    __VERIFIER_assume(tmp_0);
  }
  #line 47 
  return res;
}

#line 50  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void ldv_free(void *s)
{
  #line 52 
  ldv_reference_free(s);
  #line 53 
  return;
}

#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc(size_t size)
{
  #line 57 
  void *res;
  #line 59 
  int tmp_0;
  #line 58 
  res = ldv_reference_xmalloc(size);
  #line 59 
  if (ldv_is_err(res)) 
                       #line 59 
                       tmp_0 = 0; else 
                                       #line 59 
                                       tmp_0 = 1;
  #line 59 
  __VERIFIER_assume(tmp_0);
  #line 60 
  return res;
}

#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xcalloc(size_t nmemb, size_t size)
{
  #line 65 
  void *res;
  #line 67 
  int tmp_0;
  #line 66 
  res = ldv_reference_xcalloc(nmemb,size);
  #line 67 
  if (ldv_is_err(res)) 
                       #line 67 
                       tmp_0 = 0; else 
                                       #line 67 
                                       tmp_0 = 1;
  #line 67 
  __VERIFIER_assume(tmp_0);
  #line 68 
  return res;
}

#line 71  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xzalloc(size_t size)
{
  #line 73 
  void *res;
  #line 75 
  int tmp_0;
  #line 74 
  res = ldv_reference_xzalloc(size);
  #line 75 
  if (ldv_is_err(res)) 
                       #line 75 
                       tmp_0 = 0; else 
                                       #line 75 
                                       tmp_0 = 1;
  #line 75 
  __VERIFIER_assume(tmp_0);
  #line 76 
  return res;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_malloc_unknown_size(void)
{
  #line 81 
  void *res;
  #line 82 
  res = ldv_reference_malloc_unknown_size();
  #line 83 
  if (res != (void *)0) {
    #line 84 
    int tmp_0;
    #line 84 
    if (ldv_is_err(res)) 
                         #line 84 
                         tmp_0 = 0; else 
                                         #line 84 
                                         tmp_0 = 1;
    #line 84 
    __VERIFIER_assume(tmp_0);
  }
  #line 85 
  return res;
}

#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc_unknown_size(void)
{
  #line 90 
  void *res;
  #line 91 
  res = ldv_reference_calloc_unknown_size();
  #line 92 
  if (res != (void *)0) {
    #line 93 
    int tmp_0;
    #line 93 
    if (ldv_is_err(res)) 
                         #line 93 
                         tmp_0 = 0; else 
                                         #line 93 
                                         tmp_0 = 1;
    #line 93 
    __VERIFIER_assume(tmp_0);
  }
  #line 94 
  return res;
}

#line 97  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc_unknown_size(void)
{
  #line 99 
  void *res;
  #line 100 
  res = ldv_reference_zalloc_unknown_size();
  #line 101 
  if (res != (void *)0) {
    #line 102 
    int tmp_0;
    #line 102 
    if (ldv_is_err(res)) 
                         #line 102 
                         tmp_0 = 0; else 
                                         #line 102 
                                         tmp_0 = 1;
    #line 102 
    __VERIFIER_assume(tmp_0);
  }
  #line 103 
  return res;
}

#line 106  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc_unknown_size(size_t size)
{
  #line 108 
  void *res;
  #line 110 
  int tmp_0;
  #line 109 
  res = ldv_reference_xmalloc_unknown_size(size);
  #line 110 
  if (ldv_is_err(res)) 
                       #line 110 
                       tmp_0 = 0; else 
                                       #line 110 
                                       tmp_0 = 1;
  #line 110 
  __VERIFIER_assume(tmp_0);
  #line 111 
  return res;
}

/* compiler builtin: 
   long __builtin_expect(long exp, long c);   */
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
#line 22 
void __VERIFIER_error(void);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
long __builtin_expect(long exp, long c)
{
  #line 26 
  return exp;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/gcc.c"
void __builtin_trap(void)
{
  #line 37 
  __VERIFIER_error();
  #line 38 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
long ldv_undef_long(void);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned int ldv_undef_uint(void);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long ldv_undef_ulong(void);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long long ldv_undef_ulonglong(void);
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr(void);
#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonnegative(void);
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr_non_null(void);
#line 54  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range(int begin, int end);
#line 56  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 151  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range2(int begin, int end);
#line 29 
#line 29 
int __VERIFIER_nondet_int(void);
#line 31 
#line 31 
long __VERIFIER_nondet_long(void);
#line 38 
#line 38 
unsigned int __VERIFIER_nondet_uint(void);
#line 41 
#line 41 
unsigned long __VERIFIER_nondet_ulong(void);
#line 42 
#line 42 
unsigned long long __VERIFIER_nondet_ulonglong(void);
#line 43 
#line 43 
void *__VERIFIER_nondet_pointer(void);
#line 45  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int(void)
{
  #line 48 
  int undef_int = __VERIFIER_nondet_int();
  #line 50 
  return undef_int;
}

#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
long ldv_undef_long(void)
{
  #line 56 
  long undef_long = __VERIFIER_nondet_long();
  #line 58 
  return undef_long;
}

#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned int ldv_undef_uint(void)
{
  #line 64 
  unsigned int undef_uint = __VERIFIER_nondet_uint();
  #line 66 
  return undef_uint;
}

#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr(void)
{
  #line 72 
  void *undef_ptr = __VERIFIER_nondet_pointer();
  #line 74 
  return undef_ptr;
}

#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long ldv_undef_ulong(void)
{
  #line 80 
  unsigned long undef_ulong = __VERIFIER_nondet_ulong();
  #line 82 
  return undef_ulong;
}

#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long long ldv_undef_ulonglong(void)
{
  #line 88 
  unsigned long long undef_ulonglong = __VERIFIER_nondet_ulonglong();
  #line 90 
  return undef_ulonglong;
}

#line 93  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_positive(void)
{
  #line 95 
  int ret = ldv_undef_int();
  #line 97 
  __VERIFIER_assume(ret > 0);
  #line 99 
  return ret;
}

#line 102  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_negative(void)
{
  #line 104 
  int ret = ldv_undef_int();
  #line 106 
  __VERIFIER_assume(ret < 0);
  #line 108 
  return ret;
}

#line 111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonnegative(void)
{
  #line 113 
  int ret = ldv_undef_int();
  #line 115 
  __VERIFIER_assume(ret >= 0);
  #line 117 
  return ret;
}

#line 120  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonpositive(void)
{
  #line 122 
  int ret = ldv_undef_int();
  #line 124 
  __VERIFIER_assume(ret <= 0);
  #line 126 
  return ret;
}

#line 129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr_non_null(void)
{
  #line 131 
  void *ret = ldv_undef_ptr();
  #line 133 
  __VERIFIER_assume(ret != (void *)0);
  #line 135 
  return ret;
}

#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range(int begin, int end)
{
  #line 141 
  int ret;
  #line 143 
  ret = ldv_undef_int();
  #line 144 
  __VERIFIER_assume(ret >= begin);
  #line 145 
  __VERIFIER_assume(ret <= end);
  #line 147 
  return ret;
}

#line 151  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range2(int begin, int end)
{
  #line 153 
  int ret;
  #line 155 
  ret = begin;
  #line 155 
  while (ret < end) {
    #line 156 
    if (ldv_undef_int() != 0) 
                              #line 157 
                              break;
    #line 155 
    ret ++;
  }
  #line 159 
  return ret;
}

#line 62  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 62 
void ldv_initialize(void);
#line 97 
#line 97 
void ldv_failed_register_netdev(void);
#line 123 
#line 123 
void ldv_pre_probe(void);
#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
#line 35 
int pthread_create(pthread_t *, pthread_attr_t *, void *(*)(void *), void *);
#line 39 
#line 39 
int pthread_join(pthread_t, void **);
#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/emg/0/environment_model.c"
#line 265 
void emg_dispatch_deregister_13(struct net_device *arg0);
#line 91 
#line 192 
void emg_dispatch_deregister_9(struct pci_driver *arg0);
#line 92 
#line 139 
void emg_dispatch_instance_deregister_4(struct timer_list *arg0);
#line 93 
#line 181 
void emg_dispatch_instance_register_8(struct timer_list *arg0);
#line 94 
#line 148 
void emg_dispatch_irq_deregister_6(int arg0);
#line 95 
#line 212 
void emg_dispatch_irq_register_11(int arg0, enum irqreturn (*arg1)(int , void *), enum irqreturn (*arg2)(int , void *), void *arg3);
#line 96 
#line 201 
void emg_dispatch_register_10(struct net_device *arg0);
#line 97 
#line 128 
void emg_dispatch_register_2(struct pci_driver *arg0);
#line 98 
#line 1397 
void *emg_entry_point_insmod(void *arg0);
#line 102 
#line 274 
void *emg_interrupt_interrupt_scenario_vxge_alarm_msix_handle(void *arg0);
#line 103 
#line 337 
void *emg_interrupt_interrupt_scenario_vxge_isr_napi(void *arg0);
#line 104 
#line 400 
void *emg_interrupt_interrupt_scenario_vxge_rx_msix_napi_handle(void *arg0);
#line 105 
#line 463 
void *emg_interrupt_interrupt_scenario_vxge_tx_msix_handle(void *arg0);
#line 107 
#line 526 
void *emg_net_random_allocationless_scenario_vxge_fw_flash(void *arg0);
#line 108 
#line 875 
void *emg_pci_pci_scenario_vxge_driver(void *arg0);
#line 113 
#line 1047 
void *emg_timer_timer_scenario_6(void *arg0);
#line 115 
#line 1426 
int main(void);
#line 118  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_14;
#line 119  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_15;
#line 120  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_16;
#line 121  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_17;
#line 122  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_18;
#line 123  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_19;
#line 124  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_20;
#line 128  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_register_2(struct pci_driver *arg0)
{
  #line 129 
  int ret;
  #line 130 
  struct emg_struct_pci_scenario_vxge_driver_19 *cf_arg_19;
  #line 131 
  cf_arg_19 = (struct emg_struct_pci_scenario_vxge_driver_19 *)ldv_xmalloc(16UL);
  #line 132 
  cf_arg_19->arg0 = arg0;
  #line 133 
  ret = pthread_create(& emg_thread_19,(pthread_attr_t *)0,& emg_pci_pci_scenario_vxge_driver,(void *)cf_arg_19);
  #line 134 
  __VERIFIER_assume(ret == 0);
  #line 135 
  return;
}

#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_instance_deregister_4(struct timer_list *arg0)
{
  #line 140 
  int ret;
  #line 141 
  struct emg_struct_timer_scenario_6_20 *cf_arg_20;
  #line 142 
  ret = pthread_join(emg_thread_20,(void **)0);
  #line 143 
  __VERIFIER_assume(ret == 0);
  #line 144 
  return;
}

#line 148  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_irq_deregister_6(int arg0)
{
  #line 149 
  int ret;
  #line 150 
  struct emg_struct_free_irq_6 *cf_arg_14;
  #line 151 
  struct emg_struct_free_irq_6 *cf_arg_15;
  #line 152 
  struct emg_struct_free_irq_6 *cf_arg_16;
  #line 153 
  struct emg_struct_free_irq_6 *cf_arg_17;
  #line 154 
  switch (ldv_undef_int()) {
    #line 155 
    case 0: 
            #line 155 
    ;
    #line 156 
    ret = pthread_join(emg_thread_14,(void **)0);
    #line 157 
    __VERIFIER_assume(ret == 0);
    #line 158 
    break;
    #line 160 
    case 1: 
            #line 160 
    ;
    #line 161 
    ret = pthread_join(emg_thread_15,(void **)0);
    #line 162 
    __VERIFIER_assume(ret == 0);
    #line 163 
    break;
    #line 165 
    case 2: 
            #line 165 
    ;
    #line 166 
    ret = pthread_join(emg_thread_16,(void **)0);
    #line 167 
    __VERIFIER_assume(ret == 0);
    #line 168 
    break;
    #line 170 
    case 3: 
            #line 170 
    ;
    #line 171 
    ret = pthread_join(emg_thread_17,(void **)0);
    #line 172 
    __VERIFIER_assume(ret == 0);
    #line 173 
    break;
    #line 175 
    default: 
             #line 175 
    ;
    #line 175 
    __VERIFIER_assume(0);
  }
  #line 177 
  return;
}

#line 181  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_instance_register_8(struct timer_list *arg0)
{
  #line 182 
  int ret;
  #line 183 
  struct emg_struct_timer_scenario_6_20 *cf_arg_20;
  #line 184 
  cf_arg_20 = (struct emg_struct_timer_scenario_6_20 *)ldv_xmalloc(16UL);
  #line 185 
  cf_arg_20->arg0 = arg0;
  #line 186 
  ret = pthread_create(& emg_thread_20,(pthread_attr_t *)0,& emg_timer_timer_scenario_6,(void *)cf_arg_20);
  #line 187 
  __VERIFIER_assume(ret == 0);
  #line 188 
  return;
}

#line 192  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_deregister_9(struct pci_driver *arg0)
{
  #line 193 
  int ret;
  #line 194 
  struct emg_struct_pci_scenario_vxge_driver_19 *cf_arg_19;
  #line 195 
  ret = pthread_join(emg_thread_19,(void **)0);
  #line 196 
  __VERIFIER_assume(ret == 0);
  #line 197 
  return;
}

#line 201  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_register_10(struct net_device *arg0)
{
  #line 202 
  int ret;
  #line 203 
  struct emg_struct_random_allocationless_scenario_vxge_fw_flash_18 *cf_arg_18;
  #line 204 
  cf_arg_18 = (struct emg_struct_random_allocationless_scenario_vxge_fw_flash_18 *)ldv_xmalloc(16UL);
  #line 205 
  cf_arg_18->arg0 = arg0;
  #line 206 
  ret = pthread_create(& emg_thread_18,(pthread_attr_t *)0,& emg_net_random_allocationless_scenario_vxge_fw_flash,(void *)cf_arg_18);
  #line 207 
  __VERIFIER_assume(ret == 0);
  #line 208 
  return;
}

#line 212  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_irq_register_11(int arg0, enum irqreturn (*arg1)(int , void *), enum irqreturn (*arg2)(int , void *), void *arg3)
{
  #line 213 
  int ret;
  #line 214 
  struct emg_struct_interrupt_scenario_vxge_alarm_msix_handle_14 *cf_arg_14;
  #line 215 
  struct emg_struct_interrupt_scenario_vxge_alarm_msix_handle_14 *cf_arg_15;
  #line 216 
  struct emg_struct_interrupt_scenario_vxge_alarm_msix_handle_14 *cf_arg_16;
  #line 217 
  struct emg_struct_interrupt_scenario_vxge_alarm_msix_handle_14 *cf_arg_17;
  #line 218 
  switch (ldv_undef_int()) {
    #line 219 
    case 0: 
            #line 219 
    ;
    #line 220 
    cf_arg_14 = (struct emg_struct_interrupt_scenario_vxge_alarm_msix_handle_14 *)ldv_xmalloc(40UL);
    #line 221 
    cf_arg_14->arg0 = arg0;
    #line 222 
    cf_arg_14->arg1 = arg1;
    #line 223 
    cf_arg_14->arg2 = arg2;
    #line 224 
    cf_arg_14->arg3 = arg3;
    #line 225 
    ret = pthread_create(& emg_thread_14,(pthread_attr_t *)0,& emg_interrupt_interrupt_scenario_vxge_alarm_msix_handle,(void *)cf_arg_14);
    #line 226 
    __VERIFIER_assume(ret == 0);
    #line 227 
    break;
    #line 229 
    case 1: 
            #line 229 
    ;
    #line 230 
    cf_arg_15 = (struct emg_struct_interrupt_scenario_vxge_alarm_msix_handle_14 *)ldv_xmalloc(40UL);
    #line 231 
    cf_arg_15->arg0 = arg0;
    #line 232 
    cf_arg_15->arg1 = arg1;
    #line 233 
    cf_arg_15->arg2 = arg2;
    #line 234 
    cf_arg_15->arg3 = arg3;
    #line 235 
    ret = pthread_create(& emg_thread_15,(pthread_attr_t *)0,& emg_interrupt_interrupt_scenario_vxge_isr_napi,(void *)cf_arg_15);
    #line 236 
    __VERIFIER_assume(ret == 0);
    #line 237 
    break;
    #line 239 
    case 2: 
            #line 239 
    ;
    #line 240 
    cf_arg_16 = (struct emg_struct_interrupt_scenario_vxge_alarm_msix_handle_14 *)ldv_xmalloc(40UL);
    #line 241 
    cf_arg_16->arg0 = arg0;
    #line 242 
    cf_arg_16->arg1 = arg1;
    #line 243 
    cf_arg_16->arg2 = arg2;
    #line 244 
    cf_arg_16->arg3 = arg3;
    #line 245 
    ret = pthread_create(& emg_thread_16,(pthread_attr_t *)0,& emg_interrupt_interrupt_scenario_vxge_rx_msix_napi_handle,(void *)cf_arg_16);
    #line 246 
    __VERIFIER_assume(ret == 0);
    #line 247 
    break;
    #line 249 
    case 3: 
            #line 249 
    ;
    #line 250 
    cf_arg_17 = (struct emg_struct_interrupt_scenario_vxge_alarm_msix_handle_14 *)ldv_xmalloc(40UL);
    #line 251 
    cf_arg_17->arg0 = arg0;
    #line 252 
    cf_arg_17->arg1 = arg1;
    #line 253 
    cf_arg_17->arg2 = arg2;
    #line 254 
    cf_arg_17->arg3 = arg3;
    #line 255 
    ret = pthread_create(& emg_thread_17,(pthread_attr_t *)0,& emg_interrupt_interrupt_scenario_vxge_tx_msix_handle,(void *)cf_arg_17);
    #line 256 
    __VERIFIER_assume(ret == 0);
    #line 257 
    break;
    #line 259 
    default: 
             #line 259 
    ;
    #line 259 
    __VERIFIER_assume(0);
  }
  #line 261 
  return;
}

#line 265  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_deregister_13(struct net_device *arg0)
{
  #line 266 
  int ret;
  #line 267 
  struct emg_struct_random_allocationless_scenario_vxge_fw_flash_18 *cf_arg_18;
  #line 268 
  ret = pthread_join(emg_thread_18,(void **)0);
  #line 269 
  __VERIFIER_assume(ret == 0);
  #line 270 
  return;
}

#line 274  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/emg/0/environment_model.c"
void *emg_interrupt_interrupt_scenario_vxge_alarm_msix_handle(void *arg0)
{
  #line 277 
  enum irqreturn (*emg_14_callback)(int , void *);
  #line 278 
  void *emg_14_data;
  #line 279 
  int emg_14_line;
  #line 280 
  enum irqreturn emg_14_ret_val;
  #line 281 
  enum irqreturn (*emg_14_thread)(int , void *);
  #line 283 
  struct emg_struct_interrupt_scenario_vxge_alarm_msix_handle_14 *data = (struct emg_struct_interrupt_scenario_vxge_alarm_msix_handle_14 *)arg0;
  #line 286 
  emg_14_callback = & emg_wrapper_vxge_alarm_msix_handle;
  #line 289 
  if (data != (struct emg_struct_interrupt_scenario_vxge_alarm_msix_handle_14 *)0) {
    #line 290 
    emg_14_line = data->arg0;
    #line 291 
    emg_14_callback = data->arg1;
    #line 292 
    emg_14_thread = data->arg2;
    #line 293 
    emg_14_data = data->arg3;
    #line 294 
    ldv_free((void *)data);
  }
  #line 300 
  ldv_switch_to_interrupt_context();
  #line 304 
  emg_14_ret_val = emg_wrapper_vxge_alarm_msix_handle(emg_14_line,emg_14_data);
  #line 309 
  ldv_switch_to_process_context();
  #line 312 
  if (ldv_undef_int() != 0) {
    #line 314 
    __VERIFIER_assume(emg_14_ret_val == (unsigned int)IRQ_WAKE_THREAD);
    #line 318 
    if (emg_14_thread != (enum irqreturn (*)(int , void *))0) 
                                                              #line 319 
                                                              (*emg_14_thread)(emg_14_line,emg_14_data);
  }
  else 
       #line 324 
       __VERIFIER_assume(emg_14_ret_val != (unsigned int)IRQ_WAKE_THREAD);
  #line 332 
  return (void *)0;
}

#line 337  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/emg/0/environment_model.c"
void *emg_interrupt_interrupt_scenario_vxge_isr_napi(void *arg0)
{
  #line 340 
  enum irqreturn (*emg_15_callback)(int , void *);
  #line 341 
  void *emg_15_data;
  #line 342 
  int emg_15_line;
  #line 343 
  enum irqreturn emg_15_ret_val;
  #line 344 
  enum irqreturn (*emg_15_thread)(int , void *);
  #line 346 
  struct emg_struct_interrupt_scenario_vxge_alarm_msix_handle_14 *data = (struct emg_struct_interrupt_scenario_vxge_alarm_msix_handle_14 *)arg0;
  #line 349 
  emg_15_callback = & emg_wrapper_vxge_isr_napi;
  #line 352 
  if (data != (struct emg_struct_interrupt_scenario_vxge_alarm_msix_handle_14 *)0) {
    #line 353 
    emg_15_line = data->arg0;
    #line 354 
    emg_15_callback = data->arg1;
    #line 355 
    emg_15_thread = data->arg2;
    #line 356 
    emg_15_data = data->arg3;
    #line 357 
    ldv_free((void *)data);
  }
  #line 363 
  ldv_switch_to_interrupt_context();
  #line 367 
  emg_15_ret_val = emg_wrapper_vxge_isr_napi(emg_15_line,emg_15_data);
  #line 372 
  ldv_switch_to_process_context();
  #line 375 
  if (ldv_undef_int() != 0) {
    #line 377 
    __VERIFIER_assume(emg_15_ret_val == (unsigned int)IRQ_WAKE_THREAD);
    #line 381 
    if (emg_15_thread != (enum irqreturn (*)(int , void *))0) 
                                                              #line 382 
                                                              (*emg_15_thread)(emg_15_line,emg_15_data);
  }
  else 
       #line 387 
       __VERIFIER_assume(emg_15_ret_val != (unsigned int)IRQ_WAKE_THREAD);
  #line 395 
  return (void *)0;
}

#line 400  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/emg/0/environment_model.c"
void *emg_interrupt_interrupt_scenario_vxge_rx_msix_napi_handle(void *arg0)
{
  #line 403 
  enum irqreturn (*emg_16_callback)(int , void *);
  #line 404 
  void *emg_16_data;
  #line 405 
  int emg_16_line;
  #line 406 
  enum irqreturn emg_16_ret_val;
  #line 407 
  enum irqreturn (*emg_16_thread)(int , void *);
  #line 409 
  struct emg_struct_interrupt_scenario_vxge_alarm_msix_handle_14 *data = (struct emg_struct_interrupt_scenario_vxge_alarm_msix_handle_14 *)arg0;
  #line 412 
  emg_16_callback = & emg_wrapper_vxge_rx_msix_napi_handle;
  #line 415 
  if (data != (struct emg_struct_interrupt_scenario_vxge_alarm_msix_handle_14 *)0) {
    #line 416 
    emg_16_line = data->arg0;
    #line 417 
    emg_16_callback = data->arg1;
    #line 418 
    emg_16_thread = data->arg2;
    #line 419 
    emg_16_data = data->arg3;
    #line 420 
    ldv_free((void *)data);
  }
  #line 426 
  ldv_switch_to_interrupt_context();
  #line 430 
  emg_16_ret_val = emg_wrapper_vxge_rx_msix_napi_handle(emg_16_line,emg_16_data);
  #line 435 
  ldv_switch_to_process_context();
  #line 438 
  if (ldv_undef_int() != 0) {
    #line 440 
    __VERIFIER_assume(emg_16_ret_val == (unsigned int)IRQ_WAKE_THREAD);
    #line 444 
    if (emg_16_thread != (enum irqreturn (*)(int , void *))0) 
                                                              #line 445 
                                                              (*emg_16_thread)(emg_16_line,emg_16_data);
  }
  else 
       #line 450 
       __VERIFIER_assume(emg_16_ret_val != (unsigned int)IRQ_WAKE_THREAD);
  #line 458 
  return (void *)0;
}

#line 463  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/emg/0/environment_model.c"
void *emg_interrupt_interrupt_scenario_vxge_tx_msix_handle(void *arg0)
{
  #line 466 
  enum irqreturn (*emg_17_callback)(int , void *);
  #line 467 
  void *emg_17_data;
  #line 468 
  int emg_17_line;
  #line 469 
  enum irqreturn emg_17_ret_val;
  #line 470 
  enum irqreturn (*emg_17_thread)(int , void *);
  #line 472 
  struct emg_struct_interrupt_scenario_vxge_alarm_msix_handle_14 *data = (struct emg_struct_interrupt_scenario_vxge_alarm_msix_handle_14 *)arg0;
  #line 475 
  emg_17_callback = & emg_wrapper_vxge_tx_msix_handle;
  #line 478 
  if (data != (struct emg_struct_interrupt_scenario_vxge_alarm_msix_handle_14 *)0) {
    #line 479 
    emg_17_line = data->arg0;
    #line 480 
    emg_17_callback = data->arg1;
    #line 481 
    emg_17_thread = data->arg2;
    #line 482 
    emg_17_data = data->arg3;
    #line 483 
    ldv_free((void *)data);
  }
  #line 489 
  ldv_switch_to_interrupt_context();
  #line 493 
  emg_17_ret_val = emg_wrapper_vxge_tx_msix_handle(emg_17_line,emg_17_data);
  #line 498 
  ldv_switch_to_process_context();
  #line 501 
  if (ldv_undef_int() != 0) {
    #line 503 
    __VERIFIER_assume(emg_17_ret_val == (unsigned int)IRQ_WAKE_THREAD);
    #line 507 
    if (emg_17_thread != (enum irqreturn (*)(int , void *))0) 
                                                              #line 508 
                                                              (*emg_17_thread)(emg_17_line,emg_17_data);
  }
  else 
       #line 513 
       __VERIFIER_assume(emg_17_ret_val != (unsigned int)IRQ_WAKE_THREAD);
  #line 521 
  return (void *)0;
}

#line 526  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/emg/0/environment_model.c"
void *emg_net_random_allocationless_scenario_vxge_fw_flash(void *arg0)
{
  #line 529 
  struct net_device *emg_18_container;
  #line 530 
  struct sk_buff *emg_18_emg_param_0_18;
  #line 531 
  struct ethtool_flash *emg_18_emg_param_1_0;
  #line 532 
  struct ethtool_drvinfo *emg_18_emg_param_1_1;
  #line 533 
  int emg_18_emg_param_1_11;
  #line 534 
  struct ifreq *emg_18_emg_param_1_12;
  #line 535 
  unsigned long long emg_18_emg_param_1_14;
  #line 536 
  struct rtnl_link_stats64 *emg_18_emg_param_1_15;
  #line 537 
  unsigned long long emg_18_emg_param_1_16;
  #line 538 
  void *emg_18_emg_param_1_17;
  #line 539 
  unsigned short emg_18_emg_param_1_19;
  #line 540 
  struct ethtool_stats *emg_18_emg_param_1_2;
  #line 541 
  unsigned short emg_18_emg_param_1_21;
  #line 542 
  struct ethtool_link_ksettings *emg_18_emg_param_1_23;
  #line 543 
  struct ethtool_pauseparam *emg_18_emg_param_1_24;
  #line 544 
  enum ethtool_phys_id_state *emg_18_emg_param_1_25;
  #line 545 
  struct ethtool_link_ksettings *emg_18_emg_param_1_4;
  #line 546 
  struct ethtool_pauseparam *emg_18_emg_param_1_5;
  #line 547 
  struct ethtool_regs *emg_18_emg_param_1_6;
  #line 548 
  int emg_18_emg_param_1_8;
  #line 549 
  unsigned int emg_18_emg_param_1_9;
  #line 550 
  unsigned char *emg_18_emg_param_2_10;
  #line 551 
  int emg_18_emg_param_2_13;
  #line 552 
  unsigned short emg_18_emg_param_2_20;
  #line 553 
  unsigned short emg_18_emg_param_2_22;
  #line 554 
  unsigned long long *emg_18_emg_param_2_3;
  #line 555 
  void *emg_18_emg_param_2_7;
  #line 556 
  int emg_repeat_cnt_call_18 = 1;
  #line 558 
  struct emg_struct_random_allocationless_scenario_vxge_fw_flash_18 *data = (struct emg_struct_random_allocationless_scenario_vxge_fw_flash_18 *)arg0;
  #line 563 
  if (data != (struct emg_struct_random_allocationless_scenario_vxge_fw_flash_18 *)0) {
    #line 564 
    emg_18_container = data->arg0;
    #line 565 
    ldv_free((void *)data);
  }
  #line 570 
  goto emg_call_18;
  #line 574 
  return (void *)0;
  #line 577 
  emg_call_18: 
               #line 577 
  ;
  #line 578 
  switch (ldv_undef_int()) {
    #line 579 
    case 0: 
            #line 579 
    ;
    #line 581 
    emg_18_emg_param_1_25 = (enum ethtool_phys_id_state *)ldv_xmalloc_unknown_size(0UL);
    #line 581 
    emg_18_emg_param_1_25 = emg_18_emg_param_1_25;
    #line 585 
    emg_wrapper_vxge_ethtool_idnic(emg_18_container,*emg_18_emg_param_1_25);
    #line 589 
    ldv_free((void *)emg_18_emg_param_1_25);
    #line 591 
    break;
    #line 593 
    case 1: 
            #line 593 
    ;
    #line 595 
    emg_18_emg_param_1_24 = (struct ethtool_pauseparam *)ldv_xmalloc_unknown_size(0UL);
    #line 595 
    emg_18_emg_param_1_24 = emg_18_emg_param_1_24;
    #line 599 
    emg_wrapper_vxge_ethtool_setpause_data(emg_18_container,emg_18_emg_param_1_24);
    #line 603 
    ldv_free((void *)emg_18_emg_param_1_24);
    #line 605 
    break;
    #line 607 
    case 2: 
            #line 607 
    ;
    #line 609 
    emg_18_emg_param_1_23 = (struct ethtool_link_ksettings *)ldv_xmalloc_unknown_size(0UL);
    #line 609 
    emg_18_emg_param_1_23 = emg_18_emg_param_1_23;
    #line 613 
    emg_wrapper_vxge_ethtool_set_link_ksettings(emg_18_container,emg_18_emg_param_1_23);
    #line 617 
    ldv_free((void *)emg_18_emg_param_1_23);
    #line 619 
    break;
    #line 621 
    case 3: 
            #line 621 
    ;
    #line 623 
    emg_wrapper_vxge_vlan_rx_kill_vid(emg_18_container,(unsigned short)((int)emg_18_emg_param_1_21),(unsigned short)((int)emg_18_emg_param_2_22));
    #line 625 
    break;
    #line 627 
    case 4: 
            #line 627 
    ;
    #line 629 
    emg_wrapper_vxge_vlan_rx_add_vid(emg_18_container,(unsigned short)((int)emg_18_emg_param_1_19),(unsigned short)((int)emg_18_emg_param_2_20));
    #line 631 
    break;
    #line 633 
    case 5: 
            #line 633 
    ;
    #line 635 
    eth_validate_addr(emg_18_container);
    #line 637 
    break;
    #line 639 
    case 6: 
            #line 639 
    ;
    #line 641 
    emg_wrapper_vxge_tx_watchdog(emg_18_container);
    #line 643 
    break;
    #line 645 
    case 7: 
            #line 645 
    ;
    #line 647 
    emg_18_emg_param_0_18 = (struct sk_buff *)ldv_xmalloc_unknown_size(0UL);
    #line 647 
    emg_18_emg_param_0_18 = emg_18_emg_param_0_18;
    #line 651 
    emg_wrapper_vxge_xmit(emg_18_emg_param_0_18,emg_18_container);
    #line 655 
    ldv_free((void *)emg_18_emg_param_0_18);
    #line 657 
    break;
    #line 659 
    case 8: 
            #line 659 
    ;
    #line 661 
    emg_wrapper_vxge_set_multicast(emg_18_container);
    #line 663 
    break;
    #line 665 
    case 9: 
            #line 665 
    ;
    #line 667 
    emg_18_emg_param_1_17 = ldv_xmalloc_unknown_size(0UL);
    #line 667 
    emg_18_emg_param_1_17 = emg_18_emg_param_1_17;
    #line 671 
    emg_wrapper_vxge_set_mac_addr(emg_18_container,emg_18_emg_param_1_17);
    #line 675 
    ldv_free(emg_18_emg_param_1_17);
    #line 677 
    break;
    #line 679 
    case 10: 
             #line 679 
    ;
    #line 681 
    emg_wrapper_vxge_set_features(emg_18_container,emg_18_emg_param_1_16);
    #line 683 
    break;
    #line 685 
    case 11: 
             #line 685 
    ;
    #line 687 
    emg_wrapper_vxge_netpoll(emg_18_container);
    #line 689 
    break;
    #line 691 
    case 12: 
             #line 691 
    ;
    #line 693 
    emg_18_emg_param_1_15 = (struct rtnl_link_stats64 *)ldv_xmalloc_unknown_size(0UL);
    #line 693 
    emg_18_emg_param_1_15 = emg_18_emg_param_1_15;
    #line 697 
    emg_wrapper_vxge_get_stats64(emg_18_container,emg_18_emg_param_1_15);
    #line 701 
    ldv_free((void *)emg_18_emg_param_1_15);
    #line 703 
    break;
    #line 705 
    case 13: 
             #line 705 
    ;
    #line 707 
    emg_wrapper_vxge_fix_features(emg_18_container,emg_18_emg_param_1_14);
    #line 709 
    break;
    #line 711 
    case 14: 
             #line 711 
    ;
    #line 713 
    emg_18_emg_param_1_12 = (struct ifreq *)ldv_xmalloc_unknown_size(0UL);
    #line 713 
    emg_18_emg_param_1_12 = emg_18_emg_param_1_12;
    #line 717 
    emg_wrapper_vxge_ioctl(emg_18_container,emg_18_emg_param_1_12,emg_18_emg_param_2_13);
    #line 721 
    ldv_free((void *)emg_18_emg_param_1_12);
    #line 723 
    break;
    #line 725 
    case 15: 
             #line 725 
    ;
    #line 727 
    emg_wrapper_vxge_change_mtu(emg_18_container,emg_18_emg_param_1_11);
    #line 729 
    break;
    #line 731 
    case 16: 
             #line 731 
    ;
    #line 733 
    emg_18_emg_param_2_10 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 733 
    emg_18_emg_param_2_10 = emg_18_emg_param_2_10;
    #line 737 
    emg_wrapper_vxge_ethtool_get_strings(emg_18_container,emg_18_emg_param_1_9,emg_18_emg_param_2_10);
    #line 741 
    ldv_free((void *)emg_18_emg_param_2_10);
    #line 743 
    break;
    #line 745 
    case 17: 
             #line 745 
    ;
    #line 747 
    emg_wrapper_vxge_ethtool_get_sset_count(emg_18_container,emg_18_emg_param_1_8);
    #line 749 
    break;
    #line 751 
    case 18: 
             #line 751 
    ;
    #line 753 
    emg_wrapper_vxge_ethtool_get_regs_len(emg_18_container);
    #line 755 
    break;
    #line 757 
    case 19: 
             #line 757 
    ;
    #line 759 
    emg_18_emg_param_1_6 = (struct ethtool_regs *)ldv_xmalloc_unknown_size(0UL);
    #line 759 
    emg_18_emg_param_1_6 = emg_18_emg_param_1_6;
    #line 760 
    emg_18_emg_param_2_7 = ldv_xmalloc_unknown_size(0UL);
    #line 760 
    emg_18_emg_param_2_7 = emg_18_emg_param_2_7;
    #line 764 
    emg_wrapper_vxge_ethtool_gregs(emg_18_container,emg_18_emg_param_1_6,emg_18_emg_param_2_7);
    #line 768 
    ldv_free((void *)emg_18_emg_param_1_6);
    #line 769 
    ldv_free(emg_18_emg_param_2_7);
    #line 771 
    break;
    #line 773 
    case 20: 
             #line 773 
    ;
    #line 775 
    emg_18_emg_param_1_5 = (struct ethtool_pauseparam *)ldv_xmalloc_unknown_size(0UL);
    #line 775 
    emg_18_emg_param_1_5 = emg_18_emg_param_1_5;
    #line 779 
    emg_wrapper_vxge_ethtool_getpause_data(emg_18_container,emg_18_emg_param_1_5);
    #line 783 
    ldv_free((void *)emg_18_emg_param_1_5);
    #line 785 
    break;
    #line 787 
    case 21: 
             #line 787 
    ;
    #line 789 
    emg_18_emg_param_1_4 = (struct ethtool_link_ksettings *)ldv_xmalloc_unknown_size(0UL);
    #line 789 
    emg_18_emg_param_1_4 = emg_18_emg_param_1_4;
    #line 793 
    emg_wrapper_vxge_ethtool_get_link_ksettings(emg_18_container,emg_18_emg_param_1_4);
    #line 797 
    ldv_free((void *)emg_18_emg_param_1_4);
    #line 799 
    break;
    #line 801 
    case 22: 
             #line 801 
    ;
    #line 803 
    ethtool_op_get_link(emg_18_container);
    #line 805 
    break;
    #line 807 
    case 23: 
             #line 807 
    ;
    #line 809 
    emg_18_emg_param_1_2 = (struct ethtool_stats *)ldv_xmalloc_unknown_size(0UL);
    #line 809 
    emg_18_emg_param_1_2 = emg_18_emg_param_1_2;
    #line 810 
    emg_18_emg_param_2_3 = (unsigned long long *)ldv_xmalloc_unknown_size(0UL);
    #line 810 
    emg_18_emg_param_2_3 = emg_18_emg_param_2_3;
    #line 814 
    emg_wrapper_vxge_get_ethtool_stats(emg_18_container,emg_18_emg_param_1_2,emg_18_emg_param_2_3);
    #line 818 
    ldv_free((void *)emg_18_emg_param_1_2);
    #line 819 
    ldv_free((void *)emg_18_emg_param_2_3);
    #line 821 
    break;
    #line 823 
    case 24: 
             #line 823 
    ;
    #line 825 
    emg_18_emg_param_1_1 = (struct ethtool_drvinfo *)ldv_xmalloc_unknown_size(0UL);
    #line 825 
    emg_18_emg_param_1_1 = emg_18_emg_param_1_1;
    #line 829 
    emg_wrapper_vxge_ethtool_gdrvinfo(emg_18_container,emg_18_emg_param_1_1);
    #line 833 
    ldv_free((void *)emg_18_emg_param_1_1);
    #line 835 
    break;
    #line 837 
    case 25: 
             #line 837 
    ;
    #line 839 
    emg_18_emg_param_1_0 = (struct ethtool_flash *)ldv_xmalloc_unknown_size(0UL);
    #line 839 
    emg_18_emg_param_1_0 = emg_18_emg_param_1_0;
    #line 843 
    emg_wrapper_vxge_fw_flash(emg_18_container,emg_18_emg_param_1_0);
    #line 847 
    ldv_free((void *)emg_18_emg_param_1_0);
    #line 850 
    if (emg_repeat_cnt_call_18 > 0) {
      #line 851 
      emg_repeat_cnt_call_18 --;
      #line 853 
      goto emg_call_18;
    }
    else 
         #line 855 
         __VERIFIER_assume(0);
    #line 859 
    break;
    #line 861 
    case 26: 
             #line 861 
    ;
    #line 865 
    break;
    #line 867 
    default: 
             #line 867 
    ;
    #line 867 
    __VERIFIER_assume(0);
  }
  #line 870 
  return (void *)0;
}

#line 875  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/emg/0/environment_model.c"
void *emg_pci_pci_scenario_vxge_driver(void *arg0)
{
  #line 878 
  int emg_19_choice;
  #line 879 
  struct pci_driver *emg_19_container;
  #line 880 
  struct pci_device_id *emg_19_device_id;
  #line 881 
  struct pci_dev *emg_19_resource_0;
  #line 882 
  struct pm_message emg_19_resource_1;
  #line 883 
  int emg_19_ret;
  #line 884 
  int emg_repeat_cnt_main_19_0 = 1;
  #line 885 
  int emg_repeat_cnt_call_19_1 = 1;
  #line 886 
  int emg_repeat_cnt_call_19_0 = 1;
  #line 887 
  int emg_repeat_cnt_main_19_1 = 1;
  #line 889 
  struct emg_struct_pci_scenario_vxge_driver_19 *data = (struct emg_struct_pci_scenario_vxge_driver_19 *)arg0;
  #line 893 
  emg_19_choice = 0;
  #line 894 
  emg_19_ret = ldv_undef_int();
  #line 895 
  emg_19_choice = 0;
  #line 896 
  emg_19_container = emg_alias_vxge_driver;
  #line 897 
  emg_19_ret = ldv_undef_int();
  #line 899 
  __VERIFIER_assume(data->arg0 == emg_alias_vxge_driver);
  #line 901 
  if (data != (struct emg_struct_pci_scenario_vxge_driver_19 *)0) {
    #line 902 
    emg_19_container = data->arg0;
    #line 903 
    ldv_free((void *)data);
  }
  #line 908 
  emg_19_resource_0 = (struct pci_dev *)ldv_xmalloc(3312UL);
  #line 909 
  emg_19_choice = __ldv_undef_int_range(0,2);
  #line 910 
  emg_19_device_id = emg_19_container->id_table + (unsigned long)emg_19_choice;
  #line 914 
  goto emg_main_19;
  #line 918 
  return (void *)0;
  #line 921 
  emg_call_19: 
               #line 921 
  ;
  #line 922 
  switch (ldv_undef_int()) {
    #line 923 
    case 0: 
            #line 923 
    ;
    #line 928 
    if (emg_repeat_cnt_call_19_1 > 0) {
      #line 929 
      emg_repeat_cnt_call_19_1 --;
      #line 931 
      goto emg_call_19;
    }
    else 
         #line 933 
         __VERIFIER_assume(0);
    #line 937 
    break;
    #line 939 
    case 1: 
            #line 939 
    ;
    #line 941 
    emg_19_ret = emg_wrapper_vxge_pm_suspend(emg_19_resource_0,emg_19_resource_1);
    #line 946 
    emg_19_ret = ldv_filter_err_code(emg_19_ret);
    #line 950 
    emg_wrapper_vxge_pm_resume(emg_19_resource_0);
    #line 953 
    if (emg_repeat_cnt_call_19_0 > 0) {
      #line 954 
      emg_repeat_cnt_call_19_0 --;
      #line 956 
      goto emg_call_19;
    }
    else 
         #line 958 
         __VERIFIER_assume(0);
    #line 962 
    break;
    #line 964 
    case 2: 
            #line 964 
    ;
    #line 966 
    if (emg_19_container->shutdown != (void (*)(struct pci_dev *))0) 
      #line 967 
      (*(emg_19_container->shutdown))(emg_19_resource_0);
    #line 972 
    emg_wrapper_vxge_remove(emg_19_resource_0);
    #line 975 
    if (emg_repeat_cnt_main_19_0 > 0) {
      #line 976 
      emg_repeat_cnt_main_19_0 --;
      #line 978 
      goto emg_main_19;
    }
    else 
         #line 980 
         __VERIFIER_assume(0);
    #line 984 
    break;
    #line 986 
    default: 
             #line 986 
    ;
    #line 986 
    __VERIFIER_assume(0);
  }
  #line 989 
  return (void *)0;
  #line 992 
  emg_main_19: 
               #line 992 
  ;
  #line 993 
  if (ldv_undef_int() != 0) {
    #line 996 
    ldv_pre_probe();
    #line 1000 
    emg_19_ret = emg_wrapper_vxge_probe(emg_19_resource_0,emg_19_device_id);
    #line 1005 
    emg_19_ret = ldv_post_probe(emg_19_ret);
    #line 1008 
    if (ldv_undef_int() != 0) {
      #line 1010 
      __VERIFIER_assume(emg_19_ret == 0);
      #line 1014 
      goto emg_call_19;
    }
    else 
         #line 1019 
         __VERIFIER_assume(emg_19_ret != 0);
    #line 1023 
    if (emg_repeat_cnt_main_19_1 > 0) {
      #line 1024 
      emg_repeat_cnt_main_19_1 --;
      #line 1026 
      goto emg_main_19;
    }
    else 
         #line 1028 
         __VERIFIER_assume(0);
  }
  else 
       #line 1034 
       ldv_free((void *)emg_19_resource_0);
  #line 1042 
  return (void *)0;
}

#line 1047  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/emg/0/environment_model.c"
void *emg_timer_timer_scenario_6(void *arg0)
{
  #line 1050 
  struct timer_list *emg_20_container;
  #line 1051 
  unsigned long emg_20_emg_param_0_0;
  #line 1053 
  struct emg_struct_timer_scenario_6_20 *data = (struct emg_struct_timer_scenario_6_20 *)arg0;
  #line 1058 
  if (data != (struct emg_struct_timer_scenario_6_20 *)0) {
    #line 1059 
    emg_20_container = data->arg0;
    #line 1060 
    ldv_free((void *)data);
  }
  #line 1066 
  ldv_switch_to_interrupt_context();
  #line 1070 
  if (emg_20_container->function != (void (*)(struct timer_list *))0) 
    #line 1071 
    (*(emg_20_container->function))((struct timer_list *)emg_20_emg_param_0_0);
  #line 1077 
  ldv_switch_to_process_context();
  #line 1084 
  return (void *)0;
}

#line 1089  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/emg/0/environment_model.c"
int emg___pci_register_driver(struct pci_driver *arg0, struct module *arg1, char *arg2)
{
  #line 1092 
  struct pci_driver *emg_2_pci_driver;
  #line 1094 
  emg_2_pci_driver = emg_alias_vxge_driver;
  #line 1095 
  if (ldv_undef_int() != 0) {
    #line 1097 
    emg_2_pci_driver = arg0;
    #line 1101 
    emg_dispatch_register_2(emg_2_pci_driver);
    #line 1105 
    return 0;
  }
  else {
    #line 1109 
    return ldv_undef_int_negative();
  }
}

#line 1117  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/emg/0/environment_model.c"
struct net_device *emg_alloc_etherdev_mqs(int arg0, unsigned int arg1, unsigned int arg2)
{
  #line 1120 
  struct net_device *emg_3_netdev;
  #line 1122 
  if (ldv_undef_int() != 0) {
    #line 1124 
    emg_3_netdev = (struct net_device *)ldv_xmalloc(3328UL);
    #line 1128 
    return emg_3_netdev;
  }
  else 
       #line 1132 
       return (struct net_device *)0;
}

#line 1140  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/emg/0/environment_model.c"
int emg_del_timer_sync(struct timer_list *arg0)
{
  #line 1143 
  struct timer_list *emg_4_timer_list;
  #line 1146 
  emg_4_timer_list = arg0;
  #line 1150 
  emg_dispatch_instance_deregister_4(emg_4_timer_list);
  #line 1151 
  ;
  #line 1151 
  return 0;
}

#line 1157  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/emg/0/environment_model.c"
_Bool emg_flush_work(struct work_struct *arg0)
{
  #line 1160 
  struct work_struct *emg_5_work_struct;
  #line 1162 
  if (ldv_undef_int() != 0) {
    #line 1164 
    emg_5_work_struct = arg0;
    #line 1168 
    if (emg_5_work_struct->func != (void (*)(struct work_struct *))0) 
      #line 1169 
      (*(emg_5_work_struct->func))(emg_5_work_struct);
    #line 1174 
    return (_Bool)1;
  }
  else 
       #line 1178 
       return (_Bool)0;
}

#line 1186  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/emg/0/environment_model.c"
void *emg_free_irq(unsigned int arg0, void *arg1)
{
  #line 1189 
  int emg_6_line;
  #line 1192 
  emg_6_line = (int)arg0;
  #line 1196 
  emg_dispatch_irq_deregister_6(emg_6_line);
  #line 1197 
  ;
  #line 1197 
  return (void *)0;
}

#line 1203  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/emg/0/environment_model.c"
void emg_free_netdev(struct net_device *arg0)
{
  #line 1206 
  struct net_device *emg_7_netdev;
  #line 1209 
  emg_7_netdev = arg0;
  #line 1210 
  ldv_free((void *)emg_7_netdev);
  #line 1213 
  return;
}

#line 1218  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/emg/0/environment_model.c"
int emg_mod_timer(struct timer_list *arg0, unsigned long arg1)
{
  #line 1221 
  struct timer_list *emg_8_timer_list;
  #line 1223 
  if (ldv_undef_int() != 0) {
    #line 1225 
    emg_8_timer_list = arg0;
    #line 1229 
    emg_dispatch_instance_register_8(emg_8_timer_list);
    #line 1233 
    return 1;
  }
  else 
       #line 1237 
       return 0;
}

#line 1245  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/emg/0/environment_model.c"
void emg_pci_unregister_driver(struct pci_driver *arg0)
{
  #line 1248 
  struct pci_driver *emg_9_pci_driver;
  #line 1250 
  emg_9_pci_driver = emg_alias_vxge_driver;
  #line 1252 
  emg_9_pci_driver = arg0;
  #line 1256 
  emg_dispatch_deregister_9(emg_9_pci_driver);
  #line 1259 
  return;
}

#line 1264  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/emg/0/environment_model.c"
int emg_register_netdev(struct net_device *arg0)
{
  #line 1267 
  struct net_device *emg_10_netdev;
  #line 1268 
  int emg_10_ret;
  #line 1271 
  emg_10_ret = ldv_undef_int();
  #line 1272 
  emg_10_ret = ldv_undef_int();
  #line 1273 
  if (ldv_undef_int() != 0) {
    #line 1275 
    emg_10_netdev = arg0;
    #line 1279 
    emg_10_ret = emg_wrapper_vxge_open(emg_10_netdev);
    #line 1282 
    if (ldv_undef_int() != 0) {
      #line 1284 
      __VERIFIER_assume(emg_10_ret == 0);
      #line 1288 
      emg_dispatch_register_10(emg_10_netdev);
      #line 1292 
      return 0;
    }
    else {
      #line 1296 
      __VERIFIER_assume(emg_10_ret != 0);
      #line 1297 
      ldv_failed_register_netdev();
      #line 1298 
      return ldv_undef_int_negative();
    }
  }
  else {
    #line 1303 
    ldv_failed_register_netdev();
    #line 1304 
    return ldv_undef_int_negative();
  }
}

#line 1312  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/emg/0/environment_model.c"
int emg_request_irq(unsigned int arg0, enum irqreturn (*arg1)(int , void *), unsigned long arg2, char *arg3, void *arg4)
{
  #line 1315 
  enum irqreturn (*emg_11_callback)(int , void *);
  #line 1316 
  void *emg_11_data;
  #line 1317 
  int emg_11_line;
  #line 1318 
  enum irqreturn (*emg_11_thread)(int , void *);
  #line 1320 
  emg_11_callback = & emg_wrapper_vxge_alarm_msix_handle;
  #line 1321 
  if (ldv_undef_int() != 0) {
    #line 1323 
    emg_11_line = (int)arg0;
    #line 1324 
    emg_11_callback = arg1;
    #line 1325 
    emg_11_thread = (enum irqreturn (*)(int , void *))0;
    #line 1326 
    emg_11_data = arg4;
    #line 1330 
    emg_dispatch_irq_register_11(emg_11_line,emg_11_callback,emg_11_thread,emg_11_data);
    #line 1334 
    return 0;
  }
  else {
    #line 1338 
    return ldv_undef_int_negative();
  }
}

#line 1346  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/emg/0/environment_model.c"
_Bool emg_schedule_work(struct work_struct *arg0)
{
  #line 1349 
  struct work_struct *emg_12_work_struct;
  #line 1351 
  if (ldv_undef_int() != 0) {
    #line 1353 
    emg_12_work_struct = arg0;
    #line 1357 
    if (emg_12_work_struct->func != (void (*)(struct work_struct *))0) 
      #line 1358 
      (*(emg_12_work_struct->func))(emg_12_work_struct);
    #line 1363 
    return (_Bool)1;
  }
  else 
       #line 1367 
       return (_Bool)0;
}

#line 1375  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/emg/0/environment_model.c"
void emg_unregister_netdev(struct net_device *arg0)
{
  #line 1378 
  struct net_device *emg_13_netdev;
  #line 1381 
  emg_13_netdev = arg0;
  #line 1385 
  emg_wrapper_vxge_close(emg_13_netdev);
  #line 1389 
  emg_dispatch_deregister_13(emg_13_netdev);
  #line 1392 
  return;
}

#line 1397  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/emg/0/environment_model.c"
void *emg_entry_point_insmod(void *arg0)
{
  #line 1400 
  int emg_1_ret;
  #line 1403 
  emg_1_ret = emg_vxge_starter();
  #line 1404 
  emg_1_ret = ldv_post_init(emg_1_ret);
  #line 1407 
  if (ldv_undef_int() != 0) {
    #line 1409 
    __VERIFIER_assume(emg_1_ret == 0);
    #line 1413 
    emg_vxge_closer();
  }
  else 
       #line 1417 
       __VERIFIER_assume(emg_1_ret != 0);
  #line 1421 
  return (void *)0;
}

#line 1426  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/neterion/vxge/vxge.ko/concurrency safety/emg/0/environment_model.c"
int main(void)
{
  #line 1428 
  ldv_initialize();
  #line 1430 
  emg_entry_point_insmod((void *)0);
  #line 1432 
  return 0;
}

