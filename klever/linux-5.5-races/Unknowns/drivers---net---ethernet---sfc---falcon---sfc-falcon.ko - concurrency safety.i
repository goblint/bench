/* Generated by Frama-C */
#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compiler_types.h"
typedef signed char __s8;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned char __u8;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef short __s16;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned short __u16;
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef int __s32;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned int __u32;
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef long long __s64;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned long long __u64;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef __s8 s8;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u8 u8;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s16 s16;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u16 u16;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s32 s32;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u32 u32;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s64 s64;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u64 u64;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/uapi/asm/posix_types_64.h"
typedef long __kernel_long_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned long __kernel_ulong_t;
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_pid_t;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_uid32_t;
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_gid32_t;
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_ulong_t __kernel_size_t;
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_ssize_t;
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef long long __kernel_loff_t;
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef long long __kernel_time64_t;
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_clock_t;
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_timer_t;
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_clockid_t;
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __u16 __le16;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u16 __be16;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __le32;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __be32;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u64 __le64;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u64 __be64;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __wsum;
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef unsigned int __poll_t;
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef u32 __kernel_dev_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_dev_t dev_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned short umode_t;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_pid_t pid_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_clockid_t clockid_t;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef _Bool bool;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_uid32_t uid_t;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_gid32_t gid_t;
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_loff_t loff_t;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_size_t size_t;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_ssize_t ssize_t;
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned char u_char;
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef s32 int32_t;
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u8 uint8_t;
#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u32 uint32_t;
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 uint64_t;
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 sector_t;
#line 131  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 blkcnt_t;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 dma_addr_t;
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int gfp_t;
#line 154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int slab_flags_t;
#line 155  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int fmode_t;
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 phys_addr_t;
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef phys_addr_t resource_size_t;
#line 164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned long irq_hw_number_t;
#line 170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct __anonstruct_atomic_t_6 {
   int counter ;
};
#line 170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef struct __anonstruct_atomic_t_6 atomic_t;
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct __anonstruct_atomic64_t_7 {
   s64 counter ;
};
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef struct __anonstruct_atomic64_t_7 atomic64_t;
#line 181  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};
#line 185 
struct hlist_node;
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct hlist_head {
   struct hlist_node *first ;
};
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};
#line 219  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct callback_head {
   struct callback_head *next ;
   void (*func)(struct callback_head *) ;
} __attribute__((__aligned__(8)));
#line 14  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/rx.i.aux"
struct task_struct;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/export.h"
struct module;
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/export.h"
struct kernel_symbol {
   int value_offset ;
   int name_offset ;
   int namespace_offset ;
};
#line 136  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/init.h"
typedef void (*ctor_fn_t)(void);
#line 139 
struct file_system_type;
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
struct ctl_table;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct jump_entry;
#line 87 
struct static_key_mod;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
union __anonunion_8 {
   unsigned long type ;
   struct jump_entry *entries ;
   struct static_key_mod *next ;
};
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct static_key {
   atomic_t enabled ;
   union __anonunion_8 __anonCompField_static_key_4 ;
};
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct jump_entry {
   s32 code ;
   s32 target ;
   long key ;
};
#line 346  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct static_key_true {
   struct static_key key ;
};
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct static_key_false {
   struct static_key key ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_debug.h"
union __anonunion_key_9 {
   struct static_key_true dd_key_true ;
   struct static_key_false dd_key_false ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_debug.h"
struct _ddebug {
   char *modname ;
   char *function ;
   char *filename ;
   char *format ;
   unsigned int lineno : 18 ;
   unsigned int flags : 8 ;
   union __anonunion_key_9 key ;
} __attribute__((__aligned__(8)));
#line 59 
struct device;
#line 65 
struct net_device;
#line 476  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
struct file_operations;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/div64.h"
struct completion;
#line 88 
struct pt_regs;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bug.h"
struct bug_entry {
   int bug_addr_disp ;
   int file_disp ;
   unsigned short line ;
   unsigned short flags ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/math64.h"
typedef __s64 time64_t;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/time_types.h"
struct __kernel_timespec {
   __kernel_time64_t tv_sec ;
   long long tv_nsec ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/time64.h"
struct timespec64 {
   time64_t tv_sec ;
   long tv_nsec ;
};
#line 165 
struct old_timespec32;
#line 166 
struct pollfd;
#line 167 
enum timespec_type {
    TT_NONE = 0,
    TT_NATIVE = 1,
    TT_COMPAT = 2
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_futex_27 {
   u32 *uaddr ;
   u32 val ;
   u32 flags ;
   u32 bitset ;
   u64 time ;
   u32 *uaddr2 ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
union __anonunion_29 {
   struct __kernel_timespec *rmtp ;
   struct old_timespec32 *compat_rmtp ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_nanosleep_28 {
   clockid_t clockid ;
   enum timespec_type type ;
   union __anonunion_29 __anonCompField___anonstruct_nanosleep_28_5 ;
   u64 expires ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_poll_30 {
   struct pollfd *ufds ;
   int nfds ;
   int has_timeout ;
   unsigned long tv_sec ;
   unsigned long tv_nsec ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
union __anonunion_26 {
   struct __anonstruct_futex_27 futex ;
   struct __anonstruct_nanosleep_28 nanosleep ;
   struct __anonstruct_poll_30 poll ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct restart_block {
   long (*fn)(struct restart_block *) ;
   union __anonunion_26 __anonCompField_restart_block_6 ;
};
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/page_64.h"
struct page;
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/getorder.h"
struct mm_struct;
#line 49 
struct io_bitmap;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/ptrace.h"
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/desc_defs.h"
struct desc_struct {
   u16 limit0 ;
   u16 base0 ;
   u16 base1 : 8 ;
   u16 type : 4 ;
   u16 s : 1 ;
   u16 dpl : 2 ;
   u16 p : 1 ;
   u16 limit1 : 4 ;
   u16 avl : 1 ;
   u16 l : 1 ;
   u16 d : 1 ;
   u16 g : 1 ;
   u16 base2 : 8 ;
} __attribute__((__packed__));
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/desc_defs.h"
typedef unsigned long pteval_t;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pmdval_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pudval_t;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgdval_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgprotval_t;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
struct __anonstruct_pte_t_53 {
   pteval_t pte ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef struct __anonstruct_pte_t_53 pte_t;
#line 265  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct pgprot {
   pgprotval_t pgprot ;
};
#line 267  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct pgprot pgprot_t;
#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pgd_t_54 {
   pgdval_t pgd ;
};
#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pgd_t_54 pgd_t;
#line 319  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pud_t_56 {
   pudval_t pud ;
};
#line 319  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pud_t_56 pud_t;
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pmd_t_57 {
   pmdval_t pmd ;
};
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pmd_t_57 pmd_t;
#line 505  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct page *pgtable_t;
#line 519 
struct file;
#line 530 
struct seq_file;
#line 360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/nospec-branch.h"
struct thread_struct;
#line 362 
struct cpumask;
#line 365 
struct vm_area_struct;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct __anonstruct_59 {
   u8 locked ;
   u8 pending ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct __anonstruct_60 {
   u16 locked_pending ;
   u16 tail ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
union __anonunion_58 {
   atomic_t val ;
   struct __anonstruct_59 __anonCompField___anonunion_58_7 ;
   struct __anonstruct_60 __anonCompField___anonunion_58_8 ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct qspinlock {
   union __anonunion_58 __anonCompField_qspinlock_9 ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
typedef struct qspinlock arch_spinlock_t;
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
struct __anonstruct_62 {
   u8 wlocked ;
   u8 __lstate[3U] ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
union __anonunion_61 {
   atomic_t cnts ;
   struct __anonstruct_62 __anonCompField___anonunion_61_10 ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
struct qrwlock {
   union __anonunion_61 __anonCompField_qrwlock_11 ;
   arch_spinlock_t wait_lock ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
typedef struct qrwlock arch_rwlock_t;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/math_emu.h"
struct math_emu_info {
   long ___orig_eip ;
   struct pt_regs *regs ;
};
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
union __anonunion___u_67 {
   int __val ;
   char __c[1U] ;
};
#line 2288  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/atomic-fallback.h"
typedef atomic64_t atomic_long_t;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
struct cpumask {
   unsigned long bits[128U] ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
typedef struct cpumask cpumask_t;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct tracepoint_func {
   void *func ;
   void *data ;
   int prio ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct tracepoint {
   char *name ;
   struct static_key key ;
   int (*regfunc)(void) ;
   void (*unregfunc)(void) ;
   struct tracepoint_func *funcs ;
};
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
typedef int tracepoint_ptr_t;
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct bpf_raw_event_map {
   struct tracepoint *tp ;
   void *bpf_func ;
   u32 num_args ;
   u32 writable_size ;
} __attribute__((__aligned__(32)));
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fregs_state {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u32 status ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct __anonstruct_90 {
   u64 rip ;
   u64 rdp ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct __anonstruct_91 {
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union __anonunion_89 {
   struct __anonstruct_90 __anonCompField___anonunion_89_17 ;
   struct __anonstruct_91 __anonCompField___anonunion_89_18 ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union __anonunion_92 {
   u32 padding1[12U] ;
   u32 sw_reserved[12U] ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fxregs_state {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   union __anonunion_89 __anonCompField_fxregs_state_19 ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32U] ;
   u32 xmm_space[64U] ;
   u32 padding[12U] ;
   union __anonunion_92 __anonCompField_fxregs_state_20 ;
} __attribute__((__aligned__(16)));
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct swregs_state {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u8 ftop ;
   u8 changed ;
   u8 lookahead ;
   u8 no_update ;
   u8 rm ;
   u8 alimit ;
   struct math_emu_info *info ;
   u32 entry_eip ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct xstate_header {
   u64 xfeatures ;
   u64 xcomp_bv ;
   u64 reserved[6U] ;
} __attribute__((__packed__));
#line 253  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct xregs_state {
   struct fxregs_state i387 ;
   struct xstate_header header ;
   u8 extended_state_area[0U] ;
} __attribute__((__packed__, __aligned__(64)));
#line 268  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union fpregs_state {
   struct fregs_state fsave ;
   struct fxregs_state fxsave ;
   struct swregs_state soft ;
   struct xregs_state xsave ;
   u8 __padding[4096U] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fpu {
   unsigned int last_cpu ;
   unsigned long avx512_timestamp ;
   union fpregs_state state ;
};
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/orc_types.h"
struct orc_entry {
   s16 sp_offset ;
   s16 bp_offset ;
   unsigned int sp_reg : 4 ;
   unsigned int bp_reg : 4 ;
   unsigned int type : 2 ;
   unsigned int end : 1 ;
} __attribute__((__packed__));
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct seq_operations;
#line 478 
struct perf_event;
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct __anonstruct_mm_segment_t_95 {
   unsigned long seg ;
};
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
typedef struct __anonstruct_mm_segment_t_95 mm_segment_t;
#line 485  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct thread_struct {
   struct desc_struct tls_array[3U] ;
   unsigned long sp ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long fsbase ;
   unsigned long gsbase ;
   struct perf_event *ptrace_bps[4U] ;
   unsigned long debugreg6 ;
   unsigned long ptrace_dr7 ;
   unsigned long cr2 ;
   unsigned long trap_nr ;
   unsigned long error_code ;
   struct io_bitmap *io_bitmap ;
   unsigned long iopl_emul ;
   mm_segment_t addr_limit ;
   unsigned int sig_on_uaccess_err : 1 ;
   unsigned int uaccess_err : 1 ;
   struct fpu fpu ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/thread_info.h"
struct thread_info {
   unsigned long flags ;
   u32 status ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bottom_half.h"
struct lockdep_map;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lockdep_subclass_key {
   char __one_byte ;
} __attribute__((__packed__));
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
union __anonunion_96 {
   struct hlist_node hash_entry ;
   struct lockdep_subclass_key subkeys[8U] ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lock_class_key {
   union __anonunion_96 __anonCompField_lock_class_key_23 ;
};
#line 68 
struct lock_trace;
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lock_class {
   struct hlist_node hash_entry ;
   struct list_head lock_entry ;
   struct list_head locks_after ;
   struct list_head locks_before ;
   struct lockdep_subclass_key *key ;
   unsigned int subclass ;
   unsigned int dep_gen_id ;
   unsigned long usage_mask ;
   struct lock_trace *usage_traces[9U] ;
   int name_version ;
   char *name ;
   unsigned long contention_point[4U] ;
   unsigned long contending_point[4U] ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lockdep_map {
   struct lock_class_key *key ;
   struct lock_class *class_cache[2U] ;
   char *name ;
   int cpu ;
   unsigned long ip ;
};
#line 226  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct held_lock {
   u64 prev_chain_key ;
   unsigned long acquire_ip ;
   struct lockdep_map *instance ;
   struct lockdep_map *nest_lock ;
   u64 waittime_stamp ;
   u64 holdtime_stamp ;
   unsigned int class_idx : 13 ;
   unsigned int irq_context : 2 ;
   unsigned int trylock : 1 ;
   unsigned int read : 2 ;
   unsigned int check : 1 ;
   unsigned int hardirqs_off : 1 ;
   unsigned int references : 12 ;
   unsigned int pin_count ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct raw_spinlock {
   arch_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct raw_spinlock raw_spinlock_t;
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct __anonstruct_98 {
   u8 __padding[24U] ;
   struct lockdep_map dep_map ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
union __anonunion_97 {
   struct raw_spinlock rlock ;
   struct __anonstruct_98 __anonCompField___anonunion_97_24 ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct spinlock {
   union __anonunion_97 __anonCompField_spinlock_25 ;
};
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct spinlock spinlock_t;
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct __anonstruct_rwlock_t_99 {
   arch_rwlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct __anonstruct_rwlock_t_99 rwlock_t;
#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
struct mutex;
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
struct kmem_cache;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
struct wait_queue_head {
   spinlock_t lock ;
   struct list_head head ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
typedef struct wait_queue_head wait_queue_head_t;
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
struct seqcount {
   unsigned int sequence ;
   struct lockdep_map dep_map ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
typedef struct seqcount seqcount_t;
#line 403  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
struct __anonstruct_seqlock_t_112 {
   struct seqcount seqcount ;
   spinlock_t lock ;
};
#line 403  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
typedef struct __anonstruct_seqlock_t_112 seqlock_t;
#line 601  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
struct __anonstruct_nodemask_t_113 {
   unsigned long bits[16U] ;
};
#line 601  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
typedef struct __anonstruct_nodemask_t_113 nodemask_t;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/tlbbatch.h"
struct arch_tlbflush_unmap_batch {
   struct cpumask cpumask ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct vmacache {
   u64 seqnum ;
   struct vm_area_struct *vmas[4U] ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct task_rss_stat {
   int events ;
   int count[4U] ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct mm_rss_stat {
   atomic_long_t count[4U] ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct page_frag {
   struct page *page ;
   __u32 offset ;
   __u32 size ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct tlbflush_unmap_batch {
   struct arch_tlbflush_unmap_batch arch ;
   bool flush_required ;
   bool writable ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_node {
   unsigned long __rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
} __attribute__((__aligned__(8)));
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_root {
   struct rb_node *rb_node ;
};
#line 125  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_root_cached {
   struct rb_root rb_root ;
   struct rb_node *rb_leftmost ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/osq_lock.h"
struct optimistic_spin_queue {
   atomic_t tail ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rwsem.h"
struct rw_semaphore {
   atomic_long_t count ;
   atomic_long_t owner ;
   struct optimistic_spin_queue osq ;
   raw_spinlock_t wait_lock ;
   struct list_head wait_list ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/completion.h"
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};
#line 120 
struct inode;
#line 121 
struct notifier_block;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct ww_acquire_ctx;
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
struct mutex {
   atomic_long_t owner ;
   spinlock_t wait_lock ;
   struct optimistic_spin_queue osq ;
   struct list_head wait_list ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   struct ww_acquire_ctx *ww_ctx ;
   void *magic ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timex.h"
typedef s32 old_time32_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/time32.h"
struct old_timespec32 {
   old_time32_t tv_sec ;
   s32 tv_nsec ;
};
#line 461  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
typedef s64 ktime_t;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
struct timer_list {
   struct hlist_node entry ;
   unsigned long expires ;
   void (*function)(struct timer_list *) ;
   u32 flags ;
   struct lockdep_map lockdep_map ;
};
#line 195 
struct hrtimer;
#line 196 
enum hrtimer_restart;
#line 220 
struct workqueue_struct;
#line 221 
struct work_struct;
#line 102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct *) ;
   struct lockdep_map lockdep_map ;
};
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct delayed_work {
   struct work_struct work ;
   struct timer_list timer ;
   struct workqueue_struct *wq ;
   int cpu ;
};
#line 124  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct rcu_work {
   struct work_struct work ;
   struct callback_head rcu ;
   struct workqueue_struct *wq ;
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcu_segcblist.h"
struct rcu_segcblist {
   struct callback_head *head ;
   struct callback_head **tails[4U] ;
   unsigned long gp_seq[4U] ;
   atomic_long_t len ;
   long len_lazy ;
   u8 enabled ;
   u8 offloaded ;
};
#line 80 
struct srcu_struct;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcu.h"
struct srcu_node;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_data {
   unsigned long srcu_lock_count[2U] ;
   unsigned long srcu_unlock_count[2U] ;
   spinlock_t lock ;
   struct rcu_segcblist srcu_cblist ;
   unsigned long srcu_gp_seq_needed ;
   unsigned long srcu_gp_seq_needed_exp ;
   bool srcu_cblist_invoking ;
   struct timer_list delay_work ;
   struct work_struct work ;
   struct callback_head srcu_barrier_head ;
   struct srcu_node *mynode ;
   unsigned long grpmask ;
   int cpu ;
   struct srcu_struct *ssp ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_node {
   spinlock_t lock ;
   unsigned long srcu_have_cbs[4U] ;
   unsigned long srcu_data_have_cbs[4U] ;
   unsigned long srcu_gp_seq_needed_exp ;
   struct srcu_node *srcu_parent ;
   int grplo ;
   int grphi ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_struct {
   struct srcu_node node[521U] ;
   struct srcu_node *level[4U] ;
   struct mutex srcu_cb_mutex ;
   spinlock_t lock ;
   struct mutex srcu_gp_mutex ;
   unsigned int srcu_idx ;
   unsigned long srcu_gp_seq ;
   unsigned long srcu_gp_seq_needed ;
   unsigned long srcu_gp_seq_needed_exp ;
   unsigned long srcu_last_gp_end ;
   struct srcu_data *sda ;
   unsigned long srcu_barrier_seq ;
   struct mutex srcu_barrier_mutex ;
   struct completion srcu_barrier_completion ;
   atomic_t srcu_barrier_cpu_cnt ;
   struct delayed_work work ;
   struct lockdep_map dep_map ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/notifier.h"
struct notifier_block {
   int (*notifier_call)(struct notifier_block *, unsigned long , void *) ;
   struct notifier_block *next ;
   int priority ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/notifier.h"
struct raw_notifier_head {
   struct notifier_block *head ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/uprobes.h"
struct arch_uprobe_task {
   unsigned long saved_scratch_register ;
   unsigned int saved_trap_nr ;
   unsigned int saved_tf ;
};
#line 57 
enum uprobe_task_state {
    UTASK_RUNNING = 0,
    UTASK_SSTEP = 1,
    UTASK_SSTEP_ACK = 2,
    UTASK_SSTEP_TRAPPED = 3
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_126 {
   struct arch_uprobe_task autask ;
   unsigned long vaddr ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_127 {
   struct callback_head dup_xol_work ;
   unsigned long dup_xol_addr ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
union __anonunion_125 {
   struct __anonstruct_126 __anonCompField___anonunion_125_28 ;
   struct __anonstruct_127 __anonCompField___anonunion_125_29 ;
};
#line 61 
struct uprobe;
#line 61 
struct return_instance;
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct uprobe_task {
   enum uprobe_task_state state ;
   union __anonunion_125 __anonCompField_uprobe_task_30 ;
   struct uprobe *active_uprobe ;
   unsigned long xol_vaddr ;
   struct return_instance *return_instances ;
   unsigned int depth ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct return_instance {
   struct uprobe *uprobe ;
   unsigned long func ;
   unsigned long stack ;
   unsigned long orig_ret_vaddr ;
   bool chained ;
   struct return_instance *next ;
};
#line 98 
struct xol_area;
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct uprobes_state {
   struct xol_area *xol_area ;
};
#line 140 
struct ldt_struct;
#line 140 
struct vdso_image;
#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_mm_context_t_128 {
   u64 ctx_id ;
   atomic64_t tlb_gen ;
   struct rw_semaphore ldt_usr_sem ;
   struct ldt_struct *ldt ;
   unsigned short ia32_compat ;
   struct mutex lock ;
   void *vdso ;
   struct vdso_image *vdso_image ;
   atomic_t perf_rdpmc_allowed ;
   u16 pkey_allocation_map ;
   s16 execute_only_pkey ;
   void *bd_addr ;
};
#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
typedef struct __anonstruct_mm_context_t_128 mm_context_t;
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct address_space;
#line 67 
struct mem_cgroup;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_130 {
   struct list_head lru ;
   struct address_space *mapping ;
   unsigned long index ;
   unsigned long private ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_131 {
   dma_addr_t dma_addr ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_134 {
   struct page *next ;
   int pages ;
   int pobjects ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_133 {
   struct list_head slab_list ;
   struct __anonstruct_134 __anonCompField___anonunion_133_33 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_136 {
   unsigned int inuse : 16 ;
   unsigned int objects : 15 ;
   unsigned int frozen : 1 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_135 {
   void *s_mem ;
   unsigned long counters ;
   struct __anonstruct_136 __anonCompField___anonunion_135_35 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_132 {
   union __anonunion_133 __anonCompField___anonstruct_132_34 ;
   struct kmem_cache *slab_cache ;
   void *freelist ;
   union __anonunion_135 __anonCompField___anonstruct_132_36 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_137 {
   unsigned long compound_head ;
   unsigned char compound_dtor ;
   unsigned char compound_order ;
   atomic_t compound_mapcount ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_138 {
   unsigned long _compound_pad_1 ;
   unsigned long _compound_pad_2 ;
   struct list_head deferred_list ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_140 {
   struct mm_struct *pt_mm ;
   atomic_t pt_frag_refcount ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_139 {
   unsigned long _pt_pad_1 ;
   pgtable_t pmd_huge_pte ;
   unsigned long _pt_pad_2 ;
   union __anonunion_140 __anonCompField___anonstruct_139_40 ;
   spinlock_t *ptl ;
};
#line 68 
struct dev_pagemap;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_141 {
   struct dev_pagemap *pgmap ;
   void *zone_device_data ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_129 {
   struct __anonstruct_130 __anonCompField___anonunion_129_31 ;
   struct __anonstruct_131 __anonCompField___anonunion_129_32 ;
   struct __anonstruct_132 __anonCompField___anonunion_129_37 ;
   struct __anonstruct_137 __anonCompField___anonunion_129_38 ;
   struct __anonstruct_138 __anonCompField___anonunion_129_39 ;
   struct __anonstruct_139 __anonCompField___anonunion_129_41 ;
   struct __anonstruct_141 __anonCompField___anonunion_129_42 ;
   struct callback_head callback_head ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_142 {
   atomic_t _mapcount ;
   unsigned int page_type ;
   unsigned int active ;
   int units ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct page {
   unsigned long flags ;
   union __anonunion_129 __anonCompField_page_43 ;
   union __anonunion_142 __anonCompField_page_44 ;
   atomic_t _refcount ;
   struct mem_cgroup *mem_cgroup ;
} __attribute__((__aligned__(16)));
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct userfaultfd_ctx;
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct vm_userfaultfd_ctx {
   struct userfaultfd_ctx *ctx ;
};
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_shared_143 {
   struct rb_node rb ;
   unsigned long rb_subtree_last ;
};
#line 292 
struct anon_vma;
#line 292 
struct vm_operations_struct;
#line 292 
struct mempolicy;
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct vm_area_struct {
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   struct vm_area_struct *vm_prev ;
   struct rb_node vm_rb ;
   unsigned long rb_subtree_gap ;
   struct mm_struct *vm_mm ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   struct __anonstruct_shared_143 shared ;
   struct list_head anon_vma_chain ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   atomic_long_t swap_readahead_info ;
   struct mempolicy *vm_policy ;
   struct vm_userfaultfd_ctx vm_userfaultfd_ctx ;
} __attribute__((__designated_init__));
#line 358  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct core_thread {
   struct task_struct *task ;
   struct core_thread *next ;
};
#line 363  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct core_state {
   atomic_t nr_threads ;
   struct core_thread dumper ;
   struct completion startup ;
};
#line 368 
struct kioctx_table;
#line 370 
struct linux_binfmt;
#line 370 
struct user_namespace;
#line 370 
struct mmu_notifier_mm;
#line 370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_144 {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   u64 vmacache_seqnum ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   unsigned long mmap_base ;
   unsigned long mmap_legacy_base ;
   unsigned long mmap_compat_base ;
   unsigned long mmap_compat_legacy_base ;
   unsigned long task_size ;
   unsigned long highest_vm_end ;
   pgd_t *pgd ;
   atomic_t membarrier_state ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   atomic_long_t pgtables_bytes ;
   int map_count ;
   spinlock_t page_table_lock ;
   struct rw_semaphore mmap_sem ;
   struct list_head mmlist ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   atomic64_t pinned_vm ;
   unsigned long data_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long def_flags ;
   spinlock_t arg_lock ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[46U] ;
   struct mm_rss_stat rss_stat ;
   struct linux_binfmt *binfmt ;
   mm_context_t context ;
   unsigned long flags ;
   struct core_state *core_state ;
   spinlock_t ioctx_lock ;
   struct kioctx_table *ioctx_table ;
   struct task_struct *owner ;
   struct user_namespace *user_ns ;
   struct file *exe_file ;
   struct mmu_notifier_mm *mmu_notifier_mm ;
   unsigned long numa_next_scan ;
   unsigned long numa_scan_offset ;
   int numa_scan_seq ;
   atomic_t tlb_flush_pending ;
   bool tlb_flush_batched ;
   struct uprobes_state uprobes_state ;
   atomic_long_t hugetlb_usage ;
   struct work_struct async_put_work ;
} __attribute__((__designated_init__));
#line 370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct mm_struct {
   struct __anonstruct_144 __anonCompField_mm_struct_45 ;
   unsigned long cpu_bitmap[] ;
};
#line 642 
struct vm_fault;
#line 643  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
typedef unsigned int vm_fault_t;
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page-flags.h"
union __anonunion___u_147 {
   unsigned long __val ;
   char __c[1U] ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct free_area {
   struct list_head free_list[6U] ;
   unsigned long nr_free ;
};
#line 158 
struct pglist_data;
#line 168  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zone_padding {
   char x[0U] ;
} __attribute__((__aligned__(4096)));
#line 285  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zone_reclaim_stat {
   unsigned long recent_rotated[2U] ;
   unsigned long recent_scanned[2U] ;
};
#line 304  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct lruvec {
   struct list_head lists[5U] ;
   struct zone_reclaim_stat reclaim_stat ;
   atomic_long_t inactive_age ;
   unsigned long refaults ;
   unsigned long flags ;
   struct pglist_data *pgdat ;
};
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
typedef unsigned int isolate_mode_t;
#line 340  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct per_cpu_pages {
   int count ;
   int high ;
   int batch ;
   struct list_head lists[3U] ;
};
#line 349  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct per_cpu_pageset {
   struct per_cpu_pages pcp ;
   s8 expire ;
   u16 vm_numa_stat_diff[6U] ;
   s8 stat_threshold ;
   s8 vm_stat_diff[13U] ;
};
#line 361  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct per_cpu_nodestat {
   s8 stat_threshold ;
   s8 vm_node_stat_diff[32U] ;
};
#line 365 
enum zone_type {
    ZONE_DMA = 0,
    ZONE_DMA32 = 1,
    ZONE_NORMAL = 2,
    ZONE_MOVABLE = 3,
    ZONE_DEVICE = 4,
    __MAX_NR_ZONES = 5
};
#line 432  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zone {
   unsigned long _watermark[3U] ;
   unsigned long watermark_boost ;
   unsigned long nr_reserved_highatomic ;
   long lowmem_reserve[5U] ;
   int node ;
   struct pglist_data *zone_pgdat ;
   struct per_cpu_pageset *pageset ;
   unsigned long zone_start_pfn ;
   atomic_long_t managed_pages ;
   unsigned long spanned_pages ;
   unsigned long present_pages ;
   char *name ;
   unsigned long nr_isolate_pageblock ;
   seqlock_t span_seqlock ;
   int initialized ;
   struct zone_padding _pad1_ ;
   struct free_area free_area[11U] ;
   unsigned long flags ;
   spinlock_t lock ;
   struct zone_padding _pad2_ ;
   unsigned long percpu_drift_mark ;
   unsigned long compact_cached_free_pfn ;
   unsigned long compact_cached_migrate_pfn[2U] ;
   unsigned long compact_init_migrate_pfn ;
   unsigned long compact_init_free_pfn ;
   unsigned int compact_considered ;
   unsigned int compact_defer_shift ;
   int compact_order_failed ;
   bool compact_blockskip_flush ;
   bool contiguous ;
   struct zone_padding _pad3_ ;
   atomic_long_t vm_stat[13U] ;
   atomic_long_t vm_numa_stat[6U] ;
} __attribute__((__aligned__(4096)));
#line 665  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zoneref {
   struct zone *zone ;
   int zone_idx ;
};
#line 684  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zonelist {
   struct zoneref _zonerefs[5121U] ;
};
#line 694  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct deferred_split {
   spinlock_t split_queue_lock ;
   struct list_head split_queue ;
   unsigned long split_queue_len ;
};
#line 710  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct pglist_data {
   struct zone node_zones[5U] ;
   struct zonelist node_zonelists[2U] ;
   int nr_zones ;
   spinlock_t node_size_lock ;
   unsigned long node_start_pfn ;
   unsigned long node_present_pages ;
   unsigned long node_spanned_pages ;
   int node_id ;
   wait_queue_head_t kswapd_wait ;
   wait_queue_head_t pfmemalloc_wait ;
   struct task_struct *kswapd ;
   int kswapd_order ;
   enum zone_type kswapd_classzone_idx ;
   int kswapd_failures ;
   int kcompactd_max_order ;
   enum zone_type kcompactd_classzone_idx ;
   wait_queue_head_t kcompactd_wait ;
   struct task_struct *kcompactd ;
   unsigned long totalreserve_pages ;
   unsigned long min_unmapped_pages ;
   unsigned long min_slab_pages ;
   struct zone_padding _pad1_ ;
   spinlock_t lru_lock ;
   unsigned long first_deferred_pfn ;
   struct deferred_split deferred_split_queue ;
   struct lruvec __lruvec ;
   unsigned long flags ;
   struct zone_padding _pad2_ ;
   struct per_cpu_nodestat *per_cpu_nodestats ;
   atomic_long_t vm_stat[32U] ;
};
#line 824 
struct resource;
#line 825 
struct vmem_altmap;
#line 282  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/x86_init.h"
struct pci_dev;
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/topology.h"
struct pci_bus;
#line 440  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/io.h"
struct fwnode_operations;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_handle {
   struct fwnode_handle *secondary ;
   struct fwnode_operations *ops ;
   struct device *dev ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_endpoint {
   unsigned int port ;
   unsigned int id ;
   struct fwnode_handle *local_fwnode ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_reference_args {
   struct fwnode_handle *fwnode ;
   unsigned int nargs ;
   u64 args[8U] ;
};
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_operations {
   struct fwnode_handle *(*get)(struct fwnode_handle *) ;
   void (*put)(struct fwnode_handle *) ;
   bool (*device_is_available)(struct fwnode_handle *) ;
   void *(*device_get_match_data)(struct fwnode_handle *, struct device *) ;
   bool (*property_present)(struct fwnode_handle *, char *) ;
   int (*property_read_int_array)(struct fwnode_handle *, char *, unsigned int , void *, size_t ) ;
   int (*property_read_string_array)(struct fwnode_handle *, char *, char **, size_t ) ;
   char *(*get_name)(struct fwnode_handle *) ;
   char *(*get_name_prefix)(struct fwnode_handle *) ;
   struct fwnode_handle *(*get_parent)(struct fwnode_handle *) ;
   struct fwnode_handle *(*get_next_child_node)(struct fwnode_handle *, struct fwnode_handle *) ;
   struct fwnode_handle *(*get_named_child_node)(struct fwnode_handle *, char *) ;
   int (*get_reference_args)(struct fwnode_handle *, char *, char *, unsigned int , unsigned int , struct fwnode_reference_args *) ;
   struct fwnode_handle *(*graph_get_next_endpoint)(struct fwnode_handle *, struct fwnode_handle *) ;
   struct fwnode_handle *(*graph_get_remote_endpoint)(struct fwnode_handle *) ;
   struct fwnode_handle *(*graph_get_port_parent)(struct fwnode_handle *) ;
   int (*graph_parse_endpoint)(struct fwnode_handle *, struct fwnode_endpoint *) ;
   int (*add_links)(struct fwnode_handle *, struct device *) ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/llist.h"
struct llist_node;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/llist.h"
struct llist_node {
   struct llist_node *next ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmalloc.h"
struct vm_struct {
   struct vm_struct *next ;
   void *addr ;
   unsigned long size ;
   unsigned long flags ;
   struct page **pages ;
   unsigned int nr_pages ;
   phys_addr_t phys_addr ;
   void *caller ;
};
#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/apic.h"
struct irq_data;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/smp.h"
struct __call_single_data {
   struct llist_node llist ;
   void (*func)(void *) ;
   void *info ;
   unsigned int flags ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/arch_topology.h"
struct device_node;
#line 623  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/gfp.h"
struct percpu_ref;
#line 624  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/gfp.h"
typedef void percpu_ref_func_t(struct percpu_ref *);
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-refcount.h"
struct percpu_ref {
   atomic_long_t count ;
   unsigned long percpu_count_ptr ;
   percpu_ref_func_t *release ;
   percpu_ref_func_t *confirm_switch ;
   bool force_atomic : 1 ;
   bool allow_reinit : 1 ;
   struct callback_head rcu ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
struct refcount_struct {
   atomic_t refs ;
};
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
typedef struct refcount_struct refcount_t;
#line 305 
enum pid_type {
    PIDTYPE_PID = 0,
    PIDTYPE_TGID = 1,
    PIDTYPE_PGID = 2,
    PIDTYPE_SID = 3,
    PIDTYPE_MAX = 4
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct pid_namespace;
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct upid {
   int nr ;
   struct pid_namespace *ns ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct pid {
   refcount_t count ;
   unsigned int level ;
   struct hlist_head tasks[4U] ;
   wait_queue_head_t wait_pidfd ;
   struct callback_head rcu ;
   struct upid numbers[1U] ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
struct __anonstruct_kuid_t_272 {
   uid_t val ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
typedef struct __anonstruct_kuid_t_272 kuid_t;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
struct __anonstruct_kgid_t_273 {
   gid_t val ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
typedef struct __anonstruct_kgid_t_273 kgid_t;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhash_head {
   struct rhash_head *next ;
};
#line 25 
struct bucket_table;
#line 33 
struct rhashtable;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable_compare_arg {
   struct rhashtable *ht ;
   void *key ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable_params {
   u16 nelem_hint ;
   u16 key_len ;
   u16 key_offset ;
   u16 head_offset ;
   unsigned int max_size ;
   u16 min_size ;
   bool automatic_shrinking ;
   u32 (*hashfn)(void *, u32 , u32 ) ;
   u32 (*obj_hashfn)(void *, u32 , u32 ) ;
   int (*obj_cmpfn)(struct rhashtable_compare_arg *, void *) ;
};
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable {
   struct bucket_table *tbl ;
   unsigned int key_len ;
   unsigned int max_elems ;
   struct rhashtable_params p ;
   bool rhlist ;
   struct work_struct run_work ;
   struct mutex mutex ;
   spinlock_t lock ;
   atomic_t nelems ;
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/sem.h"
struct sem_undo_list;
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sem.h"
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shm.h"
struct sysv_shm {
   struct list_head shm_clist ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/plist.h"
struct plist_node {
   int prio ;
   struct list_head prio_list ;
   struct list_head node_list ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timerqueue.h"
struct timerqueue_node {
   struct rb_node node ;
   ktime_t expires ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timerqueue.h"
struct timerqueue_head {
   struct rb_root_cached rb_root ;
};
#line 60 
struct hrtimer_clock_base;
#line 61 
struct hrtimer_cpu_base;
#line 80 
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
};
#line 117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer {
   struct timerqueue_node node ;
   ktime_t _softexpires ;
   enum hrtimer_restart (*function)(struct hrtimer *) ;
   struct hrtimer_clock_base *base ;
   u8 state ;
   u8 is_rel ;
   u8 is_soft ;
   u8 is_hard ;
};
#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   unsigned int index ;
   clockid_t clockid ;
   seqcount_t seq ;
   struct hrtimer *running ;
   struct timerqueue_head active ;
   ktime_t (*get_time)(void) ;
   ktime_t offset ;
} __attribute__((__aligned__(64)));
#line 213  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer_cpu_base {
   raw_spinlock_t lock ;
   unsigned int cpu ;
   unsigned int active_bases ;
   unsigned int clock_was_set_seq ;
   unsigned int hres_active : 1 ;
   unsigned int in_hrtirq : 1 ;
   unsigned int hang_detected : 1 ;
   unsigned int softirq_activated : 1 ;
   unsigned int nr_events ;
   unsigned short nr_retries ;
   unsigned short nr_hangs ;
   unsigned int max_hang_time ;
   ktime_t expires_next ;
   struct hrtimer *next_timer ;
   ktime_t softirq_expires_next ;
   struct hrtimer *softirq_next_timer ;
   struct hrtimer_clock_base clock_base[8U] ;
} __attribute__((__aligned__(64)));
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/seccomp.h"
struct seccomp_filter;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seccomp.h"
struct seccomp {
   int mode ;
   struct seccomp_filter *filter ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/resource.h"
struct rlimit {
   __kernel_ulong_t rlim_cur ;
   __kernel_ulong_t rlim_max ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/latencytop.h"
struct latency_record {
   unsigned long backtrace[12U] ;
   unsigned int count ;
   unsigned long time ;
   unsigned long max ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/types.h"
struct task_cputime {
   u64 stime ;
   u64 utime ;
   unsigned long long sum_exec_runtime ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
struct __anonstruct_sigset_t_276 {
   unsigned long sig[1U] ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
typedef struct __anonstruct_sigset_t_276 sigset_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
typedef void __signalfn_t(int );
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef __signalfn_t *__sighandler_t;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef void __restorefn_t(void);
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef __restorefn_t *__sigrestore_t;
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union sigval {
   int sival_int ;
   void *sival_ptr ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
typedef union sigval sigval_t;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__kill_277 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__timer_278 {
   __kernel_timer_t _tid ;
   int _overrun ;
   sigval_t _sigval ;
   int _sys_private ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__rt_279 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   sigval_t _sigval ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigchld_280 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   int _status ;
   __kernel_clock_t _utime ;
   __kernel_clock_t _stime ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__addr_bnd_283 {
   char _dummy_bnd[8U] ;
   void *_lower ;
   void *_upper ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__addr_pkey_284 {
   char _dummy_pkey[8U] ;
   __u32 _pkey ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union __anonunion_282 {
   short _addr_lsb ;
   struct __anonstruct__addr_bnd_283 _addr_bnd ;
   struct __anonstruct__addr_pkey_284 _addr_pkey ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigfault_281 {
   void *_addr ;
   union __anonunion_282 __anonCompField___anonstruct__sigfault_281_47 ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigpoll_285 {
   long _band ;
   int _fd ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigsys_286 {
   void *_call_addr ;
   int _syscall ;
   unsigned int _arch ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union __sifields {
   struct __anonstruct__kill_277 _kill ;
   struct __anonstruct__timer_278 _timer ;
   struct __anonstruct__rt_279 _rt ;
   struct __anonstruct__sigchld_280 _sigchld ;
   struct __anonstruct__sigfault_281 _sigfault ;
   struct __anonstruct__sigpoll_285 _sigpoll ;
   struct __anonstruct__sigsys_286 _sigsys ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct __anonstruct_291 {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __sifields _sifields ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct kernel_siginfo {
   struct __anonstruct_291 __anonCompField_kernel_siginfo_50 ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
typedef struct kernel_siginfo kernel_siginfo_t;
#line 20 
struct user_struct;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct k_sigaction {
   struct sigaction sa ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/task_io_accounting.h"
struct task_io_accounting {
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/posix-timers.h"
struct posix_cputimer_base {
   u64 nextevt ;
   struct timerqueue_head tqhead ;
};
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/posix-timers.h"
struct posix_cputimers {
   struct posix_cputimer_base bases[3U] ;
   unsigned int timers_active ;
   unsigned int expiry_active ;
};
#line 193 
struct signal_struct;
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rseq.h"
union __anonunion_rseq_cs_296 {
   __u64 ptr64 ;
   __u64 ptr ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rseq.h"
struct rseq {
   __u32 cpu_id_start ;
   __u32 cpu_id ;
   union __anonunion_rseq_cs_296 rseq_cs ;
   __u32 flags ;
} __attribute__((__aligned__(32)));
#line 146 
struct audit_context;
#line 147 
struct backing_dev_info;
#line 148 
struct bio_list;
#line 149 
struct blk_plug;
#line 150 
struct capture_control;
#line 151 
struct cfs_rq;
#line 152 
struct fs_struct;
#line 153 
struct futex_pi_state;
#line 154 
struct io_context;
#line 155 
struct nameidata;
#line 156 
struct nsproxy;
#line 157 
struct perf_event_context;
#line 158 
struct pipe_inode_info;
#line 160 
struct reclaim_state;
#line 161 
struct robust_list_head;
#line 166 
struct sighand_struct;
#line 167 
struct task_delay_info;
#line 168 
struct task_group;
#line 242  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct prev_cputime {
   u64 utime ;
   u64 stime ;
   raw_spinlock_t lock ;
};
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_info {
   unsigned long pcount ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
};
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct load_weight {
   unsigned long weight ;
   u32 inv_weight ;
};
#line 352  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct util_est {
   unsigned int enqueued ;
   unsigned int ewma ;
} __attribute__((__aligned__(8)));
#line 401  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_avg {
   u64 last_update_time ;
   u64 load_sum ;
   u64 runnable_load_sum ;
   u32 util_sum ;
   u32 period_contrib ;
   unsigned long load_avg ;
   unsigned long runnable_load_avg ;
   unsigned long util_avg ;
   struct util_est util_est ;
} __attribute__((__aligned__(64)));
#line 413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_statistics {
   u64 wait_start ;
   u64 wait_max ;
   u64 wait_count ;
   u64 wait_sum ;
   u64 iowait_count ;
   u64 iowait_sum ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
};
#line 449  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_entity {
   struct load_weight load ;
   unsigned long runnable_weight ;
   struct rb_node run_node ;
   struct list_head group_node ;
   unsigned int on_rq ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 nr_migrations ;
   struct sched_statistics statistics ;
   int depth ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
   struct sched_avg avg ;
};
#line 486 
struct rt_rq;
#line 486  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_rt_entity {
   struct list_head run_list ;
   unsigned long timeout ;
   unsigned long watchdog_stamp ;
   unsigned int time_slice ;
   unsigned short on_rq ;
   unsigned short on_list ;
   struct sched_rt_entity *back ;
   struct sched_rt_entity *parent ;
   struct rt_rq *rt_rq ;
   struct rt_rq *my_q ;
} __attribute__((__designated_init__));
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_dl_entity {
   struct rb_node rb_node ;
   u64 dl_runtime ;
   u64 dl_deadline ;
   u64 dl_period ;
   u64 dl_bw ;
   u64 dl_density ;
   s64 runtime ;
   u64 deadline ;
   unsigned int flags ;
   unsigned int dl_throttled : 1 ;
   unsigned int dl_boosted : 1 ;
   unsigned int dl_yielded : 1 ;
   unsigned int dl_non_contending : 1 ;
   unsigned int dl_overrun : 1 ;
   struct hrtimer dl_timer ;
   struct hrtimer inactive_timer ;
};
#line 600  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct uclamp_se {
   unsigned int value : 11 ;
   unsigned int bucket_id : 3 ;
   unsigned int active : 1 ;
   unsigned int user_defined : 1 ;
};
#line 625  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct wake_q_node {
   struct wake_q_node *next ;
};
#line 629 
struct sched_class;
#line 629 
struct cred;
#line 629 
struct key;
#line 629 
struct files_struct;
#line 629 
struct rt_mutex_waiter;
#line 629 
struct css_set;
#line 629 
struct compat_robust_list_head;
#line 629 
struct numa_group;
#line 629  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
union __anonunion_298 {
   refcount_t rcu_users ;
   struct callback_head rcu ;
};
#line 629 
struct ftrace_ret_stack;
#line 629 
struct kcov;
#line 629 
struct request_queue;
#line 629  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct task_struct {
   struct thread_info thread_info ;
   long state ;
   void *stack ;
   refcount_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   struct llist_node wake_entry ;
   int on_cpu ;
   unsigned int cpu ;
   unsigned int wakee_flips ;
   unsigned long wakee_flip_decay_ts ;
   struct task_struct *last_wakee ;
   int recent_used_cpu ;
   int wake_cpu ;
   int on_rq ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   unsigned int rt_priority ;
   struct sched_class *sched_class ;
   struct sched_entity se ;
   struct sched_rt_entity rt ;
   struct task_group *sched_task_group ;
   struct sched_dl_entity dl ;
   struct uclamp_se uclamp_req[2U] ;
   struct uclamp_se uclamp[2U] ;
   struct hlist_head preempt_notifiers ;
   unsigned int btrace_seq ;
   unsigned int policy ;
   int nr_cpus_allowed ;
   cpumask_t *cpus_ptr ;
   cpumask_t cpus_mask ;
   unsigned long rcu_tasks_nvcsw ;
   u8 rcu_tasks_holdout ;
   u8 rcu_tasks_idx ;
   int rcu_tasks_idle_cpu ;
   struct list_head rcu_tasks_holdout_list ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct plist_node pushable_tasks ;
   struct rb_node pushable_dl_tasks ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   struct vmacache vmacache ;
   struct task_rss_stat rss_stat ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned long jobctl ;
   unsigned int personality ;
   unsigned int sched_reset_on_fork : 1 ;
   unsigned int sched_contributes_to_load : 1 ;
   unsigned int sched_migrated : 1 ;
   unsigned int sched_remote_wakeup : 1 ;
   unsigned int sched_psi_wake_requeue : 1 ;
   unsigned int  ;
   unsigned int in_execve : 1 ;
   unsigned int in_iowait : 1 ;
   unsigned int restore_sigmask : 1 ;
   unsigned int in_user_fault : 1 ;
   unsigned int brk_randomized : 1 ;
   unsigned int no_cgroup_migration : 1 ;
   unsigned int frozen : 1 ;
   unsigned int use_memdelay : 1 ;
   unsigned long atomic_flags ;
   struct restart_block restart_block ;
   pid_t pid ;
   pid_t tgid ;
   unsigned long stack_canary ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct list_head ptraced ;
   struct list_head ptrace_entry ;
   struct pid *thread_pid ;
   struct hlist_node pid_links[4U] ;
   struct list_head thread_group ;
   struct list_head thread_node ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   u64 utime ;
   u64 stime ;
   u64 gtime ;
   struct prev_cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   u64 start_time ;
   u64 start_boottime ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   struct posix_cputimers posix_cputimers ;
   struct cred *ptracer_cred ;
   struct cred *real_cred ;
   struct cred *cred ;
   struct key *cached_requested_key ;
   char comm[16U] ;
   struct nameidata *nameidata ;
   struct sysv_sem sysvsem ;
   struct sysv_shm sysvshm ;
   unsigned long last_switch_count ;
   unsigned long last_switch_time ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t sas_ss_size ;
   unsigned int sas_ss_flags ;
   struct callback_head *task_works ;
   struct audit_context *audit_context ;
   kuid_t loginuid ;
   unsigned int sessionid ;
   struct seccomp seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   raw_spinlock_t pi_lock ;
   struct wake_q_node wake_q ;
   struct rb_root_cached pi_waiters ;
   struct task_struct *pi_top_task ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct mutex_waiter *blocked_on ;
   int non_block_count ;
   unsigned int irq_events ;
   unsigned long hardirq_enable_ip ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned int hardirq_disable_event ;
   int hardirqs_enabled ;
   int hardirq_context ;
   unsigned long softirq_disable_ip ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_disable_event ;
   unsigned int softirq_enable_event ;
   int softirqs_enabled ;
   int softirq_context ;
   u64 curr_chain_key ;
   int lockdep_depth ;
   unsigned int lockdep_recursion ;
   struct held_lock held_locks[48U] ;
   unsigned int in_ubsan ;
   void *journal_info ;
   struct bio_list *bio_list ;
   struct blk_plug *plug ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   struct capture_control *capture_control ;
   unsigned long ptrace_message ;
   kernel_siginfo_t *last_siginfo ;
   struct task_io_accounting ioac ;
   unsigned int psi_flags ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   u64 acct_timexpd ;
   nodemask_t mems_allowed ;
   seqcount_t mems_allowed_seq ;
   int cpuset_mem_spread_rotor ;
   int cpuset_slab_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   u32 closid ;
   u32 rmid ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   struct mutex futex_exit_mutex ;
   unsigned int futex_state ;
   struct perf_event_context *perf_event_ctxp[2U] ;
   struct mutex perf_event_mutex ;
   struct list_head perf_event_list ;
   struct mempolicy *mempolicy ;
   short il_prev ;
   short pref_node_fork ;
   int numa_scan_seq ;
   unsigned int numa_scan_period ;
   unsigned int numa_scan_period_max ;
   int numa_preferred_nid ;
   unsigned long numa_migrate_retry ;
   u64 node_stamp ;
   u64 last_task_numa_placement ;
   u64 last_sum_exec_runtime ;
   struct callback_head numa_work ;
   struct numa_group *numa_group ;
   unsigned long *numa_faults ;
   unsigned long total_numa_faults ;
   unsigned long numa_faults_locality[3U] ;
   unsigned long numa_pages_migrated ;
   struct rseq *rseq ;
   u32 rseq_sig ;
   unsigned long rseq_event_mask ;
   struct tlbflush_unmap_batch tlb_ubc ;
   union __anonunion_298 __anonCompField_task_struct_52 ;
   struct pipe_inode_info *splice_pipe ;
   struct page_frag task_frag ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   unsigned int fail_nth ;
   int nr_dirtied ;
   int nr_dirtied_pause ;
   unsigned long dirty_paused_when ;
   int latency_record_count ;
   struct latency_record latency_record[32U] ;
   u64 timer_slack_ns ;
   u64 default_timer_slack_ns ;
   unsigned int kasan_depth ;
   int curr_ret_stack ;
   int curr_ret_depth ;
   struct ftrace_ret_stack *ret_stack ;
   unsigned long long ftrace_timestamp ;
   atomic_t trace_overrun ;
   atomic_t tracing_graph_pause ;
   unsigned long trace ;
   unsigned long trace_recursion ;
   unsigned int kcov_mode ;
   unsigned int kcov_size ;
   void *kcov_area ;
   struct kcov *kcov ;
   u64 kcov_handle ;
   int kcov_sequence ;
   struct mem_cgroup *memcg_in_oom ;
   gfp_t memcg_oom_gfp_mask ;
   int memcg_oom_order ;
   unsigned int memcg_nr_pages_over_high ;
   struct mem_cgroup *active_memcg ;
   struct request_queue *throttle_queue ;
   struct uprobe_task *utask ;
   unsigned int sequential_io ;
   unsigned int sequential_io_avg ;
   unsigned long task_state_change ;
   int pagefault_disabled ;
   struct task_struct *oom_reaper_list ;
   struct vm_struct *stack_vm_area ;
   refcount_t stack_refcount ;
   int patch_state ;
   void *security ;
   struct thread_struct thread ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/extable.h"
struct exception_table_entry {
   int insn ;
   int fixup ;
   int handler ;
};
#line 686  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
struct scatterlist;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uio.h"
struct iovec {
   void *iov_base ;
   __kernel_size_t iov_len ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct kvec {
   void *iov_base ;
   size_t iov_len ;
};
#line 30 
struct bio_vec;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
union __anonunion_377 {
   struct iovec *iov ;
   struct kvec *kvec ;
   struct bio_vec *bvec ;
   struct pipe_inode_info *pipe ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct __anonstruct_379 {
   unsigned int head ;
   unsigned int start_head ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
union __anonunion_378 {
   unsigned long nr_segs ;
   struct __anonstruct_379 __anonCompField___anonunion_378_54 ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct iov_iter {
   unsigned int type ;
   size_t iov_offset ;
   size_t count ;
   union __anonunion_377 __anonCompField_iov_iter_53 ;
   union __anonunion_378 __anonCompField_iov_iter_55 ;
};
#line 285  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
typedef unsigned short __kernel_sa_family_t;
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/socket.h"
struct socket;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
typedef __kernel_sa_family_t sa_family_t;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
struct sockaddr {
   sa_family_t sa_family ;
   char sa_data[14U] ;
};
#line 49 
struct kiocb;
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
struct msghdr {
   void *msg_name ;
   int msg_namelen ;
   struct iov_iter msg_iter ;
   void *msg_control ;
   __kernel_size_t msg_controllen ;
   unsigned int msg_flags ;
   struct kiocb *msg_iocb ;
};
#line 422 
struct ns_common;
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shrinker.h"
struct shrink_control {
   gfp_t gfp_mask ;
   int nid ;
   unsigned long nr_to_scan ;
   unsigned long nr_scanned ;
   struct mem_cgroup *memcg ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shrinker.h"
struct shrinker {
   unsigned long (*count_objects)(struct shrinker *, struct shrink_control *) ;
   unsigned long (*scan_objects)(struct shrinker *, struct shrink_control *) ;
   long batch ;
   int seeks ;
   unsigned int flags ;
   struct list_head list ;
   int id ;
   atomic_long_t *nr_deferred ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ioport.h"
struct resource {
   resource_size_t start ;
   resource_size_t end ;
   char *name ;
   unsigned long flags ;
   unsigned long desc ;
   struct resource *parent ;
   struct resource *sibling ;
   struct resource *child ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct vmem_altmap {
   unsigned long base_pfn ;
   unsigned long end_pfn ;
   unsigned long reserve ;
   unsigned long free ;
   unsigned long align ;
   unsigned long alloc ;
};
#line 26 
enum memory_type {
    MEMORY_DEVICE_PRIVATE = 1,
    MEMORY_DEVICE_FS_DAX = 2,
    MEMORY_DEVICE_DEVDAX = 3,
    MEMORY_DEVICE_PCI_P2PDMA = 4
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct dev_pagemap_ops {
   void (*page_free)(struct page *) ;
   void (*kill)(struct dev_pagemap *) ;
   void (*cleanup)(struct dev_pagemap *) ;
   vm_fault_t (*migrate_to_ram)(struct vm_fault *) ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct dev_pagemap {
   struct vmem_altmap altmap ;
   struct resource res ;
   struct percpu_ref *ref ;
   struct percpu_ref internal_ref ;
   struct completion done ;
   enum memory_type type ;
   unsigned int flags ;
   struct dev_pagemap_ops *ops ;
};
#line 176 
struct file_ra_state;
#line 177 
struct writeback_control;
#line 178 
struct bdi_writeback;
#line 417  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
struct vm_fault {
   struct vm_area_struct *vma ;
   unsigned int flags ;
   gfp_t gfp_mask ;
   unsigned long pgoff ;
   unsigned long address ;
   pmd_t *pmd ;
   pud_t *pud ;
   pte_t orig_pte ;
   struct page *cow_page ;
   struct mem_cgroup *memcg ;
   struct page *page ;
   pte_t *pte ;
   spinlock_t *ptl ;
   pgtable_t prealloc_pte ;
};
#line 448 
enum page_entry_size {
    PE_SIZE_PTE = 0,
    PE_SIZE_PMD = 1,
    PE_SIZE_PUD = 2
};
#line 467  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
struct vm_operations_struct {
   void (*open)(struct vm_area_struct *) ;
   void (*close)(struct vm_area_struct *) ;
   int (*split)(struct vm_area_struct *, unsigned long ) ;
   int (*mremap)(struct vm_area_struct *) ;
   vm_fault_t (*fault)(struct vm_fault *) ;
   vm_fault_t (*huge_fault)(struct vm_fault *, enum page_entry_size ) ;
   void (*map_pages)(struct vm_fault *, unsigned long , unsigned long ) ;
   unsigned long (*pagesize)(struct vm_area_struct *) ;
   vm_fault_t (*page_mkwrite)(struct vm_fault *) ;
   vm_fault_t (*pfn_mkwrite)(struct vm_fault *) ;
   int (*access)(struct vm_area_struct *, unsigned long , void *, int , int ) ;
   char *(*name)(struct vm_area_struct *) ;
   int (*set_policy)(struct vm_area_struct *, struct mempolicy *) ;
   struct mempolicy *(*get_policy)(struct vm_area_struct *, unsigned long ) ;
   struct page *(*find_special_page)(struct vm_area_struct *, unsigned long ) ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_node;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_head {
   struct hlist_bl_node *first ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_node {
   struct hlist_bl_node *next ;
   struct hlist_bl_node **pprev ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
struct __anonstruct_395 {
   spinlock_t lock ;
   int count ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
union __anonunion_394 {
   struct __anonstruct_395 __anonCompField___anonunion_394_58 ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
struct lockref {
   union __anonunion_394 __anonCompField_lockref_59 ;
};
#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/stringhash.h"
struct path;
#line 79 
struct vfsmount;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct __anonstruct_397 {
   u32 hash ;
   u32 len ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_396 {
   struct __anonstruct_397 __anonCompField___anonunion_396_60 ;
   u64 hash_len ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct qstr {
   union __anonunion_396 __anonCompField_qstr_61 ;
   unsigned char *name ;
};
#line 89 
struct dentry_operations;
#line 89 
struct super_block;
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_398 {
   struct list_head d_lru ;
   wait_queue_head_t *d_wait ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_d_u_399 {
   struct hlist_node d_alias ;
   struct hlist_bl_node d_in_lookup_hash ;
   struct callback_head d_rcu ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct dentry {
   unsigned int d_flags ;
   seqcount_t d_seq ;
   struct hlist_bl_node d_hash ;
   struct dentry *d_parent ;
   struct qstr d_name ;
   struct inode *d_inode ;
   unsigned char d_iname[32U] ;
   struct lockref d_lockref ;
   struct dentry_operations *d_op ;
   struct super_block *d_sb ;
   unsigned long d_time ;
   void *d_fsdata ;
   union __anonunion_398 __anonCompField_dentry_62 ;
   struct list_head d_child ;
   struct list_head d_subdirs ;
   union __anonunion_d_u_399 d_u ;
} __attribute__((__designated_init__));
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct dentry_operations {
   int (*d_revalidate)(struct dentry *, unsigned int ) ;
   int (*d_weak_revalidate)(struct dentry *, unsigned int ) ;
   int (*d_hash)(struct dentry *, struct qstr *) ;
   int (*d_compare)(struct dentry *, unsigned int , char *, struct qstr *) ;
   int (*d_delete)(struct dentry *) ;
   int (*d_init)(struct dentry *) ;
   void (*d_release)(struct dentry *) ;
   void (*d_prune)(struct dentry *) ;
   void (*d_iput)(struct dentry *, struct inode *) ;
   char *(*d_dname)(struct dentry *, char *, int ) ;
   struct vfsmount *(*d_automount)(struct path *) ;
   int (*d_manage)(struct path *, bool ) ;
   struct dentry *(*d_real)(struct dentry *, struct inode *) ;
} __attribute__((__aligned__(64)));
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/path.h"
struct path {
   struct vfsmount *mnt ;
   struct dentry *dentry ;
} __attribute__((__designated_init__));
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/stat.h"
struct kstat {
   u32 result_mask ;
   umode_t mode ;
   unsigned int nlink ;
   uint32_t blksize ;
   u64 attributes ;
   u64 attributes_mask ;
   u64 ino ;
   dev_t dev ;
   dev_t rdev ;
   kuid_t uid ;
   kgid_t gid ;
   loff_t size ;
   struct timespec64 atime ;
   struct timespec64 mtime ;
   struct timespec64 ctime ;
   struct timespec64 btime ;
   u64 blocks ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_one {
   struct list_head list ;
   long nr_items ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_memcg {
   struct callback_head rcu ;
   struct list_lru_one *lru[0U] ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_node {
   spinlock_t lock ;
   struct list_lru_one lru ;
   struct list_lru_memcg *memcg_lrus ;
   long nr_items ;
} __attribute__((__aligned__(64)));
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru {
   struct list_lru_node *node ;
   struct list_head list ;
   int shrinker_id ;
   bool memcg_aware ;
};
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/xarray.h"
struct xarray {
   spinlock_t xa_lock ;
   gfp_t xa_flags ;
   void *xa_head ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/capability.h"
struct kernel_cap_struct {
   __u32 cap[2U] ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/capability.h"
typedef struct kernel_cap_struct kernel_cap_t;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fiemap.h"
struct fiemap_extent {
   __u64 fe_logical ;
   __u64 fe_physical ;
   __u64 fe_length ;
   __u64 fe_reserved64[2U] ;
   __u32 fe_flags ;
   __u32 fe_reserved[3U] ;
};
#line 39 
enum migrate_mode {
    MIGRATE_ASYNC = 0,
    MIGRATE_SYNC_LIGHT = 1,
    MIGRATE_SYNC = 2,
    MIGRATE_SYNC_NO_COPY = 3
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcuwait.h"
struct rcuwait {
   struct task_struct *task ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcu_sync.h"
struct rcu_sync {
   int gp_state ;
   int gp_count ;
   wait_queue_head_t gp_wait ;
   struct callback_head cb_head ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-rwsem.h"
struct percpu_rw_semaphore {
   struct rcu_sync rss ;
   unsigned int *read_count ;
   struct rw_semaphore rw_sem ;
   struct rcuwait writer ;
   int readers_block ;
};
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/delayed_call.h"
struct delayed_call {
   void (*fn)(void *) ;
   void *arg ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uuid.h"
struct __anonstruct_uuid_t_417 {
   __u8 b[16U] ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uuid.h"
typedef struct __anonstruct_uuid_t_417 uuid_t;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uuid.h"
typedef u32 errseq_t;
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
union __anonunion_418 {
   struct list_head q_node ;
   struct kmem_cache *__rcu_icq_cache ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
union __anonunion_419 {
   struct hlist_node ioc_node ;
   struct callback_head __rcu_head ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
struct io_cq {
   struct request_queue *q ;
   struct io_context *ioc ;
   union __anonunion_418 __anonCompField_io_cq_65 ;
   union __anonunion_419 __anonCompField_io_cq_66 ;
   unsigned int flags ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
struct io_context {
   atomic_long_t refcount ;
   atomic_t active_ref ;
   atomic_t nr_tasks ;
   spinlock_t lock ;
   unsigned short ioprio ;
   int nr_batch_requests ;
   unsigned long last_waited ;
   struct xarray icq_tree ;
   struct io_cq *icq_hint ;
   struct hlist_head icq_list ;
   struct work_struct release_work ;
};
#line 286  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fs.h"
struct bio;
#line 287 
struct export_operations;
#line 288 
struct hd_geometry;
#line 289 
struct kobject;
#line 290 
struct poll_table_struct;
#line 291 
struct kstatfs;
#line 292 
struct swap_info_struct;
#line 293 
struct fscrypt_info;
#line 294 
struct fscrypt_operations;
#line 295 
struct fsverity_info;
#line 296 
struct fsverity_operations;
#line 297 
struct fs_context;
#line 298 
struct fs_parameter_description;
#line 224  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct iattr {
   unsigned int ia_valid ;
   umode_t ia_mode ;
   kuid_t ia_uid ;
   kgid_t ia_gid ;
   loff_t ia_size ;
   struct timespec64 ia_atime ;
   struct timespec64 ia_mtime ;
   struct timespec64 ia_ctime ;
   struct file *ia_file ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu_counter.h"
struct percpu_counter {
   raw_spinlock_t lock ;
   s64 count ;
   struct list_head list ;
   s32 *counters ;
};
#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dqblk_xfs.h"
struct dquot;
#line 215 
struct kqid;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
typedef __kernel_uid32_t projid_t;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
struct __anonstruct_kprojid_t_420 {
   projid_t val ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
typedef struct __anonstruct_kprojid_t_420 kprojid_t;
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/quota.h"
enum quota_type {
    USRQUOTA = 0,
    GRPQUOTA = 1,
    PRJQUOTA = 2
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
typedef long long qsize_t;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
union __anonunion_421 {
   kuid_t uid ;
   kgid_t gid ;
   kprojid_t projid ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct kqid {
   union __anonunion_421 __anonCompField_kqid_67 ;
   enum quota_type type ;
};
#line 205  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct mem_dqblk {
   qsize_t dqb_bhardlimit ;
   qsize_t dqb_bsoftlimit ;
   qsize_t dqb_curspace ;
   qsize_t dqb_rsvspace ;
   qsize_t dqb_ihardlimit ;
   qsize_t dqb_isoftlimit ;
   qsize_t dqb_curinodes ;
   time64_t dqb_btime ;
   time64_t dqb_itime ;
};
#line 216 
struct quota_format_type;
#line 222  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct mem_dqinfo {
   struct quota_format_type *dqi_format ;
   int dqi_fmt_id ;
   struct list_head dqi_dirty_list ;
   unsigned long dqi_flags ;
   unsigned int dqi_bgrace ;
   unsigned int dqi_igrace ;
   qsize_t dqi_max_spc_limit ;
   qsize_t dqi_max_ino_limit ;
   void *dqi_priv ;
};
#line 294  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct dquot {
   struct hlist_node dq_hash ;
   struct list_head dq_inuse ;
   struct list_head dq_free ;
   struct list_head dq_dirty ;
   struct mutex dq_lock ;
   spinlock_t dq_dqb_lock ;
   atomic_t dq_count ;
   struct super_block *dq_sb ;
   struct kqid dq_id ;
   loff_t dq_off ;
   unsigned long dq_flags ;
   struct mem_dqblk dq_dqb ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_format_ops {
   int (*check_quota_file)(struct super_block *, int ) ;
   int (*read_file_info)(struct super_block *, int ) ;
   int (*write_file_info)(struct super_block *, int ) ;
   int (*free_file_info)(struct super_block *, int ) ;
   int (*read_dqblk)(struct dquot *) ;
   int (*commit_dqblk)(struct dquot *) ;
   int (*release_dqblk)(struct dquot *) ;
   int (*get_next_id)(struct super_block *, struct kqid *) ;
};
#line 322  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct dquot_operations {
   int (*write_dquot)(struct dquot *) ;
   struct dquot *(*alloc_dquot)(struct super_block *, int ) ;
   void (*destroy_dquot)(struct dquot *) ;
   int (*acquire_dquot)(struct dquot *) ;
   int (*release_dquot)(struct dquot *) ;
   int (*mark_dirty)(struct dquot *) ;
   int (*write_info)(struct super_block *, int ) ;
   qsize_t *(*get_reserved_space)(struct inode *) ;
   int (*get_projid)(struct inode *, kprojid_t *) ;
   int (*get_inode_usage)(struct inode *, qsize_t *) ;
   int (*get_next_id)(struct super_block *, struct kqid *) ;
};
#line 343  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_dqblk {
   int d_fieldmask ;
   u64 d_spc_hardlimit ;
   u64 d_spc_softlimit ;
   u64 d_ino_hardlimit ;
   u64 d_ino_softlimit ;
   u64 d_space ;
   u64 d_ino_count ;
   s64 d_ino_timer ;
   s64 d_spc_timer ;
   int d_ino_warns ;
   int d_spc_warns ;
   u64 d_rt_spc_hardlimit ;
   u64 d_rt_spc_softlimit ;
   u64 d_rt_space ;
   s64 d_rt_spc_timer ;
   int d_rt_spc_warns ;
};
#line 395  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_type_state {
   unsigned int flags ;
   unsigned int spc_timelimit ;
   unsigned int ino_timelimit ;
   unsigned int rt_spc_timelimit ;
   unsigned int spc_warnlimit ;
   unsigned int ino_warnlimit ;
   unsigned int rt_spc_warnlimit ;
   unsigned long long ino ;
   blkcnt_t blocks ;
   blkcnt_t nextents ;
};
#line 409  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_state {
   unsigned int s_incoredqs ;
   struct qc_type_state s_state[3U] ;
};
#line 415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_info {
   int i_fieldmask ;
   unsigned int i_flags ;
   unsigned int i_spc_timelimit ;
   unsigned int i_ino_timelimit ;
   unsigned int i_rt_spc_timelimit ;
   unsigned int i_spc_warnlimit ;
   unsigned int i_ino_warnlimit ;
   unsigned int i_rt_spc_warnlimit ;
};
#line 428  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quotactl_ops {
   int (*quota_on)(struct super_block *, int , int , struct path *) ;
   int (*quota_off)(struct super_block *, int ) ;
   int (*quota_enable)(struct super_block *, unsigned int ) ;
   int (*quota_disable)(struct super_block *, unsigned int ) ;
   int (*quota_sync)(struct super_block *, int ) ;
   int (*set_info)(struct super_block *, int , struct qc_info *) ;
   int (*get_dqblk)(struct super_block *, struct kqid , struct qc_dqblk *) ;
   int (*get_nextdqblk)(struct super_block *, struct kqid *, struct qc_dqblk *) ;
   int (*set_dqblk)(struct super_block *, struct kqid , struct qc_dqblk *) ;
   int (*get_state)(struct super_block *, struct qc_state *) ;
   int (*rm_xquota)(struct super_block *, unsigned int ) ;
};
#line 443  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_format_type {
   int qf_fmt_id ;
   struct quota_format_ops *qf_ops ;
   struct module *qf_owner ;
   struct quota_format_type *qf_next ;
};
#line 518  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_info {
   unsigned int flags ;
   struct rw_semaphore dqio_sem ;
   struct inode *files[3U] ;
   struct mem_dqinfo info[3U] ;
   struct quota_format_ops *ops[3U] ;
};
#line 538 
enum rw_hint {
    WRITE_LIFE_NOT_SET = 0,
    WRITE_LIFE_NONE = 1,
    WRITE_LIFE_SHORT = 2,
    WRITE_LIFE_MEDIUM = 3,
    WRITE_LIFE_LONG = 4,
    WRITE_LIFE_EXTREME = 5
};
#line 318  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct kiocb {
   struct file *ki_filp ;
   loff_t ki_pos ;
   void (*ki_complete)(struct kiocb *, long , long ) ;
   void *private ;
   int ki_flags ;
   u16 ki_hint ;
   u16 ki_ioprio ;
   unsigned int ki_cookie ;
};
#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_arg_423 {
   char *buf ;
   void *data ;
};
#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct __anonstruct_read_descriptor_t_422 {
   size_t written ;
   size_t count ;
   union __anonunion_arg_423 arg ;
   int error ;
};
#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
typedef struct __anonstruct_read_descriptor_t_422 read_descriptor_t;
#line 362  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct address_space_operations {
   int (*writepage)(struct page *, struct writeback_control *) ;
   int (*readpage)(struct file *, struct page *) ;
   int (*writepages)(struct address_space *, struct writeback_control *) ;
   int (*set_page_dirty)(struct page *) ;
   int (*readpages)(struct file *, struct address_space *, struct list_head *, unsigned int ) ;
   int (*write_begin)(struct file *, struct address_space *, loff_t , unsigned int , unsigned int , struct page **, void **) ;
   int (*write_end)(struct file *, struct address_space *, loff_t , unsigned int , unsigned int , struct page *, void *) ;
   sector_t (*bmap)(struct address_space *, sector_t ) ;
   void (*invalidatepage)(struct page *, unsigned int , unsigned int ) ;
   int (*releasepage)(struct page *, gfp_t ) ;
   void (*freepage)(struct page *) ;
   ssize_t (*direct_IO)(struct kiocb *, struct iov_iter *) ;
   int (*migratepage)(struct address_space *, struct page *, struct page *, enum migrate_mode ) ;
   bool (*isolate_page)(struct page *, isolate_mode_t ) ;
   void (*putback_page)(struct page *) ;
   int (*launder_page)(struct page *) ;
   int (*is_partially_uptodate)(struct page *, unsigned long , unsigned long ) ;
   void (*is_dirty_writeback)(struct page *, bool *, bool *) ;
   int (*error_remove_page)(struct address_space *, struct page *) ;
   int (*swap_activate)(struct swap_info_struct *, struct file *, sector_t *) ;
   void (*swap_deactivate)(struct file *) ;
};
#line 445  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct address_space {
   struct inode *host ;
   struct xarray i_pages ;
   gfp_t gfp_mask ;
   atomic_t i_mmap_writable ;
   atomic_t nr_thps ;
   struct rb_root_cached i_mmap ;
   struct rw_semaphore i_mmap_rwsem ;
   unsigned long nrpages ;
   unsigned long nrexceptional ;
   unsigned long writeback_index ;
   struct address_space_operations *a_ops ;
   unsigned long flags ;
   errseq_t wb_err ;
   spinlock_t private_lock ;
   struct list_head private_list ;
   void *private_data ;
} __attribute__((__designated_init__, __aligned__(8)));
#line 473 
struct hd_struct;
#line 473 
struct gendisk;
#line 473  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct block_device {
   dev_t bd_dev ;
   int bd_openers ;
   struct inode *bd_inode ;
   struct super_block *bd_super ;
   struct mutex bd_mutex ;
   void *bd_claiming ;
   void *bd_holder ;
   int bd_holders ;
   bool bd_write_holder ;
   struct list_head bd_holder_disks ;
   struct block_device *bd_contains ;
   unsigned int bd_block_size ;
   u8 bd_partno ;
   struct hd_struct *bd_part ;
   unsigned int bd_part_count ;
   int bd_invalidated ;
   struct gendisk *bd_disk ;
   struct request_queue *bd_queue ;
   struct backing_dev_info *bd_bdi ;
   struct list_head bd_list ;
   unsigned long bd_private ;
   int bd_fsfreeze_count ;
   struct mutex bd_fsfreeze_mutex ;
} __attribute__((__designated_init__));
#line 587 
struct posix_acl;
#line 614 
struct fsnotify_mark_connector;
#line 628 
struct inode_operations;
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_426 {
   unsigned int i_nlink ;
   unsigned int __i_nlink ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_427 {
   struct hlist_head i_dentry ;
   struct callback_head i_rcu ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_428 {
   struct file_operations *i_fop ;
   void (*free_inode)(struct inode *) ;
};
#line 628 
struct file_lock_context;
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_429 {
   struct pipe_inode_info *i_pipe ;
   struct block_device *i_bdev ;
   struct cdev *i_cdev ;
   char *i_link ;
   unsigned int i_dir_seq ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct inode {
   umode_t i_mode ;
   unsigned short i_opflags ;
   kuid_t i_uid ;
   kgid_t i_gid ;
   unsigned int i_flags ;
   struct posix_acl *i_acl ;
   struct posix_acl *i_default_acl ;
   struct inode_operations *i_op ;
   struct super_block *i_sb ;
   struct address_space *i_mapping ;
   void *i_security ;
   unsigned long i_ino ;
   union __anonunion_426 __anonCompField_inode_68 ;
   dev_t i_rdev ;
   loff_t i_size ;
   struct timespec64 i_atime ;
   struct timespec64 i_mtime ;
   struct timespec64 i_ctime ;
   spinlock_t i_lock ;
   unsigned short i_bytes ;
   u8 i_blkbits ;
   u8 i_write_hint ;
   blkcnt_t i_blocks ;
   unsigned long i_state ;
   struct rw_semaphore i_rwsem ;
   unsigned long dirtied_when ;
   unsigned long dirtied_time_when ;
   struct hlist_node i_hash ;
   struct list_head i_io_list ;
   struct bdi_writeback *i_wb ;
   int i_wb_frn_winner ;
   u16 i_wb_frn_avg_time ;
   u16 i_wb_frn_history ;
   struct list_head i_lru ;
   struct list_head i_sb_list ;
   struct list_head i_wb_list ;
   union __anonunion_427 __anonCompField_inode_69 ;
   atomic64_t i_version ;
   atomic_t i_count ;
   atomic_t i_dio_count ;
   atomic_t i_writecount ;
   atomic_t i_readcount ;
   union __anonunion_428 __anonCompField_inode_70 ;
   struct file_lock_context *i_flctx ;
   struct address_space i_data ;
   struct list_head i_devices ;
   union __anonunion_429 __anonCompField_inode_71 ;
   __u32 i_generation ;
   __u32 i_fsnotify_mask ;
   struct fsnotify_mark_connector *i_fsnotify_marks ;
   struct fscrypt_info *i_crypt_info ;
   struct fsverity_info *i_verity_info ;
   void *i_private ;
} __attribute__((__designated_init__));
#line 904  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fown_struct {
   rwlock_t lock ;
   struct pid *pid ;
   enum pid_type pid_type ;
   kuid_t uid ;
   kuid_t euid ;
   int signum ;
};
#line 915  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_ra_state {
   unsigned long start ;
   unsigned int size ;
   unsigned int async_size ;
   unsigned int ra_pages ;
   unsigned int mmap_miss ;
   loff_t prev_pos ;
};
#line 935  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_f_u_430 {
   struct llist_node fu_llist ;
   struct callback_head fu_rcuhead ;
};
#line 935  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file {
   union __anonunion_f_u_430 f_u ;
   struct path f_path ;
   struct inode *f_inode ;
   struct file_operations *f_op ;
   spinlock_t f_lock ;
   enum rw_hint f_write_hint ;
   atomic_long_t f_count ;
   unsigned int f_flags ;
   fmode_t f_mode ;
   struct mutex f_pos_lock ;
   loff_t f_pos ;
   struct fown_struct f_owner ;
   struct cred *f_cred ;
   struct file_ra_state f_ra ;
   u64 f_version ;
   void *f_security ;
   void *private_data ;
   struct list_head f_ep_links ;
   struct list_head f_tfile_llink ;
   struct address_space *f_mapping ;
   errseq_t f_wb_err ;
} __attribute__((__designated_init__, __aligned__(4)));
#line 988  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
typedef void *fl_owner_t;
#line 1026 
struct file_lock;
#line 1029  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock_operations {
   void (*fl_copy_lock)(struct file_lock *, struct file_lock *) ;
   void (*fl_release_private)(struct file_lock *) ;
};
#line 1034  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct lock_manager_operations {
   fl_owner_t (*lm_get_owner)(fl_owner_t ) ;
   void (*lm_put_owner)(fl_owner_t ) ;
   void (*lm_notify)(struct file_lock *) ;
   int (*lm_grant)(struct file_lock *, int ) ;
   bool (*lm_break)(struct file_lock *) ;
   int (*lm_change)(struct file_lock *, int , struct list_head *) ;
   void (*lm_setup)(struct file_lock *, void **) ;
};
#line 1052 
struct net;
#line 1058 
struct nlm_lockowner;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nfs_fs_i.h"
struct nfs_lock_info {
   u32 state ;
   struct nlm_lockowner *owner ;
   struct list_head list ;
};
#line 15 
struct nfs4_lock_state;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nfs_fs_i.h"
struct nfs4_lock_info {
   struct nfs4_lock_state *owner ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fasync_struct;
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct __anonstruct_afs_432 {
   struct list_head link ;
   int state ;
   unsigned int debug_id ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_fl_u_431 {
   struct nfs_lock_info nfs_fl ;
   struct nfs4_lock_info nfs4_fl ;
   struct __anonstruct_afs_432 afs ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock {
   struct file_lock *fl_blocker ;
   struct list_head fl_list ;
   struct hlist_node fl_link ;
   struct list_head fl_blocked_requests ;
   struct list_head fl_blocked_member ;
   fl_owner_t fl_owner ;
   unsigned int fl_flags ;
   unsigned char fl_type ;
   unsigned int fl_pid ;
   int fl_link_cpu ;
   wait_queue_head_t fl_wait ;
   struct file *fl_file ;
   loff_t fl_start ;
   loff_t fl_end ;
   struct fasync_struct *fl_fasync ;
   unsigned long fl_break_time ;
   unsigned long fl_downgrade_time ;
   struct file_lock_operations *fl_ops ;
   struct lock_manager_operations *fl_lmops ;
   union __anonunion_fl_u_431 fl_u ;
} __attribute__((__designated_init__));
#line 1117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock_context {
   spinlock_t flc_lock ;
   struct list_head flc_flock ;
   struct list_head flc_posix ;
   struct list_head flc_lease ;
};
#line 1331  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fasync_struct {
   rwlock_t fa_lock ;
   int magic ;
   int fa_fd ;
   struct fasync_struct *fa_next ;
   struct file *fa_file ;
   struct callback_head fa_rcu ;
};
#line 1418  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct sb_writers {
   int frozen ;
   wait_queue_head_t wait_unfrozen ;
   struct percpu_rw_semaphore rw_sem[3U] ;
};
#line 1424 
struct super_operations;
#line 1424 
struct xattr_handler;
#line 1424 
struct mtd_info;
#line 1424  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct super_block {
   struct list_head s_list ;
   dev_t s_dev ;
   unsigned char s_blocksize_bits ;
   unsigned long s_blocksize ;
   loff_t s_maxbytes ;
   struct file_system_type *s_type ;
   struct super_operations *s_op ;
   struct dquot_operations *dq_op ;
   struct quotactl_ops *s_qcop ;
   struct export_operations *s_export_op ;
   unsigned long s_flags ;
   unsigned long s_iflags ;
   unsigned long s_magic ;
   struct dentry *s_root ;
   struct rw_semaphore s_umount ;
   int s_count ;
   atomic_t s_active ;
   void *s_security ;
   struct xattr_handler **s_xattr ;
   struct fscrypt_operations *s_cop ;
   struct key *s_master_keys ;
   struct fsverity_operations *s_vop ;
   struct hlist_bl_head s_roots ;
   struct list_head s_mounts ;
   struct block_device *s_bdev ;
   struct backing_dev_info *s_bdi ;
   struct mtd_info *s_mtd ;
   struct hlist_node s_instances ;
   unsigned int s_quota_types ;
   struct quota_info s_dquot ;
   struct sb_writers s_writers ;
   void *s_fs_info ;
   u32 s_time_gran ;
   time64_t s_time_min ;
   time64_t s_time_max ;
   __u32 s_fsnotify_mask ;
   struct fsnotify_mark_connector *s_fsnotify_marks ;
   char s_id[32U] ;
   uuid_t s_uuid ;
   unsigned int s_max_links ;
   fmode_t s_mode ;
   struct mutex s_vfs_rename_mutex ;
   char *s_subtype ;
   struct dentry_operations *s_d_op ;
   int cleancache_poolid ;
   struct shrinker s_shrink ;
   atomic_long_t s_remove_count ;
   atomic_long_t s_fsnotify_inode_refs ;
   int s_readonly_remount ;
   struct workqueue_struct *s_dio_done_wq ;
   struct hlist_head s_pins ;
   struct user_namespace *s_user_ns ;
   struct list_lru s_dentry_lru ;
   struct list_lru s_inode_lru ;
   struct callback_head rcu ;
   struct work_struct destroy_work ;
   struct mutex s_sync_lock ;
   int s_stack_depth ;
   spinlock_t s_inode_list_lock ;
   struct list_head s_inodes ;
   spinlock_t s_inode_wblist_lock ;
   struct list_head s_inodes_wb ;
} __attribute__((__designated_init__));
#line 1746  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fiemap_extent_info {
   unsigned int fi_flags ;
   unsigned int fi_extents_mapped ;
   unsigned int fi_extents_max ;
   struct fiemap_extent *fi_extents_start ;
};
#line 1756 
struct dir_context;
#line 1767  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct dir_context {
   int (*actor)(struct dir_context *, char *, int , loff_t , u64 , unsigned int ) ;
   loff_t pos ;
};
#line 1771 
struct block_device_operations;
#line 1821  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_operations {
   struct module *owner ;
   loff_t (*llseek)(struct file *, loff_t , int ) ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*read_iter)(struct kiocb *, struct iov_iter *) ;
   ssize_t (*write_iter)(struct kiocb *, struct iov_iter *) ;
   int (*iopoll)(struct kiocb *, bool ) ;
   int (*iterate)(struct file *, struct dir_context *) ;
   int (*iterate_shared)(struct file *, struct dir_context *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*unlocked_ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl)(struct file *, unsigned int , unsigned long ) ;
   int (*mmap)(struct file *, struct vm_area_struct *) ;
   unsigned long mmap_supported_flags ;
   int (*open)(struct inode *, struct file *) ;
   int (*flush)(struct file *, fl_owner_t ) ;
   int (*release)(struct inode *, struct file *) ;
   int (*fsync)(struct file *, loff_t , loff_t , int ) ;
   int (*fasync)(int , struct file *, int ) ;
   int (*lock)(struct file *, int , struct file_lock *) ;
   ssize_t (*sendpage)(struct file *, struct page *, int , size_t , loff_t *, int ) ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   int (*check_flags)(int ) ;
   int (*flock)(struct file *, int , struct file_lock *) ;
   ssize_t (*splice_write)(struct pipe_inode_info *, struct file *, loff_t *, size_t , unsigned int ) ;
   ssize_t (*splice_read)(struct file *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ) ;
   int (*setlease)(struct file *, long , struct file_lock **, void **) ;
   long (*fallocate)(struct file *, int , loff_t , loff_t ) ;
   void (*show_fdinfo)(struct seq_file *, struct file *) ;
   ssize_t (*copy_file_range)(struct file *, loff_t , struct file *, loff_t , size_t , unsigned int ) ;
   loff_t (*remap_file_range)(struct file *, loff_t , struct file *, loff_t , loff_t , unsigned int ) ;
   int (*fadvise)(struct file *, loff_t , loff_t , int ) ;
} __attribute__((__designated_init__));
#line 1863  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct inode_operations {
   struct dentry *(*lookup)(struct inode *, struct dentry *, unsigned int ) ;
   char *(*get_link)(struct dentry *, struct inode *, struct delayed_call *) ;
   int (*permission)(struct inode *, int ) ;
   struct posix_acl *(*get_acl)(struct inode *, int ) ;
   int (*readlink)(struct dentry *, char *, int ) ;
   int (*create)(struct inode *, struct dentry *, umode_t , bool ) ;
   int (*link)(struct dentry *, struct inode *, struct dentry *) ;
   int (*unlink)(struct inode *, struct dentry *) ;
   int (*symlink)(struct inode *, struct dentry *, char *) ;
   int (*mkdir)(struct inode *, struct dentry *, umode_t ) ;
   int (*rmdir)(struct inode *, struct dentry *) ;
   int (*mknod)(struct inode *, struct dentry *, umode_t , dev_t ) ;
   int (*rename)(struct inode *, struct dentry *, struct inode *, struct dentry *, unsigned int ) ;
   int (*setattr)(struct dentry *, struct iattr *) ;
   int (*getattr)(struct path *, struct kstat *, u32 , unsigned int ) ;
   ssize_t (*listxattr)(struct dentry *, char *, size_t ) ;
   int (*fiemap)(struct inode *, struct fiemap_extent_info *, u64 , u64 ) ;
   int (*update_time)(struct inode *, struct timespec64 *, int ) ;
   int (*atomic_open)(struct inode *, struct dentry *, struct file *, unsigned int , umode_t ) ;
   int (*tmpfile)(struct inode *, struct dentry *, umode_t ) ;
   int (*set_acl)(struct inode *, struct posix_acl *, int ) ;
} __attribute__((__aligned__(64)));
#line 1942  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct super_operations {
   struct inode *(*alloc_inode)(struct super_block *) ;
   void (*destroy_inode)(struct inode *) ;
   void (*free_inode)(struct inode *) ;
   void (*dirty_inode)(struct inode *, int ) ;
   int (*write_inode)(struct inode *, struct writeback_control *) ;
   int (*drop_inode)(struct inode *) ;
   void (*evict_inode)(struct inode *) ;
   void (*put_super)(struct super_block *) ;
   int (*sync_fs)(struct super_block *, int ) ;
   int (*freeze_super)(struct super_block *) ;
   int (*freeze_fs)(struct super_block *) ;
   int (*thaw_super)(struct super_block *) ;
   int (*unfreeze_fs)(struct super_block *) ;
   int (*statfs)(struct dentry *, struct kstatfs *) ;
   int (*remount_fs)(struct super_block *, int *, char *) ;
   void (*umount_begin)(struct super_block *) ;
   int (*show_options)(struct seq_file *, struct dentry *) ;
   int (*show_devname)(struct seq_file *, struct dentry *) ;
   int (*show_path)(struct seq_file *, struct dentry *) ;
   int (*show_stats)(struct seq_file *, struct dentry *) ;
   ssize_t (*quota_read)(struct super_block *, int , char *, size_t , loff_t ) ;
   ssize_t (*quota_write)(struct super_block *, int , char *, size_t , loff_t ) ;
   struct dquot **(*get_dquots)(struct inode *) ;
   int (*bdev_try_to_free_page)(struct super_block *, struct page *, gfp_t ) ;
   long (*nr_cached_objects)(struct super_block *, struct shrink_control *) ;
   long (*free_cached_objects)(struct super_block *, struct shrink_control *) ;
};
#line 2217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_system_type {
   char *name ;
   int fs_flags ;
   int (*init_fs_context)(struct fs_context *) ;
   struct fs_parameter_description *parameters ;
   struct dentry *(*mount)(struct file_system_type *, int , char *, void *) ;
   void (*kill_sb)(struct super_block *) ;
   struct module *owner ;
   struct file_system_type *next ;
   struct hlist_head fs_supers ;
   struct lock_class_key s_lock_key ;
   struct lock_class_key s_umount_key ;
   struct lock_class_key s_vfs_rename_key ;
   struct lock_class_key s_writers_key[3U] ;
   struct lock_class_key i_lock_key ;
   struct lock_class_key i_mutex_key ;
   struct lock_class_key i_mutex_dir_key ;
};
#line 3599 
struct sock;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bvec.h"
struct bio_vec {
   struct page *bv_page ;
   unsigned int bv_len ;
   unsigned int bv_offset ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bvec.h"
struct bvec_iter {
   sector_t bi_sector ;
   unsigned int bi_size ;
   unsigned int bi_idx ;
   unsigned int bi_bvec_done ;
};
#line 201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/random.h"
enum ldv_8886 {
    SS_FREE = 0,
    SS_UNCONNECTED = 1,
    SS_CONNECTING = 2,
    SS_CONNECTED = 3,
    SS_DISCONNECTING = 4
};
#line 209  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/random.h"
typedef enum ldv_8886 socket_state;
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct socket_wq {
   wait_queue_head_t wait ;
   struct fasync_struct *fasync_list ;
   unsigned long flags ;
   struct callback_head rcu ;
} __attribute__((__aligned__(64)));
#line 112 
struct proto_ops;
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct socket {
   socket_state state ;
   short type ;
   unsigned long flags ;
   struct file *file ;
   struct sock *sk ;
   struct proto_ops *ops ;
   struct socket_wq wq ;
};
#line 125 
struct sk_buff;
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct proto_ops {
   int family ;
   struct module *owner ;
   int (*release)(struct socket *) ;
   int (*bind)(struct socket *, struct sockaddr *, int ) ;
   int (*connect)(struct socket *, struct sockaddr *, int , int ) ;
   int (*socketpair)(struct socket *, struct socket *) ;
   int (*accept)(struct socket *, struct socket *, int , bool ) ;
   int (*getname)(struct socket *, struct sockaddr *, int ) ;
   __poll_t (*poll)(struct file *, struct socket *, struct poll_table_struct *) ;
   int (*ioctl)(struct socket *, unsigned int , unsigned long ) ;
   int (*compat_ioctl)(struct socket *, unsigned int , unsigned long ) ;
   int (*gettstamp)(struct socket *, void *, bool , bool ) ;
   int (*listen)(struct socket *, int ) ;
   int (*shutdown)(struct socket *, int ) ;
   int (*setsockopt)(struct socket *, int , int , char *, unsigned int ) ;
   int (*getsockopt)(struct socket *, int , int , char *, int *) ;
   int (*compat_setsockopt)(struct socket *, int , int , char *, unsigned int ) ;
   int (*compat_getsockopt)(struct socket *, int , int , char *, int *) ;
   int (*sendmsg)(struct socket *, struct msghdr *, size_t ) ;
   int (*recvmsg)(struct socket *, struct msghdr *, size_t , int ) ;
   int (*mmap)(struct file *, struct socket *, struct vm_area_struct *) ;
   ssize_t (*sendpage)(struct socket *, struct page *, int , size_t , int ) ;
   ssize_t (*splice_read)(struct socket *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ) ;
   int (*set_peek_off)(struct sock *, int ) ;
   int (*peek_len)(struct socket *) ;
   int (*read_sock)(struct sock *, read_descriptor_t *, int (*)(read_descriptor_t *, struct sk_buff *, unsigned int , size_t )) ;
   int (*sendpage_locked)(struct sock *, struct page *, int , size_t , int ) ;
   int (*sendmsg_locked)(struct sock *, struct msghdr *, size_t ) ;
   int (*set_rcvlowat)(struct sock *, int ) ;
};
#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/checksum_64.h"
struct in6_addr;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/idr.h"
struct idr {
   struct xarray idr_rt ;
   unsigned int idr_base ;
   unsigned int idr_next ;
};
#line 323 
struct kernfs_open_node;
#line 324 
struct kernfs_iattrs;
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_root;
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_dir {
   unsigned long subdirs ;
   struct rb_root children ;
   struct kernfs_root *root ;
};
#line 96 
struct kernfs_node;
#line 96  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_symlink {
   struct kernfs_node *target_kn ;
};
#line 100 
struct kernfs_ops;
#line 100  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_attr {
   struct kernfs_ops *ops ;
   struct kernfs_open_node *open ;
   loff_t size ;
   struct kernfs_node *notify_next ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
union __anonunion_463 {
   struct kernfs_elem_dir dir ;
   struct kernfs_elem_symlink symlink ;
   struct kernfs_elem_attr attr ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_node {
   atomic_t count ;
   atomic_t active ;
   struct lockdep_map dep_map ;
   struct kernfs_node *parent ;
   char *name ;
   struct rb_node rb ;
   void *ns ;
   unsigned int hash ;
   union __anonunion_463 __anonCompField_kernfs_node_72 ;
   void *priv ;
   u64 id ;
   unsigned short flags ;
   umode_t mode ;
   struct kernfs_iattrs *iattr ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_syscall_ops {
   int (*show_options)(struct seq_file *, struct kernfs_root *) ;
   int (*mkdir)(struct kernfs_node *, char *, umode_t ) ;
   int (*rmdir)(struct kernfs_node *) ;
   int (*rename)(struct kernfs_node *, struct kernfs_node *, char *) ;
   int (*show_path)(struct seq_file *, struct kernfs_node *, struct kernfs_root *) ;
};
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_root {
   struct kernfs_node *kn ;
   unsigned int flags ;
   struct idr ino_idr ;
   u32 last_id_lowbits ;
   u32 id_highbits ;
   struct kernfs_syscall_ops *syscall_ops ;
   struct list_head supers ;
   wait_queue_head_t deactivate_waitq ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_open_file {
   struct kernfs_node *kn ;
   struct file *file ;
   struct seq_file *seq_file ;
   void *priv ;
   struct mutex mutex ;
   struct mutex prealloc_mutex ;
   int event ;
   struct list_head list ;
   char *prealloc_buf ;
   size_t atomic_write_len ;
   bool mmapped : 1 ;
   bool released : 1 ;
   struct vm_operations_struct *vm_ops ;
};
#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_ops {
   int (*open)(struct kernfs_open_file *) ;
   void (*release)(struct kernfs_open_file *) ;
   int (*seq_show)(struct seq_file *, void *) ;
   void *(*seq_start)(struct seq_file *, loff_t *) ;
   void *(*seq_next)(struct seq_file *, void *, loff_t *) ;
   void (*seq_stop)(struct seq_file *, void *) ;
   ssize_t (*read)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   size_t atomic_write_len ;
   bool prealloc ;
   ssize_t (*write)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   __poll_t (*poll)(struct kernfs_open_file *, struct poll_table_struct *) ;
   int (*mmap)(struct kernfs_open_file *, struct vm_area_struct *) ;
   struct lock_class_key lockdep_key ;
};
#line 595 
enum kobj_ns_type {
    KOBJ_NS_TYPE_NONE = 0,
    KOBJ_NS_TYPE_NET = 1,
    KOBJ_NS_TYPES = 2
};
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject_ns.h"
struct kobj_ns_type_operations {
   enum kobj_ns_type type ;
   bool (*current_may_mount)(void) ;
   void *(*grab_current_ns)(void) ;
   void *(*netlink_ns)(struct sock *) ;
   void *(*initial_ns)(void) ;
   void (*drop_ns)(void *) ;
};
#line 58 
struct bin_attribute;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct attribute {
   char *name ;
   umode_t mode ;
   bool ignore_lockdep : 1 ;
   struct lock_class_key *key ;
   struct lock_class_key skey ;
};
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct attribute_group {
   char *name ;
   umode_t (*is_visible)(struct kobject *, struct attribute *, int ) ;
   umode_t (*is_bin_visible)(struct kobject *, struct bin_attribute *, int ) ;
   struct attribute **attrs ;
   struct bin_attribute **bin_attrs ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct bin_attribute {
   struct attribute attr ;
   size_t size ;
   void *private ;
   ssize_t (*read)(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t , size_t ) ;
   ssize_t (*write)(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t , size_t ) ;
   int (*mmap)(struct file *, struct kobject *, struct bin_attribute *, struct vm_area_struct *) ;
};
#line 223  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct sysfs_ops {
   ssize_t (*show)(struct kobject *, struct attribute *, char *) ;
   ssize_t (*store)(struct kobject *, struct attribute *, char *, size_t ) ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kref.h"
struct kref {
   refcount_t refcount ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset;
#line 65 
struct kobj_type;
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobject {
   char *name ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct kernfs_node *sd ;
   struct kref kref ;
   struct delayed_work release ;
   unsigned int state_initialized : 1 ;
   unsigned int state_in_sysfs : 1 ;
   unsigned int state_add_uevent_sent : 1 ;
   unsigned int state_remove_uevent_sent : 1 ;
   unsigned int uevent_suppress : 1 ;
};
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobj_type {
   void (*release)(struct kobject *) ;
   struct sysfs_ops *sysfs_ops ;
   struct attribute **default_attrs ;
   struct attribute_group **default_groups ;
   struct kobj_ns_type_operations *(*child_ns_type)(struct kobject *) ;
   void *(*namespace)(struct kobject *) ;
   void (*get_ownership)(struct kobject *, kuid_t *, kgid_t *) ;
};
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobj_uevent_env {
   char *argv[3U] ;
   char *envp[32U] ;
   int envp_idx ;
   char buf[2048U] ;
   int buflen ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset_uevent_ops {
   int (*filter)(struct kset *, struct kobject *) ;
   char *(*name)(struct kset *, struct kobject *) ;
   int (*uevent)(struct kset *, struct kobject *, struct kobj_uevent_env *) ;
};
#line 193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops *uevent_ops ;
} __attribute__((__designated_init__));
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct pm_message {
   int event ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
typedef struct pm_message pm_message_t;
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_ops {
   int (*prepare)(struct device *) ;
   void (*complete)(struct device *) ;
   int (*suspend)(struct device *) ;
   int (*resume)(struct device *) ;
   int (*freeze)(struct device *) ;
   int (*thaw)(struct device *) ;
   int (*poweroff)(struct device *) ;
   int (*restore)(struct device *) ;
   int (*suspend_late)(struct device *) ;
   int (*resume_early)(struct device *) ;
   int (*freeze_late)(struct device *) ;
   int (*thaw_early)(struct device *) ;
   int (*poweroff_late)(struct device *) ;
   int (*restore_early)(struct device *) ;
   int (*suspend_noirq)(struct device *) ;
   int (*resume_noirq)(struct device *) ;
   int (*freeze_noirq)(struct device *) ;
   int (*thaw_noirq)(struct device *) ;
   int (*poweroff_noirq)(struct device *) ;
   int (*restore_noirq)(struct device *) ;
   int (*runtime_suspend)(struct device *) ;
   int (*runtime_resume)(struct device *) ;
   int (*runtime_idle)(struct device *) ;
};
#line 303 
enum rpm_status {
    RPM_ACTIVE = 0,
    RPM_RESUMING = 1,
    RPM_SUSPENDED = 2,
    RPM_SUSPENDING = 3
};
#line 310 
enum rpm_request {
    RPM_REQ_NONE = 0,
    RPM_REQ_IDLE = 1,
    RPM_REQ_SUSPEND = 2,
    RPM_REQ_AUTOSUSPEND = 3,
    RPM_REQ_RESUME = 4
};
#line 318 
struct wakeup_source;
#line 319 
struct wake_irq;
#line 320 
struct pm_domain_data;
#line 530  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct pm_subsys_data {
   spinlock_t lock ;
   unsigned int refcount ;
   struct list_head clock_list ;
   struct pm_domain_data *domain_data ;
};
#line 573 
struct dev_pm_qos;
#line 573  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned int can_wakeup : 1 ;
   unsigned int async_suspend : 1 ;
   bool in_dpm_list : 1 ;
   bool is_prepared : 1 ;
   bool is_suspended : 1 ;
   bool is_noirq_suspended : 1 ;
   bool is_late_suspended : 1 ;
   bool no_pm : 1 ;
   bool early_init : 1 ;
   bool direct_complete : 1 ;
   u32 driver_flags ;
   spinlock_t lock ;
   struct list_head entry ;
   struct completion completion ;
   struct wakeup_source *wakeup ;
   bool wakeup_path : 1 ;
   bool syscore : 1 ;
   bool no_pm_callbacks : 1 ;
   unsigned int must_resume : 1 ;
   unsigned int may_skip_resume : 1 ;
   struct hrtimer suspend_timer ;
   unsigned long timer_expires ;
   struct work_struct work ;
   wait_queue_head_t wait_queue ;
   struct wake_irq *wakeirq ;
   atomic_t usage_count ;
   atomic_t child_count ;
   unsigned int disable_depth : 3 ;
   unsigned int idle_notification : 1 ;
   unsigned int request_pending : 1 ;
   unsigned int deferred_resume : 1 ;
   unsigned int runtime_auto : 1 ;
   bool ignore_children : 1 ;
   unsigned int no_callbacks : 1 ;
   unsigned int irq_safe : 1 ;
   unsigned int use_autosuspend : 1 ;
   unsigned int timer_autosuspends : 1 ;
   unsigned int memalloc_noio : 1 ;
   unsigned int links_count ;
   enum rpm_request request ;
   enum rpm_status runtime_status ;
   int runtime_error ;
   int autosuspend_delay ;
   u64 last_busy ;
   u64 active_time ;
   u64 suspended_time ;
   u64 accounting_timestamp ;
   struct pm_subsys_data *subsys_data ;
   void (*set_latency_tolerance)(struct device *, s32 ) ;
   struct dev_pm_qos *qos ;
};
#line 650  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_domain {
   struct dev_pm_ops ops ;
   int (*start)(struct device *) ;
   void (*detach)(struct device *, bool ) ;
   int (*activate)(struct device *) ;
   void (*sync)(struct device *) ;
   void (*dismiss)(struct device *) ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ratelimit.h"
struct ratelimit_state {
   raw_spinlock_t lock ;
   int interval ;
   int burst ;
   int printed ;
   int missed ;
   unsigned long begin ;
   unsigned long flags ;
};
#line 5  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/device.h"
struct dev_archdata {
   void *iommu ;
};
#line 12 
struct dma_map_ops;
#line 23 
struct device_driver;
#line 24 
struct driver_private;
#line 25 
struct class;
#line 26 
struct subsys_private;
#line 27 
struct bus_type;
#line 28 
struct iommu_ops;
#line 29 
struct iommu_group;
#line 30 
struct iommu_fwspec;
#line 31 
struct dev_pin_info;
#line 32 
struct iommu_param;
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct bus_type {
   char *name ;
   char *dev_name ;
   struct device *dev_root ;
   struct attribute_group **bus_groups ;
   struct attribute_group **dev_groups ;
   struct attribute_group **drv_groups ;
   int (*match)(struct device *, struct device_driver *) ;
   int (*uevent)(struct device *, struct kobj_uevent_env *) ;
   int (*probe)(struct device *) ;
   void (*sync_state)(struct device *) ;
   int (*remove)(struct device *) ;
   void (*shutdown)(struct device *) ;
   int (*online)(struct device *) ;
   int (*offline)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   int (*num_vf)(struct device *) ;
   int (*dma_configure)(struct device *) ;
   struct dev_pm_ops *pm ;
   struct iommu_ops *iommu_ops ;
   struct subsys_private *p ;
   struct lock_class_key lock_key ;
   bool need_parent_lock ;
};
#line 164 
struct device_type;
#line 309 
enum probe_type {
    PROBE_DEFAULT_STRATEGY = 0,
    PROBE_PREFER_ASYNCHRONOUS = 1,
    PROBE_FORCE_SYNCHRONOUS = 2
};
#line 383 
struct of_device_id;
#line 383 
struct acpi_device_id;
#line 383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_driver {
   char *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char *mod_name ;
   bool suppress_bind_attrs ;
   enum probe_type probe_type ;
   struct of_device_id *of_match_table ;
   struct acpi_device_id *acpi_match_table ;
   int (*probe)(struct device *) ;
   void (*sync_state)(struct device *) ;
   int (*remove)(struct device *) ;
   void (*shutdown)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   struct attribute_group **groups ;
   struct attribute_group **dev_groups ;
   struct dev_pm_ops *pm ;
   void (*coredump)(struct device *) ;
   struct driver_private *p ;
};
#line 589  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct class {
   char *name ;
   struct module *owner ;
   struct attribute_group **class_groups ;
   struct attribute_group **dev_groups ;
   struct kobject *dev_kobj ;
   int (*dev_uevent)(struct device *, struct kobj_uevent_env *) ;
   char *(*devnode)(struct device *, umode_t *) ;
   void (*class_release)(struct class *) ;
   void (*dev_release)(struct device *) ;
   int (*shutdown_pre)(struct device *) ;
   struct kobj_ns_type_operations *ns_type ;
   void *(*namespace)(struct device *) ;
   void (*get_ownership)(struct device *, kuid_t *, kgid_t *) ;
   struct dev_pm_ops *pm ;
   struct subsys_private *p ;
};
#line 809  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_type {
   char *name ;
   struct attribute_group **groups ;
   int (*uevent)(struct device *, struct kobj_uevent_env *) ;
   char *(*devnode)(struct device *, umode_t *, kuid_t *, kgid_t *) ;
   void (*release)(struct device *) ;
   struct dev_pm_ops *pm ;
};
#line 1008  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};
#line 1139 
enum dl_dev_state {
    DL_DEV_NO_DRIVER = 0,
    DL_DEV_PROBING = 1,
    DL_DEV_DRIVER_BOUND = 2,
    DL_DEV_UNBINDING = 3
};
#line 1164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct dev_links_info {
   struct list_head suppliers ;
   struct list_head consumers ;
   struct list_head needs_suppliers ;
   struct list_head defer_sync ;
   bool need_for_probe ;
   enum dl_dev_state status ;
};
#line 1259 
struct irq_domain;
#line 1259 
struct dma_coherent_mem;
#line 1259 
struct cma;
#line 1259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device {
   struct kobject kobj ;
   struct device *parent ;
   struct device_private *p ;
   char *init_name ;
   struct device_type *type ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *platform_data ;
   void *driver_data ;
   struct mutex lockdep_mutex ;
   struct mutex mutex ;
   struct dev_links_info links ;
   struct dev_pm_info power ;
   struct dev_pm_domain *pm_domain ;
   struct irq_domain *msi_domain ;
   struct dev_pin_info *pins ;
   struct list_head msi_list ;
   struct dma_map_ops *dma_ops ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   u64 bus_dma_limit ;
   unsigned long dma_pfn_offset ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct cma *cma_area ;
   struct dev_archdata archdata ;
   struct device_node *of_node ;
   struct fwnode_handle *fwnode ;
   int numa_node ;
   dev_t devt ;
   u32 id ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct class *class ;
   struct attribute_group **groups ;
   void (*release)(struct device *) ;
   struct iommu_group *iommu_group ;
   struct iommu_fwspec *iommu_fwspec ;
   struct iommu_param *iommu_param ;
   bool offline_disabled : 1 ;
   bool offline : 1 ;
   bool of_node_reused : 1 ;
   bool state_synced : 1 ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_wakeup.h"
struct wakeup_source {
   char *name ;
   int id ;
   struct list_head entry ;
   spinlock_t lock ;
   struct wake_irq *wakeirq ;
   struct timer_list timer ;
   unsigned long timer_expires ;
   ktime_t total_time ;
   ktime_t max_time ;
   ktime_t last_time ;
   ktime_t start_prevent_time ;
   ktime_t prevent_sleep_time ;
   unsigned long event_count ;
   unsigned long active_count ;
   unsigned long relax_count ;
   unsigned long expire_count ;
   unsigned long wakeup_count ;
   struct device *dev ;
   bool active : 1 ;
   bool autosleep_enabled : 1 ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-debug.h"
enum dma_data_direction {
    DMA_BIDIRECTIONAL = 0,
    DMA_TO_DEVICE = 1,
    DMA_FROM_DEVICE = 2,
    DMA_NONE = 3
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/scatterlist.h"
struct scatterlist {
   unsigned long page_link ;
   unsigned int offset ;
   unsigned int length ;
   dma_addr_t dma_address ;
   unsigned int dma_length ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/scatterlist.h"
struct sg_table {
   struct scatterlist *sgl ;
   unsigned int nents ;
   unsigned int orig_nents ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
struct dma_map_ops {
   void *(*alloc)(struct device *, size_t , dma_addr_t *, gfp_t , unsigned long ) ;
   void (*free)(struct device *, size_t , void *, dma_addr_t , unsigned long ) ;
   int (*mmap)(struct device *, struct vm_area_struct *, void *, dma_addr_t , size_t , unsigned long ) ;
   int (*get_sgtable)(struct device *, struct sg_table *, void *, dma_addr_t , size_t , unsigned long ) ;
   dma_addr_t (*map_page)(struct device *, struct page *, unsigned long , size_t , enum dma_data_direction , unsigned long ) ;
   void (*unmap_page)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   int (*map_sg)(struct device *, struct scatterlist *, int , enum dma_data_direction , unsigned long ) ;
   void (*unmap_sg)(struct device *, struct scatterlist *, int , enum dma_data_direction , unsigned long ) ;
   dma_addr_t (*map_resource)(struct device *, phys_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   void (*unmap_resource)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   void (*sync_single_for_cpu)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) ;
   void (*sync_single_for_device)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) ;
   void (*sync_sg_for_cpu)(struct device *, struct scatterlist *, int , enum dma_data_direction ) ;
   void (*sync_sg_for_device)(struct device *, struct scatterlist *, int , enum dma_data_direction ) ;
   void (*cache_sync)(struct device *, void *, size_t , enum dma_data_direction ) ;
   int (*dma_supported)(struct device *, u64 ) ;
   u64 (*get_required_mask)(struct device *) ;
   size_t (*max_mapping_size)(struct device *) ;
   unsigned long (*get_merge_boundary)(struct device *) ;
};
#line 803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
typedef u64 netdev_features_t;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/in6.h"
union __anonunion_in6_u_466 {
   __u8 u6_addr8[16U] ;
   __be16 u6_addr16[8U] ;
   __be32 u6_addr32[4U] ;
};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/in6.h"
struct in6_addr {
   union __anonunion_in6_u_466 in6_u ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/in6.h"
struct __anonstruct_siphash_key_t_467 {
   u64 key[2U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/in6.h"
typedef struct __anonstruct_siphash_key_t_467 siphash_key_t;
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_ether.h"
struct ethhdr {
   unsigned char h_dest[6U] ;
   unsigned char h_source[6U] ;
   __be16 h_proto ;
} __attribute__((__packed__));
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
struct flow_dissector_key_control {
   u16 thoff ;
   u16 addr_type ;
   u32 flags ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
struct flow_dissector_key_basic {
   __be16 n_proto ;
   u8 ip_proto ;
   u8 padding ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
struct flow_dissector_key_tags {
   u32 flow_label ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
struct __anonstruct_470 {
   u16 vlan_id : 12 ;
   u16 vlan_dei : 1 ;
   u16 vlan_priority : 3 ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
union __anonunion_469 {
   struct __anonstruct_470 __anonCompField___anonunion_469_73 ;
   __be16 vlan_tci ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
struct flow_dissector_key_vlan {
   union __anonunion_469 __anonCompField_flow_dissector_key_vlan_74 ;
   __be16 vlan_tpid ;
};
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
struct flow_dissector_key_keyid {
   __be32 keyid ;
};
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
struct flow_dissector_key_ipv4_addrs {
   __be32 src ;
   __be32 dst ;
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
struct flow_dissector_key_ipv6_addrs {
   struct in6_addr src ;
   struct in6_addr dst ;
};
#line 114  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
struct flow_dissector_key_tipc {
   __be32 key ;
};
#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
union __anonunion_471 {
   struct flow_dissector_key_ipv4_addrs v4addrs ;
   struct flow_dissector_key_ipv6_addrs v6addrs ;
   struct flow_dissector_key_tipc tipckey ;
};
#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
struct flow_dissector_key_addrs {
   union __anonunion_471 __anonCompField_flow_dissector_key_addrs_75 ;
};
#line 155  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
struct __anonstruct_473 {
   __be16 src ;
   __be16 dst ;
};
#line 155  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
union __anonunion_472 {
   __be32 ports ;
   struct __anonstruct_473 __anonCompField___anonunion_472_76 ;
};
#line 155  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
struct flow_dissector_key_ports {
   union __anonunion_472 __anonCompField_flow_dissector_key_ports_77 ;
};
#line 171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
struct __anonstruct_474 {
   u8 type ;
   u8 code ;
};
#line 171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
struct flow_dissector_key_icmp {
   struct __anonstruct_474 __anonCompField_flow_dissector_key_icmp_78 ;
   u16 id ;
};
#line 274  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
struct flow_dissector {
   unsigned int used_keys ;
   unsigned short offset[27U] ;
};
#line 284  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
struct flow_keys {
   struct flow_dissector_key_control control ;
   struct flow_dissector_key_basic basic ;
   struct flow_dissector_key_tags tags ;
   struct flow_dissector_key_vlan vlan ;
   struct flow_dissector_key_vlan cvlan ;
   struct flow_dissector_key_keyid keyid ;
   struct flow_dissector_key_ports ports ;
   struct flow_dissector_key_icmp icmp ;
   struct flow_dissector_key_addrs addrs ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buf_operations;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buffer {
   struct page *page ;
   unsigned int offset ;
   unsigned int len ;
   struct pipe_buf_operations *ops ;
   unsigned int flags ;
   unsigned long private ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_inode_info {
   struct mutex mutex ;
   wait_queue_head_t wait ;
   unsigned int head ;
   unsigned int tail ;
   unsigned int max_usage ;
   unsigned int ring_size ;
   unsigned int readers ;
   unsigned int writers ;
   unsigned int files ;
   unsigned int r_counter ;
   unsigned int w_counter ;
   struct page *tmp_page ;
   struct fasync_struct *fasync_readers ;
   struct fasync_struct *fasync_writers ;
   struct pipe_buffer *bufs ;
   struct user_struct *user ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buf_operations {
   int (*confirm)(struct pipe_inode_info *, struct pipe_buffer *) ;
   void (*release)(struct pipe_inode_info *, struct pipe_buffer *) ;
   int (*steal)(struct pipe_inode_info *, struct pipe_buffer *) ;
   bool (*get)(struct pipe_inode_info *, struct pipe_buffer *) ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi_tunnel {
   __be64 tun_id ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi_common {
   int flowic_oif ;
   int flowic_iif ;
   __u32 flowic_mark ;
   __u8 flowic_tos ;
   __u8 flowic_scope ;
   __u8 flowic_proto ;
   __u8 flowic_flags ;
   __u32 flowic_secid ;
   kuid_t flowic_uid ;
   struct flowi_tunnel flowic_tun_key ;
   __u32 flowic_multipath_hash ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_ports_478 {
   __be16 dport ;
   __be16 sport ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_icmpt_479 {
   __u8 type ;
   __u8 code ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_dnports_480 {
   __le16 dport ;
   __le16 sport ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_mht_481 {
   __u8 type ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
union flowi_uli {
   struct __anonstruct_ports_478 ports ;
   struct __anonstruct_icmpt_479 icmpt ;
   struct __anonstruct_dnports_480 dnports ;
   __be32 spi ;
   __be32 gre_key ;
   struct __anonstruct_mht_481 mht ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi4 {
   struct flowi_common __fl_common ;
   __be32 saddr ;
   __be32 daddr ;
   union flowi_uli uli ;
} __attribute__((__aligned__(8)));
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi6 {
   struct flowi_common __fl_common ;
   struct in6_addr daddr ;
   struct in6_addr saddr ;
   __be32 flowlabel ;
   union flowi_uli uli ;
   __u32 mp_hash ;
} __attribute__((__aligned__(8)));
#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowidn {
   struct flowi_common __fl_common ;
   __le16 daddr ;
   __le16 saddr ;
   union flowi_uli uli ;
} __attribute__((__aligned__(8)));
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
union __anonunion_u_482 {
   struct flowi_common __fl_common ;
   struct flowi4 ip4 ;
   struct flowi6 ip6 ;
   struct flowidn dn ;
};
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi {
   union __anonunion_u_482 u ;
} __attribute__((__aligned__(8)));
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netfilter/nf_conntrack_common.h"
struct ip_conntrack_stat {
   unsigned int found ;
   unsigned int invalid ;
   unsigned int ignore ;
   unsigned int insert ;
   unsigned int insert_failed ;
   unsigned int drop ;
   unsigned int early_drop ;
   unsigned int error ;
   unsigned int expect_new ;
   unsigned int expect_create ;
   unsigned int expect_delete ;
   unsigned int search_restart ;
};
#line 41 
struct napi_struct;
#line 42 
struct bpf_prog;
#line 43 
union bpf_attr;
#line 44 
struct skb_ext;
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct sk_buff_head {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   __u32 qlen ;
   spinlock_t lock ;
};
#line 313  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
typedef struct bio_vec skb_frag_t;
#line 416  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct skb_shared_hwtstamps {
   ktime_t hwtstamp ;
};
#line 510  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct skb_shared_info {
   __u8 __unused ;
   __u8 meta_len ;
   __u8 nr_frags ;
   __u8 tx_flags ;
   unsigned short gso_size ;
   unsigned short gso_segs ;
   struct sk_buff *frag_list ;
   struct skb_shared_hwtstamps hwtstamps ;
   unsigned int gso_type ;
   u32 tskey ;
   atomic_t dataref ;
   void *destructor_arg ;
   skb_frag_t frags[17U] ;
};
#line 562  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
typedef unsigned int sk_buff_data_t;
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_489 {
   struct net_device *dev ;
   unsigned long dev_scratch ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_488 {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   union __anonunion_489 __anonCompField___anonstruct_488_85 ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_487 {
   struct __anonstruct_488 __anonCompField___anonunion_487_86 ;
   struct rb_node rbnode ;
   struct list_head list ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_490 {
   struct sock *sk ;
   int ip_defrag_offset ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_491 {
   ktime_t tstamp ;
   u64 skb_mstamp_ns ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_493 {
   unsigned long _skb_refdst ;
   void (*destructor)(struct sk_buff *) ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_492 {
   struct __anonstruct_493 __anonCompField___anonunion_492_90 ;
   struct list_head tcp_tsorted_anchor ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_495 {
   __u16 csum_start ;
   __u16 csum_offset ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_494 {
   __wsum csum ;
   struct __anonstruct_495 __anonCompField___anonunion_494_92 ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_496 {
   unsigned int napi_id ;
   unsigned int sender_cpu ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_497 {
   __u32 mark ;
   __u32 reserved_tailroom ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_498 {
   __be16 inner_protocol ;
   __u8 inner_ipproto ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct sk_buff {
   union __anonunion_487 __anonCompField_sk_buff_87 ;
   union __anonunion_490 __anonCompField_sk_buff_88 ;
   union __anonunion_491 __anonCompField_sk_buff_89 ;
   char cb[48U] ;
   union __anonunion_492 __anonCompField_sk_buff_91 ;
   unsigned long _nfct ;
   unsigned int len ;
   unsigned int data_len ;
   __u16 mac_len ;
   __u16 hdr_len ;
   __u16 queue_mapping ;
   __u8 __cloned_offset[0U] ;
   __u8 cloned : 1 ;
   __u8 nohdr : 1 ;
   __u8 fclone : 2 ;
   __u8 peeked : 1 ;
   __u8 head_frag : 1 ;
   __u8 pfmemalloc : 1 ;
   __u8 active_extensions ;
   __u32 headers_start[0U] ;
   __u8 __pkt_type_offset[0U] ;
   __u8 pkt_type : 3 ;
   __u8 ignore_df : 1 ;
   __u8 nf_trace : 1 ;
   __u8 ip_summed : 2 ;
   __u8 ooo_okay : 1 ;
   __u8 l4_hash : 1 ;
   __u8 sw_hash : 1 ;
   __u8 wifi_acked_valid : 1 ;
   __u8 wifi_acked : 1 ;
   __u8 no_fcs : 1 ;
   __u8 encapsulation : 1 ;
   __u8 encap_hdr_csum : 1 ;
   __u8 csum_valid : 1 ;
   __u8 __pkt_vlan_present_offset[0U] ;
   __u8 vlan_present : 1 ;
   __u8 csum_complete_sw : 1 ;
   __u8 csum_level : 2 ;
   __u8 csum_not_inet : 1 ;
   __u8 dst_pending_confirm : 1 ;
   __u8 ndisc_nodetype : 2 ;
   __u8 ipvs_property : 1 ;
   __u8 inner_protocol_type : 1 ;
   __u8 remcsum_offload : 1 ;
   __u8 offload_fwd_mark : 1 ;
   __u8 offload_l3_fwd_mark : 1 ;
   __u8 tc_skip_classify : 1 ;
   __u8 tc_at_ingress : 1 ;
   __u8 tc_redirected : 1 ;
   __u8 tc_from_ingress : 1 ;
   __u8 decrypted : 1 ;
   __u16 tc_index ;
   union __anonunion_494 __anonCompField_sk_buff_93 ;
   __u32 priority ;
   int skb_iif ;
   __u32 hash ;
   __be16 vlan_proto ;
   __u16 vlan_tci ;
   union __anonunion_496 __anonCompField_sk_buff_94 ;
   __u32 secmark ;
   union __anonunion_497 __anonCompField_sk_buff_95 ;
   union __anonunion_498 __anonCompField_sk_buff_96 ;
   __u16 inner_transport_header ;
   __u16 inner_network_header ;
   __u16 inner_mac_header ;
   __be16 protocol ;
   __u16 transport_header ;
   __u16 network_header ;
   __u16 mac_header ;
   __u32 headers_end[0U] ;
   sk_buff_data_t tail ;
   sk_buff_data_t end ;
   unsigned char *head ;
   unsigned char *data ;
   unsigned int truesize ;
   refcount_t users ;
   struct skb_ext *extensions ;
};
#line 920 
struct dst_entry;
#line 1165 
enum pkt_hash_types {
    PKT_HASH_TYPE_NONE = 0,
    PKT_HASH_TYPE_L2 = 1,
    PKT_HASH_TYPE_L3 = 2,
    PKT_HASH_TYPE_L4 = 3
};
#line 4108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct skb_ext {
   refcount_t refcnt ;
   u8 offset[3U] ;
   u8 chunks ;
   char data[0U] ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ipv6.h"
struct ipv6_stable_secret {
   bool initialized ;
   struct in6_addr secret ;
};
#line 12 
struct ctl_table_header;
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ipv6.h"
struct ipv6_devconf {
   __s32 forwarding ;
   __s32 hop_limit ;
   __s32 mtu6 ;
   __s32 accept_ra ;
   __s32 accept_redirects ;
   __s32 autoconf ;
   __s32 dad_transmits ;
   __s32 rtr_solicits ;
   __s32 rtr_solicit_interval ;
   __s32 rtr_solicit_max_interval ;
   __s32 rtr_solicit_delay ;
   __s32 force_mld_version ;
   __s32 mldv1_unsolicited_report_interval ;
   __s32 mldv2_unsolicited_report_interval ;
   __s32 use_tempaddr ;
   __s32 temp_valid_lft ;
   __s32 temp_prefered_lft ;
   __s32 regen_max_retry ;
   __s32 max_desync_factor ;
   __s32 max_addresses ;
   __s32 accept_ra_defrtr ;
   __s32 accept_ra_min_hop_limit ;
   __s32 accept_ra_pinfo ;
   __s32 ignore_routes_with_linkdown ;
   __s32 accept_ra_rtr_pref ;
   __s32 rtr_probe_interval ;
   __s32 accept_ra_rt_info_min_plen ;
   __s32 accept_ra_rt_info_max_plen ;
   __s32 proxy_ndp ;
   __s32 accept_source_route ;
   __s32 accept_ra_from_local ;
   __s32 optimistic_dad ;
   __s32 use_optimistic ;
   __s32 mc_forwarding ;
   __s32 disable_ipv6 ;
   __s32 drop_unicast_in_l2_multicast ;
   __s32 accept_dad ;
   __s32 force_tllao ;
   __s32 ndisc_notify ;
   __s32 suppress_frag_ndisc ;
   __s32 accept_ra_mtu ;
   __s32 drop_unsolicited_na ;
   struct ipv6_stable_secret stable_secret ;
   __s32 use_oif_addrs_only ;
   __s32 keep_addr_on_down ;
   __s32 seg6_enabled ;
   __s32 seg6_require_hmac ;
   __u32 enhanced_dad ;
   __u32 addr_gen_mode ;
   __s32 disable_policy ;
   __s32 ndisc_tclass ;
   struct ctl_table_header *sysctl_header ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
struct dql {
   unsigned int num_queued ;
   unsigned int adj_limit ;
   unsigned int last_obj_cnt ;
   unsigned int limit ;
   unsigned int num_completed ;
   unsigned int prev_ovlimit ;
   unsigned int prev_num_queued ;
   unsigned int prev_last_obj_cnt ;
   unsigned int lowest_slack ;
   unsigned long slack_start_time ;
   unsigned int max_limit ;
   unsigned int min_limit ;
   unsigned int slack_hold_time ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
struct __anonstruct_sync_serial_settings_529 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
typedef struct __anonstruct_sync_serial_settings_529 sync_serial_settings;
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_te1_settings_530 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
   unsigned int slot_map ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_te1_settings_530 te1_settings;
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_raw_hdlc_proto_531 {
   unsigned short encoding ;
   unsigned short parity ;
};
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_raw_hdlc_proto_531 raw_hdlc_proto;
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_532 {
   unsigned int t391 ;
   unsigned int t392 ;
   unsigned int n391 ;
   unsigned int n392 ;
   unsigned int n393 ;
   unsigned short lmi ;
   unsigned short dce ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_532 fr_proto;
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_533 {
   unsigned int dlci ;
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_533 fr_proto_pvc;
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_info_534 {
   unsigned int dlci ;
   char master[16U] ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_info_534 fr_proto_pvc_info;
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_cisco_proto_535 {
   unsigned int interval ;
   unsigned int timeout ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_cisco_proto_535 cisco_proto;
#line 195  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct ifmap {
   unsigned long mem_start ;
   unsigned long mem_end ;
   unsigned short base_addr ;
   unsigned char irq ;
   unsigned char dma ;
   unsigned char port ;
};
#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifs_ifsu_536 {
   raw_hdlc_proto *raw_hdlc ;
   cisco_proto *cisco ;
   fr_proto *fr ;
   fr_proto_pvc *fr_pvc ;
   fr_proto_pvc_info *fr_pvc_info ;
   sync_serial_settings *sync ;
   te1_settings *te1 ;
};
#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct if_settings {
   unsigned int type ;
   unsigned int size ;
   union __anonunion_ifs_ifsu_536 ifs_ifsu ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifr_ifrn_537 {
   char ifrn_name[16U] ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifr_ifru_538 {
   struct sockaddr ifru_addr ;
   struct sockaddr ifru_dstaddr ;
   struct sockaddr ifru_broadaddr ;
   struct sockaddr ifru_netmask ;
   struct sockaddr ifru_hwaddr ;
   short ifru_flags ;
   int ifru_ivalue ;
   int ifru_mtu ;
   struct ifmap ifru_map ;
   char ifru_slave[16U] ;
   char ifru_newname[16U] ;
   void *ifru_data ;
   struct if_settings ifru_settings ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct ifreq {
   union __anonunion_ifr_ifrn_537 ifr_ifrn ;
   union __anonunion_ifr_ifru_538 ifr_ifru ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/compat.h"
typedef s32 compat_long_t;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/compat.h"
typedef u32 compat_uptr_t;
#line 367  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compat.h"
struct compat_robust_list {
   compat_uptr_t next ;
};
#line 371  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compat.h"
struct compat_robust_list_head {
   struct compat_robust_list list ;
   compat_long_t futex_offset ;
   compat_uptr_t list_op_pending ;
};
#line 177  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_drvinfo {
   __u32 cmd ;
   char driver[32U] ;
   char version[32U] ;
   char fw_version[32U] ;
   char bus_info[32U] ;
   char erom_version[32U] ;
   char reserved2[12U] ;
   __u32 n_priv_flags ;
   __u32 n_stats ;
   __u32 testinfo_len ;
   __u32 eedump_len ;
   __u32 regdump_len ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_wolinfo {
   __u32 cmd ;
   __u32 supported ;
   __u32 wolopts ;
   __u8 sopass[6U] ;
};
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tunable {
   __u32 cmd ;
   __u32 id ;
   __u32 type_id ;
   __u32 len ;
   void *data[0U] ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_regs {
   __u32 cmd ;
   __u32 version ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_eeprom {
   __u32 cmd ;
   __u32 magic ;
   __u32 offset ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_eee {
   __u32 cmd ;
   __u32 supported ;
   __u32 advertised ;
   __u32 lp_advertised ;
   __u32 eee_active ;
   __u32 eee_enabled ;
   __u32 tx_lpi_enabled ;
   __u32 tx_lpi_timer ;
   __u32 reserved[2U] ;
};
#line 382  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_modinfo {
   __u32 cmd ;
   __u32 type ;
   __u32 eeprom_len ;
   __u32 reserved[8U] ;
};
#line 462  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_coalesce {
   __u32 cmd ;
   __u32 rx_coalesce_usecs ;
   __u32 rx_max_coalesced_frames ;
   __u32 rx_coalesce_usecs_irq ;
   __u32 rx_max_coalesced_frames_irq ;
   __u32 tx_coalesce_usecs ;
   __u32 tx_max_coalesced_frames ;
   __u32 tx_coalesce_usecs_irq ;
   __u32 tx_max_coalesced_frames_irq ;
   __u32 stats_block_coalesce_usecs ;
   __u32 use_adaptive_rx_coalesce ;
   __u32 use_adaptive_tx_coalesce ;
   __u32 pkt_rate_low ;
   __u32 rx_coalesce_usecs_low ;
   __u32 rx_max_coalesced_frames_low ;
   __u32 tx_coalesce_usecs_low ;
   __u32 tx_max_coalesced_frames_low ;
   __u32 pkt_rate_high ;
   __u32 rx_coalesce_usecs_high ;
   __u32 rx_max_coalesced_frames_high ;
   __u32 tx_coalesce_usecs_high ;
   __u32 tx_max_coalesced_frames_high ;
   __u32 rate_sample_interval ;
};
#line 513  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ringparam {
   __u32 cmd ;
   __u32 rx_max_pending ;
   __u32 rx_mini_max_pending ;
   __u32 rx_jumbo_max_pending ;
   __u32 tx_max_pending ;
   __u32 rx_pending ;
   __u32 rx_mini_pending ;
   __u32 rx_jumbo_pending ;
   __u32 tx_pending ;
};
#line 541  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_channels {
   __u32 cmd ;
   __u32 max_rx ;
   __u32 max_tx ;
   __u32 max_other ;
   __u32 max_combined ;
   __u32 rx_count ;
   __u32 tx_count ;
   __u32 other_count ;
   __u32 combined_count ;
};
#line 575  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_pauseparam {
   __u32 cmd ;
   __u32 autoneg ;
   __u32 rx_pause ;
   __u32 tx_pause ;
};
#line 683  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_test {
   __u32 cmd ;
   __u32 flags ;
   __u32 reserved ;
   __u32 len ;
   __u64 data[0U] ;
};
#line 702  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_stats {
   __u32 cmd ;
   __u32 n_stats ;
   __u64 data[0U] ;
};
#line 758  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tcpip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tos ;
};
#line 775  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ah_espip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 spi ;
   __u8 tos ;
};
#line 793  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_usrip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 l4_4_bytes ;
   __u8 tos ;
   __u8 ip_ver ;
   __u8 proto ;
};
#line 812  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tcpip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tclass ;
};
#line 829  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ah_espip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be32 spi ;
   __u8 tclass ;
};
#line 844  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_usrip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be32 l4_4_bytes ;
   __u8 tclass ;
   __u8 l4_proto ;
};
#line 852  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
union ethtool_flow_union {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   struct ethtool_tcpip6_spec tcp_ip6_spec ;
   struct ethtool_tcpip6_spec udp_ip6_spec ;
   struct ethtool_tcpip6_spec sctp_ip6_spec ;
   struct ethtool_ah_espip6_spec ah_ip6_spec ;
   struct ethtool_ah_espip6_spec esp_ip6_spec ;
   struct ethtool_usrip6_spec usr_ip6_spec ;
   struct ethhdr ether_spec ;
   __u8 hdata[52U] ;
};
#line 880  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_flow_ext {
   __u8 padding[2U] ;
   unsigned char h_dest[6U] ;
   __be16 vlan_etype ;
   __be16 vlan_tci ;
   __be32 data[2U] ;
};
#line 905  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_rx_flow_spec {
   __u32 flow_type ;
   union ethtool_flow_union h_u ;
   struct ethtool_flow_ext h_ext ;
   union ethtool_flow_union m_u ;
   struct ethtool_flow_ext m_ext ;
   __u64 ring_cookie ;
   __u32 location ;
};
#line 1001  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
union __anonunion_557 {
   __u32 rule_cnt ;
   __u32 rss_context ;
};
#line 1001  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_rxnfc {
   __u32 cmd ;
   __u32 flow_type ;
   __u64 data ;
   struct ethtool_rx_flow_spec fs ;
   union __anonunion_557 __anonCompField_ethtool_rxnfc_99 ;
   __u32 rule_locs[0U] ;
};
#line 1130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_flash {
   __u32 cmd ;
   __u32 region ;
   char data[128U] ;
};
#line 1150  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_dump {
   __u32 cmd ;
   __u32 version ;
   __u32 flag ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 1230  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ts_info {
   __u32 cmd ;
   __u32 so_timestamping ;
   __s32 phc_index ;
   __u32 tx_types ;
   __u32 tx_reserved[3U] ;
   __u32 rx_filters ;
   __u32 rx_reserved[3U] ;
};
#line 1302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_fecparam {
   __u32 cmd ;
   __u32 active_fec ;
   __u32 fec ;
   __u32 reserved ;
};
#line 1876  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_link_settings {
   __u32 cmd ;
   __u32 speed ;
   __u8 duplex ;
   __u8 port ;
   __u8 phy_address ;
   __u8 autoneg ;
   __u8 mdio_support ;
   __u8 eth_tp_mdix ;
   __u8 eth_tp_mdix_ctrl ;
   __s8 link_mode_masks_nwords ;
   __u8 transceiver ;
   __u8 reserved1[3U] ;
   __u32 reserved[7U] ;
   __u32 link_mode_masks[0U] ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
enum ethtool_phys_id_state {
    ETHTOOL_ID_INACTIVE = 0,
    ETHTOOL_ID_ACTIVE = 1,
    ETHTOOL_ID_ON = 2,
    ETHTOOL_ID_OFF = 3
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct __anonstruct_link_modes_560 {
   unsigned long supported[2U] ;
   unsigned long advertising[2U] ;
   unsigned long lp_advertising[2U] ;
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct ethtool_link_ksettings {
   struct ethtool_link_settings base ;
   struct __anonstruct_link_modes_560 link_modes ;
};
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct ethtool_ops {
   void (*get_drvinfo)(struct net_device *, struct ethtool_drvinfo *) ;
   int (*get_regs_len)(struct net_device *) ;
   void (*get_regs)(struct net_device *, struct ethtool_regs *, void *) ;
   void (*get_wol)(struct net_device *, struct ethtool_wolinfo *) ;
   int (*set_wol)(struct net_device *, struct ethtool_wolinfo *) ;
   u32 (*get_msglevel)(struct net_device *) ;
   void (*set_msglevel)(struct net_device *, u32 ) ;
   int (*nway_reset)(struct net_device *) ;
   u32 (*get_link)(struct net_device *) ;
   int (*get_eeprom_len)(struct net_device *) ;
   int (*get_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*set_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_coalesce)(struct net_device *, struct ethtool_coalesce *) ;
   int (*set_coalesce)(struct net_device *, struct ethtool_coalesce *) ;
   void (*get_ringparam)(struct net_device *, struct ethtool_ringparam *) ;
   int (*set_ringparam)(struct net_device *, struct ethtool_ringparam *) ;
   void (*get_pauseparam)(struct net_device *, struct ethtool_pauseparam *) ;
   int (*set_pauseparam)(struct net_device *, struct ethtool_pauseparam *) ;
   void (*self_test)(struct net_device *, struct ethtool_test *, u64 *) ;
   void (*get_strings)(struct net_device *, u32 , u8 *) ;
   int (*set_phys_id)(struct net_device *, enum ethtool_phys_id_state ) ;
   void (*get_ethtool_stats)(struct net_device *, struct ethtool_stats *, u64 *) ;
   int (*begin)(struct net_device *) ;
   void (*complete)(struct net_device *) ;
   u32 (*get_priv_flags)(struct net_device *) ;
   int (*set_priv_flags)(struct net_device *, u32 ) ;
   int (*get_sset_count)(struct net_device *, int ) ;
   int (*get_rxnfc)(struct net_device *, struct ethtool_rxnfc *, u32 *) ;
   int (*set_rxnfc)(struct net_device *, struct ethtool_rxnfc *) ;
   int (*flash_device)(struct net_device *, struct ethtool_flash *) ;
   int (*reset)(struct net_device *, u32 *) ;
   u32 (*get_rxfh_key_size)(struct net_device *) ;
   u32 (*get_rxfh_indir_size)(struct net_device *) ;
   int (*get_rxfh)(struct net_device *, u32 *, u8 *, u8 *) ;
   int (*set_rxfh)(struct net_device *, u32 *, u8 *, u8 ) ;
   int (*get_rxfh_context)(struct net_device *, u32 *, u8 *, u8 *, u32 ) ;
   int (*set_rxfh_context)(struct net_device *, u32 *, u8 *, u8 , u32 *, bool ) ;
   void (*get_channels)(struct net_device *, struct ethtool_channels *) ;
   int (*set_channels)(struct net_device *, struct ethtool_channels *) ;
   int (*get_dump_flag)(struct net_device *, struct ethtool_dump *) ;
   int (*get_dump_data)(struct net_device *, struct ethtool_dump *, void *) ;
   int (*set_dump)(struct net_device *, struct ethtool_dump *) ;
   int (*get_ts_info)(struct net_device *, struct ethtool_ts_info *) ;
   int (*get_module_info)(struct net_device *, struct ethtool_modinfo *) ;
   int (*get_module_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_eee)(struct net_device *, struct ethtool_eee *) ;
   int (*set_eee)(struct net_device *, struct ethtool_eee *) ;
   int (*get_tunable)(struct net_device *, struct ethtool_tunable *, void *) ;
   int (*set_tunable)(struct net_device *, struct ethtool_tunable *, void *) ;
   int (*get_per_queue_coalesce)(struct net_device *, u32 , struct ethtool_coalesce *) ;
   int (*set_per_queue_coalesce)(struct net_device *, u32 , struct ethtool_coalesce *) ;
   int (*get_link_ksettings)(struct net_device *, struct ethtool_link_ksettings *) ;
   int (*set_link_ksettings)(struct net_device *, struct ethtool_link_ksettings *) ;
   int (*get_fecparam)(struct net_device *, struct ethtool_fecparam *) ;
   int (*set_fecparam)(struct net_device *, struct ethtool_fecparam *) ;
   void (*get_ethtool_phy_stats)(struct net_device *, struct ethtool_stats *, u64 *) ;
};
#line 822  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/sysctl.h"
struct ctl_table_root;
#line 823 
struct ctl_dir;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
typedef int proc_handler(struct ctl_table *, int , void *, size_t *, loff_t *);
#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_poll {
   atomic_t event ;
   wait_queue_head_t wait ;
};
#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table {
   char *procname ;
   void *data ;
   int maxlen ;
   umode_t mode ;
   struct ctl_table *child ;
   proc_handler *proc_handler ;
   struct ctl_table_poll *poll ;
   void *extra1 ;
   void *extra2 ;
} __attribute__((__designated_init__));
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_node {
   struct rb_node node ;
   struct ctl_table_header *header ;
};
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct __anonstruct_562 {
   struct ctl_table *ctl_table ;
   int used ;
   int count ;
   int nreg ;
};
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
union __anonunion_561 {
   struct __anonstruct_562 __anonCompField___anonunion_561_100 ;
   struct callback_head rcu ;
};
#line 142 
struct ctl_table_set;
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_header {
   union __anonunion_561 __anonCompField_ctl_table_header_101 ;
   struct completion *unregistering ;
   struct ctl_table *ctl_table_arg ;
   struct ctl_table_root *root ;
   struct ctl_table_set *set ;
   struct ctl_dir *parent ;
   struct ctl_node *node ;
   struct hlist_head inodes ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_dir {
   struct ctl_table_header header ;
   struct rb_root root ;
};
#line 167  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_set {
   int (*is_seen)(struct ctl_table_set *) ;
   struct ctl_dir dir ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_root {
   struct ctl_table_set default_set ;
   struct ctl_table_set *(*lookup)(struct ctl_table_root *) ;
   void (*set_ownership)(struct ctl_table_header *, struct ctl_table *, kuid_t *, kgid_t *) ;
   int (*permissions)(struct ctl_table_header *, struct ctl_table *) ;
};
#line 242 
struct prot_inuse;
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/core.h"
struct netns_core {
   struct ctl_table_header *sysctl_hdr ;
   int sysctl_somaxconn ;
   int *sock_inuse ;
   struct prot_inuse *prot_inuse ;
};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct u64_stats_sync {
   };
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct __anonstruct_local_t_563 {
   atomic_long_t a ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
typedef struct __anonstruct_local_t_563 local_t;
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/local.h"
struct __anonstruct_local64_t_564 {
   local_t a ;
};
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/local.h"
typedef struct __anonstruct_local64_t_564 local64_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/local64.h"
struct __anonstruct_u64_stats_t_565 {
   local64_t v ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/local64.h"
typedef struct __anonstruct_u64_stats_t_565 u64_stats_t;
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct ipstats_mib {
   u64 mibs[37U] ;
   struct u64_stats_sync syncp ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmp_mib {
   unsigned long mibs[28U] ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpmsg_mib {
   atomic_long_t mibs[512U] ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6_mib {
   unsigned long mibs[6U] ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6_mib_device {
   atomic_long_t mibs[6U] ;
};
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6msg_mib {
   atomic_long_t mibs[512U] ;
};
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6msg_mib_device {
   atomic_long_t mibs[512U] ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct tcp_mib {
   unsigned long mibs[16U] ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct udp_mib {
   unsigned long mibs[9U] ;
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_mib {
   unsigned long mibs[120U] ;
};
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_xfrm_mib {
   unsigned long mibs[29U] ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_tls_mib {
   unsigned long mibs[11U] ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/mib.h"
struct proc_dir_entry;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/mib.h"
struct netns_mib {
   struct tcp_mib *tcp_statistics ;
   struct ipstats_mib *ip_statistics ;
   struct linux_mib *net_statistics ;
   struct udp_mib *udp_statistics ;
   struct udp_mib *udplite_statistics ;
   struct icmp_mib *icmp_statistics ;
   struct icmpmsg_mib *icmpmsg_statistics ;
   struct proc_dir_entry *proc_net_devsnmp6 ;
   struct udp_mib *udp_stats_in6 ;
   struct udp_mib *udplite_stats_in6 ;
   struct ipstats_mib *ipv6_statistics ;
   struct icmpv6_mib *icmpv6_statistics ;
   struct icmpv6msg_mib *icmpv6msg_statistics ;
   struct linux_xfrm_mib *xfrm_statistics ;
   struct linux_tls_mib *tls_statistics ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/unix.h"
struct netns_unix {
   int sysctl_max_dgram_qlen ;
   struct ctl_table_header *ctl ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/packet.h"
struct netns_packet {
   struct mutex sklist_lock ;
   struct hlist_head sklist ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frags;
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct fqdir {
   long high_thresh ;
   long low_thresh ;
   int timeout ;
   int max_dist ;
   struct inet_frags *f ;
   struct net *net ;
   bool dead ;
   struct rhashtable rhashtable ;
   atomic_long_t mem ;
   struct work_struct destroy_work ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct frag_v4_compare_key {
   __be32 saddr ;
   __be32 daddr ;
   u32 user ;
   u32 vif ;
   __be16 id ;
   u16 protocol ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct frag_v6_compare_key {
   struct in6_addr saddr ;
   struct in6_addr daddr ;
   u32 user ;
   __be32 id ;
   u32 iif ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
union __anonunion_key_566 {
   struct frag_v4_compare_key v4 ;
   struct frag_v6_compare_key v6 ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frag_queue {
   struct rhash_head node ;
   union __anonunion_key_566 key ;
   struct timer_list timer ;
   spinlock_t lock ;
   refcount_t refcnt ;
   struct rb_root rb_fragments ;
   struct sk_buff *fragments_tail ;
   struct sk_buff *last_run_head ;
   ktime_t stamp ;
   int len ;
   int meat ;
   __u8 flags ;
   u16 max_size ;
   struct fqdir *fqdir ;
   struct callback_head rcu ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frags {
   unsigned int qsize ;
   void (*constructor)(struct inet_frag_queue *, void *) ;
   void (*destructor)(struct inet_frag_queue *) ;
   void (*frag_expire)(struct timer_list *) ;
   struct kmem_cache *frags_cachep ;
   char *frags_cache_name ;
   struct rhashtable_params rhash_params ;
   refcount_t refcnt ;
   struct completion completion ;
};
#line 177 
struct ipv4_devconf;
#line 178 
struct fib_rules_ops;
#line 179 
struct fib_table;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct local_ports {
   seqlock_t lock ;
   int range[2U] ;
   bool warned ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct ping_group_range {
   seqlock_t lock ;
   kgid_t range[2U] ;
};
#line 31 
struct inet_hashinfo;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct inet_timewait_death_row {
   atomic_t tw_count ;
   struct inet_hashinfo *hashinfo ;
   int sysctl_max_tw_buckets ;
};
#line 40 
struct tcp_fastopen_context;
#line 43 
struct ip_ra_chain;
#line 43 
struct inet_peer_base;
#line 43 
struct xt_table;
#line 43 
struct tcp_congestion_ops;
#line 43 
struct fib_notifier_ops;
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct netns_ipv4 {
   struct ctl_table_header *forw_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *ipv4_hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *xfrm4_hdr ;
   struct ipv4_devconf *devconf_all ;
   struct ipv4_devconf *devconf_dflt ;
   struct ip_ra_chain *ra_chain ;
   struct mutex ra_mutex ;
   struct fib_rules_ops *rules_ops ;
   bool fib_has_custom_rules ;
   unsigned int fib_rules_require_fldissect ;
   struct fib_table *fib_main ;
   struct fib_table *fib_default ;
   bool fib_has_custom_local_routes ;
   int fib_num_tclassid_users ;
   struct hlist_head *fib_table_hash ;
   bool fib_offload_disabled ;
   struct sock *fibnl ;
   struct sock **icmp_sk ;
   struct sock *mc_autojoin_sk ;
   struct inet_peer_base *peers ;
   struct sock **tcp_sk ;
   struct fqdir *fqdir ;
   struct xt_table *iptable_filter ;
   struct xt_table *iptable_mangle ;
   struct xt_table *iptable_raw ;
   struct xt_table *arptable_filter ;
   struct xt_table *iptable_security ;
   struct xt_table *nat_table ;
   int sysctl_icmp_echo_ignore_all ;
   int sysctl_icmp_echo_ignore_broadcasts ;
   int sysctl_icmp_ignore_bogus_error_responses ;
   int sysctl_icmp_ratelimit ;
   int sysctl_icmp_ratemask ;
   int sysctl_icmp_errors_use_inbound_ifaddr ;
   struct local_ports ip_local_ports ;
   int sysctl_tcp_ecn ;
   int sysctl_tcp_ecn_fallback ;
   int sysctl_ip_default_ttl ;
   int sysctl_ip_no_pmtu_disc ;
   int sysctl_ip_fwd_use_pmtu ;
   int sysctl_ip_fwd_update_priority ;
   int sysctl_ip_nonlocal_bind ;
   int sysctl_ip_dynaddr ;
   int sysctl_ip_early_demux ;
   int sysctl_raw_l3mdev_accept ;
   int sysctl_tcp_early_demux ;
   int sysctl_udp_early_demux ;
   int sysctl_fwmark_reflect ;
   int sysctl_tcp_fwmark_accept ;
   int sysctl_tcp_l3mdev_accept ;
   int sysctl_tcp_mtu_probing ;
   int sysctl_tcp_mtu_probe_floor ;
   int sysctl_tcp_base_mss ;
   int sysctl_tcp_min_snd_mss ;
   int sysctl_tcp_probe_threshold ;
   u32 sysctl_tcp_probe_interval ;
   int sysctl_tcp_keepalive_time ;
   int sysctl_tcp_keepalive_probes ;
   int sysctl_tcp_keepalive_intvl ;
   int sysctl_tcp_syn_retries ;
   int sysctl_tcp_synack_retries ;
   int sysctl_tcp_syncookies ;
   int sysctl_tcp_reordering ;
   int sysctl_tcp_retries1 ;
   int sysctl_tcp_retries2 ;
   int sysctl_tcp_orphan_retries ;
   int sysctl_tcp_fin_timeout ;
   unsigned int sysctl_tcp_notsent_lowat ;
   int sysctl_tcp_tw_reuse ;
   int sysctl_tcp_sack ;
   int sysctl_tcp_window_scaling ;
   int sysctl_tcp_timestamps ;
   int sysctl_tcp_early_retrans ;
   int sysctl_tcp_recovery ;
   int sysctl_tcp_thin_linear_timeouts ;
   int sysctl_tcp_slow_start_after_idle ;
   int sysctl_tcp_retrans_collapse ;
   int sysctl_tcp_stdurg ;
   int sysctl_tcp_rfc1337 ;
   int sysctl_tcp_abort_on_overflow ;
   int sysctl_tcp_fack ;
   int sysctl_tcp_max_reordering ;
   int sysctl_tcp_dsack ;
   int sysctl_tcp_app_win ;
   int sysctl_tcp_adv_win_scale ;
   int sysctl_tcp_frto ;
   int sysctl_tcp_nometrics_save ;
   int sysctl_tcp_moderate_rcvbuf ;
   int sysctl_tcp_tso_win_divisor ;
   int sysctl_tcp_workaround_signed_windows ;
   int sysctl_tcp_limit_output_bytes ;
   int sysctl_tcp_challenge_ack_limit ;
   int sysctl_tcp_min_tso_segs ;
   int sysctl_tcp_min_rtt_wlen ;
   int sysctl_tcp_autocorking ;
   int sysctl_tcp_invalid_ratelimit ;
   int sysctl_tcp_pacing_ss_ratio ;
   int sysctl_tcp_pacing_ca_ratio ;
   int sysctl_tcp_wmem[3U] ;
   int sysctl_tcp_rmem[3U] ;
   int sysctl_tcp_comp_sack_nr ;
   unsigned long sysctl_tcp_comp_sack_delay_ns ;
   struct inet_timewait_death_row tcp_death_row ;
   int sysctl_max_syn_backlog ;
   int sysctl_tcp_fastopen ;
   struct tcp_congestion_ops *tcp_congestion_control ;
   struct tcp_fastopen_context *tcp_fastopen_ctx ;
   spinlock_t tcp_fastopen_ctx_lock ;
   unsigned int sysctl_tcp_fastopen_blackhole_timeout ;
   atomic_t tfo_active_disable_times ;
   unsigned long tfo_active_disable_stamp ;
   int sysctl_udp_wmem_min ;
   int sysctl_udp_rmem_min ;
   int sysctl_udp_l3mdev_accept ;
   int sysctl_igmp_max_memberships ;
   int sysctl_igmp_max_msf ;
   int sysctl_igmp_llm_reports ;
   int sysctl_igmp_qrv ;
   struct ping_group_range ping_group_range ;
   atomic_t dev_addr_genid ;
   unsigned long *sysctl_local_reserved_ports ;
   int sysctl_ip_prot_sock ;
   struct list_head mr_tables ;
   struct fib_rules_ops *mr_rules_ops ;
   int sysctl_fib_multipath_use_neigh ;
   int sysctl_fib_multipath_hash_policy ;
   struct fib_notifier_ops *notifier_ops ;
   unsigned int fib_seq ;
   struct fib_notifier_ops *ipmr_notifier_ops ;
   unsigned int ipmr_seq ;
   atomic_t rt_genid ;
   siphash_key_t ip_id_key ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst_ops.h"
struct neighbour;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst_ops.h"
struct dst_ops {
   unsigned short family ;
   unsigned int gc_thresh ;
   int (*gc)(struct dst_ops *) ;
   struct dst_entry *(*check)(struct dst_entry *, __u32 ) ;
   unsigned int (*default_advmss)(struct dst_entry *) ;
   unsigned int (*mtu)(struct dst_entry *) ;
   u32 *(*cow_metrics)(struct dst_entry *, unsigned long ) ;
   void (*destroy)(struct dst_entry *) ;
   void (*ifdown)(struct dst_entry *, struct net_device *, int ) ;
   struct dst_entry *(*negative_advice)(struct dst_entry *) ;
   void (*link_failure)(struct sk_buff *) ;
   void (*update_pmtu)(struct dst_entry *, struct sock *, struct sk_buff *, u32 , bool ) ;
   void (*redirect)(struct dst_entry *, struct sock *, struct sk_buff *) ;
   int (*local_out)(struct net *, struct sock *, struct sk_buff *) ;
   struct neighbour *(*neigh_lookup)(struct dst_entry *, struct sk_buff *, void *) ;
   void (*confirm_neigh)(struct dst_entry *, void *) ;
   struct kmem_cache *kmem_cachep ;
   struct percpu_counter pcpuc_entries ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_sysctl_ipv6 {
   struct ctl_table_header *hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *icmp_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *xfrm6_hdr ;
   int bindv6only ;
   int flush_delay ;
   int ip6_rt_max_size ;
   int ip6_rt_gc_min_interval ;
   int ip6_rt_gc_timeout ;
   int ip6_rt_gc_interval ;
   int ip6_rt_gc_elasticity ;
   int ip6_rt_mtu_expires ;
   int ip6_rt_min_advmss ;
   int multipath_hash_policy ;
   int flowlabel_consistency ;
   int auto_flowlabels ;
   int icmpv6_time ;
   int icmpv6_echo_ignore_all ;
   int icmpv6_echo_ignore_multicast ;
   int icmpv6_echo_ignore_anycast ;
   unsigned long icmpv6_ratemask[4U] ;
   unsigned long *icmpv6_ratemask_ptr ;
   int anycast_src_echo_reply ;
   int ip_nonlocal_bind ;
   int fwmark_reflect ;
   int idgen_retries ;
   int idgen_delay ;
   int flowlabel_state_ranges ;
   int flowlabel_reflect ;
   int max_dst_opts_cnt ;
   int max_hbh_opts_cnt ;
   int max_dst_opts_len ;
   int max_hbh_opts_len ;
   int seg6_flowlabel ;
   bool skip_notify_on_dev_down ;
};
#line 56 
struct fib6_info;
#line 56 
struct rt6_info;
#line 56 
struct rt6_statistics;
#line 56 
struct fib6_table;
#line 56 
struct seg6_pernet_data;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct __anonstruct_ip6addrlbl_table_567 {
   struct hlist_head head ;
   spinlock_t lock ;
   u32 seq ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_ipv6 {
   struct netns_sysctl_ipv6 sysctl ;
   struct ipv6_devconf *devconf_all ;
   struct ipv6_devconf *devconf_dflt ;
   struct inet_peer_base *peers ;
   struct fqdir *fqdir ;
   struct xt_table *ip6table_filter ;
   struct xt_table *ip6table_mangle ;
   struct xt_table *ip6table_raw ;
   struct xt_table *ip6table_security ;
   struct xt_table *ip6table_nat ;
   struct fib6_info *fib6_null_entry ;
   struct rt6_info *ip6_null_entry ;
   struct rt6_statistics *rt6_stats ;
   struct timer_list ip6_fib_timer ;
   struct hlist_head *fib_table_hash ;
   struct fib6_table *fib6_main_tbl ;
   struct list_head fib6_walkers ;
   struct dst_ops ip6_dst_ops ;
   rwlock_t fib6_walker_lock ;
   spinlock_t fib6_gc_lock ;
   unsigned int ip6_rt_gc_expire ;
   unsigned long ip6_rt_last_gc ;
   unsigned int fib6_rules_require_fldissect ;
   bool fib6_has_custom_rules ;
   unsigned int fib6_routes_require_src ;
   struct rt6_info *ip6_prohibit_entry ;
   struct rt6_info *ip6_blk_hole_entry ;
   struct fib6_table *fib6_local_tbl ;
   struct fib_rules_ops *fib6_rules_ops ;
   struct sock **icmp_sk ;
   struct sock *ndisc_sk ;
   struct sock *tcp_sk ;
   struct sock *igmp_sk ;
   struct sock *mc_autojoin_sk ;
   struct list_head mr6_tables ;
   struct fib_rules_ops *mr6_rules_ops ;
   atomic_t dev_addr_genid ;
   atomic_t fib6_sernum ;
   struct seg6_pernet_data *seg6_data ;
   struct fib_notifier_ops *notifier_ops ;
   struct fib_notifier_ops *ip6mr_notifier_ops ;
   unsigned int ipmr_seq ;
   struct __anonstruct_ip6addrlbl_table_567 ip6addrlbl_table ;
};
#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_nf_frag {
   struct fqdir *fqdir ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/nexthop.h"
struct netns_nexthop {
   struct rb_root rb_root ;
   struct hlist_head *devhash ;
   unsigned int seq ;
   u32 last_id_allocated ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ieee802154_6lowpan.h"
struct netns_sysctl_lowpan {
   struct ctl_table_header *frags_hdr ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ieee802154_6lowpan.h"
struct netns_ieee802154_lowpan {
   struct netns_sysctl_lowpan sysctl ;
   struct fqdir *fqdir ;
};
#line 21 
struct sctp_mib;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/sctp.h"
struct netns_sctp {
   struct sctp_mib *sctp_statistics ;
   struct proc_dir_entry *proc_net_sctp ;
   struct ctl_table_header *sysctl_header ;
   struct sock *ctl_sock ;
   struct list_head local_addr_list ;
   struct list_head addr_waitq ;
   struct timer_list addr_wq_timer ;
   struct list_head auto_asconf_splist ;
   spinlock_t addr_wq_lock ;
   spinlock_t local_addr_lock ;
   unsigned int rto_initial ;
   unsigned int rto_min ;
   unsigned int rto_max ;
   int rto_alpha ;
   int rto_beta ;
   int max_burst ;
   int cookie_preserve_enable ;
   char *sctp_hmac_alg ;
   unsigned int valid_cookie_life ;
   unsigned int sack_timeout ;
   unsigned int hb_interval ;
   int max_retrans_association ;
   int max_retrans_path ;
   int max_retrans_init ;
   int pf_retrans ;
   int ps_retrans ;
   int pf_enable ;
   int pf_expose ;
   int sndbuf_policy ;
   int rcvbuf_policy ;
   int default_auto_asconf ;
   int addip_enable ;
   int addip_noauth ;
   int prsctp_enable ;
   int reconf_enable ;
   int auth_enable ;
   int intl_enable ;
   int ecn_enable ;
   int scope_policy ;
   int rwnd_upd_shift ;
   unsigned long max_autoclose ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/dccp.h"
struct netns_dccp {
   struct sock *v4_ctl_sk ;
   struct sock *v6_ctl_sk ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netfilter.h"
struct nf_logger;
#line 76 
struct nf_queue_handler;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/netfilter.h"
struct nf_hook_entries;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/netfilter.h"
struct netns_nf {
   struct proc_dir_entry *proc_netfilter ;
   struct nf_queue_handler *queue_handler ;
   struct nf_logger *nf_loggers[13U] ;
   struct ctl_table_header *nf_log_dir_header ;
   struct nf_hook_entries *hooks_ipv4[5U] ;
   struct nf_hook_entries *hooks_ipv6[5U] ;
   struct nf_hook_entries *hooks_arp[3U] ;
   struct nf_hook_entries *hooks_bridge[5U] ;
   struct nf_hook_entries *hooks_decnet[7U] ;
   bool defrag_ipv4 ;
   bool defrag_ipv6 ;
};
#line 37 
struct ebt_table;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/x_tables.h"
struct netns_xt {
   struct list_head tables[13U] ;
   bool notrack_deprecated_warning ;
   bool clusterip_deprecated_warning ;
   struct ebt_table *broute_table ;
   struct ebt_table *frame_filter ;
   struct ebt_table *frame_nat ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_node;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_head {
   struct hlist_nulls_node *first ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_node {
   struct hlist_nulls_node *next ;
   struct hlist_nulls_node **pprev ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_generic_net {
   unsigned int timeout ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_tcp_net {
   unsigned int timeouts[14U] ;
   int tcp_loose ;
   int tcp_be_liberal ;
   int tcp_max_retrans ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_udp_net {
   unsigned int timeouts[2U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_icmp_net {
   unsigned int timeout ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_dccp_net {
   int dccp_loose ;
   unsigned int dccp_timeout[10U] ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_sctp_net {
   unsigned int timeouts[10U] ;
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_gre_net {
   struct list_head keymap_list ;
   unsigned int timeouts[2U] ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_ip_net {
   struct nf_generic_net generic ;
   struct nf_tcp_net tcp ;
   struct nf_udp_net udp ;
   struct nf_icmp_net icmp ;
   struct nf_icmp_net icmpv6 ;
   struct nf_dccp_net dccp ;
   struct nf_sctp_net sctp ;
   struct nf_gre_net gre ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct ct_pcpu {
   spinlock_t lock ;
   struct hlist_nulls_head unconfirmed ;
   struct hlist_nulls_head dying ;
};
#line 95 
struct nf_ct_event_notifier;
#line 95 
struct nf_exp_event_notifier;
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct netns_ct {
   atomic_t count ;
   unsigned int expect_count ;
   struct delayed_work ecache_dwork ;
   bool ecache_dwork_pending ;
   bool auto_assign_helper_warned ;
   struct ctl_table_header *sysctl_header ;
   unsigned int sysctl_log_invalid ;
   int sysctl_events ;
   int sysctl_acct ;
   int sysctl_auto_assign_helper ;
   int sysctl_tstamp ;
   int sysctl_checksum ;
   struct ct_pcpu *pcpu_lists ;
   struct ip_conntrack_stat *stat ;
   struct nf_ct_event_notifier *nf_conntrack_event_cb ;
   struct nf_exp_event_notifier *nf_expect_event_cb ;
   struct nf_ip_net nf_ct_proto ;
   unsigned int labels_used ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/nftables.h"
struct netns_nftables {
   struct list_head tables ;
   struct list_head commit_list ;
   struct list_head module_list ;
   struct mutex commit_mutex ;
   unsigned int base_seq ;
   u8 gencursor ;
   u8 validate_state ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct xfrm_policy_hash {
   struct hlist_head *table ;
   unsigned int hmask ;
   u8 dbits4 ;
   u8 sbits4 ;
   u8 dbits6 ;
   u8 sbits6 ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct xfrm_policy_hthresh {
   struct work_struct work ;
   seqlock_t lock ;
   u8 lbits4 ;
   u8 rbits4 ;
   u8 lbits6 ;
   u8 rbits6 ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct netns_xfrm {
   struct list_head state_all ;
   struct hlist_head *state_bydst ;
   struct hlist_head *state_bysrc ;
   struct hlist_head *state_byspi ;
   unsigned int state_hmask ;
   unsigned int state_num ;
   struct work_struct state_hash_work ;
   struct list_head policy_all ;
   struct hlist_head *policy_byidx ;
   unsigned int policy_idx_hmask ;
   struct hlist_head policy_inexact[3U] ;
   struct xfrm_policy_hash policy_bydst[3U] ;
   unsigned int policy_count[6U] ;
   struct work_struct policy_hash_work ;
   struct xfrm_policy_hthresh policy_hthresh ;
   struct list_head inexact_bins ;
   struct sock *nlsk ;
   struct sock *nlsk_stash ;
   u32 sysctl_aevent_etime ;
   u32 sysctl_aevent_rseqth ;
   int sysctl_larval_drop ;
   u32 sysctl_acq_expires ;
   struct ctl_table_header *sysctl_hdr ;
   struct dst_ops xfrm4_dst_ops ;
   struct dst_ops xfrm6_dst_ops ;
   spinlock_t xfrm_state_lock ;
   spinlock_t xfrm_policy_lock ;
   struct mutex xfrm_cfg_mutex ;
};
#line 79 
struct mpls_route;
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/mpls.h"
struct netns_mpls {
   int ip_ttl_propagate ;
   int default_ttl ;
   size_t platform_labels ;
   struct mpls_route **platform_label ;
   struct ctl_table_header *ctl ;
};
#line 20 
struct can_dev_rcv_lists;
#line 21 
struct can_pkg_stats;
#line 22 
struct can_rcv_lists_stats;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/can.h"
struct netns_can {
   struct proc_dir_entry *proc_dir ;
   struct proc_dir_entry *pde_version ;
   struct proc_dir_entry *pde_stats ;
   struct proc_dir_entry *pde_reset_stats ;
   struct proc_dir_entry *pde_rcvlist_all ;
   struct proc_dir_entry *pde_rcvlist_fil ;
   struct proc_dir_entry *pde_rcvlist_inv ;
   struct proc_dir_entry *pde_rcvlist_sff ;
   struct proc_dir_entry *pde_rcvlist_eff ;
   struct proc_dir_entry *pde_rcvlist_err ;
   struct proc_dir_entry *bcmproc_dir ;
   struct can_dev_rcv_lists *rx_alldev_list ;
   spinlock_t rcvlists_lock ;
   struct timer_list stattimer ;
   struct can_pkg_stats *pkg_stats ;
   struct can_rcv_lists_stats *rcv_lists_stats ;
   struct hlist_head cgw_list ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xdp.h"
struct netns_xdp {
   struct mutex lock ;
   struct hlist_head list ;
};
#line 12 
struct proc_ns_operations;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ns_common.h"
struct ns_common {
   atomic_long_t stashed ;
   struct proc_ns_operations *ops ;
   unsigned int inum ;
};
#line 12 
struct net_generic;
#line 13 
struct uevent_sock;
#line 14 
struct netns_ipvs;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct key_tag;
#line 55 
struct ucounts;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct net {
   refcount_t passive ;
   refcount_t count ;
   spinlock_t rules_mod_lock ;
   unsigned int dev_unreg_count ;
   unsigned int dev_base_seq ;
   int ifindex ;
   spinlock_t nsid_lock ;
   atomic_t fnhe_genid ;
   struct list_head list ;
   struct list_head exit_list ;
   struct llist_node cleanup_list ;
   struct key_tag *key_domain ;
   struct user_namespace *user_ns ;
   struct ucounts *ucounts ;
   struct idr netns_ids ;
   struct ns_common ns ;
   struct list_head dev_base_head ;
   struct proc_dir_entry *proc_net ;
   struct proc_dir_entry *proc_net_stat ;
   struct ctl_table_set sysctls ;
   struct sock *rtnl ;
   struct sock *genl_sock ;
   struct uevent_sock *uevent_sock ;
   struct hlist_head *dev_name_head ;
   struct hlist_head *dev_index_head ;
   struct raw_notifier_head netdev_chain ;
   u32 hash_mix ;
   struct net_device *loopback_dev ;
   struct list_head rules_ops ;
   struct netns_core core ;
   struct netns_mib mib ;
   struct netns_packet packet ;
   struct netns_unix unx ;
   struct netns_nexthop nexthop ;
   struct netns_ipv4 ipv4 ;
   struct netns_ipv6 ipv6 ;
   struct netns_ieee802154_lowpan ieee802154_lowpan ;
   struct netns_sctp sctp ;
   struct netns_dccp dccp ;
   struct netns_nf nf ;
   struct netns_xt xt ;
   struct netns_ct ct ;
   struct netns_nftables nft ;
   struct netns_nf_frag nf_frag ;
   struct ctl_table_header *nf_frag_frags_hdr ;
   struct sock *nfnl ;
   struct sock *nfnl_stash ;
   struct list_head nfnl_acct_list ;
   struct list_head nfct_timeout_list ;
   struct sk_buff_head wext_nlevents ;
   struct net_generic *gen ;
   struct bpf_prog *flow_dissector_prog ;
   struct netns_xfrm xfrm ;
   struct netns_ipvs *ipvs ;
   struct netns_mpls mpls ;
   struct netns_can can ;
   struct netns_xdp xdp ;
   struct sock *crypto_nlsk ;
   struct sock *diag_nlsk ;
} __attribute__((__designated_init__));
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
struct assoc_array_ptr;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
struct assoc_array {
   struct assoc_array_ptr *root ;
   unsigned long nr_leaves_on_tree ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
typedef int32_t key_serial_t;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
typedef uint32_t key_perm_t;
#line 32 
struct key_type;
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key_tag {
   struct callback_head rcu ;
   refcount_t usage ;
   bool removed ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_580 {
   u16 desc_len ;
   char desc[6U] ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_579 {
   struct __anonstruct_580 __anonCompField___anonunion_579_102 ;
   unsigned long x ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct keyring_index_key {
   unsigned long hash ;
   union __anonunion_579 __anonCompField_keyring_index_key_103 ;
   struct key_type *type ;
   struct key_tag *domain_tag ;
   char *description ;
};
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union key_payload {
   void *rcu_data0 ;
   void *data[4U] ;
};
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key_restriction {
   int (*check)(struct key *, struct key_type *, union key_payload *, struct key *) ;
   struct key *key ;
   struct key_type *keytype ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_581 {
   struct list_head graveyard_link ;
   struct rb_node serial_node ;
};
#line 172 
struct key_user;
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_582 {
   time64_t expiry ;
   time64_t revoked_at ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_584 {
   unsigned long hash ;
   unsigned long len_desc ;
   struct key_type *type ;
   struct key_tag *domain_tag ;
   char *description ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_583 {
   struct keyring_index_key index_key ;
   struct __anonstruct_584 __anonCompField___anonunion_583_106 ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_586 {
   struct list_head name_link ;
   struct assoc_array keys ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_585 {
   union key_payload payload ;
   struct __anonstruct_586 __anonCompField___anonunion_585_108 ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key {
   refcount_t usage ;
   key_serial_t serial ;
   union __anonunion_581 __anonCompField_key_104 ;
   struct rw_semaphore sem ;
   struct key_user *user ;
   void *security ;
   union __anonunion_582 __anonCompField_key_105 ;
   time64_t last_used_at ;
   kuid_t uid ;
   kgid_t gid ;
   key_perm_t perm ;
   unsigned short quotalen ;
   unsigned short datalen ;
   short state ;
   unsigned long flags ;
   union __anonunion_583 __anonCompField_key_107 ;
   union __anonunion_585 __anonCompField_key_109 ;
   struct key_restriction *restrict_link ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/user.h"
struct user_struct {
   refcount_t __count ;
   atomic_t processes ;
   atomic_t sigpending ;
   atomic_t fanotify_listeners ;
   atomic_long_t epoll_watches ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   unsigned long unix_inflight ;
   atomic_long_t pipe_bufs ;
   struct hlist_node uidhash_node ;
   kuid_t uid ;
   atomic_long_t locked_vm ;
   struct ratelimit_state ratelimit ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
struct group_info {
   atomic_t usage ;
   int ngroups ;
   kgid_t gid[0U] ;
} __attribute__((__designated_init__));
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
union __anonunion_589 {
   int non_rcu ;
   struct callback_head rcu ;
};
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
struct cred {
   atomic_t usage ;
   atomic_t subscribers ;
   void *put_addr ;
   unsigned int magic ;
   kuid_t uid ;
   kgid_t gid ;
   kuid_t suid ;
   kgid_t sgid ;
   kuid_t euid ;
   kgid_t egid ;
   kuid_t fsuid ;
   kgid_t fsgid ;
   unsigned int securebits ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_bset ;
   kernel_cap_t cap_ambient ;
   unsigned char jit_keyring ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct key *thread_keyring ;
   struct key *request_key_auth ;
   void *security ;
   struct user_struct *user ;
   struct user_namespace *user_ns ;
   struct group_info *group_info ;
   union __anonunion_589 __anonCompField_cred_110 ;
} __attribute__((__designated_init__));
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seq_file.h"
struct seq_file {
   char *buf ;
   size_t size ;
   size_t from ;
   size_t count ;
   size_t pad_until ;
   loff_t index ;
   loff_t read_pos ;
   u64 version ;
   struct mutex lock ;
   struct seq_operations *op ;
   int poll_event ;
   struct file *file ;
   void *private ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seq_file.h"
struct seq_operations {
   void *(*start)(struct seq_file *, loff_t *) ;
   void (*stop)(struct seq_file *, void *) ;
   void *(*next)(struct seq_file *, void *, loff_t *) ;
   int (*show)(struct seq_file *, void *) ;
};
#line 275  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct __anonstruct_possible_net_t_590 {
   struct net *net ;
};
#line 275  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
typedef struct __anonstruct_possible_net_t_590 possible_net_t;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_ets {
   __u8 willing ;
   __u8 ets_cap ;
   __u8 cbs ;
   __u8 tc_tx_bw[8U] ;
   __u8 tc_rx_bw[8U] ;
   __u8 tc_tsa[8U] ;
   __u8 prio_tc[8U] ;
   __u8 tc_reco_bw[8U] ;
   __u8 tc_reco_tsa[8U] ;
   __u8 reco_prio_tc[8U] ;
};
#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_maxrate {
   __u64 tc_maxrate[8U] ;
};
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_qcn {
   __u8 rpg_enable[8U] ;
   __u32 rppp_max_rps[8U] ;
   __u32 rpg_time_reset[8U] ;
   __u32 rpg_byte_reset[8U] ;
   __u32 rpg_threshold[8U] ;
   __u32 rpg_max_rate[8U] ;
   __u32 rpg_ai_rate[8U] ;
   __u32 rpg_hai_rate[8U] ;
   __u32 rpg_gd[8U] ;
   __u32 rpg_min_dec_fac[8U] ;
   __u32 rpg_min_rate[8U] ;
   __u32 cndd_state_machine[8U] ;
};
#line 141  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_qcn_stats {
   __u64 rppp_rp_centiseconds[8U] ;
   __u32 rppp_created_rps[8U] ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_pfc {
   __u8 pfc_cap ;
   __u8 pfc_en ;
   __u8 mbc ;
   __u16 delay ;
   __u64 requests[8U] ;
   __u64 indications[8U] ;
};
#line 168  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcbnl_buffer {
   __u8 prio2buffer[8U] ;
   __u32 buffer_size[8U] ;
   __u32 total_size ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct cee_pg {
   __u8 willing ;
   __u8 error ;
   __u8 pg_en ;
   __u8 tcs_supported ;
   __u8 pg_bw[8U] ;
   __u8 prio_pg[8U] ;
};
#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct cee_pfc {
   __u8 willing ;
   __u8 error ;
   __u8 pfc_en ;
   __u8 tcs_supported ;
};
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcb_app {
   __u8 selector ;
   __u8 priority ;
   __u16 protocol ;
};
#line 259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcb_peer_app_info {
   __u8 willing ;
   __u8 error ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dcbnl.h"
struct dcbnl_rtnl_ops {
   int (*ieee_getets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_setets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_getmaxrate)(struct net_device *, struct ieee_maxrate *) ;
   int (*ieee_setmaxrate)(struct net_device *, struct ieee_maxrate *) ;
   int (*ieee_getqcn)(struct net_device *, struct ieee_qcn *) ;
   int (*ieee_setqcn)(struct net_device *, struct ieee_qcn *) ;
   int (*ieee_getqcnstats)(struct net_device *, struct ieee_qcn_stats *) ;
   int (*ieee_getpfc)(struct net_device *, struct ieee_pfc *) ;
   int (*ieee_setpfc)(struct net_device *, struct ieee_pfc *) ;
   int (*ieee_getapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_setapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_delapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_peer_getets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_peer_getpfc)(struct net_device *, struct ieee_pfc *) ;
   u8 (*getstate)(struct net_device *) ;
   u8 (*setstate)(struct net_device *, u8 ) ;
   void (*getpermhwaddr)(struct net_device *, u8 *) ;
   void (*setpgtccfgtx)(struct net_device *, int , u8 , u8 , u8 , u8 ) ;
   void (*setpgbwgcfgtx)(struct net_device *, int , u8 ) ;
   void (*setpgtccfgrx)(struct net_device *, int , u8 , u8 , u8 , u8 ) ;
   void (*setpgbwgcfgrx)(struct net_device *, int , u8 ) ;
   void (*getpgtccfgtx)(struct net_device *, int , u8 *, u8 *, u8 *, u8 *) ;
   void (*getpgbwgcfgtx)(struct net_device *, int , u8 *) ;
   void (*getpgtccfgrx)(struct net_device *, int , u8 *, u8 *, u8 *, u8 *) ;
   void (*getpgbwgcfgrx)(struct net_device *, int , u8 *) ;
   void (*setpfccfg)(struct net_device *, int , u8 ) ;
   void (*getpfccfg)(struct net_device *, int , u8 *) ;
   u8 (*setall)(struct net_device *) ;
   u8 (*getcap)(struct net_device *, int , u8 *) ;
   int (*getnumtcs)(struct net_device *, int , u8 *) ;
   int (*setnumtcs)(struct net_device *, int , u8 ) ;
   u8 (*getpfcstate)(struct net_device *) ;
   void (*setpfcstate)(struct net_device *, u8 ) ;
   void (*getbcncfg)(struct net_device *, int , u32 *) ;
   void (*setbcncfg)(struct net_device *, int , u32 ) ;
   void (*getbcnrp)(struct net_device *, int , u8 *) ;
   void (*setbcnrp)(struct net_device *, int , u8 ) ;
   int (*setapp)(struct net_device *, u8 , u16 , u8 ) ;
   int (*getapp)(struct net_device *, u8 , u16 ) ;
   u8 (*getfeatcfg)(struct net_device *, int , u8 *) ;
   u8 (*setfeatcfg)(struct net_device *, int , u8 ) ;
   u8 (*getdcbx)(struct net_device *) ;
   u8 (*setdcbx)(struct net_device *, u8 ) ;
   int (*peer_getappinfo)(struct net_device *, struct dcb_peer_app_info *, u16 *) ;
   int (*peer_getapptable)(struct net_device *, struct dcb_app *) ;
   int (*cee_peer_getpg)(struct net_device *, struct cee_pg *) ;
   int (*cee_peer_getpfc)(struct net_device *, struct cee_pfc *) ;
   int (*dcbnl_getbuffer)(struct net_device *, struct dcbnl_buffer *) ;
   int (*dcbnl_setbuffer)(struct net_device *, struct dcbnl_buffer *) ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/taskstats.h"
struct taskstats {
   __u16 version ;
   __u32 ac_exitcode ;
   __u8 ac_flag ;
   __u8 ac_nice ;
   __u64 cpu_count ;
   __u64 cpu_delay_total ;
   __u64 blkio_count ;
   __u64 blkio_delay_total ;
   __u64 swapin_count ;
   __u64 swapin_delay_total ;
   __u64 cpu_run_real_total ;
   __u64 cpu_run_virtual_total ;
   char ac_comm[32U] ;
   __u8 ac_sched ;
   __u8 ac_pad[3U] ;
   __u32 ac_uid ;
   __u32 ac_gid ;
   __u32 ac_pid ;
   __u32 ac_ppid ;
   __u32 ac_btime ;
   __u64 ac_etime ;
   __u64 ac_utime ;
   __u64 ac_stime ;
   __u64 ac_minflt ;
   __u64 ac_majflt ;
   __u64 coremem ;
   __u64 virtmem ;
   __u64 hiwater_rss ;
   __u64 hiwater_vm ;
   __u64 read_char ;
   __u64 write_char ;
   __u64 read_syscalls ;
   __u64 write_syscalls ;
   __u64 read_bytes ;
   __u64 write_bytes ;
   __u64 cancelled_write_bytes ;
   __u64 nvcsw ;
   __u64 nivcsw ;
   __u64 ac_utimescaled ;
   __u64 ac_stimescaled ;
   __u64 cpu_scaled_run_real_total ;
   __u64 freepages_count ;
   __u64 freepages_delay_total ;
   __u64 thrashing_count ;
   __u64 thrashing_delay_total ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/cgroupstats.h"
struct mnt_namespace;
#line 60 
struct uts_namespace;
#line 61 
struct ipc_namespace;
#line 62 
struct cgroup_namespace;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nsproxy.h"
struct nsproxy {
   atomic_t count ;
   struct uts_namespace *uts_ns ;
   struct ipc_namespace *ipc_ns ;
   struct mnt_namespace *mnt_ns ;
   struct pid_namespace *pid_ns_for_children ;
   struct net *net_ns ;
   struct cgroup_namespace *cgroup_ns ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct uid_gid_extent {
   u32 first ;
   u32 lower_first ;
   u32 count ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct __anonstruct_592 {
   struct uid_gid_extent *forward ;
   struct uid_gid_extent *reverse ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
union __anonunion_591 {
   struct uid_gid_extent extent[5U] ;
   struct __anonstruct_592 __anonCompField___anonunion_591_111 ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct uid_gid_map {
   u32 nr_extents ;
   union __anonunion_591 __anonCompField_uid_gid_map_112 ;
};
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct user_namespace {
   struct uid_gid_map uid_map ;
   struct uid_gid_map gid_map ;
   struct uid_gid_map projid_map ;
   atomic_t count ;
   struct user_namespace *parent ;
   int level ;
   kuid_t owner ;
   kgid_t group ;
   struct ns_common ns ;
   unsigned long flags ;
   struct list_head keyring_name_list ;
   struct key *user_keyring_register ;
   struct rw_semaphore keyring_sem ;
   struct key *persistent_keyring_register ;
   struct work_struct work ;
   struct ctl_table_set set ;
   struct ctl_table_header *sysctls ;
   struct ucounts *ucounts ;
   int ucount_max[9U] ;
} __attribute__((__designated_init__));
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct ucounts {
   struct hlist_node node ;
   struct user_namespace *ns ;
   kuid_t uid ;
   int count ;
   atomic_t ucount[9U] ;
};
#line 139 
enum irqreturn {
    IRQ_NONE = 0,
    IRQ_HANDLED = 1,
    IRQ_WAKE_THREAD = 2
};
#line 145  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
typedef enum irqreturn irqreturn_t;
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_insn {
   __u8 code ;
   __u8 dst_reg : 4 ;
   __u8 src_reg : 4 ;
   __s16 off ;
   __s32 imm ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_cgroup_storage_key {
   __u64 cgroup_inode_id ;
   __u32 attach_type ;
};
#line 110 
enum bpf_map_type {
    BPF_MAP_TYPE_UNSPEC = 0,
    BPF_MAP_TYPE_HASH = 1,
    BPF_MAP_TYPE_ARRAY = 2,
    BPF_MAP_TYPE_PROG_ARRAY = 3,
    BPF_MAP_TYPE_PERF_EVENT_ARRAY = 4,
    BPF_MAP_TYPE_PERCPU_HASH = 5,
    BPF_MAP_TYPE_PERCPU_ARRAY = 6,
    BPF_MAP_TYPE_STACK_TRACE = 7,
    BPF_MAP_TYPE_CGROUP_ARRAY = 8,
    BPF_MAP_TYPE_LRU_HASH = 9,
    BPF_MAP_TYPE_LRU_PERCPU_HASH = 10,
    BPF_MAP_TYPE_LPM_TRIE = 11,
    BPF_MAP_TYPE_ARRAY_OF_MAPS = 12,
    BPF_MAP_TYPE_HASH_OF_MAPS = 13,
    BPF_MAP_TYPE_DEVMAP = 14,
    BPF_MAP_TYPE_SOCKMAP = 15,
    BPF_MAP_TYPE_CPUMAP = 16,
    BPF_MAP_TYPE_XSKMAP = 17,
    BPF_MAP_TYPE_SOCKHASH = 18,
    BPF_MAP_TYPE_CGROUP_STORAGE = 19,
    BPF_MAP_TYPE_REUSEPORT_SOCKARRAY = 20,
    BPF_MAP_TYPE_PERCPU_CGROUP_STORAGE = 21,
    BPF_MAP_TYPE_QUEUE = 22,
    BPF_MAP_TYPE_STACK = 23,
    BPF_MAP_TYPE_SK_STORAGE = 24,
    BPF_MAP_TYPE_DEVMAP_HASH = 25
};
#line 139 
enum bpf_prog_type {
    BPF_PROG_TYPE_UNSPEC = 0,
    BPF_PROG_TYPE_SOCKET_FILTER = 1,
    BPF_PROG_TYPE_KPROBE = 2,
    BPF_PROG_TYPE_SCHED_CLS = 3,
    BPF_PROG_TYPE_SCHED_ACT = 4,
    BPF_PROG_TYPE_TRACEPOINT = 5,
    BPF_PROG_TYPE_XDP = 6,
    BPF_PROG_TYPE_PERF_EVENT = 7,
    BPF_PROG_TYPE_CGROUP_SKB = 8,
    BPF_PROG_TYPE_CGROUP_SOCK = 9,
    BPF_PROG_TYPE_LWT_IN = 10,
    BPF_PROG_TYPE_LWT_OUT = 11,
    BPF_PROG_TYPE_LWT_XMIT = 12,
    BPF_PROG_TYPE_SOCK_OPS = 13,
    BPF_PROG_TYPE_SK_SKB = 14,
    BPF_PROG_TYPE_CGROUP_DEVICE = 15,
    BPF_PROG_TYPE_SK_MSG = 16,
    BPF_PROG_TYPE_RAW_TRACEPOINT = 17,
    BPF_PROG_TYPE_CGROUP_SOCK_ADDR = 18,
    BPF_PROG_TYPE_LWT_SEG6LOCAL = 19,
    BPF_PROG_TYPE_LIRC_MODE2 = 20,
    BPF_PROG_TYPE_SK_REUSEPORT = 21,
    BPF_PROG_TYPE_FLOW_DISSECTOR = 22,
    BPF_PROG_TYPE_CGROUP_SYSCTL = 23,
    BPF_PROG_TYPE_RAW_TRACEPOINT_WRITABLE = 24,
    BPF_PROG_TYPE_CGROUP_SOCKOPT = 25,
    BPF_PROG_TYPE_TRACING = 26
};
#line 169 
enum bpf_attach_type {
    BPF_CGROUP_INET_INGRESS = 0,
    BPF_CGROUP_INET_EGRESS = 1,
    BPF_CGROUP_INET_SOCK_CREATE = 2,
    BPF_CGROUP_SOCK_OPS = 3,
    BPF_SK_SKB_STREAM_PARSER = 4,
    BPF_SK_SKB_STREAM_VERDICT = 5,
    BPF_CGROUP_DEVICE = 6,
    BPF_SK_MSG_VERDICT = 7,
    BPF_CGROUP_INET4_BIND = 8,
    BPF_CGROUP_INET6_BIND = 9,
    BPF_CGROUP_INET4_CONNECT = 10,
    BPF_CGROUP_INET6_CONNECT = 11,
    BPF_CGROUP_INET4_POST_BIND = 12,
    BPF_CGROUP_INET6_POST_BIND = 13,
    BPF_CGROUP_UDP4_SENDMSG = 14,
    BPF_CGROUP_UDP6_SENDMSG = 15,
    BPF_LIRC_MODE2 = 16,
    BPF_FLOW_DISSECTOR = 17,
    BPF_CGROUP_SYSCTL = 18,
    BPF_CGROUP_UDP4_RECVMSG = 19,
    BPF_CGROUP_UDP6_RECVMSG = 20,
    BPF_CGROUP_GETSOCKOPT = 21,
    BPF_CGROUP_SETSOCKOPT = 22,
    BPF_TRACE_RAW_TP = 23,
    BPF_TRACE_FENTRY = 24,
    BPF_TRACE_FEXIT = 25,
    __MAX_BPF_ATTACH_TYPE = 26
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_594 {
   __u32 map_type ;
   __u32 key_size ;
   __u32 value_size ;
   __u32 max_entries ;
   __u32 map_flags ;
   __u32 inner_map_fd ;
   __u32 numa_node ;
   char map_name[16U] ;
   __u32 map_ifindex ;
   __u32 btf_fd ;
   __u32 btf_key_type_id ;
   __u32 btf_value_type_id ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union __anonunion_596 {
   __u64 value ;
   __u64 next_key ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_595 {
   __u32 map_fd ;
   __u64 key ;
   union __anonunion_596 __anonCompField___anonstruct_595_115 ;
   __u64 flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_597 {
   __u32 prog_type ;
   __u32 insn_cnt ;
   __u64 insns ;
   __u64 license ;
   __u32 log_level ;
   __u32 log_size ;
   __u64 log_buf ;
   __u32 kern_version ;
   __u32 prog_flags ;
   char prog_name[16U] ;
   __u32 prog_ifindex ;
   __u32 expected_attach_type ;
   __u32 prog_btf_fd ;
   __u32 func_info_rec_size ;
   __u64 func_info ;
   __u32 func_info_cnt ;
   __u32 line_info_rec_size ;
   __u64 line_info ;
   __u32 line_info_cnt ;
   __u32 attach_btf_id ;
   __u32 attach_prog_fd ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_598 {
   __u64 pathname ;
   __u32 bpf_fd ;
   __u32 file_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_599 {
   __u32 target_fd ;
   __u32 attach_bpf_fd ;
   __u32 attach_type ;
   __u32 attach_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_test_600 {
   __u32 prog_fd ;
   __u32 retval ;
   __u32 data_size_in ;
   __u32 data_size_out ;
   __u64 data_in ;
   __u64 data_out ;
   __u32 repeat ;
   __u32 duration ;
   __u32 ctx_size_in ;
   __u32 ctx_size_out ;
   __u64 ctx_in ;
   __u64 ctx_out ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union __anonunion_602 {
   __u32 start_id ;
   __u32 prog_id ;
   __u32 map_id ;
   __u32 btf_id ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_601 {
   union __anonunion_602 __anonCompField___anonstruct_601_120 ;
   __u32 next_id ;
   __u32 open_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_info_603 {
   __u32 bpf_fd ;
   __u32 info_len ;
   __u64 info ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_query_604 {
   __u32 target_fd ;
   __u32 attach_type ;
   __u32 query_flags ;
   __u32 attach_flags ;
   __u64 prog_ids ;
   __u32 prog_cnt ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_raw_tracepoint_605 {
   __u64 name ;
   __u32 prog_fd ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_606 {
   __u64 btf ;
   __u64 btf_log_buf ;
   __u32 btf_size ;
   __u32 btf_log_size ;
   __u32 btf_log_level ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_task_fd_query_607 {
   __u32 pid ;
   __u32 fd ;
   __u32 flags ;
   __u32 buf_len ;
   __u64 buf ;
   __u32 prog_id ;
   __u32 fd_type ;
   __u64 probe_offset ;
   __u64 probe_addr ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union bpf_attr {
   struct __anonstruct_594 __anonCompField_bpf_attr_114 ;
   struct __anonstruct_595 __anonCompField_bpf_attr_116 ;
   struct __anonstruct_597 __anonCompField_bpf_attr_117 ;
   struct __anonstruct_598 __anonCompField_bpf_attr_118 ;
   struct __anonstruct_599 __anonCompField_bpf_attr_119 ;
   struct __anonstruct_test_600 test ;
   struct __anonstruct_601 __anonCompField_bpf_attr_121 ;
   struct __anonstruct_info_603 info ;
   struct __anonstruct_query_604 query ;
   struct __anonstruct_raw_tracepoint_605 raw_tracepoint ;
   struct __anonstruct_606 __anonCompField_bpf_attr_122 ;
   struct __anonstruct_task_fd_query_607 task_fd_query ;
} __attribute__((__aligned__(8)));
#line 3653  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_func_info {
   __u32 insn_off ;
   __u32 type_id ;
};
#line 3661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_line_info {
   __u32 insn_off ;
   __u32 file_name_off ;
   __u32 line_off ;
   __u32 line_col ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree_latch.h"
struct latch_tree_node {
   struct rb_node node[2U] ;
};
#line 215 
struct bpf_prog_aux;
#line 216 
struct bpf_map;
#line 217 
struct btf;
#line 218 
struct btf_type;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_ops {
   int (*map_alloc_check)(union bpf_attr *) ;
   struct bpf_map *(*map_alloc)(union bpf_attr *) ;
   void (*map_release)(struct bpf_map *, struct file *) ;
   void (*map_free)(struct bpf_map *) ;
   int (*map_get_next_key)(struct bpf_map *, void *, void *) ;
   void (*map_release_uref)(struct bpf_map *) ;
   void *(*map_lookup_elem_sys_only)(struct bpf_map *, void *) ;
   void *(*map_lookup_elem)(struct bpf_map *, void *) ;
   int (*map_update_elem)(struct bpf_map *, void *, void *, u64 ) ;
   int (*map_delete_elem)(struct bpf_map *, void *) ;
   int (*map_push_elem)(struct bpf_map *, void *, u64 ) ;
   int (*map_pop_elem)(struct bpf_map *, void *) ;
   int (*map_peek_elem)(struct bpf_map *, void *) ;
   void *(*map_fd_get_ptr)(struct bpf_map *, struct file *, int ) ;
   void (*map_fd_put_ptr)(void *) ;
   u32 (*map_gen_lookup)(struct bpf_map *, struct bpf_insn *) ;
   u32 (*map_fd_sys_lookup_elem)(void *) ;
   void (*map_seq_show_elem)(struct bpf_map *, void *, struct seq_file *) ;
   int (*map_check_btf)(struct bpf_map *, struct btf *, struct btf_type *, struct btf_type *) ;
   int (*map_poke_track)(struct bpf_map *, struct bpf_prog_aux *) ;
   void (*map_poke_untrack)(struct bpf_map *, struct bpf_prog_aux *) ;
   void (*map_poke_run)(struct bpf_map *, u32 , struct bpf_prog *, struct bpf_prog *) ;
   int (*map_direct_value_addr)(struct bpf_map *, u64 *, u32 ) ;
   int (*map_direct_value_meta)(struct bpf_map *, u64 , u32 *) ;
   int (*map_mmap)(struct bpf_map *, struct vm_area_struct *) ;
};
#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_memory {
   u32 pages ;
   struct user_struct *user ;
};
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map {
   struct bpf_map_ops *ops ;
   struct bpf_map *inner_map_meta ;
   void *security ;
   enum bpf_map_type map_type ;
   u32 key_size ;
   u32 value_size ;
   u32 max_entries ;
   u32 map_flags ;
   int spin_lock_off ;
   u32 id ;
   int numa_node ;
   u32 btf_key_type_id ;
   u32 btf_value_type_id ;
   struct btf *btf ;
   struct bpf_map_memory memory ;
   char name[16U] ;
   bool unpriv_array ;
   bool frozen ;
   atomic64_t refcnt ;
   atomic64_t usercnt ;
   struct work_struct work ;
   struct mutex freeze_mutex ;
   u64 writecnt ;
};
#line 151 
struct bpf_offload_dev;
#line 152 
struct bpf_offloaded_map;
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_dev_ops {
   int (*map_get_next_key)(struct bpf_offloaded_map *, void *, void *) ;
   int (*map_lookup_elem)(struct bpf_offloaded_map *, void *, void *) ;
   int (*map_update_elem)(struct bpf_offloaded_map *, void *, void *, u64 ) ;
   int (*map_delete_elem)(struct bpf_offloaded_map *, void *) ;
};
#line 166  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_offloaded_map {
   struct bpf_map map ;
   struct net_device *netdev ;
   struct bpf_map_dev_ops *dev_ops ;
   void *dev_priv ;
   struct list_head offloads ;
};
#line 327  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_ops {
   int (*test_run)(struct bpf_prog *, union bpf_attr *, union bpf_attr *) ;
};
#line 369  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_offload {
   struct bpf_prog *prog ;
   struct net_device *netdev ;
   struct bpf_offload_dev *offdev ;
   void *dev_priv ;
   struct list_head offloads ;
   bool dev_state ;
   bool opt_failed ;
   void *jited_image ;
   u32 jited_len ;
};
#line 394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_stats {
   u64 cnt ;
   u64 nsecs ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 400  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct btf_func_model {
   u8 ret_size ;
   u8 nr_args ;
   u8 arg_size[12U] ;
};
#line 447 
enum bpf_tramp_prog_type {
    BPF_TRAMP_FENTRY = 0,
    BPF_TRAMP_FEXIT = 1,
    BPF_TRAMP_MAX = 2
};
#line 454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct __anonstruct_func_640 {
   struct btf_func_model model ;
   void *addr ;
   bool ftrace_managed ;
};
#line 454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_trampoline {
   struct hlist_node hlist ;
   struct mutex mutex ;
   refcount_t refcnt ;
   u64 key ;
   struct __anonstruct_func_640 func ;
   struct hlist_head progs_hlist[2U] ;
   int progs_cnt[2U] ;
   void *image ;
   u64 selector ;
};
#line 495  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_func_info_aux {
   bool unreliable ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct __anonstruct_tail_call_642 {
   struct bpf_map *map ;
   u32 key ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
union __anonunion_641 {
   struct __anonstruct_tail_call_642 tail_call ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_jit_poke_descriptor {
   void *ip ;
   union __anonunion_641 __anonCompField_bpf_jit_poke_descriptor_147 ;
   bool ip_stable ;
   u8 adj_off ;
   u16 reason ;
};
#line 517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
union __anonunion_643 {
   struct work_struct work ;
   struct callback_head rcu ;
};
#line 517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_aux {
   atomic64_t refcnt ;
   u32 used_map_cnt ;
   u32 max_ctx_offset ;
   u32 max_pkt_offset ;
   u32 max_tp_access ;
   u32 stack_depth ;
   u32 id ;
   u32 func_cnt ;
   u32 func_idx ;
   u32 attach_btf_id ;
   struct bpf_prog *linked_prog ;
   bool verifier_zext ;
   bool offload_requested ;
   bool attach_btf_trace ;
   bool func_proto_unreliable ;
   enum bpf_tramp_prog_type trampoline_prog_type ;
   struct bpf_trampoline *trampoline ;
   struct hlist_node tramp_hlist ;
   struct btf_type *attach_func_proto ;
   char *attach_func_name ;
   struct bpf_prog **func ;
   void *jit_data ;
   struct bpf_jit_poke_descriptor *poke_tab ;
   u32 size_poke_tab ;
   struct latch_tree_node ksym_tnode ;
   struct list_head ksym_lnode ;
   struct bpf_prog_ops *ops ;
   struct bpf_map **used_maps ;
   struct bpf_prog *prog ;
   struct user_struct *user ;
   u64 load_time ;
   struct bpf_map *cgroup_storage[2U] ;
   char name[16U] ;
   void *security ;
   struct bpf_prog_offload *offload ;
   struct btf *btf ;
   struct bpf_func_info *func_info ;
   struct bpf_func_info_aux *func_info_aux ;
   struct bpf_line_info *linfo ;
   void **jited_linfo ;
   u32 func_info_cnt ;
   u32 nr_linfo ;
   u32 linfo_idx ;
   u32 num_exentries ;
   struct exception_table_entry *extable ;
   struct bpf_prog_stats *stats ;
   union __anonunion_643 __anonCompField_bpf_prog_aux_148 ;
};
#line 686 
struct bpf_cgroup_storage;
#line 686  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_array_item {
   struct bpf_prog *prog ;
   struct bpf_cgroup_storage *cgroup_storage[2U] ;
};
#line 691  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_array {
   struct callback_head rcu ;
   struct bpf_prog_array_item items[0U] ;
};
#line 1335 
struct cgroup;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_cgroup_storage_map;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_storage_buffer {
   struct callback_head rcu ;
   char data[0U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
union __anonunion_645 {
   struct bpf_storage_buffer *buf ;
   void *percpu_buf ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_cgroup_storage {
   union __anonunion_645 __anonCompField_bpf_cgroup_storage_150 ;
   struct bpf_cgroup_storage_map *map ;
   struct bpf_cgroup_storage_key key ;
   struct list_head list ;
   struct rb_node node ;
   struct callback_head rcu ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct cgroup_bpf {
   struct bpf_prog_array *effective[26U] ;
   struct list_head progs[26U] ;
   u32 flags[26U] ;
   struct bpf_prog_array *inactive ;
   struct percpu_ref refcnt ;
   struct work_struct release_work ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_work;
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_worker {
   unsigned int flags ;
   raw_spinlock_t lock ;
   struct list_head work_list ;
   struct list_head delayed_work_list ;
   struct task_struct *task ;
   struct kthread_work *current_work ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_work {
   struct list_head node ;
   void (*func)(struct kthread_work *) ;
   struct kthread_worker *worker ;
   int canceling ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_delayed_work {
   struct kthread_work work ;
   struct timer_list timer ;
};
#line 199 
struct cgroup_subsys_state;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/psi_types.h"
struct psi_group_cpu {
   seqcount_t seq ;
   unsigned int tasks[3U] ;
   u32 state_mask ;
   u32 times[6U] ;
   u64 state_start ;
   u32 times_prev[2U][6U] ;
};
#line 96 
struct psi_group;
#line 128  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/psi_types.h"
struct psi_group {
   struct mutex avgs_lock ;
   struct psi_group_cpu *pcpu ;
   u64 avg_total[5U] ;
   u64 avg_last_update ;
   u64 avg_next_update ;
   struct delayed_work avgs_work ;
   u64 total[2U][5U] ;
   unsigned long avg[5U][3U] ;
   atomic_t poll_scheduled ;
   struct kthread_worker *poll_kworker ;
   struct kthread_delayed_work poll_work ;
   struct mutex trigger_lock ;
   struct list_head triggers ;
   u32 nr_triggers[5U] ;
   u32 poll_states ;
   u64 poll_min_period ;
   u64 polling_total[5U] ;
   u64 polling_next_update ;
   u64 polling_until ;
};
#line 166 
struct cgroup_root;
#line 167 
struct cgroup_subsys;
#line 168 
struct cgroup_taskset;
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_file {
   struct kernfs_node *kn ;
   unsigned long notified_at ;
   struct timer_list notify_timer ;
};
#line 133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_subsys_state {
   struct cgroup *cgroup ;
   struct cgroup_subsys *ss ;
   struct percpu_ref refcnt ;
   struct list_head sibling ;
   struct list_head children ;
   struct list_head rstat_css_node ;
   int id ;
   unsigned int flags ;
   u64 serial_nr ;
   atomic_t online_cnt ;
   struct work_struct destroy_work ;
   struct rcu_work destroy_rwork ;
   struct cgroup_subsys_state *parent ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct css_set {
   struct cgroup_subsys_state *subsys[14U] ;
   refcount_t refcount ;
   struct css_set *dom_cset ;
   struct cgroup *dfl_cgrp ;
   int nr_tasks ;
   struct list_head tasks ;
   struct list_head mg_tasks ;
   struct list_head dying_tasks ;
   struct list_head task_iters ;
   struct list_head e_cset_node[14U] ;
   struct list_head threaded_csets ;
   struct list_head threaded_csets_node ;
   struct hlist_node hlist ;
   struct list_head cgrp_links ;
   struct list_head mg_preload_node ;
   struct list_head mg_node ;
   struct cgroup *mg_src_cgrp ;
   struct cgroup *mg_dst_cgrp ;
   struct css_set *mg_dst_cset ;
   bool dead ;
   struct callback_head callback_head ;
};
#line 279  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_base_stat {
   struct task_cputime cputime ;
};
#line 303  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_rstat_cpu {
   struct u64_stats_sync bsync ;
   struct cgroup_base_stat bstat ;
   struct cgroup_base_stat last_bstat ;
   struct cgroup *updated_children ;
   struct cgroup *updated_next ;
};
#line 332  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_freezer_state {
   bool freeze ;
   int e_freeze ;
   int nr_frozen_descendants ;
   int nr_frozen_tasks ;
};
#line 351  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup {
   struct cgroup_subsys_state self ;
   unsigned long flags ;
   int level ;
   int max_depth ;
   int nr_descendants ;
   int nr_dying_descendants ;
   int max_descendants ;
   int nr_populated_csets ;
   int nr_populated_domain_children ;
   int nr_populated_threaded_children ;
   int nr_threaded_children ;
   struct kernfs_node *kn ;
   struct cgroup_file procs_file ;
   struct cgroup_file events_file ;
   u16 subtree_control ;
   u16 subtree_ss_mask ;
   u16 old_subtree_control ;
   u16 old_subtree_ss_mask ;
   struct cgroup_subsys_state *subsys[14U] ;
   struct cgroup_root *root ;
   struct list_head cset_links ;
   struct list_head e_csets[14U] ;
   struct cgroup *dom_cgrp ;
   struct cgroup *old_dom_cgrp ;
   struct cgroup_rstat_cpu *rstat_cpu ;
   struct list_head rstat_css_list ;
   struct cgroup_base_stat last_bstat ;
   struct cgroup_base_stat bstat ;
   struct prev_cputime prev_cputime ;
   struct list_head pidlists ;
   struct mutex pidlist_mutex ;
   wait_queue_head_t offline_waitq ;
   struct work_struct release_agent_work ;
   struct psi_group psi ;
   struct cgroup_bpf bpf ;
   atomic_t congestion_count ;
   struct cgroup_freezer_state freezer ;
   u64 ancestor_ids[] ;
};
#line 489  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_root {
   struct kernfs_root *kf_root ;
   unsigned int subsys_mask ;
   int hierarchy_id ;
   struct cgroup cgrp ;
   u64 cgrp_ancestor_id_storage ;
   atomic_t nr_cgrps ;
   struct list_head root_list ;
   unsigned int flags ;
   char release_agent_path[4096U] ;
   char name[64U] ;
};
#line 527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cftype {
   char name[64U] ;
   unsigned long private ;
   size_t max_write_len ;
   unsigned int flags ;
   unsigned int file_offset ;
   struct cgroup_subsys *ss ;
   struct list_head node ;
   struct kernfs_ops *kf_ops ;
   int (*open)(struct kernfs_open_file *) ;
   void (*release)(struct kernfs_open_file *) ;
   u64 (*read_u64)(struct cgroup_subsys_state *, struct cftype *) ;
   s64 (*read_s64)(struct cgroup_subsys_state *, struct cftype *) ;
   int (*seq_show)(struct seq_file *, void *) ;
   void *(*seq_start)(struct seq_file *, loff_t *) ;
   void *(*seq_next)(struct seq_file *, void *, loff_t *) ;
   void (*seq_stop)(struct seq_file *, void *) ;
   int (*write_u64)(struct cgroup_subsys_state *, struct cftype *, u64 ) ;
   int (*write_s64)(struct cgroup_subsys_state *, struct cftype *, s64 ) ;
   ssize_t (*write)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   __poll_t (*poll)(struct kernfs_open_file *, struct poll_table_struct *) ;
   struct lock_class_key lockdep_key ;
};
#line 616  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_subsys {
   struct cgroup_subsys_state *(*css_alloc)(struct cgroup_subsys_state *) ;
   int (*css_online)(struct cgroup_subsys_state *) ;
   void (*css_offline)(struct cgroup_subsys_state *) ;
   void (*css_released)(struct cgroup_subsys_state *) ;
   void (*css_free)(struct cgroup_subsys_state *) ;
   void (*css_reset)(struct cgroup_subsys_state *) ;
   void (*css_rstat_flush)(struct cgroup_subsys_state *, int ) ;
   int (*css_extra_stat_show)(struct seq_file *, struct cgroup_subsys_state *) ;
   int (*can_attach)(struct cgroup_taskset *) ;
   void (*cancel_attach)(struct cgroup_taskset *) ;
   void (*attach)(struct cgroup_taskset *) ;
   void (*post_attach)(void) ;
   int (*can_fork)(struct task_struct *) ;
   void (*cancel_fork)(struct task_struct *) ;
   void (*fork)(struct task_struct *) ;
   void (*exit)(struct task_struct *) ;
   void (*release)(struct task_struct *) ;
   void (*bind)(struct cgroup_subsys_state *) ;
   bool early_init : 1 ;
   bool implicit_on_dfl : 1 ;
   bool threaded : 1 ;
   bool broken_hierarchy : 1 ;
   bool warned_broken_hierarchy : 1 ;
   int id ;
   char *name ;
   char *legacy_name ;
   struct cgroup_root *root ;
   struct idr css_idr ;
   struct list_head cfts ;
   struct cftype *dfl_cftypes ;
   struct cftype *legacy_cftypes ;
   unsigned int depends_on ;
};
#line 783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct __anonstruct_647 {
   u8 is_data ;
   u8 padding ;
   u16 prioidx ;
   u32 classid ;
} __attribute__((__packed__));
#line 783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
union __anonunion_646 {
   struct __anonstruct_647 __anonCompField___anonunion_646_151 ;
   u64 val ;
};
#line 783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct sock_cgroup_data {
   union __anonunion_646 __anonCompField_sock_cgroup_data_152 ;
};
#line 848  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup.h"
struct cgroup_namespace {
   refcount_t count ;
   struct ns_common ns ;
   struct user_namespace *user_ns ;
   struct ucounts *ucounts ;
   struct css_set *root_cset ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netprio_cgroup.h"
struct netprio_map {
   struct callback_head rcu ;
   u32 priomap_len ;
   u32 priomap[] ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_mem_info {
   u32 type ;
   u32 id ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_rxq_info {
   struct net_device *dev ;
   u32 queue_index ;
   u32 reg_state ;
   struct xdp_mem_info mem ;
} __attribute__((__aligned__(64)));
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_frame {
   void *data ;
   u16 len ;
   u16 headroom ;
   u16 metasize ;
   struct xdp_mem_info mem ;
   struct net_device *dev_rx ;
};
#line 175 
struct netdev_bpf;
#line 160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/security.h"
struct xfrm_policy;
#line 161 
struct xfrm_state;
#line 178 
struct request_sock;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct sighand_struct {
   spinlock_t siglock ;
   refcount_t count ;
   wait_queue_head_t signalfd_wqh ;
   struct k_sigaction action[64U] ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   u64 ac_utime ;
   u64 ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct cpu_itimer {
   u64 expires ;
   u64 incr ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct task_cputime_atomic {
   atomic64_t utime ;
   atomic64_t stime ;
   atomic64_t sum_exec_runtime ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct thread_group_cputimer {
   struct task_cputime_atomic cputime_atomic ;
};
#line 80 
struct tty_struct;
#line 80 
struct autogroup;
#line 80 
struct tty_audit_buf;
#line 80  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct signal_struct {
   refcount_t sigcnt ;
   atomic_t live ;
   int nr_threads ;
   struct list_head thread_head ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   struct hlist_head multiprocess ;
   int group_exit_code ;
   int notify_count ;
   struct task_struct *group_exit_task ;
   int group_stop_count ;
   unsigned int flags ;
   unsigned int is_child_subreaper : 1 ;
   unsigned int has_child_subreaper : 1 ;
   int posix_timer_id ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   ktime_t it_real_incr ;
   struct cpu_itimer it[2U] ;
   struct thread_group_cputimer cputimer ;
   struct posix_cputimers posix_cputimers ;
   struct pid *pids[4U] ;
   struct pid *tty_old_pgrp ;
   int leader ;
   struct tty_struct *tty ;
   struct autogroup *autogroup ;
   seqlock_t stats_lock ;
   u64 utime ;
   u64 stime ;
   u64 cutime ;
   u64 cstime ;
   u64 gtime ;
   u64 cgtime ;
   struct prev_cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   unsigned long maxrss ;
   unsigned long cmaxrss ;
   struct task_io_accounting ioac ;
   unsigned long long sum_sched_runtime ;
   struct rlimit rlim[16U] ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   struct tty_audit_buf *tty_audit_buf ;
   bool oom_flag_origin ;
   short oom_score_adj ;
   short oom_score_adj_min ;
   struct mm_struct *oom_mm ;
   struct mutex cred_guard_mutex ;
} __attribute__((__designated_init__));
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netlink.h"
struct nlmsghdr {
   __u32 nlmsg_len ;
   __u16 nlmsg_type ;
   __u16 nlmsg_flags ;
   __u32 nlmsg_seq ;
   __u32 nlmsg_pid ;
};
#line 211  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netlink.h"
struct nlattr {
   __u16 nla_len ;
   __u16 nla_type ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
struct netlink_ext_ack {
   char *_msg ;
   struct nlattr *bad_attr ;
   u8 cookie[20U] ;
   u8 cookie_len ;
};
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
union __anonunion_670 {
   u8 ctx[48U] ;
   long args[6U] ;
};
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
struct netlink_callback {
   struct sk_buff *skb ;
   struct nlmsghdr *nlh ;
   int (*dump)(struct sk_buff *, struct netlink_callback *) ;
   int (*done)(struct netlink_callback *) ;
   void *data ;
   struct module *module ;
   struct netlink_ext_ack *extack ;
   u16 family ;
   u16 min_dump_alloc ;
   bool strict_check ;
   u16 answer_flags ;
   unsigned int prev_seq ;
   unsigned int seq ;
   union __anonunion_670 __anonCompField_netlink_callback_153 ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/neighbour.h"
struct ndmsg {
   __u8 ndm_family ;
   __u8 ndm_pad1 ;
   __u16 ndm_pad2 ;
   __s32 ndm_ifindex ;
   __u16 ndm_state ;
   __u8 ndm_flags ;
   __u8 ndm_type ;
};
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_link.h"
struct rtnl_link_stats64 {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 rx_errors ;
   __u64 tx_errors ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
   __u64 multicast ;
   __u64 collisions ;
   __u64 rx_length_errors ;
   __u64 rx_over_errors ;
   __u64 rx_crc_errors ;
   __u64 rx_frame_errors ;
   __u64 rx_fifo_errors ;
   __u64 rx_missed_errors ;
   __u64 tx_aborted_errors ;
   __u64 tx_carrier_errors ;
   __u64 tx_fifo_errors ;
   __u64 tx_heartbeat_errors ;
   __u64 tx_window_errors ;
   __u64 rx_compressed ;
   __u64 tx_compressed ;
   __u64 rx_nohandler ;
};
#line 753  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_link.h"
struct ifla_vf_guid {
   __u32 vf ;
   __u64 guid ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_link.h"
struct ifla_vf_stats {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 broadcast ;
   __u64 multicast ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_link.h"
struct ifla_vf_info {
   __u32 vf ;
   __u8 mac[32U] ;
   __u32 vlan ;
   __u32 qos ;
   __u32 spoofchk ;
   __u32 linkstate ;
   __u32 min_tx_rate ;
   __u32 max_tx_rate ;
   __u32 rss_query_en ;
   __u32 trusted ;
   __be16 vlan_proto ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/pkt_sched.h"
struct tc_stats {
   __u64 bytes ;
   __u32 packets ;
   __u32 drops ;
   __u32 overlimits ;
   __u32 bps ;
   __u32 pps ;
   __u32 qlen ;
   __u32 backlog ;
};
#line 102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/pkt_sched.h"
struct tc_sizespec {
   unsigned char cell_log ;
   unsigned char size_log ;
   short cell_align ;
   int overhead ;
   unsigned int linklayer ;
   unsigned int mpu ;
   unsigned int mtu ;
   unsigned int tsize ;
};
#line 118  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hashtable.h"
struct netpoll_info;
#line 119 
struct phy_device;
#line 120 
struct dsa_port;
#line 121 
struct sfp_bus;
#line 122 
struct wireless_dev;
#line 123 
struct wpan_dev;
#line 124 
struct mpls_dev;
#line 125 
struct udp_tunnel_info;
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
enum netdev_tx {
    __NETDEV_TX_MIN = -2147483648,
    NETDEV_TX_OK = 0,
    NETDEV_TX_BUSY = 16
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef enum netdev_tx netdev_tx_t;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device_stats {
   unsigned long rx_packets ;
   unsigned long tx_packets ;
   unsigned long rx_bytes ;
   unsigned long tx_bytes ;
   unsigned long rx_errors ;
   unsigned long tx_errors ;
   unsigned long rx_dropped ;
   unsigned long tx_dropped ;
   unsigned long multicast ;
   unsigned long collisions ;
   unsigned long rx_length_errors ;
   unsigned long rx_over_errors ;
   unsigned long rx_crc_errors ;
   unsigned long rx_frame_errors ;
   unsigned long rx_fifo_errors ;
   unsigned long rx_missed_errors ;
   unsigned long tx_aborted_errors ;
   unsigned long tx_carrier_errors ;
   unsigned long tx_fifo_errors ;
   unsigned long tx_heartbeat_errors ;
   unsigned long tx_window_errors ;
   unsigned long rx_compressed ;
   unsigned long tx_compressed ;
};
#line 195 
struct neigh_parms;
#line 217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_hw_addr_list {
   struct list_head list ;
   int count ;
};
#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct hh_cache {
   unsigned int hh_len ;
   seqlock_t hh_lock ;
   unsigned long hh_data[16U] ;
};
#line 263  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct header_ops {
   int (*create)(struct sk_buff *, struct net_device *, unsigned short , void *, void *, unsigned int ) ;
   int (*parse)(struct sk_buff *, unsigned char *) ;
   int (*cache)(struct neighbour *, struct hh_cache *, __be16 ) ;
   void (*cache_update)(struct hh_cache *, struct net_device *, unsigned char *) ;
   bool (*validate)(char *, unsigned int ) ;
   __be16 (*parse_protocol)(struct sk_buff *) ;
};
#line 302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct gro_list {
   struct list_head list ;
   int count ;
};
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct napi_struct {
   struct list_head poll_list ;
   unsigned long state ;
   int weight ;
   unsigned long gro_bitmask ;
   int (*poll)(struct napi_struct *, int ) ;
   int poll_owner ;
   struct net_device *dev ;
   struct gro_list gro_hash[8U] ;
   struct sk_buff *skb ;
   struct list_head rx_list ;
   int rx_count ;
   struct hrtimer timer ;
   struct list_head dev_list ;
   struct hlist_node napi_hash_node ;
   unsigned int napi_id ;
};
#line 362 
enum gro_result {
    GRO_MERGED = 0,
    GRO_MERGED_FREE = 1,
    GRO_HELD = 2,
    GRO_NORMAL = 3,
    GRO_DROP = 4,
    GRO_CONSUMED = 5
};
#line 371  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef enum gro_result gro_result_t;
#line 372 
enum rx_handler_result {
    RX_HANDLER_CONSUMED = 0,
    RX_HANDLER_ANOTHER = 1,
    RX_HANDLER_EXACT = 2,
    RX_HANDLER_PASS = 3
};
#line 379  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef enum rx_handler_result rx_handler_result_t;
#line 421  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef rx_handler_result_t rx_handler_func_t(struct sk_buff **);
#line 589 
struct Qdisc;
#line 589 
struct xdp_umem;
#line 589  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_queue {
   struct net_device *dev ;
   struct Qdisc *qdisc ;
   struct Qdisc *qdisc_sleeping ;
   struct kobject kobj ;
   int numa_node ;
   unsigned long tx_maxrate ;
   unsigned long trans_timeout ;
   struct net_device *sb_dev ;
   struct xdp_umem *umem ;
   spinlock_t _xmit_lock ;
   int xmit_lock_owner ;
   unsigned long trans_start ;
   unsigned long state ;
   struct dql dql ;
} __attribute__((__aligned__(64)));
#line 662  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_map {
   unsigned int len ;
   struct callback_head rcu ;
   u16 cpus[0U] ;
};
#line 674  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_dev_flow {
   u16 cpu ;
   u16 filter ;
   unsigned int last_qtail ;
};
#line 684  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_dev_flow_table {
   unsigned int mask ;
   struct callback_head rcu ;
   struct rps_dev_flow flows[0U] ;
};
#line 736  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_rx_queue {
   struct rps_map *rps_map ;
   struct rps_dev_flow_table *rps_flow_table ;
   struct kobject kobj ;
   struct net_device *dev ;
   struct xdp_rxq_info xdp_rxq ;
   struct xdp_umem *umem ;
} __attribute__((__aligned__(64)));
#line 764  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xps_map {
   unsigned int len ;
   unsigned int alloc_len ;
   struct callback_head rcu ;
   u16 queues[0U] ;
};
#line 777  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xps_dev_maps {
   struct callback_head rcu ;
   struct xps_map *attr_map[0U] ;
};
#line 793  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_tc_txq {
   u16 count ;
   u16 offset ;
};
#line 803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_fcoe_hbainfo {
   char manufacturer[64U] ;
   char serial_number[64U] ;
   char hardware_version[64U] ;
   char driver_version[64U] ;
   char optionrom_version[64U] ;
   char firmware_version[64U] ;
   char model[256U] ;
   char model_description[256U] ;
};
#line 820  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_phys_item_id {
   unsigned char id[32U] ;
   unsigned char id_len ;
};
#line 833 
enum tc_setup_type {
    TC_SETUP_QDISC_MQPRIO = 0,
    TC_SETUP_CLSU32 = 1,
    TC_SETUP_CLSFLOWER = 2,
    TC_SETUP_CLSMATCHALL = 3,
    TC_SETUP_CLSBPF = 4,
    TC_SETUP_BLOCK = 5,
    TC_SETUP_QDISC_CBS = 6,
    TC_SETUP_QDISC_RED = 7,
    TC_SETUP_QDISC_PRIO = 8,
    TC_SETUP_QDISC_MQ = 9,
    TC_SETUP_QDISC_ETF = 10,
    TC_SETUP_ROOT_QDISC = 11,
    TC_SETUP_QDISC_GRED = 12,
    TC_SETUP_QDISC_TAPRIO = 13,
    TC_SETUP_FT = 14
};
#line 851 
enum bpf_netdev_command {
    XDP_SETUP_PROG = 0,
    XDP_SETUP_PROG_HW = 1,
    XDP_QUERY_PROG = 2,
    XDP_QUERY_PROG_HW = 3,
    BPF_OFFLOAD_MAP_ALLOC = 4,
    BPF_OFFLOAD_MAP_FREE = 5,
    XDP_SETUP_XSK_UMEM = 6
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_675 {
   u32 flags ;
   struct bpf_prog *prog ;
   struct netlink_ext_ack *extack ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_676 {
   u32 prog_id ;
   u32 prog_flags ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_677 {
   struct bpf_offloaded_map *offmap ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_xsk_678 {
   struct xdp_umem *umem ;
   u16 queue_id ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
union __anonunion_674 {
   struct __anonstruct_675 __anonCompField___anonunion_674_155 ;
   struct __anonstruct_676 __anonCompField___anonunion_674_156 ;
   struct __anonstruct_677 __anonCompField___anonunion_674_157 ;
   struct __anonstruct_xsk_678 xsk ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_bpf {
   enum bpf_netdev_command command ;
   union __anonunion_674 __anonCompField_netdev_bpf_158 ;
};
#line 911  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xfrmdev_ops {
   int (*xdo_dev_state_add)(struct xfrm_state *) ;
   void (*xdo_dev_state_delete)(struct xfrm_state *) ;
   void (*xdo_dev_state_free)(struct xfrm_state *) ;
   bool (*xdo_dev_offload_ok)(struct sk_buff *, struct xfrm_state *) ;
   void (*xdo_dev_state_advance_esn)(struct xfrm_state *) ;
};
#line 921  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct dev_ifalias {
   struct callback_head rcuhead ;
   char ifalias[] ;
};
#line 926 
struct tlsdev_ops;
#line 929  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_name_node {
   struct hlist_node hlist ;
   struct list_head list ;
   struct net_device *dev ;
   char *name ;
};
#line 1257 
struct devlink_port;
#line 1257  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device_ops {
   int (*ndo_init)(struct net_device *) ;
   void (*ndo_uninit)(struct net_device *) ;
   int (*ndo_open)(struct net_device *) ;
   int (*ndo_stop)(struct net_device *) ;
   netdev_tx_t (*ndo_start_xmit)(struct sk_buff *, struct net_device *) ;
   netdev_features_t (*ndo_features_check)(struct sk_buff *, struct net_device *, netdev_features_t ) ;
   u16 (*ndo_select_queue)(struct net_device *, struct sk_buff *, struct net_device *) ;
   void (*ndo_change_rx_flags)(struct net_device *, int ) ;
   void (*ndo_set_rx_mode)(struct net_device *) ;
   int (*ndo_set_mac_address)(struct net_device *, void *) ;
   int (*ndo_validate_addr)(struct net_device *) ;
   int (*ndo_do_ioctl)(struct net_device *, struct ifreq *, int ) ;
   int (*ndo_set_config)(struct net_device *, struct ifmap *) ;
   int (*ndo_change_mtu)(struct net_device *, int ) ;
   int (*ndo_neigh_setup)(struct net_device *, struct neigh_parms *) ;
   void (*ndo_tx_timeout)(struct net_device *) ;
   void (*ndo_get_stats64)(struct net_device *, struct rtnl_link_stats64 *) ;
   bool (*ndo_has_offload_stats)(struct net_device *, int ) ;
   int (*ndo_get_offload_stats)(int , struct net_device *, void *) ;
   struct net_device_stats *(*ndo_get_stats)(struct net_device *) ;
   int (*ndo_vlan_rx_add_vid)(struct net_device *, __be16 , u16 ) ;
   int (*ndo_vlan_rx_kill_vid)(struct net_device *, __be16 , u16 ) ;
   void (*ndo_poll_controller)(struct net_device *) ;
   int (*ndo_netpoll_setup)(struct net_device *, struct netpoll_info *) ;
   void (*ndo_netpoll_cleanup)(struct net_device *) ;
   int (*ndo_set_vf_mac)(struct net_device *, int , u8 *) ;
   int (*ndo_set_vf_vlan)(struct net_device *, int , u16 , u8 , __be16 ) ;
   int (*ndo_set_vf_rate)(struct net_device *, int , int , int ) ;
   int (*ndo_set_vf_spoofchk)(struct net_device *, int , bool ) ;
   int (*ndo_set_vf_trust)(struct net_device *, int , bool ) ;
   int (*ndo_get_vf_config)(struct net_device *, int , struct ifla_vf_info *) ;
   int (*ndo_set_vf_link_state)(struct net_device *, int , int ) ;
   int (*ndo_get_vf_stats)(struct net_device *, int , struct ifla_vf_stats *) ;
   int (*ndo_set_vf_port)(struct net_device *, int , struct nlattr **) ;
   int (*ndo_get_vf_port)(struct net_device *, int , struct sk_buff *) ;
   int (*ndo_get_vf_guid)(struct net_device *, int , struct ifla_vf_guid *, struct ifla_vf_guid *) ;
   int (*ndo_set_vf_guid)(struct net_device *, int , u64 , int ) ;
   int (*ndo_set_vf_rss_query_en)(struct net_device *, int , bool ) ;
   int (*ndo_setup_tc)(struct net_device *, enum tc_setup_type , void *) ;
   int (*ndo_fcoe_enable)(struct net_device *) ;
   int (*ndo_fcoe_disable)(struct net_device *) ;
   int (*ndo_fcoe_ddp_setup)(struct net_device *, u16 , struct scatterlist *, unsigned int ) ;
   int (*ndo_fcoe_ddp_done)(struct net_device *, u16 ) ;
   int (*ndo_fcoe_ddp_target)(struct net_device *, u16 , struct scatterlist *, unsigned int ) ;
   int (*ndo_fcoe_get_hbainfo)(struct net_device *, struct netdev_fcoe_hbainfo *) ;
   int (*ndo_fcoe_get_wwn)(struct net_device *, u64 *, int ) ;
   int (*ndo_rx_flow_steer)(struct net_device *, struct sk_buff *, u16 , u32 ) ;
   int (*ndo_add_slave)(struct net_device *, struct net_device *, struct netlink_ext_ack *) ;
   int (*ndo_del_slave)(struct net_device *, struct net_device *) ;
   netdev_features_t (*ndo_fix_features)(struct net_device *, netdev_features_t ) ;
   int (*ndo_set_features)(struct net_device *, netdev_features_t ) ;
   int (*ndo_neigh_construct)(struct net_device *, struct neighbour *) ;
   void (*ndo_neigh_destroy)(struct net_device *, struct neighbour *) ;
   int (*ndo_fdb_add)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char *, u16 , u16 , struct netlink_ext_ack *) ;
   int (*ndo_fdb_del)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char *, u16 ) ;
   int (*ndo_fdb_dump)(struct sk_buff *, struct netlink_callback *, struct net_device *, struct net_device *, int *) ;
   int (*ndo_fdb_get)(struct sk_buff *, struct nlattr **, struct net_device *, unsigned char *, u16 , u32 , u32 , struct netlink_ext_ack *) ;
   int (*ndo_bridge_setlink)(struct net_device *, struct nlmsghdr *, u16 , struct netlink_ext_ack *) ;
   int (*ndo_bridge_getlink)(struct sk_buff *, u32 , u32 , struct net_device *, u32 , int ) ;
   int (*ndo_bridge_dellink)(struct net_device *, struct nlmsghdr *, u16 ) ;
   int (*ndo_change_carrier)(struct net_device *, bool ) ;
   int (*ndo_get_phys_port_id)(struct net_device *, struct netdev_phys_item_id *) ;
   int (*ndo_get_port_parent_id)(struct net_device *, struct netdev_phys_item_id *) ;
   int (*ndo_get_phys_port_name)(struct net_device *, char *, size_t ) ;
   void (*ndo_udp_tunnel_add)(struct net_device *, struct udp_tunnel_info *) ;
   void (*ndo_udp_tunnel_del)(struct net_device *, struct udp_tunnel_info *) ;
   void *(*ndo_dfwd_add_station)(struct net_device *, struct net_device *) ;
   void (*ndo_dfwd_del_station)(struct net_device *, void *) ;
   int (*ndo_set_tx_maxrate)(struct net_device *, int , u32 ) ;
   int (*ndo_get_iflink)(struct net_device *) ;
   int (*ndo_change_proto_down)(struct net_device *, bool ) ;
   int (*ndo_fill_metadata_dst)(struct net_device *, struct sk_buff *) ;
   void (*ndo_set_rx_headroom)(struct net_device *, int ) ;
   int (*ndo_bpf)(struct net_device *, struct netdev_bpf *) ;
   int (*ndo_xdp_xmit)(struct net_device *, int , struct xdp_frame **, u32 ) ;
   int (*ndo_xsk_wakeup)(struct net_device *, u32 , u32 ) ;
   struct devlink_port *(*ndo_get_devlink_port)(struct net_device *) ;
};
#line 1492 
enum ldv_14532 {
    NETREG_UNINITIALIZED = 0,
    NETREG_REGISTERED = 1,
    NETREG_UNREGISTERING = 2,
    NETREG_UNREGISTERED = 3,
    NETREG_RELEASED = 4,
    NETREG_DUMMY = 5
};
#line 1501 
enum ldv_14533 {
    RTNL_LINK_INITIALIZED = 0,
    RTNL_LINK_INITIALIZING = 1
};
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_adj_list_679 {
   struct list_head upper ;
   struct list_head lower ;
};
#line 1795 
struct iw_handler_def;
#line 1795 
struct iw_public_data;
#line 1795 
struct l3mdev_ops;
#line 1795 
struct ndisc_ops;
#line 1795 
struct vlan_info;
#line 1795 
struct tipc_bearer;
#line 1795 
struct in_device;
#line 1795 
struct dn_dev;
#line 1795 
struct inet6_dev;
#line 1795 
struct mini_Qdisc;
#line 1795 
struct pcpu_lstats;
#line 1795 
struct pcpu_sw_netstats;
#line 1795 
struct pcpu_dstats;
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
union __anonunion_680 {
   void *ml_priv ;
   struct pcpu_lstats *lstats ;
   struct pcpu_sw_netstats *tstats ;
   struct pcpu_dstats *dstats ;
};
#line 1795 
struct garp_port;
#line 1795 
struct mrp_port;
#line 1795 
struct rtnl_link_ops;
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device {
   char name[16U] ;
   struct netdev_name_node *name_node ;
   struct dev_ifalias *ifalias ;
   unsigned long mem_end ;
   unsigned long mem_start ;
   unsigned long base_addr ;
   int irq ;
   unsigned long state ;
   struct list_head dev_list ;
   struct list_head napi_list ;
   struct list_head unreg_list ;
   struct list_head close_list ;
   struct list_head ptype_all ;
   struct list_head ptype_specific ;
   struct __anonstruct_adj_list_679 adj_list ;
   netdev_features_t features ;
   netdev_features_t hw_features ;
   netdev_features_t wanted_features ;
   netdev_features_t vlan_features ;
   netdev_features_t hw_enc_features ;
   netdev_features_t mpls_features ;
   netdev_features_t gso_partial_features ;
   int ifindex ;
   int group ;
   struct net_device_stats stats ;
   atomic_long_t rx_dropped ;
   atomic_long_t tx_dropped ;
   atomic_long_t rx_nohandler ;
   atomic_t carrier_up_count ;
   atomic_t carrier_down_count ;
   struct iw_handler_def *wireless_handlers ;
   struct iw_public_data *wireless_data ;
   struct net_device_ops *netdev_ops ;
   struct ethtool_ops *ethtool_ops ;
   struct l3mdev_ops *l3mdev_ops ;
   struct ndisc_ops *ndisc_ops ;
   struct xfrmdev_ops *xfrmdev_ops ;
   struct tlsdev_ops *tlsdev_ops ;
   struct header_ops *header_ops ;
   unsigned int flags ;
   unsigned int priv_flags ;
   unsigned short gflags ;
   unsigned short padded ;
   unsigned char operstate ;
   unsigned char link_mode ;
   unsigned char if_port ;
   unsigned char dma ;
   unsigned int mtu ;
   unsigned int min_mtu ;
   unsigned int max_mtu ;
   unsigned short type ;
   unsigned short hard_header_len ;
   unsigned char min_header_len ;
   unsigned short needed_headroom ;
   unsigned short needed_tailroom ;
   unsigned char perm_addr[32U] ;
   unsigned char addr_assign_type ;
   unsigned char addr_len ;
   unsigned char upper_level ;
   unsigned char lower_level ;
   unsigned short neigh_priv_len ;
   unsigned short dev_id ;
   unsigned short dev_port ;
   spinlock_t addr_list_lock ;
   unsigned char name_assign_type ;
   bool uc_promisc ;
   struct netdev_hw_addr_list uc ;
   struct netdev_hw_addr_list mc ;
   struct netdev_hw_addr_list dev_addrs ;
   struct kset *queues_kset ;
   unsigned int promiscuity ;
   unsigned int allmulti ;
   struct vlan_info *vlan_info ;
   struct dsa_port *dsa_ptr ;
   struct tipc_bearer *tipc_ptr ;
   void *atalk_ptr ;
   struct in_device *ip_ptr ;
   struct dn_dev *dn_ptr ;
   struct inet6_dev *ip6_ptr ;
   void *ax25_ptr ;
   struct wireless_dev *ieee80211_ptr ;
   struct wpan_dev *ieee802154_ptr ;
   struct mpls_dev *mpls_ptr ;
   unsigned char *dev_addr ;
   struct netdev_rx_queue *_rx ;
   unsigned int num_rx_queues ;
   unsigned int real_num_rx_queues ;
   struct bpf_prog *xdp_prog ;
   unsigned long gro_flush_timeout ;
   rx_handler_func_t *rx_handler ;
   void *rx_handler_data ;
   struct mini_Qdisc *miniq_ingress ;
   struct netdev_queue *ingress_queue ;
   struct nf_hook_entries *nf_hooks_ingress ;
   unsigned char broadcast[32U] ;
   struct cpu_rmap *rx_cpu_rmap ;
   struct hlist_node index_hlist ;
   struct netdev_queue *_tx ;
   unsigned int num_tx_queues ;
   unsigned int real_num_tx_queues ;
   struct Qdisc *qdisc ;
   struct hlist_head qdisc_hash[16U] ;
   unsigned int tx_queue_len ;
   spinlock_t tx_global_lock ;
   int watchdog_timeo ;
   struct xps_dev_maps *xps_cpus_map ;
   struct xps_dev_maps *xps_rxqs_map ;
   struct mini_Qdisc *miniq_egress ;
   struct timer_list watchdog_timer ;
   int *pcpu_refcnt ;
   struct list_head todo_list ;
   struct list_head link_watch_list ;
   enum ldv_14532 reg_state : 8 ;
   bool dismantle ;
   enum ldv_14533 rtnl_link_state : 16 ;
   bool needs_free_netdev ;
   void (*priv_destructor)(struct net_device *) ;
   struct netpoll_info *npinfo ;
   possible_net_t nd_net ;
   union __anonunion_680 __anonCompField_net_device_159 ;
   struct garp_port *garp_port ;
   struct mrp_port *mrp_port ;
   struct device dev ;
   struct attribute_group *sysfs_groups[4U] ;
   struct attribute_group *sysfs_rx_queue_group ;
   struct rtnl_link_ops *rtnl_link_ops ;
   unsigned int gso_max_size ;
   u16 gso_max_segs ;
   struct dcbnl_rtnl_ops *dcbnl_ops ;
   s16 num_tc ;
   struct netdev_tc_txq tc_to_txq[16U] ;
   u8 prio_tc_map[16U] ;
   unsigned int fcoe_ddp_xid ;
   struct netprio_map *priomap ;
   struct phy_device *phydev ;
   struct sfp_bus *sfp_bus ;
   struct lock_class_key qdisc_tx_busylock_key ;
   struct lock_class_key qdisc_running_key ;
   struct lock_class_key qdisc_xmit_lock_key ;
   struct lock_class_key addr_list_lock_key ;
   bool proto_down ;
   unsigned int wol_enabled : 1 ;
};
#line 2400  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct pcpu_sw_netstats {
   u64 rx_packets ;
   u64 rx_bytes ;
   u64 tx_packets ;
   u64 tx_bytes ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(32)));
#line 2408  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct pcpu_lstats {
   u64_stats_t packets ;
   u64_stats_t bytes ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page_counter.h"
struct page_counter {
   atomic_long_t usage ;
   unsigned long min ;
   unsigned long low ;
   unsigned long max ;
   struct page_counter *parent ;
   unsigned long emin ;
   atomic_long_t min_usage ;
   atomic_long_t children_min_usage ;
   unsigned long elow ;
   atomic_long_t low_usage ;
   atomic_long_t children_low_usage ;
   unsigned long watermark ;
   unsigned long failcnt ;
};
#line 66 
struct eventfd_ctx;
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmpressure.h"
struct vmpressure {
   unsigned long scanned ;
   unsigned long reclaimed ;
   unsigned long tree_scanned ;
   unsigned long tree_reclaimed ;
   spinlock_t sr_lock ;
   struct list_head events ;
   struct mutex events_lock ;
   struct work_struct work ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/flex_proportions.h"
struct fprop_global {
   struct percpu_counter events ;
   unsigned int period ;
   seqcount_t sequence ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/flex_proportions.h"
struct fprop_local_percpu {
   struct percpu_counter events ;
   unsigned int period ;
   raw_spinlock_t lock ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/flex_proportions.h"
typedef int congested_fn(void *, int );
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
enum wb_reason {
    WB_REASON_BACKGROUND = 0,
    WB_REASON_VMSCAN = 1,
    WB_REASON_SYNC = 2,
    WB_REASON_PERIODIC = 3,
    WB_REASON_LAPTOP_TIMER = 4,
    WB_REASON_FREE_MORE_MEM = 5,
    WB_REASON_FS_FREE_SPACE = 6,
    WB_REASON_FORKER_THREAD = 7,
    WB_REASON_FOREIGN_FLUSH = 8,
    WB_REASON_MAX = 9
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct wb_completion {
   atomic_t cnt ;
   wait_queue_head_t *waitq ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct bdi_writeback_congested {
   unsigned long state ;
   refcount_t refcnt ;
   struct backing_dev_info *__bdi ;
   int blkcg_id ;
   struct rb_node rb_node ;
};
#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
union __anonunion_687 {
   struct work_struct release_work ;
   struct callback_head rcu ;
};
#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct bdi_writeback {
   struct backing_dev_info *bdi ;
   unsigned long state ;
   unsigned long last_old_flush ;
   struct list_head b_dirty ;
   struct list_head b_io ;
   struct list_head b_more_io ;
   struct list_head b_dirty_time ;
   spinlock_t list_lock ;
   struct percpu_counter stat[4U] ;
   struct bdi_writeback_congested *congested ;
   unsigned long bw_time_stamp ;
   unsigned long dirtied_stamp ;
   unsigned long written_stamp ;
   unsigned long write_bandwidth ;
   unsigned long avg_write_bandwidth ;
   unsigned long dirty_ratelimit ;
   unsigned long balanced_dirty_ratelimit ;
   struct fprop_local_percpu completions ;
   int dirty_exceeded ;
   enum wb_reason start_all_reason ;
   spinlock_t work_lock ;
   struct list_head work_list ;
   struct delayed_work dwork ;
   unsigned long dirty_sleep ;
   struct list_head bdi_node ;
   struct percpu_ref refcnt ;
   struct fprop_local_percpu memcg_completions ;
   struct cgroup_subsys_state *memcg_css ;
   struct cgroup_subsys_state *blkcg_css ;
   struct list_head memcg_node ;
   struct list_head blkcg_node ;
   union __anonunion_687 __anonCompField_bdi_writeback_160 ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct backing_dev_info {
   u64 id ;
   struct rb_node rb_node ;
   struct list_head bdi_list ;
   unsigned long ra_pages ;
   unsigned long io_pages ;
   congested_fn *congested_fn ;
   void *congested_data ;
   char *name ;
   struct kref refcnt ;
   unsigned int capabilities ;
   unsigned int min_ratio ;
   unsigned int max_ratio ;
   unsigned int max_prop_frac ;
   atomic_long_t tot_write_bandwidth ;
   struct bdi_writeback wb ;
   struct list_head wb_list ;
   struct xarray cgwb_tree ;
   struct rb_root cgwb_congested_tree ;
   struct mutex cgwb_release_mutex ;
   struct rw_semaphore wb_switch_rwsem ;
   wait_queue_head_t wb_waitq ;
   struct device *dev ;
   struct device *owner ;
   struct timer_list laptop_mode_wb_timer ;
   struct dentry *debug_dir ;
};
#line 306 
struct bio_set;
#line 307 
struct bio_integrity_payload;
#line 308  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
typedef void bio_end_io_t(struct bio *);
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
typedef u8 blk_status_t;
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
struct bio_issue {
   u64 value ;
};
#line 144 
struct blkcg_gq;
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
union __anonunion_688 {
   struct bio_integrity_payload *bi_integrity ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
struct bio {
   struct bio *bi_next ;
   struct gendisk *bi_disk ;
   unsigned int bi_opf ;
   unsigned short bi_flags ;
   unsigned short bi_ioprio ;
   unsigned short bi_write_hint ;
   blk_status_t bi_status ;
   u8 bi_partno ;
   atomic_t __bi_remaining ;
   struct bvec_iter bi_iter ;
   bio_end_io_t *bi_end_io ;
   void *bi_private ;
   struct blkcg_gq *bi_blkg ;
   struct bio_issue bi_issue ;
   u64 bi_iocost_cost ;
   union __anonunion_688 __anonCompField_bio_161 ;
   unsigned short bi_vcnt ;
   unsigned short bi_max_vecs ;
   atomic_t __bi_cnt ;
   struct bio_vec *bi_io_vec ;
   struct bio_set *bi_pool ;
   struct bio_vec bi_inline_vecs[0U] ;
};
#line 452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
typedef unsigned int blk_qc_t;
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
struct blk_rq_stat {
   u64 mean ;
   u64 min ;
   u64 max ;
   u32 nr_samples ;
   u64 batch ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct disk_stats {
   u64 nsecs[4U] ;
   unsigned long sectors[4U] ;
   unsigned long ios[4U] ;
   unsigned long merges[4U] ;
   unsigned long io_ticks ;
   unsigned long time_in_queue ;
   local_t in_flight[2U] ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct partition_meta_info {
   char uuid[37U] ;
   u8 volname[64U] ;
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct hd_struct {
   sector_t start_sect ;
   sector_t nr_sects ;
   seqcount_t nr_sects_seq ;
   sector_t alignment_offset ;
   unsigned int discard_alignment ;
   struct device __dev ;
   struct kobject *holder_dir ;
   int policy ;
   int partno ;
   struct partition_meta_info *info ;
   int make_it_fail ;
   unsigned long stamp ;
   struct disk_stats *dkstats ;
   struct percpu_ref ref ;
   struct rcu_work rcu_work ;
};
#line 160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct disk_part_tbl {
   struct callback_head callback_head ;
   int len ;
   struct hd_struct *last_lookup ;
   struct hd_struct *part[] ;
};
#line 166 
struct disk_events;
#line 167 
struct badblocks;
#line 172 
struct blk_integrity_profile;
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct blk_integrity {
   struct blk_integrity_profile *profile ;
   unsigned char flags ;
   unsigned char tuple_size ;
   unsigned char interval_exp ;
   unsigned char tag_size ;
};
#line 182 
struct timer_rand_state;
#line 182  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct gendisk {
   int major ;
   int first_minor ;
   int minors ;
   char disk_name[32U] ;
   char *(*devnode)(struct gendisk *, umode_t *) ;
   unsigned short events ;
   unsigned short event_flags ;
   struct disk_part_tbl *part_tbl ;
   struct hd_struct part0 ;
   struct block_device_operations *fops ;
   struct request_queue *queue ;
   void *private_data ;
   int flags ;
   struct rw_semaphore lookup_sem ;
   struct kobject *slave_dir ;
   struct timer_rand_state *random ;
   atomic_t sync_io ;
   struct disk_events *ev ;
   struct kobject integrity_kobj ;
   int node_id ;
   struct badblocks *bb ;
   struct lockdep_map lockdep_map ;
};
#line 637  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pagemap.h"
typedef void *mempool_alloc_t(gfp_t , void *);
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mempool.h"
typedef void mempool_free_t(void *, void *);
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mempool.h"
struct mempool_s {
   spinlock_t lock ;
   int min_nr ;
   int curr_nr ;
   void **elements ;
   void *pool_data ;
   mempool_alloc_t *alloc ;
   mempool_free_t *free ;
   wait_queue_head_t wait ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mempool.h"
typedef struct mempool_s mempool_t;
#line 307  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bio.h"
struct bio_integrity_payload {
   struct bio *bip_bio ;
   struct bvec_iter bip_iter ;
   unsigned short bip_slab ;
   unsigned short bip_vcnt ;
   unsigned short bip_max_vcnt ;
   unsigned short bip_flags ;
   struct bvec_iter bio_iter ;
   struct work_struct bip_work ;
   struct bio_vec *bip_vec ;
   struct bio_vec bip_inline_vecs[0U] ;
};
#line 575  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bio.h"
struct bio_list {
   struct bio *head ;
   struct bio *tail ;
};
#line 703  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bio.h"
struct bio_set {
   struct kmem_cache *bio_slab ;
   unsigned int front_pad ;
   mempool_t bio_pool ;
   mempool_t bvec_pool ;
   mempool_t bio_integrity_pool ;
   mempool_t bvec_integrity_pool ;
   spinlock_t rescue_lock ;
   struct bio_list rescue_list ;
   struct work_struct rescue_work ;
   struct workqueue_struct *rescue_workqueue ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bsg.h"
struct sg_io_v4 {
   __s32 guard ;
   __u32 protocol ;
   __u32 subprotocol ;
   __u32 request_len ;
   __u64 request ;
   __u64 request_tag ;
   __u32 request_attr ;
   __u32 request_priority ;
   __u32 request_extra ;
   __u32 max_response_len ;
   __u64 response ;
   __u32 dout_iovec_count ;
   __u32 dout_xfer_len ;
   __u32 din_iovec_count ;
   __u32 din_xfer_len ;
   __u64 dout_xferp ;
   __u64 din_xferp ;
   __u32 timeout ;
   __u32 flags ;
   __u64 usr_ptr ;
   __u32 spare_in ;
   __u32 driver_status ;
   __u32 transport_status ;
   __u32 device_status ;
   __u32 retry_delay ;
   __u32 info ;
   __u32 duration ;
   __u32 response_len ;
   __s32 din_resid ;
   __s32 dout_resid ;
   __u64 generated_tag ;
   __u32 spare_out ;
   __u32 padding ;
};
#line 65 
struct request;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bsg.h"
struct bsg_ops {
   int (*check_proto)(struct sg_io_v4 *) ;
   int (*fill_hdr)(struct request *, struct sg_io_v4 *, fmode_t ) ;
   int (*complete_rq)(struct request *, struct sg_io_v4 *) ;
   void (*free_rq)(struct request *) ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bsg.h"
struct bsg_class_device {
   struct device *class_dev ;
   int minor ;
   struct request_queue *queue ;
   struct bsg_ops *ops ;
};
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/blkzoned.h"
struct blk_zone {
   __u64 start ;
   __u64 len ;
   __u64 wp ;
   __u8 type ;
   __u8 cond ;
   __u8 non_seq ;
   __u8 reset ;
   __u8 reserved[36U] ;
};
#line 134 
struct elevator_queue;
#line 135 
struct blk_trace;
#line 138 
struct blk_flush_queue;
#line 139 
struct pr_ops;
#line 140 
struct rq_qos;
#line 141 
struct blk_queue_stats;
#line 142 
struct blk_stat_callback;
#line 143  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/blkzoned.h"
typedef void rq_end_io_fn(struct request *, blk_status_t );
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef __u32 req_flags_t;
#line 67 
enum mq_rq_state {
    MQ_RQ_IDLE = 0,
    MQ_RQ_IN_FLIGHT = 1,
    MQ_RQ_COMPLETE = 2
};
#line 132 
struct blk_mq_ctx;
#line 132 
struct blk_mq_hw_ctx;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_691 {
   struct hlist_node hash ;
   struct list_head ipi_list ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_692 {
   struct rb_node rb_node ;
   struct bio_vec special_vec ;
   void *completion_data ;
   int error_count ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct __anonstruct_elv_694 {
   struct io_cq *icq ;
   void *priv[2U] ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct __anonstruct_flush_695 {
   unsigned int seq ;
   struct list_head list ;
   rq_end_io_fn *saved_end_io ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_693 {
   struct __anonstruct_elv_694 elv ;
   struct __anonstruct_flush_695 flush ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_696 {
   struct __call_single_data csd ;
   u64 fifo_time ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct request {
   struct request_queue *q ;
   struct blk_mq_ctx *mq_ctx ;
   struct blk_mq_hw_ctx *mq_hctx ;
   unsigned int cmd_flags ;
   req_flags_t rq_flags ;
   int tag ;
   int internal_tag ;
   unsigned int __data_len ;
   sector_t __sector ;
   struct bio *bio ;
   struct bio *biotail ;
   struct list_head queuelist ;
   union __anonunion_691 __anonCompField_request_162 ;
   union __anonunion_692 __anonCompField_request_163 ;
   union __anonunion_693 __anonCompField_request_164 ;
   struct gendisk *rq_disk ;
   struct hd_struct *part ;
   u64 alloc_time_ns ;
   u64 start_time_ns ;
   u64 io_start_time_ns ;
   unsigned short wbt_flags ;
   unsigned short stats_sectors ;
   unsigned short nr_phys_segments ;
   unsigned short nr_integrity_segments ;
   unsigned short write_hint ;
   unsigned short ioprio ;
   unsigned int extra_len ;
   enum mq_rq_state state ;
   refcount_t ref ;
   unsigned int timeout ;
   unsigned long deadline ;
   union __anonunion_696 __anonCompField_request_165 ;
   rq_end_io_fn *end_io ;
   void *end_io_data ;
};
#line 285 
struct elevator_type;
#line 286 
struct blk_mq_debugfs_attr;
#line 287 
enum elv_merge {
    ELEVATOR_NO_MERGE = 0,
    ELEVATOR_FRONT_MERGE = 1,
    ELEVATOR_BACK_MERGE = 2,
    ELEVATOR_DISCARD_MERGE = 3
};
#line 294 
struct blk_mq_alloc_data;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elevator_mq_ops {
   int (*init_sched)(struct request_queue *, struct elevator_type *) ;
   void (*exit_sched)(struct elevator_queue *) ;
   int (*init_hctx)(struct blk_mq_hw_ctx *, unsigned int ) ;
   void (*exit_hctx)(struct blk_mq_hw_ctx *, unsigned int ) ;
   void (*depth_updated)(struct blk_mq_hw_ctx *) ;
   bool (*allow_merge)(struct request_queue *, struct request *, struct bio *) ;
   bool (*bio_merge)(struct blk_mq_hw_ctx *, struct bio *, unsigned int ) ;
   int (*request_merge)(struct request_queue *, struct request **, struct bio *) ;
   void (*request_merged)(struct request_queue *, struct request *, enum elv_merge ) ;
   void (*requests_merged)(struct request_queue *, struct request *, struct request *) ;
   void (*limit_depth)(unsigned int , struct blk_mq_alloc_data *) ;
   void (*prepare_request)(struct request *, struct bio *) ;
   void (*finish_request)(struct request *) ;
   void (*insert_requests)(struct blk_mq_hw_ctx *, struct list_head *, bool ) ;
   struct request *(*dispatch_request)(struct blk_mq_hw_ctx *) ;
   bool (*has_work)(struct blk_mq_hw_ctx *) ;
   void (*completed_request)(struct request *, u64 ) ;
   void (*requeue_request)(struct request *) ;
   struct request *(*former_request)(struct request_queue *, struct request *) ;
   struct request *(*next_request)(struct request_queue *, struct request *) ;
   void (*init_icq)(struct io_cq *) ;
   void (*exit_icq)(struct io_cq *) ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elv_fs_entry {
   struct attribute attr ;
   ssize_t (*show)(struct elevator_queue *, char *) ;
   ssize_t (*store)(struct elevator_queue *, char *, size_t ) ;
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elevator_type {
   struct kmem_cache *icq_cache ;
   struct elevator_mq_ops ops ;
   size_t icq_size ;
   size_t icq_align ;
   struct elv_fs_entry *elevator_attrs ;
   char *elevator_name ;
   char *elevator_alias ;
   unsigned int elevator_features ;
   struct module *elevator_owner ;
   struct blk_mq_debugfs_attr *queue_debugfs_attrs ;
   struct blk_mq_debugfs_attr *hctx_debugfs_attrs ;
   char icq_cache_name[22U] ;
   struct list_head list ;
};
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elevator_queue {
   struct elevator_type *type ;
   void *elevator_data ;
   struct kobject kobj ;
   struct mutex sysfs_lock ;
   unsigned int registered : 1 ;
   struct hlist_head hash[64U] ;
};
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
typedef blk_qc_t make_request_fn(struct request_queue *, struct bio *);
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef int dma_drain_needed_fn(struct request *);
#line 304 
enum blk_zoned_model {
    BLK_ZONED_NONE = 0,
    BLK_ZONED_HA = 1,
    BLK_ZONED_HM = 2
};
#line 320  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct queue_limits {
   unsigned long bounce_pfn ;
   unsigned long seg_boundary_mask ;
   unsigned long virt_boundary_mask ;
   unsigned int max_hw_sectors ;
   unsigned int max_dev_sectors ;
   unsigned int chunk_sectors ;
   unsigned int max_sectors ;
   unsigned int max_segment_size ;
   unsigned int physical_block_size ;
   unsigned int logical_block_size ;
   unsigned int alignment_offset ;
   unsigned int io_min ;
   unsigned int io_opt ;
   unsigned int max_discard_sectors ;
   unsigned int max_hw_discard_sectors ;
   unsigned int max_write_same_sectors ;
   unsigned int max_write_zeroes_sectors ;
   unsigned int discard_granularity ;
   unsigned int discard_alignment ;
   unsigned short max_segments ;
   unsigned short max_integrity_segments ;
   unsigned short max_discard_segments ;
   unsigned char misaligned ;
   unsigned char discard_misaligned ;
   unsigned char raid_partial_stripes_expensive ;
   enum blk_zoned_model zoned ;
};
#line 394 
struct blk_mq_ops;
#line 394 
struct throtl_data;
#line 394 
struct blk_mq_tag_set;
#line 394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct request_queue {
   struct request *last_merge ;
   struct elevator_queue *elevator ;
   struct blk_queue_stats *stats ;
   struct rq_qos *rq_qos ;
   make_request_fn *make_request_fn ;
   dma_drain_needed_fn *dma_drain_needed ;
   struct blk_mq_ops *mq_ops ;
   struct blk_mq_ctx *queue_ctx ;
   unsigned int queue_depth ;
   struct blk_mq_hw_ctx **queue_hw_ctx ;
   unsigned int nr_hw_queues ;
   struct backing_dev_info *backing_dev_info ;
   void *queuedata ;
   unsigned long queue_flags ;
   atomic_t pm_only ;
   int id ;
   gfp_t bounce_gfp ;
   spinlock_t queue_lock ;
   struct kobject kobj ;
   struct kobject *mq_kobj ;
   struct blk_integrity integrity ;
   struct device *dev ;
   int rpm_status ;
   unsigned int nr_pending ;
   unsigned long nr_requests ;
   unsigned int dma_drain_size ;
   void *dma_drain_buffer ;
   unsigned int dma_pad_mask ;
   unsigned int dma_alignment ;
   unsigned int rq_timeout ;
   int poll_nsec ;
   struct blk_stat_callback *poll_cb ;
   struct blk_rq_stat poll_stat[16U] ;
   struct timer_list timeout ;
   struct work_struct timeout_work ;
   struct list_head icq_list ;
   unsigned long blkcg_pols[1U] ;
   struct blkcg_gq *root_blkg ;
   struct list_head blkg_list ;
   struct queue_limits limits ;
   unsigned int required_elevator_features ;
   unsigned int nr_zones ;
   unsigned long *conv_zones_bitmap ;
   unsigned long *seq_zones_wlock ;
   unsigned int sg_timeout ;
   unsigned int sg_reserved_size ;
   int node ;
   struct blk_trace *blk_trace ;
   struct mutex blk_trace_mutex ;
   struct blk_flush_queue *fq ;
   struct list_head requeue_list ;
   spinlock_t requeue_lock ;
   struct delayed_work requeue_work ;
   struct mutex sysfs_lock ;
   struct mutex sysfs_dir_lock ;
   struct list_head unused_hctx_list ;
   spinlock_t unused_hctx_lock ;
   int mq_freeze_depth ;
   struct bsg_class_device bsg_dev ;
   struct throtl_data *td ;
   struct callback_head callback_head ;
   wait_queue_head_t mq_freeze_wq ;
   struct mutex mq_freeze_lock ;
   struct percpu_ref q_usage_counter ;
   struct blk_mq_tag_set *tag_set ;
   struct list_head tag_set_list ;
   struct bio_set bio_split ;
   struct dentry *debugfs_dir ;
   struct dentry *sched_debugfs_dir ;
   struct dentry *rqos_debugfs_dir ;
   bool mq_sysfs_init_done ;
   size_t cmd_size ;
   struct work_struct release_work ;
   u64 write_hints[5U] ;
};
#line 1160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct blk_plug {
   struct list_head mq_list ;
   struct list_head cb_list ;
   unsigned short rq_count ;
   bool multiple_queues ;
};
#line 1514  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct blk_integrity_iter {
   void *prot_buf ;
   void *data_buf ;
   sector_t seed ;
   unsigned int data_size ;
   unsigned short interval ;
   char *disk_name ;
};
#line 1522  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef blk_status_t integrity_processing_fn(struct blk_integrity_iter *);
#line 1524  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef void integrity_prepare_fn(struct request *);
#line 1525  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef void integrity_complete_fn(struct request *, unsigned int );
#line 1527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct blk_integrity_profile {
   integrity_processing_fn *generate_fn ;
   integrity_processing_fn *verify_fn ;
   integrity_prepare_fn *prepare_fn ;
   integrity_complete_fn *complete_fn ;
   char *name ;
};
#line 1693  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct block_device_operations {
   int (*open)(struct block_device *, fmode_t ) ;
   void (*release)(struct gendisk *, fmode_t ) ;
   int (*rw_page)(struct block_device *, sector_t , struct page *, unsigned int ) ;
   int (*ioctl)(struct block_device *, fmode_t , unsigned int , unsigned long ) ;
   int (*compat_ioctl)(struct block_device *, fmode_t , unsigned int , unsigned long ) ;
   unsigned int (*check_events)(struct gendisk *, unsigned int ) ;
   int (*media_changed)(struct gendisk *) ;
   void (*unlock_native_capacity)(struct gendisk *) ;
   int (*revalidate_disk)(struct gendisk *) ;
   int (*getgeo)(struct block_device *, struct hd_geometry *) ;
   void (*swap_slot_free_notify)(struct block_device *, unsigned long ) ;
   int (*report_zones)(struct gendisk *, sector_t , unsigned int , int (*)(struct blk_zone *, unsigned int , void *), void *) ;
   struct module *owner ;
   struct pr_ops *pr_ops ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg_policy_data;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg {
   struct cgroup_subsys_state css ;
   spinlock_t lock ;
   struct xarray blkg_tree ;
   struct blkcg_gq *blkg_hint ;
   struct hlist_head blkg_list ;
   struct blkcg_policy_data *cpd[5U] ;
   struct list_head all_blkcgs_node ;
   struct list_head cgwb_list ;
   refcount_t cgwb_refcnt ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkg_iostat {
   u64 bytes[3U] ;
   u64 ios[3U] ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkg_iostat_set {
   struct u64_stats_sync sync ;
   struct blkg_iostat cur ;
   struct blkg_iostat last ;
};
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkg_policy_data {
   struct blkcg_gq *blkg ;
   int plid ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg_policy_data {
   struct blkcg *blkcg ;
   int plid ;
};
#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg_gq {
   struct request_queue *q ;
   struct list_head q_node ;
   struct hlist_node blkcg_node ;
   struct blkcg *blkcg ;
   struct bdi_writeback_congested *wb_congested ;
   struct blkcg_gq *parent ;
   struct percpu_ref refcnt ;
   bool online ;
   struct blkg_iostat_set *iostat_cpu ;
   struct blkg_iostat_set iostat ;
   struct blkg_policy_data *pd[5U] ;
   spinlock_t async_bio_lock ;
   struct bio_list async_bios ;
   struct work_struct async_bio_work ;
   atomic_t use_delay ;
   atomic64_t delay_nsec ;
   atomic64_t delay_start ;
   u64 last_delay ;
   int last_use ;
   struct callback_head callback_head ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/writeback.h"
enum writeback_sync_modes {
    WB_SYNC_NONE = 0,
    WB_SYNC_ALL = 1
};
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/writeback.h"
struct writeback_control {
   long nr_to_write ;
   long pages_skipped ;
   loff_t range_start ;
   loff_t range_end ;
   enum writeback_sync_modes sync_mode ;
   unsigned int for_kupdate : 1 ;
   unsigned int for_background : 1 ;
   unsigned int tagged_writepages : 1 ;
   unsigned int for_reclaim : 1 ;
   unsigned int range_cyclic : 1 ;
   unsigned int for_sync : 1 ;
   unsigned int no_cgroup_owner : 1 ;
   unsigned int punt_to_cgroup : 1 ;
   struct bdi_writeback *wb ;
   struct inode *inode ;
   int wb_id ;
   int wb_lcand_id ;
   int wb_tcand_id ;
   size_t wb_bytes ;
   size_t wb_lcand_bytes ;
   size_t wb_tcand_bytes ;
};
#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/writeback.h"
struct wb_domain {
   spinlock_t lock ;
   struct fprop_global completions ;
   struct timer_list period_timer ;
   unsigned long period_time ;
   unsigned long dirty_limit_tstamp ;
   unsigned long dirty_limit ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_id {
   int id ;
   refcount_t ref ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_vmstats_percpu {
   long stat[38U] ;
   unsigned long events[91U] ;
   unsigned long nr_page_events ;
   unsigned long targets[2U] ;
};
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_reclaim_iter {
   struct mem_cgroup *position ;
   unsigned int generation ;
};
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct lruvec_stat {
   long count[32U] ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_shrinker_map {
   struct callback_head rcu ;
   unsigned long map[0U] ;
};
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_per_node {
   struct lruvec lruvec ;
   struct lruvec_stat *lruvec_stat_local ;
   struct lruvec_stat *lruvec_stat_cpu ;
   atomic_long_t lruvec_stat[32U] ;
   unsigned long lru_zone_size[5U][5U] ;
   struct mem_cgroup_reclaim_iter iter ;
   struct memcg_shrinker_map *shrinker_map ;
   struct rb_node tree_node ;
   unsigned long usage_in_excess ;
   bool on_tree ;
   struct mem_cgroup *memcg ;
};
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_threshold {
   struct eventfd_ctx *eventfd ;
   unsigned long threshold ;
};
#line 145  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_threshold_ary {
   int current_threshold ;
   unsigned int size ;
   struct mem_cgroup_threshold entries[0U] ;
};
#line 154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_thresholds {
   struct mem_cgroup_threshold_ary *primary ;
   struct mem_cgroup_threshold_ary *spare ;
};
#line 164 
enum memcg_kmem_state {
    KMEM_NONE = 0,
    KMEM_ALLOCATED = 1,
    KMEM_ONLINE = 2
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_padding {
   char x[0U] ;
} __attribute__((__aligned__(4096)));
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_cgwb_frn {
   u64 bdi_id ;
   int memcg_id ;
   u64 at ;
   struct wb_completion done ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup {
   struct cgroup_subsys_state css ;
   struct mem_cgroup_id id ;
   struct page_counter memory ;
   struct page_counter swap ;
   struct page_counter memsw ;
   struct page_counter kmem ;
   struct page_counter tcpmem ;
   unsigned long high ;
   struct work_struct high_work ;
   unsigned long soft_limit ;
   struct vmpressure vmpressure ;
   bool use_hierarchy ;
   bool oom_group ;
   bool oom_lock ;
   int under_oom ;
   int swappiness ;
   int oom_kill_disable ;
   struct cgroup_file events_file ;
   struct cgroup_file events_local_file ;
   struct cgroup_file swap_events_file ;
   struct mutex thresholds_lock ;
   struct mem_cgroup_thresholds thresholds ;
   struct mem_cgroup_thresholds memsw_thresholds ;
   struct list_head oom_notify ;
   unsigned long move_charge_at_immigrate ;
   spinlock_t move_lock ;
   unsigned long move_lock_flags ;
   struct memcg_padding _pad1_ ;
   atomic_t moving_account ;
   struct task_struct *move_lock_task ;
   struct memcg_vmstats_percpu *vmstats_local ;
   struct memcg_vmstats_percpu *vmstats_percpu ;
   struct memcg_padding _pad2_ ;
   atomic_long_t vmstats[38U] ;
   atomic_long_t vmevents[91U] ;
   atomic_long_t memory_events[7U] ;
   atomic_long_t memory_events_local[7U] ;
   unsigned long socket_pressure ;
   bool tcpmem_active ;
   int tcpmem_pressure ;
   int kmemcg_id ;
   enum memcg_kmem_state kmem_state ;
   struct list_head kmem_caches ;
   struct list_head cgwb_list ;
   struct wb_domain cgwb_domain ;
   struct memcg_cgwb_frn cgwb_frn[4U] ;
   struct list_head event_list ;
   spinlock_t event_list_lock ;
   struct deferred_split deferred_split_queue ;
   struct mem_cgroup_per_node *nodeinfo[0U] ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/vdso.h"
struct vdso_image {
   void *data ;
   unsigned long size ;
   unsigned long alt ;
   unsigned long alt_len ;
   long sym_vvar_start ;
   long sym_vvar_page ;
   long sym_pvclock_page ;
   long sym_hvclock_page ;
   long sym_VDSO32_NOTE_MASK ;
   long sym___kernel_sigreturn ;
   long sym___kernel_rt_sigreturn ;
   long sym___kernel_vsyscall ;
   long sym_int80_landing_pad ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Addr;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u16 Elf64_Half;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Off;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u32 Elf64_Word;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Xword;
#line 192  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};
#line 200  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_sym Elf64_Sym;
#line 221  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_hdr {
   unsigned char e_ident[16U] ;
   Elf64_Half e_type ;
   Elf64_Half e_machine ;
   Elf64_Word e_version ;
   Elf64_Addr e_entry ;
   Elf64_Off e_phoff ;
   Elf64_Off e_shoff ;
   Elf64_Word e_flags ;
   Elf64_Half e_ehsize ;
   Elf64_Half e_phentsize ;
   Elf64_Half e_phnum ;
   Elf64_Half e_shentsize ;
   Elf64_Half e_shnum ;
   Elf64_Half e_shstrndx ;
};
#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_hdr Elf64_Ehdr;
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_shdr {
   Elf64_Word sh_name ;
   Elf64_Word sh_type ;
   Elf64_Xword sh_flags ;
   Elf64_Addr sh_addr ;
   Elf64_Off sh_offset ;
   Elf64_Xword sh_size ;
   Elf64_Word sh_link ;
   Elf64_Word sh_info ;
   Elf64_Xword sh_addralign ;
   Elf64_Xword sh_entsize ;
};
#line 328  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_shdr Elf64_Shdr;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elf.h"
struct kernel_param;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kernel_param_ops {
   unsigned int flags ;
   int (*set)(char *, struct kernel_param *) ;
   int (*get)(char *, struct kernel_param *) ;
   void (*free)(void *) ;
};
#line 69 
struct kparam_string;
#line 69 
struct kparam_array;
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
union __anonunion_715 {
   void *arg ;
   struct kparam_string *str ;
   struct kparam_array *arr ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kernel_param {
   char *name ;
   struct module *mod ;
   struct kernel_param_ops *ops ;
   u16 perm ;
   s8 level ;
   u8 flags ;
   union __anonunion_715 __anonCompField_kernel_param_166 ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kparam_string {
   unsigned int maxlen ;
   char *string ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kparam_array {
   unsigned int max ;
   unsigned int elemsize ;
   unsigned int *num ;
   struct kernel_param_ops *ops ;
   void *elem ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/error-injection.h"
struct error_injection_entry {
   unsigned long addr ;
   int etype ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/module.h"
struct mod_arch_specific {
   unsigned int num_orcs ;
   int *orc_unwind_ip ;
   struct orc_entry *orc_unwind ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_param_attrs;
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
   struct module_param_attrs *mp ;
   struct completion *kobj_completion ;
} __attribute__((__designated_init__));
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute *, struct module_kobject *, char *) ;
   ssize_t (*store)(struct module_attribute *, struct module_kobject *, char *, size_t ) ;
   void (*setup)(struct module *, char *) ;
   int (*test)(struct module *) ;
   void (*free)(struct module *) ;
};
#line 297 
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2,
    MODULE_STATE_UNFORMED = 3
};
#line 305  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct mod_tree_node {
   struct module *mod ;
   struct latch_tree_node node ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_layout {
   void *base ;
   unsigned int size ;
   unsigned int text_size ;
   unsigned int ro_size ;
   unsigned int ro_after_init_size ;
   struct mod_tree_node mtn ;
};
#line 334  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct mod_kallsyms {
   Elf64_Sym *symtab ;
   unsigned int num_symtab ;
   char *strtab ;
   char *typetab ;
};
#line 342  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct klp_modinfo {
   Elf64_Ehdr hdr ;
   Elf64_Shdr *sechdrs ;
   char *secstrings ;
   unsigned int symndx ;
};
#line 350 
struct module_sect_attrs;
#line 350 
struct module_notes_attrs;
#line 350 
struct trace_event_call;
#line 350 
struct trace_eval_map;
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[56U] ;
   struct module_kobject mkobj ;
   struct module_attribute *modinfo_attrs ;
   char *version ;
   char *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol *syms ;
   s32 *crcs ;
   unsigned int num_syms ;
   struct mutex param_lock ;
   struct kernel_param *kp ;
   unsigned int num_kp ;
   unsigned int num_gpl_syms ;
   struct kernel_symbol *gpl_syms ;
   s32 *gpl_crcs ;
   struct kernel_symbol *unused_syms ;
   s32 *unused_crcs ;
   unsigned int num_unused_syms ;
   unsigned int num_unused_gpl_syms ;
   struct kernel_symbol *unused_gpl_syms ;
   s32 *unused_gpl_crcs ;
   bool sig_ok ;
   bool async_probe_requested ;
   struct kernel_symbol *gpl_future_syms ;
   s32 *gpl_future_crcs ;
   unsigned int num_gpl_future_syms ;
   unsigned int num_exentries ;
   struct exception_table_entry *extable ;
   int (*init)(void) ;
   struct module_layout core_layout ;
   struct module_layout init_layout ;
   struct mod_arch_specific arch ;
   unsigned long taints ;
   unsigned int num_bugs ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   struct mod_kallsyms *kallsyms ;
   struct mod_kallsyms core_kallsyms ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   char *args ;
   void *percpu ;
   unsigned int percpu_size ;
   unsigned int num_tracepoints ;
   tracepoint_ptr_t *tracepoints_ptrs ;
   unsigned int num_srcu_structs ;
   struct srcu_struct **srcu_struct_ptrs ;
   unsigned int num_bpf_raw_events ;
   struct bpf_raw_event_map *bpf_raw_events ;
   struct jump_entry *jump_entries ;
   unsigned int num_jump_entries ;
   unsigned int num_trace_bprintk_fmt ;
   char **trace_bprintk_fmt_start ;
   struct trace_event_call **trace_events ;
   unsigned int num_trace_events ;
   struct trace_eval_map **trace_evals ;
   unsigned int num_trace_evals ;
   unsigned int num_ftrace_callsites ;
   unsigned long *ftrace_callsites ;
   bool klp ;
   bool klp_alive ;
   struct klp_modinfo *klp_info ;
   struct list_head source_list ;
   struct list_head target_list ;
   void (*exit)(void) ;
   atomic_t refcnt ;
   ctor_fn_t *ctors ;
   unsigned int num_ctors ;
   struct error_injection_entry *ei_funcs ;
   unsigned int num_ei_funcs ;
} __attribute__((__designated_init__, __aligned__(64)));
#line 567  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rtnetlink.h"
struct tcmsg {
   unsigned char tcm_family ;
   unsigned char tcm__pad1 ;
   unsigned short tcm__pad2 ;
   int tcm_ifindex ;
   __u32 tcm_handle ;
   __u32 tcm_parent ;
   __u32 tcm_info ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/gen_stats.h"
struct gnet_stats_queue {
   __u32 qlen ;
   __u32 backlog ;
   __u32 drops ;
   __u32 requeues ;
   __u32 overlimits ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/gen_stats.h"
struct gnet_stats_basic_packed {
   __u64 bytes ;
   __u64 packets ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/gen_stats.h"
struct gnet_stats_basic_cpu {
   struct gnet_stats_basic_packed bstats ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 20 
struct net_rate_estimator;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/gen_stats.h"
struct gnet_dump {
   spinlock_t *lock ;
   struct sk_buff *skb ;
   struct nlattr *tail ;
   int compat_tc_stats ;
   int compat_xstats ;
   int padattr ;
   void *xstats ;
   int xstats_len ;
   struct tc_stats tc_stats ;
};
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
struct __anonstruct_727 {
   s16 min ;
   s16 max ;
};
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
union __anonunion_726 {
   void *validation_data ;
   struct __anonstruct_727 __anonCompField___anonunion_726_167 ;
   int (*validate)(struct nlattr *, struct netlink_ext_ack *) ;
   u16 strict_start_type ;
};
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
struct nla_policy {
   u8 type ;
   u8 validation_type ;
   u16 len ;
   union __anonunion_726 __anonCompField_nla_policy_168 ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/rtnetlink.h"
struct rtnl_link_ops {
   struct list_head list ;
   char *kind ;
   size_t priv_size ;
   void (*setup)(struct net_device *) ;
   unsigned int maxtype ;
   struct nla_policy *policy ;
   int (*validate)(struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   int (*newlink)(struct net *, struct net_device *, struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   int (*changelink)(struct net_device *, struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   void (*dellink)(struct net_device *, struct list_head *) ;
   size_t (*get_size)(struct net_device *) ;
   int (*fill_info)(struct sk_buff *, struct net_device *) ;
   size_t (*get_xstats_size)(struct net_device *) ;
   int (*fill_xstats)(struct sk_buff *, struct net_device *) ;
   unsigned int (*get_num_tx_queues)(void) ;
   unsigned int (*get_num_rx_queues)(void) ;
   unsigned int slave_maxtype ;
   struct nla_policy *slave_policy ;
   int (*slave_changelink)(struct net_device *, struct net_device *, struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   size_t (*get_slave_size)(struct net_device *, struct net_device *) ;
   int (*fill_slave_info)(struct sk_buff *, struct net_device *, struct net_device *) ;
   struct net *(*get_link_net)(struct net_device *) ;
   size_t (*get_linkxstats_size)(struct net_device *, int ) ;
   int (*fill_linkxstats)(struct sk_buff *, struct net_device *, int *, int ) ;
};
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jhash.h"
struct rhash_lock_head {
   };
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable.h"
struct bucket_table {
   unsigned int size ;
   unsigned int nest ;
   u32 hash_rnd ;
   struct list_head walkers ;
   struct callback_head rcu ;
   struct bucket_table *future_tbl ;
   struct lockdep_map dep_map ;
   struct rhash_lock_head *buckets[] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct flow_block {
   struct list_head cb_list ;
};
#line 298  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
typedef int flow_setup_cb_t(enum tc_setup_type , void *, void *);
#line 412 
struct Qdisc_ops;
#line 413 
struct qdisc_walker;
#line 414 
struct tcf_walker;
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct qdisc_size_table {
   struct callback_head rcu ;
   struct list_head list ;
   struct tc_sizespec szopts ;
   int refcnt ;
   u16 data[] ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct qdisc_skb_head {
   struct sk_buff *head ;
   struct sk_buff *tail ;
   __u32 qlen ;
   spinlock_t lock ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct Qdisc {
   int (*enqueue)(struct sk_buff *, struct Qdisc *, struct sk_buff **) ;
   struct sk_buff *(*dequeue)(struct Qdisc *) ;
   unsigned int flags ;
   u32 limit ;
   struct Qdisc_ops *ops ;
   struct qdisc_size_table *stab ;
   struct hlist_node hash ;
   u32 handle ;
   u32 parent ;
   struct netdev_queue *dev_queue ;
   struct net_rate_estimator *rate_est ;
   struct gnet_stats_basic_cpu *cpu_bstats ;
   struct gnet_stats_queue *cpu_qstats ;
   int padded ;
   refcount_t refcnt ;
   struct sk_buff_head gso_skb ;
   struct qdisc_skb_head q ;
   struct gnet_stats_basic_packed bstats ;
   seqcount_t running ;
   struct gnet_stats_queue qstats ;
   unsigned long state ;
   struct Qdisc *next_sched ;
   struct sk_buff_head skb_bad_txq ;
   spinlock_t busylock ;
   spinlock_t seqlock ;
   bool empty ;
   struct callback_head rcu ;
};
#line 195 
struct tcf_block;
#line 195  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct Qdisc_class_ops {
   unsigned int flags ;
   struct netdev_queue *(*select_queue)(struct Qdisc *, struct tcmsg *) ;
   int (*graft)(struct Qdisc *, unsigned long , struct Qdisc *, struct Qdisc **, struct netlink_ext_ack *) ;
   struct Qdisc *(*leaf)(struct Qdisc *, unsigned long ) ;
   void (*qlen_notify)(struct Qdisc *, unsigned long ) ;
   unsigned long (*find)(struct Qdisc *, u32 ) ;
   int (*change)(struct Qdisc *, u32 , u32 , struct nlattr **, unsigned long *, struct netlink_ext_ack *) ;
   int (*delete)(struct Qdisc *, unsigned long ) ;
   void (*walk)(struct Qdisc *, struct qdisc_walker *) ;
   struct tcf_block *(*tcf_block)(struct Qdisc *, unsigned long , struct netlink_ext_ack *) ;
   unsigned long (*bind_tcf)(struct Qdisc *, unsigned long , u32 ) ;
   void (*unbind_tcf)(struct Qdisc *, unsigned long ) ;
   int (*dump)(struct Qdisc *, unsigned long , struct sk_buff *, struct tcmsg *) ;
   int (*dump_stats)(struct Qdisc *, unsigned long , struct gnet_dump *) ;
};
#line 235  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct Qdisc_ops {
   struct Qdisc_ops *next ;
   struct Qdisc_class_ops *cl_ops ;
   char id[16U] ;
   int priv_size ;
   unsigned int static_flags ;
   int (*enqueue)(struct sk_buff *, struct Qdisc *, struct sk_buff **) ;
   struct sk_buff *(*dequeue)(struct Qdisc *) ;
   struct sk_buff *(*peek)(struct Qdisc *) ;
   int (*init)(struct Qdisc *, struct nlattr *, struct netlink_ext_ack *) ;
   void (*reset)(struct Qdisc *) ;
   void (*destroy)(struct Qdisc *) ;
   int (*change)(struct Qdisc *, struct nlattr *, struct netlink_ext_ack *) ;
   void (*attach)(struct Qdisc *) ;
   int (*change_tx_queue_len)(struct Qdisc *, unsigned int ) ;
   int (*dump)(struct Qdisc *, struct sk_buff *) ;
   int (*dump_stats)(struct Qdisc *, struct gnet_dump *) ;
   void (*ingress_block_set)(struct Qdisc *, u32 ) ;
   void (*egress_block_set)(struct Qdisc *, u32 ) ;
   u32 (*ingress_block_get)(struct Qdisc *) ;
   u32 (*egress_block_get)(struct Qdisc *) ;
   struct module *owner ;
};
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct __anonstruct_801 {
   unsigned long class ;
   u32 classid ;
};
#line 272 
struct tcf_proto;
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct __anonstruct_802 {
   bool ingress ;
   struct gnet_stats_queue *qstats ;
};
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
union __anonunion_800 {
   struct __anonstruct_801 __anonCompField___anonunion_800_170 ;
   struct tcf_proto *goto_tp ;
   struct __anonstruct_802 __anonCompField___anonunion_800_171 ;
};
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_result {
   union __anonunion_800 __anonCompField_tcf_result_172 ;
};
#line 287 
struct tcf_chain;
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_proto_ops {
   struct list_head head ;
   char kind[16U] ;
   int (*classify)(struct sk_buff *, struct tcf_proto *, struct tcf_result *) ;
   int (*init)(struct tcf_proto *) ;
   void (*destroy)(struct tcf_proto *, bool , struct netlink_ext_ack *) ;
   void *(*get)(struct tcf_proto *, u32 ) ;
   void (*put)(struct tcf_proto *, void *) ;
   int (*change)(struct net *, struct sk_buff *, struct tcf_proto *, unsigned long , u32 , struct nlattr **, void **, bool , bool , struct netlink_ext_ack *) ;
   int (*delete)(struct tcf_proto *, void *, bool *, bool , struct netlink_ext_ack *) ;
   bool (*delete_empty)(struct tcf_proto *) ;
   void (*walk)(struct tcf_proto *, struct tcf_walker *, bool ) ;
   int (*reoffload)(struct tcf_proto *, bool , flow_setup_cb_t *, void *, struct netlink_ext_ack *) ;
   void (*hw_add)(struct tcf_proto *, void *) ;
   void (*hw_del)(struct tcf_proto *, void *) ;
   void (*bind_class)(void *, u32 , unsigned long ) ;
   void *(*tmplt_create)(struct net *, struct tcf_chain *, struct nlattr **, struct netlink_ext_ack *) ;
   void (*tmplt_destroy)(void *) ;
   int (*dump)(struct net *, struct tcf_proto *, void *, struct sk_buff *, struct tcmsg *, bool ) ;
   int (*tmplt_dump)(struct sk_buff *, struct net *, void *) ;
   struct module *owner ;
   int flags ;
};
#line 348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_proto {
   struct tcf_proto *next ;
   void *root ;
   int (*classify)(struct sk_buff *, struct tcf_proto *, struct tcf_result *) ;
   __be16 protocol ;
   u32 prio ;
   void *data ;
   struct tcf_proto_ops *ops ;
   struct tcf_chain *chain ;
   spinlock_t lock ;
   bool deleting ;
   refcount_t refcnt ;
   struct callback_head rcu ;
   struct hlist_node destroy_ht_node ;
};
#line 386  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_chain {
   struct mutex filter_chain_lock ;
   struct tcf_proto *filter_chain ;
   struct list_head list ;
   struct tcf_block *block ;
   u32 index ;
   unsigned int refcnt ;
   unsigned int action_refcnt ;
   bool explicitly_created ;
   bool flushing ;
   struct tcf_proto_ops *tmplt_ops ;
   void *tmplt_priv ;
   struct callback_head rcu ;
};
#line 402  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct __anonstruct_chain0_804 {
   struct tcf_chain *chain ;
   struct list_head filter_chain_list ;
};
#line 402  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_block {
   struct mutex lock ;
   struct list_head chain_list ;
   u32 index ;
   refcount_t refcnt ;
   struct net *net ;
   struct Qdisc *q ;
   struct rw_semaphore cb_lock ;
   struct flow_block flow_block ;
   struct list_head owner_list ;
   bool keep_dst ;
   atomic_t offloadcnt ;
   unsigned int nooffloaddevcnt ;
   unsigned int lockeddevcnt ;
   struct __anonstruct_chain0_804 chain0 ;
   struct callback_head rcu ;
   struct hlist_head proto_destroy_ht[128U] ;
   struct mutex proto_destroy_lock ;
};
#line 1269  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct mini_Qdisc {
   struct tcf_proto *filter_list ;
   struct gnet_stats_basic_cpu *cpu_bstats ;
   struct gnet_stats_queue *cpu_qstats ;
   struct callback_head rcu ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/filter.h"
struct sock_filter {
   __u16 code ;
   __u8 jt ;
   __u8 jf ;
   __u32 k ;
};
#line 35 
struct sock_reuseport;
#line 513  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
struct sock_fprog_kern {
   u16 len ;
   struct sock_filter *filter ;
};
#line 526  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
union __anonunion_817 {
   struct sock_filter insns[0U] ;
   struct bpf_insn insnsi[0U] ;
};
#line 526  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
struct bpf_prog {
   u16 pages ;
   u16 jited : 1 ;
   u16 jit_requested : 1 ;
   u16 gpl_compatible : 1 ;
   u16 cb_access : 1 ;
   u16 dst_needed : 1 ;
   u16 blinded : 1 ;
   u16 is_func : 1 ;
   u16 kprobe_override : 1 ;
   u16 has_callchain_buf : 1 ;
   u16 enforce_expected_attach_type : 1 ;
   enum bpf_prog_type type ;
   enum bpf_attach_type expected_attach_type ;
   u32 len ;
   u32 jited_len ;
   u8 tag[8U] ;
   struct bpf_prog_aux *aux ;
   struct sock_fprog_kern *orig_prog ;
   unsigned int (*bpf_func)(void *, struct bpf_insn *) ;
   union __anonunion_817 __anonCompField_bpf_prog_174 ;
};
#line 554  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
struct sk_filter {
   refcount_t refcnt ;
   struct callback_head rcu ;
   struct bpf_prog *prog ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/poll.h"
struct pollfd {
   int fd ;
   short events ;
   short revents ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/poll.h"
struct poll_table_struct {
   void (*_qproc)(struct file *, wait_queue_head_t *, struct poll_table_struct *) ;
   __poll_t _key ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_table;
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_parms {
   possible_net_t net ;
   struct net_device *dev ;
   struct list_head list ;
   int (*neigh_setup)(struct neighbour *) ;
   struct neigh_table *tbl ;
   void *sysctl_table ;
   int dead ;
   refcount_t refcnt ;
   struct callback_head callback_head ;
   int reachable_time ;
   int data[13U] ;
   unsigned long data_state[1U] ;
};
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_statistics {
   unsigned long allocs ;
   unsigned long destroys ;
   unsigned long hash_grows ;
   unsigned long res_failed ;
   unsigned long lookups ;
   unsigned long hits ;
   unsigned long rcv_probes_mcast ;
   unsigned long rcv_probes_ucast ;
   unsigned long periodic_gc_runs ;
   unsigned long forced_gc_runs ;
   unsigned long unres_discards ;
   unsigned long table_fulls ;
};
#line 134 
struct neigh_ops;
#line 134  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neighbour {
   struct neighbour *next ;
   struct neigh_table *tbl ;
   struct neigh_parms *parms ;
   unsigned long confirmed ;
   unsigned long updated ;
   rwlock_t lock ;
   refcount_t refcnt ;
   unsigned int arp_queue_len_bytes ;
   struct sk_buff_head arp_queue ;
   struct timer_list timer ;
   unsigned long used ;
   atomic_t probes ;
   __u8 flags ;
   __u8 nud_state ;
   __u8 type ;
   __u8 dead ;
   u8 protocol ;
   seqlock_t ha_lock ;
   unsigned char ha[32U] ;
   struct hh_cache hh ;
   int (*output)(struct neighbour *, struct sk_buff *) ;
   struct neigh_ops *ops ;
   struct list_head gc_list ;
   struct callback_head rcu ;
   struct net_device *dev ;
   u8 primary_key[0U] ;
} __attribute__((__designated_init__));
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_ops {
   int family ;
   void (*solicit)(struct neighbour *, struct sk_buff *) ;
   void (*error_report)(struct neighbour *, struct sk_buff *) ;
   int (*output)(struct neighbour *, struct sk_buff *) ;
   int (*connected_output)(struct neighbour *, struct sk_buff *) ;
};
#line 171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct pneigh_entry {
   struct pneigh_entry *next ;
   possible_net_t net ;
   struct net_device *dev ;
   u8 flags ;
   u8 protocol ;
   u8 key[0U] ;
};
#line 186  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_hash_table {
   struct neighbour **hash_buckets ;
   unsigned int hash_shift ;
   __u32 hash_rnd[4U] ;
   struct callback_head rcu ;
};
#line 194  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_table {
   int family ;
   unsigned int entry_size ;
   unsigned int key_len ;
   __be16 protocol ;
   __u32 (*hash)(void *, struct net_device *, __u32 *) ;
   bool (*key_eq)(struct neighbour *, void *) ;
   int (*constructor)(struct neighbour *) ;
   int (*pconstructor)(struct pneigh_entry *) ;
   void (*pdestructor)(struct pneigh_entry *) ;
   void (*proxy_redo)(struct sk_buff *) ;
   bool (*allow_add)(struct net_device *, struct netlink_ext_ack *) ;
   char *id ;
   struct neigh_parms parms ;
   struct list_head parms_list ;
   int gc_interval ;
   int gc_thresh1 ;
   int gc_thresh2 ;
   int gc_thresh3 ;
   unsigned long last_flush ;
   struct delayed_work gc_work ;
   struct timer_list proxy_timer ;
   struct sk_buff_head proxy_queue ;
   atomic_t entries ;
   atomic_t gc_entries ;
   struct list_head gc_list ;
   rwlock_t lock ;
   unsigned long last_rand ;
   struct neigh_statistics *stats ;
   struct neigh_hash_table *nht ;
   struct pneigh_entry **phash_buckets ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst.h"
struct lwtunnel_state;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst.h"
struct dst_entry {
   struct net_device *dev ;
   struct dst_ops *ops ;
   unsigned long _metrics ;
   unsigned long expires ;
   struct xfrm_state *xfrm ;
   int (*input)(struct sk_buff *) ;
   int (*output)(struct net *, struct sock *, struct sk_buff *) ;
   unsigned short flags ;
   short obsolete ;
   unsigned short header_len ;
   unsigned short trailer_len ;
   atomic_t __refcnt ;
   int __use ;
   unsigned long lastuse ;
   struct lwtunnel_state *lwtstate ;
   struct callback_head callback_head ;
   short error ;
   short __pad ;
   __u32 tclassid ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fib_rules.h"
struct fib_rule_hdr {
   __u8 family ;
   __u8 dst_len ;
   __u8 src_len ;
   __u8 tos ;
   __u8 table ;
   __u8 res1 ;
   __u8 res2 ;
   __u8 action ;
   __u32 flags ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fib_rules.h"
struct fib_rule_port_range {
   __u16 start ;
   __u16 end ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_notifier.h"
struct fib_notifier_ops {
   int family ;
   struct list_head list ;
   unsigned int (*fib_seq_read)(struct net *) ;
   int (*fib_dump)(struct net *, struct notifier_block *, struct netlink_ext_ack *) ;
   struct module *owner ;
   struct callback_head rcu ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_kuid_range {
   kuid_t start ;
   kuid_t end ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_rule {
   struct list_head list ;
   int iifindex ;
   int oifindex ;
   u32 mark ;
   u32 mark_mask ;
   u32 flags ;
   u32 table ;
   u8 action ;
   u8 l3mdev ;
   u8 proto ;
   u8 ip_proto ;
   u32 target ;
   __be64 tun_id ;
   struct fib_rule *ctarget ;
   struct net *fr_net ;
   refcount_t refcnt ;
   u32 pref ;
   int suppress_ifgroup ;
   int suppress_prefixlen ;
   char iifname[16U] ;
   char oifname[16U] ;
   struct fib_kuid_range uid_range ;
   struct fib_rule_port_range sport_range ;
   struct fib_rule_port_range dport_range ;
   struct callback_head rcu ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_lookup_arg {
   void *lookup_ptr ;
   void *lookup_data ;
   void *result ;
   struct fib_rule *rule ;
   u32 table ;
   int flags ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_rules_ops {
   int family ;
   struct list_head list ;
   int rule_size ;
   int addr_size ;
   int unresolved_rules ;
   int nr_goto_rules ;
   unsigned int fib_rules_seq ;
   int (*action)(struct fib_rule *, struct flowi *, int , struct fib_lookup_arg *) ;
   bool (*suppress)(struct fib_rule *, struct fib_lookup_arg *) ;
   int (*match)(struct fib_rule *, struct flowi *, int ) ;
   int (*configure)(struct fib_rule *, struct sk_buff *, struct fib_rule_hdr *, struct nlattr **, struct netlink_ext_ack *) ;
   int (*delete)(struct fib_rule *) ;
   int (*compare)(struct fib_rule *, struct fib_rule_hdr *, struct nlattr **) ;
   int (*fill)(struct fib_rule *, struct sk_buff *, struct fib_rule_hdr *) ;
   size_t (*nlmsg_payload)(struct fib_rule *) ;
   void (*flush_cache)(struct fib_rules_ops *) ;
   int nlgroup ;
   struct nla_policy *policy ;
   struct list_head rules_list ;
   struct module *owner ;
   struct net *fro_net ;
   struct callback_head rcu ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/l3mdev.h"
struct l3mdev_ops {
   u32 (*l3mdev_fib_table)(struct net_device *) ;
   struct sk_buff *(*l3mdev_l3_rcv)(struct net_device *, struct sk_buff *, u16 ) ;
   struct sk_buff *(*l3mdev_l3_out)(struct net_device *, struct sock *, struct sk_buff *, u16 ) ;
   struct dst_entry *(*l3mdev_link_scope_lookup)(struct net_device *, struct flowi6 *) ;
};
#line 202  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/l3mdev.h"
struct __anonstruct_socket_lock_t_839 {
   spinlock_t slock ;
   int owned ;
   wait_queue_head_t wq ;
   struct lockdep_map dep_map ;
};
#line 202  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/l3mdev.h"
typedef struct __anonstruct_socket_lock_t_839 socket_lock_t;
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct proto;
#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
typedef __u32 __portpair;
#line 114  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
typedef __u64 __addrpair;
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct __anonstruct_841 {
   __be32 skc_daddr ;
   __be32 skc_rcv_saddr ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_840 {
   __addrpair skc_addrpair ;
   struct __anonstruct_841 __anonCompField___anonunion_840_176 ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_842 {
   unsigned int skc_hash ;
   __u16 skc_u16hashes[2U] ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct __anonstruct_844 {
   __be16 skc_dport ;
   __u16 skc_num ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_843 {
   __portpair skc_portpair ;
   struct __anonstruct_844 __anonCompField___anonunion_843_179 ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_845 {
   struct hlist_node skc_bind_node ;
   struct hlist_node skc_portaddr_node ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_846 {
   unsigned long skc_flags ;
   struct sock *skc_listener ;
   struct inet_timewait_death_row *skc_tw_dr ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_847 {
   struct hlist_node skc_node ;
   struct hlist_nulls_node skc_nulls_node ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_848 {
   int skc_incoming_cpu ;
   u32 skc_rcv_wnd ;
   u32 skc_tw_rcv_nxt ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_849 {
   u32 skc_rxhash ;
   u32 skc_window_clamp ;
   u32 skc_tw_snd_nxt ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct sock_common {
   union __anonunion_840 __anonCompField_sock_common_177 ;
   union __anonunion_842 __anonCompField_sock_common_178 ;
   union __anonunion_843 __anonCompField_sock_common_180 ;
   unsigned short skc_family ;
   unsigned char skc_state ;
   unsigned char skc_reuse : 4 ;
   unsigned char skc_reuseport : 1 ;
   unsigned char skc_ipv6only : 1 ;
   unsigned char skc_net_refcnt : 1 ;
   int skc_bound_dev_if ;
   union __anonunion_845 __anonCompField_sock_common_181 ;
   struct proto *skc_prot ;
   possible_net_t skc_net ;
   struct in6_addr skc_v6_daddr ;
   struct in6_addr skc_v6_rcv_saddr ;
   atomic64_t skc_cookie ;
   union __anonunion_846 __anonCompField_sock_common_182 ;
   int skc_dontcopy_begin[0U] ;
   union __anonunion_847 __anonCompField_sock_common_183 ;
   unsigned short skc_tx_queue_mapping ;
   unsigned short skc_rx_queue_mapping ;
   union __anonunion_848 __anonCompField_sock_common_184 ;
   refcount_t skc_refcnt ;
   int skc_dontcopy_end[0U] ;
   union __anonunion_849 __anonCompField_sock_common_185 ;
};
#line 231 
struct bpf_sk_storage;
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct __anonstruct_sk_backlog_850 {
   atomic_t rmem_alloc ;
   int len ;
   struct sk_buff *head ;
   struct sk_buff *tail ;
};
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_851 {
   struct socket_wq *sk_wq ;
   struct socket_wq *sk_wq_raw ;
};
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_852 {
   struct sk_buff *sk_send_head ;
   struct rb_root tcp_rtx_queue ;
};
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct sock {
   struct sock_common __sk_common ;
   socket_lock_t sk_lock ;
   atomic_t sk_drops ;
   int sk_rcvlowat ;
   struct sk_buff_head sk_error_queue ;
   struct sk_buff *sk_rx_skb_cache ;
   struct sk_buff_head sk_receive_queue ;
   struct __anonstruct_sk_backlog_850 sk_backlog ;
   int sk_forward_alloc ;
   unsigned int sk_ll_usec ;
   unsigned int sk_napi_id ;
   int sk_rcvbuf ;
   struct sk_filter *sk_filter ;
   union __anonunion_851 __anonCompField_sock_186 ;
   struct xfrm_policy *sk_policy[2U] ;
   struct dst_entry *sk_rx_dst ;
   struct dst_entry *sk_dst_cache ;
   atomic_t sk_omem_alloc ;
   int sk_sndbuf ;
   int sk_wmem_queued ;
   refcount_t sk_wmem_alloc ;
   unsigned long sk_tsq_flags ;
   union __anonunion_852 __anonCompField_sock_187 ;
   struct sk_buff *sk_tx_skb_cache ;
   struct sk_buff_head sk_write_queue ;
   __s32 sk_peek_off ;
   int sk_write_pending ;
   __u32 sk_dst_pending_confirm ;
   u32 sk_pacing_status ;
   long sk_sndtimeo ;
   struct timer_list sk_timer ;
   __u32 sk_priority ;
   __u32 sk_mark ;
   unsigned long sk_pacing_rate ;
   unsigned long sk_max_pacing_rate ;
   struct page_frag sk_frag ;
   netdev_features_t sk_route_caps ;
   netdev_features_t sk_route_nocaps ;
   netdev_features_t sk_route_forced_caps ;
   int sk_gso_type ;
   unsigned int sk_gso_max_size ;
   gfp_t sk_allocation ;
   __u32 sk_txhash ;
   unsigned int __sk_flags_offset[0U] ;
   unsigned int sk_padding : 1 ;
   unsigned int sk_kern_sock : 1 ;
   unsigned int sk_no_check_tx : 1 ;
   unsigned int sk_no_check_rx : 1 ;
   unsigned int sk_userlocks : 4 ;
   unsigned int sk_protocol : 8 ;
   unsigned int sk_type : 16 ;
   u16 sk_gso_max_segs ;
   u8 sk_pacing_shift ;
   unsigned long sk_lingertime ;
   struct proto *sk_prot_creator ;
   rwlock_t sk_callback_lock ;
   int sk_err ;
   int sk_err_soft ;
   u32 sk_ack_backlog ;
   u32 sk_max_ack_backlog ;
   kuid_t sk_uid ;
   struct pid *sk_peer_pid ;
   struct cred *sk_peer_cred ;
   long sk_rcvtimeo ;
   ktime_t sk_stamp ;
   u16 sk_tsflags ;
   u8 sk_shutdown ;
   u32 sk_tskey ;
   atomic_t sk_zckey ;
   u8 sk_clockid ;
   u8 sk_txtime_deadline_mode : 1 ;
   u8 sk_txtime_report_errors : 1 ;
   u8 sk_txtime_unused : 6 ;
   struct socket *sk_socket ;
   void *sk_user_data ;
   void *sk_security ;
   struct sock_cgroup_data sk_cgrp_data ;
   struct mem_cgroup *sk_memcg ;
   void (*sk_state_change)(struct sock *) ;
   void (*sk_data_ready)(struct sock *) ;
   void (*sk_write_space)(struct sock *) ;
   void (*sk_error_report)(struct sock *) ;
   int (*sk_backlog_rcv)(struct sock *, struct sk_buff *) ;
   struct sk_buff *(*sk_validate_xmit_skb)(struct sock *, struct net_device *, struct sk_buff *) ;
   void (*sk_destruct)(struct sock *) ;
   struct sock_reuseport *sk_reuseport_cb ;
   struct bpf_sk_storage *sk_bpf_storage ;
   struct callback_head sk_rcu ;
};
#line 1048 
struct request_sock_ops;
#line 1049 
struct timewait_sock_ops;
#line 1050 
struct raw_hashinfo;
#line 1051 
struct smc_hashinfo;
#line 1071 
struct udp_table;
#line 1071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_h_887 {
   struct inet_hashinfo *hashinfo ;
   struct udp_table *udp_table ;
   struct raw_hashinfo *raw_hash ;
   struct smc_hashinfo *smc_hash ;
};
#line 1071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct proto {
   void (*close)(struct sock *, long ) ;
   int (*pre_connect)(struct sock *, struct sockaddr *, int ) ;
   int (*connect)(struct sock *, struct sockaddr *, int ) ;
   int (*disconnect)(struct sock *, int ) ;
   struct sock *(*accept)(struct sock *, int , int *, bool ) ;
   int (*ioctl)(struct sock *, int , unsigned long ) ;
   int (*init)(struct sock *) ;
   void (*destroy)(struct sock *) ;
   void (*shutdown)(struct sock *, int ) ;
   int (*setsockopt)(struct sock *, int , int , char *, unsigned int ) ;
   int (*getsockopt)(struct sock *, int , int , char *, int *) ;
   void (*keepalive)(struct sock *, int ) ;
   int (*compat_setsockopt)(struct sock *, int , int , char *, unsigned int ) ;
   int (*compat_getsockopt)(struct sock *, int , int , char *, int *) ;
   int (*compat_ioctl)(struct sock *, unsigned int , unsigned long ) ;
   int (*sendmsg)(struct sock *, struct msghdr *, size_t ) ;
   int (*recvmsg)(struct sock *, struct msghdr *, size_t , int , int , int *) ;
   int (*sendpage)(struct sock *, struct page *, int , size_t , int ) ;
   int (*bind)(struct sock *, struct sockaddr *, int ) ;
   int (*backlog_rcv)(struct sock *, struct sk_buff *) ;
   void (*release_cb)(struct sock *) ;
   int (*hash)(struct sock *) ;
   void (*unhash)(struct sock *) ;
   void (*rehash)(struct sock *) ;
   int (*get_port)(struct sock *, unsigned short ) ;
   unsigned int inuse_idx ;
   bool (*stream_memory_free)(struct sock *, int ) ;
   bool (*stream_memory_read)(struct sock *) ;
   void (*enter_memory_pressure)(struct sock *) ;
   void (*leave_memory_pressure)(struct sock *) ;
   atomic_long_t *memory_allocated ;
   struct percpu_counter *sockets_allocated ;
   unsigned long *memory_pressure ;
   long *sysctl_mem ;
   int *sysctl_wmem ;
   int *sysctl_rmem ;
   u32 sysctl_wmem_offset ;
   u32 sysctl_rmem_offset ;
   int max_header ;
   bool no_autobind ;
   struct kmem_cache *slab ;
   unsigned int obj_size ;
   slab_flags_t slab_flags ;
   unsigned int useroffset ;
   unsigned int usersize ;
   struct percpu_counter *orphan_count ;
   struct request_sock_ops *rsk_prot ;
   struct timewait_sock_ops *twsk_prot ;
   union __anonunion_h_887 h ;
   struct module *owner ;
   char name[32U] ;
   struct list_head node ;
   int (*diag_destroy)(struct sock *, int ) ;
} __attribute__((__designated_init__));
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/request_sock.h"
struct request_sock_ops {
   int family ;
   unsigned int obj_size ;
   struct kmem_cache *slab ;
   char *slab_name ;
   int (*rtx_syn_ack)(struct sock *, struct request_sock *) ;
   void (*send_ack)(struct sock *, struct sk_buff *, struct request_sock *) ;
   void (*send_reset)(struct sock *, struct sk_buff *) ;
   void (*destructor)(struct request_sock *) ;
   void (*syn_ack_timeout)(struct request_sock *) ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/request_sock.h"
struct request_sock {
   struct sock_common __req_common ;
   struct request_sock *dl_next ;
   u16 mss ;
   u8 num_retrans ;
   u8 cookie_ts : 1 ;
   u8 num_timeout : 7 ;
   u32 ts_recent ;
   struct timer_list rsk_timer ;
   struct request_sock_ops *rsk_ops ;
   struct sock *sk ;
   u32 *saved_syn ;
   u32 secid ;
   u32 peer_secid ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/timewait_sock.h"
struct timewait_sock_ops {
   struct kmem_cache *twsk_slab ;
   char *twsk_slab_name ;
   unsigned int twsk_obj_size ;
   int (*twsk_unique)(struct sock *, struct sock *, void *) ;
   void (*twsk_destructor)(struct sock *) ;
};
#line 374  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ipv6.h"
typedef unsigned long kernel_ulong_t;
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct pci_device_id {
   __u32 vendor ;
   __u32 device ;
   __u32 subvendor ;
   __u32 subdevice ;
   __u32 class ;
   __u32 class_mask ;
   kernel_ulong_t driver_data ;
};
#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct acpi_device_id {
   __u8 id[9U] ;
   kernel_ulong_t driver_data ;
   __u32 cls ;
   __u32 cls_msk ;
};
#line 260  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct of_device_id {
   char name[32U] ;
   char type[32U] ;
   char compatible[128U] ;
   void *data ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/property.h"
typedef u32 phandle;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/of.h"
struct property {
   char *name ;
   int length ;
   void *value ;
   struct property *next ;
   unsigned long _flags ;
   struct bin_attribute attr ;
};
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/of.h"
struct device_node {
   char *name ;
   phandle phandle ;
   char *full_name ;
   struct fwnode_handle fwnode ;
   struct property *properties ;
   struct property *deadprops ;
   struct device_node *parent ;
   struct device_node *child ;
   struct device_node *sibling ;
   struct kobject kobj ;
   unsigned long _flags ;
   void *data ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/of.h"
struct of_phandle_args {
   struct device_node *np ;
   int args_count ;
   uint32_t args[16U] ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/iommu.h"
struct iommu_fault_unrecoverable {
   __u32 reason ;
   __u32 flags ;
   __u32 pasid ;
   __u32 perm ;
   __u64 addr ;
   __u64 fetch_addr ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/iommu.h"
struct iommu_fault_page_request {
   __u32 flags ;
   __u32 pasid ;
   __u32 grpid ;
   __u32 perm ;
   __u64 addr ;
   __u64 private_data[2U] ;
};
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/iommu.h"
union __anonunion_962 {
   struct iommu_fault_unrecoverable event ;
   struct iommu_fault_page_request prm ;
   __u8 padding2[56U] ;
};
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/iommu.h"
struct iommu_fault {
   __u32 type ;
   __u32 padding ;
   union __anonunion_962 __anonCompField_iommu_fault_191 ;
};
#line 145  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/iommu.h"
struct iommu_page_response {
   __u32 version ;
   __u32 flags ;
   __u32 pasid ;
   __u32 grpid ;
   __u32 code ;
};
#line 183  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/iommu.h"
struct iommu_inv_addr_info {
   __u32 flags ;
   __u32 archid ;
   __u64 pasid ;
   __u64 addr ;
   __u64 granule_size ;
   __u64 nb_granules ;
};
#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/iommu.h"
struct iommu_inv_pasid_info {
   __u32 flags ;
   __u32 archid ;
   __u64 pasid ;
};
#line 248  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/iommu.h"
union __anonunion_963 {
   struct iommu_inv_pasid_info pasid_info ;
   struct iommu_inv_addr_info addr_info ;
};
#line 248  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/iommu.h"
struct iommu_cache_invalidate_info {
   __u32 version ;
   __u8 cache ;
   __u8 granularity ;
   __u8 padding[2U] ;
   union __anonunion_963 __anonCompField_iommu_cache_invalidate_info_192 ;
};
#line 276  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/iommu.h"
struct iommu_gpasid_bind_data_vtd {
   __u64 flags ;
   __u32 pat ;
   __u32 emt ;
};
#line 306  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/iommu.h"
union __anonunion_964 {
   struct iommu_gpasid_bind_data_vtd vtd ;
};
#line 306  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/iommu.h"
struct iommu_gpasid_bind_data {
   __u32 version ;
   __u32 format ;
   __u64 flags ;
   __u64 gpgd ;
   __u64 hpasid ;
   __u64 gpasid ;
   __u32 addr_width ;
   __u8 padding[12U] ;
   union __anonunion_964 __anonCompField_iommu_gpasid_bind_data_193 ;
};
#line 323 
struct iommu_domain;
#line 324 
struct iommu_sva;
#line 325 
struct iommu_fault_event;
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iommu.h"
struct iommu_domain_geometry {
   dma_addr_t aperture_start ;
   dma_addr_t aperture_end ;
   bool force_aperture ;
};
#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iommu.h"
struct iommu_domain {
   unsigned int type ;
   struct iommu_ops *ops ;
   unsigned long pgsize_bitmap ;
   int (*handler)(struct iommu_domain *, struct device *, unsigned long , int , void *) ;
   void *handler_token ;
   struct iommu_domain_geometry geometry ;
   void *iova_cookie ;
};
#line 99 
enum iommu_cap {
    IOMMU_CAP_CACHE_COHERENCY = 0,
    IOMMU_CAP_INTR_REMAP = 1,
    IOMMU_CAP_NOEXEC = 2
};
#line 105 
enum iommu_attr {
    DOMAIN_ATTR_GEOMETRY = 0,
    DOMAIN_ATTR_PAGING = 1,
    DOMAIN_ATTR_WINDOWS = 2,
    DOMAIN_ATTR_FSL_PAMU_STASH = 3,
    DOMAIN_ATTR_FSL_PAMU_ENABLE = 4,
    DOMAIN_ATTR_FSL_PAMUV1 = 5,
    DOMAIN_ATTR_NESTING = 6,
    DOMAIN_ATTR_DMA_USE_FLUSH_QUEUE = 7,
    DOMAIN_ATTR_MAX = 8
};
#line 117 
enum iommu_resv_type {
    IOMMU_RESV_DIRECT = 0,
    IOMMU_RESV_DIRECT_RELAXABLE = 1,
    IOMMU_RESV_RESERVED = 2,
    IOMMU_RESV_MSI = 3,
    IOMMU_RESV_SW_MSI = 4
};
#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iommu.h"
struct iommu_resv_region {
   struct list_head list ;
   phys_addr_t start ;
   size_t length ;
   int prot ;
   enum iommu_resv_type type ;
};
#line 165 
enum iommu_dev_features {
    IOMMU_DEV_FEAT_AUX = 0,
    IOMMU_DEV_FEAT_SVA = 1
};
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iommu.h"
struct iommu_sva_ops {
   int (*mm_exit)(struct device *, struct iommu_sva *, void *) ;
};
#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iommu.h"
struct iommu_iotlb_gather {
   unsigned long start ;
   unsigned long end ;
   size_t pgsize ;
};
#line 253  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iommu.h"
struct iommu_ops {
   bool (*capable)(enum iommu_cap ) ;
   struct iommu_domain *(*domain_alloc)(unsigned int ) ;
   void (*domain_free)(struct iommu_domain *) ;
   int (*attach_dev)(struct iommu_domain *, struct device *) ;
   void (*detach_dev)(struct iommu_domain *, struct device *) ;
   int (*map)(struct iommu_domain *, unsigned long , phys_addr_t , size_t , int , gfp_t ) ;
   size_t (*unmap)(struct iommu_domain *, unsigned long , size_t , struct iommu_iotlb_gather *) ;
   void (*flush_iotlb_all)(struct iommu_domain *) ;
   void (*iotlb_sync_map)(struct iommu_domain *) ;
   void (*iotlb_sync)(struct iommu_domain *, struct iommu_iotlb_gather *) ;
   phys_addr_t (*iova_to_phys)(struct iommu_domain *, dma_addr_t ) ;
   int (*add_device)(struct device *) ;
   void (*remove_device)(struct device *) ;
   struct iommu_group *(*device_group)(struct device *) ;
   int (*domain_get_attr)(struct iommu_domain *, enum iommu_attr , void *) ;
   int (*domain_set_attr)(struct iommu_domain *, enum iommu_attr , void *) ;
   void (*get_resv_regions)(struct device *, struct list_head *) ;
   void (*put_resv_regions)(struct device *, struct list_head *) ;
   void (*apply_resv_region)(struct device *, struct iommu_domain *, struct iommu_resv_region *) ;
   int (*domain_window_enable)(struct iommu_domain *, u32 , phys_addr_t , u64 , int ) ;
   void (*domain_window_disable)(struct iommu_domain *, u32 ) ;
   int (*of_xlate)(struct device *, struct of_phandle_args *) ;
   bool (*is_attach_deferred)(struct iommu_domain *, struct device *) ;
   bool (*dev_has_feat)(struct device *, enum iommu_dev_features ) ;
   bool (*dev_feat_enabled)(struct device *, enum iommu_dev_features ) ;
   int (*dev_enable_feat)(struct device *, enum iommu_dev_features ) ;
   int (*dev_disable_feat)(struct device *, enum iommu_dev_features ) ;
   int (*aux_attach_dev)(struct iommu_domain *, struct device *) ;
   void (*aux_detach_dev)(struct iommu_domain *, struct device *) ;
   int (*aux_get_pasid)(struct iommu_domain *, struct device *) ;
   struct iommu_sva *(*sva_bind)(struct device *, struct mm_struct *, void *) ;
   void (*sva_unbind)(struct iommu_sva *) ;
   int (*sva_get_pasid)(struct iommu_sva *) ;
   int (*page_response)(struct device *, struct iommu_fault_event *, struct iommu_page_response *) ;
   int (*cache_invalidate)(struct iommu_domain *, struct device *, struct iommu_cache_invalidate_info *) ;
   int (*sva_bind_gpasid)(struct iommu_domain *, struct device *, struct iommu_gpasid_bind_data *) ;
   int (*sva_unbind_gpasid)(struct device *, int ) ;
   unsigned long pgsize_bitmap ;
};
#line 346  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iommu.h"
struct iommu_fault_event {
   struct iommu_fault fault ;
   struct list_head list ;
};
#line 358  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iommu.h"
struct iommu_fault_param {
   int (*handler)(struct iommu_fault *, void *) ;
   void *data ;
   struct list_head faults ;
   struct mutex lock ;
};
#line 374  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iommu.h"
struct iommu_param {
   struct mutex lock ;
   struct iommu_fault_param *fault_param ;
};
#line 576  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iommu.h"
struct iommu_fwspec {
   struct iommu_ops *ops ;
   struct fwnode_handle *iommu_fwnode ;
   void *iommu_priv ;
   u32 flags ;
   unsigned int num_ids ;
   u32 ids[1U] ;
};
#line 591  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iommu.h"
struct iommu_sva {
   struct device *dev ;
   struct iommu_sva_ops *ops ;
};
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct ip6_sf_list {
   struct ip6_sf_list *sf_next ;
   struct in6_addr sf_addr ;
   unsigned long sf_count[2U] ;
   unsigned char sf_gsresp ;
   unsigned char sf_oldin ;
   unsigned char sf_crcount ;
};
#line 114  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct ifmcaddr6 {
   struct in6_addr mca_addr ;
   struct inet6_dev *idev ;
   struct ifmcaddr6 *next ;
   struct ip6_sf_list *mca_sources ;
   struct ip6_sf_list *mca_tomb ;
   unsigned int mca_sfmode ;
   unsigned char mca_crcount ;
   unsigned long mca_sfcount[2U] ;
   struct timer_list mca_timer ;
   unsigned int mca_flags ;
   int mca_users ;
   refcount_t mca_refcnt ;
   spinlock_t mca_lock ;
   unsigned long mca_cstamp ;
   unsigned long mca_tstamp ;
};
#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct ifacaddr6 {
   struct in6_addr aca_addr ;
   struct fib6_info *aca_rt ;
   struct ifacaddr6 *aca_next ;
   struct hlist_node aca_addr_lst ;
   int aca_users ;
   refcount_t aca_refcnt ;
   unsigned long aca_cstamp ;
   unsigned long aca_tstamp ;
   struct callback_head rcu ;
};
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct ipv6_devstat {
   struct proc_dir_entry *proc_dir_entry ;
   struct ipstats_mib *ipv6 ;
   struct icmpv6_mib_device *icmpv6dev ;
   struct icmpv6msg_mib_device *icmpv6msgdev ;
};
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct inet6_dev {
   struct net_device *dev ;
   struct list_head addr_list ;
   struct ifmcaddr6 *mc_list ;
   struct ifmcaddr6 *mc_tomb ;
   spinlock_t mc_lock ;
   unsigned char mc_qrv ;
   unsigned char mc_gq_running ;
   unsigned char mc_ifc_count ;
   unsigned char mc_dad_count ;
   unsigned long mc_v1_seen ;
   unsigned long mc_qi ;
   unsigned long mc_qri ;
   unsigned long mc_maxdelay ;
   struct timer_list mc_gq_timer ;
   struct timer_list mc_ifc_timer ;
   struct timer_list mc_dad_timer ;
   struct ifacaddr6 *ac_list ;
   rwlock_t lock ;
   refcount_t refcnt ;
   __u32 if_flags ;
   int dead ;
   u32 desync_factor ;
   u8 rndid[8U] ;
   struct list_head tempaddr_list ;
   struct in6_addr token ;
   struct neigh_parms *nd_parms ;
   struct ipv6_devconf cnf ;
   struct ipv6_devstat stats ;
   struct timer_list rs_timer ;
   __s32 rs_interval ;
   __u8 rs_probes ;
   unsigned long tstamp ;
   struct callback_head rcu ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_arp.h"
struct prefix_info;
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ndisc.h"
struct nd_opt_hdr {
   __u8 nd_opt_type ;
   __u8 nd_opt_len ;
} __attribute__((__packed__));
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ndisc.h"
struct ndisc_options {
   struct nd_opt_hdr *nd_opt_array[15U] ;
   struct nd_opt_hdr *nd_opts_ri ;
   struct nd_opt_hdr *nd_opts_ri_end ;
   struct nd_opt_hdr *nd_useropts ;
   struct nd_opt_hdr *nd_useropts_end ;
   struct nd_opt_hdr *nd_802154_opt_array[3U] ;
};
#line 201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ndisc.h"
struct ndisc_ops {
   int (*is_useropt)(u8 ) ;
   int (*parse_options)(struct net_device *, struct nd_opt_hdr *, struct ndisc_options *) ;
   void (*update)(struct net_device *, struct neighbour *, u32 , u8 , struct ndisc_options *) ;
   int (*opt_addr_space)(struct net_device *, u8 , struct neighbour *, u8 *, u8 **) ;
   void (*fill_addr_option)(struct net_device *, struct sk_buff *, u8 , u8 *) ;
   void (*prefix_rcv_add_addr)(struct net *, struct net_device *, struct prefix_info *, struct inet6_dev *, struct in6_addr *, int , u32 , bool , bool , __u32 , u32 , bool ) ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inetpeer.h"
struct inet_peer_base {
   struct rb_root rb_root ;
   seqlock_t lock ;
   int total ;
};
#line 235  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip_fib.h"
struct fib_table {
   struct hlist_node tb_hlist ;
   u32 tb_id ;
   int tb_num_default ;
   struct callback_head rcu ;
   unsigned long *tb_data ;
   unsigned long __data[0U] ;
};
#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip.h"
union __anonunion_990 {
   void (*destructor)(struct sock *) ;
   struct sock *saved_sk ;
};
#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip.h"
struct ip_ra_chain {
   struct ip_ra_chain *next ;
   struct sock *sk ;
   union __anonunion_990 __anonCompField_ip_ra_chain_199 ;
   struct callback_head rcu ;
};
#line 120  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mdio.h"
struct mdio_if_info {
   int prtad ;
   u32 mmds ;
   unsigned int mode_support ;
   struct net_device *dev ;
   int (*mdio_read)(struct net_device *, int , int , u16 ) ;
   int (*mdio_write)(struct net_device *, int , int , u16 , u16 ) ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct hotplug_slot;
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_slot {
   struct pci_bus *bus ;
   struct list_head list ;
   struct hotplug_slot *hotplug ;
   unsigned char number ;
   struct kobject kobj ;
};
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef int pci_power_t;
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned int pci_channel_state_t;
#line 162 
enum pci_channel_state {
    pci_channel_io_normal = 1,
    pci_channel_io_frozen = 2,
    pci_channel_io_perm_failure = 3
};
#line 181  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned short pci_dev_flags_t;
#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned short pci_bus_flags_t;
#line 282 
struct pcie_link_state;
#line 283 
struct pci_vpd;
#line 284 
struct pci_sriov;
#line 285 
struct pci_p2pdma;
#line 290 
struct aer_stats;
#line 290 
struct pci_driver;
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
union __anonunion_997 {
   struct pci_sriov *sriov ;
   struct pci_dev *physfn ;
};
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_dev {
   struct list_head bus_list ;
   struct pci_bus *bus ;
   struct pci_bus *subordinate ;
   void *sysdata ;
   struct proc_dir_entry *procent ;
   struct pci_slot *slot ;
   unsigned int devfn ;
   unsigned short vendor ;
   unsigned short device ;
   unsigned short subsystem_vendor ;
   unsigned short subsystem_device ;
   unsigned int class ;
   u8 revision ;
   u8 hdr_type ;
   u16 aer_cap ;
   struct aer_stats *aer_stats ;
   u8 pcie_cap ;
   u8 msi_cap ;
   u8 msix_cap ;
   u8 pcie_mpss : 3 ;
   u8 rom_base_reg ;
   u8 pin ;
   u16 pcie_flags_reg ;
   unsigned long *dma_alias_mask ;
   struct pci_driver *driver ;
   u64 dma_mask ;
   struct device_dma_parameters dma_parms ;
   pci_power_t current_state ;
   unsigned int imm_ready : 1 ;
   u8 pm_cap ;
   unsigned int pme_support : 5 ;
   unsigned int pme_poll : 1 ;
   unsigned int d1_support : 1 ;
   unsigned int d2_support : 1 ;
   unsigned int no_d1d2 : 1 ;
   unsigned int no_d3cold : 1 ;
   unsigned int bridge_d3 : 1 ;
   unsigned int d3cold_allowed : 1 ;
   unsigned int mmio_always_on : 1 ;
   unsigned int wakeup_prepared : 1 ;
   unsigned int runtime_d3cold : 1 ;
   unsigned int skip_bus_pm : 1 ;
   unsigned int ignore_hotplug : 1 ;
   unsigned int hotplug_user_indicators : 1 ;
   unsigned int clear_retrain_link : 1 ;
   unsigned int d3_delay ;
   unsigned int d3cold_delay ;
   struct pcie_link_state *link_state ;
   unsigned int ltr_path : 1 ;
   unsigned int eetlp_prefix_path : 1 ;
   pci_channel_state_t error_state ;
   struct device dev ;
   int cfg_size ;
   unsigned int irq ;
   struct resource resource[17U] ;
   bool match_driver ;
   unsigned int transparent : 1 ;
   unsigned int io_window : 1 ;
   unsigned int pref_window : 1 ;
   unsigned int pref_64_window : 1 ;
   unsigned int multifunction : 1 ;
   unsigned int is_busmaster : 1 ;
   unsigned int no_msi : 1 ;
   unsigned int no_64bit_msi : 1 ;
   unsigned int block_cfg_access : 1 ;
   unsigned int broken_parity_status : 1 ;
   unsigned int irq_reroute_variant : 2 ;
   unsigned int msi_enabled : 1 ;
   unsigned int msix_enabled : 1 ;
   unsigned int ari_enabled : 1 ;
   unsigned int ats_enabled : 1 ;
   unsigned int pasid_enabled : 1 ;
   unsigned int pri_enabled : 1 ;
   unsigned int is_managed : 1 ;
   unsigned int needs_freset : 1 ;
   unsigned int state_saved : 1 ;
   unsigned int is_physfn : 1 ;
   unsigned int is_virtfn : 1 ;
   unsigned int reset_fn : 1 ;
   unsigned int is_hotplug_bridge : 1 ;
   unsigned int shpc_managed : 1 ;
   unsigned int is_thunderbolt : 1 ;
   unsigned int untrusted : 1 ;
   unsigned int __aer_firmware_first_valid : 1 ;
   unsigned int __aer_firmware_first : 1 ;
   unsigned int broken_intx_masking : 1 ;
   unsigned int io_window_1k : 1 ;
   unsigned int irq_managed : 1 ;
   unsigned int non_compliant_bars : 1 ;
   unsigned int is_probed : 1 ;
   unsigned int link_active_reporting : 1 ;
   unsigned int no_vf_scan : 1 ;
   pci_dev_flags_t dev_flags ;
   atomic_t enable_cnt ;
   u32 saved_config_space[16U] ;
   struct hlist_head saved_cap_space ;
   struct bin_attribute *rom_attr ;
   int rom_attr_enabled ;
   struct bin_attribute *res_attr[17U] ;
   struct bin_attribute *res_attr_wc[17U] ;
   unsigned int broken_cmd_compl : 1 ;
   unsigned int ptm_root : 1 ;
   unsigned int ptm_enabled : 1 ;
   u8 ptm_granularity ;
   struct attribute_group **msi_irq_groups ;
   struct pci_vpd *vpd ;
   union __anonunion_997 __anonCompField_pci_dev_200 ;
   u16 ats_cap ;
   u8 ats_stu ;
   u16 pri_cap ;
   u32 pri_reqs_alloc ;
   unsigned int pasid_required : 1 ;
   u16 pasid_cap ;
   u16 pasid_features ;
   struct pci_p2pdma *p2pdma ;
   phys_addr_t rom ;
   size_t romlen ;
   char *driver_override ;
   unsigned long priv_flags ;
};
#line 493 
struct pci_ops;
#line 493 
struct msi_controller;
#line 571  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_bus {
   struct list_head node ;
   struct pci_bus *parent ;
   struct list_head children ;
   struct list_head devices ;
   struct pci_dev *self ;
   struct list_head slots ;
   struct resource *resource[4U] ;
   struct list_head resources ;
   struct resource busn_res ;
   struct pci_ops *ops ;
   struct msi_controller *msi ;
   void *sysdata ;
   struct proc_dir_entry *procdir ;
   unsigned char number ;
   unsigned char primary ;
   unsigned char max_bus_speed ;
   unsigned char cur_bus_speed ;
   char name[48U] ;
   unsigned short bridge_ctl ;
   pci_bus_flags_t bus_flags ;
   struct device *bridge ;
   struct device dev ;
   struct bin_attribute *legacy_io ;
   struct bin_attribute *legacy_mem ;
   unsigned int is_added : 1 ;
};
#line 697  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_ops {
   int (*add_bus)(struct pci_bus *) ;
   void (*remove_bus)(struct pci_bus *) ;
   void *(*map_bus)(struct pci_bus *, unsigned int , int ) ;
   int (*read)(struct pci_bus *, unsigned int , int , int , u32 *) ;
   int (*write)(struct pci_bus *, unsigned int , int , int , u32 ) ;
};
#line 725  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_dynids {
   spinlock_t lock ;
   struct list_head list ;
};
#line 729  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned int pci_ers_result_t;
#line 761  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_error_handlers {
   pci_ers_result_t (*error_detected)(struct pci_dev *, enum pci_channel_state ) ;
   pci_ers_result_t (*mmio_enabled)(struct pci_dev *) ;
   pci_ers_result_t (*slot_reset)(struct pci_dev *) ;
   void (*reset_prepare)(struct pci_dev *) ;
   void (*reset_done)(struct pci_dev *) ;
   void (*resume)(struct pci_dev *) ;
};
#line 824  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_driver {
   struct list_head node ;
   char *name ;
   struct pci_device_id *id_table ;
   int (*probe)(struct pci_dev *, struct pci_device_id *) ;
   void (*remove)(struct pci_dev *) ;
   int (*suspend)(struct pci_dev *, pm_message_t ) ;
   int (*resume)(struct pci_dev *) ;
   void (*shutdown)(struct pci_dev *) ;
   int (*sriov_configure)(struct pci_dev *, int ) ;
   struct pci_error_handlers *err_handler ;
   struct attribute_group **groups ;
   struct device_driver driver ;
   struct pci_dynids dynids ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_fwspec {
   struct fwnode_handle *fwnode ;
   int param_count ;
   u32 param[16U] ;
};
#line 68 
enum irq_domain_bus_token {
    DOMAIN_BUS_ANY = 0,
    DOMAIN_BUS_WIRED = 1,
    DOMAIN_BUS_GENERIC_MSI = 2,
    DOMAIN_BUS_PCI_MSI = 3,
    DOMAIN_BUS_PLATFORM_MSI = 4,
    DOMAIN_BUS_NEXUS = 5,
    DOMAIN_BUS_IPI = 6,
    DOMAIN_BUS_FSL_MC_MSI = 7,
    DOMAIN_BUS_TI_SCI_INTA_MSI = 8,
    DOMAIN_BUS_WAKEUP = 9
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_domain_ops {
   int (*match)(struct irq_domain *, struct device_node *, enum irq_domain_bus_token ) ;
   int (*select)(struct irq_domain *, struct irq_fwspec *, enum irq_domain_bus_token ) ;
   int (*map)(struct irq_domain *, unsigned int , irq_hw_number_t ) ;
   void (*unmap)(struct irq_domain *, unsigned int ) ;
   int (*xlate)(struct irq_domain *, struct device_node *, u32 *, unsigned int , unsigned long *, unsigned int *) ;
   int (*alloc)(struct irq_domain *, unsigned int , unsigned int , void *) ;
   void (*free)(struct irq_domain *, unsigned int , unsigned int ) ;
   int (*activate)(struct irq_domain *, struct irq_data *, bool ) ;
   void (*deactivate)(struct irq_domain *, struct irq_data *) ;
   int (*translate)(struct irq_domain *, struct irq_fwspec *, unsigned long *, unsigned int *) ;
   void (*debug_show)(struct seq_file *, struct irq_domain *, struct irq_data *, int ) ;
};
#line 132 
struct irq_domain_chip_generic;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_domain {
   struct list_head link ;
   char *name ;
   struct irq_domain_ops *ops ;
   void *host_data ;
   unsigned int flags ;
   unsigned int mapcount ;
   struct fwnode_handle *fwnode ;
   enum irq_domain_bus_token bus_token ;
   struct irq_domain_chip_generic *gc ;
   struct irq_domain *parent ;
   struct dentry *debugfs_file ;
   irq_hw_number_t hwirq_max ;
   unsigned int revmap_direct_max_irq ;
   unsigned int revmap_size ;
   struct xarray revmap_tree ;
   struct mutex revmap_tree_mutex ;
   unsigned int linear_revmap[] ;
};
#line 996  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct nvmem_device;
#line 145  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/mtd/mtd-abi.h"
struct otp_info {
   __u32 start ;
   __u32 length ;
   __u32 locked ;
};
#line 249  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/mtd/mtd-abi.h"
struct mtd_ecc_stats {
   __u32 corrected ;
   __u32 failed ;
   __u32 badblocks ;
   __u32 bbtblocks ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mtd/mtd.h"
struct erase_info {
   uint64_t addr ;
   uint64_t len ;
   uint64_t fail_addr ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mtd/mtd.h"
struct mtd_erase_region_info {
   uint64_t offset ;
   uint32_t erasesize ;
   uint32_t numblocks ;
   unsigned long *lockmap ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mtd/mtd.h"
struct mtd_oob_ops {
   unsigned int mode ;
   size_t len ;
   size_t retlen ;
   size_t ooblen ;
   size_t oobretlen ;
   uint32_t ooboffs ;
   uint8_t *datbuf ;
   uint8_t *oobbuf ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mtd/mtd.h"
struct mtd_oob_region {
   u32 offset ;
   u32 length ;
};
#line 100  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mtd/mtd.h"
struct mtd_ooblayout_ops {
   int (*ecc)(struct mtd_info *, int , struct mtd_oob_region *) ;
   int (*free)(struct mtd_info *, int , struct mtd_oob_region *) ;
};
#line 137  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mtd/mtd.h"
struct mtd_pairing_info {
   int pair ;
   int group ;
};
#line 175  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mtd/mtd.h"
struct mtd_pairing_scheme {
   int ngroups ;
   int (*get_info)(struct mtd_info *, int , struct mtd_pairing_info *) ;
   int (*get_wunit)(struct mtd_info *, struct mtd_pairing_info *) ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mtd/mtd.h"
struct mtd_debug_info {
   struct dentry *dfs_dir ;
   char *partname ;
   char *partid ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mtd/mtd.h"
struct mtd_info {
   u_char type ;
   uint32_t flags ;
   uint32_t orig_flags ;
   uint64_t size ;
   uint32_t erasesize ;
   uint32_t writesize ;
   uint32_t writebufsize ;
   uint32_t oobsize ;
   uint32_t oobavail ;
   unsigned int erasesize_shift ;
   unsigned int writesize_shift ;
   unsigned int erasesize_mask ;
   unsigned int writesize_mask ;
   unsigned int bitflip_threshold ;
   char *name ;
   int index ;
   struct mtd_ooblayout_ops *ooblayout ;
   struct mtd_pairing_scheme *pairing ;
   unsigned int ecc_step_size ;
   unsigned int ecc_strength ;
   int numeraseregions ;
   struct mtd_erase_region_info *eraseregions ;
   int (*_erase)(struct mtd_info *, struct erase_info *) ;
   int (*_point)(struct mtd_info *, loff_t , size_t , size_t *, void **, resource_size_t *) ;
   int (*_unpoint)(struct mtd_info *, loff_t , size_t ) ;
   int (*_read)(struct mtd_info *, loff_t , size_t , size_t *, u_char *) ;
   int (*_write)(struct mtd_info *, loff_t , size_t , size_t *, u_char *) ;
   int (*_panic_write)(struct mtd_info *, loff_t , size_t , size_t *, u_char *) ;
   int (*_read_oob)(struct mtd_info *, loff_t , struct mtd_oob_ops *) ;
   int (*_write_oob)(struct mtd_info *, loff_t , struct mtd_oob_ops *) ;
   int (*_get_fact_prot_info)(struct mtd_info *, size_t , size_t *, struct otp_info *) ;
   int (*_read_fact_prot_reg)(struct mtd_info *, loff_t , size_t , size_t *, u_char *) ;
   int (*_get_user_prot_info)(struct mtd_info *, size_t , size_t *, struct otp_info *) ;
   int (*_read_user_prot_reg)(struct mtd_info *, loff_t , size_t , size_t *, u_char *) ;
   int (*_write_user_prot_reg)(struct mtd_info *, loff_t , size_t , size_t *, u_char *) ;
   int (*_lock_user_prot_reg)(struct mtd_info *, loff_t , size_t ) ;
   int (*_writev)(struct mtd_info *, struct kvec *, unsigned long , loff_t , size_t *) ;
   void (*_sync)(struct mtd_info *) ;
   int (*_lock)(struct mtd_info *, loff_t , uint64_t ) ;
   int (*_unlock)(struct mtd_info *, loff_t , uint64_t ) ;
   int (*_is_locked)(struct mtd_info *, loff_t , uint64_t ) ;
   int (*_block_isreserved)(struct mtd_info *, loff_t ) ;
   int (*_block_isbad)(struct mtd_info *, loff_t ) ;
   int (*_block_markbad)(struct mtd_info *, loff_t ) ;
   int (*_max_bad_blocks)(struct mtd_info *, loff_t , size_t ) ;
   int (*_suspend)(struct mtd_info *) ;
   void (*_resume)(struct mtd_info *) ;
   void (*_reboot)(struct mtd_info *) ;
   int (*_get_device)(struct mtd_info *) ;
   void (*_put_device)(struct mtd_info *) ;
   bool oops_panic_write ;
   struct notifier_block reboot_notifier ;
   struct mtd_ecc_stats ecc_stats ;
   int subpage_sft ;
   void *priv ;
   struct module *owner ;
   struct device dev ;
   int usecount ;
   struct mtd_debug_info dbg ;
   struct nvmem_device *nvmem ;
};
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/busy_poll.h"
enum ef4_loopback_mode {
    LOOPBACK_NONE = 0,
    LOOPBACK_DATA = 1,
    LOOPBACK_GMAC = 2,
    LOOPBACK_XGMII = 3,
    LOOPBACK_XGXS = 4,
    LOOPBACK_XAUI = 5,
    LOOPBACK_GMII = 6,
    LOOPBACK_SGMII = 7,
    LOOPBACK_XGBR = 8,
    LOOPBACK_XFI = 9,
    LOOPBACK_XAUI_FAR = 10,
    LOOPBACK_GMII_FAR = 11,
    LOOPBACK_SGMII_FAR = 12,
    LOOPBACK_XFI_FAR = 13,
    LOOPBACK_GPHY = 14,
    LOOPBACK_PHYXS = 15,
    LOOPBACK_PCS = 16,
    LOOPBACK_PMAPMD = 17,
    LOOPBACK_XPORT = 18,
    LOOPBACK_XGMII_WS = 19,
    LOOPBACK_XAUI_WS = 20,
    LOOPBACK_XAUI_WS_FAR = 21,
    LOOPBACK_XAUI_WS_NEAR = 22,
    LOOPBACK_GMII_WS = 23,
    LOOPBACK_XFI_WS = 24,
    LOOPBACK_XFI_WS_FAR = 25,
    LOOPBACK_PHYXS_WS = 26,
    LOOPBACK_MAX = 27
};
#line 170 
enum reset_type {
    RESET_TYPE_INVISIBLE = 0,
    RESET_TYPE_RECOVER_OR_ALL = 1,
    RESET_TYPE_ALL = 2,
    RESET_TYPE_WORLD = 3,
    RESET_TYPE_RECOVER_OR_DISABLE = 4,
    RESET_TYPE_DATAPATH = 5,
    RESET_TYPE_DISABLE = 6,
    RESET_TYPE_MAX_METHOD = 7,
    RESET_TYPE_TX_WATCHDOG = 8,
    RESET_TYPE_INT_ERROR = 9,
    RESET_TYPE_RX_RECOVERY = 10,
    RESET_TYPE_DMA_ERROR = 11,
    RESET_TYPE_TX_SKIP = 12,
    RESET_TYPE_MAX = 13
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/bitfield.h"
union ef4_dword {
   __le32 u32[1U] ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/bitfield.h"
typedef union ef4_dword ef4_dword_t;
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/bitfield.h"
union ef4_qword {
   __le64 u64[1U] ;
   __le32 u32[2U] ;
   ef4_dword_t dword[2U] ;
};
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/bitfield.h"
typedef union ef4_qword ef4_qword_t;
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/bitfield.h"
union ef4_oword {
   __le64 u64[2U] ;
   ef4_qword_t qword[2U] ;
   __le32 u32[4U] ;
   ef4_dword_t dword[4U] ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/bitfield.h"
typedef union ef4_oword ef4_oword_t;
#line 106 
enum ef4_filter_priority {
    EF4_FILTER_PRI_HINT = 0,
    EF4_FILTER_PRI_AUTO = 1,
    EF4_FILTER_PRI_MANUAL = 2,
    EF4_FILTER_PRI_REQUIRED = 3
};
#line 113 
enum ef4_filter_flags {
    EF4_FILTER_FLAG_RX_RSS = 1,
    EF4_FILTER_FLAG_RX_SCATTER = 2,
    EF4_FILTER_FLAG_RX_OVER_AUTO = 4,
    EF4_FILTER_FLAG_RX = 8,
    EF4_FILTER_FLAG_TX = 16
};
#line 128  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/filter.h"
struct ef4_filter_spec {
   u32 match_flags : 12 ;
   u32 priority : 2 ;
   u32 flags : 6 ;
   u32 dmaq_id : 12 ;
   u32 rss_context ;
   __be16 outer_vid ;
   __be16 inner_vid ;
   u8 loc_mac[6U] ;
   u8 rem_mac[6U] ;
   __be16 ether_type ;
   u8 ip_proto ;
   __be32 loc_host[4U] ;
   __be32 rem_host[4U] ;
   __be16 loc_port ;
   __be16 rem_port ;
};
#line 268 
struct ef4_self_tests;
#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/net_driver.h"
struct ef4_buffer {
   void *addr ;
   dma_addr_t dma_addr ;
   unsigned int len ;
};
#line 125  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/net_driver.h"
struct ef4_special_buffer {
   struct ef4_buffer buf ;
   unsigned int index ;
   unsigned int entries ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/net_driver.h"
union __anonunion_1020 {
   ef4_qword_t option ;
   dma_addr_t dma_addr ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/net_driver.h"
struct ef4_tx_buffer {
   struct sk_buff *skb ;
   union __anonunion_1020 __anonCompField_ef4_tx_buffer_202 ;
   unsigned short flags ;
   unsigned short len ;
   unsigned short unmap_len ;
   unsigned short dma_offset ;
};
#line 212 
struct ef4_nic;
#line 212 
struct ef4_channel;
#line 212  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/net_driver.h"
struct ef4_tx_queue {
   struct ef4_nic *efx ;
   unsigned int queue ;
   struct ef4_channel *channel ;
   struct netdev_queue *core_txq ;
   struct ef4_tx_buffer *buffer ;
   struct ef4_buffer *cb_page ;
   struct ef4_special_buffer txd ;
   unsigned int ptr_mask ;
   bool initialised ;
   unsigned int tx_min_size ;
   int (*handle_tso)(struct ef4_tx_queue *, struct sk_buff *, bool *) ;
   unsigned int read_count ;
   unsigned int old_write_count ;
   unsigned int merge_events ;
   unsigned int bytes_compl ;
   unsigned int pkts_compl ;
   unsigned int insert_count ;
   unsigned int write_count ;
   unsigned int old_read_count ;
   unsigned int pushes ;
   bool xmit_more_available ;
   unsigned int cb_packets ;
   unsigned long tx_packets ;
   unsigned int empty_read_count ;
   atomic_t flush_outstanding ;
};
#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/net_driver.h"
struct ef4_rx_buffer {
   dma_addr_t dma_addr ;
   struct page *page ;
   u16 page_offset ;
   u16 len ;
   u16 flags ;
};
#line 288  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/net_driver.h"
struct ef4_rx_page_state {
   dma_addr_t dma_addr ;
   unsigned int __pad[0U] ;
};
#line 328  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/net_driver.h"
struct ef4_rx_queue {
   struct ef4_nic *efx ;
   int core_index ;
   struct ef4_rx_buffer *buffer ;
   struct ef4_special_buffer rxd ;
   unsigned int ptr_mask ;
   bool refill_enabled ;
   bool flush_pending ;
   unsigned int added_count ;
   unsigned int notified_count ;
   unsigned int removed_count ;
   unsigned int scatter_n ;
   unsigned int scatter_len ;
   struct page **page_ring ;
   unsigned int page_add ;
   unsigned int page_remove ;
   unsigned int page_recycle_count ;
   unsigned int page_recycle_failed ;
   unsigned int page_recycle_full ;
   unsigned int page_ptr_mask ;
   unsigned int max_fill ;
   unsigned int fast_fill_trigger ;
   unsigned int min_fill ;
   unsigned int min_overfill ;
   unsigned int recycle_count ;
   struct timer_list slow_fill ;
   unsigned int slow_fill_count ;
   unsigned long rx_packets ;
};
#line 404 
struct ef4_channel_type;
#line 404  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/net_driver.h"
struct ef4_channel {
   struct ef4_nic *efx ;
   int channel ;
   struct ef4_channel_type *type ;
   bool eventq_init ;
   bool enabled ;
   int irq ;
   unsigned int irq_moderation_us ;
   struct net_device *napi_dev ;
   struct napi_struct napi_str ;
   unsigned long busy_poll_state ;
   struct ef4_special_buffer eventq ;
   unsigned int eventq_mask ;
   unsigned int eventq_read_ptr ;
   int event_test_cpu ;
   unsigned int irq_count ;
   unsigned int irq_mod_score ;
   unsigned int rfs_filters_added ;
   u32 *rps_flow_id ;
   unsigned int n_rx_tobe_disc ;
   unsigned int n_rx_ip_hdr_chksum_err ;
   unsigned int n_rx_tcp_udp_chksum_err ;
   unsigned int n_rx_mcast_mismatch ;
   unsigned int n_rx_frm_trunc ;
   unsigned int n_rx_overlength ;
   unsigned int n_skbuff_leaks ;
   unsigned int n_rx_nodesc_trunc ;
   unsigned int n_rx_merge_events ;
   unsigned int n_rx_merge_packets ;
   unsigned int rx_pkt_n_frags ;
   unsigned int rx_pkt_index ;
   struct ef4_rx_queue rx_queue ;
   struct ef4_tx_queue tx_queue[4U] ;
};
#line 457  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/net_driver.h"
struct ef4_msi_context {
   struct ef4_nic *efx ;
   unsigned int index ;
   char name[22U] ;
};
#line 476  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/net_driver.h"
struct ef4_channel_type {
   void (*handle_no_channel)(struct ef4_nic *) ;
   int (*pre_probe)(struct ef4_channel *) ;
   void (*post_remove)(struct ef4_channel *) ;
   void (*get_name)(struct ef4_channel *, char *, size_t ) ;
   struct ef4_channel *(*copy)(struct ef4_channel *) ;
   bool (*receive_skb)(struct ef4_channel *, struct sk_buff *) ;
   bool keep_eventq ;
};
#line 485 
enum ef4_led_mode {
    EF4_LED_OFF = 0,
    EF4_LED_ON = 1,
    EF4_LED_DEFAULT = 2
};
#line 502 
enum ef4_int_mode {
    EF4_INT_MODE_MSIX = 0,
    EF4_INT_MODE_MSI = 1,
    EF4_INT_MODE_LEGACY = 2,
    EF4_INT_MODE_MAX = 3
};
#line 509 
enum nic_state {
    STATE_UNINIT = 0,
    STATE_READY = 1,
    STATE_DISABLED = 2,
    STATE_RECOVERY = 3
};
#line 536  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/net_driver.h"
struct ef4_link_state {
   bool up ;
   bool fd ;
   u8 fc ;
   unsigned int speed ;
};
#line 568  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/net_driver.h"
struct ef4_phy_operations {
   int (*probe)(struct ef4_nic *) ;
   int (*init)(struct ef4_nic *) ;
   void (*fini)(struct ef4_nic *) ;
   void (*remove)(struct ef4_nic *) ;
   int (*reconfigure)(struct ef4_nic *) ;
   bool (*poll)(struct ef4_nic *) ;
   void (*get_link_ksettings)(struct ef4_nic *, struct ethtool_link_ksettings *) ;
   int (*set_link_ksettings)(struct ef4_nic *, struct ethtool_link_ksettings *) ;
   void (*set_npage_adv)(struct ef4_nic *, u32 ) ;
   int (*test_alive)(struct ef4_nic *) ;
   char *(*test_name)(struct ef4_nic *, unsigned int ) ;
   int (*run_tests)(struct ef4_nic *, int *, unsigned int ) ;
   int (*get_module_eeprom)(struct ef4_nic *, struct ethtool_eeprom *, u8 *) ;
   int (*get_module_info)(struct ef4_nic *, struct ethtool_modinfo *) ;
};
#line 588 
enum ef4_phy_mode {
    PHY_MODE_NORMAL = 0,
    PHY_MODE_TX_DISABLED = 1,
    PHY_MODE_LOW_POWER = 2,
    PHY_MODE_OFF = 4,
    PHY_MODE_SPECIAL = 8
};
#line 631  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/net_driver.h"
union ef4_multicast_hash {
   u8 byte[32U] ;
   ef4_oword_t oword[2U] ;
};
#line 763 
struct ef4_nic_type;
#line 763  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/net_driver.h"
struct ef4_nic {
   char name[16U] ;
   struct list_head node ;
   struct ef4_nic *primary ;
   struct list_head secondary_list ;
   struct pci_dev *pci_dev ;
   unsigned int port_num ;
   struct ef4_nic_type *type ;
   int legacy_irq ;
   bool eeh_disabled_legacy_irq ;
   struct workqueue_struct *workqueue ;
   char workqueue_name[16U] ;
   struct work_struct reset_work ;
   resource_size_t membase_phys ;
   void *membase ;
   enum ef4_int_mode interrupt_mode ;
   unsigned int timer_quantum_ns ;
   unsigned int timer_max_ns ;
   bool irq_rx_adaptive ;
   unsigned int irq_mod_step_us ;
   unsigned int irq_rx_moderation_us ;
   u32 msg_enable ;
   enum nic_state state ;
   unsigned long reset_pending ;
   struct ef4_channel *channel[32U] ;
   struct ef4_msi_context msi_context[32U] ;
   struct ef4_channel_type *extra_channel_type[2U] ;
   unsigned int rxq_entries ;
   unsigned int txq_entries ;
   unsigned int txq_stop_thresh ;
   unsigned int txq_wake_thresh ;
   unsigned int tx_dc_base ;
   unsigned int rx_dc_base ;
   unsigned int sram_lim_qw ;
   unsigned int next_buffer_table ;
   unsigned int max_channels ;
   unsigned int max_tx_channels ;
   unsigned int n_channels ;
   unsigned int n_rx_channels ;
   unsigned int rss_spread ;
   unsigned int tx_channel_offset ;
   unsigned int n_tx_channels ;
   unsigned int rx_ip_align ;
   unsigned int rx_dma_len ;
   unsigned int rx_buffer_order ;
   unsigned int rx_buffer_truesize ;
   unsigned int rx_page_buf_step ;
   unsigned int rx_bufs_per_page ;
   unsigned int rx_pages_per_batch ;
   unsigned int rx_prefix_size ;
   int rx_packet_hash_offset ;
   int rx_packet_len_offset ;
   int rx_packet_ts_offset ;
   u8 rx_hash_key[40U] ;
   u32 rx_indir_table[128U] ;
   bool rx_scatter ;
   unsigned int int_error_count ;
   unsigned long int_error_expire ;
   bool irq_soft_enabled ;
   struct ef4_buffer irq_status ;
   unsigned int irq_zero_count ;
   unsigned int irq_level ;
   struct delayed_work selftest_work ;
   struct list_head mtd_list ;
   void *nic_data ;
   struct mutex mac_lock ;
   struct work_struct mac_work ;
   bool port_enabled ;
   bool mc_bist_for_other_fn ;
   bool port_initialized ;
   struct net_device *net_dev ;
   netdev_features_t fixed_features ;
   struct ef4_buffer stats_buffer ;
   u64 rx_nodesc_drops_total ;
   u64 rx_nodesc_drops_while_down ;
   bool rx_nodesc_drops_prev_state ;
   unsigned int phy_type ;
   struct ef4_phy_operations *phy_op ;
   void *phy_data ;
   struct mdio_if_info mdio ;
   enum ef4_phy_mode phy_mode ;
   u32 link_advertising ;
   struct ef4_link_state link_state ;
   unsigned int n_link_state_changes ;
   bool unicast_filter ;
   union ef4_multicast_hash multicast_hash ;
   u8 wanted_fc ;
   unsigned int fc_disable ;
   atomic_t rx_reset ;
   enum ef4_loopback_mode loopback_mode ;
   u64 loopback_modes ;
   void *loopback_selftest ;
   struct rw_semaphore filter_sem ;
   spinlock_t filter_lock ;
   void *filter_state ;
   unsigned int rps_expire_channel ;
   unsigned int rps_expire_index ;
   atomic_t active_queues ;
   atomic_t rxq_flush_pending ;
   atomic_t rxq_flush_outstanding ;
   wait_queue_head_t flush_wq ;
   char *vpd_sn ;
   struct delayed_work monitor_work ;
   spinlock_t biu_lock ;
   int last_irq_cpu ;
   spinlock_t stats_lock ;
   atomic_t n_rx_noskb_drops ;
};
#line 914  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/net_driver.h"
struct ef4_mtd_partition {
   struct list_head node ;
   struct mtd_info mtd ;
   char *dev_type_name ;
   char *type_name ;
   char name[36U] ;
};
#line 1040  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/net_driver.h"
struct ef4_nic_type {
   unsigned int mem_bar ;
   unsigned int (*mem_map_size)(struct ef4_nic *) ;
   int (*probe)(struct ef4_nic *) ;
   void (*remove)(struct ef4_nic *) ;
   int (*init)(struct ef4_nic *) ;
   int (*dimension_resources)(struct ef4_nic *) ;
   void (*fini)(struct ef4_nic *) ;
   void (*monitor)(struct ef4_nic *) ;
   enum reset_type (*map_reset_reason)(enum reset_type ) ;
   int (*map_reset_flags)(u32 *) ;
   int (*reset)(struct ef4_nic *, enum reset_type ) ;
   int (*probe_port)(struct ef4_nic *) ;
   void (*remove_port)(struct ef4_nic *) ;
   bool (*handle_global_event)(struct ef4_channel *, ef4_qword_t *) ;
   int (*fini_dmaq)(struct ef4_nic *) ;
   void (*prepare_flush)(struct ef4_nic *) ;
   void (*finish_flush)(struct ef4_nic *) ;
   void (*prepare_flr)(struct ef4_nic *) ;
   void (*finish_flr)(struct ef4_nic *) ;
   size_t (*describe_stats)(struct ef4_nic *, u8 *) ;
   size_t (*update_stats)(struct ef4_nic *, u64 *, struct rtnl_link_stats64 *) ;
   void (*start_stats)(struct ef4_nic *) ;
   void (*pull_stats)(struct ef4_nic *) ;
   void (*stop_stats)(struct ef4_nic *) ;
   void (*set_id_led)(struct ef4_nic *, enum ef4_led_mode ) ;
   void (*push_irq_moderation)(struct ef4_channel *) ;
   int (*reconfigure_port)(struct ef4_nic *) ;
   void (*prepare_enable_fc_tx)(struct ef4_nic *) ;
   int (*reconfigure_mac)(struct ef4_nic *) ;
   bool (*check_mac_fault)(struct ef4_nic *) ;
   void (*get_wol)(struct ef4_nic *, struct ethtool_wolinfo *) ;
   int (*set_wol)(struct ef4_nic *, u32 ) ;
   void (*resume_wol)(struct ef4_nic *) ;
   int (*test_chip)(struct ef4_nic *, struct ef4_self_tests *) ;
   int (*test_nvram)(struct ef4_nic *) ;
   void (*irq_enable_master)(struct ef4_nic *) ;
   int (*irq_test_generate)(struct ef4_nic *) ;
   void (*irq_disable_non_ev)(struct ef4_nic *) ;
   irqreturn_t (*irq_handle_msi)(int , void *) ;
   irqreturn_t (*irq_handle_legacy)(int , void *) ;
   int (*tx_probe)(struct ef4_tx_queue *) ;
   void (*tx_init)(struct ef4_tx_queue *) ;
   void (*tx_remove)(struct ef4_tx_queue *) ;
   void (*tx_write)(struct ef4_tx_queue *) ;
   unsigned int (*tx_limit_len)(struct ef4_tx_queue *, dma_addr_t , unsigned int ) ;
   int (*rx_push_rss_config)(struct ef4_nic *, bool , u32 *) ;
   int (*rx_probe)(struct ef4_rx_queue *) ;
   void (*rx_init)(struct ef4_rx_queue *) ;
   void (*rx_remove)(struct ef4_rx_queue *) ;
   void (*rx_write)(struct ef4_rx_queue *) ;
   void (*rx_defer_refill)(struct ef4_rx_queue *) ;
   int (*ev_probe)(struct ef4_channel *) ;
   int (*ev_init)(struct ef4_channel *) ;
   void (*ev_fini)(struct ef4_channel *) ;
   void (*ev_remove)(struct ef4_channel *) ;
   int (*ev_process)(struct ef4_channel *, int ) ;
   void (*ev_read_ack)(struct ef4_channel *) ;
   void (*ev_test_generate)(struct ef4_channel *) ;
   int (*filter_table_probe)(struct ef4_nic *) ;
   void (*filter_table_restore)(struct ef4_nic *) ;
   void (*filter_table_remove)(struct ef4_nic *) ;
   void (*filter_update_rx_scatter)(struct ef4_nic *) ;
   s32 (*filter_insert)(struct ef4_nic *, struct ef4_filter_spec *, bool ) ;
   int (*filter_remove_safe)(struct ef4_nic *, enum ef4_filter_priority , u32 ) ;
   int (*filter_get_safe)(struct ef4_nic *, enum ef4_filter_priority , u32 , struct ef4_filter_spec *) ;
   int (*filter_clear_rx)(struct ef4_nic *, enum ef4_filter_priority ) ;
   u32 (*filter_count_rx_used)(struct ef4_nic *, enum ef4_filter_priority ) ;
   u32 (*filter_get_rx_id_limit)(struct ef4_nic *) ;
   s32 (*filter_get_rx_ids)(struct ef4_nic *, enum ef4_filter_priority , u32 *, u32 ) ;
   s32 (*filter_rfs_insert)(struct ef4_nic *, struct ef4_filter_spec *) ;
   bool (*filter_rfs_expire_one)(struct ef4_nic *, u32 , unsigned int ) ;
   int (*mtd_probe)(struct ef4_nic *) ;
   void (*mtd_rename)(struct ef4_mtd_partition *) ;
   int (*mtd_read)(struct mtd_info *, loff_t , size_t , size_t *, u8 *) ;
   int (*mtd_erase)(struct mtd_info *, loff_t , size_t ) ;
   int (*mtd_write)(struct mtd_info *, loff_t , size_t , size_t *, u8 *) ;
   int (*mtd_sync)(struct mtd_info *) ;
   int (*get_mac_address)(struct ef4_nic *, unsigned char *) ;
   int (*set_mac_address)(struct ef4_nic *) ;
   int revision ;
   unsigned int txd_ptr_tbl_base ;
   unsigned int rxd_ptr_tbl_base ;
   unsigned int buf_tbl_base ;
   unsigned int evq_ptr_tbl_base ;
   unsigned int evq_rptr_tbl_base ;
   u64 max_dma_mask ;
   unsigned int rx_prefix_size ;
   unsigned int rx_hash_offset ;
   unsigned int rx_ts_offset ;
   unsigned int rx_buffer_padding ;
   bool can_rx_scatter ;
   bool always_rx_scatter ;
   unsigned int max_interrupt_mode ;
   unsigned int timer_period_max ;
   netdev_features_t offload_features ;
   unsigned int max_rx_ip_filters ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/selftest.h"
struct ef4_loopback_self_tests {
   int tx_sent[4U] ;
   int tx_done[4U] ;
   int rx_good ;
   int rx_bad ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/selftest.h"
struct ef4_self_tests {
   int phy_alive ;
   int nvram ;
   int interrupt ;
   int eventq_dma[32U] ;
   int eventq_int[32U] ;
   int memory ;
   int registers ;
   int phy_ext[20U] ;
   struct ef4_loopback_self_tests loopback[18U] ;
};
#line 827  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/rx.i.aux"
typedef int ldv_func_ret_type;
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_2056 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_2058 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
union __anonunion___u_2110 {
   int __val ;
   char __c[1U] ;
};
#line 690  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
typedef struct cpumask *cpumask_var_t;
#line 196  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 821  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device *, struct device_attribute *, char *) ;
   ssize_t (*store)(struct device *, struct device_attribute *, char *, size_t ) ;
};
#line 1424  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct msix_entry {
   u32 vector ;
   u16 entry ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
union __anonunion___u_2500 {
   unsigned int __val ;
   char __c[1U] ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
union __anonunion___u_2502 {
   unsigned int __val ;
   char __c[1U] ;
};
#line 2525  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_notifier_info {
   struct net_device *dev ;
   struct netlink_ext_ack *extack ;
};
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/mii.h"
struct mii_ioctl_data {
   __u16 phy_id ;
   __u16 reg_num ;
   __u16 val_in ;
   __u16 val_out ;
};
#line 2516  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
union __anonunion___u_3069 {
   unsigned long __val ;
   char __c[1U] ;
};
#line 2576  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
union __anonunion___u_3071 {
   enum nic_state __val ;
   char __c[1U] ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u16 __sum16;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
union __anonunion___u_3138 {
   int __val ;
   char __c[1U] ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
union __anonunion___u_3140 {
   int __val ;
   char __c[1U] ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
enum refcount_saturation_type {
    REFCOUNT_ADD_NOT_ZERO_OVF = 0,
    REFCOUNT_ADD_OVF = 1,
    REFCOUNT_ADD_UAF = 2,
    REFCOUNT_SUB_UAF = 3,
    REFCOUNT_DEC_LEAK = 4
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ip.h"
struct iphdr {
   __u8 ihl : 4 ;
   __u8 version : 4 ;
   __u8 tos ;
   __be16 tot_len ;
   __be16 id ;
   __be16 frag_off ;
   __u8 ttl ;
   __u8 protocol ;
   __sum16 check ;
   __be32 saddr ;
   __be32 daddr ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/udp.h"
struct udphdr {
   __be16 source ;
   __be16 dest ;
   __be16 len ;
   __sum16 check ;
};
#line 466  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/nic.h"
union __anonunion___u_4092 {
   int __val ;
   char __c[1U] ;
};
#line 470  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/nic.h"
union __anonunion___u_4094 {
   int __val ;
   char __c[1U] ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/selftest.c"
struct ef4_loopback_payload {
   struct ethhdr header ;
   struct iphdr ip ;
   struct udphdr udp ;
   __be16 iteration ;
   char msg[64U] ;
} __attribute__((__packed__));
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/selftest.c"
struct ef4_loopback_state {
   bool flush ;
   int packet_count ;
   struct sk_buff **skbs ;
   bool offload_csum ;
   atomic_t rx_good ;
   atomic_t rx_bad ;
   struct ef4_loopback_payload payload ;
};
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/i2c.h"
struct i2c_client;
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 823  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct gpio_desc;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rtmutex.h"
struct rt_mutex {
   raw_spinlock_t wait_lock ;
   struct rb_root_cached waiters ;
   struct task_struct *owner ;
   int save_state ;
   char *name ;
   char *file ;
   int line ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/i2c.h"
struct i2c_msg {
   __u16 addr ;
   __u16 flags ;
   __u16 len ;
   __u8 *buf ;
};
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/i2c.h"
union i2c_smbus_data {
   __u8 byte ;
   __u16 word ;
   __u8 block[34U] ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_algorithm;
#line 28 
struct i2c_adapter;
#line 32 
enum i2c_slave_event;
#line 32 
enum i2c_slave_event;
#line 314  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_client {
   unsigned short flags ;
   unsigned short addr ;
   char name[20U] ;
   struct i2c_adapter *adapter ;
   struct device dev ;
   int init_irq ;
   int irq ;
   struct list_head detected ;
   int (*slave_cb)(struct i2c_client *, enum i2c_slave_event , u8 *) ;
};
#line 360 
enum i2c_slave_event {
    I2C_SLAVE_READ_REQUESTED = 0,
    I2C_SLAVE_WRITE_REQUESTED = 1,
    I2C_SLAVE_READ_PROCESSED = 2,
    I2C_SLAVE_WRITE_RECEIVED = 3,
    I2C_SLAVE_STOP = 4
};
#line 527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_algorithm {
   int (*master_xfer)(struct i2c_adapter *, struct i2c_msg *, int ) ;
   int (*master_xfer_atomic)(struct i2c_adapter *, struct i2c_msg *, int ) ;
   int (*smbus_xfer)(struct i2c_adapter *, u16 , unsigned short , char , u8 , int , union i2c_smbus_data *) ;
   int (*smbus_xfer_atomic)(struct i2c_adapter *, u16 , unsigned short , char , u8 , int , union i2c_smbus_data *) ;
   u32 (*functionality)(struct i2c_adapter *) ;
   int (*reg_slave)(struct i2c_client *) ;
   int (*unreg_slave)(struct i2c_client *) ;
};
#line 565  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_lock_operations {
   void (*lock_bus)(struct i2c_adapter *, unsigned int ) ;
   int (*trylock_bus)(struct i2c_adapter *, unsigned int ) ;
   void (*unlock_bus)(struct i2c_adapter *, unsigned int ) ;
};
#line 618  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_bus_recovery_info {
   int (*recover_bus)(struct i2c_adapter *) ;
   int (*get_scl)(struct i2c_adapter *) ;
   void (*set_scl)(struct i2c_adapter *, int ) ;
   int (*get_sda)(struct i2c_adapter *) ;
   void (*set_sda)(struct i2c_adapter *, int ) ;
   int (*get_bus_free)(struct i2c_adapter *) ;
   void (*prepare_recovery)(struct i2c_adapter *) ;
   void (*unprepare_recovery)(struct i2c_adapter *) ;
   struct gpio_desc *scl_gpiod ;
   struct gpio_desc *sda_gpiod ;
};
#line 661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_adapter_quirks {
   u64 flags ;
   int max_num_msgs ;
   u16 max_write_len ;
   u16 max_read_len ;
   u16 max_comb_1st_msg_len ;
   u16 max_comb_2nd_msg_len ;
};
#line 692  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_adapter {
   struct module *owner ;
   unsigned int class ;
   struct i2c_algorithm *algo ;
   void *algo_data ;
   struct i2c_lock_operations *lock_ops ;
   struct rt_mutex bus_lock ;
   struct rt_mutex mux_lock ;
   int timeout ;
   int retries ;
   struct device dev ;
   unsigned long locked_flags ;
   int nr ;
   char name[48U] ;
   struct completion dev_released ;
   struct mutex userspace_clients_lock ;
   struct list_head userspace_clients ;
   struct i2c_bus_recovery_info *bus_recovery_info ;
   struct i2c_adapter_quirks *quirks ;
   struct irq_domain *host_notify_domain ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c-algo-bit.h"
struct i2c_algo_bit_data {
   void *data ;
   void (*setsda)(void *, int ) ;
   void (*setscl)(void *, int ) ;
   int (*getsda)(void *) ;
   int (*getscl)(void *) ;
   int (*pre_xfer)(struct i2c_adapter *) ;
   void (*post_xfer)(struct i2c_adapter *) ;
   int udelay ;
   int timeout ;
   bool can_do_atomic ;
};
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/nic.h"
struct falcon_board_type {
   u8 id ;
   int (*init)(struct ef4_nic *) ;
   void (*init_phy)(struct ef4_nic *) ;
   void (*fini)(struct ef4_nic *) ;
   void (*set_id_led)(struct ef4_nic *, enum ef4_led_mode ) ;
   int (*monitor)(struct ef4_nic *) ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/nic.h"
struct falcon_board {
   struct falcon_board_type *type ;
   int major ;
   int minor ;
   struct i2c_adapter i2c_adap ;
   struct i2c_algo_bit_data i2c_data ;
   struct i2c_client *hwmon_client ;
   struct i2c_client *ioexp_client ;
};
#line 198  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/nic.h"
struct falcon_spi_device {
   int device_id ;
   unsigned int size ;
   unsigned int addr_len ;
   unsigned int munge_address : 1 ;
   u8 erase_command ;
   unsigned int erase_size ;
   unsigned int block_size ;
};
#line 279  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/nic.h"
struct falcon_nic_data {
   struct pci_dev *pci_dev2 ;
   struct ef4_nic *efx ;
   struct falcon_board board ;
   u64 stats[49U] ;
   unsigned int stats_disable_count ;
   bool stats_pending ;
   struct timer_list stats_timer ;
   struct falcon_spi_device spi_flash ;
   struct falcon_spi_device spi_eeprom ;
   struct mutex spi_lock ;
   struct mutex mdio_lock ;
   bool xmac_poll_required ;
};
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/txc43128_phy.c"
struct txc43128_data {
   unsigned long bug10934_timer ;
   enum ef4_phy_mode phy_mode ;
   enum ef4_loopback_mode loopback_mode ;
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_5131 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_5133 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 268  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_5135 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 553  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mtd/mtd.h"
struct mtd_partition;
#line 554 
struct mtd_part_parser_data;
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u16 uint16_t;
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
enum i2c_slave_event;
#line 32 
enum i2c_slave_event;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/qt202x_phy.c"
struct qt202x_phy_data {
   enum ef4_phy_mode phy_mode ;
   bool bug17190_in_bad_state ;
   unsigned long bug17190_timer ;
   u32 firmware_ver ;
};
#line 196  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
enum i2c_slave_event;
#line 32 
enum i2c_slave_event;
#line 618  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/net_driver.h"
struct ef4_hw_stat_desc {
   char *name ;
   u16 dma_width ;
   u16 offset ;
};
#line 489  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/nic.h"
struct ef4_farch_register_test {
   unsigned int address ;
   ef4_oword_t mask ;
};
#line 248  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon.c"
struct falcon_nvconfig_board_v2 {
   __le16 nports ;
   u8 port0_phy_addr ;
   u8 port0_phy_type ;
   u8 port1_phy_addr ;
   u8 port1_phy_type ;
   __le16 asic_sub_revision ;
   __le16 board_revision ;
} __attribute__((__packed__));
#line 259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon.c"
struct falcon_nvconfig_board_v3 {
   __le32 spi_device_type[2U] ;
} __attribute__((__packed__));
#line 280  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon.c"
struct falcon_nvconfig {
   ef4_oword_t ee_vpd_cfg_reg ;
   u8 mac_address[2U][8U] ;
   ef4_oword_t pcie_sd_ctl0123_reg ;
   ef4_oword_t pcie_sd_ctl45_reg ;
   ef4_oword_t pcie_pcs_ctl_stat_reg ;
   ef4_oword_t hw_init_reg ;
   ef4_oword_t nic_stat_reg ;
   ef4_oword_t glb_ctl_reg ;
   ef4_oword_t srm_cfg_reg ;
   ef4_oword_t spare_reg ;
   __le16 board_magic_num ;
   __le16 board_struct_ver ;
   __le16 board_checksum ;
   struct falcon_nvconfig_board_v2 board_v2 ;
   ef4_oword_t ee_base_page_reg ;
   struct falcon_nvconfig_board_v3 board_v3 ;
} __attribute__((__packed__));
#line 452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon.c"
union __anonunion___u_8184 {
   bool __val ;
   char __c[1U] ;
};
#line 648  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon.c"
struct falcon_mtd_partition {
   struct ef4_mtd_partition common ;
   struct falcon_spi_device *spi ;
   size_t offset ;
};
#line 1372  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon.c"
union __anonunion___u_8186 {
   unsigned long __val ;
   char __c[1U] ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
enum i2c_slave_event;
#line 32 
enum i2c_slave_event;
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/tenxpress.c"
struct tenxpress_phy_data {
   enum ef4_loopback_mode loopback_mode ;
   enum ef4_phy_mode phy_mode ;
   int bad_lp_tries ;
};
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
union __anonunion___u_9278 {
   int __val ;
   char __c[1U] ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
union __anonunion___u_9280 {
   int __val ;
   char __c[1U] ;
};
#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct wait_queue_entry;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
struct wait_queue_entry {
   unsigned int flags ;
   void *private ;
   int (*func)(struct wait_queue_entry *, unsigned int , int , void *) ;
   struct list_head entry ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_hw_addr {
   struct list_head list ;
   unsigned char addr[32U] ;
   unsigned char type ;
   bool global_use ;
   int sync_cnt ;
   int refcount ;
   int synced ;
   struct callback_head callback_head ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
enum i2c_slave_event;
#line 32 
enum i2c_slave_event;
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/nic.h"
union __anonunion___u_10230 {
   unsigned int __val ;
   char __c[1U] ;
};
#line 834  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/farch.c"
union __anonunion___u_10253 {
   unsigned long __val ;
   char __c[1U] ;
};
#line 990  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/farch.c"
union __anonunion___u_10255 {
   unsigned long __val ;
   char __c[1U] ;
};
#line 1504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/farch.c"
union __anonunion___u_10257 {
   bool __val ;
   char __c[1U] ;
};
#line 1596  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/farch.c"
union __anonunion___u_10259 {
   bool __val ;
   char __c[1U] ;
};
#line 1760 
enum ef4_farch_filter_table_id {
    EF4_FARCH_FILTER_TABLE_RX_IP = 0,
    EF4_FARCH_FILTER_TABLE_RX_MAC = 1,
    EF4_FARCH_FILTER_TABLE_RX_DEF = 2,
    EF4_FARCH_FILTER_TABLE_TX_MAC = 3,
    EF4_FARCH_FILTER_TABLE_COUNT = 4
};
#line 1799  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/farch.c"
struct ef4_farch_filter_spec {
   u8 type : 4 ;
   u8 priority : 4 ;
   u8 flags ;
   u16 dmaq_id ;
   u32 data[3U] ;
};
#line 1807  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/farch.c"
struct ef4_farch_filter_table {
   enum ef4_farch_filter_table_id id ;
   u32 offset ;
   unsigned int size ;
   unsigned int step ;
   unsigned int used ;
   unsigned long *used_bitmap ;
   struct ef4_farch_filter_spec *spec ;
   unsigned int search_limit[10U] ;
};
#line 1818  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/farch.c"
struct ef4_farch_filter_state {
   struct ef4_farch_filter_table table[4U] ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqhandler.h"
enum dev_prop_type {
    DEV_PROP_U8 = 0,
    DEV_PROP_U16 = 1,
    DEV_PROP_U32 = 2,
    DEV_PROP_U64 = 3,
    DEV_PROP_STRING = 4
};
#line 235  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/property.h"
union __anonunion_value_10961 {
   u8 u8_data ;
   u16 u16_data ;
   u32 u32_data ;
   u64 u64_data ;
   char *str ;
};
#line 235  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/property.h"
union __anonunion_10960 {
   void *pointer ;
   union __anonunion_value_10961 value ;
};
#line 235  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/property.h"
struct property_entry {
   char *name ;
   size_t length ;
   bool is_array ;
   enum dev_prop_type type ;
   union __anonunion_10960 __anonCompField_property_entry_161 ;
};
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_board_info;
#line 32 
enum i2c_slave_event;
#line 32 
enum i2c_slave_event;
#line 410  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_board_info {
   char type[20U] ;
   unsigned short flags ;
   unsigned short addr ;
   char *dev_name ;
   void *platform_data ;
   struct device_node *of_node ;
   struct fwnode_handle *fwnode ;
   struct property_entry *properties ;
   struct resource *resources ;
   unsigned int num_resources ;
   int irq ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpu_rmap.h"
struct __anonstruct_near_11752 {
   u16 index ;
   u16 dist ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpu_rmap.h"
struct cpu_rmap {
   struct kref refcount ;
   u16 size ;
   u16 used ;
   void **obj ;
   struct __anonstruct_near_11752 near[0U] ;
};
#line 175  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/nic.c"
struct ef4_nic_reg {
   u32 offset : 24 ;
   u32 min_revision : 3 ;
   u32 max_revision : 3 ;
};
#line 299  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/nic.c"
struct ef4_nic_reg_table {
   u32 offset : 24 ;
   u32 min_revision : 3 ;
   u32 max_revision : 3 ;
   u32 step : 6 ;
   u32 rows : 21 ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
union __anonunion___u_12844 {
   unsigned int __val ;
   char __c[1U] ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
union __anonunion___u_12846 {
   unsigned int __val ;
   char __c[1U] ;
};
#line 702  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/pkt_sched.h"
struct tc_mqprio_qopt {
   __u8 num_tc ;
   __u8 prio_tc_map[16U] ;
   __u8 hw ;
   __u16 count[16U] ;
   __u16 offset[16U] ;
};
#line 3610  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
enum skb_free_reason {
    SKB_REASON_CONSUMED = 0,
    SKB_REASON_DROPPED = 1
};
#line 134  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/tx.c"
union __anonunion___u_13338 {
   unsigned int __val ;
   char __c[1U] ;
};
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/tx.c"
union __anonunion___u_13340 {
   unsigned int __val ;
   char __c[1U] ;
};
#line 524  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/tx.c"
union __anonunion___u_13342 {
   unsigned int __val ;
   char __c[1U] ;
};
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
union __anonunion___u_13409 {
   int __val ;
   char __c[1U] ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 510  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/nic.h"
enum ldv_22144 {
    EF4_ETHTOOL_STAT_SOURCE_nic = 0,
    EF4_ETHTOOL_STAT_SOURCE_channel = 1,
    EF4_ETHTOOL_STAT_SOURCE_tx_queue = 2
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/ethtool.c"
struct ef4_sw_stat_desc {
   char *name ;
   enum ldv_22144 source ;
   unsigned int offset ;
   u64 (*get_stat)(void *) ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 197 
enum hrtimer_restart;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
struct device_private {
   void *driver_data ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/firmware.h"
struct firmware {
   size_t size ;
   u8 *data ;
   struct page **pages ;
   void *priv ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/idr.h"
struct ida {
   struct xarray xa ;
};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
enum i2c_slave_event;
#line 33 
enum i2c_slave_event;
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cdev.h"
struct cdev {
   struct kobject kobj ;
   struct module *owner ;
   struct file_operations *ops ;
   struct list_head list ;
   dev_t dev ;
   unsigned int count ;
} __attribute__((__designated_init__));
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-common.h"
struct v4l2_edid {
   __u32 pad ;
   __u32 start_block ;
   __u32 blocks ;
   __u32 reserved[5U] ;
   __u8 *edid ;
};
#line 754 
enum v4l2_priority {
    V4L2_PRIORITY_UNSET = 0,
    V4L2_PRIORITY_BACKGROUND = 1,
    V4L2_PRIORITY_INTERACTIVE = 2,
    V4L2_PRIORITY_RECORD = 3,
    V4L2_PRIORITY_DEFAULT = 2
};
#line 413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_rect {
   __s32 left ;
   __s32 top ;
   __u32 width ;
   __u32 height ;
};
#line 420  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_fract {
   __u32 numerator ;
   __u32 denominator ;
};
#line 1212  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
typedef __u64 v4l2_std_id;
#line 1394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_bt_timings {
   __u32 width ;
   __u32 height ;
   __u32 interlaced ;
   __u32 polarities ;
   __u64 pixelclock ;
   __u32 hfrontporch ;
   __u32 hsync ;
   __u32 hbackporch ;
   __u32 vfrontporch ;
   __u32 vsync ;
   __u32 vbackporch ;
   __u32 il_vfrontporch ;
   __u32 il_vsync ;
   __u32 il_vbackporch ;
   __u32 standards ;
   __u32 flags ;
   struct v4l2_fract picture_aspect ;
   __u8 cea861_vic ;
   __u8 hdmi_vic ;
   __u8 reserved[46U] ;
} __attribute__((__packed__));
#line 1517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_16150 {
   struct v4l2_bt_timings bt ;
   __u32 reserved[32U] ;
};
#line 1517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dv_timings {
   __u32 type ;
   union __anonunion_16150 __anonCompField_v4l2_dv_timings_77 ;
} __attribute__((__packed__));
#line 1536  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_enum_dv_timings {
   __u32 index ;
   __u32 pad ;
   __u32 reserved[2U] ;
   struct v4l2_dv_timings timings ;
};
#line 1554  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_bt_timings_cap {
   __u32 min_width ;
   __u32 max_width ;
   __u32 min_height ;
   __u32 max_height ;
   __u64 min_pixelclock ;
   __u64 max_pixelclock ;
   __u32 standards ;
   __u32 capabilities ;
   __u32 reserved[16U] ;
} __attribute__((__packed__));
#line 1581  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_16151 {
   struct v4l2_bt_timings_cap bt ;
   __u32 raw_data[32U] ;
};
#line 1581  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dv_timings_cap {
   __u32 type ;
   __u32 pad ;
   __u32 reserved[2U] ;
   union __anonunion_16151 __anonCompField_v4l2_dv_timings_cap_78 ;
};
#line 1803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_tuner {
   __u32 index ;
   __u8 name[32U] ;
   __u32 type ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 rxsubchans ;
   __u32 audmode ;
   __s32 signal ;
   __s32 afc ;
   __u32 reserved[4U] ;
};
#line 1817  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_modulator {
   __u32 index ;
   __u8 name[32U] ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 txsubchans ;
   __u32 type ;
   __u32 reserved[3U] ;
};
#line 1860  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_frequency {
   __u32 tuner ;
   __u32 type ;
   __u32 frequency ;
   __u32 reserved[8U] ;
};
#line 1871  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_frequency_band {
   __u32 tuner ;
   __u32 type ;
   __u32 index ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 modulation ;
   __u32 reserved[9U] ;
};
#line 2043  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_vbi_format {
   __u32 sampling_rate ;
   __u32 offset ;
   __u32 samples_per_line ;
   __u32 sample_format ;
   __s32 start[2U] ;
   __u32 count[2U] ;
   __u32 flags ;
   __u32 reserved[2U] ;
};
#line 2071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_format {
   __u16 service_set ;
   __u16 service_lines[2U][24U] ;
   __u32 io_size ;
   __u32 reserved[2U] ;
};
#line 2095  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_cap {
   __u16 service_set ;
   __u16 service_lines[2U][24U] ;
   __u32 type ;
   __u32 reserved[3U] ;
};
#line 2106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_data {
   __u32 id ;
   __u32 field ;
   __u32 line ;
   __u32 reserved ;
   __u8 data[48U] ;
};
#line 2350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_event_subscription {
   __u32 type ;
   __u32 id ;
   __u32 flags ;
   __u32 reserved[5U] ;
};
#line 2375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_16167 {
   __u32 addr ;
   char name[32U] ;
};
#line 2375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dbg_match {
   __u32 type ;
   union __anonunion_16167 __anonCompField_v4l2_dbg_match_87 ;
} __attribute__((__packed__));
#line 2383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dbg_register {
   struct v4l2_dbg_match match ;
   __u32 size ;
   __u64 reg ;
   __u64 val ;
} __attribute__((__packed__));
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_device;
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_gobj {
   struct media_device *mdev ;
   u32 id ;
   struct list_head list ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity_enum {
   unsigned long *bmap ;
   int idx_max ;
};
#line 88 
struct media_entity;
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct __anonstruct_stack_16171 {
   struct media_entity *entity ;
   struct list_head *link ;
};
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_graph {
   struct __anonstruct_stack_16171 stack[16U] ;
   struct media_entity_enum ent_enum ;
   int top ;
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_pipeline {
   int streaming_count ;
   struct media_graph graph ;
};
#line 132 
struct media_pad;
#line 132 
struct media_interface;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_16172 {
   struct media_gobj *gobj0 ;
   struct media_pad *source ;
   struct media_interface *intf ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_16173 {
   struct media_gobj *gobj1 ;
   struct media_pad *sink ;
   struct media_entity *entity ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_link {
   struct media_gobj graph_obj ;
   struct list_head list ;
   union __anonunion_16172 __anonCompField_media_link_90 ;
   union __anonunion_16173 __anonCompField_media_link_91 ;
   struct media_link *reverse ;
   unsigned long flags ;
   bool is_backlink ;
};
#line 149 
enum media_pad_signal_type {
    PAD_SIGNAL_DEFAULT = 0,
    PAD_SIGNAL_ANALOG = 1,
    PAD_SIGNAL_DV = 2,
    PAD_SIGNAL_AUDIO = 3
};
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_pad {
   struct media_gobj graph_obj ;
   struct media_entity *entity ;
   u16 index ;
   enum media_pad_signal_type sig_type ;
   unsigned long flags ;
};
#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity_operations {
   int (*get_fwnode_pad)(struct fwnode_endpoint *) ;
   int (*link_setup)(struct media_entity *, struct media_pad *, struct media_pad *, u32 ) ;
   int (*link_validate)(struct media_link *) ;
};
#line 221 
enum media_entity_type {
    MEDIA_ENTITY_TYPE_BASE = 0,
    MEDIA_ENTITY_TYPE_VIDEO_DEVICE = 1,
    MEDIA_ENTITY_TYPE_V4L2_SUBDEV = 2
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct __anonstruct_dev_16175 {
   u32 major ;
   u32 minor ;
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_info_16174 {
   struct __anonstruct_dev_16175 dev ;
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity {
   struct media_gobj graph_obj ;
   char *name ;
   enum media_entity_type obj_type ;
   u32 function ;
   unsigned long flags ;
   u16 num_pads ;
   u16 num_links ;
   u16 num_backlinks ;
   int internal_idx ;
   struct media_pad *pads ;
   struct list_head links ;
   struct media_entity_operations *ops ;
   int stream_count ;
   int use_count ;
   struct media_pipeline *pipe ;
   union __anonunion_info_16174 info ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_interface {
   struct media_gobj graph_obj ;
   struct list_head links ;
   u32 type ;
   u32 flags ;
};
#line 349  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_intf_devnode {
   struct media_interface intf ;
   u32 major ;
   u32 minor ;
};
#line 1087 
enum vfl_devnode_type {
    VFL_TYPE_GRABBER = 0,
    VFL_TYPE_VBI = 1,
    VFL_TYPE_RADIO = 2,
    VFL_TYPE_SUBDEV = 3,
    VFL_TYPE_SDR = 4,
    VFL_TYPE_TOUCH = 5,
    VFL_TYPE_MAX = 6
};
#line 1097 
enum vfl_devnode_direction {
    VFL_DIR_RX = 0,
    VFL_DIR_TX = 1,
    VFL_DIR_M2M = 2
};
#line 1104 
struct video_device;
#line 1105 
struct v4l2_device;
#line 1106 
struct v4l2_ctrl_handler;
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct v4l2_prio_state {
   atomic_t prios[4U] ;
};
#line 193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct v4l2_file_operations {
   struct module *owner ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*unlocked_ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl32)(struct file *, unsigned int , unsigned long ) ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   int (*mmap)(struct file *, struct vm_area_struct *) ;
   int (*open)(struct file *) ;
   int (*release)(struct file *) ;
};
#line 256 
struct vb2_queue;
#line 256 
struct v4l2_ioctl_ops;
#line 256  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct video_device {
   struct media_entity entity ;
   struct media_intf_devnode *intf_devnode ;
   struct media_pipeline pipe ;
   struct v4l2_file_operations *fops ;
   u32 device_caps ;
   struct device dev ;
   struct cdev *cdev ;
   struct v4l2_device *v4l2_dev ;
   struct device *dev_parent ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   struct vb2_queue *queue ;
   struct v4l2_prio_state *prio ;
   char name[32U] ;
   enum vfl_devnode_type vfl_type ;
   enum vfl_devnode_direction vfl_dir ;
   int minor ;
   u16 num ;
   unsigned long flags ;
   int index ;
   spinlock_t fh_lock ;
   struct list_head fh_list ;
   int dev_debug ;
   v4l2_std_id tvnorms ;
   void (*release)(struct video_device *) ;
   struct v4l2_ioctl_ops *ioctl_ops ;
   unsigned long valid_ioctls[3U] ;
   struct mutex *lock ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-common.h"
struct v4l2_subdev;
#line 96 
struct v4l2_subdev_ops;
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-common.h"
struct v4l2_priv_tun_config {
   int tuner ;
   void *priv ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-devnode.h"
struct media_file_operations {
   struct module *owner ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl)(struct file *, unsigned int , unsigned long ) ;
   int (*open)(struct file *) ;
   int (*release)(struct file *) ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-devnode.h"
struct media_devnode {
   struct media_device *media_dev ;
   struct media_file_operations *fops ;
   struct device dev ;
   struct cdev cdev ;
   struct device *parent ;
   int minor ;
   unsigned long flags ;
   void (*release)(struct media_devnode *) ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_request;
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_device_ops {
   int (*link_notify)(struct media_link *, u32 , unsigned int ) ;
   struct media_request *(*req_alloc)(struct media_device *) ;
   void (*req_free)(struct media_request *) ;
   int (*req_validate)(struct media_request *) ;
   void (*req_queue)(struct media_request *) ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_device {
   struct device *dev ;
   struct media_devnode *devnode ;
   char model[32U] ;
   char driver_name[32U] ;
   char serial[40U] ;
   char bus_info[32U] ;
   u32 hw_revision ;
   u64 topology_version ;
   u32 id ;
   struct ida entity_internal_idx ;
   int entity_internal_idx_max ;
   struct list_head entities ;
   struct list_head interfaces ;
   struct list_head pads ;
   struct list_head links ;
   struct list_head entity_notify ;
   struct mutex graph_mutex ;
   struct media_graph pm_count_walk ;
   void *source_priv ;
   int (*enable_source)(struct media_entity *, struct media_pipeline *) ;
   void (*disable_source)(struct media_entity *) ;
   struct media_device_ops *ops ;
   struct mutex req_queue_mutex ;
   atomic_t request_id ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-mediabus.h"
struct v4l2_mbus_framefmt {
   __u32 width ;
   __u32 height ;
   __u32 code ;
   __u32 field ;
   __u32 colorspace ;
   __u16 ycbcr_enc ;
   __u16 quantization ;
   __u16 xfer_func ;
   __u16 reserved[11U] ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_format {
   __u32 which ;
   __u32 pad ;
   struct v4l2_mbus_framefmt format ;
   __u32 reserved[8U] ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_mbus_code_enum {
   __u32 pad ;
   __u32 index ;
   __u32 code ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_size_enum {
   __u32 index ;
   __u32 pad ;
   __u32 code ;
   __u32 min_width ;
   __u32 max_width ;
   __u32 min_height ;
   __u32 max_height ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_interval {
   __u32 pad ;
   struct v4l2_fract interval ;
   __u32 reserved[9U] ;
};
#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_interval_enum {
   __u32 index ;
   __u32 pad ;
   __u32 code ;
   __u32 width ;
   __u32 height ;
   struct v4l2_fract interval ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_selection {
   __u32 which ;
   __u32 pad ;
   __u32 target ;
   __u32 flags ;
   struct v4l2_rect r ;
   __u32 reserved[8U] ;
};
#line 157 
struct v4l2_async_notifier;
#line 158 
enum v4l2_async_match_type {
    V4L2_ASYNC_MATCH_CUSTOM = 0,
    V4L2_ASYNC_MATCH_DEVNAME = 1,
    V4L2_ASYNC_MATCH_I2C = 2,
    V4L2_ASYNC_MATCH_FWNODE = 3
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct __anonstruct_i2c_16189 {
   int adapter_id ;
   unsigned short address ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct __anonstruct_custom_16190 {
   bool (*match)(struct device *, struct v4l2_async_subdev *) ;
   void *priv ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
union __anonunion_match_16188 {
   struct fwnode_handle *fwnode ;
   char *device_name ;
   struct __anonstruct_i2c_16189 i2c ;
   struct __anonstruct_custom_16190 custom ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_subdev {
   enum v4l2_async_match_type match_type ;
   union __anonunion_match_16188 match ;
   struct list_head list ;
   struct list_head asd_list ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_notifier_operations {
   int (*bound)(struct v4l2_async_notifier *, struct v4l2_subdev *, struct v4l2_async_subdev *) ;
   int (*complete)(struct v4l2_async_notifier *) ;
   void (*unbind)(struct v4l2_async_notifier *, struct v4l2_subdev *, struct v4l2_async_subdev *) ;
};
#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_notifier {
   struct v4l2_async_notifier_operations *ops ;
   struct v4l2_device *v4l2_dev ;
   struct v4l2_subdev *sd ;
   struct v4l2_async_notifier *parent ;
   struct list_head asd_list ;
   struct list_head waiting ;
   struct list_head done ;
   struct list_head list ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-fh.h"
struct v4l2_m2m_ctx;
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-fh.h"
struct v4l2_fh {
   struct list_head list ;
   struct video_device *vdev ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   enum v4l2_priority prio ;
   wait_queue_head_t wait ;
   struct mutex subscribe_lock ;
   struct list_head subscribed ;
   struct list_head available ;
   unsigned int navailable ;
   u32 sequence ;
   struct v4l2_m2m_ctx *m2m_ctx ;
};
#line 162 
enum v4l2_mbus_type {
    V4L2_MBUS_UNKNOWN = 0,
    V4L2_MBUS_PARALLEL = 1,
    V4L2_MBUS_BT656 = 2,
    V4L2_MBUS_CSI1 = 3,
    V4L2_MBUS_CCP2 = 4,
    V4L2_MBUS_CSI2_DPHY = 5,
    V4L2_MBUS_CSI2_CPHY = 6
};
#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-mediabus.h"
struct v4l2_mbus_config {
   enum v4l2_mbus_type type ;
   unsigned int flags ;
};
#line 184 
struct v4l2_subdev_fh;
#line 185 
struct tuner_setup;
#line 186 
struct v4l2_mbus_frame_desc;
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_decode_vbi_line {
   u32 is_second_field ;
   u8 *p ;
   u32 line ;
   u32 type ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_io_pin_config {
   u32 flags ;
   u8 pin ;
   u8 function ;
   u8 value ;
   u8 strength ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_core_ops {
   int (*log_status)(struct v4l2_subdev *) ;
   int (*s_io_pin_config)(struct v4l2_subdev *, size_t , struct v4l2_subdev_io_pin_config *) ;
   int (*init)(struct v4l2_subdev *, u32 ) ;
   int (*load_fw)(struct v4l2_subdev *) ;
   int (*reset)(struct v4l2_subdev *, u32 ) ;
   int (*s_gpio)(struct v4l2_subdev *, u32 ) ;
   long (*ioctl)(struct v4l2_subdev *, unsigned int , void *) ;
   long (*compat_ioctl32)(struct v4l2_subdev *, unsigned int , unsigned long ) ;
   int (*g_register)(struct v4l2_subdev *, struct v4l2_dbg_register *) ;
   int (*s_register)(struct v4l2_subdev *, struct v4l2_dbg_register *) ;
   int (*s_power)(struct v4l2_subdev *, int ) ;
   int (*interrupt_service_routine)(struct v4l2_subdev *, u32 , bool *) ;
   int (*subscribe_event)(struct v4l2_subdev *, struct v4l2_fh *, struct v4l2_event_subscription *) ;
   int (*unsubscribe_event)(struct v4l2_subdev *, struct v4l2_fh *, struct v4l2_event_subscription *) ;
};
#line 264  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_tuner_ops {
   int (*standby)(struct v4l2_subdev *) ;
   int (*s_radio)(struct v4l2_subdev *) ;
   int (*s_frequency)(struct v4l2_subdev *, struct v4l2_frequency *) ;
   int (*g_frequency)(struct v4l2_subdev *, struct v4l2_frequency *) ;
   int (*enum_freq_bands)(struct v4l2_subdev *, struct v4l2_frequency_band *) ;
   int (*g_tuner)(struct v4l2_subdev *, struct v4l2_tuner *) ;
   int (*s_tuner)(struct v4l2_subdev *, struct v4l2_tuner *) ;
   int (*g_modulator)(struct v4l2_subdev *, struct v4l2_modulator *) ;
   int (*s_modulator)(struct v4l2_subdev *, struct v4l2_modulator *) ;
   int (*s_type_addr)(struct v4l2_subdev *, struct tuner_setup *) ;
   int (*s_config)(struct v4l2_subdev *, struct v4l2_priv_tun_config *) ;
};
#line 304  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_audio_ops {
   int (*s_clock_freq)(struct v4l2_subdev *, u32 ) ;
   int (*s_i2s_clock_freq)(struct v4l2_subdev *, u32 ) ;
   int (*s_routing)(struct v4l2_subdev *, u32 , u32 , u32 ) ;
   int (*s_stream)(struct v4l2_subdev *, int ) ;
};
#line 310 
enum v4l2_mbus_frame_desc_flags {
    V4L2_MBUS_FRAME_DESC_FL_LEN_MAX = 1,
    V4L2_MBUS_FRAME_DESC_FL_BLOB = 2
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_mbus_frame_desc_entry {
   enum v4l2_mbus_frame_desc_flags flags ;
   u32 pixelcode ;
   u32 length ;
};
#line 348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_mbus_frame_desc {
   struct v4l2_mbus_frame_desc_entry entry[4U] ;
   unsigned short num_entries ;
};
#line 415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_video_ops {
   int (*s_routing)(struct v4l2_subdev *, u32 , u32 , u32 ) ;
   int (*s_crystal_freq)(struct v4l2_subdev *, u32 , u32 ) ;
   int (*g_std)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*s_std)(struct v4l2_subdev *, v4l2_std_id ) ;
   int (*s_std_output)(struct v4l2_subdev *, v4l2_std_id ) ;
   int (*g_std_output)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*querystd)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_tvnorms)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_tvnorms_output)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_input_status)(struct v4l2_subdev *, u32 *) ;
   int (*s_stream)(struct v4l2_subdev *, int ) ;
   int (*g_pixelaspect)(struct v4l2_subdev *, struct v4l2_fract *) ;
   int (*g_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_frame_interval *) ;
   int (*s_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_frame_interval *) ;
   int (*s_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*g_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*query_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*g_mbus_config)(struct v4l2_subdev *, struct v4l2_mbus_config *) ;
   int (*s_mbus_config)(struct v4l2_subdev *, struct v4l2_mbus_config *) ;
   int (*s_rx_buffer)(struct v4l2_subdev *, void *, unsigned int *) ;
};
#line 481  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_vbi_ops {
   int (*decode_vbi_line)(struct v4l2_subdev *, struct v4l2_decode_vbi_line *) ;
   int (*s_vbi_data)(struct v4l2_subdev *, struct v4l2_sliced_vbi_data *) ;
   int (*g_vbi_data)(struct v4l2_subdev *, struct v4l2_sliced_vbi_data *) ;
   int (*g_sliced_vbi_cap)(struct v4l2_subdev *, struct v4l2_sliced_vbi_cap *) ;
   int (*s_raw_fmt)(struct v4l2_subdev *, struct v4l2_vbi_format *) ;
   int (*g_sliced_fmt)(struct v4l2_subdev *, struct v4l2_sliced_vbi_format *) ;
   int (*s_sliced_fmt)(struct v4l2_subdev *, struct v4l2_sliced_vbi_format *) ;
};
#line 501  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_sensor_ops {
   int (*g_skip_top_lines)(struct v4l2_subdev *, u32 *) ;
   int (*g_skip_frames)(struct v4l2_subdev *, u32 *) ;
};
#line 505 
enum v4l2_subdev_ir_mode {
    V4L2_SUBDEV_IR_MODE_PULSE_WIDTH = 0
};
#line 540  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ir_parameters {
   unsigned int bytes_per_data_element ;
   enum v4l2_subdev_ir_mode mode ;
   bool enable ;
   bool interrupt_enable ;
   bool shutdown ;
   bool modulation ;
   u32 max_pulse_width ;
   unsigned int carrier_freq ;
   unsigned int duty_cycle ;
   bool invert_level ;
   bool invert_carrier_sense ;
   u32 noise_filter_min_width ;
   unsigned int carrier_range_lower ;
   unsigned int carrier_range_upper ;
   u32 resolution ;
};
#line 599  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ir_ops {
   int (*rx_read)(struct v4l2_subdev *, u8 *, size_t , ssize_t *) ;
   int (*rx_g_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*rx_s_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*tx_write)(struct v4l2_subdev *, u8 *, size_t , ssize_t *) ;
   int (*tx_g_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*tx_s_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
};
#line 630  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_pad_config {
   struct v4l2_mbus_framefmt try_fmt ;
   struct v4l2_rect try_crop ;
   struct v4l2_rect try_compose ;
};
#line 674  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_pad_ops {
   int (*init_cfg)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *) ;
   int (*enum_mbus_code)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_mbus_code_enum *) ;
   int (*enum_frame_size)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_frame_size_enum *) ;
   int (*enum_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_frame_interval_enum *) ;
   int (*get_fmt)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_format *) ;
   int (*set_fmt)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_format *) ;
   int (*get_selection)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_selection *) ;
   int (*set_selection)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_selection *) ;
   int (*get_edid)(struct v4l2_subdev *, struct v4l2_edid *) ;
   int (*set_edid)(struct v4l2_subdev *, struct v4l2_edid *) ;
   int (*dv_timings_cap)(struct v4l2_subdev *, struct v4l2_dv_timings_cap *) ;
   int (*enum_dv_timings)(struct v4l2_subdev *, struct v4l2_enum_dv_timings *) ;
   int (*link_validate)(struct v4l2_subdev *, struct media_link *, struct v4l2_subdev_format *, struct v4l2_subdev_format *) ;
   int (*get_frame_desc)(struct v4l2_subdev *, unsigned int , struct v4l2_mbus_frame_desc *) ;
   int (*set_frame_desc)(struct v4l2_subdev *, unsigned int , struct v4l2_mbus_frame_desc *) ;
};
#line 727  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ops {
   struct v4l2_subdev_core_ops *core ;
   struct v4l2_subdev_tuner_ops *tuner ;
   struct v4l2_subdev_audio_ops *audio ;
   struct v4l2_subdev_video_ops *video ;
   struct v4l2_subdev_vbi_ops *vbi ;
   struct v4l2_subdev_ir_ops *ir ;
   struct v4l2_subdev_sensor_ops *sensor ;
   struct v4l2_subdev_pad_ops *pad ;
};
#line 765  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_internal_ops {
   int (*registered)(struct v4l2_subdev *) ;
   void (*unregistered)(struct v4l2_subdev *) ;
   int (*open)(struct v4l2_subdev *, struct v4l2_subdev_fh *) ;
   int (*close)(struct v4l2_subdev *, struct v4l2_subdev_fh *) ;
   void (*release)(struct v4l2_subdev *) ;
};
#line 772 
struct regulator_bulk_data;
#line 797  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_platform_data {
   struct regulator_bulk_data *regulators ;
   int num_regulators ;
   void *host_priv ;
};
#line 848  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev {
   struct media_entity entity ;
   struct list_head list ;
   struct module *owner ;
   bool owner_v4l2_dev ;
   u32 flags ;
   struct v4l2_device *v4l2_dev ;
   struct v4l2_subdev_ops *ops ;
   struct v4l2_subdev_internal_ops *internal_ops ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   char name[32U] ;
   u32 grp_id ;
   void *dev_priv ;
   void *host_priv ;
   struct video_device *devnode ;
   struct device *dev ;
   struct fwnode_handle *fwnode ;
   struct list_head async_list ;
   struct v4l2_async_subdev *asd ;
   struct v4l2_async_notifier *notifier ;
   struct v4l2_async_notifier *subdev_notifier ;
   struct v4l2_subdev_platform_data *pdata ;
};
#line 906  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_fh {
   struct v4l2_fh vfh ;
   struct module *owner ;
   struct v4l2_subdev_pad_config *pad ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-device.h"
struct v4l2_device {
   struct device *dev ;
   struct media_device *mdev ;
   struct list_head subdevs ;
   spinlock_t lock ;
   char name[36U] ;
   void (*notify)(struct v4l2_subdev *, unsigned int , void *) ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   struct v4l2_prio_state prio ;
   struct kref ref ;
   void (*release)(struct v4l2_device *) ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ptp_clock_kernel.h"
struct ptp_system_timestamp {
   struct timespec64 pre_ts ;
   struct timespec64 post_ts ;
};
#line 277 
struct dma_chan;
#line 279 
struct spi_controller;
#line 280 
struct spi_transfer;
#line 281 
struct spi_controller_mem_ops;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_statistics {
   spinlock_t lock ;
   unsigned long messages ;
   unsigned long transfers ;
   unsigned long errors ;
   unsigned long timedout ;
   unsigned long spi_sync ;
   unsigned long spi_sync_immediate ;
   unsigned long spi_async ;
   unsigned long long bytes ;
   unsigned long long bytes_rx ;
   unsigned long long bytes_tx ;
   unsigned long transfer_bytes_histo[17U] ;
   unsigned long transfers_split_maxsize ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_delay {
   u16 value ;
   u8 unit ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_device {
   struct device dev ;
   struct spi_controller *controller ;
   struct spi_controller *master ;
   u32 max_speed_hz ;
   u8 chip_select ;
   u8 bits_per_word ;
   bool rt ;
   u32 mode ;
   int irq ;
   void *controller_state ;
   void *controller_data ;
   char modalias[32U] ;
   char *driver_override ;
   int cs_gpio ;
   struct gpio_desc *cs_gpiod ;
   struct spi_delay word_delay ;
   struct spi_statistics statistics ;
};
#line 247 
struct spi_message;
#line 452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_controller {
   struct device dev ;
   struct list_head list ;
   s16 bus_num ;
   u16 num_chipselect ;
   u16 dma_alignment ;
   u32 mode_bits ;
   u32 bits_per_word_mask ;
   u32 min_speed_hz ;
   u32 max_speed_hz ;
   u16 flags ;
   bool slave ;
   size_t (*max_transfer_size)(struct spi_device *) ;
   size_t (*max_message_size)(struct spi_device *) ;
   struct mutex io_mutex ;
   spinlock_t bus_lock_spinlock ;
   struct mutex bus_lock_mutex ;
   bool bus_lock_flag ;
   int (*setup)(struct spi_device *) ;
   int (*set_cs_timing)(struct spi_device *, struct spi_delay *, struct spi_delay *, struct spi_delay *) ;
   int (*transfer)(struct spi_device *, struct spi_message *) ;
   void (*cleanup)(struct spi_device *) ;
   bool (*can_dma)(struct spi_controller *, struct spi_device *, struct spi_transfer *) ;
   bool queued ;
   struct kthread_worker kworker ;
   struct task_struct *kworker_task ;
   struct kthread_work pump_messages ;
   spinlock_t queue_lock ;
   struct list_head queue ;
   struct spi_message *cur_msg ;
   bool idling ;
   bool busy ;
   bool running ;
   bool rt ;
   bool auto_runtime_pm ;
   bool cur_msg_prepared ;
   bool cur_msg_mapped ;
   struct completion xfer_completion ;
   size_t max_dma_len ;
   int (*prepare_transfer_hardware)(struct spi_controller *) ;
   int (*transfer_one_message)(struct spi_controller *, struct spi_message *) ;
   int (*unprepare_transfer_hardware)(struct spi_controller *) ;
   int (*prepare_message)(struct spi_controller *, struct spi_message *) ;
   int (*unprepare_message)(struct spi_controller *, struct spi_message *) ;
   int (*slave_abort)(struct spi_controller *) ;
   void (*set_cs)(struct spi_device *, bool ) ;
   int (*transfer_one)(struct spi_controller *, struct spi_device *, struct spi_transfer *) ;
   void (*handle_err)(struct spi_controller *, struct spi_message *) ;
   struct spi_controller_mem_ops *mem_ops ;
   struct spi_delay cs_setup ;
   struct spi_delay cs_hold ;
   struct spi_delay cs_inactive ;
   int *cs_gpios ;
   struct gpio_desc **cs_gpiods ;
   bool use_gpio_descriptors ;
   struct spi_statistics statistics ;
   struct dma_chan *dma_tx ;
   struct dma_chan *dma_rx ;
   void *dummy_rx ;
   void *dummy_tx ;
   int (*fw_translate_cs)(struct spi_controller *, unsigned int ) ;
   bool ptp_sts_supported ;
   unsigned long irq_flags ;
};
#line 890  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_transfer {
   void *tx_buf ;
   void *rx_buf ;
   unsigned int len ;
   dma_addr_t tx_dma ;
   dma_addr_t rx_dma ;
   struct sg_table tx_sg ;
   struct sg_table rx_sg ;
   unsigned int cs_change : 1 ;
   unsigned int tx_nbits : 3 ;
   unsigned int rx_nbits : 3 ;
   u8 bits_per_word ;
   u16 delay_usecs ;
   struct spi_delay delay ;
   struct spi_delay cs_change_delay ;
   struct spi_delay word_delay ;
   u32 speed_hz ;
   u32 effective_speed_hz ;
   unsigned int ptp_sts_word_pre ;
   unsigned int ptp_sts_word_post ;
   struct ptp_system_timestamp *ptp_sts ;
   bool timestamped_pre ;
   bool timestamped_post ;
   struct list_head transfer_list ;
};
#line 961  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_message {
   struct list_head transfers ;
   struct spi_device *spi ;
   unsigned int is_dma_mapped : 1 ;
   void (*complete)(void *) ;
   void *context ;
   unsigned int frame_length ;
   unsigned int actual_length ;
   int status ;
   struct list_head queue ;
   void *state ;
   struct list_head resources ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_fix_screeninfo {
   char id[16U] ;
   unsigned long smem_start ;
   __u32 smem_len ;
   __u32 type ;
   __u32 type_aux ;
   __u32 visual ;
   __u16 xpanstep ;
   __u16 ypanstep ;
   __u16 ywrapstep ;
   __u32 line_length ;
   unsigned long mmio_start ;
   __u32 mmio_len ;
   __u32 accel ;
   __u16 capabilities ;
   __u16 reserved[2U] ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_bitfield {
   __u32 offset ;
   __u32 length ;
   __u32 msb_right ;
};
#line 241  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_var_screeninfo {
   __u32 xres ;
   __u32 yres ;
   __u32 xres_virtual ;
   __u32 yres_virtual ;
   __u32 xoffset ;
   __u32 yoffset ;
   __u32 bits_per_pixel ;
   __u32 grayscale ;
   struct fb_bitfield red ;
   struct fb_bitfield green ;
   struct fb_bitfield blue ;
   struct fb_bitfield transp ;
   __u32 nonstd ;
   __u32 activate ;
   __u32 height ;
   __u32 width ;
   __u32 accel_flags ;
   __u32 pixclock ;
   __u32 left_margin ;
   __u32 right_margin ;
   __u32 upper_margin ;
   __u32 lower_margin ;
   __u32 hsync_len ;
   __u32 vsync_len ;
   __u32 sync ;
   __u32 vmode ;
   __u32 rotate ;
   __u32 colorspace ;
   __u32 reserved[4U] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_cmap {
   __u32 start ;
   __u32 len ;
   __u16 *red ;
   __u16 *green ;
   __u16 *blue ;
   __u16 *transp ;
};
#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_copyarea {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 sx ;
   __u32 sy ;
};
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_fillrect {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 color ;
   __u32 rop ;
};
#line 359  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_image {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 fg_color ;
   __u32 bg_color ;
   __u8 depth ;
   char *data ;
   struct fb_cmap cmap ;
};
#line 383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fbcurpos {
   __u16 x ;
   __u16 y ;
};
#line 387  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_cursor {
   __u16 set ;
   __u16 enable ;
   __u16 rop ;
   char *mask ;
   struct fbcurpos hot ;
   struct fb_image image ;
};
#line 400 
enum backlight_type {
    BACKLIGHT_RAW = 1,
    BACKLIGHT_PLATFORM = 2,
    BACKLIGHT_FIRMWARE = 3,
    BACKLIGHT_TYPE_MAX = 4
};
#line 412 
enum backlight_scale {
    BACKLIGHT_SCALE_UNKNOWN = 0,
    BACKLIGHT_SCALE_LINEAR = 1,
    BACKLIGHT_SCALE_NON_LINEAR = 2
};
#line 418 
struct backlight_device;
#line 419 
struct fb_info;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_ops {
   unsigned int options ;
   int (*update_status)(struct backlight_device *) ;
   int (*get_brightness)(struct backlight_device *) ;
   int (*check_fb)(struct backlight_device *, struct fb_info *) ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_properties {
   int brightness ;
   int max_brightness ;
   int power ;
   int fb_blank ;
   enum backlight_type type ;
   unsigned int state ;
   enum backlight_scale scale ;
};
#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_device {
   struct backlight_properties props ;
   struct mutex update_lock ;
   struct mutex ops_lock ;
   struct backlight_ops *ops ;
   struct notifier_block fb_notif ;
   struct list_head entry ;
   struct device dev ;
   bool fb_bl_on[32U] ;
   int use_count ;
};
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_chroma {
   __u32 redx ;
   __u32 greenx ;
   __u32 bluex ;
   __u32 whitex ;
   __u32 redy ;
   __u32 greeny ;
   __u32 bluey ;
   __u32 whitey ;
};
#line 63 
struct fb_videomode;
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_monspecs {
   struct fb_chroma chroma ;
   struct fb_videomode *modedb ;
   __u8 manufacturer[4U] ;
   __u8 monitor[14U] ;
   __u8 serial_no[14U] ;
   __u8 ascii[14U] ;
   __u32 modedb_len ;
   __u32 model ;
   __u32 serial ;
   __u32 year ;
   __u32 week ;
   __u32 hfmin ;
   __u32 hfmax ;
   __u32 dclkmin ;
   __u32 dclkmax ;
   __u16 input ;
   __u16 dpms ;
   __u16 signal ;
   __u16 vfmin ;
   __u16 vfmax ;
   __u16 gamma ;
   __u16 gtf : 1 ;
   __u16 misc ;
   __u8 version ;
   __u8 revision ;
   __u8 max_x ;
   __u8 max_y ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_blit_caps {
   u32 x ;
   u32 y ;
   u32 len ;
   u32 flags ;
};
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_pixmap {
   u8 *addr ;
   u32 size ;
   u32 offset ;
   u32 buf_align ;
   u32 scan_align ;
   u32 access_align ;
   u32 flags ;
   u32 blit_x ;
   u32 blit_y ;
   void (*writeio)(struct fb_info *, void *, void *, unsigned int ) ;
   void (*readio)(struct fb_info *, void *, void *, unsigned int ) ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_deferred_io {
   unsigned long delay ;
   struct mutex lock ;
   struct list_head pagelist ;
   void (*first_io)(struct fb_info *) ;
   void (*deferred_io)(struct fb_info *, struct list_head *) ;
};
#line 228  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_ops {
   struct module *owner ;
   int (*fb_open)(struct fb_info *, int ) ;
   int (*fb_release)(struct fb_info *, int ) ;
   ssize_t (*fb_read)(struct fb_info *, char *, size_t , loff_t *) ;
   ssize_t (*fb_write)(struct fb_info *, char *, size_t , loff_t *) ;
   int (*fb_check_var)(struct fb_var_screeninfo *, struct fb_info *) ;
   int (*fb_set_par)(struct fb_info *) ;
   int (*fb_setcolreg)(unsigned int , unsigned int , unsigned int , unsigned int , unsigned int , struct fb_info *) ;
   int (*fb_setcmap)(struct fb_cmap *, struct fb_info *) ;
   int (*fb_blank)(int , struct fb_info *) ;
   int (*fb_pan_display)(struct fb_var_screeninfo *, struct fb_info *) ;
   void (*fb_fillrect)(struct fb_info *, struct fb_fillrect *) ;
   void (*fb_copyarea)(struct fb_info *, struct fb_copyarea *) ;
   void (*fb_imageblit)(struct fb_info *, struct fb_image *) ;
   int (*fb_cursor)(struct fb_info *, struct fb_cursor *) ;
   int (*fb_sync)(struct fb_info *) ;
   int (*fb_ioctl)(struct fb_info *, unsigned int , unsigned long ) ;
   int (*fb_compat_ioctl)(struct fb_info *, unsigned int , unsigned long ) ;
   int (*fb_mmap)(struct fb_info *, struct vm_area_struct *) ;
   void (*fb_get_caps)(struct fb_info *, struct fb_blit_caps *, struct fb_var_screeninfo *) ;
   void (*fb_destroy)(struct fb_info *) ;
   int (*fb_debug_enter)(struct fb_info *) ;
   int (*fb_debug_leave)(struct fb_info *) ;
};
#line 306  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilemap {
   __u32 width ;
   __u32 height ;
   __u32 depth ;
   __u32 length ;
   __u8 *data ;
};
#line 315  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilerect {
   __u32 sx ;
   __u32 sy ;
   __u32 width ;
   __u32 height ;
   __u32 index ;
   __u32 fg ;
   __u32 bg ;
   __u32 rop ;
};
#line 326  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilearea {
   __u32 sx ;
   __u32 sy ;
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tileblit {
   __u32 sx ;
   __u32 sy ;
   __u32 width ;
   __u32 height ;
   __u32 fg ;
   __u32 bg ;
   __u32 length ;
   __u32 *indices ;
};
#line 346  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilecursor {
   __u32 sx ;
   __u32 sy ;
   __u32 mode ;
   __u32 shape ;
   __u32 fg ;
   __u32 bg ;
};
#line 355  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tile_ops {
   void (*fb_settile)(struct fb_info *, struct fb_tilemap *) ;
   void (*fb_tilecopy)(struct fb_info *, struct fb_tilearea *) ;
   void (*fb_tilefill)(struct fb_info *, struct fb_tilerect *) ;
   void (*fb_tileblit)(struct fb_info *, struct fb_tileblit *) ;
   void (*fb_tilecursor)(struct fb_info *, struct fb_tilecursor *) ;
   int (*fb_get_tilemax)(struct fb_info *) ;
};
#line 499  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct aperture {
   resource_size_t base ;
   resource_size_t size ;
};
#line 497  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct apertures_struct {
   unsigned int count ;
   struct aperture ranges[0U] ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
union __anonunion_17091 {
   char *screen_base ;
   char *screen_buffer ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_info {
   atomic_t count ;
   int node ;
   int flags ;
   int fbcon_rotate_hint ;
   struct mutex lock ;
   struct mutex mm_lock ;
   struct fb_var_screeninfo var ;
   struct fb_fix_screeninfo fix ;
   struct fb_monspecs monspecs ;
   struct work_struct queue ;
   struct fb_pixmap pixmap ;
   struct fb_pixmap sprite ;
   struct fb_cmap cmap ;
   struct list_head modelist ;
   struct fb_videomode *mode ;
   struct backlight_device *bl_dev ;
   struct mutex bl_curve_mutex ;
   u8 bl_curve[128U] ;
   struct delayed_work deferred_work ;
   struct fb_deferred_io *fbdefio ;
   struct fb_ops *fbops ;
   struct device *device ;
   struct device *dev ;
   int class_flag ;
   struct fb_tile_ops *tileops ;
   union __anonunion_17091 __anonCompField_fb_info_73 ;
   unsigned long screen_size ;
   void *pseudo_palette ;
   u32 state ;
   void *fbcon_par ;
   void *par ;
   struct apertures_struct *apertures ;
   bool skip_vt_switch ;
};
#line 767  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_videomode {
   char *name ;
   u32 refresh ;
   u32 xres ;
   u32 yres ;
   u32 pixclock ;
   u32 left_margin ;
   u32 right_margin ;
   u32 upper_margin ;
   u32 lower_margin ;
   u32 hsync_len ;
   u32 vsync_len ;
   u32 sync ;
   u32 vmode ;
   u32 flag ;
};
#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct ldv_kmem_cache {
   char *name ;
   unsigned int size ;
};
#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
typedef unsigned long pthread_t;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
union pthread_attr_t {
   char __size[56U] ;
   long __align ;
};
#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
typedef union pthread_attr_t pthread_attr_t;
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 17  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_free_irq_7 {
   int arg0 ;
   int signal_pending ;
};
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_interrupt_scenario_2_18 {
   int arg0 ;
   enum irqreturn (*arg1)(int , void *) ;
   enum irqreturn (*arg2)(int , void *) ;
   void *arg3 ;
   int signal_pending ;
};
#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_devattr_instance_dev_attr_phy_flash_cfg_16 {
   struct device *arg0 ;
   struct device_attribute *arg1 ;
   int signal_pending ;
};
#line 36  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_pci_scenario_ef4_pci_driver_19 {
   struct pci_driver *arg0 ;
   int signal_pending ;
};
#line 41  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_timer_scenario_5_21 {
   struct timer_list *arg0 ;
   int signal_pending ;
};
/* compiler builtin: 
   unsigned short __builtin_bswap16(unsigned short);   */
/* compiler builtin: 
   void *__builtin_memcpy(void *, void const *, unsigned long);   */
/* compiler builtin: 
   void __builtin_prefetch(void const * , ...);   */
/* compiler builtin: 
   void __builtin_unreachable(void);   */
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/common/inline_asm.h"
#line 22 
void ldv_inline_asm(void);
#line 7  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/rx.i.aux"
#line 7 
void ldv_atomic_inc(atomic_t *v);
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compiler.h"
__inline static void __read_once_size(void *p, void *res, int size)
{
  #line 199 
  switch (size) {
    #line 199 
    case 1: 
            #line 199 
    ;
    #line 199 
    *((__u8 *)res) = *((__u8 *)p);
    #line 199 
    break;
    #line 199 
    case 2: 
            #line 199 
    ;
    #line 199 
    *((__u16 *)res) = *((__u16 *)p);
    #line 199 
    break;
    #line 199 
    case 4: 
            #line 199 
    ;
    #line 199 
    *((__u32 *)res) = *((__u32 *)p);
    #line 199 
    break;
    #line 199 
    case 8: 
            #line 199 
    ;
    #line 199 
    *((__u64 *)res) = *((__u64 *)p);
    #line 199 
    break;
    #line 199 
    default: 
             #line 199 
    ;
    #line 200 
    ldv_inline_asm();
    #line 199 
    __builtin_memcpy(res,(void const *)p,(unsigned long)size);
    #line 200 
    ldv_inline_asm();
  }
  #line 203 
  return;
}

#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kasan-checks.h"
__inline static bool kasan_check_read(void *p, unsigned int size)
{
  #line 36 
  return (_Bool)1;
}

#line 324  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static int fls(unsigned int x)
{
  #line 326 
  int r;
  #line 327 
  ldv_inline_asm();
  #line 351 
  return r + 1;
}

#line 366  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static int fls64(__u64 x)
{
  #line 368 
  int bitpos = -1;
  #line 369 
  ldv_inline_asm();
  #line 377 
  return bitpos + 1;
}

#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/byteorder/little_endian.h"
__inline static __u32 __le32_to_cpup(__le32 *p)
{
  #line 58 
  return *p;
}

#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/byteorder/little_endian.h"
__inline static __u16 __le16_to_cpup(__le16 *p)
{
  #line 66 
  return *p;
}

#line 179  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bitops.h"
__inline static unsigned int fls_long(unsigned long l)
{
  #line 183 
  return (unsigned int)fls64((unsigned long long)l);
}

#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/log2.h"
__inline static int __ilog2_u32(u32 n)
{
  #line 24 
  return fls(n) + -1;
}

#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/log2.h"
__inline static unsigned long __roundup_pow_of_two(unsigned long n)
{
  #line 57 
  return 1UL << fls_long(n + 18446744073709551615UL);
}

#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/jump_label.h"
__inline static bool arch_static_branch(struct static_key *key, bool branch)
{
  #line 27 
  ldv_inline_asm();
  #line 28 
  ldv_inline_asm();
  #line 34 
  return (_Bool)0;
  #line 35 
  l_yes: 
         #line 35 
  ;
  #line 36 
  return (_Bool)1;
}

#line 198  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
__inline static bool static_key_false(struct static_key *key)
{
  #line 200 
  return arch_static_branch(key,(_Bool)0);
}

#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_debug.h"
#line 70 
void __dynamic_netdev_dbg(struct _ddebug *, struct net_device *, char * , ...);
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/page_64.h"
#line 14 
extern unsigned long page_offset_base;
#line 16 
#line 16 
extern unsigned long vmemmap_base;
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/string_64.h"
#line 14 
void *memcpy(void *, void *, size_t);
#line 18 
#line 18 
void *memset(void *, int, size_t);
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cmpxchg_64.h"
__inline static int arch_atomic_read(atomic_t *v)
{
  #line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
  union __anonunion___u_67 __u;
  #line 31 
  __read_once_size((void *)(& v->counter),(void *)(& __u.__c),4);
  #line 31 
  return (__u.__val);
}

#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
__inline static bool arch_atomic_dec_and_test(atomic_t *v)
{
  #line 125 
  bool c;
  #line 126 
  ldv_inline_asm();
  #line 125 
  return c;
}

#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
__inline static int atomic_read(atomic_t *v)
{
  #line 26 
  kasan_check_read((void *)v,4U);
  #line 27 
  return arch_atomic_read(v);
}

#line 237 
#line 186  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/rx.i.aux"
static void atomic_inc(atomic_t *v);
#line 745  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
__inline static bool atomic_dec_and_test(atomic_t *v)
{
  #line 747 
  kasan_check_read((void *)v,4U);
  #line 748 
  return arch_atomic_dec_and_test(v);
}

#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
#line 20 
unsigned long native_save_fl(void);
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
unsigned long native_save_fl(void)
{
  #line 22 
  unsigned long flags;
  #line 23 
  ldv_inline_asm();
  #line 35 
  return flags;
}

#line 38 
#line 39 
void native_restore_fl(unsigned long flags);
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
void native_restore_fl(unsigned long flags)
{
  #line 41 
  ldv_inline_asm();
  #line 42 
  return;
}

#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_api_smp.h"
#line 38 
int _raw_spin_trylock_bh(raw_spinlock_t *);
#line 40 
#line 40 
void _raw_spin_unlock_bh(raw_spinlock_t *);
#line 381  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_bh(spinlock_t *lock)
{
  #line 383 
  _raw_spin_unlock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 384 
  return;
}

#line 385 
#line 847  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/rx.i.aux"
static void cif_spin_unlock_bh_filter_lock_of_ef4_nic(spinlock_t *lock);
#line 396  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static int spin_trylock_bh(spinlock_t *lock)
{
  #line 398 
  return _raw_spin_trylock_bh(& lock->__anonCompField_spinlock_25.rlock);
}

#line 400 
#line 825  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/rx.i.aux"
static int cif_spin_trylock_bh_filter_lock_of_ef4_nic(spinlock_t *lock);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 23 
int ldv_undef_int(void);
#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/rx.i.aux"
#line 40 
void ldv_spin_model_lock(char *);
#line 41 
#line 41 
void ldv_spin_model_unlock(char *);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 25 
void *ldv_kcalloc(size_t n, size_t size, gfp_t flags);
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmdebug.h"
#line 12 
void dump_page(struct page *, char *);
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
#line 817  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/rx.i.aux"
static int cif_del_timer_sync(struct timer_list *timer);
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page-flags.h"
__inline static struct page *compound_head(struct page *page)
{
  #line 175 
  union __anonunion___u_147 __u;
  #line 174 
  __read_once_size((void *)(& page->__anonCompField_page_43.__anonCompField___anonunion_129_38.compound_head),(void *)(& __u.__c),8);
  #line 174 
  unsigned long head = (__u.__val);
  #line 176 
  if ((long)((head & 1UL) != 0UL) != 0L) 
                                         #line 177 
                                         return (struct page *)(head + 18446744073709551615UL);
  #line 178 
  return page;
}

#line 527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/gfp.h"
#line 527 
struct page *alloc_pages_current(gfp_t, unsigned int);
#line 530  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/gfp.h"
__inline static struct page *alloc_pages(gfp_t gfp_mask, unsigned int order)
{
  #line 532 
  return alloc_pages_current(gfp_mask,order);
}

#line 566 
#line 566 
void __free_pages(struct page *, unsigned int);
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 189 
void kfree(void *);
#line 607 
#line 355  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/rx.i.aux"
static void *kcalloc(size_t n, size_t size, gfp_t flags);
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/in.h"
__inline static bool ipv4_is_multicast(__be32 addr)
{
  #line 45 
  return (_Bool)((addr & 240U) == 224U);
}

#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page_ref.h"
#line 11 
extern struct tracepoint __tracepoint_page_ref_mod;
#line 12 
#line 12 
extern struct tracepoint __tracepoint_page_ref_mod_and_test;
#line 30 
#line 30 
void __page_ref_mod(struct page *, int);
#line 31 
#line 31 
void __page_ref_mod_and_test(struct page *, int, int);
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page_ref.h"
__inline static int page_ref_count(struct page *page)
{
  #line 67 
  return atomic_read(& page->_refcount);
}

#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page_ref.h"
__inline static int page_count(struct page *page)
{
  #line 72 
  return atomic_read(& compound_head(page)->_refcount);
}

#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page_ref.h"
__inline static void page_ref_inc(struct page *page)
{
  #line 107 
  atomic_inc(& page->_refcount);
  #line 108 
  if ((int)static_key_false(& __tracepoint_page_ref_mod.key) != 0) 
                                                                   #line 109 
                                                                   __page_ref_mod(page,1);
  #line 110 
  return;
}

#line 137  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page_ref.h"
__inline static int page_ref_dec_and_test(struct page *page)
{
  #line 139 
  int ret = (int)atomic_dec_and_test(& page->_refcount);
  #line 141 
  if ((int)static_key_false(& __tracepoint_page_ref_mod_and_test.key) != 0) 
    #line 142 
    __page_ref_mod_and_test(page,-1,ret);
  #line 143 
  return ret;
}

#line 590  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static int put_page_testzero(struct page *page)
{
  #line 592 
  if ((long)(page_ref_count(page) == 0) != 0L) {
    #line 592 
    dump_page(page,(char *)"VM_BUG_ON_PAGE(");
    #line 593 
    ldv_inline_asm();
    #line 594 
    ldv_inline_asm();
    #line 595 
    ldv_inline_asm();
    #line 592 
    ;
  }
  #line 593 
  return page_ref_dec_and_test(page);
}

#line 736 
#line 736 
void __put_page(struct page *);
#line 935  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static enum zone_type page_zonenum(struct page *page)
{
  #line 937 
  return (enum zone_type)((unsigned int)(page->flags >> 51UL) & 7U);
}

#line 941  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static bool is_zone_device_page(struct page *page)
{
  #line 943 
  return (_Bool)(page_zonenum(page) == (unsigned int)ZONE_DEVICE);
}

#line 955 
#line 955 
void __put_devmap_managed_page(struct page *);
#line 956 
#line 956 
extern struct static_key_false devmap_managed_key;
#line 957  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static bool put_devmap_managed_page(struct page *page)
{
  #line 959 
  bool branch;
  #line 959 
  branch = arch_static_branch(& devmap_managed_key.key,(_Bool)0);
  #line 959 
  if ((long)((long)((int)branch != 0)) == 0L) 
                                              #line 960 
                                              return (_Bool)0;
  #line 961 
  if (! is_zone_device_page(page)) 
                                   #line 962 
                                   return (_Bool)0;
  #line 963 
  switch ((unsigned int)(page->__anonCompField_page_43.__anonCompField___anonunion_129_42.pgmap)->type) {
    #line 964 
    case (unsigned int)1: 
                          #line 964 
    ;
    #line 965 
    case (unsigned int)2: 
                          #line 965 
    ;
    #line 966 
    __put_devmap_managed_page(page);
    #line 967 
    return (_Bool)1;
    #line 968 
    default: 
             #line 968 
    ;
    #line 969 
    break;
  }
  #line 971 
  return (_Bool)0;
}

#line 1001  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static void get_page(struct page *page)
{
  #line 1003 
  page = compound_head(page);
  #line 1008 
  if ((long)((unsigned int)page_ref_count(page) + 127U <= 127U) != 0L) {
    #line 1008 
    dump_page(page,(char *)"VM_BUG_ON_PAGE(");
    #line 1009 
    ldv_inline_asm();
    #line 1010 
    ldv_inline_asm();
    #line 1011 
    ldv_inline_asm();
    #line 1008 
    ;
  }
  #line 1009 
  page_ref_inc(page);
  #line 1010 
  return;
}

#line 1021  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static void put_page(struct page *page)
{
  #line 1023 
  page = compound_head(page);
  #line 1031 
  if ((int)put_devmap_managed_page(page) != 0) 
                                               #line 1032 
                                               return;
  #line 1034 
  if (put_page_testzero(page) != 0) 
                                    #line 1035 
                                    __put_page(page);
  #line 1036 
  return;
}

#line 1299  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static void *lowmem_page_address(struct page *page)
{
  #line 1301 
  return (void *)((unsigned long)((unsigned long long)((page - (struct page *)vmemmap_base) / 64L) << 12) + page_offset_base);
}

#line 1369  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static bool page_is_pfmemalloc(struct page *page)
{
  #line 1375 
  return (_Bool)(page->__anonCompField_page_43.__anonCompField___anonunion_129_31.index == 18446744073709551615UL);
}

#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
#line 244 
int net_ratelimit(void);
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-debug.h"
#line 24 
void debug_dma_map_page(struct device *, struct page *, size_t, size_t, int, dma_addr_t);
#line 28 
#line 28 
void debug_dma_mapping_error(struct device *, dma_addr_t);
#line 30 
#line 30 
void debug_dma_unmap_page(struct device *, dma_addr_t, size_t, int);
#line 52 
#line 52 
void debug_dma_sync_single_for_cpu(struct device *, dma_addr_t, size_t, int);
#line 143  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static int valid_dma_direction(int dma_direction)
{
  #line 146 
  return (unsigned int)dma_direction <= 2U;
}

#line 191  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static bool dma_is_direct(struct dma_map_ops *ops)
{
  #line 193 
  return (_Bool)((long)(ops == (struct dma_map_ops *)0) != 0L);
}

#line 200 
#line 200 
dma_addr_t dma_direct_map_page(struct device *, struct page *, unsigned long, size_t, enum dma_data_direction, unsigned long);
#line 228 
#line 228 
void dma_direct_unmap_page(struct device *, dma_addr_t, size_t, enum dma_data_direction, unsigned long);
#line 232 
#line 232 
void dma_direct_sync_single_for_cpu(struct device *, dma_addr_t, size_t, enum dma_data_direction);
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/dma-mapping.h"
#line 19 
extern struct dma_map_ops *dma_ops;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/dma-mapping.h"
__inline static struct dma_map_ops *get_arch_dma_ops(struct bus_type *bus)
{
  #line 23 
  return dma_ops;
}

#line 261  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static struct dma_map_ops *get_dma_ops(struct device *dev)
{
  #line 263 
  if (dev->dma_ops != (struct dma_map_ops *)0) 
                                               #line 264 
                                               return dev->dma_ops;
  #line 265 
  return get_arch_dma_ops(dev->bus);
}

#line 274  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static dma_addr_t dma_map_page_attrs(struct device *dev, struct page *page, size_t offset, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 279 
  dma_addr_t addr;
  #line 278 
  struct dma_map_ops *ops = get_dma_ops(dev);
  #line 281 
  if ((long)(valid_dma_direction((int)dir) == 0) != 0L) {
    #line 282 
    ldv_inline_asm();
    #line 283 
    ldv_inline_asm();
    #line 284 
    ldv_inline_asm();
    #line 281 
    ;
  }
  #line 282 
  if ((int)dma_is_direct(ops) != 0) 
                                    #line 283 
                                    addr = dma_direct_map_page(dev,page,offset,size,dir,attrs); else 
                                                                    #line 285 
                                                                    addr = (*(ops->map_page))(dev,page,offset,size,dir,attrs);
  #line 286 
  debug_dma_map_page(dev,page,offset,size,(int)dir,addr);
  #line 288 
  return addr;
}

#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_unmap_page_attrs(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 294 
  struct dma_map_ops *ops = get_dma_ops(dev);
  #line 296 
  if ((long)(valid_dma_direction((int)dir) == 0) != 0L) {
    #line 297 
    ldv_inline_asm();
    #line 298 
    ldv_inline_asm();
    #line 299 
    ldv_inline_asm();
    #line 296 
    ;
  }
  #line 297 
  if ((int)dma_is_direct(ops) != 0) 
                                    #line 298 
                                    dma_direct_unmap_page(dev,addr,size,dir,attrs);
  else 
    #line 299 
    if (ops->unmap_page != (void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ))0) 
      #line 300 
      (*(ops->unmap_page))(dev,addr,size,dir,attrs);
  #line 301 
  debug_dma_unmap_page(dev,addr,size,(int)dir);
  #line 302 
  return;
}

#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_sync_single_for_cpu(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir)
{
  #line 380 
  struct dma_map_ops *ops = get_dma_ops(dev);
  #line 382 
  if ((long)(valid_dma_direction((int)dir) == 0) != 0L) {
    #line 383 
    ldv_inline_asm();
    #line 384 
    ldv_inline_asm();
    #line 385 
    ldv_inline_asm();
    #line 382 
    ;
  }
  #line 383 
  if ((int)dma_is_direct(ops) != 0) 
                                    #line 384 
                                    dma_direct_sync_single_for_cpu(dev,addr,size,dir);
  else 
    #line 385 
    if (ops->sync_single_for_cpu != (void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction ))0) 
      #line 386 
      (*(ops->sync_single_for_cpu))(dev,addr,size,dir);
  #line 387 
  debug_dma_sync_single_for_cpu(dev,addr,size,(int)dir);
  #line 388 
  return;
}

#line 433  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static int dma_mapping_error(struct device *dev, dma_addr_t dma_addr)
{
  #line 435 
  debug_dma_mapping_error(dev,dma_addr);
  #line 437 
  if (dma_addr == 18446744073709551615ULL) 
                                           #line 438 
                                           return -12;
  #line 439 
  return 0;
}

#line 304  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_dissector.h"
#line 304 
extern struct flow_dissector flow_keys_dissector;
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_frag_size_set(skb_frag_t *frag, unsigned int size)
{
  #line 337 
  frag->bv_len = size;
  #line 338 
  return;
}

#line 1214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void __skb_set_hash(struct sk_buff *skb, __u32 hash, bool is_sw, bool is_l4)
{
  #line 1216 
  skb->l4_hash = (unsigned char)is_l4;
  #line 1217 
  skb->sw_hash = (unsigned char)is_sw;
  #line 1218 
  skb->hash = hash;
  #line 1219 
  return;
}

#line 1222  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_set_hash(struct sk_buff *skb, __u32 hash, enum pkt_hash_types type)
{
  #line 1225 
  __skb_set_hash(skb,hash,(_Bool)0,(_Bool)(type == (unsigned int)PKT_HASH_TYPE_L4));
  #line 1226 
  return;
}

#line 1282 
#line 1282 
bool __skb_flow_dissect(struct net *, struct sk_buff *, struct flow_dissector *, void *, void *, __be16, int, int, unsigned int);
#line 1297  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static bool skb_flow_dissect_flow_keys(struct sk_buff *skb, struct flow_keys *flow, unsigned int flags)
{
  #line 1301 
  memset((void *)flow,0,72UL);
  #line 1302 
  return __skb_flow_dissect((struct net *)0,skb,& flow_keys_dissector,
                         (void *)flow,(void *)0,(unsigned short)0,0,0,flags);
}

#line 1381  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_end_pointer(struct sk_buff *skb)
{
  #line 1383 
  return skb->head + (unsigned long)skb->end;
}

#line 2065  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static bool skb_is_nonlinear(struct sk_buff *skb)
{
  #line 2067 
  return (_Bool)(skb->data_len != 0U);
}

#line 2102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void __skb_fill_page_desc(struct sk_buff *skb, int i, struct page *page, int off, int size)
{
  #line 2105 
  skb_frag_t *frag = & ((struct skb_shared_info *)skb_end_pointer(skb))->frags[i];
  #line 2112 
  frag->bv_page = page;
  #line 2113 
  frag->bv_offset = (unsigned int)off;
  #line 2114 
  skb_frag_size_set(frag,(unsigned int)size);
  #line 2116 
  page = compound_head(page);
  #line 2117 
  if ((int)page_is_pfmemalloc(page) != 0) 
                                          #line 2118 
                                          skb->pfmemalloc = (unsigned char)1U;
  #line 2119 
  return;
}

#line 2135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_fill_page_desc(struct sk_buff *skb, int i, struct page *page, int off, int size)
{
  #line 2138 
  __skb_fill_page_desc(skb,i,page,off,size);
  #line 2139 
  ((struct skb_shared_info *)skb_end_pointer(skb))->nr_frags = (unsigned char)((unsigned int)((unsigned char)i) + 1U);
  #line 2140 
  return;
}

#line 2151  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_tail_pointer(struct sk_buff *skb)
{
  #line 2153 
  return skb->head + (unsigned long)skb->tail;
}

#line 2190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void *__skb_put(struct sk_buff *skb, unsigned int len)
{
  #line 2192 
  void *tmp = skb_tail_pointer(skb);
  #line 2193 
  if ((long)((int)skb_is_nonlinear(skb) != 0) != 0L) {
    #line 2194 
    ldv_inline_asm();
    #line 2195 
    ldv_inline_asm();
    #line 2196 
    ldv_inline_asm();
    #line 2193 
    ;
  }
  #line 2194 
  skb->tail += len;
  #line 2195 
  skb->len += len;
  #line 2196 
  return tmp;
}

#line 2338  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_reserve(struct sk_buff *skb, int len)
{
  #line 2340 
  skb->data += (unsigned long)len;
  #line 2341 
  skb->tail += (unsigned int)len;
  #line 2342 
  return;
}

#line 2762 
#line 2762 
struct sk_buff *__netdev_alloc_skb(struct net_device *, unsigned int, gfp_t);
#line 2778  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static struct sk_buff *netdev_alloc_skb(struct net_device *dev, unsigned int length)
{
  #line 2781 
  return __netdev_alloc_skb(dev,length,2592U);
}

#line 4287  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_record_rx_queue(struct sk_buff *skb, u16 rx_queue)
{
  #line 4289 
  skb->queue_mapping = (unsigned short)((unsigned int)rx_queue + 1U);
  #line 4290 
  return;
}

#line 4467  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_checksum_none_assert(struct sk_buff *skb)
{
  #line 4469 
  return;
}

#line 2203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void *netdev_priv(struct net_device *dev)
{
  #line 2205 
  return (void *)((char *)dev + 3328UL);
}

#line 3662 
#line 3662 
int netif_receive_skb(struct sk_buff *);
#line 3667 
#line 3667 
struct sk_buff *napi_get_frags(struct napi_struct *);
#line 3668 
#line 3668 
gro_result_t napi_gro_frags(struct napi_struct *);
#line 4750 
#line 4750 
void netdev_err(struct net_device *, char * , ...);
#line 4756 
#line 4756 
void netdev_info(struct net_device *, char * , ...);
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
#line 32 
__be16 eth_type_trans(struct sk_buff *, struct net_device *);
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_multicast_ether_addr(u8 *addr)
{
  #line 119 
  u32 a = *((u32 *)addr);
  #line 126 
  return (_Bool)((a & 1U) != 0U);
}

#line 421  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iommu.h"
#line 421 
bool iommu_present(struct bus_type *);
#line 949  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
#line 949 
extern struct bus_type pci_bus_type;
#line 113  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/busy_poll.h"
__inline static void skb_mark_napi_id(struct sk_buff *skb, struct napi_struct *napi)
{
  #line 117 
  skb->__anonCompField_sk_buff_94.napi_id = napi->napi_id;
  #line 118 
  return;
}

#line 152  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/filter.h"
__inline static void ef4_filter_init_rx(struct ef4_filter_spec *spec, enum ef4_filter_priority priority, enum ef4_filter_flags flags, unsigned int rxq_id)
{
  #line 157 
  memset((void *)spec,0,64UL);
  #line 158 
  spec->priority = (unsigned int)priority;
  #line 159 
  spec->flags = (unsigned int)((unsigned int)((unsigned char)flags) | 8U);
  #line 160 
  spec->rss_context = 4294967295U;
  #line 161 
  spec->dmaq_id = (unsigned int)rxq_id;
  #line 162 
  return;
}

#line 1167  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/net_driver.h"
__inline static struct ef4_channel *ef4_get_channel(struct ef4_nic *efx, unsigned int index)
{
  #line 1170 
  return efx->channel[index];
}

#line 1240  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/net_driver.h"
__inline static struct ef4_rx_queue *ef4_channel_get_rx_queue(struct ef4_channel *channel)
{
  #line 1243 
  return & channel->rx_queue;
}

#line 1256  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/net_driver.h"
__inline static struct ef4_channel *ef4_rx_queue_channel(struct ef4_rx_queue *rx_queue)
{
  #line 1258 
  void *__mptr;
  #line 1258 
  __mptr = (void *)rx_queue;
  #line 1258 
  return ((struct ef4_channel *)(__mptr + 18446744073709551056U));
}

#line 1261  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/net_driver.h"
__inline static int ef4_rx_queue_index(struct ef4_rx_queue *rx_queue)
{
  #line 1263 
  return ef4_rx_queue_channel(rx_queue)->channel;
}

#line 1269  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/net_driver.h"
__inline static struct ef4_rx_buffer *ef4_rx_buffer(struct ef4_rx_queue *rx_queue, unsigned int index)
{
  #line 1272 
  return rx_queue->buffer + (unsigned long)index;
}

#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.h"
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/rx.c"
void ef4_rx_config_page_split(struct ef4_nic *efx);
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.h"
#line 679  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/rx.c"
int ef4_probe_rx_queue(struct ef4_rx_queue *rx_queue);
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.h"
#line 812  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/rx.c"
void ef4_remove_rx_queue(struct ef4_rx_queue *rx_queue);
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.h"
#line 732  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/rx.c"
void ef4_init_rx_queue(struct ef4_rx_queue *rx_queue);
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.h"
#line 773  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/rx.c"
void ef4_fini_rx_queue(struct ef4_rx_queue *rx_queue);
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.h"
#line 324  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/rx.c"
void ef4_fast_push_rx_descriptors(struct ef4_rx_queue *rx_queue, bool atomic);
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.h"
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/rx.c"
void ef4_rx_slow_fill(struct timer_list *t);
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.h"
#line 641  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/rx.c"
void __ef4_rx_packet(struct ef4_channel *channel);
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.h"
#line 523  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/rx.c"
void ef4_rx_packet(struct ef4_rx_queue *rx_queue, unsigned int index, unsigned int n_frags, unsigned int len, u16 flags);
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.h"
__inline static void ef4_rx_flush_packet(struct ef4_channel *channel)
{
  #line 51 
  if (channel->rx_pkt_n_frags != 0U) 
                                     #line 52 
                                     __ef4_rx_packet(channel);
  #line 53 
  return;
}

#line 54 
#line 54 
void ef4_schedule_slow_fill(struct ef4_rx_queue *rx_queue);
#line 164 
#line 830  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/rx.c"
int ef4_filter_rfs(struct net_device *net_dev, struct sk_buff *skb, u16 rxq_index, u32 flow_id);
#line 166  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.h"
#line 896  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/rx.c"
bool __ef4_filter_rfs_expire(struct ef4_nic *efx, unsigned int quota);
#line 178  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.h"
#line 944  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/rx.c"
bool ef4_filter_is_mc_recipient(struct ef4_filter_spec *spec);
#line 199  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.h"
#line 199 
void ef4_schedule_reset(struct ef4_nic *efx, enum reset_type type);
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/nic.h"
__inline static int ef4_nic_rev(struct ef4_nic *efx)
{
  #line 24 
  return (efx->type)->revision;
}

#line 333  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/nic.h"
__inline static int ef4_nic_probe_rx(struct ef4_rx_queue *rx_queue)
{
  #line 335 
  return (*(((rx_queue->efx)->type)->rx_probe))(rx_queue);
}

#line 337  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/nic.h"
__inline static void ef4_nic_init_rx(struct ef4_rx_queue *rx_queue)
{
  #line 339 
  (*(((rx_queue->efx)->type)->rx_init))(rx_queue);
  #line 340 
  return;
}

#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/nic.h"
__inline static void ef4_nic_remove_rx(struct ef4_rx_queue *rx_queue)
{
  #line 343 
  (*(((rx_queue->efx)->type)->rx_remove))(rx_queue);
  #line 344 
  return;
}

#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/nic.h"
__inline static void ef4_nic_notify_rx_desc(struct ef4_rx_queue *rx_queue)
{
  #line 347 
  (*(((rx_queue->efx)->type)->rx_write))(rx_queue);
  #line 348 
  return;
}

#line 349  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/nic.h"
__inline static void ef4_nic_generate_fill_event(struct ef4_rx_queue *rx_queue)
{
  #line 351 
  (*(((rx_queue->efx)->type)->rx_defer_refill))(rx_queue);
  #line 352 
  return;
}

#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/selftest.h"
#line 44 
void ef4_loopback_rx_packet(struct ef4_nic *efx, char *buf_ptr, int pkt_len);
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/rx.c"
static unsigned int rx_refill_threshold;
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/rx.c"
__inline static u8 *ef4_rx_buf_va(struct ef4_rx_buffer *buf)
{
  #line 59 
  ;
  #line 59 
  return (u8 *)(lowmem_page_address(buf->page) + (unsigned long)buf->page_offset);
}

#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/rx.c"
__inline static u32 ef4_rx_buf_hash(struct ef4_nic *efx, u8 *eh)
{
  #line 65 
  return __le32_to_cpup((__le32 *)(eh + (unsigned long)efx->rx_packet_hash_offset));
}

#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/rx.c"
__inline static struct ef4_rx_buffer *ef4_rx_buf_next(struct ef4_rx_queue *rx_queue, struct ef4_rx_buffer *rx_buf)
{
  #line 78 
  ;
  #line 78 
  if ((long)(ef4_rx_buffer(rx_queue,rx_queue->ptr_mask) == rx_buf) != 0L) {
    #line 79 
    return ef4_rx_buffer(rx_queue,0U);
  }
  else 
       #line 81 
       return rx_buf + 1U;
}

#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/rx.c"
__inline static void ef4_sync_rx_buffer(struct ef4_nic *efx, struct ef4_rx_buffer *rx_buf, unsigned int len)
{
  #line 88 
  dma_sync_single_for_cpu(& (efx->pci_dev)->dev,rx_buf->dma_addr,(unsigned long)len,(enum dma_data_direction)DMA_FROM_DEVICE);
  #line 89 
  return;
}

#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/rx.c"
void ef4_rx_config_page_split(struct ef4_nic *efx)
{
  #line 94 
  efx->rx_page_buf_step = ((efx->rx_dma_len + efx->rx_ip_align) + 63U) & 4294967232U;
  #line 96 
  if (efx->rx_buffer_order == 0U) 
                                  #line 96 
                                  efx->rx_bufs_per_page = 4032U / efx->rx_page_buf_step; else 
                                                                    #line 96 
                                                                    efx->rx_bufs_per_page = 1U;
  #line 99 
  efx->rx_buffer_truesize = (unsigned int)((4096UL << efx->rx_buffer_order) / (unsigned long)efx->rx_bufs_per_page);
  #line 101 
  efx->rx_pages_per_batch = (efx->rx_bufs_per_page + 7U) / efx->rx_bufs_per_page;
  #line 102 
  return;
}

#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/rx.c"
static struct page *ef4_reuse_page(struct ef4_rx_queue *rx_queue)
{
  #line 109 
  struct page *page;
  #line 110 
  struct ef4_rx_page_state *state;
  #line 111 
  unsigned int index;
  #line 108 
  struct ef4_nic *efx = rx_queue->efx;
  #line 113 
  index = rx_queue->page_remove & rx_queue->page_ptr_mask;
  #line 114 
  page = *(rx_queue->page_ring + (unsigned long)index);
  #line 115 
  if (page == (struct page *)0) 
                                #line 116 
                                return (struct page *)0;
  #line 118 
  *(rx_queue->page_ring + (unsigned long)index) = (struct page *)0;
  #line 120 
  if (rx_queue->page_remove != rx_queue->page_add) 
                                                   #line 121 
                                                   (rx_queue->page_remove) ++;
  #line 124 
  if (page_count(page) == 1) {
    #line 125 
    (rx_queue->page_recycle_count) ++;
    #line 126 
    return page;
  }
  else {
    #line 128 
    state = (struct ef4_rx_page_state *)lowmem_page_address(page);
    #line 129 
    dma_unmap_page_attrs(& (efx->pci_dev)->dev,state->dma_addr,4096UL << efx->rx_buffer_order,(enum dma_data_direction)DMA_FROM_DEVICE,0UL);
    #line 132 
    put_page(page);
    #line 133 
    (rx_queue->page_recycle_failed) ++;
  }
  #line 136 
  return (struct page *)0;
}

#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/rx.c"
static int ef4_init_rx_buffers(struct ef4_rx_queue *rx_queue, bool atomic)
{
  #line 152 
  struct ef4_rx_buffer *rx_buf;
  #line 153 
  struct page *page;
  #line 154 
  unsigned int page_offset;
  #line 155 
  struct ef4_rx_page_state *state;
  #line 156 
  dma_addr_t dma_addr;
  #line 157 
  unsigned int index;
  #line 157 
  unsigned int count;
  #line 151 
  struct ef4_nic *efx = rx_queue->efx;
  #line 159 
  count = 0U;
  #line 160 
  while (1) {
    #line 161 
    page = ef4_reuse_page(rx_queue);
    #line 162 
    if (page == (struct page *)0) {
      #line 163 
      unsigned int tmp;
      #line 163 
      ;
      #line 163 
      if ((int)atomic != 0) 
                            #line 163 
                            tmp = 264736U; else 
                                                #line 163 
                                                tmp = 265408U;
      #line 163 
      page = alloc_pages(tmp,efx->rx_buffer_order);
      #line 166 
      if ((long)(page == (struct page *)0) != 0L) 
                                                  #line 167 
                                                  return -12;
      #line 168 
      dma_addr = dma_map_page_attrs(& (efx->pci_dev)->dev,page,0UL,4096UL << efx->rx_buffer_order,(enum dma_data_direction)DMA_FROM_DEVICE,0UL);
      #line 172 
      if ((long)(dma_mapping_error(& (efx->pci_dev)->dev,dma_addr) != 0) != 0L) {
        #line 174 
        __free_pages(page,efx->rx_buffer_order);
        #line 175 
        return -5;
      }
      #line 177 
      state = (struct ef4_rx_page_state *)lowmem_page_address(page);
      #line 178 
      state->dma_addr = dma_addr;
    }
    else {
      #line 180 
      state = (struct ef4_rx_page_state *)lowmem_page_address(page);
      #line 181 
      dma_addr = state->dma_addr;
    }
    #line 184 
    dma_addr += 64ULL;
    #line 185 
    page_offset = 64U;
    #line 187 
    while (1) {
      #line 188 
      index = rx_queue->added_count & rx_queue->ptr_mask;
      #line 189 
      rx_buf = ef4_rx_buffer(rx_queue,index);
      #line 190 
      rx_buf->dma_addr = (unsigned long long)efx->rx_ip_align + dma_addr;
      #line 191 
      rx_buf->page = page;
      #line 192 
      rx_buf->page_offset = (unsigned short)((int)((unsigned short)efx->rx_ip_align) + (int)((unsigned short)page_offset));
      #line 193 
      rx_buf->len = (unsigned short)efx->rx_dma_len;
      #line 194 
      rx_buf->flags = (unsigned short)0U;
      #line 195 
      (rx_queue->added_count) ++;
      #line 196 
      get_page(page);
      #line 197 
      dma_addr = (unsigned long long)efx->rx_page_buf_step + dma_addr;
      #line 198 
      page_offset = efx->rx_page_buf_step + page_offset;
      #line 199 
      if (! (efx->rx_page_buf_step + page_offset <= 4096U)) 
                                                            #line 187 
                                                            break;
    }
    #line 201 
    rx_buf->flags = (unsigned short)1U;
    #line 202 
    count ++;
    #line 202 
    ;
    #line 202 
    if (! (count < efx->rx_pages_per_batch)) 
                                             #line 160 
                                             break;
  }
  #line 204 
  return 0;
}

#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/rx.c"
static void ef4_unmap_rx_buffer(struct ef4_nic *efx, struct ef4_rx_buffer *rx_buf)
{
  #line 213 
  struct page *page = rx_buf->page;
  #line 215 
  if (page != (struct page *)0) {
    #line 216 
    struct ef4_rx_page_state *state = lowmem_page_address(page);
    #line 217 
    dma_unmap_page_attrs(& (efx->pci_dev)->dev,state->dma_addr,4096UL << efx->rx_buffer_order,(enum dma_data_direction)DMA_FROM_DEVICE,0UL);
  }
  #line 219 
  return;
}

#line 224  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/rx.c"
static void ef4_free_rx_buffers(struct ef4_rx_queue *rx_queue, struct ef4_rx_buffer *rx_buf, unsigned int num_bufs)
{
  #line 228 
  while (1) {
    #line 229 
    if (rx_buf->page != (struct page *)0) {
      #line 230 
      put_page(rx_buf->page);
      #line 231 
      rx_buf->page = (struct page *)0;
    }
    #line 233 
    rx_buf = ef4_rx_buf_next(rx_queue,rx_buf);
    #line 234 
    num_bufs --;
    #line 234 
    if (! (num_bufs != 0U)) 
                            #line 228 
                            break;
  }
  #line 235 
  return;
}

#line 241  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/rx.c"
static void ef4_recycle_rx_page(struct ef4_channel *channel, struct ef4_rx_buffer *rx_buf)
{
  #line 247 
  unsigned int index;
  #line 244 
  struct page *page = rx_buf->page;
  #line 245 
  struct ef4_rx_queue *rx_queue = ef4_channel_get_rx_queue(channel);
  #line 246 
  struct ef4_nic *efx = rx_queue->efx;
  #line 250 
  if (((int)rx_buf->flags & 1) == 0) 
                                     #line 251 
                                     return;
  #line 253 
  index = rx_queue->page_add & rx_queue->page_ptr_mask;
  #line 254 
  if (*(rx_queue->page_ring + (unsigned long)index) == (struct page *)0) {
    #line 255 
    unsigned int read_index = rx_queue->page_remove & rx_queue->page_ptr_mask;
    #line 262 
    if (read_index == index) 
                             #line 263 
                             (rx_queue->page_remove) ++;
    #line 264 
    *(rx_queue->page_ring + (unsigned long)index) = page;
    #line 265 
    (rx_queue->page_add) ++;
    #line 266 
    return;
  }
  #line 268 
  (rx_queue->page_recycle_full) ++;
  #line 269 
  ef4_unmap_rx_buffer(efx,rx_buf);
  #line 270 
  put_page(rx_buf->page);
  #line 271 
  return;
}

#line 273  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/rx.c"
static void ef4_fini_rx_buffer(struct ef4_rx_queue *rx_queue, struct ef4_rx_buffer *rx_buf)
{
  #line 277 
  if (rx_buf->page != (struct page *)0) 
                                        #line 278 
                                        put_page(rx_buf->page);
  #line 281 
  if (((int)rx_buf->flags & 1) != 0) {
    #line 282 
    ef4_unmap_rx_buffer(rx_queue->efx,rx_buf);
    #line 283 
    ef4_free_rx_buffers(rx_queue,rx_buf,1U);
  }
  #line 285 
  rx_buf->page = (struct page *)0;
  #line 286 
  return;
}

#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/rx.c"
static void ef4_recycle_rx_pages(struct ef4_channel *channel, struct ef4_rx_buffer *rx_buf, unsigned int n_frags)
{
  #line 293 
  struct ef4_rx_queue *rx_queue = ef4_channel_get_rx_queue(channel);
  #line 295 
  while (1) {
    #line 296 
    ef4_recycle_rx_page(channel,rx_buf);
    #line 297 
    rx_buf = ef4_rx_buf_next(rx_queue,rx_buf);
    #line 298 
    n_frags --;
    #line 298 
    if (! (n_frags != 0U)) 
                           #line 295 
                           break;
  }
  #line 299 
  return;
}

#line 301  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/rx.c"
static void ef4_discard_rx_packet(struct ef4_channel *channel, struct ef4_rx_buffer *rx_buf, unsigned int n_frags)
{
  #line 305 
  struct ef4_rx_queue *rx_queue = ef4_channel_get_rx_queue(channel);
  #line 307 
  ef4_recycle_rx_pages(channel,rx_buf,n_frags);
  #line 309 
  ef4_free_rx_buffers(rx_queue,rx_buf,n_frags);
  #line 310 
  return;
}

#line 324  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/rx.c"
void ef4_fast_push_rx_descriptors(struct ef4_rx_queue *rx_queue, bool atomic)
{
  #line 327 
  unsigned int fill_level;
  #line 327 
  unsigned int batch_size;
  #line 328 
  int space;
  #line 326 
  struct ef4_nic *efx = rx_queue->efx;
  #line 328 
  int rc = 0;
  #line 330 
  if (! rx_queue->refill_enabled) 
                                  #line 331 
                                  return;
  #line 334 
  fill_level = rx_queue->added_count - rx_queue->removed_count;
  #line 336 
  if (rx_queue->fast_fill_trigger <= fill_level) 
                                                 #line 337 
                                                 goto out;
  #line 340 
  if ((long)(rx_queue->min_fill > fill_level) != 0L) 
    #line 341 
    if (fill_level != 0U) 
                          #line 342 
                          rx_queue->min_fill = fill_level;
  #line 345 
  batch_size = efx->rx_pages_per_batch * efx->rx_bufs_per_page;
  #line 346 
  space = (int)(rx_queue->max_fill - fill_level);
  #line 356 
  while (1) {
    #line 357 
    rc = ef4_init_rx_buffers(rx_queue,(_Bool)((bool)((int)atomic) != 0));
    #line 358 
    if ((long)(rc != 0) != 0L) {
      #line 360 
      if (rx_queue->added_count == rx_queue->removed_count) 
                                                            #line 361 
                                                            ef4_schedule_slow_fill(rx_queue);
      #line 362 
      goto out;
    }
    #line 364 
    space = (int)((unsigned int)space - batch_size);
    #line 364 
    ;
    #line 364 
    if (! ((unsigned int)space >= batch_size)) 
                                               #line 356 
                                               break;
  }
  #line 371 
  out: 
       #line 371 
  ;
  #line 372 
  if (rx_queue->notified_count != rx_queue->added_count) 
                                                         #line 373 
                                                         ef4_nic_notify_rx_desc(rx_queue);
  #line 374 
  return;
}

#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/rx.c"
void ef4_rx_slow_fill(struct timer_list *t)
{
  #line 378 
  void *__mptr;
  #line 378 
  __mptr = (void *)t;
  #line 378 
  struct ef4_rx_queue *rx_queue = ((struct ef4_rx_queue *)(__mptr + 18446744073709551472U));
  #line 381 
  ef4_nic_generate_fill_event(rx_queue);
  #line 382 
  (rx_queue->slow_fill_count) ++;
  #line 383 
  return;
}

#line 385  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/rx.c"
static void ef4_rx_packet__check_len(struct ef4_rx_queue *rx_queue, struct ef4_rx_buffer *rx_buf, int len)
{
  #line 389 
  struct ef4_nic *efx = rx_queue->efx;
  #line 390 
  unsigned int max_len = (unsigned int)rx_buf->len - (efx->type)->rx_buffer_padding;
  #line 392 
  if ((long)((unsigned int)len <= max_len) != 0L) 
                                                  #line 393 
                                                  return;
  #line 398 
  rx_buf->flags = (unsigned short)((unsigned int)rx_buf->flags | 4U);
  #line 400 
  if ((int)rx_buf->len < len) {
    #line 400 
    if (ef4_nic_rev(efx) <= 1) {
      #line 401 
      if (net_ratelimit() != 0) 
        #line 402 
        if ((efx->msg_enable & 64U) != 0U) {
          #line 402 
          ;
          #line 402 
          ;
          #line 402 
          ;
          #line 402 
          ;
          #line 402 
          netdev_err(efx->net_dev,(char *)" RX queue %d seriously overlength ",ef4_rx_queue_index(rx_queue),len,max_len,(efx->type)->rx_buffer_padding);
        }
      #line 407 
      ef4_schedule_reset(efx,(enum reset_type)RESET_TYPE_RX_RECOVERY);
    }
    else 
         #line 400 
         goto _LAND;
  }
  else {
    #line 400 
    _LAND: 
    #line 409 
    if (net_ratelimit() != 0) 
      #line 410 
      if ((efx->msg_enable & 64U) != 0U) {
        #line 410 
        ;
        #line 410 
        ;
        #line 410 
        ;
        #line 410 
        netdev_err(efx->net_dev,(char *)" RX queue %d overlength RX event ",ef4_rx_queue_index(rx_queue),len,max_len);
      }
  }
  #line 416 
  (ef4_rx_queue_channel(rx_queue)->n_rx_overlength) ++;
  #line 417 
  return;
}

#line 423  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/rx.c"
static void ef4_rx_packet_gro(struct ef4_channel *channel, struct ef4_rx_buffer *rx_buf, unsigned int n_frags, u8 *eh)
{
  #line 428 
  struct sk_buff *skb;
  #line 426 
  struct napi_struct *napi = & channel->napi_str;
  #line 427 
  struct ef4_nic *efx = channel->efx;
  #line 430 
  skb = napi_get_frags(napi);
  #line 431 
  if ((long)(skb == (struct sk_buff *)0) != 0L) {
    #line 432 
    struct ef4_rx_queue *rx_queue;
    #line 434 
    rx_queue = ef4_channel_get_rx_queue(channel);
    #line 435 
    ef4_free_rx_buffers(rx_queue,rx_buf,n_frags);
    #line 436 
    return;
  }
  #line 439 
  if (((efx->net_dev)->features & 274877906944ULL) != 0ULL) {
    #line 440 
    ;
    #line 440 
    skb_set_hash(skb,ef4_rx_buf_hash(efx,eh),(enum pkt_hash_types)PKT_HASH_TYPE_L3);
  }
  #line 442 
  skb->ip_summed = (unsigned char)((unsigned int)((int)rx_buf->flags >> 1) & 1U);
  #line 445 
  while (1) {
    #line 446 
    ;
    #line 446 
    ;
    #line 446 
    ;
    #line 446 
    ;
    #line 446 
    skb_fill_page_desc(skb,(int)((struct skb_shared_info *)skb_end_pointer(skb))->nr_frags,rx_buf->page,(int)rx_buf->page_offset,(int)rx_buf->len);
    #line 449 
    rx_buf->page = (struct page *)0;
    #line 450 
    skb->len += (unsigned int)rx_buf->len;
    #line 451 
    ;
    #line 451 
    if ((unsigned int)((struct skb_shared_info *)skb_end_pointer(skb))->nr_frags == n_frags) 
      #line 452 
      break;
    #line 454 
    rx_buf = ef4_rx_buf_next(& channel->rx_queue,rx_buf);
  }
  #line 457 
  skb->data_len = skb->len;
  #line 458 
  skb->truesize += efx->rx_buffer_truesize * n_frags;
  #line 460 
  skb_record_rx_queue(skb,(unsigned short)((int)((unsigned short)channel->rx_queue.core_index)));
  #line 462 
  napi_gro_frags(napi);
  #line 463 
  return;
}

#line 466  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/rx.c"
static struct sk_buff *ef4_rx_mk_skb(struct ef4_channel *channel, struct ef4_rx_buffer *rx_buf, unsigned int n_frags, u8 *eh, int hdr_len)
{
  #line 472 
  struct sk_buff *skb;
  #line 471 
  struct ef4_nic *efx = channel->efx;
  #line 475 
  skb = netdev_alloc_skb(efx->net_dev,(efx->rx_ip_align + efx->rx_prefix_size) + (unsigned int)hdr_len);
  #line 478 
  if ((long)(skb == (struct sk_buff *)0) != 0L) {
    #line 479 
    atomic_inc(& efx->n_rx_noskb_drops);
    #line 480 
    return (struct sk_buff *)0;
  }
  #line 485 
  memcpy((void *)(skb->data + (unsigned long)efx->rx_ip_align),(void *)(eh + - efx->rx_prefix_size),(unsigned long)(efx->rx_prefix_size + (unsigned int)hdr_len));
  #line 487 
  skb_reserve(skb,(int)(efx->rx_ip_align + efx->rx_prefix_size));
  #line 488 
  __skb_put(skb,(unsigned int)hdr_len);
  #line 491 
  if ((int)rx_buf->len > hdr_len) {
    #line 492 
    rx_buf->page_offset = (unsigned short)((int)rx_buf->page_offset + (int)((unsigned short)hdr_len));
    #line 493 
    rx_buf->len = (unsigned short)((int)rx_buf->len - (int)((unsigned short)hdr_len));
    #line 495 
    while (1) {
      #line 496 
      ;
      #line 496 
      ;
      #line 496 
      ;
      #line 496 
      ;
      #line 496 
      skb_fill_page_desc(skb,(int)((struct skb_shared_info *)skb_end_pointer(skb))->nr_frags,rx_buf->page,(int)rx_buf->page_offset,(int)rx_buf->len);
      #line 499 
      rx_buf->page = (struct page *)0;
      #line 500 
      skb->len += (unsigned int)rx_buf->len;
      #line 501 
      skb->data_len += (unsigned int)rx_buf->len;
      #line 502 
      ;
      #line 502 
      if ((unsigned int)((struct skb_shared_info *)skb_end_pointer(skb))->nr_frags == n_frags) 
        #line 503 
        break;
      #line 505 
      rx_buf = ef4_rx_buf_next(& channel->rx_queue,rx_buf);
    }
  }
  else {
    #line 508 
    __free_pages(rx_buf->page,efx->rx_buffer_order);
    #line 509 
    rx_buf->page = (struct page *)0;
    #line 510 
    n_frags = 0U;
  }
  #line 513 
  skb->truesize += efx->rx_buffer_truesize * n_frags;
  #line 516 
  skb->protocol = eth_type_trans(skb,efx->net_dev);
  #line 518 
  skb_mark_napi_id(skb,& channel->napi_str);
  #line 520 
  return skb;
}

#line 523  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/rx.c"
void ef4_rx_packet(struct ef4_rx_queue *rx_queue, unsigned int index, unsigned int n_frags, unsigned int len, u16 flags)
{
  #line 528 
  struct ef4_rx_buffer *rx_buf;
  #line 526 
  struct ef4_nic *efx = rx_queue->efx;
  #line 527 
  struct ef4_channel *channel = ef4_rx_queue_channel(rx_queue);
  #line 530 
  (rx_queue->rx_packets) ++;
  #line 532 
  rx_buf = ef4_rx_buffer(rx_queue,index);
  #line 533 
  rx_buf->flags = (unsigned short)((int)rx_buf->flags | (int)flags);
  #line 536 
  if (n_frags == 1U) {
    #line 537 
    if (((int)flags & 128) == 0) 
                                 #line 538 
                                 ef4_rx_packet__check_len(rx_queue,rx_buf,(int)len);
  }
  else 
    #line 539 
    if ((((long)(n_frags > 6U) != 0L || (long)((n_frags + 4294967295U) * efx->rx_dma_len >= len) != 0L) || (long)(efx->rx_dma_len * n_frags < len) != 0L) || (long)(! efx->rx_scatter) != 0L) {
      {
        #line 546 
        int __ret_warn_on = (len != 0U || ((int)rx_buf->flags & 4) == 0) != 0;
        #line 546 
        if ((long)(__ret_warn_on != 0) != 0L) {
          #line 547 
          ldv_inline_asm();
          #line 548 
          ldv_inline_asm();
        }
        #line 546 
        long tmp_2 = (long)(__ret_warn_on != 0);
      }
      #line 547 
      rx_buf->flags = (unsigned short)((unsigned int)rx_buf->flags | 4U);
    }
  #line 560 
  if ((long)(((int)rx_buf->flags & 4) != 0) != 0L) {
    #line 561 
    ef4_rx_flush_packet(channel);
    #line 562 
    ef4_discard_rx_packet(channel,rx_buf,n_frags);
    #line 563 
    return;
  }
  #line 566 
  if (n_frags == 1U && ((int)flags & 128) == 0) 
                                                #line 567 
                                                rx_buf->len = (unsigned short)len;
  #line 572 
  ef4_sync_rx_buffer(efx,rx_buf,(unsigned int)rx_buf->len);
  #line 577 
  __builtin_prefetch((void const *)((void *)ef4_rx_buf_va(rx_buf)));
  #line 579 
  rx_buf->page_offset = (unsigned short)((int)rx_buf->page_offset + (int)((unsigned short)efx->rx_prefix_size));
  #line 580 
  rx_buf->len = (unsigned short)((int)rx_buf->len - (int)((unsigned short)efx->rx_prefix_size));
  #line 582 
  if (n_frags > 1U) {
    #line 586 
    unsigned int tail_frags = n_frags + 4294967295U;
    #line 588 
    while (1) {
      #line 589 
      rx_buf = ef4_rx_buf_next(rx_queue,rx_buf);
      #line 590 
      tail_frags --;
      #line 590 
      if (tail_frags == 0U) 
                            #line 591 
                            break;
      #line 592 
      ef4_sync_rx_buffer(efx,rx_buf,efx->rx_dma_len);
    }
    #line 594 
    rx_buf->len = (unsigned short)((int)((unsigned short)len) - (int)((unsigned short)(n_frags + 4294967295U)) * (int)((unsigned short)efx->rx_dma_len));
    #line 595 
    ef4_sync_rx_buffer(efx,rx_buf,(unsigned int)rx_buf->len);
  }
  #line 599 
  rx_buf = ef4_rx_buffer(rx_queue,index);
  #line 600 
  ef4_recycle_rx_pages(channel,rx_buf,n_frags);
  #line 605 
  ef4_rx_flush_packet(channel);
  #line 606 
  channel->rx_pkt_n_frags = n_frags;
  #line 607 
  channel->rx_pkt_index = index;
  #line 608 
  return;
}

#line 610  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/rx.c"
static void ef4_rx_deliver(struct ef4_channel *channel, u8 *eh, struct ef4_rx_buffer *rx_buf, unsigned int n_frags)
{
  #line 615 
  int tmp;
  #line 615 
  unsigned short __UNIQUE_ID___x542;
  #line 614 
  struct sk_buff *skb;
  {
    #line 615 
    __UNIQUE_ID___x542 = rx_buf->len;
    #line 615 
    unsigned short __UNIQUE_ID___y543 = (unsigned short)128U;
    #line 615 
    if ((int)__UNIQUE_ID___x542 < (int)__UNIQUE_ID___y543) 
                                                           #line 615 
                                                           tmp = (int)__UNIQUE_ID___x542; else 
                                                                    #line 615 
                                                                    tmp = (int)__UNIQUE_ID___y543;
    }
  #line 615 
  u16 hdr_len = (unsigned short)tmp;
  #line 617 
  skb = ef4_rx_mk_skb(channel,rx_buf,n_frags,eh,(int)hdr_len);
  #line 618 
  if ((long)(skb == (struct sk_buff *)0) != 0L) {
    #line 619 
    struct ef4_rx_queue *rx_queue;
    #line 621 
    rx_queue = ef4_channel_get_rx_queue(channel);
    #line 622 
    ef4_free_rx_buffers(rx_queue,rx_buf,n_frags);
    #line 623 
    return;
  }
  #line 625 
  skb_record_rx_queue(skb,(unsigned short)((int)((unsigned short)channel->rx_queue.core_index)));
  #line 628 
  skb_checksum_none_assert(skb);
  #line 629 
  if ((long)(((int)rx_buf->flags & 2) != 0) != 0L) 
                                                   #line 630 
                                                   skb->ip_summed = (unsigned char)1U;
  #line 632 
  if ((channel->type)->receive_skb != (bool (*)(struct ef4_channel *, struct sk_buff *))0) {
    #line 633 
    if ((int)(*((channel->type)->receive_skb))(channel,skb) != 0) 
                                                                  #line 634 
                                                                  return;
  }
  #line 637 
  netif_receive_skb(skb);
  #line 638 
  return;
}

#line 641  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/rx.c"
void __ef4_rx_packet(struct ef4_channel *channel)
{
  #line 643 
  struct ef4_nic *efx = channel->efx;
  #line 644 
  struct ef4_rx_buffer *rx_buf = ef4_rx_buffer(& channel->rx_queue,channel->rx_pkt_index);
  #line 646 
  u8 *eh = ef4_rx_buf_va(rx_buf);
  #line 651 
  if (((int)rx_buf->flags & 128) != 0) 
                                       #line 652 
                                       rx_buf->len = __le16_to_cpup((__le16 *)(eh + (unsigned long)efx->rx_packet_len_offset));
  #line 658 
  if ((long)(efx->loopback_selftest != (void *)0) != 0L) {
    #line 659 
    struct ef4_rx_queue *rx_queue;
    #line 661 
    ef4_loopback_rx_packet(efx,(char *)eh,(int)rx_buf->len);
    #line 662 
    rx_queue = ef4_channel_get_rx_queue(channel);
    #line 663 
    ef4_free_rx_buffers(rx_queue,rx_buf,channel->rx_pkt_n_frags);
    #line 665 
    goto out;
  }
  #line 668 
  if ((long)(((efx->net_dev)->features & 549755813888ULL) == 0ULL) != 0L) 
    #line 669 
    rx_buf->flags = (unsigned short)((unsigned int)rx_buf->flags & 65533U);
  #line 671 
  if (((int)rx_buf->flags & 64) != 0 && (channel->type)->receive_skb == (bool (*)(struct ef4_channel *, struct sk_buff *))0) 
    #line 672 
    ef4_rx_packet_gro(channel,rx_buf,channel->rx_pkt_n_frags,eh); else 
                                                                    #line 674 
                                                                    ef4_rx_deliver(channel,eh,rx_buf,channel->rx_pkt_n_frags);
  #line 675 
  out: 
       #line 675 
  ;
  #line 676 
  channel->rx_pkt_n_frags = 0U;
  #line 677 
  return;
}

#line 679  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/rx.c"
int ef4_probe_rx_queue(struct ef4_rx_queue *rx_queue)
{
  #line 686 
  unsigned long tmp_67;
  #line 686 
  unsigned long __UNIQUE_ID___x544;
  #line 682 
  unsigned int entries;
  #line 683 
  int rc;
  #line 681 
  struct ef4_nic *efx = rx_queue->efx;
  {
    #line 686 
    unsigned long tmp_34;
    #line 686 
    unsigned long tmp_35;
    #line 686 
    unsigned long tmp_36;
    #line 686 
    unsigned long tmp_37;
    #line 686 
    unsigned long tmp_38;
    #line 686 
    unsigned long tmp_39;
    #line 686 
    unsigned long tmp_40;
    #line 686 
    unsigned long tmp_41;
    #line 686 
    unsigned long tmp_42;
    #line 686 
    unsigned long tmp_43;
    #line 686 
    unsigned long tmp_44;
    #line 686 
    unsigned long tmp_45;
    #line 686 
    unsigned long tmp_46;
    #line 686 
    unsigned long tmp_47;
    #line 686 
    unsigned long tmp_48;
    #line 686 
    unsigned long tmp_49;
    #line 686 
    unsigned long tmp_50;
    #line 686 
    unsigned long tmp_51;
    #line 686 
    unsigned long tmp_52;
    #line 686 
    unsigned long tmp_53;
    #line 686 
    unsigned long tmp_54;
    #line 686 
    unsigned long tmp_55;
    #line 686 
    unsigned long tmp_56;
    #line 686 
    unsigned long tmp_57;
    #line 686 
    unsigned long tmp_58;
    #line 686 
    unsigned long tmp_59;
    #line 686 
    unsigned long tmp_60;
    #line 686 
    unsigned long tmp_61;
    #line 686 
    unsigned long tmp;
    #line 686 
    unsigned long tmp_63;
    #line 686 
    unsigned long tmp_64;
    #line 686 
    unsigned long tmp_0;
    #line 686 
    unsigned long tmp_1;
    #line 686 
    unsigned long tmp_2;
    #line 686 
    unsigned long tmp_3;
    #line 686 
    unsigned long tmp_4;
    #line 686 
    unsigned long tmp_5;
    #line 686 
    unsigned long tmp_6;
    #line 686 
    unsigned long tmp_7;
    #line 686 
    unsigned long tmp_8;
    #line 686 
    unsigned long tmp_9;
    #line 686 
    unsigned long tmp_10;
    #line 686 
    unsigned long tmp_11;
    #line 686 
    unsigned long tmp_12;
    #line 686 
    unsigned long tmp_13;
    #line 686 
    unsigned long tmp_14;
    #line 686 
    unsigned long tmp_15;
    #line 686 
    unsigned long tmp_16;
    #line 686 
    unsigned long tmp_17;
    #line 686 
    unsigned long tmp_18;
    #line 686 
    unsigned long tmp_19;
    #line 686 
    unsigned long tmp_20;
    #line 686 
    unsigned long tmp_21;
    #line 686 
    unsigned long tmp_22;
    #line 686 
    unsigned long tmp_23;
    #line 686 
    unsigned long tmp_24;
    #line 686 
    unsigned long tmp_25;
    #line 686 
    unsigned long tmp_26;
    #line 686 
    unsigned long tmp_27;
    #line 686 
    unsigned long tmp_28;
    #line 686 
    unsigned long tmp_29;
    #line 686 
    unsigned long tmp_30;
    #line 686 
    unsigned long tmp_31;
    #line 686 
    unsigned long tmp_32;
    #line 686 
    unsigned long tmp_33;
    #line 686 
    unsigned long tmp_66;
    #line 686 
    if (0 != 0) {
      #line 686 
      if (efx->rxq_entries != 1U) {
        #line 686 
        if (0 != 0) {
          #line 686 
          if (efx->rxq_entries + 4294967295U > 1U) {
            #line 686 
            if (((unsigned long long)(efx->rxq_entries + 4294967295U) & 9223372036854775808ULL) == 0ULL) {
              #line 686 
              if (((unsigned long long)(efx->rxq_entries + 4294967295U) & 4611686018427387904ULL) == 0ULL) {
                #line 686 
                if (((unsigned long long)(efx->rxq_entries + 4294967295U) & 2305843009213693952ULL) == 0ULL) {
                  #line 686 
                  if (((unsigned long long)(efx->rxq_entries + 4294967295U) & 1152921504606846976ULL) == 0ULL) {
                    #line 686 
                    if (((unsigned long long)(efx->rxq_entries + 4294967295U) & 576460752303423488ULL) == 0ULL) {
                      #line 686 
                      if (((unsigned long long)(efx->rxq_entries + 4294967295U) & 288230376151711744ULL) == 0ULL) {
                        #line 686 
                        if (((unsigned long long)(efx->rxq_entries + 4294967295U) & 144115188075855872ULL) == 0ULL) {
                          #line 686 
                          if (((unsigned long long)(efx->rxq_entries + 4294967295U) & 72057594037927936ULL) == 0ULL) {
                            #line 686 
                            if (((unsigned long long)(efx->rxq_entries + 4294967295U) & 36028797018963968ULL) == 0ULL) {
                              #line 686 
                              if (((unsigned long long)(efx->rxq_entries + 4294967295U) & 18014398509481984ULL) == 0ULL) {
                                #line 686 
                                if (((unsigned long long)(efx->rxq_entries + 4294967295U) & 9007199254740992ULL) == 0ULL) {
                                  #line 686 
                                  if (((unsigned long long)(efx->rxq_entries + 4294967295U) & 4503599627370496ULL) == 0ULL) {
                                    #line 686 
                                    if (((unsigned long long)(efx->rxq_entries + 4294967295U) & 2251799813685248ULL) == 0ULL) {
                                      #line 686 
                                      if (((unsigned long long)(efx->rxq_entries + 4294967295U) & 1125899906842624ULL) == 0ULL) {
                                        #line 686 
                                        if (((unsigned long long)(efx->rxq_entries + 4294967295U) & 562949953421312ULL) == 0ULL) {
                                          #line 686 
                                          if (((unsigned long long)(efx->rxq_entries + 4294967295U) & 281474976710656ULL) == 0ULL) {
                                            #line 686 
                                            if (((unsigned long long)(efx->rxq_entries + 4294967295U) & 140737488355328ULL) == 0ULL) {
                                              #line 686 
                                              if (((unsigned long long)(efx->rxq_entries + 4294967295U) & 70368744177664ULL) == 0ULL) {
                                                #line 686 
                                                if (((unsigned long long)(efx->rxq_entries + 4294967295U) & 35184372088832ULL) == 0ULL) {
                                                  #line 686 
                                                  if (((unsigned long long)(efx->rxq_entries + 4294967295U) & 17592186044416ULL) == 0ULL) {
                                                    #line 686 
                                                    if (((unsigned long long)(efx->rxq_entries + 4294967295U) & 8796093022208ULL) == 0ULL) {
                                                      #line 686 
                                                      if (((unsigned long long)(efx->rxq_entries + 4294967295U) & 4398046511104ULL) == 0ULL) {
                                                        #line 686 
                                                        if (((unsigned long long)(efx->rxq_entries + 4294967295U) & 2199023255552ULL) == 0ULL) {
                                                          #line 686 
                                                          if (((unsigned long long)(efx->rxq_entries + 4294967295U) & 1099511627776ULL) == 0ULL) {
                                                            #line 686 
                                                            if (((unsigned long long)(efx->rxq_entries + 4294967295U) & 549755813888ULL) == 0ULL) {
                                                              #line 686 
                                                              if (((unsigned long long)(efx->rxq_entries + 4294967295U) & 274877906944ULL) == 0ULL) {
                                                                #line 686 
                                                                if (((unsigned long long)(efx->rxq_entries + 4294967295U) & 137438953472ULL) == 0ULL) {
                                                                  #line 686 
                                                                  if (
                                                                    ((unsigned long long)(efx->rxq_entries + 4294967295U) & 68719476736ULL) == 0ULL) {
                                                                    #line 686 
                                                                    if (
                                                                    ((unsigned long long)(efx->rxq_entries + 4294967295U) & 34359738368ULL) == 0ULL) {
                                                                    #line 686 
                                                                    if (
                                                                    ((unsigned long long)(efx->rxq_entries + 4294967295U) & 17179869184ULL) == 0ULL) {
                                                                    #line 686 
                                                                    if (
                                                                    ((unsigned long long)(efx->rxq_entries + 4294967295U) & 8589934592ULL) == 0ULL) {
                                                                    #line 686 
                                                                    if (
                                                                    ((unsigned long long)(efx->rxq_entries + 4294967295U) & 4294967296ULL) == 0ULL) {
                                                                    #line 686 
                                                                    if (
                                                                    ((unsigned long long)(efx->rxq_entries + 4294967295U) & 2147483648ULL) == 0ULL) {
                                                                    #line 686 
                                                                    if (
                                                                    ((unsigned long long)(efx->rxq_entries + 4294967295U) & 1073741824ULL) == 0ULL) {
                                                                    #line 686 
                                                                    if (
                                                                    ((unsigned long long)(efx->rxq_entries + 4294967295U) & 536870912ULL) == 0ULL) {
                                                                    #line 686 
                                                                    if (
                                                                    ((unsigned long long)(efx->rxq_entries + 4294967295U) & 268435456ULL) == 0ULL) {
                                                                    #line 686 
                                                                    if (
                                                                    ((unsigned long long)(efx->rxq_entries + 4294967295U) & 134217728ULL) == 0ULL) {
                                                                    #line 686 
                                                                    if (
                                                                    ((unsigned long long)(efx->rxq_entries + 4294967295U) & 67108864ULL) == 0ULL) {
                                                                    #line 686 
                                                                    if (
                                                                    ((unsigned long long)(efx->rxq_entries + 4294967295U) & 33554432ULL) == 0ULL) {
                                                                    #line 686 
                                                                    if (
                                                                    ((unsigned long long)(efx->rxq_entries + 4294967295U) & 16777216ULL) == 0ULL) {
                                                                    #line 686 
                                                                    if (
                                                                    ((unsigned long long)(efx->rxq_entries + 4294967295U) & 8388608ULL) == 0ULL) {
                                                                    #line 686 
                                                                    if (
                                                                    ((unsigned long long)(efx->rxq_entries + 4294967295U) & 4194304ULL) == 0ULL) {
                                                                    #line 686 
                                                                    if (
                                                                    ((unsigned long long)(efx->rxq_entries + 4294967295U) & 2097152ULL) == 0ULL) {
                                                                    #line 686 
                                                                    if (
                                                                    ((unsigned long long)(efx->rxq_entries + 4294967295U) & 1048576ULL) == 0ULL) {
                                                                    #line 686 
                                                                    if (
                                                                    ((unsigned long long)(efx->rxq_entries + 4294967295U) & 524288ULL) == 0ULL) {
                                                                    #line 686 
                                                                    if (
                                                                    ((unsigned long long)(efx->rxq_entries + 4294967295U) & 262144ULL) == 0ULL) {
                                                                    #line 686 
                                                                    if (
                                                                    ((unsigned long long)(efx->rxq_entries + 4294967295U) & 131072ULL) == 0ULL) {
                                                                    #line 686 
                                                                    if (
                                                                    ((unsigned long long)(efx->rxq_entries + 4294967295U) & 65536ULL) == 0ULL) {
                                                                    #line 686 
                                                                    if (
                                                                    ((unsigned long long)(efx->rxq_entries + 4294967295U) & 32768ULL) == 0ULL) {
                                                                    #line 686 
                                                                    if (
                                                                    ((unsigned long long)(efx->rxq_entries + 4294967295U) & 16384ULL) == 0ULL) {
                                                                    #line 686 
                                                                    if (
                                                                    ((unsigned long long)(efx->rxq_entries + 4294967295U) & 8192ULL) == 0ULL) {
                                                                    #line 686 
                                                                    if (
                                                                    ((unsigned long long)(efx->rxq_entries + 4294967295U) & 4096ULL) == 0ULL) {
                                                                    #line 686 
                                                                    if (
                                                                    ((unsigned long long)(efx->rxq_entries + 4294967295U) & 2048ULL) == 0ULL) {
                                                                    #line 686 
                                                                    if (
                                                                    ((unsigned long long)(efx->rxq_entries + 4294967295U) & 1024ULL) == 0ULL) {
                                                                    #line 686 
                                                                    if (
                                                                    ((unsigned long long)(efx->rxq_entries + 4294967295U) & 512ULL) == 0ULL) {
                                                                    #line 686 
                                                                    if (
                                                                    ((unsigned long long)(efx->rxq_entries + 4294967295U) & 256ULL) == 0ULL) {
                                                                    #line 686 
                                                                    if (
                                                                    ((unsigned long long)(efx->rxq_entries + 4294967295U) & 128ULL) == 0ULL) {
                                                                    #line 686 
                                                                    if (
                                                                    ((unsigned long long)(efx->rxq_entries + 4294967295U) & 64ULL) == 0ULL) {
                                                                    #line 686 
                                                                    if (
                                                                    ((unsigned long long)(efx->rxq_entries + 4294967295U) & 32ULL) == 0ULL) {
                                                                    #line 686 
                                                                    if (
                                                                    ((unsigned long long)(efx->rxq_entries + 4294967295U) & 16ULL) == 0ULL) {
                                                                    #line 686 
                                                                    if (
                                                                    ((unsigned long long)(efx->rxq_entries + 4294967295U) & 8ULL) == 0ULL) {
                                                                    #line 686 
                                                                    if (
                                                                    ((unsigned long long)(efx->rxq_entries + 4294967295U) & 4ULL) != 0ULL) 
                                                                    #line 686 
                                                                    tmp = 8UL; else 
                                                                    #line 686 
                                                                    tmp = 4UL;
                                                                    #line 686 
                                                                    tmp_0 = tmp;
                                                                    }
                                                                    else 
                                                                    #line 686 
                                                                    tmp_0 = 16UL;
                                                                    #line 686 
                                                                    tmp_1 = tmp_0;
                                                                    }
                                                                    else 
                                                                    #line 686 
                                                                    tmp_1 = 32UL;
                                                                    #line 686 
                                                                    tmp_2 = tmp_1;
                                                                    }
                                                                    else 
                                                                    #line 686 
                                                                    tmp_2 = 64UL;
                                                                    #line 686 
                                                                    tmp_3 = tmp_2;
                                                                    }
                                                                    else 
                                                                    #line 686 
                                                                    tmp_3 = 128UL;
                                                                    #line 686 
                                                                    tmp_4 = tmp_3;
                                                                    }
                                                                    else 
                                                                    #line 686 
                                                                    tmp_4 = 256UL;
                                                                    #line 686 
                                                                    tmp_5 = tmp_4;
                                                                    }
                                                                    else 
                                                                    #line 686 
                                                                    tmp_5 = 512UL;
                                                                    #line 686 
                                                                    tmp_6 = tmp_5;
                                                                    }
                                                                    else 
                                                                    #line 686 
                                                                    tmp_6 = 1024UL;
                                                                    #line 686 
                                                                    tmp_7 = tmp_6;
                                                                    }
                                                                    else 
                                                                    #line 686 
                                                                    tmp_7 = 2048UL;
                                                                    #line 686 
                                                                    tmp_8 = tmp_7;
                                                                    }
                                                                    else 
                                                                    #line 686 
                                                                    tmp_8 = 4096UL;
                                                                    #line 686 
                                                                    tmp_9 = tmp_8;
                                                                    }
                                                                    else 
                                                                    #line 686 
                                                                    tmp_9 = 8192UL;
                                                                    #line 686 
                                                                    tmp_10 = tmp_9;
                                                                    }
                                                                    else 
                                                                    #line 686 
                                                                    tmp_10 = 16384UL;
                                                                    #line 686 
                                                                    tmp_11 = tmp_10;
                                                                    }
                                                                    else 
                                                                    #line 686 
                                                                    tmp_11 = 32768UL;
                                                                    #line 686 
                                                                    tmp_12 = tmp_11;
                                                                    }
                                                                    else 
                                                                    #line 686 
                                                                    tmp_12 = 65536UL;
                                                                    #line 686 
                                                                    tmp_13 = tmp_12;
                                                                    }
                                                                    else 
                                                                    #line 686 
                                                                    tmp_13 = 131072UL;
                                                                    #line 686 
                                                                    tmp_14 = tmp_13;
                                                                    }
                                                                    else 
                                                                    #line 686 
                                                                    tmp_14 = 262144UL;
                                                                    #line 686 
                                                                    tmp_15 = tmp_14;
                                                                    }
                                                                    else 
                                                                    #line 686 
                                                                    tmp_15 = 524288UL;
                                                                    #line 686 
                                                                    tmp_16 = tmp_15;
                                                                    }
                                                                    else 
                                                                    #line 686 
                                                                    tmp_16 = 1048576UL;
                                                                    #line 686 
                                                                    tmp_17 = tmp_16;
                                                                    }
                                                                    else 
                                                                    #line 686 
                                                                    tmp_17 = 2097152UL;
                                                                    #line 686 
                                                                    tmp_18 = tmp_17;
                                                                    }
                                                                    else 
                                                                    #line 686 
                                                                    tmp_18 = 4194304UL;
                                                                    #line 686 
                                                                    tmp_19 = tmp_18;
                                                                    }
                                                                    else 
                                                                    #line 686 
                                                                    tmp_19 = 8388608UL;
                                                                    #line 686 
                                                                    tmp_20 = tmp_19;
                                                                    }
                                                                    else 
                                                                    #line 686 
                                                                    tmp_20 = 16777216UL;
                                                                    #line 686 
                                                                    tmp_21 = tmp_20;
                                                                    }
                                                                    else 
                                                                    #line 686 
                                                                    tmp_21 = 33554432UL;
                                                                    #line 686 
                                                                    tmp_22 = tmp_21;
                                                                    }
                                                                    else 
                                                                    #line 686 
                                                                    tmp_22 = 67108864UL;
                                                                    #line 686 
                                                                    tmp_23 = tmp_22;
                                                                    }
                                                                    else 
                                                                    #line 686 
                                                                    tmp_23 = 134217728UL;
                                                                    #line 686 
                                                                    tmp_24 = tmp_23;
                                                                    }
                                                                    else 
                                                                    #line 686 
                                                                    tmp_24 = 268435456UL;
                                                                    #line 686 
                                                                    tmp_25 = tmp_24;
                                                                    }
                                                                    else 
                                                                    #line 686 
                                                                    tmp_25 = 536870912UL;
                                                                    #line 686 
                                                                    tmp_26 = tmp_25;
                                                                    }
                                                                    else 
                                                                    #line 686 
                                                                    tmp_26 = 1073741824UL;
                                                                    #line 686 
                                                                    tmp_27 = tmp_26;
                                                                    }
                                                                    else 
                                                                    #line 686 
                                                                    tmp_27 = 2147483648UL;
                                                                    #line 686 
                                                                    tmp_28 = tmp_27;
                                                                    }
                                                                    else 
                                                                    #line 686 
                                                                    tmp_28 = 4294967296UL;
                                                                    #line 686 
                                                                    tmp_29 = tmp_28;
                                                                    }
                                                                    else 
                                                                    #line 686 
                                                                    tmp_29 = 8589934592UL;
                                                                    #line 686 
                                                                    tmp_30 = tmp_29;
                                                                    }
                                                                    else 
                                                                    #line 686 
                                                                    tmp_30 = 17179869184UL;
                                                                    #line 686 
                                                                    tmp_31 = tmp_30;
                                                                    }
                                                                    else 
                                                                    #line 686 
                                                                    tmp_31 = 34359738368UL;
                                                                    #line 686 
                                                                    tmp_32 = tmp_31;
                                                                    }
                                                                    else 
                                                                    #line 686 
                                                                    tmp_32 = 68719476736UL;
                                                                    #line 686 
                                                                    tmp_33 = tmp_32;
                                                                  }
                                                                  else 
                                                                    #line 686 
                                                                    tmp_33 = 137438953472UL;
                                                                  #line 686 
                                                                  tmp_34 = tmp_33;
                                                                }
                                                                else 
                                                                  #line 686 
                                                                  tmp_34 = 274877906944UL;
                                                                #line 686 
                                                                tmp_35 = tmp_34;
                                                              }
                                                              else 
                                                                   #line 686 
                                                                   tmp_35 = 549755813888UL;
                                                              #line 686 
                                                              tmp_36 = tmp_35;
                                                            }
                                                            else 
                                                                 #line 686 
                                                                 tmp_36 = 1099511627776UL;
                                                            #line 686 
                                                            tmp_37 = tmp_36;
                                                          }
                                                          else 
                                                               #line 686 
                                                               tmp_37 = 2199023255552UL;
                                                          #line 686 
                                                          tmp_38 = tmp_37;
                                                        }
                                                        else 
                                                             #line 686 
                                                             tmp_38 = 4398046511104UL;
                                                        #line 686 
                                                        tmp_39 = tmp_38;
                                                      }
                                                      else 
                                                           #line 686 
                                                           tmp_39 = 8796093022208UL;
                                                      #line 686 
                                                      tmp_40 = tmp_39;
                                                    }
                                                    else 
                                                         #line 686 
                                                         tmp_40 = 17592186044416UL;
                                                    #line 686 
                                                    tmp_41 = tmp_40;
                                                  }
                                                  else 
                                                       #line 686 
                                                       tmp_41 = 35184372088832UL;
                                                  #line 686 
                                                  tmp_42 = tmp_41;
                                                }
                                                else 
                                                     #line 686 
                                                     tmp_42 = 70368744177664UL;
                                                #line 686 
                                                tmp_43 = tmp_42;
                                              }
                                              else 
                                                   #line 686 
                                                   tmp_43 = 140737488355328UL;
                                              #line 686 
                                              tmp_44 = tmp_43;
                                            }
                                            else 
                                                 #line 686 
                                                 tmp_44 = 281474976710656UL;
                                            #line 686 
                                            tmp_45 = tmp_44;
                                          }
                                          else 
                                               #line 686 
                                               tmp_45 = 562949953421312UL;
                                          #line 686 
                                          tmp_46 = tmp_45;
                                        }
                                        else 
                                             #line 686 
                                             tmp_46 = 1125899906842624UL;
                                        #line 686 
                                        tmp_47 = tmp_46;
                                      }
                                      else 
                                           #line 686 
                                           tmp_47 = 2251799813685248UL;
                                      #line 686 
                                      tmp_48 = tmp_47;
                                    }
                                    else 
                                         #line 686 
                                         tmp_48 = 4503599627370496UL;
                                    #line 686 
                                    tmp_49 = tmp_48;
                                  }
                                  else 
                                       #line 686 
                                       tmp_49 = 9007199254740992UL;
                                  #line 686 
                                  tmp_50 = tmp_49;
                                }
                                else 
                                     #line 686 
                                     tmp_50 = 18014398509481984UL;
                                #line 686 
                                tmp_51 = tmp_50;
                              }
                              else 
                                   #line 686 
                                   tmp_51 = 36028797018963968UL;
                              #line 686 
                              tmp_52 = tmp_51;
                            }
                            else 
                                 #line 686 
                                 tmp_52 = 72057594037927936UL;
                            #line 686 
                            tmp_53 = tmp_52;
                          }
                          else 
                               #line 686 
                               tmp_53 = 144115188075855872UL;
                          #line 686 
                          tmp_54 = tmp_53;
                        }
                        else 
                             #line 686 
                             tmp_54 = 288230376151711744UL;
                        #line 686 
                        tmp_55 = tmp_54;
                      }
                      else 
                           #line 686 
                           tmp_55 = 576460752303423488UL;
                      #line 686 
                      tmp_56 = tmp_55;
                    }
                    else 
                         #line 686 
                         tmp_56 = 1152921504606846976UL;
                    #line 686 
                    tmp_57 = tmp_56;
                  }
                  else 
                       #line 686 
                       tmp_57 = 2305843009213693952UL;
                  #line 686 
                  tmp_58 = tmp_57;
                }
                else 
                     #line 686 
                     tmp_58 = 4611686018427387904UL;
                #line 686 
                tmp_59 = tmp_58;
              }
              else 
                   #line 686 
                   tmp_59 = 9223372036854775808UL;
              #line 686 
              tmp_60 = tmp_59;
            }
            else 
                 #line 686 
                 tmp_60 = 0UL;
            #line 686 
            tmp_61 = tmp_60;
          }
          else 
               #line 686 
               tmp_61 = 2UL;
          #line 686 
          tmp_63 = tmp_61;
        }
        else {
          #line 686 
          tmp_63 = 1UL << (__ilog2_u32(efx->rxq_entries + 4294967295U) + 1);
        }
        #line 686 
        tmp_64 = tmp_63;
      }
      else 
           #line 686 
           tmp_64 = 1UL;
      #line 686 
      tmp_66 = tmp_64;
    }
    else 
         #line 686 
         tmp_66 = __roundup_pow_of_two((unsigned long)efx->rxq_entries);
    #line 686 
    __UNIQUE_ID___x544 = tmp_66;
    #line 686 
    unsigned long __UNIQUE_ID___y545 = 512UL;
    #line 686 
    if (__UNIQUE_ID___x544 > __UNIQUE_ID___y545) 
                                                 #line 686 
                                                 tmp_67 = __UNIQUE_ID___x544; else 
                                                                    #line 686 
                                                                    tmp_67 = __UNIQUE_ID___y545;
    }
  #line 686 
  entries = (unsigned int)tmp_67;
  #line 688 
  rx_queue->ptr_mask = entries + 4294967295U;
  #line 690 
  if ((efx->msg_enable & 2U) != 0U) {
    #line 690 
    bool branch;
    #line 690 
    struct _ddebug __UNIQUE_ID_ddebug546 = {.modname = (char *)"sfc_falcon", .function = (char *)"ef4_probe_rx_queue", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/rx.c", .format = (char *)"creating RX queue %d size %#x mask %#x\n", .lineno = (unsigned int)690U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 690 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug546.key.dd_key_false.key,(_Bool)0);
    #line 690 
    if ((long)((long)((int)branch != 0)) != 0L) {
      #line 690 
      ;
      #line 690 
      ;
      #line 690 
      ;
      #line 690 
      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug546,efx->net_dev,(char *)"creating RX queue %d size %#x mask %#x\n",ef4_rx_queue_index(rx_queue),efx->rxq_entries,rx_queue->ptr_mask);
    }
  }
  #line 696 
  rx_queue->buffer = (struct ef4_rx_buffer *)kcalloc((unsigned long)entries,24UL,3264U);
  #line 698 
  if (rx_queue->buffer == (struct ef4_rx_buffer *)0) 
                                                     #line 699 
                                                     return -12;
  #line 701 
  rc = ef4_nic_probe_rx(rx_queue);
  #line 702 
  if (rc != 0) {
    #line 703 
    kfree((void *)rx_queue->buffer);
    #line 704 
    rx_queue->buffer = (struct ef4_rx_buffer *)0;
  }
  #line 707 
  return rc;
}

#line 710  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/rx.c"
static void ef4_init_rx_recycle_ring(struct ef4_nic *efx, struct ef4_rx_queue *rx_queue)
{
  #line 713 
  unsigned int bufs_in_recycle_ring;
  #line 713 
  unsigned int page_ring_size;
  #line 719 
  if ((int)iommu_present(& pci_bus_type) != 0) 
                                               #line 720 
                                               bufs_in_recycle_ring = 4096U; else 
                                                                    #line 722 
                                                                    bufs_in_recycle_ring = 16U;
  #line 725 
  if (0 != 0) {
    #line 725 
    unsigned int tmp_47;
    #line 725 
    unsigned int tmp_15;
    #line 725 
    unsigned int tmp_16;
    #line 725 
    unsigned int tmp_48;
    #line 725 
    unsigned int tmp_49;
    #line 725 
    unsigned int tmp_17;
    #line 725 
    unsigned int tmp_18;
    #line 725 
    unsigned int tmp_50;
    #line 725 
    unsigned int tmp_51;
    #line 725 
    unsigned int tmp_19;
    #line 725 
    unsigned int tmp_20;
    #line 725 
    unsigned int tmp_52;
    #line 725 
    unsigned int tmp_53;
    #line 725 
    unsigned int tmp_21;
    #line 725 
    unsigned int tmp_22;
    #line 725 
    unsigned int tmp_54;
    #line 725 
    unsigned int tmp_55;
    #line 725 
    unsigned int tmp_23;
    #line 725 
    unsigned int tmp_24;
    #line 725 
    unsigned int tmp_56;
    #line 725 
    unsigned int tmp_57;
    #line 725 
    unsigned int tmp_25;
    #line 725 
    unsigned int tmp_26;
    #line 725 
    unsigned int tmp_58;
    #line 725 
    unsigned int tmp_59;
    #line 725 
    unsigned int tmp_27;
    #line 725 
    unsigned int tmp_28;
    #line 725 
    unsigned int tmp_60;
    #line 725 
    unsigned int tmp_61;
    #line 725 
    unsigned int tmp_29;
    #line 725 
    unsigned int tmp_30;
    #line 725 
    unsigned int tmp_62;
    #line 725 
    unsigned int tmp_31;
    #line 725 
    unsigned int tmp_64;
    #line 725 
    unsigned int tmp_0;
    #line 725 
    unsigned int tmp_32;
    #line 725 
    unsigned int tmp_33;
    #line 725 
    unsigned int tmp_1;
    #line 725 
    unsigned int tmp_2;
    #line 725 
    unsigned int tmp_34;
    #line 725 
    unsigned int tmp_35;
    #line 725 
    unsigned int tmp_3;
    #line 725 
    unsigned int tmp_4;
    #line 725 
    unsigned int tmp_36;
    #line 725 
    unsigned int tmp_37;
    #line 725 
    unsigned int tmp_5;
    #line 725 
    unsigned int tmp_6;
    #line 725 
    unsigned int tmp_38;
    #line 725 
    unsigned int tmp_39;
    #line 725 
    unsigned int tmp_7;
    #line 725 
    unsigned int tmp_8;
    #line 725 
    unsigned int tmp_40;
    #line 725 
    unsigned int tmp_41;
    #line 725 
    unsigned int tmp_9;
    #line 725 
    unsigned int tmp_10;
    #line 725 
    unsigned int tmp_42;
    #line 725 
    unsigned int tmp_43;
    #line 725 
    unsigned int tmp_11;
    #line 725 
    unsigned int tmp_12;
    #line 725 
    unsigned int tmp_44;
    #line 725 
    unsigned int tmp_45;
    #line 725 
    unsigned int tmp_13;
    #line 725 
    unsigned int tmp_14;
    #line 725 
    unsigned int tmp_46;
    #line 725 
    unsigned int tmp_65;
    #line 725 
    if (bufs_in_recycle_ring / efx->rx_bufs_per_page != 1U) {
      #line 725 
      if (0 != 0) {
        #line 725 
        if (bufs_in_recycle_ring / efx->rx_bufs_per_page + 4294967295U > 1U) {
          #line 725 
          if (((unsigned long long)(bufs_in_recycle_ring / efx->rx_bufs_per_page + 4294967295U) & 9223372036854775808ULL) == 0ULL) {
            #line 725 
            if (((unsigned long long)(bufs_in_recycle_ring / efx->rx_bufs_per_page + 4294967295U) & 4611686018427387904ULL) == 0ULL) {
              #line 725 
              if (((unsigned long long)(bufs_in_recycle_ring / efx->rx_bufs_per_page + 4294967295U) & 2305843009213693952ULL) == 0ULL) {
                #line 725 
                if (((unsigned long long)(bufs_in_recycle_ring / efx->rx_bufs_per_page + 4294967295U) & 1152921504606846976ULL) == 0ULL) {
                  #line 725 
                  if (((unsigned long long)(bufs_in_recycle_ring / efx->rx_bufs_per_page + 4294967295U) & 576460752303423488ULL) == 0ULL) {
                    #line 725 
                    if (((unsigned long long)(bufs_in_recycle_ring / efx->rx_bufs_per_page + 4294967295U) & 288230376151711744ULL) == 0ULL) {
                      #line 725 
                      if (((unsigned long long)(bufs_in_recycle_ring / efx->rx_bufs_per_page + 4294967295U) & 144115188075855872ULL) == 0ULL) {
                        #line 725 
                        if (((unsigned long long)(bufs_in_recycle_ring / efx->rx_bufs_per_page + 4294967295U) & 72057594037927936ULL) == 0ULL) {
                          #line 725 
                          if (((unsigned long long)(bufs_in_recycle_ring / efx->rx_bufs_per_page + 4294967295U) & 36028797018963968ULL) == 0ULL) {
                            #line 725 
                            if (((unsigned long long)(bufs_in_recycle_ring / efx->rx_bufs_per_page + 4294967295U) & 18014398509481984ULL) == 0ULL) {
                              #line 725 
                              if (((unsigned long long)(bufs_in_recycle_ring / efx->rx_bufs_per_page + 4294967295U) & 9007199254740992ULL) == 0ULL) {
                                #line 725 
                                if (((unsigned long long)(bufs_in_recycle_ring / efx->rx_bufs_per_page + 4294967295U) & 4503599627370496ULL) == 0ULL) {
                                  #line 725 
                                  if (((unsigned long long)(bufs_in_recycle_ring / efx->rx_bufs_per_page + 4294967295U) & 2251799813685248ULL) == 0ULL) {
                                    #line 725 
                                    if (((unsigned long long)(bufs_in_recycle_ring / efx->rx_bufs_per_page + 4294967295U) & 1125899906842624ULL) == 0ULL) {
                                      #line 725 
                                      if (((unsigned long long)(bufs_in_recycle_ring / efx->rx_bufs_per_page + 4294967295U) & 562949953421312ULL) == 0ULL) {
                                        #line 725 
                                        if (((unsigned long long)(bufs_in_recycle_ring / efx->rx_bufs_per_page + 4294967295U) & 281474976710656ULL) == 0ULL) {
                                          #line 725 
                                          if (((unsigned long long)(bufs_in_recycle_ring / efx->rx_bufs_per_page + 4294967295U) & 140737488355328ULL) == 0ULL) {
                                            #line 725 
                                            if (((unsigned long long)(bufs_in_recycle_ring / efx->rx_bufs_per_page + 4294967295U) & 70368744177664ULL) == 0ULL) {
                                              #line 725 
                                              if (((unsigned long long)(bufs_in_recycle_ring / efx->rx_bufs_per_page + 4294967295U) & 35184372088832ULL) == 0ULL) {
                                                #line 725 
                                                if (((unsigned long long)(bufs_in_recycle_ring / efx->rx_bufs_per_page + 4294967295U) & 17592186044416ULL) == 0ULL) {
                                                  #line 725 
                                                  if (((unsigned long long)(bufs_in_recycle_ring / efx->rx_bufs_per_page + 4294967295U) & 8796093022208ULL) == 0ULL) {
                                                    #line 725 
                                                    if (((unsigned long long)(bufs_in_recycle_ring / efx->rx_bufs_per_page + 4294967295U) & 4398046511104ULL) == 0ULL) {
                                                      #line 725 
                                                      if (((unsigned long long)(bufs_in_recycle_ring / efx->rx_bufs_per_page + 4294967295U) & 2199023255552ULL) == 0ULL) {
                                                        #line 725 
                                                        if (((unsigned long long)(bufs_in_recycle_ring / efx->rx_bufs_per_page + 4294967295U) & 1099511627776ULL) == 0ULL) {
                                                          #line 725 
                                                          if (((unsigned long long)(bufs_in_recycle_ring / efx->rx_bufs_per_page + 4294967295U) & 549755813888ULL) == 0ULL) {
                                                            #line 725 
                                                            if (((unsigned long long)(bufs_in_recycle_ring / efx->rx_bufs_per_page + 4294967295U) & 274877906944ULL) == 0ULL) {
                                                              #line 725 
                                                              if (((unsigned long long)(bufs_in_recycle_ring / efx->rx_bufs_per_page + 4294967295U) & 137438953472ULL) == 0ULL) {
                                                                #line 725 
                                                                if (((unsigned long long)(bufs_in_recycle_ring / efx->rx_bufs_per_page + 4294967295U) & 68719476736ULL) == 0ULL) {
                                                                  #line 725 
                                                                  if (
                                                                    ((unsigned long long)(bufs_in_recycle_ring / efx->rx_bufs_per_page + 4294967295U) & 34359738368ULL) == 0ULL) {
                                                                    #line 725 
                                                                    if (
                                                                    ((unsigned long long)(bufs_in_recycle_ring / efx->rx_bufs_per_page + 4294967295U) & 17179869184ULL) == 0ULL) {
                                                                    #line 725 
                                                                    if (
                                                                    ((unsigned long long)(bufs_in_recycle_ring / efx->rx_bufs_per_page + 4294967295U) & 8589934592ULL) == 0ULL) {
                                                                    #line 725 
                                                                    if (
                                                                    ((unsigned long long)(bufs_in_recycle_ring / efx->rx_bufs_per_page + 4294967295U) & 4294967296ULL) == 0ULL) {
                                                                    #line 725 
                                                                    if (
                                                                    ((unsigned long long)(bufs_in_recycle_ring / efx->rx_bufs_per_page + 4294967295U) & 2147483648ULL) == 0ULL) {
                                                                    #line 725 
                                                                    if (
                                                                    ((unsigned long long)(bufs_in_recycle_ring / efx->rx_bufs_per_page + 4294967295U) & 1073741824ULL) == 0ULL) {
                                                                    #line 725 
                                                                    if (
                                                                    ((unsigned long long)(bufs_in_recycle_ring / efx->rx_bufs_per_page + 4294967295U) & 536870912ULL) == 0ULL) {
                                                                    #line 725 
                                                                    if (
                                                                    ((unsigned long long)(bufs_in_recycle_ring / efx->rx_bufs_per_page + 4294967295U) & 268435456ULL) == 0ULL) {
                                                                    #line 725 
                                                                    if (
                                                                    ((unsigned long long)(bufs_in_recycle_ring / efx->rx_bufs_per_page + 4294967295U) & 134217728ULL) == 0ULL) {
                                                                    #line 725 
                                                                    if (
                                                                    ((unsigned long long)(bufs_in_recycle_ring / efx->rx_bufs_per_page + 4294967295U) & 67108864ULL) == 0ULL) {
                                                                    #line 725 
                                                                    if (
                                                                    ((unsigned long long)(bufs_in_recycle_ring / efx->rx_bufs_per_page + 4294967295U) & 33554432ULL) == 0ULL) {
                                                                    #line 725 
                                                                    if (
                                                                    ((unsigned long long)(bufs_in_recycle_ring / efx->rx_bufs_per_page + 4294967295U) & 16777216ULL) == 0ULL) {
                                                                    #line 725 
                                                                    if (
                                                                    ((unsigned long long)(bufs_in_recycle_ring / efx->rx_bufs_per_page + 4294967295U) & 8388608ULL) == 0ULL) {
                                                                    #line 725 
                                                                    if (
                                                                    ((unsigned long long)(bufs_in_recycle_ring / efx->rx_bufs_per_page + 4294967295U) & 4194304ULL) == 0ULL) {
                                                                    #line 725 
                                                                    if (
                                                                    ((unsigned long long)(bufs_in_recycle_ring / efx->rx_bufs_per_page + 4294967295U) & 2097152ULL) == 0ULL) {
                                                                    #line 725 
                                                                    if (
                                                                    ((unsigned long long)(bufs_in_recycle_ring / efx->rx_bufs_per_page + 4294967295U) & 1048576ULL) == 0ULL) {
                                                                    #line 725 
                                                                    if (
                                                                    ((unsigned long long)(bufs_in_recycle_ring / efx->rx_bufs_per_page + 4294967295U) & 524288ULL) == 0ULL) {
                                                                    #line 725 
                                                                    if (
                                                                    ((unsigned long long)(bufs_in_recycle_ring / efx->rx_bufs_per_page + 4294967295U) & 262144ULL) == 0ULL) {
                                                                    #line 725 
                                                                    if (
                                                                    ((unsigned long long)(bufs_in_recycle_ring / efx->rx_bufs_per_page + 4294967295U) & 131072ULL) == 0ULL) {
                                                                    #line 725 
                                                                    if (
                                                                    ((unsigned long long)(bufs_in_recycle_ring / efx->rx_bufs_per_page + 4294967295U) & 65536ULL) == 0ULL) {
                                                                    #line 725 
                                                                    if (
                                                                    ((unsigned long long)(bufs_in_recycle_ring / efx->rx_bufs_per_page + 4294967295U) & 32768ULL) == 0ULL) {
                                                                    #line 725 
                                                                    if (
                                                                    ((unsigned long long)(bufs_in_recycle_ring / efx->rx_bufs_per_page + 4294967295U) & 16384ULL) == 0ULL) {
                                                                    #line 725 
                                                                    if (
                                                                    ((unsigned long long)(bufs_in_recycle_ring / efx->rx_bufs_per_page + 4294967295U) & 8192ULL) == 0ULL) {
                                                                    #line 725 
                                                                    if (
                                                                    ((unsigned long long)(bufs_in_recycle_ring / efx->rx_bufs_per_page + 4294967295U) & 4096ULL) == 0ULL) {
                                                                    #line 725 
                                                                    if (
                                                                    ((unsigned long long)(bufs_in_recycle_ring / efx->rx_bufs_per_page + 4294967295U) & 2048ULL) == 0ULL) {
                                                                    #line 725 
                                                                    if (
                                                                    ((unsigned long long)(bufs_in_recycle_ring / efx->rx_bufs_per_page + 4294967295U) & 1024ULL) == 0ULL) {
                                                                    #line 725 
                                                                    if (
                                                                    ((unsigned long long)(bufs_in_recycle_ring / efx->rx_bufs_per_page + 4294967295U) & 512ULL) == 0ULL) {
                                                                    #line 725 
                                                                    if (
                                                                    ((unsigned long long)(bufs_in_recycle_ring / efx->rx_bufs_per_page + 4294967295U) & 256ULL) == 0ULL) {
                                                                    #line 725 
                                                                    if (
                                                                    ((unsigned long long)(bufs_in_recycle_ring / efx->rx_bufs_per_page + 4294967295U) & 128ULL) == 0ULL) {
                                                                    #line 725 
                                                                    if (
                                                                    ((unsigned long long)(bufs_in_recycle_ring / efx->rx_bufs_per_page + 4294967295U) & 64ULL) == 0ULL) {
                                                                    #line 725 
                                                                    if (
                                                                    ((unsigned long long)(bufs_in_recycle_ring / efx->rx_bufs_per_page + 4294967295U) & 32ULL) == 0ULL) {
                                                                    #line 725 
                                                                    if (
                                                                    ((unsigned long long)(bufs_in_recycle_ring / efx->rx_bufs_per_page + 4294967295U) & 16ULL) == 0ULL) {
                                                                    #line 725 
                                                                    if (
                                                                    ((unsigned long long)(bufs_in_recycle_ring / efx->rx_bufs_per_page + 4294967295U) & 8ULL) == 0ULL) {
                                                                    #line 725 
                                                                    if (
                                                                    ((unsigned long long)(bufs_in_recycle_ring / efx->rx_bufs_per_page + 4294967295U) & 4ULL) != 0ULL) 
                                                                    #line 725 
                                                                    tmp_0 = 8U; else 
                                                                    #line 725 
                                                                    tmp_0 = 4U;
                                                                    #line 725 
                                                                    tmp_1 = tmp_0;
                                                                    }
                                                                    else 
                                                                    #line 725 
                                                                    tmp_1 = 16U;
                                                                    #line 725 
                                                                    tmp_2 = tmp_1;
                                                                    }
                                                                    else 
                                                                    #line 725 
                                                                    tmp_2 = 32U;
                                                                    #line 725 
                                                                    tmp_3 = tmp_2;
                                                                    }
                                                                    else 
                                                                    #line 725 
                                                                    tmp_3 = 64U;
                                                                    #line 725 
                                                                    tmp_4 = tmp_3;
                                                                    }
                                                                    else 
                                                                    #line 725 
                                                                    tmp_4 = 128U;
                                                                    #line 725 
                                                                    tmp_5 = tmp_4;
                                                                    }
                                                                    else 
                                                                    #line 725 
                                                                    tmp_5 = 256U;
                                                                    #line 725 
                                                                    tmp_6 = tmp_5;
                                                                    }
                                                                    else 
                                                                    #line 725 
                                                                    tmp_6 = 512U;
                                                                    #line 725 
                                                                    tmp_7 = tmp_6;
                                                                    }
                                                                    else 
                                                                    #line 725 
                                                                    tmp_7 = 1024U;
                                                                    #line 725 
                                                                    tmp_8 = tmp_7;
                                                                    }
                                                                    else 
                                                                    #line 725 
                                                                    tmp_8 = 2048U;
                                                                    #line 725 
                                                                    tmp_9 = tmp_8;
                                                                    }
                                                                    else 
                                                                    #line 725 
                                                                    tmp_9 = 4096U;
                                                                    #line 725 
                                                                    tmp_10 = tmp_9;
                                                                    }
                                                                    else 
                                                                    #line 725 
                                                                    tmp_10 = 8192U;
                                                                    #line 725 
                                                                    tmp_11 = tmp_10;
                                                                    }
                                                                    else 
                                                                    #line 725 
                                                                    tmp_11 = 16384U;
                                                                    #line 725 
                                                                    tmp_12 = tmp_11;
                                                                    }
                                                                    else 
                                                                    #line 725 
                                                                    tmp_12 = 32768U;
                                                                    #line 725 
                                                                    tmp_13 = tmp_12;
                                                                    }
                                                                    else 
                                                                    #line 725 
                                                                    tmp_13 = 65536U;
                                                                    #line 725 
                                                                    tmp_14 = tmp_13;
                                                                    }
                                                                    else 
                                                                    #line 725 
                                                                    tmp_14 = 131072U;
                                                                    #line 725 
                                                                    tmp_15 = tmp_14;
                                                                    }
                                                                    else 
                                                                    #line 725 
                                                                    tmp_15 = 262144U;
                                                                    #line 725 
                                                                    tmp_16 = tmp_15;
                                                                    }
                                                                    else 
                                                                    #line 725 
                                                                    tmp_16 = 524288U;
                                                                    #line 725 
                                                                    tmp_17 = tmp_16;
                                                                    }
                                                                    else 
                                                                    #line 725 
                                                                    tmp_17 = 1048576U;
                                                                    #line 725 
                                                                    tmp_18 = tmp_17;
                                                                    }
                                                                    else 
                                                                    #line 725 
                                                                    tmp_18 = 2097152U;
                                                                    #line 725 
                                                                    tmp_19 = tmp_18;
                                                                    }
                                                                    else 
                                                                    #line 725 
                                                                    tmp_19 = 4194304U;
                                                                    #line 725 
                                                                    tmp_20 = tmp_19;
                                                                    }
                                                                    else 
                                                                    #line 725 
                                                                    tmp_20 = 8388608U;
                                                                    #line 725 
                                                                    tmp_21 = tmp_20;
                                                                    }
                                                                    else 
                                                                    #line 725 
                                                                    tmp_21 = 16777216U;
                                                                    #line 725 
                                                                    tmp_22 = tmp_21;
                                                                    }
                                                                    else 
                                                                    #line 725 
                                                                    tmp_22 = 33554432U;
                                                                    #line 725 
                                                                    tmp_23 = tmp_22;
                                                                    }
                                                                    else 
                                                                    #line 725 
                                                                    tmp_23 = 67108864U;
                                                                    #line 725 
                                                                    tmp_24 = tmp_23;
                                                                    }
                                                                    else 
                                                                    #line 725 
                                                                    tmp_24 = 134217728U;
                                                                    #line 725 
                                                                    tmp_25 = tmp_24;
                                                                    }
                                                                    else 
                                                                    #line 725 
                                                                    tmp_25 = 268435456U;
                                                                    #line 725 
                                                                    tmp_26 = tmp_25;
                                                                    }
                                                                    else 
                                                                    #line 725 
                                                                    tmp_26 = 536870912U;
                                                                    #line 725 
                                                                    tmp_27 = tmp_26;
                                                                    }
                                                                    else 
                                                                    #line 725 
                                                                    tmp_27 = 1073741824U;
                                                                    #line 725 
                                                                    tmp_28 = tmp_27;
                                                                    }
                                                                    else 
                                                                    #line 725 
                                                                    tmp_28 = 2147483648U;
                                                                    #line 725 
                                                                    tmp_29 = tmp_28;
                                                                    }
                                                                    else 
                                                                    #line 725 
                                                                    tmp_29 = 0U;
                                                                    #line 725 
                                                                    tmp_30 = tmp_29;
                                                                    }
                                                                    else 
                                                                    #line 725 
                                                                    tmp_30 = 0U;
                                                                    #line 725 
                                                                    tmp_31 = tmp_30;
                                                                    }
                                                                    else 
                                                                    #line 725 
                                                                    tmp_31 = 0U;
                                                                    #line 725 
                                                                    tmp_32 = tmp_31;
                                                                    }
                                                                    else 
                                                                    #line 725 
                                                                    tmp_32 = 0U;
                                                                    #line 725 
                                                                    tmp_33 = tmp_32;
                                                                  }
                                                                  else 
                                                                    #line 725 
                                                                    tmp_33 = 0U;
                                                                  #line 725 
                                                                  tmp_34 = tmp_33;
                                                                }
                                                                else 
                                                                  #line 725 
                                                                  tmp_34 = 0U;
                                                                #line 725 
                                                                tmp_35 = tmp_34;
                                                              }
                                                              else 
                                                                   #line 725 
                                                                   tmp_35 = 0U;
                                                              #line 725 
                                                              tmp_36 = tmp_35;
                                                            }
                                                            else 
                                                                 #line 725 
                                                                 tmp_36 = 0U;
                                                            #line 725 
                                                            tmp_37 = tmp_36;
                                                          }
                                                          else 
                                                               #line 725 
                                                               tmp_37 = 0U;
                                                          #line 725 
                                                          tmp_38 = tmp_37;
                                                        }
                                                        else 
                                                             #line 725 
                                                             tmp_38 = 0U;
                                                        #line 725 
                                                        tmp_39 = tmp_38;
                                                      }
                                                      else 
                                                           #line 725 
                                                           tmp_39 = 0U;
                                                      #line 725 
                                                      tmp_40 = tmp_39;
                                                    }
                                                    else 
                                                         #line 725 
                                                         tmp_40 = 0U;
                                                    #line 725 
                                                    tmp_41 = tmp_40;
                                                  }
                                                  else 
                                                       #line 725 
                                                       tmp_41 = 0U;
                                                  #line 725 
                                                  tmp_42 = tmp_41;
                                                }
                                                else 
                                                     #line 725 
                                                     tmp_42 = 0U;
                                                #line 725 
                                                tmp_43 = tmp_42;
                                              }
                                              else 
                                                   #line 725 
                                                   tmp_43 = 0U;
                                              #line 725 
                                              tmp_44 = tmp_43;
                                            }
                                            else 
                                                 #line 725 
                                                 tmp_44 = 0U;
                                            #line 725 
                                            tmp_45 = tmp_44;
                                          }
                                          else 
                                               #line 725 
                                               tmp_45 = 0U;
                                          #line 725 
                                          tmp_46 = tmp_45;
                                        }
                                        else 
                                             #line 725 
                                             tmp_46 = 0U;
                                        #line 725 
                                        tmp_47 = tmp_46;
                                      }
                                      else 
                                           #line 725 
                                           tmp_47 = 0U;
                                      #line 725 
                                      tmp_48 = tmp_47;
                                    }
                                    else 
                                         #line 725 
                                         tmp_48 = 0U;
                                    #line 725 
                                    tmp_49 = tmp_48;
                                  }
                                  else 
                                       #line 725 
                                       tmp_49 = 0U;
                                  #line 725 
                                  tmp_50 = tmp_49;
                                }
                                else 
                                     #line 725 
                                     tmp_50 = 0U;
                                #line 725 
                                tmp_51 = tmp_50;
                              }
                              else 
                                   #line 725 
                                   tmp_51 = 0U;
                              #line 725 
                              tmp_52 = tmp_51;
                            }
                            else 
                                 #line 725 
                                 tmp_52 = 0U;
                            #line 725 
                            tmp_53 = tmp_52;
                          }
                          else 
                               #line 725 
                               tmp_53 = 0U;
                          #line 725 
                          tmp_54 = tmp_53;
                        }
                        else 
                             #line 725 
                             tmp_54 = 0U;
                        #line 725 
                        tmp_55 = tmp_54;
                      }
                      else 
                           #line 725 
                           tmp_55 = 0U;
                      #line 725 
                      tmp_56 = tmp_55;
                    }
                    else 
                         #line 725 
                         tmp_56 = 0U;
                    #line 725 
                    tmp_57 = tmp_56;
                  }
                  else 
                       #line 725 
                       tmp_57 = 0U;
                  #line 725 
                  tmp_58 = tmp_57;
                }
                else 
                     #line 725 
                     tmp_58 = 0U;
                #line 725 
                tmp_59 = tmp_58;
              }
              else 
                   #line 725 
                   tmp_59 = 0U;
              #line 725 
              tmp_60 = tmp_59;
            }
            else 
                 #line 725 
                 tmp_60 = 0U;
            #line 725 
            tmp_61 = tmp_60;
          }
          else 
               #line 725 
               tmp_61 = 0U;
          #line 725 
          tmp_62 = tmp_61;
        }
        else 
             #line 725 
             tmp_62 = 2U;
        #line 725 
        tmp_64 = tmp_62;
      }
      else {
        #line 725 
        tmp_64 = (unsigned int)(1UL << (__ilog2_u32(bufs_in_recycle_ring / efx->rx_bufs_per_page + 4294967295U) + 1));
      }
      #line 725 
      tmp_65 = tmp_64;
    }
    else 
         #line 725 
         tmp_65 = 1U;
    #line 725 
    page_ring_size = tmp_65;
  }
  else {
    #line 725 
    page_ring_size = (unsigned int)__roundup_pow_of_two((unsigned long)(bufs_in_recycle_ring / efx->rx_bufs_per_page));
  }
  #line 727 
  rx_queue->page_ring = (struct page **)kcalloc((unsigned long)page_ring_size,8UL,3264U);
  #line 729 
  rx_queue->page_ptr_mask = page_ring_size + 4294967295U;
  #line 730 
  return;
}

#line 732  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/rx.c"
void ef4_init_rx_queue(struct ef4_rx_queue *rx_queue)
{
  #line 735 
  unsigned int max_fill;
  #line 735 
  unsigned int trigger;
  #line 735 
  unsigned int max_trigger;
  #line 734 
  struct ef4_nic *efx = rx_queue->efx;
  #line 737 
  if (((rx_queue->efx)->msg_enable & 1U) != 0U) {
    #line 737 
    bool branch;
    #line 737 
    struct _ddebug __UNIQUE_ID_ddebug547 = {.modname = (char *)"sfc_falcon", .function = (char *)"ef4_init_rx_queue", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/rx.c", .format = (char *)"initialising RX queue %d\n", .lineno = (unsigned int)737U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 737 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug547.key.dd_key_false.key,(_Bool)0);
    #line 737 
    if ((long)((long)((int)branch != 0)) != 0L) {
      #line 737 
      ;
      #line 737 
      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug547,(rx_queue->efx)->net_dev,(char *)"initialising RX queue %d\n",ef4_rx_queue_index(rx_queue));
    }
  }
  #line 741 
  rx_queue->added_count = 0U;
  #line 742 
  rx_queue->notified_count = 0U;
  #line 743 
  rx_queue->removed_count = 0U;
  #line 744 
  rx_queue->min_fill = 4294967295U;
  #line 745 
  ef4_init_rx_recycle_ring(efx,rx_queue);
  #line 747 
  rx_queue->page_remove = 0U;
  #line 748 
  rx_queue->page_add = rx_queue->page_ptr_mask + 1U;
  #line 749 
  rx_queue->page_recycle_count = 0U;
  #line 750 
  rx_queue->page_recycle_failed = 0U;
  #line 751 
  rx_queue->page_recycle_full = 0U;
  #line 754 
  max_fill = efx->rxq_entries + 4294967289U;
  #line 755 
  max_trigger = max_fill - efx->rx_pages_per_batch * efx->rx_bufs_per_page;
  #line 757 
  if (rx_refill_threshold != 0U) {
    #line 758 
    unsigned int __UNIQUE_ID___x548;
    #line 758 
    unsigned int tmp_1;
    {
      #line 758 
      __UNIQUE_ID___x548 = rx_refill_threshold;
      #line 758 
      unsigned int __UNIQUE_ID___y549 = 100U;
      #line 758 
      if (__UNIQUE_ID___x548 < __UNIQUE_ID___y549) 
                                                   #line 758 
                                                   tmp_1 = __UNIQUE_ID___x548; else 
                                                                    #line 758 
                                                                    tmp_1 = __UNIQUE_ID___y549;
      }
    #line 758 
    trigger = (tmp_1 * max_fill) / 100U;
    #line 759 
    if (trigger > max_trigger) 
                               #line 760 
                               trigger = max_trigger;
  }
  else 
       #line 762 
       trigger = max_trigger;
  #line 765 
  rx_queue->max_fill = max_fill;
  #line 766 
  rx_queue->fast_fill_trigger = trigger;
  #line 767 
  rx_queue->refill_enabled = (_Bool)1;
  #line 770 
  ef4_nic_init_rx(rx_queue);
  #line 771 
  return;
}

#line 773  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/rx.c"
void ef4_fini_rx_queue(struct ef4_rx_queue *rx_queue)
{
  #line 775 
  int i;
  #line 777 
  struct ef4_rx_buffer *rx_buf;
  #line 776 
  struct ef4_nic *efx = rx_queue->efx;
  #line 779 
  if (((rx_queue->efx)->msg_enable & 1U) != 0U) {
    #line 779 
    bool branch;
    #line 779 
    struct _ddebug __UNIQUE_ID_ddebug550 = {.modname = (char *)"sfc_falcon", .function = (char *)"ef4_fini_rx_queue", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/rx.c", .format = (char *)"shutting down RX queue %d\n", .lineno = (unsigned int)779U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 779 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug550.key.dd_key_false.key,(_Bool)0);
    #line 779 
    if ((long)((long)((int)branch != 0)) != 0L) {
      #line 779 
      ;
      #line 779 
      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug550,(rx_queue->efx)->net_dev,(char *)"shutting down RX queue %d\n",ef4_rx_queue_index(rx_queue));
    }
  }
  #line 782 
  cif_del_timer_sync(& rx_queue->slow_fill);
  #line 785 
  if (rx_queue->buffer != (struct ef4_rx_buffer *)0) {
    #line 786 
    i = (int)rx_queue->removed_count;
    #line 786 
    while (rx_queue->added_count > (unsigned int)i) {
      {
        #line 788 
        unsigned int index = rx_queue->ptr_mask & (unsigned int)i;
        #line 789 
        rx_buf = ef4_rx_buffer(rx_queue,index);
        #line 790 
        ef4_fini_rx_buffer(rx_queue,rx_buf);
      }
      #line 786 
      i ++;
    }
  }
  #line 795 
  i = 0;
  #line 795 
  while (rx_queue->page_ptr_mask >= (unsigned int)i) {
    {
      #line 797 
      struct ef4_rx_page_state *state;
      #line 796 
      struct page *page = *(rx_queue->page_ring + (unsigned long)i);
      #line 799 
      if (page == (struct page *)0) 
                                    #line 800 
                                    goto __Cont;
      #line 802 
      state = (struct ef4_rx_page_state *)lowmem_page_address(page);
      #line 803 
      dma_unmap_page_attrs(& (efx->pci_dev)->dev,state->dma_addr,4096UL << efx->rx_buffer_order,(enum dma_data_direction)DMA_FROM_DEVICE,0UL);
      #line 806 
      put_page(page);
    }
    #line 795 
    __Cont: 
            #line 795 
    i ++;
  }
  #line 808 
  kfree((void *)rx_queue->page_ring);
  #line 809 
  rx_queue->page_ring = (struct page **)0;
  #line 810 
  return;
}

#line 812  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/rx.c"
void ef4_remove_rx_queue(struct ef4_rx_queue *rx_queue)
{
  #line 814 
  if (((rx_queue->efx)->msg_enable & 1U) != 0U) {
    #line 814 
    bool branch;
    #line 814 
    struct _ddebug __UNIQUE_ID_ddebug551 = {.modname = (char *)"sfc_falcon", .function = (char *)"ef4_remove_rx_queue", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/rx.c", .format = (char *)"destroying RX queue %d\n", .lineno = (unsigned int)814U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 814 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug551.key.dd_key_false.key,(_Bool)0);
    #line 814 
    if ((long)((long)((int)branch != 0)) != 0L) {
      #line 814 
      ;
      #line 814 
      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug551,(rx_queue->efx)->net_dev,(char *)"destroying RX queue %d\n",ef4_rx_queue_index(rx_queue));
    }
  }
  #line 817 
  ef4_nic_remove_rx(rx_queue);
  #line 819 
  kfree((void *)rx_queue->buffer);
  #line 820 
  rx_queue->buffer = (struct ef4_rx_buffer *)0;
  #line 821 
  return;
}

#line 830  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/rx.c"
int ef4_filter_rfs(struct net_device *net_dev, struct sk_buff *skb, u16 rxq_index, u32 flow_id)
{
  #line 834 
  struct ef4_channel *channel;
  #line 835 
  struct ef4_filter_spec spec;
  #line 836 
  struct flow_keys fk;
  #line 837 
  int rc;
  #line 850 
  int tmp_1;
  #line 833 
  struct ef4_nic *efx = netdev_priv(net_dev);
  #line 839 
  if (flow_id == 4294967295U) 
                              #line 840 
                              return -22;
  #line 842 
  if (! skb_flow_dissect_flow_keys(skb,& fk,0U)) 
                                                 #line 843 
                                                 return -93;
  #line 845 
  if ((unsigned int)fk.basic.n_proto != 8U && (unsigned int)fk.basic.n_proto != 56710U) 
    #line 846 
    return -93;
  #line 847 
  if (((unsigned long)fk.control.flags & 1UL) != 0UL) 
                                                      #line 848 
                                                      return -93;
  #line 850 
  ;
  #line 850 
  if ((int)efx->rx_scatter != 0) 
                                 #line 850 
                                 tmp_1 = EF4_FILTER_FLAG_RX_SCATTER; else 
                                                                    #line 850 
                                                                    tmp_1 = 0;
  #line 850 
  ef4_filter_init_rx(& spec,(enum ef4_filter_priority)EF4_FILTER_PRI_HINT,(enum ef4_filter_flags)tmp_1,(unsigned int)rxq_index);
  #line 853 
  spec.match_flags = (unsigned int)619U;
  #line 857 
  spec.ether_type = fk.basic.n_proto;
  #line 858 
  spec.ip_proto = fk.basic.ip_proto;
  #line 860 
  if ((unsigned int)fk.basic.n_proto == 8U) {
    #line 861 
    spec.rem_host[0] = fk.addrs.__anonCompField_flow_dissector_key_addrs_75.v4addrs.src;
    #line 862 
    spec.loc_host[0] = fk.addrs.__anonCompField_flow_dissector_key_addrs_75.v4addrs.dst;
  }
  else {
    #line 864 
    memcpy((void *)(& spec.rem_host),(void *)(& fk.addrs.__anonCompField_flow_dissector_key_addrs_75.v6addrs.src),16UL);
    #line 865 
    memcpy((void *)(& spec.loc_host),(void *)(& fk.addrs.__anonCompField_flow_dissector_key_addrs_75.v6addrs.dst),16UL);
  }
  #line 868 
  spec.rem_port = fk.ports.__anonCompField_flow_dissector_key_ports_77.__anonCompField___anonunion_472_76.src;
  #line 869 
  spec.loc_port = fk.ports.__anonCompField_flow_dissector_key_ports_77.__anonCompField___anonunion_472_76.dst;
  #line 871 
  rc = (*((efx->type)->filter_rfs_insert))(efx,& spec);
  #line 872 
  if (rc < 0) 
              #line 873 
              return rc;
  #line 876 
  channel = ef4_get_channel(efx,(unsigned int)rxq_index);
  #line 877 
  *(channel->rps_flow_id + (unsigned long)rc) = flow_id;
  #line 878 
  (channel->rfs_filters_added) ++;
  #line 880 
  if ((unsigned int)spec.ether_type == 8U) {
    #line 881 
    if ((efx->msg_enable & 2048U) != 0U) {
      #line 881 
      unsigned short tmp_2;
      #line 881 
      unsigned short tmp_3;
      #line 881 
      char *tmp_4;
      #line 881 
      ;
      #line 881 
      ;
      #line 881 
      ;
      #line 881 
      tmp_2 = __builtin_bswap16((unsigned short)((int)spec.loc_port));
      #line 881 
      tmp_3 = __builtin_bswap16((unsigned short)((int)spec.rem_port));
      #line 881 
      if ((unsigned int)spec.ip_proto == 6U) 
                                             #line 881 
                                             tmp_4 = (char *)"TCP"; else 
                                                                    #line 881 
                                                                    tmp_4 = (char *)"UDP";
      #line 881 
      ;
      #line 881 
      netdev_info(efx->net_dev,(char *)"steering %s %pI4:%u:%pI4:%u to queue %u [flow %u filter %d]\n",tmp_4,(__be32 *)(& spec.rem_host),(int)tmp_3,(__be32 *)(& spec.loc_host),(int)tmp_2,(int)rxq_index,flow_id,rc);
    }
  }
  else 
    #line 887 
    if ((efx->msg_enable & 2048U) != 0U) {
      #line 887 
      unsigned short tmp_5;
      #line 887 
      unsigned short tmp_6;
      #line 887 
      char *tmp_7;
      #line 887 
      ;
      #line 887 
      ;
      #line 887 
      ;
      #line 887 
      tmp_5 = __builtin_bswap16((unsigned short)((int)spec.loc_port));
      #line 887 
      tmp_6 = __builtin_bswap16((unsigned short)((int)spec.rem_port));
      #line 887 
      if ((unsigned int)spec.ip_proto == 6U) 
                                             #line 887 
                                             tmp_7 = (char *)"TCP"; else 
                                                                    #line 887 
                                                                    tmp_7 = (char *)"UDP";
      #line 887 
      ;
      #line 887 
      netdev_info(efx->net_dev,(char *)"steering %s [%pI6]:%u:[%pI6]:%u to queue %u [flow %u filter %d]\n",tmp_7,(__be32 *)(& spec.rem_host),(int)tmp_6,(__be32 *)(& spec.loc_host),(int)tmp_5,(int)rxq_index,flow_id,rc);
    }
  #line 893 
  return rc;
}

#line 896  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/rx.c"
bool __ef4_filter_rfs_expire(struct ef4_nic *efx, unsigned int quota)
{
  #line 898 
  bool (*expire_one)(struct ef4_nic *, u32 , unsigned int );
  #line 899 
  unsigned int channel_idx;
  #line 899 
  unsigned int index;
  #line 899 
  unsigned int size;
  #line 900 
  u32 flow_id;
  #line 902 
  if (cif_spin_trylock_bh_filter_lock_of_ef4_nic(& efx->filter_lock) == 0) 
    #line 903 
    return (_Bool)0;
  #line 905 
  expire_one = (efx->type)->filter_rfs_expire_one;
  #line 906 
  channel_idx = efx->rps_expire_channel;
  #line 907 
  index = efx->rps_expire_index;
  #line 908 
  size = (efx->type)->max_rx_ip_filters;
  #line 909 
  while (1) {
    #line 909 
    unsigned int tmp_2;
    #line 909 
    tmp_2 = quota;
    #line 909 
    quota --;
    #line 909 
    ;
    #line 909 
    if (! (tmp_2 != 0U)) 
                         #line 909 
                         break;
    {
      #line 910 
      struct ef4_channel *channel = ef4_get_channel(efx,channel_idx);
      #line 911 
      flow_id = *(channel->rps_flow_id + (unsigned long)index);
      #line 913 
      if (flow_id != 4294967295U) {
        #line 913 
        if ((int)(*expire_one)(efx,flow_id,index) != 0) {
          #line 915 
          if ((efx->msg_enable & 2048U) != 0U) 
                                               #line 915 
                                               netdev_info(efx->net_dev,(char *)"expired filter %d [queue %u flow %u]\n",index,channel_idx,flow_id);
          #line 918 
          *(channel->rps_flow_id + (unsigned long)index) = 4294967295U;
        }
      }
      #line 920 
      index ++;
      #line 920 
      ;
      #line 920 
      if (index == size) {
        #line 921 
        channel_idx ++;
        #line 921 
        ;
        #line 921 
        if (channel_idx == efx->n_channels) 
                                            #line 922 
                                            channel_idx = 0U;
        #line 923 
        index = 0U;
      }
    }
  }
  #line 926 
  efx->rps_expire_channel = channel_idx;
  #line 927 
  efx->rps_expire_index = index;
  #line 929 
  cif_spin_unlock_bh_filter_lock_of_ef4_nic(& efx->filter_lock);
  #line 930 
  return (_Bool)1;
}

#line 944  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/rx.c"
bool ef4_filter_is_mc_recipient(struct ef4_filter_spec *spec)
{
  #line 946 
  if (((int)spec->flags & 8) == 0 || (unsigned int)spec->dmaq_id == 4095U) 
    #line 948 
    return (_Bool)0;
  #line 950 
  if (((int)spec->match_flags & 1040) != 0) {
    #line 951 
    if ((int)is_multicast_ether_addr((u8 *)(& spec->loc_mac)) != 0) 
                                                                    #line 953 
                                                                    return (_Bool)1;
  }
  #line 955 
  if (((int)spec->match_flags & 66) == 66) {
    #line 958 
    if ((unsigned int)spec->ether_type == 8U) {
      #line 958 
      if ((int)ipv4_is_multicast(spec->loc_host[0]) != 0) 
                                                          #line 960 
                                                          return (_Bool)1;
    }
    #line 961 
    if ((unsigned int)spec->ether_type == 56710U && (unsigned int)*((u8 *)(& spec->loc_host)) == 255U) 
      #line 963 
      return (_Bool)1;
  }
  #line 966 
  return (_Bool)0;
}

#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/rx.i.aux"
#line 95 
int emg_del_timer_sync(struct timer_list *arg0);
#line 186  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/rx.i.aux"
static void atomic_inc(atomic_t *v)
{
  #line 189 
  ldv_atomic_inc(v);
  #line 190 
  return;
}

#line 355  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/rx.i.aux"
static void *kcalloc(size_t n, size_t size, gfp_t flags)
{
  #line 358 
  return ldv_kcalloc(n,size,flags);
}

#line 817  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/rx.i.aux"
static int cif_del_timer_sync(struct timer_list *timer)
{
  #line 821 
  return emg_del_timer_sync(timer);
}

#line 825  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/rx.i.aux"
static int cif_spin_trylock_bh_filter_lock_of_ef4_nic(spinlock_t *lock)
{
  #line 829 
  ldv_func_ret_type ldv_func_res = spin_trylock_bh(lock);
  #line 831 
  int is_spin_held_by_another_thread = ldv_undef_int();
  #line 833 
  if (is_spin_held_by_another_thread != 0) 
                                           #line 836 
                                           return 0;
  else {
    #line 838 
    ldv_spin_model_lock((char *)"filter_lock_of_ef4_nic");
    #line 840 
    return 1;
  }
  #line 843 
  return ldv_func_res;
}

#line 847  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/rx.i.aux"
static void cif_spin_unlock_bh_filter_lock_of_ef4_nic(spinlock_t *lock)
{
  #line 850 
  ldv_spin_model_unlock((char *)"filter_lock_of_ef4_nic");
  #line 852 
  spin_unlock_bh(lock);
  #line 853 
  return;
}

#line 233  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static unsigned long __ffs(unsigned long word)
{
  #line 235 
  ldv_inline_asm();
  #line 238 
  return word;
}

#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/mdio_10g.i.aux"
#line 817 
static void cif_mutex_lock_mac_lock_of_ef4_nic(struct mutex *lock);
#line 29 
#line 29 
void ldv_mutex_model_lock(struct mutex *, char *);
#line 31 
#line 31 
void ldv_mutex_model_unlock(struct mutex *, char *);
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
#line 824  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/mdio_10g.i.aux"
static void cif_mutex_unlock_mac_lock_of_ef4_nic(struct mutex *lock);
#line 177  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
#line 177 
bool ethtool_convert_link_mode_to_legacy_u32(u32 *, unsigned long *);
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/delay.h"
#line 59 
void msleep(unsigned int);
#line 492  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mii.h"
__inline static u16 mii_advertise_flowctrl(int cap)
{
  #line 494 
  u16 adv = (unsigned short)0U;
  #line 496 
  if ((cap & 2) != 0) 
                      #line 497 
                      adv = (unsigned short)3072U;
  #line 498 
  if ((cap & 1) != 0) 
                      #line 499 
                      adv = (unsigned short)((unsigned int)adv ^ 2048U);
  #line 501 
  return adv;
}

#line 511  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mii.h"
__inline static u8 mii_resolve_flowctrl_fdx(u16 lcladv, u16 rmtadv)
{
  #line 513 
  u8 cap = (unsigned char)0U;
  #line 515 
  if ((((int)lcladv & (int)rmtadv) & 1024) != 0) 
                                                 #line 516 
                                                 cap = (unsigned char)3U;
  else 
    #line 517 
    if ((((int)lcladv & (int)rmtadv) & 2048) != 0) 
      #line 518 
      if (((int)lcladv & 1024) != 0) 
                                     #line 519 
                                     cap = (unsigned char)2U;
      else 
        #line 520 
        if (((int)rmtadv & 1024) != 0) 
                                       #line 521 
                                       cap = (unsigned char)1U;
  #line 524 
  return cap;
}

#line 141  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mdio.h"
#line 141 
int mdio_set_flag(struct mdio_if_info *, int, int, u16, int, bool);
#line 144 
#line 144 
int mdio45_links_ok(struct mdio_if_info *, u32);
#line 606  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/net_driver.h"
__inline static bool ef4_phy_mode_disabled(enum ef4_phy_mode mode)
{
  #line 608 
  return (_Bool)(((unsigned int)mode & 4294967294U) != 0U);
}

#line 249  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.h"
#line 249 
void ef4_link_set_advertising(struct ef4_nic *efx, u32 advertising);
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/mdio_10g.h"
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/mdio_10g.c"
unsigned int ef4_mdio_id_oui(u32 id);
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/mdio_10g.h"
__inline static int ef4_mdio_read(struct ef4_nic *efx, int devad, int addr)
{
  #line 24 
  return (*(efx->mdio.mdio_read))(efx->net_dev,efx->mdio.prtad,devad,
                               (unsigned short)((int)((unsigned short)addr)));
}

#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/mdio_10g.h"
__inline static void ef4_mdio_write(struct ef4_nic *efx, int devad, int addr, int value)
{
  #line 30 
  (*(efx->mdio.mdio_write))(efx->net_dev,efx->mdio.prtad,devad,(unsigned short)((int)((unsigned short)addr)),(unsigned short)((int)((unsigned short)value)));
  #line 31 
  return;
}

#line 64 
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/mdio_10g.c"
int ef4_mdio_reset_mmd(struct ef4_nic *port, int mmd, int spins, int spintime);
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/mdio_10g.h"
#line 113  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/mdio_10g.c"
int ef4_mdio_check_mmds(struct ef4_nic *efx, unsigned int mmd_mask);
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/mdio_10g.h"
#line 152  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/mdio_10g.c"
bool ef4_mdio_links_ok(struct ef4_nic *efx, unsigned int mmd_mask);
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/mdio_10g.h"
#line 178  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/mdio_10g.c"
void ef4_mdio_transmit_disable(struct ef4_nic *efx);
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/mdio_10g.h"
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/mdio_10g.c"
void ef4_mdio_phy_reconfigure(struct ef4_nic *efx);
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/mdio_10g.h"
#line 212  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/mdio_10g.c"
void ef4_mdio_set_mmds_lpower(struct ef4_nic *efx, int low_power, unsigned int mmd_mask);
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/mdio_10g.h"
#line 230  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/mdio_10g.c"
int ef4_mdio_set_link_ksettings(struct ef4_nic *efx, struct ethtool_link_ksettings *cmd);
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/mdio_10g.h"
#line 273  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/mdio_10g.c"
void ef4_mdio_an_reconfigure(struct ef4_nic *efx);
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/mdio_10g.h"
#line 296  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/mdio_10g.c"
u8 ef4_mdio_get_pause(struct ef4_nic *efx);
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/mdio_10g.h"
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/mdio_10g.c"
int ef4_mdio_wait_reset_mmds(struct ef4_nic *efx, unsigned int mmd_mask);
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/mdio_10g.h"
__inline static void ef4_mdio_set_flag(struct ef4_nic *efx, int devad, int addr, int mask, bool state)
{
  #line 102 
  mdio_set_flag(& efx->mdio,efx->mdio.prtad,devad,(unsigned short)((int)((unsigned short)addr)),mask,(_Bool)((bool)((int)state) != 0));
  #line 103 
  return;
}

#line 106 
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/mdio_10g.c"
int ef4_mdio_test_alive(struct ef4_nic *efx);
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/mdio_10g.c"
unsigned int ef4_mdio_id_oui(u32 id)
{
  #line 19 
  int i;
  #line 18 
  unsigned int oui = 0U;
  #line 24 
  i = 0;
  #line 24 
  while (i <= 21) {
    #line 25 
    if (((unsigned int)(1 << (i + 10)) & id) != 0U) 
                                                    #line 26 
                                                    oui = (unsigned int)(1 << (i ^ 7)) | oui;
    #line 24 
    i ++;
  }
  #line 28 
  return oui;
}

#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/mdio_10g.c"
int ef4_mdio_reset_mmd(struct ef4_nic *port, int mmd, int spins, int spintime)
{
  #line 34 
  u32 ctrl;
  #line 48 
  int tmp_0;
  #line 39 
  ef4_mdio_write(port,mmd,0,32768);
  #line 41 
  while (1) {
    {
      #line 42 
      msleep((unsigned int)spintime);
      #line 43 
      ctrl = (unsigned int)ef4_mdio_read(port,mmd,0);
      #line 44 
      spins --;
    }
    #line 45 
    if (! (spins != 0 && (ctrl & 32768U) != 0U)) 
                                                 #line 41 
                                                 break;
  }
  #line 48 
  if (spins != 0) 
                  #line 48 
                  tmp_0 = spins; else 
                                      #line 48 
                                      tmp_0 = -110;
  #line 48 
  return tmp_0;
}

#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/mdio_10g.c"
static int ef4_mdio_check_mmd(struct ef4_nic *efx, int mmd)
{
  #line 53 
  int status;
  #line 55 
  if (mmd != 7) {
    #line 57 
    status = ef4_mdio_read(efx,mmd,8);
    #line 58 
    if ((status & 49152) != 32768) {
      #line 59 
      if ((efx->msg_enable & 8192U) != 0U) 
                                           #line 59 
                                           netdev_err(efx->net_dev,(char *)"PHY MMD %d not responding.\n",mmd);
      #line 61 
      return -5;
    }
  }
  #line 65 
  return 0;
}

#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/mdio_10g.c"
int ef4_mdio_wait_reset_mmds(struct ef4_nic *efx, unsigned int mmd_mask)
{
  #line 77 
  int in_reset;
  #line 74 
  int spintime = 10;
  #line 75 
  int tries = 100;
  #line 76 
  int rc = 0;
  #line 79 
  while (tries != 0) {
    #line 82 
    int stat;
    #line 80 
    int mask = (int)mmd_mask;
    #line 81 
    int mmd = 0;
    #line 83 
    in_reset = 0;
    #line 84 
    while (mask != 0) {
      #line 85 
      if ((mask & 1) != 0) {
        #line 86 
        stat = ef4_mdio_read(efx,mmd,0);
        #line 87 
        if (stat < 0) {
          #line 88 
          if ((efx->msg_enable & 8192U) != 0U) 
                                               #line 88 
                                               netdev_err(efx->net_dev,(char *)"failed to read status of",mmd);
          #line 91 
          return -5;
        }
        #line 93 
        if ((stat & 32768) != 0) 
                                 #line 94 
                                 in_reset = (1 << mmd) | in_reset;
      }
      #line 96 
      mask >>= 1;
      #line 97 
      mmd ++;
    }
    #line 99 
    if (in_reset == 0) 
                       #line 100 
                       break;
    #line 101 
    tries --;
    #line 102 
    msleep(10U);
  }
  #line 104 
  if (in_reset != 0) {
    #line 105 
    if ((efx->msg_enable & 8192U) != 0U) 
                                         #line 105 
                                         netdev_err(efx->net_dev,(char *)"not all MMDs came out of reset in time.",in_reset);
    #line 108 
    rc = -110;
  }
  #line 110 
  return rc;
}

#line 113  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/mdio_10g.c"
int ef4_mdio_check_mmds(struct ef4_nic *efx, unsigned int mmd_mask)
{
  #line 115 
  int probe_mmd;
  #line 115 
  int devs1;
  #line 115 
  int devs2;
  #line 116 
  u32 devices;
  #line 115 
  int mmd = 0;
  #line 121 
  if ((mmd_mask & 16U) == 0U) {
    #line 121 
    probe_mmd = (int)__ffs((unsigned long)mmd_mask);
  }
  else 
       #line 121 
       probe_mmd = 4;
  #line 125 
  devs1 = ef4_mdio_read(efx,probe_mmd,5);
  #line 126 
  devs2 = ef4_mdio_read(efx,probe_mmd,6);
  #line 127 
  if (devs1 < 0 || devs2 < 0) {
    #line 128 
    if ((efx->msg_enable & 8192U) != 0U) 
                                         #line 128 
                                         netdev_err(efx->net_dev,(char *)"failed to read devices present\n");
    #line 130 
    return -5;
  }
  #line 132 
  devices = (unsigned int)((devs2 << 16) | devs1);
  #line 133 
  if ((devices & mmd_mask) != mmd_mask) {
    #line 134 
    if ((efx->msg_enable & 8192U) != 0U) 
                                         #line 134 
                                         netdev_err(efx->net_dev,(char *)"required MMDs not present: got %x, wanted %x\n",devices,mmd_mask);
    #line 137 
    return -19;
  }
  #line 142 
  while (mmd_mask != 0U) {
    #line 143 
    if ((mmd_mask & 1U) != 0U) {
      #line 143 
      if (ef4_mdio_check_mmd(efx,mmd) != 0) 
                                            #line 144 
                                            return -5;
    }
    #line 145 
    mmd_mask >>= 1;
    #line 146 
    mmd ++;
  }
  #line 149 
  return 0;
}

#line 152  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/mdio_10g.c"
bool ef4_mdio_links_ok(struct ef4_nic *efx, unsigned int mmd_mask)
{
  #line 156 
  if (((66600958 >> (unsigned int)efx->loopback_mode) & 1) != 0) 
                                                                 #line 157 
                                                                 return (_Bool)1;
  else 
    #line 158 
    if (((133693440 >> (unsigned int)efx->loopback_mode) & 1) != 0) 
                                                                    #line 159 
                                                                    return (_Bool)0;
    else {
      #line 160 
      if ((int)ef4_phy_mode_disabled(efx->phy_mode) != 0) 
                                                          #line 161 
                                                          return (_Bool)0;
      else 
        #line 162 
        if (efx->loopback_mode == (unsigned int)LOOPBACK_PHYXS) 
                                                                #line 163 
                                                                mmd_mask &= 4294967141U;
        else 
          #line 167 
          if (efx->loopback_mode == (unsigned int)LOOPBACK_PCS) 
                                                                #line 168 
                                                                mmd_mask &= 4294967157U;
          else 
            #line 171 
            if (efx->loopback_mode == (unsigned int)LOOPBACK_PMAPMD) 
              #line 172 
              mmd_mask &= 4294967165U;
    }
  #line 175 
  return (_Bool)(mdio45_links_ok(& efx->mdio,mmd_mask) != 0);
}

#line 178  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/mdio_10g.c"
void ef4_mdio_transmit_disable(struct ef4_nic *efx)
{
  #line 180 
  ef4_mdio_set_flag(efx,1,9,1,(_Bool)(((unsigned int)efx->phy_mode & 1U) != 0U));
  #line 183 
  return;
}

#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/mdio_10g.c"
void ef4_mdio_phy_reconfigure(struct ef4_nic *efx)
{
  #line 187 
  ef4_mdio_set_flag(efx,1,0,1,(_Bool)(efx->loopback_mode == (unsigned int)LOOPBACK_PMAPMD));
  #line 190 
  ef4_mdio_set_flag(efx,3,0,16384,(_Bool)(efx->loopback_mode == (unsigned int)LOOPBACK_PCS));
  #line 193 
  ef4_mdio_set_flag(efx,4,0,16384,(_Bool)(efx->loopback_mode == (unsigned int)LOOPBACK_PHYXS_WS));
  #line 196 
  return;
}

#line 198  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/mdio_10g.c"
static void ef4_mdio_set_mmd_lpower(struct ef4_nic *efx, int lpower, int mmd)
{
  #line 201 
  int stat = ef4_mdio_read(efx,mmd,1);
  #line 206 
  if ((stat & 2) != 0) 
                       #line 207 
                       ef4_mdio_set_flag(efx,mmd,0,2048,(_Bool)(lpower != 0));
  #line 208 
  return;
}

#line 212  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/mdio_10g.c"
void ef4_mdio_set_mmds_lpower(struct ef4_nic *efx, int low_power, unsigned int mmd_mask)
{
  #line 215 
  int mmd = 0;
  #line 216 
  mmd_mask &= 4294967167U;
  #line 217 
  while (mmd_mask != 0U) {
    #line 218 
    if ((mmd_mask & 1U) != 0U) 
                               #line 219 
                               ef4_mdio_set_mmd_lpower(efx,low_power,mmd);
    #line 220 
    mmd_mask >>= 1;
    #line 221 
    mmd ++;
  }
  #line 223 
  return;
}

#line 230  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/mdio_10g.c"
int ef4_mdio_set_link_ksettings(struct ef4_nic *efx, struct ethtool_link_ksettings *cmd)
{
  #line 236 
  u32 prev_advertising;
  #line 236 
  u32 advertising;
  #line 237 
  u32 prev_supported;
  #line 233 
  struct ethtool_link_ksettings prev = {.base = {.cmd = 76U, .speed = 0U, .duplex = (unsigned char)0, .port = (unsigned char)0, .phy_address = (unsigned char)0, .autoneg = (unsigned char)0, .mdio_support = (unsigned char)0, .eth_tp_mdix = (unsigned char)0, .eth_tp_mdix_ctrl = (unsigned char)0, .link_mode_masks_nwords = (signed char)0, .transceiver = (unsigned char)0, .reserved1 = {(unsigned char)0, (unsigned char)0, (unsigned char)0}, .reserved = {0U, 0U, 0U, 0U, 0U, 0U, 0U}, .link_mode_masks = {}}, .link_modes = {.supported = {0UL, 0UL}, .advertising = {0UL, 0UL}, .lp_advertising = {0UL, 0UL}}};
  #line 239 
  (*((efx->phy_op)->get_link_ksettings))(efx,& prev);
  #line 241 
  ethtool_convert_link_mode_to_legacy_u32(& advertising,(unsigned long *)(& cmd->link_modes.advertising));
  #line 243 
  ethtool_convert_link_mode_to_legacy_u32(& prev_advertising,(unsigned long *)(& prev.link_modes.advertising));
  #line 245 
  ethtool_convert_link_mode_to_legacy_u32(& prev_supported,(unsigned long *)(& prev.link_modes.supported));
  #line 248 
  if ((((advertising == prev_advertising && cmd->base.speed == prev.base.speed) && (int)cmd->base.duplex == (int)prev.base.duplex) && (int)cmd->base.port == (int)prev.base.port) && (int)cmd->base.autoneg == (int)prev.base.autoneg) 
    #line 253 
    return 0;
  #line 256 
  if ((unsigned int)prev.base.port != 0U || (unsigned int)cmd->base.port != 0U) 
    #line 257 
    return -22;
  #line 260 
  if ((unsigned int)cmd->base.autoneg == 0U || ((advertising | 64U) & ~ prev_supported) != 0U) 
    #line 262 
    return -22;
  #line 264 
  ef4_link_set_advertising(efx,advertising | 64U);
  #line 265 
  ef4_mdio_an_reconfigure(efx);
  #line 266 
  return 0;
}

#line 273  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/mdio_10g.c"
void ef4_mdio_an_reconfigure(struct ef4_nic *efx)
{
  #line 275 
  int reg;
  {
    #line 277 
    int __ret_warn_on = (efx->mdio.mmds & 128U) == 0U;
    #line 277 
    if ((long)(__ret_warn_on != 0) != 0L) {
      #line 278 
      ldv_inline_asm();
      #line 279 
      ldv_inline_asm();
    }
    #line 277 
    long tmp = (long)(__ret_warn_on != 0);
  }
  #line 280 
  reg = 4097;
  #line 281 
  if (((unsigned long)efx->link_advertising & 8192UL) != 0UL) 
                                                              #line 282 
                                                              reg |= 1024;
  #line 283 
  if (((unsigned long)efx->link_advertising & 16384UL) != 0UL) 
                                                               #line 284 
                                                               reg |= 2048;
  #line 285 
  ef4_mdio_write(efx,7,16,reg);
  #line 288 
  (*((efx->phy_op)->set_npage_adv))(efx,efx->link_advertising);
  #line 291 
  reg = ef4_mdio_read(efx,7,0);
  #line 292 
  reg |= 12800;
  #line 293 
  ef4_mdio_write(efx,7,0,reg);
  #line 294 
  return;
}

#line 296  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/mdio_10g.c"
u8 ef4_mdio_get_pause(struct ef4_nic *efx)
{
  #line 300 
  if (((int)efx->wanted_fc & 4) == 0) 
                                      #line 301 
                                      return efx->wanted_fc;
  {
    #line 303 
    int __ret_warn_on = (efx->mdio.mmds & 128U) == 0U;
    #line 303 
    if ((long)(__ret_warn_on != 0) != 0L) {
      #line 304 
      ldv_inline_asm();
      #line 305 
      ldv_inline_asm();
    }
    #line 303 
    long tmp = (long)(__ret_warn_on != 0);
  }
  #line 305 
  return mii_resolve_flowctrl_fdx((unsigned short)((int)mii_advertise_flowctrl((int)efx->wanted_fc)),
                                 (unsigned short)((int)((unsigned short)ef4_mdio_read(efx,7,19))));
}

#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/mdio_10g.c"
int ef4_mdio_test_alive(struct ef4_nic *efx)
{
  #line 312 
  int rc;
  #line 314 
  u16 physid1;
  #line 314 
  u16 physid2;
  #line 313 
  int devad = (int)__ffs((unsigned long)efx->mdio.mmds);
  #line 316 
  cif_mutex_lock_mac_lock_of_ef4_nic(& efx->mac_lock);
  #line 318 
  physid1 = (unsigned short)ef4_mdio_read(efx,devad,2);
  #line 319 
  physid2 = (unsigned short)ef4_mdio_read(efx,devad,3);
  #line 321 
  if ((unsigned int)physid1 + 65535U > 65533U || (unsigned int)physid2 + 65535U > 65533U) {
    #line 323 
    if ((efx->msg_enable & 8192U) != 0U) 
                                         #line 323 
                                         netdev_err(efx->net_dev,(char *)"no MDIO PHY present with ID %d\n",efx->mdio.prtad);
    #line 325 
    rc = -22;
  }
  else 
       #line 327 
       rc = ef4_mdio_check_mmds(efx,efx->mdio.mmds);
  #line 330 
  cif_mutex_unlock_mac_lock_of_ef4_nic(& efx->mac_lock);
  #line 331 
  return rc;
}

#line 817  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/mdio_10g.i.aux"
static void cif_mutex_lock_mac_lock_of_ef4_nic(struct mutex *lock)
{
  #line 820 
  ldv_mutex_model_lock(lock,(char *)"mac_lock_of_ef4_nic");
  #line 821 
  return;
}

#line 824  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/mdio_10g.i.aux"
static void cif_mutex_unlock_mac_lock_of_ef4_nic(struct mutex *lock)
{
  #line 827 
  ldv_mutex_model_unlock(lock,(char *)"mac_lock_of_ef4_nic");
  #line 828 
  return;
}

#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/export.h"
#line 16 
extern struct module __this_module;
#line 220  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compiler.h"
__inline static void __write_once_size(void *p, void *res, int size)
{
  #line 222 
  switch (size) {
    #line 223 
    case 1: 
            #line 223 
    ;
    #line 223 
    *((__u8 *)p) = *((__u8 *)res);
    #line 223 
    break;
    #line 224 
    case 2: 
            #line 224 
    ;
    #line 224 
    *((__u16 *)p) = *((__u16 *)res);
    #line 224 
    break;
    #line 225 
    case 4: 
            #line 225 
    ;
    #line 225 
    *((__u32 *)p) = *((__u32 *)res);
    #line 225 
    break;
    #line 226 
    case 8: 
            #line 226 
    ;
    #line 226 
    *((__u64 *)p) = *((__u64 *)res);
    #line 226 
    break;
    #line 227 
    default: 
             #line 227 
    ;
    #line 228 
    ldv_inline_asm();
    #line 229 
    __builtin_memcpy(p,(void const *)res,(unsigned long)size);
    #line 230 
    ldv_inline_asm();
  }
  #line 232 
  return;
}

#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static void arch___clear_bit(long nr, unsigned long *addr)
{
  #line 94 
  ldv_inline_asm();
  #line 95 
  return;
}

#line 160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static bool arch_test_and_clear_bit(long nr, unsigned long *addr)
{
  #line 162 
  bool c;
  #line 163 
  ldv_inline_asm();
  #line 162 
  return c;
}

#line 204  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static bool constant_test_bit(long nr, unsigned long *addr)
{
  #line 207 
  return (_Bool)(((*(addr + (unsigned long)(nr >> 6)) >> (nr & 63L)) & 1UL) != 0UL);
}

#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static bool variable_test_bit(long nr, unsigned long *addr)
{
  #line 212 
  bool oldbit;
  #line 213 
  ldv_inline_asm();
  #line 219 
  return oldbit;
}

#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 179  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/efx.i.aux"
static void cif_set_bit(long nr, unsigned long *addr);
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 186  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/efx.i.aux"
static void cif_clear_bit(long nr, unsigned long *addr);
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
__inline static bool test_and_clear_bit(long nr, unsigned long *addr)
{
  #line 83 
  kasan_check_read((void *)(addr + (unsigned long)(nr / 64L)),8U);
  #line 84 
  return arch_test_and_clear_bit(nr,addr);
}

#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-non-atomic.h"
__inline static void __clear_bit(long nr, unsigned long *addr)
{
  #line 42 
  kasan_check_read((void *)(addr + (unsigned long)(nr / 64L)),8U);
  #line 43 
  arch___clear_bit(nr,addr);
  #line 44 
  return;
}

#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-non-atomic.h"
__inline static bool test_bit(long nr, unsigned long *addr)
{
  #line 111 
  int tmp_1;
  #line 110 
  kasan_check_read((void *)(addr + (unsigned long)(nr / 64L)),8U);
  #line 111 
  if (0 != 0) {
    #line 111 
    tmp_1 = (int)constant_test_bit(nr,addr) != 0;
  }
  else {
    #line 111 
    tmp_1 = (int)variable_test_bit(nr,addr) != 0;
  }
  #line 111 
  return (_Bool)(tmp_1 != 0);
}

#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/log2.h"
__inline static int __ilog2_u64(u64 n)
{
  #line 32 
  return fls64(n) + -1;
}

#line 171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
#line 171 
int printk(char * , ...);
#line 469  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernel.h"
#line 469 
int sprintf(char *, char * , ...);
#line 472 
#line 472 
int snprintf(char *, size_t, char * , ...);
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
#line 193  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/efx.i.aux"
static void INIT_LIST_HEAD(struct list_head *list);
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
#line 33 
bool __list_add_valid(struct list_head *, struct list_head *, struct list_head *);
#line 36 
#line 36 
bool __list_del_entry_valid(struct list_head *);
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_add(struct list_head *new, struct list_head *prev, struct list_head *next)
{
  #line 60 
  if (! __list_add_valid(new,prev,next)) 
                                         #line 61 
                                         return;
  #line 63 
  next->prev = new;
  #line 64 
  new->next = next;
  #line 65 
  new->prev = prev;
  {
    #line 67 
    union __anonunion___u_2056 __u = {.__val = new};
    #line 66 
    __write_once_size((void *)(& prev->next),(void *)(& __u.__c),8);
    #line 66 
    struct list_head *tmp_2 = __u.__val;
  }
  #line 68 
  return;
}

#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_add_tail(struct list_head *new, struct list_head *head)
{
  #line 93 
  __list_add(new,head->prev,head);
  #line 94 
  return;
}

#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_del(struct list_head *prev, struct list_head *next)
{
  #line 97 
  next->prev = prev;
  {
    #line 107 
    union __anonunion___u_2058 __u = {.__val = next};
    #line 106 
    __write_once_size((void *)(& prev->next),(void *)(& __u.__c),8);
    #line 106 
    struct list_head *tmp = __u.__val;
  }
  #line 108 
  return;
}

#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_del_entry(struct list_head *entry)
{
  #line 131 
  if (! __list_del_entry_valid(entry)) 
                                       #line 132 
                                       return;
  #line 134 
  __list_del(entry->prev,entry->next);
  #line 135 
  return;
}

#line 137  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_del(struct list_head *entry)
{
  #line 139 
  __list_del_entry(entry);
  #line 140 
  entry->next = (struct list_head *)(-2401263026318606080);
  #line 141 
  entry->prev = (struct list_head *)(-2401263026318606046);
  #line 142 
  return;
}

#line 741  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void INIT_HLIST_NODE(struct hlist_node *h)
{
  #line 743 
  h->next = (struct hlist_node *)0;
  #line 744 
  h->pprev = (struct hlist_node **)0;
  #line 745 
  return;
}

#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/percpu.h"
#line 88 
void __bad_percpu_size(void);
#line 309  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-defs.h"
#line 309 
void __bad_size_call_parameter(void);
#line 314  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-defs.h"
__inline static void __this_cpu_preempt_check(char *op)
{
  #line 316 
  return;
}

#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/percpu.h"
#line 19 
extern unsigned long __per_cpu_offset[8192U];
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bug.h"
#line 89 
void __warn_printk(char * , ...);
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/getorder.h"
__inline static int get_order(unsigned long size)
{
  #line 31 
  if (0 != 0) {
    #line 38 
    int tmp_49;
    #line 38 
    int tmp_17;
    #line 38 
    int tmp_18;
    #line 38 
    int tmp_50;
    #line 38 
    int tmp_51;
    #line 38 
    int tmp_19;
    #line 38 
    int tmp_20;
    #line 38 
    int tmp_52;
    #line 38 
    int tmp_53;
    #line 38 
    int tmp_21;
    #line 38 
    int tmp_22;
    #line 38 
    int tmp_54;
    #line 38 
    int tmp_55;
    #line 38 
    int tmp_23;
    #line 38 
    int tmp_24;
    #line 38 
    int tmp_56;
    #line 38 
    int tmp_57;
    #line 38 
    int tmp_25;
    #line 38 
    int tmp_26;
    #line 38 
    int tmp_58;
    #line 38 
    int tmp_59;
    #line 38 
    int tmp_27;
    #line 38 
    int tmp_28;
    #line 38 
    int tmp_60;
    #line 38 
    int tmp_61;
    #line 38 
    int tmp_29;
    #line 38 
    int tmp_30;
    #line 38 
    int tmp_31;
    #line 38 
    int tmp;
    #line 38 
    int tmp_0;
    #line 38 
    int tmp_32;
    #line 38 
    int tmp_33;
    #line 38 
    int tmp_1;
    #line 38 
    int tmp_2;
    #line 38 
    int tmp_34;
    #line 38 
    int tmp_35;
    #line 38 
    int tmp_3;
    #line 38 
    int tmp_4;
    #line 38 
    int tmp_36;
    #line 38 
    int tmp_37;
    #line 38 
    int tmp_5;
    #line 38 
    int tmp_6;
    #line 38 
    int tmp_38;
    #line 38 
    int tmp_39;
    #line 38 
    int tmp_7;
    #line 38 
    int tmp_8;
    #line 38 
    int tmp_40;
    #line 38 
    int tmp_41;
    #line 38 
    int tmp_9;
    #line 38 
    int tmp_10;
    #line 38 
    int tmp_42;
    #line 38 
    int tmp_43;
    #line 38 
    int tmp_11;
    #line 38 
    int tmp_12;
    #line 38 
    int tmp_44;
    #line 38 
    int tmp_45;
    #line 38 
    int tmp_13;
    #line 38 
    int tmp_14;
    #line 38 
    int tmp_46;
    #line 38 
    int tmp_47;
    #line 38 
    int tmp_15;
    #line 38 
    int tmp_16;
    #line 38 
    int tmp_48;
    #line 38 
    int tmp_63;
    #line 32 
    if (size == 0UL) 
                     #line 33 
                     return 52;
    #line 35 
    if (size <= 4095UL) 
                        #line 36 
                        return 0;
    #line 38 
    if (0 != 0) {
      #line 38 
      if (size + 18446744073709551615UL > 1UL) {
        #line 38 
        if (((unsigned long long)(size + 18446744073709551615UL) & 9223372036854775808ULL) == 0ULL) {
          #line 38 
          if (((unsigned long long)(size + 18446744073709551615UL) & 4611686018427387904ULL) == 0ULL) {
            #line 38 
            if (((unsigned long long)(size + 18446744073709551615UL) & 2305843009213693952ULL) == 0ULL) {
              #line 38 
              if (((unsigned long long)(size + 18446744073709551615UL) & 1152921504606846976ULL) == 0ULL) {
                #line 38 
                if (((unsigned long long)(size + 18446744073709551615UL) & 576460752303423488ULL) == 0ULL) {
                  #line 38 
                  if (((unsigned long long)(size + 18446744073709551615UL) & 288230376151711744ULL) == 0ULL) {
                    #line 38 
                    if (((unsigned long long)(size + 18446744073709551615UL) & 144115188075855872ULL) == 0ULL) {
                      #line 38 
                      if (((unsigned long long)(size + 18446744073709551615UL) & 72057594037927936ULL) == 0ULL) {
                        #line 38 
                        if (((unsigned long long)(size + 18446744073709551615UL) & 36028797018963968ULL) == 0ULL) {
                          #line 38 
                          if (((unsigned long long)(size + 18446744073709551615UL) & 18014398509481984ULL) == 0ULL) {
                            #line 38 
                            if (((unsigned long long)(size + 18446744073709551615UL) & 9007199254740992ULL) == 0ULL) {
                              #line 38 
                              if (((unsigned long long)(size + 18446744073709551615UL) & 4503599627370496ULL) == 0ULL) {
                                #line 38 
                                if (((unsigned long long)(size + 18446744073709551615UL) & 2251799813685248ULL) == 0ULL) {
                                  #line 38 
                                  if (((unsigned long long)(size + 18446744073709551615UL) & 1125899906842624ULL) == 0ULL) {
                                    #line 38 
                                    if (((unsigned long long)(size + 18446744073709551615UL) & 562949953421312ULL) == 0ULL) {
                                      #line 38 
                                      if (((unsigned long long)(size + 18446744073709551615UL) & 281474976710656ULL) == 0ULL) {
                                        #line 38 
                                        if (((unsigned long long)(size + 18446744073709551615UL) & 140737488355328ULL) == 0ULL) {
                                          #line 38 
                                          if (((unsigned long long)(size + 18446744073709551615UL) & 70368744177664ULL) == 0ULL) {
                                            #line 38 
                                            if (((unsigned long long)(size + 18446744073709551615UL) & 35184372088832ULL) == 0ULL) {
                                              #line 38 
                                              if (((unsigned long long)(size + 18446744073709551615UL) & 17592186044416ULL) == 0ULL) {
                                                #line 38 
                                                if (((unsigned long long)(size + 18446744073709551615UL) & 8796093022208ULL) == 0ULL) {
                                                  #line 38 
                                                  if (((unsigned long long)(size + 18446744073709551615UL) & 4398046511104ULL) == 0ULL) {
                                                    #line 38 
                                                    if (((unsigned long long)(size + 18446744073709551615UL) & 2199023255552ULL) == 0ULL) {
                                                      #line 38 
                                                      if (((unsigned long long)(size + 18446744073709551615UL) & 1099511627776ULL) == 0ULL) {
                                                        #line 38 
                                                        if (((unsigned long long)(size + 18446744073709551615UL) & 549755813888ULL) == 0ULL) {
                                                          #line 38 
                                                          if (((unsigned long long)(size + 18446744073709551615UL) & 274877906944ULL) == 0ULL) {
                                                            #line 38 
                                                            if (((unsigned long long)(size + 18446744073709551615UL) & 137438953472ULL) == 0ULL) {
                                                              #line 38 
                                                              if (((unsigned long long)(size + 18446744073709551615UL) & 68719476736ULL) == 0ULL) {
                                                                #line 38 
                                                                if (((unsigned long long)(size + 18446744073709551615UL) & 34359738368ULL) == 0ULL) {
                                                                  #line 38 
                                                                  if (
                                                                    ((unsigned long long)(size + 18446744073709551615UL) & 17179869184ULL) == 0ULL) {
                                                                    #line 38 
                                                                    if (
                                                                    ((unsigned long long)(size + 18446744073709551615UL) & 8589934592ULL) == 0ULL) {
                                                                    #line 38 
                                                                    if (
                                                                    ((unsigned long long)(size + 18446744073709551615UL) & 4294967296ULL) == 0ULL) {
                                                                    #line 38 
                                                                    if (
                                                                    ((unsigned long long)(size + 18446744073709551615UL) & 2147483648ULL) == 0ULL) {
                                                                    #line 38 
                                                                    if (
                                                                    ((unsigned long long)(size + 18446744073709551615UL) & 1073741824ULL) == 0ULL) {
                                                                    #line 38 
                                                                    if (
                                                                    ((unsigned long long)(size + 18446744073709551615UL) & 536870912ULL) == 0ULL) {
                                                                    #line 38 
                                                                    if (
                                                                    ((unsigned long long)(size + 18446744073709551615UL) & 268435456ULL) == 0ULL) {
                                                                    #line 38 
                                                                    if (
                                                                    ((unsigned long long)(size + 18446744073709551615UL) & 134217728ULL) == 0ULL) {
                                                                    #line 38 
                                                                    if (
                                                                    ((unsigned long long)(size + 18446744073709551615UL) & 67108864ULL) == 0ULL) {
                                                                    #line 38 
                                                                    if (
                                                                    ((unsigned long long)(size + 18446744073709551615UL) & 33554432ULL) == 0ULL) {
                                                                    #line 38 
                                                                    if (
                                                                    ((unsigned long long)(size + 18446744073709551615UL) & 16777216ULL) == 0ULL) {
                                                                    #line 38 
                                                                    if (
                                                                    ((unsigned long long)(size + 18446744073709551615UL) & 8388608ULL) == 0ULL) {
                                                                    #line 38 
                                                                    if (
                                                                    ((unsigned long long)(size + 18446744073709551615UL) & 4194304ULL) == 0ULL) {
                                                                    #line 38 
                                                                    if (
                                                                    ((unsigned long long)(size + 18446744073709551615UL) & 2097152ULL) == 0ULL) {
                                                                    #line 38 
                                                                    if (
                                                                    ((unsigned long long)(size + 18446744073709551615UL) & 1048576ULL) == 0ULL) {
                                                                    #line 38 
                                                                    if (
                                                                    ((unsigned long long)(size + 18446744073709551615UL) & 524288ULL) == 0ULL) {
                                                                    #line 38 
                                                                    if (
                                                                    ((unsigned long long)(size + 18446744073709551615UL) & 262144ULL) == 0ULL) {
                                                                    #line 38 
                                                                    if (
                                                                    ((unsigned long long)(size + 18446744073709551615UL) & 131072ULL) == 0ULL) {
                                                                    #line 38 
                                                                    if (
                                                                    ((unsigned long long)(size + 18446744073709551615UL) & 65536ULL) == 0ULL) {
                                                                    #line 38 
                                                                    if (
                                                                    ((unsigned long long)(size + 18446744073709551615UL) & 32768ULL) == 0ULL) {
                                                                    #line 38 
                                                                    if (
                                                                    ((unsigned long long)(size + 18446744073709551615UL) & 16384ULL) == 0ULL) {
                                                                    #line 38 
                                                                    if (
                                                                    ((unsigned long long)(size + 18446744073709551615UL) & 8192ULL) == 0ULL) {
                                                                    #line 38 
                                                                    if (
                                                                    ((unsigned long long)(size + 18446744073709551615UL) & 4096ULL) == 0ULL) {
                                                                    #line 38 
                                                                    if (
                                                                    ((unsigned long long)(size + 18446744073709551615UL) & 2048ULL) == 0ULL) {
                                                                    #line 38 
                                                                    if (
                                                                    ((unsigned long long)(size + 18446744073709551615UL) & 1024ULL) == 0ULL) {
                                                                    #line 38 
                                                                    if (
                                                                    ((unsigned long long)(size + 18446744073709551615UL) & 512ULL) == 0ULL) {
                                                                    #line 38 
                                                                    if (
                                                                    ((unsigned long long)(size + 18446744073709551615UL) & 256ULL) == 0ULL) {
                                                                    #line 38 
                                                                    if (
                                                                    ((unsigned long long)(size + 18446744073709551615UL) & 128ULL) == 0ULL) {
                                                                    #line 38 
                                                                    if (
                                                                    ((unsigned long long)(size + 18446744073709551615UL) & 64ULL) == 0ULL) {
                                                                    #line 38 
                                                                    if (
                                                                    ((unsigned long long)(size + 18446744073709551615UL) & 32ULL) == 0ULL) {
                                                                    #line 38 
                                                                    if (
                                                                    ((unsigned long long)(size + 18446744073709551615UL) & 16ULL) == 0ULL) {
                                                                    #line 38 
                                                                    if (
                                                                    ((unsigned long long)(size + 18446744073709551615UL) & 8ULL) == 0ULL) {
                                                                    #line 38 
                                                                    if (
                                                                    ((unsigned long long)(size + 18446744073709551615UL) & 4ULL) != 0ULL) 
                                                                    #line 38 
                                                                    tmp = -9; else 
                                                                    #line 38 
                                                                    tmp = -10;
                                                                    #line 38 
                                                                    tmp_0 = tmp;
                                                                    }
                                                                    else 
                                                                    #line 38 
                                                                    tmp_0 = -8;
                                                                    #line 38 
                                                                    tmp_1 = tmp_0;
                                                                    }
                                                                    else 
                                                                    #line 38 
                                                                    tmp_1 = -7;
                                                                    #line 38 
                                                                    tmp_2 = tmp_1;
                                                                    }
                                                                    else 
                                                                    #line 38 
                                                                    tmp_2 = -6;
                                                                    #line 38 
                                                                    tmp_3 = tmp_2;
                                                                    }
                                                                    else 
                                                                    #line 38 
                                                                    tmp_3 = -5;
                                                                    #line 38 
                                                                    tmp_4 = tmp_3;
                                                                    }
                                                                    else 
                                                                    #line 38 
                                                                    tmp_4 = -4;
                                                                    #line 38 
                                                                    tmp_5 = tmp_4;
                                                                    }
                                                                    else 
                                                                    #line 38 
                                                                    tmp_5 = -3;
                                                                    #line 38 
                                                                    tmp_6 = tmp_5;
                                                                    }
                                                                    else 
                                                                    #line 38 
                                                                    tmp_6 = -2;
                                                                    #line 38 
                                                                    tmp_7 = tmp_6;
                                                                    }
                                                                    else 
                                                                    #line 38 
                                                                    tmp_7 = -1;
                                                                    #line 38 
                                                                    tmp_8 = tmp_7;
                                                                    }
                                                                    else 
                                                                    #line 38 
                                                                    tmp_8 = 0;
                                                                    #line 38 
                                                                    tmp_9 = tmp_8;
                                                                    }
                                                                    else 
                                                                    #line 38 
                                                                    tmp_9 = 1;
                                                                    #line 38 
                                                                    tmp_10 = tmp_9;
                                                                    }
                                                                    else 
                                                                    #line 38 
                                                                    tmp_10 = 2;
                                                                    #line 38 
                                                                    tmp_11 = tmp_10;
                                                                    }
                                                                    else 
                                                                    #line 38 
                                                                    tmp_11 = 3;
                                                                    #line 38 
                                                                    tmp_12 = tmp_11;
                                                                    }
                                                                    else 
                                                                    #line 38 
                                                                    tmp_12 = 4;
                                                                    #line 38 
                                                                    tmp_13 = tmp_12;
                                                                    }
                                                                    else 
                                                                    #line 38 
                                                                    tmp_13 = 5;
                                                                    #line 38 
                                                                    tmp_14 = tmp_13;
                                                                    }
                                                                    else 
                                                                    #line 38 
                                                                    tmp_14 = 6;
                                                                    #line 38 
                                                                    tmp_15 = tmp_14;
                                                                    }
                                                                    else 
                                                                    #line 38 
                                                                    tmp_15 = 7;
                                                                    #line 38 
                                                                    tmp_16 = tmp_15;
                                                                    }
                                                                    else 
                                                                    #line 38 
                                                                    tmp_16 = 8;
                                                                    #line 38 
                                                                    tmp_17 = tmp_16;
                                                                    }
                                                                    else 
                                                                    #line 38 
                                                                    tmp_17 = 9;
                                                                    #line 38 
                                                                    tmp_18 = tmp_17;
                                                                    }
                                                                    else 
                                                                    #line 38 
                                                                    tmp_18 = 10;
                                                                    #line 38 
                                                                    tmp_19 = tmp_18;
                                                                    }
                                                                    else 
                                                                    #line 38 
                                                                    tmp_19 = 11;
                                                                    #line 38 
                                                                    tmp_20 = tmp_19;
                                                                    }
                                                                    else 
                                                                    #line 38 
                                                                    tmp_20 = 12;
                                                                    #line 38 
                                                                    tmp_21 = tmp_20;
                                                                    }
                                                                    else 
                                                                    #line 38 
                                                                    tmp_21 = 13;
                                                                    #line 38 
                                                                    tmp_22 = tmp_21;
                                                                    }
                                                                    else 
                                                                    #line 38 
                                                                    tmp_22 = 14;
                                                                    #line 38 
                                                                    tmp_23 = tmp_22;
                                                                    }
                                                                    else 
                                                                    #line 38 
                                                                    tmp_23 = 15;
                                                                    #line 38 
                                                                    tmp_24 = tmp_23;
                                                                    }
                                                                    else 
                                                                    #line 38 
                                                                    tmp_24 = 16;
                                                                    #line 38 
                                                                    tmp_25 = tmp_24;
                                                                    }
                                                                    else 
                                                                    #line 38 
                                                                    tmp_25 = 17;
                                                                    #line 38 
                                                                    tmp_26 = tmp_25;
                                                                    }
                                                                    else 
                                                                    #line 38 
                                                                    tmp_26 = 18;
                                                                    #line 38 
                                                                    tmp_27 = tmp_26;
                                                                    }
                                                                    else 
                                                                    #line 38 
                                                                    tmp_27 = 19;
                                                                    #line 38 
                                                                    tmp_28 = tmp_27;
                                                                    }
                                                                    else 
                                                                    #line 38 
                                                                    tmp_28 = 20;
                                                                    #line 38 
                                                                    tmp_29 = tmp_28;
                                                                    }
                                                                    else 
                                                                    #line 38 
                                                                    tmp_29 = 21;
                                                                    #line 38 
                                                                    tmp_30 = tmp_29;
                                                                    }
                                                                    else 
                                                                    #line 38 
                                                                    tmp_30 = 22;
                                                                    #line 38 
                                                                    tmp_31 = tmp_30;
                                                                  }
                                                                  else 
                                                                    #line 38 
                                                                    tmp_31 = 23;
                                                                  #line 38 
                                                                  tmp_32 = tmp_31;
                                                                }
                                                                else 
                                                                  #line 38 
                                                                  tmp_32 = 24;
                                                                #line 38 
                                                                tmp_33 = tmp_32;
                                                              }
                                                              else 
                                                                   #line 38 
                                                                   tmp_33 = 25;
                                                              #line 38 
                                                              tmp_34 = tmp_33;
                                                            }
                                                            else 
                                                                 #line 38 
                                                                 tmp_34 = 26;
                                                            #line 38 
                                                            tmp_35 = tmp_34;
                                                          }
                                                          else 
                                                               #line 38 
                                                               tmp_35 = 27;
                                                          #line 38 
                                                          tmp_36 = tmp_35;
                                                        }
                                                        else 
                                                             #line 38 
                                                             tmp_36 = 28;
                                                        #line 38 
                                                        tmp_37 = tmp_36;
                                                      }
                                                      else 
                                                           #line 38 
                                                           tmp_37 = 29;
                                                      #line 38 
                                                      tmp_38 = tmp_37;
                                                    }
                                                    else 
                                                         #line 38 
                                                         tmp_38 = 30;
                                                    #line 38 
                                                    tmp_39 = tmp_38;
                                                  }
                                                  else 
                                                       #line 38 
                                                       tmp_39 = 31;
                                                  #line 38 
                                                  tmp_40 = tmp_39;
                                                }
                                                else 
                                                     #line 38 
                                                     tmp_40 = 32;
                                                #line 38 
                                                tmp_41 = tmp_40;
                                              }
                                              else 
                                                   #line 38 
                                                   tmp_41 = 33;
                                              #line 38 
                                              tmp_42 = tmp_41;
                                            }
                                            else 
                                                 #line 38 
                                                 tmp_42 = 34;
                                            #line 38 
                                            tmp_43 = tmp_42;
                                          }
                                          else 
                                               #line 38 
                                               tmp_43 = 35;
                                          #line 38 
                                          tmp_44 = tmp_43;
                                        }
                                        else 
                                             #line 38 
                                             tmp_44 = 36;
                                        #line 38 
                                        tmp_45 = tmp_44;
                                      }
                                      else 
                                           #line 38 
                                           tmp_45 = 37;
                                      #line 38 
                                      tmp_46 = tmp_45;
                                    }
                                    else 
                                         #line 38 
                                         tmp_46 = 38;
                                    #line 38 
                                    tmp_47 = tmp_46;
                                  }
                                  else 
                                       #line 38 
                                       tmp_47 = 39;
                                  #line 38 
                                  tmp_48 = tmp_47;
                                }
                                else 
                                     #line 38 
                                     tmp_48 = 40;
                                #line 38 
                                tmp_49 = tmp_48;
                              }
                              else 
                                   #line 38 
                                   tmp_49 = 41;
                              #line 38 
                              tmp_50 = tmp_49;
                            }
                            else 
                                 #line 38 
                                 tmp_50 = 42;
                            #line 38 
                            tmp_51 = tmp_50;
                          }
                          else 
                               #line 38 
                               tmp_51 = 43;
                          #line 38 
                          tmp_52 = tmp_51;
                        }
                        else 
                             #line 38 
                             tmp_52 = 44;
                        #line 38 
                        tmp_53 = tmp_52;
                      }
                      else 
                           #line 38 
                           tmp_53 = 45;
                      #line 38 
                      tmp_54 = tmp_53;
                    }
                    else 
                         #line 38 
                         tmp_54 = 46;
                    #line 38 
                    tmp_55 = tmp_54;
                  }
                  else 
                       #line 38 
                       tmp_55 = 47;
                  #line 38 
                  tmp_56 = tmp_55;
                }
                else 
                     #line 38 
                     tmp_56 = 48;
                #line 38 
                tmp_57 = tmp_56;
              }
              else 
                   #line 38 
                   tmp_57 = 49;
              #line 38 
              tmp_58 = tmp_57;
            }
            else 
                 #line 38 
                 tmp_58 = 50;
            #line 38 
            tmp_59 = tmp_58;
          }
          else 
               #line 38 
               tmp_59 = 51;
          #line 38 
          tmp_60 = tmp_59;
        }
        else 
             #line 38 
             tmp_60 = 52;
        #line 38 
        tmp_61 = tmp_60;
      }
      else 
           #line 38 
           tmp_61 = -11;
      #line 38 
      tmp_63 = tmp_61;
    }
    else {
      #line 38 
      tmp_63 = __ilog2_u64((unsigned long long)(size + 18446744073709551615UL)) + -11;
    }
    #line 38 
    return tmp_63;
  }
  #line 41 
  size --;
  #line 42 
  size >>= 12;
  #line 46 
  return fls64((unsigned long long)size);
}

#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/string_64.h"
#line 63 
char *strcpy(char *, char *);
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/string.h"
#line 29 
size_t strlcpy(char *, char *, size_t);
#line 49 
#line 866  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/efx.i.aux"
static int cif_strcmp(char *cs, char *ct);
#line 138  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bitmap.h"
#line 138 
void __bitmap_or(unsigned long *, unsigned long *, unsigned long *, unsigned int);
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bitmap.h"
__inline static void bitmap_or(unsigned long *dst, unsigned long *src1, unsigned long *src2, unsigned int nbits)
{
  #line 284 
  if (0 != 0 && nbits + 4294967295U <= 63U) 
                                            #line 285 
                                            *dst = *src1 | *src2; else 
                                                                    #line 287 
                                                                    __bitmap_or(dst,src1,src2,nbits);
  #line 288 
  return;
}

#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cmpxchg_64.h"
__inline static int arch_atomic_read_0(atomic_t *v)
{
  #line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
  union __anonunion___u_2110 __u;
  #line 31 
  __read_once_size((void *)(& v->counter),(void *)(& __u.__c),4);
  #line 31 
  return (__u.__val);
}

#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
__inline static int atomic_read_0(atomic_t *v)
{
  #line 26 
  kasan_check_read((void *)v,4U);
  #line 27 
  return arch_atomic_read_0(v);
}

#line 237 
#line 242  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/efx.i.aux"
static void atomic_inc_0(atomic_t *v);
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
#line 39 
extern unsigned int nr_cpu_ids;
#line 91 
#line 91 
extern struct cpumask __cpu_online_mask;
#line 134  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
__inline static void cpu_max_bits_warn(unsigned int cpu, unsigned int bits)
{
  #line 137 
  int __ret_warn_on = cpu >= bits;
  #line 137 
  if ((long)(__ret_warn_on != 0) != 0L) {
    #line 138 
    ldv_inline_asm();
    #line 139 
    ldv_inline_asm();
  }
  #line 137 
  long tmp = (long)(__ret_warn_on != 0);
  #line 139 
  return;
}

#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
__inline static unsigned int cpumask_check(unsigned int cpu)
{
  #line 144 
  cpu_max_bits_warn(cpu,nr_cpu_ids);
  #line 145 
  return cpu;
}

#line 228 
#line 228 
unsigned int cpumask_next(int, struct cpumask *);
#line 358  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
__inline static int cpumask_test_cpu(int cpu, struct cpumask *cpumask)
{
  #line 360 
  ;
  #line 360 
  return (int)test_bit((long)cpumask_check((unsigned int)cpu),
                 (unsigned long *)(& cpumask->bits));
}

#line 431  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
__inline static void cpumask_or(struct cpumask *dstp, struct cpumask *src1p, struct cpumask *src2p)
{
  #line 434 
  bitmap_or((unsigned long *)(& dstp->bits),(unsigned long *)(& src1p->bits),(unsigned long *)(& src2p->bits),nr_cpu_ids);
  #line 436 
  return;
}

#line 740 
#line 740 
bool zalloc_cpumask_var(cpumask_var_t *, gfp_t);
#line 742 
#line 742 
void free_cpumask_var(cpumask_var_t);
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bottom_half.h"
#line 8 
void __local_bh_disable_ip(unsigned long, unsigned int);
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bottom_half.h"
__inline static void local_bh_disable(void)
{
  #line 19 
  __here_0: 
            #line 19 
  ;
  #line 19 
  __local_bh_disable_ip((unsigned long)((void *)0),512U);
  #line 21 
  return;
}

#line 23 
#line 23 
void __local_bh_enable_ip(unsigned long, unsigned int);
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bottom_half.h"
__inline static void local_bh_enable(void)
{
  #line 32 
  __here_0: 
            #line 32 
  ;
  #line 32 
  __local_bh_enable_ip((unsigned long)((void *)0),512U);
  #line 34 
  return;
}

#line 302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
#line 302 
void lockdep_init_map(struct lockdep_map *, char *, struct lock_class_key *, int);
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 95 
void __raw_spin_lock_init(raw_spinlock_t *, char *, struct lock_class_key *);
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_api_smp.h"
#line 22 
void _raw_spin_lock(raw_spinlock_t *);
#line 28 
#line 28 
void _raw_spin_lock_bh(raw_spinlock_t *);
#line 39 
#line 39 
void _raw_spin_unlock(raw_spinlock_t *);
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
__inline static raw_spinlock_t *spinlock_check(spinlock_t *lock)
{
  #line 327 
  return & lock->__anonCompField_spinlock_25.rlock;
}

#line 336  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock(spinlock_t *lock)
{
  #line 338 
  _raw_spin_lock(& lock->__anonCompField_spinlock_25.rlock);
  #line 339 
  return;
}

#line 340 
#line 613  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/efx.i.aux"
static void cif_spin_lock__xmit_lock_of_netdev_queue(spinlock_t *lock);
#line 340  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 671  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/efx.i.aux"
static void cif_spin_lock_tx_global_lock_of_net_device(spinlock_t *lock);
#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock_bh(spinlock_t *lock)
{
  #line 343 
  _raw_spin_lock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 344 
  return;
}

#line 345 
#line 698  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/efx.i.aux"
static void cif_spin_lock_bh_addr_list_lock_of_net_device(spinlock_t *lock);
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 895  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/efx.i.aux"
static void cif_spin_lock_bh_stats_lock_of_ef4_nic(spinlock_t *lock);
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock(spinlock_t *lock)
{
  #line 378 
  _raw_spin_unlock(& lock->__anonCompField_spinlock_25.rlock);
  #line 379 
  return;
}

#line 380 
#line 653  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/efx.i.aux"
static void cif_spin_unlock__xmit_lock_of_netdev_queue(spinlock_t *lock);
#line 380  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 680  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/efx.i.aux"
static void cif_spin_unlock_tx_global_lock_of_net_device(spinlock_t *lock);
#line 381  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_bh_0(spinlock_t *lock)
{
  #line 383 
  _raw_spin_unlock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 384 
  return;
}

#line 385 
#line 716  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/efx.i.aux"
static void cif_spin_unlock_bh_addr_list_lock_of_net_device(spinlock_t *lock);
#line 385  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 904  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/efx.i.aux"
static void cif_spin_unlock_bh_stats_lock_of_ef4_nic(spinlock_t *lock);
#line 26 
#line 881 
static void cif_mutex_lock_mac_lock_of_ef4_nic_0(struct mutex *lock);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 21 
void ldv_set_bit(long nr, unsigned long *addr);
#line 22 
#line 22 
void ldv_clear_bit(long nr, unsigned long *addr);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 26 
int ldv_strcmp(char *cs, char *ct);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/list.h"
#line 23 
void ldv_init_list_head(struct list_head *list);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 23 
void *ldv_kzalloc(size_t size, gfp_t flags);
#line 24 
#line 24 
void *ldv_kmalloc(size_t size, gfp_t flags);
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
#line 61 
void __init_waitqueue_head(struct wait_queue_head *, char *, struct lock_class_key *);
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rwsem.h"
#line 103 
void __init_rwsem(struct rw_semaphore *, char *, struct lock_class_key *);
#line 127 
#line 127 
void down_read(struct rw_semaphore *);
#line 138 
#line 138 
void down_write(struct rw_semaphore *);
#line 149 
#line 149 
void up_read(struct rw_semaphore *);
#line 154 
#line 154 
void up_write(struct rw_semaphore *);
#line 128  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
#line 128 
void __mutex_init(struct mutex *, char *, struct lock_class_key *);
#line 137 
#line 137 
bool mutex_is_locked(struct mutex *);
#line 184 
#line 913  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/efx.i.aux"
static int cif_mutex_trylock_mac_lock_of_ef4_nic(struct mutex *lock);
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
#line 888  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/efx.i.aux"
static void cif_mutex_unlock_mac_lock_of_ef4_nic_0(struct mutex *lock);
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
#line 81 
extern unsigned long jiffies;
#line 302 
#line 302 
unsigned long __msecs_to_jiffies(unsigned int);
#line 309  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
__inline static unsigned long _msecs_to_jiffies(unsigned int m)
{
  #line 311 
  return (unsigned long)(((long)m + 3L) / 4L);
}

#line 364  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
__inline static unsigned long msecs_to_jiffies(unsigned int m)
{
  #line 366 
  if (0 != 0) {
    #line 367 
    if ((int)m < 0) 
                    #line 368 
                    return 4611686018427387902UL;
    #line 369 
    return _msecs_to_jiffies(m);
  }
  else {
    #line 371 
    return __msecs_to_jiffies(m);
  }
}

#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
#line 90 
void init_timer_key(struct timer_list *, void (*)(struct timer_list *), unsigned int, char *, struct lock_class_key *);
#line 173 
#line 873  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/efx.i.aux"
static int cif_mod_timer(struct timer_list *timer, unsigned long expires);
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
#line 22 
void delayed_work_timer_fn(struct timer_list *);
#line 207 
#line 207 
void __init_work(struct work_struct *, int);
#line 407 
#line 407 
struct workqueue_struct *alloc_workqueue(char *, unsigned int, int , ...);
#line 436 
#line 436 
void destroy_workqueue(struct workqueue_struct *);
#line 462 
#line 462 
bool cancel_work_sync(struct work_struct *);
#line 466 
#line 466 
bool cancel_delayed_work_sync(struct delayed_work *);
#line 496 
#line 363  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/efx.i.aux"
static bool cif_queue_work(struct workqueue_struct *wq, struct work_struct *work);
#line 511  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
#line 371  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/efx.i.aux"
static bool cif_queue_delayed_work(struct workqueue_struct *wq, struct delayed_work *dwork, unsigned long delay);
#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/io.h"
#line 206 
void *ioremap(resource_size_t, unsigned long);
#line 209 
#line 209 
void iounmap(void *);
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
__inline static char *kobject_name(struct kobject *kobj)
{
  #line 91 
  return kobj->name;
}

#line 873  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 932  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/efx.i.aux"
static int cif_device_create_file(struct device *device, struct device_attribute *entry);
#line 875  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 940  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/efx.i.aux"
static void cif_device_remove_file(struct device *dev, struct device_attribute *attr);
#line 1370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static char *dev_name(struct device *dev)
{
  #line 1373 
  if (dev->init_name != (char *)0) 
                                   #line 1374 
                                   return dev->init_name;
  #line 1376 
  return kobject_name(& dev->kobj);
}

#line 1417  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static void *dev_get_drvdata(struct device *dev)
{
  #line 1419 
  return dev->driver_data;
}

#line 1422  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static void dev_set_drvdata(struct device *dev, void *data)
{
  #line 1424 
  dev->driver_data = data;
  #line 1425 
  return;
}

#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hardirq.h"
#line 12 
void synchronize_irq(unsigned int);
#line 239  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 239 
void enable_irq(unsigned int);
#line 542  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 517  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/efx.i.aux"
static void *kmalloc(size_t size, gfp_t flags);
#line 607  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 531  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/efx.i.aux"
static void *kcalloc_0(size_t n, size_t size, gfp_t flags);
#line 668  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 552  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/efx.i.aux"
static void *kzalloc(size_t size, gfp_t flags);
#line 1131  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
#line 1131 
int pci_enable_device(struct pci_dev *);
#line 1157 
#line 1157 
void pci_disable_device(struct pci_dev *);
#line 1160 
#line 1160 
void pci_set_master(struct pci_dev *);
#line 1219 
#line 1219 
int pci_save_state(struct pci_dev *);
#line 1220 
#line 1220 
void pci_restore_state(struct pci_dev *);
#line 1233 
#line 1233 
int pci_set_power_state(struct pci_dev *, pci_power_t);
#line 1260 
#line 1260 
ssize_t pci_read_vpd(struct pci_dev *, loff_t, size_t, void *);
#line 1284 
#line 1284 
int pci_request_region(struct pci_dev *, int, char *);
#line 1285 
#line 1285 
void pci_release_region(struct pci_dev *, int);
#line 1346 
#line 972  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/efx.i.aux"
static int cif___pci_register_driver(struct pci_driver *ldv_func_arg1, struct module *ldv_func_arg2, char *mod_name);
#line 1352  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
#line 980  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/efx.i.aux"
static void cif_pci_unregister_driver(struct pci_driver *dev);
#line 1431  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
#line 1431 
void pci_disable_msi(struct pci_dev *);
#line 1433 
#line 1433 
void pci_disable_msix(struct pci_dev *);
#line 1436 
#line 1436 
int pci_enable_msi(struct pci_dev *);
#line 1437 
#line 1437 
int pci_enable_msix_range(struct pci_dev *, struct msix_entry *, int, int);
#line 1833  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static void *pci_get_drvdata(struct pci_dev *pdev)
{
  #line 1835 
  return dev_get_drvdata(& pdev->dev);
}

#line 1838  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static void pci_set_drvdata(struct pci_dev *pdev, void *data)
{
  #line 1840 
  dev_set_drvdata(& pdev->dev,data);
  #line 1841 
  return;
}

#line 1843  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static char *pci_name(struct pci_dev *pdev)
{
  #line 1845 
  return dev_name(& pdev->dev);
}

#line 2034 
#line 2034 
int pci_vfs_assigned(struct pci_dev *);
#line 2183  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static u16 pci_vpd_lrdt_size(u8 *lrdt)
{
  #line 2185 
  return (unsigned short)((int)((unsigned short)*(lrdt + 1U)) + ((int)((unsigned short)*(lrdt + 2U)) << 8U));
}

#line 2227  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static u8 pci_vpd_info_field_size(u8 *info_field)
{
  #line 2229 
  return *(info_field + 2U);
}

#line 2242 
#line 2242 
int pci_vpd_find_tag(u8 *, unsigned int, unsigned int, u8);
#line 2254 
#line 2254 
int pci_vpd_find_info_keyword(u8 *, unsigned int, unsigned int, char *);
#line 460  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
#line 460 
int dma_set_mask(struct device *, u64);
#line 461 
#line 461 
int dma_set_coherent_mask(struct device *, u64);
#line 669  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static int dma_set_mask_and_coherent(struct device *dev, u64 mask)
{
  #line 671 
  int rc = dma_set_mask(dev,mask);
  #line 672 
  if (rc == 0) 
               #line 673 
               dma_set_coherent_mask(dev,mask);
  #line 674 
  return rc;
}

#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
__inline static int dql_avail(struct dql *dql)
{
  #line 93 
  union __anonunion___u_2500 __u;
  #line 93 
  union __anonunion___u_2502 __u_0;
  #line 92 
  unsigned int tmp;
  #line 92 
  __read_once_size((void *)(& dql->adj_limit),(void *)(& __u.__c),4);
  #line 92 
  tmp = __u.__val;
  #line 92 
  __read_once_size((void *)(& dql->num_queued),(void *)(& __u_0.__c),4);
  #line 92 
  return (int)(tmp - (__u_0.__val));
}

#line 96 
#line 96 
void dql_completed(struct dql *, unsigned int);
#line 96  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
__inline static u32 ethtool_rxfh_indir_default(u32 index, u32 n_rx_rings)
{
  #line 98 
  return index % n_rx_rings;
}

#line 468  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 468 
bool napi_complete_done(struct napi_struct *, int);
#line 503 
#line 503 
void napi_disable(struct napi_struct *);
#line 512  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void napi_enable(struct napi_struct *n)
{
  #line 514 
  int tmp_0;
  #line 514 
  if (test_bit(0L,& n->state)) 
                               #line 514 
                               tmp_0 = 0; else 
                                               #line 514 
                                               tmp_0 = 1;
  #line 514 
  if ((long)tmp_0 != 0L) {
    #line 515 
    ldv_inline_asm();
    #line 516 
    ldv_inline_asm();
    #line 517 
    ldv_inline_asm();
    #line 514 
    ;
  }
  #line 516 
  cif_clear_bit(0L,& n->state);
  #line 517 
  cif_clear_bit(3L,& n->state);
  #line 518 
  return;
}

#line 2132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static struct netdev_queue *netdev_get_tx_queue(struct net_device *dev, unsigned int index)
{
  #line 2135 
  return dev->_tx + (unsigned long)index;
}

#line 2234 
#line 2234 
void netif_napi_add(struct net_device *, struct napi_struct *, int (*)(struct napi_struct *, int ), int);
#line 2263 
#line 2263 
void netif_napi_del(struct napi_struct *);
#line 2519 
#line 2519 
int register_netdevice_notifier(struct notifier_block *);
#line 2520 
#line 2520 
int unregister_netdevice_notifier(struct notifier_block *);
#line 2568  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static struct net_device *netdev_notifier_info_to_dev(struct netdev_notifier_info *info)
{
  #line 2570 
  return info->dev;
}

#line 2656 
#line 2656 
int dev_alloc_name(struct net_device *, char *);
#line 2658 
#line 2658 
void dev_close(struct net_device *);
#line 2669 
#line 2669 
int register_netdevice(struct net_device *);
#line 2670 
#line 2670 
void unregister_netdevice_queue(struct net_device *, struct list_head *);
#line 2672  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void unregister_netdevice(struct net_device *dev)
{
  #line 2674 
  unregister_netdevice_queue(dev,(struct list_head *)0);
  #line 2675 
  return;
}

#line 2679 
#line 956  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/efx.i.aux"
static void cif_free_netdev(struct net_device *dev);
#line 3094  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 3094 
void netif_schedule_queue(struct netdev_queue *);
#line 3130 
#line 3130 
void netif_tx_wake_queue(struct netdev_queue *);
#line 3144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_wake_all_queues(struct net_device *dev)
{
  #line 3146 
  unsigned int i;
  #line 3148 
  i = 0U;
  #line 3148 
  while (dev->num_tx_queues > i) {
    {
      #line 3149 
      struct netdev_queue *txq = netdev_get_tx_queue(dev,i);
      #line 3150 
      netif_tx_wake_queue(txq);
    }
    #line 3148 
    i ++;
  }
  #line 3152 
  return;
}

#line 3154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_stop_queue(struct netdev_queue *dev_queue)
{
  #line 3156 
  cif_set_bit(0L,& dev_queue->state);
  #line 3157 
  return;
}

#line 3301  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netdev_tx_completed_queue(struct netdev_queue *dev_queue, unsigned int pkts, unsigned int bytes)
{
  #line 3305 
  if ((long)(bytes == 0U) != 0L) 
                                 #line 3306 
                                 return;
  #line 3308 
  dql_completed(& dev_queue->dql,bytes);
  #line 3309 
  ldv_inline_asm();
  #line 3317 
  if ((long)(dql_avail(& dev_queue->dql) < 0) != 0L) 
                                                     #line 3318 
                                                     return;
  #line 3320 
  if ((int)test_and_clear_bit(1L,& dev_queue->state) != 0) 
                                                           #line 3321 
                                                           netif_schedule_queue(dev_queue);
  #line 3322 
  return;
}

#line 3387  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netif_running(struct net_device *dev)
{
  #line 3389 
  return test_bit(0L,& dev->state);
}

#line 3577 
#line 3577 
int netif_set_real_num_tx_queues(struct net_device *, unsigned int);
#line 3580 
#line 3580 
int netif_set_real_num_rx_queues(struct net_device *, unsigned int);
#line 3803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netif_carrier_ok(struct net_device *dev)
{
  #line 3805 
  int tmp_0;
  #line 3805 
  if ((int)test_bit(2L,& dev->state) != 0) 
                                           #line 3805 
                                           tmp_0 = 0; else 
                                                           #line 3805 
                                                           tmp_0 = 1;
  #line 3805 
  return (_Bool)(tmp_0 != 0);
}

#line 3812 
#line 3812 
void netif_carrier_on(struct net_device *);
#line 3814 
#line 3814 
void netif_carrier_off(struct net_device *);
#line 3876  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netif_device_present(struct net_device *dev)
{
  #line 3878 
  return test_bit(1L,& dev->state);
}

#line 3881 
#line 3881 
void netif_device_detach(struct net_device *);
#line 3883 
#line 3883 
void netif_device_attach(struct net_device *);
#line 3934  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void __netif_tx_lock(struct netdev_queue *txq, int cpu)
{
  #line 3936 
  cif_spin_lock__xmit_lock_of_netdev_queue(& txq->_xmit_lock);
  #line 3937 
  txq->xmit_lock_owner = cpu;
  #line 3938 
  return;
}

#line 3965  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void __netif_tx_unlock(struct netdev_queue *txq)
{
  #line 3967 
  txq->xmit_lock_owner = -1;
  #line 3968 
  cif_spin_unlock__xmit_lock_of_netdev_queue(& txq->_xmit_lock);
  #line 3969 
  return;
}

#line 3998  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_lock(struct net_device *dev)
{
  #line 4004 
  int pscr_ret__;
  #line 4000 
  unsigned int i;
  #line 4001 
  int cpu;
  #line 4003 
  cif_spin_lock_tx_global_lock_of_net_device(& dev->tx_global_lock);
  #line 4004 
  __this_cpu_preempt_check((char *)"read");
  {
    #line 4004 
    void *__vpp_verify = (void *)0;
    #line 4004 
    void *tmp = __vpp_verify;
  }
  #line 4004 
  switch (4UL) {
    #line 4004 
    int pfo_ret__;
    #line 4004 
    int pfo_ret___0;
    #line 4004 
    int pfo_ret___1;
    #line 4004 
    int pfo_ret___2;
    #line 4004 
    case (unsigned long)1: 
                           #line 4004 
    ;
    #line 4004 
    switch (4UL) {
      #line 4004 
      case (unsigned long)1: 
                             #line 4004 
      ;
      #line 4005 
      ldv_inline_asm();
      #line 4004 
      break;
      #line 4004 
      case (unsigned long)2: 
                             #line 4004 
      ;
      #line 4005 
      ldv_inline_asm();
      #line 4004 
      break;
      #line 4004 
      case (unsigned long)4: 
                             #line 4004 
      ;
      #line 4005 
      ldv_inline_asm();
      #line 4004 
      break;
      #line 4004 
      case (unsigned long)8: 
                             #line 4004 
      ;
      #line 4005 
      ldv_inline_asm();
      #line 4004 
      break;
      #line 4004 
      default: 
               #line 4004 
      ;
      #line 4004 
      __bad_percpu_size();
    }
    #line 4004 
    pscr_ret__ = pfo_ret__;
    #line 4004 
    break;
    #line 4004 
    case (unsigned long)2: 
                           #line 4004 
    ;
    #line 4004 
    switch (4UL) {
      #line 4004 
      case (unsigned long)1: 
                             #line 4004 
      ;
      #line 4005 
      ldv_inline_asm();
      #line 4004 
      break;
      #line 4004 
      case (unsigned long)2: 
                             #line 4004 
      ;
      #line 4005 
      ldv_inline_asm();
      #line 4004 
      break;
      #line 4004 
      case (unsigned long)4: 
                             #line 4004 
      ;
      #line 4005 
      ldv_inline_asm();
      #line 4004 
      break;
      #line 4004 
      case (unsigned long)8: 
                             #line 4004 
      ;
      #line 4005 
      ldv_inline_asm();
      #line 4004 
      break;
      #line 4004 
      default: 
               #line 4004 
      ;
      #line 4004 
      __bad_percpu_size();
    }
    #line 4004 
    pscr_ret__ = pfo_ret___0;
    #line 4004 
    break;
    #line 4004 
    case (unsigned long)4: 
                           #line 4004 
    ;
    #line 4004 
    switch (4UL) {
      #line 4004 
      case (unsigned long)1: 
                             #line 4004 
      ;
      #line 4005 
      ldv_inline_asm();
      #line 4004 
      break;
      #line 4004 
      case (unsigned long)2: 
                             #line 4004 
      ;
      #line 4005 
      ldv_inline_asm();
      #line 4004 
      break;
      #line 4004 
      case (unsigned long)4: 
                             #line 4004 
      ;
      #line 4005 
      ldv_inline_asm();
      #line 4004 
      break;
      #line 4004 
      case (unsigned long)8: 
                             #line 4004 
      ;
      #line 4005 
      ldv_inline_asm();
      #line 4004 
      break;
      #line 4004 
      default: 
               #line 4004 
      ;
      #line 4004 
      __bad_percpu_size();
    }
    #line 4004 
    pscr_ret__ = pfo_ret___1;
    #line 4004 
    break;
    #line 4004 
    case (unsigned long)8: 
                           #line 4004 
    ;
    #line 4004 
    switch (4UL) {
      #line 4004 
      case (unsigned long)1: 
                             #line 4004 
      ;
      #line 4005 
      ldv_inline_asm();
      #line 4004 
      break;
      #line 4004 
      case (unsigned long)2: 
                             #line 4004 
      ;
      #line 4005 
      ldv_inline_asm();
      #line 4004 
      break;
      #line 4004 
      case (unsigned long)4: 
                             #line 4004 
      ;
      #line 4005 
      ldv_inline_asm();
      #line 4004 
      break;
      #line 4004 
      case (unsigned long)8: 
                             #line 4004 
      ;
      #line 4005 
      ldv_inline_asm();
      #line 4004 
      break;
      #line 4004 
      default: 
               #line 4004 
      ;
      #line 4004 
      __bad_percpu_size();
    }
    #line 4004 
    pscr_ret__ = pfo_ret___2;
    #line 4004 
    break;
    #line 4004 
    default: 
             #line 4004 
    ;
    #line 4004 
    __bad_size_call_parameter();
    #line 4004 
    break;
  }
  #line 4004 
  cpu = pscr_ret__;
  #line 4005 
  i = 0U;
  #line 4005 
  while (dev->num_tx_queues > i) {
    {
      #line 4006 
      struct netdev_queue *txq = netdev_get_tx_queue(dev,i);
      #line 4014 
      __netif_tx_lock(txq,cpu);
      #line 4015 
      cif_set_bit(2L,& txq->state);
      #line 4016 
      __netif_tx_unlock(txq);
    }
    #line 4005 
    i ++;
  }
  #line 4018 
  return;
}

#line 4020  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_lock_bh(struct net_device *dev)
{
  #line 4022 
  local_bh_disable();
  #line 4023 
  netif_tx_lock(dev);
  #line 4024 
  return;
}

#line 4026  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_unlock(struct net_device *dev)
{
  #line 4028 
  unsigned int i;
  #line 4030 
  i = 0U;
  #line 4030 
  while (dev->num_tx_queues > i) {
    {
      #line 4031 
      struct netdev_queue *txq = netdev_get_tx_queue(dev,i);
      #line 4037 
      cif_clear_bit(2L,& txq->state);
      #line 4038 
      netif_schedule_queue(txq);
    }
    #line 4030 
    i ++;
  }
  #line 4040 
  cif_spin_unlock_tx_global_lock_of_net_device(& dev->tx_global_lock);
  #line 4041 
  return;
}

#line 4043  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_unlock_bh(struct net_device *dev)
{
  #line 4045 
  netif_tx_unlock(dev);
  #line 4046 
  local_bh_enable();
  #line 4047 
  return;
}

#line 4070  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_disable(struct net_device *dev)
{
  #line 4076 
  int pscr_ret__;
  #line 4072 
  unsigned int i;
  #line 4073 
  int cpu;
  #line 4075 
  local_bh_disable();
  #line 4076 
  __this_cpu_preempt_check((char *)"read");
  {
    #line 4076 
    void *__vpp_verify = (void *)0;
    #line 4076 
    void *tmp = __vpp_verify;
  }
  #line 4076 
  switch (4UL) {
    #line 4076 
    int pfo_ret___2;
    #line 4076 
    int pfo_ret__;
    #line 4076 
    int pfo_ret___0;
    #line 4076 
    int pfo_ret___1;
    #line 4076 
    case (unsigned long)1: 
                           #line 4076 
    ;
    #line 4076 
    switch (4UL) {
      #line 4076 
      case (unsigned long)1: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)2: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)4: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)8: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      default: 
               #line 4076 
      ;
      #line 4076 
      __bad_percpu_size();
    }
    #line 4076 
    pscr_ret__ = pfo_ret__;
    #line 4076 
    break;
    #line 4076 
    case (unsigned long)2: 
                           #line 4076 
    ;
    #line 4076 
    switch (4UL) {
      #line 4076 
      case (unsigned long)1: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)2: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)4: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)8: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      default: 
               #line 4076 
      ;
      #line 4076 
      __bad_percpu_size();
    }
    #line 4076 
    pscr_ret__ = pfo_ret___0;
    #line 4076 
    break;
    #line 4076 
    case (unsigned long)4: 
                           #line 4076 
    ;
    #line 4076 
    switch (4UL) {
      #line 4076 
      case (unsigned long)1: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)2: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)4: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)8: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      default: 
               #line 4076 
      ;
      #line 4076 
      __bad_percpu_size();
    }
    #line 4076 
    pscr_ret__ = pfo_ret___1;
    #line 4076 
    break;
    #line 4076 
    case (unsigned long)8: 
                           #line 4076 
    ;
    #line 4076 
    switch (4UL) {
      #line 4076 
      case (unsigned long)1: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)2: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)4: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      case (unsigned long)8: 
                             #line 4076 
      ;
      #line 4077 
      ldv_inline_asm();
      #line 4076 
      break;
      #line 4076 
      default: 
               #line 4076 
      ;
      #line 4076 
      __bad_percpu_size();
    }
    #line 4076 
    pscr_ret__ = pfo_ret___2;
    #line 4076 
    break;
    #line 4076 
    default: 
             #line 4076 
    ;
    #line 4076 
    __bad_size_call_parameter();
    #line 4076 
    break;
  }
  #line 4076 
  cpu = pscr_ret__;
  #line 4077 
  i = 0U;
  #line 4077 
  while (dev->num_tx_queues > i) {
    {
      #line 4078 
      struct netdev_queue *txq = netdev_get_tx_queue(dev,i);
      #line 4080 
      __netif_tx_lock(txq,cpu);
      #line 4081 
      netif_tx_stop_queue(txq);
      #line 4082 
      __netif_tx_unlock(txq);
    }
    #line 4077 
    i ++;
  }
  #line 4084 
  local_bh_enable();
  #line 4085 
  return;
}

#line 4092  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_addr_lock_bh(struct net_device *dev)
{
  #line 4094 
  cif_spin_lock_bh_addr_list_lock_of_net_device(& dev->addr_list_lock);
  #line 4095 
  return;
}

#line 4102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_addr_unlock_bh(struct net_device *dev)
{
  #line 4104 
  cif_spin_unlock_bh_addr_list_lock_of_net_device(& dev->addr_list_lock);
  #line 4105 
  return;
}

#line 4132 
#line 948  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/efx.i.aux"
static void cif_unregister_netdev(struct net_device *dev);
#line 4260  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 4260 
void netdev_features_change(struct net_device *);
#line 4371 
#line 4371 
void netdev_rss_key_fill(void *, size_t);
#line 4741 
#line 4741 
void netdev_printk(char *, struct net_device *, char * , ...);
#line 4752 
#line 4752 
void netdev_warn(struct net_device *, char * , ...);
#line 4754 
#line 4754 
void netdev_notice(struct net_device *, char * , ...);
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
#line 47 
int eth_validate_addr(struct net_device *);
#line 51 
#line 964  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/efx.i.aux"
static struct net_device *cif_alloc_etherdev_mqs(int sizeof_priv, unsigned int txqs, unsigned int rxqs);
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_zero_ether_addr(u8 *addr)
{
  #line 101 
  return (_Bool)((*((u32 *)addr) | (unsigned int)*((u16 *)(addr + 4U))) == 0U);
}

#line 191  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_valid_ether_addr(u8 *addr)
{
  #line 195 
  int tmp_1;
  #line 195 
  if (is_multicast_ether_addr(addr)) 
                                     #line 195 
                                     tmp_1 = 0;
  else {
    #line 195 
    if (is_zero_ether_addr(addr)) 
                                  #line 195 
                                  tmp_1 = 0; else 
                                                  #line 195 
                                                  tmp_1 = 1;
  }
  #line 195 
  return (_Bool)(tmp_1 != 0);
}

#line 276  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static void ether_addr_copy(u8 *dst, u8 *src)
{
  #line 279 
  *((u32 *)dst) = *((u32 *)src);
  #line 280 
  *((u16 *)(dst + 4U)) = *((u16 *)(src + 4U));
  #line 281 
  return;
}

#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rtnetlink.h"
#line 33 
void rtnl_lock(void);
#line 34 
#line 34 
void rtnl_unlock(void);
#line 36 
#line 36 
int rtnl_is_locked(void);
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/aer.h"
#line 45 
int pci_enable_pcie_error_reporting(struct pci_dev *);
#line 46 
#line 46 
int pci_disable_pcie_error_reporting(struct pci_dev *);
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mii.h"
__inline static struct mii_ioctl_data *if_mii(struct ifreq *rq)
{
  #line 53 
  return (struct mii_ioctl_data *)(& rq->ifr_ifru);
}

#line 187  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mdio.h"
#line 187 
int mdio_mii_ioctl(struct mdio_if_info *, struct mii_ioctl_data *, int);
#line 495  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/net_driver.h"
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
char *ef4_loopback_mode_names[27U];
#line 496  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/net_driver.h"
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
unsigned int ef4_loopback_mode_max;
#line 500  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/net_driver.h"
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
char *ef4_reset_type_names[13U];
#line 501  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/net_driver.h"
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
unsigned int ef4_reset_type_max;
#line 904  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/net_driver.h"
__inline static int ef4_dev_registered(struct ef4_nic *efx)
{
  #line 906 
  return (unsigned int)(efx->net_dev)->reg_state == 1U;
}

#line 1195  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/net_driver.h"
__inline static bool ef4_channel_has_tx_queues(struct ef4_channel *channel)
{
  #line 1197 
  return (_Bool)((unsigned int)channel->channel - (channel->efx)->tx_channel_offset < (channel->efx)->n_tx_channels);
}

#line 1209  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/net_driver.h"
__inline static bool ef4_tx_queue_used(struct ef4_tx_queue *tx_queue)
{
  #line 1211 
  return (_Bool)(((int)((tx_queue->efx)->net_dev)->num_tc > 1 || (tx_queue->queue & 2U) == 0U) != 0);
}

#line 1234  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/net_driver.h"
__inline static bool ef4_channel_has_rx_queue(struct ef4_channel *channel)
{
  #line 1236 
  return (_Bool)(channel->rx_queue.core_index >= 0);
}

#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.h"
#line 2059  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
int ef4_net_open(struct net_device *net_dev);
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.h"
#line 2086  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
int ef4_net_stop(struct net_device *net_dev);
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.h"
#line 23 
int ef4_probe_tx_queue(struct ef4_tx_queue *tx_queue);
#line 24 
#line 24 
void ef4_remove_tx_queue(struct ef4_tx_queue *tx_queue);
#line 25 
#line 25 
void ef4_init_tx_queue(struct ef4_tx_queue *tx_queue);
#line 26 
#line 26 
void ef4_init_tx_queue_core_txq(struct ef4_tx_queue *tx_queue);
#line 27 
#line 27 
void ef4_fini_tx_queue(struct ef4_tx_queue *tx_queue);
#line 28 
#line 28 
netdev_tx_t ef4_hard_start_xmit(struct sk_buff *skb, struct net_device *net_dev);
#line 32 
#line 32 
int ef4_setup_tc(struct net_device *net_dev, enum tc_setup_type type, void *type_data);
#line 34 
#line 34 
unsigned int ef4_tx_max_skb_descs(struct ef4_nic *efx);
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
bool ef4_separate_tx_channels;
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.h"
#line 1315  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
void ef4_set_default_rx_indir_table(struct ef4_nic *efx);
#line 80  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.h"
#line 968  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
void ef4_mac_reconfigure(struct ef4_nic *efx);
#line 167  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.h"
__inline static void ef4_filter_rfs_expire(struct ef4_channel *channel)
{
  #line 169 
  if (channel->rfs_filters_added > 59U) {
    #line 169 
    if ((int)__ef4_filter_rfs_expire(channel->efx,100U) != 0) 
                                                              #line 171 
                                                              channel->rfs_filters_added += 4294967236U;
  }
  #line 172 
  return;
}

#line 181 
#line 886  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
int ef4_channel_dummy_op_int(struct ef4_channel *channel);
#line 182  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.h"
#line 891  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
void ef4_channel_dummy_op_void(struct ef4_channel *channel);
#line 183  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.h"
#line 764  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
int ef4_realloc_channels(struct ef4_nic *efx, u32 rxq_entries, u32 txq_entries);
#line 186  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.h"
#line 1006  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
int ef4_reconfigure_port(struct ef4_nic *efx);
#line 187  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.h"
#line 982  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
int __ef4_reconfigure_port(struct ef4_nic *efx);
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.h"
#line 1313  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/ethtool.c"
struct ethtool_ops ef4_ethtool_ops;
#line 193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.h"
#line 2429  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
int ef4_reset(struct ef4_nic *efx, enum reset_type method);
#line 194  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.h"
#line 2356  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
void ef4_reset_down(struct ef4_nic *efx, enum reset_type method);
#line 195  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.h"
#line 2375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
int ef4_reset_up(struct ef4_nic *efx, enum reset_type method, bool ok);
#line 196  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.h"
#line 2488  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
int ef4_try_recovery(struct ef4_nic *efx);
#line 200  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.h"
#line 1890  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
unsigned int ef4_usecs_to_ticks(struct ef4_nic *efx, unsigned int usecs);
#line 201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.h"
#line 1899  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
unsigned int ef4_ticks_to_usecs(struct ef4_nic *efx, unsigned int ticks);
#line 202  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.h"
#line 1908  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
int ef4_init_irq_moderation(struct ef4_nic *efx, unsigned int tx_usecs, unsigned int rx_usecs, bool rx_adaptive, bool rx_may_override_tx);
#line 205  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.h"
#line 1941  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
void ef4_get_irq_moderation(struct ef4_nic *efx, unsigned int *tx_usecs, unsigned int *rx_usecs, bool *rx_adaptive);
#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.h"
#line 388  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
void ef4_stop_eventq(struct ef4_channel *channel);
#line 208  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.h"
#line 374  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
void ef4_start_eventq(struct ef4_channel *channel);
#line 211  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.h"
#line 2608  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
int ef4_port_dummy_op_int(struct ef4_nic *efx);
#line 212  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.h"
#line 2612  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
void ef4_port_dummy_op_void(struct ef4_nic *efx);
#line 215  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.h"
#line 2711  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
void ef4_update_sw_stats(struct ef4_nic *efx, u64 *stats);
#line 221  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.h"
__inline static int ef4_mtd_probe(struct ef4_nic *efx)
{
  #line 223 
  return (*((efx->type)->mtd_probe))(efx);
}

#line 225 
#line 225 
void ef4_mtd_rename(struct ef4_nic *efx);
#line 226 
#line 226 
void ef4_mtd_remove(struct ef4_nic *efx);
#line 248 
#line 905  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
void ef4_link_status_changed(struct ef4_nic *efx);
#line 250  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.h"
#line 948  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
void ef4_link_set_wanted_fc(struct ef4_nic *efx, u8 wanted_fc);
#line 252  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.h"
__inline static void ef4_device_detach_sync(struct ef4_nic *efx)
{
  #line 254 
  struct net_device *dev = efx->net_dev;
  #line 260 
  netif_tx_lock_bh(dev);
  #line 261 
  netif_device_detach(dev);
  #line 262 
  netif_tx_unlock_bh(dev);
  #line 263 
  return;
}

#line 302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/nic.h"
#line 2708  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon.c"
struct ef4_nic_type falcon_a1_nic_type;
#line 303  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/nic.h"
#line 2805  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon.c"
struct ef4_nic_type falcon_b0_nic_type;
#line 355  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/nic.h"
__inline static int ef4_nic_probe_eventq(struct ef4_channel *channel)
{
  #line 357 
  return (*(((channel->efx)->type)->ev_probe))(channel);
}

#line 359  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/nic.h"
__inline static int ef4_nic_init_eventq(struct ef4_channel *channel)
{
  #line 361 
  return (*(((channel->efx)->type)->ev_init))(channel);
}

#line 363  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/nic.h"
__inline static void ef4_nic_fini_eventq(struct ef4_channel *channel)
{
  #line 365 
  (*(((channel->efx)->type)->ev_fini))(channel);
  #line 366 
  return;
}

#line 367  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/nic.h"
__inline static void ef4_nic_remove_eventq(struct ef4_channel *channel)
{
  #line 369 
  (*(((channel->efx)->type)->ev_remove))(channel);
  #line 370 
  return;
}

#line 372  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/nic.h"
__inline static int ef4_nic_process_eventq(struct ef4_channel *channel, int quota)
{
  #line 374 
  return (*(((channel->efx)->type)->ev_process))(channel,quota);
}

#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/nic.h"
__inline static void ef4_nic_eventq_read_ack(struct ef4_channel *channel)
{
  #line 378 
  (*(((channel->efx)->type)->ev_read_ack))(channel);
  #line 379 
  return;
}

#line 454 
#line 454 
int ef4_nic_init_interrupt(struct ef4_nic *efx);
#line 456 
#line 456 
void ef4_nic_fini_interrupt(struct ef4_nic *efx);
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/selftest.h"
#line 48 
void ef4_selftest_async_start(struct ef4_nic *efx);
#line 49 
#line 49 
void ef4_selftest_async_cancel(struct ef4_nic *efx);
#line 50 
#line 50 
void ef4_selftest_async_work(struct work_struct *data);
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
unsigned int ef4_loopback_mode_max = 27U;
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
char *ef4_loopback_mode_names[27U] = {(char *)"NONE", (char *)"DATAPATH", (char *)"GMAC", (char *)"XGMII", (char *)"XGXS", (char *)"XAUI", (char *)"GMII", (char *)"SGMII", (char *)"XGBR", (char *)"XFI", (char *)"XAUI_FAR", (char *)"GMII_FAR", (char *)"SGMII_FAR", (char *)"XFI_FAR", (char *)"GPHY", (char *)"PHYXS", (char *)"PCS", (char *)"PMA/PMD", (char *)"XPORT", (char *)"XGMII_WS", (char *)"XAUI_WS", (char *)"XAUI_WS_FAR", (char *)"XAUI_WS_NEAR", (char *)"GMII_WS", (char *)"XFI_WS", (char *)"XFI_WS_FAR", (char *)"PHYXS_WS"};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
unsigned int ef4_reset_type_max = 13U;
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
char *ef4_reset_type_names[13U] = {(char *)"INVISIBLE", (char *)"RECOVER_OR_ALL", (char *)"ALL", (char *)"WORLD", (char *)"RECOVER_OR_DISABLE", (char *)"DATAPATH", (char *)"DISABLE", [8] = (char *)"TX_WATCHDOG", (char *)"INT_ERROR", (char *)"RX_RECOVERY", (char *)"DMA_ERROR", (char *)"TX_SKIP"};
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
static struct workqueue_struct *reset_workqueue;
#line 118  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
static int napi_weight = 64;
#line 128  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
static unsigned int ef4_monitor_interval = 250U;
#line 136  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
static unsigned int rx_irq_mod_usec = 60U;
#line 147  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
static unsigned int tx_irq_mod_usec = 150U;
#line 154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
static unsigned int interrupt_mode;
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
static unsigned int rss_cpus;
#line 167  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
static bool phy_flash_cfg;
#line 171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
static unsigned int irq_adapt_low_thresh = 8000U;
#line 176  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
static unsigned int irq_adapt_high_thresh = 16000U;
#line 181  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
static unsigned int debug = 8439U;
#line 194 
#line 1467 
static int ef4_soft_enable_interrupts(struct ef4_nic *efx);
#line 195 
#line 1500 
static void ef4_soft_disable_interrupts(struct ef4_nic *efx);
#line 196 
#line 739 
static void ef4_remove_channel(struct ef4_channel *channel);
#line 197 
#line 755 
static void ef4_remove_channels(struct ef4_nic *efx);
#line 198 
#line 878 
static struct ef4_channel_type ef4_default_channel_type;
#line 199 
#line 1137 
static void ef4_remove_port(struct ef4_nic *efx);
#line 200 
#line 2019 
static void ef4_init_napi_channel(struct ef4_channel *channel);
#line 201 
#line 2044 
static void ef4_fini_napi(struct ef4_nic *efx);
#line 202 
#line 2036 
static void ef4_fini_napi_channel(struct ef4_channel *channel);
#line 203 
#line 2696 
static void ef4_fini_struct(struct ef4_nic *efx);
#line 204 
#line 1817 
static void ef4_start_all(struct ef4_nic *efx);
#line 205 
#line 1848 
static void ef4_stop_all(struct ef4_nic *efx);
#line 215  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
static int ef4_check_disabled(struct ef4_nic *efx)
{
  #line 217 
  if ((unsigned int)efx->state + 4294967294U <= 1U) {
    #line 218 
    if ((efx->msg_enable & 1U) != 0U) 
                                      #line 218 
                                      netdev_err(efx->net_dev,(char *)"device is disabled due to earlier errors\n");
    #line 220 
    return -5;
  }
  #line 222 
  return 0;
}

#line 238  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
static int ef4_process_channel(struct ef4_channel *channel, int budget)
{
  #line 240 
  struct ef4_tx_queue *tx_queue;
  #line 241 
  int spent;
  #line 243 
  if ((long)(! channel->enabled) != 0L) 
                                        #line 244 
                                        return 0;
  #line 246 
  if (ef4_channel_has_tx_queues(channel)) {
    #line 246 
    tx_queue = (struct ef4_tx_queue *)(& channel->tx_queue);
    #line 246 
    while (1) {
      #line 246 
      if ((struct ef4_tx_queue *)(& channel->tx_queue) + 4U > tx_queue) {
        #line 246 
        if (! ((int)ef4_tx_queue_used(tx_queue) != 0)) 
                                                       #line 246 
                                                       break;
      }
      else 
           #line 246 
           break;
      #line 247 
      tx_queue->pkts_compl = 0U;
      #line 248 
      tx_queue->bytes_compl = 0U;
      #line 246 
      tx_queue ++;
    }
  }
  #line 251 
  spent = ef4_nic_process_eventq(channel,budget);
  #line 252 
  if (spent != 0) {
    #line 252 
    if ((int)ef4_channel_has_rx_queue(channel) != 0) {
      #line 253 
      struct ef4_rx_queue *rx_queue = ef4_channel_get_rx_queue(channel);
      #line 256 
      ef4_rx_flush_packet(channel);
      #line 257 
      ef4_fast_push_rx_descriptors(rx_queue,(_Bool)1);
    }
  }
  #line 261 
  if (ef4_channel_has_tx_queues(channel)) {
    #line 261 
    tx_queue = (struct ef4_tx_queue *)(& channel->tx_queue);
    #line 261 
    while (1) {
      #line 261 
      if ((struct ef4_tx_queue *)(& channel->tx_queue) + 4U > tx_queue) {
        #line 261 
        if (! ((int)ef4_tx_queue_used(tx_queue) != 0)) 
                                                       #line 261 
                                                       break;
      }
      else 
           #line 261 
           break;
      #line 262 
      if (tx_queue->bytes_compl != 0U) 
                                       #line 263 
                                       netdev_tx_completed_queue(tx_queue->core_txq,tx_queue->pkts_compl,tx_queue->bytes_compl);
      #line 261 
      tx_queue ++;
    }
  }
  #line 268 
  return spent;
}

#line 276  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
static void ef4_update_irq_mod(struct ef4_nic *efx, struct ef4_channel *channel)
{
  #line 278 
  int step = (int)efx->irq_mod_step_us;
  #line 280 
  if (channel->irq_mod_score < irq_adapt_low_thresh) {
    #line 281 
    if (channel->irq_moderation_us > (unsigned int)step) {
      #line 282 
      channel->irq_moderation_us -= (unsigned int)step;
      #line 283 
      (*((efx->type)->push_irq_moderation))(channel);
    }
  }
  else 
    #line 285 
    if (channel->irq_mod_score > irq_adapt_high_thresh) 
      #line 286 
      if (channel->irq_moderation_us < efx->irq_rx_moderation_us) {
        #line 288 
        channel->irq_moderation_us += (unsigned int)step;
        #line 289 
        (*((efx->type)->push_irq_moderation))(channel);
      }
  #line 293 
  channel->irq_count = 0U;
  #line 294 
  channel->irq_mod_score = 0U;
  #line 295 
  return;
}

#line 297  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
static int ef4_poll(struct napi_struct *napi, int budget)
{
  #line 300 
  void *__mptr;
  #line 302 
  int spent;
  #line 300 
  __mptr = (void *)napi;
  #line 299 
  struct ef4_channel *channel = ((struct ef4_channel *)(__mptr + 18446744073709551568U));
  #line 301 
  struct ef4_nic *efx = channel->efx;
  #line 304 
  if (0) 
    #line 304 
    if ((efx->msg_enable & 512U) != 0U) {
      #line 304 
      int pscr_ret__;
      {
        #line 304 
        void *__vpp_verify = (void *)0;
        #line 304 
        void *tmp_2 = __vpp_verify;
      }
      #line 304 
      switch (4UL) {
        #line 304 
        int pfo_ret___2;
        #line 304 
        int pfo_ret__;
        #line 304 
        int pfo_ret___0;
        #line 304 
        int pfo_ret___1;
        #line 304 
        case (unsigned long)1: 
                               #line 304 
        ;
        #line 304 
        switch (4UL) {
          #line 304 
          case (unsigned long)1: 
                                 #line 304 
          ;
          #line 305 
          ldv_inline_asm();
          #line 304 
          break;
          #line 304 
          case (unsigned long)2: 
                                 #line 304 
          ;
          #line 305 
          ldv_inline_asm();
          #line 304 
          break;
          #line 304 
          case (unsigned long)4: 
                                 #line 304 
          ;
          #line 305 
          ldv_inline_asm();
          #line 304 
          break;
          #line 304 
          case (unsigned long)8: 
                                 #line 304 
          ;
          #line 305 
          ldv_inline_asm();
          #line 304 
          break;
          #line 304 
          default: 
                   #line 304 
          ;
          #line 304 
          __bad_percpu_size();
        }
        #line 304 
        pscr_ret__ = pfo_ret__;
        #line 304 
        break;
        #line 304 
        case (unsigned long)2: 
                               #line 304 
        ;
        #line 304 
        switch (4UL) {
          #line 304 
          case (unsigned long)1: 
                                 #line 304 
          ;
          #line 305 
          ldv_inline_asm();
          #line 304 
          break;
          #line 304 
          case (unsigned long)2: 
                                 #line 304 
          ;
          #line 305 
          ldv_inline_asm();
          #line 304 
          break;
          #line 304 
          case (unsigned long)4: 
                                 #line 304 
          ;
          #line 305 
          ldv_inline_asm();
          #line 304 
          break;
          #line 304 
          case (unsigned long)8: 
                                 #line 304 
          ;
          #line 305 
          ldv_inline_asm();
          #line 304 
          break;
          #line 304 
          default: 
                   #line 304 
          ;
          #line 304 
          __bad_percpu_size();
        }
        #line 304 
        pscr_ret__ = pfo_ret___0;
        #line 304 
        break;
        #line 304 
        case (unsigned long)4: 
                               #line 304 
        ;
        #line 304 
        switch (4UL) {
          #line 304 
          case (unsigned long)1: 
                                 #line 304 
          ;
          #line 305 
          ldv_inline_asm();
          #line 304 
          break;
          #line 304 
          case (unsigned long)2: 
                                 #line 304 
          ;
          #line 305 
          ldv_inline_asm();
          #line 304 
          break;
          #line 304 
          case (unsigned long)4: 
                                 #line 304 
          ;
          #line 305 
          ldv_inline_asm();
          #line 304 
          break;
          #line 304 
          case (unsigned long)8: 
                                 #line 304 
          ;
          #line 305 
          ldv_inline_asm();
          #line 304 
          break;
          #line 304 
          default: 
                   #line 304 
          ;
          #line 304 
          __bad_percpu_size();
        }
        #line 304 
        pscr_ret__ = pfo_ret___1;
        #line 304 
        break;
        #line 304 
        case (unsigned long)8: 
                               #line 304 
        ;
        #line 304 
        switch (4UL) {
          #line 304 
          case (unsigned long)1: 
                                 #line 304 
          ;
          #line 305 
          ldv_inline_asm();
          #line 304 
          break;
          #line 304 
          case (unsigned long)2: 
                                 #line 304 
          ;
          #line 305 
          ldv_inline_asm();
          #line 304 
          break;
          #line 304 
          case (unsigned long)4: 
                                 #line 304 
          ;
          #line 305 
          ldv_inline_asm();
          #line 304 
          break;
          #line 304 
          case (unsigned long)8: 
                                 #line 304 
          ;
          #line 305 
          ldv_inline_asm();
          #line 304 
          break;
          #line 304 
          default: 
                   #line 304 
          ;
          #line 304 
          __bad_percpu_size();
        }
        #line 304 
        pscr_ret__ = pfo_ret___2;
        #line 304 
        break;
        #line 304 
        default: 
                 #line 304 
        ;
        #line 304 
        __bad_size_call_parameter();
        #line 304 
        break;
      }
      #line 304 
      ;
      #line 304 
      ;
      #line 304 
      netdev_printk((char *)"\001",efx->net_dev,(char *)"channel %d NAPI poll executing on CPU %d\n",channel->channel,pscr_ret__);
    }
  #line 308 
  spent = ef4_process_channel(channel,budget);
  #line 310 
  if (spent < budget) {
    #line 311 
    if ((int)ef4_channel_has_rx_queue(channel) != 0) 
      #line 311 
      if ((int)efx->irq_rx_adaptive != 0) {
        #line 313 
        (channel->irq_count) ++;
        #line 312 
        if ((long)(channel->irq_count == 1000U) != 0L) 
                                                       #line 314 
                                                       ef4_update_irq_mod(efx,channel);
      }
    #line 317 
    ef4_filter_rfs_expire(channel);
    #line 324 
    napi_complete_done(napi,spent);
    #line 325 
    ef4_nic_eventq_read_ack(channel);
  }
  #line 328 
  return spent;
}

#line 336  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
static int ef4_probe_eventq(struct ef4_channel *channel)
{
  #line 348 
  unsigned long __UNIQUE_ID___x554;
  #line 348 
  unsigned long tmp_67;
  #line 339 
  unsigned long entries;
  #line 338 
  struct ef4_nic *efx = channel->efx;
  #line 341 
  if ((efx->msg_enable & 2U) != 0U) {
    #line 341 
    bool branch;
    #line 341 
    struct _ddebug __UNIQUE_ID_ddebug553 = {.modname = (char *)"sfc_falcon", .function = (char *)"ef4_probe_eventq", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c", .format = (char *)"chan %d create event queue\n", .lineno = (unsigned int)341U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 341 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug553.key.dd_key_false.key,(_Bool)0);
    #line 341 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 341 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug553,efx->net_dev,(char *)"chan %d create event queue\n",channel->channel);
  }
  #line 346 
  if (0 != 0) {
    #line 346 
    unsigned long tmp_2;
    #line 346 
    unsigned long tmp_34;
    #line 346 
    unsigned long tmp_35;
    #line 346 
    unsigned long tmp_3;
    #line 346 
    unsigned long tmp_4;
    #line 346 
    unsigned long tmp_36;
    #line 346 
    unsigned long tmp_37;
    #line 346 
    unsigned long tmp_5;
    #line 346 
    unsigned long tmp_6;
    #line 346 
    unsigned long tmp_38;
    #line 346 
    unsigned long tmp_39;
    #line 346 
    unsigned long tmp_7;
    #line 346 
    unsigned long tmp_8;
    #line 346 
    unsigned long tmp_40;
    #line 346 
    unsigned long tmp_41;
    #line 346 
    unsigned long tmp_9;
    #line 346 
    unsigned long tmp_10;
    #line 346 
    unsigned long tmp_42;
    #line 346 
    unsigned long tmp_43;
    #line 346 
    unsigned long tmp_11;
    #line 346 
    unsigned long tmp_12;
    #line 346 
    unsigned long tmp_44;
    #line 346 
    unsigned long tmp_45;
    #line 346 
    unsigned long tmp_13;
    #line 346 
    unsigned long tmp_14;
    #line 346 
    unsigned long tmp_46;
    #line 346 
    unsigned long tmp_47;
    #line 346 
    unsigned long tmp_15;
    #line 346 
    unsigned long tmp_16;
    #line 346 
    unsigned long tmp_48;
    #line 346 
    unsigned long tmp_49;
    #line 346 
    unsigned long tmp_17;
    #line 346 
    unsigned long tmp_18;
    #line 346 
    unsigned long tmp_50;
    #line 346 
    unsigned long tmp_51;
    #line 346 
    unsigned long tmp_19;
    #line 346 
    unsigned long tmp_20;
    #line 346 
    unsigned long tmp_52;
    #line 346 
    unsigned long tmp_53;
    #line 346 
    unsigned long tmp_21;
    #line 346 
    unsigned long tmp_22;
    #line 346 
    unsigned long tmp_54;
    #line 346 
    unsigned long tmp_55;
    #line 346 
    unsigned long tmp_23;
    #line 346 
    unsigned long tmp_24;
    #line 346 
    unsigned long tmp_56;
    #line 346 
    unsigned long tmp_57;
    #line 346 
    unsigned long tmp_25;
    #line 346 
    unsigned long tmp_26;
    #line 346 
    unsigned long tmp_58;
    #line 346 
    unsigned long tmp_59;
    #line 346 
    unsigned long tmp_27;
    #line 346 
    unsigned long tmp_28;
    #line 346 
    unsigned long tmp_60;
    #line 346 
    unsigned long tmp_61;
    #line 346 
    unsigned long tmp_29;
    #line 346 
    unsigned long tmp_30;
    #line 346 
    unsigned long tmp_62;
    #line 346 
    unsigned long tmp_31;
    #line 346 
    unsigned long tmp_64;
    #line 346 
    unsigned long tmp_0;
    #line 346 
    unsigned long tmp_32;
    #line 346 
    unsigned long tmp_33;
    #line 346 
    unsigned long tmp_1;
    #line 346 
    unsigned long tmp_65;
    #line 346 
    if (efx->rxq_entries + efx->txq_entries != 4294967169U) {
      #line 346 
      if (0 != 0) {
        #line 346 
        if ((efx->rxq_entries + efx->txq_entries) + 127U > 1U) {
          #line 346 
          if (((unsigned long long)((efx->rxq_entries + efx->txq_entries) + 127U) & 9223372036854775808ULL) == 0ULL) {
            #line 346 
            if (((unsigned long long)((efx->rxq_entries + efx->txq_entries) + 127U) & 4611686018427387904ULL) == 0ULL) {
              #line 346 
              if (((unsigned long long)((efx->rxq_entries + efx->txq_entries) + 127U) & 2305843009213693952ULL) == 0ULL) {
                #line 346 
                if (((unsigned long long)((efx->rxq_entries + efx->txq_entries) + 127U) & 1152921504606846976ULL) == 0ULL) {
                  #line 346 
                  if (((unsigned long long)((efx->rxq_entries + efx->txq_entries) + 127U) & 576460752303423488ULL) == 0ULL) {
                    #line 346 
                    if (((unsigned long long)((efx->rxq_entries + efx->txq_entries) + 127U) & 288230376151711744ULL) == 0ULL) {
                      #line 346 
                      if (((unsigned long long)((efx->rxq_entries + efx->txq_entries) + 127U) & 144115188075855872ULL) == 0ULL) {
                        #line 346 
                        if (((unsigned long long)((efx->rxq_entries + efx->txq_entries) + 127U) & 72057594037927936ULL) == 0ULL) {
                          #line 346 
                          if (((unsigned long long)((efx->rxq_entries + efx->txq_entries) + 127U) & 36028797018963968ULL) == 0ULL) {
                            #line 346 
                            if (((unsigned long long)((efx->rxq_entries + efx->txq_entries) + 127U) & 18014398509481984ULL) == 0ULL) {
                              #line 346 
                              if (((unsigned long long)((efx->rxq_entries + efx->txq_entries) + 127U) & 9007199254740992ULL) == 0ULL) {
                                #line 346 
                                if (((unsigned long long)((efx->rxq_entries + efx->txq_entries) + 127U) & 4503599627370496ULL) == 0ULL) {
                                  #line 346 
                                  if (((unsigned long long)((efx->rxq_entries + efx->txq_entries) + 127U) & 2251799813685248ULL) == 0ULL) {
                                    #line 346 
                                    if (((unsigned long long)((efx->rxq_entries + efx->txq_entries) + 127U) & 1125899906842624ULL) == 0ULL) {
                                      #line 346 
                                      if (((unsigned long long)((efx->rxq_entries + efx->txq_entries) + 127U) & 562949953421312ULL) == 0ULL) {
                                        #line 346 
                                        if (((unsigned long long)((efx->rxq_entries + efx->txq_entries) + 127U) & 281474976710656ULL) == 0ULL) {
                                          #line 346 
                                          if (((unsigned long long)((efx->rxq_entries + efx->txq_entries) + 127U) & 140737488355328ULL) == 0ULL) {
                                            #line 346 
                                            if (((unsigned long long)((efx->rxq_entries + efx->txq_entries) + 127U) & 70368744177664ULL) == 0ULL) {
                                              #line 346 
                                              if (((unsigned long long)((efx->rxq_entries + efx->txq_entries) + 127U) & 35184372088832ULL) == 0ULL) {
                                                #line 346 
                                                if (((unsigned long long)((efx->rxq_entries + efx->txq_entries) + 127U) & 17592186044416ULL) == 0ULL) {
                                                  #line 346 
                                                  if (((unsigned long long)((efx->rxq_entries + efx->txq_entries) + 127U) & 8796093022208ULL) == 0ULL) {
                                                    #line 346 
                                                    if (((unsigned long long)((efx->rxq_entries + efx->txq_entries) + 127U) & 4398046511104ULL) == 0ULL) {
                                                      #line 346 
                                                      if (((unsigned long long)((efx->rxq_entries + efx->txq_entries) + 127U) & 2199023255552ULL) == 0ULL) {
                                                        #line 346 
                                                        if (((unsigned long long)((efx->rxq_entries + efx->txq_entries) + 127U) & 1099511627776ULL) == 0ULL) {
                                                          #line 346 
                                                          if (((unsigned long long)((efx->rxq_entries + efx->txq_entries) + 127U) & 549755813888ULL) == 0ULL) {
                                                            #line 346 
                                                            if (((unsigned long long)((efx->rxq_entries + efx->txq_entries) + 127U) & 274877906944ULL) == 0ULL) {
                                                              #line 346 
                                                              if (((unsigned long long)((efx->rxq_entries + efx->txq_entries) + 127U) & 137438953472ULL) == 0ULL) {
                                                                #line 346 
                                                                if (((unsigned long long)((efx->rxq_entries + efx->txq_entries) + 127U) & 68719476736ULL) == 0ULL) {
                                                                  #line 346 
                                                                  if (
                                                                    ((unsigned long long)((efx->rxq_entries + efx->txq_entries) + 127U) & 34359738368ULL) == 0ULL) {
                                                                    #line 346 
                                                                    if (
                                                                    ((unsigned long long)((efx->rxq_entries + efx->txq_entries) + 127U) & 17179869184ULL) == 0ULL) {
                                                                    #line 346 
                                                                    if (
                                                                    ((unsigned long long)((efx->rxq_entries + efx->txq_entries) + 127U) & 8589934592ULL) == 0ULL) {
                                                                    #line 346 
                                                                    if (
                                                                    ((unsigned long long)((efx->rxq_entries + efx->txq_entries) + 127U) & 4294967296ULL) == 0ULL) {
                                                                    #line 346 
                                                                    if (
                                                                    ((unsigned long long)((efx->rxq_entries + efx->txq_entries) + 127U) & 2147483648ULL) == 0ULL) {
                                                                    #line 346 
                                                                    if (
                                                                    ((unsigned long long)((efx->rxq_entries + efx->txq_entries) + 127U) & 1073741824ULL) == 0ULL) {
                                                                    #line 346 
                                                                    if (
                                                                    ((unsigned long long)((efx->rxq_entries + efx->txq_entries) + 127U) & 536870912ULL) == 0ULL) {
                                                                    #line 346 
                                                                    if (
                                                                    ((unsigned long long)((efx->rxq_entries + efx->txq_entries) + 127U) & 268435456ULL) == 0ULL) {
                                                                    #line 346 
                                                                    if (
                                                                    ((unsigned long long)((efx->rxq_entries + efx->txq_entries) + 127U) & 134217728ULL) == 0ULL) {
                                                                    #line 346 
                                                                    if (
                                                                    ((unsigned long long)((efx->rxq_entries + efx->txq_entries) + 127U) & 67108864ULL) == 0ULL) {
                                                                    #line 346 
                                                                    if (
                                                                    ((unsigned long long)((efx->rxq_entries + efx->txq_entries) + 127U) & 33554432ULL) == 0ULL) {
                                                                    #line 346 
                                                                    if (
                                                                    ((unsigned long long)((efx->rxq_entries + efx->txq_entries) + 127U) & 16777216ULL) == 0ULL) {
                                                                    #line 346 
                                                                    if (
                                                                    ((unsigned long long)((efx->rxq_entries + efx->txq_entries) + 127U) & 8388608ULL) == 0ULL) {
                                                                    #line 346 
                                                                    if (
                                                                    ((unsigned long long)((efx->rxq_entries + efx->txq_entries) + 127U) & 4194304ULL) == 0ULL) {
                                                                    #line 346 
                                                                    if (
                                                                    ((unsigned long long)((efx->rxq_entries + efx->txq_entries) + 127U) & 2097152ULL) == 0ULL) {
                                                                    #line 346 
                                                                    if (
                                                                    ((unsigned long long)((efx->rxq_entries + efx->txq_entries) + 127U) & 1048576ULL) == 0ULL) {
                                                                    #line 346 
                                                                    if (
                                                                    ((unsigned long long)((efx->rxq_entries + efx->txq_entries) + 127U) & 524288ULL) == 0ULL) {
                                                                    #line 346 
                                                                    if (
                                                                    ((unsigned long long)((efx->rxq_entries + efx->txq_entries) + 127U) & 262144ULL) == 0ULL) {
                                                                    #line 346 
                                                                    if (
                                                                    ((unsigned long long)((efx->rxq_entries + efx->txq_entries) + 127U) & 131072ULL) == 0ULL) {
                                                                    #line 346 
                                                                    if (
                                                                    ((unsigned long long)((efx->rxq_entries + efx->txq_entries) + 127U) & 65536ULL) == 0ULL) {
                                                                    #line 346 
                                                                    if (
                                                                    ((unsigned long long)((efx->rxq_entries + efx->txq_entries) + 127U) & 32768ULL) == 0ULL) {
                                                                    #line 346 
                                                                    if (
                                                                    ((unsigned long long)((efx->rxq_entries + efx->txq_entries) + 127U) & 16384ULL) == 0ULL) {
                                                                    #line 346 
                                                                    if (
                                                                    ((unsigned long long)((efx->rxq_entries + efx->txq_entries) + 127U) & 8192ULL) == 0ULL) {
                                                                    #line 346 
                                                                    if (
                                                                    ((unsigned long long)((efx->rxq_entries + efx->txq_entries) + 127U) & 4096ULL) == 0ULL) {
                                                                    #line 346 
                                                                    if (
                                                                    ((unsigned long long)((efx->rxq_entries + efx->txq_entries) + 127U) & 2048ULL) == 0ULL) {
                                                                    #line 346 
                                                                    if (
                                                                    ((unsigned long long)((efx->rxq_entries + efx->txq_entries) + 127U) & 1024ULL) == 0ULL) {
                                                                    #line 346 
                                                                    if (
                                                                    ((unsigned long long)((efx->rxq_entries + efx->txq_entries) + 127U) & 512ULL) == 0ULL) {
                                                                    #line 346 
                                                                    if (
                                                                    ((unsigned long long)((efx->rxq_entries + efx->txq_entries) + 127U) & 256ULL) == 0ULL) {
                                                                    #line 346 
                                                                    if (
                                                                    ((unsigned long long)((efx->rxq_entries + efx->txq_entries) + 127U) & 128ULL) == 0ULL) {
                                                                    #line 346 
                                                                    if (
                                                                    ((unsigned long long)((efx->rxq_entries + efx->txq_entries) + 127U) & 64ULL) == 0ULL) {
                                                                    #line 346 
                                                                    if (
                                                                    ((unsigned long long)((efx->rxq_entries + efx->txq_entries) + 127U) & 32ULL) == 0ULL) {
                                                                    #line 346 
                                                                    if (
                                                                    ((unsigned long long)((efx->rxq_entries + efx->txq_entries) + 127U) & 16ULL) == 0ULL) {
                                                                    #line 346 
                                                                    if (
                                                                    ((unsigned long long)((efx->rxq_entries + efx->txq_entries) + 127U) & 8ULL) == 0ULL) {
                                                                    #line 346 
                                                                    if (
                                                                    ((unsigned long long)((efx->rxq_entries + efx->txq_entries) + 127U) & 4ULL) != 0ULL) 
                                                                    #line 346 
                                                                    tmp_0 = 8UL; else 
                                                                    #line 346 
                                                                    tmp_0 = 4UL;
                                                                    #line 346 
                                                                    tmp_1 = tmp_0;
                                                                    }
                                                                    else 
                                                                    #line 346 
                                                                    tmp_1 = 16UL;
                                                                    #line 346 
                                                                    tmp_2 = tmp_1;
                                                                    }
                                                                    else 
                                                                    #line 346 
                                                                    tmp_2 = 32UL;
                                                                    #line 346 
                                                                    tmp_3 = tmp_2;
                                                                    }
                                                                    else 
                                                                    #line 346 
                                                                    tmp_3 = 64UL;
                                                                    #line 346 
                                                                    tmp_4 = tmp_3;
                                                                    }
                                                                    else 
                                                                    #line 346 
                                                                    tmp_4 = 128UL;
                                                                    #line 346 
                                                                    tmp_5 = tmp_4;
                                                                    }
                                                                    else 
                                                                    #line 346 
                                                                    tmp_5 = 256UL;
                                                                    #line 346 
                                                                    tmp_6 = tmp_5;
                                                                    }
                                                                    else 
                                                                    #line 346 
                                                                    tmp_6 = 512UL;
                                                                    #line 346 
                                                                    tmp_7 = tmp_6;
                                                                    }
                                                                    else 
                                                                    #line 346 
                                                                    tmp_7 = 1024UL;
                                                                    #line 346 
                                                                    tmp_8 = tmp_7;
                                                                    }
                                                                    else 
                                                                    #line 346 
                                                                    tmp_8 = 2048UL;
                                                                    #line 346 
                                                                    tmp_9 = tmp_8;
                                                                    }
                                                                    else 
                                                                    #line 346 
                                                                    tmp_9 = 4096UL;
                                                                    #line 346 
                                                                    tmp_10 = tmp_9;
                                                                    }
                                                                    else 
                                                                    #line 346 
                                                                    tmp_10 = 8192UL;
                                                                    #line 346 
                                                                    tmp_11 = tmp_10;
                                                                    }
                                                                    else 
                                                                    #line 346 
                                                                    tmp_11 = 16384UL;
                                                                    #line 346 
                                                                    tmp_12 = tmp_11;
                                                                    }
                                                                    else 
                                                                    #line 346 
                                                                    tmp_12 = 32768UL;
                                                                    #line 346 
                                                                    tmp_13 = tmp_12;
                                                                    }
                                                                    else 
                                                                    #line 346 
                                                                    tmp_13 = 65536UL;
                                                                    #line 346 
                                                                    tmp_14 = tmp_13;
                                                                    }
                                                                    else 
                                                                    #line 346 
                                                                    tmp_14 = 131072UL;
                                                                    #line 346 
                                                                    tmp_15 = tmp_14;
                                                                    }
                                                                    else 
                                                                    #line 346 
                                                                    tmp_15 = 262144UL;
                                                                    #line 346 
                                                                    tmp_16 = tmp_15;
                                                                    }
                                                                    else 
                                                                    #line 346 
                                                                    tmp_16 = 524288UL;
                                                                    #line 346 
                                                                    tmp_17 = tmp_16;
                                                                    }
                                                                    else 
                                                                    #line 346 
                                                                    tmp_17 = 1048576UL;
                                                                    #line 346 
                                                                    tmp_18 = tmp_17;
                                                                    }
                                                                    else 
                                                                    #line 346 
                                                                    tmp_18 = 2097152UL;
                                                                    #line 346 
                                                                    tmp_19 = tmp_18;
                                                                    }
                                                                    else 
                                                                    #line 346 
                                                                    tmp_19 = 4194304UL;
                                                                    #line 346 
                                                                    tmp_20 = tmp_19;
                                                                    }
                                                                    else 
                                                                    #line 346 
                                                                    tmp_20 = 8388608UL;
                                                                    #line 346 
                                                                    tmp_21 = tmp_20;
                                                                    }
                                                                    else 
                                                                    #line 346 
                                                                    tmp_21 = 16777216UL;
                                                                    #line 346 
                                                                    tmp_22 = tmp_21;
                                                                    }
                                                                    else 
                                                                    #line 346 
                                                                    tmp_22 = 33554432UL;
                                                                    #line 346 
                                                                    tmp_23 = tmp_22;
                                                                    }
                                                                    else 
                                                                    #line 346 
                                                                    tmp_23 = 67108864UL;
                                                                    #line 346 
                                                                    tmp_24 = tmp_23;
                                                                    }
                                                                    else 
                                                                    #line 346 
                                                                    tmp_24 = 134217728UL;
                                                                    #line 346 
                                                                    tmp_25 = tmp_24;
                                                                    }
                                                                    else 
                                                                    #line 346 
                                                                    tmp_25 = 268435456UL;
                                                                    #line 346 
                                                                    tmp_26 = tmp_25;
                                                                    }
                                                                    else 
                                                                    #line 346 
                                                                    tmp_26 = 536870912UL;
                                                                    #line 346 
                                                                    tmp_27 = tmp_26;
                                                                    }
                                                                    else 
                                                                    #line 346 
                                                                    tmp_27 = 1073741824UL;
                                                                    #line 346 
                                                                    tmp_28 = tmp_27;
                                                                    }
                                                                    else 
                                                                    #line 346 
                                                                    tmp_28 = 2147483648UL;
                                                                    #line 346 
                                                                    tmp_29 = tmp_28;
                                                                    }
                                                                    else 
                                                                    #line 346 
                                                                    tmp_29 = 4294967296UL;
                                                                    #line 346 
                                                                    tmp_30 = tmp_29;
                                                                    }
                                                                    else 
                                                                    #line 346 
                                                                    tmp_30 = 8589934592UL;
                                                                    #line 346 
                                                                    tmp_31 = tmp_30;
                                                                    }
                                                                    else 
                                                                    #line 346 
                                                                    tmp_31 = 17179869184UL;
                                                                    #line 346 
                                                                    tmp_32 = tmp_31;
                                                                    }
                                                                    else 
                                                                    #line 346 
                                                                    tmp_32 = 34359738368UL;
                                                                    #line 346 
                                                                    tmp_33 = tmp_32;
                                                                  }
                                                                  else 
                                                                    #line 346 
                                                                    tmp_33 = 68719476736UL;
                                                                  #line 346 
                                                                  tmp_34 = tmp_33;
                                                                }
                                                                else 
                                                                  #line 346 
                                                                  tmp_34 = 137438953472UL;
                                                                #line 346 
                                                                tmp_35 = tmp_34;
                                                              }
                                                              else 
                                                                   #line 346 
                                                                   tmp_35 = 274877906944UL;
                                                              #line 346 
                                                              tmp_36 = tmp_35;
                                                            }
                                                            else 
                                                                 #line 346 
                                                                 tmp_36 = 549755813888UL;
                                                            #line 346 
                                                            tmp_37 = tmp_36;
                                                          }
                                                          else 
                                                               #line 346 
                                                               tmp_37 = 1099511627776UL;
                                                          #line 346 
                                                          tmp_38 = tmp_37;
                                                        }
                                                        else 
                                                             #line 346 
                                                             tmp_38 = 2199023255552UL;
                                                        #line 346 
                                                        tmp_39 = tmp_38;
                                                      }
                                                      else 
                                                           #line 346 
                                                           tmp_39 = 4398046511104UL;
                                                      #line 346 
                                                      tmp_40 = tmp_39;
                                                    }
                                                    else 
                                                         #line 346 
                                                         tmp_40 = 8796093022208UL;
                                                    #line 346 
                                                    tmp_41 = tmp_40;
                                                  }
                                                  else 
                                                       #line 346 
                                                       tmp_41 = 17592186044416UL;
                                                  #line 346 
                                                  tmp_42 = tmp_41;
                                                }
                                                else 
                                                     #line 346 
                                                     tmp_42 = 35184372088832UL;
                                                #line 346 
                                                tmp_43 = tmp_42;
                                              }
                                              else 
                                                   #line 346 
                                                   tmp_43 = 70368744177664UL;
                                              #line 346 
                                              tmp_44 = tmp_43;
                                            }
                                            else 
                                                 #line 346 
                                                 tmp_44 = 140737488355328UL;
                                            #line 346 
                                            tmp_45 = tmp_44;
                                          }
                                          else 
                                               #line 346 
                                               tmp_45 = 281474976710656UL;
                                          #line 346 
                                          tmp_46 = tmp_45;
                                        }
                                        else 
                                             #line 346 
                                             tmp_46 = 562949953421312UL;
                                        #line 346 
                                        tmp_47 = tmp_46;
                                      }
                                      else 
                                           #line 346 
                                           tmp_47 = 1125899906842624UL;
                                      #line 346 
                                      tmp_48 = tmp_47;
                                    }
                                    else 
                                         #line 346 
                                         tmp_48 = 2251799813685248UL;
                                    #line 346 
                                    tmp_49 = tmp_48;
                                  }
                                  else 
                                       #line 346 
                                       tmp_49 = 4503599627370496UL;
                                  #line 346 
                                  tmp_50 = tmp_49;
                                }
                                else 
                                     #line 346 
                                     tmp_50 = 9007199254740992UL;
                                #line 346 
                                tmp_51 = tmp_50;
                              }
                              else 
                                   #line 346 
                                   tmp_51 = 18014398509481984UL;
                              #line 346 
                              tmp_52 = tmp_51;
                            }
                            else 
                                 #line 346 
                                 tmp_52 = 36028797018963968UL;
                            #line 346 
                            tmp_53 = tmp_52;
                          }
                          else 
                               #line 346 
                               tmp_53 = 72057594037927936UL;
                          #line 346 
                          tmp_54 = tmp_53;
                        }
                        else 
                             #line 346 
                             tmp_54 = 144115188075855872UL;
                        #line 346 
                        tmp_55 = tmp_54;
                      }
                      else 
                           #line 346 
                           tmp_55 = 288230376151711744UL;
                      #line 346 
                      tmp_56 = tmp_55;
                    }
                    else 
                         #line 346 
                         tmp_56 = 576460752303423488UL;
                    #line 346 
                    tmp_57 = tmp_56;
                  }
                  else 
                       #line 346 
                       tmp_57 = 1152921504606846976UL;
                  #line 346 
                  tmp_58 = tmp_57;
                }
                else 
                     #line 346 
                     tmp_58 = 2305843009213693952UL;
                #line 346 
                tmp_59 = tmp_58;
              }
              else 
                   #line 346 
                   tmp_59 = 4611686018427387904UL;
              #line 346 
              tmp_60 = tmp_59;
            }
            else 
                 #line 346 
                 tmp_60 = 9223372036854775808UL;
            #line 346 
            tmp_61 = tmp_60;
          }
          else 
               #line 346 
               tmp_61 = 0UL;
          #line 346 
          tmp_62 = tmp_61;
        }
        else 
             #line 346 
             tmp_62 = 2UL;
        #line 346 
        tmp_64 = tmp_62;
      }
      else {
        #line 346 
        tmp_64 = 1UL << (__ilog2_u32((efx->rxq_entries + efx->txq_entries) + 127U) + 1);
      }
      #line 346 
      tmp_65 = tmp_64;
    }
    else 
         #line 346 
         tmp_65 = 1UL;
    #line 346 
    entries = tmp_65;
  }
  else 
       #line 346 
       entries = __roundup_pow_of_two((unsigned long)((efx->rxq_entries + efx->txq_entries) + 128U));
  {
    #line 348 
    __UNIQUE_ID___x554 = entries;
    #line 348 
    unsigned long __UNIQUE_ID___y555 = 512UL;
    #line 348 
    if (__UNIQUE_ID___x554 > __UNIQUE_ID___y555) 
                                                 #line 348 
                                                 tmp_67 = __UNIQUE_ID___x554; else 
                                                                    #line 348 
                                                                    tmp_67 = __UNIQUE_ID___y555;
    }
  #line 348 
  channel->eventq_mask = (unsigned int)tmp_67 + 4294967295U;
  #line 350 
  return ef4_nic_probe_eventq(channel);
}

#line 354  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
static int ef4_init_eventq(struct ef4_channel *channel)
{
  #line 357 
  int rc;
  #line 356 
  struct ef4_nic *efx = channel->efx;
  #line 361 
  if ((efx->msg_enable & 1U) != 0U) {
    #line 361 
    bool branch;
    #line 361 
    struct _ddebug __UNIQUE_ID_ddebug556 = {.modname = (char *)"sfc_falcon", .function = (char *)"ef4_init_eventq", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c", .format = (char *)"chan %d init event queue\n", .lineno = (unsigned int)361U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 361 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug556.key.dd_key_false.key,(_Bool)0);
    #line 361 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 361 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug556,efx->net_dev,(char *)"chan %d init event queue\n",channel->channel);
  }
  #line 364 
  rc = ef4_nic_init_eventq(channel);
  #line 365 
  if (rc == 0) {
    #line 366 
    (*((efx->type)->push_irq_moderation))(channel);
    #line 367 
    channel->eventq_read_ptr = 0U;
    #line 368 
    channel->eventq_init = (_Bool)1;
  }
  #line 370 
  return rc;
}

#line 374  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
void ef4_start_eventq(struct ef4_channel *channel)
{
  #line 376 
  if (((channel->efx)->msg_enable & 32U) != 0U) {
    #line 376 
    bool branch;
    #line 376 
    struct _ddebug __UNIQUE_ID_ddebug557 = {.modname = (char *)"sfc_falcon", .function = (char *)"ef4_start_eventq", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c", .format = (char *)"chan %d start event queue\n", .lineno = (unsigned int)376U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 376 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug557.key.dd_key_false.key,(_Bool)0);
    #line 376 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 376 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug557,(channel->efx)->net_dev,(char *)"chan %d start event queue\n",channel->channel);
  }
  #line 380 
  channel->enabled = (_Bool)1;
  #line 381 
  ldv_inline_asm();
  #line 383 
  napi_enable(& channel->napi_str);
  #line 384 
  ef4_nic_eventq_read_ack(channel);
  #line 385 
  return;
}

#line 388  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
void ef4_stop_eventq(struct ef4_channel *channel)
{
  #line 390 
  if (! channel->enabled) 
                          #line 391 
                          return;
  #line 393 
  napi_disable(& channel->napi_str);
  #line 394 
  channel->enabled = (_Bool)0;
  #line 395 
  return;
}

#line 397  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
static void ef4_fini_eventq(struct ef4_channel *channel)
{
  #line 399 
  if (! channel->eventq_init) 
                              #line 400 
                              return;
  #line 402 
  if (((channel->efx)->msg_enable & 1U) != 0U) {
    #line 402 
    bool branch;
    #line 402 
    struct _ddebug __UNIQUE_ID_ddebug558 = {.modname = (char *)"sfc_falcon", .function = (char *)"ef4_fini_eventq", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c", .format = (char *)"chan %d fini event queue\n", .lineno = (unsigned int)402U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 402 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug558.key.dd_key_false.key,(_Bool)0);
    #line 402 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 402 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug558,(channel->efx)->net_dev,(char *)"chan %d fini event queue\n",channel->channel);
  }
  #line 405 
  ef4_nic_fini_eventq(channel);
  #line 406 
  channel->eventq_init = (_Bool)0;
  #line 407 
  return;
}

#line 409  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
static void ef4_remove_eventq(struct ef4_channel *channel)
{
  #line 411 
  if (((channel->efx)->msg_enable & 1U) != 0U) {
    #line 411 
    bool branch;
    #line 411 
    struct _ddebug __UNIQUE_ID_ddebug559 = {.modname = (char *)"sfc_falcon", .function = (char *)"ef4_remove_eventq", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c", .format = (char *)"chan %d remove event queue\n", .lineno = (unsigned int)411U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 411 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug559.key.dd_key_false.key,(_Bool)0);
    #line 411 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 411 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug559,(channel->efx)->net_dev,(char *)"chan %d remove event queue\n",channel->channel);
  }
  #line 414 
  ef4_nic_remove_eventq(channel);
  #line 415 
  return;
}

#line 425  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
static struct ef4_channel *ef4_alloc_channel(struct ef4_nic *efx, int i, struct ef4_channel *old_channel)
{
  #line 427 
  struct ef4_channel *channel;
  #line 428 
  struct ef4_rx_queue *rx_queue;
  #line 429 
  struct ef4_tx_queue *tx_queue;
  #line 430 
  int j;
  #line 432 
  channel = (struct ef4_channel *)kzalloc(2112UL,3264U);
  #line 433 
  if (channel == (struct ef4_channel *)0) 
                                          #line 434 
                                          return (struct ef4_channel *)0;
  #line 436 
  channel->efx = efx;
  #line 437 
  channel->channel = i;
  #line 438 
  channel->type = & ef4_default_channel_type;
  #line 440 
  j = 0;
  #line 440 
  while (j <= 3) {
    #line 441 
    tx_queue = & channel->tx_queue[j];
    #line 442 
    tx_queue->efx = efx;
    #line 443 
    tx_queue->queue = (unsigned int)(i * 4 + j);
    #line 444 
    tx_queue->channel = channel;
    #line 440 
    j ++;
  }
  #line 447 
  rx_queue = & channel->rx_queue;
  #line 448 
  rx_queue->efx = efx;
  {
    #line 449 
    struct lock_class_key __key;
    #line 449 
    init_timer_key(& rx_queue->slow_fill,& ef4_rx_slow_fill,0U,(char *)"(&rx_queue->slow_fill)",& __key);
  }
  #line 451 
  return channel;
}

#line 458  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
static struct ef4_channel *ef4_copy_channel(struct ef4_channel *old_channel)
{
  #line 460 
  struct ef4_channel *channel;
  #line 461 
  struct ef4_rx_queue *rx_queue;
  #line 462 
  struct ef4_tx_queue *tx_queue;
  #line 463 
  int j;
  #line 465 
  channel = (struct ef4_channel *)kmalloc(2112UL,3264U);
  #line 466 
  if (channel == (struct ef4_channel *)0) 
                                          #line 467 
                                          return (struct ef4_channel *)0;
  #line 469 
  *channel = *old_channel;
  #line 471 
  channel->napi_dev = (struct net_device *)0;
  #line 472 
  INIT_HLIST_NODE(& channel->napi_str.napi_hash_node);
  #line 473 
  channel->napi_str.napi_id = 0U;
  #line 474 
  channel->napi_str.state = 0UL;
  #line 475 
  memset((void *)(& channel->eventq),0,32UL);
  #line 477 
  j = 0;
  #line 477 
  while (j <= 3) {
    #line 478 
    tx_queue = & channel->tx_queue[j];
    #line 479 
    if (tx_queue->channel != (struct ef4_channel *)0) 
                                                      #line 480 
                                                      tx_queue->channel = channel;
    #line 481 
    tx_queue->buffer = (struct ef4_tx_buffer *)0;
    #line 482 
    memset((void *)(& tx_queue->txd),0,32UL);
    #line 477 
    j ++;
  }
  #line 485 
  rx_queue = & channel->rx_queue;
  #line 486 
  rx_queue->buffer = (struct ef4_rx_buffer *)0;
  #line 487 
  memset((void *)(& rx_queue->rxd),0,32UL);
  {
    #line 488 
    struct lock_class_key __key;
    #line 488 
    init_timer_key(& rx_queue->slow_fill,& ef4_rx_slow_fill,0U,(char *)"(&rx_queue->slow_fill)",& __key);
  }
  #line 490 
  return channel;
}

#line 493  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
static int ef4_probe_channel(struct ef4_channel *channel)
{
  #line 495 
  struct ef4_tx_queue *tx_queue;
  #line 496 
  struct ef4_rx_queue *rx_queue;
  #line 497 
  int rc;
  #line 499 
  if (((channel->efx)->msg_enable & 2U) != 0U) {
    #line 499 
    bool branch;
    #line 499 
    struct _ddebug __UNIQUE_ID_ddebug560 = {.modname = (char *)"sfc_falcon", .function = (char *)"ef4_probe_channel", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c", .format = (char *)"creating channel %d\n", .lineno = (unsigned int)499U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 499 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug560.key.dd_key_false.key,(_Bool)0);
    #line 499 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 499 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug560,(channel->efx)->net_dev,(char *)"creating channel %d\n",channel->channel);
  }
  #line 502 
  rc = (*((channel->type)->pre_probe))(channel);
  #line 503 
  if (rc != 0) 
               #line 504 
               goto fail;
  #line 506 
  rc = ef4_probe_eventq(channel);
  #line 507 
  if (rc != 0) 
               #line 508 
               goto fail;
  #line 510 
  if (ef4_channel_has_tx_queues(channel)) {
    #line 510 
    tx_queue = (struct ef4_tx_queue *)(& channel->tx_queue);
    #line 510 
    while (1) {
      #line 510 
      if ((struct ef4_tx_queue *)(& channel->tx_queue) + 4U > tx_queue) {
        #line 510 
        if (! ((int)ef4_tx_queue_used(tx_queue) != 0)) 
                                                       #line 510 
                                                       break;
      }
      else 
           #line 510 
           break;
      #line 511 
      rc = ef4_probe_tx_queue(tx_queue);
      #line 512 
      if (rc != 0) 
                   #line 513 
                   goto fail;
      #line 510 
      tx_queue ++;
    }
  }
  #line 516 
  if (ef4_channel_has_rx_queue(channel)) {
    #line 516 
    rx_queue = & channel->rx_queue;
    #line 516 
    while (rx_queue != (struct ef4_rx_queue *)0) {
      #line 517 
      rc = ef4_probe_rx_queue(rx_queue);
      #line 518 
      if (rc != 0) 
                   #line 519 
                   goto fail;
      #line 516 
      rx_queue = (struct ef4_rx_queue *)0;
    }
  }
  #line 522 
  return 0;
  #line 524 
  fail: 
        #line 524 
  ;
  #line 525 
  ef4_remove_channel(channel);
  #line 526 
  return rc;
}

#line 530  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
static void ef4_get_channel_name(struct ef4_channel *channel, char *buf, size_t len)
{
  #line 533 
  char *type;
  #line 534 
  int number;
  #line 532 
  struct ef4_nic *efx = channel->efx;
  #line 536 
  number = channel->channel;
  #line 537 
  if (efx->tx_channel_offset == 0U) 
                                    #line 538 
                                    type = (char *)"";
  else 
    #line 539 
    if ((unsigned int)channel->channel < efx->tx_channel_offset) 
                                                                 #line 540 
                                                                 type = (char *)"-rx";
    else {
      #line 542 
      type = (char *)"-tx";
      #line 543 
      number = (int)((unsigned int)number - efx->tx_channel_offset);
    }
  #line 545 
  snprintf(buf,len,(char *)"%s%s-%d",(char *)(& efx->name),type,number);
  #line 546 
  return;
}

#line 548  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
static void ef4_set_channel_names(struct ef4_nic *efx)
{
  #line 550 
  struct ef4_channel *channel;
  #line 552 
  channel = efx->channel[0];
  #line 552 
  while (channel != (struct ef4_channel *)0) {
    #line 553 
    (*((channel->type)->get_name))(channel,(char *)(& efx->msi_context[channel->channel].name),22UL);
    #line 552 
    if ((unsigned int)(channel->channel + 1) < efx->n_channels) 
                                                                #line 552 
                                                                channel = efx->channel[channel->channel + 1]; else 
                                                                    #line 552 
                                                                    channel = (struct ef4_channel *)0;
  }
  #line 555 
  return;
}

#line 558  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
static int ef4_probe_channels(struct ef4_nic *efx)
{
  #line 560 
  struct ef4_channel *channel;
  #line 561 
  int rc;
  #line 564 
  efx->next_buffer_table = 0U;
  #line 571 
  channel = efx->channel[efx->n_channels + 4294967295U];
  #line 571 
  while (channel != (struct ef4_channel *)0) {
    #line 572 
    rc = ef4_probe_channel(channel);
    #line 573 
    if (rc != 0) {
      #line 574 
      if ((efx->msg_enable & 2U) != 0U) 
                                        #line 574 
                                        netdev_err(efx->net_dev,(char *)"failed to create channel %d\n",channel->channel);
      #line 577 
      goto fail;
    }
    #line 571 
    if (channel->channel != 0) 
                               #line 571 
                               channel = efx->channel[channel->channel + -1]; else 
                                                                    #line 571 
                                                                    channel = (struct ef4_channel *)0;
  }
  #line 580 
  ef4_set_channel_names(efx);
  #line 582 
  return 0;
  #line 584 
  fail: 
        #line 584 
  ;
  #line 585 
  ef4_remove_channels(efx);
  #line 586 
  return rc;
}

#line 593  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
static void ef4_start_datapath(struct ef4_nic *efx)
{
  #line 597 
  struct ef4_tx_queue *tx_queue;
  #line 598 
  struct ef4_rx_queue *rx_queue;
  #line 599 
  struct ef4_channel *channel;
  #line 600 
  size_t rx_buf_len;
  #line 595 
  netdev_features_t old_features = (efx->net_dev)->features;
  #line 596 
  bool old_rx_scatter = efx->rx_scatter;
  #line 606 
  efx->rx_dma_len = (efx->rx_prefix_size + (((efx->net_dev)->mtu + 45U) & 4294967288U)) + (efx->type)->rx_buffer_padding;
  #line 609 
  rx_buf_len = ((unsigned long)efx->rx_ip_align + (unsigned long)efx->rx_dma_len) + 64UL;
  #line 611 
  if (rx_buf_len <= 4096UL) {
    #line 612 
    efx->rx_scatter = (efx->type)->always_rx_scatter;
    #line 613 
    efx->rx_buffer_order = 0U;
  }
  else 
    #line 614 
    if ((int)(efx->type)->can_rx_scatter != 0) {
      #line 620 
      efx->rx_scatter = (_Bool)1;
      #line 621 
      efx->rx_dma_len = 1792U;
      #line 622 
      efx->rx_buffer_order = 0U;
    }
    else {
      #line 624 
      efx->rx_scatter = (_Bool)0;
      #line 625 
      efx->rx_buffer_order = (unsigned int)get_order(rx_buf_len);
    }
  #line 628 
  ef4_rx_config_page_split(efx);
  #line 629 
  if (efx->rx_buffer_order != 0U) {
    #line 630 
    if ((efx->msg_enable & 1U) != 0U) {
      #line 630 
      bool branch;
      #line 630 
      struct _ddebug __UNIQUE_ID_ddebug561 = {.modname = (char *)"sfc_falcon", .function = (char *)"ef4_start_datapath", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c", .format = (char *)"RX buf len=%u; page order=%u batch=%u\n", .lineno = (unsigned int)630U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 630 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug561.key.dd_key_false.key,(_Bool)0);
      #line 630 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 630 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug561,efx->net_dev,(char *)"RX buf len=%u; page order=%u batch=%u\n",efx->rx_dma_len,efx->rx_buffer_order,efx->rx_pages_per_batch);
    }
  }
  else 
    #line 635 
    if ((efx->msg_enable & 1U) != 0U) {
      #line 635 
      bool branch_0;
      #line 635 
      struct _ddebug __UNIQUE_ID_ddebug562 = {.modname = (char *)"sfc_falcon", .function = (char *)"ef4_start_datapath", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c", .format = (char *)"RX buf len=%u step=%u bpp=%u; page batch=%u\n", .lineno = (unsigned int)635U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 635 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug562.key.dd_key_false.key,(_Bool)0);
      #line 635 
      if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                    #line 635 
                                                    __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug562,efx->net_dev,(char *)"RX buf len=%u step=%u bpp=%u; page batch=%u\n",efx->rx_dma_len,efx->rx_page_buf_step,efx->rx_bufs_per_page,efx->rx_pages_per_batch);
    }
  #line 643 
  (efx->net_dev)->hw_features |= (efx->net_dev)->features;
  #line 644 
  (efx->net_dev)->hw_features &= ~ efx->fixed_features;
  #line 645 
  (efx->net_dev)->features |= efx->fixed_features;
  #line 646 
  if ((efx->net_dev)->features != old_features) 
                                                #line 647 
                                                netdev_features_change(efx->net_dev);
  #line 650 
  if ((int)efx->rx_scatter != (int)old_rx_scatter) 
                                                   #line 651 
                                                   (*((efx->type)->filter_update_rx_scatter))(efx);
  #line 660 
  efx->txq_stop_thresh = efx->txq_entries - ef4_tx_max_skb_descs(efx);
  #line 661 
  efx->txq_wake_thresh = efx->txq_stop_thresh / 2U;
  #line 664 
  channel = efx->channel[0];
  #line 664 
  while (channel != (struct ef4_channel *)0) {
    {
      #line 665 
      if (ef4_channel_has_tx_queues(channel)) {
        #line 665 
        tx_queue = (struct ef4_tx_queue *)(& channel->tx_queue);
        #line 665 
        while (1) {
          #line 665 
          if ((struct ef4_tx_queue *)(& channel->tx_queue) + 4U > tx_queue) {
            #line 665 
            if (! ((int)ef4_tx_queue_used(tx_queue) != 0)) 
                                                           #line 665 
                                                           break;
          }
          else 
               #line 665 
               break;
          #line 666 
          ef4_init_tx_queue(tx_queue);
          #line 667 
          atomic_inc_0(& efx->active_queues);
          #line 665 
          tx_queue ++;
        }
      }
      #line 670 
      if (ef4_channel_has_rx_queue(channel)) {
        #line 670 
        rx_queue = & channel->rx_queue;
        #line 670 
        while (rx_queue != (struct ef4_rx_queue *)0) {
          #line 671 
          ef4_init_rx_queue(rx_queue);
          #line 672 
          atomic_inc_0(& efx->active_queues);
          #line 673 
          ef4_stop_eventq(channel);
          #line 674 
          ef4_fast_push_rx_descriptors(rx_queue,(_Bool)0);
          #line 675 
          ef4_start_eventq(channel);
          #line 670 
          rx_queue = (struct ef4_rx_queue *)0;
        }
      }
      {
        #line 678 
        int __ret_warn_on = channel->rx_pkt_n_frags != 0U;
        #line 678 
        if ((long)(__ret_warn_on != 0) != 0L) {
          #line 679 
          ldv_inline_asm();
          #line 680 
          ldv_inline_asm();
        }
        #line 678 
        long tmp_6 = (long)(__ret_warn_on != 0);
      }
    }
    #line 664 
    if ((unsigned int)(channel->channel + 1) < efx->n_channels) 
                                                                #line 664 
                                                                channel = efx->channel[channel->channel + 1]; else 
                                                                    #line 664 
                                                                    channel = (struct ef4_channel *)0;
  }
  #line 681 
  if ((int)netif_device_present(efx->net_dev) != 0) 
                                                    #line 682 
                                                    netif_tx_wake_all_queues(efx->net_dev);
  #line 683 
  return;
}

#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
static void ef4_stop_datapath(struct ef4_nic *efx)
{
  #line 687 
  struct ef4_channel *channel;
  #line 688 
  struct ef4_tx_queue *tx_queue;
  #line 689 
  struct ef4_rx_queue *rx_queue;
  #line 690 
  int rc;
  #line 692 
  if ((efx->state == (unsigned int)STATE_READY || efx->state == (unsigned int)STATE_RECOVERY) || efx->state == (unsigned int)STATE_DISABLED) {
    #line 692 
    bool __warned;
    #line 692 
    int __ret_warn_once = rtnl_is_locked() == 0;
    #line 692 
    if ((long)(__ret_warn_once != 0) != 0L && (long)(! __warned) != 0L) {
      #line 692 
      __warned = (_Bool)1;
      {
        #line 692 
        int __ret_warn_on = 1;
        #line 692 
        if ((long)(__ret_warn_on != 0) != 0L) {
          #line 692 
          __warn_printk((char *)"RTNL: assertion failed at %s (%d)\n",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c",692);
          #line 693 
          ldv_inline_asm();
          #line 694 
          ldv_inline_asm();
        }
        #line 692 
        long tmp_2 = (long)(__ret_warn_on != 0);
      }
    }
    #line 692 
    long tmp_4 = (long)(__ret_warn_once != 0);
  }
  #line 693 
  if ((long)((int)efx->port_enabled != 0) != 0L) {
    #line 694 
    ldv_inline_asm();
    #line 695 
    ldv_inline_asm();
    #line 696 
    ldv_inline_asm();
    #line 693 
    ;
  }
  #line 696 
  channel = efx->channel[0];
  #line 696 
  while (channel != (struct ef4_channel *)0) {
    #line 697 
    if (ef4_channel_has_rx_queue(channel)) {
      #line 697 
      rx_queue = & channel->rx_queue;
      #line 697 
      while (rx_queue != (struct ef4_rx_queue *)0) {
        #line 698 
        rx_queue->refill_enabled = (_Bool)0;
        #line 697 
        rx_queue = (struct ef4_rx_queue *)0;
      }
    }
    #line 696 
    if ((unsigned int)(channel->channel + 1) < efx->n_channels) 
                                                                #line 696 
                                                                channel = efx->channel[channel->channel + 1]; else 
                                                                    #line 696 
                                                                    channel = (struct ef4_channel *)0;
  }
  #line 701 
  channel = efx->channel[0];
  #line 701 
  while (channel != (struct ef4_channel *)0) {
    #line 708 
    if ((int)ef4_channel_has_rx_queue(channel) != 0) {
      #line 709 
      ef4_stop_eventq(channel);
      #line 710 
      ef4_start_eventq(channel);
    }
    #line 701 
    if ((unsigned int)(channel->channel + 1) < efx->n_channels) 
                                                                #line 701 
                                                                channel = efx->channel[channel->channel + 1]; else 
                                                                    #line 701 
                                                                    channel = (struct ef4_channel *)0;
  }
  #line 714 
  rc = (*((efx->type)->fini_dmaq))(efx);
  #line 715 
  if (rc != 0) {
    #line 715 
    if (ef4_nic_rev(efx) <= 2) {
      #line 721 
      if ((efx->msg_enable & 1U) != 0U) 
                                        #line 721 
                                        netdev_err(efx->net_dev,(char *)"Resetting to recover from flush failure\n");
      #line 723 
      ef4_schedule_reset(efx,(enum reset_type)RESET_TYPE_ALL);
    }
    else 
         #line 715 
         goto _LAND;
  }
  else {
    #line 715 
    _LAND: 
           #line 724 
    ;
    #line 724 
    if (rc != 0) {
      #line 725 
      if ((efx->msg_enable & 1U) != 0U) 
                                        #line 725 
                                        netdev_err(efx->net_dev,(char *)"failed to flush queues\n");
    }
    else 
      #line 727 
      if ((efx->msg_enable & 1U) != 0U) {
        #line 727 
        bool branch;
        #line 727 
        struct _ddebug __UNIQUE_ID_ddebug566 = {.modname = (char *)"sfc_falcon", .function = (char *)"ef4_stop_datapath", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c", .format = (char *)"successfully flushed all queues\n", .lineno = (unsigned int)727U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 727 
        branch = arch_static_branch(& __UNIQUE_ID_ddebug566.key.dd_key_false.key,(_Bool)0);
        #line 727 
        if ((long)((long)((int)branch != 0)) != 0L) 
                                                    #line 727 
                                                    __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug566,efx->net_dev,(char *)"successfully flushed all queues\n");
      }
  }
  #line 731 
  channel = efx->channel[0];
  #line 731 
  while (channel != (struct ef4_channel *)0) {
    {
      #line 732 
      if (ef4_channel_has_rx_queue(channel)) {
        #line 732 
        rx_queue = & channel->rx_queue;
        #line 732 
        while (rx_queue != (struct ef4_rx_queue *)0) {
          #line 733 
          ef4_fini_rx_queue(rx_queue);
          #line 732 
          rx_queue = (struct ef4_rx_queue *)0;
        }
      }
      #line 734 
      if (ef4_channel_has_tx_queues(channel)) {
        #line 734 
        tx_queue = (struct ef4_tx_queue *)(& channel->tx_queue);
        #line 734 
        while ((struct ef4_tx_queue *)(& channel->tx_queue) + 4U > tx_queue) {
          #line 735 
          ef4_fini_tx_queue(tx_queue);
          #line 734 
          tx_queue ++;
        }
      }
    }
    #line 731 
    if ((unsigned int)(channel->channel + 1) < efx->n_channels) 
                                                                #line 731 
                                                                channel = efx->channel[channel->channel + 1]; else 
                                                                    #line 731 
                                                                    channel = (struct ef4_channel *)0;
  }
  #line 738 
  return;
}

#line 739  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
static void ef4_remove_channel(struct ef4_channel *channel)
{
  #line 741 
  struct ef4_tx_queue *tx_queue;
  #line 742 
  struct ef4_rx_queue *rx_queue;
  #line 744 
  if (((channel->efx)->msg_enable & 1U) != 0U) {
    #line 744 
    bool branch;
    #line 744 
    struct _ddebug __UNIQUE_ID_ddebug567 = {.modname = (char *)"sfc_falcon", .function = (char *)"ef4_remove_channel", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c", .format = (char *)"destroy chan %d\n", .lineno = (unsigned int)744U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 744 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug567.key.dd_key_false.key,(_Bool)0);
    #line 744 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 744 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug567,(channel->efx)->net_dev,(char *)"destroy chan %d\n",channel->channel);
  }
  #line 747 
  if (ef4_channel_has_rx_queue(channel)) {
    #line 747 
    rx_queue = & channel->rx_queue;
    #line 747 
    while (rx_queue != (struct ef4_rx_queue *)0) {
      #line 748 
      ef4_remove_rx_queue(rx_queue);
      #line 747 
      rx_queue = (struct ef4_rx_queue *)0;
    }
  }
  #line 749 
  if (ef4_channel_has_tx_queues(channel)) {
    #line 749 
    tx_queue = (struct ef4_tx_queue *)(& channel->tx_queue);
    #line 749 
    while ((struct ef4_tx_queue *)(& channel->tx_queue) + 4U > tx_queue) {
      #line 750 
      ef4_remove_tx_queue(tx_queue);
      #line 749 
      tx_queue ++;
    }
  }
  #line 751 
  ef4_remove_eventq(channel);
  #line 752 
  (*((channel->type)->post_remove))(channel);
  #line 753 
  return;
}

#line 755  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
static void ef4_remove_channels(struct ef4_nic *efx)
{
  #line 757 
  struct ef4_channel *channel;
  #line 759 
  channel = efx->channel[0];
  #line 759 
  while (channel != (struct ef4_channel *)0) {
    #line 760 
    ef4_remove_channel(channel);
    #line 759 
    if ((unsigned int)(channel->channel + 1) < efx->n_channels) 
                                                                #line 759 
                                                                channel = efx->channel[channel->channel + 1]; else 
                                                                    #line 759 
                                                                    channel = (struct ef4_channel *)0;
  }
  #line 761 
  return;
}

#line 764  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
int ef4_realloc_channels(struct ef4_nic *efx, u32 rxq_entries, u32 txq_entries)
{
  #line 766 
  struct ef4_channel *other_channel[32U];
  #line 766 
  struct ef4_channel *channel;
  #line 767 
  u32 old_rxq_entries;
  #line 767 
  u32 old_txq_entries;
  #line 768 
  unsigned int i;
  #line 769 
  int rc;
  #line 769 
  int rc2;
  #line 768 
  unsigned int next_buffer_table = 0U;
  #line 771 
  rc = ef4_check_disabled(efx);
  #line 772 
  if (rc != 0) 
               #line 773 
               return rc;
  #line 778 
  channel = efx->channel[0];
  #line 778 
  while (channel != (struct ef4_channel *)0) {
    {
      #line 784 
      unsigned int __UNIQUE_ID___x568;
      #line 784 
      unsigned int tmp;
      #line 779 
      struct ef4_rx_queue *rx_queue;
      #line 780 
      struct ef4_tx_queue *tx_queue;
      #line 782 
      if ((channel->type)->copy != (struct ef4_channel *(*)(struct ef4_channel *))0) 
        #line 783 
        goto __Cont;
      {
        #line 784 
        __UNIQUE_ID___x568 = next_buffer_table;
        #line 784 
        unsigned int __UNIQUE_ID___y569 = channel->eventq.index + channel->eventq.entries;
        #line 784 
        if (__UNIQUE_ID___x568 > __UNIQUE_ID___y569) 
                                                     #line 784 
                                                     tmp = __UNIQUE_ID___x568; else 
                                                                    #line 784 
                                                                    tmp = __UNIQUE_ID___y569;
        }
      #line 784 
      next_buffer_table = tmp;
      #line 787 
      if (ef4_channel_has_rx_queue(channel)) {
        #line 787 
        rx_queue = & channel->rx_queue;
        #line 787 
        while (rx_queue != (struct ef4_rx_queue *)0) {
          #line 788 
          unsigned int __UNIQUE_ID___x570;
          #line 788 
          unsigned int tmp_1;
          {
            #line 788 
            __UNIQUE_ID___x570 = next_buffer_table;
            #line 788 
            unsigned int __UNIQUE_ID___y571 = rx_queue->rxd.index + rx_queue->rxd.entries;
            #line 788 
            if (__UNIQUE_ID___x570 > __UNIQUE_ID___y571) 
                                                         #line 788 
                                                         tmp_1 = __UNIQUE_ID___x570; else 
                                                                    #line 788 
                                                                    tmp_1 = __UNIQUE_ID___y571;
            }
          #line 788 
          next_buffer_table = tmp_1;
          #line 787 
          rx_queue = (struct ef4_rx_queue *)0;
        }
      }
      #line 791 
      if (ef4_channel_has_tx_queues(channel)) {
        #line 791 
        tx_queue = (struct ef4_tx_queue *)(& channel->tx_queue);
        #line 791 
        while (1) {
          #line 792 
          unsigned int __UNIQUE_ID___x572;
          #line 792 
          unsigned int tmp_4;
          #line 791 
          if ((struct ef4_tx_queue *)(& channel->tx_queue) + 4U > tx_queue) {
            #line 791 
            if (! ((int)ef4_tx_queue_used(tx_queue) != 0)) 
                                                           #line 791 
                                                           break;
          }
          else 
               #line 791 
               break;
          {
            #line 792 
            __UNIQUE_ID___x572 = next_buffer_table;
            #line 792 
            unsigned int __UNIQUE_ID___y573 = tx_queue->txd.index + tx_queue->txd.entries;
            #line 792 
            if (__UNIQUE_ID___x572 > __UNIQUE_ID___y573) 
                                                         #line 792 
                                                         tmp_4 = __UNIQUE_ID___x572; else 
                                                                    #line 792 
                                                                    tmp_4 = __UNIQUE_ID___y573;
            }
          #line 792 
          next_buffer_table = tmp_4;
          #line 791 
          tx_queue ++;
        }
      }
    }
    #line 778 
    __Cont: 
            #line 778 
            if ((unsigned int)(channel->channel + 1) < efx->n_channels) 
              #line 778 
              channel = efx->channel[channel->channel + 1]; else 
                                                                 #line 778 
                                                                 channel = (struct ef4_channel *)0;
  }
  #line 797 
  ef4_device_detach_sync(efx);
  #line 798 
  ef4_stop_all(efx);
  #line 799 
  ef4_soft_disable_interrupts(efx);
  #line 802 
  memset((void *)(& other_channel),0,256UL);
  #line 803 
  i = 0U;
  #line 803 
  while (efx->n_channels > i) {
    #line 804 
    channel = efx->channel[i];
    #line 805 
    if ((channel->type)->copy != (struct ef4_channel *(*)(struct ef4_channel *))0) 
      #line 806 
      channel = (*((channel->type)->copy))(channel);
    #line 807 
    if (channel == (struct ef4_channel *)0) {
      #line 808 
      rc = -12;
      #line 809 
      goto out;
    }
    #line 811 
    other_channel[i] = channel;
    #line 803 
    i ++;
  }
  #line 815 
  old_rxq_entries = efx->rxq_entries;
  #line 816 
  old_txq_entries = efx->txq_entries;
  #line 817 
  efx->rxq_entries = rxq_entries;
  #line 818 
  efx->txq_entries = txq_entries;
  #line 819 
  i = 0U;
  #line 819 
  while (efx->n_channels > i) {
    #line 820 
    channel = efx->channel[i];
    #line 821 
    efx->channel[i] = other_channel[i];
    #line 822 
    other_channel[i] = channel;
    #line 819 
    i ++;
  }
  #line 826 
  efx->next_buffer_table = next_buffer_table;
  #line 828 
  i = 0U;
  #line 828 
  while (efx->n_channels > i) {
    #line 829 
    channel = efx->channel[i];
    #line 830 
    if ((channel->type)->copy == (struct ef4_channel *(*)(struct ef4_channel *))0) 
      #line 831 
      goto __Cont_0;
    #line 832 
    rc = ef4_probe_channel(channel);
    #line 833 
    if (rc != 0) 
                 #line 834 
                 goto rollback;
    #line 835 
    ef4_init_napi_channel(efx->channel[i]);
    #line 828 
    __Cont_0: 
              #line 828 
    i ++;
  }
  #line 838 
  out: 
       #line 838 
  ;
  #line 840 
  i = 0U;
  #line 840 
  while (efx->n_channels > i) {
    #line 841 
    channel = other_channel[i];
    #line 842 
    if (channel != (struct ef4_channel *)0 && (channel->type)->copy != (struct ef4_channel *(*)(struct ef4_channel *))0) {
      #line 843 
      ef4_fini_napi_channel(channel);
      #line 844 
      ef4_remove_channel(channel);
      #line 845 
      kfree((void *)channel);
    }
    #line 840 
    i ++;
  }
  #line 849 
  rc2 = ef4_soft_enable_interrupts(efx);
  #line 850 
  if (rc2 != 0) {
    #line 851 
    if (rc != 0) 
                 #line 851 
                 rc = rc; else 
                               #line 851 
                               rc = rc2;
    #line 852 
    if ((efx->msg_enable & 1U) != 0U) 
                                      #line 852 
                                      netdev_err(efx->net_dev,(char *)"unable to restart interrupts on channel reallocation\n");
    #line 854 
    ef4_schedule_reset(efx,(enum reset_type)RESET_TYPE_DISABLE);
  }
  else {
    #line 856 
    ef4_start_all(efx);
    #line 857 
    netif_device_attach(efx->net_dev);
  }
  #line 859 
  return rc;
  #line 861 
  rollback: 
            #line 861 
  ;
  #line 863 
  efx->rxq_entries = old_rxq_entries;
  #line 864 
  efx->txq_entries = old_txq_entries;
  #line 865 
  i = 0U;
  #line 865 
  while (efx->n_channels > i) {
    #line 866 
    channel = efx->channel[i];
    #line 867 
    efx->channel[i] = other_channel[i];
    #line 868 
    other_channel[i] = channel;
    #line 865 
    i ++;
  }
  #line 870 
  goto out;
}

#line 873  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
void ef4_schedule_slow_fill(struct ef4_rx_queue *rx_queue)
{
  #line 875 
  ;
  #line 875 
  ;
  #line 875 
  cif_mod_timer(& rx_queue->slow_fill,msecs_to_jiffies(100U) + jiffies);
  #line 876 
  return;
}

#line 878  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
static struct ef4_channel_type ef4_default_channel_type = {.pre_probe = & ef4_channel_dummy_op_int, .post_remove = & ef4_channel_dummy_op_void, .get_name = & ef4_get_channel_name, .copy = & ef4_copy_channel};
#line 886  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
int ef4_channel_dummy_op_int(struct ef4_channel *channel)
{
  #line 888 
  return 0;
}

#line 891  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
void ef4_channel_dummy_op_void(struct ef4_channel *channel)
{
  #line 893 
  return;
}

#line 905  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
void ef4_link_status_changed(struct ef4_nic *efx)
{
  #line 907 
  struct ef4_link_state *link_state = & efx->link_state;
  #line 913 
  if (! netif_running(efx->net_dev)) 
                                     #line 914 
                                     return;
  #line 916 
  ;
  #line 916 
  if ((int)link_state->up != (int)netif_carrier_ok(efx->net_dev)) {
    #line 917 
    (efx->n_link_state_changes) ++;
    #line 919 
    if ((int)link_state->up != 0) 
                                  #line 920 
                                  netif_carrier_on(efx->net_dev); else 
                                                                    #line 922 
                                                                    netif_carrier_off(efx->net_dev);
  }
  #line 926 
  if ((int)link_state->up != 0) {
    #line 927 
    if ((efx->msg_enable & 4U) != 0U) {
      #line 927 
      char *tmp_1;
      #line 927 
      ;
      #line 927 
      if ((int)link_state->fd != 0) 
                                    #line 927 
                                    tmp_1 = (char *)"full"; else 
                                                                 #line 927 
                                                                 tmp_1 = (char *)"half";
      #line 927 
      ;
      #line 927 
      ;
      #line 927 
      netdev_info(efx->net_dev,(char *)"link up at %uMbps %s-duplex (MTU %d)\n",link_state->speed,tmp_1,(efx->net_dev)->mtu);
    }
  }
  else 
    #line 932 
    if ((efx->msg_enable & 4U) != 0U) 
                                      #line 932 
                                      netdev_info(efx->net_dev,(char *)"link down\n");
  #line 933 
  return;
}

#line 935  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
void ef4_link_set_advertising(struct ef4_nic *efx, u32 advertising)
{
  #line 937 
  efx->link_advertising = advertising;
  #line 938 
  if (advertising != 0U) {
    #line 939 
    if (((unsigned long)advertising & 8192UL) != 0UL) 
                                                      #line 940 
                                                      efx->wanted_fc = (unsigned char)((unsigned int)efx->wanted_fc | 3U); else 
                                                                    #line 942 
                                                                    efx->wanted_fc = (unsigned char)((unsigned int)efx->wanted_fc & 252U);
    #line 943 
    if (((unsigned long)advertising & 16384UL) != 0UL) 
                                                       #line 944 
                                                       efx->wanted_fc = (unsigned char)((unsigned int)efx->wanted_fc ^ 1U);
  }
  #line 946 
  return;
}

#line 948  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
void ef4_link_set_wanted_fc(struct ef4_nic *efx, u8 wanted_fc)
{
  #line 950 
  efx->wanted_fc = wanted_fc;
  #line 951 
  if (efx->link_advertising != 0U) {
    #line 952 
    if (((int)wanted_fc & 2) != 0) 
                                   #line 953 
                                   efx->link_advertising |= 24576U; else 
                                                                    #line 956 
                                                                    efx->link_advertising &= 4294942719U;
    #line 958 
    if (((int)wanted_fc & 1) != 0) 
                                   #line 959 
                                   efx->link_advertising ^= 16384U;
  }
  #line 961 
  return;
}

#line 963 
#line 1123 
static void ef4_fini_port(struct ef4_nic *efx);
#line 968  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
void ef4_mac_reconfigure(struct ef4_nic *efx)
{
  #line 970 
  down_read(& efx->filter_sem);
  #line 971 
  (*((efx->type)->reconfigure_mac))(efx);
  #line 972 
  up_read(& efx->filter_sem);
  #line 973 
  return;
}

#line 982  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
int __ef4_reconfigure_port(struct ef4_nic *efx)
{
  #line 984 
  enum ef4_phy_mode phy_mode;
  #line 985 
  int rc;
  {
    #line 987 
    int tmp_0;
    #line 987 
    if (mutex_is_locked(& efx->mac_lock)) 
                                          #line 987 
                                          tmp_0 = 0; else 
                                                          #line 987 
                                                          tmp_0 = 1;
    #line 987 
    int __ret_warn_on = tmp_0;
    #line 987 
    if ((long)(__ret_warn_on != 0) != 0L) {
      #line 988 
      ldv_inline_asm();
      #line 989 
      ldv_inline_asm();
    }
    #line 987 
    long tmp_2 = (long)(__ret_warn_on != 0);
  }
  #line 990 
  phy_mode = efx->phy_mode;
  #line 991 
  if (((66600958 >> (unsigned int)efx->loopback_mode) & 1) != 0) 
                                                                 #line 992 
                                                                 efx->phy_mode = (enum ef4_phy_mode)((unsigned int)efx->phy_mode | 1U); else 
                                                                    #line 994 
                                                                    efx->phy_mode = (enum ef4_phy_mode)((unsigned int)efx->phy_mode & 4294967294U);
  #line 996 
  rc = (*((efx->type)->reconfigure_port))(efx);
  #line 998 
  if (rc != 0) 
               #line 999 
               efx->phy_mode = phy_mode;
  #line 1001 
  return rc;
}

#line 1006  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
int ef4_reconfigure_port(struct ef4_nic *efx)
{
  #line 1008 
  int rc;
  #line 1010 
  if ((efx->state == (unsigned int)STATE_READY || efx->state == (unsigned int)STATE_RECOVERY) || efx->state == (unsigned int)STATE_DISABLED) {
    #line 1010 
    bool __warned;
    #line 1010 
    int __ret_warn_once = rtnl_is_locked() == 0;
    #line 1010 
    if ((long)(__ret_warn_once != 0) != 0L && (long)(! __warned) != 0L) {
      #line 1010 
      __warned = (_Bool)1;
      {
        #line 1010 
        int __ret_warn_on = 1;
        #line 1010 
        if ((long)(__ret_warn_on != 0) != 0L) {
          #line 1010 
          __warn_printk((char *)"RTNL: assertion failed at %s (%d)\n",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c",1010);
          #line 1011 
          ldv_inline_asm();
          #line 1012 
          ldv_inline_asm();
        }
        #line 1010 
        long tmp_2 = (long)(__ret_warn_on != 0);
      }
    }
    #line 1010 
    long tmp_4 = (long)(__ret_warn_once != 0);
  }
  #line 1012 
  cif_mutex_lock_mac_lock_of_ef4_nic_0(& efx->mac_lock);
  #line 1013 
  rc = __ef4_reconfigure_port(efx);
  #line 1014 
  cif_mutex_unlock_mac_lock_of_ef4_nic_0(& efx->mac_lock);
  #line 1016 
  return rc;
}

#line 1022  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
static void ef4_mac_work(struct work_struct *data)
{
  #line 1024 
  void *__mptr;
  #line 1024 
  __mptr = (void *)data;
  #line 1024 
  struct ef4_nic *efx = ((struct ef4_nic *)(__mptr + 18446744073709548736U));
  #line 1026 
  cif_mutex_lock_mac_lock_of_ef4_nic_0(& efx->mac_lock);
  #line 1027 
  if ((int)efx->port_enabled != 0) 
                                   #line 1028 
                                   ef4_mac_reconfigure(efx);
  #line 1029 
  cif_mutex_unlock_mac_lock_of_ef4_nic_0(& efx->mac_lock);
  #line 1030 
  return;
}

#line 1032  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
static int ef4_probe_port(struct ef4_nic *efx)
{
  #line 1034 
  int rc;
  #line 1036 
  if ((efx->msg_enable & 2U) != 0U) {
    #line 1036 
    bool branch;
    #line 1036 
    struct _ddebug __UNIQUE_ID_ddebug576 = {.modname = (char *)"sfc_falcon", .function = (char *)"ef4_probe_port", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c", .format = (char *)"create port\n", .lineno = (unsigned int)1036U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1036 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug576.key.dd_key_false.key,(_Bool)0);
    #line 1036 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 1036 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug576,efx->net_dev,(char *)"create port\n");
  }
  #line 1038 
  if ((int)phy_flash_cfg != 0) 
                               #line 1039 
                               efx->phy_mode = PHY_MODE_SPECIAL;
  #line 1042 
  rc = (*((efx->type)->probe_port))(efx);
  #line 1043 
  if (rc != 0) 
               #line 1044 
               return rc;
  #line 1047 
  ether_addr_copy((efx->net_dev)->dev_addr,(u8 *)(& (efx->net_dev)->perm_addr));
  #line 1049 
  return 0;
}

#line 1052  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
static int ef4_init_port(struct ef4_nic *efx)
{
  #line 1054 
  int rc;
  #line 1056 
  if ((efx->msg_enable & 1U) != 0U) {
    #line 1056 
    bool branch;
    #line 1056 
    struct _ddebug __UNIQUE_ID_ddebug577 = {.modname = (char *)"sfc_falcon", .function = (char *)"ef4_init_port", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c", .format = (char *)"init port\n", .lineno = (unsigned int)1056U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1056 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug577.key.dd_key_false.key,(_Bool)0);
    #line 1056 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 1056 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug577,efx->net_dev,(char *)"init port\n");
  }
  #line 1058 
  cif_mutex_lock_mac_lock_of_ef4_nic_0(& efx->mac_lock);
  #line 1060 
  rc = (*((efx->phy_op)->init))(efx);
  #line 1061 
  if (rc != 0) 
               #line 1062 
               goto fail1;
  #line 1064 
  efx->port_initialized = (_Bool)1;
  #line 1068 
  ef4_mac_reconfigure(efx);
  #line 1071 
  rc = (*((efx->phy_op)->reconfigure))(efx);
  #line 1072 
  if ((unsigned int)rc + 1U > 1U) 
                                  #line 1073 
                                  goto fail2;
  #line 1075 
  cif_mutex_unlock_mac_lock_of_ef4_nic_0(& efx->mac_lock);
  #line 1076 
  return 0;
  #line 1078 
  fail2: 
         #line 1078 
  ;
  #line 1079 
  (*((efx->phy_op)->fini))(efx);
  #line 1080 
  fail1: 
         #line 1080 
  ;
  #line 1081 
  cif_mutex_unlock_mac_lock_of_ef4_nic_0(& efx->mac_lock);
  #line 1082 
  return rc;
}

#line 1085  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
static void ef4_start_port(struct ef4_nic *efx)
{
  #line 1087 
  if ((efx->msg_enable & 32U) != 0U) {
    #line 1087 
    bool branch;
    #line 1087 
    struct _ddebug __UNIQUE_ID_ddebug578 = {.modname = (char *)"sfc_falcon", .function = (char *)"ef4_start_port", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c", .format = (char *)"start port\n", .lineno = (unsigned int)1087U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1087 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug578.key.dd_key_false.key,(_Bool)0);
    #line 1087 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 1087 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug578,efx->net_dev,(char *)"start port\n");
  }
  #line 1088 
  if ((long)((int)efx->port_enabled != 0) != 0L) {
    #line 1089 
    ldv_inline_asm();
    #line 1090 
    ldv_inline_asm();
    #line 1091 
    ldv_inline_asm();
    #line 1088 
    ;
  }
  #line 1090 
  cif_mutex_lock_mac_lock_of_ef4_nic_0(& efx->mac_lock);
  #line 1091 
  efx->port_enabled = (_Bool)1;
  #line 1094 
  ef4_mac_reconfigure(efx);
  #line 1096 
  cif_mutex_unlock_mac_lock_of_ef4_nic_0(& efx->mac_lock);
  #line 1097 
  return;
}

#line 1104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
static void ef4_stop_port(struct ef4_nic *efx)
{
  #line 1106 
  if ((efx->msg_enable & 16U) != 0U) {
    #line 1106 
    bool branch;
    #line 1106 
    struct _ddebug __UNIQUE_ID_ddebug580 = {.modname = (char *)"sfc_falcon", .function = (char *)"ef4_stop_port", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c", .format = (char *)"stop port\n", .lineno = (unsigned int)1106U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1106 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug580.key.dd_key_false.key,(_Bool)0);
    #line 1106 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 1106 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug580,efx->net_dev,(char *)"stop port\n");
  }
  #line 1108 
  if ((efx->state == (unsigned int)STATE_READY || efx->state == (unsigned int)STATE_RECOVERY) || efx->state == (unsigned int)STATE_DISABLED) {
    #line 1108 
    bool __warned;
    #line 1108 
    int __ret_warn_once = rtnl_is_locked() == 0;
    #line 1108 
    if ((long)(__ret_warn_once != 0) != 0L && (long)(! __warned) != 0L) {
      #line 1108 
      __warned = (_Bool)1;
      {
        #line 1108 
        int __ret_warn_on = 1;
        #line 1108 
        if ((long)(__ret_warn_on != 0) != 0L) {
          #line 1108 
          __warn_printk((char *)"RTNL: assertion failed at %s (%d)\n",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c",1108);
          #line 1109 
          ldv_inline_asm();
          #line 1110 
          ldv_inline_asm();
        }
        #line 1108 
        long tmp_2 = (long)(__ret_warn_on != 0);
      }
    }
    #line 1108 
    long tmp_4 = (long)(__ret_warn_once != 0);
  }
  #line 1110 
  cif_mutex_lock_mac_lock_of_ef4_nic_0(& efx->mac_lock);
  #line 1111 
  efx->port_enabled = (_Bool)0;
  #line 1112 
  cif_mutex_unlock_mac_lock_of_ef4_nic_0(& efx->mac_lock);
  #line 1115 
  netif_addr_lock_bh(efx->net_dev);
  #line 1116 
  netif_addr_unlock_bh(efx->net_dev);
  #line 1118 
  cancel_delayed_work_sync(& efx->monitor_work);
  #line 1119 
  ef4_selftest_async_cancel(efx);
  #line 1120 
  cancel_work_sync(& efx->mac_work);
  #line 1121 
  return;
}

#line 1123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
static void ef4_fini_port(struct ef4_nic *efx)
{
  #line 1125 
  if ((efx->msg_enable & 1U) != 0U) {
    #line 1125 
    bool branch;
    #line 1125 
    struct _ddebug __UNIQUE_ID_ddebug582 = {.modname = (char *)"sfc_falcon", .function = (char *)"ef4_fini_port", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c", .format = (char *)"shut down port\n", .lineno = (unsigned int)1125U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1125 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug582.key.dd_key_false.key,(_Bool)0);
    #line 1125 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 1125 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug582,efx->net_dev,(char *)"shut down port\n");
  }
  #line 1127 
  if (! efx->port_initialized) 
                               #line 1128 
                               return;
  #line 1130 
  (*((efx->phy_op)->fini))(efx);
  #line 1131 
  efx->port_initialized = (_Bool)0;
  #line 1133 
  efx->link_state.up = (_Bool)0;
  #line 1134 
  ef4_link_status_changed(efx);
  #line 1135 
  return;
}

#line 1137  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
static void ef4_remove_port(struct ef4_nic *efx)
{
  #line 1139 
  if ((efx->msg_enable & 1U) != 0U) {
    #line 1139 
    bool branch;
    #line 1139 
    struct _ddebug __UNIQUE_ID_ddebug583 = {.modname = (char *)"sfc_falcon", .function = (char *)"ef4_remove_port", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c", .format = (char *)"destroying port\n", .lineno = (unsigned int)1139U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1139 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug583.key.dd_key_false.key,(_Bool)0);
    #line 1139 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 1139 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug583,efx->net_dev,(char *)"destroying port\n");
  }
  #line 1141 
  (*((efx->type)->remove_port))(efx);
  #line 1142 
  return;
}

#line 1150  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
static struct list_head ef4_primary_list = {.next = & ef4_primary_list, .prev = & ef4_primary_list};
#line 1151  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
static struct list_head ef4_unassociated_list = {.next = & ef4_unassociated_list, .prev = & ef4_unassociated_list};
#line 1153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
static bool ef4_same_controller(struct ef4_nic *left, struct ef4_nic *right)
{
  #line 1156 
  int tmp_0;
  #line 1156 
  if ((left->type == right->type && left->vpd_sn != (char *)0) && right->vpd_sn != (char *)0) {
    #line 1156 
    if (cif_strcmp(left->vpd_sn,right->vpd_sn) == 0) 
                                                     #line 1156 
                                                     tmp_0 = 1; else 
                                                                  #line 1156 
                                                                  tmp_0 = 0;
  }
  else 
       #line 1156 
       tmp_0 = 0;
  #line 1156 
  return (_Bool)(tmp_0 != 0);
}

#line 1160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
static void ef4_associate(struct ef4_nic *efx)
{
  #line 1162 
  struct ef4_nic *other;
  #line 1162 
  struct ef4_nic *next;
  #line 1164 
  if (efx->primary == efx) {
    #line 1170 
    void *__mptr;
    #line 1170 
    void *__mptr_0;
    #line 1167 
    if ((efx->msg_enable & 2U) != 0U) {
      #line 1167 
      bool branch;
      #line 1167 
      struct _ddebug __UNIQUE_ID_ddebug584 = {.modname = (char *)"sfc_falcon", .function = (char *)"ef4_associate", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c", .format = (char *)"adding to primary list\n", .lineno = (unsigned int)1167U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1167 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug584.key.dd_key_false.key,(_Bool)0);
      #line 1167 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 1167 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug584,efx->net_dev,(char *)"adding to primary list\n");
    }
    #line 1168 
    list_add_tail(& efx->node,& ef4_primary_list);
    #line 1170 
    __mptr = (void *)ef4_unassociated_list.next;
    #line 1170 
    other = ((struct ef4_nic *)(__mptr + 18446744073709551600U));
    #line 1170 
    __mptr_0 = (void *)other->node.next;
    #line 1171 
    next = ((struct ef4_nic *)(__mptr_0 + 18446744073709551600U));
    #line 1170 
    while (& other->node != & ef4_unassociated_list) {
      #line 1170 
      void *__mptr_1;
      #line 1172 
      if ((int)ef4_same_controller(efx,other) != 0) {
        #line 1173 
        list_del(& other->node);
        #line 1174 
        if ((other->msg_enable & 2U) != 0U) {
          #line 1174 
          bool branch_0;
          #line 1174 
          struct _ddebug __UNIQUE_ID_ddebug585 = {.modname = (char *)"sfc_falcon", .function = (char *)"ef4_associate", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c", .format = (char *)"moving to secondary list of %s %s\n", .lineno = (unsigned int)1174U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
          #line 1174 
          branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug585.key.dd_key_false.key,(_Bool)0);
          #line 1174 
          if ((long)((long)((int)branch_0 != 0)) != 0L) {
            #line 1174 
            ;
            #line 1174 
            ;
            #line 1174 
            __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug585,other->net_dev,(char *)"moving to secondary list of %s %s\n",pci_name(efx->pci_dev),(char *)(& (efx->net_dev)->name));
          }
        }
        #line 1178 
        list_add_tail(& other->node,& efx->secondary_list);
        #line 1180 
        other->primary = efx;
      }
      #line 1170 
      other = next;
      #line 1170 
      __mptr_1 = (void *)next->node.next;
      #line 1170 
      next = ((struct ef4_nic *)(__mptr_1 + 18446744073709551600U));
    }
  }
  else {
    #line 1186 
    void *__mptr_2;
    #line 1186 
    __mptr_2 = (void *)ef4_primary_list.next;
    #line 1186 
    other = ((struct ef4_nic *)(__mptr_2 + 18446744073709551600U));
    #line 1186 
    while (& other->node != & ef4_primary_list) {
      #line 1186 
      void *__mptr_3;
      #line 1187 
      if ((int)ef4_same_controller(efx,other) != 0) {
        #line 1188 
        if ((efx->msg_enable & 2U) != 0U) {
          #line 1188 
          bool branch_1;
          #line 1188 
          struct _ddebug __UNIQUE_ID_ddebug586 = {.modname = (char *)"sfc_falcon", .function = (char *)"ef4_associate", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c", .format = (char *)"adding to secondary list of %s %s\n", .lineno = (unsigned int)1188U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
          #line 1188 
          branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug586.key.dd_key_false.key,(_Bool)0);
          #line 1188 
          if ((long)((long)((int)branch_1 != 0)) != 0L) {
            #line 1188 
            ;
            #line 1188 
            ;
            #line 1188 
            __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug586,efx->net_dev,(char *)"adding to secondary list of %s %s\n",pci_name(other->pci_dev),(char *)(& (other->net_dev)->name));
          }
        }
        #line 1192 
        list_add_tail(& efx->node,& other->secondary_list);
        #line 1194 
        efx->primary = other;
        #line 1195 
        return;
      }
      #line 1186 
      __mptr_3 = (void *)other->node.next;
      #line 1186 
      other = ((struct ef4_nic *)(__mptr_3 + 18446744073709551600U));
    }
    #line 1199 
    if ((efx->msg_enable & 2U) != 0U) {
      #line 1199 
      bool branch_2;
      #line 1199 
      struct _ddebug __UNIQUE_ID_ddebug587 = {.modname = (char *)"sfc_falcon", .function = (char *)"ef4_associate", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c", .format = (char *)"adding to unassociated list\n", .lineno = (unsigned int)1199U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1199 
      branch_2 = arch_static_branch(& __UNIQUE_ID_ddebug587.key.dd_key_false.key,(_Bool)0);
      #line 1199 
      if ((long)((long)((int)branch_2 != 0)) != 0L) 
                                                    #line 1199 
                                                    __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug587,efx->net_dev,(char *)"adding to unassociated list\n");
    }
    #line 1201 
    list_add_tail(& efx->node,& ef4_unassociated_list);
  }
  #line 1203 
  return;
}

#line 1205  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
static void ef4_dissociate(struct ef4_nic *efx)
{
  #line 1212 
  void *__mptr;
  #line 1212 
  void *__mptr_0;
  #line 1207 
  struct ef4_nic *other;
  #line 1207 
  struct ef4_nic *next;
  #line 1209 
  list_del(& efx->node);
  #line 1210 
  efx->primary = (struct ef4_nic *)0;
  #line 1212 
  __mptr = (void *)efx->secondary_list.next;
  #line 1212 
  other = ((struct ef4_nic *)(__mptr + 18446744073709551600U));
  #line 1212 
  __mptr_0 = (void *)other->node.next;
  #line 1213 
  next = ((struct ef4_nic *)(__mptr_0 + 18446744073709551600U));
  #line 1212 
  while (& other->node != & efx->secondary_list) {
    #line 1212 
    void *__mptr_1;
    #line 1213 
    list_del(& other->node);
    #line 1214 
    if ((other->msg_enable & 2U) != 0U) {
      #line 1214 
      bool branch;
      #line 1214 
      struct _ddebug __UNIQUE_ID_ddebug588 = {.modname = (char *)"sfc_falcon", .function = (char *)"ef4_dissociate", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c", .format = (char *)"moving to unassociated list\n", .lineno = (unsigned int)1214U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1214 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug588.key.dd_key_false.key,(_Bool)0);
      #line 1214 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 1214 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug588,other->net_dev,(char *)"moving to unassociated list\n");
    }
    #line 1216 
    list_add_tail(& other->node,& ef4_unassociated_list);
    #line 1217 
    other->primary = (struct ef4_nic *)0;
    #line 1212 
    other = next;
    #line 1212 
    __mptr_1 = (void *)next->node.next;
    #line 1212 
    next = ((struct ef4_nic *)(__mptr_1 + 18446744073709551600U));
  }
  #line 1219 
  return;
}

#line 1222  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
static int ef4_init_io(struct ef4_nic *efx)
{
  #line 1227 
  int rc;
  #line 1227 
  int bar;
  #line 1224 
  struct pci_dev *pci_dev = efx->pci_dev;
  #line 1225 
  dma_addr_t dma_mask = (efx->type)->max_dma_mask;
  #line 1226 
  unsigned int mem_map_size = (*((efx->type)->mem_map_size))(efx);
  #line 1229 
  if ((efx->msg_enable & 2U) != 0U) {
    #line 1229 
    bool branch;
    #line 1229 
    struct _ddebug __UNIQUE_ID_ddebug589 = {.modname = (char *)"sfc_falcon", .function = (char *)"ef4_init_io", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c", .format = (char *)"initialising I/O\n", .lineno = (unsigned int)1229U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1229 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug589.key.dd_key_false.key,(_Bool)0);
    #line 1229 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 1229 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug589,efx->net_dev,(char *)"initialising I/O\n");
  }
  #line 1231 
  bar = (int)(efx->type)->mem_bar;
  #line 1233 
  rc = pci_enable_device(pci_dev);
  #line 1234 
  if (rc != 0) {
    #line 1235 
    if ((efx->msg_enable & 2U) != 0U) 
                                      #line 1235 
                                      netdev_err(efx->net_dev,(char *)"failed to enable PCI device\n");
    #line 1237 
    goto fail1;
  }
  #line 1240 
  pci_set_master(pci_dev);
  #line 1246 
  while (dma_mask > 2147483647ULL) {
    #line 1247 
    rc = dma_set_mask_and_coherent(& pci_dev->dev,dma_mask);
    #line 1248 
    if (rc == 0) 
                 #line 1249 
                 break;
    #line 1250 
    dma_mask >>= 1;
  }
  #line 1252 
  if (rc != 0) {
    #line 1253 
    if ((efx->msg_enable & 2U) != 0U) 
                                      #line 1253 
                                      netdev_err(efx->net_dev,(char *)"could not find a suitable DMA mask\n");
    #line 1255 
    goto fail2;
  }
  #line 1257 
  if ((efx->msg_enable & 2U) != 0U) {
    #line 1257 
    bool branch_0;
    #line 1257 
    struct _ddebug __UNIQUE_ID_ddebug590 = {.modname = (char *)"sfc_falcon", .function = (char *)"ef4_init_io", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c", .format = (char *)"using DMA mask %llx\n", .lineno = (unsigned int)1257U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1257 
    branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug590.key.dd_key_false.key,(_Bool)0);
    #line 1257 
    if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                  #line 1257 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug590,efx->net_dev,(char *)"using DMA mask %llx\n",dma_mask);
  }
  #line 1260 
  efx->membase_phys = (efx->pci_dev)->resource[bar].start;
  #line 1261 
  rc = pci_request_region(pci_dev,bar,(char *)"sfc");
  #line 1262 
  if (rc != 0) {
    #line 1263 
    if ((efx->msg_enable & 2U) != 0U) 
                                      #line 1263 
                                      netdev_err(efx->net_dev,(char *)"request for memory BAR failed\n");
    #line 1265 
    rc = -5;
    #line 1266 
    goto fail3;
  }
  #line 1268 
  efx->membase = ioremap(efx->membase_phys,(unsigned long)mem_map_size);
  #line 1269 
  if (efx->membase == (void *)0) {
    #line 1270 
    if ((efx->msg_enable & 2U) != 0U) 
                                      #line 1270 
                                      netdev_err(efx->net_dev,(char *)"could not map memory BAR at %llx+%x\n",efx->membase_phys,mem_map_size);
    #line 1273 
    rc = -12;
    #line 1274 
    goto fail4;
  }
  #line 1276 
  if ((efx->msg_enable & 2U) != 0U) {
    #line 1276 
    bool branch_1;
    #line 1276 
    struct _ddebug __UNIQUE_ID_ddebug591 = {.modname = (char *)"sfc_falcon", .function = (char *)"ef4_init_io", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c", .format = (char *)"memory BAR at %llx+%x (virtual %p)\n", .lineno = (unsigned int)1276U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1276 
    branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug591.key.dd_key_false.key,(_Bool)0);
    #line 1276 
    if ((long)((long)((int)branch_1 != 0)) != 0L) 
                                                  #line 1276 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug591,efx->net_dev,(char *)"memory BAR at %llx+%x (virtual %p)\n",efx->membase_phys,mem_map_size,efx->membase);
  }
  #line 1281 
  return 0;
  #line 1283 
  fail4: 
         #line 1283 
  ;
  #line 1284 
  pci_release_region(efx->pci_dev,bar);
  #line 1285 
  fail3: 
         #line 1285 
  ;
  #line 1286 
  efx->membase_phys = 0ULL;
  #line 1287 
  fail2: 
         #line 1287 
  ;
  #line 1288 
  pci_disable_device(efx->pci_dev);
  #line 1289 
  fail1: 
         #line 1289 
  ;
  #line 1290 
  return rc;
}

#line 1293  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
static void ef4_fini_io(struct ef4_nic *efx)
{
  #line 1295 
  int bar;
  #line 1297 
  if ((efx->msg_enable & 1U) != 0U) {
    #line 1297 
    bool branch;
    #line 1297 
    struct _ddebug __UNIQUE_ID_ddebug592 = {.modname = (char *)"sfc_falcon", .function = (char *)"ef4_fini_io", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c", .format = (char *)"shutting down I/O\n", .lineno = (unsigned int)1297U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1297 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug592.key.dd_key_false.key,(_Bool)0);
    #line 1297 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 1297 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug592,efx->net_dev,(char *)"shutting down I/O\n");
  }
  #line 1299 
  if (efx->membase != (void *)0) {
    #line 1300 
    iounmap(efx->membase);
    #line 1301 
    efx->membase = (void *)0;
  }
  #line 1304 
  if (efx->membase_phys != 0ULL) {
    #line 1305 
    bar = (int)(efx->type)->mem_bar;
    #line 1306 
    pci_release_region(efx->pci_dev,bar);
    #line 1307 
    efx->membase_phys = 0ULL;
  }
  #line 1311 
  if (pci_vfs_assigned(efx->pci_dev) == 0) 
                                           #line 1312 
                                           pci_disable_device(efx->pci_dev);
  #line 1313 
  return;
}

#line 1315  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
void ef4_set_default_rx_indir_table(struct ef4_nic *efx)
{
  #line 1317 
  size_t i;
  #line 1319 
  i = 0UL;
  #line 1319 
  while (i <= 127UL) {
    #line 1320 
    efx->rx_indir_table[i] = ethtool_rxfh_indir_default((unsigned int)i,efx->rss_spread);
    #line 1319 
    i ++;
  }
  #line 1322 
  return;
}

#line 1324  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
static unsigned int ef4_wanted_parallelism(struct ef4_nic *efx)
{
  #line 1326 
  cpumask_var_t thread_mask;
  #line 1327 
  unsigned int count;
  #line 1328 
  int cpu;
  #line 1330 
  if (rss_cpus != 0U) 
                      #line 1331 
                      count = rss_cpus;
  else {
    #line 1333 
    int tmp_0;
    #line 1333 
    if (zalloc_cpumask_var(& thread_mask,3264U)) 
                                                 #line 1333 
                                                 tmp_0 = 0; else 
                                                                 #line 1333 
                                                                 tmp_0 = 1;
    #line 1333 
    if ((long)tmp_0 != 0L) {
      #line 1334 
      if ((efx->msg_enable & 2U) != 0U) 
                                        #line 1334 
                                        netdev_warn(efx->net_dev,(char *)"RSS disabled due to allocation failure\n");
      #line 1336 
      return 1U;
    }
    #line 1339 
    count = 0U;
    #line 1340 
    cpu = -1;
    #line 1340 
    while (1) {
      #line 1340 
      cpu = (int)cpumask_next(cpu,& __cpu_online_mask);
      #line 1340 
      if (! ((unsigned int)cpu < nr_cpu_ids)) 
                                              #line 1340 
                                              break;
      #line 1341 
      if (cpumask_test_cpu(cpu,thread_mask) == 0) {
        #line 1344 
        unsigned long __ptr;
        #line 1342 
        count ++;
        {
          #line 1344 
          void *__vpp_verify = (void *)0;
          #line 1344 
          void *tmp_2 = __vpp_verify;
        }
        #line 1345 
        ldv_inline_asm();
        #line 1343 
        ;
        #line 1343 
        ;
        #line 1343 
        cpumask_or(thread_mask,thread_mask,*((cpumask_var_t *)(__per_cpu_offset[cpu] + __ptr)));
      }
    }
    #line 1348 
    free_cpumask_var(thread_mask);
  }
  #line 1351 
  if (count > 32U) {
    #line 1352 
    if (rss_cpus == 0U) {
      #line 1352 
      if ((efx->msg_enable & 2U) != 0U) {
        #line 1352 
        bool branch;
        #line 1352 
        struct _ddebug __UNIQUE_ID_ddebug593 = {.modname = (char *)"sfc_falcon", .function = (char *)"ef4_wanted_parallelism", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c", .format = (char *)"Reducing number of rx queues from %u to %u.\n", .lineno = (unsigned int)1352U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 1352 
        branch = arch_static_branch(& __UNIQUE_ID_ddebug593.key.dd_key_false.key,(_Bool)0);
        #line 1352 
        if ((long)((long)((int)branch != 0)) != 0L) 
                                                    #line 1352 
                                                    __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug593,efx->net_dev,(char *)"Reducing number of rx queues from %u to %u.\n",count,32U);
      }
    }
    else 
      #line 1352 
      if ((efx->msg_enable & 2U) != 0U) 
                                        #line 1352 
                                        netdev_warn(efx->net_dev,(char *)"Reducing number of rx queues from %u to %u.\n",count,32U);
    #line 1355 
    count = 32U;
  }
  #line 1358 
  return count;
}

#line 1364  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
static int ef4_probe_interrupts(struct ef4_nic *efx)
{
  #line 1367 
  unsigned int i;
  #line 1367 
  unsigned int j;
  #line 1368 
  int rc;
  #line 1366 
  unsigned int extra_channels = 0U;
  #line 1370 
  i = 0U;
  #line 1370 
  while (i <= 1U) {
    #line 1371 
    if (efx->extra_channel_type[i] != (struct ef4_channel_type *)0) 
                                                                    #line 1372 
                                                                    extra_channels ++;
    #line 1370 
    i ++;
  }
  #line 1374 
  if (efx->interrupt_mode == (unsigned int)EF4_INT_MODE_MSIX) {
    #line 1382 
    unsigned int __UNIQUE_ID___x594;
    #line 1382 
    unsigned int tmp;
    #line 1375 
    struct msix_entry xentries[32U];
    #line 1376 
    unsigned int n_channels;
    #line 1378 
    n_channels = ef4_wanted_parallelism(efx);
    #line 1379 
    if ((int)ef4_separate_tx_channels != 0) 
                                            #line 1380 
                                            n_channels *= 2U;
    #line 1381 
    n_channels += extra_channels;
    {
      #line 1382 
      __UNIQUE_ID___x594 = n_channels;
      #line 1382 
      unsigned int __UNIQUE_ID___y595 = efx->max_channels;
      #line 1382 
      if (__UNIQUE_ID___x594 < __UNIQUE_ID___y595) 
                                                   #line 1382 
                                                   tmp = __UNIQUE_ID___x594; else 
                                                                    #line 1382 
                                                                    tmp = __UNIQUE_ID___y595;
      }
    #line 1382 
    n_channels = tmp;
    #line 1384 
    i = 0U;
    #line 1384 
    while (i < n_channels) {
      #line 1385 
      xentries[i].entry = (unsigned short)i;
      #line 1384 
      i ++;
    }
    #line 1386 
    rc = pci_enable_msix_range(efx->pci_dev,(struct msix_entry *)(& xentries),1,(int)n_channels);
    #line 1388 
    if (rc < 0) {
      #line 1390 
      efx->interrupt_mode = EF4_INT_MODE_MSI;
      #line 1391 
      if ((efx->msg_enable & 1U) != 0U) 
                                        #line 1391 
                                        netdev_err(efx->net_dev,(char *)"could not enable MSI-X\n");
    }
    else 
      #line 1393 
      if ((unsigned int)rc < n_channels) {
        #line 1394 
        if ((efx->msg_enable & 1U) != 0U) 
                                          #line 1394 
                                          netdev_err(efx->net_dev,(char *)"WARNING: Insufficient MSI-X vectors",rc,n_channels);
        #line 1397 
        if ((efx->msg_enable & 1U) != 0U) 
                                          #line 1397 
                                          netdev_err(efx->net_dev,(char *)"WARNING: Performance may be reduced.\n");
        #line 1399 
        n_channels = (unsigned int)rc;
      }
    #line 1402 
    if (rc > 0) {
      #line 1403 
      efx->n_channels = n_channels;
      #line 1404 
      if (n_channels > extra_channels) 
                                       #line 1405 
                                       n_channels -= extra_channels;
      #line 1406 
      if ((int)ef4_separate_tx_channels != 0) {
        #line 1410 
        unsigned int __UNIQUE_ID___x600;
        #line 1410 
        unsigned int tmp_5;
        #line 1407 
        unsigned int __UNIQUE_ID___x598;
        #line 1407 
        unsigned int tmp_3;
        {
          #line 1407 
          unsigned int __UNIQUE_ID___x596;
          #line 1407 
          unsigned int tmp_1;
          {
            #line 1407 
            __UNIQUE_ID___x596 = n_channels / 2U;
            #line 1407 
            unsigned int __UNIQUE_ID___y597 = 1U;
            #line 1407 
            if (__UNIQUE_ID___x596 > __UNIQUE_ID___y597) 
                                                         #line 1407 
                                                         tmp_1 = __UNIQUE_ID___x596; else 
                                                                    #line 1407 
                                                                    tmp_1 = __UNIQUE_ID___y597;
            }
          #line 1407 
          __UNIQUE_ID___x598 = tmp_1;
          #line 1407 
          unsigned int __UNIQUE_ID___y599 = efx->max_tx_channels;
          #line 1407 
          if (__UNIQUE_ID___x598 < __UNIQUE_ID___y599) 
                                                       #line 1407 
                                                       tmp_3 = __UNIQUE_ID___x598; else 
                                                                    #line 1407 
                                                                    tmp_3 = __UNIQUE_ID___y599;
          }
        #line 1407 
        efx->n_tx_channels = tmp_3;
        {
          #line 1410 
          __UNIQUE_ID___x600 = n_channels - efx->n_tx_channels;
          #line 1410 
          unsigned int __UNIQUE_ID___y601 = 1U;
          #line 1410 
          if (__UNIQUE_ID___x600 > __UNIQUE_ID___y601) 
                                                       #line 1410 
                                                       tmp_5 = __UNIQUE_ID___x600; else 
                                                                    #line 1410 
                                                                    tmp_5 = __UNIQUE_ID___y601;
          }
        #line 1410 
        efx->n_rx_channels = tmp_5;
      }
      else {
        #line 1414 
        unsigned int __UNIQUE_ID___x602;
        #line 1414 
        unsigned int tmp_7;
        {
          #line 1414 
          __UNIQUE_ID___x602 = n_channels;
          #line 1414 
          unsigned int __UNIQUE_ID___y603 = efx->max_tx_channels;
          #line 1414 
          if (__UNIQUE_ID___x602 < __UNIQUE_ID___y603) 
                                                       #line 1414 
                                                       tmp_7 = __UNIQUE_ID___x602; else 
                                                                    #line 1414 
                                                                    tmp_7 = __UNIQUE_ID___y603;
          }
        #line 1414 
        efx->n_tx_channels = tmp_7;
        #line 1416 
        efx->n_rx_channels = n_channels;
      }
      #line 1418 
      i = 0U;
      #line 1418 
      while (efx->n_channels > i) {
        #line 1419 
        ef4_get_channel(efx,i)->irq = (int)xentries[i].vector;
        #line 1418 
        i ++;
      }
    }
  }
  #line 1425 
  if (efx->interrupt_mode == (unsigned int)EF4_INT_MODE_MSI) {
    #line 1426 
    efx->n_channels = 1U;
    #line 1427 
    efx->n_rx_channels = 1U;
    #line 1428 
    efx->n_tx_channels = 1U;
    #line 1429 
    rc = pci_enable_msi(efx->pci_dev);
    #line 1430 
    if (rc == 0) {
      #line 1431 
      ef4_get_channel(efx,0U)->irq = (int)(efx->pci_dev)->irq;
    }
    else {
      #line 1433 
      if ((efx->msg_enable & 1U) != 0U) 
                                        #line 1433 
                                        netdev_err(efx->net_dev,(char *)"could not enable MSI\n");
      #line 1435 
      efx->interrupt_mode = EF4_INT_MODE_LEGACY;
    }
  }
  #line 1440 
  if (efx->interrupt_mode == (unsigned int)EF4_INT_MODE_LEGACY) {
    #line 1441 
    if ((int)ef4_separate_tx_channels != 0) 
                                            #line 1441 
                                            efx->n_channels = 2U; else 
                                                                    #line 1441 
                                                                    efx->n_channels = 1U;
    #line 1442 
    efx->n_rx_channels = 1U;
    #line 1443 
    efx->n_tx_channels = 1U;
    #line 1444 
    efx->legacy_irq = (int)(efx->pci_dev)->irq;
  }
  #line 1448 
  j = efx->n_channels;
  #line 1449 
  i = 0U;
  #line 1449 
  while (i <= 1U) {
    #line 1450 
    if (efx->extra_channel_type[i] == (struct ef4_channel_type *)0) 
                                                                    #line 1451 
                                                                    goto __Cont;
    #line 1452 
    if (efx->interrupt_mode != (unsigned int)EF4_INT_MODE_MSIX || efx->n_channels <= extra_channels) 
      #line 1454 
      (*((efx->extra_channel_type[i])->handle_no_channel))(efx);
    else {
      #line 1456 
      j --;
      #line 1457 
      ef4_get_channel(efx,j)->type = efx->extra_channel_type[i];
    }
    #line 1449 
    __Cont: 
            #line 1449 
    i ++;
  }
  #line 1462 
  efx->rss_spread = efx->n_rx_channels;
  #line 1464 
  return 0;
}

#line 1467  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
static int ef4_soft_enable_interrupts(struct ef4_nic *efx)
{
  #line 1469 
  struct ef4_channel *channel;
  #line 1469 
  struct ef4_channel *end_channel;
  #line 1470 
  int rc;
  #line 1472 
  if ((long)(efx->state == (unsigned int)STATE_DISABLED) != 0L) {
    #line 1473 
    ldv_inline_asm();
    #line 1474 
    ldv_inline_asm();
    #line 1475 
    ldv_inline_asm();
    #line 1472 
    ;
  }
  #line 1474 
  efx->irq_soft_enabled = (_Bool)1;
  #line 1475 
  ldv_inline_asm();
  #line 1477 
  channel = efx->channel[0];
  #line 1477 
  while (channel != (struct ef4_channel *)0) {
    #line 1478 
    if (! (channel->type)->keep_eventq) {
      #line 1479 
      rc = ef4_init_eventq(channel);
      #line 1480 
      if (rc != 0) 
                   #line 1481 
                   goto fail;
    }
    #line 1483 
    ef4_start_eventq(channel);
    #line 1477 
    if ((unsigned int)(channel->channel + 1) < efx->n_channels) 
                                                                #line 1477 
                                                                channel = efx->channel[channel->channel + 1]; else 
                                                                    #line 1477 
                                                                    channel = (struct ef4_channel *)0;
  }
  #line 1486 
  return 0;
  #line 1487 
  fail: 
        #line 1487 
  ;
  #line 1488 
  end_channel = channel;
  #line 1489 
  channel = efx->channel[0];
  #line 1489 
  while (channel != (struct ef4_channel *)0) {
    #line 1490 
    if (channel == end_channel) 
                                #line 1491 
                                break;
    #line 1492 
    ef4_stop_eventq(channel);
    #line 1493 
    if (! (channel->type)->keep_eventq) 
                                        #line 1494 
                                        ef4_fini_eventq(channel);
    #line 1489 
    if ((unsigned int)(channel->channel + 1) < efx->n_channels) 
                                                                #line 1489 
                                                                channel = efx->channel[channel->channel + 1]; else 
                                                                    #line 1489 
                                                                    channel = (struct ef4_channel *)0;
  }
  #line 1497 
  return rc;
}

#line 1500  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
static void ef4_soft_disable_interrupts(struct ef4_nic *efx)
{
  #line 1502 
  struct ef4_channel *channel;
  #line 1504 
  if (efx->state == (unsigned int)STATE_DISABLED) 
                                                  #line 1505 
                                                  return;
  #line 1507 
  efx->irq_soft_enabled = (_Bool)0;
  #line 1508 
  ldv_inline_asm();
  #line 1510 
  if (efx->legacy_irq != 0) 
                            #line 1511 
                            synchronize_irq((unsigned int)efx->legacy_irq);
  #line 1513 
  channel = efx->channel[0];
  #line 1513 
  while (channel != (struct ef4_channel *)0) {
    #line 1514 
    if (channel->irq != 0) 
                           #line 1515 
                           synchronize_irq((unsigned int)channel->irq);
    #line 1517 
    ef4_stop_eventq(channel);
    #line 1518 
    if (! (channel->type)->keep_eventq) 
                                        #line 1519 
                                        ef4_fini_eventq(channel);
    #line 1513 
    if ((unsigned int)(channel->channel + 1) < efx->n_channels) 
                                                                #line 1513 
                                                                channel = efx->channel[channel->channel + 1]; else 
                                                                    #line 1513 
                                                                    channel = (struct ef4_channel *)0;
  }
  #line 1521 
  return;
}

#line 1523  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
static int ef4_enable_interrupts(struct ef4_nic *efx)
{
  #line 1525 
  struct ef4_channel *channel;
  #line 1525 
  struct ef4_channel *end_channel;
  #line 1526 
  int rc;
  #line 1528 
  if ((long)(efx->state == (unsigned int)STATE_DISABLED) != 0L) {
    #line 1529 
    ldv_inline_asm();
    #line 1530 
    ldv_inline_asm();
    #line 1531 
    ldv_inline_asm();
    #line 1528 
    ;
  }
  #line 1530 
  if ((int)efx->eeh_disabled_legacy_irq != 0) {
    #line 1531 
    enable_irq((unsigned int)efx->legacy_irq);
    #line 1532 
    efx->eeh_disabled_legacy_irq = (_Bool)0;
  }
  #line 1535 
  (*((efx->type)->irq_enable_master))(efx);
  #line 1537 
  channel = efx->channel[0];
  #line 1537 
  while (channel != (struct ef4_channel *)0) {
    #line 1538 
    if ((int)(channel->type)->keep_eventq != 0) {
      #line 1539 
      rc = ef4_init_eventq(channel);
      #line 1540 
      if (rc != 0) 
                   #line 1541 
                   goto fail;
    }
    #line 1537 
    if ((unsigned int)(channel->channel + 1) < efx->n_channels) 
                                                                #line 1537 
                                                                channel = efx->channel[channel->channel + 1]; else 
                                                                    #line 1537 
                                                                    channel = (struct ef4_channel *)0;
  }
  #line 1545 
  rc = ef4_soft_enable_interrupts(efx);
  #line 1546 
  if (rc != 0) 
               #line 1547 
               goto fail;
  #line 1549 
  return 0;
  #line 1551 
  fail: 
        #line 1551 
  ;
  #line 1552 
  end_channel = channel;
  #line 1553 
  channel = efx->channel[0];
  #line 1553 
  while (channel != (struct ef4_channel *)0) {
    #line 1554 
    if (channel == end_channel) 
                                #line 1555 
                                break;
    #line 1556 
    if ((int)(channel->type)->keep_eventq != 0) 
                                                #line 1557 
                                                ef4_fini_eventq(channel);
    #line 1553 
    if ((unsigned int)(channel->channel + 1) < efx->n_channels) 
                                                                #line 1553 
                                                                channel = efx->channel[channel->channel + 1]; else 
                                                                    #line 1553 
                                                                    channel = (struct ef4_channel *)0;
  }
  #line 1560 
  (*((efx->type)->irq_disable_non_ev))(efx);
  #line 1562 
  return rc;
}

#line 1565  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
static void ef4_disable_interrupts(struct ef4_nic *efx)
{
  #line 1567 
  struct ef4_channel *channel;
  #line 1569 
  ef4_soft_disable_interrupts(efx);
  #line 1571 
  channel = efx->channel[0];
  #line 1571 
  while (channel != (struct ef4_channel *)0) {
    #line 1572 
    if ((int)(channel->type)->keep_eventq != 0) 
                                                #line 1573 
                                                ef4_fini_eventq(channel);
    #line 1571 
    if ((unsigned int)(channel->channel + 1) < efx->n_channels) 
                                                                #line 1571 
                                                                channel = efx->channel[channel->channel + 1]; else 
                                                                    #line 1571 
                                                                    channel = (struct ef4_channel *)0;
  }
  #line 1576 
  (*((efx->type)->irq_disable_non_ev))(efx);
  #line 1577 
  return;
}

#line 1579  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
static void ef4_remove_interrupts(struct ef4_nic *efx)
{
  #line 1581 
  struct ef4_channel *channel;
  #line 1584 
  channel = efx->channel[0];
  #line 1584 
  while (channel != (struct ef4_channel *)0) {
    #line 1585 
    channel->irq = 0;
    #line 1584 
    if ((unsigned int)(channel->channel + 1) < efx->n_channels) 
                                                                #line 1584 
                                                                channel = efx->channel[channel->channel + 1]; else 
                                                                    #line 1584 
                                                                    channel = (struct ef4_channel *)0;
  }
  #line 1586 
  pci_disable_msi(efx->pci_dev);
  #line 1587 
  pci_disable_msix(efx->pci_dev);
  #line 1590 
  efx->legacy_irq = 0;
  #line 1591 
  return;
}

#line 1593  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
static void ef4_set_channels(struct ef4_nic *efx)
{
  #line 1595 
  struct ef4_channel *channel;
  #line 1596 
  struct ef4_tx_queue *tx_queue;
  #line 1598 
  if ((int)ef4_separate_tx_channels != 0) 
                                          #line 1598 
                                          efx->tx_channel_offset = efx->n_channels - efx->n_tx_channels; else 
                                                                    #line 1598 
                                                                    efx->tx_channel_offset = 0U;
  #line 1606 
  channel = efx->channel[0];
  #line 1606 
  while (channel != (struct ef4_channel *)0) {
    {
      #line 1607 
      if ((unsigned int)channel->channel < efx->n_rx_channels) 
                                                               #line 1608 
                                                               channel->rx_queue.core_index = channel->channel; else 
                                                                    #line 1610 
                                                                    channel->rx_queue.core_index = -1;
      #line 1612 
      if (ef4_channel_has_tx_queues(channel)) {
        #line 1612 
        tx_queue = (struct ef4_tx_queue *)(& channel->tx_queue);
        #line 1612 
        while (1) {
          #line 1612 
          if ((struct ef4_tx_queue *)(& channel->tx_queue) + 4U > tx_queue) {
            #line 1612 
            if (! ((int)ef4_tx_queue_used(tx_queue) != 0)) 
                                                           #line 1612 
                                                           break;
          }
          else 
               #line 1612 
               break;
          #line 1613 
          tx_queue->queue -= efx->tx_channel_offset * 4U;
          #line 1612 
          tx_queue ++;
        }
      }
    }
    #line 1606 
    if ((unsigned int)(channel->channel + 1) < efx->n_channels) 
                                                                #line 1606 
                                                                channel = efx->channel[channel->channel + 1]; else 
                                                                    #line 1606 
                                                                    channel = (struct ef4_channel *)0;
  }
  #line 1616 
  return;
}

#line 1618  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
static int ef4_probe_nic(struct ef4_nic *efx)
{
  #line 1620 
  int rc;
  #line 1622 
  if ((efx->msg_enable & 2U) != 0U) {
    #line 1622 
    bool branch;
    #line 1622 
    struct _ddebug __UNIQUE_ID_ddebug606 = {.modname = (char *)"sfc_falcon", .function = (char *)"ef4_probe_nic", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c", .format = (char *)"creating NIC\n", .lineno = (unsigned int)1622U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1622 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug606.key.dd_key_false.key,(_Bool)0);
    #line 1622 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 1622 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug606,efx->net_dev,(char *)"creating NIC\n");
  }
  #line 1625 
  rc = (*((efx->type)->probe))(efx);
  #line 1626 
  if (rc != 0) 
               #line 1627 
               return rc;
  #line 1629 
  while (1) {
    #line 1630 
    if (efx->max_channels == 0U || efx->max_tx_channels == 0U) {
      #line 1631 
      if ((efx->msg_enable & 1U) != 0U) 
                                        #line 1631 
                                        netdev_err(efx->net_dev,(char *)"Insufficient resources to allocate");
      #line 1634 
      rc = -28;
      #line 1635 
      goto fail1;
    }
    #line 1641 
    rc = ef4_probe_interrupts(efx);
    #line 1642 
    if (rc != 0) 
                 #line 1643 
                 goto fail1;
    #line 1645 
    ef4_set_channels(efx);
    #line 1648 
    rc = (*((efx->type)->dimension_resources))(efx);
    #line 1649 
    if (rc != 0 && rc != -11) 
                              #line 1650 
                              goto fail2;
    #line 1652 
    if (rc == -11) 
                   #line 1654 
                   ef4_remove_interrupts(efx);
    #line 1655 
    if (! (rc == -11)) 
                       #line 1629 
                       break;
  }
  #line 1658 
  if (efx->n_channels > 1U) 
                            #line 1659 
                            netdev_rss_key_fill((void *)(& efx->rx_hash_key),40UL);
  #line 1661 
  ef4_set_default_rx_indir_table(efx);
  #line 1663 
  netif_set_real_num_tx_queues(efx->net_dev,efx->n_tx_channels);
  #line 1664 
  netif_set_real_num_rx_queues(efx->net_dev,efx->n_rx_channels);
  #line 1667 
  efx->irq_mod_step_us = (efx->timer_quantum_ns + 999U) / 1000U;
  #line 1668 
  ef4_init_irq_moderation(efx,tx_irq_mod_usec,rx_irq_mod_usec,(_Bool)1,(_Bool)1);
  #line 1671 
  return 0;
  #line 1673 
  fail2: 
         #line 1673 
  ;
  #line 1674 
  ef4_remove_interrupts(efx);
  #line 1675 
  fail1: 
         #line 1675 
  ;
  #line 1676 
  (*((efx->type)->remove))(efx);
  #line 1677 
  return rc;
}

#line 1680  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
static void ef4_remove_nic(struct ef4_nic *efx)
{
  #line 1682 
  if ((efx->msg_enable & 1U) != 0U) {
    #line 1682 
    bool branch;
    #line 1682 
    struct _ddebug __UNIQUE_ID_ddebug607 = {.modname = (char *)"sfc_falcon", .function = (char *)"ef4_remove_nic", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c", .format = (char *)"destroying NIC\n", .lineno = (unsigned int)1682U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1682 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug607.key.dd_key_false.key,(_Bool)0);
    #line 1682 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 1682 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug607,efx->net_dev,(char *)"destroying NIC\n");
  }
  #line 1684 
  ef4_remove_interrupts(efx);
  #line 1685 
  (*((efx->type)->remove))(efx);
  #line 1686 
  return;
}

#line 1688  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
static int ef4_probe_filters(struct ef4_nic *efx)
{
  #line 1690 
  int rc;
  #line 1692 
  spinlock_check(& efx->filter_lock);
  {
    #line 1692 
    struct lock_class_key __key;
    #line 1692 
    __raw_spin_lock_init(& efx->filter_lock.__anonCompField_spinlock_25.rlock,(char *)"&(&efx->filter_lock)->rlock",& __key);
  }
  {
    #line 1693 
    struct lock_class_key __key_0;
    #line 1693 
    __init_rwsem(& efx->filter_sem,(char *)"&efx->filter_sem",& __key_0);
  }
  #line 1694 
  cif_mutex_lock_mac_lock_of_ef4_nic_0(& efx->mac_lock);
  #line 1695 
  down_write(& efx->filter_sem);
  #line 1696 
  rc = (*((efx->type)->filter_table_probe))(efx);
  #line 1697 
  if (rc != 0) 
               #line 1698 
               goto out_unlock;
  #line 1701 
  if (((efx->type)->offload_features & 137438953472ULL) != 0ULL) {
    #line 1702 
    struct ef4_channel *channel;
    #line 1703 
    int i;
    #line 1703 
    int success = 1;
    #line 1705 
    channel = efx->channel[0];
    #line 1705 
    while (channel != (struct ef4_channel *)0) {
      #line 1707 
      channel->rps_flow_id = (u32 *)kcalloc_0((unsigned long)(efx->type)->max_rx_ip_filters,4UL,3264U);
      #line 1710 
      if (channel->rps_flow_id == (u32 *)0U) 
                                             #line 1711 
                                             success = 0;
      else {
        #line 1713 
        i = 0;
        #line 1713 
        while ((efx->type)->max_rx_ip_filters > (unsigned int)i) {
          #line 1716 
          *(channel->rps_flow_id + (unsigned long)i) = 4294967295U;
          #line 1715 
          i ++;
        }
      }
      #line 1705 
      if ((unsigned int)(channel->channel + 1) < efx->n_channels) 
                                                                  #line 1705 
                                                                  channel = efx->channel[channel->channel + 1]; else 
                                                                    #line 1705 
                                                                    channel = (struct ef4_channel *)0;
    }
    #line 1720 
    if (success == 0) {
      #line 1721 
      channel = efx->channel[0];
      #line 1721 
      while (channel != (struct ef4_channel *)0) {
        #line 1722 
        kfree((void *)channel->rps_flow_id);
        #line 1721 
        if ((unsigned int)(channel->channel + 1) < efx->n_channels) 
                                                                    #line 1721 
                                                                    channel = efx->channel[channel->channel + 1]; else 
                                                                    #line 1721 
                                                                    channel = (struct ef4_channel *)0;
      }
      #line 1723 
      (*((efx->type)->filter_table_remove))(efx);
      #line 1724 
      rc = -12;
      #line 1725 
      goto out_unlock;
    }
    #line 1728 
    efx->rps_expire_channel = 0U;
    #line 1728 
    efx->rps_expire_index = 0U;
  }
  #line 1731 
  out_unlock: 
              #line 1731 
  ;
  #line 1732 
  up_write(& efx->filter_sem);
  #line 1733 
  cif_mutex_unlock_mac_lock_of_ef4_nic_0(& efx->mac_lock);
  #line 1734 
  return rc;
}

#line 1737  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
static void ef4_remove_filters(struct ef4_nic *efx)
{
  #line 1740 
  struct ef4_channel *channel;
  #line 1742 
  channel = efx->channel[0];
  #line 1742 
  while (channel != (struct ef4_channel *)0) {
    #line 1743 
    kfree((void *)channel->rps_flow_id);
    #line 1742 
    if ((unsigned int)(channel->channel + 1) < efx->n_channels) 
                                                                #line 1742 
                                                                channel = efx->channel[channel->channel + 1]; else 
                                                                    #line 1742 
                                                                    channel = (struct ef4_channel *)0;
  }
  #line 1745 
  down_write(& efx->filter_sem);
  #line 1746 
  (*((efx->type)->filter_table_remove))(efx);
  #line 1747 
  up_write(& efx->filter_sem);
  #line 1748 
  return;
}

#line 1750  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
static void ef4_restore_filters(struct ef4_nic *efx)
{
  #line 1752 
  down_read(& efx->filter_sem);
  #line 1753 
  (*((efx->type)->filter_table_restore))(efx);
  #line 1754 
  up_read(& efx->filter_sem);
  #line 1755 
  return;
}

#line 1763  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
static int ef4_probe_all(struct ef4_nic *efx)
{
  #line 1780 
  int __ret_warn_on;
  #line 1765 
  int rc;
  #line 1767 
  rc = ef4_probe_nic(efx);
  #line 1768 
  if (rc != 0) {
    #line 1769 
    if ((efx->msg_enable & 2U) != 0U) 
                                      #line 1769 
                                      netdev_err(efx->net_dev,(char *)"failed to create NIC\n");
    #line 1770 
    goto fail1;
  }
  #line 1773 
  rc = ef4_probe_port(efx);
  #line 1774 
  if (rc != 0) {
    #line 1775 
    if ((efx->msg_enable & 2U) != 0U) 
                                      #line 1775 
                                      netdev_err(efx->net_dev,(char *)"failed to create port\n");
    #line 1776 
    goto fail2;
  }
  {
    #line 1780 
    __ret_warn_on = ef4_tx_max_skb_descs(efx) * 2U > 1024U;
    #line 1780 
    if ((long)(__ret_warn_on != 0) != 0L) {
      #line 1781 
      ldv_inline_asm();
      #line 1782 
      ldv_inline_asm();
    }
    }
  #line 1780 
  if ((long)((long)(__ret_warn_on != 0)) != 0L) {
    #line 1781 
    rc = -22;
    #line 1782 
    goto fail3;
  }
  #line 1784 
  efx->txq_entries = 1024U;
  #line 1784 
  efx->rxq_entries = 1024U;
  #line 1786 
  rc = ef4_probe_filters(efx);
  #line 1787 
  if (rc != 0) {
    #line 1788 
    if ((efx->msg_enable & 2U) != 0U) 
                                      #line 1788 
                                      netdev_err(efx->net_dev,(char *)"failed to create filter tables\n");
    #line 1790 
    goto fail4;
  }
  #line 1793 
  rc = ef4_probe_channels(efx);
  #line 1794 
  if (rc != 0) 
               #line 1795 
               goto fail5;
  #line 1797 
  return 0;
  #line 1799 
  fail5: 
         #line 1799 
  ;
  #line 1800 
  ef4_remove_filters(efx);
  #line 1801 
  fail4: 
         #line 1801 
  ;
  #line 1802 
  fail3: 
         #line 1802 
  ;
  #line 1803 
  ef4_remove_port(efx);
  #line 1804 
  fail2: 
         #line 1804 
  ;
  #line 1805 
  ef4_remove_nic(efx);
  #line 1806 
  fail1: 
         #line 1806 
  ;
  #line 1807 
  return rc;
}

#line 1817  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
static void ef4_start_all(struct ef4_nic *efx)
{
  #line 1819 
  if ((efx->state == (unsigned int)STATE_READY || efx->state == (unsigned int)STATE_RECOVERY) || efx->state == (unsigned int)STATE_DISABLED) {
    #line 1819 
    bool __warned;
    #line 1819 
    int __ret_warn_once = rtnl_is_locked() == 0;
    #line 1819 
    if ((long)(__ret_warn_once != 0) != 0L && (long)(! __warned) != 0L) {
      #line 1819 
      __warned = (_Bool)1;
      {
        #line 1819 
        int __ret_warn_on = 1;
        #line 1819 
        if ((long)(__ret_warn_on != 0) != 0L) {
          #line 1819 
          __warn_printk((char *)"RTNL: assertion failed at %s (%d)\n",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c",1819);
          #line 1820 
          ldv_inline_asm();
          #line 1821 
          ldv_inline_asm();
        }
        #line 1819 
        long tmp_2 = (long)(__ret_warn_on != 0);
      }
    }
    #line 1819 
    long tmp_4 = (long)(__ret_warn_once != 0);
  }
  #line 1820 
  if ((long)(efx->state == (unsigned int)STATE_DISABLED) != 0L) {
    #line 1821 
    ldv_inline_asm();
    #line 1822 
    ldv_inline_asm();
    #line 1823 
    ldv_inline_asm();
    #line 1820 
    ;
  }
  #line 1824 
  if ((int)efx->port_enabled != 0) 
                                   #line 1826 
                                   return;
  else {
    #line 1824 
    if (netif_running(efx->net_dev)) {
      #line 1824 
      if (efx->reset_pending != 0UL) 
                                     #line 1826 
                                     return;
    }
    else 
         #line 1826 
         return;
  }
  #line 1828 
  ef4_start_port(efx);
  #line 1829 
  ef4_start_datapath(efx);
  #line 1832 
  if ((efx->type)->monitor != (void (*)(struct ef4_nic *))0) 
                                                             #line 1833 
                                                             cif_queue_delayed_work(efx->workqueue,& efx->monitor_work,(unsigned long)ef4_monitor_interval);
  #line 1836 
  (*((efx->type)->start_stats))(efx);
  #line 1837 
  (*((efx->type)->pull_stats))(efx);
  #line 1838 
  cif_spin_lock_bh_stats_lock_of_ef4_nic(& efx->stats_lock);
  #line 1839 
  (*((efx->type)->update_stats))(efx,(u64 *)0ULL,(struct rtnl_link_stats64 *)0);
  #line 1840 
  cif_spin_unlock_bh_stats_lock_of_ef4_nic(& efx->stats_lock);
  #line 1841 
  return;
}

#line 1848  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
static void ef4_stop_all(struct ef4_nic *efx)
{
  #line 1850 
  if ((efx->state == (unsigned int)STATE_READY || efx->state == (unsigned int)STATE_RECOVERY) || efx->state == (unsigned int)STATE_DISABLED) {
    #line 1850 
    bool __warned;
    #line 1850 
    int __ret_warn_once = rtnl_is_locked() == 0;
    #line 1850 
    if ((long)(__ret_warn_once != 0) != 0L && (long)(! __warned) != 0L) {
      #line 1850 
      __warned = (_Bool)1;
      {
        #line 1850 
        int __ret_warn_on = 1;
        #line 1850 
        if ((long)(__ret_warn_on != 0) != 0L) {
          #line 1850 
          __warn_printk((char *)"RTNL: assertion failed at %s (%d)\n",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c",1850);
          #line 1851 
          ldv_inline_asm();
          #line 1852 
          ldv_inline_asm();
        }
        #line 1850 
        long tmp_2 = (long)(__ret_warn_on != 0);
      }
    }
    #line 1850 
    long tmp_4 = (long)(__ret_warn_once != 0);
  }
  #line 1853 
  if (! efx->port_enabled) 
                           #line 1854 
                           return;
  #line 1859 
  (*((efx->type)->pull_stats))(efx);
  #line 1860 
  cif_spin_lock_bh_stats_lock_of_ef4_nic(& efx->stats_lock);
  #line 1861 
  (*((efx->type)->update_stats))(efx,(u64 *)0ULL,(struct rtnl_link_stats64 *)0);
  #line 1862 
  cif_spin_unlock_bh_stats_lock_of_ef4_nic(& efx->stats_lock);
  #line 1863 
  (*((efx->type)->stop_stats))(efx);
  #line 1864 
  ef4_stop_port(efx);
  {
    #line 1870 
    int tmp_2_3;
    #line 1870 
    if ((int)netif_running(efx->net_dev) != 0) {
      #line 1870 
      if ((int)netif_device_present(efx->net_dev) != 0) 
                                                        #line 1870 
                                                        tmp_2_3 = 1; else 
                                                                    #line 1870 
                                                                    tmp_2_3 = 0;
    }
    else 
         #line 1870 
         tmp_2_3 = 0;
    #line 1870 
    int __ret_warn_on_0 = tmp_2_3;
    #line 1870 
    if ((long)(__ret_warn_on_0 != 0) != 0L) {
      #line 1871 
      ldv_inline_asm();
      #line 1872 
      ldv_inline_asm();
    }
    #line 1870 
    long tmp_6 = (long)(__ret_warn_on_0 != 0);
  }
  #line 1872 
  netif_tx_disable(efx->net_dev);
  #line 1874 
  ef4_stop_datapath(efx);
  #line 1875 
  return;
}

#line 1877  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
static void ef4_remove_all(struct ef4_nic *efx)
{
  #line 1879 
  ef4_remove_channels(efx);
  #line 1880 
  ef4_remove_filters(efx);
  #line 1881 
  ef4_remove_port(efx);
  #line 1882 
  ef4_remove_nic(efx);
  #line 1883 
  return;
}

#line 1890  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
unsigned int ef4_usecs_to_ticks(struct ef4_nic *efx, unsigned int usecs)
{
  #line 1892 
  if (usecs == 0U) 
                   #line 1893 
                   return 0U;
  #line 1894 
  if (usecs * 1000U < efx->timer_quantum_ns) 
                                             #line 1895 
                                             return 1U;
  #line 1896 
  return (usecs * 1000U) / efx->timer_quantum_ns;
}

#line 1899  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
unsigned int ef4_ticks_to_usecs(struct ef4_nic *efx, unsigned int ticks)
{
  #line 1904 
  return (efx->timer_quantum_ns * ticks + 999U) / 1000U;
}

#line 1908  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
int ef4_init_irq_moderation(struct ef4_nic *efx, unsigned int tx_usecs, unsigned int rx_usecs, bool rx_adaptive, bool rx_may_override_tx)
{
  #line 1912 
  struct ef4_channel *channel;
  #line 1913 
  unsigned int timer_max_us;
  #line 1915 
  if ((efx->state == (unsigned int)STATE_READY || efx->state == (unsigned int)STATE_RECOVERY) || efx->state == (unsigned int)STATE_DISABLED) {
    #line 1915 
    bool __warned;
    #line 1915 
    int __ret_warn_once = rtnl_is_locked() == 0;
    #line 1915 
    if ((long)(__ret_warn_once != 0) != 0L && (long)(! __warned) != 0L) {
      #line 1915 
      __warned = (_Bool)1;
      {
        #line 1915 
        int __ret_warn_on = 1;
        #line 1915 
        if ((long)(__ret_warn_on != 0) != 0L) {
          #line 1915 
          __warn_printk((char *)"RTNL: assertion failed at %s (%d)\n",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c",1915);
          #line 1916 
          ldv_inline_asm();
          #line 1917 
          ldv_inline_asm();
        }
        #line 1915 
        long tmp_2 = (long)(__ret_warn_on != 0);
      }
    }
    #line 1915 
    long tmp_4 = (long)(__ret_warn_once != 0);
  }
  #line 1917 
  timer_max_us = efx->timer_max_ns / 1000U;
  #line 1919 
  if (tx_usecs > timer_max_us || rx_usecs > timer_max_us) 
                                                          #line 1920 
                                                          return -22;
  #line 1922 
  if ((tx_usecs != rx_usecs && efx->tx_channel_offset == 0U) && ! rx_may_override_tx) {
    #line 1924 
    if ((efx->msg_enable & 1U) != 0U) 
                                      #line 1924 
                                      netdev_err(efx->net_dev,(char *)"Channels are shared. ");
    #line 1926 
    return -22;
  }
  #line 1929 
  efx->irq_rx_adaptive = rx_adaptive;
  #line 1930 
  efx->irq_rx_moderation_us = rx_usecs;
  #line 1931 
  channel = efx->channel[0];
  #line 1931 
  while (channel != (struct ef4_channel *)0) {
    #line 1932 
    if ((int)ef4_channel_has_rx_queue(channel) != 0) 
                                                     #line 1933 
                                                     channel->irq_moderation_us = rx_usecs;
    else {
      #line 1934 
      if ((int)ef4_channel_has_tx_queues(channel) != 0) 
                                                        #line 1935 
                                                        channel->irq_moderation_us = tx_usecs;
    }
    #line 1931 
    if ((unsigned int)(channel->channel + 1) < efx->n_channels) 
                                                                #line 1931 
                                                                channel = efx->channel[channel->channel + 1]; else 
                                                                    #line 1931 
                                                                    channel = (struct ef4_channel *)0;
  }
  #line 1938 
  return 0;
}

#line 1941  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
void ef4_get_irq_moderation(struct ef4_nic *efx, unsigned int *tx_usecs, unsigned int *rx_usecs, bool *rx_adaptive)
{
  #line 1944 
  *rx_adaptive = efx->irq_rx_adaptive;
  #line 1945 
  *rx_usecs = efx->irq_rx_moderation_us;
  #line 1951 
  if (efx->tx_channel_offset == 0U) 
                                    #line 1952 
                                    *tx_usecs = *rx_usecs;
  else {
    #line 1954 
    struct ef4_channel *tx_channel;
    #line 1956 
    tx_channel = efx->channel[efx->tx_channel_offset];
    #line 1957 
    *tx_usecs = tx_channel->irq_moderation_us;
  }
  #line 1959 
  return;
}

#line 1968  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
static void ef4_monitor(struct work_struct *data)
{
  #line 1970 
  void *__mptr;
  #line 1970 
  __mptr = (void *)data;
  #line 1970 
  struct ef4_nic *efx = ((struct ef4_nic *)(__mptr + 18446744073709548032U));
  #line 1973 
  if (0) 
    #line 1973 
    if ((efx->msg_enable & 8U) != 0U) {
      #line 1973 
      int pscr_ret__;
      {
        #line 1973 
        void *__vpp_verify = (void *)0;
        #line 1973 
        void *tmp_2 = __vpp_verify;
      }
      #line 1973 
      switch (4UL) {
        #line 1973 
        int pfo_ret___1;
        #line 1973 
        int pfo_ret___2;
        #line 1973 
        int pfo_ret__;
        #line 1973 
        int pfo_ret___0;
        #line 1973 
        case (unsigned long)1: 
                               #line 1973 
        ;
        #line 1973 
        switch (4UL) {
          #line 1973 
          case (unsigned long)1: 
                                 #line 1973 
          ;
          #line 1974 
          ldv_inline_asm();
          #line 1973 
          break;
          #line 1973 
          case (unsigned long)2: 
                                 #line 1973 
          ;
          #line 1974 
          ldv_inline_asm();
          #line 1973 
          break;
          #line 1973 
          case (unsigned long)4: 
                                 #line 1973 
          ;
          #line 1974 
          ldv_inline_asm();
          #line 1973 
          break;
          #line 1973 
          case (unsigned long)8: 
                                 #line 1973 
          ;
          #line 1974 
          ldv_inline_asm();
          #line 1973 
          break;
          #line 1973 
          default: 
                   #line 1973 
          ;
          #line 1973 
          __bad_percpu_size();
        }
        #line 1973 
        pscr_ret__ = pfo_ret__;
        #line 1973 
        break;
        #line 1973 
        case (unsigned long)2: 
                               #line 1973 
        ;
        #line 1973 
        switch (4UL) {
          #line 1973 
          case (unsigned long)1: 
                                 #line 1973 
          ;
          #line 1974 
          ldv_inline_asm();
          #line 1973 
          break;
          #line 1973 
          case (unsigned long)2: 
                                 #line 1973 
          ;
          #line 1974 
          ldv_inline_asm();
          #line 1973 
          break;
          #line 1973 
          case (unsigned long)4: 
                                 #line 1973 
          ;
          #line 1974 
          ldv_inline_asm();
          #line 1973 
          break;
          #line 1973 
          case (unsigned long)8: 
                                 #line 1973 
          ;
          #line 1974 
          ldv_inline_asm();
          #line 1973 
          break;
          #line 1973 
          default: 
                   #line 1973 
          ;
          #line 1973 
          __bad_percpu_size();
        }
        #line 1973 
        pscr_ret__ = pfo_ret___0;
        #line 1973 
        break;
        #line 1973 
        case (unsigned long)4: 
                               #line 1973 
        ;
        #line 1973 
        switch (4UL) {
          #line 1973 
          case (unsigned long)1: 
                                 #line 1973 
          ;
          #line 1974 
          ldv_inline_asm();
          #line 1973 
          break;
          #line 1973 
          case (unsigned long)2: 
                                 #line 1973 
          ;
          #line 1974 
          ldv_inline_asm();
          #line 1973 
          break;
          #line 1973 
          case (unsigned long)4: 
                                 #line 1973 
          ;
          #line 1974 
          ldv_inline_asm();
          #line 1973 
          break;
          #line 1973 
          case (unsigned long)8: 
                                 #line 1973 
          ;
          #line 1974 
          ldv_inline_asm();
          #line 1973 
          break;
          #line 1973 
          default: 
                   #line 1973 
          ;
          #line 1973 
          __bad_percpu_size();
        }
        #line 1973 
        pscr_ret__ = pfo_ret___1;
        #line 1973 
        break;
        #line 1973 
        case (unsigned long)8: 
                               #line 1973 
        ;
        #line 1973 
        switch (4UL) {
          #line 1973 
          case (unsigned long)1: 
                                 #line 1973 
          ;
          #line 1974 
          ldv_inline_asm();
          #line 1973 
          break;
          #line 1973 
          case (unsigned long)2: 
                                 #line 1973 
          ;
          #line 1974 
          ldv_inline_asm();
          #line 1973 
          break;
          #line 1973 
          case (unsigned long)4: 
                                 #line 1973 
          ;
          #line 1974 
          ldv_inline_asm();
          #line 1973 
          break;
          #line 1973 
          case (unsigned long)8: 
                                 #line 1973 
          ;
          #line 1974 
          ldv_inline_asm();
          #line 1973 
          break;
          #line 1973 
          default: 
                   #line 1973 
          ;
          #line 1973 
          __bad_percpu_size();
        }
        #line 1973 
        pscr_ret__ = pfo_ret___2;
        #line 1973 
        break;
        #line 1973 
        default: 
                 #line 1973 
        ;
        #line 1973 
        __bad_size_call_parameter();
        #line 1973 
        break;
      }
      #line 1973 
      ;
      #line 1973 
      netdev_printk((char *)"\001",efx->net_dev,(char *)"hardware monitor executing on CPU %d\n",pscr_ret__);
    }
  #line 1976 
  if ((long)((efx->type)->monitor == (void (*)(struct ef4_nic *))0) != 0L) {
    #line 1977 
    ldv_inline_asm();
    #line 1978 
    ldv_inline_asm();
    #line 1979 
    ldv_inline_asm();
    #line 1976 
    ;
  }
  #line 1981 
  if (cif_mutex_trylock_mac_lock_of_ef4_nic(& efx->mac_lock) != 0) {
    #line 1982 
    if ((int)efx->port_enabled != 0) 
                                     #line 1983 
                                     (*((efx->type)->monitor))(efx);
    #line 1984 
    cif_mutex_unlock_mac_lock_of_ef4_nic_0(& efx->mac_lock);
  }
  #line 1987 
  cif_queue_delayed_work(efx->workqueue,& efx->monitor_work,(unsigned long)ef4_monitor_interval);
  #line 1988 
  return;
}

#line 2000  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
static int ef4_ioctl(struct net_device *net_dev, struct ifreq *ifr, int cmd)
{
  #line 2002 
  struct ef4_nic *efx = netdev_priv(net_dev);
  #line 2003 
  struct mii_ioctl_data *data = if_mii(ifr);
  #line 2006 
  if ((unsigned int)cmd + 4294932152U <= 1U && ((int)data->phy_id & 64512) == 1024) 
    #line 2008 
    data->phy_id = (unsigned short)((unsigned int)data->phy_id ^ 33792U);
  #line 2010 
  return mdio_mii_ioctl(& efx->mdio,data,cmd);
}

#line 2019  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
static void ef4_init_napi_channel(struct ef4_channel *channel)
{
  #line 2021 
  struct ef4_nic *efx = channel->efx;
  #line 2023 
  channel->napi_dev = efx->net_dev;
  #line 2024 
  netif_napi_add(channel->napi_dev,& channel->napi_str,& ef4_poll,napi_weight);
  #line 2026 
  return;
}

#line 2028  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
static void ef4_init_napi(struct ef4_nic *efx)
{
  #line 2030 
  struct ef4_channel *channel;
  #line 2032 
  channel = efx->channel[0];
  #line 2032 
  while (channel != (struct ef4_channel *)0) {
    #line 2033 
    ef4_init_napi_channel(channel);
    #line 2032 
    if ((unsigned int)(channel->channel + 1) < efx->n_channels) 
                                                                #line 2032 
                                                                channel = efx->channel[channel->channel + 1]; else 
                                                                    #line 2032 
                                                                    channel = (struct ef4_channel *)0;
  }
  #line 2034 
  return;
}

#line 2036  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
static void ef4_fini_napi_channel(struct ef4_channel *channel)
{
  #line 2038 
  if (channel->napi_dev != (struct net_device *)0) 
                                                   #line 2039 
                                                   netif_napi_del(& channel->napi_str);
  #line 2041 
  channel->napi_dev = (struct net_device *)0;
  #line 2042 
  return;
}

#line 2044  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
static void ef4_fini_napi(struct ef4_nic *efx)
{
  #line 2046 
  struct ef4_channel *channel;
  #line 2048 
  channel = efx->channel[0];
  #line 2048 
  while (channel != (struct ef4_channel *)0) {
    #line 2049 
    ef4_fini_napi_channel(channel);
    #line 2048 
    if ((unsigned int)(channel->channel + 1) < efx->n_channels) 
                                                                #line 2048 
                                                                channel = efx->channel[channel->channel + 1]; else 
                                                                    #line 2048 
                                                                    channel = (struct ef4_channel *)0;
  }
  #line 2050 
  return;
}

#line 2059  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
int ef4_net_open(struct net_device *net_dev)
{
  #line 2062 
  int rc;
  #line 2061 
  struct ef4_nic *efx = netdev_priv(net_dev);
  #line 2064 
  if ((efx->msg_enable & 32U) != 0U) {
    #line 2064 
    bool branch;
    #line 2064 
    struct _ddebug __UNIQUE_ID_ddebug615 = {.modname = (char *)"sfc_falcon", .function = (char *)"ef4_net_open", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c", .format = (char *)"opening device on CPU %d\n", .lineno = (unsigned int)2064U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 2064 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug615.key.dd_key_false.key,(_Bool)0);
    #line 2064 
    if ((long)((long)((int)branch != 0)) != 0L) {
      #line 2064 
      int pscr_ret__;
      {
        #line 2064 
        void *__vpp_verify = (void *)0;
        #line 2064 
        void *tmp_2 = __vpp_verify;
      }
      #line 2064 
      switch (4UL) {
        #line 2064 
        int pfo_ret__;
        #line 2064 
        int pfo_ret___0;
        #line 2064 
        int pfo_ret___1;
        #line 2064 
        int pfo_ret___2;
        #line 2064 
        case (unsigned long)1: 
                               #line 2064 
        ;
        #line 2064 
        switch (4UL) {
          #line 2064 
          case (unsigned long)1: 
                                 #line 2064 
          ;
          #line 2065 
          ldv_inline_asm();
          #line 2064 
          break;
          #line 2064 
          case (unsigned long)2: 
                                 #line 2064 
          ;
          #line 2065 
          ldv_inline_asm();
          #line 2064 
          break;
          #line 2064 
          case (unsigned long)4: 
                                 #line 2064 
          ;
          #line 2065 
          ldv_inline_asm();
          #line 2064 
          break;
          #line 2064 
          case (unsigned long)8: 
                                 #line 2064 
          ;
          #line 2065 
          ldv_inline_asm();
          #line 2064 
          break;
          #line 2064 
          default: 
                   #line 2064 
          ;
          #line 2064 
          __bad_percpu_size();
        }
        #line 2064 
        pscr_ret__ = pfo_ret__;
        #line 2064 
        break;
        #line 2064 
        case (unsigned long)2: 
                               #line 2064 
        ;
        #line 2064 
        switch (4UL) {
          #line 2064 
          case (unsigned long)1: 
                                 #line 2064 
          ;
          #line 2065 
          ldv_inline_asm();
          #line 2064 
          break;
          #line 2064 
          case (unsigned long)2: 
                                 #line 2064 
          ;
          #line 2065 
          ldv_inline_asm();
          #line 2064 
          break;
          #line 2064 
          case (unsigned long)4: 
                                 #line 2064 
          ;
          #line 2065 
          ldv_inline_asm();
          #line 2064 
          break;
          #line 2064 
          case (unsigned long)8: 
                                 #line 2064 
          ;
          #line 2065 
          ldv_inline_asm();
          #line 2064 
          break;
          #line 2064 
          default: 
                   #line 2064 
          ;
          #line 2064 
          __bad_percpu_size();
        }
        #line 2064 
        pscr_ret__ = pfo_ret___0;
        #line 2064 
        break;
        #line 2064 
        case (unsigned long)4: 
                               #line 2064 
        ;
        #line 2064 
        switch (4UL) {
          #line 2064 
          case (unsigned long)1: 
                                 #line 2064 
          ;
          #line 2065 
          ldv_inline_asm();
          #line 2064 
          break;
          #line 2064 
          case (unsigned long)2: 
                                 #line 2064 
          ;
          #line 2065 
          ldv_inline_asm();
          #line 2064 
          break;
          #line 2064 
          case (unsigned long)4: 
                                 #line 2064 
          ;
          #line 2065 
          ldv_inline_asm();
          #line 2064 
          break;
          #line 2064 
          case (unsigned long)8: 
                                 #line 2064 
          ;
          #line 2065 
          ldv_inline_asm();
          #line 2064 
          break;
          #line 2064 
          default: 
                   #line 2064 
          ;
          #line 2064 
          __bad_percpu_size();
        }
        #line 2064 
        pscr_ret__ = pfo_ret___1;
        #line 2064 
        break;
        #line 2064 
        case (unsigned long)8: 
                               #line 2064 
        ;
        #line 2064 
        switch (4UL) {
          #line 2064 
          case (unsigned long)1: 
                                 #line 2064 
          ;
          #line 2065 
          ldv_inline_asm();
          #line 2064 
          break;
          #line 2064 
          case (unsigned long)2: 
                                 #line 2064 
          ;
          #line 2065 
          ldv_inline_asm();
          #line 2064 
          break;
          #line 2064 
          case (unsigned long)4: 
                                 #line 2064 
          ;
          #line 2065 
          ldv_inline_asm();
          #line 2064 
          break;
          #line 2064 
          case (unsigned long)8: 
                                 #line 2064 
          ;
          #line 2065 
          ldv_inline_asm();
          #line 2064 
          break;
          #line 2064 
          default: 
                   #line 2064 
          ;
          #line 2064 
          __bad_percpu_size();
        }
        #line 2064 
        pscr_ret__ = pfo_ret___2;
        #line 2064 
        break;
        #line 2064 
        default: 
                 #line 2064 
        ;
        #line 2064 
        __bad_size_call_parameter();
        #line 2064 
        break;
      }
      #line 2064 
      ;
      #line 2064 
      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug615,efx->net_dev,(char *)"opening device on CPU %d\n",pscr_ret__);
    }
  }
  #line 2067 
  rc = ef4_check_disabled(efx);
  #line 2068 
  if (rc != 0) 
               #line 2069 
               return rc;
  #line 2070 
  if (((unsigned int)efx->phy_mode & 8U) != 0U) 
                                                #line 2071 
                                                return -16;
  #line 2075 
  ef4_link_status_changed(efx);
  #line 2077 
  ef4_start_all(efx);
  #line 2078 
  ef4_selftest_async_start(efx);
  #line 2079 
  return 0;
}

#line 2086  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
int ef4_net_stop(struct net_device *net_dev)
{
  #line 2088 
  struct ef4_nic *efx = netdev_priv(net_dev);
  #line 2090 
  if ((efx->msg_enable & 16U) != 0U) {
    #line 2090 
    bool branch;
    #line 2090 
    struct _ddebug __UNIQUE_ID_ddebug616 = {.modname = (char *)"sfc_falcon", .function = (char *)"ef4_net_stop", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c", .format = (char *)"closing on CPU %d\n", .lineno = (unsigned int)2090U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 2090 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug616.key.dd_key_false.key,(_Bool)0);
    #line 2090 
    if ((long)((long)((int)branch != 0)) != 0L) {
      #line 2090 
      int pscr_ret__;
      {
        #line 2090 
        void *__vpp_verify = (void *)0;
        #line 2090 
        void *tmp_2 = __vpp_verify;
      }
      #line 2090 
      switch (4UL) {
        #line 2090 
        int pfo_ret___2;
        #line 2090 
        int pfo_ret__;
        #line 2090 
        int pfo_ret___0;
        #line 2090 
        int pfo_ret___1;
        #line 2090 
        case (unsigned long)1: 
                               #line 2090 
        ;
        #line 2090 
        switch (4UL) {
          #line 2090 
          case (unsigned long)1: 
                                 #line 2090 
          ;
          #line 2091 
          ldv_inline_asm();
          #line 2090 
          break;
          #line 2090 
          case (unsigned long)2: 
                                 #line 2090 
          ;
          #line 2091 
          ldv_inline_asm();
          #line 2090 
          break;
          #line 2090 
          case (unsigned long)4: 
                                 #line 2090 
          ;
          #line 2091 
          ldv_inline_asm();
          #line 2090 
          break;
          #line 2090 
          case (unsigned long)8: 
                                 #line 2090 
          ;
          #line 2091 
          ldv_inline_asm();
          #line 2090 
          break;
          #line 2090 
          default: 
                   #line 2090 
          ;
          #line 2090 
          __bad_percpu_size();
        }
        #line 2090 
        pscr_ret__ = pfo_ret__;
        #line 2090 
        break;
        #line 2090 
        case (unsigned long)2: 
                               #line 2090 
        ;
        #line 2090 
        switch (4UL) {
          #line 2090 
          case (unsigned long)1: 
                                 #line 2090 
          ;
          #line 2091 
          ldv_inline_asm();
          #line 2090 
          break;
          #line 2090 
          case (unsigned long)2: 
                                 #line 2090 
          ;
          #line 2091 
          ldv_inline_asm();
          #line 2090 
          break;
          #line 2090 
          case (unsigned long)4: 
                                 #line 2090 
          ;
          #line 2091 
          ldv_inline_asm();
          #line 2090 
          break;
          #line 2090 
          case (unsigned long)8: 
                                 #line 2090 
          ;
          #line 2091 
          ldv_inline_asm();
          #line 2090 
          break;
          #line 2090 
          default: 
                   #line 2090 
          ;
          #line 2090 
          __bad_percpu_size();
        }
        #line 2090 
        pscr_ret__ = pfo_ret___0;
        #line 2090 
        break;
        #line 2090 
        case (unsigned long)4: 
                               #line 2090 
        ;
        #line 2090 
        switch (4UL) {
          #line 2090 
          case (unsigned long)1: 
                                 #line 2090 
          ;
          #line 2091 
          ldv_inline_asm();
          #line 2090 
          break;
          #line 2090 
          case (unsigned long)2: 
                                 #line 2090 
          ;
          #line 2091 
          ldv_inline_asm();
          #line 2090 
          break;
          #line 2090 
          case (unsigned long)4: 
                                 #line 2090 
          ;
          #line 2091 
          ldv_inline_asm();
          #line 2090 
          break;
          #line 2090 
          case (unsigned long)8: 
                                 #line 2090 
          ;
          #line 2091 
          ldv_inline_asm();
          #line 2090 
          break;
          #line 2090 
          default: 
                   #line 2090 
          ;
          #line 2090 
          __bad_percpu_size();
        }
        #line 2090 
        pscr_ret__ = pfo_ret___1;
        #line 2090 
        break;
        #line 2090 
        case (unsigned long)8: 
                               #line 2090 
        ;
        #line 2090 
        switch (4UL) {
          #line 2090 
          case (unsigned long)1: 
                                 #line 2090 
          ;
          #line 2091 
          ldv_inline_asm();
          #line 2090 
          break;
          #line 2090 
          case (unsigned long)2: 
                                 #line 2090 
          ;
          #line 2091 
          ldv_inline_asm();
          #line 2090 
          break;
          #line 2090 
          case (unsigned long)4: 
                                 #line 2090 
          ;
          #line 2091 
          ldv_inline_asm();
          #line 2090 
          break;
          #line 2090 
          case (unsigned long)8: 
                                 #line 2090 
          ;
          #line 2091 
          ldv_inline_asm();
          #line 2090 
          break;
          #line 2090 
          default: 
                   #line 2090 
          ;
          #line 2090 
          __bad_percpu_size();
        }
        #line 2090 
        pscr_ret__ = pfo_ret___2;
        #line 2090 
        break;
        #line 2090 
        default: 
                 #line 2090 
        ;
        #line 2090 
        __bad_size_call_parameter();
        #line 2090 
        break;
      }
      #line 2090 
      ;
      #line 2090 
      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug616,efx->net_dev,(char *)"closing on CPU %d\n",pscr_ret__);
    }
  }
  #line 2094 
  ef4_stop_all(efx);
  #line 2096 
  return 0;
}

#line 2100  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
static void ef4_net_stats(struct net_device *net_dev, struct rtnl_link_stats64 *stats)
{
  #line 2103 
  struct ef4_nic *efx = netdev_priv(net_dev);
  #line 2105 
  cif_spin_lock_bh_stats_lock_of_ef4_nic(& efx->stats_lock);
  #line 2106 
  (*((efx->type)->update_stats))(efx,(u64 *)0ULL,stats);
  #line 2107 
  cif_spin_unlock_bh_stats_lock_of_ef4_nic(& efx->stats_lock);
  #line 2108 
  return;
}

#line 2111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
static void ef4_watchdog(struct net_device *net_dev)
{
  #line 2113 
  struct ef4_nic *efx = netdev_priv(net_dev);
  #line 2115 
  if ((efx->msg_enable & 128U) != 0U) 
                                      #line 2115 
                                      netdev_err(efx->net_dev,(char *)"TX stuck with port_enabled=%d: resetting channels\n",(int)efx->port_enabled);
  #line 2119 
  ef4_schedule_reset(efx,(enum reset_type)RESET_TYPE_TX_WATCHDOG);
  #line 2120 
  return;
}

#line 2124  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
static int ef4_change_mtu(struct net_device *net_dev, int new_mtu)
{
  #line 2127 
  int rc;
  #line 2126 
  struct ef4_nic *efx = netdev_priv(net_dev);
  #line 2129 
  rc = ef4_check_disabled(efx);
  #line 2130 
  if (rc != 0) 
               #line 2131 
               return rc;
  #line 2133 
  if ((efx->msg_enable & 1U) != 0U) {
    #line 2133 
    bool branch;
    #line 2133 
    struct _ddebug __UNIQUE_ID_ddebug617 = {.modname = (char *)"sfc_falcon", .function = (char *)"ef4_change_mtu", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c", .format = (char *)"changing MTU to %d\n", .lineno = (unsigned int)2133U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 2133 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug617.key.dd_key_false.key,(_Bool)0);
    #line 2133 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 2133 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug617,efx->net_dev,(char *)"changing MTU to %d\n",new_mtu);
  }
  #line 2135 
  ef4_device_detach_sync(efx);
  #line 2136 
  ef4_stop_all(efx);
  #line 2138 
  cif_mutex_lock_mac_lock_of_ef4_nic_0(& efx->mac_lock);
  #line 2139 
  net_dev->mtu = (unsigned int)new_mtu;
  #line 2140 
  ef4_mac_reconfigure(efx);
  #line 2141 
  cif_mutex_unlock_mac_lock_of_ef4_nic_0(& efx->mac_lock);
  #line 2143 
  ef4_start_all(efx);
  #line 2144 
  netif_device_attach(efx->net_dev);
  #line 2145 
  return 0;
}

#line 2148  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
static int ef4_set_mac_address(struct net_device *net_dev, void *data)
{
  #line 2153 
  u8 old_addr[6U];
  #line 2154 
  int rc;
  #line 2150 
  struct ef4_nic *efx = netdev_priv(net_dev);
  #line 2151 
  struct sockaddr *addr = (struct sockaddr *)data;
  #line 2152 
  u8 *new_addr = (u8 *)(& addr->sa_data);
  #line 2156 
  if (! is_valid_ether_addr(new_addr)) {
    #line 2157 
    if ((efx->msg_enable & 1U) != 0U) 
                                      #line 2157 
                                      netdev_err(efx->net_dev,(char *)"invalid ethernet MAC address requested: %pM\n",new_addr);
    #line 2160 
    return -99;
  }
  #line 2164 
  ether_addr_copy((u8 *)(& old_addr),net_dev->dev_addr);
  #line 2165 
  ether_addr_copy(net_dev->dev_addr,new_addr);
  #line 2166 
  if ((efx->type)->set_mac_address != (int (*)(struct ef4_nic *))0) {
    #line 2167 
    rc = (*((efx->type)->set_mac_address))(efx);
    #line 2168 
    if (rc != 0) {
      #line 2169 
      ether_addr_copy(net_dev->dev_addr,(u8 *)(& old_addr));
      #line 2170 
      return rc;
    }
  }
  #line 2175 
  cif_mutex_lock_mac_lock_of_ef4_nic_0(& efx->mac_lock);
  #line 2176 
  ef4_mac_reconfigure(efx);
  #line 2177 
  cif_mutex_unlock_mac_lock_of_ef4_nic_0(& efx->mac_lock);
  #line 2179 
  return 0;
}

#line 2183  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
static void ef4_set_rx_mode(struct net_device *net_dev)
{
  #line 2185 
  struct ef4_nic *efx = netdev_priv(net_dev);
  #line 2187 
  if ((int)efx->port_enabled != 0) 
                                   #line 2188 
                                   cif_queue_work(efx->workqueue,& efx->mac_work);
  #line 2189 
  return;
}

#line 2192  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
static int ef4_set_features(struct net_device *net_dev, netdev_features_t data)
{
  #line 2195 
  int rc;
  #line 2194 
  struct ef4_nic *efx = netdev_priv(net_dev);
  #line 2198 
  if (((net_dev->features & ~ data) & 137438953472ULL) != 0ULL) {
    #line 2199 
    rc = (*((efx->type)->filter_clear_rx))(efx,(enum ef4_filter_priority)EF4_FILTER_PRI_MANUAL);
    #line 2200 
    if (rc != 0) 
                 #line 2201 
                 return rc;
  }
  #line 2205 
  if (((net_dev->features ^ data) & 512ULL) != 0ULL) 
                                                     #line 2209 
                                                     ef4_set_rx_mode(net_dev);
  #line 2212 
  return 0;
}

#line 2215  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
static struct net_device_ops ef4_netdev_ops = {.ndo_open = & ef4_net_open, .ndo_stop = & ef4_net_stop, .ndo_start_xmit = & ef4_hard_start_xmit, .ndo_set_rx_mode = & ef4_set_rx_mode, .ndo_set_mac_address = & ef4_set_mac_address, .ndo_validate_addr = & eth_validate_addr, .ndo_do_ioctl = & ef4_ioctl, .ndo_change_mtu = & ef4_change_mtu, .ndo_tx_timeout = & ef4_watchdog, .ndo_get_stats64 = & ef4_net_stats, .ndo_setup_tc = & ef4_setup_tc, .ndo_rx_flow_steer = & ef4_filter_rfs, .ndo_set_features = & ef4_set_features};
#line 2233  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
static void ef4_update_name(struct ef4_nic *efx)
{
  #line 2235 
  strcpy((char *)(& efx->name),(char *)(& (efx->net_dev)->name));
  #line 2236 
  ef4_mtd_rename(efx);
  #line 2237 
  ef4_set_channel_names(efx);
  #line 2238 
  return;
}

#line 2240  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
static int ef4_netdev_event(struct notifier_block *this, unsigned long event, void *ptr)
{
  #line 2243 
  struct net_device *net_dev = netdev_notifier_info_to_dev((struct netdev_notifier_info *)ptr);
  #line 2245 
  if (net_dev->netdev_ops == & ef4_netdev_ops && event == 11UL) {
    #line 2247 
    ef4_update_name((struct ef4_nic *)netdev_priv(net_dev));
  }
  #line 2249 
  return 0;
}

#line 2252  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
static struct notifier_block ef4_netdev_notifier = {.notifier_call = & ef4_netdev_event};
#line 2257  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
static ssize_t show_phy_type(struct device *dev, struct device_attribute *attr, char *buf)
{
  #line 2259 
  struct ef4_nic *efx = dev_get_drvdata(dev);
  #line 2260 
  return (long)sprintf(buf,(char *)"%d\n",efx->phy_type);
}

#line 2262  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
static struct device_attribute dev_attr_phy_type = {.attr = {.name = (char *)"phy_type", .mode = (unsigned short)292U}, .show = & show_phy_type};
#line 2264  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
static int ef4_register_netdev(struct ef4_nic *efx)
{
  #line 2267 
  struct ef4_channel *channel;
  #line 2268 
  int rc;
  #line 2266 
  struct net_device *net_dev = efx->net_dev;
  #line 2270 
  net_dev->watchdog_timeo = 1250;
  #line 2271 
  net_dev->irq = (int)(efx->pci_dev)->irq;
  #line 2272 
  net_dev->netdev_ops = & ef4_netdev_ops;
  #line 2273 
  net_dev->ethtool_ops = & ef4_ethtool_ops;
  #line 2274 
  net_dev->gso_max_segs = (unsigned short)100U;
  #line 2275 
  net_dev->min_mtu = 68U;
  #line 2276 
  net_dev->max_mtu = 9216U;
  #line 2278 
  rtnl_lock();
  #line 2284 
  efx->state = STATE_READY;
  #line 2285 
  ldv_inline_asm();
  #line 2286 
  if (efx->reset_pending != 0UL) {
    #line 2287 
    if ((efx->msg_enable & 2U) != 0U) 
                                      #line 2287 
                                      netdev_err(efx->net_dev,(char *)"aborting probe due to scheduled reset\n");
    #line 2289 
    rc = -5;
    #line 2290 
    goto fail_locked;
  }
  #line 2293 
  rc = dev_alloc_name(net_dev,(char *)(& net_dev->name));
  #line 2294 
  if (rc < 0) 
              #line 2295 
              goto fail_locked;
  #line 2296 
  ef4_update_name(efx);
  #line 2299 
  netif_carrier_off(net_dev);
  #line 2301 
  rc = register_netdevice(net_dev);
  #line 2302 
  if (rc != 0) 
               #line 2303 
               goto fail_locked;
  #line 2305 
  channel = efx->channel[0];
  #line 2305 
  while (channel != (struct ef4_channel *)0) {
    {
      #line 2306 
      struct ef4_tx_queue *tx_queue;
      #line 2307 
      if (ef4_channel_has_tx_queues(channel)) {
        #line 2307 
        tx_queue = (struct ef4_tx_queue *)(& channel->tx_queue);
        #line 2307 
        while (1) {
          #line 2307 
          if ((struct ef4_tx_queue *)(& channel->tx_queue) + 4U > tx_queue) {
            #line 2307 
            if (! ((int)ef4_tx_queue_used(tx_queue) != 0)) 
                                                           #line 2307 
                                                           break;
          }
          else 
               #line 2307 
               break;
          #line 2308 
          ef4_init_tx_queue_core_txq(tx_queue);
          #line 2307 
          tx_queue ++;
        }
      }
    }
    #line 2305 
    if ((unsigned int)(channel->channel + 1) < efx->n_channels) 
                                                                #line 2305 
                                                                channel = efx->channel[channel->channel + 1]; else 
                                                                    #line 2305 
                                                                    channel = (struct ef4_channel *)0;
  }
  #line 2311 
  ef4_associate(efx);
  #line 2313 
  rtnl_unlock();
  #line 2315 
  rc = cif_device_create_file(& (efx->pci_dev)->dev,& dev_attr_phy_type);
  #line 2316 
  if (rc != 0) {
    #line 2317 
    if ((efx->msg_enable & 1U) != 0U) 
                                      #line 2317 
                                      netdev_err(efx->net_dev,(char *)"failed to init net dev attributes\n");
    #line 2319 
    goto fail_registered;
  }
  #line 2321 
  return 0;
  #line 2323 
  fail_registered: 
                   #line 2323 
  ;
  #line 2324 
  rtnl_lock();
  #line 2325 
  ef4_dissociate(efx);
  #line 2326 
  unregister_netdevice(net_dev);
  #line 2327 
  fail_locked: 
               #line 2327 
  ;
  #line 2328 
  efx->state = STATE_UNINIT;
  #line 2329 
  rtnl_unlock();
  #line 2330 
  if ((efx->msg_enable & 1U) != 0U) 
                                    #line 2330 
                                    netdev_err(efx->net_dev,(char *)"could not register net dev\n");
  #line 2331 
  return rc;
}

#line 2334  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
static void ef4_unregister_netdev(struct ef4_nic *efx)
{
  #line 2336 
  if (efx->net_dev == (struct net_device *)0) 
                                              #line 2337 
                                              return;
  #line 2339 
  ;
  #line 2339 
  if ((long)(netdev_priv(efx->net_dev) != (void *)efx) != 0L) {
    #line 2340 
    ldv_inline_asm();
    #line 2341 
    ldv_inline_asm();
    #line 2342 
    ldv_inline_asm();
    #line 2339 
    ;
  }
  #line 2341 
  if (ef4_dev_registered(efx) != 0) {
    #line 2342 
    ;
    #line 2342 
    strlcpy((char *)(& efx->name),pci_name(efx->pci_dev),16UL);
    #line 2343 
    cif_device_remove_file(& (efx->pci_dev)->dev,& dev_attr_phy_type);
    #line 2344 
    cif_unregister_netdev(efx->net_dev);
  }
  #line 2346 
  return;
}

#line 2356  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
void ef4_reset_down(struct ef4_nic *efx, enum reset_type method)
{
  #line 2358 
  if ((efx->state == (unsigned int)STATE_READY || efx->state == (unsigned int)STATE_RECOVERY) || efx->state == (unsigned int)STATE_DISABLED) {
    #line 2358 
    bool __warned;
    #line 2358 
    int __ret_warn_once = rtnl_is_locked() == 0;
    #line 2358 
    if ((long)(__ret_warn_once != 0) != 0L && (long)(! __warned) != 0L) {
      #line 2358 
      __warned = (_Bool)1;
      {
        #line 2358 
        int __ret_warn_on = 1;
        #line 2358 
        if ((long)(__ret_warn_on != 0) != 0L) {
          #line 2358 
          __warn_printk((char *)"RTNL: assertion failed at %s (%d)\n",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c",2358);
          #line 2359 
          ldv_inline_asm();
          #line 2360 
          ldv_inline_asm();
        }
        #line 2358 
        long tmp_2 = (long)(__ret_warn_on != 0);
      }
    }
    #line 2358 
    long tmp_4 = (long)(__ret_warn_once != 0);
  }
  #line 2360 
  ef4_stop_all(efx);
  #line 2361 
  ef4_disable_interrupts(efx);
  #line 2363 
  cif_mutex_lock_mac_lock_of_ef4_nic_0(& efx->mac_lock);
  #line 2364 
  if ((int)efx->port_initialized != 0 && (method != (unsigned int)RESET_TYPE_INVISIBLE && method != (unsigned int)RESET_TYPE_DATAPATH)) 
    #line 2366 
    (*((efx->phy_op)->fini))(efx);
  #line 2367 
  (*((efx->type)->fini))(efx);
  #line 2368 
  return;
}

#line 2375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
int ef4_reset_up(struct ef4_nic *efx, enum reset_type method, bool ok)
{
  #line 2377 
  int rc;
  #line 2379 
  if ((efx->state == (unsigned int)STATE_READY || efx->state == (unsigned int)STATE_RECOVERY) || efx->state == (unsigned int)STATE_DISABLED) {
    #line 2379 
    bool __warned;
    #line 2379 
    int __ret_warn_once = rtnl_is_locked() == 0;
    #line 2379 
    if ((long)(__ret_warn_once != 0) != 0L && (long)(! __warned) != 0L) {
      #line 2379 
      __warned = (_Bool)1;
      {
        #line 2379 
        int __ret_warn_on = 1;
        #line 2379 
        if ((long)(__ret_warn_on != 0) != 0L) {
          #line 2379 
          __warn_printk((char *)"RTNL: assertion failed at %s (%d)\n",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c",2379);
          #line 2380 
          ldv_inline_asm();
          #line 2381 
          ldv_inline_asm();
        }
        #line 2379 
        long tmp_2 = (long)(__ret_warn_on != 0);
      }
    }
    #line 2379 
    long tmp_4 = (long)(__ret_warn_once != 0);
  }
  #line 2382 
  rc = (*((efx->type)->init))(efx);
  #line 2383 
  if (rc != 0) {
    #line 2384 
    if ((efx->msg_enable & 1U) != 0U) 
                                      #line 2384 
                                      netdev_err(efx->net_dev,(char *)"failed to initialise NIC\n");
    #line 2385 
    goto fail;
  }
  #line 2388 
  if (! ok) 
            #line 2389 
            goto fail;
  #line 2391 
  if ((int)efx->port_initialized != 0 && (method != (unsigned int)RESET_TYPE_INVISIBLE && method != (unsigned int)RESET_TYPE_DATAPATH)) {
    #line 2393 
    rc = (*((efx->phy_op)->init))(efx);
    #line 2394 
    if (rc != 0) 
                 #line 2395 
                 goto fail;
    #line 2396 
    rc = (*((efx->phy_op)->reconfigure))(efx);
    #line 2397 
    if ((unsigned int)rc + 1U > 1U) 
      #line 2398 
      if ((efx->msg_enable & 1U) != 0U) 
                                        #line 2398 
                                        netdev_err(efx->net_dev,(char *)"could not restore PHY settings\n");
  }
  #line 2402 
  rc = ef4_enable_interrupts(efx);
  #line 2403 
  if (rc != 0) 
               #line 2404 
               goto fail;
  #line 2406 
  down_read(& efx->filter_sem);
  #line 2407 
  ef4_restore_filters(efx);
  #line 2408 
  up_read(& efx->filter_sem);
  #line 2410 
  cif_mutex_unlock_mac_lock_of_ef4_nic_0(& efx->mac_lock);
  #line 2412 
  ef4_start_all(efx);
  #line 2414 
  return 0;
  #line 2416 
  fail: 
        #line 2416 
  ;
  #line 2417 
  efx->port_initialized = (_Bool)0;
  #line 2419 
  cif_mutex_unlock_mac_lock_of_ef4_nic_0(& efx->mac_lock);
  #line 2421 
  return rc;
}

#line 2429  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
int ef4_reset(struct ef4_nic *efx, enum reset_type method)
{
  #line 2431 
  int rc;
  #line 2431 
  int rc2;
  #line 2432 
  bool disabled;
  #line 2434 
  if ((efx->msg_enable & 1U) != 0U) {
    #line 2434 
    char *tmp;
    #line 2434 
    if (method <= (unsigned int)RESET_TYPE_TX_SKIP) 
                                                    #line 2434 
                                                    tmp = ef4_reset_type_names[(unsigned int)method]; else 
                                                                    #line 2434 
                                                                    tmp = (char *)"(invalid)";
    #line 2434 
    ;
    #line 2434 
    netdev_info(efx->net_dev,(char *)"resetting (%s)\n",tmp);
  }
  #line 2437 
  ef4_device_detach_sync(efx);
  #line 2438 
  ef4_reset_down(efx,method);
  #line 2440 
  rc = (*((efx->type)->reset))(efx,method);
  #line 2441 
  if (rc != 0) {
    #line 2442 
    if ((efx->msg_enable & 1U) != 0U) 
                                      #line 2442 
                                      netdev_err(efx->net_dev,(char *)"failed to reset hardware\n");
    #line 2443 
    goto out;
  }
  #line 2449 
  if (method <= (unsigned int)RESET_TYPE_DISABLE) 
                                                  #line 2450 
                                                  efx->reset_pending &= (unsigned long)(- (1 << ((unsigned int)method + 1U))); else 
                                                                    #line 2452 
                                                                    __clear_bit((long)method,& efx->reset_pending);
  #line 2458 
  pci_set_master(efx->pci_dev);
  #line 2460 
  out: 
       #line 2460 
  ;
  #line 2462 
  disabled = (_Bool)(((rc != 0 || method == (unsigned int)RESET_TYPE_DISABLE) || method == (unsigned int)RESET_TYPE_RECOVER_OR_DISABLE) != 0);
  #line 2465 
  rc2 = ef4_reset_up(efx,method,(_Bool)((int)((_Bool)(! ((int)disabled != 0)))));
  #line 2466 
  if (rc2 != 0) {
    #line 2467 
    disabled = (_Bool)1;
    #line 2468 
    if (rc == 0) 
                 #line 2469 
                 rc = rc2;
  }
  #line 2472 
  if ((int)disabled != 0) {
    #line 2473 
    dev_close(efx->net_dev);
    #line 2474 
    if ((efx->msg_enable & 1U) != 0U) 
                                      #line 2474 
                                      netdev_err(efx->net_dev,(char *)"has been disabled\n");
    #line 2475 
    efx->state = STATE_DISABLED;
  }
  else {
    #line 2477 
    if ((efx->msg_enable & 1U) != 0U) {
      #line 2477 
      bool branch;
      #line 2477 
      struct _ddebug __UNIQUE_ID_ddebug621 = {.modname = (char *)"sfc_falcon", .function = (char *)"ef4_reset", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c", .format = (char *)"reset complete\n", .lineno = (unsigned int)2477U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 2477 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug621.key.dd_key_false.key,(_Bool)0);
      #line 2477 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 2477 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug621,efx->net_dev,(char *)"reset complete\n");
    }
    #line 2478 
    netif_device_attach(efx->net_dev);
  }
  #line 2480 
  return rc;
}

#line 2488  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
int ef4_try_recovery(struct ef4_nic *efx)
{
  #line 2504 
  return 0;
}

#line 2510  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
static void ef4_reset_work(struct work_struct *data)
{
  #line 2512 
  void *__mptr;
  #line 2517 
  union __anonunion___u_3069 __u;
  #line 2513 
  unsigned long pending;
  #line 2514 
  enum reset_type method;
  #line 2512 
  __mptr = (void *)data;
  #line 2512 
  struct ef4_nic *efx = ((struct ef4_nic *)(__mptr + 18446744073709551504U));
  #line 2516 
  __read_once_size((void *)(& efx->reset_pending),(void *)(& __u.__c),8);
  #line 2516 
  pending = (__u.__val);
  #line 2517 
  method = (enum reset_type)(fls((unsigned int)pending) + -1);
  #line 2519 
  if (method == (unsigned int)RESET_TYPE_RECOVER_OR_DISABLE || method == (unsigned int)RESET_TYPE_RECOVER_OR_ALL) {
    #line 2520 
    if (ef4_try_recovery(efx) != 0) 
                                    #line 2522 
                                    return;
  }
  #line 2524 
  if (pending == 0UL) 
                      #line 2525 
                      return;
  #line 2527 
  rtnl_lock();
  #line 2533 
  if (efx->state == (unsigned int)STATE_READY) 
                                               #line 2534 
                                               ef4_reset(efx,method);
  #line 2536 
  rtnl_unlock();
  #line 2537 
  return;
}

#line 2539  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
void ef4_schedule_reset(struct ef4_nic *efx, enum reset_type type)
{
  #line 2577 
  union __anonunion___u_3071 __u;
  #line 2541 
  enum reset_type method;
  #line 2543 
  if (efx->state == (unsigned int)STATE_RECOVERY) {
    #line 2544 
    if ((efx->msg_enable & 1U) != 0U) {
      #line 2544 
      bool branch;
      #line 2544 
      struct _ddebug __UNIQUE_ID_ddebug622 = {.modname = (char *)"sfc_falcon", .function = (char *)"ef4_schedule_reset", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c", .format = (char *)"recovering: skip scheduling %s reset\n", .lineno = (unsigned int)2544U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 2544 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug622.key.dd_key_false.key,(_Bool)0);
      #line 2544 
      if ((long)((long)((int)branch != 0)) != 0L) {
        #line 2544 
        char *tmp;
        #line 2544 
        if (type <= (unsigned int)RESET_TYPE_TX_SKIP) 
                                                      #line 2544 
                                                      tmp = ef4_reset_type_names[(unsigned int)type]; else 
                                                                    #line 2544 
                                                                    tmp = (char *)"(invalid)";
        #line 2544 
        ;
        #line 2544 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug622,efx->net_dev,(char *)"recovering: skip scheduling %s reset\n",tmp);
      }
    }
    #line 2547 
    return;
  }
  #line 2550 
  switch ((unsigned int)type) {
    #line 2551 
    case (unsigned int)0: 
                          #line 2551 
    ;
    #line 2552 
    case (unsigned int)2: 
                          #line 2552 
    ;
    #line 2553 
    case (unsigned int)1: 
                          #line 2553 
    ;
    #line 2554 
    case (unsigned int)3: 
                          #line 2554 
    ;
    #line 2555 
    case (unsigned int)6: 
                          #line 2555 
    ;
    #line 2556 
    case (unsigned int)4: 
                          #line 2556 
    ;
    #line 2557 
    case (unsigned int)5: 
                          #line 2557 
    ;
    #line 2558 
    method = type;
    #line 2559 
    if ((efx->msg_enable & 1U) != 0U) {
      #line 2559 
      bool branch_0;
      #line 2559 
      struct _ddebug __UNIQUE_ID_ddebug623 = {.modname = (char *)"sfc_falcon", .function = (char *)"ef4_schedule_reset", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c", .format = (char *)"scheduling %s reset\n", .lineno = (unsigned int)2559U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 2559 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug623.key.dd_key_false.key,(_Bool)0);
      #line 2559 
      if ((long)((long)((int)branch_0 != 0)) != 0L) {
        #line 2559 
        char *tmp_1;
        #line 2559 
        if (method <= (unsigned int)RESET_TYPE_TX_SKIP) 
                                                        #line 2559 
                                                        tmp_1 = ef4_reset_type_names[(unsigned int)method]; else 
                                                                    #line 2559 
                                                                    tmp_1 = (char *)"(invalid)";
        #line 2559 
        ;
        #line 2559 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug623,efx->net_dev,(char *)"scheduling %s reset\n",tmp_1);
      }
    }
    #line 2561 
    break;
    #line 2562 
    default: 
             #line 2562 
    ;
    #line 2563 
    method = (*((efx->type)->map_reset_reason))(type);
    #line 2564 
    if ((efx->msg_enable & 1U) != 0U) {
      #line 2564 
      bool branch_1;
      #line 2564 
      struct _ddebug __UNIQUE_ID_ddebug624 = {.modname = (char *)"sfc_falcon", .function = (char *)"ef4_schedule_reset", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c", .format = (char *)"scheduling %s reset for %s\n", .lineno = (unsigned int)2564U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 2564 
      branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug624.key.dd_key_false.key,(_Bool)0);
      #line 2564 
      if ((long)((long)((int)branch_1 != 0)) != 0L) {
        #line 2564 
        char *tmp_3;
        #line 2564 
        char *tmp_4;
        #line 2564 
        if (type <= (unsigned int)RESET_TYPE_TX_SKIP) 
                                                      #line 2564 
                                                      tmp_3 = ef4_reset_type_names[(unsigned int)type]; else 
                                                                    #line 2564 
                                                                    tmp_3 = (char *)"(invalid)";
        #line 2564 
        if (method <= (unsigned int)RESET_TYPE_TX_SKIP) 
                                                        #line 2564 
                                                        tmp_4 = ef4_reset_type_names[(unsigned int)method]; else 
                                                                    #line 2564 
                                                                    tmp_4 = (char *)"(invalid)";
        #line 2564 
        ;
        #line 2564 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug624,efx->net_dev,(char *)"scheduling %s reset for %s\n",tmp_4,tmp_3);
      }
    }
    #line 2567 
    break;
  }
  #line 2570 
  cif_set_bit((long)method,& efx->reset_pending);
  #line 2571 
  ldv_inline_asm();
  #line 2576 
  __read_once_size((void *)(& efx->state),(void *)(& __u.__c),4);
  #line 2576 
  if ((__u.__val) != (unsigned int)STATE_READY) 
                                                #line 2577 
                                                return;
  #line 2579 
  cif_queue_work(reset_workqueue,& efx->reset_work);
  #line 2580 
  return;
}

#line 2589  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
static struct pci_device_id ef4_pci_table[3U] = {{.vendor = 6436U, .device = 1795U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = (unsigned long)(& falcon_a1_nic_type)}, {.vendor = 6436U, .device = 1808U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = (unsigned long)(& falcon_b0_nic_type)}};
#line 2608  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
int ef4_port_dummy_op_int(struct ef4_nic *efx)
{
  #line 2610 
  return 0;
}

#line 2612  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
void ef4_port_dummy_op_void(struct ef4_nic *efx)
{
  #line 2614 
  return;
}

#line 2614  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
static bool ef4_port_dummy_op_poll(struct ef4_nic *efx)
{
  #line 2616 
  return (_Bool)0;
}

#line 2619  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
static struct ef4_phy_operations ef4_dummy_phy_operations = {.init = & ef4_port_dummy_op_int, .fini = & ef4_port_dummy_op_void, .reconfigure = & ef4_port_dummy_op_int, .poll = & ef4_port_dummy_op_poll};
#line 2635  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
static int ef4_init_struct(struct ef4_nic *efx, struct pci_dev *pci_dev, struct net_device *net_dev)
{
  #line 2679 
  unsigned int __UNIQUE_ID___x625;
  #line 2679 
  unsigned int tmp_0;
  #line 2638 
  int i;
  #line 2641 
  INIT_LIST_HEAD(& efx->node);
  #line 2642 
  INIT_LIST_HEAD(& efx->secondary_list);
  #line 2643 
  spinlock_check(& efx->biu_lock);
  {
    #line 2643 
    struct lock_class_key __key;
    #line 2643 
    __raw_spin_lock_init(& efx->biu_lock.__anonCompField_spinlock_25.rlock,(char *)"&(&efx->biu_lock)->rlock",& __key);
  }
  #line 2645 
  INIT_LIST_HEAD(& efx->mtd_list);
  {
    #line 2647 
    struct lock_class_key __key_0;
    #line 2647 
    __init_work(& efx->reset_work,0);
    #line 2647 
    atomic_long_t __constr_expr_44 = {.counter = 137438953408LL};
    #line 2647 
    efx->reset_work.data = __constr_expr_44;
    #line 2647 
    lockdep_init_map(& efx->reset_work.lockdep_map,(char *)"(work_completion)",& __key_0,0);
    #line 2647 
    INIT_LIST_HEAD(& efx->reset_work.entry);
    #line 2647 
    efx->reset_work.func = & ef4_reset_work;
  }
  {
    #line 2648 
    struct lock_class_key __key_1;
    #line 2648 
    __init_work(& efx->monitor_work.work,0);
    #line 2648 
    atomic_long_t __constr_expr_45 = {.counter = 137438953408LL};
    #line 2648 
    efx->monitor_work.work.data = __constr_expr_45;
    #line 2648 
    lockdep_init_map(& efx->monitor_work.work.lockdep_map,(char *)"(work_completion)",& __key_1,0);
    #line 2648 
    INIT_LIST_HEAD(& efx->monitor_work.work.entry);
    #line 2648 
    efx->monitor_work.work.func = & ef4_monitor;
  }
  {
    #line 2648 
    struct lock_class_key __key_2;
    #line 2648 
    init_timer_key(& efx->monitor_work.timer,& delayed_work_timer_fn,2097152U,(char *)"&(&efx->monitor_work)->timer",& __key_2);
  }
  {
    #line 2649 
    struct lock_class_key __key_3;
    #line 2649 
    __init_work(& efx->selftest_work.work,0);
    #line 2649 
    atomic_long_t __constr_expr_46 = {.counter = 137438953408LL};
    #line 2649 
    efx->selftest_work.work.data = __constr_expr_46;
    #line 2649 
    lockdep_init_map(& efx->selftest_work.work.lockdep_map,(char *)"(work_completion)",& __key_3,0);
    #line 2649 
    INIT_LIST_HEAD(& efx->selftest_work.work.entry);
    #line 2649 
    efx->selftest_work.work.func = & ef4_selftest_async_work;
  }
  {
    #line 2649 
    struct lock_class_key __key_4;
    #line 2649 
    init_timer_key(& efx->selftest_work.timer,& delayed_work_timer_fn,2097152U,(char *)"&(&efx->selftest_work)->timer",& __key_4);
  }
  #line 2650 
  efx->pci_dev = pci_dev;
  #line 2651 
  efx->msg_enable = debug;
  #line 2652 
  efx->state = STATE_UNINIT;
  #line 2653 
  ;
  #line 2653 
  strlcpy((char *)(& efx->name),pci_name(pci_dev),16UL);
  #line 2655 
  efx->net_dev = net_dev;
  #line 2656 
  efx->rx_prefix_size = (efx->type)->rx_prefix_size;
  #line 2657 
  efx->rx_ip_align = 0U;
  #line 2659 
  efx->rx_packet_hash_offset = (int)((efx->type)->rx_hash_offset - (efx->type)->rx_prefix_size);
  #line 2661 
  efx->rx_packet_ts_offset = (int)((efx->type)->rx_ts_offset - (efx->type)->rx_prefix_size);
  #line 2663 
  spinlock_check(& efx->stats_lock);
  {
    #line 2663 
    struct lock_class_key __key_5;
    #line 2663 
    __raw_spin_lock_init(& efx->stats_lock.__anonCompField_spinlock_25.rlock,(char *)"&(&efx->stats_lock)->rlock",& __key_5);
  }
  {
    #line 2664 
    struct lock_class_key __key_6;
    #line 2664 
    __mutex_init(& efx->mac_lock,(char *)"&efx->mac_lock",& __key_6);
  }
  #line 2665 
  efx->phy_op = & ef4_dummy_phy_operations;
  #line 2666 
  efx->mdio.dev = net_dev;
  {
    #line 2667 
    struct lock_class_key __key_7;
    #line 2667 
    __init_work(& efx->mac_work,0);
    #line 2667 
    atomic_long_t __constr_expr_47 = {.counter = 137438953408LL};
    #line 2667 
    efx->mac_work.data = __constr_expr_47;
    #line 2667 
    lockdep_init_map(& efx->mac_work.lockdep_map,(char *)"(work_completion)",& __key_7,0);
    #line 2667 
    INIT_LIST_HEAD(& efx->mac_work.entry);
    #line 2667 
    efx->mac_work.func = & ef4_mac_work;
  }
  {
    #line 2668 
    struct lock_class_key __key_8;
    #line 2668 
    __init_waitqueue_head(& efx->flush_wq,(char *)"&efx->flush_wq",& __key_8);
  }
  #line 2670 
  i = 0;
  #line 2670 
  while ((unsigned int)i <= 31U) {
    #line 2671 
    efx->channel[i] = ef4_alloc_channel(efx,i,(struct ef4_channel *)0);
    #line 2672 
    if (efx->channel[i] == (struct ef4_channel *)0) 
                                                    #line 2673 
                                                    goto fail;
    #line 2674 
    efx->msi_context[i].efx = efx;
    #line 2675 
    efx->msi_context[i].index = (unsigned int)i;
    #line 2670 
    i ++;
  }
  {
    #line 2679 
    __UNIQUE_ID___x625 = (efx->type)->max_interrupt_mode;
    #line 2679 
    unsigned int __UNIQUE_ID___y626 = interrupt_mode;
    #line 2679 
    if (__UNIQUE_ID___x625 > __UNIQUE_ID___y626) 
                                                 #line 2679 
                                                 tmp_0 = __UNIQUE_ID___x625; else 
                                                                    #line 2679 
                                                                    tmp_0 = __UNIQUE_ID___y626;
    }
  #line 2679 
  efx->interrupt_mode = (enum ef4_int_mode)tmp_0;
  #line 2683 
  ;
  #line 2683 
  snprintf((char *)(& efx->workqueue_name),16UL,(char *)"sfc%s",pci_name(pci_dev));
  #line 2685 
  efx->workqueue = alloc_workqueue((char *)"%s",917514U,1,(char *)(& efx->workqueue_name));
  #line 2686 
  if (efx->workqueue == (struct workqueue_struct *)0) 
                                                      #line 2687 
                                                      goto fail;
  #line 2689 
  return 0;
  #line 2691 
  fail: 
        #line 2691 
  ;
  #line 2692 
  ef4_fini_struct(efx);
  #line 2693 
  return -12;
}

#line 2696  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
static void ef4_fini_struct(struct ef4_nic *efx)
{
  #line 2698 
  int i;
  #line 2700 
  i = 0;
  #line 2700 
  while ((unsigned int)i <= 31U) {
    #line 2701 
    kfree((void *)efx->channel[i]);
    #line 2700 
    i ++;
  }
  #line 2703 
  kfree((void *)efx->vpd_sn);
  #line 2705 
  if (efx->workqueue != (struct workqueue_struct *)0) {
    #line 2706 
    destroy_workqueue(efx->workqueue);
    #line 2707 
    efx->workqueue = (struct workqueue_struct *)0;
  }
  #line 2709 
  return;
}

#line 2711  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
void ef4_update_sw_stats(struct ef4_nic *efx, u64 *stats)
{
  #line 2714 
  struct ef4_channel *channel;
  #line 2713 
  u64 n_rx_nodesc_trunc = 0ULL;
  #line 2716 
  channel = efx->channel[0];
  #line 2716 
  while (channel != (struct ef4_channel *)0) {
    #line 2717 
    n_rx_nodesc_trunc = (unsigned long long)channel->n_rx_nodesc_trunc + n_rx_nodesc_trunc;
    #line 2716 
    if ((unsigned int)(channel->channel + 1) < efx->n_channels) 
                                                                #line 2716 
                                                                channel = efx->channel[channel->channel + 1]; else 
                                                                    #line 2716 
                                                                    channel = (struct ef4_channel *)0;
  }
  #line 2718 
  *(stats + 1U) = n_rx_nodesc_trunc;
  #line 2719 
  *stats = (unsigned long long)atomic_read_0(& efx->n_rx_noskb_drops);
  #line 2720 
  return;
}

#line 2731  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
static void ef4_pci_remove_main(struct ef4_nic *efx)
{
  #line 2736 
  if ((long)(efx->state == (unsigned int)STATE_READY) != 0L) {
    #line 2737 
    ldv_inline_asm();
    #line 2738 
    ldv_inline_asm();
    #line 2739 
    ldv_inline_asm();
    #line 2736 
    ;
  }
  #line 2737 
  cancel_work_sync(& efx->reset_work);
  #line 2739 
  ef4_disable_interrupts(efx);
  #line 2740 
  ef4_nic_fini_interrupt(efx);
  #line 2741 
  ef4_fini_port(efx);
  #line 2742 
  (*((efx->type)->fini))(efx);
  #line 2743 
  ef4_fini_napi(efx);
  #line 2744 
  ef4_remove_all(efx);
  #line 2745 
  return;
}

#line 2751  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
static void ef4_pci_remove(struct pci_dev *pci_dev)
{
  #line 2753 
  struct ef4_nic *efx;
  #line 2755 
  efx = (struct ef4_nic *)pci_get_drvdata(pci_dev);
  #line 2756 
  if (efx == (struct ef4_nic *)0) 
                                  #line 2757 
                                  return;
  #line 2760 
  rtnl_lock();
  #line 2761 
  ef4_dissociate(efx);
  #line 2762 
  dev_close(efx->net_dev);
  #line 2763 
  ef4_disable_interrupts(efx);
  #line 2764 
  efx->state = STATE_UNINIT;
  #line 2765 
  rtnl_unlock();
  #line 2767 
  ef4_unregister_netdev(efx);
  #line 2769 
  ef4_mtd_remove(efx);
  #line 2771 
  ef4_pci_remove_main(efx);
  #line 2773 
  ef4_fini_io(efx);
  #line 2774 
  if ((efx->msg_enable & 1U) != 0U) {
    #line 2774 
    bool branch;
    #line 2774 
    struct _ddebug __UNIQUE_ID_ddebug628 = {.modname = (char *)"sfc_falcon", .function = (char *)"ef4_pci_remove", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c", .format = (char *)"shutdown successful\n", .lineno = (unsigned int)2774U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 2774 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug628.key.dd_key_false.key,(_Bool)0);
    #line 2774 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 2774 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug628,efx->net_dev,(char *)"shutdown successful\n");
  }
  #line 2776 
  ef4_fini_struct(efx);
  #line 2777 
  cif_free_netdev(efx->net_dev);
  #line 2779 
  pci_disable_pcie_error_reporting(pci_dev);
  #line 2780 
  return;
}

#line 2788  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
static void ef4_probe_vpd_strings(struct ef4_nic *efx)
{
  #line 2791 
  char vpd_data[512U];
  #line 2792 
  ssize_t vpd_size;
  #line 2793 
  int ro_start;
  #line 2793 
  int ro_size;
  #line 2793 
  int i;
  #line 2793 
  int j;
  #line 2790 
  struct pci_dev *dev = efx->pci_dev;
  #line 2796 
  vpd_size = pci_read_vpd(dev,0LL,512UL,(void *)(& vpd_data));
  #line 2797 
  if (vpd_size <= 0L) {
    #line 2798 
    if ((efx->msg_enable & 1U) != 0U) 
                                      #line 2798 
                                      netdev_err(efx->net_dev,(char *)"Unable to read VPD\n");
    #line 2799 
    return;
  }
  #line 2803 
  ro_start = pci_vpd_find_tag((u8 *)(& vpd_data),0U,(unsigned int)vpd_size,(unsigned char)144);
  #line 2804 
  if (ro_start < 0) {
    #line 2805 
    if ((efx->msg_enable & 1U) != 0U) 
                                      #line 2805 
                                      netdev_err(efx->net_dev,(char *)"VPD Read-only not found\n");
    #line 2806 
    return;
  }
  #line 2809 
  ro_size = (int)pci_vpd_lrdt_size((u8 *)(& vpd_data[ro_start]));
  #line 2810 
  j = ro_size;
  #line 2811 
  i = ro_start + 3;
  #line 2812 
  if ((long)(i + j) > vpd_size) 
                                #line 2813 
                                j = (int)(vpd_size - (ssize_t)i);
  #line 2816 
  i = pci_vpd_find_info_keyword((u8 *)(& vpd_data),(unsigned int)i,(unsigned int)j,(char *)"PN");
  #line 2817 
  if (i < 0) {
    #line 2818 
    if ((efx->msg_enable & 1U) != 0U) 
                                      #line 2818 
                                      netdev_err(efx->net_dev,(char *)"Part number not found\n");
    #line 2819 
    return;
  }
  #line 2822 
  j = (int)pci_vpd_info_field_size((u8 *)(& vpd_data[i]));
  #line 2823 
  i += 3;
  #line 2824 
  if ((long)(i + j) > vpd_size) {
    #line 2825 
    if ((efx->msg_enable & 1U) != 0U) 
                                      #line 2825 
                                      netdev_err(efx->net_dev,(char *)"Incomplete part number\n");
    #line 2826 
    return;
  }
  #line 2829 
  if ((efx->msg_enable & 1U) != 0U) 
                                    #line 2829 
                                    netdev_info(efx->net_dev,(char *)"Part Number : %.*s\n",j,& vpd_data[i]);
  #line 2832 
  i = ro_start + 3;
  #line 2833 
  j = ro_size;
  #line 2834 
  i = pci_vpd_find_info_keyword((u8 *)(& vpd_data),(unsigned int)i,(unsigned int)j,(char *)"SN");
  #line 2835 
  if (i < 0) {
    #line 2836 
    if ((efx->msg_enable & 1U) != 0U) 
                                      #line 2836 
                                      netdev_err(efx->net_dev,(char *)"Serial number not found\n");
    #line 2837 
    return;
  }
  #line 2840 
  j = (int)pci_vpd_info_field_size((u8 *)(& vpd_data[i]));
  #line 2841 
  i += 3;
  #line 2842 
  if ((long)(i + j) > vpd_size) {
    #line 2843 
    if ((efx->msg_enable & 1U) != 0U) 
                                      #line 2843 
                                      netdev_err(efx->net_dev,(char *)"Incomplete serial number\n");
    #line 2844 
    return;
  }
  #line 2847 
  efx->vpd_sn = (char *)kmalloc((unsigned long)(j + 1),3264U);
  #line 2848 
  if (efx->vpd_sn == (char *)0) 
                                #line 2849 
                                return;
  #line 2851 
  snprintf(efx->vpd_sn,(unsigned long)(j + 1),(char *)"%s",& vpd_data[i]);
  #line 2852 
  return;
}

#line 2858  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
static int ef4_pci_probe_main(struct ef4_nic *efx)
{
  #line 2860 
  int rc;
  #line 2863 
  rc = ef4_probe_all(efx);
  #line 2864 
  if (rc != 0) 
               #line 2865 
               goto fail1;
  #line 2867 
  ef4_init_napi(efx);
  #line 2869 
  rc = (*((efx->type)->init))(efx);
  #line 2870 
  if (rc != 0) {
    #line 2871 
    if ((efx->msg_enable & 2U) != 0U) 
                                      #line 2871 
                                      netdev_err(efx->net_dev,(char *)"failed to initialise NIC\n");
    #line 2873 
    goto fail3;
  }
  #line 2876 
  rc = ef4_init_port(efx);
  #line 2877 
  if (rc != 0) {
    #line 2878 
    if ((efx->msg_enable & 2U) != 0U) 
                                      #line 2878 
                                      netdev_err(efx->net_dev,(char *)"failed to initialise port\n");
    #line 2880 
    goto fail4;
  }
  #line 2883 
  rc = ef4_nic_init_interrupt(efx);
  #line 2884 
  if (rc != 0) 
               #line 2885 
               goto fail5;
  #line 2886 
  rc = ef4_enable_interrupts(efx);
  #line 2887 
  if (rc != 0) 
               #line 2888 
               goto fail6;
  #line 2890 
  return 0;
  #line 2892 
  fail6: 
         #line 2892 
  ;
  #line 2893 
  ef4_nic_fini_interrupt(efx);
  #line 2894 
  fail5: 
         #line 2894 
  ;
  #line 2895 
  ef4_fini_port(efx);
  #line 2896 
  fail4: 
         #line 2896 
  ;
  #line 2897 
  (*((efx->type)->fini))(efx);
  #line 2898 
  fail3: 
         #line 2898 
  ;
  #line 2899 
  ef4_fini_napi(efx);
  #line 2900 
  ef4_remove_all(efx);
  #line 2901 
  fail1: 
         #line 2901 
  ;
  #line 2902 
  return rc;
}

#line 2914  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
static int ef4_pci_probe(struct pci_dev *pci_dev, struct pci_device_id *entry)
{
  #line 2917 
  struct net_device *net_dev;
  #line 2918 
  struct ef4_nic *efx;
  #line 2919 
  int rc;
  #line 2922 
  net_dev = cif_alloc_etherdev_mqs(3968,64U,32U);
  #line 2924 
  if (net_dev == (struct net_device *)0) 
                                         #line 2925 
                                         return -12;
  #line 2926 
  efx = (struct ef4_nic *)netdev_priv(net_dev);
  #line 2927 
  efx->type = (struct ef4_nic_type *)entry->driver_data;
  #line 2928 
  efx->fixed_features |= 32ULL;
  #line 2930 
  pci_set_drvdata(pci_dev,(void *)efx);
  #line 2931 
  net_dev->dev.parent = & pci_dev->dev;
  #line 2932 
  rc = ef4_init_struct(efx,pci_dev,net_dev);
  #line 2933 
  if (rc != 0) 
               #line 2934 
               goto fail1;
  #line 2936 
  if ((efx->msg_enable & 2U) != 0U) 
                                    #line 2936 
                                    netdev_info(efx->net_dev,(char *)"Solarflare NIC detected\n");
  #line 2939 
  ef4_probe_vpd_strings(efx);
  #line 2942 
  rc = ef4_init_io(efx);
  #line 2943 
  if (rc != 0) 
               #line 2944 
               goto fail2;
  #line 2946 
  rc = ef4_pci_probe_main(efx);
  #line 2947 
  if (rc != 0) 
               #line 2948 
               goto fail3;
  #line 2950 
  net_dev->features = (net_dev->features | (efx->type)->offload_features) | 549755813889ULL;
  #line 2953 
  net_dev->vlan_features |= 549755813929ULL;
  #line 2956 
  net_dev->hw_features = net_dev->features & ~ efx->fixed_features;
  #line 2962 
  net_dev->features &= 18446744073709551103ULL;
  #line 2963 
  net_dev->features |= efx->fixed_features;
  #line 2965 
  rc = ef4_register_netdev(efx);
  #line 2966 
  if (rc != 0) 
               #line 2967 
               goto fail4;
  #line 2969 
  if ((efx->msg_enable & 2U) != 0U) {
    #line 2969 
    bool branch;
    #line 2969 
    struct _ddebug __UNIQUE_ID_ddebug629 = {.modname = (char *)"sfc_falcon", .function = (char *)"ef4_pci_probe", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c", .format = (char *)"initialisation successful\n", .lineno = (unsigned int)2969U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 2969 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug629.key.dd_key_false.key,(_Bool)0);
    #line 2969 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 2969 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug629,efx->net_dev,(char *)"initialisation successful\n");
  }
  #line 2972 
  rtnl_lock();
  #line 2973 
  rc = ef4_mtd_probe(efx);
  #line 2974 
  rtnl_unlock();
  #line 2975 
  if ((unsigned int)rc + 1U > 1U) 
    #line 2976 
    if ((efx->msg_enable & 2U) != 0U) 
                                      #line 2976 
                                      netdev_warn(efx->net_dev,(char *)"failed to create MTDs (%d)\n",rc);
  #line 2979 
  rc = pci_enable_pcie_error_reporting(pci_dev);
  #line 2980 
  if (rc != 0 && rc != -22) 
    #line 2981 
    if ((efx->msg_enable & 2U) != 0U) 
                                      #line 2981 
                                      netdev_notice(efx->net_dev,(char *)"PCIE error reporting unavailable (%d).\n",rc);
  #line 2985 
  return 0;
  #line 2987 
  fail4: 
         #line 2987 
  ;
  #line 2988 
  ef4_pci_remove_main(efx);
  #line 2989 
  fail3: 
         #line 2989 
  ;
  #line 2990 
  ef4_fini_io(efx);
  #line 2991 
  fail2: 
         #line 2991 
  ;
  #line 2992 
  ef4_fini_struct(efx);
  #line 2993 
  fail1: 
         #line 2993 
  ;
  {
    #line 2994 
    int __ret_warn_on = rc > 0;
    #line 2994 
    if ((long)(__ret_warn_on != 0) != 0L) {
      #line 2995 
      ldv_inline_asm();
      #line 2996 
      ldv_inline_asm();
    }
    #line 2994 
    long tmp_2 = (long)(__ret_warn_on != 0);
  }
  #line 2995 
  if ((efx->msg_enable & 1U) != 0U) {
    #line 2995 
    bool branch_0;
    #line 2995 
    struct _ddebug __UNIQUE_ID_ddebug631 = {.modname = (char *)"sfc_falcon", .function = (char *)"ef4_pci_probe", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c", .format = (char *)"initialisation failed. rc=%d\n", .lineno = (unsigned int)2995U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 2995 
    branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug631.key.dd_key_false.key,(_Bool)0);
    #line 2995 
    if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                  #line 2995 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug631,efx->net_dev,(char *)"initialisation failed. rc=%d\n",rc);
  }
  #line 2996 
  cif_free_netdev(net_dev);
  #line 2997 
  return rc;
}

#line 3000  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
static int ef4_pm_freeze(struct device *dev)
{
  #line 3002 
  struct ef4_nic *efx = dev_get_drvdata(dev);
  #line 3004 
  rtnl_lock();
  #line 3006 
  if (efx->state != (unsigned int)STATE_DISABLED) {
    #line 3007 
    efx->state = STATE_UNINIT;
    #line 3009 
    ef4_device_detach_sync(efx);
    #line 3011 
    ef4_stop_all(efx);
    #line 3012 
    ef4_disable_interrupts(efx);
  }
  #line 3015 
  rtnl_unlock();
  #line 3017 
  return 0;
}

#line 3020  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
static int ef4_pm_thaw(struct device *dev)
{
  #line 3022 
  int rc;
  #line 3023 
  struct ef4_nic *efx = dev_get_drvdata(dev);
  #line 3025 
  rtnl_lock();
  #line 3027 
  if (efx->state != (unsigned int)STATE_DISABLED) {
    #line 3028 
    rc = ef4_enable_interrupts(efx);
    #line 3029 
    if (rc != 0) 
                 #line 3030 
                 goto fail;
    #line 3032 
    cif_mutex_lock_mac_lock_of_ef4_nic_0(& efx->mac_lock);
    #line 3033 
    (*((efx->phy_op)->reconfigure))(efx);
    #line 3034 
    cif_mutex_unlock_mac_lock_of_ef4_nic_0(& efx->mac_lock);
    #line 3036 
    ef4_start_all(efx);
    #line 3038 
    netif_device_attach(efx->net_dev);
    #line 3040 
    efx->state = STATE_READY;
    #line 3042 
    (*((efx->type)->resume_wol))(efx);
  }
  #line 3045 
  rtnl_unlock();
  #line 3048 
  cif_queue_work(reset_workqueue,& efx->reset_work);
  #line 3050 
  return 0;
  #line 3052 
  fail: 
        #line 3052 
  ;
  #line 3053 
  rtnl_unlock();
  #line 3055 
  return rc;
}

#line 3058  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
static int ef4_pm_poweroff(struct device *dev)
{
  #line 3060 
  void *__mptr;
  #line 3060 
  __mptr = (void *)dev;
  #line 3060 
  struct pci_dev *pci_dev = ((struct pci_dev *)(__mptr + 18446744073709551440U));
  #line 3061 
  struct ef4_nic *efx = pci_get_drvdata(pci_dev);
  #line 3063 
  (*((efx->type)->fini))(efx);
  #line 3065 
  efx->reset_pending = 0UL;
  #line 3067 
  pci_save_state(pci_dev);
  #line 3068 
  return pci_set_power_state(pci_dev,3);
}

#line 3072  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
static int ef4_pm_resume(struct device *dev)
{
  #line 3074 
  void *__mptr;
  #line 3076 
  int rc;
  #line 3074 
  __mptr = (void *)dev;
  #line 3074 
  struct pci_dev *pci_dev = ((struct pci_dev *)(__mptr + 18446744073709551440U));
  #line 3075 
  struct ef4_nic *efx = pci_get_drvdata(pci_dev);
  #line 3078 
  rc = pci_set_power_state(pci_dev,0);
  #line 3079 
  if (rc != 0) 
               #line 3080 
               return rc;
  #line 3081 
  pci_restore_state(pci_dev);
  #line 3082 
  rc = pci_enable_device(pci_dev);
  #line 3083 
  if (rc != 0) 
               #line 3084 
               return rc;
  #line 3085 
  pci_set_master(efx->pci_dev);
  #line 3086 
  rc = (*((efx->type)->reset))(efx,(enum reset_type)RESET_TYPE_ALL);
  #line 3087 
  if (rc != 0) 
               #line 3088 
               return rc;
  #line 3089 
  rc = (*((efx->type)->init))(efx);
  #line 3090 
  if (rc != 0) 
               #line 3091 
               return rc;
  #line 3092 
  rc = ef4_pm_thaw(dev);
  #line 3093 
  return rc;
}

#line 3096  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
static int ef4_pm_suspend(struct device *dev)
{
  #line 3098 
  int rc;
  #line 3100 
  ef4_pm_freeze(dev);
  #line 3101 
  rc = ef4_pm_poweroff(dev);
  #line 3102 
  if (rc != 0) 
               #line 3103 
               ef4_pm_resume(dev);
  #line 3104 
  return rc;
}

#line 3107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
static struct dev_pm_ops ef4_pm_ops = {.suspend = & ef4_pm_suspend, .resume = & ef4_pm_resume, .freeze = & ef4_pm_freeze, .thaw = & ef4_pm_thaw, .poweroff = & ef4_pm_poweroff, .restore = & ef4_pm_resume};
#line 3120  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
static pci_ers_result_t ef4_io_error_detected(struct pci_dev *pdev, enum pci_channel_state state)
{
  #line 3123 
  pci_ers_result_t status = 5U;
  #line 3124 
  struct ef4_nic *efx = pci_get_drvdata(pdev);
  #line 3126 
  if (state == (unsigned int)pci_channel_io_perm_failure) 
                                                          #line 3127 
                                                          return 4U;
  #line 3129 
  rtnl_lock();
  #line 3131 
  if (efx->state != (unsigned int)STATE_DISABLED) {
    #line 3132 
    efx->state = STATE_RECOVERY;
    #line 3133 
    efx->reset_pending = 0UL;
    #line 3135 
    ef4_device_detach_sync(efx);
    #line 3137 
    ef4_stop_all(efx);
    #line 3138 
    ef4_disable_interrupts(efx);
    #line 3140 
    status = 3U;
  }
  else 
       #line 3145 
       status = 5U;
  #line 3148 
  rtnl_unlock();
  #line 3150 
  pci_disable_device(pdev);
  #line 3152 
  return status;
}

#line 3156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
static pci_ers_result_t ef4_io_slot_reset(struct pci_dev *pdev)
{
  #line 3158 
  struct ef4_nic *efx = pci_get_drvdata(pdev);
  #line 3159 
  pci_ers_result_t status = 5U;
  #line 3161 
  if (pci_enable_device(pdev) != 0) {
    #line 3162 
    if ((efx->msg_enable & 8192U) != 0U) 
                                         #line 3162 
                                         netdev_err(efx->net_dev,(char *)"Cannot re-enable PCI device after reset.\n");
    #line 3164 
    status = 4U;
  }
  #line 3167 
  return status;
}

#line 3171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
static void ef4_io_resume(struct pci_dev *pdev)
{
  #line 3174 
  int rc;
  #line 3173 
  struct ef4_nic *efx = pci_get_drvdata(pdev);
  #line 3176 
  rtnl_lock();
  #line 3178 
  if (efx->state == (unsigned int)STATE_DISABLED) 
                                                  #line 3179 
                                                  goto out;
  #line 3181 
  rc = ef4_reset(efx,(enum reset_type)RESET_TYPE_ALL);
  #line 3182 
  if (rc != 0) {
    #line 3183 
    if ((efx->msg_enable & 8192U) != 0U) 
                                         #line 3183 
                                         netdev_err(efx->net_dev,(char *)"ef4_reset failed after PCI error (%d)\n",rc);
  }
  else {
    #line 3186 
    efx->state = STATE_READY;
    #line 3187 
    if ((efx->msg_enable & 8192U) != 0U) {
      #line 3187 
      bool branch;
      #line 3187 
      struct _ddebug __UNIQUE_ID_ddebug632 = {.modname = (char *)"sfc_falcon", .function = (char *)"ef4_io_resume", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c", .format = (char *)"Done resetting and resuming IO after PCI error.\n", .lineno = (unsigned int)3187U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 3187 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug632.key.dd_key_false.key,(_Bool)0);
      #line 3187 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 3187 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug632,efx->net_dev,(char *)"Done resetting and resuming IO after PCI error.\n");
    }
  }
  #line 3191 
  out: 
       #line 3191 
  ;
  #line 3192 
  rtnl_unlock();
  #line 3193 
  return;
}

#line 3201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
static struct pci_error_handlers ef4_err_handlers = {.error_detected = & ef4_io_error_detected, .slot_reset = & ef4_io_slot_reset, .resume = & ef4_io_resume};
#line 3207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
static struct pci_driver ef4_pci_driver = {.name = (char *)"sfc_falcon", .id_table = (struct pci_device_id *)(& ef4_pci_table), .probe = & ef4_pci_probe, .remove = & ef4_pci_remove, .err_handler = & ef4_err_handlers, .driver = {.pm = & ef4_pm_ops}};
#line 3226  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
static int ef4_init_module(void)
{
  #line 3228 
  int rc;
  #line 3230 
  printk((char *)"\001");
  #line 3232 
  rc = register_netdevice_notifier(& ef4_netdev_notifier);
  #line 3233 
  if (rc != 0) 
               #line 3234 
               goto err_notifier;
  #line 3236 
  reset_workqueue = alloc_workqueue((char *)"%s",917514U,1,(char *)"sfc_reset");
  #line 3237 
  if (reset_workqueue == (struct workqueue_struct *)0) {
    #line 3238 
    rc = -12;
    #line 3239 
    goto err_reset;
  }
  #line 3242 
  rc = cif___pci_register_driver(& ef4_pci_driver,& __this_module,(char *)"sfc_falcon");
  #line 3243 
  if (rc < 0) 
              #line 3244 
              goto err_pci;
  #line 3246 
  return 0;
  #line 3248 
  err_pci: 
           #line 3248 
  ;
  #line 3249 
  destroy_workqueue(reset_workqueue);
  #line 3250 
  err_reset: 
             #line 3250 
  ;
  #line 3251 
  unregister_netdevice_notifier(& ef4_netdev_notifier);
  #line 3252 
  err_notifier: 
                #line 3252 
  ;
  #line 3253 
  return rc;
}

#line 3256  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
static void ef4_exit_module(void)
{
  #line 3258 
  printk((char *)"\001");
  #line 3260 
  cif_pci_unregister_driver(& ef4_pci_driver);
  #line 3261 
  destroy_workqueue(reset_workqueue);
  #line 3262 
  unregister_netdevice_notifier(& ef4_netdev_notifier);
  #line 3263 
  return;
}

#line 3273  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.c"
struct pci_device_id __mod_pci__ef4_pci_table_device_table[3U];
#line 93  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/efx.i.aux"
struct device_attribute *emg_alias_dev_attr_phy_type = & dev_attr_phy_type;
#line 94  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/efx.i.aux"
struct pci_driver *emg_alias_ef4_pci_driver = & ef4_pci_driver;
#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/efx.i.aux"
struct pci_device_id (*emg_alias_ef4_pci_table)[3U] = & ef4_pci_table;
#line 96  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/efx.i.aux"
struct dev_pm_ops *emg_alias_ef4_pm_ops = & ef4_pm_ops;
#line 99 
#line 99 
int emg___pci_register_driver(struct pci_driver *arg0, struct module *arg1, char *arg2);
#line 100 
#line 100 
struct net_device *emg_alloc_etherdev_mqs(int arg0, unsigned int arg1, unsigned int arg2);
#line 102 
#line 102 
int emg_device_create_file(struct device *arg0, struct device_attribute *arg1);
#line 103 
#line 103 
void emg_device_remove_file(struct device *arg0, struct device_attribute *arg1);
#line 105 
#line 105 
void emg_free_netdev(struct net_device *arg0);
#line 106 
#line 106 
int emg_mod_timer(struct timer_list *arg0, unsigned long arg1);
#line 107 
#line 107 
void emg_pci_unregister_driver(struct pci_driver *arg0);
#line 108 
#line 108 
_Bool emg_queue_delayed_work(struct workqueue_struct *arg0, struct delayed_work *arg1, unsigned long arg2);
#line 109 
#line 109 
_Bool emg_queue_work(struct workqueue_struct *arg0, struct work_struct *arg1);
#line 112 
#line 112 
void emg_unregister_netdev(struct net_device *arg0);
#line 116  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/efx.i.aux"
void emg_ef4_exit_module(void)
{
  #line 117 
  ef4_exit_module();
  #line 118 
  return;
}

#line 120  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/efx.i.aux"
int emg_ef4_init_module(void)
{
  #line 121 
  return ef4_init_module();
}

#line 124  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/efx.i.aux"
int emg_wrapper_ef4_pci_probe(struct pci_dev *arg0, struct pci_device_id *arg1)
{
  #line 125 
  return ef4_pci_probe(arg0,arg1);
}

#line 129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/efx.i.aux"
void emg_wrapper_ef4_pci_remove(struct pci_dev *arg0)
{
  #line 130 
  ef4_pci_remove(arg0);
  #line 131 
  return;
}

#line 134  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/efx.i.aux"
int emg_wrapper_ef4_pm_freeze(struct device *arg0)
{
  #line 135 
  return ef4_pm_freeze(arg0);
}

#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/efx.i.aux"
int emg_wrapper_ef4_pm_poweroff(struct device *arg0)
{
  #line 140 
  return ef4_pm_poweroff(arg0);
}

#line 144  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/efx.i.aux"
int emg_wrapper_ef4_pm_resume(struct device *arg0)
{
  #line 145 
  return ef4_pm_resume(arg0);
}

#line 149  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/efx.i.aux"
int emg_wrapper_ef4_pm_suspend(struct device *arg0)
{
  #line 150 
  return ef4_pm_suspend(arg0);
}

#line 154  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/efx.i.aux"
int emg_wrapper_ef4_pm_thaw(struct device *arg0)
{
  #line 155 
  return ef4_pm_thaw(arg0);
}

#line 159  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/efx.i.aux"
long emg_wrapper_show_phy_type(struct device *arg0, struct device_attribute *arg1, char *arg2)
{
  #line 160 
  return show_phy_type(arg0,arg1,arg2);
}

#line 179  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/efx.i.aux"
static void cif_set_bit(long nr, unsigned long *addr)
{
  #line 182 
  ldv_set_bit(nr,addr);
  #line 183 
  return;
}

#line 186  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/efx.i.aux"
static void cif_clear_bit(long nr, unsigned long *addr)
{
  #line 189 
  ldv_clear_bit(nr,addr);
  #line 190 
  return;
}

#line 193  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/efx.i.aux"
static void INIT_LIST_HEAD(struct list_head *list)
{
  #line 196 
  ldv_init_list_head(list);
  #line 197 
  return;
}

#line 242  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/efx.i.aux"
static void atomic_inc_0(atomic_t *v)
{
  #line 245 
  ldv_atomic_inc(v);
  #line 246 
  return;
}

#line 363  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/efx.i.aux"
static bool cif_queue_work(struct workqueue_struct *wq, struct work_struct *work)
{
  #line 367 
  return emg_queue_work(wq,work);
}

#line 371  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/efx.i.aux"
static bool cif_queue_delayed_work(struct workqueue_struct *wq, struct delayed_work *dwork, unsigned long delay)
{
  #line 375 
  return emg_queue_delayed_work(wq,dwork,delay);
}

#line 517  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/efx.i.aux"
static void *kmalloc(size_t size, gfp_t flags)
{
  #line 520 
  return ldv_kmalloc(size,flags);
}

#line 531  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/efx.i.aux"
static void *kcalloc_0(size_t n, size_t size, gfp_t flags)
{
  #line 534 
  return ldv_kcalloc(n,size,flags);
}

#line 552  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/efx.i.aux"
static void *kzalloc(size_t size, gfp_t flags)
{
  #line 555 
  return ldv_kzalloc(size,flags);
}

#line 613  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/efx.i.aux"
static void cif_spin_lock__xmit_lock_of_netdev_queue(spinlock_t *lock)
{
  #line 616 
  ldv_spin_model_lock((char *)"_xmit_lock_of_netdev_queue");
  #line 618 
  spin_lock(lock);
  #line 619 
  return;
}

#line 653  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/efx.i.aux"
static void cif_spin_unlock__xmit_lock_of_netdev_queue(spinlock_t *lock)
{
  #line 656 
  ldv_spin_model_unlock((char *)"_xmit_lock_of_netdev_queue");
  #line 658 
  spin_unlock(lock);
  #line 659 
  return;
}

#line 671  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/efx.i.aux"
static void cif_spin_lock_tx_global_lock_of_net_device(spinlock_t *lock)
{
  #line 674 
  ldv_spin_model_lock((char *)"tx_global_lock_of_net_device");
  #line 676 
  spin_lock(lock);
  #line 677 
  return;
}

#line 680  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/efx.i.aux"
static void cif_spin_unlock_tx_global_lock_of_net_device(spinlock_t *lock)
{
  #line 683 
  ldv_spin_model_unlock((char *)"tx_global_lock_of_net_device");
  #line 685 
  spin_unlock(lock);
  #line 686 
  return;
}

#line 698  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/efx.i.aux"
static void cif_spin_lock_bh_addr_list_lock_of_net_device(spinlock_t *lock)
{
  #line 701 
  ldv_spin_model_lock((char *)"addr_list_lock_of_net_device");
  #line 703 
  spin_lock_bh(lock);
  #line 704 
  return;
}

#line 716  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/efx.i.aux"
static void cif_spin_unlock_bh_addr_list_lock_of_net_device(spinlock_t *lock)
{
  #line 719 
  ldv_spin_model_unlock((char *)"addr_list_lock_of_net_device");
  #line 721 
  spin_unlock_bh_0(lock);
  #line 722 
  return;
}

#line 866  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/efx.i.aux"
static int cif_strcmp(char *cs, char *ct)
{
  #line 869 
  return ldv_strcmp(cs,ct);
}

#line 873  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/efx.i.aux"
static int cif_mod_timer(struct timer_list *timer, unsigned long expires)
{
  #line 877 
  return emg_mod_timer(timer,expires);
}

#line 881  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/efx.i.aux"
static void cif_mutex_lock_mac_lock_of_ef4_nic_0(struct mutex *lock)
{
  #line 884 
  ldv_mutex_model_lock(lock,(char *)"mac_lock_of_ef4_nic");
  #line 885 
  return;
}

#line 888  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/efx.i.aux"
static void cif_mutex_unlock_mac_lock_of_ef4_nic_0(struct mutex *lock)
{
  #line 891 
  ldv_mutex_model_unlock(lock,(char *)"mac_lock_of_ef4_nic");
  #line 892 
  return;
}

#line 895  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/efx.i.aux"
static void cif_spin_lock_bh_stats_lock_of_ef4_nic(spinlock_t *lock)
{
  #line 898 
  ldv_spin_model_lock((char *)"stats_lock_of_ef4_nic");
  #line 900 
  spin_lock_bh(lock);
  #line 901 
  return;
}

#line 904  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/efx.i.aux"
static void cif_spin_unlock_bh_stats_lock_of_ef4_nic(spinlock_t *lock)
{
  #line 907 
  ldv_spin_model_unlock((char *)"stats_lock_of_ef4_nic");
  #line 909 
  spin_unlock_bh_0(lock);
  #line 910 
  return;
}

#line 913  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/efx.i.aux"
static int cif_mutex_trylock_mac_lock_of_ef4_nic(struct mutex *lock)
{
  #line 916 
  int is_mutex_held_by_another_thread = ldv_undef_int();
  #line 918 
  if (is_mutex_held_by_another_thread != 0) 
                                            #line 921 
                                            return 0;
  else {
    #line 925 
    ldv_mutex_model_lock(lock,(char *)"mac_lock_of_ef4_nic");
    #line 927 
    return 1;
  }
}

#line 932  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/efx.i.aux"
static int cif_device_create_file(struct device *device, struct device_attribute *entry)
{
  #line 936 
  return emg_device_create_file(device,entry);
}

#line 940  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/efx.i.aux"
static void cif_device_remove_file(struct device *dev, struct device_attribute *attr)
{
  #line 944 
  emg_device_remove_file(dev,attr);
  #line 945 
  return;
}

#line 948  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/efx.i.aux"
static void cif_unregister_netdev(struct net_device *dev)
{
  #line 952 
  emg_unregister_netdev(dev);
  #line 953 
  return;
}

#line 956  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/efx.i.aux"
static void cif_free_netdev(struct net_device *dev)
{
  #line 960 
  emg_free_netdev(dev);
  #line 961 
  return;
}

#line 964  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/efx.i.aux"
static struct net_device *cif_alloc_etherdev_mqs(int sizeof_priv, unsigned int txqs, unsigned int rxqs)
{
  #line 968 
  return emg_alloc_etherdev_mqs(sizeof_priv,txqs,rxqs);
}

#line 972  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/efx.i.aux"
static int cif___pci_register_driver(struct pci_driver *ldv_func_arg1, struct module *ldv_func_arg2, char *mod_name)
{
  #line 976 
  return emg___pci_register_driver(ldv_func_arg1,ldv_func_arg2,mod_name);
}

#line 980  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/efx.i.aux"
static void cif_pci_unregister_driver(struct pci_driver *dev)
{
  #line 984 
  emg_pci_unregister_driver(dev);
  #line 985 
  return;
}

/* compiler builtin: 
   unsigned int __builtin_bswap32(unsigned int);   */
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 123  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/selftest.i.aux"
static void cif_set_bit_0(long nr, unsigned long *addr);
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 130  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/selftest.i.aux"
static void cif_clear_bit_0(long nr, unsigned long *addr);
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/string_64.h"
#line 61 
int memcmp(void *, void *, size_t);
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cmpxchg.h"
#line 17 
void __xadd_wrong_size(void);
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cmpxchg_64.h"
__inline static int arch_atomic_read_1(atomic_t *v)
{
  #line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
  union __anonunion___u_3138 __u;
  #line 31 
  __read_once_size((void *)(& v->counter),(void *)(& __u.__c),4);
  #line 31 
  return (__u.__val);
}

#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
__inline static void arch_atomic_set(atomic_t *v, int i)
{
  #line 44 
  union __anonunion___u_3140 __u = {.__val = i};
  #line 43 
  __write_once_size((void *)(& v->counter),(void *)(& __u.__c),4);
  #line 43 
  int tmp = __u.__val;
  #line 45 
  return;
}

#line 182  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
__inline static int arch_atomic_fetch_add(int i, atomic_t *v)
{
  #line 184 
  int __ret;
  #line 184 
  __ret = i;
  #line 184 
  switch (4UL) {
    #line 184 
    case (unsigned long)1: 
                           #line 184 
    ;
    #line 185 
    ldv_inline_asm();
    #line 184 
    break;
    #line 184 
    case (unsigned long)2: 
                           #line 184 
    ;
    #line 185 
    ldv_inline_asm();
    #line 184 
    break;
    #line 184 
    case (unsigned long)4: 
                           #line 184 
    ;
    #line 185 
    ldv_inline_asm();
    #line 184 
    break;
    #line 184 
    case (unsigned long)8: 
                           #line 184 
    ;
    #line 185 
    ldv_inline_asm();
    #line 184 
    break;
    #line 184 
    default: 
             #line 184 
    ;
    #line 184 
    __xadd_wrong_size();
  }
  #line 184 
  return __ret;
}

#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
__inline static int atomic_read_1(atomic_t *v)
{
  #line 26 
  kasan_check_read((void *)v,4U);
  #line 27 
  return arch_atomic_read_1(v);
}

#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
__inline static void atomic_set(atomic_t *v, int i)
{
  #line 44 
  kasan_check_read((void *)v,4U);
  #line 45 
  arch_atomic_set(v,i);
  #line 46 
  return;
}

#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
__inline static int atomic_fetch_add(int i, atomic_t *v)
{
  #line 111 
  kasan_check_read((void *)v,4U);
  #line 112 
  return arch_atomic_fetch_add(i,v);
}

#line 237 
#line 186  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/selftest.i.aux"
static void atomic_inc_1(atomic_t *v);
#line 336  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock_0(spinlock_t *lock)
{
  #line 338 
  _raw_spin_lock(& lock->__anonCompField_spinlock_25.rlock);
  #line 339 
  return;
}

#line 340 
#line 557  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/selftest.i.aux"
static void cif_spin_lock__xmit_lock_of_netdev_queue_0(spinlock_t *lock);
#line 340  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 615  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/selftest.i.aux"
static void cif_spin_lock_tx_global_lock_of_net_device_0(spinlock_t *lock);
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_0(spinlock_t *lock)
{
  #line 378 
  _raw_spin_unlock(& lock->__anonCompField_spinlock_25.rlock);
  #line 379 
  return;
}

#line 380 
#line 597  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/selftest.i.aux"
static void cif_spin_unlock__xmit_lock_of_netdev_queue_0(spinlock_t *lock);
#line 380  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 624  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/selftest.i.aux"
static void cif_spin_unlock_tx_global_lock_of_net_device_0(spinlock_t *lock);
#line 26 
#line 817 
static void cif_mutex_lock_mac_lock_of_ef4_nic_1(struct mutex *lock);
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
#line 824  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/selftest.i.aux"
static void cif_mutex_unlock_mac_lock_of_ef4_nic_1(struct mutex *lock);
#line 612  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
#line 831  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/selftest.i.aux"
static bool cif_schedule_delayed_work(struct delayed_work *dwork, unsigned long delay);
#line 114  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
#line 114 
void refcount_warn_saturate(refcount_t *, enum refcount_saturation_type);
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
__inline static unsigned int refcount_read(refcount_t *r)
{
  #line 134 
  return (unsigned int)atomic_read_1(& r->refs);
}

#line 186  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
__inline static void refcount_add(int i, refcount_t *r)
{
  #line 188 
  int old = atomic_fetch_add(i,& r->refs);
  #line 190 
  if ((long)(old == 0) != 0L) 
                              #line 191 
                              refcount_warn_saturate(r,(enum refcount_saturation_type)REFCOUNT_ADD_UAF);
  else 
    #line 192 
    if ((long)(old < 0) != 0L || (long)(old + i < 0) != 0L) 
                                                            #line 193 
                                                            refcount_warn_saturate(r,(enum refcount_saturation_type)REFCOUNT_ADD_OVF);
  #line 194 
  return;
}

#line 226  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
__inline static void refcount_inc(refcount_t *r)
{
  #line 228 
  refcount_add(1,r);
  #line 229 
  return;
}

#line 222  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
#line 222 
long schedule_timeout_uninterruptible(long);
#line 607  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 355  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/selftest.i.aux"
static void *kcalloc_1(size_t n, size_t size, gfp_t flags);
#line 668  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 376  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/selftest.i.aux"
static void *kzalloc_0(size_t size, gfp_t flags);
#line 1019  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
#line 1019 
void kfree_skb(struct sk_buff *);
#line 1023 
#line 1023 
void consume_skb(struct sk_buff *);
#line 1032 
#line 1032 
struct sk_buff *__alloc_skb(unsigned int, gfp_t, int, int);
#line 1046  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static struct sk_buff *alloc_skb(unsigned int size, gfp_t priority)
{
  #line 1049 
  return __alloc_skb(size,priority,0,-1);
}

#line 1580  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static struct sk_buff *skb_get(struct sk_buff *skb)
{
  #line 1582 
  refcount_inc(& skb->users);
  #line 1583 
  return skb;
}

#line 1661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int skb_shared(struct sk_buff *skb)
{
  #line 1663 
  return refcount_read(& skb->users) != 1U;
}

#line 2189 
#line 2189 
void *skb_put(struct sk_buff *, unsigned int);
#line 3934  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void __netif_tx_lock_0(struct netdev_queue *txq, int cpu)
{
  #line 3936 
  cif_spin_lock__xmit_lock_of_netdev_queue_0(& txq->_xmit_lock);
  #line 3937 
  txq->xmit_lock_owner = cpu;
  #line 3938 
  return;
}

#line 3965  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void __netif_tx_unlock_0(struct netdev_queue *txq)
{
  #line 3967 
  txq->xmit_lock_owner = -1;
  #line 3968 
  cif_spin_unlock__xmit_lock_of_netdev_queue_0(& txq->_xmit_lock);
  #line 3969 
  return;
}

#line 3998  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_lock_0(struct net_device *dev)
{
  #line 4004 
  int pscr_ret__;
  #line 4000 
  unsigned int i;
  #line 4001 
  int cpu;
  #line 4003 
  cif_spin_lock_tx_global_lock_of_net_device_0(& dev->tx_global_lock);
  #line 4004 
  __this_cpu_preempt_check((char *)"read");
  {
    #line 4004 
    void *__vpp_verify = (void *)0;
    #line 4004 
    void *tmp = __vpp_verify;
  }
  #line 4004 
  switch (4UL) {
    #line 4004 
    int pfo_ret___1;
    #line 4004 
    int pfo_ret___2;
    #line 4004 
    int pfo_ret__;
    #line 4004 
    int pfo_ret___0;
    #line 4004 
    case (unsigned long)1: 
                           #line 4004 
    ;
    #line 4004 
    switch (4UL) {
      #line 4004 
      case (unsigned long)1: 
                             #line 4004 
      ;
      #line 4005 
      ldv_inline_asm();
      #line 4004 
      break;
      #line 4004 
      case (unsigned long)2: 
                             #line 4004 
      ;
      #line 4005 
      ldv_inline_asm();
      #line 4004 
      break;
      #line 4004 
      case (unsigned long)4: 
                             #line 4004 
      ;
      #line 4005 
      ldv_inline_asm();
      #line 4004 
      break;
      #line 4004 
      case (unsigned long)8: 
                             #line 4004 
      ;
      #line 4005 
      ldv_inline_asm();
      #line 4004 
      break;
      #line 4004 
      default: 
               #line 4004 
      ;
      #line 4004 
      __bad_percpu_size();
    }
    #line 4004 
    pscr_ret__ = pfo_ret__;
    #line 4004 
    break;
    #line 4004 
    case (unsigned long)2: 
                           #line 4004 
    ;
    #line 4004 
    switch (4UL) {
      #line 4004 
      case (unsigned long)1: 
                             #line 4004 
      ;
      #line 4005 
      ldv_inline_asm();
      #line 4004 
      break;
      #line 4004 
      case (unsigned long)2: 
                             #line 4004 
      ;
      #line 4005 
      ldv_inline_asm();
      #line 4004 
      break;
      #line 4004 
      case (unsigned long)4: 
                             #line 4004 
      ;
      #line 4005 
      ldv_inline_asm();
      #line 4004 
      break;
      #line 4004 
      case (unsigned long)8: 
                             #line 4004 
      ;
      #line 4005 
      ldv_inline_asm();
      #line 4004 
      break;
      #line 4004 
      default: 
               #line 4004 
      ;
      #line 4004 
      __bad_percpu_size();
    }
    #line 4004 
    pscr_ret__ = pfo_ret___0;
    #line 4004 
    break;
    #line 4004 
    case (unsigned long)4: 
                           #line 4004 
    ;
    #line 4004 
    switch (4UL) {
      #line 4004 
      case (unsigned long)1: 
                             #line 4004 
      ;
      #line 4005 
      ldv_inline_asm();
      #line 4004 
      break;
      #line 4004 
      case (unsigned long)2: 
                             #line 4004 
      ;
      #line 4005 
      ldv_inline_asm();
      #line 4004 
      break;
      #line 4004 
      case (unsigned long)4: 
                             #line 4004 
      ;
      #line 4005 
      ldv_inline_asm();
      #line 4004 
      break;
      #line 4004 
      case (unsigned long)8: 
                             #line 4004 
      ;
      #line 4005 
      ldv_inline_asm();
      #line 4004 
      break;
      #line 4004 
      default: 
               #line 4004 
      ;
      #line 4004 
      __bad_percpu_size();
    }
    #line 4004 
    pscr_ret__ = pfo_ret___1;
    #line 4004 
    break;
    #line 4004 
    case (unsigned long)8: 
                           #line 4004 
    ;
    #line 4004 
    switch (4UL) {
      #line 4004 
      case (unsigned long)1: 
                             #line 4004 
      ;
      #line 4005 
      ldv_inline_asm();
      #line 4004 
      break;
      #line 4004 
      case (unsigned long)2: 
                             #line 4004 
      ;
      #line 4005 
      ldv_inline_asm();
      #line 4004 
      break;
      #line 4004 
      case (unsigned long)4: 
                             #line 4004 
      ;
      #line 4005 
      ldv_inline_asm();
      #line 4004 
      break;
      #line 4004 
      case (unsigned long)8: 
                             #line 4004 
      ;
      #line 4005 
      ldv_inline_asm();
      #line 4004 
      break;
      #line 4004 
      default: 
               #line 4004 
      ;
      #line 4004 
      __bad_percpu_size();
    }
    #line 4004 
    pscr_ret__ = pfo_ret___2;
    #line 4004 
    break;
    #line 4004 
    default: 
             #line 4004 
    ;
    #line 4004 
    __bad_size_call_parameter();
    #line 4004 
    break;
  }
  #line 4004 
  cpu = pscr_ret__;
  #line 4005 
  i = 0U;
  #line 4005 
  while (dev->num_tx_queues > i) {
    {
      #line 4006 
      struct netdev_queue *txq = netdev_get_tx_queue(dev,i);
      #line 4014 
      __netif_tx_lock_0(txq,cpu);
      #line 4015 
      cif_set_bit_0(2L,& txq->state);
      #line 4016 
      __netif_tx_unlock_0(txq);
    }
    #line 4005 
    i ++;
  }
  #line 4018 
  return;
}

#line 4020  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_lock_bh_0(struct net_device *dev)
{
  #line 4022 
  local_bh_disable();
  #line 4023 
  netif_tx_lock_0(dev);
  #line 4024 
  return;
}

#line 4026  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_unlock_0(struct net_device *dev)
{
  #line 4028 
  unsigned int i;
  #line 4030 
  i = 0U;
  #line 4030 
  while (dev->num_tx_queues > i) {
    {
      #line 4031 
      struct netdev_queue *txq = netdev_get_tx_queue(dev,i);
      #line 4037 
      cif_clear_bit_0(2L,& txq->state);
      #line 4038 
      netif_schedule_queue(txq);
    }
    #line 4030 
    i ++;
  }
  #line 4040 
  cif_spin_unlock_tx_global_lock_of_net_device_0(& dev->tx_global_lock);
  #line 4041 
  return;
}

#line 4043  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_unlock_bh_0(struct net_device *dev)
{
  #line 4045 
  netif_tx_unlock_0(dev);
  #line 4046 
  local_bh_enable();
  #line 4047 
  return;
}

#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.h"
#line 30 
netdev_tx_t ef4_enqueue_skb(struct ef4_tx_queue *tx_queue, struct sk_buff *skb);
#line 252  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.h"
__inline static void ef4_device_detach_sync_0(struct ef4_nic *efx)
{
  #line 254 
  struct net_device *dev = efx->net_dev;
  #line 260 
  netif_tx_lock_bh_0(dev);
  #line 261 
  netif_device_detach(dev);
  #line 262 
  netif_tx_unlock_bh_0(dev);
  #line 263 
  return;
}

#line 380  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/nic.h"
#line 380 
void ef4_nic_event_test_start(struct ef4_channel *channel);
#line 433 
#line 433 
bool ef4_nic_event_present(struct ef4_channel *channel);
#line 455 
#line 455 
int ef4_nic_irq_test_start(struct ef4_nic *efx);
#line 464  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/nic.h"
__inline static int ef4_nic_event_test_irq_cpu(struct ef4_channel *channel)
{
  #line 467 
  union __anonunion___u_4092 __u;
  #line 466 
  __read_once_size((void *)(& channel->event_test_cpu),(void *)(& __u.__c),4);
  #line 466 
  return (__u.__val);
}

#line 468  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/nic.h"
__inline static int ef4_nic_irq_test_irq_cpu(struct ef4_nic *efx)
{
  #line 471 
  union __anonunion___u_4094 __u;
  #line 470 
  __read_once_size((void *)(& efx->last_irq_cpu),(void *)(& __u.__c),4);
  #line 470 
  return (__u.__val);
}

#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/selftest.h"
#line 689  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/selftest.c"
int ef4_selftest(struct ef4_nic *efx, struct ef4_self_tests *tests, unsigned int flags);
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/selftest.c"
static u8 payload_source[6U] = {[1] = (unsigned char)15U, (unsigned char)83U, (unsigned char)27U, (unsigned char)27U, (unsigned char)27U};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/selftest.c"
static char payload_msg[55U] = {(char)'H', (char)'e', (char)'l', (char)'l', (char)'o', (char)' ', (char)'w', (char)'o', (char)'r', (char)'l', (char)'d', (char)'!', (char)' ', (char)'T', (char)'h', (char)'i', (char)'s', (char)' ', (char)'i', (char)'s', (char)' ', (char)'a', (char)'n', (char)' ', (char)'E', (char)'f', (char)'x', (char)' ', (char)'l', (char)'o', (char)'o', (char)'p', (char)'b', (char)'a', (char)'c', (char)'k', (char)' ', (char)'t', (char)'e', (char)'s', (char)'t', (char)' ', (char)'i', (char)'n', (char)' ', (char)'p', (char)'r', (char)'o', (char)'g', (char)'r', (char)'e', (char)'s', (char)'s', (char)'!'};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/selftest.c"
static char *ef4_interrupt_mode_names[3U] = {(char *)"MSI-X", (char *)"MSI", (char *)"legacy"};
#line 96  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/selftest.c"
static int ef4_test_phy_alive(struct ef4_nic *efx, struct ef4_self_tests *tests)
{
  #line 98 
  int rc = 0;
  #line 100 
  if ((efx->phy_op)->test_alive != (int (*)(struct ef4_nic *))0) {
    #line 101 
    rc = (*((efx->phy_op)->test_alive))(efx);
    #line 102 
    if (rc != 0) 
                 #line 102 
                 tests->phy_alive = -1; else 
                                             #line 102 
                                             tests->phy_alive = 1;
  }
  #line 105 
  return rc;
}

#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/selftest.c"
static int ef4_test_nvram(struct ef4_nic *efx, struct ef4_self_tests *tests)
{
  #line 110 
  int rc = 0;
  #line 112 
  if ((efx->type)->test_nvram != (int (*)(struct ef4_nic *))0) {
    #line 113 
    rc = (*((efx->type)->test_nvram))(efx);
    #line 114 
    if (rc == -1) 
                  #line 115 
                  rc = 0;
    else 
      #line 117 
      if (rc != 0) 
                   #line 117 
                   tests->nvram = -1; else 
                                           #line 117 
                                           tests->nvram = 1;
  }
  #line 120 
  return rc;
}

#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/selftest.c"
static int ef4_test_interrupts(struct ef4_nic *efx, struct ef4_self_tests *tests)
{
  #line 133 
  unsigned long timeout;
  #line 133 
  unsigned long wait;
  #line 134 
  int cpu;
  #line 135 
  int rc;
  #line 137 
  if ((efx->msg_enable & 1U) != 0U) {
    #line 137 
    bool branch;
    #line 137 
    struct _ddebug __UNIQUE_ID_ddebug541 = {.modname = (char *)"sfc_falcon", .function = (char *)"ef4_test_interrupts", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/selftest.c", .format = (char *)"testing interrupts\n", .lineno = (unsigned int)137U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 137 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug541.key.dd_key_false.key,(_Bool)0);
    #line 137 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 137 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug541,efx->net_dev,(char *)"testing interrupts\n");
  }
  #line 138 
  tests->interrupt = -1;
  #line 140 
  rc = ef4_nic_irq_test_start(efx);
  #line 141 
  if (rc == -524) {
    #line 142 
    if ((efx->msg_enable & 1U) != 0U) {
      #line 142 
      bool branch_0;
      #line 142 
      struct _ddebug __UNIQUE_ID_ddebug542 = {.modname = (char *)"sfc_falcon", .function = (char *)"ef4_test_interrupts", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/selftest.c", .format = (char *)"direct interrupt testing not supported\n", .lineno = (unsigned int)142U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 142 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug542.key.dd_key_false.key,(_Bool)0);
      #line 142 
      if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                    #line 142 
                                                    __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug542,efx->net_dev,(char *)"direct interrupt testing not supported\n");
    }
    #line 144 
    tests->interrupt = 0;
    #line 145 
    return 0;
  }
  #line 148 
  timeout = jiffies + 250UL;
  #line 149 
  wait = 1UL;
  #line 152 
  if ((efx->msg_enable & 1U) != 0U) {
    #line 152 
    bool branch_1;
    #line 152 
    struct _ddebug __UNIQUE_ID_ddebug543 = {.modname = (char *)"sfc_falcon", .function = (char *)"ef4_test_interrupts", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/selftest.c", .format = (char *)"waiting for test interrupt\n", .lineno = (unsigned int)152U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 152 
    branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug543.key.dd_key_false.key,(_Bool)0);
    #line 152 
    if ((long)((long)((int)branch_1 != 0)) != 0L) 
                                                  #line 152 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug543,efx->net_dev,(char *)"waiting for test interrupt\n");
  }
  #line 153 
  while (1) {
    #line 154 
    schedule_timeout_uninterruptible((long)wait);
    #line 155 
    cpu = ef4_nic_irq_test_irq_cpu(efx);
    #line 156 
    if (cpu >= 0) 
                  #line 157 
                  goto success;
    #line 158 
    wait *= 2UL;
    {
      #line 159 
      unsigned long __dummy;
      #line 159 
      unsigned long __dummy2;
      }
    #line 159 
    if (1 != 0) {
      {
        #line 159 
        unsigned long __dummy_0;
        #line 159 
        unsigned long __dummy2_0;
        }
      #line 159 
      if (1 != 0) {
        #line 159 
        if (! ((long)(jiffies - timeout) < 0L)) 
                                                #line 153 
                                                break;
      }
      else 
           #line 153 
           break;
    }
    else 
         #line 153 
         break;
  }
  #line 161 
  if ((efx->msg_enable & 1U) != 0U) 
                                    #line 161 
                                    netdev_err(efx->net_dev,(char *)"timed out waiting for interrupt\n");
  #line 162 
  return -110;
  #line 164 
  success: 
           #line 164 
  ;
  #line 165 
  if ((efx->msg_enable & 1U) != 0U) {
    #line 165 
    bool branch_2;
    #line 165 
    struct _ddebug __UNIQUE_ID_ddebug544 = {.modname = (char *)"sfc_falcon", .function = (char *)"ef4_test_interrupts", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/selftest.c", .format = (char *)"%s test interrupt seen on CPU%d\n", .lineno = (unsigned int)165U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 165 
    branch_2 = arch_static_branch(& __UNIQUE_ID_ddebug544.key.dd_key_false.key,(_Bool)0);
    #line 165 
    if ((long)((long)((int)branch_2 != 0)) != 0L) {
      #line 165 
      char *tmp_4;
      #line 165 
      ;
      #line 165 
      if (efx->interrupt_mode <= (unsigned int)EF4_INT_MODE_LEGACY) 
                                                                    #line 165 
                                                                    tmp_4 = ef4_interrupt_mode_names[(unsigned int)efx->interrupt_mode]; else 
                                                                    #line 165 
                                                                    tmp_4 = (char *)"(invalid)";
      #line 165 
      ;
      #line 165 
      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug544,efx->net_dev,(char *)"%s test interrupt seen on CPU%d\n",tmp_4,cpu);
    }
  }
  #line 167 
  tests->interrupt = 1;
  #line 168 
  return 0;
}

#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/selftest.c"
static int ef4_test_eventq_irq(struct ef4_nic *efx, struct ef4_self_tests *tests)
{
  #line 175 
  struct ef4_channel *channel;
  #line 176 
  unsigned int read_ptr[32U];
  #line 178 
  unsigned long timeout;
  #line 178 
  unsigned long wait;
  #line 250 
  int tmp_10;
  #line 177 
  unsigned long napi_ran = 0UL;
  #line 177 
  unsigned long dma_pend = 0UL;
  #line 177 
  unsigned long int_pend = 0UL;
  #line 182 
  channel = efx->channel[0];
  #line 182 
  while (channel != (struct ef4_channel *)0) {
    #line 183 
    read_ptr[channel->channel] = channel->eventq_read_ptr;
    #line 184 
    cif_set_bit_0((long)channel->channel,& dma_pend);
    #line 185 
    cif_set_bit_0((long)channel->channel,& int_pend);
    #line 186 
    ef4_nic_event_test_start(channel);
    #line 182 
    if ((unsigned int)(channel->channel + 1) < efx->n_channels) 
                                                                #line 182 
                                                                channel = efx->channel[channel->channel + 1]; else 
                                                                    #line 182 
                                                                    channel = (struct ef4_channel *)0;
  }
  #line 189 
  timeout = jiffies + 250UL;
  #line 190 
  wait = 1UL;
  #line 195 
  while (1) {
    #line 196 
    schedule_timeout_uninterruptible((long)wait);
    #line 198 
    channel = efx->channel[0];
    #line 198 
    while (channel != (struct ef4_channel *)0) {
      #line 199 
      ef4_stop_eventq(channel);
      #line 200 
      if (channel->eventq_read_ptr != read_ptr[channel->channel]) {
        #line 202 
        cif_set_bit_0((long)channel->channel,& napi_ran);
        #line 203 
        cif_clear_bit_0((long)channel->channel,& dma_pend);
        #line 204 
        cif_clear_bit_0((long)channel->channel,& int_pend);
      }
      else {
        #line 206 
        if ((int)ef4_nic_event_present(channel) != 0) 
                                                      #line 207 
                                                      cif_clear_bit_0((long)channel->channel,& dma_pend);
        #line 208 
        if (ef4_nic_event_test_irq_cpu(channel) >= 0) 
                                                      #line 209 
                                                      cif_clear_bit_0((long)channel->channel,& int_pend);
      }
      #line 211 
      ef4_start_eventq(channel);
      #line 198 
      if ((unsigned int)(channel->channel + 1) < efx->n_channels) 
                                                                  #line 198 
                                                                  channel = efx->channel[channel->channel + 1]; else 
                                                                    #line 198 
                                                                    channel = (struct ef4_channel *)0;
    }
    #line 214 
    wait *= 2UL;
    {
      #line 215 
      unsigned long __dummy;
      #line 215 
      unsigned long __dummy2;
      }
    #line 215 
    if (1 != 0) {
      {
        #line 215 
        unsigned long __dummy_0;
        #line 215 
        unsigned long __dummy2_0;
        }
      #line 215 
      if (1 != 0) 
        #line 215 
        if ((long)(jiffies - timeout) < 0L) {
          #line 215 
          if (! (dma_pend != 0UL || int_pend != 0UL)) 
                                                      #line 195 
                                                      break;
        }
        else 
             #line 195 
             break;
      else 
           #line 195 
           break;
    }
    else 
         #line 195 
         break;
  }
  #line 217 
  channel = efx->channel[0];
  #line 217 
  while (channel != (struct ef4_channel *)0) {
    {
      #line 218 
      int tmp_4;
      #line 219 
      int tmp_6;
      #line 218 
      if ((int)test_bit((long)channel->channel,& dma_pend) != 0) 
                                                                 #line 218 
                                                                 tmp_4 = 0; else 
                                                                    #line 218 
                                                                    tmp_4 = 1;
      #line 218 
      bool dma_seen = (_Bool)(tmp_4 != 0);
      #line 219 
      if ((int)test_bit((long)channel->channel,& int_pend) != 0) 
                                                                 #line 219 
                                                                 tmp_6 = 0; else 
                                                                    #line 219 
                                                                    tmp_6 = 1;
      #line 219 
      bool int_seen = (_Bool)(tmp_6 != 0);
      #line 221 
      if ((int)dma_seen != 0) 
                              #line 221 
                              tests->eventq_dma[channel->channel] = 1; else 
                                                                    #line 221 
                                                                    tests->eventq_dma[channel->channel] = -1;
      #line 222 
      if ((int)int_seen != 0) 
                              #line 222 
                              tests->eventq_int[channel->channel] = 1; else 
                                                                    #line 222 
                                                                    tests->eventq_int[channel->channel] = -1;
      #line 224 
      if ((int)dma_seen != 0 && (int)int_seen != 0) {
        #line 225 
        if ((efx->msg_enable & 1U) != 0U) {
          #line 225 
          bool branch;
          #line 225 
          struct _ddebug __UNIQUE_ID_ddebug545 = {.modname = (char *)"sfc_falcon", .function = (char *)"ef4_test_eventq_irq", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/selftest.c", .format = (char *)"channel %d event queue passed (with%s NAPI)\n", .lineno = (unsigned int)225U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
          #line 225 
          branch = arch_static_branch(& __UNIQUE_ID_ddebug545.key.dd_key_false.key,(_Bool)0);
          #line 225 
          if ((long)((long)((int)branch != 0)) != 0L) {
            #line 225 
            char *tmp_8;
            #line 225 
            if ((int)test_bit((long)channel->channel,& napi_ran) != 0) 
              #line 225 
              tmp_8 = (char *)""; else 
                                       #line 225 
                                       tmp_8 = (char *)"out";
            #line 225 
            ;
            #line 225 
            ;
            #line 225 
            __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug545,efx->net_dev,(char *)"channel %d event queue passed (with%s NAPI)\n",channel->channel,tmp_8);
          }
        }
      }
      else {
        #line 234 
        if ((efx->msg_enable & 1U) != 0U) 
                                          #line 234 
                                          netdev_err(efx->net_dev,(char *)"channel %d timed out waiting for event queue\n",channel->channel);
        #line 237 
        if ((int)int_seen != 0) 
          #line 238 
          if ((efx->msg_enable & 1U) != 0U) 
                                            #line 238 
                                            netdev_err(efx->net_dev,(char *)"channel %d saw interrupt ",channel->channel);
        #line 242 
        if ((int)dma_seen != 0) 
          #line 243 
          if ((efx->msg_enable & 1U) != 0U) 
                                            #line 243 
                                            netdev_err(efx->net_dev,(char *)"channel %d event was generated, but ",channel->channel);
      }
    }
    #line 217 
    if ((unsigned int)(channel->channel + 1) < efx->n_channels) 
                                                                #line 217 
                                                                channel = efx->channel[channel->channel + 1]; else 
                                                                    #line 217 
                                                                    channel = (struct ef4_channel *)0;
  }
  #line 250 
  if (dma_pend != 0UL || int_pend != 0UL) 
                                          #line 250 
                                          tmp_10 = -110; else 
                                                              #line 250 
                                                              tmp_10 = 0;
  #line 250 
  return tmp_10;
}

#line 253  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/selftest.c"
static int ef4_test_phy(struct ef4_nic *efx, struct ef4_self_tests *tests, unsigned int flags)
{
  #line 256 
  int rc;
  #line 258 
  if ((efx->phy_op)->run_tests == (int (*)(struct ef4_nic *, int *, unsigned int ))0) 
    #line 259 
    return 0;
  #line 261 
  cif_mutex_lock_mac_lock_of_ef4_nic_1(& efx->mac_lock);
  #line 262 
  rc = (*((efx->phy_op)->run_tests))(efx,(int *)(& tests->phy_ext),flags);
  #line 263 
  cif_mutex_unlock_mac_lock_of_ef4_nic_1(& efx->mac_lock);
  #line 264 
  if (rc == -1) 
                #line 265 
                rc = 0;
  else 
    #line 267 
    if ((efx->msg_enable & 1U) != 0U) {
      #line 267 
      char *tmp;
      #line 267 
      if (rc != 0) 
                   #line 267 
                   tmp = (char *)"Failed"; else 
                                                #line 267 
                                                tmp = (char *)"Passed";
      #line 267 
      ;
      #line 267 
      netdev_info(efx->net_dev,(char *)"%s phy selftest\n",tmp);
    }
  #line 270 
  return rc;
}

#line 283  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/selftest.c"
void ef4_loopback_rx_packet(struct ef4_nic *efx, char *buf_ptr, int pkt_len)
{
  #line 287 
  struct ef4_loopback_payload *received;
  #line 288 
  struct ef4_loopback_payload *payload;
  #line 286 
  struct ef4_loopback_state *state = (struct ef4_loopback_state *)efx->loopback_selftest;
  #line 290 
  if ((long)(buf_ptr == (char *)0) != 0L) {
    #line 291 
    ldv_inline_asm();
    #line 292 
    ldv_inline_asm();
    #line 293 
    ldv_inline_asm();
    #line 290 
    ;
  }
  #line 293 
  if (state == (struct ef4_loopback_state *)0 || (int)state->flush != 0) 
    #line 294 
    return;
  #line 296 
  payload = & state->payload;
  #line 298 
  received = (struct ef4_loopback_payload *)buf_ptr;
  #line 299 
  received->ip.saddr = payload->ip.saddr;
  #line 300 
  if ((int)state->offload_csum != 0) 
                                     #line 301 
                                     received->ip.check = payload->ip.check;
  #line 304 
  if ((unsigned int)pkt_len <= 13U) {
    #line 305 
    if ((efx->msg_enable & 1U) != 0U) {
      #line 305 
      char *tmp;
      #line 305 
      if (efx->loopback_mode < (enum ef4_loopback_mode)ef4_loopback_mode_max) 
        #line 305 
        tmp = ef4_loopback_mode_names[(unsigned int)efx->loopback_mode]; else 
                                                                    #line 305 
                                                                    tmp = (char *)"(invalid)";
      #line 305 
      ;
      #line 305 
      ;
      #line 305 
      netdev_err(efx->net_dev,(char *)"saw runt RX packet (length %d) in %s loopback ",pkt_len,tmp);
    }
    #line 308 
    goto err;
  }
  #line 312 
  if (memcmp((void *)(& received->header),(void *)(& payload->header),14UL) != 0) {
    #line 313 
    if ((efx->msg_enable & 1U) != 0U) {
      #line 313 
      char *tmp_0;
      #line 313 
      if (efx->loopback_mode < (enum ef4_loopback_mode)ef4_loopback_mode_max) 
        #line 313 
        tmp_0 = ef4_loopback_mode_names[(unsigned int)efx->loopback_mode]; else 
                                                                    #line 313 
                                                                    tmp_0 = (char *)"(invalid)";
      #line 313 
      ;
      #line 313 
      netdev_err(efx->net_dev,(char *)"saw non-loopback RX packet in %s loopback test\n",tmp_0);
    }
    #line 316 
    goto err;
  }
  #line 320 
  if (pkt_len != 108) {
    #line 321 
    if ((efx->msg_enable & 1U) != 0U) {
      #line 321 
      char *tmp_2;
      #line 321 
      if (efx->loopback_mode < (enum ef4_loopback_mode)ef4_loopback_mode_max) 
        #line 321 
        tmp_2 = ef4_loopback_mode_names[(unsigned int)efx->loopback_mode]; else 
                                                                    #line 321 
                                                                    tmp_2 = (char *)"(invalid)";
      #line 321 
      ;
      #line 321 
      ;
      #line 321 
      netdev_err(efx->net_dev,(char *)"saw incorrect RX packet length %d (wanted %d) in ",pkt_len,108,tmp_2);
    }
    #line 325 
    goto err;
  }
  #line 329 
  if (memcmp((void *)(& received->ip),(void *)(& payload->ip),20UL) != 0) {
    #line 330 
    if ((efx->msg_enable & 1U) != 0U) {
      #line 330 
      char *tmp_3;
      #line 330 
      if (efx->loopback_mode < (enum ef4_loopback_mode)ef4_loopback_mode_max) 
        #line 330 
        tmp_3 = ef4_loopback_mode_names[(unsigned int)efx->loopback_mode]; else 
                                                                    #line 330 
                                                                    tmp_3 = (char *)"(invalid)";
      #line 330 
      ;
      #line 330 
      netdev_err(efx->net_dev,(char *)"saw corrupted IP header in %s loopback test\n",tmp_3);
    }
    #line 333 
    goto err;
  }
  #line 337 
  if (memcmp((void *)(& received->msg),(void *)(& payload->msg),64UL) != 0) {
    #line 338 
    if ((efx->msg_enable & 1U) != 0U) {
      #line 338 
      char *tmp_5;
      #line 338 
      if (efx->loopback_mode < (enum ef4_loopback_mode)ef4_loopback_mode_max) 
        #line 338 
        tmp_5 = ef4_loopback_mode_names[(unsigned int)efx->loopback_mode]; else 
                                                                    #line 338 
                                                                    tmp_5 = (char *)"(invalid)";
      #line 338 
      ;
      #line 338 
      netdev_err(efx->net_dev,(char *)"saw corrupted RX packet in %s loopback test\n",tmp_5);
    }
    #line 341 
    goto err;
  }
  #line 345 
  if ((int)received->iteration != (int)payload->iteration) {
    #line 346 
    if ((efx->msg_enable & 1U) != 0U) {
      #line 346 
      char *tmp_7;
      #line 346 
      if (efx->loopback_mode < (enum ef4_loopback_mode)ef4_loopback_mode_max) 
        #line 346 
        tmp_7 = ef4_loopback_mode_names[(unsigned int)efx->loopback_mode]; else 
                                                                    #line 346 
                                                                    tmp_7 = (char *)"(invalid)";
      #line 346 
      ;
      #line 346 
      netdev_err(efx->net_dev,(char *)"saw RX packet from iteration %d (wanted %d) in ",(int)__builtin_bswap16((unsigned short)((int)received->iteration)),(int)__builtin_bswap16((unsigned short)((int)payload->iteration)),tmp_7);
    }
    #line 350 
    goto err;
  }
  #line 357 
  atomic_inc_1(& state->rx_good);
  #line 358 
  return;
  #line 360 
  err: 
       #line 360 
  ;
  #line 371 
  atomic_inc_1(& state->rx_bad);
  #line 372 
  return;
}

#line 375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/selftest.c"
static void ef4_iterate_state(struct ef4_nic *efx)
{
  #line 377 
  struct ef4_loopback_state *state = (struct ef4_loopback_state *)efx->loopback_selftest;
  #line 378 
  struct net_device *net_dev = efx->net_dev;
  #line 379 
  struct ef4_loopback_payload *payload = & state->payload;
  #line 382 
  ether_addr_copy((u8 *)(& payload->header.h_dest),net_dev->dev_addr);
  #line 383 
  ether_addr_copy((u8 *)(& payload->header.h_source),(u8 *)(& payload_source));
  #line 384 
  payload->header.h_proto = (unsigned short)8U;
  #line 387 
  payload->ip.daddr = 16777343U;
  #line 388 
  payload->ip.ihl = (unsigned char)5U;
  #line 389 
  payload->ip.check = (unsigned short)44510U;
  #line 390 
  payload->ip.tot_len = (unsigned short)24064U;
  #line 391 
  payload->ip.version = (unsigned char)4U;
  #line 392 
  payload->ip.protocol = (unsigned char)17U;
  #line 395 
  payload->udp.source = (unsigned short)0U;
  #line 396 
  payload->udp.len = (unsigned short)18944U;
  #line 398 
  payload->udp.check = (unsigned short)0U;
  #line 401 
  payload->iteration = __builtin_bswap16((unsigned short)((int)((unsigned int)__builtin_bswap16((unsigned short)((int)payload->iteration)) + 1U)));
  #line 402 
  memcpy((void *)(& payload->msg),(void *)(& payload_msg),55UL);
  #line 405 
  atomic_set(& state->rx_good,0);
  #line 406 
  atomic_set(& state->rx_bad,0);
  #line 407 
  ldv_inline_asm();
  #line 408 
  return;
}

#line 410  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/selftest.c"
static int ef4_begin_loopback(struct ef4_tx_queue *tx_queue)
{
  #line 414 
  struct ef4_loopback_payload *payload;
  #line 415 
  struct sk_buff *skb;
  #line 416 
  int i;
  #line 417 
  netdev_tx_t rc;
  #line 412 
  struct ef4_nic *efx = tx_queue->efx;
  #line 413 
  struct ef4_loopback_state *state = (struct ef4_loopback_state *)efx->loopback_selftest;
  #line 420 
  i = 0;
  #line 420 
  while (state->packet_count > i) {
    #line 423 
    skb = alloc_skb(108U,3264U);
    #line 424 
    if (skb == (struct sk_buff *)0) 
                                    #line 425 
                                    return -12;
    #line 426 
    *(state->skbs + (unsigned long)i) = skb;
    #line 427 
    skb_get(skb);
    #line 431 
    payload = (struct ef4_loopback_payload *)skb_put(skb,108U);
    #line 432 
    memcpy((void *)payload,(void *)(& state->payload),108UL);
    #line 433 
    payload->ip.saddr = __builtin_bswap32((unsigned int)((i << 2) | 2130706433));
    #line 434 
    ldv_inline_asm();
    #line 439 
    netif_tx_lock_bh_0(efx->net_dev);
    #line 440 
    rc = ef4_enqueue_skb(tx_queue,skb);
    #line 441 
    netif_tx_unlock_bh_0(efx->net_dev);
    #line 443 
    if (rc != (unsigned int)NETDEV_TX_OK) {
      #line 444 
      if ((efx->msg_enable & 1U) != 0U) {
        #line 444 
        char *tmp_0;
        #line 444 
        if (efx->loopback_mode < (enum ef4_loopback_mode)ef4_loopback_mode_max) 
          #line 444 
          tmp_0 = ef4_loopback_mode_names[(unsigned int)efx->loopback_mode]; else 
                                                                    #line 444 
                                                                    tmp_0 = (char *)"(invalid)";
        #line 444 
        ;
        #line 444 
        ;
        #line 444 
        ;
        #line 444 
        ;
        #line 444 
        netdev_err(efx->net_dev,(char *)"TX queue %d could not transmit packet %d of ",tx_queue->queue,i + 1,state->packet_count,tmp_0);
      }
      #line 451 
      kfree_skb(skb);
      #line 452 
      return -32;
    }
    #line 420 
    i ++;
  }
  #line 456 
  return 0;
}

#line 459  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/selftest.c"
static int ef4_poll_loopback(struct ef4_nic *efx)
{
  #line 461 
  struct ef4_loopback_state *state = (struct ef4_loopback_state *)efx->loopback_selftest;
  #line 463 
  ;
  #line 463 
  return atomic_read_1(& state->rx_good) == state->packet_count;
}

#line 466  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/selftest.c"
static int ef4_end_loopback(struct ef4_tx_queue *tx_queue, struct ef4_loopback_self_tests *lb_tests)
{
  #line 471 
  struct sk_buff *skb;
  #line 472 
  int rx_good;
  #line 472 
  int rx_bad;
  #line 473 
  int i;
  #line 469 
  struct ef4_nic *efx = tx_queue->efx;
  #line 470 
  struct ef4_loopback_state *state = (struct ef4_loopback_state *)efx->loopback_selftest;
  #line 472 
  int tx_done = 0;
  #line 473 
  int rc = 0;
  #line 475 
  netif_tx_lock_bh_0(efx->net_dev);
  #line 479 
  i = 0;
  #line 479 
  while (state->packet_count > i) {
    #line 480 
    skb = *(state->skbs + (unsigned long)i);
    #line 481 
    if (skb != (struct sk_buff *)0) {
      #line 481 
      if (skb_shared(skb) == 0) 
                                #line 482 
                                tx_done ++;
    }
    #line 483 
    consume_skb(skb);
    #line 479 
    i ++;
  }
  #line 486 
  netif_tx_unlock_bh_0(efx->net_dev);
  #line 489 
  rx_good = atomic_read_1(& state->rx_good);
  #line 490 
  rx_bad = atomic_read_1(& state->rx_bad);
  #line 491 
  if (state->packet_count != tx_done) {
    #line 495 
    if ((efx->msg_enable & 1U) != 0U) {
      #line 495 
      char *tmp_0;
      #line 495 
      if (efx->loopback_mode < (enum ef4_loopback_mode)ef4_loopback_mode_max) 
        #line 495 
        tmp_0 = ef4_loopback_mode_names[(unsigned int)efx->loopback_mode]; else 
                                                                    #line 495 
                                                                    tmp_0 = (char *)"(invalid)";
      #line 495 
      ;
      #line 495 
      ;
      #line 495 
      ;
      #line 495 
      ;
      #line 495 
      netdev_err(efx->net_dev,(char *)"TX queue %d saw only %d out of an expected %d ",tx_queue->queue,tx_done,state->packet_count,tmp_0);
    }
    #line 500 
    rc = -110;
  }
  #line 505 
  if (state->packet_count != rx_good) {
    #line 506 
    if ((efx->msg_enable & 1U) != 0U) {
      #line 506 
      bool branch;
      #line 506 
      struct _ddebug __UNIQUE_ID_ddebug547 = {.modname = (char *)"sfc_falcon", .function = (char *)"ef4_end_loopback", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/selftest.c", .format = (char *)"TX queue %d saw only %d out of an expected %d ", .lineno = (unsigned int)506U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 506 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug547.key.dd_key_false.key,(_Bool)0);
      #line 506 
      if ((long)((long)((int)branch != 0)) != 0L) {
        #line 506 
        char *tmp_1;
        #line 506 
        if (efx->loopback_mode < (enum ef4_loopback_mode)ef4_loopback_mode_max) 
          #line 506 
          tmp_1 = ef4_loopback_mode_names[(unsigned int)efx->loopback_mode]; else 
                                                                    #line 506 
                                                                    tmp_1 = (char *)"(invalid)";
        #line 506 
        ;
        #line 506 
        ;
        #line 506 
        ;
        #line 506 
        ;
        #line 506 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug547,efx->net_dev,(char *)"TX queue %d saw only %d out of an expected %d ",tx_queue->queue,rx_good,state->packet_count,tmp_1);
      }
    }
    #line 511 
    rc = -110;
  }
  #line 516 
  lb_tests->tx_sent[tx_queue->queue] += state->packet_count;
  #line 517 
  lb_tests->tx_done[tx_queue->queue] += tx_done;
  #line 518 
  lb_tests->rx_good += rx_good;
  #line 519 
  lb_tests->rx_bad += rx_bad;
  #line 521 
  return rc;
}

#line 525  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/selftest.c"
static int ef4_test_loopback(struct ef4_tx_queue *tx_queue, struct ef4_loopback_self_tests *lb_tests)
{
  #line 530 
  int i;
  #line 530 
  int begin_rc;
  #line 530 
  int end_rc;
  #line 528 
  struct ef4_nic *efx = tx_queue->efx;
  #line 529 
  struct ef4_loopback_state *state = (struct ef4_loopback_state *)efx->loopback_selftest;
  #line 532 
  i = 0;
  #line 532 
  while (i <= 2) {
    {
      #line 535 
      int __UNIQUE_ID___x548;
      #line 535 
      int tmp;
      #line 534 
      state->packet_count = (int)(efx->txq_entries / 3U);
      {
        #line 535 
        __UNIQUE_ID___x548 = 1 << (i << 2);
        #line 535 
        int __UNIQUE_ID___y549 = state->packet_count;
        #line 535 
        if (__UNIQUE_ID___x548 < __UNIQUE_ID___y549) 
                                                     #line 535 
                                                     tmp = __UNIQUE_ID___x548; else 
                                                                    #line 535 
                                                                    tmp = __UNIQUE_ID___y549;
        }
      #line 535 
      state->packet_count = tmp;
      #line 536 
      state->skbs = (struct sk_buff **)kcalloc_1((unsigned long)state->packet_count,8UL,3264U);
      #line 538 
      if (state->skbs == (struct sk_buff **)0) 
                                               #line 539 
                                               return -12;
      #line 540 
      state->flush = (_Bool)0;
      #line 542 
      if ((efx->msg_enable & 1U) != 0U) {
        #line 542 
        bool branch;
        #line 542 
        struct _ddebug __UNIQUE_ID_ddebug550 = {.modname = (char *)"sfc_falcon", .function = (char *)"ef4_test_loopback", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/selftest.c", .format = (char *)"TX queue %d testing %s loopback with %d packets\n", .lineno = (unsigned int)542U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 542 
        branch = arch_static_branch(& __UNIQUE_ID_ddebug550.key.dd_key_false.key,(_Bool)0);
        #line 542 
        if ((long)((long)((int)branch != 0)) != 0L) {
          #line 542 
          char *tmp_2;
          #line 542 
          ;
          #line 542 
          if (efx->loopback_mode < (enum ef4_loopback_mode)ef4_loopback_mode_max) 
            #line 542 
            tmp_2 = ef4_loopback_mode_names[(unsigned int)efx->loopback_mode]; else 
                                                                    #line 542 
                                                                    tmp_2 = (char *)"(invalid)";
          #line 542 
          ;
          #line 542 
          ;
          #line 542 
          __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug550,efx->net_dev,(char *)"TX queue %d testing %s loopback with %d packets\n",tx_queue->queue,tmp_2,state->packet_count);
        }
      }
      #line 547 
      ef4_iterate_state(efx);
      #line 548 
      begin_rc = ef4_begin_loopback(tx_queue);
      #line 552 
      msleep(1U);
      #line 553 
      if (ef4_poll_loopback(efx) == 0) {
        #line 554 
        msleep(1000U);
        #line 555 
        ef4_poll_loopback(efx);
      }
      #line 558 
      end_rc = ef4_end_loopback(tx_queue,lb_tests);
      #line 559 
      kfree((void *)state->skbs);
      #line 561 
      if (begin_rc != 0 || end_rc != 0) {
        #line 565 
        int tmp_5;
        #line 564 
        schedule_timeout_uninterruptible(25L);
        #line 565 
        if (begin_rc != 0) 
                           #line 565 
                           tmp_5 = begin_rc; else 
                                                  #line 565 
                                                  tmp_5 = end_rc;
        #line 565 
        return tmp_5;
      }
    }
    #line 532 
    i ++;
  }
  #line 569 
  if ((efx->msg_enable & 1U) != 0U) {
    #line 569 
    bool branch_0;
    #line 569 
    struct _ddebug __UNIQUE_ID_ddebug551 = {.modname = (char *)"sfc_falcon", .function = (char *)"ef4_test_loopback", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/selftest.c", .format = (char *)"TX queue %d passed %s loopback test with a burst length ", .lineno = (unsigned int)569U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 569 
    branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug551.key.dd_key_false.key,(_Bool)0);
    #line 569 
    if ((long)((long)((int)branch_0 != 0)) != 0L) {
      #line 569 
      char *tmp_6;
      #line 569 
      ;
      #line 569 
      if (efx->loopback_mode < (enum ef4_loopback_mode)ef4_loopback_mode_max) 
        #line 569 
        tmp_6 = ef4_loopback_mode_names[(unsigned int)efx->loopback_mode]; else 
                                                                    #line 569 
                                                                    tmp_6 = (char *)"(invalid)";
      #line 569 
      ;
      #line 569 
      ;
      #line 569 
      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug551,efx->net_dev,(char *)"TX queue %d passed %s loopback test with a burst length ",tx_queue->queue,tmp_6,state->packet_count);
    }
  }
  #line 574 
  return 0;
}

#line 581  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/selftest.c"
static int ef4_wait_for_link(struct ef4_nic *efx)
{
  #line 584 
  int count;
  #line 585 
  bool link_up;
  #line 583 
  struct ef4_link_state *link_state = & efx->link_state;
  #line 584 
  int link_up_count = 0;
  #line 587 
  count = 0;
  #line 587 
  while (count <= 39) {
    #line 588 
    schedule_timeout_uninterruptible(25L);
    #line 590 
    if ((efx->type)->monitor != (void (*)(struct ef4_nic *))0) {
      #line 591 
      cif_mutex_lock_mac_lock_of_ef4_nic_1(& efx->mac_lock);
      #line 592 
      (*((efx->type)->monitor))(efx);
      #line 593 
      cif_mutex_unlock_mac_lock_of_ef4_nic_1(& efx->mac_lock);
    }
    #line 596 
    cif_mutex_lock_mac_lock_of_ef4_nic_1(& efx->mac_lock);
    #line 597 
    link_up = link_state->up;
    #line 598 
    if ((int)link_up != 0) {
      #line 599 
      int tmp_0;
      #line 599 
      if ((int)(*((efx->type)->check_mac_fault))(efx) != 0) 
                                                            #line 599 
                                                            tmp_0 = 0; else 
                                                                    #line 599 
                                                                    tmp_0 = 1;
      #line 599 
      link_up = (_Bool)(tmp_0 != 0);
    }
    #line 600 
    cif_mutex_unlock_mac_lock_of_ef4_nic_1(& efx->mac_lock);
    #line 602 
    if ((int)link_up != 0) {
      #line 603 
      link_up_count ++;
      #line 603 
      if (link_up_count == 2) 
                              #line 604 
                              return 0;
    }
    else 
         #line 606 
         link_up_count = 0;
    #line 587 
    count ++;
  }
  #line 610 
  return -110;
}

#line 613  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/selftest.c"
static int ef4_test_loopbacks(struct ef4_nic *efx, struct ef4_self_tests *tests, unsigned int loopback_modes)
{
  #line 616 
  enum ef4_loopback_mode mode;
  #line 617 
  struct ef4_loopback_state *state;
  #line 620 
  struct ef4_tx_queue *tx_queue;
  #line 618 
  struct ef4_channel *channel = ef4_get_channel(efx,efx->tx_channel_offset);
  #line 621 
  int rc = 0;
  #line 626 
  state = (struct ef4_loopback_state *)kzalloc_0(136UL,3264U);
  #line 627 
  if (state == (struct ef4_loopback_state *)0) 
                                               #line 628 
                                               return -12;
  #line 629 
  if ((long)(efx->loopback_selftest != (void *)0) != 0L) {
    #line 630 
    ldv_inline_asm();
    #line 631 
    ldv_inline_asm();
    #line 632 
    ldv_inline_asm();
    #line 629 
    ;
  }
  #line 630 
  state->flush = (_Bool)1;
  #line 631 
  efx->loopback_selftest = (void *)state;
  #line 634 
  mode = LOOPBACK_NONE;
  #line 634 
  while (mode <= (unsigned int)LOOPBACK_PMAPMD) {
    {
      #line 635 
      if (((unsigned int)(1 << (unsigned int)mode) & loopback_modes) == 0U) 
        #line 636 
        goto __Cont;
      #line 639 
      state->flush = (_Bool)1;
      #line 640 
      cif_mutex_lock_mac_lock_of_ef4_nic_1(& efx->mac_lock);
      #line 641 
      efx->loopback_mode = mode;
      #line 642 
      rc = __ef4_reconfigure_port(efx);
      #line 643 
      cif_mutex_unlock_mac_lock_of_ef4_nic_1(& efx->mac_lock);
      #line 644 
      if (rc != 0) {
        #line 645 
        if ((efx->msg_enable & 1U) != 0U) {
          #line 645 
          char *tmp_1;
          #line 645 
          if (efx->loopback_mode < (enum ef4_loopback_mode)ef4_loopback_mode_max) 
            #line 645 
            tmp_1 = ef4_loopback_mode_names[(unsigned int)efx->loopback_mode]; else 
                                                                    #line 645 
                                                                    tmp_1 = (char *)"(invalid)";
          #line 645 
          ;
          #line 645 
          netdev_err(efx->net_dev,(char *)"unable to move into %s loopback\n",tmp_1);
        }
        #line 648 
        goto out;
      }
      #line 651 
      rc = ef4_wait_for_link(efx);
      #line 652 
      if (rc != 0) {
        #line 653 
        if ((efx->msg_enable & 1U) != 0U) {
          #line 653 
          char *tmp_2;
          #line 653 
          if (efx->loopback_mode < (enum ef4_loopback_mode)ef4_loopback_mode_max) 
            #line 653 
            tmp_2 = ef4_loopback_mode_names[(unsigned int)efx->loopback_mode]; else 
                                                                    #line 653 
                                                                    tmp_2 = (char *)"(invalid)";
          #line 653 
          ;
          #line 653 
          netdev_err(efx->net_dev,(char *)"loopback %s never came up\n",tmp_2);
        }
        #line 656 
        goto out;
      }
      #line 660 
      if (ef4_channel_has_tx_queues(channel)) {
        #line 660 
        tx_queue = (struct ef4_tx_queue *)(& channel->tx_queue);
        #line 660 
        while (1) {
          #line 660 
          if ((struct ef4_tx_queue *)(& channel->tx_queue) + 4U > tx_queue) {
            #line 660 
            if (! ((int)ef4_tx_queue_used(tx_queue) != 0)) 
                                                           #line 660 
                                                           break;
          }
          else 
               #line 660 
               break;
          #line 661 
          state->offload_csum = (_Bool)((tx_queue->queue & 1U) != 0U);
          #line 663 
          rc = ef4_test_loopback(tx_queue,& tests->loopback[(unsigned int)mode]);
          #line 665 
          if (rc != 0) 
                       #line 666 
                       goto out;
          #line 660 
          tx_queue ++;
        }
      }
    }
    #line 634 
    __Cont: 
            #line 634 
    mode ++;
  }
  #line 670 
  out: 
       #line 670 
  ;
  #line 672 
  state->flush = (_Bool)1;
  #line 673 
  efx->loopback_selftest = (void *)0;
  #line 674 
  ldv_inline_asm();
  #line 675 
  kfree((void *)state);
  #line 677 
  if (rc == -1) 
                #line 678 
                rc = 0;
  #line 680 
  return rc;
}

#line 689  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/selftest.c"
int ef4_selftest(struct ef4_nic *efx, struct ef4_self_tests *tests, unsigned int flags)
{
  #line 694 
  int rc_reset;
  #line 694 
  int rc;
  #line 692 
  enum ef4_loopback_mode loopback_mode = efx->loopback_mode;
  #line 693 
  int phy_mode = (int)efx->phy_mode;
  #line 694 
  int rc_test = 0;
  #line 696 
  ef4_selftest_async_cancel(efx);
  #line 701 
  rc = ef4_test_phy_alive(efx,tests);
  #line 702 
  if (rc != 0 && rc_test == 0) 
                               #line 703 
                               rc_test = rc;
  #line 705 
  rc = ef4_test_nvram(efx,tests);
  #line 706 
  if (rc != 0 && rc_test == 0) 
                               #line 707 
                               rc_test = rc;
  #line 709 
  rc = ef4_test_interrupts(efx,tests);
  #line 710 
  if (rc != 0 && rc_test == 0) 
                               #line 711 
                               rc_test = rc;
  #line 713 
  rc = ef4_test_eventq_irq(efx,tests);
  #line 714 
  if (rc != 0 && rc_test == 0) 
                               #line 715 
                               rc_test = rc;
  #line 717 
  if (rc_test != 0) 
                    #line 718 
                    return rc_test;
  #line 720 
  if ((flags & 1U) == 0U) {
    #line 721 
    return ef4_test_phy(efx,tests,flags);
  }
  #line 729 
  ef4_device_detach_sync_0(efx);
  #line 731 
  if ((efx->type)->test_chip != (int (*)(struct ef4_nic *, struct ef4_self_tests *))0) {
    #line 732 
    rc_reset = (*((efx->type)->test_chip))(efx,tests);
    #line 733 
    if (rc_reset != 0) {
      #line 734 
      if ((efx->msg_enable & 8192U) != 0U) 
                                           #line 734 
                                           netdev_err(efx->net_dev,(char *)"Unable to recover from chip test\n");
      #line 736 
      ef4_schedule_reset(efx,(enum reset_type)RESET_TYPE_DISABLE);
      #line 737 
      return rc_reset;
    }
    #line 740 
    if ((tests->memory < 0 || tests->registers < 0) && rc_test == 0) 
      #line 741 
      rc_test = -5;
  }
  #line 746 
  cif_mutex_lock_mac_lock_of_ef4_nic_1(& efx->mac_lock);
  #line 747 
  efx->phy_mode = (enum ef4_phy_mode)((unsigned int)efx->phy_mode & 4294967293U);
  #line 748 
  efx->loopback_mode = LOOPBACK_NONE;
  #line 749 
  __ef4_reconfigure_port(efx);
  #line 750 
  cif_mutex_unlock_mac_lock_of_ef4_nic_1(& efx->mac_lock);
  #line 752 
  rc = ef4_test_phy(efx,tests,flags);
  #line 753 
  if (rc != 0 && rc_test == 0) 
                               #line 754 
                               rc_test = rc;
  #line 756 
  rc = ef4_test_loopbacks(efx,tests,(unsigned int)efx->loopback_modes);
  #line 757 
  if (rc != 0 && rc_test == 0) 
                               #line 758 
                               rc_test = rc;
  #line 761 
  cif_mutex_lock_mac_lock_of_ef4_nic_1(& efx->mac_lock);
  #line 762 
  efx->phy_mode = (enum ef4_phy_mode)phy_mode;
  #line 763 
  efx->loopback_mode = loopback_mode;
  #line 764 
  __ef4_reconfigure_port(efx);
  #line 765 
  cif_mutex_unlock_mac_lock_of_ef4_nic_1(& efx->mac_lock);
  #line 767 
  netif_device_attach(efx->net_dev);
  #line 769 
  return rc_test;
}

#line 772  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/selftest.c"
void ef4_selftest_async_start(struct ef4_nic *efx)
{
  #line 774 
  struct ef4_channel *channel;
  #line 776 
  channel = efx->channel[0];
  #line 776 
  while (channel != (struct ef4_channel *)0) {
    #line 777 
    ef4_nic_event_test_start(channel);
    #line 776 
    if ((unsigned int)(channel->channel + 1) < efx->n_channels) 
                                                                #line 776 
                                                                channel = efx->channel[channel->channel + 1]; else 
                                                                    #line 776 
                                                                    channel = (struct ef4_channel *)0;
  }
  #line 778 
  cif_schedule_delayed_work(& efx->selftest_work,250UL);
  #line 779 
  return;
}

#line 781  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/selftest.c"
void ef4_selftest_async_cancel(struct ef4_nic *efx)
{
  #line 783 
  cancel_delayed_work_sync(& efx->selftest_work);
  #line 784 
  return;
}

#line 786  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/selftest.c"
void ef4_selftest_async_work(struct work_struct *data)
{
  #line 788 
  void *__mptr;
  #line 790 
  struct ef4_channel *channel;
  #line 791 
  int cpu;
  #line 788 
  __mptr = (void *)data;
  #line 788 
  struct ef4_nic *efx = ((struct ef4_nic *)(__mptr + 18446744073709549104U));
  #line 793 
  channel = efx->channel[0];
  #line 793 
  while (channel != (struct ef4_channel *)0) {
    #line 794 
    cpu = ef4_nic_event_test_irq_cpu(channel);
    #line 795 
    if (cpu < 0) {
      #line 796 
      if ((efx->msg_enable & 32U) != 0U) 
                                         #line 796 
                                         netdev_err(efx->net_dev,(char *)"channel %d failed to trigger an interrupt\n",channel->channel);
    }
    else 
      #line 800 
      if ((efx->msg_enable & 32U) != 0U) {
        #line 800 
        bool branch;
        #line 800 
        struct _ddebug __UNIQUE_ID_ddebug553 = {.modname = (char *)"sfc_falcon", .function = (char *)"ef4_selftest_async_work", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/selftest.c", .format = (char *)"channel %d triggered interrupt on CPU %d\n", .lineno = (unsigned int)800U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 800 
        branch = arch_static_branch(& __UNIQUE_ID_ddebug553.key.dd_key_false.key,(_Bool)0);
        #line 800 
        if ((long)((long)((int)branch != 0)) != 0L) 
                                                    #line 800 
                                                    __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug553,efx->net_dev,(char *)"channel %d triggered interrupt on CPU %d\n",channel->channel,cpu);
      }
    #line 793 
    if ((unsigned int)(channel->channel + 1) < efx->n_channels) 
                                                                #line 793 
                                                                channel = efx->channel[channel->channel + 1]; else 
                                                                    #line 793 
                                                                    channel = (struct ef4_channel *)0;
  }
  #line 803 
  return;
}

#line 105  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/selftest.i.aux"
#line 105 
_Bool emg_schedule_delayed_work(struct delayed_work *arg0, unsigned long arg1);
#line 123  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/selftest.i.aux"
static void cif_set_bit_0(long nr, unsigned long *addr)
{
  #line 126 
  ldv_set_bit(nr,addr);
  #line 127 
  return;
}

#line 130  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/selftest.i.aux"
static void cif_clear_bit_0(long nr, unsigned long *addr)
{
  #line 133 
  ldv_clear_bit(nr,addr);
  #line 134 
  return;
}

#line 186  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/selftest.i.aux"
static void atomic_inc_1(atomic_t *v)
{
  #line 189 
  ldv_atomic_inc(v);
  #line 190 
  return;
}

#line 355  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/selftest.i.aux"
static void *kcalloc_1(size_t n, size_t size, gfp_t flags)
{
  #line 358 
  return ldv_kcalloc(n,size,flags);
}

#line 376  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/selftest.i.aux"
static void *kzalloc_0(size_t size, gfp_t flags)
{
  #line 379 
  return ldv_kzalloc(size,flags);
}

#line 557  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/selftest.i.aux"
static void cif_spin_lock__xmit_lock_of_netdev_queue_0(spinlock_t *lock)
{
  #line 560 
  ldv_spin_model_lock((char *)"_xmit_lock_of_netdev_queue");
  #line 562 
  spin_lock_0(lock);
  #line 563 
  return;
}

#line 597  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/selftest.i.aux"
static void cif_spin_unlock__xmit_lock_of_netdev_queue_0(spinlock_t *lock)
{
  #line 600 
  ldv_spin_model_unlock((char *)"_xmit_lock_of_netdev_queue");
  #line 602 
  spin_unlock_0(lock);
  #line 603 
  return;
}

#line 615  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/selftest.i.aux"
static void cif_spin_lock_tx_global_lock_of_net_device_0(spinlock_t *lock)
{
  #line 618 
  ldv_spin_model_lock((char *)"tx_global_lock_of_net_device");
  #line 620 
  spin_lock_0(lock);
  #line 621 
  return;
}

#line 624  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/selftest.i.aux"
static void cif_spin_unlock_tx_global_lock_of_net_device_0(spinlock_t *lock)
{
  #line 627 
  ldv_spin_model_unlock((char *)"tx_global_lock_of_net_device");
  #line 629 
  spin_unlock_0(lock);
  #line 630 
  return;
}

#line 817  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/selftest.i.aux"
static void cif_mutex_lock_mac_lock_of_ef4_nic_1(struct mutex *lock)
{
  #line 820 
  ldv_mutex_model_lock(lock,(char *)"mac_lock_of_ef4_nic");
  #line 821 
  return;
}

#line 824  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/selftest.i.aux"
static void cif_mutex_unlock_mac_lock_of_ef4_nic_1(struct mutex *lock)
{
  #line 827 
  ldv_mutex_model_unlock(lock,(char *)"mac_lock_of_ef4_nic");
  #line 828 
  return;
}

#line 831  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/selftest.i.aux"
static bool cif_schedule_delayed_work(struct delayed_work *dwork, unsigned long delay)
{
  #line 835 
  return emg_schedule_delayed_work(dwork,delay);
}

#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/delay.h"
#line 11 
void __const_udelay(unsigned long);
#line 668  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 376  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/txc43128_phy.i.aux"
static void *kzalloc_1(size_t size, gfp_t flags);
#line 150  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mdio.h"
#line 150 
void mdio45_ethtool_ksettings_get_npage(struct mdio_if_info *, struct ethtool_link_ksettings *, u32, u32);
#line 181  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mdio.h"
__inline static void mdio45_ethtool_ksettings_get(struct mdio_if_info *mdio, struct ethtool_link_ksettings *cmd)
{
  #line 184 
  mdio45_ethtool_ksettings_get_npage(mdio,cmd,0U,0U);
  #line 185 
  return;
}

#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/phy.h"
#line 546  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/txc43128_phy.c"
struct ef4_phy_operations falcon_txc_phy_ops;
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/phy.h"
#line 177  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/txc43128_phy.c"
void falcon_txc_set_gpio_dir(struct ef4_nic *efx, int pin, int dir);
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/phy.h"
#line 171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/txc43128_phy.c"
void falcon_txc_set_gpio_val(struct ef4_nic *efx, int pin, int on);
#line 294  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/nic.h"
__inline static struct falcon_board *falcon_board(struct ef4_nic *efx)
{
  #line 296 
  struct falcon_nic_data *data = (struct falcon_nic_data *)efx->nic_data;
  #line 297 
  return & data->board;
}

#line 479 
#line 479 
int falcon_reset_xaui(struct ef4_nic *efx);
#line 168  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/txc43128_phy.c"
#line 431 
static void txc_reset_logic(struct ef4_nic *efx);
#line 171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/txc43128_phy.c"
void falcon_txc_set_gpio_val(struct ef4_nic *efx, int pin, int on)
{
  #line 173 
  ef4_mdio_set_flag(efx,4,49990,1 << pin,(_Bool)(on != 0));
  #line 174 
  return;
}

#line 177  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/txc43128_phy.c"
void falcon_txc_set_gpio_dir(struct ef4_nic *efx, int pin, int dir)
{
  #line 179 
  ef4_mdio_set_flag(efx,4,49992,1 << pin,(_Bool)(dir != 0));
  #line 180 
  return;
}

#line 184  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/txc43128_phy.c"
static int txc_reset_phy(struct ef4_nic *efx)
{
  #line 186 
  int rc = ef4_mdio_reset_mmd(efx,1,50,10);
  #line 189 
  if (rc < 0) 
              #line 190 
              goto fail;
  #line 193 
  rc = ef4_mdio_check_mmds(efx,26U);
  #line 194 
  if (rc < 0) 
              #line 195 
              goto fail;
  #line 197 
  return 0;
  #line 199 
  fail: 
        #line 199 
  ;
  #line 200 
  if ((efx->msg_enable & 8192U) != 0U) 
                                       #line 200 
                                       netdev_err(efx->net_dev,(char *)"TXC43128");
  #line 201 
  return rc;
}

#line 205  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/txc43128_phy.c"
static int txc_bist_one(struct ef4_nic *efx, int mmd, int test)
{
  #line 207 
  int ctrl;
  #line 207 
  int bctl;
  #line 208 
  int lane;
  #line 209 
  int rc = 0;
  #line 212 
  ctrl = ef4_mdio_read(efx,3,49999);
  #line 213 
  ctrl |= 1024;
  #line 214 
  ef4_mdio_write(efx,3,49999,ctrl);
  #line 218 
  bctl = test << 10;
  #line 219 
  ef4_mdio_write(efx,mmd,49792,bctl);
  #line 222 
  bctl |= 8192;
  #line 223 
  ef4_mdio_write(efx,mmd,49792,bctl);
  #line 226 
  ef4_mdio_write(efx,mmd,49792,bctl | 32768);
  #line 230 
  __const_udelay(214750UL);
  #line 233 
  bctl |= 16384;
  #line 234 
  ef4_mdio_write(efx,mmd,49792,bctl);
  #line 237 
  while ((bctl & 16384) != 0) 
                              #line 238 
                              bctl = ef4_mdio_read(efx,mmd,49792);
  #line 242 
  lane = 0;
  #line 242 
  while (lane <= 3) {
    {
      #line 243 
      int count = ef4_mdio_read(efx,mmd,lane + 49798);
      #line 244 
      if (count != 0) {
        #line 245 
        if ((efx->msg_enable & 8192U) != 0U) 
                                             #line 245 
                                             netdev_err(efx->net_dev,(char *)"TXC43128",lane,count);
        #line 247 
        rc = -5;
      }
      #line 249 
      count = ef4_mdio_read(efx,mmd,lane + 49794);
      #line 250 
      if (count == 0) {
        #line 251 
        if ((efx->msg_enable & 8192U) != 0U) 
                                             #line 251 
                                             netdev_err(efx->net_dev,(char *)"TXC43128",lane);
        #line 253 
        rc = -5;
      }
    }
    #line 242 
    lane ++;
  }
  #line 257 
  if (rc == 0) 
    #line 258 
    if ((efx->msg_enable & 8192U) != 0U) 
                                         #line 258 
                                         netdev_info(efx->net_dev,(char *)"TXC43128");
  #line 261 
  ef4_mdio_write(efx,mmd,49792,0);
  #line 264 
  ctrl &= -1025;
  #line 265 
  ef4_mdio_write(efx,3,49999,ctrl);
  #line 267 
  return rc;
}

#line 270  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/txc43128_phy.c"
static int txc_bist(struct ef4_nic *efx)
{
  #line 272 
  return txc_bist_one(efx,3,0);
}

#line 277  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/txc43128_phy.c"
static void txc_apply_defaults(struct ef4_nic *efx)
{
  #line 279 
  int mctrl;
  #line 287 
  ef4_mdio_write(efx,4,49219,0);
  #line 288 
  ef4_mdio_write(efx,4,49220,0);
  #line 291 
  ef4_mdio_write(efx,4,49217,51400);
  #line 293 
  ef4_mdio_write(efx,4,49218,51400);
  #line 299 
  ef4_mdio_write(efx,1,49219,4112);
  #line 301 
  ef4_mdio_write(efx,1,49220,4112);
  #line 303 
  ef4_mdio_write(efx,1,49217,24672);
  #line 305 
  ef4_mdio_write(efx,1,49218,24672);
  #line 309 
  mctrl = ef4_mdio_read(efx,4,49984);
  #line 312 
  mctrl &= -24577;
  #line 313 
  ef4_mdio_write(efx,4,49984,mctrl);
  #line 316 
  txc_reset_logic(efx);
  #line 318 
  (*((falcon_board(efx)->type)->init_phy))(efx);
  #line 319 
  return;
}

#line 321  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/txc43128_phy.c"
static int txc43128_phy_probe(struct ef4_nic *efx)
{
  #line 323 
  struct txc43128_data *phy_data;
  #line 326 
  phy_data = (struct txc43128_data *)kzalloc_1(16UL,3264U);
  #line 327 
  if (phy_data == (struct txc43128_data *)0) 
                                             #line 328 
                                             return -12;
  #line 329 
  efx->phy_data = (void *)phy_data;
  #line 330 
  phy_data->phy_mode = efx->phy_mode;
  #line 332 
  efx->mdio.mmds = 26U;
  #line 333 
  efx->mdio.mode_support = 6U;
  #line 335 
  efx->loopback_modes = 67305528ULL;
  #line 337 
  return 0;
}

#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/txc43128_phy.c"
static int txc43128_phy_init(struct ef4_nic *efx)
{
  #line 343 
  int rc;
  #line 345 
  rc = txc_reset_phy(efx);
  #line 346 
  if (rc < 0) 
              #line 347 
              return rc;
  #line 349 
  rc = txc_bist(efx);
  #line 350 
  if (rc < 0) 
              #line 351 
              return rc;
  #line 353 
  txc_apply_defaults(efx);
  #line 355 
  return 0;
}

#line 359  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/txc43128_phy.c"
static void txc_glrgs_lane_power(struct ef4_nic *efx, int mmd)
{
  #line 361 
  int pd = 96;
  #line 362 
  int ctl = ef4_mdio_read(efx,mmd,49156);
  #line 364 
  if (((unsigned int)efx->phy_mode & 2U) == 0U) 
                                                #line 365 
                                                ctl = ~ pd & ctl; else 
                                                                    #line 367 
                                                                    ctl |= pd;
  #line 369 
  ef4_mdio_write(efx,mmd,49156,ctl);
  #line 370 
  return;
}

#line 373  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/txc43128_phy.c"
static void txc_analog_lane_power(struct ef4_nic *efx, int mmd)
{
  #line 375 
  int txpd = 61440;
  #line 377 
  int rxpd = 61440;
  #line 379 
  int txctl = ef4_mdio_read(efx,mmd,49216);
  #line 380 
  int rxctl = ef4_mdio_read(efx,mmd,49221);
  #line 382 
  if (((unsigned int)efx->phy_mode & 2U) == 0U) {
    #line 383 
    txctl = ~ txpd & txctl;
    #line 384 
    rxctl = ~ rxpd & rxctl;
  }
  else {
    #line 386 
    txctl |= txpd;
    #line 387 
    rxctl |= rxpd;
  }
  #line 390 
  ef4_mdio_write(efx,mmd,49216,txctl);
  #line 391 
  ef4_mdio_write(efx,mmd,49221,rxctl);
  #line 392 
  return;
}

#line 394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/txc43128_phy.c"
static void txc_set_power(struct ef4_nic *efx)
{
  #line 397 
  ef4_mdio_set_mmds_lpower(efx,((unsigned int)efx->phy_mode & 2U) != 0U,26U);
  #line 403 
  txc_glrgs_lane_power(efx,3);
  #line 404 
  txc_glrgs_lane_power(efx,4);
  #line 407 
  txc_analog_lane_power(efx,1);
  #line 408 
  txc_analog_lane_power(efx,4);
  #line 409 
  return;
}

#line 411  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/txc43128_phy.c"
static void txc_reset_logic_mmd(struct ef4_nic *efx, int mmd)
{
  #line 413 
  int val = ef4_mdio_read(efx,mmd,49156);
  #line 414 
  int tries = 50;
  #line 416 
  val |= 16384;
  #line 417 
  ef4_mdio_write(efx,mmd,49156,val);
  #line 418 
  while (1) {
    #line 418 
    tries --;
    #line 418 
    if (! (tries != 0)) 
                        #line 418 
                        break;
    #line 419 
    val = ef4_mdio_read(efx,mmd,49156);
    #line 420 
    if ((val & 16384) == 0) 
                            #line 421 
                            break;
    #line 422 
    __const_udelay(4295UL);
  }
  #line 424 
  if (tries == 0) 
    #line 425 
    if ((efx->msg_enable & 8192U) != 0U) 
                                         #line 425 
                                         netdev_info(efx->net_dev,(char *)"TXC43128");
  #line 426 
  return;
}

#line 431  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/txc43128_phy.c"
static void txc_reset_logic(struct ef4_nic *efx)
{
  #line 436 
  txc_reset_logic_mmd(efx,3);
  #line 437 
  return;
}

#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/txc43128_phy.c"
static bool txc43128_phy_read_link(struct ef4_nic *efx)
{
  #line 441 
  return ef4_mdio_links_ok(efx,26U);
}

#line 444  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/txc43128_phy.c"
static int txc43128_phy_reconfigure(struct ef4_nic *efx)
{
  #line 446 
  struct txc43128_data *phy_data = (struct txc43128_data *)efx->phy_data;
  #line 447 
  enum ef4_phy_mode mode_change = (unsigned int)efx->phy_mode ^ (unsigned int)phy_data->phy_mode;
  #line 448 
  bool loop_change = (_Bool)((((1 << (unsigned int)phy_data->loopback_mode) ^ (1 << (unsigned int)efx->loopback_mode)) & 67305472) != 0);
  #line 450 
  if ((((unsigned int)efx->phy_mode & (unsigned int)mode_change) & 1U) != 0U) {
    #line 451 
    txc_reset_phy(efx);
    #line 452 
    txc_apply_defaults(efx);
    #line 453 
    falcon_reset_xaui(efx);
    #line 454 
    mode_change = (enum ef4_phy_mode)((unsigned int)mode_change & 4294967294U);
  }
  #line 457 
  ef4_mdio_transmit_disable(efx);
  #line 458 
  ef4_mdio_phy_reconfigure(efx);
  #line 459 
  if (((unsigned int)mode_change & 2U) != 0U) 
                                              #line 460 
                                              txc_set_power(efx);
  #line 466 
  if ((int)loop_change != 0 || mode_change != (unsigned int)PHY_MODE_NORMAL) 
    #line 467 
    txc_reset_logic(efx);
  #line 469 
  phy_data->phy_mode = efx->phy_mode;
  #line 470 
  phy_data->loopback_mode = efx->loopback_mode;
  #line 472 
  return 0;
}

#line 475  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/txc43128_phy.c"
static void txc43128_phy_fini(struct ef4_nic *efx)
{
  #line 478 
  ef4_mdio_write(efx,1,36866,0);
  #line 479 
  return;
}

#line 481  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/txc43128_phy.c"
static void txc43128_phy_remove(struct ef4_nic *efx)
{
  #line 483 
  kfree(efx->phy_data);
  #line 484 
  efx->phy_data = (void *)0;
  #line 485 
  return;
}

#line 489  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/txc43128_phy.c"
static bool txc43128_phy_poll(struct ef4_nic *efx)
{
  #line 491 
  struct txc43128_data *data = (struct txc43128_data *)efx->phy_data;
  #line 492 
  bool was_up = efx->link_state.up;
  #line 494 
  efx->link_state.up = txc43128_phy_read_link(efx);
  #line 495 
  efx->link_state.speed = 10000U;
  #line 496 
  efx->link_state.fd = (_Bool)1;
  #line 497 
  efx->link_state.fc = efx->wanted_fc;
  #line 499 
  if ((int)efx->link_state.up != 0 || efx->loopback_mode != (unsigned int)LOOPBACK_NONE) 
    #line 500 
    data->bug10934_timer = jiffies;
  else {
    {
      #line 502 
      unsigned long __dummy;
      #line 502 
      unsigned long __dummy2;
      }
    #line 502 
    if (1 != 0) {
      {
        #line 502 
        unsigned long __dummy_0;
        #line 502 
        unsigned long __dummy2_0;
        }
      #line 502 
      if (1 != 0) 
        #line 502 
        if ((long)((jiffies - data->bug10934_timer) + 18446744073709550366UL) >= 0L) {
          #line 504 
          data->bug10934_timer = jiffies;
          #line 505 
          txc_reset_logic(efx);
        }
    }
  }
  #line 509 
  return (_Bool)((int)efx->link_state.up != (int)was_up);
}

#line 512  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/txc43128_phy.c"
static char *txc43128_test_names[1U] = {(char *)"bist"};
#line 516  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/txc43128_phy.c"
static char *txc43128_test_name(struct ef4_nic *efx, unsigned int index)
{
  #line 518 
  if (index == 0U) 
                   #line 519 
                   return txc43128_test_names[index];
  #line 520 
  return (char *)0;
}

#line 523  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/txc43128_phy.c"
static int txc43128_run_tests(struct ef4_nic *efx, int *results, unsigned int flags)
{
  #line 525 
  int rc;
  #line 527 
  if ((flags & 1U) == 0U) 
                          #line 528 
                          return 0;
  #line 530 
  rc = txc_reset_phy(efx);
  #line 531 
  if (rc < 0) 
              #line 532 
              return rc;
  #line 534 
  rc = txc_bist(efx);
  #line 535 
  txc_apply_defaults(efx);
  #line 536 
  if (rc != 0) 
               #line 536 
               *results = -1; else 
                                   #line 536 
                                   *results = 1;
  #line 537 
  return rc;
}

#line 540  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/txc43128_phy.c"
static void txc43128_get_link_ksettings(struct ef4_nic *efx, struct ethtool_link_ksettings *cmd)
{
  #line 543 
  mdio45_ethtool_ksettings_get(& efx->mdio,cmd);
  #line 544 
  return;
}

#line 546  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/txc43128_phy.c"
struct ef4_phy_operations falcon_txc_phy_ops = {.probe = & txc43128_phy_probe, .init = & txc43128_phy_init, .fini = & txc43128_phy_fini, .remove = & txc43128_phy_remove, .reconfigure = & txc43128_phy_reconfigure, .poll = & txc43128_phy_poll, .get_link_ksettings = & txc43128_get_link_ksettings, .set_link_ksettings = & ef4_mdio_set_link_ksettings, .test_alive = & ef4_mdio_test_alive, .test_name = & txc43128_test_name, .run_tests = & txc43128_run_tests};
#line 376  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/txc43128_phy.i.aux"
static void *kzalloc_1(size_t size, gfp_t flags)
{
  #line 379 
  return ldv_kzalloc(size,flags);
}

#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_add_0(struct list_head *new, struct list_head *prev, struct list_head *next)
{
  #line 60 
  if (! __list_add_valid(new,prev,next)) 
                                         #line 61 
                                         return;
  #line 63 
  next->prev = new;
  #line 64 
  new->next = next;
  #line 65 
  new->prev = prev;
  {
    #line 67 
    union __anonunion___u_5131 __u = {.__val = new};
    #line 66 
    __write_once_size((void *)(& prev->next),(void *)(& __u.__c),8);
    #line 66 
    struct list_head *tmp_2 = __u.__val;
  }
  #line 68 
  return;
}

#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_add_tail_0(struct list_head *new, struct list_head *head)
{
  #line 93 
  __list_add_0(new,head->prev,head);
  #line 94 
  return;
}

#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_del_0(struct list_head *prev, struct list_head *next)
{
  #line 97 
  next->prev = prev;
  {
    #line 107 
    union __anonunion___u_5133 __u = {.__val = next};
    #line 106 
    __write_once_size((void *)(& prev->next),(void *)(& __u.__c),8);
    #line 106 
    struct list_head *tmp = __u.__val;
  }
  #line 108 
  return;
}

#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_del_entry_0(struct list_head *entry)
{
  #line 131 
  if (! __list_del_entry_valid(entry)) 
                                       #line 132 
                                       return;
  #line 134 
  __list_del_0(entry->prev,entry->next);
  #line 135 
  return;
}

#line 137  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_del_0(struct list_head *entry)
{
  #line 139 
  __list_del_entry_0(entry);
  #line 140 
  entry->next = (struct list_head *)(-2401263026318606080);
  #line 141 
  entry->prev = (struct list_head *)(-2401263026318606046);
  #line 142 
  return;
}

#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static int list_empty(struct list_head *head)
{
  #line 269 
  union __anonunion___u_5135 __u;
  #line 268 
  __read_once_size((void *)(& head->next),(void *)(& __u.__c),8);
  #line 268 
  ;
  #line 268 
  return (__u.__val) == head;
}

#line 559  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mtd/mtd.h"
#line 559 
int mtd_device_parse_register(struct mtd_info *, char **, struct mtd_part_parser_data *, struct mtd_partition *, int);
#line 566 
#line 566 
int mtd_device_unregister(struct mtd_info *);
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/delay.h"
__inline static void ssleep(unsigned int seconds)
{
  #line 65 
  msleep(seconds * 1000U);
  #line 66 
  return;
}

#line 219  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.h"
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/mtd.c"
int ef4_mtd_add(struct ef4_nic *efx, struct ef4_mtd_partition *parts, size_t n_parts, size_t sizeof_part);
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/mtd.c"
static int ef4_mtd_erase(struct mtd_info *mtd, struct erase_info *erase)
{
  #line 23 
  struct ef4_nic *efx = (struct ef4_nic *)mtd->priv;
  #line 25 
  return (*((efx->type)->mtd_erase))(mtd,(long long)erase->addr,
                                  (unsigned long)erase->len);
}

#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/mtd.c"
static void ef4_mtd_sync(struct mtd_info *mtd)
{
  #line 30 
  void *__mptr;
  #line 32 
  int rc;
  #line 30 
  __mptr = (void *)mtd;
  #line 30 
  struct ef4_mtd_partition *part = ((struct ef4_mtd_partition *)(__mptr + 18446744073709551600U));
  #line 31 
  struct ef4_nic *efx = (struct ef4_nic *)mtd->priv;
  #line 34 
  rc = (*((efx->type)->mtd_sync))(mtd);
  #line 35 
  if (rc != 0) 
               #line 36 
               printk((char *)"\001",(char *)(& part->name),part->dev_type_name,rc);
  #line 37 
  return;
}

#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/mtd.c"
static void ef4_mtd_remove_partition(struct ef4_mtd_partition *part)
{
  #line 42 
  int rc;
  #line 44 
  while (1) {
    #line 45 
    rc = mtd_device_unregister(& part->mtd);
    #line 46 
    if (rc != -16) 
                   #line 47 
                   break;
    #line 48 
    ssleep(1U);
  }
  {
    #line 50 
    int __ret_warn_on = rc != 0;
    #line 50 
    if ((long)(__ret_warn_on != 0) != 0L) {
      #line 51 
      ldv_inline_asm();
      #line 52 
      ldv_inline_asm();
    }
    #line 50 
    long tmp = (long)(__ret_warn_on != 0);
  }
  #line 51 
  list_del_0(& part->node);
  #line 52 
  return;
}

#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/mtd.c"
int ef4_mtd_add(struct ef4_nic *efx, struct ef4_mtd_partition *parts, size_t n_parts, size_t sizeof_part)
{
  #line 57 
  struct ef4_mtd_partition *part;
  #line 58 
  size_t i;
  #line 60 
  i = 0UL;
  #line 60 
  while (i < n_parts) {
    {
      #line 61 
      part = (struct ef4_mtd_partition *)((char *)parts + i * sizeof_part);
      #line 64 
      part->mtd.writesize = 1U;
      #line 66 
      part->mtd.owner = & __this_module;
      #line 67 
      part->mtd.priv = (void *)efx;
      #line 68 
      part->mtd.name = (char *)(& part->name);
      #line 69 
      part->mtd._erase = & ef4_mtd_erase;
      #line 70 
      part->mtd._read = (efx->type)->mtd_read;
      #line 71 
      part->mtd._write = (efx->type)->mtd_write;
      #line 72 
      part->mtd._sync = & ef4_mtd_sync;
      #line 74 
      (*((efx->type)->mtd_rename))(part);
      #line 76 
      if (mtd_device_parse_register(& part->mtd,(char **)0,
                                (struct mtd_part_parser_data *)0,
                                (struct mtd_partition *)0,0) != 0) 
        #line 77 
        goto fail;
      #line 80 
      list_add_tail_0(& part->node,& efx->mtd_list);
    }
    #line 60 
    i ++;
  }
  #line 83 
  return 0;
  #line 85 
  fail: 
        #line 85 
  ;
  #line 86 
  while (1) {
    #line 86 
    size_t tmp_0;
    #line 86 
    tmp_0 = i;
    #line 86 
    i --;
    #line 86 
    ;
    #line 86 
    if (! (tmp_0 != 0UL)) 
                          #line 86 
                          break;
    #line 87 
    part = (struct ef4_mtd_partition *)((char *)parts + i * sizeof_part);
    #line 89 
    ef4_mtd_remove_partition(part);
  }
  #line 92 
  return -12;
}

#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/mtd.c"
void ef4_mtd_remove(struct ef4_nic *efx)
{
  #line 107 
  void *__mptr_0;
  #line 107 
  void *__mptr_1;
  #line 104 
  void *__mptr;
  #line 97 
  struct ef4_mtd_partition *parts;
  #line 97 
  struct ef4_mtd_partition *part;
  #line 97 
  struct ef4_mtd_partition *next;
  {
    #line 99 
    int __ret_warn_on = ef4_dev_registered(efx) != 0;
    #line 99 
    if ((long)(__ret_warn_on != 0) != 0L) {
      #line 100 
      ldv_inline_asm();
      #line 101 
      ldv_inline_asm();
    }
    #line 99 
    long tmp_2 = (long)(__ret_warn_on != 0);
  }
  #line 101 
  if (list_empty(& efx->mtd_list) != 0) 
                                        #line 102 
                                        return;
  #line 104 
  __mptr = (void *)efx->mtd_list.next;
  #line 104 
  parts = ((struct ef4_mtd_partition *)__mptr);
  #line 107 
  __mptr_0 = (void *)efx->mtd_list.next;
  #line 107 
  part = ((struct ef4_mtd_partition *)__mptr_0);
  #line 107 
  __mptr_1 = (void *)part->node.next;
  #line 108 
  next = ((struct ef4_mtd_partition *)__mptr_1);
  #line 107 
  while (& part->node != & efx->mtd_list) {
    #line 107 
    void *__mptr_2;
    #line 108 
    ef4_mtd_remove_partition(part);
    #line 107 
    part = next;
    #line 107 
    __mptr_2 = (void *)next->node.next;
    #line 107 
    next = ((struct ef4_mtd_partition *)__mptr_2);
  }
  #line 110 
  kfree((void *)parts);
  #line 111 
  return;
}

#line 113  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/mtd.c"
void ef4_mtd_rename(struct ef4_nic *efx)
{
  #line 119 
  void *__mptr;
  #line 115 
  struct ef4_mtd_partition *part;
  {
    #line 117 
    bool __warned;
    #line 117 
    int __ret_warn_once = rtnl_is_locked() == 0;
    #line 117 
    if ((long)(__ret_warn_once != 0) != 0L && (long)(! __warned) != 0L) {
      #line 117 
      __warned = (_Bool)1;
      {
        #line 117 
        int __ret_warn_on = 1;
        #line 117 
        if ((long)(__ret_warn_on != 0) != 0L) {
          #line 117 
          __warn_printk((char *)"RTNL: assertion failed at %s (%d)\n",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/mtd.c",117);
          #line 118 
          ldv_inline_asm();
          #line 119 
          ldv_inline_asm();
        }
        #line 117 
        long tmp_2 = (long)(__ret_warn_on != 0);
      }
    }
    #line 117 
    long tmp_4 = (long)(__ret_warn_once != 0);
  }
  #line 119 
  __mptr = (void *)efx->mtd_list.next;
  #line 119 
  part = ((struct ef4_mtd_partition *)__mptr);
  #line 119 
  while (& part->node != & efx->mtd_list) {
    #line 119 
    void *__mptr_0;
    #line 120 
    (*((efx->type)->mtd_rename))(part);
    #line 119 
    __mptr_0 = (void *)part->node.next;
    #line 119 
    part = ((struct ef4_mtd_partition *)__mptr_0);
  }
  #line 121 
  return;
}

#line 668  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 376  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/qt202x_phy.i.aux"
static void *kzalloc_2(size_t size, gfp_t flags);
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/mdio_10g.h"
__inline static unsigned int ef4_mdio_id_rev(u32 id)
{
  #line 18 
  return id & 15U;
}

#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/mdio_10g.h"
__inline static unsigned int ef4_mdio_id_model(u32 id)
{
  #line 19 
  return (id >> 4) & 63U;
}

#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/mdio_10g.h"
__inline static u32 ef4_mdio_read_id(struct ef4_nic *efx, int mmd)
{
  #line 35 
  u16 id_low = (unsigned short)ef4_mdio_read(efx,mmd,3);
  #line 36 
  u16 id_hi = (unsigned short)ef4_mdio_read(efx,mmd,2);
  #line 37 
  return (unsigned int)(((int)id_hi << 16) | (int)id_low);
}

#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/phy.h"
#line 481  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/qt202x_phy.c"
struct ef4_phy_operations falcon_qt202x_phy_ops;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/phy.h"
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/qt202x_phy.c"
void falcon_qt202x_set_led(struct ef4_nic *p, int led, int mode);
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/qt202x_phy.c"
void falcon_qt202x_set_led(struct ef4_nic *p, int led, int mode)
{
  #line 52 
  int addr = led + 53254;
  #line 53 
  ef4_mdio_write(p,1,addr,mode);
  #line 54 
  return;
}

#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/qt202x_phy.c"
static int qt2025c_wait_heartbeat(struct ef4_nic *efx)
{
  #line 76 
  int reg;
  #line 75 
  unsigned long timeout = jiffies + 1250UL;
  #line 76 
  int old_counter = 0;
  #line 79 
  while (1) {
    #line 80 
    int counter;
    #line 81 
    reg = ef4_mdio_read(efx,3,55278);
    #line 82 
    if (reg < 0) 
                 #line 83 
                 return reg;
    #line 84 
    counter = reg & 255;
    #line 86 
    if (old_counter == 0) 
                          #line 87 
                          old_counter = counter;
    else 
      #line 88 
      if (counter != old_counter) 
                                  #line 89 
                                  break;
    {
      #line 90 
      unsigned long __dummy;
      #line 90 
      unsigned long __dummy2;
      }
    #line 90 
    if (1 != 0) {
      {
        #line 90 
        unsigned long __dummy_0;
        #line 90 
        unsigned long __dummy2_0;
        }
      #line 90 
      if (1 != 0) 
        #line 90 
        if ((long)(timeout - jiffies) < 0L) {
          #line 93 
          if ((efx->msg_enable & 8192U) != 0U) 
                                               #line 93 
                                               netdev_err(efx->net_dev,(char *)"If an SFP+ direct attach cable is");
          #line 97 
          return -110;
        }
    }
    #line 99 
    msleep(100U);
  }
  #line 102 
  return 0;
}

#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/qt202x_phy.c"
static int qt2025c_wait_fw_status_good(struct ef4_nic *efx)
{
  #line 108 
  int reg;
  #line 107 
  unsigned long timeout = jiffies + 625UL;
  #line 111 
  while (1) {
    #line 112 
    reg = ef4_mdio_read(efx,3,55293);
    #line 113 
    if (reg < 0) 
                 #line 114 
                 return reg;
    #line 115 
    if ((reg & 224) != 0) 
                          #line 118 
                          break;
    {
      #line 119 
      unsigned long __dummy;
      #line 119 
      unsigned long __dummy2;
      }
    #line 119 
    if (1 != 0) {
      {
        #line 119 
        unsigned long __dummy_0;
        #line 119 
        unsigned long __dummy2_0;
        }
      #line 119 
      if (1 != 0) 
        #line 119 
        if ((long)(timeout - jiffies) < 0L) 
                                            #line 120 
                                            return -110;
    }
    #line 121 
    msleep(100U);
  }
  #line 124 
  return 0;
}

#line 127  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/qt202x_phy.c"
static void qt2025c_restart_firmware(struct ef4_nic *efx)
{
  #line 130 
  ef4_mdio_write(efx,3,59476,192);
  #line 131 
  ef4_mdio_write(efx,3,59476,64);
  #line 132 
  msleep(50U);
  #line 133 
  return;
}

#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/qt202x_phy.c"
static int qt2025c_wait_reset(struct ef4_nic *efx)
{
  #line 137 
  int rc;
  #line 139 
  rc = qt2025c_wait_heartbeat(efx);
  #line 140 
  if (rc != 0) 
               #line 141 
               return rc;
  #line 143 
  rc = qt2025c_wait_fw_status_good(efx);
  #line 144 
  if (rc == -110) {
    #line 148 
    if ((efx->msg_enable & 8192U) != 0U) {
      #line 148 
      bool branch;
      #line 148 
      struct _ddebug __UNIQUE_ID_ddebug542 = {.modname = (char *)"sfc_falcon", .function = (char *)"qt2025c_wait_reset", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/qt202x_phy.c", .format = (char *)"bashing QT2025C microcontroller\n", .lineno = (unsigned int)148U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 148 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug542.key.dd_key_false.key,(_Bool)0);
      #line 148 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 148 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug542,efx->net_dev,(char *)"bashing QT2025C microcontroller\n");
    }
    #line 150 
    qt2025c_restart_firmware(efx);
    #line 151 
    rc = qt2025c_wait_heartbeat(efx);
    #line 152 
    if (rc != 0) 
                 #line 153 
                 return rc;
    #line 154 
    rc = qt2025c_wait_fw_status_good(efx);
  }
  #line 157 
  return rc;
}

#line 160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/qt202x_phy.c"
static void qt2025c_firmware_id(struct ef4_nic *efx)
{
  #line 163 
  u8 firmware_id[9U];
  #line 164 
  size_t i;
  #line 162 
  struct qt202x_phy_data *phy_data = (struct qt202x_phy_data *)efx->phy_data;
  #line 166 
  i = 0UL;
  #line 166 
  while (i <= 8UL) {
    #line 167 
    firmware_id[i] = (unsigned char)ef4_mdio_read(efx,3,(int)(i + (size_t)55280U));
    #line 166 
    i ++;
  }
  #line 169 
  if ((efx->msg_enable & 2U) != 0U) 
                                    #line 169 
                                    netdev_info(efx->net_dev,(char *)"QT2025C firmware %xr%d v%d.%d.%d.%d [20%02d-%02d-%02d]\n",((int)firmware_id[0] << 8) | (int)firmware_id[1],(int)firmware_id[2],(int)firmware_id[3] >> 4,(int)firmware_id[3] & 15,(int)firmware_id[4],(int)firmware_id[5],(int)firmware_id[6],(int)firmware_id[7],(int)firmware_id[8]);
  #line 175 
  phy_data->firmware_ver = (unsigned int)((((((int)firmware_id[3] << 20) & 251658240) | (((int)firmware_id[3] << 16) & 983040)) | ((int)firmware_id[4] << 8)) | (int)firmware_id[5]);
  #line 178 
  return;
}

#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/qt202x_phy.c"
static void qt2025c_bug17190_workaround(struct ef4_nic *efx)
{
  #line 182 
  struct qt202x_phy_data *phy_data = (struct qt202x_phy_data *)efx->phy_data;
  #line 190 
  if ((int)efx->link_state.up != 0) 
                                    #line 190 
                                    goto _LOR;
  else {
    #line 191 
    if (! ef4_mdio_links_ok(efx,18U)) {
      #line 190 
      _LOR: {
              #line 192 
              phy_data->bug17190_in_bad_state = (_Bool)0;
              #line 193 
              return;
            }
    }
  }
  #line 196 
  if (! phy_data->bug17190_in_bad_state) {
    #line 197 
    phy_data->bug17190_in_bad_state = (_Bool)1;
    #line 198 
    phy_data->bug17190_timer = jiffies + 500UL;
    #line 199 
    return;
  }
  {
    #line 202 
    unsigned long __dummy;
    #line 202 
    unsigned long __dummy2;
    }
  #line 202 
  if (1 != 0) {
    {
      #line 202 
      unsigned long __dummy_0;
      #line 202 
      unsigned long __dummy2_0;
      }
    #line 202 
    if (1 != 0) 
      #line 202 
      if ((long)(jiffies - phy_data->bug17190_timer) >= 0L) {
        #line 203 
        if ((efx->msg_enable & 8192U) != 0U) {
          #line 203 
          bool branch;
          #line 203 
          struct _ddebug __UNIQUE_ID_ddebug543 = {.modname = (char *)"sfc_falcon", .function = (char *)"qt2025c_bug17190_workaround", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/qt202x_phy.c", .format = (char *)"bashing QT2025C PMA/PMD\n", .lineno = (unsigned int)203U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
          #line 203 
          branch = arch_static_branch(& __UNIQUE_ID_ddebug543.key.dd_key_false.key,(_Bool)0);
          #line 203 
          if ((long)((long)((int)branch != 0)) != 0L) 
                                                      #line 203 
                                                      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug543,efx->net_dev,(char *)"bashing QT2025C PMA/PMD\n");
        }
        #line 204 
        ef4_mdio_set_flag(efx,1,0,1,(_Bool)1);
        #line 206 
        msleep(100U);
        #line 207 
        ef4_mdio_set_flag(efx,1,0,1,(_Bool)0);
        #line 209 
        phy_data->bug17190_timer = jiffies + 500UL;
      }
  }
  #line 211 
  return;
}

#line 213  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/qt202x_phy.c"
static int qt2025c_select_phy_mode(struct ef4_nic *efx)
{
  #line 217 
  int reg;
  #line 217 
  int rc;
  #line 217 
  int i;
  #line 218 
  uint16_t phy_op_mode;
  #line 215 
  struct qt202x_phy_data *phy_data = (struct qt202x_phy_data *)efx->phy_data;
  #line 216 
  struct falcon_board *board = falcon_board(efx);
  #line 223 
  if (phy_data->firmware_ver <= 33554687U) 
                                           #line 224 
                                           return 0;
  #line 230 
  if (efx->loopback_mode == (unsigned int)LOOPBACK_NONE) 
                                                         #line 230 
                                                         phy_op_mode = (unsigned short)56U; else 
                                                                    #line 230 
                                                                    phy_op_mode = (unsigned short)32U;
  #line 233 
  reg = ef4_mdio_read(efx,1,49945);
  #line 234 
  if ((reg & 56) == (int)phy_op_mode) 
                                      #line 235 
                                      return 0;
  #line 236 
  if ((efx->msg_enable & 8192U) != 0U) {
    #line 236 
    bool branch;
    #line 236 
    struct _ddebug __UNIQUE_ID_ddebug544 = {.modname = (char *)"sfc_falcon", .function = (char *)"qt2025c_select_phy_mode", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/qt202x_phy.c", .format = (char *)"Switching PHY to mode 0x%04x\n", .lineno = (unsigned int)236U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 236 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug544.key.dd_key_false.key,(_Bool)0);
    #line 236 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 236 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug544,efx->net_dev,(char *)"Switching PHY to mode 0x%04x\n",(int)phy_op_mode);
  }
  #line 243 
  ef4_mdio_write(efx,1,49920,0);
  #line 248 
  if (board->major == 0 && board->minor <= 1) {
    #line 249 
    ef4_mdio_write(efx,1,49923,17560);
    #line 250 
    i = 0;
    #line 250 
    while (i <= 8) {
      #line 251 
      ef4_mdio_write(efx,1,49923,17544);
      #line 252 
      ef4_mdio_write(efx,1,49923,17536);
      #line 253 
      ef4_mdio_write(efx,1,49923,17552);
      #line 254 
      ef4_mdio_write(efx,1,49923,17560);
      #line 250 
      i ++;
    }
  }
  else {
    #line 257 
    ef4_mdio_write(efx,1,49923,2336);
    #line 258 
    ef4_mdio_write(efx,1,53256,4);
    #line 259 
    i = 0;
    #line 259 
    while (i <= 8) {
      #line 260 
      ef4_mdio_write(efx,1,49923,2304);
      #line 261 
      ef4_mdio_write(efx,1,53256,5);
      #line 262 
      ef4_mdio_write(efx,1,49923,2336);
      #line 263 
      ef4_mdio_write(efx,1,53256,4);
      #line 259 
      i ++;
    }
    #line 265 
    ef4_mdio_write(efx,1,49923,18688);
  }
  #line 267 
  ef4_mdio_write(efx,1,49923,18688);
  #line 268 
  ef4_mdio_write(efx,1,49922,4);
  #line 269 
  ef4_mdio_write(efx,1,49942,19);
  #line 270 
  ef4_mdio_write(efx,1,49944,84);
  #line 271 
  ef4_mdio_write(efx,1,49945,(int)phy_op_mode);
  #line 272 
  ef4_mdio_write(efx,1,49946,152);
  #line 273 
  ef4_mdio_write(efx,3,38,3584);
  #line 274 
  ef4_mdio_write(efx,3,39,19);
  #line 275 
  ef4_mdio_write(efx,3,40,42280);
  #line 276 
  ef4_mdio_write(efx,1,53254,10);
  #line 277 
  ef4_mdio_write(efx,1,53255,9);
  #line 278 
  ef4_mdio_write(efx,1,53256,4);
  #line 283 
  ef4_mdio_write(efx,1,49943,255);
  #line 286 
  ef4_mdio_set_flag(efx,1,49921,64,(_Bool)0);
  #line 288 
  ef4_mdio_write(efx,1,49920,2);
  #line 289 
  msleep(20U);
  #line 292 
  qt2025c_restart_firmware(efx);
  #line 295 
  rc = qt2025c_wait_reset(efx);
  #line 296 
  if (rc < 0) {
    #line 297 
    if ((efx->msg_enable & 8192U) != 0U) 
                                         #line 297 
                                         netdev_err(efx->net_dev,(char *)"PHY microcontroller reset during mode switch ");
    #line 300 
    return rc;
  }
  #line 303 
  return 0;
}

#line 306  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/qt202x_phy.c"
static int qt202x_reset_phy(struct ef4_nic *efx)
{
  #line 308 
  int rc;
  #line 310 
  if (efx->phy_type == 9U) {
    #line 313 
    rc = qt2025c_wait_reset(efx);
    #line 314 
    if (rc < 0) 
                #line 315 
                goto fail;
  }
  else {
    #line 319 
    rc = ef4_mdio_reset_mmd(efx,4,50,10);
    #line 323 
    if (rc < 0) 
                #line 324 
                goto fail;
  }
  #line 328 
  msleep(250U);
  #line 330 
  (*((falcon_board(efx)->type)->init_phy))(efx);
  #line 332 
  return 0;
  #line 334 
  fail: 
        #line 334 
  ;
  #line 335 
  if ((efx->msg_enable & 8192U) != 0U) 
                                       #line 335 
                                       netdev_err(efx->net_dev,(char *)"PHY reset timed out\n");
  #line 336 
  return rc;
}

#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/qt202x_phy.c"
static int qt202x_phy_probe(struct ef4_nic *efx)
{
  #line 341 
  struct qt202x_phy_data *phy_data;
  #line 343 
  phy_data = (struct qt202x_phy_data *)kzalloc_2(24UL,3264U);
  #line 344 
  if (phy_data == (struct qt202x_phy_data *)0) 
                                               #line 345 
                                               return -12;
  #line 346 
  efx->phy_data = (void *)phy_data;
  #line 347 
  phy_data->phy_mode = efx->phy_mode;
  #line 348 
  phy_data->bug17190_in_bad_state = (_Bool)0;
  #line 349 
  phy_data->bug17190_timer = 0UL;
  #line 351 
  efx->mdio.mmds = 26U;
  #line 352 
  efx->mdio.mode_support = 6U;
  #line 353 
  efx->loopback_modes = 67305528ULL;
  #line 354 
  return 0;
}

#line 357  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/qt202x_phy.c"
static int qt202x_phy_init(struct ef4_nic *efx)
{
  #line 359 
  u32 devid;
  #line 360 
  int rc;
  #line 362 
  rc = qt202x_reset_phy(efx);
  #line 363 
  if (rc != 0) {
    #line 364 
    if ((efx->msg_enable & 2U) != 0U) 
                                      #line 364 
                                      netdev_err(efx->net_dev,(char *)"PHY init failed\n");
    #line 365 
    return rc;
  }
  #line 368 
  devid = ef4_mdio_read_id(efx,4);
  #line 369 
  if ((efx->msg_enable & 2U) != 0U) {
    #line 369 
    ;
    #line 369 
    ;
    #line 369 
    netdev_info(efx->net_dev,(char *)"PHY ID reg %x (OUI %06x model %02x revision %x)\n",devid,ef4_mdio_id_oui(devid),ef4_mdio_id_model(devid),ef4_mdio_id_rev(devid));
  }
  #line 374 
  if (efx->phy_type == 9U) 
                           #line 375 
                           qt2025c_firmware_id(efx);
  #line 377 
  return 0;
}

#line 380  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/qt202x_phy.c"
static int qt202x_link_ok(struct ef4_nic *efx)
{
  #line 382 
  return (int)ef4_mdio_links_ok(efx,26U);
}

#line 385  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/qt202x_phy.c"
static bool qt202x_phy_poll(struct ef4_nic *efx)
{
  #line 387 
  bool was_up = efx->link_state.up;
  #line 389 
  efx->link_state.up = (_Bool)(qt202x_link_ok(efx) != 0);
  #line 390 
  efx->link_state.speed = 10000U;
  #line 391 
  efx->link_state.fd = (_Bool)1;
  #line 392 
  efx->link_state.fc = efx->wanted_fc;
  #line 394 
  if (efx->phy_type == 9U) 
                           #line 395 
                           qt2025c_bug17190_workaround(efx);
  #line 397 
  return (_Bool)((int)efx->link_state.up != (int)was_up);
}

#line 400  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/qt202x_phy.c"
static int qt202x_phy_reconfigure(struct ef4_nic *efx)
{
  #line 402 
  struct qt202x_phy_data *phy_data = (struct qt202x_phy_data *)efx->phy_data;
  #line 404 
  if (efx->phy_type == 9U) {
    #line 405 
    int rc = qt2025c_select_phy_mode(efx);
    #line 406 
    if (rc != 0) 
                 #line 407 
                 return rc;
    #line 414 
    mdio_set_flag(& efx->mdio,efx->mdio.prtad,1,(unsigned short)49929,8192,(_Bool)((int)((_Bool)((((((unsigned int)efx->phy_mode & 1U) != 0U || ((unsigned int)efx->phy_mode & 2U) != 0U) || efx->loopback_mode == (unsigned int)LOOPBACK_PCS) || efx->loopback_mode == (unsigned int)LOOPBACK_PMAPMD) != 0))));
  }
  else {
    #line 423 
    if (((unsigned int)efx->phy_mode & 1U) == 0U && ((unsigned int)phy_data->phy_mode & 1U) != 0U) 
      #line 425 
      qt202x_reset_phy(efx);
    #line 427 
    ef4_mdio_transmit_disable(efx);
  }
  #line 430 
  ef4_mdio_phy_reconfigure(efx);
  #line 432 
  phy_data->phy_mode = efx->phy_mode;
  #line 434 
  return 0;
}

#line 437  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/qt202x_phy.c"
static void qt202x_phy_get_link_ksettings(struct ef4_nic *efx, struct ethtool_link_ksettings *cmd)
{
  #line 440 
  mdio45_ethtool_ksettings_get(& efx->mdio,cmd);
  #line 441 
  return;
}

#line 443  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/qt202x_phy.c"
static void qt202x_phy_remove(struct ef4_nic *efx)
{
  #line 446 
  kfree(efx->phy_data);
  #line 447 
  efx->phy_data = (void *)0;
  #line 448 
  return;
}

#line 450  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/qt202x_phy.c"
static int qt202x_phy_get_module_info(struct ef4_nic *efx, struct ethtool_modinfo *modinfo)
{
  #line 453 
  modinfo->type = 1U;
  #line 454 
  modinfo->eeprom_len = 256U;
  #line 455 
  return 0;
}

#line 458  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/qt202x_phy.c"
static int qt202x_phy_get_module_eeprom(struct ef4_nic *efx, struct ethtool_eeprom *ee, u8 *data)
{
  #line 461 
  int mmd;
  #line 461 
  int reg_base;
  #line 461 
  int rc;
  #line 461 
  int i;
  #line 463 
  if (efx->phy_type == 9U) {
    #line 464 
    mmd = 3;
    #line 465 
    reg_base = 53248;
  }
  else {
    #line 467 
    mmd = 1;
    #line 468 
    reg_base = 32775;
  }
  #line 471 
  i = 0;
  #line 471 
  while (ee->len > (unsigned int)i) {
    #line 472 
    rc = ef4_mdio_read(efx,mmd,(int)((ee->offset + (unsigned int)reg_base) + (unsigned int)i));
    #line 473 
    if (rc < 0) 
                #line 474 
                return rc;
    #line 475 
    *(data + (unsigned long)i) = (unsigned char)rc;
    #line 471 
    i ++;
  }
  #line 478 
  return 0;
}

#line 481  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/qt202x_phy.c"
struct ef4_phy_operations falcon_qt202x_phy_ops = {.probe = & qt202x_phy_probe, .init = & qt202x_phy_init, .fini = & ef4_port_dummy_op_void, .remove = & qt202x_phy_remove, .reconfigure = & qt202x_phy_reconfigure, .poll = & qt202x_phy_poll, .get_link_ksettings = & qt202x_phy_get_link_ksettings, .set_link_ksettings = & ef4_mdio_set_link_ksettings, .test_alive = & ef4_mdio_test_alive, .get_module_eeprom = & qt202x_phy_get_module_eeprom, .get_module_info = & qt202x_phy_get_module_info};
#line 376  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/qt202x_phy.i.aux"
static void *kzalloc_2(size_t size, gfp_t flags)
{
  #line 379 
  return ldv_kzalloc(size,flags);
}

#line 16  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/falcon.i.aux"
#line 16 
struct task_struct *ldv_get_current(void);
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernel.h"
#line 203 
void ___might_sleep(char *, int, int);
#line 204 
#line 204 
void __might_sleep(char *, int, int);
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/page_64.h"
#line 29 
unsigned long __phys_addr(unsigned long);
#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
#line 186  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/falcon.i.aux"
static void atomic_inc_2(atomic_t *v);
#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/thread_info.h"
__inline static int test_ti_thread_flag(struct thread_info *ti, int flag)
{
  #line 84 
  return (int)test_bit((long)flag,& ti->flags);
}

#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_api_smp.h"
#line 43 
void _raw_spin_unlock_irqrestore(raw_spinlock_t *, unsigned long);
#line 336  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock_1(spinlock_t *lock)
{
  #line 338 
  _raw_spin_lock(& lock->__anonCompField_spinlock_25.rlock);
  #line 339 
  return;
}

#line 340 
#line 876  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/falcon.i.aux"
static void cif_spin_lock_stats_lock_of_ef4_nic(spinlock_t *lock);
#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock_bh_0(spinlock_t *lock)
{
  #line 343 
  _raw_spin_lock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 344 
  return;
}

#line 345 
#line 922  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/falcon.i.aux"
static void cif_spin_lock_bh_stats_lock_of_ef4_nic_0(spinlock_t *lock);
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_1(spinlock_t *lock)
{
  #line 378 
  _raw_spin_unlock(& lock->__anonCompField_spinlock_25.rlock);
  #line 379 
  return;
}

#line 380 
#line 885  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/falcon.i.aux"
static void cif_spin_unlock_stats_lock_of_ef4_nic(spinlock_t *lock);
#line 381  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_bh_1(spinlock_t *lock)
{
  #line 383 
  _raw_spin_unlock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 384 
  return;
}

#line 385 
#line 931  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/falcon.i.aux"
static void cif_spin_unlock_bh_stats_lock_of_ef4_nic_0(spinlock_t *lock);
#line 391  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_irqrestore(spinlock_t *lock, unsigned long flags)
{
  {
    #line 393 
    unsigned long __dummy;
    #line 393 
    unsigned long __dummy2;
    }
  #line 393 
  _raw_spin_unlock_irqrestore(& lock->__anonCompField_spinlock_25.rlock,flags);
  #line 395 
  return;
}

#line 395 
#line 826  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/falcon.i.aux"
static void cif_spin_unlock_irqrestore_biu_lock_of_ef4_nic(spinlock_t *lock, unsigned long flags);
#line 26 
#line 861 
static void cif_mutex_lock_spi_lock_of_falcon_nic_data(struct mutex *lock);
#line 26 
#line 894 
static void cif_mutex_lock_mdio_lock_of_falcon_nic_data(struct mutex *lock);
#line 26 
#line 908 
static void cif_mutex_lock_mac_lock_of_ef4_nic_2(struct mutex *lock);
#line 28 
#line 835 
static int cif_mutex_lock_interruptible_spi_lock_of_falcon_nic_data(struct mutex *lock);
#line 33 
#line 33 
void __ldv_spin_lock(spinlock_t *);
#line 35 
#line 817 
static void cif___ldv_spin_lock_biu_lock_of_ef4_nic(spinlock_t *lock);
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
#line 854  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/falcon.i.aux"
static void cif_mutex_unlock_spi_lock_of_falcon_nic_data(struct mutex *lock);
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
#line 901  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/falcon.i.aux"
static void cif_mutex_unlock_mdio_lock_of_falcon_nic_data(struct mutex *lock);
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
#line 915  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/falcon.i.aux"
static void cif_mutex_unlock_mac_lock_of_ef4_nic_2(struct mutex *lock);
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
#line 868  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/falcon.i.aux"
static int cif_mod_timer_0(struct timer_list *timer, unsigned long expires);
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
#line 940  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/falcon.i.aux"
static int cif_del_timer_sync_0(struct timer_list *timer);
#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
#line 214 
unsigned long round_jiffies_up(unsigned long);
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/io.h"
__inline static unsigned int __readl(void *addr)
{
  #line 63 
  unsigned int ret;
  #line 64 
  ldv_inline_asm();
  #line 63 
  return ret;
}

#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/io.h"
__inline static void __writel(unsigned int val, void *addr)
{
  #line 73 
  ldv_inline_asm();
  #line 74 
  return;
}

#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/io.h"
__inline static void __writeq(u64 val, void *addr)
{
  #line 100 
  ldv_inline_asm();
  #line 101 
  return;
}

#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/io.h"
__inline static phys_addr_t virt_to_phys(void *address)
{
  #line 131 
  return (phys_addr_t)__phys_addr((unsigned long)address);
}

#line 219  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
#line 219 
long schedule_timeout(long);
#line 1660  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
__inline static struct thread_info *task_thread_info(struct task_struct *task)
{
  #line 1662 
  return & task->thread_info;
}

#line 1751  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
__inline static int test_tsk_thread_flag(struct task_struct *tsk, int flag)
{
  #line 1753 
  ;
  #line 1753 
  return test_ti_thread_flag(task_thread_info(tsk),flag);
}

#line 1778 
#line 1778 
int _cond_resched(void);
#line 542  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 461  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/falcon.i.aux"
static void *kmalloc_0(size_t size, gfp_t flags);
#line 607  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 475  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/falcon.i.aux"
static void *kcalloc_2(size_t n, size_t size, gfp_t flags);
#line 668  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 496  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/falcon.i.aux"
static void *kzalloc_3(size_t size, gfp_t flags);
#line 1018  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
#line 1018 
struct pci_dev *pci_dev_get(struct pci_dev *);
#line 1019 
#line 1019 
void pci_dev_put(struct pci_dev *);
#line 1048 
#line 1048 
struct pci_dev *pci_get_device(unsigned int, unsigned int, struct pci_dev *);
#line 844  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
#line 844 
void i2c_del_adapter(struct i2c_adapter *);
#line 347  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
__inline static int signal_pending(struct task_struct *p)
{
  #line 349 
  return (long)(test_tsk_thread_flag(p,2) != 0);
}

#line 423  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 423 
void __napi_schedule(struct napi_struct *);
#line 431 
#line 431 
bool napi_schedule_prep(struct napi_struct *);
#line 440  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void napi_schedule(struct napi_struct *n)
{
  #line 442 
  if ((int)napi_schedule_prep(n) != 0) 
                                       #line 443 
                                       __napi_schedule(n);
  #line 444 
  return;
}

#line 543  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/net_driver.h"
__inline static bool ef4_link_state_equal(struct ef4_link_state *left, struct ef4_link_state *right)
{
  #line 547 
  return (_Bool)(((((int)left->up == (int)right->up && (int)left->fd == (int)right->fd) && (int)left->fc == (int)right->fc) && left->speed == right->speed) != 0);
}

#line 233  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.h"
__inline static void ef4_schedule_channel(struct ef4_channel *channel)
{
  #line 235 
  if (0) 
    #line 235 
    if (((channel->efx)->msg_enable & 512U) != 0U) {
      #line 235 
      int pscr_ret__;
      {
        #line 235 
        void *__vpp_verify = (void *)0;
        #line 235 
        void *tmp = __vpp_verify;
      }
      #line 235 
      switch (4UL) {
        #line 235 
        int pfo_ret___0;
        #line 235 
        int pfo_ret___1;
        #line 235 
        int pfo_ret___2;
        #line 235 
        int pfo_ret__;
        #line 235 
        case (unsigned long)1: 
                               #line 235 
        ;
        #line 235 
        switch (4UL) {
          #line 235 
          case (unsigned long)1: 
                                 #line 235 
          ;
          #line 236 
          ldv_inline_asm();
          #line 235 
          break;
          #line 235 
          case (unsigned long)2: 
                                 #line 235 
          ;
          #line 236 
          ldv_inline_asm();
          #line 235 
          break;
          #line 235 
          case (unsigned long)4: 
                                 #line 235 
          ;
          #line 236 
          ldv_inline_asm();
          #line 235 
          break;
          #line 235 
          case (unsigned long)8: 
                                 #line 235 
          ;
          #line 236 
          ldv_inline_asm();
          #line 235 
          break;
          #line 235 
          default: 
                   #line 235 
          ;
          #line 235 
          __bad_percpu_size();
        }
        #line 235 
        pscr_ret__ = pfo_ret__;
        #line 235 
        break;
        #line 235 
        case (unsigned long)2: 
                               #line 235 
        ;
        #line 235 
        switch (4UL) {
          #line 235 
          case (unsigned long)1: 
                                 #line 235 
          ;
          #line 236 
          ldv_inline_asm();
          #line 235 
          break;
          #line 235 
          case (unsigned long)2: 
                                 #line 235 
          ;
          #line 236 
          ldv_inline_asm();
          #line 235 
          break;
          #line 235 
          case (unsigned long)4: 
                                 #line 235 
          ;
          #line 236 
          ldv_inline_asm();
          #line 235 
          break;
          #line 235 
          case (unsigned long)8: 
                                 #line 235 
          ;
          #line 236 
          ldv_inline_asm();
          #line 235 
          break;
          #line 235 
          default: 
                   #line 235 
          ;
          #line 235 
          __bad_percpu_size();
        }
        #line 235 
        pscr_ret__ = pfo_ret___0;
        #line 235 
        break;
        #line 235 
        case (unsigned long)4: 
                               #line 235 
        ;
        #line 235 
        switch (4UL) {
          #line 235 
          case (unsigned long)1: 
                                 #line 235 
          ;
          #line 236 
          ldv_inline_asm();
          #line 235 
          break;
          #line 235 
          case (unsigned long)2: 
                                 #line 235 
          ;
          #line 236 
          ldv_inline_asm();
          #line 235 
          break;
          #line 235 
          case (unsigned long)4: 
                                 #line 235 
          ;
          #line 236 
          ldv_inline_asm();
          #line 235 
          break;
          #line 235 
          case (unsigned long)8: 
                                 #line 235 
          ;
          #line 236 
          ldv_inline_asm();
          #line 235 
          break;
          #line 235 
          default: 
                   #line 235 
          ;
          #line 235 
          __bad_percpu_size();
        }
        #line 235 
        pscr_ret__ = pfo_ret___1;
        #line 235 
        break;
        #line 235 
        case (unsigned long)8: 
                               #line 235 
        ;
        #line 235 
        switch (4UL) {
          #line 235 
          case (unsigned long)1: 
                                 #line 235 
          ;
          #line 236 
          ldv_inline_asm();
          #line 235 
          break;
          #line 235 
          case (unsigned long)2: 
                                 #line 235 
          ;
          #line 236 
          ldv_inline_asm();
          #line 235 
          break;
          #line 235 
          case (unsigned long)4: 
                                 #line 235 
          ;
          #line 236 
          ldv_inline_asm();
          #line 235 
          break;
          #line 235 
          case (unsigned long)8: 
                                 #line 235 
          ;
          #line 236 
          ldv_inline_asm();
          #line 235 
          break;
          #line 235 
          default: 
                   #line 235 
          ;
          #line 235 
          __bad_percpu_size();
        }
        #line 235 
        pscr_ret__ = pfo_ret___2;
        #line 235 
        break;
        #line 235 
        default: 
                 #line 235 
        ;
        #line 235 
        __bad_size_call_parameter();
        #line 235 
        break;
      }
      #line 235 
      ;
      #line 235 
      ;
      #line 235 
      netdev_printk((char *)"\001",(channel->efx)->net_dev,(char *)"channel %d scheduling NAPI poll on CPU%d\n",channel->channel,pscr_ret__);
    }
  #line 239 
  napi_schedule(& channel->napi_str);
  #line 240 
  return;
}

#line 242  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.h"
__inline static void ef4_schedule_channel_irq(struct ef4_channel *channel)
{
  #line 244 
  int pscr_ret__;
  {
    #line 244 
    void *__vpp_verify = (void *)0;
    #line 244 
    void *tmp = __vpp_verify;
  }
  #line 244 
  switch (4UL) {
    #line 244 
    int pfo_ret__;
    #line 244 
    int pfo_ret___0;
    #line 244 
    int pfo_ret___1;
    #line 244 
    int pfo_ret___2;
    #line 244 
    case (unsigned long)1: 
                           #line 244 
    ;
    #line 244 
    switch (4UL) {
      #line 244 
      case (unsigned long)1: 
                             #line 244 
      ;
      #line 245 
      ldv_inline_asm();
      #line 244 
      break;
      #line 244 
      case (unsigned long)2: 
                             #line 244 
      ;
      #line 245 
      ldv_inline_asm();
      #line 244 
      break;
      #line 244 
      case (unsigned long)4: 
                             #line 244 
      ;
      #line 245 
      ldv_inline_asm();
      #line 244 
      break;
      #line 244 
      case (unsigned long)8: 
                             #line 244 
      ;
      #line 245 
      ldv_inline_asm();
      #line 244 
      break;
      #line 244 
      default: 
               #line 244 
      ;
      #line 244 
      __bad_percpu_size();
    }
    #line 244 
    pscr_ret__ = pfo_ret__;
    #line 244 
    break;
    #line 244 
    case (unsigned long)2: 
                           #line 244 
    ;
    #line 244 
    switch (4UL) {
      #line 244 
      case (unsigned long)1: 
                             #line 244 
      ;
      #line 245 
      ldv_inline_asm();
      #line 244 
      break;
      #line 244 
      case (unsigned long)2: 
                             #line 244 
      ;
      #line 245 
      ldv_inline_asm();
      #line 244 
      break;
      #line 244 
      case (unsigned long)4: 
                             #line 244 
      ;
      #line 245 
      ldv_inline_asm();
      #line 244 
      break;
      #line 244 
      case (unsigned long)8: 
                             #line 244 
      ;
      #line 245 
      ldv_inline_asm();
      #line 244 
      break;
      #line 244 
      default: 
               #line 244 
      ;
      #line 244 
      __bad_percpu_size();
    }
    #line 244 
    pscr_ret__ = pfo_ret___0;
    #line 244 
    break;
    #line 244 
    case (unsigned long)4: 
                           #line 244 
    ;
    #line 244 
    switch (4UL) {
      #line 244 
      case (unsigned long)1: 
                             #line 244 
      ;
      #line 245 
      ldv_inline_asm();
      #line 244 
      break;
      #line 244 
      case (unsigned long)2: 
                             #line 244 
      ;
      #line 245 
      ldv_inline_asm();
      #line 244 
      break;
      #line 244 
      case (unsigned long)4: 
                             #line 244 
      ;
      #line 245 
      ldv_inline_asm();
      #line 244 
      break;
      #line 244 
      case (unsigned long)8: 
                             #line 244 
      ;
      #line 245 
      ldv_inline_asm();
      #line 244 
      break;
      #line 244 
      default: 
               #line 244 
      ;
      #line 244 
      __bad_percpu_size();
    }
    #line 244 
    pscr_ret__ = pfo_ret___1;
    #line 244 
    break;
    #line 244 
    case (unsigned long)8: 
                           #line 244 
    ;
    #line 244 
    switch (4UL) {
      #line 244 
      case (unsigned long)1: 
                             #line 244 
      ;
      #line 245 
      ldv_inline_asm();
      #line 244 
      break;
      #line 244 
      case (unsigned long)2: 
                             #line 244 
      ;
      #line 245 
      ldv_inline_asm();
      #line 244 
      break;
      #line 244 
      case (unsigned long)4: 
                             #line 244 
      ;
      #line 245 
      ldv_inline_asm();
      #line 244 
      break;
      #line 244 
      case (unsigned long)8: 
                             #line 244 
      ;
      #line 245 
      ldv_inline_asm();
      #line 244 
      break;
      #line 244 
      default: 
               #line 244 
      ;
      #line 244 
      __bad_percpu_size();
    }
    #line 244 
    pscr_ret__ = pfo_ret___2;
    #line 244 
    break;
    #line 244 
    default: 
             #line 244 
    ;
    #line 244 
    __bad_size_call_parameter();
    #line 244 
    break;
  }
  #line 244 
  channel->event_test_cpu = pscr_ret__;
  #line 245 
  ef4_schedule_channel(channel);
  #line 246 
  return;
}

#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c-algo-bit.h"
#line 39 
int i2c_bit_add_bus(struct i2c_adapter *);
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/nic.h"
#line 27 
u32 ef4_farch_fpga_ver(struct ef4_nic *efx);
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/nic.h"
__inline static bool ef4_nic_is_dual_func(struct ef4_nic *efx)
{
  #line 32 
  return (_Bool)(ef4_nic_rev(efx) <= 1);
}

#line 208  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/nic.h"
__inline static bool falcon_spi_present(struct falcon_spi_device *spi)
{
  #line 210 
  return (_Bool)(spi->size != 0U);
}

#line 312 
#line 312 
int falcon_probe_board(struct ef4_nic *efx, u16 revision_info);
#line 383 
#line 383 
int ef4_farch_tx_probe(struct ef4_tx_queue *tx_queue);
#line 384 
#line 384 
void ef4_farch_tx_init(struct ef4_tx_queue *tx_queue);
#line 386 
#line 386 
void ef4_farch_tx_remove(struct ef4_tx_queue *tx_queue);
#line 387 
#line 387 
void ef4_farch_tx_write(struct ef4_tx_queue *tx_queue);
#line 388 
#line 388 
unsigned int ef4_farch_tx_limit_len(struct ef4_tx_queue *tx_queue, dma_addr_t dma_addr, unsigned int len);
#line 390 
#line 390 
int ef4_farch_rx_probe(struct ef4_rx_queue *rx_queue);
#line 391 
#line 391 
void ef4_farch_rx_init(struct ef4_rx_queue *rx_queue);
#line 393 
#line 393 
void ef4_farch_rx_remove(struct ef4_rx_queue *rx_queue);
#line 394 
#line 394 
void ef4_farch_rx_write(struct ef4_rx_queue *rx_queue);
#line 395 
#line 395 
void ef4_farch_rx_defer_refill(struct ef4_rx_queue *rx_queue);
#line 396 
#line 396 
int ef4_farch_ev_probe(struct ef4_channel *channel);
#line 397 
#line 397 
int ef4_farch_ev_init(struct ef4_channel *channel);
#line 398 
#line 398 
void ef4_farch_ev_fini(struct ef4_channel *channel);
#line 399 
#line 399 
void ef4_farch_ev_remove(struct ef4_channel *channel);
#line 400 
#line 400 
int ef4_farch_ev_process(struct ef4_channel *channel, int budget);
#line 401 
#line 401 
void ef4_farch_ev_read_ack(struct ef4_channel *channel);
#line 402 
#line 402 
void ef4_farch_ev_test_generate(struct ef4_channel *channel);
#line 405 
#line 405 
int ef4_farch_filter_table_probe(struct ef4_nic *efx);
#line 406 
#line 406 
void ef4_farch_filter_table_restore(struct ef4_nic *efx);
#line 407 
#line 407 
void ef4_farch_filter_table_remove(struct ef4_nic *efx);
#line 408 
#line 408 
void ef4_farch_filter_update_rx_scatter(struct ef4_nic *efx);
#line 409 
#line 409 
s32 ef4_farch_filter_insert(struct ef4_nic *efx, struct ef4_filter_spec *gen_spec, bool replace_equal);
#line 411 
#line 411 
int ef4_farch_filter_remove_safe(struct ef4_nic *efx, enum ef4_filter_priority priority, u32 filter_id);
#line 414 
#line 414 
int ef4_farch_filter_get_safe(struct ef4_nic *efx, enum ef4_filter_priority priority, u32 filter_id, struct ef4_filter_spec *spec_buf);
#line 417 
#line 417 
int ef4_farch_filter_clear_rx(struct ef4_nic *efx, enum ef4_filter_priority priority);
#line 419 
#line 419 
u32 ef4_farch_filter_count_rx_used(struct ef4_nic *efx, enum ef4_filter_priority priority);
#line 421 
#line 421 
u32 ef4_farch_filter_get_rx_id_limit(struct ef4_nic *efx);
#line 422 
#line 422 
s32 ef4_farch_filter_get_rx_ids(struct ef4_nic *efx, enum ef4_filter_priority priority, u32 *buf, u32 size);
#line 426 
#line 426 
s32 ef4_farch_filter_rfs_insert(struct ef4_nic *efx, struct ef4_filter_spec *gen_spec);
#line 428 
#line 428 
bool ef4_farch_filter_rfs_expire_one(struct ef4_nic *efx, u32 flow_id, unsigned int index);
#line 431 
#line 431 
void ef4_farch_filter_sync_rx_mode(struct ef4_nic *efx);
#line 447  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/nic.h"
__inline static void ef4_update_diff_stat(u64 *stat, u64 diff)
{
  #line 449 
  if ((long long)(diff - *stat) > 0LL) 
                                       #line 450 
                                       *stat = diff;
  #line 451 
  return;
}

#line 457 
#line 457 
void ef4_farch_irq_enable_master(struct ef4_nic *efx);
#line 458 
#line 458 
int ef4_farch_irq_test_generate(struct ef4_nic *efx);
#line 459 
#line 459 
void ef4_farch_irq_disable_master(struct ef4_nic *efx);
#line 460 
#line 460 
irqreturn_t ef4_farch_msi_interrupt(int irq, void *dev_id);
#line 461 
#line 461 
irqreturn_t ef4_farch_legacy_interrupt(int irq, void *dev_id);
#line 462 
#line 462 
irqreturn_t ef4_farch_fatal_interrupt(struct ef4_nic *efx);
#line 475 
#line 475 
int ef4_farch_fini_dmaq(struct ef4_nic *efx);
#line 476 
#line 476 
void ef4_farch_finish_flr(struct ef4_nic *efx);
#line 477 
#line 2631  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon.c"
void falcon_start_nic_stats(struct ef4_nic *efx);
#line 478  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/nic.h"
#line 2649  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon.c"
void falcon_stop_nic_stats(struct ef4_nic *efx);
#line 481  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/nic.h"
#line 481 
void ef4_farch_init_common(struct ef4_nic *efx);
#line 482 
#line 482 
void ef4_farch_rx_push_indir_table(struct ef4_nic *efx);
#line 484 
#line 484 
int ef4_nic_alloc_buffer(struct ef4_nic *efx, struct ef4_buffer *buffer, unsigned int len, gfp_t gfp_flags);
#line 486 
#line 486 
void ef4_nic_free_buffer(struct ef4_nic *efx, struct ef4_buffer *buffer);
#line 493 
#line 493 
int ef4_farch_test_registers(struct ef4_nic *efx, struct ef4_farch_register_test *regs, size_t n_regs);
#line 500 
#line 500 
size_t ef4_nic_describe_stats(struct ef4_hw_stat_desc *desc, size_t count, unsigned long *mask, u8 *names);
#line 502 
#line 502 
void ef4_nic_update_stats(struct ef4_hw_stat_desc *desc, size_t count, unsigned long *mask, u64 *stats, void *dma_buf, bool accumulate);
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/io.h"
__inline static void _ef4_writeq(struct ef4_nic *efx, __le64 value, unsigned int reg)
{
  #line 70 
  __writeq(value,efx->membase + (unsigned long)reg);
  #line 71 
  return;
}

#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/io.h"
__inline static void _ef4_writed(struct ef4_nic *efx, __le32 value, unsigned int reg)
{
  #line 81 
  __writel(value,efx->membase + (unsigned long)reg);
  #line 82 
  return;
}

#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/io.h"
__inline static __le32 _ef4_readd(struct ef4_nic *efx, unsigned int reg)
{
  #line 85 
  return __readl(efx->membase + (unsigned long)reg);
}

#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/io.h"
__inline static void ef4_writeo(struct ef4_nic *efx, ef4_oword_t *value, unsigned int reg)
{
  #line 92 
  unsigned long flags;
  #line 98 
  cif___ldv_spin_lock_biu_lock_of_ef4_nic(& efx->biu_lock);
  #line 100 
  _ef4_writeq(efx,value->u64[0],reg);
  #line 101 
  _ef4_writeq(efx,value->u64[1],reg + 8U);
  #line 108 
  cif_spin_unlock_irqrestore_biu_lock_of_ef4_nic(& efx->biu_lock,flags);
  #line 109 
  return;
}

#line 133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/io.h"
__inline static void ef4_writed(struct ef4_nic *efx, ef4_dword_t *value, unsigned int reg)
{
  #line 141 
  _ef4_writed(efx,value->u32[0],reg);
  #line 142 
  return;
}

#line 145  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/io.h"
__inline static void ef4_reado(struct ef4_nic *efx, ef4_oword_t *value, unsigned int reg)
{
  #line 148 
  unsigned long flags;
  #line 150 
  cif___ldv_spin_lock_biu_lock_of_ef4_nic(& efx->biu_lock);
  #line 151 
  value->u32[0] = _ef4_readd(efx,reg);
  #line 152 
  value->u32[1] = _ef4_readd(efx,reg + 4U);
  #line 153 
  value->u32[2] = _ef4_readd(efx,reg + 8U);
  #line 154 
  value->u32[3] = _ef4_readd(efx,reg + 12U);
  #line 155 
  cif_spin_unlock_irqrestore_biu_lock_of_ef4_nic(& efx->biu_lock,flags);
  #line 159 
  return;
}

#line 184  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/io.h"
__inline static void ef4_readd(struct ef4_nic *efx, ef4_dword_t *value, unsigned int reg)
{
  #line 187 
  value->u32[0] = _ef4_readd(efx,reg);
  #line 190 
  return;
}

#line 265  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/io.h"
__inline static void _ef4_writed_page_locked(struct ef4_nic *efx, ef4_dword_t *value, unsigned int reg, unsigned int page)
{
  #line 270 
  unsigned long flags;
  #line 272 
  if (page == 0U) {
    #line 273 
    cif___ldv_spin_lock_biu_lock_of_ef4_nic(& efx->biu_lock);
    #line 274 
    ef4_writed(efx,value,page * 8192U + reg);
    #line 275 
    cif_spin_unlock_irqrestore_biu_lock_of_ef4_nic(& efx->biu_lock,flags);
  }
  else 
       #line 277 
       ef4_writed(efx,value,page * 8192U + reg);
  #line 278 
  return;
}

#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/phy.h"
#line 478  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/tenxpress.c"
struct ef4_phy_operations falcon_sfx7101_phy_ops;
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/mdio_10g.h"
__inline static bool ef4_mdio_phyxgxs_lane_sync(struct ef4_nic *efx)
{
  #line 42 
  int i;
  #line 42 
  int lane_status;
  #line 43 
  bool sync;
  #line 45 
  i = 0;
  #line 45 
  while (i <= 1) {
    #line 46 
    lane_status = ef4_mdio_read(efx,4,24);
    #line 45 
    i ++;
  }
  #line 49 
  sync = (_Bool)((lane_status & 4096) != 0);
  #line 50 
  if (! sync) 
    #line 51 
    if ((efx->msg_enable & 8192U) != 0U) {
      #line 51 
      bool branch;
      #line 51 
      struct _ddebug __UNIQUE_ID_ddebug541 = {.modname = (char *)"sfc_falcon", .function = (char *)"ef4_mdio_phyxgxs_lane_sync", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/mdio_10g.h", .format = (char *)"XGXS lane status: %x\n", .lineno = (unsigned int)51U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 51 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug541.key.dd_key_false.key,(_Bool)0);
      #line 51 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 51 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug541,efx->net_dev,(char *)"XGXS lane status: %x\n",lane_status);
    }
  #line 53 
  return sync;
}

#line 147  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon.c"
static struct ef4_hw_stat_desc falcon_stat_desc[49U] = {{.name = (char *)"rx_noskb_drops"}, {.name = (char *)"rx_nodesc_trunc"}, {.name = (char *)"tx_bytes", .dma_width = (unsigned short)64U, .offset = (unsigned short)136U}, {.name = (char *)"tx_packets", .dma_width = (unsigned short)32U, .offset = (unsigned short)128U}, {.name = (char *)"tx_pause", .dma_width = (unsigned short)32U, .offset = (unsigned short)160U}, {.name = (char *)"tx_control", .dma_width = (unsigned short)32U, .offset = (unsigned short)156U}, {.name = (char *)"tx_unicast", .dma_width = (unsigned short)32U, .offset = (unsigned short)152U}, {.name = (char *)"tx_multicast", .dma_width = (unsigned short)32U, .offset = (unsigned short)144U}, {.name = (char *)"tx_broadcast", .dma_width = (unsigned short)32U, .offset = (unsigned short)148U}, {.name = (char *)"tx_lt64", .dma_width = (unsigned short)32U, .offset = (unsigned short)192U}, {.name = (char *)"tx_64", .dma_width = (unsigned short)32U, .offset = (unsigned short)164U}, {.name = (char *)"tx_65_to_127", .dma_width = (unsigned short)32U, .offset = (unsigned short)168U}, {.name = (char *)"tx_128_to_255", .dma_width = (unsigned short)32U, .offset = (unsigned short)172U}, {.name = (char *)"tx_256_to_511", .dma_width = (unsigned short)32U, .offset = (unsigned short)176U}, {.name = (char *)"tx_512_to_1023", .dma_width = (unsigned short)32U, .offset = (unsigned short)180U}, {.name = (char *)"tx_1024_to_15xx", .dma_width = (unsigned short)32U, .offset = (unsigned short)184U}, {.name = (char *)"tx_15xx_to_jumbo", .dma_width = (unsigned short)32U, .offset = (unsigned short)188U}, {.name = (char *)"tx_gtjumbo", .dma_width = (unsigned short)32U, .offset = (unsigned short)196U}, {.name = (char *)"tx_non_tcpudp", .dma_width = (unsigned short)16U, .offset = (unsigned short)200U}, {.name = (char *)"tx_mac_src_error", .dma_width = (unsigned short)16U, .offset = (unsigned short)204U}, {.name = (char *)"tx_ip_src_error", .dma_width = (unsigned short)16U, .offset = (unsigned short)208U}, {.name = (char *)"rx_bytes", .dma_width = (unsigned short)64U}, {.name = (char *)"rx_good_bytes", .dma_width = (unsigned short)64U, .offset = (unsigned short)8U}, {.name = (char *)"rx_bad_bytes"}, {.name = (char *)"rx_packets", .dma_width = (unsigned short)32U, .offset = (unsigned short)16U}, {.name = (char *)"rx_good", .dma_width = (unsigned short)32U, .offset = (unsigned short)20U}, {.name = (char *)"rx_bad", .dma_width = (unsigned short)32U, .offset = (unsigned short)56U}, {.name = (char *)"rx_pause", .dma_width = (unsigned short)32U, .offset = (unsigned short)76U}, {.name = (char *)"rx_control", .dma_width = (unsigned short)32U, .offset = (unsigned short)72U}, {.name = (char *)"rx_unicast", .dma_width = (unsigned short)32U, .offset = (unsigned short)32U}, {.name = (char *)"rx_multicast", .dma_width = (unsigned short)32U, .offset = (unsigned short)28U}, {.name = (char *)"rx_broadcast", .dma_width = (unsigned short)32U, .offset = (unsigned short)24U}, {.name = (char *)"rx_lt64", .dma_width = (unsigned short)32U, .offset = (unsigned short)36U}, {.name = (char *)"rx_64", .dma_width = (unsigned short)32U, .offset = (unsigned short)80U}, {.name = (char *)"rx_65_to_127", .dma_width = (unsigned short)32U, .offset = (unsigned short)84U}, {.name = (char *)"rx_128_to_255", .dma_width = (unsigned short)32U, .offset = (unsigned short)88U}, {.name = (char *)"rx_256_to_511", .dma_width = (unsigned short)32U, .offset = (unsigned short)92U}, {.name = (char *)"rx_512_to_1023", .dma_width = (unsigned short)32U, .offset = (unsigned short)96U}, {.name = (char *)"rx_1024_to_15xx", .dma_width = (unsigned short)32U, .offset = (unsigned short)100U}, {.name = (char *)"rx_15xx_to_jumbo", .dma_width = (unsigned short)32U, .offset = (unsigned short)104U}, {.name = (char *)"rx_gtjumbo", .dma_width = (unsigned short)32U, .offset = (unsigned short)40U}, {.name = (char *)"rx_bad_lt64", .dma_width = (unsigned short)32U, .offset = (unsigned short)48U}, {.name = (char *)"rx_bad_gtjumbo", .dma_width = (unsigned short)32U, .offset = (unsigned short)44U}, {.name = (char *)"rx_overflow", .dma_width = (unsigned short)32U, .offset = (unsigned short)52U}, {.name = (char *)"rx_symbol_error", .dma_width = (unsigned short)32U, .offset = (unsigned short)64U}, {.name = (char *)"rx_align_error", .dma_width = (unsigned short)32U, .offset = (unsigned short)60U}, {.name = (char *)"rx_length_error", .dma_width = (unsigned short)32U, .offset = (unsigned short)108U}, {.name = (char *)"rx_internal_error", .dma_width = (unsigned short)32U, .offset = (unsigned short)68U}, {.name = (char *)"rx_nodesc_drop_cnt"}};
#line 198  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon.c"
static unsigned long falcon_stat_mask[1U] = {18446744073709551615UL};
#line 301 
#line 2058 
static int falcon_reset_hw(struct ef4_nic *efx, enum reset_type method);
#line 302 
#line 1366 
static void falcon_reconfigure_mac_wrapper(struct ef4_nic *efx);
#line 326  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon.c"
static void falcon_setsda(void *data, int state)
{
  #line 329 
  ef4_oword_t reg;
  #line 328 
  struct ef4_nic *efx = (struct ef4_nic *)data;
  #line 331 
  ef4_reado(efx,& reg,528U);
  {
    #line 332 
    unsigned long long tmp;
    #line 332 
    if (state == 0) 
                    #line 332 
                    tmp = 134217728ULL; else 
                                             #line 332 
                                             tmp = 0ULL;
    #line 332 
    reg.u64[0] = (reg.u64[0] & 18446744073575333887ULL) | tmp;
    #line 332 
    reg.u64[1] = reg.u64[1];
  }
  #line 333 
  ef4_writeo(efx,& reg,528U);
  #line 334 
  return;
}

#line 336  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon.c"
static void falcon_setscl(void *data, int state)
{
  #line 339 
  ef4_oword_t reg;
  #line 338 
  struct ef4_nic *efx = (struct ef4_nic *)data;
  #line 341 
  ef4_reado(efx,& reg,528U);
  {
    #line 342 
    unsigned long long tmp;
    #line 342 
    if (state == 0) 
                    #line 342 
                    tmp = 16777216ULL; else 
                                            #line 342 
                                            tmp = 0ULL;
    #line 342 
    reg.u64[0] = (reg.u64[0] & 18446744073692774399ULL) | tmp;
    #line 342 
    reg.u64[1] = reg.u64[1];
  }
  #line 343 
  ef4_writeo(efx,& reg,528U);
  #line 344 
  return;
}

#line 346  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon.c"
static int falcon_getsda(void *data)
{
  #line 349 
  ef4_oword_t reg;
  #line 348 
  struct ef4_nic *efx = (struct ef4_nic *)data;
  #line 351 
  ef4_reado(efx,& reg,528U);
  #line 352 
  return (int)(reg.u64[0] >> 11) & 1;
}

#line 355  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon.c"
static int falcon_getscl(void *data)
{
  #line 358 
  ef4_oword_t reg;
  #line 357 
  struct ef4_nic *efx = (struct ef4_nic *)data;
  #line 360 
  ef4_reado(efx,& reg,528U);
  #line 361 
  return (int)(reg.u64[0] >> 8) & 1;
}

#line 364  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon.c"
static struct i2c_algo_bit_data falcon_i2c_bit_operations = {.setsda = & falcon_setsda, .setscl = & falcon_setscl, .getsda = & falcon_getsda, .getscl = & falcon_getscl, .udelay = 5, .timeout = 13};
#line 374  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon.c"
static void falcon_push_irq_moderation(struct ef4_channel *channel)
{
  #line 376 
  ef4_dword_t timer_cmd;
  #line 377 
  struct ef4_nic *efx = channel->efx;
  #line 380 
  if (channel->irq_moderation_us != 0U) {
    #line 381 
    unsigned int ticks;
    #line 383 
    ticks = ef4_usecs_to_ticks(efx,channel->irq_moderation_us);
    #line 384 
    timer_cmd.u32[0] = (ticks + 4294967295U) | 8192U;
  }
  else 
       #line 390 
       timer_cmd.u32[0] = 0U;
  #line 396 
  _ef4_writed_page_locked(efx,& timer_cmd,1056U,(unsigned int)channel->channel);
  #line 397 
  return;
}

#line 400 
#line 1350 
static void falcon_deconfigure_mac_wrapper(struct ef4_nic *efx);
#line 402  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon.c"
static void falcon_prepare_flush(struct ef4_nic *efx)
{
  #line 404 
  falcon_deconfigure_mac_wrapper(efx);
  #line 409 
  msleep(10U);
  #line 410 
  return;
}

#line 422  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon.c"
__inline static void falcon_irq_ack_a1(struct ef4_nic *efx)
{
  #line 424 
  ef4_dword_t reg;
  #line 426 
  reg.u32[0] = 12053374U;
  #line 427 
  ef4_writed(efx,& reg,80U);
  #line 428 
  ef4_readd(efx,& reg,112U);
  #line 429 
  return;
}

#line 431  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon.c"
static irqreturn_t falcon_legacy_interrupt_a1(int irq, void *dev_id)
{
  #line 447 
  int pscr_ret___0;
  #line 453 
  union __anonunion___u_8184 __u;
  #line 435 
  int syserr;
  #line 436 
  int queues;
  #line 433 
  struct ef4_nic *efx = (struct ef4_nic *)dev_id;
  #line 434 
  ef4_oword_t *int_ker = (ef4_oword_t *)efx->irq_status.addr;
  #line 441 
  if ((long)((int_ker->u64[0] | int_ker->u64[1]) == 0ULL) != 0L) {
    #line 442 
    if (0) 
      #line 442 
      if ((efx->msg_enable & 512U) != 0U) {
        #line 442 
        int pscr_ret__;
        {
          #line 442 
          void *__vpp_verify = (void *)0;
          #line 442 
          void *tmp = __vpp_verify;
        }
        #line 442 
        switch (4UL) {
          #line 442 
          int pfo_ret__;
          #line 442 
          int pfo_ret___0;
          #line 442 
          int pfo_ret___1;
          #line 442 
          int pfo_ret___2;
          #line 442 
          case (unsigned long)1: 
                                 #line 442 
          ;
          #line 442 
          switch (4UL) {
            #line 442 
            case (unsigned long)1: 
                                   #line 442 
            ;
            #line 443 
            ldv_inline_asm();
            #line 442 
            break;
            #line 442 
            case (unsigned long)2: 
                                   #line 442 
            ;
            #line 443 
            ldv_inline_asm();
            #line 442 
            break;
            #line 442 
            case (unsigned long)4: 
                                   #line 442 
            ;
            #line 443 
            ldv_inline_asm();
            #line 442 
            break;
            #line 442 
            case (unsigned long)8: 
                                   #line 442 
            ;
            #line 443 
            ldv_inline_asm();
            #line 442 
            break;
            #line 442 
            default: 
                     #line 442 
            ;
            #line 442 
            __bad_percpu_size();
          }
          #line 442 
          pscr_ret__ = pfo_ret__;
          #line 442 
          break;
          #line 442 
          case (unsigned long)2: 
                                 #line 442 
          ;
          #line 442 
          switch (4UL) {
            #line 442 
            case (unsigned long)1: 
                                   #line 442 
            ;
            #line 443 
            ldv_inline_asm();
            #line 442 
            break;
            #line 442 
            case (unsigned long)2: 
                                   #line 442 
            ;
            #line 443 
            ldv_inline_asm();
            #line 442 
            break;
            #line 442 
            case (unsigned long)4: 
                                   #line 442 
            ;
            #line 443 
            ldv_inline_asm();
            #line 442 
            break;
            #line 442 
            case (unsigned long)8: 
                                   #line 442 
            ;
            #line 443 
            ldv_inline_asm();
            #line 442 
            break;
            #line 442 
            default: 
                     #line 442 
            ;
            #line 442 
            __bad_percpu_size();
          }
          #line 442 
          pscr_ret__ = pfo_ret___0;
          #line 442 
          break;
          #line 442 
          case (unsigned long)4: 
                                 #line 442 
          ;
          #line 442 
          switch (4UL) {
            #line 442 
            case (unsigned long)1: 
                                   #line 442 
            ;
            #line 443 
            ldv_inline_asm();
            #line 442 
            break;
            #line 442 
            case (unsigned long)2: 
                                   #line 442 
            ;
            #line 443 
            ldv_inline_asm();
            #line 442 
            break;
            #line 442 
            case (unsigned long)4: 
                                   #line 442 
            ;
            #line 443 
            ldv_inline_asm();
            #line 442 
            break;
            #line 442 
            case (unsigned long)8: 
                                   #line 442 
            ;
            #line 443 
            ldv_inline_asm();
            #line 442 
            break;
            #line 442 
            default: 
                     #line 442 
            ;
            #line 442 
            __bad_percpu_size();
          }
          #line 442 
          pscr_ret__ = pfo_ret___1;
          #line 442 
          break;
          #line 442 
          case (unsigned long)8: 
                                 #line 442 
          ;
          #line 442 
          switch (4UL) {
            #line 442 
            case (unsigned long)1: 
                                   #line 442 
            ;
            #line 443 
            ldv_inline_asm();
            #line 442 
            break;
            #line 442 
            case (unsigned long)2: 
                                   #line 442 
            ;
            #line 443 
            ldv_inline_asm();
            #line 442 
            break;
            #line 442 
            case (unsigned long)4: 
                                   #line 442 
            ;
            #line 443 
            ldv_inline_asm();
            #line 442 
            break;
            #line 442 
            case (unsigned long)8: 
                                   #line 442 
            ;
            #line 443 
            ldv_inline_asm();
            #line 442 
            break;
            #line 442 
            default: 
                     #line 442 
            ;
            #line 442 
            __bad_percpu_size();
          }
          #line 442 
          pscr_ret__ = pfo_ret___2;
          #line 442 
          break;
          #line 442 
          default: 
                   #line 442 
          ;
          #line 442 
          __bad_size_call_parameter();
          #line 442 
          break;
        }
        #line 442 
        ;
        #line 442 
        ;
        #line 442 
        netdev_printk((char *)"\001",efx->net_dev,(char *)"IRQ %d on CPU %d not for me\n",irq,pscr_ret__);
      }
    #line 445 
    return IRQ_NONE;
  }
  {
    #line 447 
    void *__vpp_verify_0 = (void *)0;
    #line 447 
    void *tmp_4 = __vpp_verify_0;
  }
  #line 447 
  switch (4UL) {
    #line 447 
    int pfo_ret___6;
    #line 447 
    int pfo_ret___3;
    #line 447 
    int pfo_ret___4;
    #line 447 
    int pfo_ret___5;
    #line 447 
    case (unsigned long)1: 
                           #line 447 
    ;
    #line 447 
    switch (4UL) {
      #line 447 
      case (unsigned long)1: 
                             #line 447 
      ;
      #line 448 
      ldv_inline_asm();
      #line 447 
      break;
      #line 447 
      case (unsigned long)2: 
                             #line 447 
      ;
      #line 448 
      ldv_inline_asm();
      #line 447 
      break;
      #line 447 
      case (unsigned long)4: 
                             #line 447 
      ;
      #line 448 
      ldv_inline_asm();
      #line 447 
      break;
      #line 447 
      case (unsigned long)8: 
                             #line 447 
      ;
      #line 448 
      ldv_inline_asm();
      #line 447 
      break;
      #line 447 
      default: 
               #line 447 
      ;
      #line 447 
      __bad_percpu_size();
    }
    #line 447 
    pscr_ret___0 = pfo_ret___3;
    #line 447 
    break;
    #line 447 
    case (unsigned long)2: 
                           #line 447 
    ;
    #line 447 
    switch (4UL) {
      #line 447 
      case (unsigned long)1: 
                             #line 447 
      ;
      #line 448 
      ldv_inline_asm();
      #line 447 
      break;
      #line 447 
      case (unsigned long)2: 
                             #line 447 
      ;
      #line 448 
      ldv_inline_asm();
      #line 447 
      break;
      #line 447 
      case (unsigned long)4: 
                             #line 447 
      ;
      #line 448 
      ldv_inline_asm();
      #line 447 
      break;
      #line 447 
      case (unsigned long)8: 
                             #line 447 
      ;
      #line 448 
      ldv_inline_asm();
      #line 447 
      break;
      #line 447 
      default: 
               #line 447 
      ;
      #line 447 
      __bad_percpu_size();
    }
    #line 447 
    pscr_ret___0 = pfo_ret___4;
    #line 447 
    break;
    #line 447 
    case (unsigned long)4: 
                           #line 447 
    ;
    #line 447 
    switch (4UL) {
      #line 447 
      case (unsigned long)1: 
                             #line 447 
      ;
      #line 448 
      ldv_inline_asm();
      #line 447 
      break;
      #line 447 
      case (unsigned long)2: 
                             #line 447 
      ;
      #line 448 
      ldv_inline_asm();
      #line 447 
      break;
      #line 447 
      case (unsigned long)4: 
                             #line 447 
      ;
      #line 448 
      ldv_inline_asm();
      #line 447 
      break;
      #line 447 
      case (unsigned long)8: 
                             #line 447 
      ;
      #line 448 
      ldv_inline_asm();
      #line 447 
      break;
      #line 447 
      default: 
               #line 447 
      ;
      #line 447 
      __bad_percpu_size();
    }
    #line 447 
    pscr_ret___0 = pfo_ret___5;
    #line 447 
    break;
    #line 447 
    case (unsigned long)8: 
                           #line 447 
    ;
    #line 447 
    switch (4UL) {
      #line 447 
      case (unsigned long)1: 
                             #line 447 
      ;
      #line 448 
      ldv_inline_asm();
      #line 447 
      break;
      #line 447 
      case (unsigned long)2: 
                             #line 447 
      ;
      #line 448 
      ldv_inline_asm();
      #line 447 
      break;
      #line 447 
      case (unsigned long)4: 
                             #line 447 
      ;
      #line 448 
      ldv_inline_asm();
      #line 447 
      break;
      #line 447 
      case (unsigned long)8: 
                             #line 447 
      ;
      #line 448 
      ldv_inline_asm();
      #line 447 
      break;
      #line 447 
      default: 
               #line 447 
      ;
      #line 447 
      __bad_percpu_size();
    }
    #line 447 
    pscr_ret___0 = pfo_ret___6;
    #line 447 
    break;
    #line 447 
    default: 
             #line 447 
    ;
    #line 447 
    __bad_size_call_parameter();
    #line 447 
    break;
  }
  #line 447 
  efx->last_irq_cpu = pscr_ret___0;
  #line 448 
  if (0) 
    #line 448 
    if ((efx->msg_enable & 512U) != 0U) {
      #line 448 
      int pscr_ret___1;
      #line 448 
      ;
      #line 448 
      ;
      #line 448 
      ;
      #line 448 
      ;
      {
        #line 448 
        void *__vpp_verify_1 = (void *)0;
        #line 448 
        void *tmp_9 = __vpp_verify_1;
      }
      #line 448 
      switch (4UL) {
        #line 448 
        int pfo_ret___10;
        #line 448 
        int pfo_ret___7;
        #line 448 
        int pfo_ret___8;
        #line 448 
        int pfo_ret___9;
        #line 448 
        case (unsigned long)1: 
                               #line 448 
        ;
        #line 448 
        switch (4UL) {
          #line 448 
          case (unsigned long)1: 
                                 #line 448 
          ;
          #line 449 
          ldv_inline_asm();
          #line 448 
          break;
          #line 448 
          case (unsigned long)2: 
                                 #line 448 
          ;
          #line 449 
          ldv_inline_asm();
          #line 448 
          break;
          #line 448 
          case (unsigned long)4: 
                                 #line 448 
          ;
          #line 449 
          ldv_inline_asm();
          #line 448 
          break;
          #line 448 
          case (unsigned long)8: 
                                 #line 448 
          ;
          #line 449 
          ldv_inline_asm();
          #line 448 
          break;
          #line 448 
          default: 
                   #line 448 
          ;
          #line 448 
          __bad_percpu_size();
        }
        #line 448 
        pscr_ret___1 = pfo_ret___7;
        #line 448 
        break;
        #line 448 
        case (unsigned long)2: 
                               #line 448 
        ;
        #line 448 
        switch (4UL) {
          #line 448 
          case (unsigned long)1: 
                                 #line 448 
          ;
          #line 449 
          ldv_inline_asm();
          #line 448 
          break;
          #line 448 
          case (unsigned long)2: 
                                 #line 448 
          ;
          #line 449 
          ldv_inline_asm();
          #line 448 
          break;
          #line 448 
          case (unsigned long)4: 
                                 #line 448 
          ;
          #line 449 
          ldv_inline_asm();
          #line 448 
          break;
          #line 448 
          case (unsigned long)8: 
                                 #line 448 
          ;
          #line 449 
          ldv_inline_asm();
          #line 448 
          break;
          #line 448 
          default: 
                   #line 448 
          ;
          #line 448 
          __bad_percpu_size();
        }
        #line 448 
        pscr_ret___1 = pfo_ret___8;
        #line 448 
        break;
        #line 448 
        case (unsigned long)4: 
                               #line 448 
        ;
        #line 448 
        switch (4UL) {
          #line 448 
          case (unsigned long)1: 
                                 #line 448 
          ;
          #line 449 
          ldv_inline_asm();
          #line 448 
          break;
          #line 448 
          case (unsigned long)2: 
                                 #line 448 
          ;
          #line 449 
          ldv_inline_asm();
          #line 448 
          break;
          #line 448 
          case (unsigned long)4: 
                                 #line 448 
          ;
          #line 449 
          ldv_inline_asm();
          #line 448 
          break;
          #line 448 
          case (unsigned long)8: 
                                 #line 448 
          ;
          #line 449 
          ldv_inline_asm();
          #line 448 
          break;
          #line 448 
          default: 
                   #line 448 
          ;
          #line 448 
          __bad_percpu_size();
        }
        #line 448 
        pscr_ret___1 = pfo_ret___9;
        #line 448 
        break;
        #line 448 
        case (unsigned long)8: 
                               #line 448 
        ;
        #line 448 
        switch (4UL) {
          #line 448 
          case (unsigned long)1: 
                                 #line 448 
          ;
          #line 449 
          ldv_inline_asm();
          #line 448 
          break;
          #line 448 
          case (unsigned long)2: 
                                 #line 448 
          ;
          #line 449 
          ldv_inline_asm();
          #line 448 
          break;
          #line 448 
          case (unsigned long)4: 
                                 #line 448 
          ;
          #line 449 
          ldv_inline_asm();
          #line 448 
          break;
          #line 448 
          case (unsigned long)8: 
                                 #line 448 
          ;
          #line 449 
          ldv_inline_asm();
          #line 448 
          break;
          #line 448 
          default: 
                   #line 448 
          ;
          #line 448 
          __bad_percpu_size();
        }
        #line 448 
        pscr_ret___1 = pfo_ret___10;
        #line 448 
        break;
        #line 448 
        default: 
                 #line 448 
        ;
        #line 448 
        __bad_size_call_parameter();
        #line 448 
        break;
      }
      #line 448 
      ;
      #line 448 
      ;
      #line 448 
      netdev_printk((char *)"\001",efx->net_dev,(char *)"IRQ %d on CPU %d status ",irq,pscr_ret___1,int_ker->u32[3],int_ker->u32[2],int_ker->u32[1],int_ker->u32[0]);
    }
  #line 452 
  __read_once_size((void *)(& efx->irq_soft_enabled),(void *)(& __u.__c),1);
  #line 452 
  if ((long)((int)(__u.__val) != 0) == 0L) 
                                           #line 453 
                                           return IRQ_HANDLED;
  #line 456 
  syserr = (int)int_ker->u64[1] & 1;
  #line 457 
  if ((long)(syserr != 0) != 0L) {
    #line 458 
    return ef4_farch_fatal_interrupt(efx);
  }
  #line 464 
  queues = (int)(int_ker->u64[0] >> 40) & 15;
  #line 465 
  int_ker->u64[0] = 0ULL;
  #line 465 
  int_ker->u64[1] = 0ULL;
  #line 467 
  ldv_inline_asm();
  #line 467 
  falcon_irq_ack_a1(efx);
  #line 469 
  if ((queues & 1) != 0) {
    #line 470 
    ef4_schedule_channel_irq(ef4_get_channel(efx,0U));
  }
  #line 471 
  if ((queues & 2) != 0) {
    #line 472 
    ef4_schedule_channel_irq(ef4_get_channel(efx,1U));
  }
  #line 473 
  return IRQ_HANDLED;
}

#line 482  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon.c"
static int dummy_rx_push_rss_config(struct ef4_nic *efx, bool user, u32 *rx_indir_table)
{
  #line 488 
  return -38;
}

#line 491  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon.c"
static int falcon_b0_rx_push_rss_config(struct ef4_nic *efx, bool user, u32 *rx_indir_table)
{
  #line 494 
  ef4_oword_t temp;
  #line 498 
  memcpy((void *)(& temp),(void *)(& efx->rx_hash_key),16UL);
  #line 499 
  ef4_writeo(efx,& temp,2144U);
  #line 501 
  memcpy((void *)(& efx->rx_indir_table),(void *)rx_indir_table,512UL);
  #line 503 
  ef4_farch_rx_push_indir_table(efx);
  #line 504 
  return 0;
}

#line 516  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon.c"
static int falcon_spi_poll(struct ef4_nic *efx)
{
  #line 518 
  ef4_oword_t reg;
  #line 520 
  int tmp;
  #line 519 
  ef4_reado(efx,& reg,256U);
  #line 520 
  if ((reg.u64[0] & 2147483648ULL) != 0ULL) 
                                            #line 520 
                                            tmp = -16; else 
                                                            #line 520 
                                                            tmp = 0;
  #line 520 
  return tmp;
}

#line 524  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon.c"
static int falcon_spi_wait(struct ef4_nic *efx)
{
  #line 531 
  int i;
  #line 530 
  unsigned long timeout = jiffies + 26UL;
  #line 533 
  i = 0;
  #line 533 
  while (i <= 9) {
    {
      #line 534 
      if (falcon_spi_poll(efx) == 0) 
                                     #line 535 
                                     return 0;
      #line 536 
      __const_udelay(42950UL);
    }
    #line 533 
    i ++;
  }
  #line 539 
  while (1) {
    #line 540 
    if (falcon_spi_poll(efx) == 0) 
                                   #line 541 
                                   return 0;
    {
      #line 542 
      unsigned long __dummy;
      #line 542 
      unsigned long __dummy2;
      }
    #line 542 
    if (1 != 0) {
      {
        #line 542 
        unsigned long __dummy_0;
        #line 542 
        unsigned long __dummy2_0;
        }
      #line 542 
      if (1 != 0) 
        #line 542 
        if ((long)(jiffies - timeout) >= 0L) {
          #line 543 
          if ((efx->msg_enable & 8192U) != 0U) 
                                               #line 543 
                                               netdev_err(efx->net_dev,(char *)"timed out waiting for SPI\n");
          #line 545 
          return -110;
        }
    }
    #line 547 
    schedule_timeout_uninterruptible(1L);
  }
}

#line 552  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon.c"
static int falcon_spi_cmd(struct ef4_nic *efx, struct falcon_spi_device *spi, unsigned int command, int address, void *in, void *out, size_t len)
{
  #line 558 
  ef4_oword_t reg;
  #line 559 
  int rc;
  #line 556 
  bool addressed = (_Bool)(address >= 0);
  #line 557 
  bool reading = (_Bool)(out != (void *)0);
  #line 562 
  if (len > 16UL) 
                  #line 563 
                  return -22;
  #line 566 
  rc = falcon_spi_poll(efx);
  #line 567 
  if (rc != 0) 
               #line 568 
               return rc;
  #line 571 
  if ((int)addressed != 0) {
    #line 572 
    reg.u64[0] = (unsigned long long)address;
    #line 572 
    reg.u64[1] = 0ULL;
    #line 573 
    ef4_writeo(efx,& reg,272U);
  }
  #line 577 
  if (in != (void *)0) {
    #line 578 
    memcpy((void *)(& reg),in,len);
    #line 579 
    ef4_writeo(efx,& reg,288U);
  }
  {
    #line 583 
    unsigned long long tmp;
    #line 583 
    if ((int)addressed != 0) 
                             #line 583 
                             tmp = (unsigned long long)spi->addr_len << 8; else 
                                                                    #line 583 
                                                                    tmp = 0ULL;
    #line 583 
    reg.u64[0] = ((((((unsigned long long)spi->device_id << 24) | ((unsigned long long)len << 16)) | ((unsigned long long)reading << 15)) | tmp) | (unsigned long long)command) | 2147483648ULL;
    #line 583 
    reg.u64[1] = 0ULL;
  }
  #line 592 
  ef4_writeo(efx,& reg,256U);
  #line 595 
  rc = falcon_spi_wait(efx);
  #line 596 
  if (rc != 0) 
               #line 597 
               return rc;
  #line 600 
  if (out != (void *)0) {
    #line 601 
    ef4_reado(efx,& reg,288U);
    #line 602 
    memcpy(out,(void *)(& reg),len);
  }
  #line 605 
  return 0;
}

#line 609  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon.c"
__inline static u8 falcon_spi_munge_command(struct falcon_spi_device *spi, u8 command, unsigned int address)
{
  #line 612 
  return (unsigned char)((((int)((unsigned char)(address >> 8)) & (int)((unsigned char)spi->munge_address)) << 3U) | (int)command);
}

#line 616  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon.c"
static int falcon_spi_read(struct ef4_nic *efx, struct falcon_spi_device *spi, loff_t start, size_t len, size_t *retlen, u8 *buffer)
{
  #line 619 
  size_t block_len;
  #line 620 
  unsigned int command;
  #line 619 
  size_t pos = 0UL;
  #line 621 
  int rc = 0;
  #line 623 
  while (pos < len) {
    #line 624 
    size_t __UNIQUE_ID___x542;
    #line 624 
    unsigned long tmp;
    {
      #line 624 
      __UNIQUE_ID___x542 = len - pos;
      #line 624 
      unsigned long __UNIQUE_ID___y543 = 16UL;
      #line 624 
      if (__UNIQUE_ID___x542 < __UNIQUE_ID___y543) 
                                                   #line 624 
                                                   tmp = __UNIQUE_ID___x542; else 
                                                                    #line 624 
                                                                    tmp = __UNIQUE_ID___y543;
      }
    #line 624 
    block_len = tmp;
    #line 626 
    command = (unsigned int)falcon_spi_munge_command(spi,(unsigned char)3,
                                 (unsigned int)start + (unsigned int)pos);
    #line 627 
    rc = falcon_spi_cmd(efx,spi,command,(int)((unsigned long long)start + (unsigned long long)pos),(void *)0,(void *)(buffer + pos),block_len);
    #line 629 
    if (rc != 0) 
                 #line 630 
                 break;
    #line 631 
    pos += block_len;
    #line 634 
    ___might_sleep((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon.c",634,0);
    #line 634 
    _cond_resched();
    #line 635 
    if (signal_pending(ldv_get_current()) != 0) {
      #line 636 
      rc = -4;
      #line 637 
      break;
    }
  }
  #line 641 
  if (retlen != (size_t *)0UL) 
                               #line 642 
                               *retlen = pos;
  #line 643 
  return rc;
}

#line 658  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon.c"
static size_t falcon_spi_write_limit(struct falcon_spi_device *spi, size_t start)
{
  #line 660 
  unsigned long __UNIQUE_ID___x544;
  #line 660 
  unsigned long tmp;
  {
    #line 660 
    __UNIQUE_ID___x544 = 16UL;
    #line 660 
    size_t __UNIQUE_ID___y545 = (unsigned long)spi->block_size - ((unsigned long)(spi->block_size + 4294967295U) & start);
    #line 660 
    if (__UNIQUE_ID___x544 < __UNIQUE_ID___y545) 
                                                 #line 660 
                                                 tmp = __UNIQUE_ID___x544; else 
                                                                    #line 660 
                                                                    tmp = __UNIQUE_ID___y545;
    }
  #line 660 
  return tmp;
}

#line 666  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon.c"
static int falcon_spi_wait_write(struct ef4_nic *efx, struct falcon_spi_device *spi)
{
  #line 669 
  u8 status;
  #line 670 
  int rc;
  #line 668 
  unsigned long timeout = jiffies + 4UL;
  #line 672 
  while (1) {
    #line 673 
    rc = falcon_spi_cmd(efx,spi,5U,-1,(void *)0,(void *)(& status),1UL);
    #line 675 
    if (rc != 0) 
                 #line 676 
                 return rc;
    #line 677 
    if (((int)status & 1) == 0) 
                                #line 678 
                                return 0;
    {
      #line 679 
      unsigned long __dummy;
      #line 679 
      unsigned long __dummy2;
      }
    #line 679 
    if (1 != 0) {
      {
        #line 679 
        unsigned long __dummy_0;
        #line 679 
        unsigned long __dummy2_0;
        }
      #line 679 
      if (1 != 0) 
        #line 679 
        if ((long)(jiffies - timeout) >= 0L) {
          #line 680 
          if ((efx->msg_enable & 8192U) != 0U) 
                                               #line 680 
                                               netdev_err(efx->net_dev,(char *)"SPI write timeout on device %d",spi->device_id,(int)status);
          #line 684 
          return -110;
        }
    }
    #line 686 
    schedule_timeout_uninterruptible(1L);
  }
}

#line 691  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon.c"
static int falcon_spi_write(struct ef4_nic *efx, struct falcon_spi_device *spi, loff_t start, size_t len, size_t *retlen, u8 *buffer)
{
  #line 694 
  u8 verify_buffer[16U];
  #line 695 
  size_t block_len;
  #line 696 
  unsigned int command;
  #line 695 
  size_t pos = 0UL;
  #line 697 
  int rc = 0;
  #line 699 
  while (pos < len) {
    #line 704 
    size_t tmp_0;
    #line 704 
    size_t __UNIQUE_ID___x546;
    #line 700 
    rc = falcon_spi_cmd(efx,spi,6U,-1,(void *)0,(void *)0,0UL);
    #line 701 
    if (rc != 0) 
                 #line 702 
                 break;
    {
      #line 704 
      __UNIQUE_ID___x546 = len - pos;
      #line 704 
      size_t __UNIQUE_ID___y547 = falcon_spi_write_limit(spi,(unsigned long)((unsigned long long)start + (unsigned long long)pos));
      #line 704 
      if (__UNIQUE_ID___x546 < __UNIQUE_ID___y547) 
                                                   #line 704 
                                                   tmp_0 = __UNIQUE_ID___x546; else 
                                                                    #line 704 
                                                                    tmp_0 = __UNIQUE_ID___y547;
      }
    #line 704 
    block_len = tmp_0;
    #line 706 
    command = (unsigned int)falcon_spi_munge_command(spi,(unsigned char)2,
                                 (unsigned int)start + (unsigned int)pos);
    #line 707 
    rc = falcon_spi_cmd(efx,spi,command,(int)((unsigned long long)start + (unsigned long long)pos),(void *)(buffer + pos),(void *)0,block_len);
    #line 709 
    if (rc != 0) 
                 #line 710 
                 break;
    #line 712 
    rc = falcon_spi_wait_write(efx,spi);
    #line 713 
    if (rc != 0) 
                 #line 714 
                 break;
    #line 716 
    command = (unsigned int)falcon_spi_munge_command(spi,(unsigned char)3,
                                 (unsigned int)start + (unsigned int)pos);
    #line 717 
    rc = falcon_spi_cmd(efx,spi,command,(int)((unsigned long long)start + (unsigned long long)pos),(void *)0,(void *)(& verify_buffer),block_len);
    #line 719 
    if (memcmp((void *)(& verify_buffer),(void *)(buffer + pos),block_len) != 0) {
      #line 720 
      rc = -5;
      #line 721 
      break;
    }
    #line 724 
    pos += block_len;
    #line 727 
    ___might_sleep((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon.c",727,0);
    #line 727 
    _cond_resched();
    #line 728 
    if (signal_pending(ldv_get_current()) != 0) {
      #line 729 
      rc = -4;
      #line 730 
      break;
    }
  }
  #line 734 
  if (retlen != (size_t *)0UL) 
                               #line 735 
                               *retlen = pos;
  #line 736 
  return rc;
}

#line 740  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon.c"
static int falcon_spi_slow_wait(struct falcon_mtd_partition *part, bool uninterruptible)
{
  #line 744 
  u8 status;
  #line 745 
  int rc;
  #line 745 
  int i;
  #line 742 
  struct falcon_spi_device *spi = part->spi;
  #line 743 
  struct ef4_nic *efx = (struct ef4_nic *)part->common.mtd.priv;
  #line 748 
  i = 0;
  #line 748 
  while (i <= 39) {
    {
      {
        {
          #line 749 
          int __ret_warn_on = 0;
          #line 749 
          if ((long)(__ret_warn_on != 0) != 0L) {
            #line 750 
            ldv_inline_asm();
            #line 751 
            ldv_inline_asm();
          }
          #line 749 
          long tmp = (long)(__ret_warn_on != 0);
        }
        #line 749 
        __here_0: 
                  #line 749 
        ;
        #line 749 
        ldv_get_current()->task_state_change = (unsigned long)((void *)0);
        #line 749 
        if ((int)uninterruptible != 0) 
                                       #line 749 
                                       ldv_get_current()->state = 2L; else 
                                                                    #line 749 
                                                                    ldv_get_current()->state = 1L;
      }
      #line 751 
      schedule_timeout(25L);
      #line 752 
      rc = falcon_spi_cmd(efx,spi,5U,-1,(void *)0,(void *)(& status),1UL);
      #line 754 
      if (rc != 0) 
                   #line 755 
                   return rc;
      #line 756 
      if (((int)status & 1) == 0) 
                                  #line 757 
                                  return 0;
      #line 758 
      if (signal_pending(ldv_get_current()) != 0) 
                                                  #line 759 
                                                  return -4;
    }
    #line 748 
    i ++;
  }
  #line 761 
  printk((char *)"\001",(char *)(& part->common.name),part->common.dev_type_name);
  #line 763 
  return -110;
}

#line 767  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon.c"
static int falcon_spi_unlock(struct ef4_nic *efx, struct falcon_spi_device *spi)
{
  #line 771 
  u8 status;
  #line 772 
  int rc;
  #line 769 
  u8 unlock_mask = (unsigned char)28U;
  #line 774 
  rc = falcon_spi_cmd(efx,spi,5U,-1,(void *)0,(void *)(& status),1UL);
  #line 776 
  if (rc != 0) 
               #line 777 
               return rc;
  #line 779 
  if (((unsigned int)status & 28U) == 0U) 
                                          #line 780 
                                          return 0;
  #line 782 
  rc = falcon_spi_cmd(efx,spi,6U,-1,(void *)0,(void *)0,0UL);
  #line 783 
  if (rc != 0) 
               #line 784 
               return rc;
  #line 785 
  rc = falcon_spi_cmd(efx,spi,80U,-1,(void *)0,(void *)0,0UL);
  #line 786 
  if (rc != 0) 
               #line 787 
               return rc;
  #line 789 
  status = (unsigned char)((unsigned int)status & 227U);
  #line 790 
  rc = falcon_spi_cmd(efx,spi,1U,-1,(void *)(& status),(void *)0,1UL);
  #line 792 
  if (rc != 0) 
               #line 793 
               return rc;
  #line 794 
  rc = falcon_spi_wait_write(efx,spi);
  #line 795 
  if (rc != 0) 
               #line 796 
               return rc;
  #line 798 
  return 0;
}

#line 804  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon.c"
static int falcon_spi_erase(struct falcon_mtd_partition *part, loff_t start, size_t len)
{
  #line 808 
  unsigned int pos;
  #line 808 
  unsigned int block_len;
  #line 809 
  u8 empty[16U];
  #line 810 
  u8 buffer[16U];
  #line 811 
  int rc;
  #line 806 
  struct falcon_spi_device *spi = part->spi;
  #line 807 
  struct ef4_nic *efx = (struct ef4_nic *)part->common.mtd.priv;
  #line 813 
  if ((unsigned long)spi->erase_size != len) 
                                             #line 814 
                                             return -22;
  #line 816 
  if ((unsigned int)spi->erase_command == 0U) 
                                              #line 817 
                                              return -95;
  #line 819 
  rc = falcon_spi_unlock(efx,spi);
  #line 820 
  if (rc != 0) 
               #line 821 
               return rc;
  #line 822 
  rc = falcon_spi_cmd(efx,spi,6U,-1,(void *)0,(void *)0,0UL);
  #line 823 
  if (rc != 0) 
               #line 824 
               return rc;
  #line 825 
  rc = falcon_spi_cmd(efx,spi,(unsigned int)spi->erase_command,(int)start,(void *)0,(void *)0,0UL);
  #line 827 
  if (rc != 0) 
               #line 828 
               return rc;
  #line 829 
  rc = falcon_spi_slow_wait(part,(_Bool)0);
  #line 832 
  memset((void *)(& empty),255,16UL);
  #line 833 
  pos = 0U;
  #line 833 
  while ((unsigned long)pos < len) {
    {
      #line 834 
      size_t __UNIQUE_ID___x549;
      #line 834 
      unsigned long tmp;
      {
        #line 834 
        __UNIQUE_ID___x549 = len - (unsigned long)pos;
        #line 834 
        unsigned long __UNIQUE_ID___y550 = 16UL;
        #line 834 
        if (__UNIQUE_ID___x549 < __UNIQUE_ID___y550) 
                                                     #line 834 
                                                     tmp = __UNIQUE_ID___x549; else 
                                                                    #line 834 
                                                                    tmp = __UNIQUE_ID___y550;
        }
      #line 834 
      block_len = (unsigned int)tmp;
      #line 835 
      rc = falcon_spi_read(efx,spi,(long long)pos + start,(unsigned long)block_len,(size_t *)0UL,(u8 *)(& buffer));
      #line 837 
      if (rc != 0) 
                   #line 838 
                   return rc;
      #line 839 
      if (memcmp((void *)(& empty),(void *)(& buffer),(unsigned long)block_len) != 0) 
        #line 840 
        return -5;
      #line 843 
      ___might_sleep((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon.c",843,0);
      #line 843 
      _cond_resched();
      #line 844 
      if (signal_pending(ldv_get_current()) != 0) 
                                                  #line 845 
                                                  return -4;
    }
    #line 833 
    pos += block_len;
  }
  #line 848 
  return rc;
}

#line 851  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon.c"
static void falcon_mtd_rename(struct ef4_mtd_partition *part)
{
  #line 853 
  struct ef4_nic *efx = (struct ef4_nic *)part->mtd.priv;
  #line 855 
  snprintf((char *)(& part->name),36UL,(char *)"%s %s",(char *)(& efx->name),part->type_name);
  #line 857 
  return;
}

#line 859  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon.c"
static int falcon_mtd_read(struct mtd_info *mtd, loff_t start, size_t len, size_t *retlen, u8 *buffer)
{
  #line 862 
  void *__mptr;
  #line 865 
  int rc;
  #line 862 
  __mptr = (void *)mtd;
  #line 862 
  struct falcon_mtd_partition *part = ((struct falcon_mtd_partition *)(__mptr + 18446744073709551600U));
  #line 863 
  struct ef4_nic *efx = (struct ef4_nic *)mtd->priv;
  #line 864 
  struct falcon_nic_data *nic_data = (struct falcon_nic_data *)efx->nic_data;
  #line 867 
  rc = cif_mutex_lock_interruptible_spi_lock_of_falcon_nic_data(& nic_data->spi_lock);
  #line 868 
  if (rc != 0) 
               #line 869 
               return rc;
  #line 870 
  rc = falcon_spi_read(efx,part->spi,(long long)((unsigned long long)part->offset + (unsigned long long)start),len,retlen,buffer);
  #line 872 
  cif_mutex_unlock_spi_lock_of_falcon_nic_data(& nic_data->spi_lock);
  #line 873 
  return rc;
}

#line 876  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon.c"
static int falcon_mtd_erase(struct mtd_info *mtd, loff_t start, size_t len)
{
  #line 878 
  void *__mptr;
  #line 881 
  int rc;
  #line 878 
  __mptr = (void *)mtd;
  #line 878 
  struct falcon_mtd_partition *part = ((struct falcon_mtd_partition *)(__mptr + 18446744073709551600U));
  #line 879 
  struct ef4_nic *efx = (struct ef4_nic *)mtd->priv;
  #line 880 
  struct falcon_nic_data *nic_data = (struct falcon_nic_data *)efx->nic_data;
  #line 883 
  rc = cif_mutex_lock_interruptible_spi_lock_of_falcon_nic_data(& nic_data->spi_lock);
  #line 884 
  if (rc != 0) 
               #line 885 
               return rc;
  #line 886 
  rc = falcon_spi_erase(part,(long long)((unsigned long long)part->offset + (unsigned long long)start),len);
  #line 887 
  cif_mutex_unlock_spi_lock_of_falcon_nic_data(& nic_data->spi_lock);
  #line 888 
  return rc;
}

#line 891  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon.c"
static int falcon_mtd_write(struct mtd_info *mtd, loff_t start, size_t len, size_t *retlen, u8 *buffer)
{
  #line 894 
  void *__mptr;
  #line 897 
  int rc;
  #line 894 
  __mptr = (void *)mtd;
  #line 894 
  struct falcon_mtd_partition *part = ((struct falcon_mtd_partition *)(__mptr + 18446744073709551600U));
  #line 895 
  struct ef4_nic *efx = (struct ef4_nic *)mtd->priv;
  #line 896 
  struct falcon_nic_data *nic_data = (struct falcon_nic_data *)efx->nic_data;
  #line 899 
  rc = cif_mutex_lock_interruptible_spi_lock_of_falcon_nic_data(& nic_data->spi_lock);
  #line 900 
  if (rc != 0) 
               #line 901 
               return rc;
  #line 902 
  rc = falcon_spi_write(efx,part->spi,(long long)((unsigned long long)part->offset + (unsigned long long)start),len,retlen,buffer);
  #line 904 
  cif_mutex_unlock_spi_lock_of_falcon_nic_data(& nic_data->spi_lock);
  #line 905 
  return rc;
}

#line 908  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon.c"
static int falcon_mtd_sync(struct mtd_info *mtd)
{
  #line 910 
  void *__mptr;
  #line 913 
  int rc;
  #line 910 
  __mptr = (void *)mtd;
  #line 910 
  struct falcon_mtd_partition *part = ((struct falcon_mtd_partition *)(__mptr + 18446744073709551600U));
  #line 911 
  struct ef4_nic *efx = (struct ef4_nic *)mtd->priv;
  #line 912 
  struct falcon_nic_data *nic_data = (struct falcon_nic_data *)efx->nic_data;
  #line 915 
  cif_mutex_lock_spi_lock_of_falcon_nic_data(& nic_data->spi_lock);
  #line 916 
  rc = falcon_spi_slow_wait(part,(_Bool)1);
  #line 917 
  cif_mutex_unlock_spi_lock_of_falcon_nic_data(& nic_data->spi_lock);
  #line 918 
  return rc;
}

#line 921  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon.c"
static int falcon_mtd_probe(struct ef4_nic *efx)
{
  #line 924 
  struct falcon_mtd_partition *parts;
  #line 925 
  struct falcon_spi_device *spi;
  #line 926 
  size_t n_parts;
  #line 923 
  struct falcon_nic_data *nic_data = (struct falcon_nic_data *)efx->nic_data;
  #line 927 
  int rc = -19;
  {
    #line 929 
    bool __warned;
    #line 929 
    int __ret_warn_once = rtnl_is_locked() == 0;
    #line 929 
    if ((long)(__ret_warn_once != 0) != 0L && (long)(! __warned) != 0L) {
      #line 929 
      __warned = (_Bool)1;
      {
        #line 929 
        int __ret_warn_on = 1;
        #line 929 
        if ((long)(__ret_warn_on != 0) != 0L) {
          #line 929 
          __warn_printk((char *)"RTNL: assertion failed at %s (%d)\n",(char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon.c",929);
          #line 930 
          ldv_inline_asm();
          #line 931 
          ldv_inline_asm();
        }
        #line 929 
        long tmp_2 = (long)(__ret_warn_on != 0);
      }
    }
    #line 929 
    long tmp_4 = (long)(__ret_warn_once != 0);
  }
  #line 932 
  parts = (struct falcon_mtd_partition *)kcalloc_2(2UL,2112UL,3264U);
  #line 933 
  if (parts == (struct falcon_mtd_partition *)0) 
                                                 #line 934 
                                                 return -12;
  #line 935 
  n_parts = 0UL;
  #line 937 
  spi = & nic_data->spi_flash;
  #line 938 
  if ((int)falcon_spi_present(spi) != 0) 
    #line 938 
    if (spi->size > 32768U) {
      #line 939 
      (parts + n_parts)->spi = spi;
      #line 940 
      (parts + n_parts)->offset = 32768UL;
      #line 941 
      (parts + n_parts)->common.dev_type_name = (char *)"flash";
      #line 942 
      (parts + n_parts)->common.type_name = (char *)"sfc_flash_bootrom";
      #line 943 
      (parts + n_parts)->common.mtd.type = (unsigned char)3U;
      #line 944 
      (parts + n_parts)->common.mtd.flags = 3072U;
      #line 945 
      (parts + n_parts)->common.mtd.size = (unsigned long long)(spi->size + 4294934528U);
      #line 946 
      (parts + n_parts)->common.mtd.erasesize = spi->erase_size;
      #line 947 
      n_parts ++;
    }
  #line 950 
  spi = & nic_data->spi_eeprom;
  #line 951 
  if ((int)falcon_spi_present(spi) != 0) 
    #line 951 
    if (spi->size > 2048U) {
      #line 959 
      unsigned int __UNIQUE_ID___x552;
      #line 959 
      unsigned int tmp_2_8;
      #line 952 
      (parts + n_parts)->spi = spi;
      #line 953 
      (parts + n_parts)->offset = 2048UL;
      #line 954 
      (parts + n_parts)->common.dev_type_name = (char *)"EEPROM";
      #line 955 
      (parts + n_parts)->common.type_name = (char *)"sfc_bootconfig";
      #line 956 
      (parts + n_parts)->common.mtd.type = (unsigned char)1U;
      #line 957 
      (parts + n_parts)->common.mtd.flags = 7168U;
      {
        #line 959 
        __UNIQUE_ID___x552 = spi->size;
        #line 959 
        unsigned int __UNIQUE_ID___y553 = 6144U;
        #line 959 
        if (__UNIQUE_ID___x552 < __UNIQUE_ID___y553) 
                                                     #line 959 
                                                     tmp_2_8 = __UNIQUE_ID___x552; else 
                                                                    #line 959 
                                                                    tmp_2_8 = __UNIQUE_ID___y553;
        }
      #line 958 
      (parts + n_parts)->common.mtd.size = (unsigned long long)(tmp_2_8 + 4294965248U);
      #line 961 
      (parts + n_parts)->common.mtd.erasesize = spi->erase_size;
      #line 962 
      n_parts ++;
    }
  #line 965 
  rc = ef4_mtd_add(efx,& parts->common,n_parts,2112UL);
  #line 966 
  if (rc != 0) 
               #line 967 
               kfree((void *)parts);
  #line 968 
  return rc;
}

#line 981  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon.c"
static void falcon_setup_xaui(struct ef4_nic *efx)
{
  #line 983 
  ef4_oword_t sdctl;
  #line 983 
  ef4_oword_t txdrv;
  #line 987 
  if (efx->phy_type == 0U) 
                           #line 988 
                           return;
  #line 990 
  ef4_reado(efx,& sdctl,4880U);
  #line 991 
  sdctl.u64[0] &= 18446744073709518847ULL;
  #line 991 
  sdctl.u64[1] = sdctl.u64[1];
  #line 992 
  sdctl.u64[0] &= 18446744073709535231ULL;
  #line 992 
  sdctl.u64[1] = sdctl.u64[1];
  #line 993 
  sdctl.u64[0] &= 18446744073709543423ULL;
  #line 993 
  sdctl.u64[1] = sdctl.u64[1];
  #line 994 
  sdctl.u64[0] &= 18446744073709547519ULL;
  #line 994 
  sdctl.u64[1] = sdctl.u64[1];
  #line 995 
  sdctl.u64[0] &= 18446744073709549567ULL;
  #line 995 
  sdctl.u64[1] = sdctl.u64[1];
  #line 996 
  sdctl.u64[0] &= 18446744073709550591ULL;
  #line 996 
  sdctl.u64[1] = sdctl.u64[1];
  #line 997 
  sdctl.u64[0] &= 18446744073709551103ULL;
  #line 997 
  sdctl.u64[1] = sdctl.u64[1];
  #line 998 
  sdctl.u64[0] &= 18446744073709551359ULL;
  #line 998 
  sdctl.u64[1] = sdctl.u64[1];
  #line 999 
  ef4_writeo(efx,& sdctl,4880U);
  #line 1001 
  txdrv.u64[0] = 4008596821ULL;
  #line 1001 
  txdrv.u64[1] = 0ULL;
  #line 1010 
  ef4_writeo(efx,& txdrv,4896U);
  #line 1011 
  return;
}

#line 1013  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon.c"
int falcon_reset_xaui(struct ef4_nic *efx)
{
  #line 1016 
  ef4_oword_t reg;
  #line 1017 
  int count;
  #line 1015 
  struct falcon_nic_data *nic_data = (struct falcon_nic_data *)efx->nic_data;
  {
    #line 1020 
    int __ret_warn_on = nic_data->stats_disable_count == 0U;
    #line 1020 
    if ((long)(__ret_warn_on != 0) != 0L) {
      #line 1021 
      ldv_inline_asm();
      #line 1022 
      ldv_inline_asm();
    }
    #line 1020 
    long tmp = (long)(__ret_warn_on != 0);
  }
  #line 1023 
  reg.u64[0] = 1ULL;
  #line 1023 
  reg.u64[1] = 0ULL;
  #line 1024 
  ef4_writeo(efx,& reg,4864U);
  #line 1027 
  count = 0;
  #line 1027 
  while (count <= 999) {
    #line 1028 
    ef4_reado(efx,& reg,4864U);
    #line 1029 
    if ((reg.u64[0] & 1ULL) == 0ULL && (reg.u64[0] & 65536ULL) == 0ULL) {
      #line 1031 
      falcon_setup_xaui(efx);
      #line 1032 
      return 0;
    }
    #line 1034 
    __const_udelay(42950UL);
    #line 1027 
    count ++;
  }
  #line 1036 
  if ((efx->msg_enable & 8192U) != 0U) 
                                       #line 1036 
                                       netdev_err(efx->net_dev,(char *)"timed out waiting for XAUI/XGXS reset\n");
  #line 1038 
  return -110;
}

#line 1041  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon.c"
static void falcon_ack_status_intr(struct ef4_nic *efx)
{
  #line 1044 
  ef4_oword_t reg;
  #line 1043 
  struct falcon_nic_data *nic_data = (struct falcon_nic_data *)efx->nic_data;
  #line 1046 
  if (ef4_nic_rev(efx) != 2) 
                             #line 1047 
                             return;
  else 
    #line 1046 
    if (((66600958 >> (unsigned int)efx->loopback_mode) & 1) != 0) 
                                                                   #line 1047 
                                                                   return;
  #line 1050 
  if (! efx->link_state.up) 
                            #line 1051 
                            return;
  #line 1055 
  if ((int)nic_data->xmac_poll_required != 0) 
                                              #line 1056 
                                              return;
  #line 1058 
  ef4_reado(efx,& reg,4848U);
  #line 1059 
  return;
}

#line 1061  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon.c"
static bool falcon_xgxs_link_ok(struct ef4_nic *efx)
{
  #line 1063 
  ef4_oword_t reg;
  #line 1064 
  bool align_done;
  #line 1065 
  int sync_status;
  #line 1064 
  bool link_ok = (_Bool)0;
  #line 1068 
  ef4_reado(efx,& reg,4960U);
  #line 1070 
  align_done = (_Bool)(((reg.u64[0] >> 20) & 1ULL) != 0ULL);
  #line 1071 
  sync_status = (int)(reg.u64[0] >> 16) & 15;
  #line 1072 
  if ((int)align_done != 0 && sync_status == 15) 
                                                 #line 1073 
                                                 link_ok = (_Bool)1;
  #line 1076 
  reg.u64[0] |= 61440ULL;
  #line 1076 
  reg.u64[1] = reg.u64[1];
  #line 1077 
  reg.u64[0] |= 240ULL;
  #line 1077 
  reg.u64[1] = reg.u64[1];
  #line 1078 
  reg.u64[0] |= 15ULL;
  #line 1078 
  reg.u64[1] = reg.u64[1];
  #line 1079 
  ef4_writeo(efx,& reg,4960U);
  #line 1081 
  return link_ok;
}

#line 1084  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon.c"
static bool falcon_xmac_link_ok(struct ef4_nic *efx)
{
  #line 1093 
  int tmp_1;
  #line 1093 
  if (efx->loopback_mode == (unsigned int)LOOPBACK_XGMII) 
                                                          #line 1093 
                                                          goto _LOR;
  else {
    #line 1092 
    if ((int)falcon_xgxs_link_ok(efx) != 0) 
      #line 1093 
      _LOR: 
            #line 1093 
            if ((efx->mdio.mmds & 16U) == 0U || ((66600958 >> (unsigned int)efx->loopback_mode) & 1) != 0) 
              #line 1093 
              tmp_1 = 1;
            else {
              #line 1095 
              if ((int)ef4_mdio_phyxgxs_lane_sync(efx) != 0) 
                                                             #line 1093 
                                                             tmp_1 = 1; else 
                                                                    #line 1093 
                                                                    tmp_1 = 0;
            }
    else 
         #line 1093 
         tmp_1 = 0;
  }
  #line 1093 
  return (_Bool)(tmp_1 != 0);
}

#line 1099  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon.c"
static void falcon_reconfigure_xmac_core(struct ef4_nic *efx)
{
  #line 1101 
  unsigned int max_frame_len;
  #line 1102 
  ef4_oword_t reg;
  #line 1103 
  bool rx_fc = (_Bool)(((int)efx->link_state.fc & 2) != 0);
  #line 1104 
  bool tx_fc = (_Bool)(((int)efx->link_state.fc & 1) != 0);
  #line 1107 
  reg.u64[0] = 3136ULL;
  #line 1107 
  reg.u64[1] = 0ULL;
  #line 1111 
  ef4_writeo(efx,& reg,4640U);
  #line 1114 
  reg.u64[0] = ((unsigned long long)tx_fc << 10) | 196902ULL;
  #line 1114 
  reg.u64[1] = 0ULL;
  #line 1121 
  ef4_writeo(efx,& reg,4656U);
  #line 1124 
  reg.u64[0] = ((unsigned long long)(! efx->unicast_filter) << 9) | 33556482ULL;
  #line 1124 
  reg.u64[1] = 0ULL;
  #line 1130 
  ef4_writeo(efx,& reg,4672U);
  #line 1133 
  max_frame_len = ((efx->net_dev)->mtu + 45U) & 4294967288U;
  #line 1134 
  reg.u64[0] = (unsigned long long)max_frame_len;
  #line 1134 
  reg.u64[1] = 0ULL;
  #line 1135 
  ef4_writeo(efx,& reg,4832U);
  #line 1136 
  reg.u64[0] = ((unsigned long long)max_frame_len << 16) | 2147483648ULL;
  #line 1136 
  reg.u64[1] = 0ULL;
  #line 1139 
  ef4_writeo(efx,& reg,4816U);
  #line 1141 
  reg.u64[0] = (unsigned long long)(! rx_fc) | 4294836224ULL;
  #line 1141 
  reg.u64[1] = 0ULL;
  #line 1144 
  ef4_writeo(efx,& reg,4720U);
  #line 1147 
  memcpy((void *)(& reg),(void *)(efx->net_dev)->dev_addr,4UL);
  #line 1148 
  ef4_writeo(efx,& reg,4608U);
  #line 1149 
  memcpy((void *)(& reg),(void *)((efx->net_dev)->dev_addr + 4U),2UL);
  #line 1150 
  ef4_writeo(efx,& reg,4624U);
  #line 1151 
  return;
}

#line 1153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon.c"
static void falcon_reconfigure_xgxs_core(struct ef4_nic *efx)
{
  #line 1155 
  ef4_oword_t reg;
  #line 1159 
  bool old_xgmii_loopback;
  #line 1159 
  bool old_xgxs_loopback;
  #line 1159 
  bool old_xaui_loopback;
  #line 1156 
  bool xgxs_loopback = (_Bool)(efx->loopback_mode == (unsigned int)LOOPBACK_XGXS);
  #line 1157 
  bool xaui_loopback = (_Bool)(efx->loopback_mode == (unsigned int)LOOPBACK_XAUI);
  #line 1158 
  bool xgmii_loopback = (_Bool)(efx->loopback_mode == (unsigned int)LOOPBACK_XGMII);
  #line 1163 
  ef4_reado(efx,& reg,4960U);
  #line 1164 
  old_xgxs_loopback = (_Bool)(((reg.u64[0] >> 23) & 1ULL) != 0ULL);
  #line 1165 
  old_xgmii_loopback = (_Bool)(((reg.u64[0] >> 22) & 1ULL) != 0ULL);
  #line 1167 
  ef4_reado(efx,& reg,4880U);
  #line 1168 
  old_xaui_loopback = (_Bool)((reg.u64[0] & 1ULL) != 0ULL);
  #line 1171 
  if (((int)xgxs_loopback != (int)old_xgxs_loopback || (int)xaui_loopback != (int)old_xaui_loopback) || (int)xgmii_loopback != (int)old_xgmii_loopback) 
    #line 1174 
    falcon_reset_xaui(efx);
  #line 1176 
  ef4_reado(efx,& reg,4960U);
  {
    #line 1177 
    unsigned long long tmp;
    #line 1177 
    if ((int)xgxs_loopback != 0 || (int)xaui_loopback != 0) 
                                                            #line 1177 
                                                            tmp = 4278190080ULL; else 
                                                                    #line 1177 
                                                                    tmp = 0ULL;
    #line 1177 
    reg.u64[0] = (reg.u64[0] & 18446744069431361535ULL) | tmp;
    #line 1177 
    reg.u64[1] = reg.u64[1];
  }
  #line 1180 
  reg.u64[0] = (reg.u64[0] & 18446744073701163007ULL) | ((unsigned long long)xgxs_loopback << 23);
  #line 1180 
  reg.u64[1] = reg.u64[1];
  #line 1181 
  reg.u64[0] = (reg.u64[0] & 18446744073705357311ULL) | ((unsigned long long)xgmii_loopback << 22);
  #line 1181 
  reg.u64[1] = reg.u64[1];
  #line 1182 
  ef4_writeo(efx,& reg,4960U);
  #line 1184 
  ef4_reado(efx,& reg,4880U);
  #line 1185 
  reg.u64[0] = (reg.u64[0] & 18446744073709551607ULL) | ((unsigned long long)xaui_loopback << 3);
  #line 1185 
  reg.u64[1] = reg.u64[1];
  #line 1186 
  reg.u64[0] = (reg.u64[0] & 18446744073709551611ULL) | ((unsigned long long)xaui_loopback << 2);
  #line 1186 
  reg.u64[1] = reg.u64[1];
  #line 1187 
  reg.u64[0] = (reg.u64[0] & 18446744073709551613ULL) | ((unsigned long long)xaui_loopback << 1);
  #line 1187 
  reg.u64[1] = reg.u64[1];
  #line 1188 
  reg.u64[0] = (reg.u64[0] & 18446744073709551614ULL) | (unsigned long long)xaui_loopback;
  #line 1188 
  reg.u64[1] = reg.u64[1];
  #line 1189 
  ef4_writeo(efx,& reg,4880U);
  #line 1190 
  return;
}

#line 1194  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon.c"
static bool falcon_xmac_link_ok_retry(struct ef4_nic *efx, int tries)
{
  #line 1196 
  bool mac_up = falcon_xmac_link_ok(efx);
  #line 1198 
  if ((((unsigned long long)(1 << (unsigned int)efx->loopback_mode) & efx->loopback_modes) & 67108864ULL) != 0ULL) 
    #line 1201 
    return mac_up;
  else {
    #line 1198 
    if ((int)ef4_phy_mode_disabled(efx->phy_mode) != 0) 
                                                        #line 1201 
                                                        return mac_up;
  }
  #line 1203 
  falcon_stop_nic_stats(efx);
  #line 1205 
  while (! mac_up && tries != 0) {
    #line 1206 
    if ((efx->msg_enable & 8192U) != 0U) {
      #line 1206 
      bool branch;
      #line 1206 
      struct _ddebug __UNIQUE_ID_ddebug555 = {.modname = (char *)"sfc_falcon", .function = (char *)"falcon_xmac_link_ok_retry", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon.c", .format = (char *)"bashing xaui\n", .lineno = (unsigned int)1206U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1206 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug555.key.dd_key_false.key,(_Bool)0);
      #line 1206 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 1206 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug555,efx->net_dev,(char *)"bashing xaui\n");
    }
    #line 1207 
    falcon_reset_xaui(efx);
    #line 1208 
    __const_udelay(859000UL);
    #line 1210 
    mac_up = falcon_xmac_link_ok(efx);
    #line 1211 
    tries --;
  }
  #line 1214 
  falcon_start_nic_stats(efx);
  #line 1216 
  return mac_up;
}

#line 1219  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon.c"
static bool falcon_xmac_check_fault(struct ef4_nic *efx)
{
  #line 1221 
  int tmp_0;
  #line 1221 
  if ((int)falcon_xmac_link_ok_retry(efx,5) != 0) 
                                                  #line 1221 
                                                  tmp_0 = 0; else 
                                                                  #line 1221 
                                                                  tmp_0 = 1;
  #line 1221 
  return (_Bool)(tmp_0 != 0);
}

#line 1224  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon.c"
static int falcon_reconfigure_xmac(struct ef4_nic *efx)
{
  #line 1235 
  int tmp_0;
  #line 1226 
  struct falcon_nic_data *nic_data = (struct falcon_nic_data *)efx->nic_data;
  #line 1228 
  ef4_farch_filter_sync_rx_mode(efx);
  #line 1230 
  falcon_reconfigure_xgxs_core(efx);
  #line 1231 
  falcon_reconfigure_xmac_core(efx);
  #line 1233 
  falcon_reconfigure_mac_wrapper(efx);
  #line 1235 
  if ((int)falcon_xmac_link_ok_retry(efx,5) != 0) 
                                                  #line 1235 
                                                  tmp_0 = 0; else 
                                                                  #line 1235 
                                                                  tmp_0 = 1;
  #line 1235 
  nic_data->xmac_poll_required = (_Bool)(tmp_0 != 0);
  #line 1236 
  falcon_ack_status_intr(efx);
  #line 1238 
  return 0;
}

#line 1241  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon.c"
static void falcon_poll_xmac(struct ef4_nic *efx)
{
  #line 1249 
  int tmp_0;
  #line 1243 
  struct falcon_nic_data *nic_data = (struct falcon_nic_data *)efx->nic_data;
  #line 1246 
  if (! efx->link_state.up || ! nic_data->xmac_poll_required) 
                                                              #line 1247 
                                                              return;
  #line 1249 
  if ((int)falcon_xmac_link_ok_retry(efx,1) != 0) 
                                                  #line 1249 
                                                  tmp_0 = 0; else 
                                                                  #line 1249 
                                                                  tmp_0 = 1;
  #line 1249 
  nic_data->xmac_poll_required = (_Bool)(tmp_0 != 0);
  #line 1250 
  falcon_ack_status_intr(efx);
  #line 1251 
  return;
}

#line 1260  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon.c"
static void falcon_push_multicast_hash(struct ef4_nic *efx)
{
  #line 1262 
  union ef4_multicast_hash *mc_hash = & efx->multicast_hash;
  {
    #line 1264 
    int tmp_0;
    #line 1264 
    if (mutex_is_locked(& efx->mac_lock)) 
                                          #line 1264 
                                          tmp_0 = 0; else 
                                                          #line 1264 
                                                          tmp_0 = 1;
    #line 1264 
    int __ret_warn_on = tmp_0;
    #line 1264 
    if ((long)(__ret_warn_on != 0) != 0L) {
      #line 1265 
      ldv_inline_asm();
      #line 1266 
      ldv_inline_asm();
    }
    #line 1264 
    long tmp_2 = (long)(__ret_warn_on != 0);
  }
  #line 1266 
  ef4_writeo(efx,& mc_hash->oword[0],3232U);
  #line 1267 
  ef4_writeo(efx,& mc_hash->oword[1],3248U);
  #line 1268 
  return;
}

#line 1270  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon.c"
static void falcon_reset_macs(struct ef4_nic *efx)
{
  #line 1273 
  ef4_oword_t reg;
  #line 1273 
  ef4_oword_t mac_ctrl;
  #line 1274 
  int count;
  #line 1272 
  struct falcon_nic_data *nic_data = (struct falcon_nic_data *)efx->nic_data;
  #line 1276 
  if (ef4_nic_rev(efx) <= 1) {
    #line 1280 
    reg.u64[0] = 1ULL;
    #line 1280 
    reg.u64[1] = 0ULL;
    #line 1281 
    ef4_writeo(efx,& reg,4640U);
    #line 1283 
    count = 0;
    #line 1283 
    while (count <= 9999) {
      #line 1284 
      ef4_reado(efx,& reg,4640U);
      #line 1285 
      if ((reg.u64[0] & 1ULL) == 0ULL) 
                                       #line 1287 
                                       return;
      #line 1288 
      __const_udelay(42950UL);
      #line 1283 
      count ++;
    }
    #line 1291 
    if ((efx->msg_enable & 8192U) != 0U) 
                                         #line 1291 
                                         netdev_err(efx->net_dev,(char *)"timed out waiting for XMAC core reset\n");
  }
  {
    #line 1296 
    int __ret_warn_on = nic_data->stats_disable_count == 0U;
    #line 1296 
    if ((long)(__ret_warn_on != 0) != 0L) {
      #line 1297 
      ldv_inline_asm();
      #line 1298 
      ldv_inline_asm();
    }
    #line 1296 
    long tmp_2 = (long)(__ret_warn_on != 0);
  }
  #line 1298 
  ef4_reado(efx,& mac_ctrl,3200U);
  #line 1299 
  mac_ctrl.u64[0] |= 128ULL;
  #line 1299 
  mac_ctrl.u64[1] = mac_ctrl.u64[1];
  #line 1300 
  ef4_writeo(efx,& mac_ctrl,3200U);
  #line 1302 
  ef4_reado(efx,& reg,544U);
  #line 1303 
  reg.u64[0] |= 8388608ULL;
  #line 1303 
  reg.u64[1] = reg.u64[1];
  #line 1304 
  reg.u64[0] |= 16777216ULL;
  #line 1304 
  reg.u64[1] = reg.u64[1];
  #line 1305 
  reg.u64[0] |= 4194304ULL;
  #line 1305 
  reg.u64[1] = reg.u64[1];
  #line 1306 
  ef4_writeo(efx,& reg,544U);
  #line 1308 
  count = 0;
  #line 1309 
  while (1) {
    #line 1310 
    ef4_reado(efx,& reg,544U);
    #line 1311 
    if (((reg.u64[0] & 8388608ULL) == 0ULL && (reg.u64[0] & 16777216ULL) == 0ULL) && (reg.u64[0] & 4194304ULL) == 0ULL) {
      #line 1314 
      if ((efx->msg_enable & 8192U) != 0U) {
        #line 1314 
        bool branch;
        #line 1314 
        struct _ddebug __UNIQUE_ID_ddebug558 = {.modname = (char *)"sfc_falcon", .function = (char *)"falcon_reset_macs", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon.c", .format = (char *)"Completed MAC reset after %d loops\n", .lineno = (unsigned int)1314U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 1314 
        branch = arch_static_branch(& __UNIQUE_ID_ddebug558.key.dd_key_false.key,(_Bool)0);
        #line 1314 
        if ((long)((long)((int)branch != 0)) != 0L) 
                                                    #line 1314 
                                                    __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug558,efx->net_dev,(char *)"Completed MAC reset after %d loops\n",count);
      }
      #line 1317 
      break;
    }
    #line 1319 
    if (count > 20) {
      #line 1320 
      if ((efx->msg_enable & 8192U) != 0U) 
                                           #line 1320 
                                           netdev_err(efx->net_dev,(char *)"MAC reset failed\n");
      #line 1321 
      break;
    }
    #line 1323 
    count ++;
    #line 1324 
    __const_udelay(42950UL);
  }
  #line 1329 
  ef4_writeo(efx,& mac_ctrl,3200U);
  #line 1331 
  falcon_setup_xaui(efx);
  #line 1332 
  return;
}

#line 1334  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon.c"
static void falcon_drain_tx_fifo(struct ef4_nic *efx)
{
  #line 1336 
  ef4_oword_t reg;
  #line 1338 
  if (ef4_nic_rev(efx) <= 1) 
                             #line 1340 
                             return;
  else 
    #line 1338 
    if (efx->loopback_mode != (unsigned int)LOOPBACK_NONE) 
                                                           #line 1340 
                                                           return;
  #line 1342 
  ef4_reado(efx,& reg,3200U);
  #line 1344 
  if ((reg.u64[0] & 128ULL) != 0ULL) 
                                     #line 1345 
                                     return;
  #line 1347 
  falcon_reset_macs(efx);
  #line 1348 
  return;
}

#line 1350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon.c"
static void falcon_deconfigure_mac_wrapper(struct ef4_nic *efx)
{
  #line 1352 
  ef4_oword_t reg;
  #line 1354 
  if (ef4_nic_rev(efx) <= 1) 
                             #line 1355 
                             return;
  #line 1358 
  ef4_reado(efx,& reg,2048U);
  #line 1359 
  reg.u64[0] &= 18446603336221196287ULL;
  #line 1359 
  reg.u64[1] = reg.u64[1];
  #line 1360 
  ef4_writeo(efx,& reg,2048U);
  #line 1363 
  falcon_drain_tx_fifo(efx);
  #line 1364 
  return;
}

#line 1366  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon.c"
static void falcon_reconfigure_mac_wrapper(struct ef4_nic *efx)
{
  #line 1373 
  union __anonunion___u_8186 __u;
  #line 1369 
  ef4_oword_t reg;
  #line 1370 
  int link_speed;
  #line 1370 
  int isolate;
  #line 1368 
  struct ef4_link_state *link_state = & efx->link_state;
  #line 1372 
  __read_once_size((void *)(& efx->reset_pending),(void *)(& __u.__c),8);
  #line 1372 
  isolate = (__u.__val) != 0UL;
  #line 1374 
  switch (link_state->speed) {
    #line 1375 
    case (unsigned int)10000: 
                              #line 1375 
    ;
    #line 1375 
    link_speed = 3;
    #line 1375 
    break;
    #line 1376 
    case (unsigned int)1000: 
                             #line 1376 
    ;
    #line 1376 
    link_speed = 2;
    #line 1376 
    break;
    #line 1377 
    case (unsigned int)100: 
                            #line 1377 
    ;
    #line 1377 
    link_speed = 1;
    #line 1377 
    break;
    #line 1378 
    default: 
             #line 1378 
    ;
    #line 1378 
    link_speed = 0;
    #line 1378 
    break;
  }
  #line 1385 
  reg.u64[0] = (((unsigned long long)(! efx->unicast_filter) << 3) | (unsigned long long)link_speed) | 4294901780ULL;
  #line 1385 
  reg.u64[1] = 0ULL;
  #line 1393 
  if (ef4_nic_rev(efx) > 1) {
    #line 1394 
    reg.u64[0] = (reg.u64[0] & 18446744073709551487ULL) | ((unsigned long long)((! link_state->up || isolate != 0) != 0) << 7);
    #line 1394 
    reg.u64[1] = reg.u64[1];
  }
  #line 1398 
  ef4_writeo(efx,& reg,3200U);
  #line 1401 
  falcon_push_multicast_hash(efx);
  #line 1403 
  ef4_reado(efx,& reg,2048U);
  #line 1406 
  reg.u64[0] |= 1ULL;
  #line 1406 
  reg.u64[1] = reg.u64[1];
  #line 1408 
  if (ef4_nic_rev(efx) > 1) {
    #line 1409 
    unsigned long long tmp_1;
    #line 1409 
    if (isolate == 0) 
                      #line 1409 
                      tmp_1 = 140737488355328ULL; else 
                                                       #line 1409 
                                                       tmp_1 = 0ULL;
    #line 1409 
    reg.u64[0] = (reg.u64[0] & 18446603336221196287ULL) | tmp_1;
    #line 1409 
    reg.u64[1] = reg.u64[1];
  }
  #line 1410 
  ef4_writeo(efx,& reg,2048U);
  #line 1411 
  return;
}

#line 1413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon.c"
static void falcon_stats_request(struct ef4_nic *efx)
{
  #line 1416 
  ef4_oword_t reg;
  #line 1415 
  struct falcon_nic_data *nic_data = (struct falcon_nic_data *)efx->nic_data;
  {
    #line 1418 
    int __ret_warn_on = (int)nic_data->stats_pending != 0;
    #line 1418 
    if ((long)(__ret_warn_on != 0) != 0L) {
      #line 1419 
      ldv_inline_asm();
      #line 1420 
      ldv_inline_asm();
    }
    #line 1418 
    long tmp = (long)(__ret_warn_on != 0);
  }
  {
    #line 1419 
    int __ret_warn_on_0 = nic_data->stats_disable_count != 0U;
    #line 1419 
    if ((long)(__ret_warn_on_0 != 0) != 0L) {
      #line 1420 
      ldv_inline_asm();
      #line 1421 
      ldv_inline_asm();
    }
    #line 1419 
    long tmp_3 = (long)(__ret_warn_on_0 != 0);
  }
  #line 1421 
  *((u32 *)(efx->stats_buffer.addr + 212U)) = 0U;
  #line 1422 
  nic_data->stats_pending = (_Bool)1;
  #line 1423 
  ldv_inline_asm();
  #line 1426 
  reg.u64[0] = efx->stats_buffer.dma_addr | 281474976710656ULL;
  #line 1426 
  reg.u64[1] = 0ULL;
  #line 1430 
  ef4_writeo(efx,& reg,3168U);
  #line 1432 
  ;
  #line 1432 
  cif_mod_timer_0(& nic_data->stats_timer,round_jiffies_up(jiffies + 125UL));
  #line 1433 
  return;
}

#line 1435  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon.c"
static void falcon_stats_complete(struct ef4_nic *efx)
{
  #line 1437 
  struct falcon_nic_data *nic_data = (struct falcon_nic_data *)efx->nic_data;
  #line 1439 
  if (! nic_data->stats_pending) 
                                 #line 1440 
                                 return;
  #line 1442 
  nic_data->stats_pending = (_Bool)0;
  #line 1443 
  if (*((u32 *)(efx->stats_buffer.addr + 212U)) != 0U) {
    #line 1445 
    ldv_inline_asm();
    #line 1445 
    ef4_nic_update_stats((struct ef4_hw_stat_desc *)(& falcon_stat_desc),49UL,(unsigned long *)(& falcon_stat_mask),(u64 *)(& nic_data->stats),efx->stats_buffer.addr,(_Bool)1);
  }
  else 
    #line 1449 
    if ((efx->msg_enable & 8192U) != 0U) 
                                         #line 1449 
                                         netdev_err(efx->net_dev,(char *)"timed out waiting for statistics\n");
  #line 1450 
  return;
}

#line 1454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon.c"
static void falcon_stats_timer_func(struct timer_list *t)
{
  #line 1456 
  void *__mptr;
  #line 1456 
  __mptr = (void *)t;
  #line 1456 
  struct falcon_nic_data *nic_data = ((struct falcon_nic_data *)(__mptr + 18446744073709548752U));
  #line 1458 
  struct ef4_nic *efx = nic_data->efx;
  #line 1460 
  cif_spin_lock_stats_lock_of_ef4_nic(& efx->stats_lock);
  #line 1462 
  falcon_stats_complete(efx);
  #line 1463 
  if (nic_data->stats_disable_count == 0U) 
                                           #line 1464 
                                           falcon_stats_request(efx);
  #line 1466 
  cif_spin_unlock_stats_lock_of_ef4_nic(& efx->stats_lock);
  #line 1467 
  return;
}

#line 1469  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon.c"
static bool falcon_loopback_link_poll(struct ef4_nic *efx)
{
  #line 1481 
  int tmp_2_9;
  #line 1471 
  struct ef4_link_state old_state = efx->link_state;
  {
    #line 1473 
    int tmp_0;
    #line 1473 
    if (mutex_is_locked(& efx->mac_lock)) 
                                          #line 1473 
                                          tmp_0 = 0; else 
                                                          #line 1473 
                                                          tmp_0 = 1;
    #line 1473 
    int __ret_warn_on = tmp_0;
    #line 1473 
    if ((long)(__ret_warn_on != 0) != 0L) {
      #line 1474 
      ldv_inline_asm();
      #line 1475 
      ldv_inline_asm();
    }
    #line 1473 
    long tmp_2 = (long)(__ret_warn_on != 0);
  }
  {
    #line 1474 
    int __ret_warn_on_0 = ((66600958 >> (unsigned int)efx->loopback_mode) & 1) == 0;
    #line 1474 
    if ((long)(__ret_warn_on_0 != 0) != 0L) {
      #line 1475 
      ldv_inline_asm();
      #line 1476 
      ldv_inline_asm();
    }
    #line 1474 
    long tmp_4 = (long)(__ret_warn_on_0 != 0);
  }
  #line 1476 
  efx->link_state.fd = (_Bool)1;
  #line 1477 
  efx->link_state.fc = efx->wanted_fc;
  #line 1478 
  efx->link_state.up = (_Bool)1;
  #line 1479 
  efx->link_state.speed = 10000U;
  #line 1481 
  if ((int)ef4_link_state_equal(& efx->link_state,& old_state) != 0) 
    #line 1481 
    tmp_2_9 = 0; else 
                      #line 1481 
                      tmp_2_9 = 1;
  #line 1481 
  return (_Bool)(tmp_2_9 != 0);
}

#line 1484  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon.c"
static int falcon_reconfigure_port(struct ef4_nic *efx)
{
  #line 1486 
  int rc;
  {
    #line 1488 
    int __ret_warn_on = ef4_nic_rev(efx) > 2;
    #line 1488 
    if ((long)(__ret_warn_on != 0) != 0L) {
      #line 1489 
      ldv_inline_asm();
      #line 1490 
      ldv_inline_asm();
    }
    #line 1488 
    long tmp_2 = (long)(__ret_warn_on != 0);
  }
  #line 1494 
  if (((66600958 >> (unsigned int)efx->loopback_mode) & 1) != 0) 
                                                                 #line 1495 
                                                                 falcon_loopback_link_poll(efx); else 
                                                                    #line 1497 
                                                                    (*((efx->phy_op)->poll))(efx);
  #line 1499 
  falcon_stop_nic_stats(efx);
  #line 1500 
  falcon_deconfigure_mac_wrapper(efx);
  #line 1502 
  falcon_reset_macs(efx);
  #line 1504 
  (*((efx->phy_op)->reconfigure))(efx);
  #line 1505 
  rc = falcon_reconfigure_xmac(efx);
  #line 1506 
  if ((long)(rc != 0) != 0L) {
    #line 1507 
    ldv_inline_asm();
    #line 1508 
    ldv_inline_asm();
    #line 1509 
    ldv_inline_asm();
    #line 1506 
    ;
  }
  #line 1508 
  falcon_start_nic_stats(efx);
  #line 1511 
  ef4_link_status_changed(efx);
  #line 1513 
  return 0;
}

#line 1523  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon.c"
static void falcon_a1_prepare_enable_fc_tx(struct ef4_nic *efx)
{
  #line 1526 
  ef4_schedule_reset(efx,(enum reset_type)RESET_TYPE_INVISIBLE);
  #line 1527 
  return;
}

#line 1529  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon.c"
static void falcon_b0_prepare_enable_fc_tx(struct ef4_nic *efx)
{
  #line 1532 
  falcon_stop_nic_stats(efx);
  #line 1533 
  falcon_drain_tx_fifo(efx);
  #line 1534 
  falcon_reconfigure_xmac(efx);
  #line 1535 
  falcon_start_nic_stats(efx);
  #line 1536 
  return;
}

#line 1546  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon.c"
static int falcon_gmii_wait(struct ef4_nic *efx)
{
  #line 1548 
  ef4_oword_t md_stat;
  #line 1549 
  int count;
  #line 1552 
  count = 0;
  #line 1552 
  while (count <= 4999) {
    #line 1553 
    ef4_reado(efx,& md_stat,3152U);
    #line 1554 
    if ((md_stat.u64[0] & 1ULL) == 0ULL) {
      #line 1555 
      if ((md_stat.u64[0] & 2ULL) != 0ULL || (md_stat.u64[0] & 4ULL) != 0ULL) {
        #line 1557 
        if ((efx->msg_enable & 8192U) != 0U) 
                                             #line 1557 
                                             netdev_err(efx->net_dev,(char *)"error from GMII access ",md_stat.u32[3],md_stat.u32[2],md_stat.u32[1],md_stat.u32[0]);
        #line 1561 
        return -5;
      }
      #line 1563 
      return 0;
    }
    #line 1565 
    __const_udelay(42950UL);
    #line 1552 
    count ++;
  }
  #line 1567 
  if ((efx->msg_enable & 8192U) != 0U) 
                                       #line 1567 
                                       netdev_err(efx->net_dev,(char *)"timed out waiting for GMII\n");
  #line 1568 
  return -110;
}

#line 1572  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon.c"
static int falcon_mdio_write(struct net_device *net_dev, int prtad, int devad, u16 addr, u16 value)
{
  #line 1577 
  ef4_oword_t reg;
  #line 1578 
  int rc;
  #line 1575 
  struct ef4_nic *efx = netdev_priv(net_dev);
  #line 1576 
  struct falcon_nic_data *nic_data = (struct falcon_nic_data *)efx->nic_data;
  #line 1584 
  cif_mutex_lock_mdio_lock_of_falcon_nic_data(& nic_data->mdio_lock);
  #line 1587 
  rc = falcon_gmii_wait(efx);
  #line 1588 
  if (rc != 0) 
               #line 1589 
               goto out;
  #line 1592 
  reg.u64[0] = (unsigned long long)addr;
  #line 1592 
  reg.u64[1] = 0ULL;
  #line 1593 
  ef4_writeo(efx,& reg,3120U);
  #line 1595 
  reg.u64[0] = ((unsigned long long)prtad << 11) | ((unsigned long long)devad << 6);
  #line 1595 
  reg.u64[1] = 0ULL;
  #line 1597 
  ef4_writeo(efx,& reg,3136U);
  #line 1600 
  reg.u64[0] = (unsigned long long)value;
  #line 1600 
  reg.u64[1] = 0ULL;
  #line 1601 
  ef4_writeo(efx,& reg,3072U);
  #line 1603 
  reg.u64[0] = 1ULL;
  #line 1603 
  reg.u64[1] = 0ULL;
  #line 1606 
  ef4_writeo(efx,& reg,3104U);
  #line 1609 
  rc = falcon_gmii_wait(efx);
  #line 1610 
  if (rc != 0) {
    #line 1612 
    reg.u64[0] = 16ULL;
    #line 1612 
    reg.u64[1] = 0ULL;
    #line 1615 
    ef4_writeo(efx,& reg,3104U);
    #line 1616 
    __const_udelay(42950UL);
  }
  #line 1619 
  out: 
       #line 1619 
  ;
  #line 1620 
  cif_mutex_unlock_mdio_lock_of_falcon_nic_data(& nic_data->mdio_lock);
  #line 1621 
  return rc;
}

#line 1625  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon.c"
static int falcon_mdio_read(struct net_device *net_dev, int prtad, int devad, u16 addr)
{
  #line 1630 
  ef4_oword_t reg;
  #line 1631 
  int rc;
  #line 1628 
  struct ef4_nic *efx = netdev_priv(net_dev);
  #line 1629 
  struct falcon_nic_data *nic_data = (struct falcon_nic_data *)efx->nic_data;
  #line 1633 
  cif_mutex_lock_mdio_lock_of_falcon_nic_data(& nic_data->mdio_lock);
  #line 1636 
  rc = falcon_gmii_wait(efx);
  #line 1637 
  if (rc != 0) 
               #line 1638 
               goto out;
  #line 1640 
  reg.u64[0] = (unsigned long long)addr;
  #line 1640 
  reg.u64[1] = 0ULL;
  #line 1641 
  ef4_writeo(efx,& reg,3120U);
  #line 1643 
  reg.u64[0] = ((unsigned long long)prtad << 11) | ((unsigned long long)devad << 6);
  #line 1643 
  reg.u64[1] = 0ULL;
  #line 1645 
  ef4_writeo(efx,& reg,3136U);
  #line 1648 
  reg.u64[0] = 2ULL;
  #line 1648 
  reg.u64[1] = 0ULL;
  #line 1649 
  ef4_writeo(efx,& reg,3104U);
  #line 1652 
  rc = falcon_gmii_wait(efx);
  #line 1653 
  if (rc == 0) {
    #line 1654 
    ef4_reado(efx,& reg,3088U);
    #line 1655 
    rc = (int)reg.u64[0] & 65535;
  }
  else {
    #line 1661 
    reg.u64[0] = 16ULL;
    #line 1661 
    reg.u64[1] = 0ULL;
    #line 1664 
    ef4_writeo(efx,& reg,3104U);
    #line 1666 
    if ((efx->msg_enable & 8192U) != 0U) {
      #line 1666 
      bool branch;
      #line 1666 
      struct _ddebug __UNIQUE_ID_ddebug565 = {.modname = (char *)"sfc_falcon", .function = (char *)"falcon_mdio_read", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon.c", .format = (char *)"read from MDIO %d register %d.%d, got error %d\n", .lineno = (unsigned int)1666U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1666 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug565.key.dd_key_false.key,(_Bool)0);
      #line 1666 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 1666 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug565,efx->net_dev,(char *)"read from MDIO %d register %d.%d, got error %d\n",prtad,devad,(int)addr,rc);
    }
  }
  #line 1671 
  out: 
       #line 1671 
  ;
  #line 1672 
  cif_mutex_unlock_mdio_lock_of_falcon_nic_data(& nic_data->mdio_lock);
  #line 1673 
  return rc;
}

#line 1677  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon.c"
static int falcon_probe_port(struct ef4_nic *efx)
{
  #line 1680 
  int rc;
  #line 1679 
  struct falcon_nic_data *nic_data = (struct falcon_nic_data *)efx->nic_data;
  #line 1682 
  switch (efx->phy_type) {
    #line 1683 
    case (unsigned int)3: 
                          #line 1683 
    ;
    #line 1684 
    efx->phy_op = & falcon_sfx7101_phy_ops;
    #line 1685 
    break;
    #line 1686 
    case (unsigned int)4: 
                          #line 1686 
    ;
    #line 1687 
    case (unsigned int)9: 
                          #line 1687 
    ;
    #line 1688 
    efx->phy_op = & falcon_qt202x_phy_ops;
    #line 1689 
    break;
    #line 1690 
    case (unsigned int)1: 
                          #line 1690 
    ;
    #line 1691 
    efx->phy_op = & falcon_txc_phy_ops;
    #line 1692 
    break;
    #line 1693 
    default: 
             #line 1693 
    ;
    #line 1694 
    if ((efx->msg_enable & 2U) != 0U) 
                                      #line 1694 
                                      netdev_err(efx->net_dev,(char *)"Unknown PHY type %d\n",efx->phy_type);
    #line 1696 
    return -19;
  }
  {
    #line 1700 
    struct lock_class_key __key;
    #line 1700 
    __mutex_init(& nic_data->mdio_lock,(char *)"&nic_data->mdio_lock",& __key);
  }
  #line 1701 
  efx->mdio.mdio_read = & falcon_mdio_read;
  #line 1702 
  efx->mdio.mdio_write = & falcon_mdio_write;
  #line 1703 
  rc = (*((efx->phy_op)->probe))(efx);
  #line 1704 
  if (rc != 0) 
               #line 1705 
               return rc;
  #line 1708 
  efx->link_state.speed = 10000U;
  #line 1709 
  efx->link_state.fd = (_Bool)1;
  #line 1712 
  if (ef4_nic_rev(efx) > 1) 
                            #line 1713 
                            efx->wanted_fc = (unsigned char)3U; else 
                                                                  #line 1715 
                                                                  efx->wanted_fc = (unsigned char)2U;
  #line 1716 
  if ((efx->mdio.mmds & 128U) != 0U) 
                                     #line 1717 
                                     efx->wanted_fc = (unsigned char)((unsigned int)efx->wanted_fc | 4U);
  #line 1720 
  rc = ef4_nic_alloc_buffer(efx,& efx->stats_buffer,256U,3264U);
  #line 1722 
  if (rc != 0) 
               #line 1723 
               return rc;
  #line 1724 
  if ((efx->msg_enable & 2U) != 0U) {
    #line 1724 
    bool branch;
    #line 1724 
    struct _ddebug __UNIQUE_ID_ddebug566 = {.modname = (char *)"sfc_falcon", .function = (char *)"falcon_probe_port", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon.c", .format = (char *)"stats buffer at %llx (virt %p phys %llx)\n", .lineno = (unsigned int)1724U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1724 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug566.key.dd_key_false.key,(_Bool)0);
    #line 1724 
    if ((long)((long)((int)branch != 0)) != 0L) {
      #line 1724 
      ;
      #line 1724 
      ;
      #line 1724 
      ;
      #line 1724 
      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug566,efx->net_dev,(char *)"stats buffer at %llx (virt %p phys %llx)\n",efx->stats_buffer.dma_addr,efx->stats_buffer.addr,virt_to_phys(efx->stats_buffer.addr));
    }
  }
  #line 1730 
  return 0;
}

#line 1733  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon.c"
static void falcon_remove_port(struct ef4_nic *efx)
{
  #line 1735 
  (*((efx->phy_op)->remove))(efx);
  #line 1736 
  ef4_nic_free_buffer(efx,& efx->stats_buffer);
  #line 1737 
  return;
}

#line 1741  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon.c"
static bool falcon_handle_global_event(struct ef4_channel *channel, ef4_qword_t *event)
{
  #line 1758 
  int tmp_3;
  #line 1743 
  struct ef4_nic *efx = channel->efx;
  #line 1744 
  struct falcon_nic_data *nic_data = (struct falcon_nic_data *)efx->nic_data;
  #line 1746 
  if (((event->u64[0] & 128ULL) != 0ULL || (event->u64[0] & 512ULL) != 0ULL) || (event->u64[0] & 1024ULL) != 0ULL) 
    #line 1750 
    return (_Bool)1;
  #line 1752 
  if (ef4_nic_rev(efx) == 2) 
    #line 1752 
    if ((event->u64[0] & 2048ULL) != 0ULL) {
      #line 1754 
      nic_data->xmac_poll_required = (_Bool)1;
      #line 1755 
      return (_Bool)1;
    }
  #line 1758 
  if (ef4_nic_rev(efx) <= 1) 
                             #line 1758 
                             tmp_3 = (event->u64[0] & 2048ULL) != 0ULL; else 
                                                                    #line 1758 
                                                                    tmp_3 = (event->u64[0] & 4096ULL) != 0ULL;
  #line 1758 
  if (tmp_3) {
    #line 1766 
    int tmp_1;
    #line 1761 
    if ((efx->msg_enable & 64U) != 0U) 
                                       #line 1761 
                                       netdev_err(efx->net_dev,(char *)"channel %d seen global RX_RESET event. Resetting.\n",channel->channel);
    #line 1765 
    atomic_inc_2(& efx->rx_reset);
    #line 1766 
    if (ef4_nic_rev(efx) <= 1) 
                               #line 1766 
                               tmp_1 = RESET_TYPE_RX_RECOVERY; else 
                                                                    #line 1766 
                                                                    tmp_1 = RESET_TYPE_DISABLE;
    #line 1766 
    ;
    #line 1766 
    ef4_schedule_reset(efx,(enum reset_type)tmp_1);
    #line 1768 
    return (_Bool)1;
  }
  #line 1771 
  return (_Bool)0;
}

#line 1781  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon.c"
static int falcon_read_nvram(struct ef4_nic *efx, struct falcon_nvconfig *nvconfig_out)
{
  #line 1784 
  struct falcon_nvconfig *nvconfig;
  #line 1785 
  struct falcon_spi_device *spi;
  #line 1786 
  void *region;
  #line 1787 
  int rc;
  #line 1787 
  int magic_num;
  #line 1787 
  int struct_ver;
  #line 1788 
  __le16 *word;
  #line 1788 
  __le16 *limit;
  #line 1789 
  u32 csum;
  #line 1783 
  struct falcon_nic_data *nic_data = (struct falcon_nic_data *)efx->nic_data;
  #line 1791 
  if ((int)falcon_spi_present(& nic_data->spi_flash) != 0) 
                                                           #line 1792 
                                                           spi = & nic_data->spi_flash;
  else {
    #line 1793 
    if ((int)falcon_spi_present(& nic_data->spi_eeprom) != 0) 
                                                              #line 1794 
                                                              spi = & nic_data->spi_eeprom; else 
                                                                    #line 1796 
                                                                    return -22;
  }
  #line 1798 
  region = kmalloc_0(1024UL,3264U);
  #line 1799 
  if (region == (void *)0) 
                           #line 1800 
                           return -12;
  #line 1801 
  nvconfig = (struct falcon_nvconfig *)(region + 768U);
  #line 1803 
  cif_mutex_lock_spi_lock_of_falcon_nic_data(& nic_data->spi_lock);
  #line 1804 
  rc = falcon_spi_read(efx,spi,0LL,1024UL,(size_t *)0UL,(u8 *)region);
  #line 1805 
  cif_mutex_unlock_spi_lock_of_falcon_nic_data(& nic_data->spi_lock);
  #line 1806 
  if (rc != 0) {
    #line 1807 
    if ((efx->msg_enable & 8192U) != 0U) {
      #line 1807 
      char *tmp_2;
      #line 1807 
      if ((int)falcon_spi_present(& nic_data->spi_flash) != 0) 
                                                               #line 1807 
                                                               tmp_2 = (char *)"flash"; else 
                                                                    #line 1807 
                                                                    tmp_2 = (char *)"EEPROM";
      #line 1807 
      ;
      #line 1807 
      netdev_err(efx->net_dev,(char *)"Failed to read %s\n",tmp_2);
    }
    #line 1810 
    rc = -5;
    #line 1811 
    goto out;
  }
  #line 1814 
  magic_num = (int)nvconfig->board_magic_num;
  #line 1815 
  struct_ver = (int)nvconfig->board_struct_ver;
  #line 1817 
  rc = -22;
  #line 1818 
  if (magic_num != 64028) {
    #line 1819 
    if ((efx->msg_enable & 8192U) != 0U) 
                                         #line 1819 
                                         netdev_err(efx->net_dev,(char *)"NVRAM bad magic 0x%x\n",magic_num);
    #line 1821 
    goto out;
  }
  #line 1823 
  if (struct_ver <= 1) {
    #line 1824 
    if ((efx->msg_enable & 8192U) != 0U) 
                                         #line 1824 
                                         netdev_err(efx->net_dev,(char *)"NVRAM has ancient version 0x%x\n",struct_ver);
    #line 1826 
    goto out;
  }
  else 
    #line 1827 
    if (struct_ver <= 3) {
      #line 1828 
      word = & nvconfig->board_magic_num;
      #line 1829 
      limit = (__le16 *)(nvconfig + 1U);
    }
    else {
      #line 1831 
      word = (__le16 *)region;
      #line 1832 
      limit = (__le16 *)(region + 1024U);
    }
  #line 1834 
  csum = 0U;
  #line 1834 
  while (word < limit) {
    #line 1835 
    csum = (unsigned int)*word + csum;
    #line 1834 
    word ++;
  }
  #line 1837 
  if ((~ csum & 65535U) != 0U) {
    #line 1838 
    if ((efx->msg_enable & 8192U) != 0U) 
                                         #line 1838 
                                         netdev_err(efx->net_dev,(char *)"NVRAM has incorrect checksum\n");
    #line 1840 
    goto out;
  }
  #line 1843 
  rc = 0;
  #line 1844 
  if (nvconfig_out != (struct falcon_nvconfig *)0) 
                                                   #line 1845 
                                                   memcpy((void *)nvconfig_out,(void *)nvconfig,200UL);
  #line 1847 
  out: 
       #line 1847 
  ;
  #line 1848 
  kfree(region);
  #line 1849 
  return rc;
}

#line 1852  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon.c"
static int falcon_test_nvram(struct ef4_nic *efx)
{
  #line 1854 
  return falcon_read_nvram(efx,(struct falcon_nvconfig *)0);
}

#line 1857  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon.c"
static struct ef4_farch_register_test falcon_b0_register_tests[18U] = {{.mask = {.u32 = {262143U, 262143U, 262143U, 262143U}}}, {.address = 2048U, .mask = {.u32 = {4294967294U, 98303U}}}, {.address = 2640U, .mask = {.u32 = {2147418167U}}}, {.address = 2688U, .mask = {.u32 = {4294901376U, 536870911U, 33554686U, 8388607U}}}, {.address = 3200U, .mask = {.u32 = {4294901760U}}}, {.address = 1568U, .mask = {.u32 = {2097151U}}}, {.address = 2112U, .mask = {.u32 = {15U}}}, {.address = 2128U, .mask = {.u32 = {1023U}}}, {.address = 592U, .mask = {.u32 = {4095U}}}, {.address = 3600U, .mask = {.u32 = {29495U}}}, {.address = 3872U, .mask = {.u32 = {7967U}}}, {.address = 4640U, .mask = {.u32 = {3176U}}}, {.address = 4656U, .mask = {.u32 = {524644U}}}, {.address = 4672U, .mask = {.u32 = {118491660U}}}, {.address = 4832U, .mask = {.u32 = {8184U}}}, {.address = 4720U, .mask = {.u32 = {4294901761U}}}, {.address = 4608U, .mask = {.u32 = {4294967295U}}}, {.address = 4880U, .mask = {.u32 = {261903U}}}};
#line 1897  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon.c"
static int falcon_b0_test_chip(struct ef4_nic *efx, struct ef4_self_tests *tests)
{
  #line 1900 
  int rc;
  #line 1900 
  int rc2;
  #line 1923 
  int tmp_1;
  #line 1899 
  enum reset_type reset_method = RESET_TYPE_INVISIBLE;
  #line 1902 
  cif_mutex_lock_mac_lock_of_ef4_nic_2(& efx->mac_lock);
  #line 1903 
  if (efx->loopback_modes != 0ULL) 
    #line 1906 
    if ((efx->loopback_modes & 8ULL) != 0ULL) 
                                              #line 1907 
                                              efx->loopback_mode = LOOPBACK_XGMII;
    else {
      #line 1909 
      efx->loopback_mode = (enum ef4_loopback_mode)__ffs((unsigned long)efx->loopback_modes);
    }
  #line 1911 
  __ef4_reconfigure_port(efx);
  #line 1912 
  cif_mutex_unlock_mac_lock_of_ef4_nic_2(& efx->mac_lock);
  #line 1914 
  ef4_reset_down(efx,reset_method);
  #line 1916 
  if (ef4_farch_test_registers(efx,
                                 (struct ef4_farch_register_test *)(& falcon_b0_register_tests),
                                 18UL) != 0) 
    #line 1916 
    tests->registers = -1; else 
                                #line 1916 
                                tests->registers = 1;
  #line 1921 
  rc = falcon_reset_hw(efx,reset_method);
  #line 1922 
  rc2 = ef4_reset_up(efx,reset_method,(_Bool)(rc == 0));
  #line 1923 
  if (rc != 0) 
               #line 1923 
               tmp_1 = rc; else 
                                #line 1923 
                                tmp_1 = rc2;
  #line 1923 
  return tmp_1;
}

#line 1933  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon.c"
static enum reset_type falcon_map_reset_reason(enum reset_type reason)
{
  #line 1935 
  switch ((unsigned int)reason) {
    #line 1936 
    case (unsigned int)10: 
                           #line 1936 
    ;
    #line 1937 
    case (unsigned int)11: 
                           #line 1937 
    ;
    #line 1938 
    case (unsigned int)12: 
                           #line 1938 
    ;
    #line 1942 
    return RESET_TYPE_INVISIBLE;
    #line 1943 
    default: 
             #line 1943 
    ;
    #line 1944 
    return RESET_TYPE_ALL;
  }
}

#line 1948  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon.c"
static int falcon_map_reset_flags(u32 *flags)
{
  #line 1957 
  if ((*flags & 126U) == 126U) {
    #line 1958 
    *flags &= 4294967169U;
    #line 1959 
    return 3;
  }
  #line 1962 
  if ((*flags & 124U) == 124U) {
    #line 1963 
    *flags &= 4294967171U;
    #line 1964 
    return 2;
  }
  #line 1967 
  if ((*flags & 60U) == 60U) {
    #line 1968 
    *flags &= 4294967235U;
    #line 1969 
    return 0;
  }
  #line 1972 
  return -22;
}

#line 1977  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon.c"
static int __falcon_reset_hw(struct ef4_nic *efx, enum reset_type method)
{
  #line 1980 
  ef4_oword_t glb_ctl_reg_ker;
  #line 1981 
  int rc;
  #line 1979 
  struct falcon_nic_data *nic_data = (struct falcon_nic_data *)efx->nic_data;
  #line 1983 
  if ((efx->msg_enable & 8192U) != 0U) {
    #line 1983 
    bool branch;
    #line 1983 
    struct _ddebug __UNIQUE_ID_ddebug567 = {.modname = (char *)"sfc_falcon", .function = (char *)"__falcon_reset_hw", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon.c", .format = (char *)"performing %s hardware reset\n", .lineno = (unsigned int)1983U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1983 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug567.key.dd_key_false.key,(_Bool)0);
    #line 1983 
    if ((long)((long)((int)branch != 0)) != 0L) {
      #line 1983 
      char *tmp;
      #line 1983 
      if (method < (enum reset_type)ef4_reset_type_max) 
                                                        #line 1983 
                                                        tmp = ef4_reset_type_names[(unsigned int)method]; else 
                                                                    #line 1983 
                                                                    tmp = (char *)"(invalid)";
      #line 1983 
      ;
      #line 1983 
      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug567,efx->net_dev,(char *)"performing %s hardware reset\n",tmp);
    }
  }
  #line 1987 
  if (method == (unsigned int)RESET_TYPE_WORLD) {
    #line 1988 
    rc = pci_save_state(efx->pci_dev);
    #line 1989 
    if (rc != 0) {
      #line 1990 
      if ((efx->msg_enable & 1U) != 0U) 
                                        #line 1990 
                                        netdev_err(efx->net_dev,(char *)"failed to backup PCI state of primary ");
      #line 1993 
      goto fail1;
    }
    #line 1995 
    if ((int)ef4_nic_is_dual_func(efx) != 0) {
      #line 1996 
      rc = pci_save_state(nic_data->pci_dev2);
      #line 1997 
      if (rc != 0) {
        #line 1998 
        if ((efx->msg_enable & 1U) != 0U) 
                                          #line 1998 
                                          netdev_err(efx->net_dev,(char *)"failed to backup PCI state of ");
        #line 2002 
        goto fail2;
      }
    }
    #line 2006 
    glb_ctl_reg_ker.u64[0] = 15ULL;
    #line 2006 
    glb_ctl_reg_ker.u64[1] = 0ULL;
  }
  else {
    #line 2011 
    if (method == (unsigned int)RESET_TYPE_INVISIBLE) 
                                                      #line 2011 
                                                      glb_ctl_reg_ker.u64[0] = 11962123560249458703ULL; else 
                                                                    #line 2011 
                                                                    glb_ctl_reg_ker.u64[0] = 2738751523394682895ULL;
    #line 2011 
    glb_ctl_reg_ker.u64[1] = 0ULL;
  }
  #line 2024 
  ef4_writeo(efx,& glb_ctl_reg_ker,544U);
  #line 2026 
  if ((efx->msg_enable & 8192U) != 0U) {
    #line 2026 
    bool branch_0;
    #line 2026 
    struct _ddebug __UNIQUE_ID_ddebug568 = {.modname = (char *)"sfc_falcon", .function = (char *)"__falcon_reset_hw", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon.c", .format = (char *)"waiting for hardware reset\n", .lineno = (unsigned int)2026U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 2026 
    branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug568.key.dd_key_false.key,(_Bool)0);
    #line 2026 
    if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                  #line 2026 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug568,efx->net_dev,(char *)"waiting for hardware reset\n");
  }
  #line 2027 
  schedule_timeout_uninterruptible(12L);
  #line 2030 
  if (method == (unsigned int)RESET_TYPE_WORLD) {
    #line 2031 
    if ((int)ef4_nic_is_dual_func(efx) != 0) 
                                             #line 2032 
                                             pci_restore_state(nic_data->pci_dev2);
    #line 2033 
    pci_restore_state(efx->pci_dev);
    #line 2034 
    if ((efx->msg_enable & 1U) != 0U) {
      #line 2034 
      bool branch_1;
      #line 2034 
      struct _ddebug __UNIQUE_ID_ddebug569 = {.modname = (char *)"sfc_falcon", .function = (char *)"__falcon_reset_hw", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon.c", .format = (char *)"successfully restored PCI config\n", .lineno = (unsigned int)2034U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 2034 
      branch_1 = arch_static_branch(& __UNIQUE_ID_ddebug569.key.dd_key_false.key,(_Bool)0);
      #line 2034 
      if ((long)((long)((int)branch_1 != 0)) != 0L) 
                                                    #line 2034 
                                                    __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug569,efx->net_dev,(char *)"successfully restored PCI config\n");
    }
  }
  #line 2039 
  ef4_reado(efx,& glb_ctl_reg_ker,544U);
  #line 2040 
  if ((glb_ctl_reg_ker.u64[0] & 1ULL) != 0ULL) {
    #line 2041 
    rc = -110;
    #line 2042 
    if ((efx->msg_enable & 8192U) != 0U) 
                                         #line 2042 
                                         netdev_err(efx->net_dev,(char *)"timed out waiting for hardware reset\n");
    #line 2044 
    goto fail3;
  }
  #line 2046 
  if ((efx->msg_enable & 8192U) != 0U) {
    #line 2046 
    bool branch_2;
    #line 2046 
    struct _ddebug __UNIQUE_ID_ddebug570 = {.modname = (char *)"sfc_falcon", .function = (char *)"__falcon_reset_hw", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon.c", .format = (char *)"hardware reset complete\n", .lineno = (unsigned int)2046U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 2046 
    branch_2 = arch_static_branch(& __UNIQUE_ID_ddebug570.key.dd_key_false.key,(_Bool)0);
    #line 2046 
    if ((long)((long)((int)branch_2 != 0)) != 0L) 
                                                  #line 2046 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug570,efx->net_dev,(char *)"hardware reset complete\n");
  }
  #line 2048 
  return 0;
  #line 2051 
  fail2: 
         #line 2051 
  ;
  #line 2052 
  pci_restore_state(efx->pci_dev);
  #line 2053 
  fail1: 
         #line 2053 
  ;
  #line 2054 
  fail3: 
         #line 2054 
  ;
  #line 2055 
  return rc;
}

#line 2058  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon.c"
static int falcon_reset_hw(struct ef4_nic *efx, enum reset_type method)
{
  #line 2061 
  int rc;
  #line 2060 
  struct falcon_nic_data *nic_data = (struct falcon_nic_data *)efx->nic_data;
  #line 2063 
  cif_mutex_lock_spi_lock_of_falcon_nic_data(& nic_data->spi_lock);
  #line 2064 
  rc = __falcon_reset_hw(efx,method);
  #line 2065 
  cif_mutex_unlock_spi_lock_of_falcon_nic_data(& nic_data->spi_lock);
  #line 2067 
  return rc;
}

#line 2070  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon.c"
static void falcon_monitor(struct ef4_nic *efx)
{
  #line 2072 
  bool link_changed;
  #line 2073 
  int rc;
  #line 2075 
  int tmp_0;
  #line 2075 
  if (mutex_is_locked(& efx->mac_lock)) 
                                        #line 2075 
                                        tmp_0 = 0; else 
                                                        #line 2075 
                                                        tmp_0 = 1;
  #line 2075 
  if ((long)tmp_0 != 0L) {
    #line 2076 
    ldv_inline_asm();
    #line 2077 
    ldv_inline_asm();
    #line 2078 
    ldv_inline_asm();
    #line 2075 
    ;
  }
  #line 2077 
  rc = (*((falcon_board(efx)->type)->monitor))(efx);
  #line 2078 
  if (rc != 0) {
    #line 2079 
    if ((efx->msg_enable & 8192U) != 0U) {
      #line 2079 
      char *tmp_2;
      #line 2079 
      if (rc == -34) 
                     #line 2079 
                     tmp_2 = (char *)"reported fault"; else 
                                                            #line 2079 
                                                            tmp_2 = (char *)"failed";
      #line 2079 
      ;
      #line 2079 
      netdev_err(efx->net_dev,(char *)"Board sensor %s; shutting down PHY\n",tmp_2);
    }
    #line 2082 
    efx->phy_mode = (enum ef4_phy_mode)((unsigned int)efx->phy_mode | 2U);
    #line 2083 
    rc = __ef4_reconfigure_port(efx);
    {
      #line 2084 
      int __ret_warn_on = rc != 0;
      #line 2084 
      if ((long)(__ret_warn_on != 0) != 0L) {
        #line 2085 
        ldv_inline_asm();
        #line 2086 
        ldv_inline_asm();
      }
      #line 2084 
      long tmp_3 = (long)(__ret_warn_on != 0);
    }
  }
  #line 2087 
  if (((66600958 >> (unsigned int)efx->loopback_mode) & 1) != 0) 
                                                                 #line 2088 
                                                                 link_changed = falcon_loopback_link_poll(efx); else 
                                                                    #line 2090 
                                                                    link_changed = (*((efx->phy_op)->poll))(efx);
  #line 2092 
  if ((int)link_changed != 0) {
    #line 2093 
    falcon_stop_nic_stats(efx);
    #line 2094 
    falcon_deconfigure_mac_wrapper(efx);
    #line 2096 
    falcon_reset_macs(efx);
    #line 2097 
    rc = falcon_reconfigure_xmac(efx);
    #line 2098 
    if ((long)(rc != 0) != 0L) {
      #line 2099 
      ldv_inline_asm();
      #line 2100 
      ldv_inline_asm();
      #line 2101 
      ldv_inline_asm();
      #line 2098 
      ;
    }
    #line 2100 
    falcon_start_nic_stats(efx);
    #line 2102 
    ef4_link_status_changed(efx);
  }
  #line 2105 
  falcon_poll_xmac(efx);
  #line 2106 
  return;
}

#line 2111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon.c"
static int falcon_reset_sram(struct ef4_nic *efx)
{
  #line 2113 
  ef4_oword_t srm_cfg_reg_ker;
  #line 2113 
  ef4_oword_t gpio_cfg_reg_ker;
  #line 2114 
  int count;
  #line 2117 
  ef4_reado(efx,& gpio_cfg_reg_ker,528U);
  #line 2118 
  gpio_cfg_reg_ker.u64[0] |= 33554432ULL;
  #line 2118 
  gpio_cfg_reg_ker.u64[1] = gpio_cfg_reg_ker.u64[1];
  #line 2119 
  gpio_cfg_reg_ker.u64[0] |= 131072ULL;
  #line 2119 
  gpio_cfg_reg_ker.u64[1] = gpio_cfg_reg_ker.u64[1];
  #line 2120 
  ef4_writeo(efx,& gpio_cfg_reg_ker,528U);
  #line 2123 
  srm_cfg_reg_ker.u64[0] = 8ULL;
  #line 2123 
  srm_cfg_reg_ker.u64[1] = 0ULL;
  #line 2126 
  ef4_writeo(efx,& srm_cfg_reg_ker,1584U);
  #line 2129 
  count = 0;
  #line 2130 
  while (1) {
    #line 2131 
    if ((efx->msg_enable & 8192U) != 0U) {
      #line 2131 
      bool branch;
      #line 2131 
      struct _ddebug __UNIQUE_ID_ddebug574 = {.modname = (char *)"sfc_falcon", .function = (char *)"falcon_reset_sram", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon.c", .format = (char *)"waiting for SRAM reset (attempt %d)...\n", .lineno = (unsigned int)2131U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 2131 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug574.key.dd_key_false.key,(_Bool)0);
      #line 2131 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 2131 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug574,efx->net_dev,(char *)"waiting for SRAM reset (attempt %d)...\n",count);
    }
    #line 2135 
    schedule_timeout_uninterruptible(5L);
    #line 2138 
    ef4_reado(efx,& srm_cfg_reg_ker,1584U);
    #line 2139 
    if ((srm_cfg_reg_ker.u64[0] & 8ULL) == 0ULL) {
      #line 2140 
      if ((efx->msg_enable & 8192U) != 0U) {
        #line 2140 
        bool branch_0;
        #line 2140 
        struct _ddebug __UNIQUE_ID_ddebug575 = {.modname = (char *)"sfc_falcon", .function = (char *)"falcon_reset_sram", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon.c", .format = (char *)"SRAM reset complete\n", .lineno = (unsigned int)2140U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 2140 
        branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug575.key.dd_key_false.key,(_Bool)0);
        #line 2140 
        if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                      #line 2140 
                                                      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug575,efx->net_dev,(char *)"SRAM reset complete\n");
      }
      #line 2143 
      return 0;
    }
    #line 2145 
    count ++;
    #line 2145 
    if (! (count <= 19)) 
                         #line 2130 
                         break;
  }
  #line 2147 
  if ((efx->msg_enable & 8192U) != 0U) 
                                       #line 2147 
                                       netdev_err(efx->net_dev,(char *)"timed out waiting for SRAM reset\n");
  #line 2148 
  return -110;
}

#line 2151  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon.c"
static void falcon_spi_device_init(struct ef4_nic *efx, struct falcon_spi_device *spi_device, unsigned int device_id, u32 device_type)
{
  #line 2155 
  if (device_type != 0U) {
    #line 2156 
    spi_device->device_id = (int)device_id;
    #line 2157 
    spi_device->size = (unsigned int)(1 << (device_type & 31U));
    #line 2159 
    spi_device->addr_len = (device_type >> 6) & 3U;
    #line 2161 
    spi_device->munge_address = (unsigned int)((spi_device->size == 512U && spi_device->addr_len == 1U) != 0);
    #line 2163 
    spi_device->erase_command = (unsigned char)(device_type >> 8);
    #line 2165 
    spi_device->erase_size = (unsigned int)(1 << ((device_type >> 16) & 31U));
    #line 2168 
    spi_device->block_size = (unsigned int)(1 << ((device_type >> 24) & 31U));
  }
  else 
       #line 2172 
       spi_device->size = 0U;
  #line 2173 
  return;
}

#line 2177  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon.c"
static int falcon_probe_nvconfig(struct ef4_nic *efx)
{
  #line 2180 
  struct falcon_nvconfig *nvconfig;
  #line 2181 
  int rc;
  #line 2179 
  struct falcon_nic_data *nic_data = (struct falcon_nic_data *)efx->nic_data;
  #line 2183 
  nvconfig = (struct falcon_nvconfig *)kmalloc_0(200UL,3264U);
  #line 2184 
  if (nvconfig == (struct falcon_nvconfig *)0) 
                                               #line 2185 
                                               return -12;
  #line 2187 
  rc = falcon_read_nvram(efx,nvconfig);
  #line 2188 
  if (rc != 0) 
               #line 2189 
               goto out;
  #line 2191 
  efx->phy_type = (unsigned int)nvconfig->board_v2.port0_phy_type;
  #line 2192 
  efx->mdio.prtad = (int)nvconfig->board_v2.port0_phy_addr;
  #line 2194 
  if ((unsigned int)nvconfig->board_struct_ver > 2U) {
    #line 2195 
    falcon_spi_device_init(efx,& nic_data->spi_flash,1U,nvconfig->board_v3.spi_device_type[1]);
    #line 2199 
    falcon_spi_device_init(efx,& nic_data->spi_eeprom,0U,nvconfig->board_v3.spi_device_type[0]);
  }
  #line 2206 
  ether_addr_copy((u8 *)(& (efx->net_dev)->perm_addr),(u8 *)(& nvconfig->mac_address[0]));
  #line 2208 
  if ((efx->msg_enable & 2U) != 0U) {
    #line 2208 
    bool branch;
    #line 2208 
    struct _ddebug __UNIQUE_ID_ddebug576 = {.modname = (char *)"sfc_falcon", .function = (char *)"falcon_probe_nvconfig", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon.c", .format = (char *)"PHY is %d phy_id %d\n", .lineno = (unsigned int)2208U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 2208 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug576.key.dd_key_false.key,(_Bool)0);
    #line 2208 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 2208 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug576,efx->net_dev,(char *)"PHY is %d phy_id %d\n",efx->phy_type,efx->mdio.prtad);
  }
  #line 2211 
  rc = falcon_probe_board(efx,(unsigned short)((int)nvconfig->board_v2.board_revision));
  #line 2213 
  out: 
       #line 2213 
  ;
  #line 2214 
  kfree((void *)nvconfig);
  #line 2215 
  return rc;
}

#line 2218  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon.c"
static int falcon_dimension_resources(struct ef4_nic *efx)
{
  #line 2220 
  efx->rx_dc_base = 131072U;
  #line 2221 
  efx->tx_dc_base = 155648U;
  #line 2222 
  return 0;
}

#line 2226  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon.c"
static void falcon_probe_spi_devices(struct ef4_nic *efx)
{
  #line 2229 
  ef4_oword_t nic_stat;
  #line 2229 
  ef4_oword_t gpio_ctl;
  #line 2229 
  ef4_oword_t ee_vpd_cfg;
  #line 2230 
  int boot_dev;
  #line 2228 
  struct falcon_nic_data *nic_data = (struct falcon_nic_data *)efx->nic_data;
  #line 2232 
  ef4_reado(efx,& gpio_ctl,528U);
  #line 2233 
  ef4_reado(efx,& nic_stat,512U);
  #line 2234 
  ef4_reado(efx,& ee_vpd_cfg,320U);
  #line 2236 
  if ((gpio_ctl.u64[0] & 8ULL) != 0ULL) {
    #line 2237 
    boot_dev = (int)(nic_stat.u64[0] >> 9) & 1;
    #line 2239 
    if ((efx->msg_enable & 2U) != 0U) {
      #line 2239 
      bool branch;
      #line 2239 
      struct _ddebug __UNIQUE_ID_ddebug577 = {.modname = (char *)"sfc_falcon", .function = (char *)"falcon_probe_spi_devices", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon.c", .format = (char *)"Booted from %s\n", .lineno = (unsigned int)2239U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 2239 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug577.key.dd_key_false.key,(_Bool)0);
      #line 2239 
      if ((long)((long)((int)branch != 0)) != 0L) {
        #line 2239 
        char *tmp;
        #line 2239 
        if (boot_dev == 1) 
                           #line 2239 
                           tmp = (char *)"flash"; else 
                                                       #line 2239 
                                                       tmp = (char *)"EEPROM";
        #line 2239 
        ;
        #line 2239 
        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug577,efx->net_dev,(char *)"Booted from %s\n",tmp);
      }
    }
  }
  else {
    #line 2245 
    boot_dev = -1;
    #line 2246 
    if ((efx->msg_enable & 2U) != 0U) {
      #line 2246 
      bool branch_0;
      #line 2246 
      struct _ddebug __UNIQUE_ID_ddebug578 = {.modname = (char *)"sfc_falcon", .function = (char *)"falcon_probe_spi_devices", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon.c", .format = (char *)"Booted from internal ASIC settings;", .lineno = (unsigned int)2246U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 2246 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug578.key.dd_key_false.key,(_Bool)0);
      #line 2246 
      if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                    #line 2246 
                                                    __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug578,efx->net_dev,(char *)"Booted from internal ASIC settings;");
    }
    #line 2249 
    ee_vpd_cfg.u64[0] = 0ULL;
    #line 2249 
    ee_vpd_cfg.u64[1] = 522136081798266880ULL;
    #line 2254 
    ef4_writeo(efx,& ee_vpd_cfg,320U);
  }
  {
    #line 2257 
    struct lock_class_key __key;
    #line 2257 
    __mutex_init(& nic_data->spi_lock,(char *)"&nic_data->spi_lock",& __key);
  }
  #line 2259 
  if (boot_dev == 1) 
                     #line 2260 
                     falcon_spi_device_init(efx,& nic_data->spi_flash,1U,135221969U);
  #line 2263 
  if (boot_dev == 0) 
                     #line 2264 
                     falcon_spi_device_init(efx,& nic_data->spi_eeprom,0U,83886221U);
  #line 2265 
  return;
}

#line 2269  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon.c"
static unsigned int falcon_a1_mem_map_size(struct ef4_nic *efx)
{
  #line 2271 
  return 131072U;
}

#line 2274  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon.c"
static unsigned int falcon_b0_mem_map_size(struct ef4_nic *efx)
{
  #line 2279 
  return 16451584U;
}

#line 2283  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon.c"
static int falcon_probe_nic(struct ef4_nic *efx)
{
  #line 2285 
  struct falcon_nic_data *nic_data;
  #line 2286 
  struct falcon_board *board;
  #line 2287 
  int rc;
  #line 2289 
  efx->primary = efx;
  #line 2292 
  nic_data = (struct falcon_nic_data *)kzalloc_3(3328UL,3264U);
  #line 2293 
  if (nic_data == (struct falcon_nic_data *)0) 
                                               #line 2294 
                                               return -12;
  #line 2295 
  efx->nic_data = (void *)nic_data;
  #line 2296 
  nic_data->efx = efx;
  #line 2298 
  rc = -19;
  #line 2300 
  if (ef4_farch_fpga_ver(efx) != 0U) {
    #line 2301 
    if ((efx->msg_enable & 2U) != 0U) 
                                      #line 2301 
                                      netdev_err(efx->net_dev,(char *)"Falcon FPGA not supported\n");
    #line 2303 
    goto fail1;
  }
  #line 2306 
  if (ef4_nic_rev(efx) <= 1) {
    #line 2307 
    ef4_oword_t nic_stat;
    #line 2308 
    struct pci_dev *dev;
    #line 2309 
    u8 pci_rev = (efx->pci_dev)->revision;
    #line 2311 
    if ((unsigned int)pci_rev + 255U > 253U) {
      #line 2312 
      if ((efx->msg_enable & 2U) != 0U) 
                                        #line 2312 
                                        netdev_err(efx->net_dev,(char *)"Falcon rev A0 not supported\n");
      #line 2314 
      goto fail1;
    }
    #line 2316 
    ef4_reado(efx,& nic_stat,512U);
    #line 2317 
    if ((nic_stat.u64[0] & 4ULL) == 0ULL) {
      #line 2318 
      if ((efx->msg_enable & 2U) != 0U) 
                                        #line 2318 
                                        netdev_err(efx->net_dev,(char *)"Falcon rev A1 1G not supported\n");
      #line 2320 
      goto fail1;
    }
    #line 2322 
    if ((nic_stat.u64[0] & 1ULL) == 0ULL) {
      #line 2323 
      if ((efx->msg_enable & 2U) != 0U) 
                                        #line 2323 
                                        netdev_err(efx->net_dev,(char *)"Falcon rev A1 PCI-X not supported\n");
      #line 2325 
      goto fail1;
    }
    #line 2328 
    dev = pci_dev_get(efx->pci_dev);
    #line 2329 
    while (1) {
      #line 2329 
      dev = pci_get_device(6436U,26371U,dev);
      #line 2329 
      if (! (dev != (struct pci_dev *)0)) 
                                          #line 2329 
                                          break;
      #line 2332 
      if (dev->bus == (efx->pci_dev)->bus && dev->devfn == (efx->pci_dev)->devfn + 1U) {
        #line 2334 
        nic_data->pci_dev2 = dev;
        #line 2335 
        break;
      }
    }
    #line 2338 
    if (nic_data->pci_dev2 == (struct pci_dev *)0) {
      #line 2339 
      if ((efx->msg_enable & 2U) != 0U) 
                                        #line 2339 
                                        netdev_err(efx->net_dev,(char *)"failed to find secondary function\n");
      #line 2341 
      rc = -19;
      #line 2342 
      goto fail2;
    }
  }
  #line 2347 
  rc = __falcon_reset_hw(efx,(enum reset_type)RESET_TYPE_ALL);
  #line 2348 
  if (rc != 0) {
    #line 2349 
    if ((efx->msg_enable & 2U) != 0U) 
                                      #line 2349 
                                      netdev_err(efx->net_dev,(char *)"failed to reset NIC\n");
    #line 2350 
    goto fail3;
  }
  #line 2354 
  rc = ef4_nic_alloc_buffer(efx,& efx->irq_status,16U,3264U);
  #line 2356 
  if (rc != 0) 
               #line 2357 
               goto fail4;
  #line 2358 
  if ((long)((efx->irq_status.dma_addr & 15ULL) != 0ULL) != 0L) {
    #line 2359 
    ldv_inline_asm();
    #line 2360 
    ldv_inline_asm();
    #line 2361 
    ldv_inline_asm();
    #line 2358 
    ;
  }
  #line 2360 
  if ((efx->msg_enable & 2U) != 0U) {
    #line 2360 
    bool branch;
    #line 2360 
    struct _ddebug __UNIQUE_ID_ddebug580 = {.modname = (char *)"sfc_falcon", .function = (char *)"falcon_probe_nic", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon.c", .format = (char *)"INT_KER at %llx (virt %p phys %llx)\n", .lineno = (unsigned int)2360U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 2360 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug580.key.dd_key_false.key,(_Bool)0);
    #line 2360 
    if ((long)((long)((int)branch != 0)) != 0L) {
      #line 2360 
      ;
      #line 2360 
      ;
      #line 2360 
      ;
      #line 2360 
      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug580,efx->net_dev,(char *)"INT_KER at %llx (virt %p phys %llx)\n",efx->irq_status.dma_addr,efx->irq_status.addr,virt_to_phys(efx->irq_status.addr));
    }
  }
  #line 2366 
  falcon_probe_spi_devices(efx);
  #line 2369 
  rc = falcon_probe_nvconfig(efx);
  #line 2370 
  if (rc != 0) {
    #line 2371 
    if (rc == -22) 
      #line 2372 
      if ((efx->msg_enable & 2U) != 0U) 
                                        #line 2372 
                                        netdev_err(efx->net_dev,(char *)"NVRAM is invalid\n");
    #line 2373 
    goto fail5;
  }
  #line 2376 
  if (ef4_nic_rev(efx) <= 1) 
                             #line 2376 
                             efx->max_channels = 4U; else 
                                                          #line 2376 
                                                          efx->max_channels = 32U;
  #line 2378 
  efx->max_tx_channels = efx->max_channels;
  #line 2379 
  efx->timer_quantum_ns = 4968U;
  #line 2380 
  efx->timer_max_ns = (efx->type)->timer_period_max * efx->timer_quantum_ns;
  #line 2384 
  board = falcon_board(efx);
  #line 2385 
  board->i2c_adap.owner = & __this_module;
  #line 2386 
  board->i2c_data = falcon_i2c_bit_operations;
  #line 2387 
  board->i2c_data.data = (void *)efx;
  #line 2388 
  board->i2c_adap.algo_data = (void *)(& board->i2c_data);
  #line 2389 
  board->i2c_adap.dev.parent = & (efx->pci_dev)->dev;
  #line 2390 
  strlcpy((char *)(& board->i2c_adap.name),(char *)"SFC4000 GPIO",48UL);
  #line 2392 
  rc = i2c_bit_add_bus(& board->i2c_adap);
  #line 2393 
  if (rc != 0) 
               #line 2394 
               goto fail5;
  #line 2396 
  rc = (*((falcon_board(efx)->type)->init))(efx);
  #line 2397 
  if (rc != 0) {
    #line 2398 
    if ((efx->msg_enable & 2U) != 0U) 
                                      #line 2398 
                                      netdev_err(efx->net_dev,(char *)"failed to initialise board\n");
    #line 2400 
    goto fail6;
  }
  #line 2403 
  nic_data->stats_disable_count = 1U;
  {
    #line 2404 
    struct lock_class_key __key;
    #line 2404 
    init_timer_key(& nic_data->stats_timer,& falcon_stats_timer_func,0U,(char *)"(&nic_data->stats_timer)",& __key);
  }
  #line 2406 
  return 0;
  #line 2408 
  fail6: 
         #line 2408 
  ;
  #line 2409 
  i2c_del_adapter(& board->i2c_adap);
  #line 2410 
  memset((void *)(& board->i2c_adap),0,2344UL);
  #line 2411 
  fail5: 
         #line 2411 
  ;
  #line 2412 
  ef4_nic_free_buffer(efx,& efx->irq_status);
  #line 2413 
  fail4: 
         #line 2413 
  ;
  #line 2414 
  fail3: 
         #line 2414 
  ;
  #line 2415 
  if (nic_data->pci_dev2 != (struct pci_dev *)0) {
    #line 2416 
    pci_dev_put(nic_data->pci_dev2);
    #line 2417 
    nic_data->pci_dev2 = (struct pci_dev *)0;
  }
  #line 2419 
  fail2: 
         #line 2419 
  ;
  #line 2420 
  fail1: 
         #line 2420 
  ;
  #line 2421 
  kfree(efx->nic_data);
  #line 2422 
  return rc;
}

#line 2425  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon.c"
static void falcon_init_rx_cfg(struct ef4_nic *efx)
{
  #line 2430 
  ef4_oword_t reg;
  #line 2428 
  unsigned int ctrl_xon_thr = 20U;
  #line 2429 
  unsigned int ctrl_xoff_thr = 25U;
  #line 2432 
  ef4_reado(efx,& reg,2048U);
  #line 2433 
  if (ef4_nic_rev(efx) <= 1) {
    #line 2440 
    reg.u64[0] &= 18446744039349813247ULL;
    #line 2440 
    reg.u64[1] = reg.u64[1];
    #line 2441 
    reg.u64[0] = (reg.u64[0] & 18446744073708505087ULL) | 786432ULL;
    #line 2441 
    reg.u64[1] = reg.u64[1];
    #line 2443 
    reg.u64[0] = (reg.u64[0] & 18446744073709549631ULL) | 128ULL;
    #line 2443 
    reg.u64[1] = reg.u64[1];
    #line 2444 
    reg.u64[0] = (reg.u64[0] & 18446744073709551553ULL) | 16ULL;
    #line 2444 
    reg.u64[1] = reg.u64[1];
    #line 2445 
    reg.u64[0] = (reg.u64[0] & 18446744072669364223ULL) | 671088640ULL;
    #line 2445 
    reg.u64[1] = reg.u64[1];
    #line 2446 
    reg.u64[0] = (reg.u64[0] & 18446744073677045759ULL) | 26214400ULL;
    #line 2446 
    reg.u64[1] = reg.u64[1];
  }
  else {
    #line 2449 
    reg.u64[0] &= 18446735277616529407ULL;
    #line 2449 
    reg.u64[1] = reg.u64[1];
    #line 2450 
    reg.u64[0] = (reg.u64[0] & 18446744073441640447ULL) | 29360128ULL;
    #line 2450 
    reg.u64[1] = reg.u64[1];
    #line 2453 
    reg.u64[0] = (reg.u64[0] & 18446744073709028351ULL) | 110592ULL;
    #line 2453 
    reg.u64[1] = reg.u64[1];
    #line 2454 
    reg.u64[0] = (reg.u64[0] & 18446744073709550593ULL) | 424ULL;
    #line 2454 
    reg.u64[1] = reg.u64[1];
    #line 2455 
    reg.u64[0] = (reg.u64[0] & 18446743807421579263ULL) | 171798691840ULL;
    #line 2455 
    reg.u64[1] = reg.u64[1];
    #line 2456 
    reg.u64[0] = (reg.u64[0] & 18446744065388052479ULL) | 6710886400ULL;
    #line 2456 
    reg.u64[1] = reg.u64[1];
    #line 2457 
    reg.u64[0] |= 140737488355328ULL;
    #line 2457 
    reg.u64[1] = reg.u64[1];
    #line 2462 
    reg.u64[0] |= 17592186044416ULL;
    #line 2462 
    reg.u64[1] = reg.u64[1];
    #line 2463 
    reg.u64[0] |= 35184372088832ULL;
    #line 2463 
    reg.u64[1] = reg.u64[1];
    #line 2464 
    reg.u64[0] |= 70368744177664ULL;
    #line 2464 
    reg.u64[1] = reg.u64[1];
  }
  #line 2468 
  reg.u64[0] |= 1ULL;
  #line 2468 
  reg.u64[1] = reg.u64[1];
  #line 2469 
  ef4_writeo(efx,& reg,2048U);
  #line 2470 
  return;
}

#line 2476  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon.c"
static int falcon_init_nic(struct ef4_nic *efx)
{
  #line 2478 
  ef4_oword_t temp;
  #line 2479 
  int rc;
  #line 2482 
  ef4_reado(efx,& temp,512U);
  #line 2483 
  temp.u64[0] |= 65536ULL;
  #line 2483 
  temp.u64[1] = temp.u64[1];
  #line 2484 
  ef4_writeo(efx,& temp,512U);
  #line 2486 
  rc = falcon_reset_sram(efx);
  #line 2487 
  if (rc != 0) 
               #line 2488 
               return rc;
  #line 2493 
  if (ef4_nic_rev(efx) <= 1) {
    #line 2494 
    ef4_reado(efx,& temp,784U);
    #line 2495 
    temp.u64[0] = temp.u64[0];
    #line 2495 
    temp.u64[1] &= 18446744073709550847ULL;
    #line 2496 
    ef4_writeo(efx,& temp,784U);
  }
  #line 2499 
  if (ef4_nic_rev(efx) <= 1) {
    #line 2500 
    ef4_reado(efx,& temp,2064U);
    #line 2501 
    temp.u64[0] = (temp.u64[0] & 18446742978492891135ULL) | 34359738368ULL;
    #line 2501 
    temp.u64[1] = temp.u64[1];
    #line 2502 
    temp.u64[0] = (temp.u64[0] & 18446744073692839935ULL) | 524288ULL;
    #line 2502 
    temp.u64[1] = temp.u64[1];
    #line 2503 
    temp.u64[0] = (temp.u64[0] & 18446744073709551360ULL) | 8ULL;
    #line 2503 
    temp.u64[1] = temp.u64[1];
    #line 2504 
    temp.u64[0] = (temp.u64[0] & 18446744073709486335ULL) | 2048ULL;
    #line 2504 
    temp.u64[1] = temp.u64[1];
    #line 2505 
    ef4_writeo(efx,& temp,2064U);
  }
  #line 2512 
  ef4_reado(efx,& temp,2192U);
  #line 2513 
  temp.u64[0] |= 512ULL;
  #line 2513 
  temp.u64[1] = temp.u64[1];
  #line 2514 
  temp.u64[0] |= 256ULL;
  #line 2514 
  temp.u64[1] = temp.u64[1];
  #line 2515 
  if (ef4_nic_rev(efx) <= 1) {
    #line 2516 
    temp.u64[0] |= 131072ULL;
    #line 2516 
    temp.u64[1] = temp.u64[1];
  }
  #line 2517 
  ef4_writeo(efx,& temp,2192U);
  #line 2522 
  ef4_reado(efx,& temp,2640U);
  #line 2523 
  temp.u64[0] &= 18446744073709551583ULL;
  #line 2523 
  temp.u64[1] = temp.u64[1];
  #line 2524 
  ef4_writeo(efx,& temp,2640U);
  #line 2526 
  falcon_init_rx_cfg(efx);
  #line 2528 
  if (ef4_nic_rev(efx) > 1) {
    #line 2529 
    falcon_b0_rx_push_rss_config(efx,(_Bool)0,(u32 *)(& efx->rx_indir_table));
    #line 2532 
    temp.u64[0] = 0ULL;
    #line 2532 
    temp.u64[1] = 0ULL;
    #line 2533 
    ef4_writeo(efx,& temp,592U);
  }
  #line 2536 
  ef4_farch_init_common(efx);
  #line 2538 
  return 0;
}

#line 2541  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon.c"
static void falcon_remove_nic(struct ef4_nic *efx)
{
  #line 2543 
  struct falcon_nic_data *nic_data = (struct falcon_nic_data *)efx->nic_data;
  #line 2544 
  struct falcon_board *board = falcon_board(efx);
  #line 2546 
  (*((board->type)->fini))(efx);
  #line 2549 
  i2c_del_adapter(& board->i2c_adap);
  #line 2550 
  memset((void *)(& board->i2c_adap),0,2344UL);
  #line 2552 
  ef4_nic_free_buffer(efx,& efx->irq_status);
  #line 2554 
  __falcon_reset_hw(efx,(enum reset_type)RESET_TYPE_ALL);
  #line 2557 
  if (nic_data->pci_dev2 != (struct pci_dev *)0) {
    #line 2558 
    pci_dev_put(nic_data->pci_dev2);
    #line 2559 
    nic_data->pci_dev2 = (struct pci_dev *)0;
  }
  #line 2563 
  kfree(efx->nic_data);
  #line 2564 
  efx->nic_data = (void *)0;
  #line 2565 
  return;
}

#line 2567  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon.c"
static size_t falcon_describe_nic_stats(struct ef4_nic *efx, u8 *names)
{
  #line 2569 
  return ef4_nic_describe_stats((struct ef4_hw_stat_desc *)(& falcon_stat_desc),
                             49UL,(unsigned long *)(& falcon_stat_mask),
                             names);
}

#line 2573  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon.c"
static size_t falcon_update_nic_stats(struct ef4_nic *efx, u64 *full_stats, struct rtnl_link_stats64 *core_stats)
{
  #line 2578 
  ef4_oword_t cnt;
  #line 2576 
  struct falcon_nic_data *nic_data = (struct falcon_nic_data *)efx->nic_data;
  #line 2577 
  u64 *stats = (u64 *)(& nic_data->stats);
  #line 2580 
  if (nic_data->stats_disable_count == 0U) {
    #line 2581 
    ef4_reado(efx,& cnt,2176U);
    #line 2582 
    *(stats + 48U) += cnt.u64[0] & 65535ULL;
    #line 2585 
    if ((int)nic_data->stats_pending != 0 && *((u32 *)(efx->stats_buffer.addr + 212U)) != 0U) {
      #line 2587 
      nic_data->stats_pending = (_Bool)0;
      #line 2588 
      ldv_inline_asm();
      #line 2589 
      ef4_nic_update_stats((struct ef4_hw_stat_desc *)(& falcon_stat_desc),49UL,(unsigned long *)(& falcon_stat_mask),stats,efx->stats_buffer.addr,(_Bool)1);
    }
    #line 2596 
    ef4_update_diff_stat(stats + 23U,(*(stats + 21U) - *(stats + 22U)) - *(stats + 28U) * 64ULL);
    #line 2600 
    ef4_update_sw_stats(efx,stats);
  }
  #line 2603 
  if (full_stats != (u64 *)0ULL) 
                                 #line 2604 
                                 memcpy((void *)full_stats,(void *)stats,392UL);
  #line 2606 
  if (core_stats != (struct rtnl_link_stats64 *)0) {
    #line 2607 
    core_stats->rx_packets = *(stats + 24U);
    #line 2608 
    core_stats->tx_packets = *(stats + 3U);
    #line 2609 
    core_stats->rx_bytes = *(stats + 21U);
    #line 2610 
    core_stats->tx_bytes = *(stats + 2U);
    #line 2611 
    core_stats->rx_dropped = (*(stats + 48U) + *(stats + 1U)) + *stats;
    #line 2614 
    core_stats->multicast = *(stats + 30U);
    #line 2615 
    core_stats->rx_length_errors = *(stats + 40U) + *(stats + 46U);
    #line 2618 
    core_stats->rx_crc_errors = *(stats + 26U);
    #line 2619 
    core_stats->rx_frame_errors = *(stats + 45U);
    #line 2620 
    core_stats->rx_fifo_errors = *(stats + 43U);
    #line 2622 
    core_stats->rx_errors = ((core_stats->rx_length_errors + core_stats->rx_crc_errors) + core_stats->rx_frame_errors) + *(stats + 44U);
  }
  #line 2628 
  return 49UL;
}

#line 2631  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon.c"
void falcon_start_nic_stats(struct ef4_nic *efx)
{
  #line 2633 
  struct falcon_nic_data *nic_data = (struct falcon_nic_data *)efx->nic_data;
  #line 2635 
  cif_spin_lock_bh_stats_lock_of_ef4_nic_0(& efx->stats_lock);
  #line 2636 
  (nic_data->stats_disable_count) --;
  #line 2636 
  if (nic_data->stats_disable_count == 0U) 
                                           #line 2637 
                                           falcon_stats_request(efx);
  #line 2638 
  cif_spin_unlock_bh_stats_lock_of_ef4_nic_0(& efx->stats_lock);
  #line 2639 
  return;
}

#line 2644  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon.c"
static void falcon_pull_nic_stats(struct ef4_nic *efx)
{
  #line 2646 
  msleep(10U);
  #line 2647 
  return;
}

#line 2649  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon.c"
void falcon_stop_nic_stats(struct ef4_nic *efx)
{
  #line 2652 
  int i;
  #line 2651 
  struct falcon_nic_data *nic_data = (struct falcon_nic_data *)efx->nic_data;
  #line 2654 
  __might_sleep((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon.c",2654,0);
  #line 2656 
  cif_spin_lock_bh_stats_lock_of_ef4_nic_0(& efx->stats_lock);
  #line 2657 
  (nic_data->stats_disable_count) ++;
  #line 2658 
  cif_spin_unlock_bh_stats_lock_of_ef4_nic_0(& efx->stats_lock);
  #line 2660 
  cif_del_timer_sync_0(& nic_data->stats_timer);
  #line 2664 
  i = 0;
  #line 2664 
  while (i <= 3 && (int)nic_data->stats_pending != 0) {
    #line 2665 
    if (*((u32 *)(efx->stats_buffer.addr + 212U)) != 0U) 
                                                         #line 2666 
                                                         break;
    #line 2667 
    msleep(1U);
    #line 2664 
    i ++;
  }
  #line 2670 
  cif_spin_lock_bh_stats_lock_of_ef4_nic_0(& efx->stats_lock);
  #line 2671 
  falcon_stats_complete(efx);
  #line 2672 
  cif_spin_unlock_bh_stats_lock_of_ef4_nic_0(& efx->stats_lock);
  #line 2673 
  return;
}

#line 2675  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon.c"
static void falcon_set_id_led(struct ef4_nic *efx, enum ef4_led_mode mode)
{
  #line 2677 
  (*((falcon_board(efx)->type)->set_id_led))(efx,mode);
  #line 2678 
  return;
}

#line 2687  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon.c"
static void falcon_get_wol(struct ef4_nic *efx, struct ethtool_wolinfo *wol)
{
  #line 2689 
  wol->supported = 0U;
  #line 2690 
  wol->wolopts = 0U;
  #line 2691 
  memset((void *)(& wol->sopass),0,6UL);
  #line 2692 
  return;
}

#line 2694  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon.c"
static int falcon_set_wol(struct ef4_nic *efx, u32 type)
{
  #line 2696 
  if (type != 0U) 
                  #line 2697 
                  return -22;
  #line 2698 
  return 0;
}

#line 2708  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon.c"
struct ef4_nic_type falcon_a1_nic_type = {.mem_bar = 2U, .mem_map_size = & falcon_a1_mem_map_size, .probe = & falcon_probe_nic, .remove = & falcon_remove_nic, .init = & falcon_init_nic, .dimension_resources = & falcon_dimension_resources, .fini = & falcon_irq_ack_a1, .monitor = & falcon_monitor, .map_reset_reason = & falcon_map_reset_reason, .map_reset_flags = & falcon_map_reset_flags, .reset = & falcon_reset_hw, .probe_port = & falcon_probe_port, .remove_port = & falcon_remove_port, .handle_global_event = & falcon_handle_global_event, .fini_dmaq = & ef4_farch_fini_dmaq, .prepare_flush = & falcon_prepare_flush, .finish_flush = & ef4_port_dummy_op_void, .prepare_flr = & ef4_port_dummy_op_void, .finish_flr = & ef4_farch_finish_flr, .describe_stats = & falcon_describe_nic_stats, .update_stats = & falcon_update_nic_stats, .start_stats = & falcon_start_nic_stats, .pull_stats = & falcon_pull_nic_stats, .stop_stats = & falcon_stop_nic_stats, .set_id_led = & falcon_set_id_led, .push_irq_moderation = & falcon_push_irq_moderation, .reconfigure_port = & falcon_reconfigure_port, .prepare_enable_fc_tx = & falcon_a1_prepare_enable_fc_tx, .reconfigure_mac = & falcon_reconfigure_xmac, .check_mac_fault = & falcon_xmac_check_fault, .get_wol = & falcon_get_wol, .set_wol = & falcon_set_wol, .resume_wol = & ef4_port_dummy_op_void, .test_nvram = & falcon_test_nvram, .irq_enable_master = & ef4_farch_irq_enable_master, .irq_test_generate = & ef4_farch_irq_test_generate, .irq_disable_non_ev = & ef4_farch_irq_disable_master, .irq_handle_msi = & ef4_farch_msi_interrupt, .irq_handle_legacy = & falcon_legacy_interrupt_a1, .tx_probe = & ef4_farch_tx_probe, .tx_init = & ef4_farch_tx_init, .tx_remove = & ef4_farch_tx_remove, .tx_write = & ef4_farch_tx_write, .tx_limit_len = & ef4_farch_tx_limit_len, .rx_push_rss_config = & dummy_rx_push_rss_config, .rx_probe = & ef4_farch_rx_probe, .rx_init = & ef4_farch_rx_init, .rx_remove = & ef4_farch_rx_remove, .rx_write = & ef4_farch_rx_write, .rx_defer_refill = & ef4_farch_rx_defer_refill, .ev_probe = & ef4_farch_ev_probe, .ev_init = & ef4_farch_ev_init, .ev_fini = & ef4_farch_ev_fini, .ev_remove = & ef4_farch_ev_remove, .ev_process = & ef4_farch_ev_process, .ev_read_ack = & ef4_farch_ev_read_ack, .ev_test_generate = & ef4_farch_ev_test_generate, .filter_table_probe = & ef4_farch_filter_table_probe, .filter_table_restore = & ef4_farch_filter_table_restore, .filter_table_remove = & ef4_farch_filter_table_remove, .filter_insert = & ef4_farch_filter_insert, .filter_remove_safe = & ef4_farch_filter_remove_safe, .filter_get_safe = & ef4_farch_filter_get_safe, .filter_clear_rx = & ef4_farch_filter_clear_rx, .filter_count_rx_used = & ef4_farch_filter_count_rx_used, .filter_get_rx_id_limit = & ef4_farch_filter_get_rx_id_limit, .filter_get_rx_ids = & ef4_farch_filter_get_rx_ids, .mtd_probe = & falcon_mtd_probe, .mtd_rename = & falcon_mtd_rename, .mtd_read = & falcon_mtd_read, .mtd_erase = & falcon_mtd_erase, .mtd_write = & falcon_mtd_write, .mtd_sync = & falcon_mtd_sync, .revision = 1, .txd_ptr_tbl_base = 71936U, .rxd_ptr_tbl_base = 71680U, .buf_tbl_base = 98304U, .evq_ptr_tbl_base = 72192U, .evq_rptr_tbl_base = 72448U, .max_dma_mask = 70368744177663ULL, .rx_buffer_padding = 36U, .max_interrupt_mode = 1U, .timer_period_max = 4096U, .offload_features = 2ULL};
#line 2805  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon.c"
struct ef4_nic_type falcon_b0_nic_type = {.mem_bar = 2U, .mem_map_size = & falcon_b0_mem_map_size, .probe = & falcon_probe_nic, .remove = & falcon_remove_nic, .init = & falcon_init_nic, .dimension_resources = & falcon_dimension_resources, .fini = & ef4_port_dummy_op_void, .monitor = & falcon_monitor, .map_reset_reason = & falcon_map_reset_reason, .map_reset_flags = & falcon_map_reset_flags, .reset = & falcon_reset_hw, .probe_port = & falcon_probe_port, .remove_port = & falcon_remove_port, .handle_global_event = & falcon_handle_global_event, .fini_dmaq = & ef4_farch_fini_dmaq, .prepare_flush = & falcon_prepare_flush, .finish_flush = & ef4_port_dummy_op_void, .prepare_flr = & ef4_port_dummy_op_void, .finish_flr = & ef4_farch_finish_flr, .describe_stats = & falcon_describe_nic_stats, .update_stats = & falcon_update_nic_stats, .start_stats = & falcon_start_nic_stats, .pull_stats = & falcon_pull_nic_stats, .stop_stats = & falcon_stop_nic_stats, .set_id_led = & falcon_set_id_led, .push_irq_moderation = & falcon_push_irq_moderation, .reconfigure_port = & falcon_reconfigure_port, .prepare_enable_fc_tx = & falcon_b0_prepare_enable_fc_tx, .reconfigure_mac = & falcon_reconfigure_xmac, .check_mac_fault = & falcon_xmac_check_fault, .get_wol = & falcon_get_wol, .set_wol = & falcon_set_wol, .resume_wol = & ef4_port_dummy_op_void, .test_chip = & falcon_b0_test_chip, .test_nvram = & falcon_test_nvram, .irq_enable_master = & ef4_farch_irq_enable_master, .irq_test_generate = & ef4_farch_irq_test_generate, .irq_disable_non_ev = & ef4_farch_irq_disable_master, .irq_handle_msi = & ef4_farch_msi_interrupt, .irq_handle_legacy = & ef4_farch_legacy_interrupt, .tx_probe = & ef4_farch_tx_probe, .tx_init = & ef4_farch_tx_init, .tx_remove = & ef4_farch_tx_remove, .tx_write = & ef4_farch_tx_write, .tx_limit_len = & ef4_farch_tx_limit_len, .rx_push_rss_config = & falcon_b0_rx_push_rss_config, .rx_probe = & ef4_farch_rx_probe, .rx_init = & ef4_farch_rx_init, .rx_remove = & ef4_farch_rx_remove, .rx_write = & ef4_farch_rx_write, .rx_defer_refill = & ef4_farch_rx_defer_refill, .ev_probe = & ef4_farch_ev_probe, .ev_init = & ef4_farch_ev_init, .ev_fini = & ef4_farch_ev_fini, .ev_remove = & ef4_farch_ev_remove, .ev_process = & ef4_farch_ev_process, .ev_read_ack = & ef4_farch_ev_read_ack, .ev_test_generate = & ef4_farch_ev_test_generate, .filter_table_probe = & ef4_farch_filter_table_probe, .filter_table_restore = & ef4_farch_filter_table_restore, .filter_table_remove = & ef4_farch_filter_table_remove, .filter_update_rx_scatter = & ef4_farch_filter_update_rx_scatter, .filter_insert = & ef4_farch_filter_insert, .filter_remove_safe = & ef4_farch_filter_remove_safe, .filter_get_safe = & ef4_farch_filter_get_safe, .filter_clear_rx = & ef4_farch_filter_clear_rx, .filter_count_rx_used = & ef4_farch_filter_count_rx_used, .filter_get_rx_id_limit = & ef4_farch_filter_get_rx_id_limit, .filter_get_rx_ids = & ef4_farch_filter_get_rx_ids, .filter_rfs_insert = & ef4_farch_filter_rfs_insert, .filter_rfs_expire_one = & ef4_farch_filter_rfs_expire_one, .mtd_probe = & falcon_mtd_probe, .mtd_rename = & falcon_mtd_rename, .mtd_read = & falcon_mtd_read, .mtd_erase = & falcon_mtd_erase, .mtd_write = & falcon_mtd_write, .mtd_sync = & falcon_mtd_sync, .revision = 2, .txd_ptr_tbl_base = 16056320U, .rxd_ptr_tbl_base = 15990784U, .buf_tbl_base = 8388608U, .evq_ptr_tbl_base = 16121856U, .evq_rptr_tbl_base = 16384000U, .max_dma_mask = 70368744177663ULL, .rx_prefix_size = 16U, .rx_hash_offset = 12U, .can_rx_scatter = (_Bool)1, .timer_period_max = 4096U, .offload_features = 412316860418ULL, .max_rx_ip_filters = 8192U};
#line 186  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/falcon.i.aux"
static void atomic_inc_2(atomic_t *v)
{
  #line 189 
  ldv_atomic_inc(v);
  #line 190 
  return;
}

#line 461  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/falcon.i.aux"
static void *kmalloc_0(size_t size, gfp_t flags)
{
  #line 464 
  return ldv_kmalloc(size,flags);
}

#line 475  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/falcon.i.aux"
static void *kcalloc_2(size_t n, size_t size, gfp_t flags)
{
  #line 478 
  return ldv_kcalloc(n,size,flags);
}

#line 496  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/falcon.i.aux"
static void *kzalloc_3(size_t size, gfp_t flags)
{
  #line 499 
  return ldv_kzalloc(size,flags);
}

#line 817  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/falcon.i.aux"
static void cif___ldv_spin_lock_biu_lock_of_ef4_nic(spinlock_t *lock)
{
  #line 820 
  ldv_spin_model_lock((char *)"biu_lock_of_ef4_nic");
  #line 822 
  __ldv_spin_lock(lock);
  #line 823 
  return;
}

#line 826  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/falcon.i.aux"
static void cif_spin_unlock_irqrestore_biu_lock_of_ef4_nic(spinlock_t *lock, unsigned long flags)
{
  #line 829 
  ldv_spin_model_unlock((char *)"biu_lock_of_ef4_nic");
  #line 831 
  spin_unlock_irqrestore(lock,flags);
  #line 832 
  return;
}

#line 835  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/falcon.i.aux"
static int cif_mutex_lock_interruptible_spi_lock_of_falcon_nic_data(struct mutex *lock)
{
  #line 838 
  int nondetermined = ldv_undef_int();
  #line 840 
  if (nondetermined != 0) {
    #line 842 
    ldv_mutex_model_lock(lock,(char *)"spi_lock_of_falcon_nic_data");
    #line 844 
    return 0;
  }
  else 
       #line 849 
       return -4;
}

#line 854  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/falcon.i.aux"
static void cif_mutex_unlock_spi_lock_of_falcon_nic_data(struct mutex *lock)
{
  #line 857 
  ldv_mutex_model_unlock(lock,(char *)"spi_lock_of_falcon_nic_data");
  #line 858 
  return;
}

#line 861  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/falcon.i.aux"
static void cif_mutex_lock_spi_lock_of_falcon_nic_data(struct mutex *lock)
{
  #line 864 
  ldv_mutex_model_lock(lock,(char *)"spi_lock_of_falcon_nic_data");
  #line 865 
  return;
}

#line 868  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/falcon.i.aux"
static int cif_mod_timer_0(struct timer_list *timer, unsigned long expires)
{
  #line 872 
  return emg_mod_timer(timer,expires);
}

#line 876  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/falcon.i.aux"
static void cif_spin_lock_stats_lock_of_ef4_nic(spinlock_t *lock)
{
  #line 879 
  ldv_spin_model_lock((char *)"stats_lock_of_ef4_nic");
  #line 881 
  spin_lock_1(lock);
  #line 882 
  return;
}

#line 885  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/falcon.i.aux"
static void cif_spin_unlock_stats_lock_of_ef4_nic(spinlock_t *lock)
{
  #line 888 
  ldv_spin_model_unlock((char *)"stats_lock_of_ef4_nic");
  #line 890 
  spin_unlock_1(lock);
  #line 891 
  return;
}

#line 894  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/falcon.i.aux"
static void cif_mutex_lock_mdio_lock_of_falcon_nic_data(struct mutex *lock)
{
  #line 897 
  ldv_mutex_model_lock(lock,(char *)"mdio_lock_of_falcon_nic_data");
  #line 898 
  return;
}

#line 901  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/falcon.i.aux"
static void cif_mutex_unlock_mdio_lock_of_falcon_nic_data(struct mutex *lock)
{
  #line 904 
  ldv_mutex_model_unlock(lock,(char *)"mdio_lock_of_falcon_nic_data");
  #line 905 
  return;
}

#line 908  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/falcon.i.aux"
static void cif_mutex_lock_mac_lock_of_ef4_nic_2(struct mutex *lock)
{
  #line 911 
  ldv_mutex_model_lock(lock,(char *)"mac_lock_of_ef4_nic");
  #line 912 
  return;
}

#line 915  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/falcon.i.aux"
static void cif_mutex_unlock_mac_lock_of_ef4_nic_2(struct mutex *lock)
{
  #line 918 
  ldv_mutex_model_unlock(lock,(char *)"mac_lock_of_ef4_nic");
  #line 919 
  return;
}

#line 922  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/falcon.i.aux"
static void cif_spin_lock_bh_stats_lock_of_ef4_nic_0(spinlock_t *lock)
{
  #line 925 
  ldv_spin_model_lock((char *)"stats_lock_of_ef4_nic");
  #line 927 
  spin_lock_bh_0(lock);
  #line 928 
  return;
}

#line 931  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/falcon.i.aux"
static void cif_spin_unlock_bh_stats_lock_of_ef4_nic_0(spinlock_t *lock)
{
  #line 934 
  ldv_spin_model_unlock((char *)"stats_lock_of_ef4_nic");
  #line 936 
  spin_unlock_bh_1(lock);
  #line 937 
  return;
}

#line 940  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/falcon.i.aux"
static int cif_del_timer_sync_0(struct timer_list *timer)
{
  #line 944 
  return emg_del_timer_sync(timer);
}

#line 668  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 376  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/tenxpress.i.aux"
static void *kzalloc_4(size_t size, gfp_t flags);
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/phy.h"
#line 388  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/tenxpress.c"
void tenxpress_set_id_led(struct ef4_nic *efx, enum ef4_led_mode mode);
#line 148  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/tenxpress.c"
static int tenxpress_init(struct ef4_nic *efx)
{
  #line 151 
  ef4_mdio_write(efx,3,55303,8);
  #line 155 
  ef4_mdio_set_flag(efx,1,49159,8,(_Bool)1);
  #line 157 
  ef4_mdio_write(efx,1,49161,128);
  #line 160 
  return 0;
}

#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/tenxpress.c"
static int tenxpress_phy_probe(struct ef4_nic *efx)
{
  #line 165 
  struct tenxpress_phy_data *phy_data;
  #line 168 
  phy_data = (struct tenxpress_phy_data *)kzalloc_4(12UL,3264U);
  #line 169 
  if (phy_data == (struct tenxpress_phy_data *)0) 
                                                  #line 170 
                                                  return -12;
  #line 171 
  efx->phy_data = (void *)phy_data;
  #line 172 
  phy_data->phy_mode = efx->phy_mode;
  #line 174 
  efx->mdio.mmds = 154U;
  #line 175 
  efx->mdio.mode_support = 2U;
  #line 177 
  efx->loopback_modes = 67338296ULL;
  #line 179 
  efx->link_advertising = 4288U;
  #line 182 
  return 0;
}

#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/tenxpress.c"
static int tenxpress_phy_init(struct ef4_nic *efx)
{
  #line 187 
  int rc;
  #line 189 
  (*((falcon_board(efx)->type)->init_phy))(efx);
  #line 191 
  if (((unsigned int)efx->phy_mode & 8U) == 0U) {
    #line 192 
    rc = ef4_mdio_wait_reset_mmds(efx,154U);
    #line 193 
    if (rc < 0) 
                #line 194 
                return rc;
    #line 196 
    rc = ef4_mdio_check_mmds(efx,154U);
    #line 197 
    if (rc < 0) 
                #line 198 
                return rc;
  }
  #line 201 
  rc = tenxpress_init(efx);
  #line 202 
  if (rc < 0) 
              #line 203 
              return rc;
  #line 206 
  ef4_link_set_wanted_fc(efx,(unsigned char)((int)efx->wanted_fc));
  #line 207 
  ef4_mdio_an_reconfigure(efx);
  #line 209 
  schedule_timeout_uninterruptible(50L);
  #line 212 
  falcon_reset_xaui(efx);
  #line 214 
  return 0;
}

#line 220  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/tenxpress.c"
static int tenxpress_special_reset(struct ef4_nic *efx)
{
  #line 222 
  int rc;
  #line 222 
  int reg;
  #line 227 
  falcon_stop_nic_stats(efx);
  #line 230 
  reg = ef4_mdio_read(efx,1,49152);
  #line 231 
  reg |= 32768;
  #line 232 
  ef4_mdio_write(efx,1,49152,reg);
  {
    #line 234 
    unsigned long __ms = 200UL;
    #line 234 
    while (1) {
      #line 234 
      unsigned long tmp;
      #line 234 
      tmp = __ms;
      #line 234 
      __ms --;
      #line 234 
      ;
      #line 234 
      if (! (tmp != 0UL)) 
                          #line 234 
                          break;
      #line 234 
      __const_udelay(4295000UL);
    }
  }
  #line 237 
  rc = ef4_mdio_wait_reset_mmds(efx,154U);
  #line 238 
  if (rc < 0) 
              #line 239 
              goto out;
  #line 242 
  rc = tenxpress_init(efx);
  #line 243 
  if (rc < 0) 
              #line 244 
              goto out;
  {
    #line 247 
    unsigned long __ms_0 = 10UL;
    #line 247 
    while (1) {
      #line 247 
      unsigned long tmp_0;
      #line 247 
      tmp_0 = __ms_0;
      #line 247 
      __ms_0 --;
      #line 247 
      ;
      #line 247 
      if (! (tmp_0 != 0UL)) 
                            #line 247 
                            break;
      #line 247 
      __const_udelay(4295000UL);
    }
  }
  #line 248 
  out: 
       #line 248 
  ;
  #line 249 
  falcon_start_nic_stats(efx);
  #line 250 
  return rc;
}

#line 253  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/tenxpress.c"
static void sfx7101_check_bad_lp(struct ef4_nic *efx, bool link_ok)
{
  #line 256 
  bool bad_lp;
  #line 257 
  int reg;
  #line 255 
  struct tenxpress_phy_data *pd = (struct tenxpress_phy_data *)efx->phy_data;
  #line 259 
  if ((int)link_ok != 0) 
                         #line 260 
                         bad_lp = (_Bool)0;
  else {
    #line 263 
    reg = ef4_mdio_read(efx,7,1);
    #line 264 
    if ((reg & 1) == 0) 
                        #line 265 
                        return;
    #line 266 
    bad_lp = (_Bool)((reg & 32) == 0);
    #line 267 
    if ((int)bad_lp != 0) 
                          #line 268 
                          (pd->bad_lp_tries) ++;
  }
  #line 272 
  if (pd->bad_lp_tries == 0) 
                             #line 273 
                             return;
  #line 277 
  if (! bad_lp || pd->bad_lp_tries == 5) {
    #line 278 
    reg = ef4_mdio_read(efx,1,49161);
    #line 280 
    reg &= -193;
    #line 281 
    if (! bad_lp) 
                  #line 282 
                  reg |= 128;
    else {
      #line 284 
      reg |= 192;
      #line 285 
      if ((efx->msg_enable & 4U) != 0U) 
                                        #line 285 
                                        netdev_err(efx->net_dev,(char *)"appears to be plugged into a port");
    }
    #line 291 
    ef4_mdio_write(efx,1,49161,reg);
    #line 293 
    pd->bad_lp_tries = (int)bad_lp;
  }
  #line 295 
  return;
}

#line 297  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/tenxpress.c"
static bool sfx7101_link_ok(struct ef4_nic *efx)
{
  #line 299 
  return ef4_mdio_links_ok(efx,26U);
}

#line 305  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/tenxpress.c"
static void tenxpress_ext_loopback(struct ef4_nic *efx)
{
  #line 307 
  ef4_mdio_set_flag(efx,4,49162,256,(_Bool)(efx->loopback_mode == (unsigned int)LOOPBACK_PHYXS));
  #line 310 
  return;
}

#line 312  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/tenxpress.c"
static void tenxpress_low_power(struct ef4_nic *efx)
{
  #line 314 
  ef4_mdio_set_mmds_lpower(efx,((unsigned int)efx->phy_mode & 2U) != 0U,154U);
  #line 316 
  return;
}

#line 319  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/tenxpress.c"
static int tenxpress_phy_reconfigure(struct ef4_nic *efx)
{
  #line 322 
  bool phy_mode_change;
  #line 322 
  bool loop_reset;
  #line 321 
  struct tenxpress_phy_data *phy_data = (struct tenxpress_phy_data *)efx->phy_data;
  #line 324 
  if (((unsigned int)efx->phy_mode & 12U) != 0U) {
    #line 325 
    phy_data->phy_mode = efx->phy_mode;
    #line 326 
    return 0;
  }
  #line 329 
  phy_mode_change = (_Bool)((efx->phy_mode == (unsigned int)PHY_MODE_NORMAL && phy_data->phy_mode != (unsigned int)PHY_MODE_NORMAL) != 0);
  #line 331 
  loop_reset = (_Bool)(((((unsigned long long)(1 << (unsigned int)phy_data->loopback_mode) & efx->loopback_modes) & 18446744073642950656ULL) != 0ULL && (((unsigned long long)(1 << (unsigned int)efx->loopback_mode) & efx->loopback_modes) & 18446744073642950656ULL) == 0ULL || (((1 << (unsigned int)phy_data->loopback_mode) ^ (1 << (unsigned int)efx->loopback_mode)) & 16384) != 0) != 0);
  #line 334 
  if ((int)loop_reset != 0 || (int)phy_mode_change != 0) {
    #line 335 
    tenxpress_special_reset(efx);
    #line 336 
    falcon_reset_xaui(efx);
  }
  #line 339 
  tenxpress_low_power(efx);
  #line 340 
  ef4_mdio_transmit_disable(efx);
  #line 341 
  ef4_mdio_phy_reconfigure(efx);
  #line 342 
  tenxpress_ext_loopback(efx);
  #line 343 
  ef4_mdio_an_reconfigure(efx);
  #line 345 
  phy_data->loopback_mode = efx->loopback_mode;
  #line 346 
  phy_data->phy_mode = efx->phy_mode;
  #line 348 
  return 0;
}

#line 352  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/tenxpress.c"
static bool tenxpress_phy_poll(struct ef4_nic *efx)
{
  #line 363 
  int tmp_0;
  #line 354 
  struct ef4_link_state old_state = efx->link_state;
  #line 356 
  efx->link_state.up = sfx7101_link_ok(efx);
  #line 357 
  efx->link_state.speed = 10000U;
  #line 358 
  efx->link_state.fd = (_Bool)1;
  #line 359 
  efx->link_state.fc = ef4_mdio_get_pause(efx);
  #line 361 
  sfx7101_check_bad_lp(efx,(_Bool)((bool)((int)efx->link_state.up) != 0));
  #line 363 
  if ((int)ef4_link_state_equal(& efx->link_state,& old_state) != 0) 
    #line 363 
    tmp_0 = 0; else 
                    #line 363 
                    tmp_0 = 1;
  #line 363 
  return (_Bool)(tmp_0 != 0);
}

#line 366  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/tenxpress.c"
static void sfx7101_phy_fini(struct ef4_nic *efx)
{
  #line 368 
  int reg;
  #line 371 
  reg = 256;
  #line 372 
  ef4_mdio_write(efx,1,49152,reg);
  #line 377 
  schedule_timeout_uninterruptible(50L);
  #line 378 
  return;
}

#line 380  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/tenxpress.c"
static void tenxpress_phy_remove(struct ef4_nic *efx)
{
  #line 382 
  kfree(efx->phy_data);
  #line 383 
  efx->phy_data = (void *)0;
  #line 384 
  return;
}

#line 388  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/tenxpress.c"
void tenxpress_set_id_led(struct ef4_nic *efx, enum ef4_led_mode mode)
{
  #line 390 
  int reg;
  #line 392 
  switch ((unsigned int)mode) {
    #line 393 
    case (unsigned int)0: 
                          #line 393 
    ;
    #line 394 
    reg = 162;
    #line 397 
    break;
    #line 398 
    case (unsigned int)1: 
                          #line 398 
    ;
    #line 399 
    reg = 81;
    #line 402 
    break;
    #line 403 
    default: 
             #line 403 
    ;
    #line 404 
    reg = 128;
    #line 405 
    break;
  }
  #line 408 
  ef4_mdio_write(efx,1,49161,reg);
  #line 409 
  return;
}

#line 411  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/tenxpress.c"
static char *sfx7101_test_names[1U] = {(char *)"bist"};
#line 415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/tenxpress.c"
static char *sfx7101_test_name(struct ef4_nic *efx, unsigned int index)
{
  #line 417 
  if (index == 0U) 
                   #line 418 
                   return sfx7101_test_names[index];
  #line 419 
  return (char *)0;
}

#line 423  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/tenxpress.c"
static int sfx7101_run_tests(struct ef4_nic *efx, int *results, unsigned int flags)
{
  #line 425 
  int rc;
  #line 427 
  if ((flags & 1U) == 0U) 
                          #line 428 
                          return 0;
  #line 431 
  rc = tenxpress_special_reset(efx);
  #line 432 
  if (rc != 0) 
               #line 432 
               *results = -1; else 
                                   #line 432 
                                   *results = 1;
  #line 434 
  ef4_mdio_an_reconfigure(efx);
  #line 436 
  return rc;
}

#line 440  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/tenxpress.c"
static void tenxpress_get_link_ksettings(struct ef4_nic *efx, struct ethtool_link_ksettings *cmd)
{
  #line 444 
  int reg;
  #line 443 
  u32 adv = 0U;
  #line 443 
  u32 lpa = 0U;
  #line 446 
  reg = ef4_mdio_read(efx,7,32);
  #line 447 
  if ((reg & 4096) != 0) 
                         #line 448 
                         adv |= 4096U;
  #line 449 
  reg = ef4_mdio_read(efx,7,33);
  #line 450 
  if ((reg & 2048) != 0) 
                         #line 451 
                         lpa |= 4096U;
  #line 453 
  mdio45_ethtool_ksettings_get_npage(& efx->mdio,cmd,adv,lpa);
  #line 457 
  if ((((unsigned long long)(1 << (unsigned int)efx->loopback_mode) & efx->loopback_modes) & 18446744073642950656ULL) != 0ULL) 
    #line 458 
    cmd->base.speed = 10000U;
  #line 459 
  return;
}

#line 462  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/tenxpress.c"
static int tenxpress_set_link_ksettings(struct ef4_nic *efx, struct ethtool_link_ksettings *cmd)
{
  #line 465 
  if ((unsigned int)cmd->base.autoneg == 0U) 
                                             #line 466 
                                             return -22;
  #line 468 
  return ef4_mdio_set_link_ksettings(efx,cmd);
}

#line 471  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/tenxpress.c"
static void sfx7101_set_npage_adv(struct ef4_nic *efx, u32 advertising)
{
  #line 473 
  ef4_mdio_set_flag(efx,7,32,4096,(_Bool)(((unsigned long)advertising & 4096UL) != 0UL));
  #line 476 
  return;
}

#line 478  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/tenxpress.c"
struct ef4_phy_operations falcon_sfx7101_phy_ops = {.probe = & tenxpress_phy_probe, .init = & tenxpress_phy_init, .fini = & sfx7101_phy_fini, .remove = & tenxpress_phy_remove, .reconfigure = & tenxpress_phy_reconfigure, .poll = & tenxpress_phy_poll, .get_link_ksettings = & tenxpress_get_link_ksettings, .set_link_ksettings = & tenxpress_set_link_ksettings, .set_npage_adv = & sfx7101_set_npage_adv, .test_alive = & ef4_mdio_test_alive, .test_name = & sfx7101_test_name, .run_tests = & sfx7101_run_tests};
#line 376  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/tenxpress.i.aux"
static void *kzalloc_4(size_t size, gfp_t flags)
{
  #line 379 
  return ldv_kzalloc(size,flags);
}

#line 8  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/farch.i.aux"
#line 8 
void ldv_atomic_dec(atomic_t *v);
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 123  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/farch.i.aux"
static void cif_set_bit_1(long nr, unsigned long *addr);
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 130  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/farch.i.aux"
static void cif_clear_bit_1(long nr, unsigned long *addr);
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/le.h"
__inline static void __set_bit_le(int nr, void *addr)
{
  #line 70 
  __clear_bit((long)nr,(unsigned long *)addr);
  #line 71 
  return;
}

#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cmpxchg.h"
#line 15 
void __cmpxchg_wrong_size(void);
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cmpxchg_64.h"
__inline static int arch_atomic_read_2(atomic_t *v)
{
  #line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
  union __anonunion___u_9278 __u;
  #line 31 
  __read_once_size((void *)(& v->counter),(void *)(& __u.__c),4);
  #line 31 
  return (__u.__val);
}

#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
__inline static void arch_atomic_set_0(atomic_t *v, int i)
{
  #line 44 
  union __anonunion___u_9280 __u = {.__val = i};
  #line 43 
  __write_once_size((void *)(& v->counter),(void *)(& __u.__c),4);
  #line 43 
  int tmp = __u.__val;
  #line 45 
  return;
}

#line 192  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
__inline static int arch_atomic_cmpxchg(atomic_t *v, int old, int new)
{
  #line 194 
  int __ret;
  {
    #line 194 
    int __old = old;
    #line 194 
    int __new = new;
    #line 194 
    switch (4UL) {
      #line 194 
      case (unsigned long)1: 
                             #line 194 
      ;
      {
        #line 194 
        u8 *__ptr = (u8 *)(& v->counter);
        #line 195 
        ldv_inline_asm();
        #line 194 
        break;
      }
      #line 194 
      case (unsigned long)2: 
                             #line 194 
      ;
      {
        #line 194 
        u16 *__ptr_0 = (u16 *)(& v->counter);
        #line 195 
        ldv_inline_asm();
        #line 194 
        break;
      }
      #line 194 
      case (unsigned long)4: 
                             #line 194 
      ;
      {
        #line 194 
        u32 *__ptr_1 = (u32 *)(& v->counter);
        #line 195 
        ldv_inline_asm();
        #line 194 
        break;
      }
      #line 194 
      case (unsigned long)8: 
                             #line 194 
      ;
      {
        #line 194 
        u64 *__ptr_2 = (u64 *)(& v->counter);
        #line 195 
        ldv_inline_asm();
        #line 194 
        break;
      }
      #line 194 
      default: 
               #line 194 
      ;
      #line 194 
      __cmpxchg_wrong_size();
    }
    }
  #line 194 
  return __ret;
}

#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
__inline static int atomic_read_2(atomic_t *v)
{
  #line 26 
  kasan_check_read((void *)v,4U);
  #line 27 
  return arch_atomic_read_2(v);
}

#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
__inline static void atomic_set_0(atomic_t *v, int i)
{
  #line 44 
  kasan_check_read((void *)v,4U);
  #line 45 
  arch_atomic_set_0(v,i);
  #line 46 
  return;
}

#line 237 
#line 186  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/farch.i.aux"
static void atomic_inc_3(atomic_t *v);
#line 327  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
#line 193  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/farch.i.aux"
static void atomic_dec(atomic_t *v);
#line 651  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
__inline static int atomic_cmpxchg(atomic_t *v, int old, int new)
{
  #line 653 
  kasan_check_read((void *)v,4U);
  #line 654 
  return arch_atomic_cmpxchg(v,old,new);
}

#line 336  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock_2(spinlock_t *lock)
{
  #line 338 
  _raw_spin_lock(& lock->__anonCompField_spinlock_25.rlock);
  #line 339 
  return;
}

#line 340 
#line 557  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/farch.i.aux"
static void cif_spin_lock__xmit_lock_of_netdev_queue_1(spinlock_t *lock);
#line 340  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 615  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/farch.i.aux"
static void cif_spin_lock_tx_global_lock_of_net_device_1(spinlock_t *lock);
#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock_bh_1(spinlock_t *lock)
{
  #line 343 
  _raw_spin_lock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 344 
  return;
}

#line 345 
#line 642  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/farch.i.aux"
static void cif_spin_lock_bh_addr_list_lock_of_net_device_0(spinlock_t *lock);
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 835  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/farch.i.aux"
static void cif_spin_lock_bh_filter_lock_of_ef4_nic(spinlock_t *lock);
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_2(spinlock_t *lock)
{
  #line 378 
  _raw_spin_unlock(& lock->__anonCompField_spinlock_25.rlock);
  #line 379 
  return;
}

#line 380 
#line 597  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/farch.i.aux"
static void cif_spin_unlock__xmit_lock_of_netdev_queue_1(spinlock_t *lock);
#line 380  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 624  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/farch.i.aux"
static void cif_spin_unlock_tx_global_lock_of_net_device_1(spinlock_t *lock);
#line 381  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_bh_2(spinlock_t *lock)
{
  #line 383 
  _raw_spin_unlock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 384 
  return;
}

#line 385 
#line 660  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/farch.i.aux"
static void cif_spin_unlock_bh_addr_list_lock_of_net_device_0(spinlock_t *lock);
#line 385  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 844  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/farch.i.aux"
static void cif_spin_unlock_bh_filter_lock_of_ef4_nic_0(spinlock_t *lock);
#line 391  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_irqrestore_0(spinlock_t *lock, unsigned long flags)
{
  {
    #line 393 
    unsigned long __dummy;
    #line 393 
    unsigned long __dummy2;
    }
  #line 393 
  _raw_spin_unlock_irqrestore(& lock->__anonCompField_spinlock_25.rlock,flags);
  #line 395 
  return;
}

#line 395 
#line 826  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/farch.i.aux"
static void cif_spin_unlock_irqrestore_biu_lock_of_ef4_nic_0(spinlock_t *lock, unsigned long flags);
#line 35 
#line 817 
static void cif___ldv_spin_lock_biu_lock_of_ef4_nic_0(spinlock_t *lock);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/vmalloc.h"
#line 22 
void *ldv_vzalloc(unsigned long size);
#line 23 
#line 23 
void ldv_vfree(void *addr);
#line 257  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/overflow.h"
#line 257 
extern int ( /* missing proto */ __builtin_mul_overflow)(unsigned long x_0, unsigned long x_1, size_t *x_2);
#line 253  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/overflow.h"
__inline static size_t array_size(size_t a, size_t b)
{
  #line 257 
  size_t __a;
  #line 257 
  size_t __b;
  #line 257 
  size_t *__d;
  #line 255 
  size_t bytes;
  {
    #line 257 
    __a = a;
    #line 257 
    __b = b;
    #line 257 
    __d = & bytes;
    #line 257 
    int tmp = & __a == __d;
    }
  #line 257 
  if (__builtin_mul_overflow(__a,__b,__d) != 0) 
                                                #line 258 
                                                return 18446744073709551615UL;
  #line 260 
  return bytes;
}

#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmalloc.h"
#line 860  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/farch.i.aux"
static void *cif_vzalloc(unsigned long size);
#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmalloc.h"
#line 853  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/farch.i.aux"
static void cif_vfree(void *addr);
#line 200  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
#line 200 
void __wake_up(struct wait_queue_head *, unsigned int, int, void *);
#line 248 
#line 248 
void init_wait_entry(struct wait_queue_entry *, int);
#line 1128 
#line 1128 
long prepare_to_wait_event(struct wait_queue_head *, struct wait_queue_entry *, int);
#line 1129 
#line 1129 
void finish_wait(struct wait_queue_head *, struct wait_queue_entry *);
#line 235  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 235 
void disable_irq_nosync(unsigned int);
#line 607  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 475  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/farch.i.aux"
static void *kcalloc_3(size_t n, size_t size, gfp_t flags);
#line 668  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 496  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/farch.i.aux"
static void *kzalloc_5(size_t size, gfp_t flags);
#line 1161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
#line 1161 
void pci_clear_master(struct pci_dev *);
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/crc32.h"
#line 11 
u32 crc32_le(u32, unsigned char *, size_t);
#line 730  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 730 
bool rps_may_expire_flow(struct net_device *, u16, u32, u16);
#line 3934  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void __netif_tx_lock_1(struct netdev_queue *txq, int cpu)
{
  #line 3936 
  cif_spin_lock__xmit_lock_of_netdev_queue_1(& txq->_xmit_lock);
  #line 3937 
  txq->xmit_lock_owner = cpu;
  #line 3938 
  return;
}

#line 3965  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void __netif_tx_unlock_1(struct netdev_queue *txq)
{
  #line 3967 
  txq->xmit_lock_owner = -1;
  #line 3968 
  cif_spin_unlock__xmit_lock_of_netdev_queue_1(& txq->_xmit_lock);
  #line 3969 
  return;
}

#line 3998  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_lock_1(struct net_device *dev)
{
  #line 4004 
  int pscr_ret__;
  #line 4000 
  unsigned int i;
  #line 4001 
  int cpu;
  #line 4003 
  cif_spin_lock_tx_global_lock_of_net_device_1(& dev->tx_global_lock);
  #line 4004 
  __this_cpu_preempt_check((char *)"read");
  {
    #line 4004 
    void *__vpp_verify = (void *)0;
    #line 4004 
    void *tmp = __vpp_verify;
  }
  #line 4004 
  switch (4UL) {
    #line 4004 
    int pfo_ret___2;
    #line 4004 
    int pfo_ret__;
    #line 4004 
    int pfo_ret___0;
    #line 4004 
    int pfo_ret___1;
    #line 4004 
    case (unsigned long)1: 
                           #line 4004 
    ;
    #line 4004 
    switch (4UL) {
      #line 4004 
      case (unsigned long)1: 
                             #line 4004 
      ;
      #line 4005 
      ldv_inline_asm();
      #line 4004 
      break;
      #line 4004 
      case (unsigned long)2: 
                             #line 4004 
      ;
      #line 4005 
      ldv_inline_asm();
      #line 4004 
      break;
      #line 4004 
      case (unsigned long)4: 
                             #line 4004 
      ;
      #line 4005 
      ldv_inline_asm();
      #line 4004 
      break;
      #line 4004 
      case (unsigned long)8: 
                             #line 4004 
      ;
      #line 4005 
      ldv_inline_asm();
      #line 4004 
      break;
      #line 4004 
      default: 
               #line 4004 
      ;
      #line 4004 
      __bad_percpu_size();
    }
    #line 4004 
    pscr_ret__ = pfo_ret__;
    #line 4004 
    break;
    #line 4004 
    case (unsigned long)2: 
                           #line 4004 
    ;
    #line 4004 
    switch (4UL) {
      #line 4004 
      case (unsigned long)1: 
                             #line 4004 
      ;
      #line 4005 
      ldv_inline_asm();
      #line 4004 
      break;
      #line 4004 
      case (unsigned long)2: 
                             #line 4004 
      ;
      #line 4005 
      ldv_inline_asm();
      #line 4004 
      break;
      #line 4004 
      case (unsigned long)4: 
                             #line 4004 
      ;
      #line 4005 
      ldv_inline_asm();
      #line 4004 
      break;
      #line 4004 
      case (unsigned long)8: 
                             #line 4004 
      ;
      #line 4005 
      ldv_inline_asm();
      #line 4004 
      break;
      #line 4004 
      default: 
               #line 4004 
      ;
      #line 4004 
      __bad_percpu_size();
    }
    #line 4004 
    pscr_ret__ = pfo_ret___0;
    #line 4004 
    break;
    #line 4004 
    case (unsigned long)4: 
                           #line 4004 
    ;
    #line 4004 
    switch (4UL) {
      #line 4004 
      case (unsigned long)1: 
                             #line 4004 
      ;
      #line 4005 
      ldv_inline_asm();
      #line 4004 
      break;
      #line 4004 
      case (unsigned long)2: 
                             #line 4004 
      ;
      #line 4005 
      ldv_inline_asm();
      #line 4004 
      break;
      #line 4004 
      case (unsigned long)4: 
                             #line 4004 
      ;
      #line 4005 
      ldv_inline_asm();
      #line 4004 
      break;
      #line 4004 
      case (unsigned long)8: 
                             #line 4004 
      ;
      #line 4005 
      ldv_inline_asm();
      #line 4004 
      break;
      #line 4004 
      default: 
               #line 4004 
      ;
      #line 4004 
      __bad_percpu_size();
    }
    #line 4004 
    pscr_ret__ = pfo_ret___1;
    #line 4004 
    break;
    #line 4004 
    case (unsigned long)8: 
                           #line 4004 
    ;
    #line 4004 
    switch (4UL) {
      #line 4004 
      case (unsigned long)1: 
                             #line 4004 
      ;
      #line 4005 
      ldv_inline_asm();
      #line 4004 
      break;
      #line 4004 
      case (unsigned long)2: 
                             #line 4004 
      ;
      #line 4005 
      ldv_inline_asm();
      #line 4004 
      break;
      #line 4004 
      case (unsigned long)4: 
                             #line 4004 
      ;
      #line 4005 
      ldv_inline_asm();
      #line 4004 
      break;
      #line 4004 
      case (unsigned long)8: 
                             #line 4004 
      ;
      #line 4005 
      ldv_inline_asm();
      #line 4004 
      break;
      #line 4004 
      default: 
               #line 4004 
      ;
      #line 4004 
      __bad_percpu_size();
    }
    #line 4004 
    pscr_ret__ = pfo_ret___2;
    #line 4004 
    break;
    #line 4004 
    default: 
             #line 4004 
    ;
    #line 4004 
    __bad_size_call_parameter();
    #line 4004 
    break;
  }
  #line 4004 
  cpu = pscr_ret__;
  #line 4005 
  i = 0U;
  #line 4005 
  while (dev->num_tx_queues > i) {
    {
      #line 4006 
      struct netdev_queue *txq = netdev_get_tx_queue(dev,i);
      #line 4014 
      __netif_tx_lock_1(txq,cpu);
      #line 4015 
      cif_set_bit_1(2L,& txq->state);
      #line 4016 
      __netif_tx_unlock_1(txq);
    }
    #line 4005 
    i ++;
  }
  #line 4018 
  return;
}

#line 4026  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_unlock_1(struct net_device *dev)
{
  #line 4028 
  unsigned int i;
  #line 4030 
  i = 0U;
  #line 4030 
  while (dev->num_tx_queues > i) {
    {
      #line 4031 
      struct netdev_queue *txq = netdev_get_tx_queue(dev,i);
      #line 4037 
      cif_clear_bit_1(2L,& txq->state);
      #line 4038 
      netif_schedule_queue(txq);
    }
    #line 4030 
    i ++;
  }
  #line 4040 
  cif_spin_unlock_tx_global_lock_of_net_device_1(& dev->tx_global_lock);
  #line 4041 
  return;
}

#line 4092  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_addr_lock_bh_0(struct net_device *dev)
{
  #line 4094 
  cif_spin_lock_bh_addr_list_lock_of_net_device_0(& dev->addr_list_lock);
  #line 4095 
  return;
}

#line 4102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_addr_unlock_bh_0(struct net_device *dev)
{
  #line 4104 
  cif_spin_unlock_bh_addr_list_lock_of_net_device_0(& dev->addr_list_lock);
  #line 4105 
  return;
}

#line 1188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/net_driver.h"
__inline static struct ef4_tx_queue *ef4_get_tx_queue(struct ef4_nic *efx, unsigned int index, unsigned int type)
{
  #line 1192 
  return & (efx->channel[efx->tx_channel_offset + index])->tx_queue[type];
}

#line 1202  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/net_driver.h"
__inline static struct ef4_tx_queue *ef4_channel_get_tx_queue(struct ef4_channel *channel, unsigned int type)
{
  #line 1206 
  return & channel->tx_queue[type];
}

#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.h"
#line 31 
void ef4_xmit_done(struct ef4_tx_queue *tx_queue, unsigned int index);
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.h"
__inline static bool ef4_rss_enabled(struct ef4_nic *efx)
{
  #line 75 
  return (_Bool)(efx->rss_spread > 1U);
}

#line 233  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.h"
__inline static void ef4_schedule_channel_0(struct ef4_channel *channel)
{
  #line 235 
  if (0) 
    #line 235 
    if (((channel->efx)->msg_enable & 512U) != 0U) {
      #line 235 
      int pscr_ret__;
      {
        #line 235 
        void *__vpp_verify = (void *)0;
        #line 235 
        void *tmp = __vpp_verify;
      }
      #line 235 
      switch (4UL) {
        #line 235 
        int pfo_ret__;
        #line 235 
        int pfo_ret___0;
        #line 235 
        int pfo_ret___1;
        #line 235 
        int pfo_ret___2;
        #line 235 
        case (unsigned long)1: 
                               #line 235 
        ;
        #line 235 
        switch (4UL) {
          #line 235 
          case (unsigned long)1: 
                                 #line 235 
          ;
          #line 236 
          ldv_inline_asm();
          #line 235 
          break;
          #line 235 
          case (unsigned long)2: 
                                 #line 235 
          ;
          #line 236 
          ldv_inline_asm();
          #line 235 
          break;
          #line 235 
          case (unsigned long)4: 
                                 #line 235 
          ;
          #line 236 
          ldv_inline_asm();
          #line 235 
          break;
          #line 235 
          case (unsigned long)8: 
                                 #line 235 
          ;
          #line 236 
          ldv_inline_asm();
          #line 235 
          break;
          #line 235 
          default: 
                   #line 235 
          ;
          #line 235 
          __bad_percpu_size();
        }
        #line 235 
        pscr_ret__ = pfo_ret__;
        #line 235 
        break;
        #line 235 
        case (unsigned long)2: 
                               #line 235 
        ;
        #line 235 
        switch (4UL) {
          #line 235 
          case (unsigned long)1: 
                                 #line 235 
          ;
          #line 236 
          ldv_inline_asm();
          #line 235 
          break;
          #line 235 
          case (unsigned long)2: 
                                 #line 235 
          ;
          #line 236 
          ldv_inline_asm();
          #line 235 
          break;
          #line 235 
          case (unsigned long)4: 
                                 #line 235 
          ;
          #line 236 
          ldv_inline_asm();
          #line 235 
          break;
          #line 235 
          case (unsigned long)8: 
                                 #line 235 
          ;
          #line 236 
          ldv_inline_asm();
          #line 235 
          break;
          #line 235 
          default: 
                   #line 235 
          ;
          #line 235 
          __bad_percpu_size();
        }
        #line 235 
        pscr_ret__ = pfo_ret___0;
        #line 235 
        break;
        #line 235 
        case (unsigned long)4: 
                               #line 235 
        ;
        #line 235 
        switch (4UL) {
          #line 235 
          case (unsigned long)1: 
                                 #line 235 
          ;
          #line 236 
          ldv_inline_asm();
          #line 235 
          break;
          #line 235 
          case (unsigned long)2: 
                                 #line 235 
          ;
          #line 236 
          ldv_inline_asm();
          #line 235 
          break;
          #line 235 
          case (unsigned long)4: 
                                 #line 235 
          ;
          #line 236 
          ldv_inline_asm();
          #line 235 
          break;
          #line 235 
          case (unsigned long)8: 
                                 #line 235 
          ;
          #line 236 
          ldv_inline_asm();
          #line 235 
          break;
          #line 235 
          default: 
                   #line 235 
          ;
          #line 235 
          __bad_percpu_size();
        }
        #line 235 
        pscr_ret__ = pfo_ret___1;
        #line 235 
        break;
        #line 235 
        case (unsigned long)8: 
                               #line 235 
        ;
        #line 235 
        switch (4UL) {
          #line 235 
          case (unsigned long)1: 
                                 #line 235 
          ;
          #line 236 
          ldv_inline_asm();
          #line 235 
          break;
          #line 235 
          case (unsigned long)2: 
                                 #line 235 
          ;
          #line 236 
          ldv_inline_asm();
          #line 235 
          break;
          #line 235 
          case (unsigned long)4: 
                                 #line 235 
          ;
          #line 236 
          ldv_inline_asm();
          #line 235 
          break;
          #line 235 
          case (unsigned long)8: 
                                 #line 235 
          ;
          #line 236 
          ldv_inline_asm();
          #line 235 
          break;
          #line 235 
          default: 
                   #line 235 
          ;
          #line 235 
          __bad_percpu_size();
        }
        #line 235 
        pscr_ret__ = pfo_ret___2;
        #line 235 
        break;
        #line 235 
        default: 
                 #line 235 
        ;
        #line 235 
        __bad_size_call_parameter();
        #line 235 
        break;
      }
      #line 235 
      ;
      #line 235 
      ;
      #line 235 
      netdev_printk((char *)"\001",(channel->efx)->net_dev,(char *)"channel %d scheduling NAPI poll on CPU%d\n",channel->channel,pscr_ret__);
    }
  #line 239 
  napi_schedule(& channel->napi_str);
  #line 240 
  return;
}

#line 242  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.h"
__inline static void ef4_schedule_channel_irq_0(struct ef4_channel *channel)
{
  #line 244 
  int pscr_ret__;
  {
    #line 244 
    void *__vpp_verify = (void *)0;
    #line 244 
    void *tmp = __vpp_verify;
  }
  #line 244 
  switch (4UL) {
    #line 244 
    int pfo_ret___2;
    #line 244 
    int pfo_ret__;
    #line 244 
    int pfo_ret___0;
    #line 244 
    int pfo_ret___1;
    #line 244 
    case (unsigned long)1: 
                           #line 244 
    ;
    #line 244 
    switch (4UL) {
      #line 244 
      case (unsigned long)1: 
                             #line 244 
      ;
      #line 245 
      ldv_inline_asm();
      #line 244 
      break;
      #line 244 
      case (unsigned long)2: 
                             #line 244 
      ;
      #line 245 
      ldv_inline_asm();
      #line 244 
      break;
      #line 244 
      case (unsigned long)4: 
                             #line 244 
      ;
      #line 245 
      ldv_inline_asm();
      #line 244 
      break;
      #line 244 
      case (unsigned long)8: 
                             #line 244 
      ;
      #line 245 
      ldv_inline_asm();
      #line 244 
      break;
      #line 244 
      default: 
               #line 244 
      ;
      #line 244 
      __bad_percpu_size();
    }
    #line 244 
    pscr_ret__ = pfo_ret__;
    #line 244 
    break;
    #line 244 
    case (unsigned long)2: 
                           #line 244 
    ;
    #line 244 
    switch (4UL) {
      #line 244 
      case (unsigned long)1: 
                             #line 244 
      ;
      #line 245 
      ldv_inline_asm();
      #line 244 
      break;
      #line 244 
      case (unsigned long)2: 
                             #line 244 
      ;
      #line 245 
      ldv_inline_asm();
      #line 244 
      break;
      #line 244 
      case (unsigned long)4: 
                             #line 244 
      ;
      #line 245 
      ldv_inline_asm();
      #line 244 
      break;
      #line 244 
      case (unsigned long)8: 
                             #line 244 
      ;
      #line 245 
      ldv_inline_asm();
      #line 244 
      break;
      #line 244 
      default: 
               #line 244 
      ;
      #line 244 
      __bad_percpu_size();
    }
    #line 244 
    pscr_ret__ = pfo_ret___0;
    #line 244 
    break;
    #line 244 
    case (unsigned long)4: 
                           #line 244 
    ;
    #line 244 
    switch (4UL) {
      #line 244 
      case (unsigned long)1: 
                             #line 244 
      ;
      #line 245 
      ldv_inline_asm();
      #line 244 
      break;
      #line 244 
      case (unsigned long)2: 
                             #line 244 
      ;
      #line 245 
      ldv_inline_asm();
      #line 244 
      break;
      #line 244 
      case (unsigned long)4: 
                             #line 244 
      ;
      #line 245 
      ldv_inline_asm();
      #line 244 
      break;
      #line 244 
      case (unsigned long)8: 
                             #line 244 
      ;
      #line 245 
      ldv_inline_asm();
      #line 244 
      break;
      #line 244 
      default: 
               #line 244 
      ;
      #line 244 
      __bad_percpu_size();
    }
    #line 244 
    pscr_ret__ = pfo_ret___1;
    #line 244 
    break;
    #line 244 
    case (unsigned long)8: 
                           #line 244 
    ;
    #line 244 
    switch (4UL) {
      #line 244 
      case (unsigned long)1: 
                             #line 244 
      ;
      #line 245 
      ldv_inline_asm();
      #line 244 
      break;
      #line 244 
      case (unsigned long)2: 
                             #line 244 
      ;
      #line 245 
      ldv_inline_asm();
      #line 244 
      break;
      #line 244 
      case (unsigned long)4: 
                             #line 244 
      ;
      #line 245 
      ldv_inline_asm();
      #line 244 
      break;
      #line 244 
      case (unsigned long)8: 
                             #line 244 
      ;
      #line 245 
      ldv_inline_asm();
      #line 244 
      break;
      #line 244 
      default: 
               #line 244 
      ;
      #line 244 
      __bad_percpu_size();
    }
    #line 244 
    pscr_ret__ = pfo_ret___2;
    #line 244 
    break;
    #line 244 
    default: 
             #line 244 
    ;
    #line 244 
    __bad_size_call_parameter();
    #line 244 
    break;
  }
  #line 244 
  channel->event_test_cpu = pscr_ret__;
  #line 245 
  ef4_schedule_channel_0(channel);
  #line 246 
  return;
}

#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/nic.h"
__inline static ef4_qword_t *ef4_event(struct ef4_channel *channel, unsigned int index)
{
  #line 39 
  return (ef4_qword_t *)channel->eventq.buf.addr + (unsigned long)(channel->eventq_mask & index);
}

#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/nic.h"
__inline static int ef4_event_present(ef4_qword_t *event)
{
  #line 55 
  return (event->dword[0].u32[0] != 4294967295U && event->dword[1].u32[0] != 4294967295U) != 0;
}

#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/nic.h"
__inline static ef4_qword_t *ef4_tx_desc(struct ef4_tx_queue *tx_queue, unsigned int index)
{
  #line 65 
  return (ef4_qword_t *)tx_queue->txd.buf.addr + (unsigned long)index;
}

#line 80  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/nic.h"
__inline static bool __ef4_nic_tx_is_empty(struct ef4_tx_queue *tx_queue, unsigned int write_count)
{
  #line 84 
  union __anonunion___u_10230 __u;
  #line 83 
  __read_once_size((void *)(& tx_queue->empty_read_count),(void *)(& __u.__c),4);
  #line 83 
  unsigned int empty_read_count = (__u.__val);
  #line 85 
  if (empty_read_count == 0U) 
                              #line 86 
                              return (_Bool)0;
  #line 88 
  return (_Bool)(((empty_read_count ^ write_count) & 2147483647U) == 0U);
}

#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/nic.h"
__inline static bool ef4_nic_may_push_tx_desc(struct ef4_tx_queue *tx_queue, unsigned int write_count)
{
  #line 102 
  bool was_empty = __ef4_nic_tx_is_empty(tx_queue,write_count);
  #line 104 
  tx_queue->empty_read_count = 0U;
  #line 105 
  return (_Bool)(((int)was_empty != 0 && tx_queue->write_count - write_count == 1U) != 0);
}

#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/nic.h"
__inline static ef4_qword_t *ef4_rx_desc(struct ef4_rx_queue *rx_queue, unsigned int index)
{
  #line 112 
  return (ef4_qword_t *)rx_queue->rxd.buf.addr + (unsigned long)index;
}

#line 385 
#line 443  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/farch.c"
void ef4_farch_tx_fini(struct ef4_tx_queue *tx_queue);
#line 392  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/nic.h"
#line 575  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/farch.c"
void ef4_farch_rx_fini(struct ef4_rx_queue *rx_queue);
#line 480  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/nic.h"
#line 1644  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/farch.c"
void ef4_farch_dimension_resources(struct ef4_nic *efx, unsigned int sram_lim_qw);
#line 509  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/nic.h"
#line 795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/farch.c"
void ef4_farch_generate_event(struct ef4_nic *efx, unsigned int evq, ef4_qword_t *event);
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/io.h"
__inline static void ef4_writeo_0(struct ef4_nic *efx, ef4_oword_t *value, unsigned int reg)
{
  #line 92 
  unsigned long flags;
  #line 98 
  cif___ldv_spin_lock_biu_lock_of_ef4_nic_0(& efx->biu_lock);
  #line 100 
  _ef4_writeq(efx,value->u64[0],reg);
  #line 101 
  _ef4_writeq(efx,value->u64[1],reg + 8U);
  #line 108 
  cif_spin_unlock_irqrestore_biu_lock_of_ef4_nic_0(& efx->biu_lock,flags);
  #line 109 
  return;
}

#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/io.h"
__inline static void ef4_sram_writeq(struct ef4_nic *efx, void *membase, ef4_qword_t *value, unsigned int index)
{
  #line 116 
  unsigned long flags;
  #line 115 
  unsigned int addr = index * 8U;
  #line 122 
  cif___ldv_spin_lock_biu_lock_of_ef4_nic_0(& efx->biu_lock);
  #line 124 
  __writeq(value->u64[0],membase + (unsigned long)addr);
  #line 129 
  cif_spin_unlock_irqrestore_biu_lock_of_ef4_nic_0(& efx->biu_lock,flags);
  #line 130 
  return;
}

#line 145  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/io.h"
__inline static void ef4_reado_0(struct ef4_nic *efx, ef4_oword_t *value, unsigned int reg)
{
  #line 148 
  unsigned long flags;
  #line 150 
  cif___ldv_spin_lock_biu_lock_of_ef4_nic_0(& efx->biu_lock);
  #line 151 
  value->u32[0] = _ef4_readd(efx,reg);
  #line 152 
  value->u32[1] = _ef4_readd(efx,reg + 4U);
  #line 153 
  value->u32[2] = _ef4_readd(efx,reg + 8U);
  #line 154 
  value->u32[3] = _ef4_readd(efx,reg + 12U);
  #line 155 
  cif_spin_unlock_irqrestore_biu_lock_of_ef4_nic_0(& efx->biu_lock,flags);
  #line 159 
  return;
}

#line 195  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/io.h"
__inline static void ef4_writeo_table(struct ef4_nic *efx, ef4_oword_t *value, unsigned int reg, unsigned int index)
{
  #line 198 
  ef4_writeo_0(efx,value,index * 16U + reg);
  #line 199 
  return;
}

#line 202  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/io.h"
__inline static void ef4_reado_table(struct ef4_nic *efx, ef4_oword_t *value, unsigned int reg, unsigned int index)
{
  #line 205 
  ef4_reado_0(efx,value,index * 16U + reg);
  #line 206 
  return;
}

#line 216  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/io.h"
__inline static void _ef4_writeo_page(struct ef4_nic *efx, ef4_oword_t *value, unsigned int reg, unsigned int page)
{
  #line 219 
  reg = page * 8192U + reg;
  #line 226 
  _ef4_writeq(efx,value->u64[0],reg);
  #line 227 
  _ef4_writeq(efx,value->u64[1],reg + 8U);
  #line 228 
  return;
}

#line 245  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/io.h"
__inline static void _ef4_writed_page(struct ef4_nic *efx, ef4_dword_t *value, unsigned int reg, unsigned int page)
{
  #line 248 
  ef4_writed(efx,value,page * 8192U + reg);
  #line 249 
  return;
}

#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/farch.c"
#line 810 
static void ef4_farch_magic_event(struct ef4_channel *channel, u32 magic);
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/farch.c"
__inline static void ef4_write_buf_tbl(struct ef4_nic *efx, ef4_qword_t *value, unsigned int index)
{
  #line 87 
  ef4_sram_writeq(efx,efx->membase + (unsigned long)(efx->type)->buf_tbl_base,value,index);
  #line 88 
  return;
}

#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/farch.c"
static bool ef4_masked_compare_oword(ef4_oword_t *a, ef4_oword_t *b, ef4_oword_t *mask)
{
  #line 94 
  return (_Bool)((((a->u64[0] ^ b->u64[0]) & mask->u64[0]) != 0ULL || ((a->u64[1] ^ b->u64[1]) & mask->u64[1]) != 0ULL) != 0);
}

#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/farch.c"
int ef4_farch_test_registers(struct ef4_nic *efx, struct ef4_farch_register_test *regs, size_t n_regs)
{
  #line 103 
  int i;
  #line 103 
  int j;
  #line 104 
  ef4_oword_t mask;
  #line 104 
  ef4_oword_t imask;
  #line 104 
  ef4_oword_t original;
  #line 104 
  ef4_oword_t reg;
  #line 104 
  ef4_oword_t buf;
  #line 102 
  unsigned int address = 0U;
  #line 106 
  i = 0;
  #line 106 
  while ((unsigned long)i < n_regs) {
    #line 107 
    address = (regs + (unsigned long)i)->address;
    #line 108 
    imask = (regs + (unsigned long)i)->mask;
    #line 108 
    mask = imask;
    #line 109 
    imask.u64[0] = ~ imask.u64[0];
    #line 109 
    imask.u64[1] = ~ imask.u64[1];
    #line 111 
    ef4_reado_0(efx,& original,address);
    #line 114 
    j = 0;
    #line 114 
    while (j <= 127) {
      {
        #line 115 
        unsigned int tmp;
        #line 115 
        unsigned int tmp_1;
        #line 115 
        unsigned int tmp_3;
        #line 115 
        unsigned int tmp_5;
        #line 115 
        unsigned int tmp_0;
        #line 115 
        unsigned int tmp_2;
        #line 115 
        unsigned int tmp_4;
        #line 115 
        unsigned int tmp_6;
        #line 115 
        if ((unsigned int)j <= 31U) {
          #line 115 
          if (j > 0) 
                     #line 115 
                     tmp = mask.u32[0] >> j; else 
                                                  #line 115 
                                                  tmp = mask.u32[0] << - j;
          #line 115 
          tmp_0 = tmp;
        }
        else 
             #line 115 
             tmp_0 = 0U;
        #line 115 
        if ((unsigned int)j + 4294967264U <= 31U) {
          #line 115 
          if (j > 32) 
                      #line 115 
                      tmp_1 = mask.u32[1] >> (j + -32); else 
                                                             #line 115 
                                                             tmp_1 = mask.u32[1] << (32 - j);
          #line 115 
          tmp_2 = tmp_1;
        }
        else 
             #line 115 
             tmp_2 = 0U;
        #line 115 
        if ((unsigned int)j + 4294967232U <= 31U) {
          #line 115 
          if (j > 64) 
                      #line 115 
                      tmp_3 = mask.u32[2] >> (j + -64); else 
                                                             #line 115 
                                                             tmp_3 = mask.u32[2] << (64 - j);
          #line 115 
          tmp_4 = tmp_3;
        }
        else 
             #line 115 
             tmp_4 = 0U;
        #line 115 
        if ((unsigned int)j + 4294967200U <= 31U) {
          #line 115 
          if (j > 96) 
                      #line 115 
                      tmp_5 = mask.u32[3] >> (j + -96); else 
                                                             #line 115 
                                                             tmp_5 = mask.u32[3] << (96 - j);
          #line 115 
          tmp_6 = tmp_5;
        }
        else 
             #line 115 
             tmp_6 = 0U;
        #line 115 
        if (((((tmp_0 | tmp_2) | tmp_4) | tmp_6) & 1U) == 0U) 
                                                              #line 116 
                                                              goto __Cont;
        #line 119 
        reg.u64[0] = original.u64[0] & mask.u64[0];
        #line 119 
        reg.u64[1] = original.u64[1] & mask.u64[1];
        {
          #line 120 
          unsigned int tmp_9;
          #line 120 
          unsigned int tmp_11;
          #line 120 
          unsigned int tmp_13;
          #line 120 
          unsigned int tmp_15;
          #line 120 
          unsigned int tmp_17;
          #line 120 
          unsigned int tmp_19;
          #line 120 
          unsigned int tmp_21;
          #line 120 
          unsigned int tmp_7;
          #line 120 
          unsigned int tmp_8;
          #line 120 
          unsigned int tmp_10;
          #line 120 
          unsigned int tmp_12;
          #line 120 
          unsigned int tmp_14;
          #line 120 
          unsigned int tmp_16;
          #line 120 
          unsigned int tmp_18;
          #line 120 
          unsigned int tmp_20;
          #line 120 
          unsigned int tmp_22;
          #line 120 
          if ((unsigned int)j <= 31U) {
            #line 120 
            if (j > 0) 
                       #line 120 
                       tmp_7 = ~ (1U << j); else 
                                                 #line 120 
                                                 tmp_7 = ~ (1U >> - j);
            #line 120 
            tmp_8 = tmp_7;
          }
          else 
               #line 120 
               tmp_8 = 4294967295U;
          #line 120 
          if ((unsigned int)j <= 31U) {
            #line 120 
            if (j > 0) 
                       #line 120 
                       tmp_9 = 1U << j; else 
                                             #line 120 
                                             tmp_9 = 1U >> - j;
            #line 120 
            tmp_10 = tmp_9;
          }
          else 
               #line 120 
               tmp_10 = 0U;
          #line 120 
          reg.u32[0] = (reg.u32[0] & tmp_8) | tmp_10;
          #line 120 
          if ((unsigned int)j + 4294967264U <= 31U) {
            #line 120 
            if (j > 32) 
                        #line 120 
                        tmp_11 = ~ (1U << (j + -32)); else 
                                                           #line 120 
                                                           tmp_11 = ~ (1U >> (32 - j));
            #line 120 
            tmp_12 = tmp_11;
          }
          else 
               #line 120 
               tmp_12 = 4294967295U;
          #line 120 
          if ((unsigned int)j + 4294967264U <= 31U) {
            #line 120 
            if (j > 32) 
                        #line 120 
                        tmp_13 = 1U << (j + -32); else 
                                                       #line 120 
                                                       tmp_13 = 1U >> (32 - j);
            #line 120 
            tmp_14 = tmp_13;
          }
          else 
               #line 120 
               tmp_14 = 0U;
          #line 120 
          reg.u32[1] = (reg.u32[1] & tmp_12) | tmp_14;
          #line 120 
          if ((unsigned int)j + 4294967232U <= 31U) {
            #line 120 
            if (j > 64) 
                        #line 120 
                        tmp_15 = ~ (1U << (j + -64)); else 
                                                           #line 120 
                                                           tmp_15 = ~ (1U >> (64 - j));
            #line 120 
            tmp_16 = tmp_15;
          }
          else 
               #line 120 
               tmp_16 = 4294967295U;
          #line 120 
          if ((unsigned int)j + 4294967232U <= 31U) {
            #line 120 
            if (j > 64) 
                        #line 120 
                        tmp_17 = 1U << (j + -64); else 
                                                       #line 120 
                                                       tmp_17 = 1U >> (64 - j);
            #line 120 
            tmp_18 = tmp_17;
          }
          else 
               #line 120 
               tmp_18 = 0U;
          #line 120 
          reg.u32[2] = (reg.u32[2] & tmp_16) | tmp_18;
          #line 120 
          if ((unsigned int)j + 4294967200U <= 31U) {
            #line 120 
            if (j > 96) 
                        #line 120 
                        tmp_19 = ~ (1U << (j + -96)); else 
                                                           #line 120 
                                                           tmp_19 = ~ (1U >> (96 - j));
            #line 120 
            tmp_20 = tmp_19;
          }
          else 
               #line 120 
               tmp_20 = 4294967295U;
          #line 120 
          if ((unsigned int)j + 4294967200U <= 31U) {
            #line 120 
            if (j > 96) 
                        #line 120 
                        tmp_21 = 1U << (j + -96); else 
                                                       #line 120 
                                                       tmp_21 = 1U >> (96 - j);
            #line 120 
            tmp_22 = tmp_21;
          }
          else 
               #line 120 
               tmp_22 = 0U;
          #line 120 
          reg.u32[3] = (reg.u32[3] & tmp_20) | tmp_22;
        }
        #line 122 
        ef4_writeo_0(efx,& reg,address);
        #line 123 
        ef4_reado_0(efx,& buf,address);
        #line 125 
        if ((int)ef4_masked_compare_oword(& reg,& buf,& mask) != 0) 
                                                                    #line 126 
                                                                    goto fail;
        #line 129 
        reg.u64[0] = original.u64[0] | mask.u64[0];
        #line 129 
        reg.u64[1] = original.u64[1] | mask.u64[1];
        {
          #line 130 
          unsigned int tmp_24;
          #line 130 
          unsigned int tmp_26;
          #line 130 
          unsigned int tmp_28;
          #line 130 
          unsigned int tmp_30;
          #line 130 
          unsigned int tmp_25;
          #line 130 
          unsigned int tmp_27;
          #line 130 
          unsigned int tmp_29;
          #line 130 
          unsigned int tmp_31;
          #line 130 
          if ((unsigned int)j <= 31U) {
            #line 130 
            if (j > 0) 
                       #line 130 
                       tmp_24 = ~ (1U << j); else 
                                                  #line 130 
                                                  tmp_24 = ~ (1U >> - j);
            #line 130 
            tmp_25 = tmp_24;
          }
          else 
               #line 130 
               tmp_25 = 4294967295U;
          #line 130 
          reg.u32[0] &= tmp_25;
          #line 130 
          if ((unsigned int)j + 4294967264U <= 31U) {
            #line 130 
            if (j > 32) 
                        #line 130 
                        tmp_26 = ~ (1U << (j + -32)); else 
                                                           #line 130 
                                                           tmp_26 = ~ (1U >> (32 - j));
            #line 130 
            tmp_27 = tmp_26;
          }
          else 
               #line 130 
               tmp_27 = 4294967295U;
          #line 130 
          reg.u32[1] &= tmp_27;
          #line 130 
          if ((unsigned int)j + 4294967232U <= 31U) {
            #line 130 
            if (j > 64) 
                        #line 130 
                        tmp_28 = ~ (1U << (j + -64)); else 
                                                           #line 130 
                                                           tmp_28 = ~ (1U >> (64 - j));
            #line 130 
            tmp_29 = tmp_28;
          }
          else 
               #line 130 
               tmp_29 = 4294967295U;
          #line 130 
          reg.u32[2] &= tmp_29;
          #line 130 
          if ((unsigned int)j + 4294967200U <= 31U) {
            #line 130 
            if (j > 96) 
                        #line 130 
                        tmp_30 = ~ (1U << (j + -96)); else 
                                                           #line 130 
                                                           tmp_30 = ~ (1U >> (96 - j));
            #line 130 
            tmp_31 = tmp_30;
          }
          else 
               #line 130 
               tmp_31 = 4294967295U;
          #line 130 
          reg.u32[3] &= tmp_31;
        }
        #line 132 
        ef4_writeo_0(efx,& reg,address);
        #line 133 
        ef4_reado_0(efx,& buf,address);
        #line 135 
        if ((int)ef4_masked_compare_oword(& reg,& buf,& mask) != 0) 
                                                                    #line 136 
                                                                    goto fail;
      }
      #line 114 
      __Cont: 
              #line 114 
      j ++;
    }
    #line 139 
    ef4_writeo_0(efx,& original,address);
    #line 106 
    i ++;
  }
  #line 142 
  return 0;
  #line 144 
  fail: 
        #line 144 
  ;
  #line 145 
  if ((efx->msg_enable & 8192U) != 0U) 
                                       #line 145 
                                       netdev_err(efx->net_dev,(char *)"wrote ",reg.u32[3],reg.u32[2],reg.u32[1],reg.u32[0],buf.u32[3],buf.u32[2],buf.u32[1],buf.u32[0],address,mask.u32[3],mask.u32[2],mask.u32[1],mask.u32[0]);
  #line 149 
  return -5;
}

#line 168  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/farch.c"
static void ef4_init_special_buffer(struct ef4_nic *efx, struct ef4_special_buffer *buffer)
{
  #line 170 
  ef4_qword_t buf_desc;
  #line 171 
  unsigned int index;
  #line 172 
  dma_addr_t dma_addr;
  #line 173 
  int i;
  #line 178 
  i = 0;
  #line 178 
  while (buffer->entries > (unsigned int)i) {
    #line 179 
    index = buffer->index + (unsigned int)i;
    #line 180 
    dma_addr = buffer->buf.dma_addr + (unsigned long long)(i * 4096);
    #line 181 
    if ((efx->msg_enable & 2U) != 0U) {
      #line 181 
      bool branch;
      #line 181 
      struct _ddebug __UNIQUE_ID_ddebug541 = {.modname = (char *)"sfc_falcon", .function = (char *)"ef4_init_special_buffer", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/farch.c", .format = (char *)"mapping special buffer %d at %llx\n", .lineno = (unsigned int)181U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 181 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug541.key.dd_key_false.key,(_Bool)0);
      #line 181 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 181 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug541,efx->net_dev,(char *)"mapping special buffer %d at %llx\n",index,dma_addr);
    }
    #line 184 
    buf_desc.u64[0] = (dma_addr >> 12) << 14;
    #line 188 
    ef4_write_buf_tbl(efx,& buf_desc,index);
    #line 178 
    i ++;
  }
  #line 190 
  return;
}

#line 194  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/farch.c"
static void ef4_fini_special_buffer(struct ef4_nic *efx, struct ef4_special_buffer *buffer)
{
  #line 196 
  ef4_oword_t buf_tbl_upd;
  #line 197 
  unsigned int start = buffer->index;
  #line 198 
  unsigned int end = (buffer->index + buffer->entries) + 4294967295U;
  #line 200 
  if (buffer->entries == 0U) 
                             #line 201 
                             return;
  #line 203 
  if ((efx->msg_enable & 8192U) != 0U) {
    #line 203 
    bool branch;
    #line 203 
    struct _ddebug __UNIQUE_ID_ddebug542 = {.modname = (char *)"sfc_falcon", .function = (char *)"ef4_fini_special_buffer", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/farch.c", .format = (char *)"unmapping special buffers %d-%d\n", .lineno = (unsigned int)203U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 203 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug542.key.dd_key_false.key,(_Bool)0);
    #line 203 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 203 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug542,efx->net_dev,(char *)"unmapping special buffers %d-%d\n",buffer->index,(buffer->index + buffer->entries) + 4294967295U);
  }
  #line 206 
  buf_tbl_upd.u64[0] = (((unsigned long long)end << 32) | (unsigned long long)start) | 4611686018427387904ULL;
  #line 206 
  buf_tbl_upd.u64[1] = 0ULL;
  #line 211 
  ef4_writeo_0(efx,& buf_tbl_upd,1616U);
  #line 212 
  return;
}

#line 223  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/farch.c"
static int ef4_alloc_special_buffer(struct ef4_nic *efx, struct ef4_special_buffer *buffer, unsigned int len)
{
  #line 227 
  len = (len + 4095U) & 4294963200U;
  #line 229 
  if (ef4_nic_alloc_buffer(efx,& buffer->buf,len,3264U) != 0) 
                                                              #line 230 
                                                              return -12;
  #line 231 
  buffer->entries = len / 4096U;
  #line 232 
  if ((long)((buffer->buf.dma_addr & 4095ULL) != 0ULL) != 0L) {
    #line 233 
    ldv_inline_asm();
    #line 234 
    ldv_inline_asm();
    #line 235 
    ldv_inline_asm();
    #line 232 
    ;
  }
  #line 235 
  buffer->index = efx->next_buffer_table;
  #line 236 
  efx->next_buffer_table += buffer->entries;
  #line 238 
  if ((efx->msg_enable & 2U) != 0U) {
    #line 238 
    bool branch;
    #line 238 
    struct _ddebug __UNIQUE_ID_ddebug544 = {.modname = (char *)"sfc_falcon", .function = (char *)"ef4_alloc_special_buffer", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/farch.c", .format = (char *)"allocating special buffers %d-%d at %llx+%x ", .lineno = (unsigned int)238U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 238 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug544.key.dd_key_false.key,(_Bool)0);
    #line 238 
    if ((long)((long)((int)branch != 0)) != 0L) {
      #line 238 
      ;
      #line 238 
      ;
      #line 238 
      ;
      #line 238 
      ;
      #line 238 
      ;
      #line 238 
      ;
      #line 238 
      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug544,efx->net_dev,(char *)"allocating special buffers %d-%d at %llx+%x ",buffer->index,(buffer->index + buffer->entries) + 4294967295U,buffer->buf.dma_addr,len,buffer->buf.addr,virt_to_phys(buffer->buf.addr));
    }
  }
  #line 245 
  return 0;
}

#line 249  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/farch.c"
static void ef4_free_special_buffer(struct ef4_nic *efx, struct ef4_special_buffer *buffer)
{
  #line 251 
  if (buffer->buf.addr == (void *)0) 
                                     #line 252 
                                     return;
  #line 254 
  if ((efx->msg_enable & 8192U) != 0U) {
    #line 254 
    bool branch;
    #line 254 
    struct _ddebug __UNIQUE_ID_ddebug545 = {.modname = (char *)"sfc_falcon", .function = (char *)"ef4_free_special_buffer", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/farch.c", .format = (char *)"deallocating special buffers %d-%d at %llx+%x ", .lineno = (unsigned int)254U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 254 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug545.key.dd_key_false.key,(_Bool)0);
    #line 254 
    if ((long)((long)((int)branch != 0)) != 0L) {
      #line 254 
      ;
      #line 254 
      ;
      #line 254 
      ;
      #line 254 
      ;
      #line 254 
      ;
      #line 254 
      ;
      #line 254 
      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug545,efx->net_dev,(char *)"deallocating special buffers %d-%d at %llx+%x ",buffer->index,(buffer->index + buffer->entries) + 4294967295U,buffer->buf.dma_addr,buffer->buf.len,buffer->buf.addr,virt_to_phys(buffer->buf.addr));
    }
  }
  #line 261 
  ef4_nic_free_buffer(efx,& buffer->buf);
  #line 262 
  buffer->entries = 0U;
  #line 263 
  return;
}

#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/farch.c"
__inline static void ef4_farch_notify_tx_desc(struct ef4_tx_queue *tx_queue)
{
  #line 274 
  unsigned int write_ptr;
  #line 275 
  ef4_dword_t reg;
  #line 277 
  write_ptr = tx_queue->write_count & tx_queue->ptr_mask;
  #line 278 
  reg.u32[0] = write_ptr;
  #line 279 
  _ef4_writed_page(tx_queue->efx,& reg,2588U,tx_queue->queue);
  #line 280 
  return;
}

#line 284  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/farch.c"
__inline static void ef4_farch_push_tx_desc(struct ef4_tx_queue *tx_queue, ef4_qword_t *txd)
{
  #line 287 
  unsigned int write_ptr;
  #line 288 
  ef4_oword_t reg;
  #line 293 
  write_ptr = tx_queue->write_count & tx_queue->ptr_mask;
  #line 294 
  reg.u64[0] = 0ULL;
  #line 294 
  reg.u64[1] = ((unsigned long long)write_ptr << 32) | 2147483648ULL;
  #line 296 
  reg.qword[0] = *txd;
  #line 297 
  _ef4_writeo_page(tx_queue->efx,& reg,2576U,tx_queue->queue);
  #line 298 
  return;
}

#line 306  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/farch.c"
void ef4_farch_tx_write(struct ef4_tx_queue *tx_queue)
{
  #line 308 
  struct ef4_tx_buffer *buffer;
  #line 309 
  ef4_qword_t *txd;
  #line 310 
  unsigned int write_ptr;
  #line 311 
  unsigned int old_write_count = tx_queue->write_count;
  #line 313 
  tx_queue->xmit_more_available = (_Bool)0;
  #line 314 
  if ((long)(tx_queue->write_count == tx_queue->insert_count) != 0L) 
    #line 315 
    return;
  #line 317 
  while (1) {
    #line 318 
    write_ptr = tx_queue->write_count & tx_queue->ptr_mask;
    #line 319 
    buffer = tx_queue->buffer + (unsigned long)write_ptr;
    #line 320 
    txd = ef4_tx_desc(tx_queue,write_ptr);
    #line 321 
    (tx_queue->write_count) ++;
    #line 327 
    txd->u64[0] = ((((unsigned long long)buffer->flags << 62) & 4611686018427387904ULL) | ((unsigned long long)buffer->len << 48)) | buffer->__anonCompField_ef4_tx_buffer_202.dma_addr;
    #line 328 
    if (! (tx_queue->write_count != tx_queue->insert_count)) 
                                                             #line 317 
                                                             break;
  }
  #line 334 
  ldv_inline_asm();
  #line 337 
  if ((int)ef4_nic_may_push_tx_desc(tx_queue,old_write_count) != 0) {
    #line 338 
    txd = ef4_tx_desc(tx_queue,tx_queue->ptr_mask & old_write_count);
    #line 340 
    ef4_farch_push_tx_desc(tx_queue,txd);
    #line 341 
    (tx_queue->pushes) ++;
  }
  else 
       #line 343 
       ef4_farch_notify_tx_desc(tx_queue);
  #line 344 
  return;
}

#line 347  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/farch.c"
unsigned int ef4_farch_tx_limit_len(struct ef4_tx_queue *tx_queue, dma_addr_t dma_addr, unsigned int len)
{
  #line 353 
  unsigned int __UNIQUE_ID___x546;
  #line 353 
  unsigned int tmp;
  #line 351 
  unsigned int limit = (~ ((unsigned int)dma_addr) & 4095U) + 1U;
  {
    #line 353 
    __UNIQUE_ID___x546 = limit;
    #line 353 
    unsigned int __UNIQUE_ID___y547 = len;
    #line 353 
    if (__UNIQUE_ID___x546 < __UNIQUE_ID___y547) 
                                                 #line 353 
                                                 tmp = __UNIQUE_ID___x546; else 
                                                                    #line 353 
                                                                    tmp = __UNIQUE_ID___y547;
    }
  #line 353 
  len = tmp;
  #line 355 
  if (ef4_nic_rev(tx_queue->efx) <= 1) 
    #line 355 
    if ((dma_addr & 15ULL) != 0ULL) {
      #line 356 
      unsigned int __UNIQUE_ID___x548;
      #line 356 
      unsigned int tmp_1;
      {
        #line 356 
        __UNIQUE_ID___x548 = len;
        #line 356 
        unsigned int __UNIQUE_ID___y549 = 512U - ((unsigned int)dma_addr & 15U);
        #line 356 
        if (__UNIQUE_ID___x548 < __UNIQUE_ID___y549) 
                                                     #line 356 
                                                     tmp_1 = __UNIQUE_ID___x548; else 
                                                                    #line 356 
                                                                    tmp_1 = __UNIQUE_ID___y549;
        }
      #line 356 
      len = tmp_1;
    }
  #line 358 
  return len;
}

#line 363  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/farch.c"
int ef4_farch_tx_probe(struct ef4_tx_queue *tx_queue)
{
  #line 366 
  unsigned int entries;
  #line 365 
  struct ef4_nic *efx = tx_queue->efx;
  #line 368 
  entries = tx_queue->ptr_mask + 1U;
  #line 369 
  return ef4_alloc_special_buffer(efx,& tx_queue->txd,entries * 8U);
}

#line 373  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/farch.c"
void ef4_farch_tx_init(struct ef4_tx_queue *tx_queue)
{
  #line 376 
  ef4_oword_t reg;
  #line 375 
  struct ef4_nic *efx = tx_queue->efx;
  #line 379 
  ef4_init_special_buffer(efx,& tx_queue->txd);
  {
    #line 382 
    reg.u64[0] = ((((unsigned long long)tx_queue->txd.index << 36) | ((unsigned long long)(tx_queue->channel)->channel << 24)) | ((unsigned long long)tx_queue->queue << 5)) | ((unsigned long long)__ffs((unsigned long)tx_queue->txd.entries) << 3);
    #line 382 
    reg.u64[1] = 150994944ULL;
  }
  #line 396 
  if (ef4_nic_rev(efx) > 1) {
    #line 397 
    int csum = (int)tx_queue->queue & 1;
    {
      #line 398 
      unsigned long long tmp_0;
      #line 398 
      reg.u64[0] = reg.u64[0];
      #line 398 
      if (csum == 0) 
                     #line 398 
                     tmp_0 = 67108864ULL; else 
                                               #line 398 
                                               tmp_0 = 0ULL;
      #line 398 
      reg.u64[1] = (reg.u64[1] & 18446744073642442751ULL) | tmp_0;
    }
    {
      #line 399 
      unsigned long long tmp_1;
      #line 399 
      reg.u64[0] = reg.u64[0];
      #line 399 
      if (csum == 0) 
                     #line 399 
                     tmp_1 = 33554432ULL; else 
                                               #line 399 
                                               tmp_1 = 0ULL;
      #line 399 
      reg.u64[1] = (reg.u64[1] & 18446744073675997183ULL) | tmp_1;
    }
  }
  #line 403 
  ef4_writeo_table(efx,& reg,(efx->type)->txd_ptr_tbl_base,tx_queue->queue);
  #line 406 
  if (ef4_nic_rev(efx) <= 1) {
    #line 410 
    ef4_reado_0(efx,& reg,2608U);
    #line 411 
    if ((tx_queue->queue & 1U) != 0U) 
                                      #line 412 
                                      __set_bit_le((int)tx_queue->queue,(void *)(& reg)); else 
                                                                    #line 414 
                                                                    __set_bit_le((int)tx_queue->queue,(void *)(& reg));
    #line 415 
    ef4_writeo_0(efx,& reg,2608U);
  }
  #line 418 
  if (ef4_nic_rev(efx) > 1) {
    #line 419 
    if ((tx_queue->queue & 2U) != 0U) 
                                      #line 419 
                                      reg.u64[0] = 0ULL; else 
                                                              #line 419 
                                                              reg.u64[0] = 21ULL;
    #line 419 
    reg.u64[1] = 0ULL;
    #line 424 
    ef4_writeo_table(efx,& reg,16252928U,tx_queue->queue);
  }
  #line 427 
  return;
}

#line 429  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/farch.c"
static void ef4_farch_flush_tx_queue(struct ef4_tx_queue *tx_queue)
{
  #line 432 
  ef4_oword_t tx_flush_descq;
  #line 431 
  struct ef4_nic *efx = tx_queue->efx;
  {
    #line 434 
    int __ret_warn_on = atomic_read_2(& tx_queue->flush_outstanding) != 0;
    #line 434 
    if ((long)(__ret_warn_on != 0) != 0L) {
      #line 435 
      ldv_inline_asm();
      #line 436 
      ldv_inline_asm();
    }
    #line 434 
    long tmp_2 = (long)(__ret_warn_on != 0);
  }
  #line 435 
  atomic_set_0(& tx_queue->flush_outstanding,1);
  #line 437 
  tx_flush_descq.u64[0] = (unsigned long long)(tx_queue->queue | 4096U);
  #line 437 
  tx_flush_descq.u64[1] = 0ULL;
  #line 440 
  ef4_writeo_0(efx,& tx_flush_descq,2560U);
  #line 441 
  return;
}

#line 443  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/farch.c"
void ef4_farch_tx_fini(struct ef4_tx_queue *tx_queue)
{
  #line 446 
  ef4_oword_t tx_desc_ptr;
  #line 445 
  struct ef4_nic *efx = tx_queue->efx;
  #line 449 
  tx_desc_ptr.u64[0] = 0ULL;
  #line 449 
  tx_desc_ptr.u64[1] = 0ULL;
  #line 450 
  ef4_writeo_table(efx,& tx_desc_ptr,(efx->type)->txd_ptr_tbl_base,tx_queue->queue);
  #line 454 
  ef4_fini_special_buffer(efx,& tx_queue->txd);
  #line 455 
  return;
}

#line 458  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/farch.c"
void ef4_farch_tx_remove(struct ef4_tx_queue *tx_queue)
{
  #line 460 
  ef4_free_special_buffer(tx_queue->efx,& tx_queue->txd);
  #line 461 
  return;
}

#line 471  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/farch.c"
__inline static void ef4_farch_build_rx_desc(struct ef4_rx_queue *rx_queue, unsigned int index)
{
  #line 473 
  struct ef4_rx_buffer *rx_buf;
  #line 474 
  ef4_qword_t *rxd;
  #line 476 
  rxd = ef4_rx_desc(rx_queue,index);
  #line 477 
  rx_buf = ef4_rx_buffer(rx_queue,index);
  #line 478 
  rxd->u64[0] = ((unsigned long long)((unsigned int)rx_buf->len - ((rx_queue->efx)->type)->rx_buffer_padding) << 48) | rx_buf->dma_addr;
  #line 479 
  return;
}

#line 489  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/farch.c"
void ef4_farch_rx_write(struct ef4_rx_queue *rx_queue)
{
  #line 492 
  ef4_dword_t reg;
  #line 493 
  unsigned int write_ptr;
  #line 491 
  struct ef4_nic *efx = rx_queue->efx;
  #line 495 
  while (rx_queue->notified_count != rx_queue->added_count) {
    #line 496 
    ef4_farch_build_rx_desc(rx_queue,rx_queue->notified_count & rx_queue->ptr_mask);
    #line 499 
    (rx_queue->notified_count) ++;
  }
  #line 501 
  ldv_inline_asm();
  #line 503 
  write_ptr = rx_queue->added_count & rx_queue->ptr_mask;
  #line 504 
  reg.u32[0] = write_ptr;
  #line 505 
  ;
  #line 505 
  _ef4_writed_page(efx,& reg,2108U,(unsigned int)ef4_rx_queue_index(rx_queue));
  #line 506 
  return;
}

#line 509  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/farch.c"
int ef4_farch_rx_probe(struct ef4_rx_queue *rx_queue)
{
  #line 512 
  unsigned int entries;
  #line 511 
  struct ef4_nic *efx = rx_queue->efx;
  #line 514 
  entries = rx_queue->ptr_mask + 1U;
  #line 515 
  return ef4_alloc_special_buffer(efx,& rx_queue->rxd,entries * 8U);
}

#line 519  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/farch.c"
void ef4_farch_rx_init(struct ef4_rx_queue *rx_queue)
{
  #line 521 
  ef4_oword_t rx_desc_ptr;
  #line 525 
  bool jumbo_en;
  #line 522 
  struct ef4_nic *efx = rx_queue->efx;
  #line 523 
  bool is_b0 = (_Bool)(ef4_nic_rev(efx) > 1);
  #line 524 
  bool iscsi_digest_en = is_b0;
  #line 532 
  jumbo_en = (_Bool)((! is_b0 || (int)efx->rx_scatter != 0) != 0);
  #line 534 
  if ((efx->msg_enable & 8192U) != 0U) {
    #line 534 
    bool branch;
    #line 534 
    struct _ddebug __UNIQUE_ID_ddebug551 = {.modname = (char *)"sfc_falcon", .function = (char *)"ef4_farch_rx_init", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/farch.c", .format = (char *)"RX queue %d ring in special buffers %d-%d\n", .lineno = (unsigned int)534U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 534 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug551.key.dd_key_false.key,(_Bool)0);
    #line 534 
    if ((long)((long)((int)branch != 0)) != 0L) {
      #line 534 
      ;
      #line 534 
      ;
      #line 534 
      ;
      #line 534 
      __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug551,efx->net_dev,(char *)"RX queue %d ring in special buffers %d-%d\n",ef4_rx_queue_index(rx_queue),rx_queue->rxd.index,(rx_queue->rxd.index + rx_queue->rxd.entries) + 4294967295U);
    }
  }
  #line 539 
  rx_queue->scatter_n = 0U;
  #line 542 
  ef4_init_special_buffer(efx,& rx_queue->rxd);
  {
    #line 545 
    rx_desc_ptr.u64[0] = ((((((unsigned long long)rx_queue->rxd.index << 36) | ((unsigned long long)ef4_rx_queue_channel(rx_queue)->channel << 24)) | ((unsigned long long)ef4_rx_queue_index(rx_queue) << 5)) | ((unsigned long long)__ffs((unsigned long)rx_queue->rxd.entries) << 3)) | ((unsigned long long)jumbo_en << 1)) | 1ULL;
    #line 545 
    rx_desc_ptr.u64[1] = ((unsigned long long)iscsi_digest_en << 24) | ((unsigned long long)iscsi_digest_en << 23);
  }
  #line 559 
  ;
  #line 559 
  ;
  #line 559 
  ef4_writeo_table(efx,& rx_desc_ptr,(efx->type)->rxd_ptr_tbl_base,(unsigned int)ef4_rx_queue_index(rx_queue));
  #line 561 
  return;
}

#line 563  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/farch.c"
static void ef4_farch_flush_rx_queue(struct ef4_rx_queue *rx_queue)
{
  #line 566 
  ef4_oword_t rx_flush_descq;
  #line 565 
  struct ef4_nic *efx = rx_queue->efx;
  {
    #line 568 
    rx_flush_descq.u64[0] = (unsigned long long)(ef4_rx_queue_index(rx_queue) | 16777216);
    #line 568 
    rx_flush_descq.u64[1] = 0ULL;
  }
  #line 572 
  ef4_writeo_0(efx,& rx_flush_descq,2080U);
  #line 573 
  return;
}

#line 575  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/farch.c"
void ef4_farch_rx_fini(struct ef4_rx_queue *rx_queue)
{
  #line 577 
  ef4_oword_t rx_desc_ptr;
  #line 578 
  struct ef4_nic *efx = rx_queue->efx;
  #line 581 
  rx_desc_ptr.u64[0] = 0ULL;
  #line 581 
  rx_desc_ptr.u64[1] = 0ULL;
  #line 582 
  ;
  #line 582 
  ;
  #line 582 
  ef4_writeo_table(efx,& rx_desc_ptr,(efx->type)->rxd_ptr_tbl_base,(unsigned int)ef4_rx_queue_index(rx_queue));
  #line 586 
  ef4_fini_special_buffer(efx,& rx_queue->rxd);
  #line 587 
  return;
}

#line 590  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/farch.c"
void ef4_farch_rx_remove(struct ef4_rx_queue *rx_queue)
{
  #line 592 
  ef4_free_special_buffer(rx_queue->efx,& rx_queue->rxd);
  #line 593 
  return;
}

#line 604  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/farch.c"
static bool ef4_farch_flush_wake(struct ef4_nic *efx)
{
  #line 609 
  int tmp_2;
  #line 606 
  ldv_inline_asm();
  #line 609 
  if (atomic_read_2(& efx->active_queues) == 0) 
                                                #line 609 
                                                tmp_2 = 1;
  else {
    #line 609 
    if (atomic_read_2(& efx->rxq_flush_outstanding) <= 3) {
      #line 611 
      if (atomic_read_2(& efx->rxq_flush_pending) > 0) 
                                                       #line 609 
                                                       tmp_2 = 1; else 
                                                                    #line 609 
                                                                    tmp_2 = 0;
    }
    else 
         #line 609 
         tmp_2 = 0;
  }
  #line 609 
  return (_Bool)(tmp_2 != 0);
}

#line 614  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/farch.c"
static bool ef4_check_tx_flush_complete(struct ef4_nic *efx)
{
  #line 617 
  ef4_oword_t txd_ptr_tbl;
  #line 618 
  struct ef4_channel *channel;
  #line 619 
  struct ef4_tx_queue *tx_queue;
  #line 616 
  bool i = (_Bool)1;
  #line 621 
  channel = efx->channel[0];
  #line 621 
  while (channel != (struct ef4_channel *)0) {
    #line 622 
    if (ef4_channel_has_tx_queues(channel)) {
      #line 622 
      tx_queue = (struct ef4_tx_queue *)(& channel->tx_queue);
      #line 622 
      while (1) {
        #line 622 
        if ((struct ef4_tx_queue *)(& channel->tx_queue) + 4U > tx_queue) {
          #line 622 
          if (! ((int)ef4_tx_queue_used(tx_queue) != 0)) 
                                                         #line 622 
                                                         break;
        }
        else 
             #line 622 
             break;
        #line 623 
        ef4_reado_table(efx,& txd_ptr_tbl,16056320U,tx_queue->queue);
        #line 625 
        if ((txd_ptr_tbl.u64[0] & 1ULL) != 0ULL || (txd_ptr_tbl.u64[1] & 16777216ULL) != 0ULL) {
          #line 629 
          if ((efx->msg_enable & 8192U) != 0U) {
            #line 629 
            bool branch;
            #line 629 
            struct _ddebug __UNIQUE_ID_ddebug552 = {.modname = (char *)"sfc_falcon", .function = (char *)"ef4_check_tx_flush_complete", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/farch.c", .format = (char *)"flush did not complete on TXQ %d\n", .lineno = (unsigned int)629U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
            #line 629 
            branch = arch_static_branch(& __UNIQUE_ID_ddebug552.key.dd_key_false.key,(_Bool)0);
            #line 629 
            if ((long)((long)((int)branch != 0)) != 0L) 
                                                        #line 629 
                                                        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug552,efx->net_dev,(char *)"flush did not complete on TXQ %d\n",tx_queue->queue);
          }
          #line 632 
          i = (_Bool)0;
        }
        else {
          #line 633 
          if (atomic_cmpxchg(& tx_queue->flush_outstanding,1,0) != 0) {
            #line 638 
            if ((efx->msg_enable & 8192U) != 0U) {
              #line 638 
              bool branch_0;
              #line 638 
              struct _ddebug __UNIQUE_ID_ddebug553 = {.modname = (char *)"sfc_falcon", .function = (char *)"ef4_check_tx_flush_complete", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/farch.c", .format = (char *)"flush complete on TXQ %d, so drain ", .lineno = (unsigned int)638U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
              #line 638 
              branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug553.key.dd_key_false.key,(_Bool)0);
              #line 638 
              if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                            #line 638 
                                                            __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug553,efx->net_dev,(char *)"flush complete on TXQ %d, so drain ",tx_queue->queue);
            }
            #line 645 
            ef4_farch_magic_event(channel,tx_queue->queue | 66560U);
          }
        }
        #line 622 
        tx_queue ++;
      }
    }
    #line 621 
    if ((unsigned int)(channel->channel + 1) < efx->n_channels) 
                                                                #line 621 
                                                                channel = efx->channel[channel->channel + 1]; else 
                                                                    #line 621 
                                                                    channel = (struct ef4_channel *)0;
  }
  #line 652 
  return i;
}

#line 658  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/farch.c"
static int ef4_farch_do_flush(struct ef4_nic *efx)
{
  #line 661 
  struct ef4_channel *channel;
  #line 662 
  struct ef4_rx_queue *rx_queue;
  #line 663 
  struct ef4_tx_queue *tx_queue;
  #line 660 
  unsigned int timeout = (unsigned int)msecs_to_jiffies(5000U);
  #line 664 
  int rc = 0;
  #line 666 
  channel = efx->channel[0];
  #line 666 
  while (channel != (struct ef4_channel *)0) {
    {
      #line 667 
      if (ef4_channel_has_tx_queues(channel)) {
        #line 667 
        tx_queue = (struct ef4_tx_queue *)(& channel->tx_queue);
        #line 667 
        while (1) {
          #line 667 
          if ((struct ef4_tx_queue *)(& channel->tx_queue) + 4U > tx_queue) {
            #line 667 
            if (! ((int)ef4_tx_queue_used(tx_queue) != 0)) 
                                                           #line 667 
                                                           break;
          }
          else 
               #line 667 
               break;
          #line 668 
          ef4_farch_flush_tx_queue(tx_queue);
          #line 667 
          tx_queue ++;
        }
      }
      #line 670 
      if (ef4_channel_has_rx_queue(channel)) {
        #line 670 
        rx_queue = & channel->rx_queue;
        #line 670 
        while (rx_queue != (struct ef4_rx_queue *)0) {
          #line 671 
          rx_queue->flush_pending = (_Bool)1;
          #line 672 
          atomic_inc_3(& efx->rxq_flush_pending);
          #line 670 
          rx_queue = (struct ef4_rx_queue *)0;
        }
      }
    }
    #line 666 
    if ((unsigned int)(channel->channel + 1) < efx->n_channels) 
                                                                #line 666 
                                                                channel = efx->channel[channel->channel + 1]; else 
                                                                    #line 666 
                                                                    channel = (struct ef4_channel *)0;
  }
  #line 676 
  while (1) {
    #line 676 
    if (timeout != 0U) {
      #line 676 
      if (! (atomic_read_2(& efx->active_queues) > 0)) 
                                                       #line 676 
                                                       break;
    }
    else 
         #line 676 
         break;
    {
      #line 696 
      long __ret;
      #line 681 
      channel = efx->channel[0];
      #line 681 
      while (channel != (struct ef4_channel *)0) {
        #line 682 
        if (ef4_channel_has_rx_queue(channel)) {
          #line 682 
          rx_queue = & channel->rx_queue;
          #line 682 
          while (rx_queue != (struct ef4_rx_queue *)0) {
            {
              #line 683 
              if (atomic_read_2(& efx->rxq_flush_outstanding) > 3) 
                                                                   #line 685 
                                                                   break;
              #line 687 
              if ((int)rx_queue->flush_pending != 0) {
                #line 688 
                rx_queue->flush_pending = (_Bool)0;
                #line 689 
                atomic_dec(& efx->rxq_flush_pending);
                #line 690 
                atomic_inc_3(& efx->rxq_flush_outstanding);
                #line 691 
                ef4_farch_flush_rx_queue(rx_queue);
              }
            }
            #line 682 
            rx_queue = (struct ef4_rx_queue *)0;
          }
        }
        #line 681 
        if ((unsigned int)(channel->channel + 1) < efx->n_channels) 
                                                                    #line 681 
                                                                    channel = efx->channel[channel->channel + 1]; else 
                                                                    #line 681 
                                                                    channel = (struct ef4_channel *)0;
      }
      #line 696 
      __ret = (long)timeout;
      #line 696 
      __might_sleep((char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/farch.c",696,0);
      {
        #line 696 
        bool __cond_0;
        #line 696 
        __cond_0 = ef4_farch_flush_wake(efx);
        #line 696 
        if ((int)__cond_0 != 0 && __ret == 0L) 
                                               #line 696 
                                               __ret = 1L;
        #line 696 
        if ((((int)__cond_0 != 0 || __ret == 0L) != 0) == 0) {
          #line 696 
          long __ret_0;
          {
            #line 696 
            struct wait_queue_entry __wq_entry;
            #line 696 
            __ret_0 = (long)timeout;
            #line 696 
            init_wait_entry(& __wq_entry,0);
            #line 696 
            while (1) {
              #line 696 
              bool __cond;
              #line 696 
              long __int = prepare_to_wait_event(& efx->flush_wq,& __wq_entry,2);
              #line 696 
              __cond = ef4_farch_flush_wake(efx);
              #line 696 
              if ((int)__cond != 0 && __ret_0 == 0L) 
                                                     #line 696 
                                                     __ret_0 = 1L;
              #line 696 
              if ((((int)__cond != 0 || __ret_0 == 0L) != 0) != 0) 
                                                                   #line 696 
                                                                   break;
              #line 696 
              __ret_0 = schedule_timeout(__ret_0);
            }
            #line 696 
            finish_wait(& efx->flush_wq,& __wq_entry);
            #line 696 
            __out_0: 
                     #line 696 
            ;
            }
          #line 696 
          __ret = __ret_0;
        }
      }
      #line 696 
      timeout = (unsigned int)__ret;
    }
  }
  #line 701 
  if (atomic_read_2(& efx->active_queues) != 0) {
    #line 702 
    if (! ef4_check_tx_flush_complete(efx)) {
      #line 703 
      if ((efx->msg_enable & 8192U) != 0U) {
        #line 703 
        ;
        #line 703 
        netdev_err(efx->net_dev,(char *)"failed to flush %d queues ",atomic_read_2(& efx->active_queues),atomic_read_2(& efx->rxq_flush_outstanding),atomic_read_2(& efx->rxq_flush_pending));
      }
      #line 707 
      rc = -110;
      #line 709 
      atomic_set_0(& efx->active_queues,0);
      #line 710 
      atomic_set_0(& efx->rxq_flush_pending,0);
      #line 711 
      atomic_set_0(& efx->rxq_flush_outstanding,0);
    }
  }
  #line 714 
  return rc;
}

#line 717  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/farch.c"
int ef4_farch_fini_dmaq(struct ef4_nic *efx)
{
  #line 719 
  struct ef4_channel *channel;
  #line 720 
  struct ef4_tx_queue *tx_queue;
  #line 721 
  struct ef4_rx_queue *rx_queue;
  #line 722 
  int rc = 0;
  #line 725 
  if (efx->state != (unsigned int)STATE_RECOVERY) {
    #line 727 
    if ((unsigned int)(efx->pci_dev)->is_busmaster != 0U) {
      #line 728 
      (*((efx->type)->prepare_flush))(efx);
      #line 729 
      rc = ef4_farch_do_flush(efx);
      #line 730 
      (*((efx->type)->finish_flush))(efx);
    }
    #line 733 
    channel = efx->channel[0];
    #line 733 
    while (channel != (struct ef4_channel *)0) {
      {
        #line 734 
        if (ef4_channel_has_rx_queue(channel)) {
          #line 734 
          rx_queue = & channel->rx_queue;
          #line 734 
          while (rx_queue != (struct ef4_rx_queue *)0) {
            #line 735 
            ef4_farch_rx_fini(rx_queue);
            #line 734 
            rx_queue = (struct ef4_rx_queue *)0;
          }
        }
        #line 736 
        if (ef4_channel_has_tx_queues(channel)) {
          #line 736 
          tx_queue = (struct ef4_tx_queue *)(& channel->tx_queue);
          #line 736 
          while (1) {
            #line 736 
            if ((struct ef4_tx_queue *)(& channel->tx_queue) + 4U > tx_queue) {
              #line 736 
              if (! ((int)ef4_tx_queue_used(tx_queue) != 0)) 
                                                             #line 736 
                                                             break;
            }
            else 
                 #line 736 
                 break;
            #line 737 
            ef4_farch_tx_fini(tx_queue);
            #line 736 
            tx_queue ++;
          }
        }
      }
      #line 733 
      if ((unsigned int)(channel->channel + 1) < efx->n_channels) 
                                                                  #line 733 
                                                                  channel = efx->channel[channel->channel + 1]; else 
                                                                    #line 733 
                                                                    channel = (struct ef4_channel *)0;
    }
  }
  #line 741 
  return rc;
}

#line 758  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/farch.c"
void ef4_farch_finish_flr(struct ef4_nic *efx)
{
  #line 760 
  atomic_set_0(& efx->rxq_flush_pending,0);
  #line 761 
  atomic_set_0(& efx->rxq_flush_outstanding,0);
  #line 762 
  atomic_set_0(& efx->active_queues,0);
  #line 763 
  return;
}

#line 778  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/farch.c"
void ef4_farch_ev_read_ack(struct ef4_channel *channel)
{
  #line 780 
  ef4_dword_t reg;
  #line 781 
  struct ef4_nic *efx = channel->efx;
  #line 783 
  reg.u32[0] = channel->eventq_read_ptr & channel->eventq_mask;
  #line 789 
  ef4_writed(efx,& reg,(efx->type)->evq_rptr_tbl_base + (unsigned int)(channel->channel * 16));
  #line 792 
  return;
}

#line 795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/farch.c"
void ef4_farch_generate_event(struct ef4_nic *efx, unsigned int evq, ef4_qword_t *event)
{
  #line 798 
  ef4_oword_t drv_ev_reg;
  #line 802 
  drv_ev_reg.u32[0] = event->u32[0];
  #line 803 
  drv_ev_reg.u32[1] = event->u32[1];
  #line 804 
  drv_ev_reg.u32[2] = 0U;
  #line 805 
  drv_ev_reg.u32[3] = 0U;
  #line 806 
  drv_ev_reg.u64[0] = drv_ev_reg.u64[0];
  #line 806 
  drv_ev_reg.u64[1] = (drv_ev_reg.u64[1] & 18446744073709547520ULL) | (unsigned long long)evq;
  #line 807 
  ef4_writeo_0(efx,& drv_ev_reg,1088U);
  #line 808 
  return;
}

#line 810  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/farch.c"
static void ef4_farch_magic_event(struct ef4_channel *channel, u32 magic)
{
  #line 812 
  ef4_qword_t event;
  #line 814 
  event.u64[0] = (unsigned long long)magic | 8070450532247928832ULL;
  #line 817 
  ef4_farch_generate_event(channel->efx,(unsigned int)channel->channel,& event);
  #line 818 
  return;
}

#line 826  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/farch.c"
static int ef4_farch_handle_tx_event(struct ef4_channel *channel, ef4_qword_t *event)
{
  #line 835 
  union __anonunion___u_10253 __u;
  #line 828 
  unsigned int tx_ev_desc_ptr;
  #line 829 
  unsigned int tx_ev_q_label;
  #line 830 
  struct ef4_tx_queue *tx_queue;
  #line 831 
  struct ef4_nic *efx = channel->efx;
  #line 832 
  int tx_packets = 0;
  #line 834 
  __read_once_size((void *)(& efx->reset_pending),(void *)(& __u.__c),8);
  #line 834 
  if ((long)((__u.__val) != 0UL) != 0L) 
                                        #line 835 
                                        return 0;
  #line 837 
  if ((long)((event->u64[0] & 4096ULL) != 0ULL) != 0L) {
    #line 839 
    tx_ev_desc_ptr = (unsigned int)event->u64[0] & 4095U;
    #line 840 
    tx_ev_q_label = (unsigned int)(event->u64[0] >> 32) & 31U;
    #line 841 
    tx_queue = ef4_channel_get_tx_queue(channel,tx_ev_q_label & 3U);
    #line 843 
    tx_packets = (int)((tx_ev_desc_ptr - tx_queue->read_count) & tx_queue->ptr_mask);
    #line 845 
    ef4_xmit_done(tx_queue,tx_ev_desc_ptr);
  }
  else 
    #line 846 
    if ((event->u64[0] & 32768ULL) != 0ULL) {
      #line 848 
      tx_ev_q_label = (unsigned int)(event->u64[0] >> 32) & 31U;
      #line 849 
      tx_queue = ef4_channel_get_tx_queue(channel,tx_ev_q_label & 3U);
      #line 852 
      netif_tx_lock_1(efx->net_dev);
      #line 853 
      ef4_farch_notify_tx_desc(tx_queue);
      #line 854 
      netif_tx_unlock_1(efx->net_dev);
    }
    else 
      #line 855 
      if ((event->u64[0] & 274877906944ULL) != 0ULL) 
                                                     #line 856 
                                                     ef4_schedule_reset(efx,(enum reset_type)RESET_TYPE_DMA_ERROR);
      else 
        #line 858 
        if ((efx->msg_enable & 128U) != 0U) 
                                            #line 858 
                                            netdev_err(efx->net_dev,(char *)"channel %d unexpected TX event ",channel->channel,event->u32[1],event->u32[0]);
  #line 864 
  return tx_packets;
}

#line 868  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/farch.c"
static u16 ef4_farch_handle_rx_not_ok(struct ef4_rx_queue *rx_queue, ef4_qword_t *event)
{
  #line 873 
  bool rx_ev_buf_owner_id_err;
  #line 873 
  bool rx_ev_ip_hdr_chksum_err;
  #line 874 
  bool rx_ev_tcp_udp_chksum_err;
  #line 874 
  bool rx_ev_eth_crc_err;
  #line 875 
  bool rx_ev_frm_trunc;
  #line 875 
  bool rx_ev_drib_nib;
  #line 875 
  bool rx_ev_tobe_disc;
  #line 876 
  bool rx_ev_other_err;
  #line 876 
  bool rx_ev_pause_frm;
  #line 877 
  bool rx_ev_hdr_type;
  #line 877 
  bool rx_ev_mcast_pkt;
  #line 878 
  unsigned int rx_ev_pkt_type;
  #line 892 
  int tmp_1;
  #line 940 
  unsigned int tmp_2;
  #line 871 
  struct ef4_channel *channel = ef4_rx_queue_channel(rx_queue);
  #line 872 
  struct ef4_nic *efx = rx_queue->efx;
  #line 880 
  rx_ev_hdr_type = (_Bool)(((event->u64[0] >> 42) & 3ULL) != 0ULL);
  #line 881 
  rx_ev_mcast_pkt = (_Bool)(((event->u64[0] >> 39) & 1ULL) != 0ULL);
  #line 882 
  rx_ev_tobe_disc = (_Bool)(((event->u64[0] >> 47) & 1ULL) != 0ULL);
  #line 883 
  rx_ev_pkt_type = (unsigned int)(event->u64[0] >> 44) & 7U;
  #line 884 
  rx_ev_buf_owner_id_err = (_Bool)(((event->u64[0] >> 54) & 1ULL) != 0ULL);
  #line 886 
  rx_ev_ip_hdr_chksum_err = (_Bool)(((event->u64[0] >> 52) & 1ULL) != 0ULL);
  #line 888 
  rx_ev_tcp_udp_chksum_err = (_Bool)(((event->u64[0] >> 51) & 1ULL) != 0ULL);
  #line 890 
  rx_ev_eth_crc_err = (_Bool)(((event->u64[0] >> 50) & 1ULL) != 0ULL);
  #line 891 
  rx_ev_frm_trunc = (_Bool)(((event->u64[0] >> 49) & 1ULL) != 0ULL);
  #line 892 
  if (ef4_nic_rev(efx) <= 1) 
    #line 893 
    if (((event->u64[0] >> 49) & 1ULL) != 0ULL) 
                                                #line 892 
                                                tmp_1 = 1; else 
                                                                #line 892 
                                                                tmp_1 = 0;
  else 
       #line 892 
       tmp_1 = 0;
  #line 892 
  rx_ev_drib_nib = (_Bool)(tmp_1 != 0);
  #line 894 
  rx_ev_pause_frm = (_Bool)(((event->u64[0] >> 55) & 1ULL) != 0ULL);
  #line 897 
  rx_ev_other_err = (_Bool)(((((((int)rx_ev_drib_nib | (int)rx_ev_tcp_udp_chksum_err) | (int)rx_ev_buf_owner_id_err) | (int)rx_ev_eth_crc_err) | (int)rx_ev_frm_trunc) | (int)rx_ev_ip_hdr_chksum_err) != 0);
  #line 903 
  if ((int)rx_ev_frm_trunc != 0) 
                                 #line 904 
                                 (channel->n_rx_frm_trunc) ++;
  else 
    #line 905 
    if ((int)rx_ev_tobe_disc != 0) 
                                   #line 906 
                                   (channel->n_rx_tobe_disc) ++;
    else 
      #line 907 
      if (efx->loopback_selftest == (void *)0) 
        #line 908 
        if ((int)rx_ev_ip_hdr_chksum_err != 0) 
                                               #line 909 
                                               (channel->n_rx_ip_hdr_chksum_err) ++;
        else 
          #line 910 
          if ((int)rx_ev_tcp_udp_chksum_err != 0) 
                                                  #line 911 
                                                  (channel->n_rx_tcp_udp_chksum_err) ++;
  #line 940 
  if ((((((int)rx_ev_eth_crc_err | (int)rx_ev_frm_trunc) | (int)rx_ev_drib_nib) | (int)rx_ev_tobe_disc) | (int)rx_ev_pause_frm) != 0) 
    #line 940 
    tmp_2 = 4U; else 
                     #line 940 
                     tmp_2 = 0U;
  #line 940 
  return (unsigned short)tmp_2;
}

#line 948  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/farch.c"
static bool ef4_farch_handle_rx_bad_index(struct ef4_rx_queue *rx_queue, unsigned int index)
{
  #line 952 
  unsigned int expected;
  #line 952 
  unsigned int dropped;
  #line 967 
  int tmp_1;
  #line 950 
  struct ef4_channel *channel = ef4_rx_queue_channel(rx_queue);
  #line 951 
  struct ef4_nic *efx = rx_queue->efx;
  #line 954 
  if (rx_queue->scatter_n != 0U && (((rx_queue->removed_count + rx_queue->scatter_n) + 4294967295U) & rx_queue->ptr_mask) == index) {
    #line 957 
    (channel->n_rx_nodesc_trunc) ++;
    #line 958 
    return (_Bool)1;
  }
  #line 961 
  expected = rx_queue->removed_count & rx_queue->ptr_mask;
  #line 962 
  dropped = (index - expected) & rx_queue->ptr_mask;
  #line 963 
  if ((efx->msg_enable & 64U) != 0U) 
                                     #line 963 
                                     netdev_info(efx->net_dev,(char *)"dropped %d events (index=%d expected=%d)\n",dropped,index,expected);
  #line 967 
  if (ef4_nic_rev(efx) <= 1) 
                             #line 967 
                             tmp_1 = RESET_TYPE_RX_RECOVERY; else 
                                                                  #line 967 
                                                                  tmp_1 = RESET_TYPE_DISABLE;
  #line 967 
  ;
  #line 967 
  ef4_schedule_reset(efx,(enum reset_type)tmp_1);
  #line 969 
  return (_Bool)0;
}

#line 980  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/farch.c"
static void ef4_farch_handle_rx_event(struct ef4_channel *channel, ef4_qword_t *event)
{
  #line 991 
  union __anonunion___u_10255 __u;
  #line 982 
  unsigned int rx_ev_desc_ptr;
  #line 982 
  unsigned int rx_ev_byte_cnt;
  #line 983 
  unsigned int rx_ev_hdr_type;
  #line 983 
  unsigned int rx_ev_mcast_pkt;
  #line 984 
  unsigned int expected_ptr;
  #line 985 
  bool rx_ev_pkt_ok;
  #line 985 
  bool rx_ev_sop;
  #line 985 
  bool rx_ev_cont;
  #line 986 
  u16 flags;
  #line 987 
  struct ef4_rx_queue *rx_queue;
  #line 988 
  struct ef4_nic *efx = channel->efx;
  #line 990 
  __read_once_size((void *)(& efx->reset_pending),(void *)(& __u.__c),8);
  #line 990 
  if ((long)((__u.__val) != 0UL) != 0L) 
                                        #line 991 
                                        return;
  #line 993 
  rx_ev_cont = (_Bool)(((event->u64[0] >> 31) & 1ULL) != 0ULL);
  #line 994 
  rx_ev_sop = (_Bool)(((event->u64[0] >> 15) & 1ULL) != 0ULL);
  {
    #line 995 
    int __ret_warn_on = ((event->u64[0] >> 32) & 31ULL) != (unsigned long long)channel->channel;
    #line 995 
    if ((long)(__ret_warn_on != 0) != 0L) {
      #line 996 
      ldv_inline_asm();
      #line 997 
      ldv_inline_asm();
    }
    #line 995 
    long tmp_2 = (long)(__ret_warn_on != 0);
  }
  #line 998 
  rx_queue = ef4_channel_get_rx_queue(channel);
  #line 1000 
  rx_ev_desc_ptr = (unsigned int)event->u64[0] & 4095U;
  #line 1001 
  expected_ptr = (rx_queue->removed_count + rx_queue->scatter_n) & rx_queue->ptr_mask;
  #line 1005 
  if ((long)(rx_ev_desc_ptr != expected_ptr) != 0L || (long)((int)rx_ev_sop != (rx_queue->scatter_n == 0U)) != 0L) {
    #line 1007 
    if (rx_ev_desc_ptr != expected_ptr) {
      #line 1008 
      if (! ef4_farch_handle_rx_bad_index(rx_queue,rx_ev_desc_ptr)) 
                                                                    #line 1009 
                                                                    return;
    }
    #line 1012 
    if (rx_queue->scatter_n != 0U) {
      #line 1013 
      ef4_rx_packet(rx_queue,rx_queue->removed_count & rx_queue->ptr_mask,rx_queue->scatter_n,0U,(unsigned short)4);
      #line 1017 
      rx_queue->removed_count += rx_queue->scatter_n;
      #line 1018 
      rx_queue->scatter_n = 0U;
    }
    #line 1022 
    if (rx_ev_desc_ptr != expected_ptr) 
                                        #line 1023 
                                        return;
    #line 1026 
    if (! rx_ev_sop) {
      #line 1027 
      ef4_rx_packet(rx_queue,rx_queue->removed_count & rx_queue->ptr_mask,1U,0U,(unsigned short)4);
      #line 1031 
      (rx_queue->removed_count) ++;
      #line 1032 
      return;
    }
  }
  #line 1036 
  (rx_queue->scatter_n) ++;
  #line 1037 
  if ((int)rx_ev_cont != 0) 
                            #line 1038 
                            return;
  #line 1040 
  rx_ev_byte_cnt = (unsigned int)(event->u64[0] >> 16) & 16383U;
  #line 1041 
  rx_ev_pkt_ok = (_Bool)(((event->u64[0] >> 56) & 1ULL) != 0ULL);
  #line 1042 
  rx_ev_hdr_type = (unsigned int)(event->u64[0] >> 42) & 3U;
  #line 1044 
  if ((long)((int)rx_ev_pkt_ok != 0) != 0L) {
    #line 1048 
    flags = (unsigned short)0U;
    #line 1049 
    switch (rx_ev_hdr_type) {
      #line 1050 
      case (unsigned int)0: 
                            #line 1050 
      ;
      #line 1051 
      flags = (unsigned short)((unsigned int)flags | 64U);
      #line 1053 
      case (unsigned int)1: 
                            #line 1053 
      ;
      #line 1054 
      flags = (unsigned short)((unsigned int)flags | 2U);
      #line 1056 
      case (unsigned int)2: 
                            #line 1056 
      ;
      #line 1057 
      case (unsigned int)3: 
                            #line 1057 
      ;
      #line 1058 
      break;
    }
  }
  else 
       #line 1061 
       flags = ef4_farch_handle_rx_not_ok(rx_queue,event);
  #line 1065 
  rx_ev_mcast_pkt = (unsigned int)(event->u64[0] >> 39) & 1U;
  #line 1066 
  if (rx_ev_mcast_pkt != 0U) {
    #line 1067 
    unsigned int rx_ev_mcast_hash_match = (unsigned int)(event->u64[0] >> 40) & 1U;
    #line 1070 
    if ((long)(rx_ev_mcast_hash_match == 0U) != 0L) {
      #line 1071 
      (channel->n_rx_mcast_mismatch) ++;
      #line 1072 
      flags = (unsigned short)((unsigned int)flags | 4U);
    }
  }
  #line 1076 
  channel->irq_mod_score += 2U;
  #line 1079 
  ef4_rx_packet(rx_queue,rx_queue->removed_count & rx_queue->ptr_mask,rx_queue->scatter_n,rx_ev_byte_cnt,(unsigned short)((int)flags));
  #line 1082 
  rx_queue->removed_count += rx_queue->scatter_n;
  #line 1083 
  rx_queue->scatter_n = 0U;
  #line 1084 
  return;
}

#line 1091  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/farch.c"
static void ef4_farch_handle_tx_flush_done(struct ef4_nic *efx, ef4_qword_t *event)
{
  #line 1093 
  struct ef4_tx_queue *tx_queue;
  #line 1094 
  int qid;
  #line 1096 
  qid = (int)event->u64[0] & 16383;
  #line 1097 
  if (efx->n_tx_channels * 4U > (unsigned int)qid) {
    #line 1098 
    tx_queue = ef4_get_tx_queue(efx,(unsigned int)(qid / 4),(unsigned int)(qid % 4));
    #line 1100 
    if (atomic_cmpxchg(& tx_queue->flush_outstanding,1,0) != 0) 
                                                                #line 1101 
                                                                ef4_farch_magic_event(tx_queue->channel,tx_queue->queue | 66560U);
  }
  #line 1104 
  return;
}

#line 1112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/farch.c"
static void ef4_farch_handle_rx_flush_done(struct ef4_nic *efx, ef4_qword_t *event)
{
  #line 1114 
  struct ef4_channel *channel;
  #line 1115 
  struct ef4_rx_queue *rx_queue;
  #line 1116 
  int qid;
  #line 1117 
  bool failed;
  #line 1119 
  qid = (int)event->u64[0] & 4095;
  #line 1120 
  failed = (_Bool)(((event->u64[0] >> 12) & 1ULL) != 0ULL);
  #line 1121 
  if (efx->n_channels <= (unsigned int)qid) 
                                            #line 1122 
                                            return;
  #line 1123 
  channel = ef4_get_channel(efx,(unsigned int)qid);
  #line 1124 
  if (! ef4_channel_has_rx_queue(channel)) 
                                           #line 1125 
                                           return;
  #line 1126 
  rx_queue = ef4_channel_get_rx_queue(channel);
  #line 1128 
  if ((int)failed != 0) {
    #line 1129 
    if ((efx->msg_enable & 8192U) != 0U) 
                                         #line 1129 
                                         netdev_info(efx->net_dev,(char *)"RXQ %d flush retry\n",qid);
    #line 1131 
    rx_queue->flush_pending = (_Bool)1;
    #line 1132 
    atomic_inc_3(& efx->rxq_flush_pending);
  }
  else {
    #line 1134 
    ef4_farch_magic_event(ef4_rx_queue_channel(rx_queue),(unsigned int)(ef4_rx_queue_index(rx_queue) | 66304));
  }
  #line 1137 
  atomic_dec(& efx->rxq_flush_outstanding);
  #line 1138 
  if ((int)ef4_farch_flush_wake(efx) != 0) 
                                           #line 1139 
                                           __wake_up(& efx->flush_wq,3U,1,(void *)0);
  #line 1140 
  return;
}

#line 1143  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/farch.c"
static void ef4_farch_handle_drain_event(struct ef4_channel *channel)
{
  #line 1145 
  struct ef4_nic *efx = channel->efx;
  {
    #line 1147 
    int __ret_warn_on = atomic_read_2(& efx->active_queues) == 0;
    #line 1147 
    if ((long)(__ret_warn_on != 0) != 0L) {
      #line 1148 
      ldv_inline_asm();
      #line 1149 
      ldv_inline_asm();
    }
    #line 1147 
    long tmp_2 = (long)(__ret_warn_on != 0);
  }
  #line 1148 
  atomic_dec(& efx->active_queues);
  #line 1149 
  if ((int)ef4_farch_flush_wake(efx) != 0) 
                                           #line 1150 
                                           __wake_up(& efx->flush_wq,3U,1,(void *)0);
  #line 1151 
  return;
}

#line 1153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/farch.c"
static void ef4_farch_handle_generated_event(struct ef4_channel *channel, ef4_qword_t *event)
{
  #line 1157 
  struct ef4_rx_queue *tmp_1;
  #line 1160 
  unsigned int magic;
  #line 1160 
  unsigned int code;
  #line 1156 
  struct ef4_nic *efx = channel->efx;
  #line 1157 
  if ((int)ef4_channel_has_rx_queue(channel) != 0) 
                                                   #line 1158 
                                                   tmp_1 = ef4_channel_get_rx_queue(channel); else 
                                                                    #line 1157 
                                                                    tmp_1 = (struct ef4_rx_queue *)0;
  #line 1157 
  struct ef4_rx_queue *rx_queue = tmp_1;
  #line 1162 
  magic = (unsigned int)event->u64[0];
  #line 1163 
  code = magic >> 8;
  #line 1165 
  if ((unsigned int)(channel->channel | 65792) == magic) {
    #line 1166 
    int pscr_ret__;
    {
      #line 1166 
      void *__vpp_verify = (void *)0;
      #line 1166 
      void *tmp_2 = __vpp_verify;
    }
    #line 1166 
    switch (4UL) {
      #line 1166 
      int pfo_ret__;
      #line 1166 
      int pfo_ret___0;
      #line 1166 
      int pfo_ret___1;
      #line 1166 
      int pfo_ret___2;
      #line 1166 
      case (unsigned long)1: 
                             #line 1166 
      ;
      #line 1166 
      switch (4UL) {
        #line 1166 
        case (unsigned long)1: 
                               #line 1166 
        ;
        #line 1167 
        ldv_inline_asm();
        #line 1166 
        break;
        #line 1166 
        case (unsigned long)2: 
                               #line 1166 
        ;
        #line 1167 
        ldv_inline_asm();
        #line 1166 
        break;
        #line 1166 
        case (unsigned long)4: 
                               #line 1166 
        ;
        #line 1167 
        ldv_inline_asm();
        #line 1166 
        break;
        #line 1166 
        case (unsigned long)8: 
                               #line 1166 
        ;
        #line 1167 
        ldv_inline_asm();
        #line 1166 
        break;
        #line 1166 
        default: 
                 #line 1166 
        ;
        #line 1166 
        __bad_percpu_size();
      }
      #line 1166 
      pscr_ret__ = pfo_ret__;
      #line 1166 
      break;
      #line 1166 
      case (unsigned long)2: 
                             #line 1166 
      ;
      #line 1166 
      switch (4UL) {
        #line 1166 
        case (unsigned long)1: 
                               #line 1166 
        ;
        #line 1167 
        ldv_inline_asm();
        #line 1166 
        break;
        #line 1166 
        case (unsigned long)2: 
                               #line 1166 
        ;
        #line 1167 
        ldv_inline_asm();
        #line 1166 
        break;
        #line 1166 
        case (unsigned long)4: 
                               #line 1166 
        ;
        #line 1167 
        ldv_inline_asm();
        #line 1166 
        break;
        #line 1166 
        case (unsigned long)8: 
                               #line 1166 
        ;
        #line 1167 
        ldv_inline_asm();
        #line 1166 
        break;
        #line 1166 
        default: 
                 #line 1166 
        ;
        #line 1166 
        __bad_percpu_size();
      }
      #line 1166 
      pscr_ret__ = pfo_ret___0;
      #line 1166 
      break;
      #line 1166 
      case (unsigned long)4: 
                             #line 1166 
      ;
      #line 1166 
      switch (4UL) {
        #line 1166 
        case (unsigned long)1: 
                               #line 1166 
        ;
        #line 1167 
        ldv_inline_asm();
        #line 1166 
        break;
        #line 1166 
        case (unsigned long)2: 
                               #line 1166 
        ;
        #line 1167 
        ldv_inline_asm();
        #line 1166 
        break;
        #line 1166 
        case (unsigned long)4: 
                               #line 1166 
        ;
        #line 1167 
        ldv_inline_asm();
        #line 1166 
        break;
        #line 1166 
        case (unsigned long)8: 
                               #line 1166 
        ;
        #line 1167 
        ldv_inline_asm();
        #line 1166 
        break;
        #line 1166 
        default: 
                 #line 1166 
        ;
        #line 1166 
        __bad_percpu_size();
      }
      #line 1166 
      pscr_ret__ = pfo_ret___1;
      #line 1166 
      break;
      #line 1166 
      case (unsigned long)8: 
                             #line 1166 
      ;
      #line 1166 
      switch (4UL) {
        #line 1166 
        case (unsigned long)1: 
                               #line 1166 
        ;
        #line 1167 
        ldv_inline_asm();
        #line 1166 
        break;
        #line 1166 
        case (unsigned long)2: 
                               #line 1166 
        ;
        #line 1167 
        ldv_inline_asm();
        #line 1166 
        break;
        #line 1166 
        case (unsigned long)4: 
                               #line 1166 
        ;
        #line 1167 
        ldv_inline_asm();
        #line 1166 
        break;
        #line 1166 
        case (unsigned long)8: 
                               #line 1166 
        ;
        #line 1167 
        ldv_inline_asm();
        #line 1166 
        break;
        #line 1166 
        default: 
                 #line 1166 
        ;
        #line 1166 
        __bad_percpu_size();
      }
      #line 1166 
      pscr_ret__ = pfo_ret___2;
      #line 1166 
      break;
      #line 1166 
      default: 
               #line 1166 
      ;
      #line 1166 
      __bad_size_call_parameter();
      #line 1166 
      break;
    }
    #line 1166 
    channel->event_test_cpu = pscr_ret__;
  }
  else 
    #line 1167 
    if (rx_queue != (struct ef4_rx_queue *)0) {
      #line 1167 
      ;
      #line 1167 
      if ((unsigned int)(ef4_rx_queue_index(rx_queue) | 66048) == magic) 
        #line 1171 
        ef4_fast_push_rx_descriptors(rx_queue,(_Bool)1); else 
                                                              #line 1167 
                                                              goto _LAND_0;
    }
    else {
      #line 1167 
      _LAND_0: 
               #line 1172 
      ;
      #line 1172 
      if (rx_queue != (struct ef4_rx_queue *)0) {
        #line 1172 
        ;
        #line 1172 
        if ((unsigned int)(ef4_rx_queue_index(rx_queue) | 66304) == magic) 
          #line 1173 
          ef4_farch_handle_drain_event(channel); else 
                                                      #line 1172 
                                                      goto _LAND;
      }
      else {
        #line 1172 
        _LAND: 
               #line 1174 
        ;
        #line 1174 
        if (code == 260U) 
                          #line 1175 
                          ef4_farch_handle_drain_event(channel);
        else 
          #line 1177 
          if ((efx->msg_enable & 8192U) != 0U) {
            #line 1177 
            bool branch;
            #line 1177 
            struct _ddebug __UNIQUE_ID_ddebug556 = {.modname = (char *)"sfc_falcon", .function = (char *)"ef4_farch_handle_generated_event", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/farch.c", .format = (char *)"channel %d received ", .lineno = (unsigned int)1177U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
            #line 1177 
            branch = arch_static_branch(& __UNIQUE_ID_ddebug556.key.dd_key_false.key,(_Bool)0);
            #line 1177 
            if ((long)((long)((int)branch != 0)) != 0L) 
                                                        #line 1177 
                                                        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug556,efx->net_dev,(char *)"channel %d received ",channel->channel,event->u32[1],event->u32[0]);
          }
      }
    }
  #line 1179 
  return;
}

#line 1184  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/farch.c"
static void ef4_farch_handle_driver_event(struct ef4_channel *channel, ef4_qword_t *event)
{
  #line 1187 
  unsigned int ev_sub_code;
  #line 1188 
  unsigned int ev_sub_data;
  #line 1186 
  struct ef4_nic *efx = channel->efx;
  #line 1190 
  ev_sub_code = (unsigned int)(event->u64[0] >> 56) & 15U;
  #line 1191 
  ev_sub_data = (unsigned int)event->u64[0] & 16383U;
  #line 1193 
  switch (ev_sub_code) {
    #line 1228 
    int tmp_1;
    #line 1194 
    case (unsigned int)0: 
                          #line 1194 
    ;
    #line 1197 
    ef4_farch_handle_tx_flush_done(efx,event);
    #line 1198 
    break;
    #line 1199 
    case (unsigned int)1: 
                          #line 1199 
    ;
    #line 1202 
    ef4_farch_handle_rx_flush_done(efx,event);
    #line 1203 
    break;
    #line 1204 
    case (unsigned int)2: 
                          #line 1204 
    ;
    #line 1205 
    if ((efx->msg_enable & 8192U) != 0U) {
      #line 1205 
      bool branch;
      #line 1205 
      struct _ddebug __UNIQUE_ID_ddebug557 = {.modname = (char *)"sfc_falcon", .function = (char *)"ef4_farch_handle_driver_event", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/farch.c", .format = (char *)"channel %d EVQ %d initialised\n", .lineno = (unsigned int)1205U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 1205 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug557.key.dd_key_false.key,(_Bool)0);
      #line 1205 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 1205 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug557,efx->net_dev,(char *)"channel %d EVQ %d initialised\n",channel->channel,ev_sub_data);
    }
    #line 1208 
    break;
    #line 1209 
    case (unsigned int)5: 
                          #line 1209 
    ;
    #line 1212 
    break;
    #line 1213 
    case (unsigned int)6: 
                          #line 1213 
    ;
    #line 1217 
    break;
    #line 1218 
    case (unsigned int)10: 
                           #line 1218 
    ;
    #line 1222 
    break;
    #line 1223 
    case (unsigned int)11: 
                           #line 1223 
    ;
    #line 1224 
    if ((efx->msg_enable & 64U) != 0U) 
                                       #line 1224 
                                       netdev_err(efx->net_dev,(char *)"channel %d seen DRIVER RX_RESET event. ",channel->channel);
    #line 1227 
    atomic_inc_3(& efx->rx_reset);
    #line 1228 
    if (ef4_nic_rev(efx) <= 1) 
                               #line 1228 
                               tmp_1 = RESET_TYPE_RX_RECOVERY; else 
                                                                    #line 1228 
                                                                    tmp_1 = RESET_TYPE_DISABLE;
    #line 1228 
    ;
    #line 1228 
    ef4_schedule_reset(efx,(enum reset_type)tmp_1);
    #line 1232 
    break;
    #line 1233 
    case (unsigned int)14: 
                           #line 1233 
    ;
    #line 1234 
    if ((efx->msg_enable & 64U) != 0U) 
                                       #line 1234 
                                       netdev_err(efx->net_dev,(char *)"RX DMA Q %d reports descriptor fetch error.",ev_sub_data,ev_sub_data);
    #line 1238 
    ef4_schedule_reset(efx,(enum reset_type)RESET_TYPE_DMA_ERROR);
    #line 1239 
    break;
    #line 1240 
    case (unsigned int)15: 
                           #line 1240 
    ;
    #line 1241 
    if ((efx->msg_enable & 128U) != 0U) 
                                        #line 1241 
                                        netdev_err(efx->net_dev,(char *)"TX DMA Q %d reports descriptor fetch error.",ev_sub_data,ev_sub_data);
    #line 1245 
    ef4_schedule_reset(efx,(enum reset_type)RESET_TYPE_DMA_ERROR);
    #line 1246 
    break;
    #line 1247 
    default: 
             #line 1247 
    ;
    #line 1252 
    break;
  }
  #line 1254 
  return;
}

#line 1256  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/farch.c"
int ef4_farch_ev_process(struct ef4_channel *channel, int budget)
{
  #line 1259 
  unsigned int read_ptr;
  #line 1260 
  ef4_qword_t event;
  #line 1260 
  ef4_qword_t *p_event;
  #line 1261 
  int ev_code;
  #line 1258 
  struct ef4_nic *efx = channel->efx;
  #line 1262 
  int tx_packets = 0;
  #line 1263 
  int spent = 0;
  #line 1265 
  if (budget <= 0) 
                   #line 1266 
                   return spent;
  #line 1268 
  read_ptr = channel->eventq_read_ptr;
  #line 1270 
  while (1) {
    #line 1271 
    p_event = ef4_event(channel,read_ptr);
    #line 1272 
    event = *p_event;
    #line 1274 
    if (ef4_event_present(& event) == 0) 
                                         #line 1276 
                                         break;
    #line 1283 
    p_event->u64[0] = 18446744073709551615ULL;
    #line 1285 
    read_ptr ++;
    #line 1287 
    ev_code = (int)(event.u64[0] >> 60);
    #line 1289 
    switch (ev_code) {
      #line 1290 
      case 0: 
              #line 1290 
      ;
      #line 1291 
      ef4_farch_handle_rx_event(channel,& event);
      #line 1292 
      spent ++;
      #line 1292 
      ;
      #line 1292 
      if (spent == budget) 
                           #line 1293 
                           goto out;
      #line 1294 
      break;
      #line 1295 
      case 2: 
              #line 1295 
      ;
      #line 1297 
      tx_packets = ef4_farch_handle_tx_event(channel,& event) + tx_packets;
      #line 1298 
      if (efx->txq_entries < (unsigned int)tx_packets) {
        #line 1299 
        spent = budget;
        #line 1300 
        goto out;
      }
      #line 1302 
      break;
      #line 1303 
      case 7: 
              #line 1303 
      ;
      #line 1304 
      ef4_farch_handle_generated_event(channel,& event);
      #line 1305 
      break;
      #line 1306 
      case 5: 
              #line 1306 
      ;
      #line 1307 
      ef4_farch_handle_driver_event(channel,& event);
      #line 1308 
      break;
      #line 1309 
      case 6: 
              #line 1309 
      ;
      #line 1310 
      if ((efx->type)->handle_global_event != (bool (*)(struct ef4_channel *, ef4_qword_t *))0) {
        #line 1310 
        if ((int)(*((efx->type)->handle_global_event))(channel,& event) != 0) 
          #line 1312 
          break;
      }
      #line 1314 
      default: 
               #line 1314 
      ;
      #line 1315 
      if (((channel->efx)->msg_enable & 8192U) != 0U) 
                                                      #line 1315 
                                                      netdev_err((channel->efx)->net_dev,(char *)"channel %d unknown event type %d (data ",channel->channel,ev_code,event.u32[1],event.u32[0]);
    }
  }
  #line 1322 
  out: 
       #line 1322 
  ;
  #line 1323 
  channel->eventq_read_ptr = read_ptr;
  #line 1324 
  return spent;
}

#line 1328  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/farch.c"
int ef4_farch_ev_probe(struct ef4_channel *channel)
{
  #line 1331 
  unsigned int entries;
  #line 1330 
  struct ef4_nic *efx = channel->efx;
  #line 1333 
  entries = channel->eventq_mask + 1U;
  #line 1334 
  return ef4_alloc_special_buffer(efx,& channel->eventq,entries * 8U);
}

#line 1338  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/farch.c"
int ef4_farch_ev_init(struct ef4_channel *channel)
{
  #line 1340 
  ef4_oword_t reg;
  #line 1341 
  struct ef4_nic *efx = channel->efx;
  #line 1343 
  if ((efx->msg_enable & 8192U) != 0U) {
    #line 1343 
    bool branch;
    #line 1343 
    struct _ddebug __UNIQUE_ID_ddebug558 = {.modname = (char *)"sfc_falcon", .function = (char *)"ef4_farch_ev_init", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/farch.c", .format = (char *)"channel %d event queue in special buffers %d-%d\n", .lineno = (unsigned int)1343U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 1343 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug558.key.dd_key_false.key,(_Bool)0);
    #line 1343 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 1343 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug558,efx->net_dev,(char *)"channel %d event queue in special buffers %d-%d\n",channel->channel,channel->eventq.index,(channel->eventq.index + channel->eventq.entries) + 4294967295U);
  }
  #line 1349 
  ef4_init_special_buffer(efx,& channel->eventq);
  #line 1352 
  memset(channel->eventq.buf.addr,255,(unsigned long)channel->eventq.buf.len);
  {
    #line 1355 
    reg.u64[0] = (((unsigned long long)__ffs((unsigned long)channel->eventq.entries) << 20) | (unsigned long long)channel->eventq.index) | 8388608ULL;
    #line 1355 
    reg.u64[1] = 0ULL;
  }
  #line 1359 
  ef4_writeo_table(efx,& reg,(efx->type)->evq_ptr_tbl_base,(unsigned int)channel->channel);
  #line 1362 
  return 0;
}

#line 1365  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/farch.c"
void ef4_farch_ev_fini(struct ef4_channel *channel)
{
  #line 1367 
  ef4_oword_t reg;
  #line 1368 
  struct ef4_nic *efx = channel->efx;
  #line 1371 
  reg.u64[0] = 0ULL;
  #line 1371 
  reg.u64[1] = 0ULL;
  #line 1372 
  ef4_writeo_table(efx,& reg,(efx->type)->evq_ptr_tbl_base,(unsigned int)channel->channel);
  #line 1376 
  ef4_fini_special_buffer(efx,& channel->eventq);
  #line 1377 
  return;
}

#line 1380  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/farch.c"
void ef4_farch_ev_remove(struct ef4_channel *channel)
{
  #line 1382 
  ef4_free_special_buffer(channel->efx,& channel->eventq);
  #line 1383 
  return;
}

#line 1386  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/farch.c"
void ef4_farch_ev_test_generate(struct ef4_channel *channel)
{
  #line 1388 
  ef4_farch_magic_event(channel,(unsigned int)(channel->channel | 65792));
  #line 1389 
  return;
}

#line 1391  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/farch.c"
void ef4_farch_rx_defer_refill(struct ef4_rx_queue *rx_queue)
{
  #line 1393 
  ef4_farch_magic_event(ef4_rx_queue_channel(rx_queue),(unsigned int)(ef4_rx_queue_index(rx_queue) | 66048));
  #line 1395 
  return;
}

#line 1406  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/farch.c"
__inline static void ef4_farch_interrupts(struct ef4_nic *efx, bool enabled, bool force)
{
  #line 1409 
  ef4_oword_t int_en_reg_ker;
  #line 1411 
  int_en_reg_ker.u64[0] = (((unsigned long long)efx->irq_level << 8) | ((unsigned long long)force << 3)) | (unsigned long long)enabled;
  #line 1411 
  int_en_reg_ker.u64[1] = 0ULL;
  #line 1415 
  ef4_writeo_0(efx,& int_en_reg_ker,16U);
  #line 1416 
  return;
}

#line 1418  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/farch.c"
void ef4_farch_irq_enable_master(struct ef4_nic *efx)
{
  #line 1420 
  ((ef4_oword_t *)efx->irq_status.addr)->u64[0] = 0ULL;
  #line 1420 
  ((ef4_oword_t *)efx->irq_status.addr)->u64[1] = 0ULL;
  #line 1422 
  ldv_inline_asm();
  #line 1423 
  ef4_farch_interrupts(efx,(_Bool)1,(_Bool)0);
  #line 1424 
  return;
}

#line 1426  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/farch.c"
void ef4_farch_irq_disable_master(struct ef4_nic *efx)
{
  #line 1429 
  ef4_farch_interrupts(efx,(_Bool)0,(_Bool)0);
  #line 1430 
  return;
}

#line 1436  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/farch.c"
int ef4_farch_irq_test_generate(struct ef4_nic *efx)
{
  #line 1438 
  ef4_farch_interrupts(efx,(_Bool)1,(_Bool)1);
  #line 1439 
  return 0;
}

#line 1445  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/farch.c"
irqreturn_t ef4_farch_fatal_interrupt(struct ef4_nic *efx)
{
  #line 1449 
  ef4_oword_t fatal_intr;
  #line 1450 
  int error;
  #line 1450 
  int mem_perr;
  #line 1447 
  struct falcon_nic_data *nic_data = (struct falcon_nic_data *)efx->nic_data;
  #line 1448 
  ef4_oword_t *int_ker = (ef4_oword_t *)efx->irq_status.addr;
  #line 1452 
  ef4_reado_0(efx,& fatal_intr,560U);
  #line 1453 
  error = (int)fatal_intr.u64[0] & 4095;
  #line 1455 
  if ((efx->msg_enable & 8192U) != 0U) {
    #line 1455 
    char *tmp;
    #line 1455 
    if (error != 0) 
                    #line 1455 
                    tmp = (char *)"disabling bus mastering"; else 
                                                                  #line 1455 
                                                                  tmp = (char *)"no recognised error";
    #line 1455 
    ;
    #line 1455 
    ;
    #line 1455 
    ;
    #line 1455 
    ;
    #line 1455 
    ;
    #line 1455 
    ;
    #line 1455 
    ;
    #line 1455 
    ;
    #line 1455 
    ;
    #line 1455 
    netdev_err(efx->net_dev,(char *)"SYSTEM ERROR ",int_ker->u32[3],int_ker->u32[2],int_ker->u32[1],int_ker->u32[0],fatal_intr.u32[3],fatal_intr.u32[2],fatal_intr.u32[1],fatal_intr.u32[0],tmp);
  }
  #line 1461 
  mem_perr = ((fatal_intr.u64[0] & 256ULL) != 0ULL || (fatal_intr.u64[0] & 1ULL) != 0ULL) != 0;
  #line 1463 
  if (mem_perr != 0) {
    #line 1464 
    ef4_oword_t reg;
    #line 1465 
    ef4_reado_0(efx,& reg,608U);
    #line 1466 
    if ((efx->msg_enable & 8192U) != 0U) 
                                         #line 1466 
                                         netdev_err(efx->net_dev,(char *)"SYSTEM ERROR: memory parity error ",reg.u32[3],reg.u32[2],reg.u32[1],reg.u32[0]);
  }
  #line 1472 
  pci_clear_master(efx->pci_dev);
  #line 1473 
  if ((int)ef4_nic_is_dual_func(efx) != 0) 
                                           #line 1474 
                                           pci_clear_master(nic_data->pci_dev2);
  #line 1475 
  ef4_farch_irq_disable_master(efx);
  #line 1478 
  if (efx->int_error_count == 0U) 
                                  #line 1478 
                                  goto _LOR;
  else {
    {
      #line 1479 
      unsigned long __dummy;
      #line 1479 
      unsigned long __dummy2;
      }
    #line 1478 
    if (1 != 0) {
      {
        #line 1479 
        unsigned long __dummy_0;
        #line 1479 
        unsigned long __dummy2_0;
        }
      #line 1479 
      if (1 != 0) 
        #line 1479 
        if ((long)(efx->int_error_expire - jiffies) < 0L) {
          #line 1478 
          _LOR: {
                  #line 1480 
                  efx->int_error_count = 0U;
                  #line 1481 
                  efx->int_error_expire = jiffies + 900000UL;
                }
        }
    }
  }
  #line 1484 
  (efx->int_error_count) ++;
  #line 1484 
  if (efx->int_error_count <= 4U) {
    #line 1485 
    if ((efx->msg_enable & 8192U) != 0U) 
                                         #line 1485 
                                         netdev_err(efx->net_dev,(char *)"SYSTEM ERROR - reset scheduled\n");
    #line 1487 
    ef4_schedule_reset(efx,(enum reset_type)RESET_TYPE_INT_ERROR);
  }
  else {
    #line 1489 
    if ((efx->msg_enable & 8192U) != 0U) 
                                         #line 1489 
                                         netdev_err(efx->net_dev,(char *)"SYSTEM ERROR - max number of errors seen.");
    #line 1492 
    ef4_schedule_reset(efx,(enum reset_type)RESET_TYPE_DISABLE);
  }
  #line 1495 
  return IRQ_HANDLED;
}

#line 1501  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/farch.c"
irqreturn_t ef4_farch_legacy_interrupt(int irq, void *dev_id)
{
  #line 1505 
  union __anonunion___u_10257 __u;
  #line 1507 
  struct ef4_channel *channel;
  #line 1508 
  ef4_dword_t reg;
  #line 1509 
  u32 queues;
  #line 1510 
  int syserr;
  #line 1503 
  struct ef4_nic *efx = (struct ef4_nic *)dev_id;
  #line 1504 
  __read_once_size((void *)(& efx->irq_soft_enabled),(void *)(& __u.__c),1);
  #line 1504 
  bool soft_enabled = (__u.__val);
  #line 1505 
  ef4_oword_t *int_ker = (ef4_oword_t *)efx->irq_status.addr;
  #line 1506 
  irqreturn_t result = IRQ_NONE;
  #line 1513 
  ef4_readd(efx,& reg,144U);
  #line 1514 
  queues = reg.u32[0];
  #line 1520 
  if (reg.u32[0] == 4294967295U) {
    #line 1520 
    if (ef4_try_recovery(efx) != 0) 
      #line 1521 
      if (! efx->eeh_disabled_legacy_irq) {
        #line 1522 
        disable_irq_nosync((unsigned int)efx->legacy_irq);
        #line 1523 
        efx->eeh_disabled_legacy_irq = (_Bool)1;
      }
  }
  #line 1527 
  if (((1U << efx->irq_level) & queues) != 0U && (int)soft_enabled != 0) {
    #line 1531 
    int pscr_ret__;
    #line 1528 
    syserr = (int)int_ker->u64[1] & 1;
    #line 1529 
    if ((long)(syserr != 0) != 0L) {
      #line 1530 
      return ef4_farch_fatal_interrupt(efx);
    }
    {
      #line 1531 
      void *__vpp_verify = (void *)0;
      #line 1531 
      void *tmp_2 = __vpp_verify;
    }
    #line 1531 
    switch (4UL) {
      #line 1531 
      int pfo_ret___0;
      #line 1531 
      int pfo_ret___1;
      #line 1531 
      int pfo_ret___2;
      #line 1531 
      int pfo_ret__;
      #line 1531 
      case (unsigned long)1: 
                             #line 1531 
      ;
      #line 1531 
      switch (4UL) {
        #line 1531 
        case (unsigned long)1: 
                               #line 1531 
        ;
        #line 1532 
        ldv_inline_asm();
        #line 1531 
        break;
        #line 1531 
        case (unsigned long)2: 
                               #line 1531 
        ;
        #line 1532 
        ldv_inline_asm();
        #line 1531 
        break;
        #line 1531 
        case (unsigned long)4: 
                               #line 1531 
        ;
        #line 1532 
        ldv_inline_asm();
        #line 1531 
        break;
        #line 1531 
        case (unsigned long)8: 
                               #line 1531 
        ;
        #line 1532 
        ldv_inline_asm();
        #line 1531 
        break;
        #line 1531 
        default: 
                 #line 1531 
        ;
        #line 1531 
        __bad_percpu_size();
      }
      #line 1531 
      pscr_ret__ = pfo_ret__;
      #line 1531 
      break;
      #line 1531 
      case (unsigned long)2: 
                             #line 1531 
      ;
      #line 1531 
      switch (4UL) {
        #line 1531 
        case (unsigned long)1: 
                               #line 1531 
        ;
        #line 1532 
        ldv_inline_asm();
        #line 1531 
        break;
        #line 1531 
        case (unsigned long)2: 
                               #line 1531 
        ;
        #line 1532 
        ldv_inline_asm();
        #line 1531 
        break;
        #line 1531 
        case (unsigned long)4: 
                               #line 1531 
        ;
        #line 1532 
        ldv_inline_asm();
        #line 1531 
        break;
        #line 1531 
        case (unsigned long)8: 
                               #line 1531 
        ;
        #line 1532 
        ldv_inline_asm();
        #line 1531 
        break;
        #line 1531 
        default: 
                 #line 1531 
        ;
        #line 1531 
        __bad_percpu_size();
      }
      #line 1531 
      pscr_ret__ = pfo_ret___0;
      #line 1531 
      break;
      #line 1531 
      case (unsigned long)4: 
                             #line 1531 
      ;
      #line 1531 
      switch (4UL) {
        #line 1531 
        case (unsigned long)1: 
                               #line 1531 
        ;
        #line 1532 
        ldv_inline_asm();
        #line 1531 
        break;
        #line 1531 
        case (unsigned long)2: 
                               #line 1531 
        ;
        #line 1532 
        ldv_inline_asm();
        #line 1531 
        break;
        #line 1531 
        case (unsigned long)4: 
                               #line 1531 
        ;
        #line 1532 
        ldv_inline_asm();
        #line 1531 
        break;
        #line 1531 
        case (unsigned long)8: 
                               #line 1531 
        ;
        #line 1532 
        ldv_inline_asm();
        #line 1531 
        break;
        #line 1531 
        default: 
                 #line 1531 
        ;
        #line 1531 
        __bad_percpu_size();
      }
      #line 1531 
      pscr_ret__ = pfo_ret___1;
      #line 1531 
      break;
      #line 1531 
      case (unsigned long)8: 
                             #line 1531 
      ;
      #line 1531 
      switch (4UL) {
        #line 1531 
        case (unsigned long)1: 
                               #line 1531 
        ;
        #line 1532 
        ldv_inline_asm();
        #line 1531 
        break;
        #line 1531 
        case (unsigned long)2: 
                               #line 1531 
        ;
        #line 1532 
        ldv_inline_asm();
        #line 1531 
        break;
        #line 1531 
        case (unsigned long)4: 
                               #line 1531 
        ;
        #line 1532 
        ldv_inline_asm();
        #line 1531 
        break;
        #line 1531 
        case (unsigned long)8: 
                               #line 1531 
        ;
        #line 1532 
        ldv_inline_asm();
        #line 1531 
        break;
        #line 1531 
        default: 
                 #line 1531 
        ;
        #line 1531 
        __bad_percpu_size();
      }
      #line 1531 
      pscr_ret__ = pfo_ret___2;
      #line 1531 
      break;
      #line 1531 
      default: 
               #line 1531 
      ;
      #line 1531 
      __bad_size_call_parameter();
      #line 1531 
      break;
    }
    #line 1531 
    efx->last_irq_cpu = pscr_ret__;
  }
  #line 1534 
  if (queues != 0U) {
    #line 1535 
    efx->irq_zero_count = 0U;
    #line 1538 
    if ((long)((int)soft_enabled != 0) != 0L) {
      #line 1539 
      channel = efx->channel[0];
      #line 1539 
      while (channel != (struct ef4_channel *)0) {
        #line 1540 
        if ((queues & 1U) != 0U) 
                                 #line 1541 
                                 ef4_schedule_channel_irq_0(channel);
        #line 1542 
        queues >>= 1;
        #line 1539 
        if ((unsigned int)(channel->channel + 1) < efx->n_channels) 
                                                                    #line 1539 
                                                                    channel = efx->channel[channel->channel + 1]; else 
                                                                    #line 1539 
                                                                    channel = (struct ef4_channel *)0;
      }
    }
    #line 1545 
    result = IRQ_HANDLED;
  }
  else {
    #line 1548 
    ef4_qword_t *event;
    #line 1554 
    unsigned int tmp_7;
    #line 1554 
    tmp_7 = efx->irq_zero_count;
    #line 1554 
    (efx->irq_zero_count) ++;
    #line 1554 
    ;
    #line 1554 
    if (tmp_7 == 0U) 
                     #line 1555 
                     result = IRQ_HANDLED;
    #line 1558 
    if ((long)((int)soft_enabled != 0) != 0L) {
      #line 1559 
      channel = efx->channel[0];
      #line 1559 
      while (channel != (struct ef4_channel *)0) {
        {
          #line 1560 
          event = ef4_event(channel,channel->eventq_read_ptr);
          #line 1562 
          if (ef4_event_present(event) != 0) 
                                             #line 1563 
                                             ef4_schedule_channel_irq_0(channel); else 
                                                                    #line 1565 
                                                                    ef4_farch_ev_read_ack(channel);
        }
        #line 1559 
        if ((unsigned int)(channel->channel + 1) < efx->n_channels) 
                                                                    #line 1559 
                                                                    channel = efx->channel[channel->channel + 1]; else 
                                                                    #line 1559 
                                                                    channel = (struct ef4_channel *)0;
      }
    }
  }
  #line 1570 
  if (result == (unsigned int)IRQ_HANDLED) 
    #line 1571 
    if (0) 
      #line 1571 
      if ((efx->msg_enable & 512U) != 0U) {
        #line 1571 
        int pscr_ret___0;
        #line 1571 
        ;
        {
          #line 1571 
          void *__vpp_verify_0 = (void *)0;
          #line 1571 
          void *tmp_9 = __vpp_verify_0;
        }
        #line 1571 
        switch (4UL) {
          #line 1571 
          int pfo_ret___3;
          #line 1571 
          int pfo_ret___4;
          #line 1571 
          int pfo_ret___5;
          #line 1571 
          int pfo_ret___6;
          #line 1571 
          case (unsigned long)1: 
                                 #line 1571 
          ;
          #line 1571 
          switch (4UL) {
            #line 1571 
            case (unsigned long)1: 
                                   #line 1571 
            ;
            #line 1572 
            ldv_inline_asm();
            #line 1571 
            break;
            #line 1571 
            case (unsigned long)2: 
                                   #line 1571 
            ;
            #line 1572 
            ldv_inline_asm();
            #line 1571 
            break;
            #line 1571 
            case (unsigned long)4: 
                                   #line 1571 
            ;
            #line 1572 
            ldv_inline_asm();
            #line 1571 
            break;
            #line 1571 
            case (unsigned long)8: 
                                   #line 1571 
            ;
            #line 1572 
            ldv_inline_asm();
            #line 1571 
            break;
            #line 1571 
            default: 
                     #line 1571 
            ;
            #line 1571 
            __bad_percpu_size();
          }
          #line 1571 
          pscr_ret___0 = pfo_ret___3;
          #line 1571 
          break;
          #line 1571 
          case (unsigned long)2: 
                                 #line 1571 
          ;
          #line 1571 
          switch (4UL) {
            #line 1571 
            case (unsigned long)1: 
                                   #line 1571 
            ;
            #line 1572 
            ldv_inline_asm();
            #line 1571 
            break;
            #line 1571 
            case (unsigned long)2: 
                                   #line 1571 
            ;
            #line 1572 
            ldv_inline_asm();
            #line 1571 
            break;
            #line 1571 
            case (unsigned long)4: 
                                   #line 1571 
            ;
            #line 1572 
            ldv_inline_asm();
            #line 1571 
            break;
            #line 1571 
            case (unsigned long)8: 
                                   #line 1571 
            ;
            #line 1572 
            ldv_inline_asm();
            #line 1571 
            break;
            #line 1571 
            default: 
                     #line 1571 
            ;
            #line 1571 
            __bad_percpu_size();
          }
          #line 1571 
          pscr_ret___0 = pfo_ret___4;
          #line 1571 
          break;
          #line 1571 
          case (unsigned long)4: 
                                 #line 1571 
          ;
          #line 1571 
          switch (4UL) {
            #line 1571 
            case (unsigned long)1: 
                                   #line 1571 
            ;
            #line 1572 
            ldv_inline_asm();
            #line 1571 
            break;
            #line 1571 
            case (unsigned long)2: 
                                   #line 1571 
            ;
            #line 1572 
            ldv_inline_asm();
            #line 1571 
            break;
            #line 1571 
            case (unsigned long)4: 
                                   #line 1571 
            ;
            #line 1572 
            ldv_inline_asm();
            #line 1571 
            break;
            #line 1571 
            case (unsigned long)8: 
                                   #line 1571 
            ;
            #line 1572 
            ldv_inline_asm();
            #line 1571 
            break;
            #line 1571 
            default: 
                     #line 1571 
            ;
            #line 1571 
            __bad_percpu_size();
          }
          #line 1571 
          pscr_ret___0 = pfo_ret___5;
          #line 1571 
          break;
          #line 1571 
          case (unsigned long)8: 
                                 #line 1571 
          ;
          #line 1571 
          switch (4UL) {
            #line 1571 
            case (unsigned long)1: 
                                   #line 1571 
            ;
            #line 1572 
            ldv_inline_asm();
            #line 1571 
            break;
            #line 1571 
            case (unsigned long)2: 
                                   #line 1571 
            ;
            #line 1572 
            ldv_inline_asm();
            #line 1571 
            break;
            #line 1571 
            case (unsigned long)4: 
                                   #line 1571 
            ;
            #line 1572 
            ldv_inline_asm();
            #line 1571 
            break;
            #line 1571 
            case (unsigned long)8: 
                                   #line 1571 
            ;
            #line 1572 
            ldv_inline_asm();
            #line 1571 
            break;
            #line 1571 
            default: 
                     #line 1571 
            ;
            #line 1571 
            __bad_percpu_size();
          }
          #line 1571 
          pscr_ret___0 = pfo_ret___6;
          #line 1571 
          break;
          #line 1571 
          default: 
                   #line 1571 
          ;
          #line 1571 
          __bad_size_call_parameter();
          #line 1571 
          break;
        }
        #line 1571 
        ;
        #line 1571 
        ;
        #line 1571 
        netdev_printk((char *)"\001",efx->net_dev,(char *)"IRQ %d on CPU %d status ",irq,pscr_ret___0,reg.u32[0]);
      }
  #line 1575 
  return result;
}

#line 1585  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/farch.c"
irqreturn_t ef4_farch_msi_interrupt(int irq, void *dev_id)
{
  #line 1597 
  union __anonunion___u_10259 __u;
  #line 1590 
  int syserr;
  #line 1587 
  struct ef4_msi_context *context = (struct ef4_msi_context *)dev_id;
  #line 1588 
  struct ef4_nic *efx = context->efx;
  #line 1589 
  ef4_oword_t *int_ker = (ef4_oword_t *)efx->irq_status.addr;
  #line 1592 
  if (0) 
    #line 1592 
    if ((efx->msg_enable & 512U) != 0U) {
      #line 1592 
      int pscr_ret__;
      #line 1592 
      ;
      #line 1592 
      ;
      #line 1592 
      ;
      #line 1592 
      ;
      {
        #line 1592 
        void *__vpp_verify = (void *)0;
        #line 1592 
        void *tmp = __vpp_verify;
      }
      #line 1592 
      switch (4UL) {
        #line 1592 
        int pfo_ret___1;
        #line 1592 
        int pfo_ret___2;
        #line 1592 
        int pfo_ret__;
        #line 1592 
        int pfo_ret___0;
        #line 1592 
        case (unsigned long)1: 
                               #line 1592 
        ;
        #line 1592 
        switch (4UL) {
          #line 1592 
          case (unsigned long)1: 
                                 #line 1592 
          ;
          #line 1593 
          ldv_inline_asm();
          #line 1592 
          break;
          #line 1592 
          case (unsigned long)2: 
                                 #line 1592 
          ;
          #line 1593 
          ldv_inline_asm();
          #line 1592 
          break;
          #line 1592 
          case (unsigned long)4: 
                                 #line 1592 
          ;
          #line 1593 
          ldv_inline_asm();
          #line 1592 
          break;
          #line 1592 
          case (unsigned long)8: 
                                 #line 1592 
          ;
          #line 1593 
          ldv_inline_asm();
          #line 1592 
          break;
          #line 1592 
          default: 
                   #line 1592 
          ;
          #line 1592 
          __bad_percpu_size();
        }
        #line 1592 
        pscr_ret__ = pfo_ret__;
        #line 1592 
        break;
        #line 1592 
        case (unsigned long)2: 
                               #line 1592 
        ;
        #line 1592 
        switch (4UL) {
          #line 1592 
          case (unsigned long)1: 
                                 #line 1592 
          ;
          #line 1593 
          ldv_inline_asm();
          #line 1592 
          break;
          #line 1592 
          case (unsigned long)2: 
                                 #line 1592 
          ;
          #line 1593 
          ldv_inline_asm();
          #line 1592 
          break;
          #line 1592 
          case (unsigned long)4: 
                                 #line 1592 
          ;
          #line 1593 
          ldv_inline_asm();
          #line 1592 
          break;
          #line 1592 
          case (unsigned long)8: 
                                 #line 1592 
          ;
          #line 1593 
          ldv_inline_asm();
          #line 1592 
          break;
          #line 1592 
          default: 
                   #line 1592 
          ;
          #line 1592 
          __bad_percpu_size();
        }
        #line 1592 
        pscr_ret__ = pfo_ret___0;
        #line 1592 
        break;
        #line 1592 
        case (unsigned long)4: 
                               #line 1592 
        ;
        #line 1592 
        switch (4UL) {
          #line 1592 
          case (unsigned long)1: 
                                 #line 1592 
          ;
          #line 1593 
          ldv_inline_asm();
          #line 1592 
          break;
          #line 1592 
          case (unsigned long)2: 
                                 #line 1592 
          ;
          #line 1593 
          ldv_inline_asm();
          #line 1592 
          break;
          #line 1592 
          case (unsigned long)4: 
                                 #line 1592 
          ;
          #line 1593 
          ldv_inline_asm();
          #line 1592 
          break;
          #line 1592 
          case (unsigned long)8: 
                                 #line 1592 
          ;
          #line 1593 
          ldv_inline_asm();
          #line 1592 
          break;
          #line 1592 
          default: 
                   #line 1592 
          ;
          #line 1592 
          __bad_percpu_size();
        }
        #line 1592 
        pscr_ret__ = pfo_ret___1;
        #line 1592 
        break;
        #line 1592 
        case (unsigned long)8: 
                               #line 1592 
        ;
        #line 1592 
        switch (4UL) {
          #line 1592 
          case (unsigned long)1: 
                                 #line 1592 
          ;
          #line 1593 
          ldv_inline_asm();
          #line 1592 
          break;
          #line 1592 
          case (unsigned long)2: 
                                 #line 1592 
          ;
          #line 1593 
          ldv_inline_asm();
          #line 1592 
          break;
          #line 1592 
          case (unsigned long)4: 
                                 #line 1592 
          ;
          #line 1593 
          ldv_inline_asm();
          #line 1592 
          break;
          #line 1592 
          case (unsigned long)8: 
                                 #line 1592 
          ;
          #line 1593 
          ldv_inline_asm();
          #line 1592 
          break;
          #line 1592 
          default: 
                   #line 1592 
          ;
          #line 1592 
          __bad_percpu_size();
        }
        #line 1592 
        pscr_ret__ = pfo_ret___2;
        #line 1592 
        break;
        #line 1592 
        default: 
                 #line 1592 
        ;
        #line 1592 
        __bad_size_call_parameter();
        #line 1592 
        break;
      }
      #line 1592 
      ;
      #line 1592 
      ;
      #line 1592 
      netdev_printk((char *)"\001",efx->net_dev,(char *)"IRQ %d on CPU %d status ",irq,pscr_ret__,int_ker->u32[3],int_ker->u32[2],int_ker->u32[1],int_ker->u32[0]);
    }
  #line 1596 
  __read_once_size((void *)(& efx->irq_soft_enabled),(void *)(& __u.__c),1);
  #line 1596 
  if ((long)((int)(__u.__val) != 0) == 0L) 
                                           #line 1597 
                                           return IRQ_HANDLED;
  #line 1600 
  if (context->index == efx->irq_level) {
    #line 1604 
    int pscr_ret___0;
    #line 1601 
    syserr = (int)int_ker->u64[1] & 1;
    #line 1602 
    if ((long)(syserr != 0) != 0L) {
      #line 1603 
      return ef4_farch_fatal_interrupt(efx);
    }
    {
      #line 1604 
      void *__vpp_verify_0 = (void *)0;
      #line 1604 
      void *tmp_6 = __vpp_verify_0;
    }
    #line 1604 
    switch (4UL) {
      #line 1604 
      int pfo_ret___4;
      #line 1604 
      int pfo_ret___5;
      #line 1604 
      int pfo_ret___6;
      #line 1604 
      int pfo_ret___3;
      #line 1604 
      case (unsigned long)1: 
                             #line 1604 
      ;
      #line 1604 
      switch (4UL) {
        #line 1604 
        case (unsigned long)1: 
                               #line 1604 
        ;
        #line 1605 
        ldv_inline_asm();
        #line 1604 
        break;
        #line 1604 
        case (unsigned long)2: 
                               #line 1604 
        ;
        #line 1605 
        ldv_inline_asm();
        #line 1604 
        break;
        #line 1604 
        case (unsigned long)4: 
                               #line 1604 
        ;
        #line 1605 
        ldv_inline_asm();
        #line 1604 
        break;
        #line 1604 
        case (unsigned long)8: 
                               #line 1604 
        ;
        #line 1605 
        ldv_inline_asm();
        #line 1604 
        break;
        #line 1604 
        default: 
                 #line 1604 
        ;
        #line 1604 
        __bad_percpu_size();
      }
      #line 1604 
      pscr_ret___0 = pfo_ret___3;
      #line 1604 
      break;
      #line 1604 
      case (unsigned long)2: 
                             #line 1604 
      ;
      #line 1604 
      switch (4UL) {
        #line 1604 
        case (unsigned long)1: 
                               #line 1604 
        ;
        #line 1605 
        ldv_inline_asm();
        #line 1604 
        break;
        #line 1604 
        case (unsigned long)2: 
                               #line 1604 
        ;
        #line 1605 
        ldv_inline_asm();
        #line 1604 
        break;
        #line 1604 
        case (unsigned long)4: 
                               #line 1604 
        ;
        #line 1605 
        ldv_inline_asm();
        #line 1604 
        break;
        #line 1604 
        case (unsigned long)8: 
                               #line 1604 
        ;
        #line 1605 
        ldv_inline_asm();
        #line 1604 
        break;
        #line 1604 
        default: 
                 #line 1604 
        ;
        #line 1604 
        __bad_percpu_size();
      }
      #line 1604 
      pscr_ret___0 = pfo_ret___4;
      #line 1604 
      break;
      #line 1604 
      case (unsigned long)4: 
                             #line 1604 
      ;
      #line 1604 
      switch (4UL) {
        #line 1604 
        case (unsigned long)1: 
                               #line 1604 
        ;
        #line 1605 
        ldv_inline_asm();
        #line 1604 
        break;
        #line 1604 
        case (unsigned long)2: 
                               #line 1604 
        ;
        #line 1605 
        ldv_inline_asm();
        #line 1604 
        break;
        #line 1604 
        case (unsigned long)4: 
                               #line 1604 
        ;
        #line 1605 
        ldv_inline_asm();
        #line 1604 
        break;
        #line 1604 
        case (unsigned long)8: 
                               #line 1604 
        ;
        #line 1605 
        ldv_inline_asm();
        #line 1604 
        break;
        #line 1604 
        default: 
                 #line 1604 
        ;
        #line 1604 
        __bad_percpu_size();
      }
      #line 1604 
      pscr_ret___0 = pfo_ret___5;
      #line 1604 
      break;
      #line 1604 
      case (unsigned long)8: 
                             #line 1604 
      ;
      #line 1604 
      switch (4UL) {
        #line 1604 
        case (unsigned long)1: 
                               #line 1604 
        ;
        #line 1605 
        ldv_inline_asm();
        #line 1604 
        break;
        #line 1604 
        case (unsigned long)2: 
                               #line 1604 
        ;
        #line 1605 
        ldv_inline_asm();
        #line 1604 
        break;
        #line 1604 
        case (unsigned long)4: 
                               #line 1604 
        ;
        #line 1605 
        ldv_inline_asm();
        #line 1604 
        break;
        #line 1604 
        case (unsigned long)8: 
                               #line 1604 
        ;
        #line 1605 
        ldv_inline_asm();
        #line 1604 
        break;
        #line 1604 
        default: 
                 #line 1604 
        ;
        #line 1604 
        __bad_percpu_size();
      }
      #line 1604 
      pscr_ret___0 = pfo_ret___6;
      #line 1604 
      break;
      #line 1604 
      default: 
               #line 1604 
      ;
      #line 1604 
      __bad_size_call_parameter();
      #line 1604 
      break;
    }
    #line 1604 
    efx->last_irq_cpu = pscr_ret___0;
  }
  #line 1608 
  ef4_schedule_channel_irq_0(efx->channel[context->index]);
  #line 1610 
  return IRQ_HANDLED;
}

#line 1616  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/farch.c"
void ef4_farch_rx_push_indir_table(struct ef4_nic *efx)
{
  #line 1619 
  ef4_dword_t dword;
  #line 1618 
  size_t i = 0UL;
  #line 1621 
  if ((long)(ef4_nic_rev(efx) <= 1) != 0L) {
    #line 1622 
    ldv_inline_asm();
    #line 1623 
    ldv_inline_asm();
    #line 1624 
    ldv_inline_asm();
    #line 1621 
    ;
  }
  #line 1626 
  i = 0UL;
  #line 1626 
  while (i <= 127UL) {
    #line 1627 
    dword.u32[0] = efx->rx_indir_table[i];
    #line 1629 
    ef4_writed(efx,& dword,(unsigned int)(i + 1028096UL) * 16U);
    #line 1626 
    i ++;
  }
  #line 1632 
  return;
}

#line 1644  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/farch.c"
void ef4_farch_dimension_resources(struct ef4_nic *efx, unsigned int sram_lim_qw)
{
  #line 1655 
  unsigned int __UNIQUE_ID___x560;
  #line 1655 
  unsigned int tmp;
  #line 1646 
  unsigned int vi_count;
  #line 1646 
  unsigned int buftbl_min;
  #line 1651 
  buftbl_min = (unsigned int)(((((unsigned long)efx->n_rx_channels + (unsigned long)(efx->n_tx_channels * 4U)) + (unsigned long)efx->n_channels * 4UL) * 32768UL) / 4096UL);
  {
    #line 1655 
    __UNIQUE_ID___x560 = efx->n_channels;
    #line 1655 
    unsigned int __UNIQUE_ID___y561 = efx->n_tx_channels * 4U;
    #line 1655 
    if (__UNIQUE_ID___x560 > __UNIQUE_ID___y561) 
                                                 #line 1655 
                                                 tmp = __UNIQUE_ID___x560; else 
                                                                    #line 1655 
                                                                    tmp = __UNIQUE_ID___y561;
    }
  #line 1655 
  vi_count = tmp;
  #line 1657 
  efx->tx_dc_base = sram_lim_qw - vi_count * 16U;
  #line 1658 
  efx->rx_dc_base = efx->tx_dc_base - vi_count * 64U;
  #line 1659 
  return;
}

#line 1661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/farch.c"
u32 ef4_farch_fpga_ver(struct ef4_nic *efx)
{
  #line 1663 
  ef4_oword_t altera_build;
  #line 1664 
  ef4_reado_0(efx,& altera_build,768U);
  #line 1665 
  return (unsigned int)altera_build.u64[0];
}

#line 1668  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/farch.c"
void ef4_farch_init_common(struct ef4_nic *efx)
{
  #line 1670 
  ef4_oword_t temp;
  #line 1673 
  temp.u64[0] = (unsigned long long)efx->tx_dc_base;
  #line 1673 
  temp.u64[1] = 0ULL;
  #line 1674 
  ef4_writeo_0(efx,& temp,1568U);
  #line 1675 
  temp.u64[0] = (unsigned long long)efx->rx_dc_base;
  #line 1675 
  temp.u64[1] = 0ULL;
  #line 1676 
  ef4_writeo_0(efx,& temp,1552U);
  #line 1680 
  temp.u64[0] = 1ULL;
  #line 1680 
  temp.u64[1] = 0ULL;
  #line 1681 
  ef4_writeo_0(efx,& temp,2592U);
  #line 1687 
  temp.u64[0] = 3ULL;
  #line 1687 
  temp.u64[1] = 0ULL;
  #line 1688 
  ef4_writeo_0(efx,& temp,2112U);
  #line 1689 
  temp.u64[0] = 56ULL;
  #line 1689 
  temp.u64[1] = 0ULL;
  #line 1690 
  ef4_writeo_0(efx,& temp,2128U);
  #line 1693 
  temp.u64[0] = efx->irq_status.dma_addr;
  #line 1693 
  temp.u64[1] = (unsigned long long)(efx->interrupt_mode <= (unsigned int)EF4_INT_MODE_MSI);
  #line 1697 
  ef4_writeo_0(efx,& temp,48U);
  #line 1700 
  efx->irq_level = 0U;
  #line 1708 
  temp.u64[0] = 833223655424ULL;
  #line 1708 
  temp.u64[1] = 0ULL;
  #line 1712 
  temp.u64[0] = ~ temp.u64[0];
  #line 1712 
  temp.u64[1] = ~ temp.u64[1];
  #line 1713 
  ef4_writeo_0(efx,& temp,560U);
  #line 1718 
  ef4_reado_0(efx,& temp,2688U);
  #line 1719 
  temp.u64[0] = temp.u64[0];
  #line 1719 
  temp.u64[1] = (temp.u64[1] & 18446744073709551360ULL) | 254ULL;
  #line 1720 
  temp.u64[0] |= 144115188075855872ULL;
  #line 1720 
  temp.u64[1] = temp.u64[1];
  #line 1721 
  temp.u64[0] |= 262144ULL;
  #line 1721 
  temp.u64[1] = temp.u64[1];
  #line 1722 
  temp.u64[0] = temp.u64[0];
  #line 1722 
  temp.u64[1] |= 33554432ULL;
  #line 1723 
  temp.u64[0] |= 131072ULL;
  #line 1723 
  temp.u64[1] = temp.u64[1];
  #line 1725 
  temp.u64[0] |= 576460752303423488ULL;
  #line 1725 
  temp.u64[1] = temp.u64[1];
  #line 1727 
  temp.u64[0] = (temp.u64[0] & 18446744073707978751ULL) | 1048576ULL;
  #line 1727 
  temp.u64[1] = temp.u64[1];
  #line 1729 
  temp.u64[0] |= 17592181850112ULL;
  #line 1729 
  temp.u64[1] = temp.u64[1];
  #line 1731 
  if (ef4_nic_rev(efx) > 1) {
    #line 1732 
    temp.u64[0] |= 128ULL;
    #line 1732 
    temp.u64[1] = temp.u64[1];
  }
  #line 1733 
  ef4_writeo_0(efx,& temp,2688U);
  #line 1735 
  if (ef4_nic_rev(efx) > 1) {
    #line 1736 
    temp.u64[0] = 11015701ULL;
    #line 1736 
    temp.u64[1] = 0ULL;
    #line 1745 
    ef4_writeo_0(efx,& temp,2704U);
  }
  #line 1747 
  return;
}

#line 1823 
#line 2476 
static void ef4_farch_filter_table_clear_entry(struct ef4_nic *efx, struct ef4_farch_filter_table *table, unsigned int filter_idx);
#line 1829  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/farch.c"
static u16 ef4_farch_filter_hash(u32 key)
{
  #line 1831 
  u16 tmp;
  #line 1834 
  tmp = (unsigned short)((unsigned int)((unsigned short)(key >> 16)) ^ 8191U);
  #line 1835 
  tmp = (unsigned short)((((int)tmp >> 3) ^ (int)tmp) ^ ((int)tmp >> 6));
  #line 1836 
  tmp = (unsigned short)(((int)tmp >> 9) ^ (int)tmp);
  #line 1838 
  tmp = (unsigned short)((int)((unsigned short)(((int)tmp << 13) ^ (int)tmp)) ^ (int)((unsigned short)key));
  #line 1839 
  tmp = (unsigned short)((((int)tmp >> 3) ^ (int)tmp) ^ ((int)tmp >> 6));
  #line 1840 
  return (unsigned short)(((int)tmp >> 9) ^ (int)tmp);
}

#line 1845  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/farch.c"
static u16 ef4_farch_filter_increment(u32 key)
{
  #line 1847 
  return (unsigned short)((unsigned int)((unsigned short)key) * 2U + 65535U);
}

#line 1851  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/farch.c"
static enum ef4_farch_filter_table_id ef4_farch_filter_spec_table_id(struct ef4_farch_filter_spec *spec)
{
  #line 1867 
  return (enum ef4_farch_filter_table_id)(((int)spec->type >> 2) + (((int)spec->flags >> 3) & 2));
}

#line 1870  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/farch.c"
static void ef4_farch_filter_push_rx_config(struct ef4_nic *efx)
{
  #line 1873 
  struct ef4_farch_filter_table *table;
  #line 1874 
  ef4_oword_t filter_ctl;
  #line 1872 
  struct ef4_farch_filter_state *state = (struct ef4_farch_filter_state *)efx->filter_state;
  #line 1876 
  ef4_reado_0(efx,& filter_ctl,2064U);
  #line 1878 
  table = & state->table[0];
  #line 1879 
  filter_ctl.u64[0] = (filter_ctl.u64[0] & 18446744073709551360ULL) | (unsigned long long)(table->search_limit[0] + 1U);
  #line 1879 
  filter_ctl.u64[1] = filter_ctl.u64[1];
  #line 1882 
  filter_ctl.u64[0] = (filter_ctl.u64[0] & 18446744073709486335ULL) | ((unsigned long long)(table->search_limit[1] + 3U) << 8);
  #line 1882 
  filter_ctl.u64[1] = filter_ctl.u64[1];
  #line 1885 
  filter_ctl.u64[0] = (filter_ctl.u64[0] & 18446742978492891135ULL) | ((unsigned long long)(table->search_limit[2] + 1U) << 32);
  #line 1885 
  filter_ctl.u64[1] = filter_ctl.u64[1];
  #line 1888 
  filter_ctl.u64[0] = (filter_ctl.u64[0] & 18446744073692839935ULL) | ((unsigned long long)(table->search_limit[3] + 3U) << 16);
  #line 1888 
  filter_ctl.u64[1] = filter_ctl.u64[1];
  #line 1892 
  table = & state->table[1];
  #line 1893 
  if (table->size != 0U) {
    #line 1894 
    filter_ctl.u64[0] = filter_ctl.u64[0];
    #line 1894 
    filter_ctl.u64[1] = (filter_ctl.u64[1] & 18446744072640004095ULL) | ((unsigned long long)(table->search_limit[4] + 1U) << 22);
    #line 1898 
    filter_ctl.u64[0] = filter_ctl.u64[0];
    #line 1898 
    filter_ctl.u64[1] = (filter_ctl.u64[1] & 18446743799905386495ULL) | ((unsigned long long)(table->search_limit[5] + 3U) << 30);
  }
  #line 1904 
  table = & state->table[2];
  #line 1905 
  if (table->size != 0U) {
    #line 1906 
    filter_ctl.u64[0] = (filter_ctl.u64[0] & 18410724072783609855ULL) | ((unsigned long long)(table->spec)->dmaq_id << 43);
    #line 1906 
    filter_ctl.u64[1] = filter_ctl.u64[1];
    #line 1909 
    filter_ctl.u64[0] = (filter_ctl.u64[0] & 18446739675663040511ULL) | (((unsigned long long)(table->spec)->flags << 42) & 4398046511104ULL);
    #line 1909 
    filter_ctl.u64[1] = filter_ctl.u64[1];
    #line 1913 
    filter_ctl.u64[0] = (filter_ctl.u64[0] & 144115188075855871ULL) | ((unsigned long long)(table->spec + 1U)->dmaq_id << 57);
    #line 1913 
    filter_ctl.u64[1] = (filter_ctl.u64[1] & 18446744073709551584ULL) | (unsigned long long)((int)(table->spec + 1U)->dmaq_id >> 7);
    #line 1916 
    filter_ctl.u64[0] = (filter_ctl.u64[0] & 18374686479671623679ULL) | (((unsigned long long)(table->spec + 1U)->flags << 56) & 72057594037927936ULL);
    #line 1916 
    filter_ctl.u64[1] = filter_ctl.u64[1];
    #line 1925 
    filter_ctl.u64[0] = (filter_ctl.u64[0] & 18446742974197923839ULL) | (((unsigned long long)((int)(table->spec)->flags & (int)(table->spec + 1U)->flags) << 39) & 1099511627776ULL);
    #line 1925 
    filter_ctl.u64[1] = filter_ctl.u64[1];
  }
  else {
    #line 1930 
    if (ef4_nic_rev(efx) > 1) {
      #line 1936 
      filter_ctl.u64[0] = (filter_ctl.u64[0] & 18446742974197923839ULL) | ((unsigned long long)efx->rx_scatter << 40);
      #line 1936 
      filter_ctl.u64[1] = filter_ctl.u64[1];
    }
  }
  #line 1941 
  ef4_writeo_0(efx,& filter_ctl,2064U);
  #line 1942 
  return;
}

#line 1944  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/farch.c"
static void ef4_farch_filter_push_tx_limits(struct ef4_nic *efx)
{
  #line 1947 
  struct ef4_farch_filter_table *table;
  #line 1948 
  ef4_oword_t tx_cfg;
  #line 1946 
  struct ef4_farch_filter_state *state = (struct ef4_farch_filter_state *)efx->filter_state;
  #line 1950 
  ef4_reado_0(efx,& tx_cfg,2640U);
  #line 1952 
  table = & state->table[3];
  #line 1953 
  if (table->size != 0U) {
    #line 1954 
    tx_cfg.u64[0] = tx_cfg.u64[0];
    #line 1954 
    tx_cfg.u64[1] = (tx_cfg.u64[1] & 18446741883276230655ULL) | ((unsigned long long)(table->search_limit[4] + 1U) << 33);
    #line 1958 
    tx_cfg.u64[0] = tx_cfg.u64[0];
    #line 1958 
    tx_cfg.u64[1] = (tx_cfg.u64[1] & 18446183322779385855ULL) | ((unsigned long long)(table->search_limit[5] + 3U) << 41);
  }
  #line 1964 
  ef4_writeo_0(efx,& tx_cfg,2640U);
  #line 1965 
  return;
}

#line 1968  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/farch.c"
static int ef4_farch_filter_from_gen_spec(struct ef4_farch_filter_spec *spec, struct ef4_filter_spec *gen_spec)
{
  #line 1971 
  bool is_full = (_Bool)0;
  #line 1973 
  if (((int)gen_spec->flags & 1) != 0 && gen_spec->rss_context != 4294967295U) 
    #line 1975 
    return -22;
  #line 1977 
  spec->priority = (unsigned char)gen_spec->priority;
  #line 1978 
  spec->flags = (unsigned char)gen_spec->flags;
  #line 1979 
  spec->dmaq_id = (unsigned short)gen_spec->dmaq_id;
  #line 1981 
  switch ((int)gen_spec->match_flags) {
    #line 1982 
    case 619: 
              #line 1982 
    ;
    #line 1985 
    is_full = (_Bool)1;
    #line 1987 
    case 610: 
              #line 1987 
    ;
    {
      #line 1989 
      __be32 rhost;
      #line 1989 
      __be32 host1;
      #line 1989 
      __be32 host2;
      #line 1990 
      __be16 rport;
      #line 1990 
      __be16 port1;
      #line 1990 
      __be16 port2;
      #line 1994 
      if ((unsigned int)gen_spec->ether_type != 8U) 
                                                    #line 1995 
                                                    return -93;
      #line 1996 
      if ((unsigned int)gen_spec->loc_port == 0U || (int)is_full != 0 && (unsigned int)gen_spec->rem_port == 0U) 
        #line 1998 
        return -99;
      #line 1999 
      switch ((int)gen_spec->ip_proto) {
        #line 2000 
        case 6: 
                #line 2000 
        ;
        #line 2001 
        spec->type = (unsigned char)(! is_full);
        #line 2003 
        break;
        #line 2004 
        case 17: 
                 #line 2004 
        ;
        #line 2005 
        if ((int)is_full != 0) 
                               #line 2005 
                               spec->type = (unsigned char)2U; else 
                                                                    #line 2005 
                                                                    spec->type = (unsigned char)3U;
        #line 2007 
        break;
        #line 2008 
        default: 
                 #line 2008 
        ;
        #line 2009 
        return -93;
      }
      #line 2017 
      if ((int)is_full != 0) 
                             #line 2017 
                             rhost = gen_spec->rem_host[0]; else 
                                                                 #line 2017 
                                                                 rhost = 0U;
      #line 2018 
      if ((int)is_full != 0) 
                             #line 2018 
                             rport = gen_spec->rem_port; else 
                                                              #line 2018 
                                                              rport = (unsigned short)0U;
      #line 2019 
      host1 = rhost;
      #line 2020 
      host2 = gen_spec->loc_host[0];
      #line 2021 
      if (! is_full && (unsigned int)gen_spec->ip_proto == 17U) {
        #line 2022 
        port1 = gen_spec->loc_port;
        #line 2023 
        port2 = rport;
      }
      else {
        #line 2025 
        port1 = rport;
        #line 2026 
        port2 = gen_spec->loc_port;
      }
      #line 2028 
      spec->data[0] = (__builtin_bswap32(host1) << 16) | (unsigned int)__builtin_bswap16((unsigned short)((int)port1));
      #line 2029 
      spec->data[1] = (unsigned int)((int)__builtin_bswap16((unsigned short)((int)port2)) << 16) | (__builtin_bswap32(host1) >> 16);
      #line 2030 
      spec->data[2] = __builtin_bswap32(host2);
      #line 2032 
      break;
    }
    #line 2035 
    case 272: 
              #line 2035 
    ;
    #line 2036 
    is_full = (_Bool)1;
    #line 2038 
    case 16: 
             #line 2038 
    ;
    #line 2039 
    if ((int)is_full != 0) 
                           #line 2039 
                           spec->type = (unsigned char)4U; else 
                                                                #line 2039 
                                                                spec->type = (unsigned char)5U;
    #line 2041 
    if ((int)is_full != 0) {
      #line 2041 
      spec->data[0] = (unsigned int)__builtin_bswap16((unsigned short)((int)gen_spec->outer_vid));
    }
    else 
         #line 2041 
         spec->data[0] = 0U;
    #line 2042 
    spec->data[1] = (unsigned int)(((((int)gen_spec->loc_mac[2] << 24) | ((int)gen_spec->loc_mac[3] << 16)) | ((int)gen_spec->loc_mac[4] << 8)) | (int)gen_spec->loc_mac[5]);
    #line 2046 
    spec->data[2] = (unsigned int)(((int)gen_spec->loc_mac[0] << 8) | (int)gen_spec->loc_mac[1]);
    #line 2048 
    break;
    #line 2050 
    case 1024: 
               #line 2050 
    ;
    #line 2051 
    if ((int)is_multicast_ether_addr((u8 *)(& gen_spec->loc_mac)) != 0) 
      #line 2051 
      spec->type = (unsigned char)9U; else 
                                           #line 2051 
                                           spec->type = (unsigned char)8U;
    #line 2054 
    memset((void *)(& spec->data),0,12UL);
    #line 2055 
    break;
    #line 2057 
    default: 
             #line 2057 
    ;
    #line 2058 
    return -93;
  }
  #line 2061 
  return 0;
}

#line 2065  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/farch.c"
static void ef4_farch_filter_to_gen_spec(struct ef4_filter_spec *gen_spec, struct ef4_farch_filter_spec *spec)
{
  #line 2068 
  bool is_full = (_Bool)0;
  #line 2074 
  memset((void *)gen_spec,0,64UL);
  #line 2076 
  gen_spec->priority = (unsigned int)spec->priority;
  #line 2077 
  gen_spec->flags = (unsigned int)spec->flags;
  #line 2078 
  gen_spec->dmaq_id = (unsigned int)spec->dmaq_id;
  #line 2080 
  switch ((int)spec->type) {
    #line 2081 
    case 0: 
            #line 2081 
    ;
    #line 2082 
    case 2: 
            #line 2082 
    ;
    #line 2083 
    is_full = (_Bool)1;
    #line 2085 
    case 1: 
            #line 2085 
    ;
    #line 2086 
    case 3: 
            #line 2086 
    ;
    {
      #line 2087 
      __be32 host1;
      #line 2087 
      __be32 host2;
      #line 2088 
      __be16 port1;
      #line 2088 
      __be16 port2;
      #line 2090 
      gen_spec->match_flags = (unsigned int)610U;
      #line 2094 
      if ((int)is_full != 0) 
                             #line 2095 
                             gen_spec->match_flags = (unsigned int)((unsigned int)gen_spec->match_flags | 9U);
      #line 2097 
      gen_spec->ether_type = (unsigned short)8U;
      #line 2098 
      if ((unsigned int)spec->type <= 1U) 
                                          #line 2098 
                                          gen_spec->ip_proto = (unsigned char)6U; else 
                                                                    #line 2098 
                                                                    gen_spec->ip_proto = (unsigned char)17U;
      #line 2103 
      host1 = __builtin_bswap32((spec->data[0] >> 16) | (spec->data[1] << 16));
      #line 2104 
      port1 = __builtin_bswap16((unsigned short)((int)((unsigned short)spec->data[0])));
      #line 2105 
      host2 = __builtin_bswap32(spec->data[2]);
      #line 2106 
      port2 = __builtin_bswap16((unsigned short)((int)((unsigned short)(spec->data[1] >> 16))));
      #line 2107 
      if (((int)spec->flags & 16) != 0) {
        #line 2108 
        gen_spec->loc_host[0] = host1;
        #line 2109 
        gen_spec->rem_host[0] = host2;
      }
      else {
        #line 2111 
        gen_spec->loc_host[0] = host2;
        #line 2112 
        gen_spec->rem_host[0] = host1;
      }
      #line 2114 
      if ((((int)gen_spec->flags & 16) != 0) ^ (int)((_Bool)((! is_full && (unsigned int)gen_spec->ip_proto == 17U) != 0))) {
        #line 2116 
        gen_spec->loc_port = port1;
        #line 2117 
        gen_spec->rem_port = port2;
      }
      else {
        #line 2119 
        gen_spec->loc_port = port2;
        #line 2120 
        gen_spec->rem_port = port1;
      }
      #line 2123 
      break;
    }
    #line 2126 
    case 4: 
            #line 2126 
    ;
    #line 2127 
    is_full = (_Bool)1;
    #line 2129 
    case 5: 
            #line 2129 
    ;
    #line 2130 
    gen_spec->match_flags = (unsigned int)16U;
    #line 2131 
    if ((int)is_full != 0) 
                           #line 2132 
                           gen_spec->match_flags = (unsigned int)((unsigned int)gen_spec->match_flags | 256U);
    #line 2133 
    gen_spec->loc_mac[0] = (unsigned char)(spec->data[2] >> 8);
    #line 2134 
    gen_spec->loc_mac[1] = (unsigned char)spec->data[2];
    #line 2135 
    gen_spec->loc_mac[2] = (unsigned char)(spec->data[1] >> 24);
    #line 2136 
    gen_spec->loc_mac[3] = (unsigned char)(spec->data[1] >> 16);
    #line 2137 
    gen_spec->loc_mac[4] = (unsigned char)(spec->data[1] >> 8);
    #line 2138 
    gen_spec->loc_mac[5] = (unsigned char)spec->data[1];
    #line 2139 
    gen_spec->outer_vid = __builtin_bswap16((unsigned short)((int)((unsigned short)spec->data[0])));
    #line 2140 
    break;
    #line 2142 
    case 8: 
            #line 2142 
    ;
    #line 2143 
    case 9: 
            #line 2143 
    ;
    #line 2144 
    gen_spec->match_flags = (unsigned int)1024U;
    #line 2145 
    gen_spec->loc_mac[0] = (unsigned char)((unsigned int)spec->type == 9U);
    #line 2146 
    break;
    #line 2148 
    default: 
             #line 2148 
    ;
    {
      #line 2149 
      int __ret_warn_on = 1;
      #line 2149 
      if ((long)(__ret_warn_on != 0) != 0L) {
        #line 2150 
        ldv_inline_asm();
        #line 2151 
        ldv_inline_asm();
      }
      #line 2149 
      long tmp = (long)(__ret_warn_on != 0);
    }
    #line 2150 
    break;
  }
  #line 2152 
  return;
}

#line 2155  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/farch.c"
static void ef4_farch_filter_init_rx_auto(struct ef4_nic *efx, struct ef4_farch_filter_spec *spec)
{
  #line 2163 
  int tmp_0;
  #line 2163 
  int tmp_1;
  #line 2161 
  spec->priority = (unsigned char)1U;
  #line 2163 
  if ((int)ef4_rss_enabled(efx) != 0) 
                                      #line 2163 
                                      tmp_0 = 9; else 
                                                      #line 2163 
                                                      tmp_0 = 8;
  #line 2163 
  if ((int)efx->rx_scatter != 0) 
                                 #line 2163 
                                 tmp_1 = 2; else 
                                                 #line 2163 
                                                 tmp_1 = 0;
  #line 2162 
  spec->flags = (unsigned char)(tmp_0 | tmp_1);
  #line 2165 
  spec->dmaq_id = (unsigned short)0U;
  #line 2166 
  return;
}

#line 2169  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/farch.c"
static u32 ef4_farch_filter_build(ef4_oword_t *filter, struct ef4_farch_filter_spec *spec)
{
  #line 2172 
  u32 data3;
  #line 2174 
  switch ((unsigned int)ef4_farch_filter_spec_table_id(spec)) {
    #line 2175 
    case (unsigned int)0: 
                          #line 2175 
    ;
    {
      #line 2176 
      bool is_udp = (_Bool)((unsigned int)spec->type + 14U <= 1U);
      #line 2178 
      filter->u64[0] = ((unsigned long long)spec->data[1] << 32) | (unsigned long long)spec->data[0];
      #line 2178 
      filter->u64[1] = ((((((unsigned long long)spec->flags << 46) & 70368744177664ULL) | (((unsigned long long)spec->flags << 44) & 35184372088832ULL)) | ((unsigned long long)is_udp << 44)) | ((unsigned long long)spec->dmaq_id << 32)) | (unsigned long long)spec->data[2];
      #line 2189 
      data3 = (unsigned int)is_udp;
      #line 2190 
      break;
    }
    #line 2193 
    case (unsigned int)1: 
                          #line 2193 
    ;
    {
      #line 2194 
      bool is_wild = (_Bool)((unsigned int)spec->type == 5U);
      #line 2195 
      filter->u64[0] = (((((unsigned long long)spec->dmaq_id << 61) | ((unsigned long long)is_wild << 60)) | ((unsigned long long)spec->data[2] << 44)) | ((unsigned long long)spec->data[1] << 12)) | (unsigned long long)spec->data[0];
      #line 2195 
      filter->u64[1] = ((((unsigned long long)spec->flags << 11) & 2048ULL) | (((unsigned long long)spec->flags << 9) & 1024ULL)) | (unsigned long long)((int)spec->dmaq_id >> 3);
      #line 2206 
      data3 = (unsigned int)is_wild;
      #line 2207 
      break;
    }
    #line 2210 
    case (unsigned int)3: 
                          #line 2210 
    ;
    {
      #line 2211 
      bool is_wild_0 = (_Bool)((unsigned int)spec->type == 5U);
      #line 2212 
      filter->u64[0] = (((((unsigned long long)spec->dmaq_id << 61) | ((unsigned long long)is_wild_0 << 60)) | ((unsigned long long)spec->data[2] << 44)) | ((unsigned long long)spec->data[1] << 12)) | (unsigned long long)spec->data[0];
      #line 2212 
      filter->u64[1] = (unsigned long long)((int)spec->dmaq_id >> 3);
      #line 2218 
      data3 = (unsigned int)((int)is_wild_0 | ((int)spec->dmaq_id << 1));
      #line 2219 
      break;
    }
    #line 2222 
    default: 
             #line 2222 
    ;
    #line 2224 
    ldv_inline_asm();
    #line 2225 
    ldv_inline_asm();
    #line 2226 
    ldv_inline_asm();
    #line 2223 
    ;
  }
  #line 2226 
  return ((spec->data[0] ^ spec->data[1]) ^ spec->data[2]) ^ data3;
}

#line 2229  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/farch.c"
static bool ef4_farch_filter_equal(struct ef4_farch_filter_spec *left, struct ef4_farch_filter_spec *right)
{
  #line 2232 
  if ((int)left->type != (int)right->type) 
                                           #line 2234 
                                           return (_Bool)0;
  else {
    #line 2232 
    if (memcmp((void *)(& left->data),(void *)(& right->data),12UL) != 0) 
      #line 2234 
      return (_Bool)0;
  }
  #line 2236 
  if (((int)left->flags & 16) != 0 && (int)left->dmaq_id != (int)right->dmaq_id) 
    #line 2238 
    return (_Bool)0;
  #line 2240 
  return (_Bool)1;
}

#line 2254  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/farch.c"
static u8 ef4_farch_filter_type_match_pri[10U] = {[1] = (unsigned char)1U, [3] = (unsigned char)1U, (unsigned char)2U, (unsigned char)3U, [8] = (unsigned char)4U, (unsigned char)4U};
#line 2265  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/farch.c"
static enum ef4_farch_filter_table_id ef4_farch_filter_range_table[7U] = {[2] = EF4_FARCH_FILTER_TABLE_RX_MAC, EF4_FARCH_FILTER_TABLE_RX_MAC, EF4_FARCH_FILTER_TABLE_RX_DEF, EF4_FARCH_FILTER_TABLE_TX_MAC, EF4_FARCH_FILTER_TABLE_TX_MAC};
#line 2279  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/farch.c"
__inline static u32 ef4_farch_filter_make_id(struct ef4_farch_filter_spec *spec, unsigned int index)
{
  #line 2282 
  unsigned int range;
  #line 2284 
  range = (unsigned int)ef4_farch_filter_type_match_pri[(int)spec->type];
  #line 2285 
  if (((int)spec->flags & 8) == 0) 
                                   #line 2286 
                                   range += 5U;
  #line 2288 
  return (range << 13) | index;
}

#line 2292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/farch.c"
__inline static enum ef4_farch_filter_table_id ef4_farch_filter_id_table_id(u32 id)
{
  #line 2294 
  unsigned int range = id >> 13;
  #line 2296 
  if (range <= 6U) 
                   #line 2297 
                   return ef4_farch_filter_range_table[range]; else 
                                                                    #line 2299 
                                                                    return EF4_FARCH_FILTER_TABLE_COUNT;
}

#line 2302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/farch.c"
__inline static unsigned int ef4_farch_filter_id_index(u32 id)
{
  #line 2304 
  return id & 8191U;
}

#line 2307  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/farch.c"
u32 ef4_farch_filter_get_rx_id_limit(struct ef4_nic *efx)
{
  #line 2311 
  enum ef4_farch_filter_table_id table_id;
  #line 2309 
  struct ef4_farch_filter_state *state = (struct ef4_farch_filter_state *)efx->filter_state;
  #line 2310 
  unsigned int range = 4U;
  #line 2313 
  while (1) {
    #line 2318 
    unsigned int tmp;
    #line 2314 
    table_id = ef4_farch_filter_range_table[range];
    #line 2315 
    if (state->table[(unsigned int)table_id].size != 0U) 
                                                         #line 2316 
                                                         return (range << 13) | state->table[(unsigned int)table_id].size;
    #line 2318 
    tmp = range;
    #line 2318 
    range --;
    #line 2318 
    ;
    #line 2318 
    if (! (tmp != 0U)) 
                       #line 2313 
                       break;
  }
  #line 2320 
  return 0U;
}

#line 2323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/farch.c"
s32 ef4_farch_filter_insert(struct ef4_nic *efx, struct ef4_filter_spec *gen_spec, bool replace_equal)
{
  #line 2328 
  struct ef4_farch_filter_table *table;
  #line 2329 
  struct ef4_farch_filter_spec spec;
  #line 2330 
  ef4_oword_t filter;
  #line 2331 
  int rep_index;
  #line 2331 
  int ins_index;
  #line 2333 
  int rc;
  #line 2327 
  struct ef4_farch_filter_state *state = (struct ef4_farch_filter_state *)efx->filter_state;
  #line 2332 
  unsigned int depth = 0U;
  #line 2335 
  rc = ef4_farch_filter_from_gen_spec(& spec,gen_spec);
  #line 2336 
  if (rc != 0) 
               #line 2337 
               return rc;
  #line 2339 
  table = & state->table[(unsigned int)ef4_farch_filter_spec_table_id(& spec)];
  #line 2340 
  if (table->size == 0U) 
                         #line 2341 
                         return -22;
  #line 2347 
  if (table->id == (unsigned int)EF4_FARCH_FILTER_TABLE_RX_DEF) {
    #line 2352 
    rep_index = (int)spec.type + -8;
    #line 2353 
    ins_index = rep_index;
    #line 2355 
    cif_spin_lock_bh_filter_lock_of_ef4_nic(& efx->filter_lock);
  }
  else {
    #line 2376 
    unsigned int tmp_3;
    #line 2372 
    u32 key = ef4_farch_filter_build(& filter,& spec);
    #line 2373 
    unsigned int hash = (unsigned int)ef4_farch_filter_hash(key);
    #line 2374 
    unsigned int incr = (unsigned int)ef4_farch_filter_increment(key);
    #line 2375 
    unsigned int max_rep_depth = table->search_limit[(int)spec.type];
    #line 2376 
    if ((unsigned int)spec.priority == 0U) 
                                           #line 2376 
                                           tmp_3 = 5U; else 
                                                            #line 2376 
                                                            tmp_3 = 200U;
    #line 2376 
    unsigned int max_ins_depth = tmp_3;
    #line 2380 
    unsigned int i = (table->size + 4294967295U) & hash;
    #line 2382 
    ins_index = -1;
    #line 2383 
    depth = 1U;
    #line 2385 
    cif_spin_lock_bh_filter_lock_of_ef4_nic(& efx->filter_lock);
    #line 2387 
    while (1) {
      #line 2388 
      if (test_bit((long)i,table->used_bitmap)) {
        #line 2391 
        if ((int)ef4_farch_filter_equal(& spec,table->spec + (unsigned long)i) != 0) {
          #line 2394 
          if (ins_index < 0) 
                             #line 2395 
                             ins_index = (int)i;
          #line 2396 
          rep_index = (int)i;
          #line 2397 
          break;
        }
      }
      else 
        #line 2389 
        if (ins_index < 0) 
                           #line 2390 
                           ins_index = (int)i;
      #line 2400 
      if (depth >= max_rep_depth && (ins_index >= 0 || depth >= max_ins_depth)) {
        #line 2403 
        if (ins_index < 0) {
          #line 2404 
          rc = -16;
          #line 2405 
          goto out;
        }
        #line 2407 
        rep_index = -1;
        #line 2408 
        break;
      }
      #line 2411 
      i = (i + incr) & (table->size + 4294967295U);
      #line 2412 
      depth ++;
    }
  }
  #line 2419 
  if (rep_index >= 0) {
    #line 2420 
    struct ef4_farch_filter_spec *saved_spec = table->spec + (unsigned long)rep_index;
    #line 2423 
    if ((int)spec.priority == (int)saved_spec->priority && ! replace_equal) {
      #line 2424 
      rc = -17;
      #line 2425 
      goto out;
    }
    #line 2427 
    if ((int)spec.priority < (int)saved_spec->priority) {
      #line 2428 
      rc = -1;
      #line 2429 
      goto out;
    }
    #line 2431 
    if ((unsigned int)saved_spec->priority == 1U || ((int)saved_spec->flags & 4) != 0) 
      #line 2433 
      spec.flags = (unsigned char)((unsigned int)spec.flags | 4U);
  }
  #line 2437 
  if (ins_index != rep_index) {
    #line 2438 
    __clear_bit((long)ins_index,table->used_bitmap);
    #line 2439 
    (table->used) ++;
  }
  #line 2441 
  *(table->spec + (unsigned long)ins_index) = spec;
  #line 2443 
  if (table->id == (unsigned int)EF4_FARCH_FILTER_TABLE_RX_DEF) 
                                                                #line 2444 
                                                                ef4_farch_filter_push_rx_config(efx);
  else {
    #line 2446 
    if (table->search_limit[(int)spec.type] < depth) {
      #line 2447 
      table->search_limit[(int)spec.type] = depth;
      #line 2448 
      if (((int)spec.flags & 16) != 0) 
                                       #line 2449 
                                       ef4_farch_filter_push_tx_limits(efx); else 
                                                                    #line 2451 
                                                                    ef4_farch_filter_push_rx_config(efx);
    }
    #line 2454 
    ef4_writeo_0(efx,& filter,table->offset + table->step * (unsigned int)ins_index);
    #line 2460 
    if (ins_index != rep_index && rep_index >= 0) 
                                                  #line 2461 
                                                  ef4_farch_filter_table_clear_entry(efx,table,(unsigned int)rep_index);
  }
  #line 2468 
  rc = (int)ef4_farch_filter_make_id(& spec,(unsigned int)ins_index);
  #line 2470 
  out: 
       #line 2470 
  ;
  #line 2471 
  cif_spin_unlock_bh_filter_lock_of_ef4_nic_0(& efx->filter_lock);
  #line 2472 
  return rc;
}

#line 2476  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/farch.c"
static void ef4_farch_filter_table_clear_entry(struct ef4_nic *efx, struct ef4_farch_filter_table *table, unsigned int filter_idx)
{
  #line 2480 
  ef4_oword_t filter;
  #line 2483 
  if ((long)(table->offset == 0U) != 0L) {
    #line 2484 
    ldv_inline_asm();
    #line 2485 
    ldv_inline_asm();
    #line 2486 
    ldv_inline_asm();
    #line 2483 
    ;
  }
  #line 2485 
  __clear_bit((long)filter_idx,table->used_bitmap);
  #line 2486 
  (table->used) --;
  #line 2487 
  memset((void *)(table->spec + (unsigned long)filter_idx),0,16UL);
  #line 2489 
  ef4_writeo_0(efx,& filter,table->offset + table->step * filter_idx);
  #line 2497 
  if ((long)(table->used == 0U) != 0L) {
    #line 2498 
    memset((void *)(& table->search_limit),0,40UL);
    #line 2499 
    if (table->id == (unsigned int)EF4_FARCH_FILTER_TABLE_TX_MAC) 
                                                                  #line 2500 
                                                                  ef4_farch_filter_push_tx_limits(efx); else 
                                                                    #line 2502 
                                                                    ef4_farch_filter_push_rx_config(efx);
  }
  #line 2504 
  return;
}

#line 2506  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/farch.c"
static int ef4_farch_filter_remove(struct ef4_nic *efx, struct ef4_farch_filter_table *table, unsigned int filter_idx, enum ef4_filter_priority priority)
{
  #line 2511 
  struct ef4_farch_filter_spec *spec = table->spec + (unsigned long)filter_idx;
  #line 2513 
  if (test_bit((long)filter_idx,table->used_bitmap)) {
    #line 2514 
    if ((unsigned int)spec->priority != (unsigned int)priority) 
                                                                #line 2515 
                                                                return -2;
  }
  else 
       #line 2515 
       return -2;
  #line 2517 
  if (((int)spec->flags & 4) != 0) {
    #line 2518 
    ef4_farch_filter_init_rx_auto(efx,spec);
    #line 2519 
    ef4_farch_filter_push_rx_config(efx);
  }
  else 
       #line 2521 
       ef4_farch_filter_table_clear_entry(efx,table,filter_idx);
  #line 2524 
  return 0;
}

#line 2527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/farch.c"
int ef4_farch_filter_remove_safe(struct ef4_nic *efx, enum ef4_filter_priority priority, u32 filter_id)
{
  #line 2532 
  enum ef4_farch_filter_table_id table_id;
  #line 2533 
  struct ef4_farch_filter_table *table;
  #line 2534 
  unsigned int filter_idx;
  #line 2535 
  struct ef4_farch_filter_spec *spec;
  #line 2536 
  int rc;
  #line 2531 
  struct ef4_farch_filter_state *state = (struct ef4_farch_filter_state *)efx->filter_state;
  #line 2538 
  table_id = ef4_farch_filter_id_table_id(filter_id);
  #line 2539 
  if (table_id > (unsigned int)EF4_FARCH_FILTER_TABLE_TX_MAC) 
                                                              #line 2540 
                                                              return -2;
  #line 2541 
  table = & state->table[(unsigned int)table_id];
  #line 2543 
  filter_idx = ef4_farch_filter_id_index(filter_id);
  #line 2544 
  if (table->size <= filter_idx) 
                                 #line 2545 
                                 return -2;
  #line 2546 
  spec = table->spec + (unsigned long)filter_idx;
  #line 2548 
  cif_spin_lock_bh_filter_lock_of_ef4_nic(& efx->filter_lock);
  #line 2549 
  rc = ef4_farch_filter_remove(efx,table,filter_idx,priority);
  #line 2550 
  cif_spin_unlock_bh_filter_lock_of_ef4_nic_0(& efx->filter_lock);
  #line 2552 
  return rc;
}

#line 2555  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/farch.c"
int ef4_farch_filter_get_safe(struct ef4_nic *efx, enum ef4_filter_priority priority, u32 filter_id, struct ef4_filter_spec *spec_buf)
{
  #line 2560 
  enum ef4_farch_filter_table_id table_id;
  #line 2561 
  struct ef4_farch_filter_table *table;
  #line 2562 
  struct ef4_farch_filter_spec *spec;
  #line 2563 
  unsigned int filter_idx;
  #line 2564 
  int rc;
  #line 2559 
  struct ef4_farch_filter_state *state = (struct ef4_farch_filter_state *)efx->filter_state;
  #line 2566 
  table_id = ef4_farch_filter_id_table_id(filter_id);
  #line 2567 
  if (table_id > (unsigned int)EF4_FARCH_FILTER_TABLE_TX_MAC) 
                                                              #line 2568 
                                                              return -2;
  #line 2569 
  table = & state->table[(unsigned int)table_id];
  #line 2571 
  filter_idx = ef4_farch_filter_id_index(filter_id);
  #line 2572 
  if (table->size <= filter_idx) 
                                 #line 2573 
                                 return -2;
  #line 2574 
  spec = table->spec + (unsigned long)filter_idx;
  #line 2576 
  cif_spin_lock_bh_filter_lock_of_ef4_nic(& efx->filter_lock);
  #line 2578 
  if ((int)test_bit((long)filter_idx,table->used_bitmap) != 0) 
    #line 2579 
    if ((unsigned int)spec->priority == (unsigned int)priority) {
      #line 2580 
      ef4_farch_filter_to_gen_spec(spec_buf,spec);
      #line 2581 
      rc = 0;
    }
    else 
         #line 2583 
         rc = -2;
  else 
       #line 2583 
       rc = -2;
  #line 2586 
  cif_spin_unlock_bh_filter_lock_of_ef4_nic_0(& efx->filter_lock);
  #line 2588 
  return rc;
}

#line 2592  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/farch.c"
static void ef4_farch_filter_table_clear(struct ef4_nic *efx, enum ef4_farch_filter_table_id table_id, enum ef4_filter_priority priority)
{
  #line 2598 
  unsigned int filter_idx;
  #line 2596 
  struct ef4_farch_filter_state *state = (struct ef4_farch_filter_state *)efx->filter_state;
  #line 2597 
  struct ef4_farch_filter_table *table = & state->table[(unsigned int)table_id];
  #line 2600 
  cif_spin_lock_bh_filter_lock_of_ef4_nic(& efx->filter_lock);
  #line 2601 
  filter_idx = 0U;
  #line 2601 
  while (table->size > filter_idx) {
    #line 2602 
    if ((unsigned int)(table->spec + (unsigned long)filter_idx)->priority != 1U) 
      #line 2603 
      ef4_farch_filter_remove(efx,table,filter_idx,priority);
    #line 2601 
    filter_idx ++;
  }
  #line 2606 
  cif_spin_unlock_bh_filter_lock_of_ef4_nic_0(& efx->filter_lock);
  #line 2607 
  return;
}

#line 2609  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/farch.c"
int ef4_farch_filter_clear_rx(struct ef4_nic *efx, enum ef4_filter_priority priority)
{
  #line 2612 
  ef4_farch_filter_table_clear(efx,(enum ef4_farch_filter_table_id)EF4_FARCH_FILTER_TABLE_RX_IP,priority);
  #line 2614 
  ef4_farch_filter_table_clear(efx,(enum ef4_farch_filter_table_id)EF4_FARCH_FILTER_TABLE_RX_MAC,priority);
  #line 2616 
  ef4_farch_filter_table_clear(efx,(enum ef4_farch_filter_table_id)EF4_FARCH_FILTER_TABLE_RX_DEF,priority);
  #line 2618 
  return 0;
}

#line 2621  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/farch.c"
u32 ef4_farch_filter_count_rx_used(struct ef4_nic *efx, enum ef4_filter_priority priority)
{
  #line 2625 
  enum ef4_farch_filter_table_id table_id;
  #line 2626 
  struct ef4_farch_filter_table *table;
  #line 2627 
  unsigned int filter_idx;
  #line 2624 
  struct ef4_farch_filter_state *state = (struct ef4_farch_filter_state *)efx->filter_state;
  #line 2628 
  u32 count = 0U;
  #line 2630 
  cif_spin_lock_bh_filter_lock_of_ef4_nic(& efx->filter_lock);
  #line 2632 
  table_id = EF4_FARCH_FILTER_TABLE_RX_IP;
  #line 2632 
  while (table_id <= (unsigned int)EF4_FARCH_FILTER_TABLE_RX_DEF) {
    #line 2635 
    table = & state->table[(unsigned int)table_id];
    #line 2636 
    filter_idx = 0U;
    #line 2636 
    while (table->size > filter_idx) {
      #line 2637 
      if ((int)test_bit((long)filter_idx,table->used_bitmap) != 0) 
        #line 2638 
        if ((unsigned int)(table->spec + (unsigned long)filter_idx)->priority == (unsigned int)priority) 
          #line 2639 
          count ++;
      #line 2636 
      filter_idx ++;
    }
    #line 2633 
    table_id ++;
  }
  #line 2643 
  cif_spin_unlock_bh_filter_lock_of_ef4_nic_0(& efx->filter_lock);
  #line 2645 
  return count;
}

#line 2648  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/farch.c"
s32 ef4_farch_filter_get_rx_ids(struct ef4_nic *efx, enum ef4_filter_priority priority, u32 *buf, u32 size)
{
  #line 2653 
  enum ef4_farch_filter_table_id table_id;
  #line 2654 
  struct ef4_farch_filter_table *table;
  #line 2655 
  unsigned int filter_idx;
  #line 2652 
  struct ef4_farch_filter_state *state = (struct ef4_farch_filter_state *)efx->filter_state;
  #line 2656 
  s32 count = 0;
  #line 2658 
  cif_spin_lock_bh_filter_lock_of_ef4_nic(& efx->filter_lock);
  #line 2660 
  table_id = EF4_FARCH_FILTER_TABLE_RX_IP;
  #line 2660 
  while (table_id <= (unsigned int)EF4_FARCH_FILTER_TABLE_RX_DEF) {
    #line 2663 
    table = & state->table[(unsigned int)table_id];
    #line 2664 
    filter_idx = 0U;
    #line 2664 
    while (table->size > filter_idx) {
      #line 2665 
      if ((int)test_bit((long)filter_idx,table->used_bitmap) != 0) 
        #line 2666 
        if ((unsigned int)(table->spec + (unsigned long)filter_idx)->priority == (unsigned int)priority) {
          #line 2671 
          s32 tmp;
          #line 2667 
          if ((unsigned int)count == size) {
            #line 2668 
            count = -90;
            #line 2669 
            goto out;
          }
          #line 2671 
          tmp = count;
          #line 2671 
          count ++;
          #line 2671 
          *(buf + (unsigned long)tmp) = ef4_farch_filter_make_id(table->spec + (unsigned long)filter_idx,filter_idx);
        }
      #line 2664 
      filter_idx ++;
    }
    #line 2661 
    table_id ++;
  }
  #line 2676 
  out: 
       #line 2676 
  ;
  #line 2677 
  cif_spin_unlock_bh_filter_lock_of_ef4_nic_0(& efx->filter_lock);
  #line 2679 
  return count;
}

#line 2683  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/farch.c"
void ef4_farch_filter_table_restore(struct ef4_nic *efx)
{
  #line 2686 
  enum ef4_farch_filter_table_id table_id;
  #line 2687 
  struct ef4_farch_filter_table *table;
  #line 2688 
  ef4_oword_t filter;
  #line 2689 
  unsigned int filter_idx;
  #line 2685 
  struct ef4_farch_filter_state *state = (struct ef4_farch_filter_state *)efx->filter_state;
  #line 2691 
  cif_spin_lock_bh_filter_lock_of_ef4_nic(& efx->filter_lock);
  #line 2693 
  table_id = EF4_FARCH_FILTER_TABLE_RX_IP;
  #line 2693 
  while (table_id <= (unsigned int)EF4_FARCH_FILTER_TABLE_TX_MAC) {
    #line 2694 
    table = & state->table[(unsigned int)table_id];
    #line 2697 
    if (table->step == 0U) 
                           #line 2698 
                           goto __Cont;
    #line 2700 
    filter_idx = 0U;
    #line 2700 
    while (table->size > filter_idx) {
      {
        #line 2701 
        if (! test_bit((long)filter_idx,table->used_bitmap)) 
                                                             #line 2702 
                                                             goto __Cont_0;
        #line 2703 
        ef4_farch_filter_build(& filter,table->spec + (unsigned long)filter_idx);
        #line 2704 
        ef4_writeo_0(efx,& filter,table->offset + table->step * filter_idx);
      }
      #line 2700 
      __Cont_0: 
                #line 2700 
      filter_idx ++;
    }
    #line 2693 
    __Cont: 
            #line 2693 
    table_id ++;
  }
  #line 2709 
  ef4_farch_filter_push_rx_config(efx);
  #line 2710 
  ef4_farch_filter_push_tx_limits(efx);
  #line 2712 
  cif_spin_unlock_bh_filter_lock_of_ef4_nic_0(& efx->filter_lock);
  #line 2713 
  return;
}

#line 2715  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/farch.c"
void ef4_farch_filter_table_remove(struct ef4_nic *efx)
{
  #line 2718 
  enum ef4_farch_filter_table_id table_id;
  #line 2717 
  struct ef4_farch_filter_state *state = (struct ef4_farch_filter_state *)efx->filter_state;
  #line 2720 
  table_id = EF4_FARCH_FILTER_TABLE_RX_IP;
  #line 2720 
  while (table_id <= (unsigned int)EF4_FARCH_FILTER_TABLE_TX_MAC) {
    #line 2721 
    kfree((void *)state->table[(unsigned int)table_id].used_bitmap);
    #line 2722 
    cif_vfree((void *)state->table[(unsigned int)table_id].spec);
    #line 2720 
    table_id ++;
  }
  #line 2724 
  kfree((void *)state);
  #line 2725 
  return;
}

#line 2727  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/farch.c"
int ef4_farch_filter_table_probe(struct ef4_nic *efx)
{
  #line 2729 
  struct ef4_farch_filter_state *state;
  #line 2730 
  struct ef4_farch_filter_table *table;
  #line 2731 
  unsigned int table_id;
  #line 2733 
  state = (struct ef4_farch_filter_state *)kzalloc_5(320UL,3264U);
  #line 2734 
  if (state == (struct ef4_farch_filter_state *)0) 
                                                   #line 2735 
                                                   return -12;
  #line 2736 
  efx->filter_state = (void *)state;
  #line 2738 
  if (ef4_nic_rev(efx) > 1) {
    #line 2739 
    table = & state->table[0];
    #line 2740 
    table->id = EF4_FARCH_FILTER_TABLE_RX_IP;
    #line 2741 
    table->offset = 15728640U;
    #line 2742 
    table->size = 8192U;
    #line 2743 
    table->step = 32U;
  }
  #line 2746 
  table_id = 0U;
  #line 2746 
  while (table_id <= 3U) {
    {
      #line 2747 
      table = & state->table[table_id];
      #line 2748 
      if (table->size == 0U) 
                             #line 2749 
                             goto __Cont;
      #line 2750 
      table->used_bitmap = (unsigned long *)kcalloc_3(((unsigned long)table->size + 63UL) / 64UL,8UL,3264U);
      #line 2753 
      if (table->used_bitmap == (unsigned long *)0UL) 
                                                      #line 2754 
                                                      goto fail;
      #line 2755 
      table->spec = (struct ef4_farch_filter_spec *)cif_vzalloc(array_size(16UL,(unsigned long)table->size));
      #line 2757 
      if (table->spec == (struct ef4_farch_filter_spec *)0) 
                                                            #line 2758 
                                                            goto fail;
    }
    #line 2746 
    __Cont: 
            #line 2746 
    table_id ++;
  }
  #line 2761 
  table = & state->table[2];
  #line 2762 
  if (table->size != 0U) {
    #line 2764 
    struct ef4_farch_filter_spec *spec;
    #line 2765 
    unsigned int i;
    #line 2767 
    i = 0U;
    #line 2767 
    while (i <= 1U) {
      #line 2768 
      spec = table->spec + (unsigned long)i;
      #line 2769 
      spec->type = (unsigned char)((unsigned int)((unsigned char)i) + 8U);
      #line 2770 
      ef4_farch_filter_init_rx_auto(efx,spec);
      #line 2771 
      __clear_bit((long)i,table->used_bitmap);
      #line 2767 
      i ++;
    }
  }
  #line 2775 
  ef4_farch_filter_push_rx_config(efx);
  #line 2777 
  return 0;
  #line 2779 
  fail: 
        #line 2779 
  ;
  #line 2780 
  ef4_farch_filter_table_remove(efx);
  #line 2781 
  return -12;
}

#line 2785  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/farch.c"
void ef4_farch_filter_update_rx_scatter(struct ef4_nic *efx)
{
  #line 2788 
  enum ef4_farch_filter_table_id table_id;
  #line 2789 
  struct ef4_farch_filter_table *table;
  #line 2790 
  ef4_oword_t filter;
  #line 2791 
  unsigned int filter_idx;
  #line 2787 
  struct ef4_farch_filter_state *state = (struct ef4_farch_filter_state *)efx->filter_state;
  #line 2793 
  cif_spin_lock_bh_filter_lock_of_ef4_nic(& efx->filter_lock);
  #line 2795 
  table_id = EF4_FARCH_FILTER_TABLE_RX_IP;
  #line 2795 
  while (table_id <= (unsigned int)EF4_FARCH_FILTER_TABLE_RX_DEF) {
    #line 2798 
    table = & state->table[(unsigned int)table_id];
    #line 2800 
    filter_idx = 0U;
    #line 2800 
    while (table->size > filter_idx) {
      {
        #line 2801 
        if (test_bit((long)filter_idx,table->used_bitmap)) {
          #line 2802 
          if ((unsigned int)(table->spec + (unsigned long)filter_idx)->dmaq_id >= efx->n_rx_channels) 
            #line 2804 
            goto __Cont;
        }
        else 
             #line 2804 
             goto __Cont;
        #line 2806 
        if ((int)efx->rx_scatter != 0) 
                                       #line 2807 
                                       (table->spec + (unsigned long)filter_idx)->flags = (unsigned char)((unsigned int)(table->spec + (unsigned long)filter_idx)->flags | 2U); else 
                                                                    #line 2810 
                                                                    (table->spec + (unsigned long)filter_idx)->flags = (unsigned char)((unsigned int)(table->spec + (unsigned long)filter_idx)->flags & 253U);
        #line 2813 
        if (table_id == (unsigned int)EF4_FARCH_FILTER_TABLE_RX_DEF) 
          #line 2815 
          goto __Cont;
        #line 2817 
        ef4_farch_filter_build(& filter,table->spec + (unsigned long)filter_idx);
        #line 2818 
        ef4_writeo_0(efx,& filter,table->offset + table->step * filter_idx);
      }
      #line 2800 
      __Cont: 
              #line 2800 
      filter_idx ++;
    }
    #line 2796 
    table_id ++;
  }
  #line 2823 
  ef4_farch_filter_push_rx_config(efx);
  #line 2825 
  cif_spin_unlock_bh_filter_lock_of_ef4_nic_0(& efx->filter_lock);
  #line 2826 
  return;
}

#line 2830  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/farch.c"
s32 ef4_farch_filter_rfs_insert(struct ef4_nic *efx, struct ef4_filter_spec *gen_spec)
{
  #line 2833 
  return ef4_farch_filter_insert(efx,gen_spec,(_Bool)1);
}

#line 2836  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/farch.c"
bool ef4_farch_filter_rfs_expire_one(struct ef4_nic *efx, u32 flow_id, unsigned int index)
{
  #line 2839 
  struct ef4_farch_filter_state *state = (struct ef4_farch_filter_state *)efx->filter_state;
  #line 2840 
  struct ef4_farch_filter_table *table = & state->table[0];
  #line 2843 
  if ((int)test_bit((long)index,table->used_bitmap) != 0) 
    #line 2843 
    if ((unsigned int)(table->spec + (unsigned long)index)->priority == 0U) {
      #line 2844 
      if ((int)rps_may_expire_flow(efx->net_dev,
                            (unsigned short)((int)(table->spec + (unsigned long)index)->dmaq_id),
                            flow_id,
                            (unsigned short)((int)((unsigned short)index))) != 0) {
        #line 2847 
        ef4_farch_filter_table_clear_entry(efx,table,index);
        #line 2848 
        return (_Bool)1;
      }
    }
  #line 2851 
  return (_Bool)0;
}

#line 2856  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/farch.c"
void ef4_farch_filter_sync_rx_mode(struct ef4_nic *efx)
{
  #line 2859 
  struct netdev_hw_addr *ha;
  #line 2861 
  u32 crc;
  #line 2862 
  int bit;
  #line 2858 
  struct net_device *net_dev = efx->net_dev;
  #line 2860 
  union ef4_multicast_hash *mc_hash = & efx->multicast_hash;
  #line 2864 
  if (ef4_dev_registered(efx) == 0) 
                                    #line 2865 
                                    return;
  #line 2867 
  netif_addr_lock_bh_0(net_dev);
  #line 2869 
  efx->unicast_filter = (_Bool)((net_dev->flags & 256U) == 0U);
  #line 2872 
  if ((net_dev->flags & 768U) != 0U) 
                                     #line 2873 
                                     memset((void *)mc_hash,255,32UL);
  else {
    #line 2876 
    void *__mptr;
    #line 2875 
    memset((void *)mc_hash,0,32UL);
    #line 2876 
    __mptr = (void *)net_dev->mc.list.next;
    #line 2876 
    ha = ((struct netdev_hw_addr *)__mptr);
    #line 2876 
    while (& ha->list != & net_dev->mc.list) {
      #line 2876 
      void *__mptr_0;
      #line 2877 
      crc = crc32_le(4294967295U,(unsigned char *)(& ha->addr),6UL);
      #line 2878 
      bit = (int)crc & 255;
      #line 2879 
      __set_bit_le(bit,(void *)mc_hash);
      #line 2876 
      __mptr_0 = (void *)ha->list.next;
      #line 2876 
      ha = ((struct netdev_hw_addr *)__mptr_0);
    }
    #line 2886 
    __set_bit_le(255,(void *)mc_hash);
  }
  #line 2889 
  netif_addr_unlock_bh_0(net_dev);
  #line 2890 
  return;
}

#line 123  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/farch.i.aux"
static void cif_set_bit_1(long nr, unsigned long *addr)
{
  #line 126 
  ldv_set_bit(nr,addr);
  #line 127 
  return;
}

#line 130  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/farch.i.aux"
static void cif_clear_bit_1(long nr, unsigned long *addr)
{
  #line 133 
  ldv_clear_bit(nr,addr);
  #line 134 
  return;
}

#line 186  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/farch.i.aux"
static void atomic_inc_3(atomic_t *v)
{
  #line 189 
  ldv_atomic_inc(v);
  #line 190 
  return;
}

#line 193  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/farch.i.aux"
static void atomic_dec(atomic_t *v)
{
  #line 196 
  ldv_atomic_dec(v);
  #line 197 
  return;
}

#line 475  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/farch.i.aux"
static void *kcalloc_3(size_t n, size_t size, gfp_t flags)
{
  #line 478 
  return ldv_kcalloc(n,size,flags);
}

#line 496  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/farch.i.aux"
static void *kzalloc_5(size_t size, gfp_t flags)
{
  #line 499 
  return ldv_kzalloc(size,flags);
}

#line 557  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/farch.i.aux"
static void cif_spin_lock__xmit_lock_of_netdev_queue_1(spinlock_t *lock)
{
  #line 560 
  ldv_spin_model_lock((char *)"_xmit_lock_of_netdev_queue");
  #line 562 
  spin_lock_2(lock);
  #line 563 
  return;
}

#line 597  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/farch.i.aux"
static void cif_spin_unlock__xmit_lock_of_netdev_queue_1(spinlock_t *lock)
{
  #line 600 
  ldv_spin_model_unlock((char *)"_xmit_lock_of_netdev_queue");
  #line 602 
  spin_unlock_2(lock);
  #line 603 
  return;
}

#line 615  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/farch.i.aux"
static void cif_spin_lock_tx_global_lock_of_net_device_1(spinlock_t *lock)
{
  #line 618 
  ldv_spin_model_lock((char *)"tx_global_lock_of_net_device");
  #line 620 
  spin_lock_2(lock);
  #line 621 
  return;
}

#line 624  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/farch.i.aux"
static void cif_spin_unlock_tx_global_lock_of_net_device_1(spinlock_t *lock)
{
  #line 627 
  ldv_spin_model_unlock((char *)"tx_global_lock_of_net_device");
  #line 629 
  spin_unlock_2(lock);
  #line 630 
  return;
}

#line 642  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/farch.i.aux"
static void cif_spin_lock_bh_addr_list_lock_of_net_device_0(spinlock_t *lock)
{
  #line 645 
  ldv_spin_model_lock((char *)"addr_list_lock_of_net_device");
  #line 647 
  spin_lock_bh_1(lock);
  #line 648 
  return;
}

#line 660  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/farch.i.aux"
static void cif_spin_unlock_bh_addr_list_lock_of_net_device_0(spinlock_t *lock)
{
  #line 663 
  ldv_spin_model_unlock((char *)"addr_list_lock_of_net_device");
  #line 665 
  spin_unlock_bh_2(lock);
  #line 666 
  return;
}

#line 817  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/farch.i.aux"
static void cif___ldv_spin_lock_biu_lock_of_ef4_nic_0(spinlock_t *lock)
{
  #line 820 
  ldv_spin_model_lock((char *)"biu_lock_of_ef4_nic");
  #line 822 
  __ldv_spin_lock(lock);
  #line 823 
  return;
}

#line 826  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/farch.i.aux"
static void cif_spin_unlock_irqrestore_biu_lock_of_ef4_nic_0(spinlock_t *lock, unsigned long flags)
{
  #line 829 
  ldv_spin_model_unlock((char *)"biu_lock_of_ef4_nic");
  #line 831 
  spin_unlock_irqrestore_0(lock,flags);
  #line 832 
  return;
}

#line 835  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/farch.i.aux"
static void cif_spin_lock_bh_filter_lock_of_ef4_nic(spinlock_t *lock)
{
  #line 838 
  ldv_spin_model_lock((char *)"filter_lock_of_ef4_nic");
  #line 840 
  spin_lock_bh_1(lock);
  #line 841 
  return;
}

#line 844  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/farch.i.aux"
static void cif_spin_unlock_bh_filter_lock_of_ef4_nic_0(spinlock_t *lock)
{
  #line 847 
  ldv_spin_model_unlock((char *)"filter_lock_of_ef4_nic");
  #line 849 
  spin_unlock_bh_2(lock);
  #line 850 
  return;
}

#line 853  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/farch.i.aux"
static void cif_vfree(void *addr)
{
  #line 856 
  ldv_vfree(addr);
  #line 857 
  return;
}

#line 860  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/farch.i.aux"
static void *cif_vzalloc(unsigned long size)
{
  #line 863 
  return ldv_vzalloc(size);
}

#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/err.h"
#line 229  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/falcon_boards.i.aux"
static long PTR_ERR(void *ptr);
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/err.h"
#line 236  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/falcon_boards.i.aux"
static bool IS_ERR(void *ptr);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 23 
bool ldv_is_err(void *ptr);
#line 26 
#line 26 
long ldv_ptr_err(void *ptr);
#line 873  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 840  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/falcon_boards.i.aux"
static int cif_device_create_file_0(struct device *device, struct device_attribute *entry);
#line 875  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 832  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/falcon_boards.i.aux"
static void cif_device_remove_file_0(struct device *dev, struct device_attribute *attr);
#line 143  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
#line 143 
s32 i2c_smbus_read_byte_data(struct i2c_client *, u8);
#line 145 
#line 145 
s32 i2c_smbus_write_byte_data(struct i2c_client *, u8, u8);
#line 444 
#line 444 
struct i2c_client *i2c_new_device(struct i2c_adapter *, struct i2c_board_info *);
#line 447 
#line 447 
struct i2c_client *i2c_new_client_device(struct i2c_adapter *, struct i2c_board_info *);
#line 471 
#line 471 
struct i2c_client *i2c_new_dummy_device(struct i2c_adapter *, u16);
#line 481 
#line 481 
void i2c_unregister_device(struct i2c_client *);
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon_boards.c"
static int ef4_poke_lm87(struct i2c_client *client, u8 *reg_values)
{
  #line 68 
  while ((unsigned int)*reg_values != 0U) {
    #line 69 
    u8 *tmp;
    #line 70 
    u8 *tmp_0;
    #line 69 
    tmp = reg_values;
    #line 69 
    reg_values ++;
    #line 69 
    u8 reg = *tmp;
    #line 70 
    tmp_0 = reg_values;
    #line 70 
    reg_values ++;
    #line 70 
    u8 value = *tmp_0;
    #line 71 
    int rc = i2c_smbus_write_byte_data(client,(unsigned char)((int)reg),(unsigned char)((int)value));
    #line 72 
    if (rc != 0) 
                 #line 73 
                 return rc;
  }
  #line 75 
  return 0;
}

#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon_boards.c"
static u8 falcon_lm87_common_regs[13U] = {(unsigned char)19U, (unsigned char)95U, (unsigned char)23U, (unsigned char)95U, (unsigned char)55U, (unsigned char)90U, (unsigned char)56U, [8] = (unsigned char)20U, (unsigned char)125U, (unsigned char)24U, (unsigned char)125U};
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon_boards.c"
static int ef4_init_lm87(struct ef4_nic *efx, struct i2c_board_info *info, u8 *reg_values)
{
  #line 92 
  int rc;
  #line 90 
  struct falcon_board *board = falcon_board(efx);
  #line 91 
  struct i2c_client *client = i2c_new_device(& board->i2c_adap,info);
  #line 94 
  if (client == (struct i2c_client *)0) 
                                        #line 95 
                                        return -5;
  #line 98 
  i2c_smbus_read_byte_data(client,(unsigned char)65);
  #line 99 
  i2c_smbus_read_byte_data(client,(unsigned char)66);
  #line 101 
  rc = ef4_poke_lm87(client,reg_values);
  #line 102 
  if (rc != 0) 
               #line 103 
               goto err;
  #line 104 
  rc = ef4_poke_lm87(client,(u8 *)(& falcon_lm87_common_regs));
  #line 105 
  if (rc != 0) 
               #line 106 
               goto err;
  #line 108 
  board->hwmon_client = client;
  #line 109 
  return 0;
  #line 111 
  err: 
       #line 111 
  ;
  #line 112 
  i2c_unregister_device(client);
  #line 113 
  return rc;
}

#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon_boards.c"
static void ef4_fini_lm87(struct ef4_nic *efx)
{
  #line 118 
  i2c_unregister_device(falcon_board(efx)->hwmon_client);
  #line 119 
  return;
}

#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon_boards.c"
static int ef4_check_lm87(struct ef4_nic *efx, unsigned int mask)
{
  #line 124 
  bool temp_crit;
  #line 124 
  bool elec_fault;
  #line 124 
  bool is_failure;
  #line 125 
  u16 alarms;
  #line 126 
  s32 reg;
  #line 173 
  int tmp_5;
  #line 123 
  struct i2c_client *client = falcon_board(efx)->hwmon_client;
  #line 129 
  if ((int)efx->link_state.up != 0) 
                                    #line 130 
                                    return 0;
  #line 132 
  reg = i2c_smbus_read_byte_data(client,(unsigned char)65);
  #line 133 
  if (reg < 0) 
               #line 134 
               return reg;
  #line 135 
  alarms = (unsigned short)reg;
  #line 136 
  reg = i2c_smbus_read_byte_data(client,(unsigned char)66);
  #line 137 
  if (reg < 0) 
               #line 138 
               return reg;
  #line 139 
  alarms = (unsigned short)((reg << 8) | (int)alarms);
  #line 140 
  alarms = (unsigned short)((int)((unsigned short)mask) & (int)alarms);
  #line 142 
  temp_crit = (_Bool)0;
  #line 143 
  if (((int)alarms & 16) != 0) {
    #line 144 
    reg = i2c_smbus_read_byte_data(client,(unsigned char)39);
    #line 145 
    if (reg < 0) 
                 #line 146 
                 return reg;
    #line 147 
    if (reg > 95) 
                  #line 148 
                  temp_crit = (_Bool)1;
  }
  #line 150 
  if (((int)alarms & 32) != 0) {
    #line 151 
    reg = i2c_smbus_read_byte_data(client,(unsigned char)38);
    #line 152 
    if (reg < 0) 
                 #line 153 
                 return reg;
    #line 154 
    if (reg > 125) 
                   #line 155 
                   temp_crit = (_Bool)1;
  }
  #line 157 
  elec_fault = (_Bool)(((int)alarms & -49) != 0);
  #line 158 
  is_failure = (_Bool)(((int)temp_crit != 0 || (int)elec_fault != 0) != 0);
  #line 160 
  if ((unsigned int)alarms != 0U) 
    #line 161 
    if ((efx->msg_enable & 8192U) != 0U) {
      #line 161 
      char *tmp_0;
      #line 161 
      char *tmp_1;
      #line 161 
      char *tmp_2;
      #line 161 
      char *tmp_3;
      #line 161 
      char *tmp_4;
      #line 161 
      if ((int)elec_fault != 0) 
                                #line 161 
                                tmp_0 = (char *)"; electrical fault"; else 
                                                                    #line 161 
                                                                    tmp_0 = (char *)"";
      #line 161 
      if ((int)temp_crit != 0) 
                               #line 161 
                               tmp_1 = (char *)"; reached critical temperature"; else 
                                                                    #line 161 
                                                                    tmp_1 = (char *)"";
      #line 161 
      if (((int)alarms & 32) != 0) 
                                   #line 161 
                                   tmp_2 = (char *)"; controller is overheating"; else 
                                                                    #line 161 
                                                                    tmp_2 = (char *)"";
      #line 161 
      if (((int)alarms & 16) != 0) 
                                   #line 161 
                                   tmp_3 = (char *)"; board is overheating"; else 
                                                                    #line 161 
                                                                    tmp_3 = (char *)"";
      #line 161 
      ;
      #line 161 
      ;
      #line 161 
      if ((int)is_failure != 0) 
                                #line 161 
                                tmp_4 = (char *)"failure"; else 
                                                                #line 161 
                                                                tmp_4 = (char *)"problem";
      #line 161 
      ;
      #line 161 
      netdev_err(efx->net_dev,(char *)"LM87 detected a hardware %s (status %02x:%02x)",tmp_4,(int)alarms & 255,(int)alarms >> 8,tmp_3,tmp_2,tmp_1,tmp_0);
    }
  #line 173 
  if ((int)is_failure != 0) 
                            #line 173 
                            tmp_5 = -34; else 
                                              #line 173 
                                              tmp_5 = 0;
  #line 173 
  return tmp_5;
}

#line 255  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon_boards.c"
static void sfe4001_poweroff(struct ef4_nic *efx)
{
  #line 257 
  struct i2c_client *ioexp_client = falcon_board(efx)->ioexp_client;
  #line 258 
  struct i2c_client *hwmon_client = falcon_board(efx)->hwmon_client;
  #line 261 
  i2c_smbus_write_byte_data(ioexp_client,(unsigned char)2,(unsigned char)255);
  #line 262 
  i2c_smbus_write_byte_data(ioexp_client,(unsigned char)7,(unsigned char)255);
  #line 263 
  i2c_smbus_write_byte_data(ioexp_client,(unsigned char)6,(unsigned char)255);
  #line 266 
  i2c_smbus_read_byte_data(hwmon_client,(unsigned char)2);
  #line 267 
  return;
}

#line 269  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon_boards.c"
static int sfe4001_poweron(struct ef4_nic *efx)
{
  #line 273 
  unsigned int i;
  #line 273 
  unsigned int j;
  #line 274 
  int rc;
  #line 275 
  u8 out;
  #line 271 
  struct i2c_client *ioexp_client = falcon_board(efx)->ioexp_client;
  #line 272 
  struct i2c_client *hwmon_client = falcon_board(efx)->hwmon_client;
  #line 278 
  rc = i2c_smbus_read_byte_data(hwmon_client,(unsigned char)2);
  #line 279 
  if (rc < 0) 
              #line 280 
              return rc;
  #line 283 
  rc = i2c_smbus_write_byte_data(ioexp_client,(unsigned char)6,(unsigned char)0);
  #line 284 
  if (rc != 0) 
               #line 285 
               return rc;
  #line 286 
  rc = i2c_smbus_write_byte_data(ioexp_client,(unsigned char)7,(unsigned char)239);
  #line 288 
  if (rc != 0) 
               #line 289 
               goto fail_on;
  #line 294 
  rc = i2c_smbus_read_byte_data(ioexp_client,(unsigned char)2);
  #line 295 
  if (rc < 0) 
              #line 296 
              goto fail_on;
  #line 297 
  out = (unsigned char)255U;
  #line 300 
  if ((int)out != rc) {
    #line 301 
    if ((efx->msg_enable & 8192U) != 0U) 
                                         #line 301 
                                         netdev_info(efx->net_dev,(char *)"power-cycling PHY\n");
    #line 302 
    rc = i2c_smbus_write_byte_data(ioexp_client,(unsigned char)2,(unsigned char)((int)out));
    #line 303 
    if (rc != 0) 
                 #line 304 
                 goto fail_on;
    #line 305 
    schedule_timeout_uninterruptible(250L);
  }
  #line 308 
  i = 0U;
  #line 308 
  while (i <= 19U) {
    #line 310 
    out = (unsigned char)161U;
    #line 313 
    if (((unsigned int)efx->phy_mode & 8U) != 0U) 
                                                  #line 314 
                                                  out = (unsigned char)((unsigned int)out | 8U);
    #line 316 
    rc = i2c_smbus_write_byte_data(ioexp_client,(unsigned char)2,(unsigned char)((int)out));
    #line 317 
    if (rc != 0) 
                 #line 318 
                 goto fail_on;
    #line 319 
    msleep(10U);
    #line 322 
    out = (unsigned char)((unsigned int)out & 254U);
    #line 323 
    rc = i2c_smbus_write_byte_data(ioexp_client,(unsigned char)2,(unsigned char)((int)out));
    #line 324 
    if (rc != 0) 
                 #line 325 
                 goto fail_on;
    #line 327 
    if ((efx->msg_enable & 8192U) != 0U) 
                                         #line 327 
                                         netdev_info(efx->net_dev,(char *)"waiting for DSP boot (attempt %d)...\n",i);
    #line 333 
    if (((unsigned int)efx->phy_mode & 8U) != 0U) {
      #line 334 
      schedule_timeout_uninterruptible(250L);
      #line 335 
      return 0;
    }
    #line 338 
    j = 0U;
    #line 338 
    while (j <= 9U) {
      #line 339 
      msleep(100U);
      #line 342 
      rc = i2c_smbus_read_byte_data(ioexp_client,(unsigned char)1);
      #line 343 
      if (rc < 0) 
                  #line 344 
                  goto fail_on;
      #line 345 
      if ((rc & 1) != 0) 
                         #line 346 
                         return 0;
      #line 338 
      j ++;
    }
    #line 308 
    i ++;
  }
  #line 350 
  if ((efx->msg_enable & 8192U) != 0U) 
                                       #line 350 
                                       netdev_info(efx->net_dev,(char *)"timed out waiting for DSP boot\n");
  #line 351 
  rc = -110;
  #line 352 
  fail_on: 
           #line 352 
  ;
  #line 353 
  sfe4001_poweroff(efx);
  #line 354 
  return rc;
}

#line 357  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon_boards.c"
static ssize_t show_phy_flash_cfg(struct device *dev, struct device_attribute *attr, char *buf)
{
  #line 360 
  struct ef4_nic *efx = dev_get_drvdata(dev);
  #line 361 
  return (long)sprintf(buf,(char *)"%d\n",((unsigned int)efx->phy_mode & 8U) != 0U);
}

#line 364  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon_boards.c"
static ssize_t set_phy_flash_cfg(struct device *dev, struct device_attribute *attr, char *buf, size_t count)
{
  #line 369 
  enum ef4_phy_mode old_mode;
  #line 369 
  enum ef4_phy_mode new_mode;
  #line 370 
  int err;
  #line 396 
  long tmp_1;
  #line 368 
  struct ef4_nic *efx = dev_get_drvdata(dev);
  #line 372 
  rtnl_lock();
  #line 373 
  old_mode = efx->phy_mode;
  #line 374 
  if (count == 0UL || (int)*buf == 48) 
                                       #line 375 
                                       new_mode = (enum ef4_phy_mode)((unsigned int)old_mode & 4294967287U); else 
                                                                    #line 377 
                                                                    new_mode = PHY_MODE_SPECIAL;
  #line 378 
  if ((((unsigned int)old_mode ^ (unsigned int)new_mode) & 8U) == 0U) 
    #line 379 
    err = 0;
  else 
    #line 380 
    if (efx->state != (unsigned int)STATE_READY) 
                                                 #line 380 
                                                 goto _LOR;
    else {
      #line 380 
      if ((int)netif_running(efx->net_dev) != 0) 
                                                 #line 380 
                                                 _LOR: 
                                                       #line 381 
                                                       err = -16;
      else {
        #line 385 
        efx->phy_mode = new_mode;
        #line 386 
        if (((unsigned int)new_mode & 8U) != 0U) 
                                                 #line 387 
                                                 falcon_stop_nic_stats(efx);
        #line 388 
        err = sfe4001_poweron(efx);
        #line 389 
        if (err == 0) 
                      #line 390 
                      err = ef4_reconfigure_port(efx);
        #line 391 
        if (((unsigned int)new_mode & 8U) == 0U) 
                                                 #line 392 
                                                 falcon_start_nic_stats(efx);
      }
    }
  #line 394 
  rtnl_unlock();
  #line 396 
  if (err != 0) 
                #line 396 
                tmp_1 = (long)err; else 
                                        #line 396 
                                        tmp_1 = (long)count;
  #line 396 
  return tmp_1;
}

#line 399  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon_boards.c"
static struct device_attribute dev_attr_phy_flash_cfg = {.attr = {.name = (char *)"phy_flash_cfg", .mode = (unsigned short)420U}, .show = & show_phy_flash_cfg, .store = & set_phy_flash_cfg};
#line 401  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon_boards.c"
static void sfe4001_fini(struct ef4_nic *efx)
{
  #line 403 
  struct falcon_board *board = falcon_board(efx);
  #line 405 
  if ((efx->msg_enable & 1U) != 0U) 
                                    #line 405 
                                    netdev_info(efx->net_dev,(char *)"%s\n",(char *)"sfe4001_fini");
  #line 407 
  cif_device_remove_file_0(& (efx->pci_dev)->dev,& dev_attr_phy_flash_cfg);
  #line 408 
  sfe4001_poweroff(efx);
  #line 409 
  i2c_unregister_device(board->ioexp_client);
  #line 410 
  i2c_unregister_device(board->hwmon_client);
  #line 411 
  return;
}

#line 413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon_boards.c"
static int sfe4001_check_hw(struct ef4_nic *efx)
{
  #line 416 
  s32 status;
  #line 439 
  int tmp_0;
  #line 415 
  struct falcon_nic_data *nic_data = (struct falcon_nic_data *)efx->nic_data;
  #line 419 
  if (! nic_data->xmac_poll_required) 
                                      #line 420 
                                      return 0;
  #line 430 
  status = i2c_smbus_read_byte_data(falcon_board(efx)->ioexp_client,(unsigned char)1);
  #line 431 
  if (status >= 0 && (status & 3) != 0) 
                                        #line 433 
                                        return 0;
  #line 436 
  sfe4001_poweroff(efx);
  #line 437 
  efx->phy_mode = PHY_MODE_OFF;
  #line 439 
  if (status < 0) 
                  #line 439 
                  tmp_0 = -5; else 
                                   #line 439 
                                   tmp_0 = -34;
  #line 439 
  return tmp_0;
}

#line 442  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon_boards.c"
static struct i2c_board_info sfe4001_hwmon_info = {.type = {(char)'m', (char)'a', (char)'x', (char)'6', (char)'6', (char)'4', (char)'7'}, .addr = (unsigned short)78U};
#line 450  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon_boards.c"
static int sfe4001_init(struct ef4_nic *efx)
{
  #line 453 
  int rc;
  #line 452 
  struct falcon_board *board = falcon_board(efx);
  #line 456 
  board->hwmon_client = i2c_new_client_device(& board->i2c_adap,& sfe4001_hwmon_info);
  #line 462 
  if ((int)IS_ERR((void *)board->hwmon_client) != 0) {
    #line 463 
    return (int)PTR_ERR((void *)board->hwmon_client);
  }
  #line 466 
  rc = i2c_smbus_write_byte_data(board->hwmon_client,(unsigned char)11,(unsigned char)90);
  #line 468 
  if (rc != 0) 
               #line 469 
               goto fail_hwmon;
  #line 471 
  board->ioexp_client = i2c_new_dummy_device(& board->i2c_adap,(unsigned short)116);
  #line 472 
  if ((int)IS_ERR((void *)board->ioexp_client) != 0) {
    #line 473 
    rc = (int)PTR_ERR((void *)board->ioexp_client);
    #line 474 
    goto fail_hwmon;
  }
  #line 477 
  if (((unsigned int)efx->phy_mode & 8U) != 0U) 
                                                #line 480 
                                                falcon_stop_nic_stats(efx);
  #line 482 
  rc = sfe4001_poweron(efx);
  #line 483 
  if (rc != 0) 
               #line 484 
               goto fail_ioexp;
  #line 486 
  rc = cif_device_create_file_0(& (efx->pci_dev)->dev,& dev_attr_phy_flash_cfg);
  #line 487 
  if (rc != 0) 
               #line 488 
               goto fail_on;
  #line 490 
  if ((efx->msg_enable & 8192U) != 0U) 
                                       #line 490 
                                       netdev_info(efx->net_dev,(char *)"PHY is powered on\n");
  #line 491 
  return 0;
  #line 493 
  fail_on: 
           #line 493 
  ;
  #line 494 
  sfe4001_poweroff(efx);
  #line 495 
  fail_ioexp: 
              #line 495 
  ;
  #line 496 
  i2c_unregister_device(board->ioexp_client);
  #line 497 
  fail_hwmon: 
              #line 497 
  ;
  #line 498 
  i2c_unregister_device(board->hwmon_client);
  #line 499 
  return rc;
}

#line 506  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon_boards.c"
static u8 sfe4002_lm87_channel = (unsigned char)3U;
#line 508  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon_boards.c"
static u8 sfe4002_lm87_regs[41U] = {(unsigned char)43U, (unsigned char)153U, (unsigned char)44U, (unsigned char)124U, (unsigned char)45U, (unsigned char)94U, (unsigned char)46U, (unsigned char)76U, (unsigned char)47U, (unsigned char)212U, (unsigned char)48U, (unsigned char)172U, (unsigned char)49U, (unsigned char)212U, (unsigned char)50U, (unsigned char)172U, (unsigned char)51U, (unsigned char)224U, (unsigned char)52U, (unsigned char)172U, (unsigned char)53U, (unsigned char)79U, (unsigned char)54U, (unsigned char)63U, (unsigned char)59U, (unsigned char)187U, (unsigned char)26U, (unsigned char)152U, (unsigned char)60U, (unsigned char)169U, (unsigned char)27U, (unsigned char)138U, (unsigned char)57U, (unsigned char)95U, (unsigned char)58U, [36] = (unsigned char)55U, (unsigned char)90U, (unsigned char)56U};
#line 522  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon_boards.c"
static struct i2c_board_info sfe4002_hwmon_info = {.type = {(char)'l', (char)'m', (char)'8', (char)'7'}, .addr = (unsigned short)46U, .platform_data = (void *)(& sfe4002_lm87_channel)};
#line 537  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon_boards.c"
static void sfe4002_init_phy(struct ef4_nic *efx)
{
  #line 541 
  falcon_qt202x_set_led(efx,1,3);
  #line 543 
  falcon_qt202x_set_led(efx,0,11);
  #line 545 
  falcon_qt202x_set_led(efx,2,4);
  #line 546 
  return;
}

#line 548  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon_boards.c"
static void sfe4002_set_id_led(struct ef4_nic *efx, enum ef4_led_mode mode)
{
  #line 550 
  int tmp;
  #line 550 
  if (mode == (unsigned int)EF4_LED_ON) 
                                        #line 550 
                                        tmp = 5; else 
                                                      #line 550 
                                                      tmp = 4;
  #line 550 
  ;
  #line 550 
  falcon_qt202x_set_led(efx,2,tmp);
  #line 553 
  return;
}

#line 555  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon_boards.c"
static int sfe4002_check_hw(struct ef4_nic *efx)
{
  #line 561 
  unsigned int tmp_0;
  #line 557 
  struct falcon_board *board = falcon_board(efx);
  #line 561 
  if (board->major == 0 && board->minor == 0) 
                                              #line 561 
                                              tmp_0 = 4294967263U; else 
                                                                    #line 561 
                                                                    tmp_0 = 4294967295U;
  #line 561 
  unsigned int alarm_mask = tmp_0;
  #line 565 
  return ef4_check_lm87(efx,alarm_mask);
}

#line 568  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon_boards.c"
static int sfe4002_init(struct ef4_nic *efx)
{
  #line 570 
  return ef4_init_lm87(efx,& sfe4002_hwmon_info,(u8 *)(& sfe4002_lm87_regs));
}

#line 577  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon_boards.c"
static u8 sfn4112f_lm87_channel = (unsigned char)3U;
#line 579  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon_boards.c"
static u8 sfn4112f_lm87_regs[33U] = {(unsigned char)43U, (unsigned char)153U, (unsigned char)44U, (unsigned char)124U, (unsigned char)45U, (unsigned char)94U, (unsigned char)46U, (unsigned char)76U, (unsigned char)47U, (unsigned char)212U, (unsigned char)48U, (unsigned char)172U, (unsigned char)51U, (unsigned char)224U, (unsigned char)52U, (unsigned char)172U, (unsigned char)53U, (unsigned char)79U, (unsigned char)54U, (unsigned char)63U, (unsigned char)60U, (unsigned char)169U, (unsigned char)27U, (unsigned char)138U, (unsigned char)57U, (unsigned char)75U, (unsigned char)58U, [28] = (unsigned char)55U, (unsigned char)90U, (unsigned char)56U};
#line 591  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon_boards.c"
static struct i2c_board_info sfn4112f_hwmon_info = {.type = {(char)'l', (char)'m', (char)'8', (char)'7'}, .addr = (unsigned short)46U, .platform_data = (void *)(& sfn4112f_lm87_channel)};
#line 599  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon_boards.c"
static void sfn4112f_init_phy(struct ef4_nic *efx)
{
  #line 601 
  falcon_qt202x_set_led(efx,0,10);
  #line 603 
  falcon_qt202x_set_led(efx,1,9);
  #line 604 
  return;
}

#line 607  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon_boards.c"
static void sfn4112f_set_id_led(struct ef4_nic *efx, enum ef4_led_mode mode)
{
  #line 609 
  int reg;
  #line 611 
  switch ((unsigned int)mode) {
    #line 612 
    case (unsigned int)0: 
                          #line 612 
    ;
    #line 613 
    reg = 4;
    #line 614 
    break;
    #line 615 
    case (unsigned int)1: 
                          #line 615 
    ;
    #line 616 
    reg = 5;
    #line 617 
    break;
    #line 618 
    default: 
             #line 618 
    ;
    #line 619 
    reg = 9;
    #line 620 
    break;
  }
  #line 623 
  falcon_qt202x_set_led(efx,1,reg);
  #line 624 
  return;
}

#line 626  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon_boards.c"
static int sfn4112f_check_hw(struct ef4_nic *efx)
{
  #line 629 
  return ef4_check_lm87(efx,4294967223U);
}

#line 632  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon_boards.c"
static int sfn4112f_init(struct ef4_nic *efx)
{
  #line 634 
  return ef4_init_lm87(efx,& sfn4112f_hwmon_info,(u8 *)(& sfn4112f_lm87_regs));
}

#line 641  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon_boards.c"
static u8 sfe4003_lm87_channel = (unsigned char)3U;
#line 643  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon_boards.c"
static u8 sfe4003_lm87_regs[25U] = {(unsigned char)43U, (unsigned char)127U, (unsigned char)44U, (unsigned char)103U, (unsigned char)45U, (unsigned char)94U, (unsigned char)46U, (unsigned char)76U, (unsigned char)47U, (unsigned char)212U, (unsigned char)48U, (unsigned char)172U, (unsigned char)51U, (unsigned char)224U, (unsigned char)52U, (unsigned char)172U, (unsigned char)53U, (unsigned char)79U, (unsigned char)54U, (unsigned char)63U, (unsigned char)57U, (unsigned char)85U, (unsigned char)58U};
#line 653  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon_boards.c"
static struct i2c_board_info sfe4003_hwmon_info = {.type = {(char)'l', (char)'m', (char)'8', (char)'7'}, .addr = (unsigned short)46U, .platform_data = (void *)(& sfe4003_lm87_channel)};
#line 663  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon_boards.c"
static void sfe4003_set_id_led(struct ef4_nic *efx, enum ef4_led_mode mode)
{
  #line 665 
  struct falcon_board *board = falcon_board(efx);
  #line 668 
  if (board->minor <= 2 && board->major == 0) 
                                              #line 669 
                                              return;
  #line 671 
  falcon_txc_set_gpio_val(efx,11,mode == (unsigned int)EF4_LED_ON);
  #line 674 
  return;
}

#line 676  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon_boards.c"
static void sfe4003_init_phy(struct ef4_nic *efx)
{
  #line 678 
  struct falcon_board *board = falcon_board(efx);
  #line 681 
  if (board->minor <= 2 && board->major == 0) 
                                              #line 682 
                                              return;
  #line 684 
  falcon_txc_set_gpio_dir(efx,11,1);
  #line 685 
  falcon_txc_set_gpio_val(efx,11,0);
  #line 686 
  return;
}

#line 688  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon_boards.c"
static int sfe4003_check_hw(struct ef4_nic *efx)
{
  #line 694 
  unsigned int tmp_0;
  #line 690 
  struct falcon_board *board = falcon_board(efx);
  #line 694 
  if (board->major == 0 && board->minor <= 2) 
                                              #line 694 
                                              tmp_0 = 4294967263U; else 
                                                                    #line 694 
                                                                    tmp_0 = 4294967295U;
  #line 694 
  unsigned int alarm_mask = tmp_0;
  #line 698 
  return ef4_check_lm87(efx,alarm_mask);
}

#line 701  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon_boards.c"
static int sfe4003_init(struct ef4_nic *efx)
{
  #line 703 
  return ef4_init_lm87(efx,& sfe4003_hwmon_info,(u8 *)(& sfe4003_lm87_regs));
}

#line 706  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon_boards.c"
static struct falcon_board_type board_types[4U] = {{.id = (unsigned char)1U, .init = & sfe4001_init, .init_phy = & ef4_port_dummy_op_void, .fini = & sfe4001_fini, .set_id_led = & tenxpress_set_id_led, .monitor = & sfe4001_check_hw}, {.id = (unsigned char)2U, .init = & sfe4002_init, .init_phy = & sfe4002_init_phy, .fini = & ef4_fini_lm87, .set_id_led = & sfe4002_set_id_led, .monitor = & sfe4002_check_hw}, {.id = (unsigned char)3U, .init = & sfe4003_init, .init_phy = & sfe4003_init_phy, .fini = & ef4_fini_lm87, .set_id_led = & sfe4003_set_id_led, .monitor = & sfe4003_check_hw}, {.id = (unsigned char)82U, .init = & sfn4112f_init, .init_phy = & sfn4112f_init_phy, .fini = & ef4_fini_lm87, .set_id_led = & sfn4112f_set_id_led, .monitor = & sfn4112f_check_hw}};
#line 741  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/falcon_boards.c"
int falcon_probe_board(struct ef4_nic *efx, u16 revision_info)
{
  #line 745 
  int i;
  #line 743 
  struct falcon_board *board = falcon_board(efx);
  #line 744 
  u8 type_id = (unsigned char)((int)revision_info >> 8);
  #line 747 
  board->major = ((int)revision_info >> 4) & 15;
  #line 748 
  board->minor = (int)revision_info & 15;
  #line 750 
  i = 0;
  #line 750 
  while ((unsigned int)i <= 3U) {
    #line 751 
    if ((int)board_types[i].id == (int)type_id) 
                                                #line 752 
                                                board->type = & board_types[i];
    #line 750 
    i ++;
  }
  #line 754 
  if (board->type != (struct falcon_board_type *)0) 
                                                    #line 755 
                                                    return 0;
  else {
    #line 757 
    if ((efx->msg_enable & 2U) != 0U) 
                                      #line 757 
                                      netdev_err(efx->net_dev,(char *)"unknown board type %d\n",(int)type_id);
    #line 759 
    return -19;
  }
}

#line 93  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/falcon_boards.i.aux"
struct device_attribute *emg_alias_dev_attr_phy_flash_cfg = & dev_attr_phy_flash_cfg;
#line 113  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/falcon_boards.i.aux"
long emg_wrapper_set_phy_flash_cfg(struct device *arg0, struct device_attribute *arg1, char *arg2, unsigned long arg3)
{
  #line 114 
  return set_phy_flash_cfg(arg0,arg1,arg2,arg3);
}

#line 118  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/falcon_boards.i.aux"
long emg_wrapper_show_phy_flash_cfg(struct device *arg0, struct device_attribute *arg1, char *arg2)
{
  #line 119 
  return show_phy_flash_cfg(arg0,arg1,arg2);
}

#line 229  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/falcon_boards.i.aux"
static long PTR_ERR(void *ptr)
{
  #line 232 
  return ldv_ptr_err(ptr);
}

#line 236  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/falcon_boards.i.aux"
static bool IS_ERR(void *ptr)
{
  #line 239 
  return ldv_is_err(ptr);
}

#line 832  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/falcon_boards.i.aux"
static void cif_device_remove_file_0(struct device *dev, struct device_attribute *attr)
{
  #line 836 
  emg_device_remove_file(dev,attr);
  #line 837 
  return;
}

#line 840  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/falcon_boards.i.aux"
static int cif_device_create_file_0(struct device *device, struct device_attribute *entry)
{
  #line 844 
  return emg_device_create_file(device,entry);
}

#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/find.h"
#line 116  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/nic.i.aux"
static unsigned long cif_find_next_bit(unsigned long *addr, unsigned long size, unsigned long offset);
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/find.h"
#line 158  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/nic.i.aux"
static unsigned long cif_find_first_bit(unsigned long *addr, unsigned long size);
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/byteorder/little_endian.h"
__inline static __u64 __le64_to_cpup(__le64 *p)
{
  #line 50 
  return *p;
}

#line 391  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_irqrestore_1(spinlock_t *lock, unsigned long flags)
{
  {
    #line 393 
    unsigned long __dummy;
    #line 393 
    unsigned long __dummy2;
    }
  #line 393 
  _raw_spin_unlock_irqrestore(& lock->__anonCompField_spinlock_25.rlock,flags);
  #line 395 
  return;
}

#line 395 
#line 826  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/nic.i.aux"
static void cif_spin_unlock_irqrestore_biu_lock_of_ef4_nic_1(spinlock_t *lock, unsigned long flags);
#line 35 
#line 817 
static void cif___ldv_spin_lock_biu_lock_of_ef4_nic_1(spinlock_t *lock);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 21 
unsigned long ldv_find_first_bit(unsigned long *addr, unsigned long size);
#line 22 
#line 22 
unsigned long ldv_find_next_bit(unsigned long *addr, unsigned long size, unsigned long offset);
#line 96  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/io.h"
__inline static u64 __readq(void *addr)
{
  #line 96 
  u64 ret;
  #line 97 
  ldv_inline_asm();
  #line 96 
  return ret;
}

#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 835  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/nic.i.aux"
static int cif_request_irq(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char *name, void *dev);
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 843  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/nic.i.aux"
static void *cif_free_irq(unsigned int ldv_func_arg1, void *ldv_func_arg2);
#line 442  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
#line 442 
void *dma_alloc_attrs(struct device *, size_t, dma_addr_t *, gfp_t, unsigned long);
#line 444 
#line 444 
void dma_free_attrs(struct device *, size_t, void *, dma_addr_t, unsigned long);
#line 641  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void *dma_alloc_coherent(struct device *dev, size_t size, dma_addr_t *dma_handle, gfp_t gfp)
{
  #line 645 
  return dma_alloc_attrs(dev,size,dma_handle,gfp,
                      (unsigned long)(gfp >> 5) & 256UL);
}

#line 649  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_free_coherent(struct device *dev, size_t size, void *cpu_addr, dma_addr_t dma_handle)
{
  #line 652 
  dma_free_attrs(dev,size,cpu_addr,dma_handle,0UL);
  #line 653 
  return;
}

#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpu_rmap.h"
#line 35 
struct cpu_rmap *alloc_cpu_rmap(unsigned int, gfp_t);
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpu_rmap.h"
__inline static struct cpu_rmap *alloc_irq_cpu_rmap(unsigned int size)
{
  #line 60 
  return alloc_cpu_rmap(size,3264U);
}

#line 62 
#line 62 
void free_irq_cpu_rmap(struct cpu_rmap *);
#line 64 
#line 64 
int irq_cpu_rmap_add(struct cpu_rmap *, int);
#line 497  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/nic.h"
#line 361  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/nic.c"
size_t ef4_nic_get_regs_len(struct ef4_nic *efx);
#line 498  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/nic.h"
#line 384  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/nic.c"
void ef4_nic_get_regs(struct ef4_nic *efx, void *buf);
#line 505  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/nic.h"
#line 515  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/nic.c"
void ef4_nic_fix_nodesc_drop_stat(struct ef4_nic *efx, u64 *rx_nodesc_drops);
#line 145  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/io.h"
__inline static void ef4_reado_1(struct ef4_nic *efx, ef4_oword_t *value, unsigned int reg)
{
  #line 148 
  unsigned long flags;
  #line 150 
  cif___ldv_spin_lock_biu_lock_of_ef4_nic_1(& efx->biu_lock);
  #line 151 
  value->u32[0] = _ef4_readd(efx,reg);
  #line 152 
  value->u32[1] = _ef4_readd(efx,reg + 4U);
  #line 153 
  value->u32[2] = _ef4_readd(efx,reg + 8U);
  #line 154 
  value->u32[3] = _ef4_readd(efx,reg + 12U);
  #line 155 
  cif_spin_unlock_irqrestore_biu_lock_of_ef4_nic_1(& efx->biu_lock,flags);
  #line 159 
  return;
}

#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/io.h"
__inline static void ef4_sram_readq(struct ef4_nic *efx, void *membase, ef4_qword_t *value, unsigned int index)
{
  #line 167 
  unsigned long flags;
  #line 166 
  unsigned int addr = index * 8U;
  #line 169 
  cif___ldv_spin_lock_biu_lock_of_ef4_nic_1(& efx->biu_lock);
  #line 171 
  value->u64[0] = __readq(membase + (unsigned long)addr);
  #line 176 
  cif_spin_unlock_irqrestore_biu_lock_of_ef4_nic_1(& efx->biu_lock,flags);
  #line 180 
  return;
}

#line 202  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/io.h"
__inline static void ef4_reado_table_0(struct ef4_nic *efx, ef4_oword_t *value, unsigned int reg, unsigned int index)
{
  #line 205 
  ef4_reado_1(efx,value,index * 16U + reg);
  #line 206 
  return;
}

#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/nic.c"
int ef4_nic_alloc_buffer(struct ef4_nic *efx, struct ef4_buffer *buffer, unsigned int len, gfp_t gfp_flags)
{
  #line 33 
  buffer->addr = dma_alloc_coherent(& (efx->pci_dev)->dev,(unsigned long)len,& buffer->dma_addr,gfp_flags);
  #line 35 
  if (buffer->addr == (void *)0) 
                                 #line 36 
                                 return -12;
  #line 37 
  buffer->len = len;
  #line 38 
  return 0;
}

#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/nic.c"
void ef4_nic_free_buffer(struct ef4_nic *efx, struct ef4_buffer *buffer)
{
  #line 43 
  if (buffer->addr != (void *)0) {
    #line 44 
    dma_free_coherent(& (efx->pci_dev)->dev,(unsigned long)buffer->len,buffer->addr,buffer->dma_addr);
    #line 46 
    buffer->addr = (void *)0;
  }
  #line 48 
  return;
}

#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/nic.c"
bool ef4_nic_event_present(struct ef4_channel *channel)
{
  #line 55 
  return (_Bool)(ef4_event_present(ef4_event(channel,channel->eventq_read_ptr)) != 0);
}

#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/nic.c"
void ef4_nic_event_test_start(struct ef4_channel *channel)
{
  #line 60 
  channel->event_test_cpu = -1;
  #line 61 
  ldv_inline_asm();
  #line 62 
  (*(((channel->efx)->type)->ev_test_generate))(channel);
  #line 63 
  return;
}

#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/nic.c"
int ef4_nic_irq_test_start(struct ef4_nic *efx)
{
  #line 67 
  efx->last_irq_cpu = -1;
  #line 68 
  ldv_inline_asm();
  #line 69 
  return (*((efx->type)->irq_test_generate))(efx);
}

#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/nic.c"
int ef4_nic_init_interrupt(struct ef4_nic *efx)
{
  #line 77 
  struct ef4_channel *channel;
  #line 78 
  unsigned int n_irqs;
  #line 79 
  int rc;
  #line 81 
  if (efx->interrupt_mode > (unsigned int)EF4_INT_MODE_MSI) {
    #line 82 
    rc = cif_request_irq((unsigned int)efx->legacy_irq,(efx->type)->irq_handle_legacy,128UL,(char *)(& efx->name),(void *)efx);
    #line 85 
    if (rc != 0) {
      #line 86 
      if ((efx->msg_enable & 1U) != 0U) 
                                        #line 86 
                                        netdev_err(efx->net_dev,(char *)"failed to hook legacy IRQ %d\n",(efx->pci_dev)->irq);
      #line 89 
      goto fail1;
    }
    #line 91 
    return 0;
  }
  #line 95 
  if (efx->interrupt_mode == (unsigned int)EF4_INT_MODE_MSIX) {
    #line 96 
    (efx->net_dev)->rx_cpu_rmap = alloc_irq_cpu_rmap(efx->n_rx_channels);
    #line 98 
    if ((efx->net_dev)->rx_cpu_rmap == (struct cpu_rmap *)0) {
      #line 99 
      rc = -12;
      #line 100 
      goto fail1;
    }
  }
  #line 106 
  n_irqs = 0U;
  #line 107 
  channel = efx->channel[0];
  #line 107 
  while (channel != (struct ef4_channel *)0) {
    #line 108 
    rc = cif_request_irq((unsigned int)channel->irq,(efx->type)->irq_handle_msi,256UL,(char *)(& efx->msi_context[channel->channel].name),(void *)(& efx->msi_context[channel->channel]));
    #line 112 
    if (rc != 0) {
      #line 113 
      if ((efx->msg_enable & 1U) != 0U) 
                                        #line 113 
                                        netdev_err(efx->net_dev,(char *)"failed to hook IRQ %d\n",channel->irq);
      #line 115 
      goto fail2;
    }
    #line 117 
    n_irqs ++;
    #line 120 
    if (efx->interrupt_mode == (unsigned int)EF4_INT_MODE_MSIX && (unsigned int)channel->channel < efx->n_rx_channels) {
      #line 122 
      rc = irq_cpu_rmap_add((efx->net_dev)->rx_cpu_rmap,channel->irq);
      #line 124 
      if (rc != 0) 
                   #line 125 
                   goto fail2;
    }
    #line 107 
    if ((unsigned int)(channel->channel + 1) < efx->n_channels) 
                                                                #line 107 
                                                                channel = efx->channel[channel->channel + 1]; else 
                                                                    #line 107 
                                                                    channel = (struct ef4_channel *)0;
  }
  #line 130 
  return 0;
  #line 132 
  fail2: 
         #line 132 
  ;
  #line 134 
  free_irq_cpu_rmap((efx->net_dev)->rx_cpu_rmap);
  #line 135 
  (efx->net_dev)->rx_cpu_rmap = (struct cpu_rmap *)0;
  #line 137 
  channel = efx->channel[0];
  #line 137 
  while (channel != (struct ef4_channel *)0) {
    {
      #line 138 
      unsigned int tmp;
      #line 138 
      tmp = n_irqs;
      #line 138 
      n_irqs --;
      #line 138 
      ;
      #line 138 
      if (tmp == 0U) 
                     #line 139 
                     break;
      #line 140 
      cif_free_irq((unsigned int)channel->irq,(void *)(& efx->msi_context[channel->channel]));
    }
    #line 137 
    if ((unsigned int)(channel->channel + 1) < efx->n_channels) 
                                                                #line 137 
                                                                channel = efx->channel[channel->channel + 1]; else 
                                                                    #line 137 
                                                                    channel = (struct ef4_channel *)0;
  }
  #line 142 
  fail1: 
         #line 142 
  ;
  #line 143 
  return rc;
}

#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/nic.c"
void ef4_nic_fini_interrupt(struct ef4_nic *efx)
{
  #line 148 
  struct ef4_channel *channel;
  #line 151 
  free_irq_cpu_rmap((efx->net_dev)->rx_cpu_rmap);
  #line 152 
  (efx->net_dev)->rx_cpu_rmap = (struct cpu_rmap *)0;
  #line 155 
  if (efx->interrupt_mode <= (unsigned int)EF4_INT_MODE_MSI) {
    #line 157 
    channel = efx->channel[0];
    #line 157 
    while (channel != (struct ef4_channel *)0) {
      #line 158 
      cif_free_irq((unsigned int)channel->irq,(void *)(& efx->msi_context[channel->channel]));
      #line 157 
      if ((unsigned int)(channel->channel + 1) < efx->n_channels) 
                                                                  #line 157 
                                                                  channel = efx->channel[channel->channel + 1]; else 
                                                                    #line 157 
                                                                    channel = (struct ef4_channel *)0;
    }
  }
  else 
       #line 162 
       cif_free_irq((unsigned int)efx->legacy_irq,(void *)efx);
  #line 163 
  return;
}

#line 192  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/nic.c"
static struct ef4_nic_reg ef4_nic_regs[83U] = {{.min_revision = (unsigned int)1U, .max_revision = (unsigned int)3U}, {.offset = (unsigned int)16U, .min_revision = (unsigned int)1U, .max_revision = (unsigned int)3U}, {.offset = (unsigned int)32U, .min_revision = (unsigned int)2U, .max_revision = (unsigned int)3U}, {.offset = (unsigned int)48U, .min_revision = (unsigned int)1U, .max_revision = (unsigned int)3U}, {.offset = (unsigned int)64U, .min_revision = (unsigned int)2U, .max_revision = (unsigned int)3U}, {.offset = (unsigned int)192U, .min_revision = (unsigned int)1U, .max_revision = (unsigned int)3U}, {.offset = (unsigned int)256U, .min_revision = (unsigned int)3U, .max_revision = (unsigned int)3U}, {.offset = (unsigned int)256U, .min_revision = (unsigned int)1U, .max_revision = (unsigned int)2U}, {.offset = (unsigned int)272U, .min_revision = (unsigned int)1U, .max_revision = (unsigned int)2U}, {.offset = (unsigned int)288U, .min_revision = (unsigned int)1U, .max_revision = (unsigned int)2U}, {.offset = (unsigned int)304U, .min_revision = (unsigned int)1U, .max_revision = (unsigned int)2U}, {.offset = (unsigned int)320U, .min_revision = (unsigned int)1U, .max_revision = (unsigned int)2U}, {.offset = (unsigned int)512U, .min_revision = (unsigned int)1U, .max_revision = (unsigned int)2U}, {.offset = (unsigned int)528U, .min_revision = (unsigned int)1U, .max_revision = (unsigned int)2U}, {.offset = (unsigned int)544U, .min_revision = (unsigned int)1U, .max_revision = (unsigned int)2U}, {.offset = (unsigned int)592U, .min_revision = (unsigned int)2U, .max_revision = (unsigned int)3U}, {.offset = (unsigned int)608U, .min_revision = (unsigned int)1U, .max_revision = (unsigned int)3U}, {.offset = (unsigned int)624U, .min_revision = (unsigned int)1U, .max_revision = (unsigned int)3U}, {.offset = (unsigned int)768U, .min_revision = (unsigned int)1U, .max_revision = (unsigned int)3U}, {.offset = (unsigned int)784U, .min_revision = (unsigned int)1U, .max_revision = (unsigned int)3U}, {.offset = (unsigned int)800U, .min_revision = (unsigned int)1U, .max_revision = (unsigned int)2U}, {.offset = (unsigned int)816U, .min_revision = (unsigned int)1U, .max_revision = (unsigned int)2U}, {.offset = (unsigned int)832U, .min_revision = (unsigned int)1U, .max_revision = (unsigned int)2U}, {.offset = (unsigned int)1104U, .min_revision = (unsigned int)1U, .max_revision = (unsigned int)3U}, {.offset = (unsigned int)1120U, .min_revision = (unsigned int)1U, .max_revision = (unsigned int)3U}, {.offset = (unsigned int)1136U, .min_revision = (unsigned int)1U, .max_revision = (unsigned int)3U}, {.offset = (unsigned int)1536U, .min_revision = (unsigned int)1U, .max_revision = (unsigned int)3U}, {.offset = (unsigned int)1552U, .min_revision = (unsigned int)1U, .max_revision = (unsigned int)3U}, {.offset = (unsigned int)1568U, .min_revision = (unsigned int)1U, .max_revision = (unsigned int)3U}, {.offset = (unsigned int)1584U, .min_revision = (unsigned int)1U, .max_revision = (unsigned int)3U}, {.offset = (unsigned int)1632U, .min_revision = (unsigned int)1U, .max_revision = (unsigned int)3U}, {.offset = (unsigned int)1648U, .min_revision = (unsigned int)1U, .max_revision = (unsigned int)3U}, {.offset = (unsigned int)2048U, .min_revision = (unsigned int)1U, .max_revision = (unsigned int)3U}, {.offset = (unsigned int)2064U, .min_revision = (unsigned int)2U, .max_revision = (unsigned int)3U}, {.offset = (unsigned int)2112U, .min_revision = (unsigned int)1U, .max_revision = (unsigned int)3U}, {.offset = (unsigned int)2128U, .min_revision = (unsigned int)1U, .max_revision = (unsigned int)3U}, {.offset = (unsigned int)2144U, .min_revision = (unsigned int)2U, .max_revision = (unsigned int)3U}, {.offset = (unsigned int)2192U, .min_revision = (unsigned int)1U, .max_revision = (unsigned int)1U}, {.offset = (unsigned int)2256U, .min_revision = (unsigned int)3U, .max_revision = (unsigned int)3U}, {.offset = (unsigned int)2272U, .min_revision = (unsigned int)3U, .max_revision = (unsigned int)3U}, {.offset = (unsigned int)2288U, .min_revision = (unsigned int)3U, .max_revision = (unsigned int)3U}, {.offset = (unsigned int)2592U, .min_revision = (unsigned int)1U, .max_revision = (unsigned int)3U}, {.offset = (unsigned int)2608U, .min_revision = (unsigned int)1U, .max_revision = (unsigned int)1U}, {.offset = (unsigned int)2640U, .min_revision = (unsigned int)1U, .max_revision = (unsigned int)3U}, {.offset = (unsigned int)2688U, .min_revision = (unsigned int)1U, .max_revision = (unsigned int)3U}, {.offset = (unsigned int)2704U, .min_revision = (unsigned int)2U, .max_revision = (unsigned int)3U}, {.offset = (unsigned int)2784U, .min_revision = (unsigned int)2U, .max_revision = (unsigned int)2U}, {.offset = (unsigned int)2800U, .min_revision = (unsigned int)2U, .max_revision = (unsigned int)3U}, {.offset = (unsigned int)3072U, .min_revision = (unsigned int)1U, .max_revision = (unsigned int)2U}, {.offset = (unsigned int)3088U, .min_revision = (unsigned int)1U, .max_revision = (unsigned int)2U}, {.offset = (unsigned int)3104U, .min_revision = (unsigned int)1U, .max_revision = (unsigned int)2U}, {.offset = (unsigned int)3120U, .min_revision = (unsigned int)1U, .max_revision = (unsigned int)2U}, {.offset = (unsigned int)3136U, .min_revision = (unsigned int)1U, .max_revision = (unsigned int)2U}, {.offset = (unsigned int)3168U, .min_revision = (unsigned int)1U, .max_revision = (unsigned int)2U}, {.offset = (unsigned int)3200U, .min_revision = (unsigned int)1U, .max_revision = (unsigned int)2U}, {.offset = (unsigned int)3216U, .min_revision = (unsigned int)2U, .max_revision = (unsigned int)2U}, {.offset = (unsigned int)3232U, .min_revision = (unsigned int)1U, .max_revision = (unsigned int)2U}, {.offset = (unsigned int)3248U, .min_revision = (unsigned int)1U, .max_revision = (unsigned int)2U}, {.offset = (unsigned int)3584U, .min_revision = (unsigned int)1U, .max_revision = (unsigned int)2U}, {.offset = (unsigned int)3600U, .min_revision = (unsigned int)1U, .max_revision = (unsigned int)2U}, {.offset = (unsigned int)3648U, .min_revision = (unsigned int)1U, .max_revision = (unsigned int)2U}, {.offset = (unsigned int)3840U, .min_revision = (unsigned int)1U, .max_revision = (unsigned int)2U}, {.offset = (unsigned int)3856U, .min_revision = (unsigned int)1U, .max_revision = (unsigned int)2U}, {.offset = (unsigned int)3872U, .min_revision = (unsigned int)1U, .max_revision = (unsigned int)2U}, {.offset = (unsigned int)3888U, .min_revision = (unsigned int)1U, .max_revision = (unsigned int)2U}, {.offset = (unsigned int)3904U, .min_revision = (unsigned int)1U, .max_revision = (unsigned int)2U}, {.offset = (unsigned int)3920U, .min_revision = (unsigned int)1U, .max_revision = (unsigned int)2U}, {.offset = (unsigned int)3936U, .min_revision = (unsigned int)1U, .max_revision = (unsigned int)2U}, {.offset = (unsigned int)3952U, .min_revision = (unsigned int)1U, .max_revision = (unsigned int)2U}, {.offset = (unsigned int)4352U, .min_revision = (unsigned int)2U, .max_revision = (unsigned int)2U}, {.offset = (unsigned int)4608U, .min_revision = (unsigned int)1U, .max_revision = (unsigned int)2U}, {.offset = (unsigned int)4624U, .min_revision = (unsigned int)1U, .max_revision = (unsigned int)2U}, {.offset = (unsigned int)4640U, .min_revision = (unsigned int)1U, .max_revision = (unsigned int)2U}, {.offset = (unsigned int)4656U, .min_revision = (unsigned int)1U, .max_revision = (unsigned int)2U}, {.offset = (unsigned int)4672U, .min_revision = (unsigned int)1U, .max_revision = (unsigned int)2U}, {.offset = (unsigned int)4688U, .min_revision = (unsigned int)1U, .max_revision = (unsigned int)2U}, {.offset = (unsigned int)4720U, .min_revision = (unsigned int)1U, .max_revision = (unsigned int)2U}, {.offset = (unsigned int)4752U, .min_revision = (unsigned int)1U, .max_revision = (unsigned int)2U}, {.offset = (unsigned int)4816U, .min_revision = (unsigned int)1U, .max_revision = (unsigned int)2U}, {.offset = (unsigned int)4832U, .min_revision = (unsigned int)1U, .max_revision = (unsigned int)2U}, {.offset = (unsigned int)4864U, .min_revision = (unsigned int)1U, .max_revision = (unsigned int)2U}, {.offset = (unsigned int)4880U, .min_revision = (unsigned int)1U, .max_revision = (unsigned int)2U}, {.offset = (unsigned int)4896U, .min_revision = (unsigned int)1U, .max_revision = (unsigned int)2U}};
#line 330  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/nic.c"
static struct ef4_nic_reg_table ef4_nic_reg_tables[22U] = {{.offset = (unsigned int)2816U, .min_revision = (unsigned int)2U, .max_revision = (unsigned int)2U, .step = (unsigned int)16U, .rows = (unsigned int)16U}, {.offset = (unsigned int)4096U, .min_revision = (unsigned int)2U, .max_revision = (unsigned int)2U, .step = (unsigned int)16U, .rows = (unsigned int)16U}, {.offset = (unsigned int)71680U, .min_revision = (unsigned int)1U, .max_revision = (unsigned int)1U, .step = (unsigned int)16U, .rows = (unsigned int)4U}, {.offset = (unsigned int)15990784U, .min_revision = (unsigned int)2U, .max_revision = (unsigned int)2U, .step = (unsigned int)16U, .rows = (unsigned int)4096U}, {.offset = (unsigned int)15990784U, .min_revision = (unsigned int)3U, .max_revision = (unsigned int)3U, .step = (unsigned int)16U, .rows = (unsigned int)1024U}, {.offset = (unsigned int)71936U, .min_revision = (unsigned int)1U, .max_revision = (unsigned int)1U, .step = (unsigned int)16U, .rows = (unsigned int)8U}, {.offset = (unsigned int)16056320U, .min_revision = (unsigned int)2U, .max_revision = (unsigned int)2U, .step = (unsigned int)16U, .rows = (unsigned int)4096U}, {.offset = (unsigned int)16056320U, .min_revision = (unsigned int)3U, .max_revision = (unsigned int)3U, .step = (unsigned int)16U, .rows = (unsigned int)1024U}, {.offset = (unsigned int)72192U, .min_revision = (unsigned int)1U, .max_revision = (unsigned int)1U, .step = (unsigned int)16U, .rows = (unsigned int)4U}, {.offset = (unsigned int)16121856U, .min_revision = (unsigned int)2U, .max_revision = (unsigned int)2U, .step = (unsigned int)16U, .rows = (unsigned int)4096U}, {.offset = (unsigned int)16121856U, .min_revision = (unsigned int)3U, .max_revision = (unsigned int)3U, .step = (unsigned int)16U, .rows = (unsigned int)1024U}, {.offset = (unsigned int)98304U, .min_revision = (unsigned int)1U, .max_revision = (unsigned int)1U, .step = (unsigned int)8U, .rows = (unsigned int)1024U}, {.offset = (unsigned int)8388608U, .min_revision = (unsigned int)2U, .max_revision = (unsigned int)3U, .step = (unsigned int)8U, .rows = (unsigned int)1024U}, {.offset = (unsigned int)15728656U, .min_revision = (unsigned int)3U, .max_revision = (unsigned int)3U, .step = (unsigned int)32U, .rows = (unsigned int)512U}, {.offset = (unsigned int)16187392U, .min_revision = (unsigned int)2U, .max_revision = (unsigned int)2U, .step = (unsigned int)16U, .rows = (unsigned int)4096U}, {.offset = (unsigned int)16187392U, .min_revision = (unsigned int)3U, .max_revision = (unsigned int)3U, .step = (unsigned int)16U, .rows = (unsigned int)1024U}, {.offset = (unsigned int)16252928U, .min_revision = (unsigned int)2U, .max_revision = (unsigned int)2U, .step = (unsigned int)16U, .rows = (unsigned int)4096U}, {.offset = (unsigned int)16252928U, .min_revision = (unsigned int)3U, .max_revision = (unsigned int)3U, .step = (unsigned int)16U, .rows = (unsigned int)1024U}, {.offset = (unsigned int)16449536U, .min_revision = (unsigned int)2U, .max_revision = (unsigned int)3U, .step = (unsigned int)16U, .rows = (unsigned int)128U}, {.offset = (unsigned int)16646144U, .min_revision = (unsigned int)3U, .max_revision = (unsigned int)3U, .step = (unsigned int)16U, .rows = (unsigned int)512U}, {.offset = (unsigned int)16711680U, .min_revision = (unsigned int)3U, .max_revision = (unsigned int)3U, .step = (unsigned int)4U, .rows = (unsigned int)512U}, {.offset = (unsigned int)15728640U, .min_revision = (unsigned int)2U, .max_revision = (unsigned int)3U, .step = (unsigned int)32U, .rows = (unsigned int)8192U}};
#line 361  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/nic.c"
size_t ef4_nic_get_regs_len(struct ef4_nic *efx)
{
  #line 363 
  struct ef4_nic_reg *reg;
  #line 364 
  struct ef4_nic_reg_table *table;
  #line 365 
  size_t len = 0UL;
  #line 367 
  reg = (struct ef4_nic_reg *)(& ef4_nic_regs);
  #line 367 
  while (reg < (struct ef4_nic_reg *)(& ef4_nic_regs) + 83UL) {
    #line 370 
    if ((efx->type)->revision >= (int)reg->min_revision && (efx->type)->revision <= (int)reg->max_revision) 
      #line 372 
      len += 16UL;
    #line 368 
    reg ++;
  }
  #line 374 
  table = (struct ef4_nic_reg_table *)(& ef4_nic_reg_tables);
  #line 374 
  while (table < (struct ef4_nic_reg_table *)(& ef4_nic_reg_tables) + 22UL) {
    #line 377 
    if ((efx->type)->revision >= (int)table->min_revision && (efx->type)->revision <= (int)table->max_revision) {
      #line 379 
      unsigned long __UNIQUE_ID___x541;
      #line 379 
      unsigned long tmp;
      {
        #line 379 
        __UNIQUE_ID___x541 = (unsigned long)table->step;
        #line 379 
        unsigned long __UNIQUE_ID___y542 = 16UL;
        #line 379 
        if (__UNIQUE_ID___x541 < __UNIQUE_ID___y542) 
                                                     #line 379 
                                                     tmp = __UNIQUE_ID___x541; else 
                                                                    #line 379 
                                                                    tmp = __UNIQUE_ID___y542;
        }
      #line 379 
      len = (unsigned long)table->rows * tmp + len;
    }
    #line 375 
    table ++;
  }
  #line 381 
  return len;
}

#line 384  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/nic.c"
void ef4_nic_get_regs(struct ef4_nic *efx, void *buf)
{
  #line 386 
  struct ef4_nic_reg *reg;
  #line 387 
  struct ef4_nic_reg_table *table;
  #line 389 
  reg = (struct ef4_nic_reg *)(& ef4_nic_regs);
  #line 389 
  while (reg < (struct ef4_nic_reg *)(& ef4_nic_regs) + 83UL) {
    #line 392 
    if ((efx->type)->revision >= (int)reg->min_revision && (efx->type)->revision <= (int)reg->max_revision) {
      #line 394 
      ef4_reado_1(efx,(ef4_oword_t *)buf,(unsigned int)reg->offset);
      #line 395 
      buf += 16UL;
    }
    #line 390 
    reg ++;
  }
  #line 399 
  table = (struct ef4_nic_reg_table *)(& ef4_nic_reg_tables);
  #line 399 
  while (table < (struct ef4_nic_reg_table *)(& ef4_nic_reg_tables) + 22UL) {
    {
      #line 408 
      unsigned long __UNIQUE_ID___x543;
      #line 408 
      unsigned long tmp;
      #line 402 
      size_t size;
      #line 402 
      size_t i;
      #line 404 
      if ((efx->type)->revision < (int)table->min_revision || (efx->type)->revision > (int)table->max_revision) 
        #line 406 
        goto __Cont;
      {
        #line 408 
        __UNIQUE_ID___x543 = (unsigned long)table->step;
        #line 408 
        unsigned long __UNIQUE_ID___y544 = 16UL;
        #line 408 
        if (__UNIQUE_ID___x543 < __UNIQUE_ID___y544) 
                                                     #line 408 
                                                     tmp = __UNIQUE_ID___x543; else 
                                                                    #line 408 
                                                                    tmp = __UNIQUE_ID___y544;
        }
      #line 408 
      size = tmp;
      #line 410 
      i = 0UL;
      #line 410 
      while ((unsigned long)table->rows > i) {
        #line 411 
        switch ((int)table->step) {
          #line 412 
          case 4: 
                  #line 412 
          ;
          #line 413 
          ef4_readd(efx,(ef4_dword_t *)buf,(unsigned int)table->offset + (unsigned int)i * 4U);
          #line 414 
          break;
          #line 415 
          case 8: 
                  #line 415 
          ;
          #line 416 
          ef4_sram_readq(efx,efx->membase + (unsigned long)table->offset,(ef4_qword_t *)buf,(unsigned int)i);
          #line 419 
          break;
          #line 420 
          case 16: 
                   #line 420 
          ;
          #line 421 
          ef4_reado_table_0(efx,(ef4_oword_t *)buf,(unsigned int)table->offset,(unsigned int)i);
          #line 422 
          break;
          #line 423 
          case 32: 
                   #line 423 
          ;
          #line 424 
          ef4_reado_table_0(efx,(ef4_oword_t *)buf,(unsigned int)table->offset,(unsigned int)i * 2U);
          #line 425 
          break;
          #line 426 
          default: 
                   #line 426 
          ;
          {
            #line 427 
            int __ret_warn_on = 1;
            #line 427 
            if ((long)(__ret_warn_on != 0) != 0L) {
              #line 428 
              ldv_inline_asm();
              #line 429 
              ldv_inline_asm();
            }
            #line 427 
            long tmp_2 = (long)(__ret_warn_on != 0);
          }
          #line 428 
          return;
        }
        #line 430 
        buf += size;
        #line 410 
        i ++;
      }
    }
    #line 399 
    __Cont: 
            #line 400 
    table ++;
  }
  #line 433 
  return;
}

#line 446  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/nic.c"
size_t ef4_nic_describe_stats(struct ef4_hw_stat_desc *desc, size_t count, unsigned long *mask, u8 *names)
{
  #line 450 
  size_t index;
  #line 449 
  size_t visible = 0UL;
  #line 452 
  index = cif_find_first_bit(mask,count);
  #line 452 
  while (index < count) {
    #line 453 
    if ((desc + index)->name != (char *)0) {
      #line 454 
      if (names != (u8 *)0U) {
        #line 455 
        strlcpy((char *)names,(desc + index)->name,32UL);
        #line 457 
        names += 32U;
      }
      #line 459 
      visible ++;
    }
    #line 452 
    index = cif_find_next_bit(mask,count,index + 1UL);
  }
  #line 463 
  return visible;
}

#line 480  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/nic.c"
void ef4_nic_update_stats(struct ef4_hw_stat_desc *desc, size_t count, unsigned long *mask, u64 *stats, void *dma_buf, bool accumulate)
{
  #line 484 
  size_t index;
  #line 486 
  index = cif_find_first_bit(mask,count);
  #line 486 
  while (index < count) {
    #line 487 
    if ((unsigned int)(desc + index)->dma_width != 0U) {
      #line 489 
      u64 val;
      #line 488 
      void *addr = dma_buf + (unsigned long)(desc + index)->offset;
      #line 491 
      switch ((int)(desc + index)->dma_width) {
        #line 492 
        case 16: 
                 #line 492 
        ;
        #line 493 
        val = (unsigned long long)__le16_to_cpup((__le16 *)addr);
        #line 494 
        break;
        #line 495 
        case 32: 
                 #line 495 
        ;
        #line 496 
        val = (unsigned long long)__le32_to_cpup((__le32 *)addr);
        #line 497 
        break;
        #line 498 
        case 64: 
                 #line 498 
        ;
        #line 499 
        val = __le64_to_cpup((__le64 *)addr);
        #line 500 
        break;
        #line 501 
        default: 
                 #line 501 
        ;
        {
          #line 502 
          int __ret_warn_on = 1;
          #line 502 
          if ((long)(__ret_warn_on != 0) != 0L) {
            #line 503 
            ldv_inline_asm();
            #line 504 
            ldv_inline_asm();
          }
          #line 502 
          long tmp_2 = (long)(__ret_warn_on != 0);
        }
        #line 503 
        val = 0ULL;
        #line 504 
        break;
      }
      #line 507 
      if ((int)accumulate != 0) 
                                #line 508 
                                *(stats + index) += val; else 
                                                              #line 510 
                                                              *(stats + index) = val;
    }
    #line 486 
    index = cif_find_next_bit(mask,count,index + 1UL);
  }
  #line 512 
  return;
}

#line 515  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/nic.c"
void ef4_nic_fix_nodesc_drop_stat(struct ef4_nic *efx, u64 *rx_nodesc_drops)
{
  #line 518 
  if (((efx->net_dev)->flags & 1U) == 0U || ! efx->rx_nodesc_drops_prev_state) 
    #line 519 
    efx->rx_nodesc_drops_while_down += *rx_nodesc_drops - efx->rx_nodesc_drops_total;
  #line 521 
  efx->rx_nodesc_drops_total = *rx_nodesc_drops;
  #line 522 
  efx->rx_nodesc_drops_prev_state = (_Bool)(((efx->net_dev)->flags & 1U) != 0U);
  #line 523 
  *rx_nodesc_drops -= efx->rx_nodesc_drops_while_down;
  #line 524 
  return;
}

#line 98  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/nic.i.aux"
#line 98 
void *emg_free_irq(unsigned int arg0, void *arg1);
#line 104 
#line 104 
int emg_request_irq(unsigned int arg0, enum irqreturn (*arg1)(int , void *), unsigned long arg2, char *arg3, void *arg4);
#line 116  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/nic.i.aux"
static unsigned long cif_find_next_bit(unsigned long *addr, unsigned long size, unsigned long offset)
{
  #line 119 
  return ldv_find_next_bit(addr,size,offset);
}

#line 158  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/nic.i.aux"
static unsigned long cif_find_first_bit(unsigned long *addr, unsigned long size)
{
  #line 161 
  return ldv_find_first_bit(addr,size);
}

#line 817  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/nic.i.aux"
static void cif___ldv_spin_lock_biu_lock_of_ef4_nic_1(spinlock_t *lock)
{
  #line 820 
  ldv_spin_model_lock((char *)"biu_lock_of_ef4_nic");
  #line 822 
  __ldv_spin_lock(lock);
  #line 823 
  return;
}

#line 826  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/nic.i.aux"
static void cif_spin_unlock_irqrestore_biu_lock_of_ef4_nic_1(spinlock_t *lock, unsigned long flags)
{
  #line 829 
  ldv_spin_model_unlock((char *)"biu_lock_of_ef4_nic");
  #line 831 
  spin_unlock_irqrestore_1(lock,flags);
  #line 832 
  return;
}

#line 835  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/nic.i.aux"
static int cif_request_irq(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char *name, void *dev)
{
  #line 839 
  return emg_request_irq(irq,handler,flags,name,dev);
}

#line 843  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/nic.i.aux"
static void *cif_free_irq(unsigned int ldv_func_arg1, void *ldv_func_arg2)
{
  #line 847 
  return emg_free_irq(ldv_func_arg1,ldv_func_arg2);
}

#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 123  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/tx.i.aux"
static void cif_set_bit_2(long nr, unsigned long *addr);
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 130  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/tx.i.aux"
static void cif_clear_bit_2(long nr, unsigned long *addr);
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/page_64.h"
#line 15 
extern unsigned long vmalloc_base;
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cpufeature.h"
__inline static bool _static_cpu_has(u16 bit)
{
  #line 177 
  ldv_inline_asm();
  #line 178 
  ldv_inline_asm();
  #line 211 
  t_yes: 
         #line 211 
  ;
  #line 212 
  return (_Bool)1;
  #line 213 
  t_no: 
        #line 213 
  ;
  #line 214 
  return (_Bool)0;
}

#line 1680  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 1680 
char *dev_driver_string(struct device *);
#line 607  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 475  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/tx.i.aux"
static void *kcalloc_4(size_t n, size_t size, gfp_t flags);
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static bool is_vmalloc_addr(void *x)
{
  #line 633 
  int tmp_1;
  #line 631 
  unsigned long addr = (unsigned long)x;
  #line 633 
  if (addr >= vmalloc_base) {
    #line 633 
    unsigned long tmp_0;
    #line 633 
    if ((int)_static_cpu_has((unsigned short)528) != 0) 
                                                        #line 633 
                                                        tmp_0 = 14073748835532800UL; else 
                                                                    #line 633 
                                                                    tmp_0 = 35184372088832UL;
    #line 633 
    ;
    #line 633 
    if ((tmp_0 + vmalloc_base) + 18446744073709551615UL > addr) 
                                                                #line 633 
                                                                tmp_1 = 1; else 
                                                                    #line 633 
                                                                    tmp_1 = 0;
  }
  else 
       #line 633 
       tmp_1 = 0;
  #line 633 
  return (_Bool)(tmp_1 != 0);
}

#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-debug.h"
#line 21 
void debug_dma_map_single(struct device *, void *, unsigned long);
#line 580  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static dma_addr_t dma_map_single_attrs(struct device *dev, void *ptr, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 584 
  int __ret_warn_once;
  {
    #line 584 
    bool __warned;
    #line 584 
    __ret_warn_once = (int)is_vmalloc_addr(ptr) != 0;
    #line 584 
    if ((long)(__ret_warn_once != 0) != 0L && (long)(! __warned) != 0L) {
      #line 584 
      __warned = (_Bool)1;
      {
        #line 584 
        int __ret_warn_on = 1;
        #line 584 
        if ((long)(__ret_warn_on != 0) != 0L) {
          #line 584 
          __warn_printk((char *)"%s %s: ",dev_driver_string(dev),dev_name(dev));
          #line 585 
          ldv_inline_asm();
          #line 586 
          ldv_inline_asm();
        }
        #line 584 
        long tmp_2 = (long)(__ret_warn_on != 0);
      }
    }
    }
  #line 584 
  if ((long)((long)(__ret_warn_once != 0)) != 0L) 
                                                  #line 586 
                                                  return 18446744073709551615ULL;
  #line 587 
  debug_dma_map_single(dev,ptr,size);
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  return dma_map_page_attrs(dev,
                           (struct page *)((__phys_addr((unsigned long)ptr) >> 12) + vmemmap_base),
                           (unsigned long)ptr & 4095UL,size,dir,attrs);
}

#line 592  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_unmap_single_attrs(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 595 
  dma_unmap_page_attrs(dev,addr,size,dir,attrs);
  #line 596 
  return;
}

#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned int skb_frag_size(skb_frag_t *frag)
{
  #line 327 
  return frag->bv_len;
}

#line 2070  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned int skb_headlen(struct sk_buff *skb)
{
  #line 2072 
  return skb->len - skb->data_len;
}

#line 2896  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned int skb_frag_off(skb_frag_t *frag)
{
  #line 2898 
  return frag->bv_offset;
}

#line 2938  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static struct page *skb_frag_page(skb_frag_t *frag)
{
  #line 2940 
  return frag->bv_page;
}

#line 3067  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static dma_addr_t skb_frag_dma_map(struct device *dev, skb_frag_t *frag, size_t offset, size_t size, enum dma_data_direction dir)
{
  #line 3072 
  ;
  #line 3072 
  ;
  #line 3072 
  ;
  #line 3072 
  ;
  #line 3072 
  return dma_map_page_attrs(dev,skb_frag_page(frag),
                           (unsigned long)skb_frag_off(frag) + offset,size,
                           dir,0UL);
}

#line 3507 
#line 3507 
int skb_copy_bits(struct sk_buff *, int, void *, int);
#line 4277  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static u16 skb_get_queue_mapping(struct sk_buff *skb)
{
  #line 4279 
  return skb->queue_mapping;
}

#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
__inline static void dql_queued(struct dql *dql, unsigned int count)
{
  #line 75 
  if ((long)(count > 268435455U) != 0L) {
    #line 76 
    ldv_inline_asm();
    #line 77 
    ldv_inline_asm();
    #line 78 
    ldv_inline_asm();
    #line 75 
    ;
  }
  #line 77 
  dql->last_obj_cnt = count;
  #line 78 
  ldv_inline_asm();
  #line 86 
  dql->num_queued += count;
  #line 87 
  return;
}

#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
__inline static int dql_avail_0(struct dql *dql)
{
  #line 93 
  union __anonunion___u_12844 __u;
  #line 93 
  union __anonunion___u_12846 __u_0;
  #line 92 
  unsigned int tmp;
  #line 92 
  __read_once_size((void *)(& dql->adj_limit),(void *)(& __u.__c),4);
  #line 92 
  tmp = __u.__val;
  #line 92 
  __read_once_size((void *)(& dql->num_queued),(void *)(& __u_0.__c),4);
  #line 92 
  return (int)(tmp - (__u_0.__val));
}

#line 99 
#line 99 
void dql_reset(struct dql *);
#line 3104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_start_queue(struct netdev_queue *dev_queue)
{
  #line 3106 
  cif_clear_bit_2(0L,& dev_queue->state);
  #line 3107 
  return;
}

#line 3154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_stop_queue_0(struct netdev_queue *dev_queue)
{
  #line 3156 
  cif_set_bit_2(0L,& dev_queue->state);
  #line 3157 
  return;
}

#line 3174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netif_tx_queue_stopped(struct netdev_queue *dev_queue)
{
  #line 3176 
  return test_bit(0L,& dev_queue->state);
}

#line 3190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netif_xmit_stopped(struct netdev_queue *dev_queue)
{
  #line 3192 
  return (_Bool)((dev_queue->state & 3UL) != 0UL);
}

#line 3235  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netdev_tx_sent_queue(struct netdev_queue *dev_queue, unsigned int bytes)
{
  #line 3239 
  dql_queued(& dev_queue->dql,bytes);
  #line 3241 
  if ((long)(dql_avail_0(& dev_queue->dql) >= 0) != 0L) 
                                                        #line 3242 
                                                        return;
  #line 3244 
  cif_set_bit_2(1L,& dev_queue->state);
  #line 3245 
  ldv_inline_asm();
  #line 3254 
  if ((long)(dql_avail_0(& dev_queue->dql) >= 0) != 0L) 
                                                        #line 3255 
                                                        cif_clear_bit_2(1L,& dev_queue->state);
  #line 3256 
  return;
}

#line 3341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netdev_tx_reset_queue(struct netdev_queue *q)
{
  #line 3344 
  cif_clear_bit_2(1L,& q->state);
  #line 3345 
  dql_reset(& q->dql);
  #line 3346 
  return;
}

#line 3617 
#line 3617 
void __dev_kfree_skb_any(struct sk_buff *, enum skb_free_reason);
#line 3648  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void dev_kfree_skb_any(struct sk_buff *skb)
{
  #line 3650 
  __dev_kfree_skb_any(skb,(enum skb_free_reason)SKB_REASON_DROPPED);
  #line 3651 
  return;
}

#line 3653  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void dev_consume_skb_any(struct sk_buff *skb)
{
  #line 3655 
  __dev_kfree_skb_any(skb,(enum skb_free_reason)SKB_REASON_CONSUMED);
  #line 3656 
  return;
}

#line 4452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netdev_xmit_more(void)
{
  #line 4454 
  u8 pscr_ret__;
  #line 4454 
  __this_cpu_preempt_check((char *)"read");
  {
    #line 4454 
    void *__vpp_verify = (void *)0;
    #line 4454 
    void *tmp = __vpp_verify;
  }
  #line 4454 
  switch (1UL) {
    #line 4454 
    u8 pfo_ret__;
    #line 4454 
    u8 pfo_ret___0;
    #line 4454 
    u8 pfo_ret___1;
    #line 4454 
    u8 pfo_ret___2;
    #line 4454 
    case (unsigned long)1: 
                           #line 4454 
    ;
    #line 4454 
    switch (1UL) {
      #line 4454 
      case (unsigned long)1: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)2: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)4: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)8: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      default: 
               #line 4454 
      ;
      #line 4454 
      __bad_percpu_size();
    }
    #line 4454 
    pscr_ret__ = pfo_ret__;
    #line 4454 
    break;
    #line 4454 
    case (unsigned long)2: 
                           #line 4454 
    ;
    #line 4454 
    switch (1UL) {
      #line 4454 
      case (unsigned long)1: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)2: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)4: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)8: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      default: 
               #line 4454 
      ;
      #line 4454 
      __bad_percpu_size();
    }
    #line 4454 
    pscr_ret__ = pfo_ret___0;
    #line 4454 
    break;
    #line 4454 
    case (unsigned long)4: 
                           #line 4454 
    ;
    #line 4454 
    switch (1UL) {
      #line 4454 
      case (unsigned long)1: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)2: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)4: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)8: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      default: 
               #line 4454 
      ;
      #line 4454 
      __bad_percpu_size();
    }
    #line 4454 
    pscr_ret__ = pfo_ret___1;
    #line 4454 
    break;
    #line 4454 
    case (unsigned long)8: 
                           #line 4454 
    ;
    #line 4454 
    switch (1UL) {
      #line 4454 
      case (unsigned long)1: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)2: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)4: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)8: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      default: 
               #line 4454 
      ;
      #line 4454 
      __bad_percpu_size();
    }
    #line 4454 
    pscr_ret__ = pfo_ret___2;
    #line 4454 
    break;
    #line 4454 
    default: 
             #line 4454 
    ;
    #line 4454 
    __bad_size_call_parameter();
    #line 4454 
    break;
  }
  #line 4454 
  return (_Bool)((unsigned int)pscr_ret__ != 0U);
}

#line 1310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/net_driver.h"
__inline static unsigned int ef4_tx_queue_get_insert_index(struct ef4_tx_queue *tx_queue)
{
  #line 1312 
  return tx_queue->insert_count & tx_queue->ptr_mask;
}

#line 1317  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/net_driver.h"
__inline static struct ef4_tx_buffer *__ef4_tx_queue_get_insert_buffer(struct ef4_tx_queue *tx_queue)
{
  #line 1319 
  ;
  #line 1319 
  return tx_queue->buffer + (unsigned long)ef4_tx_queue_get_insert_index(tx_queue);
}

#line 1324  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/net_driver.h"
__inline static struct ef4_tx_buffer *ef4_tx_queue_get_insert_buffer(struct ef4_tx_queue *tx_queue)
{
  #line 1326 
  struct ef4_tx_buffer *buffer = __ef4_tx_queue_get_insert_buffer(tx_queue);
  #line 1333 
  return buffer;
}

#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/nic.h"
__inline static struct ef4_tx_queue *ef4_tx_queue_partner(struct ef4_tx_queue *tx_queue)
{
  #line 71 
  if ((tx_queue->queue & 1U) != 0U) 
                                    #line 72 
                                    return tx_queue + 18446744073709551615U; else 
                                                                    #line 74 
                                                                    return tx_queue + 1U;
}

#line 315  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/nic.h"
__inline static int ef4_nic_probe_tx(struct ef4_tx_queue *tx_queue)
{
  #line 317 
  return (*(((tx_queue->efx)->type)->tx_probe))(tx_queue);
}

#line 319  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/nic.h"
__inline static void ef4_nic_init_tx(struct ef4_tx_queue *tx_queue)
{
  #line 321 
  (*(((tx_queue->efx)->type)->tx_init))(tx_queue);
  #line 322 
  return;
}

#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/nic.h"
__inline static void ef4_nic_remove_tx(struct ef4_tx_queue *tx_queue)
{
  #line 325 
  (*(((tx_queue->efx)->type)->tx_remove))(tx_queue);
  #line 326 
  return;
}

#line 327  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/nic.h"
__inline static void ef4_nic_push_buffers(struct ef4_tx_queue *tx_queue)
{
  #line 329 
  (*(((tx_queue->efx)->type)->tx_write))(tx_queue);
  #line 330 
  return;
}

#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/tx.h"
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/tx.c"
u8 *ef4_tx_get_copy_buffer_limited(struct ef4_tx_queue *tx_queue, struct ef4_tx_buffer *buffer, size_t len);
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/tx.c"
__inline static u8 *ef4_tx_get_copy_buffer(struct ef4_tx_queue *tx_queue, struct ef4_tx_buffer *buffer)
{
  #line 28 
  unsigned int index = ef4_tx_queue_get_insert_index(tx_queue);
  #line 29 
  struct ef4_buffer *page_buf = tx_queue->cb_page + (unsigned long)(index >> 5);
  #line 31 
  unsigned int offset = (index << 7) & 4095U;
  #line 34 
  if ((long)(page_buf->addr == (void *)0) != 0L) {
    #line 34 
    if (ef4_nic_alloc_buffer(tx_queue->efx,page_buf,4096U,2592U) != 0) 
      #line 37 
      return (u8 *)0U;
  }
  #line 38 
  buffer->__anonCompField_ef4_tx_buffer_202.dma_addr = page_buf->dma_addr + (unsigned long long)offset;
  #line 39 
  buffer->unmap_len = (unsigned short)0U;
  #line 40 
  return (u8 *)page_buf->addr + (unsigned long)offset;
}

#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/tx.c"
u8 *ef4_tx_get_copy_buffer_limited(struct ef4_tx_queue *tx_queue, struct ef4_tx_buffer *buffer, size_t len)
{
  #line 46 
  if (len > 128UL) 
                   #line 47 
                   return (u8 *)0U;
  #line 48 
  return ef4_tx_get_copy_buffer(tx_queue,buffer);
}

#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/tx.c"
static void ef4_dequeue_buffer(struct ef4_tx_queue *tx_queue, struct ef4_tx_buffer *buffer, unsigned int *pkts_compl, unsigned int *bytes_compl)
{
  #line 56 
  if ((unsigned int)buffer->unmap_len != 0U) {
    #line 57 
    struct device *dma_dev = & ((tx_queue->efx)->pci_dev)->dev;
    #line 58 
    dma_addr_t unmap_addr = buffer->__anonCompField_ef4_tx_buffer_202.dma_addr - (unsigned long long)buffer->dma_offset;
    #line 59 
    if (((int)buffer->flags & 8) != 0) 
                                       #line 60 
                                       dma_unmap_single_attrs(dma_dev,unmap_addr,(unsigned long)buffer->unmap_len,(enum dma_data_direction)DMA_TO_DEVICE,0UL); else 
                                                                    #line 63 
                                                                    dma_unmap_page_attrs(dma_dev,unmap_addr,(unsigned long)buffer->unmap_len,(enum dma_data_direction)DMA_TO_DEVICE,0UL);
    #line 65 
    buffer->unmap_len = (unsigned short)0U;
  }
  #line 68 
  if (((int)buffer->flags & 2) != 0) {
    #line 69 
    (*pkts_compl) ++;
    #line 70 
    *bytes_compl += (buffer->skb)->len;
    #line 71 
    dev_consume_skb_any(buffer->skb);
  }
  #line 77 
  buffer->len = (unsigned short)0U;
  #line 78 
  buffer->flags = (unsigned short)0U;
  #line 79 
  return;
}

#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/tx.c"
unsigned int ef4_tx_max_skb_descs(struct ef4_nic *efx)
{
  #line 90 
  unsigned int max_descs = 217U;
  #line 95 
  if (ef4_nic_rev(efx) <= 1) 
                             #line 96 
                             max_descs += 100U;
  #line 103 
  return max_descs;
}

#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/tx.c"
static void ef4_tx_maybe_stop_queue(struct ef4_tx_queue *txq1)
{
  #line 113 
  unsigned int __UNIQUE_ID___x543;
  #line 113 
  unsigned int tmp_0;
  #line 135 
  union __anonunion___u_13338 __u;
  #line 136 
  union __anonunion___u_13340 __u_0;
  #line 137 
  unsigned int __UNIQUE_ID___x545;
  #line 137 
  unsigned int tmp_4;
  #line 111 
  unsigned int fill_level;
  #line 109 
  struct ef4_tx_queue *txq2 = ef4_tx_queue_partner(txq1);
  #line 110 
  struct ef4_nic *efx = txq1->efx;
  {
    #line 113 
    __UNIQUE_ID___x543 = txq1->insert_count - txq1->old_read_count;
    #line 113 
    unsigned int __UNIQUE_ID___y544 = txq2->insert_count - txq2->old_read_count;
    #line 113 
    if (__UNIQUE_ID___x543 > __UNIQUE_ID___y544) 
                                                 #line 113 
                                                 tmp_0 = __UNIQUE_ID___x543; else 
                                                                    #line 113 
                                                                    tmp_0 = __UNIQUE_ID___y544;
    }
  #line 113 
  fill_level = tmp_0;
  #line 115 
  if ((long)(efx->txq_stop_thresh > fill_level) != 0L) 
                                                       #line 116 
                                                       return;
  #line 132 
  netif_tx_stop_queue_0(txq1->core_txq);
  #line 133 
  ldv_inline_asm();
  #line 134 
  __read_once_size((void *)(& txq1->read_count),(void *)(& __u.__c),4);
  #line 134 
  txq1->old_read_count = (__u.__val);
  #line 135 
  __read_once_size((void *)(& txq2->read_count),(void *)(& __u_0.__c),4);
  #line 135 
  txq2->old_read_count = (__u_0.__val);
  {
    #line 137 
    __UNIQUE_ID___x545 = txq1->insert_count - txq1->old_read_count;
    #line 137 
    unsigned int __UNIQUE_ID___y546 = txq2->insert_count - txq2->old_read_count;
    #line 137 
    if (__UNIQUE_ID___x545 > __UNIQUE_ID___y546) 
                                                 #line 137 
                                                 tmp_4 = __UNIQUE_ID___x545; else 
                                                                    #line 137 
                                                                    tmp_4 = __UNIQUE_ID___y546;
    }
  #line 137 
  fill_level = tmp_4;
  #line 140 
  if ((long)(efx->txq_stop_thresh > fill_level) != 0L) {
    #line 142 
    ldv_inline_asm();
    #line 142 
    if ((long)(efx->loopback_selftest == (void *)0) != 0L) 
                                                           #line 143 
                                                           netif_tx_start_queue(txq1->core_txq);
  }
  #line 145 
  return;
}

#line 147  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/tx.c"
static int ef4_enqueue_skb_copy(struct ef4_tx_queue *tx_queue, struct sk_buff *skb)
{
  #line 152 
  struct ef4_tx_buffer *buffer;
  #line 153 
  u8 *copy_buffer;
  #line 154 
  int rc;
  #line 150 
  unsigned int min_len = tx_queue->tx_min_size;
  #line 151 
  unsigned int copy_len = skb->len;
  #line 158 
  buffer = ef4_tx_queue_get_insert_buffer(tx_queue);
  #line 160 
  copy_buffer = ef4_tx_get_copy_buffer(tx_queue,buffer);
  #line 161 
  if ((long)(copy_buffer == (u8 *)0U) != 0L) 
                                             #line 162 
                                             return -12;
  #line 164 
  rc = skb_copy_bits(skb,0,(void *)copy_buffer,(int)copy_len);
  #line 166 
  if ((long)(copy_len < min_len) != 0L) {
    #line 167 
    memset((void *)(copy_buffer + (unsigned long)copy_len),0,(unsigned long)(min_len - copy_len));
    #line 168 
    buffer->len = (unsigned short)min_len;
  }
  else 
       #line 170 
       buffer->len = (unsigned short)copy_len;
  #line 173 
  buffer->skb = skb;
  #line 174 
  buffer->flags = (unsigned short)2U;
  #line 176 
  (tx_queue->insert_count) ++;
  #line 177 
  return rc;
}

#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/tx.c"
static struct ef4_tx_buffer *ef4_tx_map_chunk(struct ef4_tx_queue *tx_queue, dma_addr_t dma_addr, size_t len)
{
  #line 185 
  struct ef4_tx_buffer *buffer;
  #line 186 
  unsigned int dma_len;
  #line 184 
  struct ef4_nic_type *nic_type = (tx_queue->efx)->type;
  #line 189 
  while (1) {
    #line 190 
    buffer = ef4_tx_queue_get_insert_buffer(tx_queue);
    #line 191 
    dma_len = (*(nic_type->tx_limit_len))(tx_queue,dma_addr,(unsigned int)len);
    #line 193 
    buffer->len = (unsigned short)dma_len;
    #line 194 
    buffer->__anonCompField_ef4_tx_buffer_202.dma_addr = dma_addr;
    #line 195 
    buffer->flags = (unsigned short)1U;
    #line 196 
    len -= (unsigned long)dma_len;
    #line 197 
    dma_addr = (unsigned long long)dma_len + dma_addr;
    #line 198 
    (tx_queue->insert_count) ++;
    #line 199 
    if (! (len != 0UL)) 
                        #line 189 
                        break;
  }
  #line 201 
  return buffer;
}

#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/tx.c"
static int ef4_tx_map_data(struct ef4_tx_queue *tx_queue, struct sk_buff *skb)
{
  #line 210 
  unsigned int frag_index;
  #line 210 
  unsigned int nr_frags;
  #line 211 
  dma_addr_t dma_addr;
  #line 211 
  dma_addr_t unmap_addr;
  #line 212 
  unsigned short dma_flags;
  #line 213 
  size_t len;
  #line 213 
  size_t unmap_len;
  #line 208 
  struct ef4_nic *efx = tx_queue->efx;
  #line 209 
  struct device *dma_dev = & (efx->pci_dev)->dev;
  #line 215 
  nr_frags = (unsigned int)((struct skb_shared_info *)skb_end_pointer(skb))->nr_frags;
  #line 216 
  frag_index = 0U;
  #line 219 
  len = (unsigned long)skb_headlen(skb);
  #line 220 
  dma_addr = dma_map_single_attrs(dma_dev,(void *)skb->data,len,(enum dma_data_direction)DMA_TO_DEVICE,0UL);
  #line 221 
  dma_flags = (unsigned short)8U;
  #line 222 
  unmap_len = len;
  #line 223 
  unmap_addr = dma_addr;
  #line 225 
  if ((long)(dma_mapping_error(dma_dev,dma_addr) != 0) != 0L) 
                                                              #line 226 
                                                              return -5;
  #line 229 
  while (1) {
    #line 230 
    struct ef4_tx_buffer *buffer;
    #line 231 
    skb_frag_t *fragment;
    #line 252 
    unsigned char *tmp_2;
    #line 252 
    unsigned int tmp_3;
    #line 233 
    buffer = ef4_tx_map_chunk(tx_queue,dma_addr,len);
    #line 238 
    buffer->flags = (unsigned short)((unsigned int)dma_flags | 1U);
    #line 239 
    buffer->unmap_len = (unsigned short)unmap_len;
    #line 240 
    buffer->dma_offset = (unsigned short)((int)((unsigned short)buffer->__anonCompField_ef4_tx_buffer_202.dma_addr) - (int)((unsigned short)unmap_addr));
    #line 242 
    if (frag_index >= nr_frags) {
      #line 246 
      buffer->skb = skb;
      #line 247 
      buffer->flags = (unsigned short)((unsigned int)dma_flags | 2U);
      #line 248 
      return 0;
    }
    #line 252 
    tmp_2 = skb_end_pointer(skb);
    #line 252 
    tmp_3 = frag_index;
    #line 252 
    frag_index ++;
    #line 252 
    fragment = & ((struct skb_shared_info *)tmp_2)->frags[tmp_3];
    #line 253 
    len = (unsigned long)skb_frag_size(fragment);
    #line 254 
    dma_addr = skb_frag_dma_map(dma_dev,fragment,0UL,len,(enum dma_data_direction)DMA_TO_DEVICE);
    #line 256 
    dma_flags = (unsigned short)0U;
    #line 257 
    unmap_len = len;
    #line 258 
    unmap_addr = dma_addr;
    #line 260 
    if ((long)(dma_mapping_error(dma_dev,dma_addr) != 0) != 0L) 
                                                                #line 261 
                                                                return -5;
  }
}

#line 268  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/tx.c"
static void ef4_enqueue_unwind(struct ef4_tx_queue *tx_queue)
{
  #line 270 
  struct ef4_tx_buffer *buffer;
  #line 273 
  while (tx_queue->insert_count != tx_queue->write_count) {
    #line 274 
    (tx_queue->insert_count) --;
    #line 275 
    buffer = __ef4_tx_queue_get_insert_buffer(tx_queue);
    #line 276 
    ef4_dequeue_buffer(tx_queue,buffer,(unsigned int *)0U,(unsigned int *)0U);
  }
  #line 278 
  return;
}

#line 296  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/tx.c"
netdev_tx_t ef4_enqueue_skb(struct ef4_tx_queue *tx_queue, struct sk_buff *skb)
{
  #line 299 
  unsigned int skb_len;
  #line 298 
  bool data_mapped = (_Bool)0;
  #line 301 
  skb_len = skb->len;
  #line 304 
  if (tx_queue->tx_min_size > skb_len || skb->data_len != 0U && skb_len <= 128U) {
    #line 307 
    if (ef4_enqueue_skb_copy(tx_queue,skb) != 0) 
                                                 #line 308 
                                                 goto err;
    #line 309 
    (tx_queue->cb_packets) ++;
    #line 310 
    data_mapped = (_Bool)1;
  }
  #line 314 
  if (! data_mapped) {
    #line 314 
    if (ef4_tx_map_data(tx_queue,skb) != 0) 
                                            #line 315 
                                            goto err;
  }
  #line 318 
  netdev_tx_sent_queue(tx_queue->core_txq,skb_len);
  #line 321 
  if (netdev_xmit_more()) {
    #line 321 
    if ((int)netif_xmit_stopped(tx_queue->core_txq) != 0) {
      #line 321 
      _LOR: {
              #line 322 
              struct ef4_tx_queue *txq2 = ef4_tx_queue_partner(tx_queue);
              #line 328 
              if ((int)txq2->xmit_more_available != 0) 
                                                       #line 329 
                                                       ef4_nic_push_buffers(txq2);
              #line 331 
              ef4_nic_push_buffers(tx_queue);
            }
    }
    else 
         #line 333 
         tx_queue->xmit_more_available = netdev_xmit_more();
  }
  else 
       #line 321 
       goto _LOR;
  #line 336 
  (tx_queue->tx_packets) ++;
  #line 338 
  ef4_tx_maybe_stop_queue(tx_queue);
  #line 340 
  return NETDEV_TX_OK;
  #line 343 
  err: 
       #line 343 
  ;
  #line 344 
  ef4_enqueue_unwind(tx_queue);
  #line 345 
  dev_kfree_skb_any(skb);
  #line 346 
  return NETDEV_TX_OK;
}

#line 354  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/tx.c"
static void ef4_dequeue_buffers(struct ef4_tx_queue *tx_queue, unsigned int index, unsigned int *pkts_compl, unsigned int *bytes_compl)
{
  #line 360 
  unsigned int stop_index;
  #line 360 
  unsigned int read_ptr;
  #line 359 
  struct ef4_nic *efx = tx_queue->efx;
  #line 362 
  stop_index = (index + 1U) & tx_queue->ptr_mask;
  #line 363 
  read_ptr = tx_queue->read_count & tx_queue->ptr_mask;
  #line 365 
  while (read_ptr != stop_index) {
    #line 366 
    struct ef4_tx_buffer *buffer = tx_queue->buffer + (unsigned long)read_ptr;
    #line 368 
    if (((int)buffer->flags & 16) == 0 && (long)((unsigned int)buffer->len == 0U) != 0L) {
      #line 370 
      if ((efx->msg_enable & 128U) != 0U) 
                                          #line 370 
                                          netdev_err(efx->net_dev,(char *)"TX queue %d spurious TX completion id %x\n",tx_queue->queue,read_ptr);
      #line 373 
      ef4_schedule_reset(efx,(enum reset_type)RESET_TYPE_TX_SKIP);
      #line 374 
      return;
    }
    #line 377 
    ef4_dequeue_buffer(tx_queue,buffer,pkts_compl,bytes_compl);
    #line 379 
    (tx_queue->read_count) ++;
    #line 380 
    read_ptr = tx_queue->read_count & tx_queue->ptr_mask;
  }
  #line 382 
  return;
}

#line 393  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/tx.c"
netdev_tx_t ef4_hard_start_xmit(struct sk_buff *skb, struct net_device *net_dev)
{
  #line 397 
  struct ef4_tx_queue *tx_queue;
  #line 398 
  unsigned int index;
  #line 398 
  unsigned int type;
  #line 396 
  struct ef4_nic *efx = netdev_priv(net_dev);
  #line 402 
  index = (unsigned int)skb_get_queue_mapping(skb);
  #line 403 
  type = (unsigned int)((unsigned int)skb->ip_summed == 3U);
  #line 404 
  if (efx->n_tx_channels <= index) {
    #line 405 
    index -= efx->n_tx_channels;
    #line 406 
    type |= 2U;
  }
  #line 408 
  tx_queue = ef4_get_tx_queue(efx,index,type);
  #line 410 
  return ef4_enqueue_skb(tx_queue,skb);
}

#line 413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/tx.c"
void ef4_init_tx_queue_core_txq(struct ef4_tx_queue *tx_queue)
{
  #line 420 
  unsigned int tmp;
  #line 415 
  struct ef4_nic *efx = tx_queue->efx;
  #line 420 
  if ((tx_queue->queue & 2U) != 0U) 
                                    #line 420 
                                    tmp = efx->n_tx_channels; else 
                                                                   #line 420 
                                                                   tmp = 0U;
  #line 418 
  ;
  #line 418 
  ;
  #line 418 
  tx_queue->core_txq = netdev_get_tx_queue(efx->net_dev,tx_queue->queue / 4U + tmp);
  #line 423 
  return;
}

#line 425  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/tx.c"
int ef4_setup_tc(struct net_device *net_dev, enum tc_setup_type type, void *type_data)
{
  #line 476 
  int __UNIQUE_ID___x547;
  #line 476 
  int tmp_2;
  #line 430 
  struct ef4_channel *channel;
  #line 431 
  struct ef4_tx_queue *tx_queue;
  #line 432 
  unsigned int tc;
  #line 432 
  unsigned int num_tc;
  #line 433 
  int rc;
  #line 428 
  struct ef4_nic *efx = netdev_priv(net_dev);
  #line 429 
  struct tc_mqprio_qopt *mqprio = (struct tc_mqprio_qopt *)type_data;
  #line 435 
  if (type != (unsigned int)TC_SETUP_QDISC_MQPRIO) 
                                                   #line 436 
                                                   return -95;
  #line 438 
  num_tc = (unsigned int)mqprio->num_tc;
  #line 440 
  if (ef4_nic_rev(efx) <= 1) 
                             #line 441 
                             return -22;
  else 
    #line 440 
    if (num_tc > 2U) 
                     #line 441 
                     return -22;
  #line 443 
  mqprio->hw = (unsigned char)1U;
  #line 445 
  if ((unsigned int)net_dev->num_tc == num_tc) 
                                               #line 446 
                                               return 0;
  #line 448 
  tc = 0U;
  #line 448 
  while (tc < num_tc) {
    #line 449 
    net_dev->tc_to_txq[tc].offset = (unsigned short)((int)((unsigned short)efx->n_tx_channels) * (int)((unsigned short)tc));
    #line 450 
    net_dev->tc_to_txq[tc].count = (unsigned short)efx->n_tx_channels;
    #line 448 
    tc ++;
  }
  #line 453 
  if ((unsigned int)net_dev->num_tc < num_tc) {
    #line 455 
    channel = efx->channel[0];
    #line 455 
    while (channel != (struct ef4_channel *)0) {
      #line 456 
      if (ef4_channel_has_tx_queues(channel)) {
        #line 456 
        tx_queue = (struct ef4_tx_queue *)(& channel->tx_queue);
        #line 456 
        while ((struct ef4_tx_queue *)(& channel->tx_queue) + 4U > tx_queue) {
          #line 458 
          if ((tx_queue->queue & 2U) == 0U) 
                                            #line 459 
                                            goto __Cont;
          #line 460 
          if (tx_queue->buffer == (struct ef4_tx_buffer *)0) {
            #line 461 
            rc = ef4_probe_tx_queue(tx_queue);
            #line 462 
            if (rc != 0) 
                         #line 463 
                         return rc;
          }
          #line 465 
          if (! tx_queue->initialised) 
                                       #line 466 
                                       ef4_init_tx_queue(tx_queue);
          #line 467 
          ef4_init_tx_queue_core_txq(tx_queue);
          #line 456 
          __Cont: 
                  #line 456 
          tx_queue ++;
        }
      }
      #line 455 
      if ((unsigned int)(channel->channel + 1) < efx->n_channels) 
                                                                  #line 455 
                                                                  channel = efx->channel[channel->channel + 1]; else 
                                                                    #line 455 
                                                                    channel = (struct ef4_channel *)0;
    }
  }
  else 
       #line 472 
       net_dev->num_tc = (short)num_tc;
  {
    #line 476 
    __UNIQUE_ID___x547 = (int)num_tc;
    #line 476 
    int __UNIQUE_ID___y548 = 1;
    #line 476 
    if (__UNIQUE_ID___x547 > __UNIQUE_ID___y548) 
                                                 #line 476 
                                                 tmp_2 = __UNIQUE_ID___x547; else 
                                                                    #line 476 
                                                                    tmp_2 = __UNIQUE_ID___y548;
    }
  #line 475 
  ;
  #line 475 
  ;
  #line 475 
  rc = netif_set_real_num_tx_queues(net_dev,(unsigned int)tmp_2 * efx->n_tx_channels);
  #line 478 
  if (rc != 0) 
               #line 479 
               return rc;
  #line 487 
  net_dev->num_tc = (short)num_tc;
  #line 488 
  return 0;
}

#line 491  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/tx.c"
void ef4_xmit_done(struct ef4_tx_queue *tx_queue, unsigned int index)
{
  #line 493 
  unsigned int fill_level;
  #line 495 
  struct ef4_tx_queue *txq2;
  #line 494 
  struct ef4_nic *efx = tx_queue->efx;
  #line 496 
  unsigned int pkts_compl = 0U;
  #line 496 
  unsigned int bytes_compl = 0U;
  #line 500 
  ef4_dequeue_buffers(tx_queue,index,& pkts_compl,& bytes_compl);
  #line 501 
  tx_queue->pkts_compl += pkts_compl;
  #line 502 
  tx_queue->bytes_compl += bytes_compl;
  #line 504 
  if (pkts_compl > 1U) 
                       #line 505 
                       (tx_queue->merge_events) ++;
  #line 506 
  ldv_inline_asm();
  #line 512 
  if ((long)((int)netif_tx_queue_stopped(tx_queue->core_txq) != 0) != 0L) 
    #line 512 
    if ((long)((int)efx->port_enabled != 0) != 0L) {
      #line 513 
      if ((long)((int)netif_device_present(efx->net_dev) != 0) != 0L) {
        #line 516 
        unsigned int __UNIQUE_ID___x549;
        #line 516 
        unsigned int tmp;
        #line 515 
        txq2 = ef4_tx_queue_partner(tx_queue);
        {
          #line 516 
          __UNIQUE_ID___x549 = tx_queue->insert_count - tx_queue->read_count;
          #line 516 
          unsigned int __UNIQUE_ID___y550 = txq2->insert_count - txq2->read_count;
          #line 516 
          if (__UNIQUE_ID___x549 > __UNIQUE_ID___y550) 
                                                       #line 516 
                                                       tmp = __UNIQUE_ID___x549; else 
                                                                    #line 516 
                                                                    tmp = __UNIQUE_ID___y550;
          }
        #line 516 
        fill_level = tmp;
        #line 518 
        if (efx->txq_wake_thresh >= fill_level) 
                                                #line 519 
                                                netif_tx_wake_queue(tx_queue->core_txq);
      }
    }
  #line 523 
  if ((int)(tx_queue->read_count - tx_queue->old_write_count) >= 0) {
    #line 525 
    union __anonunion___u_13342 __u;
    #line 524 
    __read_once_size((void *)(& tx_queue->write_count),(void *)(& __u.__c),4);
    #line 524 
    tx_queue->old_write_count = (__u.__val);
    #line 525 
    if (tx_queue->read_count == tx_queue->old_write_count) {
      #line 527 
      ldv_inline_asm();
      #line 527 
      tx_queue->empty_read_count = tx_queue->read_count | 2147483648U;
    }
  }
  #line 531 
  return;
}

#line 533  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/tx.c"
static unsigned int ef4_tx_cb_page_count(struct ef4_tx_queue *tx_queue)
{
  #line 535 
  return (unsigned int)(((unsigned long)(tx_queue->ptr_mask + 1U) + 31UL) / 32UL);
}

#line 538  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/tx.c"
int ef4_probe_tx_queue(struct ef4_tx_queue *tx_queue)
{
  #line 545 
  unsigned long tmp_67;
  #line 545 
  unsigned long __UNIQUE_ID___x551;
  #line 541 
  unsigned int entries;
  #line 542 
  int rc;
  #line 540 
  struct ef4_nic *efx = tx_queue->efx;
  {
    #line 545 
    unsigned long tmp_51;
    #line 545 
    unsigned long tmp_52;
    #line 545 
    unsigned long tmp_53;
    #line 545 
    unsigned long tmp_54;
    #line 545 
    unsigned long tmp_55;
    #line 545 
    unsigned long tmp_56;
    #line 545 
    unsigned long tmp_57;
    #line 545 
    unsigned long tmp_58;
    #line 545 
    unsigned long tmp_59;
    #line 545 
    unsigned long tmp_60;
    #line 545 
    unsigned long tmp_61;
    #line 545 
    unsigned long tmp;
    #line 545 
    unsigned long tmp_63;
    #line 545 
    unsigned long tmp_64;
    #line 545 
    unsigned long tmp_0;
    #line 545 
    unsigned long tmp_1;
    #line 545 
    unsigned long tmp_2;
    #line 545 
    unsigned long tmp_3;
    #line 545 
    unsigned long tmp_4;
    #line 545 
    unsigned long tmp_5;
    #line 545 
    unsigned long tmp_6;
    #line 545 
    unsigned long tmp_7;
    #line 545 
    unsigned long tmp_8;
    #line 545 
    unsigned long tmp_9;
    #line 545 
    unsigned long tmp_10;
    #line 545 
    unsigned long tmp_11;
    #line 545 
    unsigned long tmp_12;
    #line 545 
    unsigned long tmp_13;
    #line 545 
    unsigned long tmp_14;
    #line 545 
    unsigned long tmp_15;
    #line 545 
    unsigned long tmp_16;
    #line 545 
    unsigned long tmp_17;
    #line 545 
    unsigned long tmp_18;
    #line 545 
    unsigned long tmp_19;
    #line 545 
    unsigned long tmp_20;
    #line 545 
    unsigned long tmp_21;
    #line 545 
    unsigned long tmp_22;
    #line 545 
    unsigned long tmp_23;
    #line 545 
    unsigned long tmp_24;
    #line 545 
    unsigned long tmp_25;
    #line 545 
    unsigned long tmp_26;
    #line 545 
    unsigned long tmp_27;
    #line 545 
    unsigned long tmp_28;
    #line 545 
    unsigned long tmp_29;
    #line 545 
    unsigned long tmp_30;
    #line 545 
    unsigned long tmp_31;
    #line 545 
    unsigned long tmp_32;
    #line 545 
    unsigned long tmp_33;
    #line 545 
    unsigned long tmp_34;
    #line 545 
    unsigned long tmp_35;
    #line 545 
    unsigned long tmp_36;
    #line 545 
    unsigned long tmp_37;
    #line 545 
    unsigned long tmp_38;
    #line 545 
    unsigned long tmp_39;
    #line 545 
    unsigned long tmp_40;
    #line 545 
    unsigned long tmp_41;
    #line 545 
    unsigned long tmp_42;
    #line 545 
    unsigned long tmp_43;
    #line 545 
    unsigned long tmp_44;
    #line 545 
    unsigned long tmp_45;
    #line 545 
    unsigned long tmp_46;
    #line 545 
    unsigned long tmp_47;
    #line 545 
    unsigned long tmp_48;
    #line 545 
    unsigned long tmp_49;
    #line 545 
    unsigned long tmp_50;
    #line 545 
    unsigned long tmp_66;
    #line 545 
    if (0 != 0) {
      #line 545 
      if (efx->txq_entries != 1U) {
        #line 545 
        if (0 != 0) {
          #line 545 
          if (efx->txq_entries + 4294967295U > 1U) {
            #line 545 
            if (((unsigned long long)(efx->txq_entries + 4294967295U) & 9223372036854775808ULL) == 0ULL) {
              #line 545 
              if (((unsigned long long)(efx->txq_entries + 4294967295U) & 4611686018427387904ULL) == 0ULL) {
                #line 545 
                if (((unsigned long long)(efx->txq_entries + 4294967295U) & 2305843009213693952ULL) == 0ULL) {
                  #line 545 
                  if (((unsigned long long)(efx->txq_entries + 4294967295U) & 1152921504606846976ULL) == 0ULL) {
                    #line 545 
                    if (((unsigned long long)(efx->txq_entries + 4294967295U) & 576460752303423488ULL) == 0ULL) {
                      #line 545 
                      if (((unsigned long long)(efx->txq_entries + 4294967295U) & 288230376151711744ULL) == 0ULL) {
                        #line 545 
                        if (((unsigned long long)(efx->txq_entries + 4294967295U) & 144115188075855872ULL) == 0ULL) {
                          #line 545 
                          if (((unsigned long long)(efx->txq_entries + 4294967295U) & 72057594037927936ULL) == 0ULL) {
                            #line 545 
                            if (((unsigned long long)(efx->txq_entries + 4294967295U) & 36028797018963968ULL) == 0ULL) {
                              #line 545 
                              if (((unsigned long long)(efx->txq_entries + 4294967295U) & 18014398509481984ULL) == 0ULL) {
                                #line 545 
                                if (((unsigned long long)(efx->txq_entries + 4294967295U) & 9007199254740992ULL) == 0ULL) {
                                  #line 545 
                                  if (((unsigned long long)(efx->txq_entries + 4294967295U) & 4503599627370496ULL) == 0ULL) {
                                    #line 545 
                                    if (((unsigned long long)(efx->txq_entries + 4294967295U) & 2251799813685248ULL) == 0ULL) {
                                      #line 545 
                                      if (((unsigned long long)(efx->txq_entries + 4294967295U) & 1125899906842624ULL) == 0ULL) {
                                        #line 545 
                                        if (((unsigned long long)(efx->txq_entries + 4294967295U) & 562949953421312ULL) == 0ULL) {
                                          #line 545 
                                          if (((unsigned long long)(efx->txq_entries + 4294967295U) & 281474976710656ULL) == 0ULL) {
                                            #line 545 
                                            if (((unsigned long long)(efx->txq_entries + 4294967295U) & 140737488355328ULL) == 0ULL) {
                                              #line 545 
                                              if (((unsigned long long)(efx->txq_entries + 4294967295U) & 70368744177664ULL) == 0ULL) {
                                                #line 545 
                                                if (((unsigned long long)(efx->txq_entries + 4294967295U) & 35184372088832ULL) == 0ULL) {
                                                  #line 545 
                                                  if (((unsigned long long)(efx->txq_entries + 4294967295U) & 17592186044416ULL) == 0ULL) {
                                                    #line 545 
                                                    if (((unsigned long long)(efx->txq_entries + 4294967295U) & 8796093022208ULL) == 0ULL) {
                                                      #line 545 
                                                      if (((unsigned long long)(efx->txq_entries + 4294967295U) & 4398046511104ULL) == 0ULL) {
                                                        #line 545 
                                                        if (((unsigned long long)(efx->txq_entries + 4294967295U) & 2199023255552ULL) == 0ULL) {
                                                          #line 545 
                                                          if (((unsigned long long)(efx->txq_entries + 4294967295U) & 1099511627776ULL) == 0ULL) {
                                                            #line 545 
                                                            if (((unsigned long long)(efx->txq_entries + 4294967295U) & 549755813888ULL) == 0ULL) {
                                                              #line 545 
                                                              if (((unsigned long long)(efx->txq_entries + 4294967295U) & 274877906944ULL) == 0ULL) {
                                                                #line 545 
                                                                if (((unsigned long long)(efx->txq_entries + 4294967295U) & 137438953472ULL) == 0ULL) {
                                                                  #line 545 
                                                                  if (
                                                                    ((unsigned long long)(efx->txq_entries + 4294967295U) & 68719476736ULL) == 0ULL) {
                                                                    #line 545 
                                                                    if (
                                                                    ((unsigned long long)(efx->txq_entries + 4294967295U) & 34359738368ULL) == 0ULL) {
                                                                    #line 545 
                                                                    if (
                                                                    ((unsigned long long)(efx->txq_entries + 4294967295U) & 17179869184ULL) == 0ULL) {
                                                                    #line 545 
                                                                    if (
                                                                    ((unsigned long long)(efx->txq_entries + 4294967295U) & 8589934592ULL) == 0ULL) {
                                                                    #line 545 
                                                                    if (
                                                                    ((unsigned long long)(efx->txq_entries + 4294967295U) & 4294967296ULL) == 0ULL) {
                                                                    #line 545 
                                                                    if (
                                                                    ((unsigned long long)(efx->txq_entries + 4294967295U) & 2147483648ULL) == 0ULL) {
                                                                    #line 545 
                                                                    if (
                                                                    ((unsigned long long)(efx->txq_entries + 4294967295U) & 1073741824ULL) == 0ULL) {
                                                                    #line 545 
                                                                    if (
                                                                    ((unsigned long long)(efx->txq_entries + 4294967295U) & 536870912ULL) == 0ULL) {
                                                                    #line 545 
                                                                    if (
                                                                    ((unsigned long long)(efx->txq_entries + 4294967295U) & 268435456ULL) == 0ULL) {
                                                                    #line 545 
                                                                    if (
                                                                    ((unsigned long long)(efx->txq_entries + 4294967295U) & 134217728ULL) == 0ULL) {
                                                                    #line 545 
                                                                    if (
                                                                    ((unsigned long long)(efx->txq_entries + 4294967295U) & 67108864ULL) == 0ULL) {
                                                                    #line 545 
                                                                    if (
                                                                    ((unsigned long long)(efx->txq_entries + 4294967295U) & 33554432ULL) == 0ULL) {
                                                                    #line 545 
                                                                    if (
                                                                    ((unsigned long long)(efx->txq_entries + 4294967295U) & 16777216ULL) == 0ULL) {
                                                                    #line 545 
                                                                    if (
                                                                    ((unsigned long long)(efx->txq_entries + 4294967295U) & 8388608ULL) == 0ULL) {
                                                                    #line 545 
                                                                    if (
                                                                    ((unsigned long long)(efx->txq_entries + 4294967295U) & 4194304ULL) == 0ULL) {
                                                                    #line 545 
                                                                    if (
                                                                    ((unsigned long long)(efx->txq_entries + 4294967295U) & 2097152ULL) == 0ULL) {
                                                                    #line 545 
                                                                    if (
                                                                    ((unsigned long long)(efx->txq_entries + 4294967295U) & 1048576ULL) == 0ULL) {
                                                                    #line 545 
                                                                    if (
                                                                    ((unsigned long long)(efx->txq_entries + 4294967295U) & 524288ULL) == 0ULL) {
                                                                    #line 545 
                                                                    if (
                                                                    ((unsigned long long)(efx->txq_entries + 4294967295U) & 262144ULL) == 0ULL) {
                                                                    #line 545 
                                                                    if (
                                                                    ((unsigned long long)(efx->txq_entries + 4294967295U) & 131072ULL) == 0ULL) {
                                                                    #line 545 
                                                                    if (
                                                                    ((unsigned long long)(efx->txq_entries + 4294967295U) & 65536ULL) == 0ULL) {
                                                                    #line 545 
                                                                    if (
                                                                    ((unsigned long long)(efx->txq_entries + 4294967295U) & 32768ULL) == 0ULL) {
                                                                    #line 545 
                                                                    if (
                                                                    ((unsigned long long)(efx->txq_entries + 4294967295U) & 16384ULL) == 0ULL) {
                                                                    #line 545 
                                                                    if (
                                                                    ((unsigned long long)(efx->txq_entries + 4294967295U) & 8192ULL) == 0ULL) {
                                                                    #line 545 
                                                                    if (
                                                                    ((unsigned long long)(efx->txq_entries + 4294967295U) & 4096ULL) == 0ULL) {
                                                                    #line 545 
                                                                    if (
                                                                    ((unsigned long long)(efx->txq_entries + 4294967295U) & 2048ULL) == 0ULL) {
                                                                    #line 545 
                                                                    if (
                                                                    ((unsigned long long)(efx->txq_entries + 4294967295U) & 1024ULL) == 0ULL) {
                                                                    #line 545 
                                                                    if (
                                                                    ((unsigned long long)(efx->txq_entries + 4294967295U) & 512ULL) == 0ULL) {
                                                                    #line 545 
                                                                    if (
                                                                    ((unsigned long long)(efx->txq_entries + 4294967295U) & 256ULL) == 0ULL) {
                                                                    #line 545 
                                                                    if (
                                                                    ((unsigned long long)(efx->txq_entries + 4294967295U) & 128ULL) == 0ULL) {
                                                                    #line 545 
                                                                    if (
                                                                    ((unsigned long long)(efx->txq_entries + 4294967295U) & 64ULL) == 0ULL) {
                                                                    #line 545 
                                                                    if (
                                                                    ((unsigned long long)(efx->txq_entries + 4294967295U) & 32ULL) == 0ULL) {
                                                                    #line 545 
                                                                    if (
                                                                    ((unsigned long long)(efx->txq_entries + 4294967295U) & 16ULL) == 0ULL) {
                                                                    #line 545 
                                                                    if (
                                                                    ((unsigned long long)(efx->txq_entries + 4294967295U) & 8ULL) == 0ULL) {
                                                                    #line 545 
                                                                    if (
                                                                    ((unsigned long long)(efx->txq_entries + 4294967295U) & 4ULL) != 0ULL) 
                                                                    #line 545 
                                                                    tmp = 8UL; else 
                                                                    #line 545 
                                                                    tmp = 4UL;
                                                                    #line 545 
                                                                    tmp_0 = tmp;
                                                                    }
                                                                    else 
                                                                    #line 545 
                                                                    tmp_0 = 16UL;
                                                                    #line 545 
                                                                    tmp_1 = tmp_0;
                                                                    }
                                                                    else 
                                                                    #line 545 
                                                                    tmp_1 = 32UL;
                                                                    #line 545 
                                                                    tmp_2 = tmp_1;
                                                                    }
                                                                    else 
                                                                    #line 545 
                                                                    tmp_2 = 64UL;
                                                                    #line 545 
                                                                    tmp_3 = tmp_2;
                                                                    }
                                                                    else 
                                                                    #line 545 
                                                                    tmp_3 = 128UL;
                                                                    #line 545 
                                                                    tmp_4 = tmp_3;
                                                                    }
                                                                    else 
                                                                    #line 545 
                                                                    tmp_4 = 256UL;
                                                                    #line 545 
                                                                    tmp_5 = tmp_4;
                                                                    }
                                                                    else 
                                                                    #line 545 
                                                                    tmp_5 = 512UL;
                                                                    #line 545 
                                                                    tmp_6 = tmp_5;
                                                                    }
                                                                    else 
                                                                    #line 545 
                                                                    tmp_6 = 1024UL;
                                                                    #line 545 
                                                                    tmp_7 = tmp_6;
                                                                    }
                                                                    else 
                                                                    #line 545 
                                                                    tmp_7 = 2048UL;
                                                                    #line 545 
                                                                    tmp_8 = tmp_7;
                                                                    }
                                                                    else 
                                                                    #line 545 
                                                                    tmp_8 = 4096UL;
                                                                    #line 545 
                                                                    tmp_9 = tmp_8;
                                                                    }
                                                                    else 
                                                                    #line 545 
                                                                    tmp_9 = 8192UL;
                                                                    #line 545 
                                                                    tmp_10 = tmp_9;
                                                                    }
                                                                    else 
                                                                    #line 545 
                                                                    tmp_10 = 16384UL;
                                                                    #line 545 
                                                                    tmp_11 = tmp_10;
                                                                    }
                                                                    else 
                                                                    #line 545 
                                                                    tmp_11 = 32768UL;
                                                                    #line 545 
                                                                    tmp_12 = tmp_11;
                                                                    }
                                                                    else 
                                                                    #line 545 
                                                                    tmp_12 = 65536UL;
                                                                    #line 545 
                                                                    tmp_13 = tmp_12;
                                                                    }
                                                                    else 
                                                                    #line 545 
                                                                    tmp_13 = 131072UL;
                                                                    #line 545 
                                                                    tmp_14 = tmp_13;
                                                                    }
                                                                    else 
                                                                    #line 545 
                                                                    tmp_14 = 262144UL;
                                                                    #line 545 
                                                                    tmp_15 = tmp_14;
                                                                    }
                                                                    else 
                                                                    #line 545 
                                                                    tmp_15 = 524288UL;
                                                                    #line 545 
                                                                    tmp_16 = tmp_15;
                                                                    }
                                                                    else 
                                                                    #line 545 
                                                                    tmp_16 = 1048576UL;
                                                                    #line 545 
                                                                    tmp_17 = tmp_16;
                                                                    }
                                                                    else 
                                                                    #line 545 
                                                                    tmp_17 = 2097152UL;
                                                                    #line 545 
                                                                    tmp_18 = tmp_17;
                                                                    }
                                                                    else 
                                                                    #line 545 
                                                                    tmp_18 = 4194304UL;
                                                                    #line 545 
                                                                    tmp_19 = tmp_18;
                                                                    }
                                                                    else 
                                                                    #line 545 
                                                                    tmp_19 = 8388608UL;
                                                                    #line 545 
                                                                    tmp_20 = tmp_19;
                                                                    }
                                                                    else 
                                                                    #line 545 
                                                                    tmp_20 = 16777216UL;
                                                                    #line 545 
                                                                    tmp_21 = tmp_20;
                                                                    }
                                                                    else 
                                                                    #line 545 
                                                                    tmp_21 = 33554432UL;
                                                                    #line 545 
                                                                    tmp_22 = tmp_21;
                                                                    }
                                                                    else 
                                                                    #line 545 
                                                                    tmp_22 = 67108864UL;
                                                                    #line 545 
                                                                    tmp_23 = tmp_22;
                                                                    }
                                                                    else 
                                                                    #line 545 
                                                                    tmp_23 = 134217728UL;
                                                                    #line 545 
                                                                    tmp_24 = tmp_23;
                                                                    }
                                                                    else 
                                                                    #line 545 
                                                                    tmp_24 = 268435456UL;
                                                                    #line 545 
                                                                    tmp_25 = tmp_24;
                                                                    }
                                                                    else 
                                                                    #line 545 
                                                                    tmp_25 = 536870912UL;
                                                                    #line 545 
                                                                    tmp_26 = tmp_25;
                                                                    }
                                                                    else 
                                                                    #line 545 
                                                                    tmp_26 = 1073741824UL;
                                                                    #line 545 
                                                                    tmp_27 = tmp_26;
                                                                    }
                                                                    else 
                                                                    #line 545 
                                                                    tmp_27 = 2147483648UL;
                                                                    #line 545 
                                                                    tmp_28 = tmp_27;
                                                                    }
                                                                    else 
                                                                    #line 545 
                                                                    tmp_28 = 4294967296UL;
                                                                    #line 545 
                                                                    tmp_29 = tmp_28;
                                                                    }
                                                                    else 
                                                                    #line 545 
                                                                    tmp_29 = 8589934592UL;
                                                                    #line 545 
                                                                    tmp_30 = tmp_29;
                                                                    }
                                                                    else 
                                                                    #line 545 
                                                                    tmp_30 = 17179869184UL;
                                                                    #line 545 
                                                                    tmp_31 = tmp_30;
                                                                    }
                                                                    else 
                                                                    #line 545 
                                                                    tmp_31 = 34359738368UL;
                                                                    #line 545 
                                                                    tmp_32 = tmp_31;
                                                                    }
                                                                    else 
                                                                    #line 545 
                                                                    tmp_32 = 68719476736UL;
                                                                    #line 545 
                                                                    tmp_33 = tmp_32;
                                                                  }
                                                                  else 
                                                                    #line 545 
                                                                    tmp_33 = 137438953472UL;
                                                                  #line 545 
                                                                  tmp_34 = tmp_33;
                                                                }
                                                                else 
                                                                  #line 545 
                                                                  tmp_34 = 274877906944UL;
                                                                #line 545 
                                                                tmp_35 = tmp_34;
                                                              }
                                                              else 
                                                                   #line 545 
                                                                   tmp_35 = 549755813888UL;
                                                              #line 545 
                                                              tmp_36 = tmp_35;
                                                            }
                                                            else 
                                                                 #line 545 
                                                                 tmp_36 = 1099511627776UL;
                                                            #line 545 
                                                            tmp_37 = tmp_36;
                                                          }
                                                          else 
                                                               #line 545 
                                                               tmp_37 = 2199023255552UL;
                                                          #line 545 
                                                          tmp_38 = tmp_37;
                                                        }
                                                        else 
                                                             #line 545 
                                                             tmp_38 = 4398046511104UL;
                                                        #line 545 
                                                        tmp_39 = tmp_38;
                                                      }
                                                      else 
                                                           #line 545 
                                                           tmp_39 = 8796093022208UL;
                                                      #line 545 
                                                      tmp_40 = tmp_39;
                                                    }
                                                    else 
                                                         #line 545 
                                                         tmp_40 = 17592186044416UL;
                                                    #line 545 
                                                    tmp_41 = tmp_40;
                                                  }
                                                  else 
                                                       #line 545 
                                                       tmp_41 = 35184372088832UL;
                                                  #line 545 
                                                  tmp_42 = tmp_41;
                                                }
                                                else 
                                                     #line 545 
                                                     tmp_42 = 70368744177664UL;
                                                #line 545 
                                                tmp_43 = tmp_42;
                                              }
                                              else 
                                                   #line 545 
                                                   tmp_43 = 140737488355328UL;
                                              #line 545 
                                              tmp_44 = tmp_43;
                                            }
                                            else 
                                                 #line 545 
                                                 tmp_44 = 281474976710656UL;
                                            #line 545 
                                            tmp_45 = tmp_44;
                                          }
                                          else 
                                               #line 545 
                                               tmp_45 = 562949953421312UL;
                                          #line 545 
                                          tmp_46 = tmp_45;
                                        }
                                        else 
                                             #line 545 
                                             tmp_46 = 1125899906842624UL;
                                        #line 545 
                                        tmp_47 = tmp_46;
                                      }
                                      else 
                                           #line 545 
                                           tmp_47 = 2251799813685248UL;
                                      #line 545 
                                      tmp_48 = tmp_47;
                                    }
                                    else 
                                         #line 545 
                                         tmp_48 = 4503599627370496UL;
                                    #line 545 
                                    tmp_49 = tmp_48;
                                  }
                                  else 
                                       #line 545 
                                       tmp_49 = 9007199254740992UL;
                                  #line 545 
                                  tmp_50 = tmp_49;
                                }
                                else 
                                     #line 545 
                                     tmp_50 = 18014398509481984UL;
                                #line 545 
                                tmp_51 = tmp_50;
                              }
                              else 
                                   #line 545 
                                   tmp_51 = 36028797018963968UL;
                              #line 545 
                              tmp_52 = tmp_51;
                            }
                            else 
                                 #line 545 
                                 tmp_52 = 72057594037927936UL;
                            #line 545 
                            tmp_53 = tmp_52;
                          }
                          else 
                               #line 545 
                               tmp_53 = 144115188075855872UL;
                          #line 545 
                          tmp_54 = tmp_53;
                        }
                        else 
                             #line 545 
                             tmp_54 = 288230376151711744UL;
                        #line 545 
                        tmp_55 = tmp_54;
                      }
                      else 
                           #line 545 
                           tmp_55 = 576460752303423488UL;
                      #line 545 
                      tmp_56 = tmp_55;
                    }
                    else 
                         #line 545 
                         tmp_56 = 1152921504606846976UL;
                    #line 545 
                    tmp_57 = tmp_56;
                  }
                  else 
                       #line 545 
                       tmp_57 = 2305843009213693952UL;
                  #line 545 
                  tmp_58 = tmp_57;
                }
                else 
                     #line 545 
                     tmp_58 = 4611686018427387904UL;
                #line 545 
                tmp_59 = tmp_58;
              }
              else 
                   #line 545 
                   tmp_59 = 9223372036854775808UL;
              #line 545 
              tmp_60 = tmp_59;
            }
            else 
                 #line 545 
                 tmp_60 = 0UL;
            #line 545 
            tmp_61 = tmp_60;
          }
          else 
               #line 545 
               tmp_61 = 2UL;
          #line 545 
          tmp_63 = tmp_61;
        }
        else {
          #line 545 
          tmp_63 = 1UL << (__ilog2_u32(efx->txq_entries + 4294967295U) + 1);
        }
        #line 545 
        tmp_64 = tmp_63;
      }
      else 
           #line 545 
           tmp_64 = 1UL;
      #line 545 
      tmp_66 = tmp_64;
    }
    else 
         #line 545 
         tmp_66 = __roundup_pow_of_two((unsigned long)efx->txq_entries);
    #line 545 
    __UNIQUE_ID___x551 = tmp_66;
    #line 545 
    unsigned long __UNIQUE_ID___y552 = 512UL;
    #line 545 
    if (__UNIQUE_ID___x551 > __UNIQUE_ID___y552) 
                                                 #line 545 
                                                 tmp_67 = __UNIQUE_ID___x551; else 
                                                                    #line 545 
                                                                    tmp_67 = __UNIQUE_ID___y552;
    }
  #line 545 
  entries = (unsigned int)tmp_67;
  #line 547 
  tx_queue->ptr_mask = entries + 4294967295U;
  #line 549 
  if ((efx->msg_enable & 2U) != 0U) {
    #line 549 
    bool branch;
    #line 549 
    struct _ddebug __UNIQUE_ID_ddebug553 = {.modname = (char *)"sfc_falcon", .function = (char *)"ef4_probe_tx_queue", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/tx.c", .format = (char *)"creating TX queue %d size %#x mask %#x\n", .lineno = (unsigned int)549U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 549 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug553.key.dd_key_false.key,(_Bool)0);
    #line 549 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 549 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug553,efx->net_dev,(char *)"creating TX queue %d size %#x mask %#x\n",tx_queue->queue,efx->txq_entries,tx_queue->ptr_mask);
  }
  #line 554 
  tx_queue->buffer = (struct ef4_tx_buffer *)kcalloc_4((unsigned long)entries,24UL,3264U);
  #line 556 
  if (tx_queue->buffer == (struct ef4_tx_buffer *)0) 
                                                     #line 557 
                                                     return -12;
  #line 559 
  tx_queue->cb_page = (struct ef4_buffer *)kcalloc_4((unsigned long)ef4_tx_cb_page_count(tx_queue),24UL,3264U);
  #line 561 
  if (tx_queue->cb_page == (struct ef4_buffer *)0) {
    #line 562 
    rc = -12;
    #line 563 
    goto fail1;
  }
  #line 567 
  rc = ef4_nic_probe_tx(tx_queue);
  #line 568 
  if (rc != 0) 
               #line 569 
               goto fail2;
  #line 571 
  return 0;
  #line 573 
  fail2: 
         #line 573 
  ;
  #line 574 
  kfree((void *)tx_queue->cb_page);
  #line 575 
  tx_queue->cb_page = (struct ef4_buffer *)0;
  #line 576 
  fail1: 
         #line 576 
  ;
  #line 577 
  kfree((void *)tx_queue->buffer);
  #line 578 
  tx_queue->buffer = (struct ef4_tx_buffer *)0;
  #line 579 
  return rc;
}

#line 582  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/tx.c"
void ef4_init_tx_queue(struct ef4_tx_queue *tx_queue)
{
  #line 584 
  struct ef4_nic *efx = tx_queue->efx;
  #line 586 
  if ((efx->msg_enable & 1U) != 0U) {
    #line 586 
    bool branch;
    #line 586 
    struct _ddebug __UNIQUE_ID_ddebug554 = {.modname = (char *)"sfc_falcon", .function = (char *)"ef4_init_tx_queue", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/tx.c", .format = (char *)"initialising TX queue %d\n", .lineno = (unsigned int)586U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 586 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug554.key.dd_key_false.key,(_Bool)0);
    #line 586 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 586 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug554,efx->net_dev,(char *)"initialising TX queue %d\n",tx_queue->queue);
  }
  #line 589 
  tx_queue->insert_count = 0U;
  #line 590 
  tx_queue->write_count = 0U;
  #line 591 
  tx_queue->old_write_count = 0U;
  #line 592 
  tx_queue->read_count = 0U;
  #line 593 
  tx_queue->old_read_count = 0U;
  #line 594 
  tx_queue->empty_read_count = 2147483648U;
  #line 595 
  tx_queue->xmit_more_available = (_Bool)0;
  #line 598 
  if (ef4_nic_rev(efx) <= 2) 
                             #line 598 
                             tx_queue->tx_min_size = 33U; else 
                                                               #line 598 
                                                               tx_queue->tx_min_size = 0U;
  #line 601 
  ef4_nic_init_tx(tx_queue);
  #line 603 
  tx_queue->initialised = (_Bool)1;
  #line 604 
  return;
}

#line 606  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/tx.c"
void ef4_fini_tx_queue(struct ef4_tx_queue *tx_queue)
{
  #line 608 
  struct ef4_tx_buffer *buffer;
  #line 610 
  if (((tx_queue->efx)->msg_enable & 1U) != 0U) {
    #line 610 
    bool branch;
    #line 610 
    struct _ddebug __UNIQUE_ID_ddebug555 = {.modname = (char *)"sfc_falcon", .function = (char *)"ef4_fini_tx_queue", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/tx.c", .format = (char *)"shutting down TX queue %d\n", .lineno = (unsigned int)610U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 610 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug555.key.dd_key_false.key,(_Bool)0);
    #line 610 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 610 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug555,(tx_queue->efx)->net_dev,(char *)"shutting down TX queue %d\n",tx_queue->queue);
  }
  #line 613 
  if (tx_queue->buffer == (struct ef4_tx_buffer *)0) 
                                                     #line 614 
                                                     return;
  #line 617 
  while (tx_queue->read_count != tx_queue->write_count) {
    #line 618 
    unsigned int pkts_compl = 0U;
    #line 618 
    unsigned int bytes_compl = 0U;
    #line 619 
    buffer = tx_queue->buffer + (unsigned long)(tx_queue->read_count & tx_queue->ptr_mask);
    #line 620 
    ef4_dequeue_buffer(tx_queue,buffer,& pkts_compl,& bytes_compl);
    #line 622 
    (tx_queue->read_count) ++;
  }
  #line 624 
  tx_queue->xmit_more_available = (_Bool)0;
  #line 625 
  netdev_tx_reset_queue(tx_queue->core_txq);
  #line 626 
  return;
}

#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/tx.c"
void ef4_remove_tx_queue(struct ef4_tx_queue *tx_queue)
{
  #line 630 
  int i;
  #line 632 
  if (tx_queue->buffer == (struct ef4_tx_buffer *)0) 
                                                     #line 633 
                                                     return;
  #line 635 
  if (((tx_queue->efx)->msg_enable & 1U) != 0U) {
    #line 635 
    bool branch;
    #line 635 
    struct _ddebug __UNIQUE_ID_ddebug556 = {.modname = (char *)"sfc_falcon", .function = (char *)"ef4_remove_tx_queue", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/tx.c", .format = (char *)"destroying TX queue %d\n", .lineno = (unsigned int)635U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
    #line 635 
    branch = arch_static_branch(& __UNIQUE_ID_ddebug556.key.dd_key_false.key,(_Bool)0);
    #line 635 
    if ((long)((long)((int)branch != 0)) != 0L) 
                                                #line 635 
                                                __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug556,(tx_queue->efx)->net_dev,(char *)"destroying TX queue %d\n",tx_queue->queue);
  }
  #line 637 
  ef4_nic_remove_tx(tx_queue);
  #line 639 
  if (tx_queue->cb_page != (struct ef4_buffer *)0) {
    #line 640 
    i = 0;
    #line 640 
    while (1) {
      #line 640 
      ;
      #line 640 
      if (! (ef4_tx_cb_page_count(tx_queue) > (unsigned int)i)) 
                                                                #line 640 
                                                                break;
      #line 641 
      ef4_nic_free_buffer(tx_queue->efx,tx_queue->cb_page + (unsigned long)i);
      #line 640 
      i ++;
    }
    #line 643 
    kfree((void *)tx_queue->cb_page);
    #line 644 
    tx_queue->cb_page = (struct ef4_buffer *)0;
  }
  #line 647 
  kfree((void *)tx_queue->buffer);
  #line 648 
  tx_queue->buffer = (struct ef4_tx_buffer *)0;
  #line 649 
  return;
}

#line 123  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/tx.i.aux"
static void cif_set_bit_2(long nr, unsigned long *addr)
{
  #line 126 
  ldv_set_bit(nr,addr);
  #line 127 
  return;
}

#line 130  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/tx.i.aux"
static void cif_clear_bit_2(long nr, unsigned long *addr)
{
  #line 133 
  ldv_clear_bit(nr,addr);
  #line 134 
  return;
}

#line 475  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/tx.i.aux"
static void *kcalloc_4(size_t n, size_t size, gfp_t flags)
{
  #line 478 
  return ldv_kcalloc(n,size,flags);
}

#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/string.h"
#line 59 
char *strchr(char *, int);
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cmpxchg_64.h"
__inline static int arch_atomic_read_3(atomic_t *v)
{
  #line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
  union __anonunion___u_13409 __u;
  #line 31 
  __read_once_size((void *)(& v->counter),(void *)(& __u.__c),4);
  #line 31 
  return (__u.__val);
}

#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
__inline static int atomic_read_3(atomic_t *v)
{
  #line 26 
  kasan_check_read((void *)v,4U);
  #line 27 
  return arch_atomic_read_3(v);
}

#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock_bh_2(spinlock_t *lock)
{
  #line 343 
  _raw_spin_lock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 344 
  return;
}

#line 345 
#line 831  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/ethtool.i.aux"
static void cif_spin_lock_bh_stats_lock_of_ef4_nic_1(spinlock_t *lock);
#line 381  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_bh_3(spinlock_t *lock)
{
  #line 383 
  _raw_spin_unlock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 384 
  return;
}

#line 385 
#line 840  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/ethtool.i.aux"
static void cif_spin_unlock_bh_stats_lock_of_ef4_nic_1(spinlock_t *lock);
#line 26 
#line 817 
static void cif_mutex_lock_mac_lock_of_ef4_nic_3(struct mutex *lock);
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
#line 824  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/ethtool.i.aux"
static void cif_mutex_unlock_mac_lock_of_ef4_nic_3(struct mutex *lock);
#line 668  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 376  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/ethtool.i.aux"
static void *kzalloc_6(size_t size, gfp_t flags);
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
#line 86 
u32 ethtool_op_get_link(struct net_device *);
#line 2657  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 2657 
int dev_open(struct net_device *, struct netlink_ext_ack *);
#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_broadcast_ether_addr(u8 *addr)
{
  #line 166 
  return (_Bool)((unsigned int)(((int)*((u16 *)addr) & (int)*((u16 *)(addr + 2U))) & (int)*((u16 *)(addr + 4U))) == 65535U);
}

#line 238  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static void eth_broadcast_addr(u8 *addr)
{
  #line 240 
  memset((void *)addr,255,6UL);
  #line 241 
  return;
}

#line 315  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool ether_addr_equal(u8 *addr1, u8 *addr2)
{
  #line 318 
  u32 fold = (*((u32 *)addr1) ^ *((u32 *)addr2)) | (unsigned int)((int)*((u16 *)(addr1 + 4U)) ^ (int)*((u16 *)(addr2 + 4U)));
  #line 321 
  return (_Bool)(fold == 0U);
}

#line 145  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mdio.h"
#line 145 
int mdio45_nway_restart(struct mdio_if_info *);
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.h"
__inline static s32 ef4_filter_insert_filter(struct ef4_nic *efx, struct ef4_filter_spec *spec, bool replace_equal)
{
  #line 111 
  return (*((efx->type)->filter_insert))(efx,spec,
                                      (_Bool)((bool)((int)replace_equal) != 0));
}

#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.h"
__inline static int ef4_filter_remove_id_safe(struct ef4_nic *efx, enum ef4_filter_priority priority, u32 filter_id)
{
  #line 127 
  return (*((efx->type)->filter_remove_safe))(efx,priority,filter_id);
}

#line 141  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.h"
__inline static int ef4_filter_get_filter_safe(struct ef4_nic *efx, enum ef4_filter_priority priority, u32 filter_id, struct ef4_filter_spec *spec)
{
  #line 145 
  return (*((efx->type)->filter_get_safe))(efx,priority,filter_id,spec);
}

#line 148  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.h"
__inline static u32 ef4_filter_count_rx_used(struct ef4_nic *efx, enum ef4_filter_priority priority)
{
  #line 151 
  return (*((efx->type)->filter_count_rx_used))(efx,priority);
}

#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.h"
__inline static u32 ef4_filter_get_rx_id_limit(struct ef4_nic *efx)
{
  #line 155 
  return (*((efx->type)->filter_get_rx_id_limit))(efx);
}

#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/efx.h"
__inline static s32 ef4_filter_get_rx_ids(struct ef4_nic *efx, enum ef4_filter_priority priority, u32 *buf, u32 size)
{
  #line 161 
  return (*((efx->type)->filter_get_rx_ids))(efx,priority,buf,size);
}

#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/ethtool.c"
static u64 ef4_get_uint_stat(void *field)
{
  #line 44 
  return (unsigned long long)*((unsigned int *)field);
}

#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/ethtool.c"
static u64 ef4_get_atomic_stat(void *field)
{
  #line 49 
  return (unsigned long long)atomic_read_3((atomic_t *)field);
}

#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/ethtool.c"
static struct ef4_sw_stat_desc ef4_sw_stat_desc[11U] = {{.name = (char *)"tx_merge_events", .source = EF4_ETHTOOL_STAT_SOURCE_tx_queue, .offset = 136U, .get_stat = & ef4_get_uint_stat}, {.name = (char *)"tx_pushes", .source = EF4_ETHTOOL_STAT_SOURCE_tx_queue, .offset = 204U, .get_stat = & ef4_get_uint_stat}, {.name = (char *)"tx_cb_packets", .source = EF4_ETHTOOL_STAT_SOURCE_tx_queue, .offset = 212U, .get_stat = & ef4_get_uint_stat}, {.name = (char *)"rx_reset", .offset = 3152U, .get_stat = & ef4_get_atomic_stat}, {.name = (char *)"rx_tobe_disc", .source = EF4_ETHTOOL_STAT_SOURCE_channel, .offset = 512U, .get_stat = & ef4_get_uint_stat}, {.name = (char *)"rx_ip_hdr_chksum_err", .source = EF4_ETHTOOL_STAT_SOURCE_channel, .offset = 516U, .get_stat = & ef4_get_uint_stat}, {.name = (char *)"rx_tcp_udp_chksum_err", .source = EF4_ETHTOOL_STAT_SOURCE_channel, .offset = 520U, .get_stat = & ef4_get_uint_stat}, {.name = (char *)"rx_mcast_mismatch", .source = EF4_ETHTOOL_STAT_SOURCE_channel, .offset = 524U, .get_stat = & ef4_get_uint_stat}, {.name = (char *)"rx_frm_trunc", .source = EF4_ETHTOOL_STAT_SOURCE_channel, .offset = 528U, .get_stat = & ef4_get_uint_stat}, {.name = (char *)"rx_merge_events", .source = EF4_ETHTOOL_STAT_SOURCE_channel, .offset = 544U, .get_stat = & ef4_get_uint_stat}, {.name = (char *)"rx_merge_packets", .source = EF4_ETHTOOL_STAT_SOURCE_channel, .offset = 548U, .get_stat = & ef4_get_uint_stat}};
#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/ethtool.c"
static int ef4_ethtool_phys_id(struct net_device *net_dev, enum ethtool_phys_id_state state)
{
  #line 93 
  struct ef4_nic *efx = netdev_priv(net_dev);
  #line 94 
  enum ef4_led_mode mode = EF4_LED_DEFAULT;
  #line 96 
  switch ((unsigned int)state) {
    #line 97 
    case (unsigned int)2: 
                          #line 97 
    ;
    #line 98 
    mode = EF4_LED_ON;
    #line 99 
    break;
    #line 100 
    case (unsigned int)3: 
                          #line 100 
    ;
    #line 101 
    mode = EF4_LED_OFF;
    #line 102 
    break;
    #line 103 
    case (unsigned int)0: 
                          #line 103 
    ;
    #line 104 
    mode = EF4_LED_DEFAULT;
    #line 105 
    break;
    #line 106 
    case (unsigned int)1: 
                          #line 106 
    ;
    #line 107 
    return 1;
  }
  #line 110 
  (*((efx->type)->set_id_led))(efx,mode);
  #line 111 
  return 0;
}

#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/ethtool.c"
static int ef4_ethtool_get_link_ksettings(struct net_device *net_dev, struct ethtool_link_ksettings *cmd)
{
  #line 119 
  struct ef4_nic *efx = netdev_priv(net_dev);
  #line 120 
  struct ef4_link_state *link_state = & efx->link_state;
  #line 122 
  cif_mutex_lock_mac_lock_of_ef4_nic_3(& efx->mac_lock);
  #line 123 
  (*((efx->phy_op)->get_link_ksettings))(efx,cmd);
  #line 124 
  cif_mutex_unlock_mac_lock_of_ef4_nic_3(& efx->mac_lock);
  #line 127 
  __clear_bit(13L,(unsigned long *)(& cmd->link_modes.supported));
  #line 128 
  __clear_bit(14L,(unsigned long *)(& cmd->link_modes.supported));
  #line 130 
  if (((66600958 >> (unsigned int)efx->loopback_mode) & 1) != 0) {
    #line 131 
    cmd->base.speed = link_state->speed;
    #line 132 
    cmd->base.duplex = (unsigned char)((int)link_state->fd != 0);
  }
  #line 135 
  return 0;
}

#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/ethtool.c"
static int ef4_ethtool_set_link_ksettings(struct net_device *net_dev, struct ethtool_link_ksettings *cmd)
{
  #line 144 
  int rc;
  #line 143 
  struct ef4_nic *efx = netdev_priv(net_dev);
  #line 147 
  if (cmd->base.speed == 1000U && (unsigned int)cmd->base.duplex != 1U) {
    #line 149 
    if ((efx->msg_enable & 1U) != 0U) {
      #line 149 
      bool branch;
      #line 149 
      struct _ddebug __UNIQUE_ID_ddebug541 = {.modname = (char *)"sfc_falcon", .function = (char *)"ef4_ethtool_set_link_ksettings", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/ethtool.c", .format = (char *)"rejecting unsupported 1000Mbps HD setting\n", .lineno = (unsigned int)149U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 149 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug541.key.dd_key_false.key,(_Bool)0);
      #line 149 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 149 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug541,efx->net_dev,(char *)"rejecting unsupported 1000Mbps HD setting\n");
    }
    #line 151 
    return -22;
  }
  #line 154 
  cif_mutex_lock_mac_lock_of_ef4_nic_3(& efx->mac_lock);
  #line 155 
  rc = (*((efx->phy_op)->set_link_ksettings))(efx,cmd);
  #line 156 
  cif_mutex_unlock_mac_lock_of_ef4_nic_3(& efx->mac_lock);
  #line 157 
  return rc;
}

#line 160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/ethtool.c"
static void ef4_ethtool_get_drvinfo(struct net_device *net_dev, struct ethtool_drvinfo *info)
{
  #line 163 
  struct ef4_nic *efx = netdev_priv(net_dev);
  #line 165 
  strlcpy((char *)(& info->driver),(char *)"sfc_falcon",32UL);
  #line 166 
  strlcpy((char *)(& info->version),(char *)"4.1",32UL);
  #line 167 
  ;
  #line 167 
  strlcpy((char *)(& info->bus_info),pci_name(efx->pci_dev),32UL);
  #line 168 
  return;
}

#line 170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/ethtool.c"
static int ef4_ethtool_get_regs_len(struct net_device *net_dev)
{
  #line 172 
  return (int)ef4_nic_get_regs_len((struct ef4_nic *)netdev_priv(net_dev));
}

#line 175  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/ethtool.c"
static void ef4_ethtool_get_regs(struct net_device *net_dev, struct ethtool_regs *regs, void *buf)
{
  #line 178 
  struct ef4_nic *efx = netdev_priv(net_dev);
  #line 180 
  regs->version = (unsigned int)(efx->type)->revision;
  #line 181 
  ef4_nic_get_regs(efx,buf);
  #line 182 
  return;
}

#line 184  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/ethtool.c"
static u32 ef4_ethtool_get_msglevel(struct net_device *net_dev)
{
  #line 186 
  struct ef4_nic *efx = netdev_priv(net_dev);
  #line 187 
  return efx->msg_enable;
}

#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/ethtool.c"
static void ef4_ethtool_set_msglevel(struct net_device *net_dev, u32 msg_enable)
{
  #line 192 
  struct ef4_nic *efx = netdev_priv(net_dev);
  #line 193 
  efx->msg_enable = msg_enable;
  #line 194 
  return;
}

#line 209  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/ethtool.c"
static void ef4_fill_test(unsigned int test_index, u8 *strings, u64 *data, int *test, char *unit_format, int unit_id, char *test_format, char *test_id)
{
  #line 213 
  char unit_str[32U];
  #line 213 
  char test_str[32U];
  #line 216 
  if (data != (u64 *)0ULL) 
                           #line 217 
                           *(data + (unsigned long)test_index) = (unsigned long long)*test;
  #line 220 
  if (strings != (u8 *)0U) {
    #line 221 
    if (strchr(unit_format,37) != (char *)0) 
                                             #line 222 
                                             snprintf((char *)(& unit_str),32UL,unit_format,unit_id); else 
                                                                    #line 225 
                                                                    strcpy((char *)(& unit_str),unit_format);
    #line 226 
    snprintf((char *)(& test_str),32UL,test_format,test_id);
    #line 227 
    snprintf((char *)(strings + (unsigned long)(test_index * 32U)),32UL,(char *)"%-6s %-24s",(char *)(& unit_str),(char *)(& test_str));
  }
  #line 231 
  return;
}

#line 251  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/ethtool.c"
static int ef4_fill_loopback_test(struct ef4_nic *efx, struct ef4_loopback_self_tests *lb_tests, enum ef4_loopback_mode mode, unsigned int test_index, u8 *strings, u64 *data)
{
  #line 259 
  struct ef4_tx_queue *tx_queue;
  #line 274 
  char *tmp_6;
  #line 271 
  unsigned int tmp_7;
  #line 278 
  char *tmp_8;
  #line 275 
  unsigned int tmp_9;
  #line 257 
  struct ef4_channel *channel = ef4_get_channel(efx,efx->tx_channel_offset);
  #line 261 
  if (ef4_channel_has_tx_queues(channel)) {
    #line 261 
    tx_queue = (struct ef4_tx_queue *)(& channel->tx_queue);
    #line 261 
    while (1) {
      #line 261 
      if ((struct ef4_tx_queue *)(& channel->tx_queue) + 4U > tx_queue) {
        #line 261 
        if (! ((int)ef4_tx_queue_used(tx_queue) != 0)) 
                                                       #line 261 
                                                       break;
      }
      else 
           #line 261 
           break;
      {
        #line 265 
        char *tmp_0;
        #line 262 
        unsigned int tmp_1;
        #line 269 
        char *tmp_2;
        #line 266 
        unsigned int tmp_3;
        #line 265 
        if (mode < (enum ef4_loopback_mode)ef4_loopback_mode_max) 
                                                                  #line 265 
                                                                  tmp_0 = ef4_loopback_mode_names[(unsigned int)mode]; else 
                                                                    #line 265 
                                                                    tmp_0 = (char *)"(invalid)";
        #line 262 
        ;
        #line 262 
        ;
        #line 262 
        ;
        #line 262 
        ;
        #line 262 
        tmp_1 = test_index;
        #line 262 
        test_index ++;
        #line 262 
        ;
        #line 262 
        ef4_fill_test(tmp_1,strings,data,& lb_tests->tx_sent[tx_queue->queue],(char *)"txq%d",(int)tx_queue->queue,(char *)"loopback.%s.",tmp_0);
        #line 269 
        if (mode < (enum ef4_loopback_mode)ef4_loopback_mode_max) 
                                                                  #line 269 
                                                                  tmp_2 = ef4_loopback_mode_names[(unsigned int)mode]; else 
                                                                    #line 269 
                                                                    tmp_2 = (char *)"(invalid)";
        #line 266 
        ;
        #line 266 
        ;
        #line 266 
        ;
        #line 266 
        ;
        #line 266 
        tmp_3 = test_index;
        #line 266 
        test_index ++;
        #line 266 
        ;
        #line 266 
        ef4_fill_test(tmp_3,strings,data,& lb_tests->tx_done[tx_queue->queue],(char *)"txq%d",(int)tx_queue->queue,(char *)"loopback.%s.",tmp_2);
      }
      #line 261 
      tx_queue ++;
    }
  }
  #line 274 
  if (mode < (enum ef4_loopback_mode)ef4_loopback_mode_max) 
                                                            #line 274 
                                                            tmp_6 = ef4_loopback_mode_names[(unsigned int)mode]; else 
                                                                    #line 274 
                                                                    tmp_6 = (char *)"(invalid)";
  #line 271 
  ;
  #line 271 
  ;
  #line 271 
  ;
  #line 271 
  tmp_7 = test_index;
  #line 271 
  test_index ++;
  #line 271 
  ;
  #line 271 
  ef4_fill_test(tmp_7,strings,data,& lb_tests->rx_good,(char *)"rx",0,(char *)"loopback.%s.",tmp_6);
  #line 278 
  if (mode < (enum ef4_loopback_mode)ef4_loopback_mode_max) 
                                                            #line 278 
                                                            tmp_8 = ef4_loopback_mode_names[(unsigned int)mode]; else 
                                                                    #line 278 
                                                                    tmp_8 = (char *)"(invalid)";
  #line 275 
  ;
  #line 275 
  ;
  #line 275 
  ;
  #line 275 
  tmp_9 = test_index;
  #line 275 
  test_index ++;
  #line 275 
  ;
  #line 275 
  ef4_fill_test(tmp_9,strings,data,& lb_tests->rx_bad,(char *)"rx",0,(char *)"loopback.%s.",tmp_8);
  #line 280 
  return (int)test_index;
}

#line 296  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/ethtool.c"
static int ef4_ethtool_fill_self_tests(struct ef4_nic *efx, struct ef4_self_tests *tests, u8 *strings, u64 *data)
{
  #line 300 
  struct ef4_channel *channel;
  #line 301 
  unsigned int i;
  #line 302 
  enum ef4_loopback_mode mode;
  #line 304 
  unsigned int tmp;
  #line 306 
  unsigned int tmp_0;
  #line 308 
  unsigned int tmp_1;
  #line 323 
  unsigned int tmp_4;
  #line 325 
  unsigned int tmp_5;
  #line 301 
  unsigned int n = 0U;
  #line 304 
  ;
  #line 304 
  ;
  #line 304 
  ;
  #line 304 
  tmp = n;
  #line 304 
  n ++;
  #line 304 
  ;
  #line 304 
  ef4_fill_test(tmp,strings,data,& tests->phy_alive,(char *)"phy",0,(char *)"alive",(char *)0);
  #line 306 
  ;
  #line 306 
  ;
  #line 306 
  ;
  #line 306 
  tmp_0 = n;
  #line 306 
  n ++;
  #line 306 
  ;
  #line 306 
  ef4_fill_test(tmp_0,strings,data,& tests->nvram,(char *)"core",0,(char *)"nvram",(char *)0);
  #line 308 
  ;
  #line 308 
  ;
  #line 308 
  ;
  #line 308 
  tmp_1 = n;
  #line 308 
  n ++;
  #line 308 
  ;
  #line 308 
  ef4_fill_test(tmp_1,strings,data,& tests->interrupt,(char *)"core",0,(char *)"interrupt",(char *)0);
  #line 312 
  channel = efx->channel[0];
  #line 312 
  while (channel != (struct ef4_channel *)0) {
    {
      #line 313 
      unsigned int tmp_2;
      #line 317 
      unsigned int tmp_3;
      #line 313 
      ;
      #line 313 
      ;
      #line 313 
      ;
      #line 313 
      ;
      #line 313 
      tmp_2 = n;
      #line 313 
      n ++;
      #line 313 
      ;
      #line 313 
      ef4_fill_test(tmp_2,strings,data,& tests->eventq_dma[channel->channel],(char *)"chan%d",channel->channel,(char *)"eventq.dma",(char *)0);
      #line 317 
      ;
      #line 317 
      ;
      #line 317 
      ;
      #line 317 
      ;
      #line 317 
      tmp_3 = n;
      #line 317 
      n ++;
      #line 317 
      ;
      #line 317 
      ef4_fill_test(tmp_3,strings,data,& tests->eventq_int[channel->channel],(char *)"chan%d",channel->channel,(char *)"eventq.int",(char *)0);
    }
    #line 312 
    if ((unsigned int)(channel->channel + 1) < efx->n_channels) 
                                                                #line 312 
                                                                channel = efx->channel[channel->channel + 1]; else 
                                                                    #line 312 
                                                                    channel = (struct ef4_channel *)0;
  }
  #line 323 
  ;
  #line 323 
  ;
  #line 323 
  ;
  #line 323 
  tmp_4 = n;
  #line 323 
  n ++;
  #line 323 
  ;
  #line 323 
  ef4_fill_test(tmp_4,strings,data,& tests->memory,(char *)"core",0,(char *)"memory",(char *)0);
  #line 325 
  ;
  #line 325 
  ;
  #line 325 
  ;
  #line 325 
  tmp_5 = n;
  #line 325 
  n ++;
  #line 325 
  ;
  #line 325 
  ef4_fill_test(tmp_5,strings,data,& tests->registers,(char *)"core",0,(char *)"registers",(char *)0);
  #line 328 
  if ((efx->phy_op)->run_tests != (int (*)(struct ef4_nic *, int *, unsigned int ))0) {
    #line 331 
    i = 0U;
    #line 331 
    while (1) {
      {
        #line 332 
        char *name;
        #line 339 
        unsigned int tmp_6;
        #line 335 
        name = (*((efx->phy_op)->test_name))(efx,i);
        #line 336 
        if (name == (char *)0) 
                               #line 337 
                               break;
        #line 339 
        ;
        #line 339 
        ;
        #line 339 
        ;
        #line 339 
        ;
        #line 339 
        tmp_6 = n;
        #line 339 
        n ++;
        #line 339 
        ;
        #line 339 
        ef4_fill_test(tmp_6,strings,data,& tests->phy_ext[i],(char *)"phy",0,name,(char *)0);
      }
      #line 331 
      i ++;
    }
  }
  #line 345 
  mode = LOOPBACK_NONE;
  #line 345 
  while (mode <= (unsigned int)LOOPBACK_PMAPMD) {
    {
      #line 346 
      if ((efx->loopback_modes & (unsigned long long)(1 << (unsigned int)mode)) == 0ULL) 
        #line 347 
        goto __Cont;
      #line 348 
      n = (unsigned int)ef4_fill_loopback_test(efx,& tests->loopback[(unsigned int)mode],
                               mode,n,strings,data);
    }
    #line 345 
    __Cont: 
            #line 345 
    mode ++;
  }
  #line 353 
  return (int)n;
}

#line 356  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/ethtool.c"
static size_t ef4_describe_per_queue_stats(struct ef4_nic *efx, u8 *strings)
{
  #line 359 
  struct ef4_channel *channel;
  #line 358 
  size_t n_stats = 0UL;
  #line 361 
  channel = efx->channel[0];
  #line 361 
  while (channel != (struct ef4_channel *)0) {
    #line 362 
    if ((int)ef4_channel_has_tx_queues(channel) != 0) {
      #line 363 
      n_stats ++;
      #line 364 
      if (strings != (u8 *)0U) {
        #line 365 
        snprintf((char *)strings,32UL,(char *)"tx-%u.tx_packets",channel->tx_queue[0].queue / 4U);
        #line 370 
        strings += 32U;
      }
    }
    #line 361 
    if ((unsigned int)(channel->channel + 1) < efx->n_channels) 
                                                                #line 361 
                                                                channel = efx->channel[channel->channel + 1]; else 
                                                                    #line 361 
                                                                    channel = (struct ef4_channel *)0;
  }
  #line 374 
  channel = efx->channel[0];
  #line 374 
  while (channel != (struct ef4_channel *)0) {
    #line 375 
    if ((int)ef4_channel_has_rx_queue(channel) != 0) {
      #line 376 
      n_stats ++;
      #line 377 
      if (strings != (u8 *)0U) {
        #line 378 
        snprintf((char *)strings,32UL,(char *)"rx-%d.rx_packets",channel->channel);
        #line 380 
        strings += 32U;
      }
    }
    #line 374 
    if ((unsigned int)(channel->channel + 1) < efx->n_channels) 
                                                                #line 374 
                                                                channel = efx->channel[channel->channel + 1]; else 
                                                                    #line 374 
                                                                    channel = (struct ef4_channel *)0;
  }
  #line 384 
  return n_stats;
}

#line 387  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/ethtool.c"
static int ef4_ethtool_get_sset_count(struct net_device *net_dev, int string_set)
{
  #line 390 
  struct ef4_nic *efx = netdev_priv(net_dev);
  #line 392 
  switch (string_set) {
    #line 393 
    case 1: 
            #line 393 
    ;
    #line 395 
    return (int)(((*((efx->type)->describe_stats))(efx,(u8 *)0U) + ef4_describe_per_queue_stats(efx,(u8 *)0U)) + (size_t)11U);
    #line 397 
    case 0: 
            #line 397 
    ;
    #line 398 
    return ef4_ethtool_fill_self_tests(efx,(struct ef4_self_tests *)0,(u8 *)0U,
                                    (u64 *)0ULL);
    #line 399 
    default: 
             #line 399 
    ;
    #line 400 
    return -22;
  }
}

#line 404  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/ethtool.c"
static void ef4_ethtool_get_strings(struct net_device *net_dev, u32 string_set, u8 *strings)
{
  #line 408 
  int i;
  #line 407 
  struct ef4_nic *efx = netdev_priv(net_dev);
  #line 410 
  switch (string_set) {
    #line 411 
    case (u32)1: 
                 #line 411 
    ;
    #line 413 
    strings += (*((efx->type)->describe_stats))(efx,strings) * 32UL;
    #line 414 
    i = 0;
    #line 414 
    while ((unsigned int)i <= 10U) {
      #line 415 
      strlcpy((char *)(strings + (unsigned long)(i * 32)),ef4_sw_stat_desc[i].name,32UL);
      #line 414 
      i ++;
    }
    #line 417 
    strings += 352UL;
    #line 419 
    strings += ef4_describe_per_queue_stats(efx,strings) * 32UL;
    #line 420 
    break;
    #line 421 
    case (u32)0: 
                 #line 421 
    ;
    #line 422 
    ef4_ethtool_fill_self_tests(efx,(struct ef4_self_tests *)0,strings,(u64 *)0ULL);
    #line 423 
    break;
    #line 424 
    default: 
             #line 424 
    ;
    #line 426 
    break;
  }
  #line 428 
  return;
}

#line 430  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/ethtool.c"
static void ef4_ethtool_get_stats(struct net_device *net_dev, struct ethtool_stats *stats, u64 *data)
{
  #line 435 
  struct ef4_sw_stat_desc *stat;
  #line 436 
  struct ef4_channel *channel;
  #line 437 
  struct ef4_tx_queue *tx_queue;
  #line 438 
  struct ef4_rx_queue *rx_queue;
  #line 439 
  int i;
  #line 434 
  struct ef4_nic *efx = netdev_priv(net_dev);
  #line 441 
  cif_spin_lock_bh_stats_lock_of_ef4_nic_1(& efx->stats_lock);
  #line 444 
  data += (*((efx->type)->update_stats))(efx,data,
                                       (struct rtnl_link_stats64 *)0);
  #line 447 
  i = 0;
  #line 447 
  while ((unsigned int)i <= 10U) {
    #line 448 
    stat = & ef4_sw_stat_desc[i];
    #line 449 
    switch ((unsigned int)stat->source) {
      #line 450 
      case (unsigned int)0: 
                            #line 450 
      ;
      #line 451 
      *(data + (unsigned long)i) = (*(stat->get_stat))((void *)efx + (unsigned long)stat->offset);
      #line 452 
      break;
      #line 453 
      case (unsigned int)1: 
                            #line 453 
      ;
      #line 454 
      *(data + (unsigned long)i) = 0ULL;
      #line 455 
      channel = efx->channel[0];
      #line 455 
      while (channel != (struct ef4_channel *)0) {
        #line 457 
        *(data + (unsigned long)i) += (*(stat->get_stat))((void *)channel + (unsigned long)stat->offset);
        #line 455 
        if ((unsigned int)(channel->channel + 1) < efx->n_channels) 
                                                                    #line 455 
                                                                    channel = efx->channel[channel->channel + 1]; else 
                                                                    #line 455 
                                                                    channel = (struct ef4_channel *)0;
      }
      #line 458 
      break;
      #line 459 
      case (unsigned int)2: 
                            #line 459 
      ;
      #line 460 
      *(data + (unsigned long)i) = 0ULL;
      #line 461 
      channel = efx->channel[0];
      #line 461 
      while (channel != (struct ef4_channel *)0) {
        #line 462 
        if (ef4_channel_has_tx_queues(channel)) {
          #line 462 
          tx_queue = (struct ef4_tx_queue *)(& channel->tx_queue);
          #line 462 
          while (1) {
            #line 462 
            if ((struct ef4_tx_queue *)(& channel->tx_queue) + 4U > tx_queue) {
              #line 462 
              if (! ((int)ef4_tx_queue_used(tx_queue) != 0)) 
                                                             #line 462 
                                                             break;
            }
            else 
                 #line 462 
                 break;
            #line 465 
            *(data + (unsigned long)i) += (*(stat->get_stat))((void *)tx_queue + (unsigned long)stat->offset);
            #line 462 
            tx_queue ++;
          }
        }
        #line 461 
        if ((unsigned int)(channel->channel + 1) < efx->n_channels) 
                                                                    #line 461 
                                                                    channel = efx->channel[channel->channel + 1]; else 
                                                                    #line 461 
                                                                    channel = (struct ef4_channel *)0;
      }
      #line 467 
      break;
    }
    #line 447 
    i ++;
  }
  #line 470 
  data += 11UL;
  #line 472 
  cif_spin_unlock_bh_stats_lock_of_ef4_nic_1(& efx->stats_lock);
  #line 474 
  channel = efx->channel[0];
  #line 474 
  while (channel != (struct ef4_channel *)0) {
    #line 475 
    if ((int)ef4_channel_has_tx_queues(channel) != 0) {
      #line 476 
      *data = 0ULL;
      #line 477 
      if (ef4_channel_has_tx_queues(channel)) {
        #line 477 
        tx_queue = (struct ef4_tx_queue *)(& channel->tx_queue);
        #line 477 
        while (1) {
          #line 477 
          if ((struct ef4_tx_queue *)(& channel->tx_queue) + 4U > tx_queue) {
            #line 477 
            if (! ((int)ef4_tx_queue_used(tx_queue) != 0)) 
                                                           #line 477 
                                                           break;
          }
          else 
               #line 477 
               break;
          #line 478 
          *data += (unsigned long long)tx_queue->tx_packets;
          #line 477 
          tx_queue ++;
        }
      }
      #line 480 
      data ++;
    }
    #line 474 
    if ((unsigned int)(channel->channel + 1) < efx->n_channels) 
                                                                #line 474 
                                                                channel = efx->channel[channel->channel + 1]; else 
                                                                    #line 474 
                                                                    channel = (struct ef4_channel *)0;
  }
  #line 483 
  channel = efx->channel[0];
  #line 483 
  while (channel != (struct ef4_channel *)0) {
    #line 484 
    if ((int)ef4_channel_has_rx_queue(channel) != 0) {
      #line 485 
      *data = 0ULL;
      #line 486 
      if (ef4_channel_has_rx_queue(channel)) {
        #line 486 
        rx_queue = & channel->rx_queue;
        #line 486 
        while (rx_queue != (struct ef4_rx_queue *)0) {
          #line 487 
          *data += (unsigned long long)rx_queue->rx_packets;
          #line 486 
          rx_queue = (struct ef4_rx_queue *)0;
        }
      }
      #line 489 
      data ++;
    }
    #line 483 
    if ((unsigned int)(channel->channel + 1) < efx->n_channels) 
                                                                #line 483 
                                                                channel = efx->channel[channel->channel + 1]; else 
                                                                    #line 483 
                                                                    channel = (struct ef4_channel *)0;
  }
  #line 491 
  return;
}

#line 494  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/ethtool.c"
static void ef4_ethtool_self_test(struct net_device *net_dev, struct ethtool_test *test, u64 *data)
{
  #line 498 
  struct ef4_self_tests *ef4_tests;
  #line 499 
  bool already_up;
  #line 497 
  struct ef4_nic *efx = netdev_priv(net_dev);
  #line 500 
  int rc = -12;
  #line 502 
  ef4_tests = (struct ef4_self_tests *)kzalloc_6(1076UL,3264U);
  #line 503 
  if (ef4_tests == (struct ef4_self_tests *)0) 
                                               #line 504 
                                               goto fail;
  #line 506 
  if (efx->state != (unsigned int)STATE_READY) {
    #line 507 
    rc = -16;
    #line 508 
    goto out;
  }
  #line 511 
  if ((efx->msg_enable & 1U) != 0U) {
    #line 511 
    char *tmp_1;
    #line 511 
    if ((test->flags & 1U) != 0U) 
                                  #line 511 
                                  tmp_1 = (char *)"off"; else 
                                                              #line 511 
                                                              tmp_1 = (char *)"on";
    #line 511 
    ;
    #line 511 
    netdev_info(efx->net_dev,(char *)"starting %sline testing\n",tmp_1);
  }
  #line 515 
  already_up = (_Bool)(((efx->net_dev)->flags & 1U) != 0U);
  #line 516 
  if (! already_up) {
    #line 517 
    rc = dev_open(efx->net_dev,(struct netlink_ext_ack *)0);
    #line 518 
    if (rc != 0) {
      #line 519 
      if ((efx->msg_enable & 1U) != 0U) 
                                        #line 519 
                                        netdev_err(efx->net_dev,(char *)"failed opening device.\n");
      #line 521 
      goto out;
    }
  }
  #line 525 
  rc = ef4_selftest(efx,ef4_tests,test->flags);
  #line 527 
  if (! already_up) 
                    #line 528 
                    dev_close(efx->net_dev);
  #line 530 
  if ((efx->msg_enable & 1U) != 0U) {
    #line 530 
    char *tmp_2;
    #line 530 
    char *tmp_3;
    #line 530 
    if ((test->flags & 1U) != 0U) 
                                  #line 530 
                                  tmp_2 = (char *)"off"; else 
                                                              #line 530 
                                                              tmp_2 = (char *)"on";
    #line 530 
    if (rc == 0) 
                 #line 530 
                 tmp_3 = (char *)"passed"; else 
                                                #line 530 
                                                tmp_3 = (char *)"failed";
    #line 530 
    ;
    #line 530 
    netdev_info(efx->net_dev,(char *)"%s %sline self-tests\n",tmp_3,tmp_2);
  }
  #line 534 
  out: 
       #line 534 
  ;
  #line 535 
  ef4_ethtool_fill_self_tests(efx,ef4_tests,(u8 *)0U,data);
  #line 536 
  kfree((void *)ef4_tests);
  #line 537 
  fail: 
        #line 537 
  ;
  #line 538 
  if (rc != 0) 
               #line 539 
               test->flags |= 2U;
  #line 540 
  return;
}

#line 543  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/ethtool.c"
static int ef4_ethtool_nway_reset(struct net_device *net_dev)
{
  #line 545 
  struct ef4_nic *efx = netdev_priv(net_dev);
  #line 547 
  return mdio45_nway_restart(& efx->mdio);
}

#line 579  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/ethtool.c"
static int ef4_ethtool_get_coalesce(struct net_device *net_dev, struct ethtool_coalesce *coalesce)
{
  #line 583 
  unsigned int tx_usecs;
  #line 583 
  unsigned int rx_usecs;
  #line 584 
  bool rx_adaptive;
  #line 582 
  struct ef4_nic *efx = netdev_priv(net_dev);
  #line 586 
  ef4_get_irq_moderation(efx,& tx_usecs,& rx_usecs,& rx_adaptive);
  #line 588 
  coalesce->tx_coalesce_usecs = tx_usecs;
  #line 589 
  coalesce->tx_coalesce_usecs_irq = tx_usecs;
  #line 590 
  coalesce->rx_coalesce_usecs = rx_usecs;
  #line 591 
  coalesce->rx_coalesce_usecs_irq = rx_usecs;
  #line 592 
  coalesce->use_adaptive_rx_coalesce = (unsigned int)rx_adaptive;
  #line 594 
  return 0;
}

#line 597  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/ethtool.c"
static int ef4_ethtool_set_coalesce(struct net_device *net_dev, struct ethtool_coalesce *coalesce)
{
  #line 601 
  struct ef4_channel *channel;
  #line 602 
  unsigned int tx_usecs;
  #line 602 
  unsigned int rx_usecs;
  #line 603 
  bool adaptive;
  #line 603 
  bool rx_may_override_tx;
  #line 604 
  int rc;
  #line 600 
  struct ef4_nic *efx = netdev_priv(net_dev);
  #line 606 
  if (coalesce->use_adaptive_tx_coalesce != 0U) 
                                                #line 607 
                                                return -22;
  #line 609 
  ef4_get_irq_moderation(efx,& tx_usecs,& rx_usecs,& adaptive);
  #line 611 
  if (coalesce->rx_coalesce_usecs != rx_usecs) 
                                               #line 612 
                                               rx_usecs = coalesce->rx_coalesce_usecs; else 
                                                                    #line 614 
                                                                    rx_usecs = coalesce->rx_coalesce_usecs_irq;
  #line 616 
  adaptive = (_Bool)(coalesce->use_adaptive_rx_coalesce != 0U);
  #line 621 
  rx_may_override_tx = (_Bool)((coalesce->tx_coalesce_usecs == tx_usecs && coalesce->tx_coalesce_usecs_irq == tx_usecs) != 0);
  #line 623 
  if (coalesce->tx_coalesce_usecs != tx_usecs) 
                                               #line 624 
                                               tx_usecs = coalesce->tx_coalesce_usecs; else 
                                                                    #line 626 
                                                                    tx_usecs = coalesce->tx_coalesce_usecs_irq;
  #line 628 
  rc = ef4_init_irq_moderation(efx,tx_usecs,rx_usecs,(_Bool)((bool)((int)adaptive) != 0),(_Bool)((bool)((int)rx_may_override_tx) != 0));
  #line 630 
  if (rc != 0) 
               #line 631 
               return rc;
  #line 633 
  channel = efx->channel[0];
  #line 633 
  while (channel != (struct ef4_channel *)0) {
    #line 634 
    (*((efx->type)->push_irq_moderation))(channel);
    #line 633 
    if ((unsigned int)(channel->channel + 1) < efx->n_channels) 
                                                                #line 633 
                                                                channel = efx->channel[channel->channel + 1]; else 
                                                                    #line 633 
                                                                    channel = (struct ef4_channel *)0;
  }
  #line 636 
  return 0;
}

#line 639  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/ethtool.c"
static void ef4_ethtool_get_ringparam(struct net_device *net_dev, struct ethtool_ringparam *ring)
{
  #line 642 
  struct ef4_nic *efx = netdev_priv(net_dev);
  #line 644 
  ring->rx_max_pending = 4096U;
  #line 645 
  ring->tx_max_pending = 4096U;
  #line 646 
  ring->rx_pending = efx->rxq_entries;
  #line 647 
  ring->tx_pending = efx->txq_entries;
  #line 648 
  return;
}

#line 650  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/ethtool.c"
static int ef4_ethtool_set_ringparam(struct net_device *net_dev, struct ethtool_ringparam *ring)
{
  #line 668 
  __u32 __UNIQUE_ID___x542;
  #line 668 
  __u32 tmp_1;
  #line 654 
  u32 txq_entries;
  #line 653 
  struct ef4_nic *efx = netdev_priv(net_dev);
  #line 656 
  if (((ring->rx_mini_pending != 0U || ring->rx_jumbo_pending != 0U) || ring->rx_pending > 4096U) || ring->tx_pending > 4096U) 
    #line 659 
    return -22;
  #line 661 
  if (ring->rx_pending <= 127U) {
    #line 662 
    if ((efx->msg_enable & 1U) != 0U) 
                                      #line 662 
                                      netdev_err(efx->net_dev,(char *)"RX queues cannot be smaller than %u\n",128U);
    #line 665 
    return -22;
  }
  {
    #line 668 
    __UNIQUE_ID___x542 = ring->tx_pending;
    #line 668 
    unsigned int __UNIQUE_ID___y543 = ef4_tx_max_skb_descs(efx) * 2U;
    #line 668 
    if (__UNIQUE_ID___x542 > __UNIQUE_ID___y543) 
                                                 #line 668 
                                                 tmp_1 = __UNIQUE_ID___x542; else 
                                                                    #line 668 
                                                                    tmp_1 = __UNIQUE_ID___y543;
    }
  #line 668 
  txq_entries = tmp_1;
  #line 669 
  if (ring->tx_pending != txq_entries) 
    #line 670 
    if ((efx->msg_enable & 1U) != 0U) 
                                      #line 670 
                                      netdev_warn(efx->net_dev,(char *)"increasing TX queue size to minimum of %u\n",txq_entries);
  #line 674 
  return ef4_realloc_channels(efx,ring->rx_pending,txq_entries);
}

#line 677  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/ethtool.c"
static int ef4_ethtool_set_pauseparam(struct net_device *net_dev, struct ethtool_pauseparam *pause)
{
  #line 681 
  u8 wanted_fc;
  #line 681 
  u8 old_fc;
  #line 682 
  u32 old_adv;
  #line 688 
  int tmp_0;
  #line 688 
  int tmp_1;
  #line 680 
  struct ef4_nic *efx = netdev_priv(net_dev);
  #line 683 
  int rc = 0;
  #line 685 
  cif_mutex_lock_mac_lock_of_ef4_nic_3(& efx->mac_lock);
  #line 688 
  if (pause->rx_pause != 0U) 
                             #line 688 
                             tmp_0 = 2; else 
                                             #line 688 
                                             tmp_0 = 0;
  #line 688 
  if (pause->autoneg != 0U) 
                            #line 688 
                            tmp_1 = 4; else 
                                            #line 688 
                                            tmp_1 = 0;
  #line 687 
  wanted_fc = (unsigned char)((tmp_0 | (pause->tx_pause != 0U)) | tmp_1);
  #line 691 
  if (((int)wanted_fc & 1) != 0 && ((int)wanted_fc & 2) == 0) {
    #line 692 
    if ((efx->msg_enable & 1U) != 0U) {
      #line 692 
      bool branch;
      #line 692 
      struct _ddebug __UNIQUE_ID_ddebug544 = {.modname = (char *)"sfc_falcon", .function = (char *)"ef4_ethtool_set_pauseparam", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/ethtool.c", .format = (char *)"Flow control unsupported: tx ON rx OFF\n", .lineno = (unsigned int)692U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 692 
      branch = arch_static_branch(& __UNIQUE_ID_ddebug544.key.dd_key_false.key,(_Bool)0);
      #line 692 
      if ((long)((long)((int)branch != 0)) != 0L) 
                                                  #line 692 
                                                  __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug544,efx->net_dev,(char *)"Flow control unsupported: tx ON rx OFF\n");
    }
    #line 694 
    rc = -22;
    #line 695 
    goto out;
  }
  #line 698 
  if (((int)wanted_fc & 4) != 0 && efx->link_advertising == 0U) {
    #line 699 
    if ((efx->msg_enable & 1U) != 0U) {
      #line 699 
      bool branch_0;
      #line 699 
      struct _ddebug __UNIQUE_ID_ddebug545 = {.modname = (char *)"sfc_falcon", .function = (char *)"ef4_ethtool_set_pauseparam", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/ethtool.c", .format = (char *)"Autonegotiation is disabled\n", .lineno = (unsigned int)699U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
      #line 699 
      branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug545.key.dd_key_false.key,(_Bool)0);
      #line 699 
      if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                    #line 699 
                                                    __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug545,efx->net_dev,(char *)"Autonegotiation is disabled\n");
    }
    #line 701 
    rc = -22;
    #line 702 
    goto out;
  }
  #line 706 
  if (((efx->type)->prepare_enable_fc_tx != (void (*)(struct ef4_nic *))0 && ((int)wanted_fc & 1) != 0) && ((int)efx->wanted_fc & 1) == 0) 
    #line 708 
    (*((efx->type)->prepare_enable_fc_tx))(efx);
  #line 710 
  old_adv = efx->link_advertising;
  #line 711 
  old_fc = efx->wanted_fc;
  #line 712 
  ef4_link_set_wanted_fc(efx,(unsigned char)((int)wanted_fc));
  #line 713 
  if (efx->link_advertising != old_adv || (((int)efx->wanted_fc ^ (int)old_fc) & 4) != 0) {
    #line 715 
    rc = (*((efx->phy_op)->reconfigure))(efx);
    #line 716 
    if (rc != 0) {
      #line 717 
      if ((efx->msg_enable & 1U) != 0U) 
                                        #line 717 
                                        netdev_err(efx->net_dev,(char *)"Unable to advertise requested flow ");
      #line 720 
      goto out;
    }
  }
  #line 727 
  ef4_mac_reconfigure(efx);
  #line 729 
  out: 
       #line 729 
  ;
  #line 730 
  cif_mutex_unlock_mac_lock_of_ef4_nic_3(& efx->mac_lock);
  #line 732 
  return rc;
}

#line 735  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/ethtool.c"
static void ef4_ethtool_get_pauseparam(struct net_device *net_dev, struct ethtool_pauseparam *pause)
{
  #line 738 
  struct ef4_nic *efx = netdev_priv(net_dev);
  #line 740 
  pause->rx_pause = (unsigned int)(((int)efx->wanted_fc & 2) != 0);
  #line 741 
  pause->tx_pause = (unsigned int)(((int)efx->wanted_fc & 1) != 0);
  #line 742 
  pause->autoneg = (unsigned int)(((int)efx->wanted_fc & 4) != 0);
  #line 743 
  return;
}

#line 745  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/ethtool.c"
static void ef4_ethtool_get_wol(struct net_device *net_dev, struct ethtool_wolinfo *wol)
{
  #line 748 
  struct ef4_nic *efx = netdev_priv(net_dev);
  #line 749 
  (*((efx->type)->get_wol))(efx,wol);
  #line 750 
  return;
}

#line 753  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/ethtool.c"
static int ef4_ethtool_set_wol(struct net_device *net_dev, struct ethtool_wolinfo *wol)
{
  #line 756 
  struct ef4_nic *efx = netdev_priv(net_dev);
  #line 757 
  return (*((efx->type)->set_wol))(efx,wol->wolopts);
}

#line 760  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/ethtool.c"
static int ef4_ethtool_reset(struct net_device *net_dev, u32 *flags)
{
  #line 763 
  int rc;
  #line 762 
  struct ef4_nic *efx = netdev_priv(net_dev);
  #line 765 
  rc = (*((efx->type)->map_reset_flags))(flags);
  #line 766 
  if (rc < 0) 
              #line 767 
              return rc;
  #line 769 
  return ef4_reset(efx,(enum reset_type)rc);
}

#line 773  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/ethtool.c"
static u8 mac_addr_ig_mask[6U] = {(unsigned char)1U};
#line 780  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/ethtool.c"
__inline static void ip6_fill_mask(__be32 *mask)
{
  #line 782 
  *(mask + 3U) = 4294967295U;
  #line 782 
  *(mask + 2U) = 4294967295U;
  #line 782 
  *(mask + 1U) = 4294967295U;
  #line 782 
  *mask = 4294967295U;
  #line 783 
  return;
}

#line 785  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/ethtool.c"
static int ef4_ethtool_get_class_rule(struct ef4_nic *efx, struct ethtool_rx_flow_spec *rule)
{
  #line 798 
  struct ef4_filter_spec spec;
  #line 799 
  int rc;
  #line 788 
  struct ethtool_tcpip4_spec *ip_entry = & rule->h_u.tcp_ip4_spec;
  #line 789 
  struct ethtool_tcpip4_spec *ip_mask = & rule->m_u.tcp_ip4_spec;
  #line 790 
  struct ethtool_usrip4_spec *uip_entry = & rule->h_u.usr_ip4_spec;
  #line 791 
  struct ethtool_usrip4_spec *uip_mask = & rule->m_u.usr_ip4_spec;
  #line 792 
  struct ethtool_tcpip6_spec *ip6_entry = & rule->h_u.tcp_ip6_spec;
  #line 793 
  struct ethtool_tcpip6_spec *ip6_mask = & rule->m_u.tcp_ip6_spec;
  #line 794 
  struct ethtool_usrip6_spec *uip6_entry = & rule->h_u.usr_ip6_spec;
  #line 795 
  struct ethtool_usrip6_spec *uip6_mask = & rule->m_u.usr_ip6_spec;
  #line 796 
  struct ethhdr *mac_entry = & rule->h_u.ether_spec;
  #line 797 
  struct ethhdr *mac_mask = & rule->m_u.ether_spec;
  #line 801 
  rc = ef4_filter_get_filter_safe(efx,(enum ef4_filter_priority)EF4_FILTER_PRI_MANUAL,rule->location,& spec);
  #line 803 
  if (rc != 0) 
               #line 804 
               return rc;
  #line 806 
  if ((unsigned int)spec.dmaq_id == 4095U) 
                                           #line 807 
                                           rule->ring_cookie = 18446744073709551615ULL; else 
                                                                    #line 809 
                                                                    rule->ring_cookie = (unsigned long long)spec.dmaq_id;
  #line 811 
  if ((((((int)spec.match_flags & 64) != 0 && (unsigned int)spec.ether_type == 8U) && ((int)spec.match_flags & 512) != 0) && ((unsigned int)spec.ip_proto == 6U || (unsigned int)spec.ip_proto == 17U)) && ((int)spec.match_flags & -876) == 0) {
    #line 820 
    if ((unsigned int)spec.ip_proto == 6U) 
                                           #line 820 
                                           rule->flow_type = 1U; else 
                                                                   #line 820 
                                                                   rule->flow_type = 2U;
    #line 822 
    if (((int)spec.match_flags & 2) != 0) {
      #line 823 
      ip_entry->ip4dst = spec.loc_host[0];
      #line 824 
      ip_mask->ip4dst = 4294967295U;
    }
    #line 826 
    if (((int)spec.match_flags & 1) != 0) {
      #line 827 
      ip_entry->ip4src = spec.rem_host[0];
      #line 828 
      ip_mask->ip4src = 4294967295U;
    }
    #line 830 
    if (((int)spec.match_flags & 32) != 0) {
      #line 831 
      ip_entry->pdst = spec.loc_port;
      #line 832 
      ip_mask->pdst = (unsigned short)65535U;
    }
    #line 834 
    if (((int)spec.match_flags & 8) != 0) {
      #line 835 
      ip_entry->psrc = spec.rem_port;
      #line 836 
      ip_mask->psrc = (unsigned short)65535U;
    }
  }
  else 
    #line 838 
    if ((((((int)spec.match_flags & 64) != 0 && (unsigned int)spec.ether_type == 56710U) && ((int)spec.match_flags & 512) != 0) && ((unsigned int)spec.ip_proto == 6U || (unsigned int)spec.ip_proto == 17U)) && ((int)spec.match_flags & -876) == 0) {
      #line 847 
      if ((unsigned int)spec.ip_proto == 6U) 
                                             #line 847 
                                             rule->flow_type = 5U; else 
                                                                    #line 847 
                                                                    rule->flow_type = 6U;
      #line 849 
      if (((int)spec.match_flags & 2) != 0) {
        #line 850 
        memcpy((void *)(& ip6_entry->ip6dst),(void *)(& spec.loc_host),16UL);
        #line 852 
        ip6_fill_mask((__be32 *)(& ip6_mask->ip6dst));
      }
      #line 854 
      if (((int)spec.match_flags & 1) != 0) {
        #line 855 
        memcpy((void *)(& ip6_entry->ip6src),(void *)(& spec.rem_host),16UL);
        #line 857 
        ip6_fill_mask((__be32 *)(& ip6_mask->ip6src));
      }
      #line 859 
      if (((int)spec.match_flags & 32) != 0) {
        #line 860 
        ip6_entry->pdst = spec.loc_port;
        #line 861 
        ip6_mask->pdst = (unsigned short)65535U;
      }
      #line 863 
      if (((int)spec.match_flags & 8) != 0) {
        #line 864 
        ip6_entry->psrc = spec.rem_port;
        #line 865 
        ip6_mask->psrc = (unsigned short)65535U;
      }
    }
    else 
      #line 867 
      if (((int)spec.match_flags & -1365) == 0) {
        #line 871 
        rule->flow_type = 18U;
        #line 872 
        if (((int)spec.match_flags & 1040) != 0) {
          #line 874 
          ether_addr_copy((u8 *)(& mac_entry->h_dest),(u8 *)(& spec.loc_mac));
          #line 875 
          if (((int)spec.match_flags & 16) != 0) 
                                                 #line 876 
                                                 eth_broadcast_addr((u8 *)(& mac_mask->h_dest)); else 
                                                                    #line 878 
                                                                    ether_addr_copy((u8 *)(& mac_mask->h_dest),(u8 *)(& mac_addr_ig_mask));
        }
        #line 881 
        if (((int)spec.match_flags & 4) != 0) {
          #line 882 
          ether_addr_copy((u8 *)(& mac_entry->h_source),(u8 *)(& spec.rem_mac));
          #line 883 
          eth_broadcast_addr((u8 *)(& mac_mask->h_source));
        }
        #line 885 
        if (((int)spec.match_flags & 64) != 0) {
          #line 886 
          mac_entry->h_proto = spec.ether_type;
          #line 887 
          mac_mask->h_proto = (unsigned short)65535U;
        }
      }
      else 
        #line 889 
        if ((((int)spec.match_flags & 64) != 0 && (unsigned int)spec.ether_type == 8U) && ((int)spec.match_flags & -836) == 0) {
          #line 895 
          rule->flow_type = 13U;
          #line 896 
          uip_entry->ip_ver = (unsigned char)1U;
          #line 897 
          if (((int)spec.match_flags & 512) != 0) {
            #line 898 
            uip_mask->proto = (unsigned char)255U;
            #line 899 
            uip_entry->proto = spec.ip_proto;
          }
          #line 901 
          if (((int)spec.match_flags & 2) != 0) {
            #line 902 
            uip_entry->ip4dst = spec.loc_host[0];
            #line 903 
            uip_mask->ip4dst = 4294967295U;
          }
          #line 905 
          if (((int)spec.match_flags & 1) != 0) {
            #line 906 
            uip_entry->ip4src = spec.rem_host[0];
            #line 907 
            uip_mask->ip4src = 4294967295U;
          }
        }
        else 
          #line 909 
          if ((((int)spec.match_flags & 64) != 0 && (unsigned int)spec.ether_type == 56710U) && ((int)spec.match_flags & -836) == 0) {
            #line 915 
            rule->flow_type = 14U;
            #line 916 
            if (((int)spec.match_flags & 512) != 0) {
              #line 917 
              uip6_mask->l4_proto = (unsigned char)255U;
              #line 918 
              uip6_entry->l4_proto = spec.ip_proto;
            }
            #line 920 
            if (((int)spec.match_flags & 2) != 0) {
              #line 921 
              memcpy((void *)(& uip6_entry->ip6dst),(void *)(& spec.loc_host),16UL);
              #line 923 
              ip6_fill_mask((__be32 *)(& uip6_mask->ip6dst));
            }
            #line 925 
            if (((int)spec.match_flags & 1) != 0) {
              #line 926 
              memcpy((void *)(& uip6_entry->ip6src),(void *)(& spec.rem_host),16UL);
              #line 928 
              ip6_fill_mask((__be32 *)(& uip6_mask->ip6src));
            }
          }
          else {
            {
              #line 932 
              int __ret_warn_on = 1;
              #line 932 
              if ((long)(__ret_warn_on != 0) != 0L) {
                #line 933 
                ldv_inline_asm();
                #line 934 
                ldv_inline_asm();
              }
              #line 932 
              long tmp = (long)(__ret_warn_on != 0);
            }
            #line 933 
            return -22;
          }
  #line 936 
  if (((int)spec.match_flags & 256) != 0) {
    #line 937 
    rule->flow_type |= 2147483648U;
    #line 938 
    rule->h_ext.vlan_tci = spec.outer_vid;
    #line 939 
    rule->m_ext.vlan_tci = (unsigned short)65295U;
  }
  #line 942 
  return rc;
}

#line 946  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/ethtool.c"
static int ef4_ethtool_get_rxnfc(struct net_device *net_dev, struct ethtool_rxnfc *info, u32 *rule_locs)
{
  #line 949 
  struct ef4_nic *efx = netdev_priv(net_dev);
  #line 951 
  switch (info->cmd) {
    #line 952 
    case (__u32)45: 
                    #line 952 
    ;
    #line 953 
    info->data = (unsigned long long)efx->n_rx_channels;
    #line 954 
    return 0;
    #line 956 
    case (__u32)41: 
                    #line 956 
    ;
    {
      #line 957 
      unsigned int min_revision = 0U;
      #line 959 
      info->data = 0ULL;
      #line 960 
      switch (info->flow_type) {
        #line 961 
        case (__u32)1: 
                       #line 961 
        ;
        #line 962 
        info->data |= 192ULL;
        #line 964 
        case (__u32)2: 
                       #line 964 
        ;
        #line 965 
        case (__u32)3: 
                       #line 965 
        ;
        #line 966 
        case (__u32)4: 
                       #line 966 
        ;
        #line 967 
        case (__u32)16: 
                        #line 967 
        ;
        #line 968 
        info->data |= 48ULL;
        #line 969 
        min_revision = 2U;
        #line 970 
        break;
        #line 971 
        default: 
                 #line 971 
        ;
        #line 972 
        break;
      }
      #line 974 
      ;
      #line 974 
      if ((unsigned int)ef4_nic_rev(efx) < min_revision) 
                                                         #line 975 
                                                         info->data = 0ULL;
      #line 976 
      return 0;
    }
    #line 979 
    case (__u32)46: 
                    #line 979 
    ;
    #line 980 
    info->data = (unsigned long long)ef4_filter_get_rx_id_limit(efx);
    #line 981 
    if (info->data == 0ULL) 
                            #line 982 
                            return -95;
    #line 983 
    info->data |= 2147483648ULL;
    #line 984 
    info->__anonCompField_ethtool_rxnfc_99.rule_cnt = ef4_filter_count_rx_used(efx,(enum ef4_filter_priority)EF4_FILTER_PRI_MANUAL);
    #line 986 
    return 0;
    #line 988 
    case (__u32)47: 
                    #line 988 
    ;
    #line 989 
    if (ef4_filter_get_rx_id_limit(efx) == 0U) 
                                               #line 990 
                                               return -95;
    #line 991 
    return ef4_ethtool_get_class_rule(efx,& info->fs);
    #line 993 
    case (__u32)48: 
                    #line 993 
    ;
    {
      #line 994 
      s32 rc;
      #line 995 
      info->data = (unsigned long long)ef4_filter_get_rx_id_limit(efx);
      #line 996 
      if (info->data == 0ULL) 
                              #line 997 
                              return -95;
      #line 998 
      rc = ef4_filter_get_rx_ids(efx,(enum ef4_filter_priority)EF4_FILTER_PRI_MANUAL,rule_locs,info->__anonCompField_ethtool_rxnfc_99.rule_cnt);
      #line 1000 
      if (rc < 0) 
                  #line 1001 
                  return rc;
      #line 1002 
      info->__anonCompField_ethtool_rxnfc_99.rule_cnt = (unsigned int)rc;
      #line 1003 
      return 0;
    }
    #line 1006 
    default: 
             #line 1006 
    ;
    #line 1007 
    return -95;
  }
}

#line 1011  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/ethtool.c"
__inline static bool ip6_mask_is_full(__be32 *mask)
{
  #line 1013 
  return (_Bool)((((*mask & *(mask + 1U)) & *(mask + 2U)) & *(mask + 3U)) == 4294967295U);
}

#line 1016  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/ethtool.c"
__inline static bool ip6_mask_is_empty(__be32 *mask)
{
  #line 1018 
  return (_Bool)((((*mask | *(mask + 1U)) | *(mask + 2U)) | *(mask + 3U)) == 0U);
}

#line 1021  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/ethtool.c"
static int ef4_ethtool_set_class_rule(struct ef4_nic *efx, struct ethtool_rx_flow_spec *rule)
{
  #line 1034 
  struct ef4_filter_spec spec;
  #line 1035 
  int rc;
  #line 1053 
  unsigned int tmp;
  #line 1052 
  int tmp_0;
  #line 1024 
  struct ethtool_tcpip4_spec *ip_entry = & rule->h_u.tcp_ip4_spec;
  #line 1025 
  struct ethtool_tcpip4_spec *ip_mask = & rule->m_u.tcp_ip4_spec;
  #line 1026 
  struct ethtool_usrip4_spec *uip_entry = & rule->h_u.usr_ip4_spec;
  #line 1027 
  struct ethtool_usrip4_spec *uip_mask = & rule->m_u.usr_ip4_spec;
  #line 1028 
  struct ethtool_tcpip6_spec *ip6_entry = & rule->h_u.tcp_ip6_spec;
  #line 1029 
  struct ethtool_tcpip6_spec *ip6_mask = & rule->m_u.tcp_ip6_spec;
  #line 1030 
  struct ethtool_usrip6_spec *uip6_entry = & rule->h_u.usr_ip6_spec;
  #line 1031 
  struct ethtool_usrip6_spec *uip6_mask = & rule->m_u.usr_ip6_spec;
  #line 1032 
  struct ethhdr *mac_entry = & rule->h_u.ether_spec;
  #line 1033 
  struct ethhdr *mac_mask = & rule->m_u.ether_spec;
  #line 1038 
  if (rule->location != 4294967295U) 
                                     #line 1039 
                                     return -22;
  #line 1042 
  if (rule->ring_cookie >= (unsigned long long)efx->n_rx_channels && rule->ring_cookie != 18446744073709551615ULL) 
    #line 1044 
    return -22;
  #line 1047 
  if ((rule->flow_type & 2147483648U) != 0U && (((unsigned int)rule->m_ext.vlan_etype != 0U || rule->m_ext.data[0] != 0U) || rule->m_ext.data[1] != 0U)) 
    #line 1050 
    return -22;
  #line 1053 
  if (rule->ring_cookie != 18446744073709551615ULL) 
                                                    #line 1053 
                                                    tmp = (unsigned int)rule->ring_cookie; else 
                                                                    #line 1053 
                                                                    tmp = 4095U;
  #line 1052 
  if ((int)efx->rx_scatter != 0) 
                                 #line 1052 
                                 tmp_0 = EF4_FILTER_FLAG_RX_SCATTER; else 
                                                                    #line 1052 
                                                                    tmp_0 = 0;
  #line 1052 
  ef4_filter_init_rx(& spec,(enum ef4_filter_priority)EF4_FILTER_PRI_MANUAL,(enum ef4_filter_flags)tmp_0,tmp);
  #line 1057 
  switch (rule->flow_type & 2147483647U) {
    #line 1058 
    case (unsigned int)1: 
                          #line 1058 
    ;
    #line 1059 
    case (unsigned int)2: 
                          #line 1059 
    ;
    #line 1060 
    spec.match_flags = (unsigned int)576U;
    #line 1062 
    spec.ether_type = (unsigned short)8U;
    #line 1063 
    if ((rule->flow_type & 2147483647U) == 1U) 
                                               #line 1063 
                                               spec.ip_proto = (unsigned char)6U; else 
                                                                    #line 1063 
                                                                    spec.ip_proto = (unsigned char)17U;
    #line 1065 
    if (ip_mask->ip4dst != 0U) {
      #line 1066 
      if (ip_mask->ip4dst != 4294967295U) 
                                          #line 1067 
                                          return -22;
      #line 1068 
      spec.match_flags = (unsigned int)((unsigned int)spec.match_flags | 2U);
      #line 1069 
      spec.loc_host[0] = ip_entry->ip4dst;
    }
    #line 1071 
    if (ip_mask->ip4src != 0U) {
      #line 1072 
      if (ip_mask->ip4src != 4294967295U) 
                                          #line 1073 
                                          return -22;
      #line 1074 
      spec.match_flags = (unsigned int)((unsigned int)spec.match_flags | 1U);
      #line 1075 
      spec.rem_host[0] = ip_entry->ip4src;
    }
    #line 1077 
    if ((unsigned int)ip_mask->pdst != 0U) {
      #line 1078 
      if ((unsigned int)ip_mask->pdst != 65535U) 
                                                 #line 1079 
                                                 return -22;
      #line 1080 
      spec.match_flags = (unsigned int)((unsigned int)spec.match_flags | 32U);
      #line 1081 
      spec.loc_port = ip_entry->pdst;
    }
    #line 1083 
    if ((unsigned int)ip_mask->psrc != 0U) {
      #line 1084 
      if ((unsigned int)ip_mask->psrc != 65535U) 
                                                 #line 1085 
                                                 return -22;
      #line 1086 
      spec.match_flags = (unsigned int)((unsigned int)spec.match_flags | 8U);
      #line 1087 
      spec.rem_port = ip_entry->psrc;
    }
    #line 1089 
    if ((unsigned int)ip_mask->tos != 0U) 
                                          #line 1090 
                                          return -22;
    #line 1091 
    break;
    #line 1093 
    case (unsigned int)5: 
                          #line 1093 
    ;
    #line 1094 
    case (unsigned int)6: 
                          #line 1094 
    ;
    #line 1095 
    spec.match_flags = (unsigned int)576U;
    #line 1097 
    spec.ether_type = (unsigned short)56710U;
    #line 1098 
    if ((rule->flow_type & 2147483647U) == 5U) 
                                               #line 1098 
                                               spec.ip_proto = (unsigned char)6U; else 
                                                                    #line 1098 
                                                                    spec.ip_proto = (unsigned char)17U;
    #line 1100 
    if (! ip6_mask_is_empty((__be32 *)(& ip6_mask->ip6dst))) {
      #line 1101 
      if (! ip6_mask_is_full((__be32 *)(& ip6_mask->ip6dst))) 
                                                              #line 1102 
                                                              return -22;
      #line 1103 
      spec.match_flags = (unsigned int)((unsigned int)spec.match_flags | 2U);
      #line 1104 
      memcpy((void *)(& spec.loc_host),(void *)(& ip6_entry->ip6dst),16UL);
    }
    #line 1106 
    if (! ip6_mask_is_empty((__be32 *)(& ip6_mask->ip6src))) {
      #line 1107 
      if (! ip6_mask_is_full((__be32 *)(& ip6_mask->ip6src))) 
                                                              #line 1108 
                                                              return -22;
      #line 1109 
      spec.match_flags = (unsigned int)((unsigned int)spec.match_flags | 1U);
      #line 1110 
      memcpy((void *)(& spec.rem_host),(void *)(& ip6_entry->ip6src),16UL);
    }
    #line 1112 
    if ((unsigned int)ip6_mask->pdst != 0U) {
      #line 1113 
      if ((unsigned int)ip6_mask->pdst != 65535U) 
                                                  #line 1114 
                                                  return -22;
      #line 1115 
      spec.match_flags = (unsigned int)((unsigned int)spec.match_flags | 32U);
      #line 1116 
      spec.loc_port = ip6_entry->pdst;
    }
    #line 1118 
    if ((unsigned int)ip6_mask->psrc != 0U) {
      #line 1119 
      if ((unsigned int)ip6_mask->psrc != 65535U) 
                                                  #line 1120 
                                                  return -22;
      #line 1121 
      spec.match_flags = (unsigned int)((unsigned int)spec.match_flags | 8U);
      #line 1122 
      spec.rem_port = ip6_entry->psrc;
    }
    #line 1124 
    if ((unsigned int)ip6_mask->tclass != 0U) 
                                              #line 1125 
                                              return -22;
    #line 1126 
    break;
    #line 1128 
    case (unsigned int)13: 
                           #line 1128 
    ;
    #line 1129 
    if (((uip_mask->l4_4_bytes != 0U || (unsigned int)uip_mask->tos != 0U) || (unsigned int)uip_mask->ip_ver != 0U) || (unsigned int)uip_entry->ip_ver != 1U) 
      #line 1131 
      return -22;
    #line 1132 
    spec.match_flags = (unsigned int)64U;
    #line 1133 
    spec.ether_type = (unsigned short)8U;
    #line 1134 
    if (uip_mask->ip4dst != 0U) {
      #line 1135 
      if (uip_mask->ip4dst != 4294967295U) 
                                           #line 1136 
                                           return -22;
      #line 1137 
      spec.match_flags = (unsigned int)((unsigned int)spec.match_flags | 2U);
      #line 1138 
      spec.loc_host[0] = uip_entry->ip4dst;
    }
    #line 1140 
    if (uip_mask->ip4src != 0U) {
      #line 1141 
      if (uip_mask->ip4src != 4294967295U) 
                                           #line 1142 
                                           return -22;
      #line 1143 
      spec.match_flags = (unsigned int)((unsigned int)spec.match_flags | 1U);
      #line 1144 
      spec.rem_host[0] = uip_entry->ip4src;
    }
    #line 1146 
    if ((unsigned int)uip_mask->proto != 0U) {
      #line 1147 
      if ((unsigned int)uip_mask->proto != 255U) 
                                                 #line 1148 
                                                 return -22;
      #line 1149 
      spec.match_flags = (unsigned int)((unsigned int)spec.match_flags | 512U);
      #line 1150 
      spec.ip_proto = uip_entry->proto;
    }
    #line 1152 
    break;
    #line 1154 
    case (unsigned int)14: 
                           #line 1154 
    ;
    #line 1155 
    if (uip6_mask->l4_4_bytes != 0U || (unsigned int)uip6_mask->tclass != 0U) 
      #line 1156 
      return -22;
    #line 1157 
    spec.match_flags = (unsigned int)64U;
    #line 1158 
    spec.ether_type = (unsigned short)56710U;
    #line 1159 
    if (! ip6_mask_is_empty((__be32 *)(& uip6_mask->ip6dst))) {
      #line 1160 
      if (! ip6_mask_is_full((__be32 *)(& uip6_mask->ip6dst))) 
                                                               #line 1161 
                                                               return -22;
      #line 1162 
      spec.match_flags = (unsigned int)((unsigned int)spec.match_flags | 2U);
      #line 1163 
      memcpy((void *)(& spec.loc_host),(void *)(& uip6_entry->ip6dst),16UL);
    }
    #line 1165 
    if (! ip6_mask_is_empty((__be32 *)(& uip6_mask->ip6src))) {
      #line 1166 
      if (! ip6_mask_is_full((__be32 *)(& uip6_mask->ip6src))) 
                                                               #line 1167 
                                                               return -22;
      #line 1168 
      spec.match_flags = (unsigned int)((unsigned int)spec.match_flags | 1U);
      #line 1169 
      memcpy((void *)(& spec.rem_host),(void *)(& uip6_entry->ip6src),16UL);
    }
    #line 1171 
    if ((unsigned int)uip6_mask->l4_proto != 0U) {
      #line 1172 
      if ((unsigned int)uip6_mask->l4_proto != 255U) 
                                                     #line 1173 
                                                     return -22;
      #line 1174 
      spec.match_flags = (unsigned int)((unsigned int)spec.match_flags | 512U);
      #line 1175 
      spec.ip_proto = uip6_entry->l4_proto;
    }
    #line 1177 
    break;
    #line 1179 
    case (unsigned int)18: 
                           #line 1179 
    ;
    #line 1180 
    if (! is_zero_ether_addr((u8 *)(& mac_mask->h_dest))) {
      #line 1181 
      if ((int)ether_addr_equal((u8 *)(& mac_mask->h_dest),
                          (u8 *)(& mac_addr_ig_mask)) != 0) 
        #line 1183 
        spec.match_flags = (unsigned int)((unsigned int)spec.match_flags | 1024U);
      else {
        #line 1184 
        if ((int)is_broadcast_ether_addr((u8 *)(& mac_mask->h_dest)) != 0) 
          #line 1185 
          spec.match_flags = (unsigned int)((unsigned int)spec.match_flags | 16U); else 
                                                                    #line 1187 
                                                                    return -22;
      }
      #line 1188 
      ether_addr_copy((u8 *)(& spec.loc_mac),(u8 *)(& mac_entry->h_dest));
    }
    #line 1190 
    if (! is_zero_ether_addr((u8 *)(& mac_mask->h_source))) {
      #line 1191 
      if (! is_broadcast_ether_addr((u8 *)(& mac_mask->h_source))) 
                                                                   #line 1192 
                                                                   return -22;
      #line 1193 
      spec.match_flags = (unsigned int)((unsigned int)spec.match_flags | 4U);
      #line 1194 
      ether_addr_copy((u8 *)(& spec.rem_mac),(u8 *)(& mac_entry->h_source));
    }
    #line 1196 
    if ((unsigned int)mac_mask->h_proto != 0U) {
      #line 1197 
      if ((unsigned int)mac_mask->h_proto != 65535U) 
                                                     #line 1198 
                                                     return -22;
      #line 1199 
      spec.match_flags = (unsigned int)((unsigned int)spec.match_flags | 64U);
      #line 1200 
      spec.ether_type = mac_entry->h_proto;
    }
    #line 1202 
    break;
    #line 1204 
    default: 
             #line 1204 
    ;
    #line 1205 
    return -22;
  }
  #line 1208 
  if ((rule->flow_type & 2147483648U) != 0U && (unsigned int)rule->m_ext.vlan_tci != 0U) {
    #line 1209 
    if ((unsigned int)rule->m_ext.vlan_tci != 65295U) 
                                                      #line 1210 
                                                      return -22;
    #line 1211 
    spec.match_flags = (unsigned int)((unsigned int)spec.match_flags | 256U);
    #line 1212 
    spec.outer_vid = rule->h_ext.vlan_tci;
  }
  #line 1215 
  rc = ef4_filter_insert_filter(efx,& spec,(_Bool)1);
  #line 1216 
  if (rc < 0) 
              #line 1217 
              return rc;
  #line 1219 
  rule->location = (unsigned int)rc;
  #line 1220 
  return 0;
}

#line 1223  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/ethtool.c"
static int ef4_ethtool_set_rxnfc(struct net_device *net_dev, struct ethtool_rxnfc *info)
{
  #line 1226 
  struct ef4_nic *efx = netdev_priv(net_dev);
  #line 1228 
  if (ef4_filter_get_rx_id_limit(efx) == 0U) 
                                             #line 1229 
                                             return -95;
  #line 1231 
  switch (info->cmd) {
    #line 1232 
    case (__u32)50: 
                    #line 1232 
    ;
    #line 1233 
    return ef4_ethtool_set_class_rule(efx,& info->fs);
    #line 1235 
    case (__u32)49: 
                    #line 1235 
    ;
    #line 1236 
    return ef4_filter_remove_id_safe(efx,
                                  (enum ef4_filter_priority)EF4_FILTER_PRI_MANUAL,
                                  info->fs.location);
    #line 1239 
    default: 
             #line 1239 
    ;
    #line 1240 
    return -95;
  }
}

#line 1244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/ethtool.c"
static u32 ef4_ethtool_get_rxfh_indir_size(struct net_device *net_dev)
{
  #line 1250 
  unsigned int tmp_1;
  #line 1246 
  struct ef4_nic *efx = netdev_priv(net_dev);
  #line 1250 
  if (ef4_nic_rev(efx) <= 1) 
                             #line 1250 
                             tmp_1 = 0U;
  else 
    #line 1248 
    if (efx->n_rx_channels == 1U) 
                                  #line 1250 
                                  tmp_1 = 0U; else 
                                                   #line 1250 
                                                   tmp_1 = 128U;
  #line 1250 
  return tmp_1;
}

#line 1253  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/ethtool.c"
static int ef4_ethtool_get_rxfh(struct net_device *net_dev, u32 *indir, u8 *key, u8 *hfunc)
{
  #line 1256 
  struct ef4_nic *efx = netdev_priv(net_dev);
  #line 1258 
  if (hfunc != (u8 *)0U) 
                         #line 1259 
                         *hfunc = (unsigned char)1U;
  #line 1260 
  if (indir != (u32 *)0U) 
                          #line 1261 
                          memcpy((void *)indir,(void *)(& efx->rx_indir_table),512UL);
  #line 1262 
  return 0;
}

#line 1265  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/ethtool.c"
static int ef4_ethtool_set_rxfh(struct net_device *net_dev, u32 *indir, u8 *key, u8 hfunc)
{
  #line 1268 
  struct ef4_nic *efx = netdev_priv(net_dev);
  #line 1271 
  if (key != (u8 *)0U || (unsigned int)hfunc > 1U) 
                                                   #line 1273 
                                                   return -95;
  #line 1274 
  if (indir == (u32 *)0U) 
                          #line 1275 
                          return 0;
  #line 1277 
  return (*((efx->type)->rx_push_rss_config))(efx,(_Bool)1,indir);
}

#line 1280  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/ethtool.c"
static int ef4_ethtool_get_module_eeprom(struct net_device *net_dev, struct ethtool_eeprom *ee, u8 *data)
{
  #line 1285 
  int ret;
  #line 1284 
  struct ef4_nic *efx = netdev_priv(net_dev);
  #line 1287 
  if (efx->phy_op == (struct ef4_phy_operations *)0 || (efx->phy_op)->get_module_eeprom == (int (*)(struct ef4_nic *, struct ethtool_eeprom *, u8 *))0) 
    #line 1288 
    return -95;
  #line 1290 
  cif_mutex_lock_mac_lock_of_ef4_nic_3(& efx->mac_lock);
  #line 1291 
  ret = (*((efx->phy_op)->get_module_eeprom))(efx,ee,data);
  #line 1292 
  cif_mutex_unlock_mac_lock_of_ef4_nic_3(& efx->mac_lock);
  #line 1294 
  return ret;
}

#line 1297  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/ethtool.c"
static int ef4_ethtool_get_module_info(struct net_device *net_dev, struct ethtool_modinfo *modinfo)
{
  #line 1301 
  int ret;
  #line 1300 
  struct ef4_nic *efx = netdev_priv(net_dev);
  #line 1303 
  if (efx->phy_op == (struct ef4_phy_operations *)0 || (efx->phy_op)->get_module_info == (int (*)(struct ef4_nic *, struct ethtool_modinfo *))0) 
    #line 1304 
    return -95;
  #line 1306 
  cif_mutex_lock_mac_lock_of_ef4_nic_3(& efx->mac_lock);
  #line 1307 
  ret = (*((efx->phy_op)->get_module_info))(efx,modinfo);
  #line 1308 
  cif_mutex_unlock_mac_lock_of_ef4_nic_3(& efx->mac_lock);
  #line 1310 
  return ret;
}

#line 1313  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/sfc/falcon/ethtool.c"
struct ethtool_ops ef4_ethtool_ops = {.get_drvinfo = & ef4_ethtool_get_drvinfo, .get_regs_len = & ef4_ethtool_get_regs_len, .get_regs = & ef4_ethtool_get_regs, .get_wol = & ef4_ethtool_get_wol, .set_wol = & ef4_ethtool_set_wol, .get_msglevel = & ef4_ethtool_get_msglevel, .set_msglevel = & ef4_ethtool_set_msglevel, .nway_reset = & ef4_ethtool_nway_reset, .get_link = & ethtool_op_get_link, .get_coalesce = & ef4_ethtool_get_coalesce, .set_coalesce = & ef4_ethtool_set_coalesce, .get_ringparam = & ef4_ethtool_get_ringparam, .set_ringparam = & ef4_ethtool_set_ringparam, .get_pauseparam = & ef4_ethtool_get_pauseparam, .set_pauseparam = & ef4_ethtool_set_pauseparam, .self_test = & ef4_ethtool_self_test, .get_strings = & ef4_ethtool_get_strings, .set_phys_id = & ef4_ethtool_phys_id, .get_ethtool_stats = & ef4_ethtool_get_stats, .get_sset_count = & ef4_ethtool_get_sset_count, .get_rxnfc = & ef4_ethtool_get_rxnfc, .set_rxnfc = & ef4_ethtool_set_rxnfc, .reset = & ef4_ethtool_reset, .get_rxfh_indir_size = & ef4_ethtool_get_rxfh_indir_size, .get_rxfh = & ef4_ethtool_get_rxfh, .set_rxfh = & ef4_ethtool_set_rxfh, .get_module_info = & ef4_ethtool_get_module_info, .get_module_eeprom = & ef4_ethtool_get_module_eeprom, .get_link_ksettings = & ef4_ethtool_get_link_ksettings, .set_link_ksettings = & ef4_ethtool_set_link_ksettings};
#line 376  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/ethtool.i.aux"
static void *kzalloc_6(size_t size, gfp_t flags)
{
  #line 379 
  return ldv_kzalloc(size,flags);
}

#line 817  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/ethtool.i.aux"
static void cif_mutex_lock_mac_lock_of_ef4_nic_3(struct mutex *lock)
{
  #line 820 
  ldv_mutex_model_lock(lock,(char *)"mac_lock_of_ef4_nic");
  #line 821 
  return;
}

#line 824  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/ethtool.i.aux"
static void cif_mutex_unlock_mac_lock_of_ef4_nic_3(struct mutex *lock)
{
  #line 827 
  ldv_mutex_model_unlock(lock,(char *)"mac_lock_of_ef4_nic");
  #line 828 
  return;
}

#line 831  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/ethtool.i.aux"
static void cif_spin_lock_bh_stats_lock_of_ef4_nic_1(spinlock_t *lock)
{
  #line 834 
  ldv_spin_model_lock((char *)"stats_lock_of_ef4_nic");
  #line 836 
  spin_lock_bh_2(lock);
  #line 837 
  return;
}

#line 840  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/0/concurrency safety/weaver/ethtool.i.aux"
static void cif_spin_unlock_bh_stats_lock_of_ef4_nic_1(spinlock_t *lock)
{
  #line 843 
  ldv_spin_model_unlock((char *)"stats_lock_of_ef4_nic");
  #line 845 
  spin_unlock_bh_3(lock);
  #line 846 
  return;
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/common/inline_asm.c"
void ldv_inline_asm(void)
{
  #line 24 
  return;
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_add(int i, atomic_t *v)
{
  #line 22 
  v->counter += i;
  #line 23 
  return;
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_sub(int i, atomic_t *v)
{
  #line 27 
  v->counter -= i;
  #line 28 
  return;
}

#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_sub_and_test(int i, atomic_t *v)
{
  #line 32 
  v->counter -= i;
  #line 33 
  if (v->counter != 0) 
                       #line 34 
                       return 0;
  #line 36 
  return 1;
}

#line 39  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_inc(atomic_t *v)
{
  #line 41 
  (v->counter) ++;
  #line 42 
  return;
}

#line 44  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_dec(atomic_t *v)
{
  #line 46 
  (v->counter) --;
  #line 47 
  return;
}

#line 49  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_dec_and_test(atomic_t *v)
{
  #line 51 
  (v->counter) --;
  #line 52 
  if (v->counter != 0) 
                       #line 53 
                       return 0;
  #line 55 
  return 1;
}

#line 58  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_inc_and_test(atomic_t *v)
{
  #line 60 
  (v->counter) ++;
  #line 61 
  if (v->counter != 0) 
                       #line 62 
                       return 0;
  #line 64 
  return 1;
}

#line 67  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_add_return(int i, atomic_t *v)
{
  #line 69 
  v->counter += i;
  #line 70 
  return v->counter;
}

#line 73  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_add_negative(int i, atomic_t *v)
{
  #line 75 
  v->counter += i;
  #line 76 
  return v->counter < 0;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_inc_short(short *v)
{
  #line 81 
  *v = (short)((unsigned int)*v + 1U);
  #line 82 
  return (int)*v;
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/current.c"
static struct task_struct ldv_current;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/current.c"
struct task_struct *ldv_get_current(void)
{
  #line 28 
  ldv_current.pid = 1;
  #line 29 
  return & ldv_current;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_interrupt_context(void);
#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_process_context(void);
#line 50  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
bool ldv_in_interrupt_context(void);
#line 112  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_init(int init_ret_val);
#line 132  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_probe(int probe_ret_val);
#line 133  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 133 
void ldv_check_return_value_probe(int);
#line 141 
#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_filter_err_code(int ret_val);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
#line 23 
void __VERIFIER_assume(int);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
static bool __ldv_in_interrupt_context = (_Bool)0;
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_interrupt_context(void)
{
  #line 31 
  __ldv_in_interrupt_context = (_Bool)1;
  #line 32 
  return;
}

#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_process_context(void)
{
  #line 37 
  __ldv_in_interrupt_context = (_Bool)0;
  #line 38 
  return;
}

#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
bool ldv_in_interrupt_context(void)
{
  #line 42 
  return __ldv_in_interrupt_context;
}

#line 45  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
static int ldv_filter_positive_int(int val)
{
  #line 47 
  __VERIFIER_assume(val <= 0);
  #line 48 
  return val;
}

#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_init(int init_ret_val)
{
  #line 57 
  return ldv_filter_positive_int(init_ret_val);
}

#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_probe(int probe_ret_val)
{
  #line 63 
  ldv_check_return_value_probe(probe_ret_val);
  #line 64 
  return ldv_filter_positive_int(probe_ret_val);
}

#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_filter_err_code(int ret_val)
{
  #line 70 
  return ldv_filter_positive_int(ret_val);
}

#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/common/list.h"
#line 28 
void ldv_save_allocated_memory_to_list(void *);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
void *ldv_dev_get_drvdata(struct device *dev);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
int ldv_dev_set_drvdata(struct device *dev, void *data);
#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 57 
void *ldv_xzalloc(size_t size);
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
void *ldv_dev_get_drvdata(struct device *dev)
{
  #line 31 
  if (dev != (struct device *)0 && dev->p != (struct device_private *)0) 
    #line 32 
    return (dev->p)->driver_data;
  #line 34 
  return (void *)0;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
int ldv_dev_set_drvdata(struct device *dev, void *data)
{
  #line 45 
  dev->p = (struct device_private *)ldv_xzalloc(8UL);
  #line 46 
  ldv_save_allocated_memory_to_list((void *)dev->p);
  #line 47 
  (dev->p)->driver_data = data;
  #line 49 
  return 0;
}

#line 156  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 156 
void ldv_check_alloc_flags(gfp_t);
#line 48  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 48 
void *ldv_malloc(size_t size);
#line 49 
#line 49 
void *ldv_calloc(size_t nmemb, size_t size);
#line 50 
#line 50 
void *ldv_zalloc(size_t size);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kmalloc(size_t size, gfp_t flags)
{
  #line 26 
  void *res;
  #line 28 
  ldv_check_alloc_flags(flags);
  #line 29 
  res = ldv_malloc(size);
  #line 30 
  ldv_save_allocated_memory_to_list(res);
  #line 32 
  return res;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kzalloc(size_t size, gfp_t flags)
{
  #line 37 
  void *res;
  #line 39 
  ldv_check_alloc_flags(flags);
  #line 40 
  res = ldv_zalloc(size);
  #line 41 
  ldv_save_allocated_memory_to_list(res);
  #line 43 
  return res;
}

#line 46  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kmalloc_array(size_t n, size_t size, gfp_t flags)
{
  #line 48 
  void *res;
  #line 50 
  ldv_check_alloc_flags(flags);
  #line 51 
  res = ldv_malloc(n * size);
  #line 52 
  ldv_save_allocated_memory_to_list(res);
  #line 54 
  return res;
}

#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kcalloc(size_t n, size_t size, gfp_t flags)
{
  #line 59 
  void *res;
  #line 61 
  ldv_check_alloc_flags(flags);
  #line 62 
  res = ldv_calloc(n,size);
  #line 63 
  ldv_save_allocated_memory_to_list(res);
  #line 65 
  return res;
}

#line 51  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 51 
void ldv_free(void *s);
#line 59 
#line 59 
void *ldv_malloc_unknown_size(void);
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 31 
int ldv_undef_int_positive(void);
#line 40 
#line 40 
int ldv_undef_int_nonpositive(void);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/firmware_loader.c"
int ldv_request_firmware(struct firmware **fw)
{
  #line 27 
  int retval;
  #line 26 
  struct firmware *_fw = (struct firmware *)0;
  #line 29 
  retval = ldv_undef_int_nonpositive();
  #line 31 
  if (retval == 0) {
    #line 33 
    _fw = (struct firmware *)ldv_xzalloc(32UL);
    #line 34 
    _fw->data = (u8 *)ldv_malloc_unknown_size();
    #line 35 
    __VERIFIER_assume(_fw->data != (u8 *)0U);
    #line 36 
    _fw->size = (unsigned long)ldv_undef_int_positive();
  }
  #line 39 
  *fw = _fw;
  #line 41 
  return retval;
}

#line 44  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/firmware_loader.c"
void ldv_release_firmware(struct firmware *fw)
{
  #line 46 
  if (fw != (struct firmware *)0) {
    #line 48 
    ldv_free((void *)fw->data);
    #line 49 
    ldv_free((void *)fw);
  }
  #line 51 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/i2c.h"
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/i2c/i2c-core-smbus.c"
s32 ldv_i2c_smbus_read_block_data(u8 *values);
#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 55 
void *ldv_xmalloc(size_t size);
#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 34 
int ldv_undef_int_negative(void);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/i2c/i2c-core-smbus.c"
s32 ldv_i2c_smbus_read_block_data(u8 *values)
{
  #line 27 
  __u8 size;
  #line 28 
  char *bytes;
  #line 30 
  if (ldv_undef_int() != 0) {
    #line 33 
    size = (unsigned char)ldv_undef_int_positive();
    #line 35 
    __VERIFIER_assume((unsigned int)size <= 32U);
    #line 37 
    bytes = (char *)ldv_xmalloc((unsigned long)size);
    #line 39 
    memcpy((void *)values,(void *)bytes,(unsigned long)size);
    #line 40 
    ldv_free((void *)bytes);
    #line 42 
    return (int)size;
  }
  else {
    #line 46 
    return ldv_undef_int_negative();
  }
}

#line 988  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
__inline static void v4l2_set_subdevdata(struct v4l2_subdev *sd, void *p)
{
  #line 990 
  sd->dev_priv = p;
  #line 991 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/media/v4l2-common.h"
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/media/v4l2-core/v4l2-i2c.c"
void ldv_v4l2_i2c_subdev_init(struct v4l2_subdev *sd, struct i2c_client *client, struct v4l2_subdev_ops *ops);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/media/v4l2-core/v4l2-i2c.c"
void ldv_v4l2_i2c_subdev_init(struct v4l2_subdev *sd, struct i2c_client *client, struct v4l2_subdev_ops *ops)
{
  #line 26 
  sd->ops = ops;
  #line 27 
  v4l2_set_subdevdata(sd,(void *)client);
  #line 28 
  ldv_dev_set_drvdata(& client->dev,(void *)sd);
  #line 29 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/spi.c"
struct spi_controller *ldv_spi_alloc_master(struct device *host, unsigned int size)
{
  #line 25 
  struct spi_controller *master;
  #line 27 
  master = (struct spi_controller *)ldv_zalloc((unsigned long)size + 2936UL);
  #line 29 
  if (master == (struct spi_controller *)0) 
                                            #line 30 
                                            return (struct spi_controller *)0;
  #line 32 
  ldv_dev_set_drvdata(& master->dev,(void *)(master + 1U));
  #line 34 
  return master;
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/fb.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
struct fb_info *ldv_framebuffer_alloc(size_t size);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/fb.h"
#line 38  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
void ldv_framebuffer_release(struct fb_info *info);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
struct fb_info *ldv_framebuffer_alloc(size_t size)
{
  #line 25 
  struct fb_info *info;
  #line 27 
  info = (struct fb_info *)ldv_zalloc(size + 1568UL);
  #line 29 
  if (info == (struct fb_info *)0) 
                                   #line 30 
                                   return (struct fb_info *)0;
  #line 32 
  if (size != 0UL) 
                   #line 33 
                   info->par = (void *)((char *)info + 1568UL);
  #line 35 
  return info;
}

#line 38  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
void ldv_framebuffer_release(struct fb_info *info)
{
  #line 40 
  if (info == (struct fb_info *)0) 
                                   #line 41 
                                   return;
  #line 44 
  ldv_free((void *)info->apertures);
  #line 46 
  ldv_free((void *)info);
  #line 47 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err_or_null(void *ptr);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
void *ldv_err_ptr(long error);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err(void *ptr)
{
  #line 29 
  if ((unsigned long)ptr > 18446744073709547520UL) 
                                                   #line 30 
                                                   return (_Bool)1; else 
                                                                    #line 32 
                                                                    return (_Bool)0;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
void *ldv_err_ptr(long error)
{
  #line 37 
  unsigned long result;
  #line 39 
  __VERIFIER_assume(error < 0L);
  #line 40 
  __VERIFIER_assume(error >= -4095L);
  #line 41 
  result = 18446744073709547520UL - (unsigned long)error;
  #line 42 
  __VERIFIER_assume(result > 18446744073709547520UL);
  #line 44 
  return (void *)result;
}

#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
long ldv_ptr_err(void *ptr)
{
  #line 49 
  long result;
  #line 51 
  __VERIFIER_assume((unsigned long)ptr > 18446744073709547520UL);
  #line 52 
  result = (long)(18446744073709547520UL - (unsigned long)ptr);
  #line 53 
  __VERIFIER_assume(result < 0L);
  #line 54 
  __VERIFIER_assume(result >= -4095L);
  #line 56 
  return result;
}

#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err_or_null(void *ptr)
{
  #line 61 
  int tmp_0;
  #line 61 
  if (ptr == (void *)0) 
                        #line 61 
                        tmp_0 = 1;
  else {
    #line 61 
    if ((int)ldv_is_err(ptr) != 0) 
                                   #line 61 
                                   tmp_0 = 1; else 
                                                   #line 61 
                                                   tmp_0 = 0;
  }
  #line 61 
  return (_Bool)(tmp_0 != 0);
}

#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/panic.h"
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/kernel/panic.c"
void ldv_panic(void);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/kernel/panic.c"
void ldv_panic(void)
{
  #line 23 
  __VERIFIER_assume(0);
  #line 24 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_set(unsigned long *map, unsigned int start, int nbits);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_clear(unsigned long *map, unsigned int start, int nbits);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 72  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_zero(unsigned long *dst, unsigned int nbits);
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 78  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
unsigned long ldv_bitmap_find_next_zero_area(unsigned long *map, unsigned long size, unsigned long start, unsigned int nr, unsigned long align_mask);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 23 
unsigned long ldv_find_next_zero_bit(unsigned long *addr, unsigned long size, unsigned long offset);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_set_bit(long nr, unsigned long *addr)
{
  #line 24 
  *(addr + (unsigned long)nr / 64UL) |= 1UL << ((unsigned long)nr & 63UL);
  #line 25 
  return;
}

#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_clear_bit(long nr, unsigned long *addr)
{
  #line 29 
  *(addr + (unsigned long)nr / 64UL) &= ~ (1UL << ((unsigned long)nr & 63UL));
  #line 30 
  return;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_set(unsigned long *map, unsigned int start, int nbits)
{
  #line 34 
  unsigned long *p = map + (unsigned long)(start / 64U);
  #line 35 
  unsigned int size = start + (unsigned int)nbits;
  #line 36 
  int bits_to_set = (int)(64U - (start & 63U));
  #line 37 
  unsigned long mask_to_set = 18446744073709551615UL << ((unsigned long)start & 63UL);
  #line 39 
  while (nbits - bits_to_set >= 0) {
    #line 40 
    *p |= mask_to_set;
    #line 41 
    nbits -= bits_to_set;
    #line 42 
    bits_to_set = 64;
    #line 43 
    mask_to_set = 18446744073709551615UL;
    #line 44 
    p ++;
  }
  #line 46 
  if (nbits != 0) {
    #line 47 
    mask_to_set = (18446744073709551615UL >> ((unsigned long)(- size) & 63UL)) & mask_to_set;
    #line 48 
    *p |= mask_to_set;
  }
  #line 50 
  return;
}

#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_clear(unsigned long *map, unsigned int start, int nbits)
{
  #line 54 
  unsigned long *p = map + (unsigned long)(start / 64U);
  #line 55 
  unsigned int size = start + (unsigned int)nbits;
  #line 56 
  int bits_to_clear = (int)(64U - (start & 63U));
  #line 57 
  unsigned long mask_to_clear = 18446744073709551615UL << ((unsigned long)start & 63UL);
  #line 59 
  while (nbits - bits_to_clear >= 0) {
    #line 60 
    *p &= ~ mask_to_clear;
    #line 61 
    nbits -= bits_to_clear;
    #line 62 
    bits_to_clear = 64;
    #line 63 
    mask_to_clear = 18446744073709551615UL;
    #line 64 
    p ++;
  }
  #line 66 
  if (nbits != 0) {
    #line 67 
    mask_to_clear = (18446744073709551615UL >> ((unsigned long)(- size) & 63UL)) & mask_to_clear;
    #line 68 
    *p &= ~ mask_to_clear;
  }
  #line 70 
  return;
}

#line 72  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_zero(unsigned long *dst, unsigned int nbits)
{
  #line 74 
  unsigned int len = (unsigned int)(((unsigned long)nbits + 63UL) / 64UL) * 8U;
  #line 75 
  memset((void *)dst,0,(unsigned long)len);
  #line 76 
  return;
}

#line 78  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
unsigned long ldv_bitmap_find_next_zero_area(unsigned long *map, unsigned long size, unsigned long start, unsigned int nr, unsigned long align_mask)
{
  #line 80 
  unsigned long index;
  #line 80 
  unsigned long end;
  #line 80 
  unsigned long i;
  #line 82 
  again: 
         #line 82 
  ;
  #line 83 
  index = ldv_find_next_zero_bit(map,size,start);
  #line 84 
  index = (index + align_mask) & ~ align_mask;
  #line 85 
  end = (unsigned long)nr + index;
  #line 87 
  if (end > size) 
                  #line 88 
                  return end;
  #line 90 
  i = ldv_find_next_bit(map,end,index);
  #line 92 
  if (i < end) {
    #line 93 
    start = i + 1UL;
    #line 94 
    goto again;
  }
  #line 97 
  return index;
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 25 
void ldv_check_find_bit_offset(unsigned long, unsigned long);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_ffs(unsigned long word)
{
  #line 23 
  int num = 0;
  #line 25 
  if ((word & 4294967295UL) == 0UL) {
    #line 26 
    num += 32;
    #line 27 
    word >>= 32;
  }
  #line 29 
  if ((word & 65535UL) == 0UL) {
    #line 30 
    num += 16;
    #line 31 
    word >>= 16;
  }
  #line 33 
  if ((word & 255UL) == 0UL) {
    #line 34 
    num += 8;
    #line 35 
    word >>= 8;
  }
  #line 37 
  if ((word & 15UL) == 0UL) {
    #line 38 
    num += 4;
    #line 39 
    word >>= 4;
  }
  #line 41 
  if ((word & 3UL) == 0UL) {
    #line 42 
    num += 2;
    #line 43 
    word >>= 2;
  }
  #line 45 
  if ((word & 1UL) == 0UL) 
                           #line 46 
                           num ++;
  #line 48 
  return (unsigned long)num;
}

#line 51  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_min(unsigned long a, unsigned long b)
{
  #line 53 
  if (a < b) 
             #line 54 
             return a;
  #line 56 
  return b;
}

#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_restrict_find_bit_res(unsigned long res, unsigned long size)
{
  #line 62 
  __VERIFIER_assume(1);
  #line 63 
  __VERIFIER_assume(res <= size);
  #line 65 
  return res;
}

#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_first_bit(unsigned long *addr, unsigned long size)
{
  #line 70 
  unsigned long i;
  #line 72 
  i = 0UL;
  #line 72 
  while (i * 64UL < size) {
    #line 73 
    if (*(addr + i) != 0UL) {
      #line 74 
      ;
      #line 74 
      ;
      #line 74 
      ;
      #line 74 
      return ldv_restrict_find_bit_res(ldv_min(i * 64UL + ldv_ffs(*(addr + i)),size),
                                  size);
    }
    #line 72 
    i ++;
  }
  #line 76 
  return size;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_next_bit(unsigned long *addr, unsigned long size, unsigned long offset)
{
  #line 81 
  unsigned long tmp;
  #line 83 
  ldv_check_find_bit_offset(size,offset);
  #line 85 
  tmp = *(addr + offset / 64UL);
  #line 86 
  tmp = (unsigned long)((18446744073709551615ULL << (offset & 63UL)) & (unsigned long long)tmp);
  #line 87 
  offset &= 18446744073709551552UL;
  #line 89 
  while (tmp == 0UL) {
    #line 90 
    offset += 64UL;
    #line 91 
    if (offset >= size) 
                        #line 92 
                        return size;
    #line 94 
    tmp = *(addr + offset / 64UL);
  }
  #line 97 
  ;
  #line 97 
  ;
  #line 97 
  ;
  #line 97 
  return ldv_restrict_find_bit_res(ldv_min(ldv_ffs(tmp) + offset,size),size);
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_next_zero_bit(unsigned long *addr, unsigned long size, unsigned long offset)
{
  #line 102 
  unsigned long tmp;
  #line 104 
  ldv_check_find_bit_offset(size,offset);
  #line 106 
  tmp = *(addr + offset / 64UL);
  #line 107 
  tmp = ~ tmp;
  #line 108 
  tmp = (unsigned long)((18446744073709551615ULL << (offset & 63UL)) & (unsigned long long)tmp);
  #line 109 
  offset &= 18446744073709551552UL;
  #line 111 
  while (tmp == 0UL) {
    #line 112 
    offset += 64UL;
    #line 113 
    if (offset >= size) 
                        #line 114 
                        return size;
    #line 116 
    tmp = *(addr + offset / 64UL);
    #line 117 
    tmp = ~ tmp;
  }
  #line 120 
  ;
  #line 120 
  ;
  #line 120 
  ;
  #line 120 
  return ldv_restrict_find_bit_res(ldv_min(ldv_ffs(tmp) + offset,size),size);
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
size_t ldv_strlen(char *s);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strncmp(char *cs, char *ct, __kernel_size_t count);
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 70  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
char *ldv_strstr(char *cs, char *ct);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
size_t ldv_strlen(char *s)
{
  #line 23 
  unsigned int len = 0U;
  #line 25 
  while ((int)*s != 0) {
    #line 26 
    len ++;
    #line 25 
    s ++;
  }
  #line 28 
  return (unsigned long)len;
}

#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strcmp(char *cs, char *ct)
{
  #line 33 
  while ((int)*cs != 0 && (int)*ct != 0) {
    #line 34 
    if ((int)*cs != (int)*ct) 
                              #line 35 
                              break;
    #line 33 
    cs ++;
    #line 33 
    ct ++;
  }
  #line 37 
  return (int)*cs - (int)*ct;
}

#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strncmp(char *cs, char *ct, __kernel_size_t count)
{
  #line 42 
  if (count == 0UL) 
                    #line 43 
                    return 0;
  #line 45 
  while ((int)*cs != 0 && (int)*ct != 0) {
    #line 46 
    if ((int)*cs != (int)*ct) 
                              #line 47 
                              break;
    #line 49 
    count --;
    #line 51 
    if (count == 0UL) 
                      #line 52 
                      break;
    #line 45 
    cs ++;
    #line 45 
    ct ++;
  }
  #line 55 
  return (int)*cs - (int)*ct;
}

#line 58  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_memcmp(void *cs, void *ct, size_t count)
{
  #line 60 
  unsigned char *su1;
  #line 60 
  unsigned char *su2;
  #line 61 
  int res = 0;
  #line 63 
  su1 = (unsigned char *)cs;
  #line 63 
  su2 = (unsigned char *)ct;
  #line 63 
  while (count != 0UL) {
    #line 64 
    res = (int)*su1 - (int)*su2;
    #line 64 
    if (res != 0) 
                  #line 65 
                  break;
    #line 63 
    su1 ++;
    #line 63 
    su2 ++;
    #line 63 
    count --;
  }
  #line 67 
  return res;
}

#line 70  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
char *ldv_strstr(char *cs, char *ct)
{
  #line 72 
  size_t cs_len;
  #line 72 
  size_t ct_len;
  #line 74 
  cs_len = ldv_strlen(cs);
  #line 75 
  ct_len = ldv_strlen(ct);
  #line 77 
  while (cs_len >= ct_len) {
    #line 78 
    if (ldv_memcmp((void *)cs,(void *)ct,ct_len) == 0) 
                                                       #line 79 
                                                       return cs;
    #line 81 
    cs_len --;
    #line 82 
    cs ++;
  }
  #line 85 
  return (char *)0;
}

#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/list.c"
void ldv_init_list_head(struct list_head *list)
{
  #line 23 
  list->next = list;
  #line 24 
  list->prev = list;
  #line 25 
  return;
}

#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc_array(size_t n, size_t size, gfp_t flags);
#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct kmem_cache *ldv_kmem_cache_create(char *name, unsigned int size);
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_alloc(struct kmem_cache *cachep, gfp_t flags);
#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_zalloc(struct kmem_cache *cachep, gfp_t flags);
#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_free(struct kmem_cache *cachep, void *objp);
#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_destroy(struct kmem_cache *cachep);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc(size_t size, gfp_t flags)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_flags(flags);
  #line 28 
  res = ldv_malloc(size);
  #line 30 
  return res;
}

#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kzalloc(size_t size, gfp_t flags)
{
  #line 35 
  void *res;
  #line 37 
  ldv_check_alloc_flags(flags);
  #line 38 
  res = ldv_zalloc(size);
  #line 40 
  return res;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc_array(size_t n, size_t size, gfp_t flags)
{
  #line 45 
  void *res;
  #line 47 
  ldv_check_alloc_flags(flags);
  #line 48 
  res = ldv_malloc(n * size);
  #line 50 
  return res;
}

#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kcalloc(size_t n, size_t size, gfp_t flags)
{
  #line 55 
  void *res;
  #line 57 
  ldv_check_alloc_flags(flags);
  #line 58 
  res = ldv_calloc(n,size);
  #line 60 
  return res;
}

#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct kmem_cache *ldv_kmem_cache_create(char *name, unsigned int size)
{
  #line 71 
  struct kmem_cache *res;
  #line 72 
  struct ldv_kmem_cache *ldv_res;
  #line 74 
  res = (struct kmem_cache *)ldv_zalloc(16UL);
  #line 76 
  if (res != (struct kmem_cache *)0) {
    #line 77 
    ldv_res = (struct ldv_kmem_cache *)res;
    #line 78 
    ldv_res->name = name;
    #line 79 
    ldv_res->size = size;
  }
  #line 82 
  return res;
}

#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_alloc(struct kmem_cache *cachep, gfp_t flags)
{
  #line 87 
  return ldv_kmalloc((unsigned long)((struct ldv_kmem_cache *)cachep)->size,
                  flags);
}

#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_zalloc(struct kmem_cache *cachep, gfp_t flags)
{
  #line 92 
  return ldv_kzalloc((unsigned long)((struct ldv_kmem_cache *)cachep)->size,
                  flags);
}

#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_free(struct kmem_cache *cachep, void *objp)
{
  #line 97 
  ldv_free(objp);
  #line 98 
  return;
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_destroy(struct kmem_cache *cachep)
{
  #line 102 
  ldv_free((void *)cachep);
  #line 103 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/util.c"
void *ldv_kmemdup(void *src, size_t len, gfp_t gfp);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/util.c"
void *ldv_kmemdup(void *src, size_t len, gfp_t gfp)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_flags(gfp);
  #line 28 
  res = ldv_malloc(len);
  #line 30 
  if (res != (void *)0) 
                        #line 31 
                        memcpy(res,src,len);
  #line 33 
  return res;
}

#line 162  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 162 
void ldv_check_alloc_nonatomic(void);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/vmalloc.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vmalloc(unsigned long size);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vmalloc(unsigned long size)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_nonatomic();
  #line 28 
  res = ldv_malloc(size);
  #line 30 
  return res;
}

#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vzalloc(unsigned long size)
{
  #line 35 
  void *res;
  #line 37 
  ldv_check_alloc_nonatomic();
  #line 38 
  res = ldv_zalloc(size);
  #line 40 
  return res;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void ldv_vfree(void *addr)
{
  #line 45 
  ldv_free(addr);
  #line 46 
  return;
}

#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 28 
void *malloc(size_t);
#line 29 
#line 29 
void *calloc(size_t, size_t);
#line 30 
#line 30 
void free(void *);
#line 45 
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
unsigned int ldv_is_memory_alloc_failures;
#line 56  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xcalloc(size_t nmemb, size_t size);
#line 60  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc_unknown_size(void);
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 97  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc_unknown_size(void);
#line 64  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc(size_t size);
#line 65  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc(size_t nmemb, size_t size);
#line 66  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc(size_t size);
#line 67  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void ldv_reference_free(void *s);
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_realloc(void *ptr, size_t size);
#line 71  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 80  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc(size_t size);
#line 72  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xcalloc(size_t nmemb, size_t size);
#line 73  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xzalloc(size_t size);
#line 75  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 110  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc_unknown_size(void);
#line 76  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 124  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc_unknown_size(void);
#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc_unknown_size(void);
#line 83  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 106  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc_unknown_size(size_t size);
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 144  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc_unknown_size(size_t size);
#line 87  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 87 
void *external_allocated_data(void);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
unsigned int ldv_is_memory_alloc_failures = 1U;
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc(size_t size)
{
  #line 26 
  void *res;
  #line 28 
  if (ldv_is_memory_alloc_failures != 0U) {
    #line 28 
    if (ldv_undef_int() != 0) 
                              #line 29 
                              return (void *)0;
  }
  #line 32 
  res = malloc(size);
  #line 33 
  __VERIFIER_assume(res != (void *)0);
  #line 34 
  return res;
}

#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc(size_t nmemb, size_t size)
{
  #line 39 
  return calloc(nmemb,size);
}

#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc(size_t size)
{
  #line 44 
  return calloc(1UL,size);
}

#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void ldv_reference_free(void *s)
{
  #line 49 
  free(s);
  #line 50 
  return;
}

#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_realloc(void *ptr, size_t size)
{
  #line 54 
  void *res;
  #line 56 
  if (ptr != (void *)0 && size == 0UL) {
    #line 57 
    free(ptr);
    #line 58 
    return (void *)0;
  }
  #line 61 
  if (ptr == (void *)0) {
    #line 62 
    res = malloc(size);
    #line 63 
    return res;
  }
  #line 66 
  if (ldv_undef_int() != 0) {
    #line 68 
    res = malloc(size);
    #line 69 
    __VERIFIER_assume(res != (void *)0);
    #line 71 
    memcpy(res,ptr,size);
    #line 72 
    free(ptr);
    #line 74 
    return res;
  }
  else 
       #line 77 
       return (void *)0;
}

#line 80  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc(size_t size)
{
  #line 82 
  void *res;
  #line 84 
  res = malloc(size);
  #line 85 
  __VERIFIER_assume(res != (void *)0);
  #line 87 
  return res;
}

#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xcalloc(size_t nmemb, size_t size)
{
  #line 92 
  void *res;
  #line 94 
  res = calloc(nmemb,size);
  #line 95 
  __VERIFIER_assume(res != (void *)0);
  #line 97 
  return res;
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xzalloc(size_t size)
{
  #line 102 
  void *res;
  #line 104 
  res = calloc(1UL,size);
  #line 105 
  __VERIFIER_assume(res != (void *)0);
  #line 107 
  return res;
}

#line 110  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc_unknown_size(void)
{
  #line 112 
  void *res;
  #line 114 
  if (ldv_undef_int() != 0) {
    #line 116 
    res = external_allocated_data();
    #line 117 
    __VERIFIER_assume(res != (void *)0);
    #line 118 
    return res;
  }
  else 
       #line 121 
       return (void *)0;
}

#line 124  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc_unknown_size(void)
{
  #line 126 
  void *res;
  #line 128 
  if (ldv_undef_int() != 0) {
    #line 130 
    res = external_allocated_data();
    #line 131 
    memset(res,0,8UL);
    #line 132 
    __VERIFIER_assume(res != (void *)0);
    #line 133 
    return res;
  }
  else 
       #line 136 
       return (void *)0;
}

#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc_unknown_size(void)
{
  #line 141 
  return ldv_reference_calloc_unknown_size();
}

#line 144  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc_unknown_size(size_t size)
{
  #line 146 
  void *res;
  #line 149 
  res = external_allocated_data();
  #line 150 
  __VERIFIER_assume(res != (void *)0);
  #line 152 
  return res;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_malloc(size_t size)
{
  #line 25 
  void *res;
  #line 26 
  res = ldv_reference_malloc(size);
  #line 27 
  if (res != (void *)0) {
    #line 28 
    int tmp_0;
    #line 28 
    if (ldv_is_err(res)) 
                         #line 28 
                         tmp_0 = 0; else 
                                         #line 28 
                                         tmp_0 = 1;
    #line 28 
    __VERIFIER_assume(tmp_0);
  }
  #line 29 
  return res;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc(size_t nmemb, size_t size)
{
  #line 34 
  void *res;
  #line 35 
  res = ldv_reference_calloc(nmemb,size);
  #line 36 
  if (res != (void *)0) {
    #line 37 
    int tmp_0;
    #line 37 
    if (ldv_is_err(res)) 
                         #line 37 
                         tmp_0 = 0; else 
                                         #line 37 
                                         tmp_0 = 1;
    #line 37 
    __VERIFIER_assume(tmp_0);
  }
  #line 38 
  return res;
}

#line 41  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc(size_t size)
{
  #line 43 
  void *res;
  #line 44 
  res = ldv_reference_zalloc(size);
  #line 45 
  if (res != (void *)0) {
    #line 46 
    int tmp_0;
    #line 46 
    if (ldv_is_err(res)) 
                         #line 46 
                         tmp_0 = 0; else 
                                         #line 46 
                                         tmp_0 = 1;
    #line 46 
    __VERIFIER_assume(tmp_0);
  }
  #line 47 
  return res;
}

#line 50  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void ldv_free(void *s)
{
  #line 52 
  ldv_reference_free(s);
  #line 53 
  return;
}

#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc(size_t size)
{
  #line 57 
  void *res;
  #line 59 
  int tmp_0;
  #line 58 
  res = ldv_reference_xmalloc(size);
  #line 59 
  if (ldv_is_err(res)) 
                       #line 59 
                       tmp_0 = 0; else 
                                       #line 59 
                                       tmp_0 = 1;
  #line 59 
  __VERIFIER_assume(tmp_0);
  #line 60 
  return res;
}

#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xcalloc(size_t nmemb, size_t size)
{
  #line 65 
  void *res;
  #line 67 
  int tmp_0;
  #line 66 
  res = ldv_reference_xcalloc(nmemb,size);
  #line 67 
  if (ldv_is_err(res)) 
                       #line 67 
                       tmp_0 = 0; else 
                                       #line 67 
                                       tmp_0 = 1;
  #line 67 
  __VERIFIER_assume(tmp_0);
  #line 68 
  return res;
}

#line 71  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xzalloc(size_t size)
{
  #line 73 
  void *res;
  #line 75 
  int tmp_0;
  #line 74 
  res = ldv_reference_xzalloc(size);
  #line 75 
  if (ldv_is_err(res)) 
                       #line 75 
                       tmp_0 = 0; else 
                                       #line 75 
                                       tmp_0 = 1;
  #line 75 
  __VERIFIER_assume(tmp_0);
  #line 76 
  return res;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_malloc_unknown_size(void)
{
  #line 81 
  void *res;
  #line 82 
  res = ldv_reference_malloc_unknown_size();
  #line 83 
  if (res != (void *)0) {
    #line 84 
    int tmp_0;
    #line 84 
    if (ldv_is_err(res)) 
                         #line 84 
                         tmp_0 = 0; else 
                                         #line 84 
                                         tmp_0 = 1;
    #line 84 
    __VERIFIER_assume(tmp_0);
  }
  #line 85 
  return res;
}

#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc_unknown_size(void)
{
  #line 90 
  void *res;
  #line 91 
  res = ldv_reference_calloc_unknown_size();
  #line 92 
  if (res != (void *)0) {
    #line 93 
    int tmp_0;
    #line 93 
    if (ldv_is_err(res)) 
                         #line 93 
                         tmp_0 = 0; else 
                                         #line 93 
                                         tmp_0 = 1;
    #line 93 
    __VERIFIER_assume(tmp_0);
  }
  #line 94 
  return res;
}

#line 97  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc_unknown_size(void)
{
  #line 99 
  void *res;
  #line 100 
  res = ldv_reference_zalloc_unknown_size();
  #line 101 
  if (res != (void *)0) {
    #line 102 
    int tmp_0;
    #line 102 
    if (ldv_is_err(res)) 
                         #line 102 
                         tmp_0 = 0; else 
                                         #line 102 
                                         tmp_0 = 1;
    #line 102 
    __VERIFIER_assume(tmp_0);
  }
  #line 103 
  return res;
}

#line 106  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc_unknown_size(size_t size)
{
  #line 108 
  void *res;
  #line 110 
  int tmp_0;
  #line 109 
  res = ldv_reference_xmalloc_unknown_size(size);
  #line 110 
  if (ldv_is_err(res)) 
                       #line 110 
                       tmp_0 = 0; else 
                                       #line 110 
                                       tmp_0 = 1;
  #line 110 
  __VERIFIER_assume(tmp_0);
  #line 111 
  return res;
}

/* compiler builtin: 
   long __builtin_expect(long exp, long c);   */
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
#line 22 
void __VERIFIER_error(void);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
long __builtin_expect(long exp, long c)
{
  #line 26 
  return exp;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/gcc.c"
void __builtin_trap(void)
{
  #line 37 
  __VERIFIER_error();
  #line 38 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
long ldv_undef_long(void);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned int ldv_undef_uint(void);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long ldv_undef_ulong(void);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long long ldv_undef_ulonglong(void);
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr(void);
#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonnegative(void);
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr_non_null(void);
#line 54  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range(int begin, int end);
#line 56  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 151  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range2(int begin, int end);
#line 29 
#line 29 
int __VERIFIER_nondet_int(void);
#line 31 
#line 31 
long __VERIFIER_nondet_long(void);
#line 38 
#line 38 
unsigned int __VERIFIER_nondet_uint(void);
#line 41 
#line 41 
unsigned long __VERIFIER_nondet_ulong(void);
#line 42 
#line 42 
unsigned long long __VERIFIER_nondet_ulonglong(void);
#line 43 
#line 43 
void *__VERIFIER_nondet_pointer(void);
#line 45  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int(void)
{
  #line 48 
  int undef_int = __VERIFIER_nondet_int();
  #line 50 
  return undef_int;
}

#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
long ldv_undef_long(void)
{
  #line 56 
  long undef_long = __VERIFIER_nondet_long();
  #line 58 
  return undef_long;
}

#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned int ldv_undef_uint(void)
{
  #line 64 
  unsigned int undef_uint = __VERIFIER_nondet_uint();
  #line 66 
  return undef_uint;
}

#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr(void)
{
  #line 72 
  void *undef_ptr = __VERIFIER_nondet_pointer();
  #line 74 
  return undef_ptr;
}

#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long ldv_undef_ulong(void)
{
  #line 80 
  unsigned long undef_ulong = __VERIFIER_nondet_ulong();
  #line 82 
  return undef_ulong;
}

#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long long ldv_undef_ulonglong(void)
{
  #line 88 
  unsigned long long undef_ulonglong = __VERIFIER_nondet_ulonglong();
  #line 90 
  return undef_ulonglong;
}

#line 93  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_positive(void)
{
  #line 95 
  int ret = ldv_undef_int();
  #line 97 
  __VERIFIER_assume(ret > 0);
  #line 99 
  return ret;
}

#line 102  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_negative(void)
{
  #line 104 
  int ret = ldv_undef_int();
  #line 106 
  __VERIFIER_assume(ret < 0);
  #line 108 
  return ret;
}

#line 111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonnegative(void)
{
  #line 113 
  int ret = ldv_undef_int();
  #line 115 
  __VERIFIER_assume(ret >= 0);
  #line 117 
  return ret;
}

#line 120  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonpositive(void)
{
  #line 122 
  int ret = ldv_undef_int();
  #line 124 
  __VERIFIER_assume(ret <= 0);
  #line 126 
  return ret;
}

#line 129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr_non_null(void)
{
  #line 131 
  void *ret = ldv_undef_ptr();
  #line 133 
  __VERIFIER_assume(ret != (void *)0);
  #line 135 
  return ret;
}

#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range(int begin, int end)
{
  #line 141 
  int ret;
  #line 143 
  ret = ldv_undef_int();
  #line 144 
  __VERIFIER_assume(ret >= begin);
  #line 145 
  __VERIFIER_assume(ret <= end);
  #line 147 
  return ret;
}

#line 151  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range2(int begin, int end)
{
  #line 153 
  int ret;
  #line 155 
  ret = begin;
  #line 155 
  while (ret < end) {
    #line 156 
    if (ldv_undef_int() != 0) 
                              #line 157 
                              break;
    #line 155 
    ret ++;
  }
  #line 159 
  return ret;
}

#line 62  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 62 
void ldv_initialize(void);
#line 123 
#line 123 
void ldv_pre_probe(void);
#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
#line 35 
int pthread_create(pthread_t *, pthread_attr_t *, void *(*)(void *), void *);
#line 39 
#line 39 
int pthread_join(pthread_t, void **);
#line 56  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/emg/0/environment_model.c"
int emg_runtime_enabled = 0;
#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/emg/0/environment_model.c"
int emg_runtime_lowpower = 1;
#line 73 
#line 212 
void *emg_devattr_devattr_instance_dev_attr_phy_flash_cfg(void *arg0);
#line 74 
#line 292 
void *emg_devattr_devattr_instance_dev_attr_phy_type(void *arg0);
#line 77 
#line 189 
void emg_dispatch_deregister_10(struct pci_driver *arg0);
#line 78 
#line 153 
void emg_dispatch_deregister_6(struct device *arg0, struct device_attribute *arg1);
#line 79 
#line 122 
void emg_dispatch_instance_deregister_4(struct timer_list *arg0);
#line 80 
#line 178 
void emg_dispatch_instance_register_9(struct timer_list *arg0);
#line 81 
#line 169 
void emg_dispatch_irq_deregister_7(int arg0);
#line 82 
#line 198 
void emg_dispatch_irq_register_13(int arg0, enum irqreturn (*arg1)(int , void *), enum irqreturn (*arg2)(int , void *), void *arg3);
#line 83 
#line 111 
void emg_dispatch_register_2(struct pci_driver *arg0);
#line 84 
#line 131 
void emg_dispatch_register_5(struct device *arg0, struct device_attribute *arg1);
#line 85 
#line 2010 
void *emg_entry_point_insmod(void *arg0);
#line 88 
#line 374 
void *emg_interrupt_interrupt_scenario_2(void *arg0);
#line 90 
#line 440 
void *emg_pci_pci_scenario_ef4_pci_driver(void *arg0);
#line 92 
#line 618 
void *emg_pm_pm_ops_scenario_ef4_pm_ops(void *arg0);
#line 97 
#line 1613 
void *emg_timer_timer_scenario_5(void *arg0);
#line 99 
#line 2039 
int main(void);
#line 102  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_16;
#line 103  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_17;
#line 104  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_18;
#line 105  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_19;
#line 106  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_20;
#line 107  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_21;
#line 111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_register_2(struct pci_driver *arg0)
{
  #line 112 
  int ret;
  #line 113 
  struct emg_struct_pci_scenario_ef4_pci_driver_19 *cf_arg_19;
  #line 114 
  cf_arg_19 = (struct emg_struct_pci_scenario_ef4_pci_driver_19 *)ldv_xmalloc(16UL);
  #line 115 
  cf_arg_19->arg0 = arg0;
  #line 116 
  ret = pthread_create(& emg_thread_19,(pthread_attr_t *)0,& emg_pci_pci_scenario_ef4_pci_driver,(void *)cf_arg_19);
  #line 117 
  __VERIFIER_assume(ret == 0);
  #line 118 
  return;
}

#line 122  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_instance_deregister_4(struct timer_list *arg0)
{
  #line 123 
  int ret;
  #line 124 
  struct emg_struct_timer_scenario_5_21 *cf_arg_21;
  #line 125 
  ret = pthread_join(emg_thread_21,(void **)0);
  #line 126 
  __VERIFIER_assume(ret == 0);
  #line 127 
  return;
}

#line 131  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_register_5(struct device *arg0, struct device_attribute *arg1)
{
  #line 132 
  int ret;
  #line 133 
  struct emg_struct_devattr_instance_dev_attr_phy_flash_cfg_16 *cf_arg_16;
  #line 134 
  struct emg_struct_devattr_instance_dev_attr_phy_flash_cfg_16 *cf_arg_17;
  #line 135 
  if (ldv_undef_int() != 0) {
    #line 136 
    cf_arg_16 = (struct emg_struct_devattr_instance_dev_attr_phy_flash_cfg_16 *)ldv_xmalloc(24UL);
    #line 137 
    cf_arg_16->arg0 = arg0;
    #line 138 
    cf_arg_16->arg1 = arg1;
    #line 139 
    ret = pthread_create(& emg_thread_16,(pthread_attr_t *)0,& emg_devattr_devattr_instance_dev_attr_phy_flash_cfg,(void *)cf_arg_16);
    #line 140 
    __VERIFIER_assume(ret == 0);
  }
  else {
    #line 143 
    cf_arg_17 = (struct emg_struct_devattr_instance_dev_attr_phy_flash_cfg_16 *)ldv_xmalloc(24UL);
    #line 144 
    cf_arg_17->arg0 = arg0;
    #line 145 
    cf_arg_17->arg1 = arg1;
    #line 146 
    ret = pthread_create(& emg_thread_17,(pthread_attr_t *)0,& emg_devattr_devattr_instance_dev_attr_phy_type,(void *)cf_arg_17);
    #line 147 
    __VERIFIER_assume(ret == 0);
  }
  #line 149 
  return;
}

#line 153  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_deregister_6(struct device *arg0, struct device_attribute *arg1)
{
  #line 154 
  int ret;
  #line 155 
  struct emg_struct_devattr_instance_dev_attr_phy_flash_cfg_16 *cf_arg_16;
  #line 156 
  struct emg_struct_devattr_instance_dev_attr_phy_flash_cfg_16 *cf_arg_17;
  #line 157 
  if (ldv_undef_int() != 0) {
    #line 158 
    ret = pthread_join(emg_thread_16,(void **)0);
    #line 159 
    __VERIFIER_assume(ret == 0);
  }
  else {
    #line 162 
    ret = pthread_join(emg_thread_17,(void **)0);
    #line 163 
    __VERIFIER_assume(ret == 0);
  }
  #line 165 
  return;
}

#line 169  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_irq_deregister_7(int arg0)
{
  #line 170 
  int ret;
  #line 171 
  struct emg_struct_free_irq_7 *cf_arg_18;
  #line 172 
  ret = pthread_join(emg_thread_18,(void **)0);
  #line 173 
  __VERIFIER_assume(ret == 0);
  #line 174 
  return;
}

#line 178  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_instance_register_9(struct timer_list *arg0)
{
  #line 179 
  int ret;
  #line 180 
  struct emg_struct_timer_scenario_5_21 *cf_arg_21;
  #line 181 
  cf_arg_21 = (struct emg_struct_timer_scenario_5_21 *)ldv_xmalloc(16UL);
  #line 182 
  cf_arg_21->arg0 = arg0;
  #line 183 
  ret = pthread_create(& emg_thread_21,(pthread_attr_t *)0,& emg_timer_timer_scenario_5,(void *)cf_arg_21);
  #line 184 
  __VERIFIER_assume(ret == 0);
  #line 185 
  return;
}

#line 189  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_deregister_10(struct pci_driver *arg0)
{
  #line 190 
  int ret;
  #line 191 
  struct emg_struct_pci_scenario_ef4_pci_driver_19 *cf_arg_19;
  #line 192 
  ret = pthread_join(emg_thread_19,(void **)0);
  #line 193 
  __VERIFIER_assume(ret == 0);
  #line 194 
  return;
}

#line 198  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_irq_register_13(int arg0, enum irqreturn (*arg1)(int , void *), enum irqreturn (*arg2)(int , void *), void *arg3)
{
  #line 199 
  int ret;
  #line 200 
  struct emg_struct_interrupt_scenario_2_18 *cf_arg_18;
  #line 201 
  cf_arg_18 = (struct emg_struct_interrupt_scenario_2_18 *)ldv_xmalloc(40UL);
  #line 202 
  cf_arg_18->arg0 = arg0;
  #line 203 
  cf_arg_18->arg1 = arg1;
  #line 204 
  cf_arg_18->arg2 = arg2;
  #line 205 
  cf_arg_18->arg3 = arg3;
  #line 206 
  ret = pthread_create(& emg_thread_18,(pthread_attr_t *)0,& emg_interrupt_interrupt_scenario_2,(void *)cf_arg_18);
  #line 207 
  __VERIFIER_assume(ret == 0);
  #line 208 
  return;
}

#line 212  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/emg/0/environment_model.c"
void *emg_devattr_devattr_instance_dev_attr_phy_flash_cfg(void *arg0)
{
  #line 215 
  struct device_attribute *emg_16_devattr;
  #line 216 
  struct device *emg_16_device;
  #line 217 
  char *emg_16_emg_param_2_0;
  #line 218 
  char *emg_16_emg_param_2_1;
  #line 219 
  unsigned long emg_16_emg_param_3_2;
  #line 220 
  int emg_repeat_cnt_main_16 = 1;
  #line 222 
  struct emg_struct_devattr_instance_dev_attr_phy_flash_cfg_16 *data = (struct emg_struct_devattr_instance_dev_attr_phy_flash_cfg_16 *)arg0;
  #line 225 
  emg_16_devattr = emg_alias_dev_attr_phy_flash_cfg;
  #line 227 
  __VERIFIER_assume(data->arg1 == emg_alias_dev_attr_phy_flash_cfg);
  #line 229 
  if (data != (struct emg_struct_devattr_instance_dev_attr_phy_flash_cfg_16 *)0) {
    #line 230 
    emg_16_device = data->arg0;
    #line 231 
    emg_16_devattr = data->arg1;
    #line 232 
    ldv_free((void *)data);
  }
  #line 237 
  goto emg_main_16;
  #line 241 
  return (void *)0;
  #line 244 
  emg_main_16: 
               #line 244 
  ;
  #line 245 
  if (ldv_undef_int() != 0) {
    #line 246 
    if (ldv_undef_int() != 0) {
      #line 248 
      emg_16_emg_param_2_0 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 248 
      emg_16_emg_param_2_0 = emg_16_emg_param_2_0;
      #line 252 
      emg_wrapper_show_phy_flash_cfg(emg_16_device,emg_16_devattr,emg_16_emg_param_2_0);
      #line 256 
      ldv_free((void *)emg_16_emg_param_2_0);
    }
    else {
      #line 260 
      emg_16_emg_param_2_1 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 260 
      emg_16_emg_param_2_1 = emg_16_emg_param_2_1;
      #line 264 
      emg_wrapper_set_phy_flash_cfg(emg_16_device,emg_16_devattr,emg_16_emg_param_2_1,emg_16_emg_param_3_2);
      #line 268 
      ldv_free((void *)emg_16_emg_param_2_1);
    }
    #line 272 
    if (emg_repeat_cnt_main_16 > 0) {
      #line 273 
      emg_repeat_cnt_main_16 --;
      #line 275 
      goto emg_main_16;
    }
    else 
         #line 277 
         __VERIFIER_assume(0);
  }
  #line 287 
  return (void *)0;
}

#line 292  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/emg/0/environment_model.c"
void *emg_devattr_devattr_instance_dev_attr_phy_type(void *arg0)
{
  #line 295 
  struct device_attribute *emg_17_devattr;
  #line 296 
  struct device *emg_17_device;
  #line 297 
  char *emg_17_emg_param_2_0;
  #line 298 
  char *emg_17_emg_param_2_1;
  #line 299 
  unsigned long emg_17_emg_param_3_2;
  #line 300 
  int emg_repeat_cnt_main_17 = 1;
  #line 302 
  struct emg_struct_devattr_instance_dev_attr_phy_flash_cfg_16 *data = (struct emg_struct_devattr_instance_dev_attr_phy_flash_cfg_16 *)arg0;
  #line 305 
  emg_17_devattr = emg_alias_dev_attr_phy_type;
  #line 307 
  __VERIFIER_assume(data->arg1 == emg_alias_dev_attr_phy_type);
  #line 309 
  if (data != (struct emg_struct_devattr_instance_dev_attr_phy_flash_cfg_16 *)0) {
    #line 310 
    emg_17_device = data->arg0;
    #line 311 
    emg_17_devattr = data->arg1;
    #line 312 
    ldv_free((void *)data);
  }
  #line 317 
  goto emg_main_17;
  #line 321 
  return (void *)0;
  #line 324 
  emg_main_17: 
               #line 324 
  ;
  #line 325 
  if (ldv_undef_int() != 0) {
    #line 326 
    if (ldv_undef_int() != 0) {
      #line 328 
      emg_17_emg_param_2_0 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 328 
      emg_17_emg_param_2_0 = emg_17_emg_param_2_0;
      #line 332 
      emg_wrapper_show_phy_type(emg_17_device,emg_17_devattr,emg_17_emg_param_2_0);
      #line 336 
      ldv_free((void *)emg_17_emg_param_2_0);
    }
    else {
      #line 340 
      emg_17_emg_param_2_1 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 340 
      emg_17_emg_param_2_1 = emg_17_emg_param_2_1;
      #line 344 
      if (emg_17_devattr->store != (ssize_t (*)(struct device *, struct device_attribute *, char *, size_t ))0) 
        #line 345 
        (*(emg_17_devattr->store))(emg_17_device,emg_17_devattr,emg_17_emg_param_2_1,emg_17_emg_param_3_2);
      #line 350 
      ldv_free((void *)emg_17_emg_param_2_1);
    }
    #line 354 
    if (emg_repeat_cnt_main_17 > 0) {
      #line 355 
      emg_repeat_cnt_main_17 --;
      #line 357 
      goto emg_main_17;
    }
    else 
         #line 359 
         __VERIFIER_assume(0);
  }
  #line 369 
  return (void *)0;
}

#line 374  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/emg/0/environment_model.c"
void *emg_interrupt_interrupt_scenario_2(void *arg0)
{
  #line 377 
  enum irqreturn (*emg_18_callback)(int , void *);
  #line 378 
  void *emg_18_data;
  #line 379 
  int emg_18_line;
  #line 380 
  enum irqreturn emg_18_ret_val;
  #line 381 
  enum irqreturn (*emg_18_thread)(int , void *);
  #line 383 
  struct emg_struct_interrupt_scenario_2_18 *data = (struct emg_struct_interrupt_scenario_2_18 *)arg0;
  #line 388 
  if (data != (struct emg_struct_interrupt_scenario_2_18 *)0) {
    #line 389 
    emg_18_line = data->arg0;
    #line 390 
    emg_18_callback = data->arg1;
    #line 391 
    emg_18_thread = data->arg2;
    #line 392 
    emg_18_data = data->arg3;
    #line 393 
    ldv_free((void *)data);
  }
  #line 399 
  ldv_switch_to_interrupt_context();
  #line 403 
  if (emg_18_callback != (enum irqreturn (*)(int , void *))0) 
                                                              #line 404 
                                                              emg_18_ret_val = (*emg_18_callback)(emg_18_line,emg_18_data);
  else {
    #line 406 
    emg_18_ret_val = (enum irqreturn)ldv_undef_int();
  }
  #line 412 
  ldv_switch_to_process_context();
  #line 415 
  if (ldv_undef_int() != 0) {
    #line 417 
    __VERIFIER_assume(emg_18_ret_val == (unsigned int)IRQ_WAKE_THREAD);
    #line 421 
    if (emg_18_thread != (enum irqreturn (*)(int , void *))0) 
                                                              #line 422 
                                                              (*emg_18_thread)(emg_18_line,emg_18_data);
  }
  else 
       #line 427 
       __VERIFIER_assume(emg_18_ret_val != (unsigned int)IRQ_WAKE_THREAD);
  #line 435 
  return (void *)0;
}

#line 440  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/emg/0/environment_model.c"
void *emg_pci_pci_scenario_ef4_pci_driver(void *arg0)
{
  #line 443 
  int emg_19_choice;
  #line 444 
  struct pci_driver *emg_19_container;
  #line 445 
  struct pci_device_id *emg_19_device_id;
  #line 446 
  struct pci_dev *emg_19_resource_0;
  #line 447 
  struct pm_message emg_19_resource_1;
  #line 448 
  int emg_19_ret;
  #line 449 
  int emg_repeat_cnt_call_19_0 = 1;
  #line 450 
  int emg_repeat_cnt_call_19_1 = 1;
  #line 451 
  int emg_repeat_cnt_main_19_1 = 1;
  #line 452 
  int emg_repeat_cnt_main_19_0 = 1;
  #line 454 
  struct emg_struct_pci_scenario_ef4_pci_driver_19 *data = (struct emg_struct_pci_scenario_ef4_pci_driver_19 *)arg0;
  #line 458 
  emg_19_choice = 0;
  #line 459 
  emg_19_ret = ldv_undef_int();
  #line 460 
  emg_19_choice = 0;
  #line 461 
  emg_19_container = emg_alias_ef4_pci_driver;
  #line 462 
  emg_19_ret = ldv_undef_int();
  #line 464 
  __VERIFIER_assume(data->arg0 == emg_alias_ef4_pci_driver);
  #line 466 
  if (data != (struct emg_struct_pci_scenario_ef4_pci_driver_19 *)0) {
    #line 467 
    emg_19_container = data->arg0;
    #line 468 
    ldv_free((void *)data);
  }
  #line 473 
  emg_19_resource_0 = (struct pci_dev *)ldv_xmalloc(3312UL);
  #line 474 
  emg_19_choice = __ldv_undef_int_range(0,2);
  #line 475 
  emg_19_device_id = emg_19_container->id_table + (unsigned long)emg_19_choice;
  #line 479 
  goto emg_main_19;
  #line 483 
  return (void *)0;
  #line 486 
  emg_call_19: 
               #line 486 
  ;
  #line 487 
  switch (ldv_undef_int()) {
    #line 488 
    case 0: 
            #line 488 
    ;
    #line 493 
    if (emg_repeat_cnt_call_19_0 > 0) {
      #line 494 
      emg_repeat_cnt_call_19_0 --;
      #line 496 
      goto emg_call_19;
    }
    else 
         #line 498 
         __VERIFIER_assume(0);
    #line 502 
    break;
    #line 504 
    case 1: 
            #line 504 
    ;
    #line 506 
    if (emg_19_container->suspend != (int (*)(struct pci_dev *, pm_message_t ))0) 
      #line 507 
      emg_19_ret = (*(emg_19_container->suspend))(emg_19_resource_0,emg_19_resource_1); else 
                                                                    #line 509 
                                                                    emg_19_ret = ldv_undef_int();
    #line 515 
    emg_19_ret = ldv_filter_err_code(emg_19_ret);
    #line 519 
    if (emg_19_container->resume != (int (*)(struct pci_dev *))0) 
                                                                  #line 520 
                                                                  (*(emg_19_container->resume))(emg_19_resource_0);
    #line 524 
    if (emg_repeat_cnt_call_19_1 > 0) {
      #line 525 
      emg_repeat_cnt_call_19_1 --;
      #line 527 
      goto emg_call_19;
    }
    else 
         #line 529 
         __VERIFIER_assume(0);
    #line 533 
    break;
    #line 535 
    case 2: 
            #line 535 
    ;
    #line 537 
    if (emg_19_container->shutdown != (void (*)(struct pci_dev *))0) 
      #line 538 
      (*(emg_19_container->shutdown))(emg_19_resource_0);
    #line 543 
    emg_wrapper_ef4_pci_remove(emg_19_resource_0);
    #line 546 
    if (emg_repeat_cnt_main_19_1 > 0) {
      #line 547 
      emg_repeat_cnt_main_19_1 --;
      #line 549 
      goto emg_main_19;
    }
    else 
         #line 551 
         __VERIFIER_assume(0);
    #line 555 
    break;
    #line 557 
    default: 
             #line 557 
    ;
    #line 557 
    __VERIFIER_assume(0);
  }
  #line 560 
  return (void *)0;
  #line 563 
  emg_main_19: 
               #line 563 
  ;
  #line 564 
  if (ldv_undef_int() != 0) {
    #line 567 
    ldv_pre_probe();
    #line 571 
    emg_19_ret = emg_wrapper_ef4_pci_probe(emg_19_resource_0,emg_19_device_id);
    #line 576 
    emg_19_ret = ldv_post_probe(emg_19_ret);
    #line 579 
    if (ldv_undef_int() != 0) {
      #line 581 
      __VERIFIER_assume(emg_19_ret == 0);
      #line 585 
      goto emg_call_19;
    }
    else 
         #line 590 
         __VERIFIER_assume(emg_19_ret != 0);
    #line 594 
    if (emg_repeat_cnt_main_19_0 > 0) {
      #line 595 
      emg_repeat_cnt_main_19_0 --;
      #line 597 
      goto emg_main_19;
    }
    else 
         #line 599 
         __VERIFIER_assume(0);
  }
  else 
       #line 605 
       ldv_free((void *)emg_19_resource_0);
  #line 613 
  return (void *)0;
}

#line 618  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/emg/0/environment_model.c"
void *emg_pm_pm_ops_scenario_ef4_pm_ops(void *arg0)
{
  #line 621 
  struct device *emg_20_device;
  #line 622 
  struct dev_pm_ops *emg_20_pm_ops;
  #line 623 
  int emg_20_ret;
  #line 624 
  int emg_repeat_cnt_tnoirq_20 = 1;
  #line 625 
  int emg_repeat_cnt_reste_20 = 1;
  #line 626 
  int emg_repeat_cnt_poff_20 = 1;
  #line 627 
  int emg_repeat_cnt_fnoirq_20 = 1;
  #line 628 
  int emg_repeat_cnt_fr_20 = 1;
  #line 629 
  int emg_repeat_cnt_pno_irq_20 = 1;
  #line 630 
  int emg_repeat_cnt_restnoirq_20 = 1;
  #line 631 
  int emg_repeat_cnt_reslate_20 = 1;
  #line 632 
  int emg_repeat_cnt_thlate_20 = 1;
  #line 633 
  int emg_repeat_cnt_sus_20 = 1;
  #line 634 
  int emg_repeat_cnt_th_20 = 1;
  #line 635 
  int emg_repeat_cnt_no_irq_20 = 1;
  #line 636 
  int emg_repeat_cnt_resnoirq_20 = 1;
  #line 637 
  int emg_repeat_cnt_slate_20 = 1;
  #line 638 
  int emg_repeat_cnt_plate_20 = 1;
  #line 639 
  int emg_repeat_cnt_flate_20 = 1;
  #line 640 
  int emg_repeat_cnt_res_20 = 1;
  #line 641 
  int emg_repeat_cnt_rest_20 = 1;
  #line 642 
  int emg_repeat_cnt_run_resume_20 = 1;
  #line 645 
  emg_20_ret = ldv_undef_int();
  #line 646 
  emg_20_pm_ops = emg_alias_ef4_pm_ops;
  #line 647 
  emg_20_ret = ldv_undef_int();
  #line 653 
  goto emg_do_20;
  #line 657 
  return (void *)0;
  #line 660 
  emg_compl_20: 
                #line 660 
  ;
  #line 662 
  if (emg_20_pm_ops->complete != (void (*)(struct device *))0) 
                                                               #line 663 
                                                               (*(emg_20_pm_ops->complete))(emg_20_device);
  #line 671 
  return (void *)0;
  #line 674 
  emg_do_20: 
             #line 674 
  ;
  #line 675 
  switch (ldv_undef_int()) {
    #line 676 
    case 0: 
            #line 676 
    ;
    #line 678 
    __VERIFIER_assume((emg_runtime_enabled == 1 && emg_runtime_lowpower == 1) != 0);
    #line 682 
    goto emg_runt_20;
    #line 687 
    case 1: 
            #line 687 
    ;
    #line 689 
    goto emg_normal_20;
    #line 694 
    case 2: 
            #line 694 
    ;
    #line 698 
    break;
    #line 700 
    default: 
             #line 700 
    ;
    #line 700 
    __VERIFIER_assume(0);
  }
  #line 703 
  return (void *)0;
  #line 706 
  emg_flate_20: 
                #line 706 
  ;
  #line 708 
  if (emg_20_pm_ops->freeze_late != (int (*)(struct device *))0) 
                                                                 #line 709 
                                                                 emg_20_ret = (*(emg_20_pm_ops->freeze_late))(emg_20_device); else 
                                                                    #line 711 
                                                                    emg_20_ret = ldv_undef_int();
  #line 717 
  emg_20_ret = ldv_post_probe(emg_20_ret);
  #line 720 
  if (ldv_undef_int() != 0) {
    #line 722 
    __VERIFIER_assume(emg_20_ret == 0);
    #line 726 
    goto emg_thlate_20;
  }
  else 
       #line 731 
       __VERIFIER_assume(emg_20_ret != 0);
  #line 735 
  if (emg_repeat_cnt_flate_20 > 0) {
    #line 736 
    emg_repeat_cnt_flate_20 --;
    #line 738 
    goto emg_flate_20;
  }
  else 
       #line 740 
       __VERIFIER_assume(0);
  #line 745 
  return (void *)0;
  #line 748 
  emg_fnoirq_20: 
                 #line 748 
  ;
  #line 750 
  if (emg_20_pm_ops->freeze_noirq != (int (*)(struct device *))0) 
                                                                  #line 751 
                                                                  emg_20_ret = (*(emg_20_pm_ops->freeze_noirq))(emg_20_device); else 
                                                                    #line 753 
                                                                    emg_20_ret = ldv_undef_int();
  #line 759 
  emg_20_ret = ldv_post_probe(emg_20_ret);
  #line 762 
  if (ldv_undef_int() != 0) {
    #line 764 
    __VERIFIER_assume(emg_20_ret == 0);
    #line 768 
    goto emg_tnoirq_20;
  }
  else 
       #line 773 
       __VERIFIER_assume(emg_20_ret != 0);
  #line 777 
  if (emg_repeat_cnt_fnoirq_20 > 0) {
    #line 778 
    emg_repeat_cnt_fnoirq_20 --;
    #line 780 
    goto emg_fnoirq_20;
  }
  else 
       #line 782 
       __VERIFIER_assume(0);
  #line 787 
  return (void *)0;
  #line 790 
  emg_fr_20: 
             #line 790 
  ;
  #line 792 
  emg_20_ret = emg_wrapper_ef4_pm_freeze(emg_20_device);
  #line 797 
  emg_20_ret = ldv_post_probe(emg_20_ret);
  #line 800 
  if (ldv_undef_int() != 0) {
    #line 802 
    __VERIFIER_assume(emg_20_ret == 0);
    #line 805 
    if (ldv_undef_int() != 0) 
                              #line 807 
                              goto emg_fnoirq_20; else 
                                                       #line 812 
                                                       goto emg_flate_20;
  }
  else {
    #line 818 
    __VERIFIER_assume(emg_20_ret != 0);
    #line 821 
    if (emg_repeat_cnt_fr_20 > 0) {
      #line 822 
      emg_repeat_cnt_fr_20 --;
      #line 824 
      goto emg_fr_20;
    }
    else 
         #line 826 
         __VERIFIER_assume(0);
  }
  #line 832 
  return (void *)0;
  #line 835 
  emg_no_irq_20: 
                 #line 835 
  ;
  #line 837 
  if (emg_20_pm_ops->suspend_noirq != (int (*)(struct device *))0) 
                                                                   #line 838 
                                                                   emg_20_ret = (*(emg_20_pm_ops->suspend_noirq))(emg_20_device); else 
                                                                    #line 840 
                                                                    emg_20_ret = ldv_undef_int();
  #line 846 
  emg_20_ret = ldv_post_probe(emg_20_ret);
  #line 849 
  if (ldv_undef_int() != 0) {
    #line 851 
    __VERIFIER_assume(emg_20_ret == 0);
    #line 855 
    goto emg_resnoirq_20;
  }
  else 
       #line 860 
       __VERIFIER_assume(emg_20_ret != 0);
  #line 864 
  if (emg_repeat_cnt_no_irq_20 > 0) {
    #line 865 
    emg_repeat_cnt_no_irq_20 --;
    #line 867 
    goto emg_no_irq_20;
  }
  else 
       #line 869 
       __VERIFIER_assume(0);
  #line 874 
  return (void *)0;
  #line 877 
  emg_normal_20: 
                 #line 877 
  ;
  #line 879 
  if (emg_20_pm_ops->prepare != (int (*)(struct device *))0) 
                                                             #line 880 
                                                             emg_20_ret = (*(emg_20_pm_ops->prepare))(emg_20_device); else 
                                                                    #line 882 
                                                                    emg_20_ret = ldv_undef_int();
  #line 888 
  emg_20_ret = ldv_post_probe(emg_20_ret);
  #line 891 
  if (ldv_undef_int() != 0) {
    #line 893 
    __VERIFIER_assume(emg_20_ret == 0);
    #line 896 
    switch (ldv_undef_int()) {
      #line 897 
      case 0: 
              #line 897 
      ;
      #line 899 
      goto emg_sus_20;
      #line 904 
      case 1: 
              #line 904 
      ;
      #line 906 
      goto emg_fr_20;
      #line 911 
      case 2: 
              #line 911 
      ;
      #line 913 
      goto emg_poff_20;
      #line 918 
      default: 
               #line 918 
      ;
      #line 918 
      __VERIFIER_assume(0);
    }
  }
  else 
       #line 922 
       __VERIFIER_assume(emg_20_ret != 0);
  #line 930 
  return (void *)0;
  #line 933 
  emg_plate_20: 
                #line 933 
  ;
  #line 935 
  if (emg_20_pm_ops->poweroff_late != (int (*)(struct device *))0) 
                                                                   #line 936 
                                                                   emg_20_ret = (*(emg_20_pm_ops->poweroff_late))(emg_20_device); else 
                                                                    #line 938 
                                                                    emg_20_ret = ldv_undef_int();
  #line 944 
  emg_20_ret = ldv_post_probe(emg_20_ret);
  #line 947 
  if (ldv_undef_int() != 0) {
    #line 949 
    __VERIFIER_assume(emg_20_ret == 0);
    #line 953 
    goto emg_reste_20;
  }
  else 
       #line 958 
       __VERIFIER_assume(emg_20_ret != 0);
  #line 962 
  if (emg_repeat_cnt_plate_20 > 0) {
    #line 963 
    emg_repeat_cnt_plate_20 --;
    #line 965 
    goto emg_plate_20;
  }
  else 
       #line 967 
       __VERIFIER_assume(0);
  #line 972 
  return (void *)0;
  #line 975 
  emg_pno_irq_20: 
                  #line 975 
  ;
  #line 977 
  if (emg_20_pm_ops->poweroff_noirq != (int (*)(struct device *))0) 
                                                                    #line 978 
                                                                    emg_20_ret = (*(emg_20_pm_ops->poweroff_noirq))(emg_20_device); else 
                                                                    #line 980 
                                                                    emg_20_ret = ldv_undef_int();
  #line 986 
  emg_20_ret = ldv_post_probe(emg_20_ret);
  #line 989 
  if (ldv_undef_int() != 0) {
    #line 991 
    __VERIFIER_assume(emg_20_ret == 0);
    #line 995 
    goto emg_restnoirq_20;
  }
  else 
       #line 1000 
       __VERIFIER_assume(emg_20_ret != 0);
  #line 1004 
  if (emg_repeat_cnt_pno_irq_20 > 0) {
    #line 1005 
    emg_repeat_cnt_pno_irq_20 --;
    #line 1007 
    goto emg_pno_irq_20;
  }
  else 
       #line 1009 
       __VERIFIER_assume(0);
  #line 1014 
  return (void *)0;
  #line 1017 
  emg_poff_20: 
               #line 1017 
  ;
  #line 1019 
  emg_20_ret = emg_wrapper_ef4_pm_poweroff(emg_20_device);
  #line 1024 
  emg_20_ret = ldv_post_probe(emg_20_ret);
  #line 1027 
  if (ldv_undef_int() != 0) {
    #line 1029 
    __VERIFIER_assume(emg_20_ret == 0);
    #line 1032 
    if (ldv_undef_int() != 0) 
                              #line 1034 
                              goto emg_pno_irq_20; else 
                                                        #line 1039 
                                                        goto emg_plate_20;
  }
  else {
    #line 1045 
    __VERIFIER_assume(emg_20_ret != 0);
    #line 1048 
    if (emg_repeat_cnt_poff_20 > 0) {
      #line 1049 
      emg_repeat_cnt_poff_20 --;
      #line 1051 
      goto emg_poff_20;
    }
    else 
         #line 1053 
         __VERIFIER_assume(0);
  }
  #line 1059 
  return (void *)0;
  #line 1062 
  emg_res_20: 
              #line 1062 
  ;
  #line 1064 
  emg_20_ret = emg_wrapper_ef4_pm_resume(emg_20_device);
  #line 1069 
  emg_20_ret = ldv_post_probe(emg_20_ret);
  #line 1072 
  if (ldv_undef_int() != 0) {
    #line 1074 
    __VERIFIER_assume(emg_20_ret == 0);
    #line 1078 
    goto emg_compl_20;
  }
  else {
    #line 1083 
    __VERIFIER_assume(emg_20_ret != 0);
    #line 1086 
    if (emg_repeat_cnt_res_20 > 0) {
      #line 1087 
      emg_repeat_cnt_res_20 --;
      #line 1089 
      goto emg_res_20;
    }
    else 
         #line 1091 
         __VERIFIER_assume(0);
  }
  #line 1097 
  return (void *)0;
  #line 1100 
  emg_reslate_20: 
                  #line 1100 
  ;
  #line 1102 
  if (emg_20_pm_ops->resume_early != (int (*)(struct device *))0) 
                                                                  #line 1103 
                                                                  emg_20_ret = (*(emg_20_pm_ops->resume_early))(emg_20_device); else 
                                                                    #line 1105 
                                                                    emg_20_ret = ldv_undef_int();
  #line 1111 
  emg_20_ret = ldv_post_probe(emg_20_ret);
  #line 1114 
  if (ldv_undef_int() != 0) {
    #line 1116 
    __VERIFIER_assume(emg_20_ret == 0);
    #line 1120 
    goto emg_res_20;
  }
  else 
       #line 1125 
       __VERIFIER_assume(emg_20_ret != 0);
  #line 1129 
  if (emg_repeat_cnt_reslate_20 > 0) {
    #line 1130 
    emg_repeat_cnt_reslate_20 --;
    #line 1132 
    goto emg_reslate_20;
  }
  else 
       #line 1134 
       __VERIFIER_assume(0);
  #line 1139 
  return (void *)0;
  #line 1142 
  emg_resnoirq_20: 
                   #line 1142 
  ;
  #line 1144 
  if (emg_20_pm_ops->resume_noirq != (int (*)(struct device *))0) 
                                                                  #line 1145 
                                                                  emg_20_ret = (*(emg_20_pm_ops->resume_noirq))(emg_20_device); else 
                                                                    #line 1147 
                                                                    emg_20_ret = ldv_undef_int();
  #line 1153 
  emg_20_ret = ldv_post_probe(emg_20_ret);
  #line 1156 
  if (ldv_undef_int() != 0) {
    #line 1158 
    __VERIFIER_assume(emg_20_ret == 0);
    #line 1162 
    goto emg_res_20;
  }
  else 
       #line 1167 
       __VERIFIER_assume(emg_20_ret != 0);
  #line 1171 
  if (emg_repeat_cnt_resnoirq_20 > 0) {
    #line 1172 
    emg_repeat_cnt_resnoirq_20 --;
    #line 1174 
    goto emg_resnoirq_20;
  }
  else 
       #line 1176 
       __VERIFIER_assume(0);
  #line 1181 
  return (void *)0;
  #line 1184 
  emg_rest_20: 
               #line 1184 
  ;
  #line 1186 
  emg_20_ret = emg_wrapper_ef4_pm_resume(emg_20_device);
  #line 1191 
  emg_20_ret = ldv_post_probe(emg_20_ret);
  #line 1194 
  if (ldv_undef_int() != 0) {
    #line 1196 
    __VERIFIER_assume(emg_20_ret == 0);
    #line 1200 
    goto emg_compl_20;
  }
  else {
    #line 1205 
    __VERIFIER_assume(emg_20_ret != 0);
    #line 1208 
    if (emg_repeat_cnt_rest_20 > 0) {
      #line 1209 
      emg_repeat_cnt_rest_20 --;
      #line 1211 
      goto emg_rest_20;
    }
    else 
         #line 1213 
         __VERIFIER_assume(0);
  }
  #line 1219 
  return (void *)0;
  #line 1222 
  emg_reste_20: 
                #line 1222 
  ;
  #line 1224 
  if (emg_20_pm_ops->restore_early != (int (*)(struct device *))0) 
                                                                   #line 1225 
                                                                   emg_20_ret = (*(emg_20_pm_ops->restore_early))(emg_20_device); else 
                                                                    #line 1227 
                                                                    emg_20_ret = ldv_undef_int();
  #line 1233 
  emg_20_ret = ldv_post_probe(emg_20_ret);
  #line 1236 
  if (ldv_undef_int() != 0) {
    #line 1238 
    __VERIFIER_assume(emg_20_ret == 0);
    #line 1242 
    goto emg_rest_20;
  }
  else 
       #line 1247 
       __VERIFIER_assume(emg_20_ret != 0);
  #line 1251 
  if (emg_repeat_cnt_reste_20 > 0) {
    #line 1252 
    emg_repeat_cnt_reste_20 --;
    #line 1254 
    goto emg_reste_20;
  }
  else 
       #line 1256 
       __VERIFIER_assume(0);
  #line 1261 
  return (void *)0;
  #line 1264 
  emg_restnoirq_20: 
                    #line 1264 
  ;
  #line 1266 
  if (emg_20_pm_ops->restore_noirq != (int (*)(struct device *))0) 
                                                                   #line 1267 
                                                                   emg_20_ret = (*(emg_20_pm_ops->restore_noirq))(emg_20_device); else 
                                                                    #line 1269 
                                                                    emg_20_ret = ldv_undef_int();
  #line 1275 
  emg_20_ret = ldv_post_probe(emg_20_ret);
  #line 1278 
  if (ldv_undef_int() != 0) {
    #line 1280 
    __VERIFIER_assume(emg_20_ret == 0);
    #line 1284 
    goto emg_rest_20;
  }
  else 
       #line 1289 
       __VERIFIER_assume(emg_20_ret != 0);
  #line 1293 
  if (emg_repeat_cnt_restnoirq_20 > 0) {
    #line 1294 
    emg_repeat_cnt_restnoirq_20 --;
    #line 1296 
    goto emg_restnoirq_20;
  }
  else 
       #line 1298 
       __VERIFIER_assume(0);
  #line 1303 
  return (void *)0;
  #line 1306 
  emg_run_resume_20: 
                     #line 1306 
  ;
  #line 1308 
  if (emg_20_pm_ops->runtime_resume != (int (*)(struct device *))0) 
                                                                    #line 1309 
                                                                    emg_20_ret = (*(emg_20_pm_ops->runtime_resume))(emg_20_device); else 
                                                                    #line 1311 
                                                                    emg_20_ret = ldv_undef_int();
  #line 1317 
  emg_20_ret = ldv_post_probe(emg_20_ret);
  #line 1318 
  if (emg_20_ret != 0) 
                       #line 1319 
                       emg_runtime_lowpower = 0;
  #line 1322 
  if (ldv_undef_int() != 0) 
                            #line 1324 
                            __VERIFIER_assume(emg_20_ret == 0);
  else {
    #line 1328 
    __VERIFIER_assume(emg_20_ret != 0);
    #line 1331 
    if (emg_repeat_cnt_run_resume_20 > 0) {
      #line 1332 
      emg_repeat_cnt_run_resume_20 --;
      #line 1334 
      goto emg_run_resume_20;
    }
    else 
         #line 1336 
         __VERIFIER_assume(0);
  }
  #line 1346 
  return (void *)0;
  #line 1349 
  emg_runt_20: 
               #line 1349 
  ;
  #line 1350 
  if (ldv_undef_int() != 0) {
    #line 1352 
    if (emg_20_pm_ops->runtime_idle != (int (*)(struct device *))0) 
                                                                    #line 1353 
                                                                    emg_20_ret = (*(emg_20_pm_ops->runtime_idle))(emg_20_device); else 
                                                                    #line 1355 
                                                                    emg_20_ret = ldv_undef_int();
    #line 1361 
    emg_20_ret = ldv_post_probe(emg_20_ret);
  }
  else {
    #line 1365 
    if (emg_20_pm_ops->runtime_suspend != (int (*)(struct device *))0) 
      #line 1366 
      emg_20_ret = (*(emg_20_pm_ops->runtime_suspend))(emg_20_device); else 
                                                                    #line 1368 
                                                                    emg_20_ret = ldv_undef_int();
    #line 1374 
    emg_20_ret = ldv_post_probe(emg_20_ret);
    #line 1375 
    if (emg_20_ret != 0) 
                         #line 1376 
                         emg_runtime_lowpower = 1;
    #line 1379 
    if (ldv_undef_int() != 0) {
      #line 1381 
      __VERIFIER_assume(emg_20_ret == 0);
      #line 1385 
      goto emg_run_resume_20;
    }
    else 
         #line 1390 
         __VERIFIER_assume(emg_20_ret != 0);
  }
  #line 1399 
  return (void *)0;
  #line 1402 
  emg_slate_20: 
                #line 1402 
  ;
  #line 1404 
  if (emg_20_pm_ops->suspend_late != (int (*)(struct device *))0) 
                                                                  #line 1405 
                                                                  emg_20_ret = (*(emg_20_pm_ops->suspend_late))(emg_20_device); else 
                                                                    #line 1407 
                                                                    emg_20_ret = ldv_undef_int();
  #line 1413 
  emg_20_ret = ldv_post_probe(emg_20_ret);
  #line 1416 
  if (ldv_undef_int() != 0) {
    #line 1418 
    __VERIFIER_assume(emg_20_ret == 0);
    #line 1422 
    goto emg_reslate_20;
  }
  else 
       #line 1427 
       __VERIFIER_assume(emg_20_ret != 0);
  #line 1431 
  if (emg_repeat_cnt_slate_20 > 0) {
    #line 1432 
    emg_repeat_cnt_slate_20 --;
    #line 1434 
    goto emg_slate_20;
  }
  else 
       #line 1436 
       __VERIFIER_assume(0);
  #line 1441 
  return (void *)0;
  #line 1444 
  emg_sus_20: 
              #line 1444 
  ;
  #line 1446 
  emg_20_ret = emg_wrapper_ef4_pm_suspend(emg_20_device);
  #line 1451 
  emg_20_ret = ldv_post_probe(emg_20_ret);
  #line 1454 
  if (ldv_undef_int() != 0) {
    #line 1456 
    __VERIFIER_assume(emg_20_ret == 0);
    #line 1459 
    if (ldv_undef_int() != 0) 
                              #line 1461 
                              goto emg_no_irq_20; else 
                                                       #line 1466 
                                                       goto emg_slate_20;
  }
  else {
    #line 1472 
    __VERIFIER_assume(emg_20_ret != 0);
    #line 1475 
    if (emg_repeat_cnt_sus_20 > 0) {
      #line 1476 
      emg_repeat_cnt_sus_20 --;
      #line 1478 
      goto emg_sus_20;
    }
    else 
         #line 1480 
         __VERIFIER_assume(0);
  }
  #line 1486 
  return (void *)0;
  #line 1489 
  emg_th_20: 
             #line 1489 
  ;
  #line 1491 
  emg_20_ret = emg_wrapper_ef4_pm_thaw(emg_20_device);
  #line 1496 
  emg_20_ret = ldv_post_probe(emg_20_ret);
  #line 1499 
  if (ldv_undef_int() != 0) {
    #line 1501 
    __VERIFIER_assume(emg_20_ret == 0);
    #line 1505 
    goto emg_compl_20;
  }
  else {
    #line 1510 
    __VERIFIER_assume(emg_20_ret != 0);
    #line 1513 
    if (emg_repeat_cnt_th_20 > 0) {
      #line 1514 
      emg_repeat_cnt_th_20 --;
      #line 1516 
      goto emg_th_20;
    }
    else 
         #line 1518 
         __VERIFIER_assume(0);
  }
  #line 1524 
  return (void *)0;
  #line 1527 
  emg_thlate_20: 
                 #line 1527 
  ;
  #line 1529 
  if (emg_20_pm_ops->thaw_early != (int (*)(struct device *))0) 
                                                                #line 1530 
                                                                emg_20_ret = (*(emg_20_pm_ops->thaw_early))(emg_20_device); else 
                                                                    #line 1532 
                                                                    emg_20_ret = ldv_undef_int();
  #line 1538 
  emg_20_ret = ldv_post_probe(emg_20_ret);
  #line 1541 
  if (ldv_undef_int() != 0) {
    #line 1543 
    __VERIFIER_assume(emg_20_ret == 0);
    #line 1547 
    goto emg_th_20;
  }
  else 
       #line 1552 
       __VERIFIER_assume(emg_20_ret != 0);
  #line 1556 
  if (emg_repeat_cnt_thlate_20 > 0) {
    #line 1557 
    emg_repeat_cnt_thlate_20 --;
    #line 1559 
    goto emg_thlate_20;
  }
  else 
       #line 1561 
       __VERIFIER_assume(0);
  #line 1566 
  return (void *)0;
  #line 1569 
  emg_tnoirq_20: 
                 #line 1569 
  ;
  #line 1571 
  if (emg_20_pm_ops->thaw_noirq != (int (*)(struct device *))0) 
                                                                #line 1572 
                                                                emg_20_ret = (*(emg_20_pm_ops->thaw_noirq))(emg_20_device); else 
                                                                    #line 1574 
                                                                    emg_20_ret = ldv_undef_int();
  #line 1580 
  emg_20_ret = ldv_post_probe(emg_20_ret);
  #line 1583 
  if (ldv_undef_int() != 0) {
    #line 1585 
    __VERIFIER_assume(emg_20_ret == 0);
    #line 1589 
    goto emg_th_20;
  }
  else 
       #line 1594 
       __VERIFIER_assume(emg_20_ret != 0);
  #line 1598 
  if (emg_repeat_cnt_tnoirq_20 > 0) {
    #line 1599 
    emg_repeat_cnt_tnoirq_20 --;
    #line 1601 
    goto emg_tnoirq_20;
  }
  else 
       #line 1603 
       __VERIFIER_assume(0);
  #line 1608 
  return (void *)0;
}

#line 1613  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/emg/0/environment_model.c"
void *emg_timer_timer_scenario_5(void *arg0)
{
  #line 1616 
  struct timer_list *emg_21_container;
  #line 1617 
  unsigned long emg_21_emg_param_0_0;
  #line 1619 
  struct emg_struct_timer_scenario_5_21 *data = (struct emg_struct_timer_scenario_5_21 *)arg0;
  #line 1624 
  if (data != (struct emg_struct_timer_scenario_5_21 *)0) {
    #line 1625 
    emg_21_container = data->arg0;
    #line 1626 
    ldv_free((void *)data);
  }
  #line 1632 
  ldv_switch_to_interrupt_context();
  #line 1636 
  if (emg_21_container->function != (void (*)(struct timer_list *))0) 
    #line 1637 
    (*(emg_21_container->function))((struct timer_list *)emg_21_emg_param_0_0);
  #line 1643 
  ldv_switch_to_process_context();
  #line 1650 
  return (void *)0;
}

#line 1655  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/emg/0/environment_model.c"
int emg___pci_register_driver(struct pci_driver *arg0, struct module *arg1, char *arg2)
{
  #line 1658 
  struct pci_driver *emg_2_pci_driver;
  #line 1660 
  emg_2_pci_driver = emg_alias_ef4_pci_driver;
  #line 1661 
  if (ldv_undef_int() != 0) {
    #line 1663 
    emg_2_pci_driver = arg0;
    #line 1667 
    emg_dispatch_register_2(emg_2_pci_driver);
    #line 1671 
    return 0;
  }
  else {
    #line 1675 
    return ldv_undef_int_negative();
  }
}

#line 1683  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/emg/0/environment_model.c"
struct net_device *emg_alloc_etherdev_mqs(int arg0, unsigned int arg1, unsigned int arg2)
{
  #line 1686 
  struct net_device *emg_3_netdev;
  #line 1688 
  if (ldv_undef_int() != 0) {
    #line 1690 
    emg_3_netdev = (struct net_device *)ldv_xmalloc(3328UL);
    #line 1694 
    return emg_3_netdev;
  }
  else 
       #line 1698 
       return (struct net_device *)0;
}

#line 1706  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/emg/0/environment_model.c"
int emg_del_timer_sync(struct timer_list *arg0)
{
  #line 1709 
  struct timer_list *emg_4_timer_list;
  #line 1712 
  emg_4_timer_list = arg0;
  #line 1716 
  emg_dispatch_instance_deregister_4(emg_4_timer_list);
  #line 1717 
  ;
  #line 1717 
  return 0;
}

#line 1723  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/emg/0/environment_model.c"
int emg_device_create_file(struct device *arg0, struct device_attribute *arg1)
{
  #line 1726 
  struct device_attribute *emg_5_devattr;
  #line 1727 
  struct device *emg_5_device;
  #line 1729 
  if (ldv_undef_int() != 0) {
    #line 1731 
    emg_5_device = arg0;
    #line 1732 
    emg_5_devattr = arg1;
    #line 1736 
    emg_dispatch_register_5(emg_5_device,emg_5_devattr);
    #line 1740 
    return 0;
  }
  else {
    #line 1744 
    return ldv_undef_int_negative();
  }
}

#line 1752  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/emg/0/environment_model.c"
void emg_device_remove_file(struct device *arg0, struct device_attribute *arg1)
{
  #line 1755 
  struct device_attribute *emg_6_devattr;
  #line 1756 
  struct device *emg_6_device;
  #line 1759 
  emg_6_device = arg0;
  #line 1760 
  emg_6_devattr = arg1;
  #line 1764 
  emg_dispatch_deregister_6(emg_6_device,emg_6_devattr);
  #line 1767 
  return;
}

#line 1772  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/emg/0/environment_model.c"
void *emg_free_irq(unsigned int arg0, void *arg1)
{
  #line 1775 
  int emg_7_line;
  #line 1778 
  emg_7_line = (int)arg0;
  #line 1782 
  emg_dispatch_irq_deregister_7(emg_7_line);
  #line 1783 
  ;
  #line 1783 
  return (void *)0;
}

#line 1789  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/emg/0/environment_model.c"
void emg_free_netdev(struct net_device *arg0)
{
  #line 1792 
  struct net_device *emg_8_netdev;
  #line 1795 
  emg_8_netdev = arg0;
  #line 1796 
  ldv_free((void *)emg_8_netdev);
  #line 1799 
  return;
}

#line 1804  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/emg/0/environment_model.c"
int emg_mod_timer(struct timer_list *arg0, unsigned long arg1)
{
  #line 1807 
  struct timer_list *emg_9_timer_list;
  #line 1809 
  if (ldv_undef_int() != 0) {
    #line 1811 
    emg_9_timer_list = arg0;
    #line 1815 
    emg_dispatch_instance_register_9(emg_9_timer_list);
    #line 1819 
    return 1;
  }
  else 
       #line 1823 
       return 0;
}

#line 1831  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/emg/0/environment_model.c"
void emg_pci_unregister_driver(struct pci_driver *arg0)
{
  #line 1834 
  struct pci_driver *emg_10_pci_driver;
  #line 1836 
  emg_10_pci_driver = emg_alias_ef4_pci_driver;
  #line 1838 
  emg_10_pci_driver = arg0;
  #line 1842 
  emg_dispatch_deregister_10(emg_10_pci_driver);
  #line 1845 
  return;
}

#line 1850  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/emg/0/environment_model.c"
_Bool emg_queue_delayed_work(struct workqueue_struct *arg0, struct delayed_work *arg1, unsigned long arg2)
{
  #line 1853 
  struct delayed_work *emg_11_delayed_work;
  #line 1854 
  struct work_struct *emg_11_emg_param_0_0;
  #line 1856 
  if (ldv_undef_int() != 0) {
    #line 1858 
    emg_11_delayed_work = arg1;
    #line 1862 
    emg_11_emg_param_0_0 = (struct work_struct *)ldv_xmalloc_unknown_size(0UL);
    #line 1862 
    emg_11_emg_param_0_0 = emg_11_emg_param_0_0;
    #line 1866 
    if (emg_11_delayed_work->work.func != (void (*)(struct work_struct *))0) 
      #line 1867 
      (*(emg_11_delayed_work->work.func))(emg_11_emg_param_0_0);
    #line 1872 
    ldv_free((void *)emg_11_emg_param_0_0);
    #line 1876 
    return (_Bool)1;
  }
  else 
       #line 1880 
       return (_Bool)0;
}

#line 1888  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/emg/0/environment_model.c"
_Bool emg_queue_work(struct workqueue_struct *arg0, struct work_struct *arg1)
{
  #line 1891 
  struct work_struct *emg_12_work_struct;
  #line 1893 
  if (ldv_undef_int() != 0) {
    #line 1895 
    emg_12_work_struct = arg1;
    #line 1899 
    if (emg_12_work_struct->func != (void (*)(struct work_struct *))0) 
      #line 1900 
      (*(emg_12_work_struct->func))(emg_12_work_struct);
    #line 1905 
    return (_Bool)1;
  }
  else 
       #line 1909 
       return (_Bool)0;
}

#line 1917  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/emg/0/environment_model.c"
int emg_request_irq(unsigned int arg0, enum irqreturn (*arg1)(int , void *), unsigned long arg2, char *arg3, void *arg4)
{
  #line 1920 
  enum irqreturn (*emg_13_callback)(int , void *);
  #line 1921 
  void *emg_13_data;
  #line 1922 
  int emg_13_line;
  #line 1923 
  enum irqreturn (*emg_13_thread)(int , void *);
  #line 1925 
  if (ldv_undef_int() != 0) {
    #line 1927 
    emg_13_line = (int)arg0;
    #line 1928 
    emg_13_callback = arg1;
    #line 1929 
    emg_13_thread = (enum irqreturn (*)(int , void *))0;
    #line 1930 
    emg_13_data = arg4;
    #line 1934 
    emg_dispatch_irq_register_13(emg_13_line,emg_13_callback,emg_13_thread,emg_13_data);
    #line 1938 
    return 0;
  }
  else {
    #line 1942 
    return ldv_undef_int_negative();
  }
}

#line 1950  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/emg/0/environment_model.c"
_Bool emg_schedule_delayed_work(struct delayed_work *arg0, unsigned long arg1)
{
  #line 1953 
  struct delayed_work *emg_14_delayed_work;
  #line 1954 
  struct work_struct *emg_14_emg_param_0_0;
  #line 1956 
  if (ldv_undef_int() != 0) {
    #line 1958 
    emg_14_delayed_work = arg0;
    #line 1962 
    emg_14_emg_param_0_0 = (struct work_struct *)ldv_xmalloc_unknown_size(0UL);
    #line 1962 
    emg_14_emg_param_0_0 = emg_14_emg_param_0_0;
    #line 1966 
    if (emg_14_delayed_work->work.func != (void (*)(struct work_struct *))0) 
      #line 1967 
      (*(emg_14_delayed_work->work.func))(emg_14_emg_param_0_0);
    #line 1972 
    ldv_free((void *)emg_14_emg_param_0_0);
    #line 1976 
    return (_Bool)1;
  }
  else 
       #line 1980 
       return (_Bool)0;
}

#line 1988  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/emg/0/environment_model.c"
void emg_unregister_netdev(struct net_device *arg0)
{
  #line 1991 
  struct net_device *emg_15_netdev;
  #line 1994 
  emg_15_netdev = arg0;
  #line 1998 
  ef4_net_stop(emg_15_netdev);
  #line 2005 
  return;
}

#line 2010  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/emg/0/environment_model.c"
void *emg_entry_point_insmod(void *arg0)
{
  #line 2013 
  int emg_1_ret;
  #line 2016 
  emg_1_ret = emg_ef4_init_module();
  #line 2017 
  emg_1_ret = ldv_post_init(emg_1_ret);
  #line 2020 
  if (ldv_undef_int() != 0) {
    #line 2022 
    __VERIFIER_assume(emg_1_ret == 0);
    #line 2026 
    emg_ef4_exit_module();
  }
  else 
       #line 2030 
       __VERIFIER_assume(emg_1_ret != 0);
  #line 2034 
  return (void *)0;
}

#line 2039  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/sfc/falcon/sfc-falcon.ko/concurrency safety/emg/0/environment_model.c"
int main(void)
{
  #line 2041 
  ldv_initialize();
  #line 2043 
  emg_entry_point_insmod((void *)0);
  #line 2045 
  return 0;
}

