/* Generated by Frama-C */
#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compiler_types.h"
typedef signed char __s8;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned char __u8;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef short __s16;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned short __u16;
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef int __s32;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned int __u32;
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef long long __s64;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned long long __u64;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef __s8 s8;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u8 u8;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s16 s16;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u16 u16;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s32 s32;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u32 u32;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s64 s64;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u64 u64;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/uapi/asm/posix_types_64.h"
typedef long __kernel_long_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned long __kernel_ulong_t;
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_pid_t;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_uid32_t;
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_gid32_t;
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_ulong_t __kernel_size_t;
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_ssize_t;
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef long long __kernel_loff_t;
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef long long __kernel_time64_t;
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_clock_t;
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_timer_t;
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_clockid_t;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u16 __be16;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __be32;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u64 __be64;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __wsum;
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef unsigned int __poll_t;
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef u32 __kernel_dev_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_dev_t dev_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned short umode_t;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_pid_t pid_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_clockid_t clockid_t;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef _Bool bool;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_uid32_t uid_t;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_gid32_t gid_t;
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_loff_t loff_t;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_size_t size_t;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_ssize_t ssize_t;
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef s32 int32_t;
#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u32 uint32_t;
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 sector_t;
#line 131  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 blkcnt_t;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 dma_addr_t;
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int gfp_t;
#line 155  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int fmode_t;
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 phys_addr_t;
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef phys_addr_t resource_size_t;
#line 170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct __anonstruct_atomic_t_6 {
   int counter ;
};
#line 170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef struct __anonstruct_atomic_t_6 atomic_t;
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct __anonstruct_atomic64_t_7 {
   s64 counter ;
};
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef struct __anonstruct_atomic64_t_7 atomic64_t;
#line 181  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};
#line 185 
struct hlist_node;
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct hlist_head {
   struct hlist_node *first ;
};
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};
#line 219  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct callback_head {
   struct callback_head *next ;
   void (*func)(struct callback_head *) ;
} __attribute__((__aligned__(8)));
#line 14  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/0/concurrency safety/weaver/cxgb4vf_main.i.aux"
struct task_struct;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/export.h"
struct module;
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/export.h"
struct kernel_symbol {
   int value_offset ;
   int name_offset ;
   int namespace_offset ;
};
#line 136  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/init.h"
typedef void (*ctor_fn_t)(void);
#line 139 
struct file_system_type;
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
struct ctl_table;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct jump_entry;
#line 87 
struct static_key_mod;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
union __anonunion_8 {
   unsigned long type ;
   struct jump_entry *entries ;
   struct static_key_mod *next ;
};
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct static_key {
   atomic_t enabled ;
   union __anonunion_8 __anonCompField_static_key_4 ;
};
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct jump_entry {
   s32 code ;
   s32 target ;
   long key ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_debug.h"
struct device;
#line 65 
struct net_device;
#line 476  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
struct file_operations;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/div64.h"
struct completion;
#line 88 
struct pt_regs;
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_13 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_15 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bug.h"
struct bug_entry {
   int bug_addr_disp ;
   int file_disp ;
   unsigned short line ;
   unsigned short flags ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/math64.h"
typedef __s64 time64_t;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/time_types.h"
struct __kernel_timespec {
   __kernel_time64_t tv_sec ;
   long long tv_nsec ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/time64.h"
struct timespec64 {
   time64_t tv_sec ;
   long tv_nsec ;
};
#line 165 
struct old_timespec32;
#line 167 
enum timespec_type {
    TT_NONE = 0,
    TT_NATIVE = 1,
    TT_COMPAT = 2
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_futex_27 {
   u32 *uaddr ;
   u32 val ;
   u32 flags ;
   u32 bitset ;
   u64 time ;
   u32 *uaddr2 ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
union __anonunion_29 {
   struct __kernel_timespec *rmtp ;
   struct old_timespec32 *compat_rmtp ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_nanosleep_28 {
   clockid_t clockid ;
   enum timespec_type type ;
   union __anonunion_29 __anonCompField___anonstruct_nanosleep_28_5 ;
   u64 expires ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_poll_30 {
   struct pollfd *ufds ;
   int nfds ;
   int has_timeout ;
   unsigned long tv_sec ;
   unsigned long tv_nsec ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
union __anonunion_26 {
   struct __anonstruct_futex_27 futex ;
   struct __anonstruct_nanosleep_28 nanosleep ;
   struct __anonstruct_poll_30 poll ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct restart_block {
   long (*fn)(struct restart_block *) ;
   union __anonunion_26 __anonCompField_restart_block_6 ;
};
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/page_64.h"
struct page;
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/getorder.h"
struct mm_struct;
#line 49 
struct io_bitmap;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/ptrace.h"
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/desc_defs.h"
struct desc_struct {
   u16 limit0 ;
   u16 base0 ;
   u16 base1 : 8 ;
   u16 type : 4 ;
   u16 s : 1 ;
   u16 dpl : 2 ;
   u16 p : 1 ;
   u16 limit1 : 4 ;
   u16 avl : 1 ;
   u16 l : 1 ;
   u16 d : 1 ;
   u16 g : 1 ;
   u16 base2 : 8 ;
} __attribute__((__packed__));
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/desc_defs.h"
typedef unsigned long pteval_t;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pmdval_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pudval_t;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgdval_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgprotval_t;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
struct __anonstruct_pte_t_53 {
   pteval_t pte ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef struct __anonstruct_pte_t_53 pte_t;
#line 265  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct pgprot {
   pgprotval_t pgprot ;
};
#line 267  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct pgprot pgprot_t;
#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pgd_t_54 {
   pgdval_t pgd ;
};
#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pgd_t_54 pgd_t;
#line 319  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pud_t_56 {
   pudval_t pud ;
};
#line 319  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pud_t_56 pud_t;
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pmd_t_57 {
   pmdval_t pmd ;
};
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pmd_t_57 pmd_t;
#line 505  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct page *pgtable_t;
#line 519 
struct file;
#line 530 
struct seq_file;
#line 360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/nospec-branch.h"
struct thread_struct;
#line 362 
struct cpumask;
#line 365 
struct vm_area_struct;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct __anonstruct_59 {
   u8 locked ;
   u8 pending ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct __anonstruct_60 {
   u16 locked_pending ;
   u16 tail ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
union __anonunion_58 {
   atomic_t val ;
   struct __anonstruct_59 __anonCompField___anonunion_58_7 ;
   struct __anonstruct_60 __anonCompField___anonunion_58_8 ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct qspinlock {
   union __anonunion_58 __anonCompField_qspinlock_9 ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
typedef struct qspinlock arch_spinlock_t;
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
struct __anonstruct_62 {
   u8 wlocked ;
   u8 __lstate[3U] ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
union __anonunion_61 {
   atomic_t cnts ;
   struct __anonstruct_62 __anonCompField___anonunion_61_10 ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
struct qrwlock {
   union __anonunion_61 __anonCompField_qrwlock_11 ;
   arch_spinlock_t wait_lock ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
typedef struct qrwlock arch_rwlock_t;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/math_emu.h"
struct math_emu_info {
   long ___orig_eip ;
   struct pt_regs *regs ;
};
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
union __anonunion___u_67 {
   int __val ;
   char __c[1U] ;
};
#line 2288  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/atomic-fallback.h"
typedef atomic64_t atomic_long_t;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
struct cpumask {
   unsigned long bits[128U] ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
typedef struct cpumask cpumask_t;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct tracepoint_func {
   void *func ;
   void *data ;
   int prio ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct tracepoint {
   char *name ;
   struct static_key key ;
   int (*regfunc)(void) ;
   void (*unregfunc)(void) ;
   struct tracepoint_func *funcs ;
};
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
typedef int tracepoint_ptr_t;
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct bpf_raw_event_map {
   struct tracepoint *tp ;
   void *bpf_func ;
   u32 num_args ;
   u32 writable_size ;
} __attribute__((__aligned__(32)));
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fregs_state {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u32 status ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct __anonstruct_90 {
   u64 rip ;
   u64 rdp ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct __anonstruct_91 {
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union __anonunion_89 {
   struct __anonstruct_90 __anonCompField___anonunion_89_17 ;
   struct __anonstruct_91 __anonCompField___anonunion_89_18 ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union __anonunion_92 {
   u32 padding1[12U] ;
   u32 sw_reserved[12U] ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fxregs_state {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   union __anonunion_89 __anonCompField_fxregs_state_19 ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32U] ;
   u32 xmm_space[64U] ;
   u32 padding[12U] ;
   union __anonunion_92 __anonCompField_fxregs_state_20 ;
} __attribute__((__aligned__(16)));
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct swregs_state {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u8 ftop ;
   u8 changed ;
   u8 lookahead ;
   u8 no_update ;
   u8 rm ;
   u8 alimit ;
   struct math_emu_info *info ;
   u32 entry_eip ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct xstate_header {
   u64 xfeatures ;
   u64 xcomp_bv ;
   u64 reserved[6U] ;
} __attribute__((__packed__));
#line 253  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct xregs_state {
   struct fxregs_state i387 ;
   struct xstate_header header ;
   u8 extended_state_area[0U] ;
} __attribute__((__packed__, __aligned__(64)));
#line 268  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union fpregs_state {
   struct fregs_state fsave ;
   struct fxregs_state fxsave ;
   struct swregs_state soft ;
   struct xregs_state xsave ;
   u8 __padding[4096U] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fpu {
   unsigned int last_cpu ;
   unsigned long avx512_timestamp ;
   union fpregs_state state ;
};
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/orc_types.h"
struct orc_entry {
   s16 sp_offset ;
   s16 bp_offset ;
   unsigned int sp_reg : 4 ;
   unsigned int bp_reg : 4 ;
   unsigned int type : 2 ;
   unsigned int end : 1 ;
} __attribute__((__packed__));
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct seq_operations;
#line 478 
struct perf_event;
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct __anonstruct_mm_segment_t_95 {
   unsigned long seg ;
};
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
typedef struct __anonstruct_mm_segment_t_95 mm_segment_t;
#line 485  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct thread_struct {
   struct desc_struct tls_array[3U] ;
   unsigned long sp ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long fsbase ;
   unsigned long gsbase ;
   struct perf_event *ptrace_bps[4U] ;
   unsigned long debugreg6 ;
   unsigned long ptrace_dr7 ;
   unsigned long cr2 ;
   unsigned long trap_nr ;
   unsigned long error_code ;
   struct io_bitmap *io_bitmap ;
   unsigned long iopl_emul ;
   mm_segment_t addr_limit ;
   unsigned int sig_on_uaccess_err : 1 ;
   unsigned int uaccess_err : 1 ;
   struct fpu fpu ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/thread_info.h"
struct thread_info {
   unsigned long flags ;
   u32 status ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bottom_half.h"
struct lockdep_map;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lockdep_subclass_key {
   char __one_byte ;
} __attribute__((__packed__));
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
union __anonunion_96 {
   struct hlist_node hash_entry ;
   struct lockdep_subclass_key subkeys[8U] ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lock_class_key {
   union __anonunion_96 __anonCompField_lock_class_key_23 ;
};
#line 68 
struct lock_trace;
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lock_class {
   struct hlist_node hash_entry ;
   struct list_head lock_entry ;
   struct list_head locks_after ;
   struct list_head locks_before ;
   struct lockdep_subclass_key *key ;
   unsigned int subclass ;
   unsigned int dep_gen_id ;
   unsigned long usage_mask ;
   struct lock_trace *usage_traces[9U] ;
   int name_version ;
   char *name ;
   unsigned long contention_point[4U] ;
   unsigned long contending_point[4U] ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lockdep_map {
   struct lock_class_key *key ;
   struct lock_class *class_cache[2U] ;
   char *name ;
   int cpu ;
   unsigned long ip ;
};
#line 226  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct held_lock {
   u64 prev_chain_key ;
   unsigned long acquire_ip ;
   struct lockdep_map *instance ;
   struct lockdep_map *nest_lock ;
   u64 waittime_stamp ;
   u64 holdtime_stamp ;
   unsigned int class_idx : 13 ;
   unsigned int irq_context : 2 ;
   unsigned int trylock : 1 ;
   unsigned int read : 2 ;
   unsigned int check : 1 ;
   unsigned int hardirqs_off : 1 ;
   unsigned int references : 12 ;
   unsigned int pin_count ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct raw_spinlock {
   arch_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct raw_spinlock raw_spinlock_t;
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct __anonstruct_98 {
   u8 __padding[24U] ;
   struct lockdep_map dep_map ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
union __anonunion_97 {
   struct raw_spinlock rlock ;
   struct __anonstruct_98 __anonCompField___anonunion_97_24 ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct spinlock {
   union __anonunion_97 __anonCompField_spinlock_25 ;
};
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct spinlock spinlock_t;
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct __anonstruct_rwlock_t_99 {
   arch_rwlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct __anonstruct_rwlock_t_99 rwlock_t;
#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
struct mutex;
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
struct kmem_cache;
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
struct seqcount {
   unsigned int sequence ;
   struct lockdep_map dep_map ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
typedef struct seqcount seqcount_t;
#line 403  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
struct __anonstruct_seqlock_t_112 {
   struct seqcount seqcount ;
   spinlock_t lock ;
};
#line 403  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
typedef struct __anonstruct_seqlock_t_112 seqlock_t;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timex.h"
typedef s32 old_time32_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/time32.h"
struct old_timespec32 {
   old_time32_t tv_sec ;
   s32 tv_nsec ;
};
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/highuid.h"
struct user_namespace;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
struct __anonstruct_kuid_t_113 {
   uid_t val ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
typedef struct __anonstruct_kuid_t_113 kuid_t;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
struct __anonstruct_kgid_t_114 {
   gid_t val ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
typedef struct __anonstruct_kgid_t_114 kgid_t;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/stat.h"
struct kstat {
   u32 result_mask ;
   umode_t mode ;
   unsigned int nlink ;
   uint32_t blksize ;
   u64 attributes ;
   u64 attributes_mask ;
   u64 ino ;
   dev_t dev ;
   dev_t rdev ;
   kuid_t uid ;
   kgid_t gid ;
   loff_t size ;
   struct timespec64 atime ;
   struct timespec64 mtime ;
   struct timespec64 ctime ;
   struct timespec64 btime ;
   u64 blocks ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
struct wait_queue_head {
   spinlock_t lock ;
   struct list_head head ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
typedef struct wait_queue_head wait_queue_head_t;
#line 1133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
struct __anonstruct_nodemask_t_115 {
   unsigned long bits[16U] ;
};
#line 1133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
typedef struct __anonstruct_nodemask_t_115 nodemask_t;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/tlbbatch.h"
struct arch_tlbflush_unmap_batch {
   struct cpumask cpumask ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct vmacache {
   u64 seqnum ;
   struct vm_area_struct *vmas[4U] ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct task_rss_stat {
   int events ;
   int count[4U] ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct mm_rss_stat {
   atomic_long_t count[4U] ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct page_frag {
   struct page *page ;
   __u32 offset ;
   __u32 size ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct tlbflush_unmap_batch {
   struct arch_tlbflush_unmap_batch arch ;
   bool flush_required ;
   bool writable ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_node {
   unsigned long __rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
} __attribute__((__aligned__(8)));
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_root {
   struct rb_node *rb_node ;
};
#line 125  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_root_cached {
   struct rb_root rb_root ;
   struct rb_node *rb_leftmost ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/osq_lock.h"
struct optimistic_spin_queue {
   atomic_t tail ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rwsem.h"
struct rw_semaphore {
   atomic_long_t count ;
   atomic_long_t owner ;
   struct optimistic_spin_queue osq ;
   raw_spinlock_t wait_lock ;
   struct list_head wait_list ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/completion.h"
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};
#line 120 
struct inode;
#line 121 
struct notifier_block;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct ww_acquire_ctx;
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
struct mutex {
   atomic_long_t owner ;
   spinlock_t wait_lock ;
   struct optimistic_spin_queue osq ;
   struct list_head wait_list ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   struct ww_acquire_ctx *ww_ctx ;
   void *magic ;
};
#line 461  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
typedef s64 ktime_t;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
struct timer_list {
   struct hlist_node entry ;
   unsigned long expires ;
   void (*function)(struct timer_list *) ;
   u32 flags ;
   struct lockdep_map lockdep_map ;
};
#line 196 
struct hrtimer;
#line 197 
enum hrtimer_restart;
#line 221 
struct workqueue_struct;
#line 222 
struct work_struct;
#line 102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct *) ;
   struct lockdep_map lockdep_map ;
};
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct delayed_work {
   struct work_struct work ;
   struct timer_list timer ;
   struct workqueue_struct *wq ;
   int cpu ;
};
#line 124  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct rcu_work {
   struct work_struct work ;
   struct callback_head rcu ;
   struct workqueue_struct *wq ;
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcu_segcblist.h"
struct rcu_segcblist {
   struct callback_head *head ;
   struct callback_head **tails[4U] ;
   unsigned long gp_seq[4U] ;
   atomic_long_t len ;
   long len_lazy ;
   u8 enabled ;
   u8 offloaded ;
};
#line 80 
struct srcu_struct;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcu.h"
struct srcu_node;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_data {
   unsigned long srcu_lock_count[2U] ;
   unsigned long srcu_unlock_count[2U] ;
   spinlock_t lock ;
   struct rcu_segcblist srcu_cblist ;
   unsigned long srcu_gp_seq_needed ;
   unsigned long srcu_gp_seq_needed_exp ;
   bool srcu_cblist_invoking ;
   struct timer_list delay_work ;
   struct work_struct work ;
   struct callback_head srcu_barrier_head ;
   struct srcu_node *mynode ;
   unsigned long grpmask ;
   int cpu ;
   struct srcu_struct *ssp ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_node {
   spinlock_t lock ;
   unsigned long srcu_have_cbs[4U] ;
   unsigned long srcu_data_have_cbs[4U] ;
   unsigned long srcu_gp_seq_needed_exp ;
   struct srcu_node *srcu_parent ;
   int grplo ;
   int grphi ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_struct {
   struct srcu_node node[521U] ;
   struct srcu_node *level[4U] ;
   struct mutex srcu_cb_mutex ;
   spinlock_t lock ;
   struct mutex srcu_gp_mutex ;
   unsigned int srcu_idx ;
   unsigned long srcu_gp_seq ;
   unsigned long srcu_gp_seq_needed ;
   unsigned long srcu_gp_seq_needed_exp ;
   unsigned long srcu_last_gp_end ;
   struct srcu_data *sda ;
   unsigned long srcu_barrier_seq ;
   struct mutex srcu_barrier_mutex ;
   struct completion srcu_barrier_completion ;
   atomic_t srcu_barrier_cpu_cnt ;
   struct delayed_work work ;
   struct lockdep_map dep_map ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/notifier.h"
struct notifier_block {
   int (*notifier_call)(struct notifier_block *, unsigned long , void *) ;
   struct notifier_block *next ;
   int priority ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/notifier.h"
struct raw_notifier_head {
   struct notifier_block *head ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/uprobes.h"
struct arch_uprobe_task {
   unsigned long saved_scratch_register ;
   unsigned int saved_trap_nr ;
   unsigned int saved_tf ;
};
#line 57 
enum uprobe_task_state {
    UTASK_RUNNING = 0,
    UTASK_SSTEP = 1,
    UTASK_SSTEP_ACK = 2,
    UTASK_SSTEP_TRAPPED = 3
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_128 {
   struct arch_uprobe_task autask ;
   unsigned long vaddr ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_129 {
   struct callback_head dup_xol_work ;
   unsigned long dup_xol_addr ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
union __anonunion_127 {
   struct __anonstruct_128 __anonCompField___anonunion_127_28 ;
   struct __anonstruct_129 __anonCompField___anonunion_127_29 ;
};
#line 61 
struct uprobe;
#line 61 
struct return_instance;
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct uprobe_task {
   enum uprobe_task_state state ;
   union __anonunion_127 __anonCompField_uprobe_task_30 ;
   struct uprobe *active_uprobe ;
   unsigned long xol_vaddr ;
   struct return_instance *return_instances ;
   unsigned int depth ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct return_instance {
   struct uprobe *uprobe ;
   unsigned long func ;
   unsigned long stack ;
   unsigned long orig_ret_vaddr ;
   bool chained ;
   struct return_instance *next ;
};
#line 98 
struct xol_area;
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct uprobes_state {
   struct xol_area *xol_area ;
};
#line 140 
struct ldt_struct;
#line 140 
struct vdso_image;
#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_mm_context_t_130 {
   u64 ctx_id ;
   atomic64_t tlb_gen ;
   struct rw_semaphore ldt_usr_sem ;
   struct ldt_struct *ldt ;
   unsigned short ia32_compat ;
   struct mutex lock ;
   void *vdso ;
   struct vdso_image *vdso_image ;
   atomic_t perf_rdpmc_allowed ;
   u16 pkey_allocation_map ;
   s16 execute_only_pkey ;
   void *bd_addr ;
};
#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
typedef struct __anonstruct_mm_context_t_130 mm_context_t;
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct address_space;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_132 {
   struct list_head lru ;
   struct address_space *mapping ;
   unsigned long index ;
   unsigned long private ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_133 {
   dma_addr_t dma_addr ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_136 {
   struct page *next ;
   int pages ;
   int pobjects ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_135 {
   struct list_head slab_list ;
   struct __anonstruct_136 __anonCompField___anonunion_135_33 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_138 {
   unsigned int inuse : 16 ;
   unsigned int objects : 15 ;
   unsigned int frozen : 1 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_137 {
   void *s_mem ;
   unsigned long counters ;
   struct __anonstruct_138 __anonCompField___anonunion_137_35 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_134 {
   union __anonunion_135 __anonCompField___anonstruct_134_34 ;
   struct kmem_cache *slab_cache ;
   void *freelist ;
   union __anonunion_137 __anonCompField___anonstruct_134_36 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_139 {
   unsigned long compound_head ;
   unsigned char compound_dtor ;
   unsigned char compound_order ;
   atomic_t compound_mapcount ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_140 {
   unsigned long _compound_pad_1 ;
   unsigned long _compound_pad_2 ;
   struct list_head deferred_list ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_142 {
   struct mm_struct *pt_mm ;
   atomic_t pt_frag_refcount ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_141 {
   unsigned long _pt_pad_1 ;
   pgtable_t pmd_huge_pte ;
   unsigned long _pt_pad_2 ;
   union __anonunion_142 __anonCompField___anonstruct_141_40 ;
   spinlock_t *ptl ;
};
#line 68 
struct dev_pagemap;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_143 {
   struct dev_pagemap *pgmap ;
   void *zone_device_data ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_131 {
   struct __anonstruct_132 __anonCompField___anonunion_131_31 ;
   struct __anonstruct_133 __anonCompField___anonunion_131_32 ;
   struct __anonstruct_134 __anonCompField___anonunion_131_37 ;
   struct __anonstruct_139 __anonCompField___anonunion_131_38 ;
   struct __anonstruct_140 __anonCompField___anonunion_131_39 ;
   struct __anonstruct_141 __anonCompField___anonunion_131_41 ;
   struct __anonstruct_143 __anonCompField___anonunion_131_42 ;
   struct callback_head callback_head ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_144 {
   atomic_t _mapcount ;
   unsigned int page_type ;
   unsigned int active ;
   int units ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct page {
   unsigned long flags ;
   union __anonunion_131 __anonCompField_page_43 ;
   union __anonunion_144 __anonCompField_page_44 ;
   atomic_t _refcount ;
   struct mem_cgroup *mem_cgroup ;
} __attribute__((__aligned__(16)));
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct userfaultfd_ctx;
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct vm_userfaultfd_ctx {
   struct userfaultfd_ctx *ctx ;
};
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_shared_145 {
   struct rb_node rb ;
   unsigned long rb_subtree_last ;
};
#line 292 
struct anon_vma;
#line 292 
struct vm_operations_struct;
#line 292 
struct mempolicy;
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct vm_area_struct {
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   struct vm_area_struct *vm_prev ;
   struct rb_node vm_rb ;
   unsigned long rb_subtree_gap ;
   struct mm_struct *vm_mm ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   struct __anonstruct_shared_145 shared ;
   struct list_head anon_vma_chain ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   atomic_long_t swap_readahead_info ;
   struct mempolicy *vm_policy ;
   struct vm_userfaultfd_ctx vm_userfaultfd_ctx ;
} __attribute__((__designated_init__));
#line 358  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct core_thread {
   struct task_struct *task ;
   struct core_thread *next ;
};
#line 363  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct core_state {
   atomic_t nr_threads ;
   struct core_thread dumper ;
   struct completion startup ;
};
#line 368 
struct kioctx_table;
#line 370 
struct linux_binfmt;
#line 370 
struct mmu_notifier_mm;
#line 370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_146 {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   u64 vmacache_seqnum ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   unsigned long mmap_base ;
   unsigned long mmap_legacy_base ;
   unsigned long mmap_compat_base ;
   unsigned long mmap_compat_legacy_base ;
   unsigned long task_size ;
   unsigned long highest_vm_end ;
   pgd_t *pgd ;
   atomic_t membarrier_state ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   atomic_long_t pgtables_bytes ;
   int map_count ;
   spinlock_t page_table_lock ;
   struct rw_semaphore mmap_sem ;
   struct list_head mmlist ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   atomic64_t pinned_vm ;
   unsigned long data_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long def_flags ;
   spinlock_t arg_lock ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[46U] ;
   struct mm_rss_stat rss_stat ;
   struct linux_binfmt *binfmt ;
   mm_context_t context ;
   unsigned long flags ;
   struct core_state *core_state ;
   spinlock_t ioctx_lock ;
   struct kioctx_table *ioctx_table ;
   struct task_struct *owner ;
   struct user_namespace *user_ns ;
   struct file *exe_file ;
   struct mmu_notifier_mm *mmu_notifier_mm ;
   unsigned long numa_next_scan ;
   unsigned long numa_scan_offset ;
   int numa_scan_seq ;
   atomic_t tlb_flush_pending ;
   bool tlb_flush_batched ;
   struct uprobes_state uprobes_state ;
   atomic_long_t hugetlb_usage ;
   struct work_struct async_put_work ;
} __attribute__((__designated_init__));
#line 370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct mm_struct {
   struct __anonstruct_146 __anonCompField_mm_struct_45 ;
   unsigned long cpu_bitmap[] ;
};
#line 642 
struct vm_fault;
#line 643  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
typedef unsigned int vm_fault_t;
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
typedef unsigned int isolate_mode_t;
#line 824 
struct resource;
#line 825 
struct vmem_altmap;
#line 282  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/x86_init.h"
struct pci_dev;
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/topology.h"
struct pci_bus;
#line 440  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/io.h"
struct fwnode_operations;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_handle {
   struct fwnode_handle *secondary ;
   struct fwnode_operations *ops ;
   struct device *dev ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_endpoint {
   unsigned int port ;
   unsigned int id ;
   struct fwnode_handle *local_fwnode ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_reference_args {
   struct fwnode_handle *fwnode ;
   unsigned int nargs ;
   u64 args[8U] ;
};
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_operations {
   struct fwnode_handle *(*get)(struct fwnode_handle *) ;
   void (*put)(struct fwnode_handle *) ;
   bool (*device_is_available)(struct fwnode_handle *) ;
   void *(*device_get_match_data)(struct fwnode_handle *, struct device *) ;
   bool (*property_present)(struct fwnode_handle *, char *) ;
   int (*property_read_int_array)(struct fwnode_handle *, char *, unsigned int , void *, size_t ) ;
   int (*property_read_string_array)(struct fwnode_handle *, char *, char **, size_t ) ;
   char *(*get_name)(struct fwnode_handle *) ;
   char *(*get_name_prefix)(struct fwnode_handle *) ;
   struct fwnode_handle *(*get_parent)(struct fwnode_handle *) ;
   struct fwnode_handle *(*get_next_child_node)(struct fwnode_handle *, struct fwnode_handle *) ;
   struct fwnode_handle *(*get_named_child_node)(struct fwnode_handle *, char *) ;
   int (*get_reference_args)(struct fwnode_handle *, char *, char *, unsigned int , unsigned int , struct fwnode_reference_args *) ;
   struct fwnode_handle *(*graph_get_next_endpoint)(struct fwnode_handle *, struct fwnode_handle *) ;
   struct fwnode_handle *(*graph_get_remote_endpoint)(struct fwnode_handle *) ;
   struct fwnode_handle *(*graph_get_port_parent)(struct fwnode_handle *) ;
   int (*graph_parse_endpoint)(struct fwnode_handle *, struct fwnode_endpoint *) ;
   int (*add_links)(struct fwnode_handle *, struct device *) ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/llist.h"
struct llist_node;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/llist.h"
struct llist_node {
   struct llist_node *next ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmalloc.h"
struct vm_struct {
   struct vm_struct *next ;
   void *addr ;
   unsigned long size ;
   unsigned long flags ;
   struct page **pages ;
   unsigned int nr_pages ;
   phys_addr_t phys_addr ;
   void *caller ;
};
#line 822  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/sysctl.h"
struct nsproxy;
#line 823 
struct ctl_table_root;
#line 824 
struct ctl_table_header;
#line 825 
struct ctl_dir;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
typedef int proc_handler(struct ctl_table *, int , void *, size_t *, loff_t *);
#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_poll {
   atomic_t event ;
   wait_queue_head_t wait ;
};
#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table {
   char *procname ;
   void *data ;
   int maxlen ;
   umode_t mode ;
   struct ctl_table *child ;
   proc_handler *proc_handler ;
   struct ctl_table_poll *poll ;
   void *extra1 ;
   void *extra2 ;
} __attribute__((__designated_init__));
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_node {
   struct rb_node node ;
   struct ctl_table_header *header ;
};
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct __anonstruct_237 {
   struct ctl_table *ctl_table ;
   int used ;
   int count ;
   int nreg ;
};
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
union __anonunion_236 {
   struct __anonstruct_237 __anonCompField___anonunion_236_47 ;
   struct callback_head rcu ;
};
#line 142 
struct ctl_table_set;
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_header {
   union __anonunion_236 __anonCompField_ctl_table_header_48 ;
   struct completion *unregistering ;
   struct ctl_table *ctl_table_arg ;
   struct ctl_table_root *root ;
   struct ctl_table_set *set ;
   struct ctl_dir *parent ;
   struct ctl_node *node ;
   struct hlist_head inodes ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_dir {
   struct ctl_table_header header ;
   struct rb_root root ;
};
#line 167  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_set {
   int (*is_seen)(struct ctl_table_set *) ;
   struct ctl_dir dir ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_root {
   struct ctl_table_set default_set ;
   struct ctl_table_set *(*lookup)(struct ctl_table_root *) ;
   void (*set_ownership)(struct ctl_table_header *, struct ctl_table *, kuid_t *, kgid_t *) ;
   int (*permissions)(struct ctl_table_header *, struct ctl_table *) ;
};
#line 242 
struct cred;
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/vdso.h"
struct vdso_image {
   void *data ;
   unsigned long size ;
   unsigned long alt ;
   unsigned long alt_len ;
   long sym_vvar_start ;
   long sym_vvar_page ;
   long sym_pvclock_page ;
   long sym_hvclock_page ;
   long sym_VDSO32_NOTE_MASK ;
   long sym___kernel_sigreturn ;
   long sym___kernel_rt_sigreturn ;
   long sym___kernel_vsyscall ;
   long sym_int80_landing_pad ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Addr;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u16 Elf64_Half;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Off;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u32 Elf64_Word;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Xword;
#line 192  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};
#line 200  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_sym Elf64_Sym;
#line 221  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_hdr {
   unsigned char e_ident[16U] ;
   Elf64_Half e_type ;
   Elf64_Half e_machine ;
   Elf64_Word e_version ;
   Elf64_Addr e_entry ;
   Elf64_Off e_phoff ;
   Elf64_Off e_shoff ;
   Elf64_Word e_flags ;
   Elf64_Half e_ehsize ;
   Elf64_Half e_phentsize ;
   Elf64_Half e_phnum ;
   Elf64_Half e_shentsize ;
   Elf64_Half e_shnum ;
   Elf64_Half e_shstrndx ;
};
#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_hdr Elf64_Ehdr;
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_shdr {
   Elf64_Word sh_name ;
   Elf64_Word sh_type ;
   Elf64_Xword sh_flags ;
   Elf64_Addr sh_addr ;
   Elf64_Off sh_offset ;
   Elf64_Xword sh_size ;
   Elf64_Word sh_link ;
   Elf64_Word sh_info ;
   Elf64_Xword sh_addralign ;
   Elf64_Xword sh_entsize ;
};
#line 328  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_shdr Elf64_Shdr;
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/xarray.h"
struct xarray {
   spinlock_t xa_lock ;
   gfp_t xa_flags ;
   void *xa_head ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/idr.h"
struct idr {
   struct xarray idr_rt ;
   unsigned int idr_base ;
   unsigned int idr_next ;
};
#line 322 
struct dentry;
#line 323 
struct iattr;
#line 324 
struct super_block;
#line 326 
struct fs_context;
#line 328 
struct kernfs_open_node;
#line 329 
struct kernfs_iattrs;
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_root;
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_dir {
   unsigned long subdirs ;
   struct rb_root children ;
   struct kernfs_root *root ;
};
#line 96 
struct kernfs_node;
#line 96  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_symlink {
   struct kernfs_node *target_kn ;
};
#line 100 
struct kernfs_ops;
#line 100  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_attr {
   struct kernfs_ops *ops ;
   struct kernfs_open_node *open ;
   loff_t size ;
   struct kernfs_node *notify_next ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
union __anonunion_256 {
   struct kernfs_elem_dir dir ;
   struct kernfs_elem_symlink symlink ;
   struct kernfs_elem_attr attr ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_node {
   atomic_t count ;
   atomic_t active ;
   struct lockdep_map dep_map ;
   struct kernfs_node *parent ;
   char *name ;
   struct rb_node rb ;
   void *ns ;
   unsigned int hash ;
   union __anonunion_256 __anonCompField_kernfs_node_51 ;
   void *priv ;
   u64 id ;
   unsigned short flags ;
   umode_t mode ;
   struct kernfs_iattrs *iattr ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_syscall_ops {
   int (*show_options)(struct seq_file *, struct kernfs_root *) ;
   int (*mkdir)(struct kernfs_node *, char *, umode_t ) ;
   int (*rmdir)(struct kernfs_node *) ;
   int (*rename)(struct kernfs_node *, struct kernfs_node *, char *) ;
   int (*show_path)(struct seq_file *, struct kernfs_node *, struct kernfs_root *) ;
};
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_root {
   struct kernfs_node *kn ;
   unsigned int flags ;
   struct idr ino_idr ;
   u32 last_id_lowbits ;
   u32 id_highbits ;
   struct kernfs_syscall_ops *syscall_ops ;
   struct list_head supers ;
   wait_queue_head_t deactivate_waitq ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_open_file {
   struct kernfs_node *kn ;
   struct file *file ;
   struct seq_file *seq_file ;
   void *priv ;
   struct mutex mutex ;
   struct mutex prealloc_mutex ;
   int event ;
   struct list_head list ;
   char *prealloc_buf ;
   size_t atomic_write_len ;
   bool mmapped : 1 ;
   bool released : 1 ;
   struct vm_operations_struct *vm_ops ;
};
#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_ops {
   int (*open)(struct kernfs_open_file *) ;
   void (*release)(struct kernfs_open_file *) ;
   int (*seq_show)(struct seq_file *, void *) ;
   void *(*seq_start)(struct seq_file *, loff_t *) ;
   void *(*seq_next)(struct seq_file *, void *, loff_t *) ;
   void (*seq_stop)(struct seq_file *, void *) ;
   ssize_t (*read)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   size_t atomic_write_len ;
   bool prealloc ;
   ssize_t (*write)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   __poll_t (*poll)(struct kernfs_open_file *, struct poll_table_struct *) ;
   int (*mmap)(struct kernfs_open_file *, struct vm_area_struct *) ;
   struct lock_class_key lockdep_key ;
};
#line 596 
struct kobject;
#line 597 
enum kobj_ns_type {
    KOBJ_NS_TYPE_NONE = 0,
    KOBJ_NS_TYPE_NET = 1,
    KOBJ_NS_TYPES = 2
};
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject_ns.h"
struct kobj_ns_type_operations {
   enum kobj_ns_type type ;
   bool (*current_may_mount)(void) ;
   void *(*grab_current_ns)(void) ;
   void *(*netlink_ns)(struct sock *) ;
   void *(*initial_ns)(void) ;
   void (*drop_ns)(void *) ;
};
#line 58 
struct bin_attribute;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct attribute {
   char *name ;
   umode_t mode ;
   bool ignore_lockdep : 1 ;
   struct lock_class_key *key ;
   struct lock_class_key skey ;
};
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct attribute_group {
   char *name ;
   umode_t (*is_visible)(struct kobject *, struct attribute *, int ) ;
   umode_t (*is_bin_visible)(struct kobject *, struct bin_attribute *, int ) ;
   struct attribute **attrs ;
   struct bin_attribute **bin_attrs ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct bin_attribute {
   struct attribute attr ;
   size_t size ;
   void *private ;
   ssize_t (*read)(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t , size_t ) ;
   ssize_t (*write)(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t , size_t ) ;
   int (*mmap)(struct file *, struct kobject *, struct bin_attribute *, struct vm_area_struct *) ;
};
#line 223  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct sysfs_ops {
   ssize_t (*show)(struct kobject *, struct attribute *, char *) ;
   ssize_t (*store)(struct kobject *, struct attribute *, char *, size_t ) ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
struct refcount_struct {
   atomic_t refs ;
};
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
typedef struct refcount_struct refcount_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kref.h"
struct kref {
   refcount_t refcount ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset;
#line 65 
struct kobj_type;
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobject {
   char *name ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct kernfs_node *sd ;
   struct kref kref ;
   struct delayed_work release ;
   unsigned int state_initialized : 1 ;
   unsigned int state_in_sysfs : 1 ;
   unsigned int state_add_uevent_sent : 1 ;
   unsigned int state_remove_uevent_sent : 1 ;
   unsigned int uevent_suppress : 1 ;
};
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobj_type {
   void (*release)(struct kobject *) ;
   struct sysfs_ops *sysfs_ops ;
   struct attribute **default_attrs ;
   struct attribute_group **default_groups ;
   struct kobj_ns_type_operations *(*child_ns_type)(struct kobject *) ;
   void *(*namespace)(struct kobject *) ;
   void (*get_ownership)(struct kobject *, kuid_t *, kgid_t *) ;
};
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobj_uevent_env {
   char *argv[3U] ;
   char *envp[32U] ;
   int envp_idx ;
   char buf[2048U] ;
   int buflen ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset_uevent_ops {
   int (*filter)(struct kset *, struct kobject *) ;
   char *(*name)(struct kset *, struct kobject *) ;
   int (*uevent)(struct kset *, struct kobject *, struct kobj_uevent_env *) ;
};
#line 193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops *uevent_ops ;
} __attribute__((__designated_init__));
#line 247 
struct kernel_param;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kernel_param_ops {
   unsigned int flags ;
   int (*set)(char *, struct kernel_param *) ;
   int (*get)(char *, struct kernel_param *) ;
   void (*free)(void *) ;
};
#line 69 
struct kparam_string;
#line 69 
struct kparam_array;
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
union __anonunion_259 {
   void *arg ;
   struct kparam_string *str ;
   struct kparam_array *arr ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kernel_param {
   char *name ;
   struct module *mod ;
   struct kernel_param_ops *ops ;
   u16 perm ;
   s8 level ;
   u8 flags ;
   union __anonunion_259 __anonCompField_kernel_param_52 ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kparam_string {
   unsigned int maxlen ;
   char *string ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kparam_array {
   unsigned int max ;
   unsigned int elemsize ;
   unsigned int *num ;
   struct kernel_param_ops *ops ;
   void *elem ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree_latch.h"
struct latch_tree_node {
   struct rb_node node[2U] ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/error-injection.h"
struct error_injection_entry {
   unsigned long addr ;
   int etype ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/module.h"
struct mod_arch_specific {
   unsigned int num_orcs ;
   int *orc_unwind_ip ;
   struct orc_entry *orc_unwind ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct exception_table_entry;
#line 45 
struct module_param_attrs;
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
   struct module_param_attrs *mp ;
   struct completion *kobj_completion ;
} __attribute__((__designated_init__));
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute *, struct module_kobject *, char *) ;
   ssize_t (*store)(struct module_attribute *, struct module_kobject *, char *, size_t ) ;
   void (*setup)(struct module *, char *) ;
   int (*test)(struct module *) ;
   void (*free)(struct module *) ;
};
#line 297 
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2,
    MODULE_STATE_UNFORMED = 3
};
#line 305  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct mod_tree_node {
   struct module *mod ;
   struct latch_tree_node node ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_layout {
   void *base ;
   unsigned int size ;
   unsigned int text_size ;
   unsigned int ro_size ;
   unsigned int ro_after_init_size ;
   struct mod_tree_node mtn ;
};
#line 334  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct mod_kallsyms {
   Elf64_Sym *symtab ;
   unsigned int num_symtab ;
   char *strtab ;
   char *typetab ;
};
#line 342  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct klp_modinfo {
   Elf64_Ehdr hdr ;
   Elf64_Shdr *sechdrs ;
   char *secstrings ;
   unsigned int symndx ;
};
#line 350 
struct module_sect_attrs;
#line 350 
struct module_notes_attrs;
#line 350 
struct trace_event_call;
#line 350 
struct trace_eval_map;
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[56U] ;
   struct module_kobject mkobj ;
   struct module_attribute *modinfo_attrs ;
   char *version ;
   char *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol *syms ;
   s32 *crcs ;
   unsigned int num_syms ;
   struct mutex param_lock ;
   struct kernel_param *kp ;
   unsigned int num_kp ;
   unsigned int num_gpl_syms ;
   struct kernel_symbol *gpl_syms ;
   s32 *gpl_crcs ;
   struct kernel_symbol *unused_syms ;
   s32 *unused_crcs ;
   unsigned int num_unused_syms ;
   unsigned int num_unused_gpl_syms ;
   struct kernel_symbol *unused_gpl_syms ;
   s32 *unused_gpl_crcs ;
   bool sig_ok ;
   bool async_probe_requested ;
   struct kernel_symbol *gpl_future_syms ;
   s32 *gpl_future_crcs ;
   unsigned int num_gpl_future_syms ;
   unsigned int num_exentries ;
   struct exception_table_entry *extable ;
   int (*init)(void) ;
   struct module_layout core_layout ;
   struct module_layout init_layout ;
   struct mod_arch_specific arch ;
   unsigned long taints ;
   unsigned int num_bugs ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   struct mod_kallsyms *kallsyms ;
   struct mod_kallsyms core_kallsyms ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   char *args ;
   void *percpu ;
   unsigned int percpu_size ;
   unsigned int num_tracepoints ;
   tracepoint_ptr_t *tracepoints_ptrs ;
   unsigned int num_srcu_structs ;
   struct srcu_struct **srcu_struct_ptrs ;
   unsigned int num_bpf_raw_events ;
   struct bpf_raw_event_map *bpf_raw_events ;
   struct jump_entry *jump_entries ;
   unsigned int num_jump_entries ;
   unsigned int num_trace_bprintk_fmt ;
   char **trace_bprintk_fmt_start ;
   struct trace_event_call **trace_events ;
   unsigned int num_trace_events ;
   struct trace_eval_map **trace_evals ;
   unsigned int num_trace_evals ;
   unsigned int num_ftrace_callsites ;
   unsigned long *ftrace_callsites ;
   bool klp ;
   bool klp_alive ;
   struct klp_modinfo *klp_info ;
   struct list_head source_list ;
   struct list_head target_list ;
   void (*exit)(void) ;
   atomic_t refcnt ;
   ctor_fn_t *ctors ;
   unsigned int num_ctors ;
   struct error_injection_entry *ei_funcs ;
   unsigned int num_ei_funcs ;
} __attribute__((__designated_init__, __aligned__(64)));
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uuid.h"
struct __anonstruct_uuid_t_267 {
   __u8 b[16U] ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uuid.h"
typedef struct __anonstruct_uuid_t_267 uuid_t;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uuid.h"
typedef unsigned long kernel_ulong_t;
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct pci_device_id {
   __u32 vendor ;
   __u32 device ;
   __u32 subvendor ;
   __u32 subdevice ;
   __u32 class ;
   __u32 class_mask ;
   kernel_ulong_t driver_data ;
};
#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct acpi_device_id {
   __u8 id[9U] ;
   kernel_ulong_t driver_data ;
   __u32 cls ;
   __u32 cls_msk ;
};
#line 260  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct of_device_id {
   char name[32U] ;
   char type[32U] ;
   char compatible[128U] ;
   void *data ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ioport.h"
struct resource {
   resource_size_t start ;
   resource_size_t end ;
   char *name ;
   unsigned long flags ;
   unsigned long desc ;
   struct resource *parent ;
   struct resource *sibling ;
   struct resource *child ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timerqueue.h"
struct timerqueue_node {
   struct rb_node node ;
   ktime_t expires ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timerqueue.h"
struct timerqueue_head {
   struct rb_root_cached rb_root ;
};
#line 60 
struct hrtimer_clock_base;
#line 61 
struct hrtimer_cpu_base;
#line 80 
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
};
#line 117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer {
   struct timerqueue_node node ;
   ktime_t _softexpires ;
   enum hrtimer_restart (*function)(struct hrtimer *) ;
   struct hrtimer_clock_base *base ;
   u8 state ;
   u8 is_rel ;
   u8 is_soft ;
   u8 is_hard ;
};
#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   unsigned int index ;
   clockid_t clockid ;
   seqcount_t seq ;
   struct hrtimer *running ;
   struct timerqueue_head active ;
   ktime_t (*get_time)(void) ;
   ktime_t offset ;
} __attribute__((__aligned__(64)));
#line 213  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer_cpu_base {
   raw_spinlock_t lock ;
   unsigned int cpu ;
   unsigned int active_bases ;
   unsigned int clock_was_set_seq ;
   unsigned int hres_active : 1 ;
   unsigned int in_hrtirq : 1 ;
   unsigned int hang_detected : 1 ;
   unsigned int softirq_activated : 1 ;
   unsigned int nr_events ;
   unsigned short nr_retries ;
   unsigned short nr_hangs ;
   unsigned int max_hang_time ;
   ktime_t expires_next ;
   struct hrtimer *next_timer ;
   ktime_t softirq_expires_next ;
   struct hrtimer *softirq_next_timer ;
   struct hrtimer_clock_base clock_base[8U] ;
} __attribute__((__aligned__(64)));
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct pm_message {
   int event ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
typedef struct pm_message pm_message_t;
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_ops {
   int (*prepare)(struct device *) ;
   void (*complete)(struct device *) ;
   int (*suspend)(struct device *) ;
   int (*resume)(struct device *) ;
   int (*freeze)(struct device *) ;
   int (*thaw)(struct device *) ;
   int (*poweroff)(struct device *) ;
   int (*restore)(struct device *) ;
   int (*suspend_late)(struct device *) ;
   int (*resume_early)(struct device *) ;
   int (*freeze_late)(struct device *) ;
   int (*thaw_early)(struct device *) ;
   int (*poweroff_late)(struct device *) ;
   int (*restore_early)(struct device *) ;
   int (*suspend_noirq)(struct device *) ;
   int (*resume_noirq)(struct device *) ;
   int (*freeze_noirq)(struct device *) ;
   int (*thaw_noirq)(struct device *) ;
   int (*poweroff_noirq)(struct device *) ;
   int (*restore_noirq)(struct device *) ;
   int (*runtime_suspend)(struct device *) ;
   int (*runtime_resume)(struct device *) ;
   int (*runtime_idle)(struct device *) ;
};
#line 303 
enum rpm_status {
    RPM_ACTIVE = 0,
    RPM_RESUMING = 1,
    RPM_SUSPENDED = 2,
    RPM_SUSPENDING = 3
};
#line 310 
enum rpm_request {
    RPM_REQ_NONE = 0,
    RPM_REQ_IDLE = 1,
    RPM_REQ_SUSPEND = 2,
    RPM_REQ_AUTOSUSPEND = 3,
    RPM_REQ_RESUME = 4
};
#line 318 
struct wakeup_source;
#line 319 
struct wake_irq;
#line 320 
struct pm_domain_data;
#line 530  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct pm_subsys_data {
   spinlock_t lock ;
   unsigned int refcount ;
   struct list_head clock_list ;
   struct pm_domain_data *domain_data ;
};
#line 573 
struct dev_pm_qos;
#line 573  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned int can_wakeup : 1 ;
   unsigned int async_suspend : 1 ;
   bool in_dpm_list : 1 ;
   bool is_prepared : 1 ;
   bool is_suspended : 1 ;
   bool is_noirq_suspended : 1 ;
   bool is_late_suspended : 1 ;
   bool no_pm : 1 ;
   bool early_init : 1 ;
   bool direct_complete : 1 ;
   u32 driver_flags ;
   spinlock_t lock ;
   struct list_head entry ;
   struct completion completion ;
   struct wakeup_source *wakeup ;
   bool wakeup_path : 1 ;
   bool syscore : 1 ;
   bool no_pm_callbacks : 1 ;
   unsigned int must_resume : 1 ;
   unsigned int may_skip_resume : 1 ;
   struct hrtimer suspend_timer ;
   unsigned long timer_expires ;
   struct work_struct work ;
   wait_queue_head_t wait_queue ;
   struct wake_irq *wakeirq ;
   atomic_t usage_count ;
   atomic_t child_count ;
   unsigned int disable_depth : 3 ;
   unsigned int idle_notification : 1 ;
   unsigned int request_pending : 1 ;
   unsigned int deferred_resume : 1 ;
   unsigned int runtime_auto : 1 ;
   bool ignore_children : 1 ;
   unsigned int no_callbacks : 1 ;
   unsigned int irq_safe : 1 ;
   unsigned int use_autosuspend : 1 ;
   unsigned int timer_autosuspends : 1 ;
   unsigned int memalloc_noio : 1 ;
   unsigned int links_count ;
   enum rpm_request request ;
   enum rpm_status runtime_status ;
   int runtime_error ;
   int autosuspend_delay ;
   u64 last_busy ;
   u64 active_time ;
   u64 suspended_time ;
   u64 accounting_timestamp ;
   struct pm_subsys_data *subsys_data ;
   void (*set_latency_tolerance)(struct device *, s32 ) ;
   struct dev_pm_qos *qos ;
};
#line 650  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_domain {
   struct dev_pm_ops ops ;
   int (*start)(struct device *) ;
   void (*detach)(struct device *, bool ) ;
   int (*activate)(struct device *) ;
   void (*sync)(struct device *) ;
   void (*dismiss)(struct device *) ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rculist.h"
enum pid_type {
    PIDTYPE_PID = 0,
    PIDTYPE_TGID = 1,
    PIDTYPE_PGID = 2,
    PIDTYPE_SID = 3,
    PIDTYPE_MAX = 4
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct pid_namespace;
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct upid {
   int nr ;
   struct pid_namespace *ns ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct pid {
   refcount_t count ;
   unsigned int level ;
   struct hlist_head tasks[4U] ;
   wait_queue_head_t wait_pidfd ;
   struct callback_head rcu ;
   struct upid numbers[1U] ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhash_head {
   struct rhash_head *next ;
};
#line 33 
struct rhashtable;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable_compare_arg {
   struct rhashtable *ht ;
   void *key ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable_params {
   u16 nelem_hint ;
   u16 key_len ;
   u16 key_offset ;
   u16 head_offset ;
   unsigned int max_size ;
   u16 min_size ;
   bool automatic_shrinking ;
   u32 (*hashfn)(void *, u32 , u32 ) ;
   u32 (*obj_hashfn)(void *, u32 , u32 ) ;
   int (*obj_cmpfn)(struct rhashtable_compare_arg *, void *) ;
};
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable {
   struct bucket_table *tbl ;
   unsigned int key_len ;
   unsigned int max_elems ;
   struct rhashtable_params p ;
   bool rhlist ;
   struct work_struct run_work ;
   struct mutex mutex ;
   spinlock_t lock ;
   atomic_t nelems ;
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/sem.h"
struct sem_undo_list;
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sem.h"
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shm.h"
struct sysv_shm {
   struct list_head shm_clist ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/plist.h"
struct plist_node {
   int prio ;
   struct list_head prio_list ;
   struct list_head node_list ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/seccomp.h"
struct seccomp_filter;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seccomp.h"
struct seccomp {
   int mode ;
   struct seccomp_filter *filter ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/resource.h"
struct rlimit {
   __kernel_ulong_t rlim_cur ;
   __kernel_ulong_t rlim_max ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/latencytop.h"
struct latency_record {
   unsigned long backtrace[12U] ;
   unsigned int count ;
   unsigned long time ;
   unsigned long max ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/types.h"
struct task_cputime {
   u64 stime ;
   u64 utime ;
   unsigned long long sum_exec_runtime ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
struct __anonstruct_sigset_t_307 {
   unsigned long sig[1U] ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
typedef struct __anonstruct_sigset_t_307 sigset_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
typedef void __signalfn_t(int );
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef __signalfn_t *__sighandler_t;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef void __restorefn_t(void);
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef __restorefn_t *__sigrestore_t;
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union sigval {
   int sival_int ;
   void *sival_ptr ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
typedef union sigval sigval_t;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__kill_308 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__timer_309 {
   __kernel_timer_t _tid ;
   int _overrun ;
   sigval_t _sigval ;
   int _sys_private ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__rt_310 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   sigval_t _sigval ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigchld_311 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   int _status ;
   __kernel_clock_t _utime ;
   __kernel_clock_t _stime ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__addr_bnd_314 {
   char _dummy_bnd[8U] ;
   void *_lower ;
   void *_upper ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__addr_pkey_315 {
   char _dummy_pkey[8U] ;
   __u32 _pkey ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union __anonunion_313 {
   short _addr_lsb ;
   struct __anonstruct__addr_bnd_314 _addr_bnd ;
   struct __anonstruct__addr_pkey_315 _addr_pkey ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigfault_312 {
   void *_addr ;
   union __anonunion_313 __anonCompField___anonstruct__sigfault_312_53 ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigpoll_316 {
   long _band ;
   int _fd ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigsys_317 {
   void *_call_addr ;
   int _syscall ;
   unsigned int _arch ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union __sifields {
   struct __anonstruct__kill_308 _kill ;
   struct __anonstruct__timer_309 _timer ;
   struct __anonstruct__rt_310 _rt ;
   struct __anonstruct__sigchld_311 _sigchld ;
   struct __anonstruct__sigfault_312 _sigfault ;
   struct __anonstruct__sigpoll_316 _sigpoll ;
   struct __anonstruct__sigsys_317 _sigsys ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct __anonstruct_322 {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __sifields _sifields ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct kernel_siginfo {
   struct __anonstruct_322 __anonCompField_kernel_siginfo_56 ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
typedef struct kernel_siginfo kernel_siginfo_t;
#line 20 
struct user_struct;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct k_sigaction {
   struct sigaction sa ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/task_io_accounting.h"
struct task_io_accounting {
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/posix-timers.h"
struct posix_cputimer_base {
   u64 nextevt ;
   struct timerqueue_head tqhead ;
};
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/posix-timers.h"
struct posix_cputimers {
   struct posix_cputimer_base bases[3U] ;
   unsigned int timers_active ;
   unsigned int expiry_active ;
};
#line 193 
struct signal_struct;
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rseq.h"
union __anonunion_rseq_cs_327 {
   __u64 ptr64 ;
   __u64 ptr ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rseq.h"
struct rseq {
   __u32 cpu_id_start ;
   __u32 cpu_id ;
   union __anonunion_rseq_cs_327 rseq_cs ;
   __u32 flags ;
} __attribute__((__aligned__(32)));
#line 146 
struct audit_context;
#line 150 
struct capture_control;
#line 151 
struct cfs_rq;
#line 152 
struct fs_struct;
#line 153 
struct futex_pi_state;
#line 154 
struct io_context;
#line 155 
struct nameidata;
#line 156 
struct perf_event_context;
#line 157 
struct pipe_inode_info;
#line 159 
struct reclaim_state;
#line 160 
struct robust_list_head;
#line 165 
struct sighand_struct;
#line 166 
struct task_delay_info;
#line 167 
struct task_group;
#line 242  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct prev_cputime {
   u64 utime ;
   u64 stime ;
   raw_spinlock_t lock ;
};
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_info {
   unsigned long pcount ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
};
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct load_weight {
   unsigned long weight ;
   u32 inv_weight ;
};
#line 352  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct util_est {
   unsigned int enqueued ;
   unsigned int ewma ;
} __attribute__((__aligned__(8)));
#line 401  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_avg {
   u64 last_update_time ;
   u64 load_sum ;
   u64 runnable_load_sum ;
   u32 util_sum ;
   u32 period_contrib ;
   unsigned long load_avg ;
   unsigned long runnable_load_avg ;
   unsigned long util_avg ;
   struct util_est util_est ;
} __attribute__((__aligned__(64)));
#line 413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_statistics {
   u64 wait_start ;
   u64 wait_max ;
   u64 wait_count ;
   u64 wait_sum ;
   u64 iowait_count ;
   u64 iowait_sum ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
};
#line 449  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_entity {
   struct load_weight load ;
   unsigned long runnable_weight ;
   struct rb_node run_node ;
   struct list_head group_node ;
   unsigned int on_rq ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 nr_migrations ;
   struct sched_statistics statistics ;
   int depth ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
   struct sched_avg avg ;
};
#line 486 
struct rt_rq;
#line 486  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_rt_entity {
   struct list_head run_list ;
   unsigned long timeout ;
   unsigned long watchdog_stamp ;
   unsigned int time_slice ;
   unsigned short on_rq ;
   unsigned short on_list ;
   struct sched_rt_entity *back ;
   struct sched_rt_entity *parent ;
   struct rt_rq *rt_rq ;
   struct rt_rq *my_q ;
} __attribute__((__designated_init__));
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_dl_entity {
   struct rb_node rb_node ;
   u64 dl_runtime ;
   u64 dl_deadline ;
   u64 dl_period ;
   u64 dl_bw ;
   u64 dl_density ;
   s64 runtime ;
   u64 deadline ;
   unsigned int flags ;
   unsigned int dl_throttled : 1 ;
   unsigned int dl_boosted : 1 ;
   unsigned int dl_yielded : 1 ;
   unsigned int dl_non_contending : 1 ;
   unsigned int dl_overrun : 1 ;
   struct hrtimer dl_timer ;
   struct hrtimer inactive_timer ;
};
#line 600  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct uclamp_se {
   unsigned int value : 11 ;
   unsigned int bucket_id : 3 ;
   unsigned int active : 1 ;
   unsigned int user_defined : 1 ;
};
#line 625  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct wake_q_node {
   struct wake_q_node *next ;
};
#line 629 
struct sched_class;
#line 629 
struct key;
#line 629 
struct files_struct;
#line 629 
struct rt_mutex_waiter;
#line 629 
struct css_set;
#line 629 
struct compat_robust_list_head;
#line 629 
struct numa_group;
#line 629  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
union __anonunion_329 {
   refcount_t rcu_users ;
   struct callback_head rcu ;
};
#line 629 
struct ftrace_ret_stack;
#line 629 
struct kcov;
#line 629  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct task_struct {
   struct thread_info thread_info ;
   long state ;
   void *stack ;
   refcount_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   struct llist_node wake_entry ;
   int on_cpu ;
   unsigned int cpu ;
   unsigned int wakee_flips ;
   unsigned long wakee_flip_decay_ts ;
   struct task_struct *last_wakee ;
   int recent_used_cpu ;
   int wake_cpu ;
   int on_rq ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   unsigned int rt_priority ;
   struct sched_class *sched_class ;
   struct sched_entity se ;
   struct sched_rt_entity rt ;
   struct task_group *sched_task_group ;
   struct sched_dl_entity dl ;
   struct uclamp_se uclamp_req[2U] ;
   struct uclamp_se uclamp[2U] ;
   struct hlist_head preempt_notifiers ;
   unsigned int btrace_seq ;
   unsigned int policy ;
   int nr_cpus_allowed ;
   cpumask_t *cpus_ptr ;
   cpumask_t cpus_mask ;
   unsigned long rcu_tasks_nvcsw ;
   u8 rcu_tasks_holdout ;
   u8 rcu_tasks_idx ;
   int rcu_tasks_idle_cpu ;
   struct list_head rcu_tasks_holdout_list ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct plist_node pushable_tasks ;
   struct rb_node pushable_dl_tasks ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   struct vmacache vmacache ;
   struct task_rss_stat rss_stat ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned long jobctl ;
   unsigned int personality ;
   unsigned int sched_reset_on_fork : 1 ;
   unsigned int sched_contributes_to_load : 1 ;
   unsigned int sched_migrated : 1 ;
   unsigned int sched_remote_wakeup : 1 ;
   unsigned int sched_psi_wake_requeue : 1 ;
   unsigned int  ;
   unsigned int in_execve : 1 ;
   unsigned int in_iowait : 1 ;
   unsigned int restore_sigmask : 1 ;
   unsigned int in_user_fault : 1 ;
   unsigned int brk_randomized : 1 ;
   unsigned int no_cgroup_migration : 1 ;
   unsigned int frozen : 1 ;
   unsigned int use_memdelay : 1 ;
   unsigned long atomic_flags ;
   struct restart_block restart_block ;
   pid_t pid ;
   pid_t tgid ;
   unsigned long stack_canary ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct list_head ptraced ;
   struct list_head ptrace_entry ;
   struct pid *thread_pid ;
   struct hlist_node pid_links[4U] ;
   struct list_head thread_group ;
   struct list_head thread_node ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   u64 utime ;
   u64 stime ;
   u64 gtime ;
   struct prev_cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   u64 start_time ;
   u64 start_boottime ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   struct posix_cputimers posix_cputimers ;
   struct cred *ptracer_cred ;
   struct cred *real_cred ;
   struct cred *cred ;
   struct key *cached_requested_key ;
   char comm[16U] ;
   struct nameidata *nameidata ;
   struct sysv_sem sysvsem ;
   struct sysv_shm sysvshm ;
   unsigned long last_switch_count ;
   unsigned long last_switch_time ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t sas_ss_size ;
   unsigned int sas_ss_flags ;
   struct callback_head *task_works ;
   struct audit_context *audit_context ;
   kuid_t loginuid ;
   unsigned int sessionid ;
   struct seccomp seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   raw_spinlock_t pi_lock ;
   struct wake_q_node wake_q ;
   struct rb_root_cached pi_waiters ;
   struct task_struct *pi_top_task ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct mutex_waiter *blocked_on ;
   int non_block_count ;
   unsigned int irq_events ;
   unsigned long hardirq_enable_ip ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned int hardirq_disable_event ;
   int hardirqs_enabled ;
   int hardirq_context ;
   unsigned long softirq_disable_ip ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_disable_event ;
   unsigned int softirq_enable_event ;
   int softirqs_enabled ;
   int softirq_context ;
   u64 curr_chain_key ;
   int lockdep_depth ;
   unsigned int lockdep_recursion ;
   struct held_lock held_locks[48U] ;
   unsigned int in_ubsan ;
   void *journal_info ;
   struct bio_list *bio_list ;
   struct blk_plug *plug ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   struct capture_control *capture_control ;
   unsigned long ptrace_message ;
   kernel_siginfo_t *last_siginfo ;
   struct task_io_accounting ioac ;
   unsigned int psi_flags ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   u64 acct_timexpd ;
   nodemask_t mems_allowed ;
   seqcount_t mems_allowed_seq ;
   int cpuset_mem_spread_rotor ;
   int cpuset_slab_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   u32 closid ;
   u32 rmid ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   struct mutex futex_exit_mutex ;
   unsigned int futex_state ;
   struct perf_event_context *perf_event_ctxp[2U] ;
   struct mutex perf_event_mutex ;
   struct list_head perf_event_list ;
   struct mempolicy *mempolicy ;
   short il_prev ;
   short pref_node_fork ;
   int numa_scan_seq ;
   unsigned int numa_scan_period ;
   unsigned int numa_scan_period_max ;
   int numa_preferred_nid ;
   unsigned long numa_migrate_retry ;
   u64 node_stamp ;
   u64 last_task_numa_placement ;
   u64 last_sum_exec_runtime ;
   struct callback_head numa_work ;
   struct numa_group *numa_group ;
   unsigned long *numa_faults ;
   unsigned long total_numa_faults ;
   unsigned long numa_faults_locality[3U] ;
   unsigned long numa_pages_migrated ;
   struct rseq *rseq ;
   u32 rseq_sig ;
   unsigned long rseq_event_mask ;
   struct tlbflush_unmap_batch tlb_ubc ;
   union __anonunion_329 __anonCompField_task_struct_58 ;
   struct pipe_inode_info *splice_pipe ;
   struct page_frag task_frag ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   unsigned int fail_nth ;
   int nr_dirtied ;
   int nr_dirtied_pause ;
   unsigned long dirty_paused_when ;
   int latency_record_count ;
   struct latency_record latency_record[32U] ;
   u64 timer_slack_ns ;
   u64 default_timer_slack_ns ;
   unsigned int kasan_depth ;
   int curr_ret_stack ;
   int curr_ret_depth ;
   struct ftrace_ret_stack *ret_stack ;
   unsigned long long ftrace_timestamp ;
   atomic_t trace_overrun ;
   atomic_t tracing_graph_pause ;
   unsigned long trace ;
   unsigned long trace_recursion ;
   unsigned int kcov_mode ;
   unsigned int kcov_size ;
   void *kcov_area ;
   struct kcov *kcov ;
   u64 kcov_handle ;
   int kcov_sequence ;
   struct mem_cgroup *memcg_in_oom ;
   gfp_t memcg_oom_gfp_mask ;
   int memcg_oom_order ;
   unsigned int memcg_nr_pages_over_high ;
   struct mem_cgroup *active_memcg ;
   struct request_queue *throttle_queue ;
   struct uprobe_task *utask ;
   unsigned int sequential_io ;
   unsigned int sequential_io_avg ;
   unsigned long task_state_change ;
   int pagefault_disabled ;
   struct task_struct *oom_reaper_list ;
   struct vm_struct *stack_vm_area ;
   refcount_t stack_refcount ;
   int patch_state ;
   void *security ;
   struct thread_struct thread ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ratelimit.h"
struct ratelimit_state {
   raw_spinlock_t lock ;
   int interval ;
   int burst ;
   int printed ;
   int missed ;
   unsigned long begin ;
   unsigned long flags ;
};
#line 5  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/device.h"
struct dev_archdata {
   void *iommu ;
};
#line 12 
struct dma_map_ops;
#line 23 
struct device_driver;
#line 24 
struct driver_private;
#line 25 
struct class;
#line 26 
struct subsys_private;
#line 27 
struct bus_type;
#line 28 
struct iommu_ops;
#line 29 
struct iommu_group;
#line 30 
struct iommu_fwspec;
#line 31 
struct dev_pin_info;
#line 32 
struct iommu_param;
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct bus_type {
   char *name ;
   char *dev_name ;
   struct device *dev_root ;
   struct attribute_group **bus_groups ;
   struct attribute_group **dev_groups ;
   struct attribute_group **drv_groups ;
   int (*match)(struct device *, struct device_driver *) ;
   int (*uevent)(struct device *, struct kobj_uevent_env *) ;
   int (*probe)(struct device *) ;
   void (*sync_state)(struct device *) ;
   int (*remove)(struct device *) ;
   void (*shutdown)(struct device *) ;
   int (*online)(struct device *) ;
   int (*offline)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   int (*num_vf)(struct device *) ;
   int (*dma_configure)(struct device *) ;
   struct dev_pm_ops *pm ;
   struct iommu_ops *iommu_ops ;
   struct subsys_private *p ;
   struct lock_class_key lock_key ;
   bool need_parent_lock ;
};
#line 164 
struct device_type;
#line 309 
enum probe_type {
    PROBE_DEFAULT_STRATEGY = 0,
    PROBE_PREFER_ASYNCHRONOUS = 1,
    PROBE_FORCE_SYNCHRONOUS = 2
};
#line 383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_driver {
   char *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char *mod_name ;
   bool suppress_bind_attrs ;
   enum probe_type probe_type ;
   struct of_device_id *of_match_table ;
   struct acpi_device_id *acpi_match_table ;
   int (*probe)(struct device *) ;
   void (*sync_state)(struct device *) ;
   int (*remove)(struct device *) ;
   void (*shutdown)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   struct attribute_group **groups ;
   struct attribute_group **dev_groups ;
   struct dev_pm_ops *pm ;
   void (*coredump)(struct device *) ;
   struct driver_private *p ;
};
#line 589  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct class {
   char *name ;
   struct module *owner ;
   struct attribute_group **class_groups ;
   struct attribute_group **dev_groups ;
   struct kobject *dev_kobj ;
   int (*dev_uevent)(struct device *, struct kobj_uevent_env *) ;
   char *(*devnode)(struct device *, umode_t *) ;
   void (*class_release)(struct class *) ;
   void (*dev_release)(struct device *) ;
   int (*shutdown_pre)(struct device *) ;
   struct kobj_ns_type_operations *ns_type ;
   void *(*namespace)(struct device *) ;
   void (*get_ownership)(struct device *, kuid_t *, kgid_t *) ;
   struct dev_pm_ops *pm ;
   struct subsys_private *p ;
};
#line 809  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_type {
   char *name ;
   struct attribute_group **groups ;
   int (*uevent)(struct device *, struct kobj_uevent_env *) ;
   char *(*devnode)(struct device *, umode_t *, kuid_t *, kgid_t *) ;
   void (*release)(struct device *) ;
   struct dev_pm_ops *pm ;
};
#line 1008  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};
#line 1139 
enum dl_dev_state {
    DL_DEV_NO_DRIVER = 0,
    DL_DEV_PROBING = 1,
    DL_DEV_DRIVER_BOUND = 2,
    DL_DEV_UNBINDING = 3
};
#line 1164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct dev_links_info {
   struct list_head suppliers ;
   struct list_head consumers ;
   struct list_head needs_suppliers ;
   struct list_head defer_sync ;
   bool need_for_probe ;
   enum dl_dev_state status ;
};
#line 1259 
struct dma_coherent_mem;
#line 1259 
struct cma;
#line 1259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device {
   struct kobject kobj ;
   struct device *parent ;
   struct device_private *p ;
   char *init_name ;
   struct device_type *type ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *platform_data ;
   void *driver_data ;
   struct mutex lockdep_mutex ;
   struct mutex mutex ;
   struct dev_links_info links ;
   struct dev_pm_info power ;
   struct dev_pm_domain *pm_domain ;
   struct irq_domain *msi_domain ;
   struct dev_pin_info *pins ;
   struct list_head msi_list ;
   struct dma_map_ops *dma_ops ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   u64 bus_dma_limit ;
   unsigned long dma_pfn_offset ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct cma *cma_area ;
   struct dev_archdata archdata ;
   struct device_node *of_node ;
   struct fwnode_handle *fwnode ;
   int numa_node ;
   dev_t devt ;
   u32 id ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct class *class ;
   struct attribute_group **groups ;
   void (*release)(struct device *) ;
   struct iommu_group *iommu_group ;
   struct iommu_fwspec *iommu_fwspec ;
   struct iommu_param *iommu_param ;
   bool offline_disabled : 1 ;
   bool offline : 1 ;
   bool of_node_reused : 1 ;
   bool state_synced : 1 ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_wakeup.h"
struct wakeup_source {
   char *name ;
   int id ;
   struct list_head entry ;
   spinlock_t lock ;
   struct wake_irq *wakeirq ;
   struct timer_list timer ;
   unsigned long timer_expires ;
   ktime_t total_time ;
   ktime_t max_time ;
   ktime_t last_time ;
   ktime_t start_prevent_time ;
   ktime_t prevent_sleep_time ;
   unsigned long event_count ;
   unsigned long active_count ;
   unsigned long relax_count ;
   unsigned long expire_count ;
   unsigned long wakeup_count ;
   struct device *dev ;
   bool active : 1 ;
   bool autosleep_enabled : 1 ;
};
#line 1913  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
enum irqreturn {
    IRQ_NONE = 0,
    IRQ_HANDLED = 1,
    IRQ_WAKE_THREAD = 2
};
#line 1919  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
typedef enum irqreturn irqreturn_t;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/extable.h"
struct exception_table_entry {
   int insn ;
   int fixup ;
   int handler ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/sections.h"
typedef irqreturn_t (*irq_handler_t)(int , void *);
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
struct proc_dir_entry;
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/io.h"
struct percpu_ref;
#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/io.h"
typedef void percpu_ref_func_t(struct percpu_ref *);
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-refcount.h"
struct percpu_ref {
   atomic_long_t count ;
   unsigned long percpu_count_ptr ;
   percpu_ref_func_t *release ;
   percpu_ref_func_t *confirm_switch ;
   bool force_atomic : 1 ;
   bool allow_reinit : 1 ;
   struct callback_head rcu ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct hotplug_slot;
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_slot {
   struct pci_bus *bus ;
   struct list_head list ;
   struct hotplug_slot *hotplug ;
   unsigned char number ;
   struct kobject kobj ;
};
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef int pci_power_t;
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned int pci_channel_state_t;
#line 162 
enum pci_channel_state {
    pci_channel_io_normal = 1,
    pci_channel_io_frozen = 2,
    pci_channel_io_perm_failure = 3
};
#line 181  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned short pci_dev_flags_t;
#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned short pci_bus_flags_t;
#line 282 
struct pcie_link_state;
#line 283 
struct pci_vpd;
#line 284 
struct pci_sriov;
#line 285 
struct pci_p2pdma;
#line 290 
struct aer_stats;
#line 290 
struct pci_driver;
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
union __anonunion_406 {
   struct pci_sriov *sriov ;
   struct pci_dev *physfn ;
};
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_dev {
   struct list_head bus_list ;
   struct pci_bus *bus ;
   struct pci_bus *subordinate ;
   void *sysdata ;
   struct proc_dir_entry *procent ;
   struct pci_slot *slot ;
   unsigned int devfn ;
   unsigned short vendor ;
   unsigned short device ;
   unsigned short subsystem_vendor ;
   unsigned short subsystem_device ;
   unsigned int class ;
   u8 revision ;
   u8 hdr_type ;
   u16 aer_cap ;
   struct aer_stats *aer_stats ;
   u8 pcie_cap ;
   u8 msi_cap ;
   u8 msix_cap ;
   u8 pcie_mpss : 3 ;
   u8 rom_base_reg ;
   u8 pin ;
   u16 pcie_flags_reg ;
   unsigned long *dma_alias_mask ;
   struct pci_driver *driver ;
   u64 dma_mask ;
   struct device_dma_parameters dma_parms ;
   pci_power_t current_state ;
   unsigned int imm_ready : 1 ;
   u8 pm_cap ;
   unsigned int pme_support : 5 ;
   unsigned int pme_poll : 1 ;
   unsigned int d1_support : 1 ;
   unsigned int d2_support : 1 ;
   unsigned int no_d1d2 : 1 ;
   unsigned int no_d3cold : 1 ;
   unsigned int bridge_d3 : 1 ;
   unsigned int d3cold_allowed : 1 ;
   unsigned int mmio_always_on : 1 ;
   unsigned int wakeup_prepared : 1 ;
   unsigned int runtime_d3cold : 1 ;
   unsigned int skip_bus_pm : 1 ;
   unsigned int ignore_hotplug : 1 ;
   unsigned int hotplug_user_indicators : 1 ;
   unsigned int clear_retrain_link : 1 ;
   unsigned int d3_delay ;
   unsigned int d3cold_delay ;
   struct pcie_link_state *link_state ;
   unsigned int ltr_path : 1 ;
   unsigned int eetlp_prefix_path : 1 ;
   pci_channel_state_t error_state ;
   struct device dev ;
   int cfg_size ;
   unsigned int irq ;
   struct resource resource[17U] ;
   bool match_driver ;
   unsigned int transparent : 1 ;
   unsigned int io_window : 1 ;
   unsigned int pref_window : 1 ;
   unsigned int pref_64_window : 1 ;
   unsigned int multifunction : 1 ;
   unsigned int is_busmaster : 1 ;
   unsigned int no_msi : 1 ;
   unsigned int no_64bit_msi : 1 ;
   unsigned int block_cfg_access : 1 ;
   unsigned int broken_parity_status : 1 ;
   unsigned int irq_reroute_variant : 2 ;
   unsigned int msi_enabled : 1 ;
   unsigned int msix_enabled : 1 ;
   unsigned int ari_enabled : 1 ;
   unsigned int ats_enabled : 1 ;
   unsigned int pasid_enabled : 1 ;
   unsigned int pri_enabled : 1 ;
   unsigned int is_managed : 1 ;
   unsigned int needs_freset : 1 ;
   unsigned int state_saved : 1 ;
   unsigned int is_physfn : 1 ;
   unsigned int is_virtfn : 1 ;
   unsigned int reset_fn : 1 ;
   unsigned int is_hotplug_bridge : 1 ;
   unsigned int shpc_managed : 1 ;
   unsigned int is_thunderbolt : 1 ;
   unsigned int untrusted : 1 ;
   unsigned int __aer_firmware_first_valid : 1 ;
   unsigned int __aer_firmware_first : 1 ;
   unsigned int broken_intx_masking : 1 ;
   unsigned int io_window_1k : 1 ;
   unsigned int irq_managed : 1 ;
   unsigned int non_compliant_bars : 1 ;
   unsigned int is_probed : 1 ;
   unsigned int link_active_reporting : 1 ;
   unsigned int no_vf_scan : 1 ;
   pci_dev_flags_t dev_flags ;
   atomic_t enable_cnt ;
   u32 saved_config_space[16U] ;
   struct hlist_head saved_cap_space ;
   struct bin_attribute *rom_attr ;
   int rom_attr_enabled ;
   struct bin_attribute *res_attr[17U] ;
   struct bin_attribute *res_attr_wc[17U] ;
   unsigned int broken_cmd_compl : 1 ;
   unsigned int ptm_root : 1 ;
   unsigned int ptm_enabled : 1 ;
   u8 ptm_granularity ;
   struct attribute_group **msi_irq_groups ;
   struct pci_vpd *vpd ;
   union __anonunion_406 __anonCompField_pci_dev_59 ;
   u16 ats_cap ;
   u8 ats_stu ;
   u16 pri_cap ;
   u32 pri_reqs_alloc ;
   unsigned int pasid_required : 1 ;
   u16 pasid_cap ;
   u16 pasid_features ;
   struct pci_p2pdma *p2pdma ;
   phys_addr_t rom ;
   size_t romlen ;
   char *driver_override ;
   unsigned long priv_flags ;
};
#line 493 
struct pci_ops;
#line 493 
struct msi_controller;
#line 571  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_bus {
   struct list_head node ;
   struct pci_bus *parent ;
   struct list_head children ;
   struct list_head devices ;
   struct pci_dev *self ;
   struct list_head slots ;
   struct resource *resource[4U] ;
   struct list_head resources ;
   struct resource busn_res ;
   struct pci_ops *ops ;
   struct msi_controller *msi ;
   void *sysdata ;
   struct proc_dir_entry *procdir ;
   unsigned char number ;
   unsigned char primary ;
   unsigned char max_bus_speed ;
   unsigned char cur_bus_speed ;
   char name[48U] ;
   unsigned short bridge_ctl ;
   pci_bus_flags_t bus_flags ;
   struct device *bridge ;
   struct device dev ;
   struct bin_attribute *legacy_io ;
   struct bin_attribute *legacy_mem ;
   unsigned int is_added : 1 ;
};
#line 697  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_ops {
   int (*add_bus)(struct pci_bus *) ;
   void (*remove_bus)(struct pci_bus *) ;
   void *(*map_bus)(struct pci_bus *, unsigned int , int ) ;
   int (*read)(struct pci_bus *, unsigned int , int , int , u32 *) ;
   int (*write)(struct pci_bus *, unsigned int , int , int , u32 ) ;
};
#line 725  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_dynids {
   spinlock_t lock ;
   struct list_head list ;
};
#line 729  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned int pci_ers_result_t;
#line 761  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_error_handlers {
   pci_ers_result_t (*error_detected)(struct pci_dev *, enum pci_channel_state ) ;
   pci_ers_result_t (*mmio_enabled)(struct pci_dev *) ;
   pci_ers_result_t (*slot_reset)(struct pci_dev *) ;
   void (*reset_prepare)(struct pci_dev *) ;
   void (*reset_done)(struct pci_dev *) ;
   void (*resume)(struct pci_dev *) ;
};
#line 824  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_driver {
   struct list_head node ;
   char *name ;
   struct pci_device_id *id_table ;
   int (*probe)(struct pci_dev *, struct pci_device_id *) ;
   void (*remove)(struct pci_dev *) ;
   int (*suspend)(struct pci_dev *, pm_message_t ) ;
   int (*resume)(struct pci_dev *) ;
   void (*shutdown)(struct pci_dev *) ;
   int (*sriov_configure)(struct pci_dev *, int ) ;
   struct pci_error_handlers *err_handler ;
   struct attribute_group **groups ;
   struct device_driver driver ;
   struct pci_dynids dynids ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shrinker.h"
struct shrink_control {
   gfp_t gfp_mask ;
   int nid ;
   unsigned long nr_to_scan ;
   unsigned long nr_scanned ;
   struct mem_cgroup *memcg ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shrinker.h"
struct shrinker {
   unsigned long (*count_objects)(struct shrinker *, struct shrink_control *) ;
   unsigned long (*scan_objects)(struct shrinker *, struct shrink_control *) ;
   long batch ;
   int seeks ;
   unsigned int flags ;
   struct list_head list ;
   int id ;
   atomic_long_t *nr_deferred ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct vmem_altmap {
   unsigned long base_pfn ;
   unsigned long end_pfn ;
   unsigned long reserve ;
   unsigned long free ;
   unsigned long align ;
   unsigned long alloc ;
};
#line 26 
enum memory_type {
    MEMORY_DEVICE_PRIVATE = 1,
    MEMORY_DEVICE_FS_DAX = 2,
    MEMORY_DEVICE_DEVDAX = 3,
    MEMORY_DEVICE_PCI_P2PDMA = 4
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct dev_pagemap_ops {
   void (*page_free)(struct page *) ;
   void (*kill)(struct dev_pagemap *) ;
   void (*cleanup)(struct dev_pagemap *) ;
   vm_fault_t (*migrate_to_ram)(struct vm_fault *) ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct dev_pagemap {
   struct vmem_altmap altmap ;
   struct resource res ;
   struct percpu_ref *ref ;
   struct percpu_ref internal_ref ;
   struct completion done ;
   enum memory_type type ;
   unsigned int flags ;
   struct dev_pagemap_ops *ops ;
};
#line 176 
struct file_ra_state;
#line 417  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
struct vm_fault {
   struct vm_area_struct *vma ;
   unsigned int flags ;
   gfp_t gfp_mask ;
   unsigned long pgoff ;
   unsigned long address ;
   pmd_t *pmd ;
   pud_t *pud ;
   pte_t orig_pte ;
   struct page *cow_page ;
   struct mem_cgroup *memcg ;
   struct page *page ;
   pte_t *pte ;
   spinlock_t *ptl ;
   pgtable_t prealloc_pte ;
};
#line 448 
enum page_entry_size {
    PE_SIZE_PTE = 0,
    PE_SIZE_PMD = 1,
    PE_SIZE_PUD = 2
};
#line 467  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
struct vm_operations_struct {
   void (*open)(struct vm_area_struct *) ;
   void (*close)(struct vm_area_struct *) ;
   int (*split)(struct vm_area_struct *, unsigned long ) ;
   int (*mremap)(struct vm_area_struct *) ;
   vm_fault_t (*fault)(struct vm_fault *) ;
   vm_fault_t (*huge_fault)(struct vm_fault *, enum page_entry_size ) ;
   void (*map_pages)(struct vm_fault *, unsigned long , unsigned long ) ;
   unsigned long (*pagesize)(struct vm_area_struct *) ;
   vm_fault_t (*page_mkwrite)(struct vm_fault *) ;
   vm_fault_t (*pfn_mkwrite)(struct vm_fault *) ;
   int (*access)(struct vm_area_struct *, unsigned long , void *, int , int ) ;
   char *(*name)(struct vm_area_struct *) ;
   int (*set_policy)(struct vm_area_struct *, struct mempolicy *) ;
   struct mempolicy *(*get_policy)(struct vm_area_struct *, unsigned long ) ;
   struct page *(*find_special_page)(struct vm_area_struct *, unsigned long ) ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_node;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_head {
   struct hlist_bl_node *first ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_node {
   struct hlist_bl_node *next ;
   struct hlist_bl_node **pprev ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
struct __anonstruct_420 {
   spinlock_t lock ;
   int count ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
union __anonunion_419 {
   struct __anonstruct_420 __anonCompField___anonunion_419_60 ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
struct lockref {
   union __anonunion_419 __anonCompField_lockref_61 ;
};
#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/stringhash.h"
struct path;
#line 79 
struct vfsmount;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct __anonstruct_422 {
   u32 hash ;
   u32 len ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_421 {
   struct __anonstruct_422 __anonCompField___anonunion_421_62 ;
   u64 hash_len ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct qstr {
   union __anonunion_421 __anonCompField_qstr_63 ;
   unsigned char *name ;
};
#line 89 
struct dentry_operations;
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_423 {
   struct list_head d_lru ;
   wait_queue_head_t *d_wait ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_d_u_424 {
   struct hlist_node d_alias ;
   struct hlist_bl_node d_in_lookup_hash ;
   struct callback_head d_rcu ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct dentry {
   unsigned int d_flags ;
   seqcount_t d_seq ;
   struct hlist_bl_node d_hash ;
   struct dentry *d_parent ;
   struct qstr d_name ;
   struct inode *d_inode ;
   unsigned char d_iname[32U] ;
   struct lockref d_lockref ;
   struct dentry_operations *d_op ;
   struct super_block *d_sb ;
   unsigned long d_time ;
   void *d_fsdata ;
   union __anonunion_423 __anonCompField_dentry_64 ;
   struct list_head d_child ;
   struct list_head d_subdirs ;
   union __anonunion_d_u_424 d_u ;
} __attribute__((__designated_init__));
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct dentry_operations {
   int (*d_revalidate)(struct dentry *, unsigned int ) ;
   int (*d_weak_revalidate)(struct dentry *, unsigned int ) ;
   int (*d_hash)(struct dentry *, struct qstr *) ;
   int (*d_compare)(struct dentry *, unsigned int , char *, struct qstr *) ;
   int (*d_delete)(struct dentry *) ;
   int (*d_init)(struct dentry *) ;
   void (*d_release)(struct dentry *) ;
   void (*d_prune)(struct dentry *) ;
   void (*d_iput)(struct dentry *, struct inode *) ;
   char *(*d_dname)(struct dentry *, char *, int ) ;
   struct vfsmount *(*d_automount)(struct path *) ;
   int (*d_manage)(struct path *, bool ) ;
   struct dentry *(*d_real)(struct dentry *, struct inode *) ;
} __attribute__((__aligned__(64)));
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/path.h"
struct path {
   struct vfsmount *mnt ;
   struct dentry *dentry ;
} __attribute__((__designated_init__));
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_one {
   struct list_head list ;
   long nr_items ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_memcg {
   struct callback_head rcu ;
   struct list_lru_one *lru[0U] ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_node {
   spinlock_t lock ;
   struct list_lru_one lru ;
   struct list_lru_memcg *memcg_lrus ;
   long nr_items ;
} __attribute__((__aligned__(64)));
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru {
   struct list_lru_node *node ;
   struct list_head list ;
   int shrinker_id ;
   bool memcg_aware ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/capability.h"
struct kernel_cap_struct {
   __u32 cap[2U] ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/capability.h"
typedef struct kernel_cap_struct kernel_cap_t;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fiemap.h"
struct fiemap_extent {
   __u64 fe_logical ;
   __u64 fe_physical ;
   __u64 fe_length ;
   __u64 fe_reserved64[2U] ;
   __u32 fe_flags ;
   __u32 fe_reserved[3U] ;
};
#line 39 
enum migrate_mode {
    MIGRATE_ASYNC = 0,
    MIGRATE_SYNC_LIGHT = 1,
    MIGRATE_SYNC = 2,
    MIGRATE_SYNC_NO_COPY = 3
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcuwait.h"
struct rcuwait {
   struct task_struct *task ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcu_sync.h"
struct rcu_sync {
   int gp_state ;
   int gp_count ;
   wait_queue_head_t gp_wait ;
   struct callback_head cb_head ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-rwsem.h"
struct percpu_rw_semaphore {
   struct rcu_sync rss ;
   unsigned int *read_count ;
   struct rw_semaphore rw_sem ;
   struct rcuwait writer ;
   int readers_block ;
};
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/delayed_call.h"
struct delayed_call {
   void (*fn)(void *) ;
   void *arg ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/delayed_call.h"
typedef u32 errseq_t;
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
union __anonunion_431 {
   struct list_head q_node ;
   struct kmem_cache *__rcu_icq_cache ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
union __anonunion_432 {
   struct hlist_node ioc_node ;
   struct callback_head __rcu_head ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
struct io_cq {
   struct request_queue *q ;
   struct io_context *ioc ;
   union __anonunion_431 __anonCompField_io_cq_65 ;
   union __anonunion_432 __anonCompField_io_cq_66 ;
   unsigned int flags ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
struct io_context {
   atomic_long_t refcount ;
   atomic_t active_ref ;
   atomic_t nr_tasks ;
   spinlock_t lock ;
   unsigned short ioprio ;
   int nr_batch_requests ;
   unsigned long last_waited ;
   struct xarray icq_tree ;
   struct io_cq *icq_hint ;
   struct hlist_head icq_list ;
   struct work_struct release_work ;
};
#line 287  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fs.h"
struct export_operations;
#line 289 
struct iovec;
#line 290 
struct kiocb;
#line 291 
struct kstatfs;
#line 292 
struct swap_info_struct;
#line 293 
struct iov_iter;
#line 294 
struct fscrypt_info;
#line 295 
struct fscrypt_operations;
#line 296 
struct fsverity_info;
#line 297 
struct fsverity_operations;
#line 298 
struct fs_parameter_description;
#line 224  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct iattr {
   unsigned int ia_valid ;
   umode_t ia_mode ;
   kuid_t ia_uid ;
   kgid_t ia_gid ;
   loff_t ia_size ;
   struct timespec64 ia_atime ;
   struct timespec64 ia_mtime ;
   struct timespec64 ia_ctime ;
   struct file *ia_file ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu_counter.h"
struct percpu_counter {
   raw_spinlock_t lock ;
   s64 count ;
   struct list_head list ;
   s32 *counters ;
};
#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dqblk_xfs.h"
struct dquot;
#line 215 
struct kqid;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
typedef __kernel_uid32_t projid_t;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
struct __anonstruct_kprojid_t_433 {
   projid_t val ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
typedef struct __anonstruct_kprojid_t_433 kprojid_t;
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/quota.h"
enum quota_type {
    USRQUOTA = 0,
    GRPQUOTA = 1,
    PRJQUOTA = 2
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
typedef long long qsize_t;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
union __anonunion_434 {
   kuid_t uid ;
   kgid_t gid ;
   kprojid_t projid ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct kqid {
   union __anonunion_434 __anonCompField_kqid_67 ;
   enum quota_type type ;
};
#line 205  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct mem_dqblk {
   qsize_t dqb_bhardlimit ;
   qsize_t dqb_bsoftlimit ;
   qsize_t dqb_curspace ;
   qsize_t dqb_rsvspace ;
   qsize_t dqb_ihardlimit ;
   qsize_t dqb_isoftlimit ;
   qsize_t dqb_curinodes ;
   time64_t dqb_btime ;
   time64_t dqb_itime ;
};
#line 216 
struct quota_format_type;
#line 222  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct mem_dqinfo {
   struct quota_format_type *dqi_format ;
   int dqi_fmt_id ;
   struct list_head dqi_dirty_list ;
   unsigned long dqi_flags ;
   unsigned int dqi_bgrace ;
   unsigned int dqi_igrace ;
   qsize_t dqi_max_spc_limit ;
   qsize_t dqi_max_ino_limit ;
   void *dqi_priv ;
};
#line 294  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct dquot {
   struct hlist_node dq_hash ;
   struct list_head dq_inuse ;
   struct list_head dq_free ;
   struct list_head dq_dirty ;
   struct mutex dq_lock ;
   spinlock_t dq_dqb_lock ;
   atomic_t dq_count ;
   struct super_block *dq_sb ;
   struct kqid dq_id ;
   loff_t dq_off ;
   unsigned long dq_flags ;
   struct mem_dqblk dq_dqb ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_format_ops {
   int (*check_quota_file)(struct super_block *, int ) ;
   int (*read_file_info)(struct super_block *, int ) ;
   int (*write_file_info)(struct super_block *, int ) ;
   int (*free_file_info)(struct super_block *, int ) ;
   int (*read_dqblk)(struct dquot *) ;
   int (*commit_dqblk)(struct dquot *) ;
   int (*release_dqblk)(struct dquot *) ;
   int (*get_next_id)(struct super_block *, struct kqid *) ;
};
#line 322  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct dquot_operations {
   int (*write_dquot)(struct dquot *) ;
   struct dquot *(*alloc_dquot)(struct super_block *, int ) ;
   void (*destroy_dquot)(struct dquot *) ;
   int (*acquire_dquot)(struct dquot *) ;
   int (*release_dquot)(struct dquot *) ;
   int (*mark_dirty)(struct dquot *) ;
   int (*write_info)(struct super_block *, int ) ;
   qsize_t *(*get_reserved_space)(struct inode *) ;
   int (*get_projid)(struct inode *, kprojid_t *) ;
   int (*get_inode_usage)(struct inode *, qsize_t *) ;
   int (*get_next_id)(struct super_block *, struct kqid *) ;
};
#line 343  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_dqblk {
   int d_fieldmask ;
   u64 d_spc_hardlimit ;
   u64 d_spc_softlimit ;
   u64 d_ino_hardlimit ;
   u64 d_ino_softlimit ;
   u64 d_space ;
   u64 d_ino_count ;
   s64 d_ino_timer ;
   s64 d_spc_timer ;
   int d_ino_warns ;
   int d_spc_warns ;
   u64 d_rt_spc_hardlimit ;
   u64 d_rt_spc_softlimit ;
   u64 d_rt_space ;
   s64 d_rt_spc_timer ;
   int d_rt_spc_warns ;
};
#line 395  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_type_state {
   unsigned int flags ;
   unsigned int spc_timelimit ;
   unsigned int ino_timelimit ;
   unsigned int rt_spc_timelimit ;
   unsigned int spc_warnlimit ;
   unsigned int ino_warnlimit ;
   unsigned int rt_spc_warnlimit ;
   unsigned long long ino ;
   blkcnt_t blocks ;
   blkcnt_t nextents ;
};
#line 409  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_state {
   unsigned int s_incoredqs ;
   struct qc_type_state s_state[3U] ;
};
#line 415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_info {
   int i_fieldmask ;
   unsigned int i_flags ;
   unsigned int i_spc_timelimit ;
   unsigned int i_ino_timelimit ;
   unsigned int i_rt_spc_timelimit ;
   unsigned int i_spc_warnlimit ;
   unsigned int i_ino_warnlimit ;
   unsigned int i_rt_spc_warnlimit ;
};
#line 428  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quotactl_ops {
   int (*quota_on)(struct super_block *, int , int , struct path *) ;
   int (*quota_off)(struct super_block *, int ) ;
   int (*quota_enable)(struct super_block *, unsigned int ) ;
   int (*quota_disable)(struct super_block *, unsigned int ) ;
   int (*quota_sync)(struct super_block *, int ) ;
   int (*set_info)(struct super_block *, int , struct qc_info *) ;
   int (*get_dqblk)(struct super_block *, struct kqid , struct qc_dqblk *) ;
   int (*get_nextdqblk)(struct super_block *, struct kqid *, struct qc_dqblk *) ;
   int (*set_dqblk)(struct super_block *, struct kqid , struct qc_dqblk *) ;
   int (*get_state)(struct super_block *, struct qc_state *) ;
   int (*rm_xquota)(struct super_block *, unsigned int ) ;
};
#line 443  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_format_type {
   int qf_fmt_id ;
   struct quota_format_ops *qf_ops ;
   struct module *qf_owner ;
   struct quota_format_type *qf_next ;
};
#line 518  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_info {
   unsigned int flags ;
   struct rw_semaphore dqio_sem ;
   struct inode *files[3U] ;
   struct mem_dqinfo info[3U] ;
   struct quota_format_ops *ops[3U] ;
};
#line 538 
enum rw_hint {
    WRITE_LIFE_NOT_SET = 0,
    WRITE_LIFE_NONE = 1,
    WRITE_LIFE_SHORT = 2,
    WRITE_LIFE_MEDIUM = 3,
    WRITE_LIFE_LONG = 4,
    WRITE_LIFE_EXTREME = 5
};
#line 318  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct kiocb {
   struct file *ki_filp ;
   loff_t ki_pos ;
   void (*ki_complete)(struct kiocb *, long , long ) ;
   void *private ;
   int ki_flags ;
   u16 ki_hint ;
   u16 ki_ioprio ;
   unsigned int ki_cookie ;
};
#line 362  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct address_space_operations {
   int (*writepage)(struct page *, struct writeback_control *) ;
   int (*readpage)(struct file *, struct page *) ;
   int (*writepages)(struct address_space *, struct writeback_control *) ;
   int (*set_page_dirty)(struct page *) ;
   int (*readpages)(struct file *, struct address_space *, struct list_head *, unsigned int ) ;
   int (*write_begin)(struct file *, struct address_space *, loff_t , unsigned int , unsigned int , struct page **, void **) ;
   int (*write_end)(struct file *, struct address_space *, loff_t , unsigned int , unsigned int , struct page *, void *) ;
   sector_t (*bmap)(struct address_space *, sector_t ) ;
   void (*invalidatepage)(struct page *, unsigned int , unsigned int ) ;
   int (*releasepage)(struct page *, gfp_t ) ;
   void (*freepage)(struct page *) ;
   ssize_t (*direct_IO)(struct kiocb *, struct iov_iter *) ;
   int (*migratepage)(struct address_space *, struct page *, struct page *, enum migrate_mode ) ;
   bool (*isolate_page)(struct page *, isolate_mode_t ) ;
   void (*putback_page)(struct page *) ;
   int (*launder_page)(struct page *) ;
   int (*is_partially_uptodate)(struct page *, unsigned long , unsigned long ) ;
   void (*is_dirty_writeback)(struct page *, bool *, bool *) ;
   int (*error_remove_page)(struct address_space *, struct page *) ;
   int (*swap_activate)(struct swap_info_struct *, struct file *, sector_t *) ;
   void (*swap_deactivate)(struct file *) ;
};
#line 445  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct address_space {
   struct inode *host ;
   struct xarray i_pages ;
   gfp_t gfp_mask ;
   atomic_t i_mmap_writable ;
   atomic_t nr_thps ;
   struct rb_root_cached i_mmap ;
   struct rw_semaphore i_mmap_rwsem ;
   unsigned long nrpages ;
   unsigned long nrexceptional ;
   unsigned long writeback_index ;
   struct address_space_operations *a_ops ;
   unsigned long flags ;
   errseq_t wb_err ;
   spinlock_t private_lock ;
   struct list_head private_list ;
   void *private_data ;
} __attribute__((__designated_init__, __aligned__(8)));
#line 473  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct block_device {
   dev_t bd_dev ;
   int bd_openers ;
   struct inode *bd_inode ;
   struct super_block *bd_super ;
   struct mutex bd_mutex ;
   void *bd_claiming ;
   void *bd_holder ;
   int bd_holders ;
   bool bd_write_holder ;
   struct list_head bd_holder_disks ;
   struct block_device *bd_contains ;
   unsigned int bd_block_size ;
   u8 bd_partno ;
   struct hd_struct *bd_part ;
   unsigned int bd_part_count ;
   int bd_invalidated ;
   struct gendisk *bd_disk ;
   struct request_queue *bd_queue ;
   struct backing_dev_info *bd_bdi ;
   struct list_head bd_list ;
   unsigned long bd_private ;
   int bd_fsfreeze_count ;
   struct mutex bd_fsfreeze_mutex ;
} __attribute__((__designated_init__));
#line 587 
struct posix_acl;
#line 614 
struct fsnotify_mark_connector;
#line 628 
struct inode_operations;
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_439 {
   unsigned int i_nlink ;
   unsigned int __i_nlink ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_440 {
   struct hlist_head i_dentry ;
   struct callback_head i_rcu ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_441 {
   struct file_operations *i_fop ;
   void (*free_inode)(struct inode *) ;
};
#line 628 
struct file_lock_context;
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_442 {
   struct pipe_inode_info *i_pipe ;
   struct block_device *i_bdev ;
   struct cdev *i_cdev ;
   char *i_link ;
   unsigned int i_dir_seq ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct inode {
   umode_t i_mode ;
   unsigned short i_opflags ;
   kuid_t i_uid ;
   kgid_t i_gid ;
   unsigned int i_flags ;
   struct posix_acl *i_acl ;
   struct posix_acl *i_default_acl ;
   struct inode_operations *i_op ;
   struct super_block *i_sb ;
   struct address_space *i_mapping ;
   void *i_security ;
   unsigned long i_ino ;
   union __anonunion_439 __anonCompField_inode_68 ;
   dev_t i_rdev ;
   loff_t i_size ;
   struct timespec64 i_atime ;
   struct timespec64 i_mtime ;
   struct timespec64 i_ctime ;
   spinlock_t i_lock ;
   unsigned short i_bytes ;
   u8 i_blkbits ;
   u8 i_write_hint ;
   blkcnt_t i_blocks ;
   unsigned long i_state ;
   struct rw_semaphore i_rwsem ;
   unsigned long dirtied_when ;
   unsigned long dirtied_time_when ;
   struct hlist_node i_hash ;
   struct list_head i_io_list ;
   struct bdi_writeback *i_wb ;
   int i_wb_frn_winner ;
   u16 i_wb_frn_avg_time ;
   u16 i_wb_frn_history ;
   struct list_head i_lru ;
   struct list_head i_sb_list ;
   struct list_head i_wb_list ;
   union __anonunion_440 __anonCompField_inode_69 ;
   atomic64_t i_version ;
   atomic_t i_count ;
   atomic_t i_dio_count ;
   atomic_t i_writecount ;
   atomic_t i_readcount ;
   union __anonunion_441 __anonCompField_inode_70 ;
   struct file_lock_context *i_flctx ;
   struct address_space i_data ;
   struct list_head i_devices ;
   union __anonunion_442 __anonCompField_inode_71 ;
   __u32 i_generation ;
   __u32 i_fsnotify_mask ;
   struct fsnotify_mark_connector *i_fsnotify_marks ;
   struct fscrypt_info *i_crypt_info ;
   struct fsverity_info *i_verity_info ;
   void *i_private ;
} __attribute__((__designated_init__));
#line 904  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fown_struct {
   rwlock_t lock ;
   struct pid *pid ;
   enum pid_type pid_type ;
   kuid_t uid ;
   kuid_t euid ;
   int signum ;
};
#line 915  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_ra_state {
   unsigned long start ;
   unsigned int size ;
   unsigned int async_size ;
   unsigned int ra_pages ;
   unsigned int mmap_miss ;
   loff_t prev_pos ;
};
#line 935  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_f_u_443 {
   struct llist_node fu_llist ;
   struct callback_head fu_rcuhead ;
};
#line 935  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file {
   union __anonunion_f_u_443 f_u ;
   struct path f_path ;
   struct inode *f_inode ;
   struct file_operations *f_op ;
   spinlock_t f_lock ;
   enum rw_hint f_write_hint ;
   atomic_long_t f_count ;
   unsigned int f_flags ;
   fmode_t f_mode ;
   struct mutex f_pos_lock ;
   loff_t f_pos ;
   struct fown_struct f_owner ;
   struct cred *f_cred ;
   struct file_ra_state f_ra ;
   u64 f_version ;
   void *f_security ;
   void *private_data ;
   struct list_head f_ep_links ;
   struct list_head f_tfile_llink ;
   struct address_space *f_mapping ;
   errseq_t f_wb_err ;
} __attribute__((__designated_init__, __aligned__(4)));
#line 988  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
typedef void *fl_owner_t;
#line 1026 
struct file_lock;
#line 1029  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock_operations {
   void (*fl_copy_lock)(struct file_lock *, struct file_lock *) ;
   void (*fl_release_private)(struct file_lock *) ;
};
#line 1034  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct lock_manager_operations {
   fl_owner_t (*lm_get_owner)(fl_owner_t ) ;
   void (*lm_put_owner)(fl_owner_t ) ;
   void (*lm_notify)(struct file_lock *) ;
   int (*lm_grant)(struct file_lock *, int ) ;
   bool (*lm_break)(struct file_lock *) ;
   int (*lm_change)(struct file_lock *, int , struct list_head *) ;
   void (*lm_setup)(struct file_lock *, void **) ;
};
#line 1052 
struct net;
#line 1058 
struct nlm_lockowner;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nfs_fs_i.h"
struct nfs_lock_info {
   u32 state ;
   struct nlm_lockowner *owner ;
   struct list_head list ;
};
#line 15 
struct nfs4_lock_state;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nfs_fs_i.h"
struct nfs4_lock_info {
   struct nfs4_lock_state *owner ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fasync_struct;
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct __anonstruct_afs_445 {
   struct list_head link ;
   int state ;
   unsigned int debug_id ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_fl_u_444 {
   struct nfs_lock_info nfs_fl ;
   struct nfs4_lock_info nfs4_fl ;
   struct __anonstruct_afs_445 afs ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock {
   struct file_lock *fl_blocker ;
   struct list_head fl_list ;
   struct hlist_node fl_link ;
   struct list_head fl_blocked_requests ;
   struct list_head fl_blocked_member ;
   fl_owner_t fl_owner ;
   unsigned int fl_flags ;
   unsigned char fl_type ;
   unsigned int fl_pid ;
   int fl_link_cpu ;
   wait_queue_head_t fl_wait ;
   struct file *fl_file ;
   loff_t fl_start ;
   loff_t fl_end ;
   struct fasync_struct *fl_fasync ;
   unsigned long fl_break_time ;
   unsigned long fl_downgrade_time ;
   struct file_lock_operations *fl_ops ;
   struct lock_manager_operations *fl_lmops ;
   union __anonunion_fl_u_444 fl_u ;
} __attribute__((__designated_init__));
#line 1117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock_context {
   spinlock_t flc_lock ;
   struct list_head flc_flock ;
   struct list_head flc_posix ;
   struct list_head flc_lease ;
};
#line 1331  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fasync_struct {
   rwlock_t fa_lock ;
   int magic ;
   int fa_fd ;
   struct fasync_struct *fa_next ;
   struct file *fa_file ;
   struct callback_head fa_rcu ;
};
#line 1418  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct sb_writers {
   int frozen ;
   wait_queue_head_t wait_unfrozen ;
   struct percpu_rw_semaphore rw_sem[3U] ;
};
#line 1424 
struct super_operations;
#line 1424 
struct xattr_handler;
#line 1424 
struct mtd_info;
#line 1424  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct super_block {
   struct list_head s_list ;
   dev_t s_dev ;
   unsigned char s_blocksize_bits ;
   unsigned long s_blocksize ;
   loff_t s_maxbytes ;
   struct file_system_type *s_type ;
   struct super_operations *s_op ;
   struct dquot_operations *dq_op ;
   struct quotactl_ops *s_qcop ;
   struct export_operations *s_export_op ;
   unsigned long s_flags ;
   unsigned long s_iflags ;
   unsigned long s_magic ;
   struct dentry *s_root ;
   struct rw_semaphore s_umount ;
   int s_count ;
   atomic_t s_active ;
   void *s_security ;
   struct xattr_handler **s_xattr ;
   struct fscrypt_operations *s_cop ;
   struct key *s_master_keys ;
   struct fsverity_operations *s_vop ;
   struct hlist_bl_head s_roots ;
   struct list_head s_mounts ;
   struct block_device *s_bdev ;
   struct backing_dev_info *s_bdi ;
   struct mtd_info *s_mtd ;
   struct hlist_node s_instances ;
   unsigned int s_quota_types ;
   struct quota_info s_dquot ;
   struct sb_writers s_writers ;
   void *s_fs_info ;
   u32 s_time_gran ;
   time64_t s_time_min ;
   time64_t s_time_max ;
   __u32 s_fsnotify_mask ;
   struct fsnotify_mark_connector *s_fsnotify_marks ;
   char s_id[32U] ;
   uuid_t s_uuid ;
   unsigned int s_max_links ;
   fmode_t s_mode ;
   struct mutex s_vfs_rename_mutex ;
   char *s_subtype ;
   struct dentry_operations *s_d_op ;
   int cleancache_poolid ;
   struct shrinker s_shrink ;
   atomic_long_t s_remove_count ;
   atomic_long_t s_fsnotify_inode_refs ;
   int s_readonly_remount ;
   struct workqueue_struct *s_dio_done_wq ;
   struct hlist_head s_pins ;
   struct user_namespace *s_user_ns ;
   struct list_lru s_dentry_lru ;
   struct list_lru s_inode_lru ;
   struct callback_head rcu ;
   struct work_struct destroy_work ;
   struct mutex s_sync_lock ;
   int s_stack_depth ;
   spinlock_t s_inode_list_lock ;
   struct list_head s_inodes ;
   spinlock_t s_inode_wblist_lock ;
   struct list_head s_inodes_wb ;
} __attribute__((__designated_init__));
#line 1746  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fiemap_extent_info {
   unsigned int fi_flags ;
   unsigned int fi_extents_mapped ;
   unsigned int fi_extents_max ;
   struct fiemap_extent *fi_extents_start ;
};
#line 1756 
struct dir_context;
#line 1767  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct dir_context {
   int (*actor)(struct dir_context *, char *, int , loff_t , u64 , unsigned int ) ;
   loff_t pos ;
};
#line 1821  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_operations {
   struct module *owner ;
   loff_t (*llseek)(struct file *, loff_t , int ) ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*read_iter)(struct kiocb *, struct iov_iter *) ;
   ssize_t (*write_iter)(struct kiocb *, struct iov_iter *) ;
   int (*iopoll)(struct kiocb *, bool ) ;
   int (*iterate)(struct file *, struct dir_context *) ;
   int (*iterate_shared)(struct file *, struct dir_context *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*unlocked_ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl)(struct file *, unsigned int , unsigned long ) ;
   int (*mmap)(struct file *, struct vm_area_struct *) ;
   unsigned long mmap_supported_flags ;
   int (*open)(struct inode *, struct file *) ;
   int (*flush)(struct file *, fl_owner_t ) ;
   int (*release)(struct inode *, struct file *) ;
   int (*fsync)(struct file *, loff_t , loff_t , int ) ;
   int (*fasync)(int , struct file *, int ) ;
   int (*lock)(struct file *, int , struct file_lock *) ;
   ssize_t (*sendpage)(struct file *, struct page *, int , size_t , loff_t *, int ) ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   int (*check_flags)(int ) ;
   int (*flock)(struct file *, int , struct file_lock *) ;
   ssize_t (*splice_write)(struct pipe_inode_info *, struct file *, loff_t *, size_t , unsigned int ) ;
   ssize_t (*splice_read)(struct file *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ) ;
   int (*setlease)(struct file *, long , struct file_lock **, void **) ;
   long (*fallocate)(struct file *, int , loff_t , loff_t ) ;
   void (*show_fdinfo)(struct seq_file *, struct file *) ;
   ssize_t (*copy_file_range)(struct file *, loff_t , struct file *, loff_t , size_t , unsigned int ) ;
   loff_t (*remap_file_range)(struct file *, loff_t , struct file *, loff_t , loff_t , unsigned int ) ;
   int (*fadvise)(struct file *, loff_t , loff_t , int ) ;
} __attribute__((__designated_init__));
#line 1863  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct inode_operations {
   struct dentry *(*lookup)(struct inode *, struct dentry *, unsigned int ) ;
   char *(*get_link)(struct dentry *, struct inode *, struct delayed_call *) ;
   int (*permission)(struct inode *, int ) ;
   struct posix_acl *(*get_acl)(struct inode *, int ) ;
   int (*readlink)(struct dentry *, char *, int ) ;
   int (*create)(struct inode *, struct dentry *, umode_t , bool ) ;
   int (*link)(struct dentry *, struct inode *, struct dentry *) ;
   int (*unlink)(struct inode *, struct dentry *) ;
   int (*symlink)(struct inode *, struct dentry *, char *) ;
   int (*mkdir)(struct inode *, struct dentry *, umode_t ) ;
   int (*rmdir)(struct inode *, struct dentry *) ;
   int (*mknod)(struct inode *, struct dentry *, umode_t , dev_t ) ;
   int (*rename)(struct inode *, struct dentry *, struct inode *, struct dentry *, unsigned int ) ;
   int (*setattr)(struct dentry *, struct iattr *) ;
   int (*getattr)(struct path *, struct kstat *, u32 , unsigned int ) ;
   ssize_t (*listxattr)(struct dentry *, char *, size_t ) ;
   int (*fiemap)(struct inode *, struct fiemap_extent_info *, u64 , u64 ) ;
   int (*update_time)(struct inode *, struct timespec64 *, int ) ;
   int (*atomic_open)(struct inode *, struct dentry *, struct file *, unsigned int , umode_t ) ;
   int (*tmpfile)(struct inode *, struct dentry *, umode_t ) ;
   int (*set_acl)(struct inode *, struct posix_acl *, int ) ;
} __attribute__((__aligned__(64)));
#line 1942  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct super_operations {
   struct inode *(*alloc_inode)(struct super_block *) ;
   void (*destroy_inode)(struct inode *) ;
   void (*free_inode)(struct inode *) ;
   void (*dirty_inode)(struct inode *, int ) ;
   int (*write_inode)(struct inode *, struct writeback_control *) ;
   int (*drop_inode)(struct inode *) ;
   void (*evict_inode)(struct inode *) ;
   void (*put_super)(struct super_block *) ;
   int (*sync_fs)(struct super_block *, int ) ;
   int (*freeze_super)(struct super_block *) ;
   int (*freeze_fs)(struct super_block *) ;
   int (*thaw_super)(struct super_block *) ;
   int (*unfreeze_fs)(struct super_block *) ;
   int (*statfs)(struct dentry *, struct kstatfs *) ;
   int (*remount_fs)(struct super_block *, int *, char *) ;
   void (*umount_begin)(struct super_block *) ;
   int (*show_options)(struct seq_file *, struct dentry *) ;
   int (*show_devname)(struct seq_file *, struct dentry *) ;
   int (*show_path)(struct seq_file *, struct dentry *) ;
   int (*show_stats)(struct seq_file *, struct dentry *) ;
   ssize_t (*quota_read)(struct super_block *, int , char *, size_t , loff_t ) ;
   ssize_t (*quota_write)(struct super_block *, int , char *, size_t , loff_t ) ;
   struct dquot **(*get_dquots)(struct inode *) ;
   int (*bdev_try_to_free_page)(struct super_block *, struct page *, gfp_t ) ;
   long (*nr_cached_objects)(struct super_block *, struct shrink_control *) ;
   long (*free_cached_objects)(struct super_block *, struct shrink_control *) ;
};
#line 2217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_system_type {
   char *name ;
   int fs_flags ;
   int (*init_fs_context)(struct fs_context *) ;
   struct fs_parameter_description *parameters ;
   struct dentry *(*mount)(struct file_system_type *, int , char *, void *) ;
   void (*kill_sb)(struct super_block *) ;
   struct module *owner ;
   struct file_system_type *next ;
   struct hlist_head fs_supers ;
   struct lock_class_key s_lock_key ;
   struct lock_class_key s_umount_key ;
   struct lock_class_key s_vfs_rename_key ;
   struct lock_class_key s_writers_key[3U] ;
   struct lock_class_key i_lock_key ;
   struct lock_class_key i_mutex_key ;
   struct lock_class_key i_mutex_dir_key ;
};
#line 1565  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
struct kvec;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/scatterlist.h"
struct scatterlist {
   unsigned long page_link ;
   unsigned int offset ;
   unsigned int length ;
   dma_addr_t dma_address ;
   unsigned int dma_length ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/scatterlist.h"
struct sg_table {
   struct scatterlist *sgl ;
   unsigned int nents ;
   unsigned int orig_nents ;
};
#line 1424  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct msix_entry {
   u32 vector ;
   u16 entry ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-debug.h"
enum dma_data_direction {
    DMA_BIDIRECTIONAL = 0,
    DMA_TO_DEVICE = 1,
    DMA_FROM_DEVICE = 2,
    DMA_NONE = 3
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
struct dma_map_ops {
   void *(*alloc)(struct device *, size_t , dma_addr_t *, gfp_t , unsigned long ) ;
   void (*free)(struct device *, size_t , void *, dma_addr_t , unsigned long ) ;
   int (*mmap)(struct device *, struct vm_area_struct *, void *, dma_addr_t , size_t , unsigned long ) ;
   int (*get_sgtable)(struct device *, struct sg_table *, void *, dma_addr_t , size_t , unsigned long ) ;
   dma_addr_t (*map_page)(struct device *, struct page *, unsigned long , size_t , enum dma_data_direction , unsigned long ) ;
   void (*unmap_page)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   int (*map_sg)(struct device *, struct scatterlist *, int , enum dma_data_direction , unsigned long ) ;
   void (*unmap_sg)(struct device *, struct scatterlist *, int , enum dma_data_direction , unsigned long ) ;
   dma_addr_t (*map_resource)(struct device *, phys_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   void (*unmap_resource)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   void (*sync_single_for_cpu)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) ;
   void (*sync_single_for_device)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) ;
   void (*sync_sg_for_cpu)(struct device *, struct scatterlist *, int , enum dma_data_direction ) ;
   void (*sync_sg_for_device)(struct device *, struct scatterlist *, int , enum dma_data_direction ) ;
   void (*cache_sync)(struct device *, void *, size_t , enum dma_data_direction ) ;
   int (*dma_supported)(struct device *, u64 ) ;
   u64 (*get_required_mask)(struct device *) ;
   size_t (*max_mapping_size)(struct device *) ;
   unsigned long (*get_merge_boundary)(struct device *) ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
struct dql {
   unsigned int num_queued ;
   unsigned int adj_limit ;
   unsigned int last_obj_cnt ;
   unsigned int limit ;
   unsigned int num_completed ;
   unsigned int prev_ovlimit ;
   unsigned int prev_num_queued ;
   unsigned int prev_last_obj_cnt ;
   unsigned int lowest_slack ;
   unsigned long slack_start_time ;
   unsigned int max_limit ;
   unsigned int min_limit ;
   unsigned int slack_hold_time ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uio.h"
struct iovec {
   void *iov_base ;
   __kernel_size_t iov_len ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct kvec {
   void *iov_base ;
   size_t iov_len ;
};
#line 30 
struct bio_vec;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
union __anonunion_463 {
   struct iovec *iov ;
   struct kvec *kvec ;
   struct bio_vec *bvec ;
   struct pipe_inode_info *pipe ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct __anonstruct_465 {
   unsigned int head ;
   unsigned int start_head ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
union __anonunion_464 {
   unsigned long nr_segs ;
   struct __anonstruct_465 __anonCompField___anonunion_464_73 ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct iov_iter {
   unsigned int type ;
   size_t iov_offset ;
   size_t count ;
   union __anonunion_463 __anonCompField_iov_iter_72 ;
   union __anonunion_464 __anonCompField_iov_iter_74 ;
};
#line 285  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
typedef unsigned short __kernel_sa_family_t;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
typedef __kernel_sa_family_t sa_family_t;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
struct sockaddr {
   sa_family_t sa_family ;
   char sa_data[14U] ;
};
#line 422 
struct ns_common;
#line 423  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
struct __anonstruct_sync_serial_settings_468 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
};
#line 423  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
typedef struct __anonstruct_sync_serial_settings_468 sync_serial_settings;
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_te1_settings_469 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
   unsigned int slot_map ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_te1_settings_469 te1_settings;
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_raw_hdlc_proto_470 {
   unsigned short encoding ;
   unsigned short parity ;
};
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_raw_hdlc_proto_470 raw_hdlc_proto;
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_471 {
   unsigned int t391 ;
   unsigned int t392 ;
   unsigned int n391 ;
   unsigned int n392 ;
   unsigned int n393 ;
   unsigned short lmi ;
   unsigned short dce ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_471 fr_proto;
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_472 {
   unsigned int dlci ;
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_472 fr_proto_pvc;
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_info_473 {
   unsigned int dlci ;
   char master[16U] ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_info_473 fr_proto_pvc_info;
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_cisco_proto_474 {
   unsigned int interval ;
   unsigned int timeout ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_cisco_proto_474 cisco_proto;
#line 195  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct ifmap {
   unsigned long mem_start ;
   unsigned long mem_end ;
   unsigned short base_addr ;
   unsigned char irq ;
   unsigned char dma ;
   unsigned char port ;
};
#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifs_ifsu_475 {
   raw_hdlc_proto *raw_hdlc ;
   cisco_proto *cisco ;
   fr_proto *fr ;
   fr_proto_pvc *fr_pvc ;
   fr_proto_pvc_info *fr_pvc_info ;
   sync_serial_settings *sync ;
   te1_settings *te1 ;
};
#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct if_settings {
   unsigned int type ;
   unsigned int size ;
   union __anonunion_ifs_ifsu_475 ifs_ifsu ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifr_ifrn_476 {
   char ifrn_name[16U] ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifr_ifru_477 {
   struct sockaddr ifru_addr ;
   struct sockaddr ifru_dstaddr ;
   struct sockaddr ifru_broadaddr ;
   struct sockaddr ifru_netmask ;
   struct sockaddr ifru_hwaddr ;
   short ifru_flags ;
   int ifru_ivalue ;
   int ifru_mtu ;
   struct ifmap ifru_map ;
   char ifru_slave[16U] ;
   char ifru_newname[16U] ;
   void *ifru_data ;
   struct if_settings ifru_settings ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct ifreq {
   union __anonunion_ifr_ifrn_476 ifr_ifrn ;
   union __anonunion_ifr_ifru_477 ifr_ifru ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/compat.h"
typedef s32 compat_long_t;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/compat.h"
typedef u32 compat_uptr_t;
#line 367  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compat.h"
struct compat_robust_list {
   compat_uptr_t next ;
};
#line 371  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compat.h"
struct compat_robust_list_head {
   struct compat_robust_list list ;
   compat_long_t futex_offset ;
   compat_uptr_t list_op_pending ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bvec.h"
struct bio_vec {
   struct page *bv_page ;
   unsigned int bv_len ;
   unsigned int bv_offset ;
};
#line 125  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct sk_buff;
#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/checksum_64.h"
struct in6_addr;
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/checksum.h"
typedef u64 netdev_features_t;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/in6.h"
union __anonunion_in6_u_512 {
   __u8 u6_addr8[16U] ;
   __be16 u6_addr16[8U] ;
   __be32 u6_addr32[4U] ;
};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/in6.h"
struct in6_addr {
   union __anonunion_in6_u_512 in6_u ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/in6.h"
struct __anonstruct_siphash_key_t_513 {
   u64 key[2U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/in6.h"
typedef struct __anonstruct_siphash_key_t_513 siphash_key_t;
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_ether.h"
struct ethhdr {
   unsigned char h_dest[6U] ;
   unsigned char h_source[6U] ;
   __be16 h_proto ;
} __attribute__((__packed__));
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buf_operations;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buffer {
   struct page *page ;
   unsigned int offset ;
   unsigned int len ;
   struct pipe_buf_operations *ops ;
   unsigned int flags ;
   unsigned long private ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_inode_info {
   struct mutex mutex ;
   wait_queue_head_t wait ;
   unsigned int head ;
   unsigned int tail ;
   unsigned int max_usage ;
   unsigned int ring_size ;
   unsigned int readers ;
   unsigned int writers ;
   unsigned int files ;
   unsigned int r_counter ;
   unsigned int w_counter ;
   struct page *tmp_page ;
   struct fasync_struct *fasync_readers ;
   struct fasync_struct *fasync_writers ;
   struct pipe_buffer *bufs ;
   struct user_struct *user ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buf_operations {
   int (*confirm)(struct pipe_inode_info *, struct pipe_buffer *) ;
   void (*release)(struct pipe_inode_info *, struct pipe_buffer *) ;
   int (*steal)(struct pipe_inode_info *, struct pipe_buffer *) ;
   bool (*get)(struct pipe_inode_info *, struct pipe_buffer *) ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netfilter/nf_conntrack_common.h"
struct ip_conntrack_stat {
   unsigned int found ;
   unsigned int invalid ;
   unsigned int ignore ;
   unsigned int insert ;
   unsigned int insert_failed ;
   unsigned int drop ;
   unsigned int early_drop ;
   unsigned int error ;
   unsigned int expect_new ;
   unsigned int expect_create ;
   unsigned int expect_delete ;
   unsigned int search_restart ;
};
#line 41 
struct napi_struct;
#line 43 
union bpf_attr;
#line 44 
struct skb_ext;
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct sk_buff_head {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   __u32 qlen ;
   spinlock_t lock ;
};
#line 562  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
typedef unsigned int sk_buff_data_t;
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_535 {
   struct net_device *dev ;
   unsigned long dev_scratch ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_534 {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   union __anonunion_535 __anonCompField___anonstruct_534_90 ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_533 {
   struct __anonstruct_534 __anonCompField___anonunion_533_91 ;
   struct rb_node rbnode ;
   struct list_head list ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_536 {
   struct sock *sk ;
   int ip_defrag_offset ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_537 {
   ktime_t tstamp ;
   u64 skb_mstamp_ns ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_539 {
   unsigned long _skb_refdst ;
   void (*destructor)(struct sk_buff *) ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_538 {
   struct __anonstruct_539 __anonCompField___anonunion_538_95 ;
   struct list_head tcp_tsorted_anchor ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_541 {
   __u16 csum_start ;
   __u16 csum_offset ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_540 {
   __wsum csum ;
   struct __anonstruct_541 __anonCompField___anonunion_540_97 ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_542 {
   unsigned int napi_id ;
   unsigned int sender_cpu ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_543 {
   __u32 mark ;
   __u32 reserved_tailroom ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_544 {
   __be16 inner_protocol ;
   __u8 inner_ipproto ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct sk_buff {
   union __anonunion_533 __anonCompField_sk_buff_92 ;
   union __anonunion_536 __anonCompField_sk_buff_93 ;
   union __anonunion_537 __anonCompField_sk_buff_94 ;
   char cb[48U] ;
   union __anonunion_538 __anonCompField_sk_buff_96 ;
   unsigned long _nfct ;
   unsigned int len ;
   unsigned int data_len ;
   __u16 mac_len ;
   __u16 hdr_len ;
   __u16 queue_mapping ;
   __u8 __cloned_offset[0U] ;
   __u8 cloned : 1 ;
   __u8 nohdr : 1 ;
   __u8 fclone : 2 ;
   __u8 peeked : 1 ;
   __u8 head_frag : 1 ;
   __u8 pfmemalloc : 1 ;
   __u8 active_extensions ;
   __u32 headers_start[0U] ;
   __u8 __pkt_type_offset[0U] ;
   __u8 pkt_type : 3 ;
   __u8 ignore_df : 1 ;
   __u8 nf_trace : 1 ;
   __u8 ip_summed : 2 ;
   __u8 ooo_okay : 1 ;
   __u8 l4_hash : 1 ;
   __u8 sw_hash : 1 ;
   __u8 wifi_acked_valid : 1 ;
   __u8 wifi_acked : 1 ;
   __u8 no_fcs : 1 ;
   __u8 encapsulation : 1 ;
   __u8 encap_hdr_csum : 1 ;
   __u8 csum_valid : 1 ;
   __u8 __pkt_vlan_present_offset[0U] ;
   __u8 vlan_present : 1 ;
   __u8 csum_complete_sw : 1 ;
   __u8 csum_level : 2 ;
   __u8 csum_not_inet : 1 ;
   __u8 dst_pending_confirm : 1 ;
   __u8 ndisc_nodetype : 2 ;
   __u8 ipvs_property : 1 ;
   __u8 inner_protocol_type : 1 ;
   __u8 remcsum_offload : 1 ;
   __u8 offload_fwd_mark : 1 ;
   __u8 offload_l3_fwd_mark : 1 ;
   __u8 tc_skip_classify : 1 ;
   __u8 tc_at_ingress : 1 ;
   __u8 tc_redirected : 1 ;
   __u8 tc_from_ingress : 1 ;
   __u8 decrypted : 1 ;
   __u16 tc_index ;
   union __anonunion_540 __anonCompField_sk_buff_98 ;
   __u32 priority ;
   int skb_iif ;
   __u32 hash ;
   __be16 vlan_proto ;
   __u16 vlan_tci ;
   union __anonunion_542 __anonCompField_sk_buff_99 ;
   __u32 secmark ;
   union __anonunion_543 __anonCompField_sk_buff_100 ;
   union __anonunion_544 __anonCompField_sk_buff_101 ;
   __u16 inner_transport_header ;
   __u16 inner_network_header ;
   __u16 inner_mac_header ;
   __be16 protocol ;
   __u16 transport_header ;
   __u16 network_header ;
   __u16 mac_header ;
   __u32 headers_end[0U] ;
   sk_buff_data_t tail ;
   sk_buff_data_t end ;
   unsigned char *head ;
   unsigned char *data ;
   unsigned int truesize ;
   refcount_t users ;
   struct skb_ext *extensions ;
};
#line 4108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct skb_ext {
   refcount_t refcnt ;
   u8 offset[3U] ;
   u8 chunks ;
   char data[0U] ;
};
#line 177  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_drvinfo {
   __u32 cmd ;
   char driver[32U] ;
   char version[32U] ;
   char fw_version[32U] ;
   char bus_info[32U] ;
   char erom_version[32U] ;
   char reserved2[12U] ;
   __u32 n_priv_flags ;
   __u32 n_stats ;
   __u32 testinfo_len ;
   __u32 eedump_len ;
   __u32 regdump_len ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_wolinfo {
   __u32 cmd ;
   __u32 supported ;
   __u32 wolopts ;
   __u8 sopass[6U] ;
};
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tunable {
   __u32 cmd ;
   __u32 id ;
   __u32 type_id ;
   __u32 len ;
   void *data[0U] ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_regs {
   __u32 cmd ;
   __u32 version ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_eeprom {
   __u32 cmd ;
   __u32 magic ;
   __u32 offset ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_eee {
   __u32 cmd ;
   __u32 supported ;
   __u32 advertised ;
   __u32 lp_advertised ;
   __u32 eee_active ;
   __u32 eee_enabled ;
   __u32 tx_lpi_enabled ;
   __u32 tx_lpi_timer ;
   __u32 reserved[2U] ;
};
#line 382  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_modinfo {
   __u32 cmd ;
   __u32 type ;
   __u32 eeprom_len ;
   __u32 reserved[8U] ;
};
#line 462  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_coalesce {
   __u32 cmd ;
   __u32 rx_coalesce_usecs ;
   __u32 rx_max_coalesced_frames ;
   __u32 rx_coalesce_usecs_irq ;
   __u32 rx_max_coalesced_frames_irq ;
   __u32 tx_coalesce_usecs ;
   __u32 tx_max_coalesced_frames ;
   __u32 tx_coalesce_usecs_irq ;
   __u32 tx_max_coalesced_frames_irq ;
   __u32 stats_block_coalesce_usecs ;
   __u32 use_adaptive_rx_coalesce ;
   __u32 use_adaptive_tx_coalesce ;
   __u32 pkt_rate_low ;
   __u32 rx_coalesce_usecs_low ;
   __u32 rx_max_coalesced_frames_low ;
   __u32 tx_coalesce_usecs_low ;
   __u32 tx_max_coalesced_frames_low ;
   __u32 pkt_rate_high ;
   __u32 rx_coalesce_usecs_high ;
   __u32 rx_max_coalesced_frames_high ;
   __u32 tx_coalesce_usecs_high ;
   __u32 tx_max_coalesced_frames_high ;
   __u32 rate_sample_interval ;
};
#line 513  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ringparam {
   __u32 cmd ;
   __u32 rx_max_pending ;
   __u32 rx_mini_max_pending ;
   __u32 rx_jumbo_max_pending ;
   __u32 tx_max_pending ;
   __u32 rx_pending ;
   __u32 rx_mini_pending ;
   __u32 rx_jumbo_pending ;
   __u32 tx_pending ;
};
#line 541  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_channels {
   __u32 cmd ;
   __u32 max_rx ;
   __u32 max_tx ;
   __u32 max_other ;
   __u32 max_combined ;
   __u32 rx_count ;
   __u32 tx_count ;
   __u32 other_count ;
   __u32 combined_count ;
};
#line 575  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_pauseparam {
   __u32 cmd ;
   __u32 autoneg ;
   __u32 rx_pause ;
   __u32 tx_pause ;
};
#line 683  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_test {
   __u32 cmd ;
   __u32 flags ;
   __u32 reserved ;
   __u32 len ;
   __u64 data[0U] ;
};
#line 702  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_stats {
   __u32 cmd ;
   __u32 n_stats ;
   __u64 data[0U] ;
};
#line 758  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tcpip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tos ;
};
#line 775  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ah_espip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 spi ;
   __u8 tos ;
};
#line 793  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_usrip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 l4_4_bytes ;
   __u8 tos ;
   __u8 ip_ver ;
   __u8 proto ;
};
#line 812  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tcpip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tclass ;
};
#line 829  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ah_espip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be32 spi ;
   __u8 tclass ;
};
#line 844  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_usrip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be32 l4_4_bytes ;
   __u8 tclass ;
   __u8 l4_proto ;
};
#line 852  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
union ethtool_flow_union {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   struct ethtool_tcpip6_spec tcp_ip6_spec ;
   struct ethtool_tcpip6_spec udp_ip6_spec ;
   struct ethtool_tcpip6_spec sctp_ip6_spec ;
   struct ethtool_ah_espip6_spec ah_ip6_spec ;
   struct ethtool_ah_espip6_spec esp_ip6_spec ;
   struct ethtool_usrip6_spec usr_ip6_spec ;
   struct ethhdr ether_spec ;
   __u8 hdata[52U] ;
};
#line 880  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_flow_ext {
   __u8 padding[2U] ;
   unsigned char h_dest[6U] ;
   __be16 vlan_etype ;
   __be16 vlan_tci ;
   __be32 data[2U] ;
};
#line 905  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_rx_flow_spec {
   __u32 flow_type ;
   union ethtool_flow_union h_u ;
   struct ethtool_flow_ext h_ext ;
   union ethtool_flow_union m_u ;
   struct ethtool_flow_ext m_ext ;
   __u64 ring_cookie ;
   __u32 location ;
};
#line 1001  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
union __anonunion_570 {
   __u32 rule_cnt ;
   __u32 rss_context ;
};
#line 1001  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_rxnfc {
   __u32 cmd ;
   __u32 flow_type ;
   __u64 data ;
   struct ethtool_rx_flow_spec fs ;
   union __anonunion_570 __anonCompField_ethtool_rxnfc_103 ;
   __u32 rule_locs[0U] ;
};
#line 1130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_flash {
   __u32 cmd ;
   __u32 region ;
   char data[128U] ;
};
#line 1150  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_dump {
   __u32 cmd ;
   __u32 version ;
   __u32 flag ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 1230  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ts_info {
   __u32 cmd ;
   __u32 so_timestamping ;
   __s32 phc_index ;
   __u32 tx_types ;
   __u32 tx_reserved[3U] ;
   __u32 rx_filters ;
   __u32 rx_reserved[3U] ;
};
#line 1302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_fecparam {
   __u32 cmd ;
   __u32 active_fec ;
   __u32 fec ;
   __u32 reserved ;
};
#line 1876  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_link_settings {
   __u32 cmd ;
   __u32 speed ;
   __u8 duplex ;
   __u8 port ;
   __u8 phy_address ;
   __u8 autoneg ;
   __u8 mdio_support ;
   __u8 eth_tp_mdix ;
   __u8 eth_tp_mdix_ctrl ;
   __s8 link_mode_masks_nwords ;
   __u8 transceiver ;
   __u8 reserved1[3U] ;
   __u32 reserved[7U] ;
   __u32 link_mode_masks[0U] ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
enum ethtool_phys_id_state {
    ETHTOOL_ID_INACTIVE = 0,
    ETHTOOL_ID_ACTIVE = 1,
    ETHTOOL_ID_ON = 2,
    ETHTOOL_ID_OFF = 3
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct __anonstruct_link_modes_573 {
   unsigned long supported[2U] ;
   unsigned long advertising[2U] ;
   unsigned long lp_advertising[2U] ;
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct ethtool_link_ksettings {
   struct ethtool_link_settings base ;
   struct __anonstruct_link_modes_573 link_modes ;
};
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct ethtool_ops {
   void (*get_drvinfo)(struct net_device *, struct ethtool_drvinfo *) ;
   int (*get_regs_len)(struct net_device *) ;
   void (*get_regs)(struct net_device *, struct ethtool_regs *, void *) ;
   void (*get_wol)(struct net_device *, struct ethtool_wolinfo *) ;
   int (*set_wol)(struct net_device *, struct ethtool_wolinfo *) ;
   u32 (*get_msglevel)(struct net_device *) ;
   void (*set_msglevel)(struct net_device *, u32 ) ;
   int (*nway_reset)(struct net_device *) ;
   u32 (*get_link)(struct net_device *) ;
   int (*get_eeprom_len)(struct net_device *) ;
   int (*get_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*set_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_coalesce)(struct net_device *, struct ethtool_coalesce *) ;
   int (*set_coalesce)(struct net_device *, struct ethtool_coalesce *) ;
   void (*get_ringparam)(struct net_device *, struct ethtool_ringparam *) ;
   int (*set_ringparam)(struct net_device *, struct ethtool_ringparam *) ;
   void (*get_pauseparam)(struct net_device *, struct ethtool_pauseparam *) ;
   int (*set_pauseparam)(struct net_device *, struct ethtool_pauseparam *) ;
   void (*self_test)(struct net_device *, struct ethtool_test *, u64 *) ;
   void (*get_strings)(struct net_device *, u32 , u8 *) ;
   int (*set_phys_id)(struct net_device *, enum ethtool_phys_id_state ) ;
   void (*get_ethtool_stats)(struct net_device *, struct ethtool_stats *, u64 *) ;
   int (*begin)(struct net_device *) ;
   void (*complete)(struct net_device *) ;
   u32 (*get_priv_flags)(struct net_device *) ;
   int (*set_priv_flags)(struct net_device *, u32 ) ;
   int (*get_sset_count)(struct net_device *, int ) ;
   int (*get_rxnfc)(struct net_device *, struct ethtool_rxnfc *, u32 *) ;
   int (*set_rxnfc)(struct net_device *, struct ethtool_rxnfc *) ;
   int (*flash_device)(struct net_device *, struct ethtool_flash *) ;
   int (*reset)(struct net_device *, u32 *) ;
   u32 (*get_rxfh_key_size)(struct net_device *) ;
   u32 (*get_rxfh_indir_size)(struct net_device *) ;
   int (*get_rxfh)(struct net_device *, u32 *, u8 *, u8 *) ;
   int (*set_rxfh)(struct net_device *, u32 *, u8 *, u8 ) ;
   int (*get_rxfh_context)(struct net_device *, u32 *, u8 *, u8 *, u32 ) ;
   int (*set_rxfh_context)(struct net_device *, u32 *, u8 *, u8 , u32 *, bool ) ;
   void (*get_channels)(struct net_device *, struct ethtool_channels *) ;
   int (*set_channels)(struct net_device *, struct ethtool_channels *) ;
   int (*get_dump_flag)(struct net_device *, struct ethtool_dump *) ;
   int (*get_dump_data)(struct net_device *, struct ethtool_dump *, void *) ;
   int (*set_dump)(struct net_device *, struct ethtool_dump *) ;
   int (*get_ts_info)(struct net_device *, struct ethtool_ts_info *) ;
   int (*get_module_info)(struct net_device *, struct ethtool_modinfo *) ;
   int (*get_module_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_eee)(struct net_device *, struct ethtool_eee *) ;
   int (*set_eee)(struct net_device *, struct ethtool_eee *) ;
   int (*get_tunable)(struct net_device *, struct ethtool_tunable *, void *) ;
   int (*set_tunable)(struct net_device *, struct ethtool_tunable *, void *) ;
   int (*get_per_queue_coalesce)(struct net_device *, u32 , struct ethtool_coalesce *) ;
   int (*set_per_queue_coalesce)(struct net_device *, u32 , struct ethtool_coalesce *) ;
   int (*get_link_ksettings)(struct net_device *, struct ethtool_link_ksettings *) ;
   int (*set_link_ksettings)(struct net_device *, struct ethtool_link_ksettings *) ;
   int (*get_fecparam)(struct net_device *, struct ethtool_fecparam *) ;
   int (*set_fecparam)(struct net_device *, struct ethtool_fecparam *) ;
   void (*get_ethtool_phy_stats)(struct net_device *, struct ethtool_stats *, u64 *) ;
};
#line 422 
struct prot_inuse;
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/core.h"
struct netns_core {
   struct ctl_table_header *sysctl_hdr ;
   int sysctl_somaxconn ;
   int *sock_inuse ;
   struct prot_inuse *prot_inuse ;
};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct u64_stats_sync {
   };
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct __anonstruct_local_t_574 {
   atomic_long_t a ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
typedef struct __anonstruct_local_t_574 local_t;
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/local.h"
struct __anonstruct_local64_t_575 {
   local_t a ;
};
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/local.h"
typedef struct __anonstruct_local64_t_575 local64_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/local64.h"
struct __anonstruct_u64_stats_t_576 {
   local64_t v ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/local64.h"
typedef struct __anonstruct_u64_stats_t_576 u64_stats_t;
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct ipstats_mib {
   u64 mibs[37U] ;
   struct u64_stats_sync syncp ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmp_mib {
   unsigned long mibs[28U] ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpmsg_mib {
   atomic_long_t mibs[512U] ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6_mib {
   unsigned long mibs[6U] ;
};
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6msg_mib {
   atomic_long_t mibs[512U] ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct tcp_mib {
   unsigned long mibs[16U] ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct udp_mib {
   unsigned long mibs[9U] ;
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_mib {
   unsigned long mibs[120U] ;
};
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_xfrm_mib {
   unsigned long mibs[29U] ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_tls_mib {
   unsigned long mibs[11U] ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/mib.h"
struct netns_mib {
   struct tcp_mib *tcp_statistics ;
   struct ipstats_mib *ip_statistics ;
   struct linux_mib *net_statistics ;
   struct udp_mib *udp_statistics ;
   struct udp_mib *udplite_statistics ;
   struct icmp_mib *icmp_statistics ;
   struct icmpmsg_mib *icmpmsg_statistics ;
   struct proc_dir_entry *proc_net_devsnmp6 ;
   struct udp_mib *udp_stats_in6 ;
   struct udp_mib *udplite_stats_in6 ;
   struct ipstats_mib *ipv6_statistics ;
   struct icmpv6_mib *icmpv6_statistics ;
   struct icmpv6msg_mib *icmpv6msg_statistics ;
   struct linux_xfrm_mib *xfrm_statistics ;
   struct linux_tls_mib *tls_statistics ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/unix.h"
struct netns_unix {
   int sysctl_max_dgram_qlen ;
   struct ctl_table_header *ctl ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/packet.h"
struct netns_packet {
   struct mutex sklist_lock ;
   struct hlist_head sklist ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frags;
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct fqdir {
   long high_thresh ;
   long low_thresh ;
   int timeout ;
   int max_dist ;
   struct inet_frags *f ;
   struct net *net ;
   bool dead ;
   struct rhashtable rhashtable ;
   atomic_long_t mem ;
   struct work_struct destroy_work ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct frag_v4_compare_key {
   __be32 saddr ;
   __be32 daddr ;
   u32 user ;
   u32 vif ;
   __be16 id ;
   u16 protocol ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct frag_v6_compare_key {
   struct in6_addr saddr ;
   struct in6_addr daddr ;
   u32 user ;
   __be32 id ;
   u32 iif ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
union __anonunion_key_577 {
   struct frag_v4_compare_key v4 ;
   struct frag_v6_compare_key v6 ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frag_queue {
   struct rhash_head node ;
   union __anonunion_key_577 key ;
   struct timer_list timer ;
   spinlock_t lock ;
   refcount_t refcnt ;
   struct rb_root rb_fragments ;
   struct sk_buff *fragments_tail ;
   struct sk_buff *last_run_head ;
   ktime_t stamp ;
   int len ;
   int meat ;
   __u8 flags ;
   u16 max_size ;
   struct fqdir *fqdir ;
   struct callback_head rcu ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frags {
   unsigned int qsize ;
   void (*constructor)(struct inet_frag_queue *, void *) ;
   void (*destructor)(struct inet_frag_queue *) ;
   void (*frag_expire)(struct timer_list *) ;
   struct kmem_cache *frags_cachep ;
   char *frags_cache_name ;
   struct rhashtable_params rhash_params ;
   refcount_t refcnt ;
   struct completion completion ;
};
#line 177 
struct ipv4_devconf;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct local_ports {
   seqlock_t lock ;
   int range[2U] ;
   bool warned ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct ping_group_range {
   seqlock_t lock ;
   kgid_t range[2U] ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct inet_timewait_death_row {
   atomic_t tw_count ;
   struct inet_hashinfo *hashinfo ;
   int sysctl_max_tw_buckets ;
};
#line 43 
struct xt_table;
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct netns_ipv4 {
   struct ctl_table_header *forw_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *ipv4_hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *xfrm4_hdr ;
   struct ipv4_devconf *devconf_all ;
   struct ipv4_devconf *devconf_dflt ;
   struct ip_ra_chain *ra_chain ;
   struct mutex ra_mutex ;
   struct fib_rules_ops *rules_ops ;
   bool fib_has_custom_rules ;
   unsigned int fib_rules_require_fldissect ;
   struct fib_table *fib_main ;
   struct fib_table *fib_default ;
   bool fib_has_custom_local_routes ;
   int fib_num_tclassid_users ;
   struct hlist_head *fib_table_hash ;
   bool fib_offload_disabled ;
   struct sock *fibnl ;
   struct sock **icmp_sk ;
   struct sock *mc_autojoin_sk ;
   struct inet_peer_base *peers ;
   struct sock **tcp_sk ;
   struct fqdir *fqdir ;
   struct xt_table *iptable_filter ;
   struct xt_table *iptable_mangle ;
   struct xt_table *iptable_raw ;
   struct xt_table *arptable_filter ;
   struct xt_table *iptable_security ;
   struct xt_table *nat_table ;
   int sysctl_icmp_echo_ignore_all ;
   int sysctl_icmp_echo_ignore_broadcasts ;
   int sysctl_icmp_ignore_bogus_error_responses ;
   int sysctl_icmp_ratelimit ;
   int sysctl_icmp_ratemask ;
   int sysctl_icmp_errors_use_inbound_ifaddr ;
   struct local_ports ip_local_ports ;
   int sysctl_tcp_ecn ;
   int sysctl_tcp_ecn_fallback ;
   int sysctl_ip_default_ttl ;
   int sysctl_ip_no_pmtu_disc ;
   int sysctl_ip_fwd_use_pmtu ;
   int sysctl_ip_fwd_update_priority ;
   int sysctl_ip_nonlocal_bind ;
   int sysctl_ip_dynaddr ;
   int sysctl_ip_early_demux ;
   int sysctl_raw_l3mdev_accept ;
   int sysctl_tcp_early_demux ;
   int sysctl_udp_early_demux ;
   int sysctl_fwmark_reflect ;
   int sysctl_tcp_fwmark_accept ;
   int sysctl_tcp_l3mdev_accept ;
   int sysctl_tcp_mtu_probing ;
   int sysctl_tcp_mtu_probe_floor ;
   int sysctl_tcp_base_mss ;
   int sysctl_tcp_min_snd_mss ;
   int sysctl_tcp_probe_threshold ;
   u32 sysctl_tcp_probe_interval ;
   int sysctl_tcp_keepalive_time ;
   int sysctl_tcp_keepalive_probes ;
   int sysctl_tcp_keepalive_intvl ;
   int sysctl_tcp_syn_retries ;
   int sysctl_tcp_synack_retries ;
   int sysctl_tcp_syncookies ;
   int sysctl_tcp_reordering ;
   int sysctl_tcp_retries1 ;
   int sysctl_tcp_retries2 ;
   int sysctl_tcp_orphan_retries ;
   int sysctl_tcp_fin_timeout ;
   unsigned int sysctl_tcp_notsent_lowat ;
   int sysctl_tcp_tw_reuse ;
   int sysctl_tcp_sack ;
   int sysctl_tcp_window_scaling ;
   int sysctl_tcp_timestamps ;
   int sysctl_tcp_early_retrans ;
   int sysctl_tcp_recovery ;
   int sysctl_tcp_thin_linear_timeouts ;
   int sysctl_tcp_slow_start_after_idle ;
   int sysctl_tcp_retrans_collapse ;
   int sysctl_tcp_stdurg ;
   int sysctl_tcp_rfc1337 ;
   int sysctl_tcp_abort_on_overflow ;
   int sysctl_tcp_fack ;
   int sysctl_tcp_max_reordering ;
   int sysctl_tcp_dsack ;
   int sysctl_tcp_app_win ;
   int sysctl_tcp_adv_win_scale ;
   int sysctl_tcp_frto ;
   int sysctl_tcp_nometrics_save ;
   int sysctl_tcp_moderate_rcvbuf ;
   int sysctl_tcp_tso_win_divisor ;
   int sysctl_tcp_workaround_signed_windows ;
   int sysctl_tcp_limit_output_bytes ;
   int sysctl_tcp_challenge_ack_limit ;
   int sysctl_tcp_min_tso_segs ;
   int sysctl_tcp_min_rtt_wlen ;
   int sysctl_tcp_autocorking ;
   int sysctl_tcp_invalid_ratelimit ;
   int sysctl_tcp_pacing_ss_ratio ;
   int sysctl_tcp_pacing_ca_ratio ;
   int sysctl_tcp_wmem[3U] ;
   int sysctl_tcp_rmem[3U] ;
   int sysctl_tcp_comp_sack_nr ;
   unsigned long sysctl_tcp_comp_sack_delay_ns ;
   struct inet_timewait_death_row tcp_death_row ;
   int sysctl_max_syn_backlog ;
   int sysctl_tcp_fastopen ;
   struct tcp_congestion_ops *tcp_congestion_control ;
   struct tcp_fastopen_context *tcp_fastopen_ctx ;
   spinlock_t tcp_fastopen_ctx_lock ;
   unsigned int sysctl_tcp_fastopen_blackhole_timeout ;
   atomic_t tfo_active_disable_times ;
   unsigned long tfo_active_disable_stamp ;
   int sysctl_udp_wmem_min ;
   int sysctl_udp_rmem_min ;
   int sysctl_udp_l3mdev_accept ;
   int sysctl_igmp_max_memberships ;
   int sysctl_igmp_max_msf ;
   int sysctl_igmp_llm_reports ;
   int sysctl_igmp_qrv ;
   struct ping_group_range ping_group_range ;
   atomic_t dev_addr_genid ;
   unsigned long *sysctl_local_reserved_ports ;
   int sysctl_ip_prot_sock ;
   struct list_head mr_tables ;
   struct fib_rules_ops *mr_rules_ops ;
   int sysctl_fib_multipath_use_neigh ;
   int sysctl_fib_multipath_hash_policy ;
   struct fib_notifier_ops *notifier_ops ;
   unsigned int fib_seq ;
   struct fib_notifier_ops *ipmr_notifier_ops ;
   unsigned int ipmr_seq ;
   atomic_t rt_genid ;
   siphash_key_t ip_id_key ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst_ops.h"
struct dst_ops {
   unsigned short family ;
   unsigned int gc_thresh ;
   int (*gc)(struct dst_ops *) ;
   struct dst_entry *(*check)(struct dst_entry *, __u32 ) ;
   unsigned int (*default_advmss)(struct dst_entry *) ;
   unsigned int (*mtu)(struct dst_entry *) ;
   u32 *(*cow_metrics)(struct dst_entry *, unsigned long ) ;
   void (*destroy)(struct dst_entry *) ;
   void (*ifdown)(struct dst_entry *, struct net_device *, int ) ;
   struct dst_entry *(*negative_advice)(struct dst_entry *) ;
   void (*link_failure)(struct sk_buff *) ;
   void (*update_pmtu)(struct dst_entry *, struct sock *, struct sk_buff *, u32 , bool ) ;
   void (*redirect)(struct dst_entry *, struct sock *, struct sk_buff *) ;
   int (*local_out)(struct net *, struct sock *, struct sk_buff *) ;
   struct neighbour *(*neigh_lookup)(struct dst_entry *, struct sk_buff *, void *) ;
   void (*confirm_neigh)(struct dst_entry *, void *) ;
   struct kmem_cache *kmem_cachep ;
   struct percpu_counter pcpuc_entries ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_sysctl_ipv6 {
   struct ctl_table_header *hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *icmp_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *xfrm6_hdr ;
   int bindv6only ;
   int flush_delay ;
   int ip6_rt_max_size ;
   int ip6_rt_gc_min_interval ;
   int ip6_rt_gc_timeout ;
   int ip6_rt_gc_interval ;
   int ip6_rt_gc_elasticity ;
   int ip6_rt_mtu_expires ;
   int ip6_rt_min_advmss ;
   int multipath_hash_policy ;
   int flowlabel_consistency ;
   int auto_flowlabels ;
   int icmpv6_time ;
   int icmpv6_echo_ignore_all ;
   int icmpv6_echo_ignore_multicast ;
   int icmpv6_echo_ignore_anycast ;
   unsigned long icmpv6_ratemask[4U] ;
   unsigned long *icmpv6_ratemask_ptr ;
   int anycast_src_echo_reply ;
   int ip_nonlocal_bind ;
   int fwmark_reflect ;
   int idgen_retries ;
   int idgen_delay ;
   int flowlabel_state_ranges ;
   int flowlabel_reflect ;
   int max_dst_opts_cnt ;
   int max_hbh_opts_cnt ;
   int max_dst_opts_len ;
   int max_hbh_opts_len ;
   int seg6_flowlabel ;
   bool skip_notify_on_dev_down ;
};
#line 56 
struct fib6_info;
#line 56 
struct rt6_info;
#line 56 
struct rt6_statistics;
#line 56 
struct fib6_table;
#line 56 
struct seg6_pernet_data;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct __anonstruct_ip6addrlbl_table_579 {
   struct hlist_head head ;
   spinlock_t lock ;
   u32 seq ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_ipv6 {
   struct netns_sysctl_ipv6 sysctl ;
   struct ipv6_devconf *devconf_all ;
   struct ipv6_devconf *devconf_dflt ;
   struct inet_peer_base *peers ;
   struct fqdir *fqdir ;
   struct xt_table *ip6table_filter ;
   struct xt_table *ip6table_mangle ;
   struct xt_table *ip6table_raw ;
   struct xt_table *ip6table_security ;
   struct xt_table *ip6table_nat ;
   struct fib6_info *fib6_null_entry ;
   struct rt6_info *ip6_null_entry ;
   struct rt6_statistics *rt6_stats ;
   struct timer_list ip6_fib_timer ;
   struct hlist_head *fib_table_hash ;
   struct fib6_table *fib6_main_tbl ;
   struct list_head fib6_walkers ;
   struct dst_ops ip6_dst_ops ;
   rwlock_t fib6_walker_lock ;
   spinlock_t fib6_gc_lock ;
   unsigned int ip6_rt_gc_expire ;
   unsigned long ip6_rt_last_gc ;
   unsigned int fib6_rules_require_fldissect ;
   bool fib6_has_custom_rules ;
   unsigned int fib6_routes_require_src ;
   struct rt6_info *ip6_prohibit_entry ;
   struct rt6_info *ip6_blk_hole_entry ;
   struct fib6_table *fib6_local_tbl ;
   struct fib_rules_ops *fib6_rules_ops ;
   struct sock **icmp_sk ;
   struct sock *ndisc_sk ;
   struct sock *tcp_sk ;
   struct sock *igmp_sk ;
   struct sock *mc_autojoin_sk ;
   struct list_head mr6_tables ;
   struct fib_rules_ops *mr6_rules_ops ;
   atomic_t dev_addr_genid ;
   atomic_t fib6_sernum ;
   struct seg6_pernet_data *seg6_data ;
   struct fib_notifier_ops *notifier_ops ;
   struct fib_notifier_ops *ip6mr_notifier_ops ;
   unsigned int ipmr_seq ;
   struct __anonstruct_ip6addrlbl_table_579 ip6addrlbl_table ;
};
#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_nf_frag {
   struct fqdir *fqdir ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/nexthop.h"
struct netns_nexthop {
   struct rb_root rb_root ;
   struct hlist_head *devhash ;
   unsigned int seq ;
   u32 last_id_allocated ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ieee802154_6lowpan.h"
struct netns_sysctl_lowpan {
   struct ctl_table_header *frags_hdr ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ieee802154_6lowpan.h"
struct netns_ieee802154_lowpan {
   struct netns_sysctl_lowpan sysctl ;
   struct fqdir *fqdir ;
};
#line 21 
struct sctp_mib;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/sctp.h"
struct netns_sctp {
   struct sctp_mib *sctp_statistics ;
   struct proc_dir_entry *proc_net_sctp ;
   struct ctl_table_header *sysctl_header ;
   struct sock *ctl_sock ;
   struct list_head local_addr_list ;
   struct list_head addr_waitq ;
   struct timer_list addr_wq_timer ;
   struct list_head auto_asconf_splist ;
   spinlock_t addr_wq_lock ;
   spinlock_t local_addr_lock ;
   unsigned int rto_initial ;
   unsigned int rto_min ;
   unsigned int rto_max ;
   int rto_alpha ;
   int rto_beta ;
   int max_burst ;
   int cookie_preserve_enable ;
   char *sctp_hmac_alg ;
   unsigned int valid_cookie_life ;
   unsigned int sack_timeout ;
   unsigned int hb_interval ;
   int max_retrans_association ;
   int max_retrans_path ;
   int max_retrans_init ;
   int pf_retrans ;
   int ps_retrans ;
   int pf_enable ;
   int pf_expose ;
   int sndbuf_policy ;
   int rcvbuf_policy ;
   int default_auto_asconf ;
   int addip_enable ;
   int addip_noauth ;
   int prsctp_enable ;
   int reconf_enable ;
   int auth_enable ;
   int intl_enable ;
   int ecn_enable ;
   int scope_policy ;
   int rwnd_upd_shift ;
   unsigned long max_autoclose ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/dccp.h"
struct netns_dccp {
   struct sock *v4_ctl_sk ;
   struct sock *v6_ctl_sk ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netfilter.h"
struct nf_logger;
#line 76 
struct nf_queue_handler;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/netfilter.h"
struct nf_hook_entries;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/netfilter.h"
struct netns_nf {
   struct proc_dir_entry *proc_netfilter ;
   struct nf_queue_handler *queue_handler ;
   struct nf_logger *nf_loggers[13U] ;
   struct ctl_table_header *nf_log_dir_header ;
   struct nf_hook_entries *hooks_ipv4[5U] ;
   struct nf_hook_entries *hooks_ipv6[5U] ;
   struct nf_hook_entries *hooks_arp[3U] ;
   struct nf_hook_entries *hooks_bridge[5U] ;
   struct nf_hook_entries *hooks_decnet[7U] ;
   bool defrag_ipv4 ;
   bool defrag_ipv6 ;
};
#line 37 
struct ebt_table;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/x_tables.h"
struct netns_xt {
   struct list_head tables[13U] ;
   bool notrack_deprecated_warning ;
   bool clusterip_deprecated_warning ;
   struct ebt_table *broute_table ;
   struct ebt_table *frame_filter ;
   struct ebt_table *frame_nat ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_node;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_head {
   struct hlist_nulls_node *first ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_node {
   struct hlist_nulls_node *next ;
   struct hlist_nulls_node **pprev ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_generic_net {
   unsigned int timeout ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_tcp_net {
   unsigned int timeouts[14U] ;
   int tcp_loose ;
   int tcp_be_liberal ;
   int tcp_max_retrans ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_udp_net {
   unsigned int timeouts[2U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_icmp_net {
   unsigned int timeout ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_dccp_net {
   int dccp_loose ;
   unsigned int dccp_timeout[10U] ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_sctp_net {
   unsigned int timeouts[10U] ;
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_gre_net {
   struct list_head keymap_list ;
   unsigned int timeouts[2U] ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_ip_net {
   struct nf_generic_net generic ;
   struct nf_tcp_net tcp ;
   struct nf_udp_net udp ;
   struct nf_icmp_net icmp ;
   struct nf_icmp_net icmpv6 ;
   struct nf_dccp_net dccp ;
   struct nf_sctp_net sctp ;
   struct nf_gre_net gre ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct ct_pcpu {
   spinlock_t lock ;
   struct hlist_nulls_head unconfirmed ;
   struct hlist_nulls_head dying ;
};
#line 95 
struct nf_ct_event_notifier;
#line 95 
struct nf_exp_event_notifier;
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct netns_ct {
   atomic_t count ;
   unsigned int expect_count ;
   struct delayed_work ecache_dwork ;
   bool ecache_dwork_pending ;
   bool auto_assign_helper_warned ;
   struct ctl_table_header *sysctl_header ;
   unsigned int sysctl_log_invalid ;
   int sysctl_events ;
   int sysctl_acct ;
   int sysctl_auto_assign_helper ;
   int sysctl_tstamp ;
   int sysctl_checksum ;
   struct ct_pcpu *pcpu_lists ;
   struct ip_conntrack_stat *stat ;
   struct nf_ct_event_notifier *nf_conntrack_event_cb ;
   struct nf_exp_event_notifier *nf_expect_event_cb ;
   struct nf_ip_net nf_ct_proto ;
   unsigned int labels_used ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/nftables.h"
struct netns_nftables {
   struct list_head tables ;
   struct list_head commit_list ;
   struct list_head module_list ;
   struct mutex commit_mutex ;
   unsigned int base_seq ;
   u8 gencursor ;
   u8 validate_state ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct xfrm_policy_hash {
   struct hlist_head *table ;
   unsigned int hmask ;
   u8 dbits4 ;
   u8 sbits4 ;
   u8 dbits6 ;
   u8 sbits6 ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct xfrm_policy_hthresh {
   struct work_struct work ;
   seqlock_t lock ;
   u8 lbits4 ;
   u8 rbits4 ;
   u8 lbits6 ;
   u8 rbits6 ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct netns_xfrm {
   struct list_head state_all ;
   struct hlist_head *state_bydst ;
   struct hlist_head *state_bysrc ;
   struct hlist_head *state_byspi ;
   unsigned int state_hmask ;
   unsigned int state_num ;
   struct work_struct state_hash_work ;
   struct list_head policy_all ;
   struct hlist_head *policy_byidx ;
   unsigned int policy_idx_hmask ;
   struct hlist_head policy_inexact[3U] ;
   struct xfrm_policy_hash policy_bydst[3U] ;
   unsigned int policy_count[6U] ;
   struct work_struct policy_hash_work ;
   struct xfrm_policy_hthresh policy_hthresh ;
   struct list_head inexact_bins ;
   struct sock *nlsk ;
   struct sock *nlsk_stash ;
   u32 sysctl_aevent_etime ;
   u32 sysctl_aevent_rseqth ;
   int sysctl_larval_drop ;
   u32 sysctl_acq_expires ;
   struct ctl_table_header *sysctl_hdr ;
   struct dst_ops xfrm4_dst_ops ;
   struct dst_ops xfrm6_dst_ops ;
   spinlock_t xfrm_state_lock ;
   spinlock_t xfrm_policy_lock ;
   struct mutex xfrm_cfg_mutex ;
};
#line 79 
struct mpls_route;
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/mpls.h"
struct netns_mpls {
   int ip_ttl_propagate ;
   int default_ttl ;
   size_t platform_labels ;
   struct mpls_route **platform_label ;
   struct ctl_table_header *ctl ;
};
#line 20 
struct can_dev_rcv_lists;
#line 21 
struct can_pkg_stats;
#line 22 
struct can_rcv_lists_stats;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/can.h"
struct netns_can {
   struct proc_dir_entry *proc_dir ;
   struct proc_dir_entry *pde_version ;
   struct proc_dir_entry *pde_stats ;
   struct proc_dir_entry *pde_reset_stats ;
   struct proc_dir_entry *pde_rcvlist_all ;
   struct proc_dir_entry *pde_rcvlist_fil ;
   struct proc_dir_entry *pde_rcvlist_inv ;
   struct proc_dir_entry *pde_rcvlist_sff ;
   struct proc_dir_entry *pde_rcvlist_eff ;
   struct proc_dir_entry *pde_rcvlist_err ;
   struct proc_dir_entry *bcmproc_dir ;
   struct can_dev_rcv_lists *rx_alldev_list ;
   spinlock_t rcvlists_lock ;
   struct timer_list stattimer ;
   struct can_pkg_stats *pkg_stats ;
   struct can_rcv_lists_stats *rcv_lists_stats ;
   struct hlist_head cgw_list ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xdp.h"
struct netns_xdp {
   struct mutex lock ;
   struct hlist_head list ;
};
#line 12 
struct proc_ns_operations;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ns_common.h"
struct ns_common {
   atomic_long_t stashed ;
   struct proc_ns_operations *ops ;
   unsigned int inum ;
};
#line 12 
struct net_generic;
#line 13 
struct uevent_sock;
#line 14 
struct netns_ipvs;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct key_tag;
#line 55 
struct ucounts;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct net {
   refcount_t passive ;
   refcount_t count ;
   spinlock_t rules_mod_lock ;
   unsigned int dev_unreg_count ;
   unsigned int dev_base_seq ;
   int ifindex ;
   spinlock_t nsid_lock ;
   atomic_t fnhe_genid ;
   struct list_head list ;
   struct list_head exit_list ;
   struct llist_node cleanup_list ;
   struct key_tag *key_domain ;
   struct user_namespace *user_ns ;
   struct ucounts *ucounts ;
   struct idr netns_ids ;
   struct ns_common ns ;
   struct list_head dev_base_head ;
   struct proc_dir_entry *proc_net ;
   struct proc_dir_entry *proc_net_stat ;
   struct ctl_table_set sysctls ;
   struct sock *rtnl ;
   struct sock *genl_sock ;
   struct uevent_sock *uevent_sock ;
   struct hlist_head *dev_name_head ;
   struct hlist_head *dev_index_head ;
   struct raw_notifier_head netdev_chain ;
   u32 hash_mix ;
   struct net_device *loopback_dev ;
   struct list_head rules_ops ;
   struct netns_core core ;
   struct netns_mib mib ;
   struct netns_packet packet ;
   struct netns_unix unx ;
   struct netns_nexthop nexthop ;
   struct netns_ipv4 ipv4 ;
   struct netns_ipv6 ipv6 ;
   struct netns_ieee802154_lowpan ieee802154_lowpan ;
   struct netns_sctp sctp ;
   struct netns_dccp dccp ;
   struct netns_nf nf ;
   struct netns_xt xt ;
   struct netns_ct ct ;
   struct netns_nftables nft ;
   struct netns_nf_frag nf_frag ;
   struct ctl_table_header *nf_frag_frags_hdr ;
   struct sock *nfnl ;
   struct sock *nfnl_stash ;
   struct list_head nfnl_acct_list ;
   struct list_head nfct_timeout_list ;
   struct sk_buff_head wext_nlevents ;
   struct net_generic *gen ;
   struct bpf_prog *flow_dissector_prog ;
   struct netns_xfrm xfrm ;
   struct netns_ipvs *ipvs ;
   struct netns_mpls mpls ;
   struct netns_can can ;
   struct netns_xdp xdp ;
   struct sock *crypto_nlsk ;
   struct sock *diag_nlsk ;
} __attribute__((__designated_init__));
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
struct assoc_array_ptr;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
struct assoc_array {
   struct assoc_array_ptr *root ;
   unsigned long nr_leaves_on_tree ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
typedef int32_t key_serial_t;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
typedef uint32_t key_perm_t;
#line 32 
struct key_type;
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key_tag {
   struct callback_head rcu ;
   refcount_t usage ;
   bool removed ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_592 {
   u16 desc_len ;
   char desc[6U] ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_591 {
   struct __anonstruct_592 __anonCompField___anonunion_591_104 ;
   unsigned long x ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct keyring_index_key {
   unsigned long hash ;
   union __anonunion_591 __anonCompField_keyring_index_key_105 ;
   struct key_type *type ;
   struct key_tag *domain_tag ;
   char *description ;
};
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union key_payload {
   void *rcu_data0 ;
   void *data[4U] ;
};
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key_restriction {
   int (*check)(struct key *, struct key_type *, union key_payload *, struct key *) ;
   struct key *key ;
   struct key_type *keytype ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_593 {
   struct list_head graveyard_link ;
   struct rb_node serial_node ;
};
#line 172 
struct key_user;
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_594 {
   time64_t expiry ;
   time64_t revoked_at ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_596 {
   unsigned long hash ;
   unsigned long len_desc ;
   struct key_type *type ;
   struct key_tag *domain_tag ;
   char *description ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_595 {
   struct keyring_index_key index_key ;
   struct __anonstruct_596 __anonCompField___anonunion_595_108 ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_598 {
   struct list_head name_link ;
   struct assoc_array keys ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_597 {
   union key_payload payload ;
   struct __anonstruct_598 __anonCompField___anonunion_597_110 ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key {
   refcount_t usage ;
   key_serial_t serial ;
   union __anonunion_593 __anonCompField_key_106 ;
   struct rw_semaphore sem ;
   struct key_user *user ;
   void *security ;
   union __anonunion_594 __anonCompField_key_107 ;
   time64_t last_used_at ;
   kuid_t uid ;
   kgid_t gid ;
   key_perm_t perm ;
   unsigned short quotalen ;
   unsigned short datalen ;
   short state ;
   unsigned long flags ;
   union __anonunion_595 __anonCompField_key_109 ;
   union __anonunion_597 __anonCompField_key_111 ;
   struct key_restriction *restrict_link ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/user.h"
struct user_struct {
   refcount_t __count ;
   atomic_t processes ;
   atomic_t sigpending ;
   atomic_t fanotify_listeners ;
   atomic_long_t epoll_watches ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   unsigned long unix_inflight ;
   atomic_long_t pipe_bufs ;
   struct hlist_node uidhash_node ;
   kuid_t uid ;
   atomic_long_t locked_vm ;
   struct ratelimit_state ratelimit ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
struct group_info {
   atomic_t usage ;
   int ngroups ;
   kgid_t gid[0U] ;
} __attribute__((__designated_init__));
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
union __anonunion_601 {
   int non_rcu ;
   struct callback_head rcu ;
};
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
struct cred {
   atomic_t usage ;
   atomic_t subscribers ;
   void *put_addr ;
   unsigned int magic ;
   kuid_t uid ;
   kgid_t gid ;
   kuid_t suid ;
   kgid_t sgid ;
   kuid_t euid ;
   kgid_t egid ;
   kuid_t fsuid ;
   kgid_t fsgid ;
   unsigned int securebits ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_bset ;
   kernel_cap_t cap_ambient ;
   unsigned char jit_keyring ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct key *thread_keyring ;
   struct key *request_key_auth ;
   void *security ;
   struct user_struct *user ;
   struct user_namespace *user_ns ;
   struct group_info *group_info ;
   union __anonunion_601 __anonCompField_cred_112 ;
} __attribute__((__designated_init__));
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seq_file.h"
struct seq_file {
   char *buf ;
   size_t size ;
   size_t from ;
   size_t count ;
   size_t pad_until ;
   loff_t index ;
   loff_t read_pos ;
   u64 version ;
   struct mutex lock ;
   struct seq_operations *op ;
   int poll_event ;
   struct file *file ;
   void *private ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seq_file.h"
struct seq_operations {
   void *(*start)(struct seq_file *, loff_t *) ;
   void (*stop)(struct seq_file *, void *) ;
   void *(*next)(struct seq_file *, void *, loff_t *) ;
   int (*show)(struct seq_file *, void *) ;
};
#line 275  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct __anonstruct_possible_net_t_602 {
   struct net *net ;
};
#line 275  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
typedef struct __anonstruct_possible_net_t_602 possible_net_t;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_ets {
   __u8 willing ;
   __u8 ets_cap ;
   __u8 cbs ;
   __u8 tc_tx_bw[8U] ;
   __u8 tc_rx_bw[8U] ;
   __u8 tc_tsa[8U] ;
   __u8 prio_tc[8U] ;
   __u8 tc_reco_bw[8U] ;
   __u8 tc_reco_tsa[8U] ;
   __u8 reco_prio_tc[8U] ;
};
#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_maxrate {
   __u64 tc_maxrate[8U] ;
};
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_qcn {
   __u8 rpg_enable[8U] ;
   __u32 rppp_max_rps[8U] ;
   __u32 rpg_time_reset[8U] ;
   __u32 rpg_byte_reset[8U] ;
   __u32 rpg_threshold[8U] ;
   __u32 rpg_max_rate[8U] ;
   __u32 rpg_ai_rate[8U] ;
   __u32 rpg_hai_rate[8U] ;
   __u32 rpg_gd[8U] ;
   __u32 rpg_min_dec_fac[8U] ;
   __u32 rpg_min_rate[8U] ;
   __u32 cndd_state_machine[8U] ;
};
#line 141  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_qcn_stats {
   __u64 rppp_rp_centiseconds[8U] ;
   __u32 rppp_created_rps[8U] ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_pfc {
   __u8 pfc_cap ;
   __u8 pfc_en ;
   __u8 mbc ;
   __u16 delay ;
   __u64 requests[8U] ;
   __u64 indications[8U] ;
};
#line 168  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcbnl_buffer {
   __u8 prio2buffer[8U] ;
   __u32 buffer_size[8U] ;
   __u32 total_size ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct cee_pg {
   __u8 willing ;
   __u8 error ;
   __u8 pg_en ;
   __u8 tcs_supported ;
   __u8 pg_bw[8U] ;
   __u8 prio_pg[8U] ;
};
#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct cee_pfc {
   __u8 willing ;
   __u8 error ;
   __u8 pfc_en ;
   __u8 tcs_supported ;
};
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcb_app {
   __u8 selector ;
   __u8 priority ;
   __u16 protocol ;
};
#line 259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcb_peer_app_info {
   __u8 willing ;
   __u8 error ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dcbnl.h"
struct dcbnl_rtnl_ops {
   int (*ieee_getets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_setets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_getmaxrate)(struct net_device *, struct ieee_maxrate *) ;
   int (*ieee_setmaxrate)(struct net_device *, struct ieee_maxrate *) ;
   int (*ieee_getqcn)(struct net_device *, struct ieee_qcn *) ;
   int (*ieee_setqcn)(struct net_device *, struct ieee_qcn *) ;
   int (*ieee_getqcnstats)(struct net_device *, struct ieee_qcn_stats *) ;
   int (*ieee_getpfc)(struct net_device *, struct ieee_pfc *) ;
   int (*ieee_setpfc)(struct net_device *, struct ieee_pfc *) ;
   int (*ieee_getapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_setapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_delapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_peer_getets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_peer_getpfc)(struct net_device *, struct ieee_pfc *) ;
   u8 (*getstate)(struct net_device *) ;
   u8 (*setstate)(struct net_device *, u8 ) ;
   void (*getpermhwaddr)(struct net_device *, u8 *) ;
   void (*setpgtccfgtx)(struct net_device *, int , u8 , u8 , u8 , u8 ) ;
   void (*setpgbwgcfgtx)(struct net_device *, int , u8 ) ;
   void (*setpgtccfgrx)(struct net_device *, int , u8 , u8 , u8 , u8 ) ;
   void (*setpgbwgcfgrx)(struct net_device *, int , u8 ) ;
   void (*getpgtccfgtx)(struct net_device *, int , u8 *, u8 *, u8 *, u8 *) ;
   void (*getpgbwgcfgtx)(struct net_device *, int , u8 *) ;
   void (*getpgtccfgrx)(struct net_device *, int , u8 *, u8 *, u8 *, u8 *) ;
   void (*getpgbwgcfgrx)(struct net_device *, int , u8 *) ;
   void (*setpfccfg)(struct net_device *, int , u8 ) ;
   void (*getpfccfg)(struct net_device *, int , u8 *) ;
   u8 (*setall)(struct net_device *) ;
   u8 (*getcap)(struct net_device *, int , u8 *) ;
   int (*getnumtcs)(struct net_device *, int , u8 *) ;
   int (*setnumtcs)(struct net_device *, int , u8 ) ;
   u8 (*getpfcstate)(struct net_device *) ;
   void (*setpfcstate)(struct net_device *, u8 ) ;
   void (*getbcncfg)(struct net_device *, int , u32 *) ;
   void (*setbcncfg)(struct net_device *, int , u32 ) ;
   void (*getbcnrp)(struct net_device *, int , u8 *) ;
   void (*setbcnrp)(struct net_device *, int , u8 ) ;
   int (*setapp)(struct net_device *, u8 , u16 , u8 ) ;
   int (*getapp)(struct net_device *, u8 , u16 ) ;
   u8 (*getfeatcfg)(struct net_device *, int , u8 *) ;
   u8 (*setfeatcfg)(struct net_device *, int , u8 ) ;
   u8 (*getdcbx)(struct net_device *) ;
   u8 (*setdcbx)(struct net_device *, u8 ) ;
   int (*peer_getappinfo)(struct net_device *, struct dcb_peer_app_info *, u16 *) ;
   int (*peer_getapptable)(struct net_device *, struct dcb_app *) ;
   int (*cee_peer_getpg)(struct net_device *, struct cee_pg *) ;
   int (*cee_peer_getpfc)(struct net_device *, struct cee_pfc *) ;
   int (*dcbnl_getbuffer)(struct net_device *, struct dcbnl_buffer *) ;
   int (*dcbnl_setbuffer)(struct net_device *, struct dcbnl_buffer *) ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/taskstats.h"
struct taskstats {
   __u16 version ;
   __u32 ac_exitcode ;
   __u8 ac_flag ;
   __u8 ac_nice ;
   __u64 cpu_count ;
   __u64 cpu_delay_total ;
   __u64 blkio_count ;
   __u64 blkio_delay_total ;
   __u64 swapin_count ;
   __u64 swapin_delay_total ;
   __u64 cpu_run_real_total ;
   __u64 cpu_run_virtual_total ;
   char ac_comm[32U] ;
   __u8 ac_sched ;
   __u8 ac_pad[3U] ;
   __u32 ac_uid ;
   __u32 ac_gid ;
   __u32 ac_pid ;
   __u32 ac_ppid ;
   __u32 ac_btime ;
   __u64 ac_etime ;
   __u64 ac_utime ;
   __u64 ac_stime ;
   __u64 ac_minflt ;
   __u64 ac_majflt ;
   __u64 coremem ;
   __u64 virtmem ;
   __u64 hiwater_rss ;
   __u64 hiwater_vm ;
   __u64 read_char ;
   __u64 write_char ;
   __u64 read_syscalls ;
   __u64 write_syscalls ;
   __u64 read_bytes ;
   __u64 write_bytes ;
   __u64 cancelled_write_bytes ;
   __u64 nvcsw ;
   __u64 nivcsw ;
   __u64 ac_utimescaled ;
   __u64 ac_stimescaled ;
   __u64 cpu_scaled_run_real_total ;
   __u64 freepages_count ;
   __u64 freepages_delay_total ;
   __u64 thrashing_count ;
   __u64 thrashing_delay_total ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/cgroupstats.h"
struct mnt_namespace;
#line 60 
struct uts_namespace;
#line 61 
struct ipc_namespace;
#line 62 
struct cgroup_namespace;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nsproxy.h"
struct nsproxy {
   atomic_t count ;
   struct uts_namespace *uts_ns ;
   struct ipc_namespace *ipc_ns ;
   struct mnt_namespace *mnt_ns ;
   struct pid_namespace *pid_ns_for_children ;
   struct net *net_ns ;
   struct cgroup_namespace *cgroup_ns ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct uid_gid_extent {
   u32 first ;
   u32 lower_first ;
   u32 count ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct __anonstruct_604 {
   struct uid_gid_extent *forward ;
   struct uid_gid_extent *reverse ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
union __anonunion_603 {
   struct uid_gid_extent extent[5U] ;
   struct __anonstruct_604 __anonCompField___anonunion_603_113 ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct uid_gid_map {
   u32 nr_extents ;
   union __anonunion_603 __anonCompField_uid_gid_map_114 ;
};
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct user_namespace {
   struct uid_gid_map uid_map ;
   struct uid_gid_map gid_map ;
   struct uid_gid_map projid_map ;
   atomic_t count ;
   struct user_namespace *parent ;
   int level ;
   kuid_t owner ;
   kgid_t group ;
   struct ns_common ns ;
   unsigned long flags ;
   struct list_head keyring_name_list ;
   struct key *user_keyring_register ;
   struct rw_semaphore keyring_sem ;
   struct key *persistent_keyring_register ;
   struct work_struct work ;
   struct ctl_table_set set ;
   struct ctl_table_header *sysctls ;
   struct ucounts *ucounts ;
   int ucount_max[9U] ;
} __attribute__((__designated_init__));
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct ucounts {
   struct hlist_node node ;
   struct user_namespace *ns ;
   kuid_t uid ;
   int count ;
   atomic_t ucount[9U] ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_insn {
   __u8 code ;
   __u8 dst_reg : 4 ;
   __u8 src_reg : 4 ;
   __s16 off ;
   __s32 imm ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_cgroup_storage_key {
   __u64 cgroup_inode_id ;
   __u32 attach_type ;
};
#line 110 
enum bpf_map_type {
    BPF_MAP_TYPE_UNSPEC = 0,
    BPF_MAP_TYPE_HASH = 1,
    BPF_MAP_TYPE_ARRAY = 2,
    BPF_MAP_TYPE_PROG_ARRAY = 3,
    BPF_MAP_TYPE_PERF_EVENT_ARRAY = 4,
    BPF_MAP_TYPE_PERCPU_HASH = 5,
    BPF_MAP_TYPE_PERCPU_ARRAY = 6,
    BPF_MAP_TYPE_STACK_TRACE = 7,
    BPF_MAP_TYPE_CGROUP_ARRAY = 8,
    BPF_MAP_TYPE_LRU_HASH = 9,
    BPF_MAP_TYPE_LRU_PERCPU_HASH = 10,
    BPF_MAP_TYPE_LPM_TRIE = 11,
    BPF_MAP_TYPE_ARRAY_OF_MAPS = 12,
    BPF_MAP_TYPE_HASH_OF_MAPS = 13,
    BPF_MAP_TYPE_DEVMAP = 14,
    BPF_MAP_TYPE_SOCKMAP = 15,
    BPF_MAP_TYPE_CPUMAP = 16,
    BPF_MAP_TYPE_XSKMAP = 17,
    BPF_MAP_TYPE_SOCKHASH = 18,
    BPF_MAP_TYPE_CGROUP_STORAGE = 19,
    BPF_MAP_TYPE_REUSEPORT_SOCKARRAY = 20,
    BPF_MAP_TYPE_PERCPU_CGROUP_STORAGE = 21,
    BPF_MAP_TYPE_QUEUE = 22,
    BPF_MAP_TYPE_STACK = 23,
    BPF_MAP_TYPE_SK_STORAGE = 24,
    BPF_MAP_TYPE_DEVMAP_HASH = 25
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_606 {
   __u32 map_type ;
   __u32 key_size ;
   __u32 value_size ;
   __u32 max_entries ;
   __u32 map_flags ;
   __u32 inner_map_fd ;
   __u32 numa_node ;
   char map_name[16U] ;
   __u32 map_ifindex ;
   __u32 btf_fd ;
   __u32 btf_key_type_id ;
   __u32 btf_value_type_id ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union __anonunion_608 {
   __u64 value ;
   __u64 next_key ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_607 {
   __u32 map_fd ;
   __u64 key ;
   union __anonunion_608 __anonCompField___anonstruct_607_117 ;
   __u64 flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_609 {
   __u32 prog_type ;
   __u32 insn_cnt ;
   __u64 insns ;
   __u64 license ;
   __u32 log_level ;
   __u32 log_size ;
   __u64 log_buf ;
   __u32 kern_version ;
   __u32 prog_flags ;
   char prog_name[16U] ;
   __u32 prog_ifindex ;
   __u32 expected_attach_type ;
   __u32 prog_btf_fd ;
   __u32 func_info_rec_size ;
   __u64 func_info ;
   __u32 func_info_cnt ;
   __u32 line_info_rec_size ;
   __u64 line_info ;
   __u32 line_info_cnt ;
   __u32 attach_btf_id ;
   __u32 attach_prog_fd ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_610 {
   __u64 pathname ;
   __u32 bpf_fd ;
   __u32 file_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_611 {
   __u32 target_fd ;
   __u32 attach_bpf_fd ;
   __u32 attach_type ;
   __u32 attach_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_test_612 {
   __u32 prog_fd ;
   __u32 retval ;
   __u32 data_size_in ;
   __u32 data_size_out ;
   __u64 data_in ;
   __u64 data_out ;
   __u32 repeat ;
   __u32 duration ;
   __u32 ctx_size_in ;
   __u32 ctx_size_out ;
   __u64 ctx_in ;
   __u64 ctx_out ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union __anonunion_614 {
   __u32 start_id ;
   __u32 prog_id ;
   __u32 map_id ;
   __u32 btf_id ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_613 {
   union __anonunion_614 __anonCompField___anonstruct_613_122 ;
   __u32 next_id ;
   __u32 open_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_info_615 {
   __u32 bpf_fd ;
   __u32 info_len ;
   __u64 info ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_query_616 {
   __u32 target_fd ;
   __u32 attach_type ;
   __u32 query_flags ;
   __u32 attach_flags ;
   __u64 prog_ids ;
   __u32 prog_cnt ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_raw_tracepoint_617 {
   __u64 name ;
   __u32 prog_fd ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_618 {
   __u64 btf ;
   __u64 btf_log_buf ;
   __u32 btf_size ;
   __u32 btf_log_size ;
   __u32 btf_log_level ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_task_fd_query_619 {
   __u32 pid ;
   __u32 fd ;
   __u32 flags ;
   __u32 buf_len ;
   __u64 buf ;
   __u32 prog_id ;
   __u32 fd_type ;
   __u64 probe_offset ;
   __u64 probe_addr ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union bpf_attr {
   struct __anonstruct_606 __anonCompField_bpf_attr_116 ;
   struct __anonstruct_607 __anonCompField_bpf_attr_118 ;
   struct __anonstruct_609 __anonCompField_bpf_attr_119 ;
   struct __anonstruct_610 __anonCompField_bpf_attr_120 ;
   struct __anonstruct_611 __anonCompField_bpf_attr_121 ;
   struct __anonstruct_test_612 test ;
   struct __anonstruct_613 __anonCompField_bpf_attr_123 ;
   struct __anonstruct_info_615 info ;
   struct __anonstruct_query_616 query ;
   struct __anonstruct_raw_tracepoint_617 raw_tracepoint ;
   struct __anonstruct_618 __anonCompField_bpf_attr_124 ;
   struct __anonstruct_task_fd_query_619 task_fd_query ;
} __attribute__((__aligned__(8)));
#line 3653  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_func_info {
   __u32 insn_off ;
   __u32 type_id ;
};
#line 3661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_line_info {
   __u32 insn_off ;
   __u32 file_name_off ;
   __u32 line_off ;
   __u32 line_col ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/file.h"
struct bpf_prog_aux;
#line 96 
struct bpf_map;
#line 97 
struct btf;
#line 98 
struct btf_type;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_ops {
   int (*map_alloc_check)(union bpf_attr *) ;
   struct bpf_map *(*map_alloc)(union bpf_attr *) ;
   void (*map_release)(struct bpf_map *, struct file *) ;
   void (*map_free)(struct bpf_map *) ;
   int (*map_get_next_key)(struct bpf_map *, void *, void *) ;
   void (*map_release_uref)(struct bpf_map *) ;
   void *(*map_lookup_elem_sys_only)(struct bpf_map *, void *) ;
   void *(*map_lookup_elem)(struct bpf_map *, void *) ;
   int (*map_update_elem)(struct bpf_map *, void *, void *, u64 ) ;
   int (*map_delete_elem)(struct bpf_map *, void *) ;
   int (*map_push_elem)(struct bpf_map *, void *, u64 ) ;
   int (*map_pop_elem)(struct bpf_map *, void *) ;
   int (*map_peek_elem)(struct bpf_map *, void *) ;
   void *(*map_fd_get_ptr)(struct bpf_map *, struct file *, int ) ;
   void (*map_fd_put_ptr)(void *) ;
   u32 (*map_gen_lookup)(struct bpf_map *, struct bpf_insn *) ;
   u32 (*map_fd_sys_lookup_elem)(void *) ;
   void (*map_seq_show_elem)(struct bpf_map *, void *, struct seq_file *) ;
   int (*map_check_btf)(struct bpf_map *, struct btf *, struct btf_type *, struct btf_type *) ;
   int (*map_poke_track)(struct bpf_map *, struct bpf_prog_aux *) ;
   void (*map_poke_untrack)(struct bpf_map *, struct bpf_prog_aux *) ;
   void (*map_poke_run)(struct bpf_map *, u32 , struct bpf_prog *, struct bpf_prog *) ;
   int (*map_direct_value_addr)(struct bpf_map *, u64 *, u32 ) ;
   int (*map_direct_value_meta)(struct bpf_map *, u64 , u32 *) ;
   int (*map_mmap)(struct bpf_map *, struct vm_area_struct *) ;
};
#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_memory {
   u32 pages ;
   struct user_struct *user ;
};
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map {
   struct bpf_map_ops *ops ;
   struct bpf_map *inner_map_meta ;
   void *security ;
   enum bpf_map_type map_type ;
   u32 key_size ;
   u32 value_size ;
   u32 max_entries ;
   u32 map_flags ;
   int spin_lock_off ;
   u32 id ;
   int numa_node ;
   u32 btf_key_type_id ;
   u32 btf_value_type_id ;
   struct btf *btf ;
   struct bpf_map_memory memory ;
   char name[16U] ;
   bool unpriv_array ;
   bool frozen ;
   atomic64_t refcnt ;
   atomic64_t usercnt ;
   struct work_struct work ;
   struct mutex freeze_mutex ;
   u64 writecnt ;
};
#line 151 
struct bpf_offload_dev;
#line 152 
struct bpf_offloaded_map;
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_dev_ops {
   int (*map_get_next_key)(struct bpf_offloaded_map *, void *, void *) ;
   int (*map_lookup_elem)(struct bpf_offloaded_map *, void *, void *) ;
   int (*map_update_elem)(struct bpf_offloaded_map *, void *, void *, u64 ) ;
   int (*map_delete_elem)(struct bpf_offloaded_map *, void *) ;
};
#line 166  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_offloaded_map {
   struct bpf_map map ;
   struct net_device *netdev ;
   struct bpf_map_dev_ops *dev_ops ;
   void *dev_priv ;
   struct list_head offloads ;
};
#line 327  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_ops {
   int (*test_run)(struct bpf_prog *, union bpf_attr *, union bpf_attr *) ;
};
#line 369  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_offload {
   struct bpf_prog *prog ;
   struct net_device *netdev ;
   struct bpf_offload_dev *offdev ;
   void *dev_priv ;
   struct list_head offloads ;
   bool dev_state ;
   bool opt_failed ;
   void *jited_image ;
   u32 jited_len ;
};
#line 394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_stats {
   u64 cnt ;
   u64 nsecs ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 400  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct btf_func_model {
   u8 ret_size ;
   u8 nr_args ;
   u8 arg_size[12U] ;
};
#line 447 
enum bpf_tramp_prog_type {
    BPF_TRAMP_FENTRY = 0,
    BPF_TRAMP_FEXIT = 1,
    BPF_TRAMP_MAX = 2
};
#line 454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct __anonstruct_func_646 {
   struct btf_func_model model ;
   void *addr ;
   bool ftrace_managed ;
};
#line 454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_trampoline {
   struct hlist_node hlist ;
   struct mutex mutex ;
   refcount_t refcnt ;
   u64 key ;
   struct __anonstruct_func_646 func ;
   struct hlist_head progs_hlist[2U] ;
   int progs_cnt[2U] ;
   void *image ;
   u64 selector ;
};
#line 495  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_func_info_aux {
   bool unreliable ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct __anonstruct_tail_call_648 {
   struct bpf_map *map ;
   u32 key ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
union __anonunion_647 {
   struct __anonstruct_tail_call_648 tail_call ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_jit_poke_descriptor {
   void *ip ;
   union __anonunion_647 __anonCompField_bpf_jit_poke_descriptor_149 ;
   bool ip_stable ;
   u8 adj_off ;
   u16 reason ;
};
#line 517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
union __anonunion_649 {
   struct work_struct work ;
   struct callback_head rcu ;
};
#line 517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_aux {
   atomic64_t refcnt ;
   u32 used_map_cnt ;
   u32 max_ctx_offset ;
   u32 max_pkt_offset ;
   u32 max_tp_access ;
   u32 stack_depth ;
   u32 id ;
   u32 func_cnt ;
   u32 func_idx ;
   u32 attach_btf_id ;
   struct bpf_prog *linked_prog ;
   bool verifier_zext ;
   bool offload_requested ;
   bool attach_btf_trace ;
   bool func_proto_unreliable ;
   enum bpf_tramp_prog_type trampoline_prog_type ;
   struct bpf_trampoline *trampoline ;
   struct hlist_node tramp_hlist ;
   struct btf_type *attach_func_proto ;
   char *attach_func_name ;
   struct bpf_prog **func ;
   void *jit_data ;
   struct bpf_jit_poke_descriptor *poke_tab ;
   u32 size_poke_tab ;
   struct latch_tree_node ksym_tnode ;
   struct list_head ksym_lnode ;
   struct bpf_prog_ops *ops ;
   struct bpf_map **used_maps ;
   struct bpf_prog *prog ;
   struct user_struct *user ;
   u64 load_time ;
   struct bpf_map *cgroup_storage[2U] ;
   char name[16U] ;
   void *security ;
   struct bpf_prog_offload *offload ;
   struct btf *btf ;
   struct bpf_func_info *func_info ;
   struct bpf_func_info_aux *func_info_aux ;
   struct bpf_line_info *linfo ;
   void **jited_linfo ;
   u32 func_info_cnt ;
   u32 nr_linfo ;
   u32 linfo_idx ;
   u32 num_exentries ;
   struct exception_table_entry *extable ;
   struct bpf_prog_stats *stats ;
   union __anonunion_649 __anonCompField_bpf_prog_aux_150 ;
};
#line 686 
struct bpf_cgroup_storage;
#line 686  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_array_item {
   struct bpf_prog *prog ;
   struct bpf_cgroup_storage *cgroup_storage[2U] ;
};
#line 691  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_array {
   struct callback_head rcu ;
   struct bpf_prog_array_item items[0U] ;
};
#line 1335 
struct cgroup;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_cgroup_storage_map;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_storage_buffer {
   struct callback_head rcu ;
   char data[0U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
union __anonunion_651 {
   struct bpf_storage_buffer *buf ;
   void *percpu_buf ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_cgroup_storage {
   union __anonunion_651 __anonCompField_bpf_cgroup_storage_152 ;
   struct bpf_cgroup_storage_map *map ;
   struct bpf_cgroup_storage_key key ;
   struct list_head list ;
   struct rb_node node ;
   struct callback_head rcu ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct cgroup_bpf {
   struct bpf_prog_array *effective[26U] ;
   struct list_head progs[26U] ;
   u32 flags[26U] ;
   struct bpf_prog_array *inactive ;
   struct percpu_ref refcnt ;
   struct work_struct release_work ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_work;
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_worker {
   unsigned int flags ;
   raw_spinlock_t lock ;
   struct list_head work_list ;
   struct list_head delayed_work_list ;
   struct task_struct *task ;
   struct kthread_work *current_work ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_work {
   struct list_head node ;
   void (*func)(struct kthread_work *) ;
   struct kthread_worker *worker ;
   int canceling ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_delayed_work {
   struct kthread_work work ;
   struct timer_list timer ;
};
#line 199 
struct cgroup_subsys_state;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/psi_types.h"
struct psi_group_cpu {
   seqcount_t seq ;
   unsigned int tasks[3U] ;
   u32 state_mask ;
   u32 times[6U] ;
   u64 state_start ;
   u32 times_prev[2U][6U] ;
};
#line 96 
struct psi_group;
#line 128  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/psi_types.h"
struct psi_group {
   struct mutex avgs_lock ;
   struct psi_group_cpu *pcpu ;
   u64 avg_total[5U] ;
   u64 avg_last_update ;
   u64 avg_next_update ;
   struct delayed_work avgs_work ;
   u64 total[2U][5U] ;
   unsigned long avg[5U][3U] ;
   atomic_t poll_scheduled ;
   struct kthread_worker *poll_kworker ;
   struct kthread_delayed_work poll_work ;
   struct mutex trigger_lock ;
   struct list_head triggers ;
   u32 nr_triggers[5U] ;
   u32 poll_states ;
   u64 poll_min_period ;
   u64 polling_total[5U] ;
   u64 polling_next_update ;
   u64 polling_until ;
};
#line 166 
struct cgroup_root;
#line 167 
struct cgroup_subsys;
#line 168 
struct cgroup_taskset;
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_file {
   struct kernfs_node *kn ;
   unsigned long notified_at ;
   struct timer_list notify_timer ;
};
#line 133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_subsys_state {
   struct cgroup *cgroup ;
   struct cgroup_subsys *ss ;
   struct percpu_ref refcnt ;
   struct list_head sibling ;
   struct list_head children ;
   struct list_head rstat_css_node ;
   int id ;
   unsigned int flags ;
   u64 serial_nr ;
   atomic_t online_cnt ;
   struct work_struct destroy_work ;
   struct rcu_work destroy_rwork ;
   struct cgroup_subsys_state *parent ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct css_set {
   struct cgroup_subsys_state *subsys[14U] ;
   refcount_t refcount ;
   struct css_set *dom_cset ;
   struct cgroup *dfl_cgrp ;
   int nr_tasks ;
   struct list_head tasks ;
   struct list_head mg_tasks ;
   struct list_head dying_tasks ;
   struct list_head task_iters ;
   struct list_head e_cset_node[14U] ;
   struct list_head threaded_csets ;
   struct list_head threaded_csets_node ;
   struct hlist_node hlist ;
   struct list_head cgrp_links ;
   struct list_head mg_preload_node ;
   struct list_head mg_node ;
   struct cgroup *mg_src_cgrp ;
   struct cgroup *mg_dst_cgrp ;
   struct css_set *mg_dst_cset ;
   bool dead ;
   struct callback_head callback_head ;
};
#line 279  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_base_stat {
   struct task_cputime cputime ;
};
#line 303  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_rstat_cpu {
   struct u64_stats_sync bsync ;
   struct cgroup_base_stat bstat ;
   struct cgroup_base_stat last_bstat ;
   struct cgroup *updated_children ;
   struct cgroup *updated_next ;
};
#line 332  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_freezer_state {
   bool freeze ;
   int e_freeze ;
   int nr_frozen_descendants ;
   int nr_frozen_tasks ;
};
#line 351  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup {
   struct cgroup_subsys_state self ;
   unsigned long flags ;
   int level ;
   int max_depth ;
   int nr_descendants ;
   int nr_dying_descendants ;
   int max_descendants ;
   int nr_populated_csets ;
   int nr_populated_domain_children ;
   int nr_populated_threaded_children ;
   int nr_threaded_children ;
   struct kernfs_node *kn ;
   struct cgroup_file procs_file ;
   struct cgroup_file events_file ;
   u16 subtree_control ;
   u16 subtree_ss_mask ;
   u16 old_subtree_control ;
   u16 old_subtree_ss_mask ;
   struct cgroup_subsys_state *subsys[14U] ;
   struct cgroup_root *root ;
   struct list_head cset_links ;
   struct list_head e_csets[14U] ;
   struct cgroup *dom_cgrp ;
   struct cgroup *old_dom_cgrp ;
   struct cgroup_rstat_cpu *rstat_cpu ;
   struct list_head rstat_css_list ;
   struct cgroup_base_stat last_bstat ;
   struct cgroup_base_stat bstat ;
   struct prev_cputime prev_cputime ;
   struct list_head pidlists ;
   struct mutex pidlist_mutex ;
   wait_queue_head_t offline_waitq ;
   struct work_struct release_agent_work ;
   struct psi_group psi ;
   struct cgroup_bpf bpf ;
   atomic_t congestion_count ;
   struct cgroup_freezer_state freezer ;
   u64 ancestor_ids[] ;
};
#line 489  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_root {
   struct kernfs_root *kf_root ;
   unsigned int subsys_mask ;
   int hierarchy_id ;
   struct cgroup cgrp ;
   u64 cgrp_ancestor_id_storage ;
   atomic_t nr_cgrps ;
   struct list_head root_list ;
   unsigned int flags ;
   char release_agent_path[4096U] ;
   char name[64U] ;
};
#line 527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cftype {
   char name[64U] ;
   unsigned long private ;
   size_t max_write_len ;
   unsigned int flags ;
   unsigned int file_offset ;
   struct cgroup_subsys *ss ;
   struct list_head node ;
   struct kernfs_ops *kf_ops ;
   int (*open)(struct kernfs_open_file *) ;
   void (*release)(struct kernfs_open_file *) ;
   u64 (*read_u64)(struct cgroup_subsys_state *, struct cftype *) ;
   s64 (*read_s64)(struct cgroup_subsys_state *, struct cftype *) ;
   int (*seq_show)(struct seq_file *, void *) ;
   void *(*seq_start)(struct seq_file *, loff_t *) ;
   void *(*seq_next)(struct seq_file *, void *, loff_t *) ;
   void (*seq_stop)(struct seq_file *, void *) ;
   int (*write_u64)(struct cgroup_subsys_state *, struct cftype *, u64 ) ;
   int (*write_s64)(struct cgroup_subsys_state *, struct cftype *, s64 ) ;
   ssize_t (*write)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   __poll_t (*poll)(struct kernfs_open_file *, struct poll_table_struct *) ;
   struct lock_class_key lockdep_key ;
};
#line 616  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_subsys {
   struct cgroup_subsys_state *(*css_alloc)(struct cgroup_subsys_state *) ;
   int (*css_online)(struct cgroup_subsys_state *) ;
   void (*css_offline)(struct cgroup_subsys_state *) ;
   void (*css_released)(struct cgroup_subsys_state *) ;
   void (*css_free)(struct cgroup_subsys_state *) ;
   void (*css_reset)(struct cgroup_subsys_state *) ;
   void (*css_rstat_flush)(struct cgroup_subsys_state *, int ) ;
   int (*css_extra_stat_show)(struct seq_file *, struct cgroup_subsys_state *) ;
   int (*can_attach)(struct cgroup_taskset *) ;
   void (*cancel_attach)(struct cgroup_taskset *) ;
   void (*attach)(struct cgroup_taskset *) ;
   void (*post_attach)(void) ;
   int (*can_fork)(struct task_struct *) ;
   void (*cancel_fork)(struct task_struct *) ;
   void (*fork)(struct task_struct *) ;
   void (*exit)(struct task_struct *) ;
   void (*release)(struct task_struct *) ;
   void (*bind)(struct cgroup_subsys_state *) ;
   bool early_init : 1 ;
   bool implicit_on_dfl : 1 ;
   bool threaded : 1 ;
   bool broken_hierarchy : 1 ;
   bool warned_broken_hierarchy : 1 ;
   int id ;
   char *name ;
   char *legacy_name ;
   struct cgroup_root *root ;
   struct idr css_idr ;
   struct list_head cfts ;
   struct cftype *dfl_cftypes ;
   struct cftype *legacy_cftypes ;
   unsigned int depends_on ;
};
#line 848  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup.h"
struct cgroup_namespace {
   refcount_t count ;
   struct ns_common ns ;
   struct user_namespace *user_ns ;
   struct ucounts *ucounts ;
   struct css_set *root_cset ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netprio_cgroup.h"
struct netprio_map {
   struct callback_head rcu ;
   u32 priomap_len ;
   u32 priomap[] ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_mem_info {
   u32 type ;
   u32 id ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_rxq_info {
   struct net_device *dev ;
   u32 queue_index ;
   u32 reg_state ;
   struct xdp_mem_info mem ;
} __attribute__((__aligned__(64)));
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_frame {
   void *data ;
   u16 len ;
   u16 headroom ;
   u16 metasize ;
   struct xdp_mem_info mem ;
   struct net_device *dev_rx ;
};
#line 175 
struct netdev_bpf;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/security.h"
struct xfrm_state;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct sighand_struct {
   spinlock_t siglock ;
   refcount_t count ;
   wait_queue_head_t signalfd_wqh ;
   struct k_sigaction action[64U] ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   u64 ac_utime ;
   u64 ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct cpu_itimer {
   u64 expires ;
   u64 incr ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct task_cputime_atomic {
   atomic64_t utime ;
   atomic64_t stime ;
   atomic64_t sum_exec_runtime ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct thread_group_cputimer {
   struct task_cputime_atomic cputime_atomic ;
};
#line 80 
struct tty_struct;
#line 80 
struct autogroup;
#line 80 
struct tty_audit_buf;
#line 80  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct signal_struct {
   refcount_t sigcnt ;
   atomic_t live ;
   int nr_threads ;
   struct list_head thread_head ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   struct hlist_head multiprocess ;
   int group_exit_code ;
   int notify_count ;
   struct task_struct *group_exit_task ;
   int group_stop_count ;
   unsigned int flags ;
   unsigned int is_child_subreaper : 1 ;
   unsigned int has_child_subreaper : 1 ;
   int posix_timer_id ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   ktime_t it_real_incr ;
   struct cpu_itimer it[2U] ;
   struct thread_group_cputimer cputimer ;
   struct posix_cputimers posix_cputimers ;
   struct pid *pids[4U] ;
   struct pid *tty_old_pgrp ;
   int leader ;
   struct tty_struct *tty ;
   struct autogroup *autogroup ;
   seqlock_t stats_lock ;
   u64 utime ;
   u64 stime ;
   u64 cutime ;
   u64 cstime ;
   u64 gtime ;
   u64 cgtime ;
   struct prev_cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   unsigned long maxrss ;
   unsigned long cmaxrss ;
   struct task_io_accounting ioac ;
   unsigned long long sum_sched_runtime ;
   struct rlimit rlim[16U] ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   struct tty_audit_buf *tty_audit_buf ;
   bool oom_flag_origin ;
   short oom_score_adj ;
   short oom_score_adj_min ;
   struct mm_struct *oom_mm ;
   struct mutex cred_guard_mutex ;
} __attribute__((__designated_init__));
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netlink.h"
struct nlmsghdr {
   __u32 nlmsg_len ;
   __u16 nlmsg_type ;
   __u16 nlmsg_flags ;
   __u32 nlmsg_seq ;
   __u32 nlmsg_pid ;
};
#line 211  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netlink.h"
struct nlattr {
   __u16 nla_len ;
   __u16 nla_type ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
struct netlink_ext_ack {
   char *_msg ;
   struct nlattr *bad_attr ;
   u8 cookie[20U] ;
   u8 cookie_len ;
};
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
union __anonunion_676 {
   u8 ctx[48U] ;
   long args[6U] ;
};
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
struct netlink_callback {
   struct sk_buff *skb ;
   struct nlmsghdr *nlh ;
   int (*dump)(struct sk_buff *, struct netlink_callback *) ;
   int (*done)(struct netlink_callback *) ;
   void *data ;
   struct module *module ;
   struct netlink_ext_ack *extack ;
   u16 family ;
   u16 min_dump_alloc ;
   bool strict_check ;
   u16 answer_flags ;
   unsigned int prev_seq ;
   unsigned int seq ;
   union __anonunion_676 __anonCompField_netlink_callback_155 ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/neighbour.h"
struct ndmsg {
   __u8 ndm_family ;
   __u8 ndm_pad1 ;
   __u16 ndm_pad2 ;
   __s32 ndm_ifindex ;
   __u16 ndm_state ;
   __u8 ndm_flags ;
   __u8 ndm_type ;
};
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_link.h"
struct rtnl_link_stats64 {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 rx_errors ;
   __u64 tx_errors ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
   __u64 multicast ;
   __u64 collisions ;
   __u64 rx_length_errors ;
   __u64 rx_over_errors ;
   __u64 rx_crc_errors ;
   __u64 rx_frame_errors ;
   __u64 rx_fifo_errors ;
   __u64 rx_missed_errors ;
   __u64 tx_aborted_errors ;
   __u64 tx_carrier_errors ;
   __u64 tx_fifo_errors ;
   __u64 tx_heartbeat_errors ;
   __u64 tx_window_errors ;
   __u64 rx_compressed ;
   __u64 tx_compressed ;
   __u64 rx_nohandler ;
};
#line 753  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_link.h"
struct ifla_vf_guid {
   __u32 vf ;
   __u64 guid ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_link.h"
struct ifla_vf_stats {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 broadcast ;
   __u64 multicast ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_link.h"
struct ifla_vf_info {
   __u32 vf ;
   __u8 mac[32U] ;
   __u32 vlan ;
   __u32 qos ;
   __u32 spoofchk ;
   __u32 linkstate ;
   __u32 min_tx_rate ;
   __u32 max_tx_rate ;
   __u32 rss_query_en ;
   __u32 trusted ;
   __be16 vlan_proto ;
};
#line 118  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hashtable.h"
struct netpoll_info;
#line 119 
struct phy_device;
#line 120 
struct dsa_port;
#line 121 
struct sfp_bus;
#line 122 
struct wireless_dev;
#line 123 
struct wpan_dev;
#line 124 
struct mpls_dev;
#line 125 
struct udp_tunnel_info;
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
enum netdev_tx {
    __NETDEV_TX_MIN = -2147483648,
    NETDEV_TX_OK = 0,
    NETDEV_TX_BUSY = 16
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef enum netdev_tx netdev_tx_t;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device_stats {
   unsigned long rx_packets ;
   unsigned long tx_packets ;
   unsigned long rx_bytes ;
   unsigned long tx_bytes ;
   unsigned long rx_errors ;
   unsigned long tx_errors ;
   unsigned long rx_dropped ;
   unsigned long tx_dropped ;
   unsigned long multicast ;
   unsigned long collisions ;
   unsigned long rx_length_errors ;
   unsigned long rx_over_errors ;
   unsigned long rx_crc_errors ;
   unsigned long rx_frame_errors ;
   unsigned long rx_fifo_errors ;
   unsigned long rx_missed_errors ;
   unsigned long tx_aborted_errors ;
   unsigned long tx_carrier_errors ;
   unsigned long tx_fifo_errors ;
   unsigned long tx_heartbeat_errors ;
   unsigned long tx_window_errors ;
   unsigned long rx_compressed ;
   unsigned long tx_compressed ;
};
#line 217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_hw_addr_list {
   struct list_head list ;
   int count ;
};
#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct hh_cache {
   unsigned int hh_len ;
   seqlock_t hh_lock ;
   unsigned long hh_data[16U] ;
};
#line 263  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct header_ops {
   int (*create)(struct sk_buff *, struct net_device *, unsigned short , void *, void *, unsigned int ) ;
   int (*parse)(struct sk_buff *, unsigned char *) ;
   int (*cache)(struct neighbour *, struct hh_cache *, __be16 ) ;
   void (*cache_update)(struct hh_cache *, struct net_device *, unsigned char *) ;
   bool (*validate)(char *, unsigned int ) ;
   __be16 (*parse_protocol)(struct sk_buff *) ;
};
#line 302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct gro_list {
   struct list_head list ;
   int count ;
};
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct napi_struct {
   struct list_head poll_list ;
   unsigned long state ;
   int weight ;
   unsigned long gro_bitmask ;
   int (*poll)(struct napi_struct *, int ) ;
   int poll_owner ;
   struct net_device *dev ;
   struct gro_list gro_hash[8U] ;
   struct sk_buff *skb ;
   struct list_head rx_list ;
   int rx_count ;
   struct hrtimer timer ;
   struct list_head dev_list ;
   struct hlist_node napi_hash_node ;
   unsigned int napi_id ;
};
#line 372 
enum rx_handler_result {
    RX_HANDLER_CONSUMED = 0,
    RX_HANDLER_ANOTHER = 1,
    RX_HANDLER_EXACT = 2,
    RX_HANDLER_PASS = 3
};
#line 379  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef enum rx_handler_result rx_handler_result_t;
#line 421  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef rx_handler_result_t rx_handler_func_t(struct sk_buff **);
#line 589 
struct xdp_umem;
#line 589  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_queue {
   struct net_device *dev ;
   struct Qdisc *qdisc ;
   struct Qdisc *qdisc_sleeping ;
   struct kobject kobj ;
   int numa_node ;
   unsigned long tx_maxrate ;
   unsigned long trans_timeout ;
   struct net_device *sb_dev ;
   struct xdp_umem *umem ;
   spinlock_t _xmit_lock ;
   int xmit_lock_owner ;
   unsigned long trans_start ;
   unsigned long state ;
   struct dql dql ;
} __attribute__((__aligned__(64)));
#line 662  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_map {
   unsigned int len ;
   struct callback_head rcu ;
   u16 cpus[0U] ;
};
#line 674  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_dev_flow {
   u16 cpu ;
   u16 filter ;
   unsigned int last_qtail ;
};
#line 684  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_dev_flow_table {
   unsigned int mask ;
   struct callback_head rcu ;
   struct rps_dev_flow flows[0U] ;
};
#line 736  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_rx_queue {
   struct rps_map *rps_map ;
   struct rps_dev_flow_table *rps_flow_table ;
   struct kobject kobj ;
   struct net_device *dev ;
   struct xdp_rxq_info xdp_rxq ;
   struct xdp_umem *umem ;
} __attribute__((__aligned__(64)));
#line 764  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xps_map {
   unsigned int len ;
   unsigned int alloc_len ;
   struct callback_head rcu ;
   u16 queues[0U] ;
};
#line 777  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xps_dev_maps {
   struct callback_head rcu ;
   struct xps_map *attr_map[0U] ;
};
#line 793  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_tc_txq {
   u16 count ;
   u16 offset ;
};
#line 803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_fcoe_hbainfo {
   char manufacturer[64U] ;
   char serial_number[64U] ;
   char hardware_version[64U] ;
   char driver_version[64U] ;
   char optionrom_version[64U] ;
   char firmware_version[64U] ;
   char model[256U] ;
   char model_description[256U] ;
};
#line 820  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_phys_item_id {
   unsigned char id[32U] ;
   unsigned char id_len ;
};
#line 833 
enum tc_setup_type {
    TC_SETUP_QDISC_MQPRIO = 0,
    TC_SETUP_CLSU32 = 1,
    TC_SETUP_CLSFLOWER = 2,
    TC_SETUP_CLSMATCHALL = 3,
    TC_SETUP_CLSBPF = 4,
    TC_SETUP_BLOCK = 5,
    TC_SETUP_QDISC_CBS = 6,
    TC_SETUP_QDISC_RED = 7,
    TC_SETUP_QDISC_PRIO = 8,
    TC_SETUP_QDISC_MQ = 9,
    TC_SETUP_QDISC_ETF = 10,
    TC_SETUP_ROOT_QDISC = 11,
    TC_SETUP_QDISC_GRED = 12,
    TC_SETUP_QDISC_TAPRIO = 13,
    TC_SETUP_FT = 14
};
#line 851 
enum bpf_netdev_command {
    XDP_SETUP_PROG = 0,
    XDP_SETUP_PROG_HW = 1,
    XDP_QUERY_PROG = 2,
    XDP_QUERY_PROG_HW = 3,
    BPF_OFFLOAD_MAP_ALLOC = 4,
    BPF_OFFLOAD_MAP_FREE = 5,
    XDP_SETUP_XSK_UMEM = 6
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_681 {
   u32 flags ;
   struct bpf_prog *prog ;
   struct netlink_ext_ack *extack ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_682 {
   u32 prog_id ;
   u32 prog_flags ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_683 {
   struct bpf_offloaded_map *offmap ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_xsk_684 {
   struct xdp_umem *umem ;
   u16 queue_id ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
union __anonunion_680 {
   struct __anonstruct_681 __anonCompField___anonunion_680_157 ;
   struct __anonstruct_682 __anonCompField___anonunion_680_158 ;
   struct __anonstruct_683 __anonCompField___anonunion_680_159 ;
   struct __anonstruct_xsk_684 xsk ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_bpf {
   enum bpf_netdev_command command ;
   union __anonunion_680 __anonCompField_netdev_bpf_160 ;
};
#line 911  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xfrmdev_ops {
   int (*xdo_dev_state_add)(struct xfrm_state *) ;
   void (*xdo_dev_state_delete)(struct xfrm_state *) ;
   void (*xdo_dev_state_free)(struct xfrm_state *) ;
   bool (*xdo_dev_offload_ok)(struct sk_buff *, struct xfrm_state *) ;
   void (*xdo_dev_state_advance_esn)(struct xfrm_state *) ;
};
#line 921  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct dev_ifalias {
   struct callback_head rcuhead ;
   char ifalias[] ;
};
#line 926 
struct tlsdev_ops;
#line 929  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_name_node {
   struct hlist_node hlist ;
   struct list_head list ;
   struct net_device *dev ;
   char *name ;
};
#line 1257 
struct devlink_port;
#line 1257  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device_ops {
   int (*ndo_init)(struct net_device *) ;
   void (*ndo_uninit)(struct net_device *) ;
   int (*ndo_open)(struct net_device *) ;
   int (*ndo_stop)(struct net_device *) ;
   netdev_tx_t (*ndo_start_xmit)(struct sk_buff *, struct net_device *) ;
   netdev_features_t (*ndo_features_check)(struct sk_buff *, struct net_device *, netdev_features_t ) ;
   u16 (*ndo_select_queue)(struct net_device *, struct sk_buff *, struct net_device *) ;
   void (*ndo_change_rx_flags)(struct net_device *, int ) ;
   void (*ndo_set_rx_mode)(struct net_device *) ;
   int (*ndo_set_mac_address)(struct net_device *, void *) ;
   int (*ndo_validate_addr)(struct net_device *) ;
   int (*ndo_do_ioctl)(struct net_device *, struct ifreq *, int ) ;
   int (*ndo_set_config)(struct net_device *, struct ifmap *) ;
   int (*ndo_change_mtu)(struct net_device *, int ) ;
   int (*ndo_neigh_setup)(struct net_device *, struct neigh_parms *) ;
   void (*ndo_tx_timeout)(struct net_device *) ;
   void (*ndo_get_stats64)(struct net_device *, struct rtnl_link_stats64 *) ;
   bool (*ndo_has_offload_stats)(struct net_device *, int ) ;
   int (*ndo_get_offload_stats)(int , struct net_device *, void *) ;
   struct net_device_stats *(*ndo_get_stats)(struct net_device *) ;
   int (*ndo_vlan_rx_add_vid)(struct net_device *, __be16 , u16 ) ;
   int (*ndo_vlan_rx_kill_vid)(struct net_device *, __be16 , u16 ) ;
   void (*ndo_poll_controller)(struct net_device *) ;
   int (*ndo_netpoll_setup)(struct net_device *, struct netpoll_info *) ;
   void (*ndo_netpoll_cleanup)(struct net_device *) ;
   int (*ndo_set_vf_mac)(struct net_device *, int , u8 *) ;
   int (*ndo_set_vf_vlan)(struct net_device *, int , u16 , u8 , __be16 ) ;
   int (*ndo_set_vf_rate)(struct net_device *, int , int , int ) ;
   int (*ndo_set_vf_spoofchk)(struct net_device *, int , bool ) ;
   int (*ndo_set_vf_trust)(struct net_device *, int , bool ) ;
   int (*ndo_get_vf_config)(struct net_device *, int , struct ifla_vf_info *) ;
   int (*ndo_set_vf_link_state)(struct net_device *, int , int ) ;
   int (*ndo_get_vf_stats)(struct net_device *, int , struct ifla_vf_stats *) ;
   int (*ndo_set_vf_port)(struct net_device *, int , struct nlattr **) ;
   int (*ndo_get_vf_port)(struct net_device *, int , struct sk_buff *) ;
   int (*ndo_get_vf_guid)(struct net_device *, int , struct ifla_vf_guid *, struct ifla_vf_guid *) ;
   int (*ndo_set_vf_guid)(struct net_device *, int , u64 , int ) ;
   int (*ndo_set_vf_rss_query_en)(struct net_device *, int , bool ) ;
   int (*ndo_setup_tc)(struct net_device *, enum tc_setup_type , void *) ;
   int (*ndo_fcoe_enable)(struct net_device *) ;
   int (*ndo_fcoe_disable)(struct net_device *) ;
   int (*ndo_fcoe_ddp_setup)(struct net_device *, u16 , struct scatterlist *, unsigned int ) ;
   int (*ndo_fcoe_ddp_done)(struct net_device *, u16 ) ;
   int (*ndo_fcoe_ddp_target)(struct net_device *, u16 , struct scatterlist *, unsigned int ) ;
   int (*ndo_fcoe_get_hbainfo)(struct net_device *, struct netdev_fcoe_hbainfo *) ;
   int (*ndo_fcoe_get_wwn)(struct net_device *, u64 *, int ) ;
   int (*ndo_rx_flow_steer)(struct net_device *, struct sk_buff *, u16 , u32 ) ;
   int (*ndo_add_slave)(struct net_device *, struct net_device *, struct netlink_ext_ack *) ;
   int (*ndo_del_slave)(struct net_device *, struct net_device *) ;
   netdev_features_t (*ndo_fix_features)(struct net_device *, netdev_features_t ) ;
   int (*ndo_set_features)(struct net_device *, netdev_features_t ) ;
   int (*ndo_neigh_construct)(struct net_device *, struct neighbour *) ;
   void (*ndo_neigh_destroy)(struct net_device *, struct neighbour *) ;
   int (*ndo_fdb_add)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char *, u16 , u16 , struct netlink_ext_ack *) ;
   int (*ndo_fdb_del)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char *, u16 ) ;
   int (*ndo_fdb_dump)(struct sk_buff *, struct netlink_callback *, struct net_device *, struct net_device *, int *) ;
   int (*ndo_fdb_get)(struct sk_buff *, struct nlattr **, struct net_device *, unsigned char *, u16 , u32 , u32 , struct netlink_ext_ack *) ;
   int (*ndo_bridge_setlink)(struct net_device *, struct nlmsghdr *, u16 , struct netlink_ext_ack *) ;
   int (*ndo_bridge_getlink)(struct sk_buff *, u32 , u32 , struct net_device *, u32 , int ) ;
   int (*ndo_bridge_dellink)(struct net_device *, struct nlmsghdr *, u16 ) ;
   int (*ndo_change_carrier)(struct net_device *, bool ) ;
   int (*ndo_get_phys_port_id)(struct net_device *, struct netdev_phys_item_id *) ;
   int (*ndo_get_port_parent_id)(struct net_device *, struct netdev_phys_item_id *) ;
   int (*ndo_get_phys_port_name)(struct net_device *, char *, size_t ) ;
   void (*ndo_udp_tunnel_add)(struct net_device *, struct udp_tunnel_info *) ;
   void (*ndo_udp_tunnel_del)(struct net_device *, struct udp_tunnel_info *) ;
   void *(*ndo_dfwd_add_station)(struct net_device *, struct net_device *) ;
   void (*ndo_dfwd_del_station)(struct net_device *, void *) ;
   int (*ndo_set_tx_maxrate)(struct net_device *, int , u32 ) ;
   int (*ndo_get_iflink)(struct net_device *) ;
   int (*ndo_change_proto_down)(struct net_device *, bool ) ;
   int (*ndo_fill_metadata_dst)(struct net_device *, struct sk_buff *) ;
   void (*ndo_set_rx_headroom)(struct net_device *, int ) ;
   int (*ndo_bpf)(struct net_device *, struct netdev_bpf *) ;
   int (*ndo_xdp_xmit)(struct net_device *, int , struct xdp_frame **, u32 ) ;
   int (*ndo_xsk_wakeup)(struct net_device *, u32 , u32 ) ;
   struct devlink_port *(*ndo_get_devlink_port)(struct net_device *) ;
};
#line 1492 
enum ldv_15274 {
    NETREG_UNINITIALIZED = 0,
    NETREG_REGISTERED = 1,
    NETREG_UNREGISTERING = 2,
    NETREG_UNREGISTERED = 3,
    NETREG_RELEASED = 4,
    NETREG_DUMMY = 5
};
#line 1501 
enum ldv_15275 {
    RTNL_LINK_INITIALIZED = 0,
    RTNL_LINK_INITIALIZING = 1
};
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_adj_list_685 {
   struct list_head upper ;
   struct list_head lower ;
};
#line 1795 
struct iw_handler_def;
#line 1795 
struct iw_public_data;
#line 1795 
struct vlan_info;
#line 1795 
struct tipc_bearer;
#line 1795 
struct in_device;
#line 1795 
struct dn_dev;
#line 1795 
struct cpu_rmap;
#line 1795 
struct pcpu_lstats;
#line 1795 
struct pcpu_sw_netstats;
#line 1795 
struct pcpu_dstats;
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
union __anonunion_686 {
   void *ml_priv ;
   struct pcpu_lstats *lstats ;
   struct pcpu_sw_netstats *tstats ;
   struct pcpu_dstats *dstats ;
};
#line 1795 
struct garp_port;
#line 1795 
struct mrp_port;
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device {
   char name[16U] ;
   struct netdev_name_node *name_node ;
   struct dev_ifalias *ifalias ;
   unsigned long mem_end ;
   unsigned long mem_start ;
   unsigned long base_addr ;
   int irq ;
   unsigned long state ;
   struct list_head dev_list ;
   struct list_head napi_list ;
   struct list_head unreg_list ;
   struct list_head close_list ;
   struct list_head ptype_all ;
   struct list_head ptype_specific ;
   struct __anonstruct_adj_list_685 adj_list ;
   netdev_features_t features ;
   netdev_features_t hw_features ;
   netdev_features_t wanted_features ;
   netdev_features_t vlan_features ;
   netdev_features_t hw_enc_features ;
   netdev_features_t mpls_features ;
   netdev_features_t gso_partial_features ;
   int ifindex ;
   int group ;
   struct net_device_stats stats ;
   atomic_long_t rx_dropped ;
   atomic_long_t tx_dropped ;
   atomic_long_t rx_nohandler ;
   atomic_t carrier_up_count ;
   atomic_t carrier_down_count ;
   struct iw_handler_def *wireless_handlers ;
   struct iw_public_data *wireless_data ;
   struct net_device_ops *netdev_ops ;
   struct ethtool_ops *ethtool_ops ;
   struct l3mdev_ops *l3mdev_ops ;
   struct ndisc_ops *ndisc_ops ;
   struct xfrmdev_ops *xfrmdev_ops ;
   struct tlsdev_ops *tlsdev_ops ;
   struct header_ops *header_ops ;
   unsigned int flags ;
   unsigned int priv_flags ;
   unsigned short gflags ;
   unsigned short padded ;
   unsigned char operstate ;
   unsigned char link_mode ;
   unsigned char if_port ;
   unsigned char dma ;
   unsigned int mtu ;
   unsigned int min_mtu ;
   unsigned int max_mtu ;
   unsigned short type ;
   unsigned short hard_header_len ;
   unsigned char min_header_len ;
   unsigned short needed_headroom ;
   unsigned short needed_tailroom ;
   unsigned char perm_addr[32U] ;
   unsigned char addr_assign_type ;
   unsigned char addr_len ;
   unsigned char upper_level ;
   unsigned char lower_level ;
   unsigned short neigh_priv_len ;
   unsigned short dev_id ;
   unsigned short dev_port ;
   spinlock_t addr_list_lock ;
   unsigned char name_assign_type ;
   bool uc_promisc ;
   struct netdev_hw_addr_list uc ;
   struct netdev_hw_addr_list mc ;
   struct netdev_hw_addr_list dev_addrs ;
   struct kset *queues_kset ;
   unsigned int promiscuity ;
   unsigned int allmulti ;
   struct vlan_info *vlan_info ;
   struct dsa_port *dsa_ptr ;
   struct tipc_bearer *tipc_ptr ;
   void *atalk_ptr ;
   struct in_device *ip_ptr ;
   struct dn_dev *dn_ptr ;
   struct inet6_dev *ip6_ptr ;
   void *ax25_ptr ;
   struct wireless_dev *ieee80211_ptr ;
   struct wpan_dev *ieee802154_ptr ;
   struct mpls_dev *mpls_ptr ;
   unsigned char *dev_addr ;
   struct netdev_rx_queue *_rx ;
   unsigned int num_rx_queues ;
   unsigned int real_num_rx_queues ;
   struct bpf_prog *xdp_prog ;
   unsigned long gro_flush_timeout ;
   rx_handler_func_t *rx_handler ;
   void *rx_handler_data ;
   struct mini_Qdisc *miniq_ingress ;
   struct netdev_queue *ingress_queue ;
   struct nf_hook_entries *nf_hooks_ingress ;
   unsigned char broadcast[32U] ;
   struct cpu_rmap *rx_cpu_rmap ;
   struct hlist_node index_hlist ;
   struct netdev_queue *_tx ;
   unsigned int num_tx_queues ;
   unsigned int real_num_tx_queues ;
   struct Qdisc *qdisc ;
   struct hlist_head qdisc_hash[16U] ;
   unsigned int tx_queue_len ;
   spinlock_t tx_global_lock ;
   int watchdog_timeo ;
   struct xps_dev_maps *xps_cpus_map ;
   struct xps_dev_maps *xps_rxqs_map ;
   struct mini_Qdisc *miniq_egress ;
   struct timer_list watchdog_timer ;
   int *pcpu_refcnt ;
   struct list_head todo_list ;
   struct list_head link_watch_list ;
   enum ldv_15274 reg_state : 8 ;
   bool dismantle ;
   enum ldv_15275 rtnl_link_state : 16 ;
   bool needs_free_netdev ;
   void (*priv_destructor)(struct net_device *) ;
   struct netpoll_info *npinfo ;
   possible_net_t nd_net ;
   union __anonunion_686 __anonCompField_net_device_161 ;
   struct garp_port *garp_port ;
   struct mrp_port *mrp_port ;
   struct device dev ;
   struct attribute_group *sysfs_groups[4U] ;
   struct attribute_group *sysfs_rx_queue_group ;
   struct rtnl_link_ops *rtnl_link_ops ;
   unsigned int gso_max_size ;
   u16 gso_max_segs ;
   struct dcbnl_rtnl_ops *dcbnl_ops ;
   s16 num_tc ;
   struct netdev_tc_txq tc_to_txq[16U] ;
   u8 prio_tc_map[16U] ;
   unsigned int fcoe_ddp_xid ;
   struct netprio_map *priomap ;
   struct phy_device *phydev ;
   struct sfp_bus *sfp_bus ;
   struct lock_class_key qdisc_tx_busylock_key ;
   struct lock_class_key qdisc_running_key ;
   struct lock_class_key qdisc_xmit_lock_key ;
   struct lock_class_key addr_list_lock_key ;
   bool proto_down ;
   unsigned int wol_enabled : 1 ;
};
#line 2400  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct pcpu_sw_netstats {
   u64 rx_packets ;
   u64 rx_bytes ;
   u64 tx_packets ;
   u64 tx_bytes ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(32)));
#line 2408  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct pcpu_lstats {
   u64_stats_t packets ;
   u64_stats_t bytes ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4/t4_hw.h"
struct sge_qstat {
   __be32 qid ;
   __be16 cidx ;
   __be16 pidx ;
};
#line 2890  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4/t4fw_api.h"
enum fw_port_type {
    FW_PORT_TYPE_FIBER_XFI = 0,
    FW_PORT_TYPE_FIBER_XAUI = 1,
    FW_PORT_TYPE_BT_SGMII = 2,
    FW_PORT_TYPE_BT_XFI = 3,
    FW_PORT_TYPE_BT_XAUI = 4,
    FW_PORT_TYPE_KX4 = 5,
    FW_PORT_TYPE_CX4 = 6,
    FW_PORT_TYPE_KX = 7,
    FW_PORT_TYPE_KR = 8,
    FW_PORT_TYPE_SFP = 9,
    FW_PORT_TYPE_BP_AP = 10,
    FW_PORT_TYPE_BP4_AP = 11,
    FW_PORT_TYPE_QSFP_10G = 12,
    FW_PORT_TYPE_QSA = 13,
    FW_PORT_TYPE_QSFP = 14,
    FW_PORT_TYPE_BP40_BA = 15,
    FW_PORT_TYPE_KR4_100G = 16,
    FW_PORT_TYPE_CR4_QSFP = 17,
    FW_PORT_TYPE_CR_QSFP = 18,
    FW_PORT_TYPE_CR2_QSFP = 19,
    FW_PORT_TYPE_SFP28 = 20,
    FW_PORT_TYPE_KR_SFP28 = 21,
    FW_PORT_TYPE_KR_XLAUI = 22,
    FW_PORT_TYPE_NONE = 31
};
#line 2917 
enum fw_port_module_type {
    FW_PORT_MOD_TYPE_NA = 0,
    FW_PORT_MOD_TYPE_LR = 1,
    FW_PORT_MOD_TYPE_SR = 2,
    FW_PORT_MOD_TYPE_ER = 3,
    FW_PORT_MOD_TYPE_TWINAX_PASSIVE = 4,
    FW_PORT_MOD_TYPE_TWINAX_ACTIVE = 5,
    FW_PORT_MOD_TYPE_LRM = 6,
    FW_PORT_MOD_TYPE_ERROR = 28,
    FW_PORT_MOD_TYPE_UNKNOWN = 29,
    FW_PORT_MOD_TYPE_NOTSUPPORTED = 30,
    FW_PORT_MOD_TYPE_NONE = 31
};
#line 4071 
enum chip_type {
    T4_A1 = 65,
    T4_A2 = 66,
    T4_FIRST_REV = 65,
    T4_LAST_REV = 66,
    T5_A0 = 80,
    T5_A1 = 81,
    T5_FIRST_REV = 80,
    T5_LAST_REV = 81
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/t4vf_common.h"
struct t4vf_port_stats {
   u64 tx_bcast_bytes ;
   u64 tx_bcast_frames ;
   u64 tx_mcast_bytes ;
   u64 tx_mcast_frames ;
   u64 tx_ucast_bytes ;
   u64 tx_ucast_frames ;
   u64 tx_drop_frames ;
   u64 tx_offload_bytes ;
   u64 tx_offload_frames ;
   u64 rx_bcast_bytes ;
   u64 rx_bcast_frames ;
   u64 rx_mcast_bytes ;
   u64 rx_mcast_frames ;
   u64 rx_ucast_bytes ;
   u64 rx_ucast_frames ;
   u64 rx_err_frames ;
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/t4vf_common.h"
typedef u32 fw_port_cap32_t;
#line 115 
enum cc_pause {
    PAUSE_RX = 1,
    PAUSE_TX = 2,
    PAUSE_AUTONEG = 4
};
#line 121 
enum cc_fec {
    FEC_AUTO = 1,
    FEC_RS = 2,
    FEC_BASER_RS = 4
};
#line 128  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/t4vf_common.h"
struct link_config {
   fw_port_cap32_t pcaps ;
   fw_port_cap32_t acaps ;
   fw_port_cap32_t lpacaps ;
   fw_port_cap32_t speed_caps ;
   u32 speed ;
   enum cc_pause requested_fc ;
   enum cc_pause fc ;
   enum cc_pause advertised_fc ;
   enum cc_fec auto_fec ;
   enum cc_fec requested_fec ;
   enum cc_fec fec ;
   unsigned char autoneg ;
   unsigned char link_ok ;
   unsigned char link_down_rc ;
};
#line 167  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/t4vf_common.h"
struct dev_params {
   u32 fwrev ;
   u32 tprev ;
};
#line 177  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/t4vf_common.h"
struct sge_params {
   u32 sge_control ;
   u32 sge_control2 ;
   u32 sge_host_page_size ;
   u32 sge_egress_queues_per_page ;
   u32 sge_ingress_queues_per_page ;
   u32 sge_vf_hps ;
   u32 sge_vf_eq_qpp ;
   u32 sge_vf_iq_qpp ;
   u32 sge_fl_buffer_size[16U] ;
   u32 sge_ingress_rx_threshold ;
   u32 sge_congestion_control ;
   u32 sge_timer_value_0_and_1 ;
   u32 sge_timer_value_2_and_3 ;
   u32 sge_timer_value_4_and_5 ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/t4vf_common.h"
struct vpd_params {
   u32 cclk ;
};
#line 202  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/t4vf_common.h"
struct arch_specific_params {
   u32 sge_fl_db ;
   u16 mps_tcam_size ;
};
#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/t4vf_common.h"
struct __anonstruct_basicvirtual_699 {
   unsigned int synmapen : 1 ;
   unsigned int syn4tupenipv6 : 1 ;
   unsigned int syn2tupenipv6 : 1 ;
   unsigned int syn4tupenipv4 : 1 ;
   unsigned int syn2tupenipv4 : 1 ;
   unsigned int ofdmapen : 1 ;
   unsigned int tnlmapen : 1 ;
   unsigned int tnlalllookup : 1 ;
   unsigned int hashtoeplitz : 1 ;
};
#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/t4vf_common.h"
union __anonunion_u_698 {
   struct __anonstruct_basicvirtual_699 basicvirtual ;
};
#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/t4vf_common.h"
struct rss_params {
   unsigned int mode ;
   union __anonunion_u_698 u ;
};
#line 230  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/t4vf_common.h"
struct __anonstruct_basicvirtual_700 {
   u16 defaultq ;
   unsigned int ip6fourtupen : 1 ;
   unsigned int ip6twotupen : 1 ;
   unsigned int ip4fourtupen : 1 ;
   unsigned int ip4twotupen : 1 ;
   int udpen ;
};
#line 230  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/t4vf_common.h"
union rss_vi_config {
   struct __anonstruct_basicvirtual_700 basicvirtual ;
};
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/t4vf_common.h"
struct vf_resources {
   unsigned int nvi ;
   unsigned int neq ;
   unsigned int nethctrl ;
   unsigned int niqflint ;
   unsigned int niq ;
   unsigned int tc ;
   unsigned int pmask ;
   unsigned int nexactf ;
   unsigned int r_caps ;
   unsigned int wx_caps ;
};
#line 260  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/t4vf_common.h"
struct adapter_params {
   struct dev_params dev ;
   struct sge_params sge ;
   struct vpd_params vpd ;
   struct rss_params rss ;
   struct vf_resources vfres ;
   struct arch_specific_params arch ;
   enum chip_type chip ;
   u8 nports ;
   u8 fw_caps_support ;
};
#line 276  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/t4vf_common.h"
struct mbox_cmd {
   u64 cmd[8U] ;
   u64 timestamp ;
   u32 seqno ;
   s16 access ;
   s16 execute ;
};
#line 284  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/t4vf_common.h"
struct mbox_cmd_log {
   unsigned int size ;
   unsigned int cursor ;
   u32 seqno ;
};
#line 312 
struct adapter;
#line 313 
struct sge_eth_rxq;
#line 314 
struct sge_rspq;
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/adapter.h"
struct port_info {
   struct adapter *adapter ;
   u32 vlan_id ;
   u16 viid ;
   int xact_addr_filt ;
   u16 rss_size ;
   u8 pidx ;
   s8 mdio_addr ;
   u8 port_type ;
   u8 mod_type ;
   u8 port_id ;
   u8 nqsets ;
   u8 first_qset ;
   struct link_config link_cfg ;
};
#line 125  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/adapter.h"
struct sge_fl {
   unsigned int avail ;
   unsigned int pend_cred ;
   unsigned int cidx ;
   unsigned int pidx ;
   unsigned long alloc_failed ;
   unsigned long large_alloc_failed ;
   unsigned long starving ;
   unsigned int cntxt_id ;
   unsigned int abs_id ;
   unsigned int size ;
   struct rx_sw_desc *sdesc ;
   __be64 *desc ;
   dma_addr_t addr ;
   void *bar2_addr ;
   unsigned int bar2_qid ;
};
#line 152  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/adapter.h"
struct pkt_gl {
   struct page_frag frags[17U] ;
   void *va ;
   unsigned int nfrags ;
   unsigned int tot_len ;
};
#line 165  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/adapter.h"
struct sge_rspq {
   struct napi_struct napi ;
   __be64 *cur_desc ;
   unsigned int cidx ;
   u8 gen ;
   u8 next_intr_params ;
   int offset ;
   unsigned int unhandled_irqs ;
   u8 intr_params ;
   u8 pktcnt_idx ;
   u8 idx ;
   u16 cntxt_id ;
   u16 abs_id ;
   __be64 *desc ;
   dma_addr_t phys_addr ;
   void *bar2_addr ;
   unsigned int bar2_qid ;
   unsigned int iqe_len ;
   unsigned int size ;
   struct adapter *adapter ;
   struct net_device *netdev ;
   int (*handler)(struct sge_rspq *, __be64 *, struct pkt_gl *) ;
};
#line 199  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/adapter.h"
struct sge_eth_stats {
   unsigned long pkts ;
   unsigned long lro_pkts ;
   unsigned long lro_merged ;
   unsigned long rx_cso ;
   unsigned long vlan_ex ;
   unsigned long rx_drops ;
};
#line 211  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/adapter.h"
struct sge_eth_rxq {
   struct sge_rspq rspq ;
   struct sge_fl fl ;
   struct sge_eth_stats stats ;
};
#line 224  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/adapter.h"
struct tx_desc {
   __be64 flit[8U] ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/adapter.h"
struct sge_txq {
   unsigned int in_use ;
   unsigned int size ;
   unsigned int cidx ;
   unsigned int pidx ;
   unsigned long stops ;
   unsigned long restarts ;
   unsigned int cntxt_id ;
   unsigned int abs_id ;
   struct tx_desc *desc ;
   struct tx_sw_desc *sdesc ;
   struct sge_qstat *stat ;
   dma_addr_t phys_addr ;
   void *bar2_addr ;
   unsigned int bar2_qid ;
};
#line 258  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/adapter.h"
struct sge_eth_txq {
   struct sge_txq q ;
   struct netdev_queue *txq ;
   unsigned long tso ;
   unsigned long tx_cso ;
   unsigned long vlan_ins ;
   unsigned long mapping_err ;
};
#line 270  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/adapter.h"
struct sge {
   struct sge_eth_txq ethtxq[8U] ;
   struct sge_eth_rxq ethrxq[8U] ;
   struct sge_rspq fw_evtq ;
   struct sge_rspq intrq ;
   spinlock_t intrq_lock ;
   unsigned long starving_fl[1U] ;
   struct timer_list rx_timer ;
   struct timer_list tx_timer ;
   u16 max_ethqsets ;
   u16 ethqsets ;
   u16 ethtxq_rover ;
   u16 timer_val[6U] ;
   u8 counter_val[4U] ;
   u32 fl_pg_order ;
   u32 stat_len ;
   u32 pktshift ;
   u32 fl_align ;
   u32 fl_starve_thres ;
   unsigned int egr_base ;
   unsigned int ingr_base ;
   void *egr_map[16U] ;
   struct sge_rspq *ingr_map[10U] ;
};
#line 352  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/adapter.h"
struct hash_mac_addr {
   struct list_head list ;
   u8 addr[6U] ;
   unsigned int iface_mac ;
};
#line 358  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/adapter.h"
struct mbox_list {
   struct list_head list ;
};
#line 365  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/adapter.h"
struct __anonstruct_msix_info_701 {
   unsigned short vec ;
   char desc[22U] ;
};
#line 365  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/adapter.h"
struct adapter {
   void *regs ;
   void *bar2 ;
   struct pci_dev *pdev ;
   struct device *pdev_dev ;
   unsigned long registered_device_map ;
   unsigned long open_device_map ;
   unsigned long flags ;
   struct adapter_params params ;
   struct __anonstruct_msix_info_701 msix_info[9U] ;
   struct sge sge ;
   struct net_device *port[1U] ;
   char *name ;
   unsigned int msg_enable ;
   struct dentry *debugfs_root ;
   spinlock_t stats_lock ;
   spinlock_t mbox_lock ;
   struct mbox_list mlist ;
   struct mbox_cmd_log *mbox_log ;
   struct list_head mac_hlist ;
};
#line 218  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4/t4_msg.h"
struct rss_header {
   u8 opcode ;
   u8 channel : 2 ;
   u8 filter_hit : 1 ;
   u8 filter_tid : 1 ;
   u8 hash_type : 2 ;
   u8 ipv6 : 1 ;
   u8 send2fw : 1 ;
   __be16 qid ;
   __be32 hash_val ;
};
#line 1363  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4/t4_msg.h"
struct cpl_sge_egr_update {
   __be32 opcode_qid ;
   __be16 cidx ;
   __be16 pidx ;
};
#line 1429  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4/t4_msg.h"
struct cpl_fw6_msg {
   u8 opcode ;
   u8 type ;
   __be16 rsvd0 ;
   __be32 rsvd1 ;
   __be64 data[4U] ;
};
#line 1719  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf_main.c"
struct queue_port_stats {
   u64 tso ;
   u64 tx_csum ;
   u64 rx_csum ;
   u64 vlan_ex ;
   u64 vlan_ins ;
   u64 lro_pkts ;
   u64 lro_merged ;
};
#line 2448  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf_main.c"
struct cxgb4vf_debugfs_entry {
   char *name ;
   umode_t mode ;
   struct file_operations *fops ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __u16 __le16;
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u16 __sum16;
#line 154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int slab_flags_t;
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct static_key_false {
   struct static_key key ;
};
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
union __anonunion___u_774 {
   int __val ;
   char __c[1U] ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nodemask.h"
enum node_states {
    N_POSSIBLE = 0,
    N_ONLINE = 1,
    N_NORMAL_MEMORY = 2,
    N_HIGH_MEMORY = 2,
    N_MEMORY = 3,
    N_CPU = 4,
    NR_NODE_STATES = 5
};
#line 196  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page-flags.h"
union __anonunion___u_854 {
   unsigned long __val ;
   char __c[1U] ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct free_area {
   struct list_head free_list[6U] ;
   unsigned long nr_free ;
};
#line 158 
struct pglist_data;
#line 168  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zone_padding {
   char x[0U] ;
} __attribute__((__aligned__(4096)));
#line 285  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zone_reclaim_stat {
   unsigned long recent_rotated[2U] ;
   unsigned long recent_scanned[2U] ;
};
#line 304  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct lruvec {
   struct list_head lists[5U] ;
   struct zone_reclaim_stat reclaim_stat ;
   atomic_long_t inactive_age ;
   unsigned long refaults ;
   unsigned long flags ;
   struct pglist_data *pgdat ;
};
#line 340  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct per_cpu_pages {
   int count ;
   int high ;
   int batch ;
   struct list_head lists[3U] ;
};
#line 349  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct per_cpu_pageset {
   struct per_cpu_pages pcp ;
   s8 expire ;
   u16 vm_numa_stat_diff[6U] ;
   s8 stat_threshold ;
   s8 vm_stat_diff[13U] ;
};
#line 361  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct per_cpu_nodestat {
   s8 stat_threshold ;
   s8 vm_node_stat_diff[32U] ;
};
#line 365 
enum zone_type {
    ZONE_DMA = 0,
    ZONE_DMA32 = 1,
    ZONE_NORMAL = 2,
    ZONE_MOVABLE = 3,
    ZONE_DEVICE = 4,
    __MAX_NR_ZONES = 5
};
#line 432  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zone {
   unsigned long _watermark[3U] ;
   unsigned long watermark_boost ;
   unsigned long nr_reserved_highatomic ;
   long lowmem_reserve[5U] ;
   int node ;
   struct pglist_data *zone_pgdat ;
   struct per_cpu_pageset *pageset ;
   unsigned long zone_start_pfn ;
   atomic_long_t managed_pages ;
   unsigned long spanned_pages ;
   unsigned long present_pages ;
   char *name ;
   unsigned long nr_isolate_pageblock ;
   seqlock_t span_seqlock ;
   int initialized ;
   struct zone_padding _pad1_ ;
   struct free_area free_area[11U] ;
   unsigned long flags ;
   spinlock_t lock ;
   struct zone_padding _pad2_ ;
   unsigned long percpu_drift_mark ;
   unsigned long compact_cached_free_pfn ;
   unsigned long compact_cached_migrate_pfn[2U] ;
   unsigned long compact_init_migrate_pfn ;
   unsigned long compact_init_free_pfn ;
   unsigned int compact_considered ;
   unsigned int compact_defer_shift ;
   int compact_order_failed ;
   bool compact_blockskip_flush ;
   bool contiguous ;
   struct zone_padding _pad3_ ;
   atomic_long_t vm_stat[13U] ;
   atomic_long_t vm_numa_stat[6U] ;
} __attribute__((__aligned__(4096)));
#line 665  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zoneref {
   struct zone *zone ;
   int zone_idx ;
};
#line 684  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct zonelist {
   struct zoneref _zonerefs[5121U] ;
};
#line 694  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct deferred_split {
   spinlock_t split_queue_lock ;
   struct list_head split_queue ;
   unsigned long split_queue_len ;
};
#line 710  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
struct pglist_data {
   struct zone node_zones[5U] ;
   struct zonelist node_zonelists[2U] ;
   int nr_zones ;
   spinlock_t node_size_lock ;
   unsigned long node_start_pfn ;
   unsigned long node_present_pages ;
   unsigned long node_spanned_pages ;
   int node_id ;
   wait_queue_head_t kswapd_wait ;
   wait_queue_head_t pfmemalloc_wait ;
   struct task_struct *kswapd ;
   int kswapd_order ;
   enum zone_type kswapd_classzone_idx ;
   int kswapd_failures ;
   int kcompactd_max_order ;
   enum zone_type kcompactd_classzone_idx ;
   wait_queue_head_t kcompactd_wait ;
   struct task_struct *kcompactd ;
   unsigned long totalreserve_pages ;
   unsigned long min_unmapped_pages ;
   unsigned long min_slab_pages ;
   struct zone_padding _pad1_ ;
   spinlock_t lru_lock ;
   unsigned long first_deferred_pfn ;
   struct deferred_split deferred_split_queue ;
   struct lruvec __lruvec ;
   unsigned long flags ;
   struct zone_padding _pad2_ ;
   struct per_cpu_nodestat *per_cpu_nodestats ;
   atomic_long_t vm_stat[32U] ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/smp.h"
struct __call_single_data {
   struct llist_node llist ;
   void (*func)(void *) ;
   void *info ;
   unsigned int flags ;
};
#line 286  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fs.h"
struct bio;
#line 288 
struct hd_geometry;
#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_arg_1122 {
   char *buf ;
   void *data ;
};
#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct __anonstruct_read_descriptor_t_1121 {
   size_t written ;
   size_t count ;
   union __anonunion_arg_1122 arg ;
   int error ;
};
#line 339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
typedef struct __anonstruct_read_descriptor_t_1121 read_descriptor_t;
#line 1771 
struct block_device_operations;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bvec.h"
struct bvec_iter {
   sector_t bi_sector ;
   unsigned int bi_size ;
   unsigned int bi_idx ;
   unsigned int bi_bvec_done ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/socket.h"
struct socket;
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
struct msghdr {
   void *msg_name ;
   int msg_namelen ;
   struct iov_iter msg_iter ;
   void *msg_control ;
   __kernel_size_t msg_controllen ;
   unsigned int msg_flags ;
   struct kiocb *msg_iocb ;
};
#line 201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/random.h"
enum ldv_8871 {
    SS_FREE = 0,
    SS_UNCONNECTED = 1,
    SS_CONNECTING = 2,
    SS_CONNECTED = 3,
    SS_DISCONNECTING = 4
};
#line 209  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/random.h"
typedef enum ldv_8871 socket_state;
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct socket_wq {
   wait_queue_head_t wait ;
   struct fasync_struct *fasync_list ;
   unsigned long flags ;
   struct callback_head rcu ;
} __attribute__((__aligned__(64)));
#line 112 
struct proto_ops;
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct socket {
   socket_state state ;
   short type ;
   unsigned long flags ;
   struct file *file ;
   struct sock *sk ;
   struct proto_ops *ops ;
   struct socket_wq wq ;
};
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct proto_ops {
   int family ;
   struct module *owner ;
   int (*release)(struct socket *) ;
   int (*bind)(struct socket *, struct sockaddr *, int ) ;
   int (*connect)(struct socket *, struct sockaddr *, int , int ) ;
   int (*socketpair)(struct socket *, struct socket *) ;
   int (*accept)(struct socket *, struct socket *, int , bool ) ;
   int (*getname)(struct socket *, struct sockaddr *, int ) ;
   __poll_t (*poll)(struct file *, struct socket *, struct poll_table_struct *) ;
   int (*ioctl)(struct socket *, unsigned int , unsigned long ) ;
   int (*compat_ioctl)(struct socket *, unsigned int , unsigned long ) ;
   int (*gettstamp)(struct socket *, void *, bool , bool ) ;
   int (*listen)(struct socket *, int ) ;
   int (*shutdown)(struct socket *, int ) ;
   int (*setsockopt)(struct socket *, int , int , char *, unsigned int ) ;
   int (*getsockopt)(struct socket *, int , int , char *, int *) ;
   int (*compat_setsockopt)(struct socket *, int , int , char *, unsigned int ) ;
   int (*compat_getsockopt)(struct socket *, int , int , char *, int *) ;
   int (*sendmsg)(struct socket *, struct msghdr *, size_t ) ;
   int (*recvmsg)(struct socket *, struct msghdr *, size_t , int ) ;
   int (*mmap)(struct file *, struct socket *, struct vm_area_struct *) ;
   ssize_t (*sendpage)(struct socket *, struct page *, int , size_t , int ) ;
   ssize_t (*splice_read)(struct socket *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ) ;
   int (*set_peek_off)(struct sock *, int ) ;
   int (*peek_len)(struct socket *) ;
   int (*read_sock)(struct sock *, read_descriptor_t *, int (*)(read_descriptor_t *, struct sk_buff *, unsigned int , size_t )) ;
   int (*sendpage_locked)(struct sock *, struct page *, int , size_t , int ) ;
   int (*sendmsg_locked)(struct sock *, struct msghdr *, size_t ) ;
   int (*set_rcvlowat)(struct sock *, int ) ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi_tunnel {
   __be64 tun_id ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi_common {
   int flowic_oif ;
   int flowic_iif ;
   __u32 flowic_mark ;
   __u8 flowic_tos ;
   __u8 flowic_scope ;
   __u8 flowic_proto ;
   __u8 flowic_flags ;
   __u32 flowic_secid ;
   kuid_t flowic_uid ;
   struct flowi_tunnel flowic_tun_key ;
   __u32 flowic_multipath_hash ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_ports_1185 {
   __be16 dport ;
   __be16 sport ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_icmpt_1186 {
   __u8 type ;
   __u8 code ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_dnports_1187 {
   __le16 dport ;
   __le16 sport ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct __anonstruct_mht_1188 {
   __u8 type ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
union flowi_uli {
   struct __anonstruct_ports_1185 ports ;
   struct __anonstruct_icmpt_1186 icmpt ;
   struct __anonstruct_dnports_1187 dnports ;
   __be32 spi ;
   __be32 gre_key ;
   struct __anonstruct_mht_1188 mht ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi4 {
   struct flowi_common __fl_common ;
   __be32 saddr ;
   __be32 daddr ;
   union flowi_uli uli ;
} __attribute__((__aligned__(8)));
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi6 {
   struct flowi_common __fl_common ;
   struct in6_addr daddr ;
   struct in6_addr saddr ;
   __be32 flowlabel ;
   union flowi_uli uli ;
   __u32 mp_hash ;
} __attribute__((__aligned__(8)));
#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowidn {
   struct flowi_common __fl_common ;
   __le16 daddr ;
   __le16 saddr ;
   union flowi_uli uli ;
} __attribute__((__aligned__(8)));
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
union __anonunion_u_1189 {
   struct flowi_common __fl_common ;
   struct flowi4 ip4 ;
   struct flowi6 ip6 ;
   struct flowidn dn ;
};
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow.h"
struct flowi {
   union __anonunion_u_1189 u ;
} __attribute__((__aligned__(8)));
#line 313  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
typedef struct bio_vec skb_frag_t;
#line 416  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct skb_shared_hwtstamps {
   ktime_t hwtstamp ;
};
#line 510  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct skb_shared_info {
   __u8 __unused ;
   __u8 meta_len ;
   __u8 nr_frags ;
   __u8 tx_flags ;
   unsigned short gso_size ;
   unsigned short gso_segs ;
   struct sk_buff *frag_list ;
   struct skb_shared_hwtstamps hwtstamps ;
   unsigned int gso_type ;
   u32 tskey ;
   atomic_t dataref ;
   void *destructor_arg ;
   skb_frag_t frags[17U] ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6_mib_device {
   atomic_long_t mibs[6U] ;
};
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6msg_mib_device {
   atomic_long_t mibs[512U] ;
};
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
enum bpf_prog_type {
    BPF_PROG_TYPE_UNSPEC = 0,
    BPF_PROG_TYPE_SOCKET_FILTER = 1,
    BPF_PROG_TYPE_KPROBE = 2,
    BPF_PROG_TYPE_SCHED_CLS = 3,
    BPF_PROG_TYPE_SCHED_ACT = 4,
    BPF_PROG_TYPE_TRACEPOINT = 5,
    BPF_PROG_TYPE_XDP = 6,
    BPF_PROG_TYPE_PERF_EVENT = 7,
    BPF_PROG_TYPE_CGROUP_SKB = 8,
    BPF_PROG_TYPE_CGROUP_SOCK = 9,
    BPF_PROG_TYPE_LWT_IN = 10,
    BPF_PROG_TYPE_LWT_OUT = 11,
    BPF_PROG_TYPE_LWT_XMIT = 12,
    BPF_PROG_TYPE_SOCK_OPS = 13,
    BPF_PROG_TYPE_SK_SKB = 14,
    BPF_PROG_TYPE_CGROUP_DEVICE = 15,
    BPF_PROG_TYPE_SK_MSG = 16,
    BPF_PROG_TYPE_RAW_TRACEPOINT = 17,
    BPF_PROG_TYPE_CGROUP_SOCK_ADDR = 18,
    BPF_PROG_TYPE_LWT_SEG6LOCAL = 19,
    BPF_PROG_TYPE_LIRC_MODE2 = 20,
    BPF_PROG_TYPE_SK_REUSEPORT = 21,
    BPF_PROG_TYPE_FLOW_DISSECTOR = 22,
    BPF_PROG_TYPE_CGROUP_SYSCTL = 23,
    BPF_PROG_TYPE_RAW_TRACEPOINT_WRITABLE = 24,
    BPF_PROG_TYPE_CGROUP_SOCKOPT = 25,
    BPF_PROG_TYPE_TRACING = 26
};
#line 169 
enum bpf_attach_type {
    BPF_CGROUP_INET_INGRESS = 0,
    BPF_CGROUP_INET_EGRESS = 1,
    BPF_CGROUP_INET_SOCK_CREATE = 2,
    BPF_CGROUP_SOCK_OPS = 3,
    BPF_SK_SKB_STREAM_PARSER = 4,
    BPF_SK_SKB_STREAM_VERDICT = 5,
    BPF_CGROUP_DEVICE = 6,
    BPF_SK_MSG_VERDICT = 7,
    BPF_CGROUP_INET4_BIND = 8,
    BPF_CGROUP_INET6_BIND = 9,
    BPF_CGROUP_INET4_CONNECT = 10,
    BPF_CGROUP_INET6_CONNECT = 11,
    BPF_CGROUP_INET4_POST_BIND = 12,
    BPF_CGROUP_INET6_POST_BIND = 13,
    BPF_CGROUP_UDP4_SENDMSG = 14,
    BPF_CGROUP_UDP6_SENDMSG = 15,
    BPF_LIRC_MODE2 = 16,
    BPF_FLOW_DISSECTOR = 17,
    BPF_CGROUP_SYSCTL = 18,
    BPF_CGROUP_UDP4_RECVMSG = 19,
    BPF_CGROUP_UDP6_RECVMSG = 20,
    BPF_CGROUP_GETSOCKOPT = 21,
    BPF_CGROUP_SETSOCKOPT = 22,
    BPF_TRACE_RAW_TP = 23,
    BPF_TRACE_FENTRY = 24,
    BPF_TRACE_FEXIT = 25,
    __MAX_BPF_ATTACH_TYPE = 26
};
#line 783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct __anonstruct_1354 {
   u8 is_data ;
   u8 padding ;
   u16 prioidx ;
   u32 classid ;
} __attribute__((__packed__));
#line 783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
union __anonunion_1353 {
   struct __anonstruct_1354 __anonCompField___anonunion_1353_151 ;
   u64 val ;
};
#line 783  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct sock_cgroup_data {
   union __anonunion_1353 __anonCompField_sock_cgroup_data_152 ;
};
#line 160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/security.h"
struct xfrm_policy;
#line 178 
struct request_sock;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/pkt_sched.h"
struct tc_stats {
   __u64 bytes ;
   __u32 packets ;
   __u32 drops ;
   __u32 overlimits ;
   __u32 bps ;
   __u32 pps ;
   __u32 qlen ;
   __u32 backlog ;
};
#line 102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/pkt_sched.h"
struct tc_sizespec {
   unsigned char cell_log ;
   unsigned char size_log ;
   short cell_align ;
   int overhead ;
   unsigned int linklayer ;
   unsigned int mpu ;
   unsigned int mtu ;
   unsigned int tsize ;
};
#line 362  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
enum gro_result {
    GRO_MERGED = 0,
    GRO_MERGED_FREE = 1,
    GRO_HELD = 2,
    GRO_NORMAL = 3,
    GRO_DROP = 4,
    GRO_CONSUMED = 5
};
#line 371  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef enum gro_result gro_result_t;
#line 3610 
enum skb_free_reason {
    SKB_REASON_CONSUMED = 0,
    SKB_REASON_DROPPED = 1
};
#line 567  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rtnetlink.h"
struct tcmsg {
   unsigned char tcm_family ;
   unsigned char tcm__pad1 ;
   unsigned short tcm__pad2 ;
   int tcm_ifindex ;
   __u32 tcm_handle ;
   __u32 tcm_parent ;
   __u32 tcm_info ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ip.h"
struct iphdr {
   __u8 ihl : 4 ;
   __u8 version : 4 ;
   __u8 tos ;
   __be16 tot_len ;
   __be16 id ;
   __be16 frag_off ;
   __u8 ttl ;
   __u8 protocol ;
   __sum16 check ;
   __be32 saddr ;
   __be32 daddr ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ipv6.h"
struct ipv6hdr {
   __u8 priority : 4 ;
   __u8 version : 4 ;
   __u8 flow_lbl[3U] ;
   __be16 payload_len ;
   __u8 nexthdr ;
   __u8 hop_limit ;
   struct in6_addr saddr ;
   struct in6_addr daddr ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ipv6.h"
struct ipv6_stable_secret {
   bool initialized ;
   struct in6_addr secret ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ipv6.h"
struct ipv6_devconf {
   __s32 forwarding ;
   __s32 hop_limit ;
   __s32 mtu6 ;
   __s32 accept_ra ;
   __s32 accept_redirects ;
   __s32 autoconf ;
   __s32 dad_transmits ;
   __s32 rtr_solicits ;
   __s32 rtr_solicit_interval ;
   __s32 rtr_solicit_max_interval ;
   __s32 rtr_solicit_delay ;
   __s32 force_mld_version ;
   __s32 mldv1_unsolicited_report_interval ;
   __s32 mldv2_unsolicited_report_interval ;
   __s32 use_tempaddr ;
   __s32 temp_valid_lft ;
   __s32 temp_prefered_lft ;
   __s32 regen_max_retry ;
   __s32 max_desync_factor ;
   __s32 max_addresses ;
   __s32 accept_ra_defrtr ;
   __s32 accept_ra_min_hop_limit ;
   __s32 accept_ra_pinfo ;
   __s32 ignore_routes_with_linkdown ;
   __s32 accept_ra_rtr_pref ;
   __s32 rtr_probe_interval ;
   __s32 accept_ra_rt_info_min_plen ;
   __s32 accept_ra_rt_info_max_plen ;
   __s32 proxy_ndp ;
   __s32 accept_source_route ;
   __s32 accept_ra_from_local ;
   __s32 optimistic_dad ;
   __s32 use_optimistic ;
   __s32 mc_forwarding ;
   __s32 disable_ipv6 ;
   __s32 drop_unicast_in_l2_multicast ;
   __s32 accept_dad ;
   __s32 force_tllao ;
   __s32 ndisc_notify ;
   __s32 suppress_frag_ndisc ;
   __s32 accept_ra_mtu ;
   __s32 drop_unsolicited_na ;
   struct ipv6_stable_secret stable_secret ;
   __s32 use_oif_addrs_only ;
   __s32 keep_addr_on_down ;
   __s32 seg6_enabled ;
   __s32 seg6_require_hmac ;
   __u32 enhanced_dad ;
   __u32 addr_gen_mode ;
   __s32 disable_policy ;
   __s32 ndisc_tclass ;
   struct ctl_table_header *sysctl_header ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page_counter.h"
struct page_counter {
   atomic_long_t usage ;
   unsigned long min ;
   unsigned long low ;
   unsigned long max ;
   struct page_counter *parent ;
   unsigned long emin ;
   atomic_long_t min_usage ;
   atomic_long_t children_min_usage ;
   unsigned long elow ;
   atomic_long_t low_usage ;
   atomic_long_t children_low_usage ;
   unsigned long watermark ;
   unsigned long failcnt ;
};
#line 66 
struct eventfd_ctx;
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmpressure.h"
struct vmpressure {
   unsigned long scanned ;
   unsigned long reclaimed ;
   unsigned long tree_scanned ;
   unsigned long tree_reclaimed ;
   spinlock_t sr_lock ;
   struct list_head events ;
   struct mutex events_lock ;
   struct work_struct work ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/flex_proportions.h"
struct fprop_global {
   struct percpu_counter events ;
   unsigned int period ;
   seqcount_t sequence ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/flex_proportions.h"
struct fprop_local_percpu {
   struct percpu_counter events ;
   unsigned int period ;
   raw_spinlock_t lock ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/flex_proportions.h"
typedef int congested_fn(void *, int );
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
enum wb_reason {
    WB_REASON_BACKGROUND = 0,
    WB_REASON_VMSCAN = 1,
    WB_REASON_SYNC = 2,
    WB_REASON_PERIODIC = 3,
    WB_REASON_LAPTOP_TIMER = 4,
    WB_REASON_FREE_MORE_MEM = 5,
    WB_REASON_FS_FREE_SPACE = 6,
    WB_REASON_FORKER_THREAD = 7,
    WB_REASON_FOREIGN_FLUSH = 8,
    WB_REASON_MAX = 9
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct wb_completion {
   atomic_t cnt ;
   wait_queue_head_t *waitq ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct bdi_writeback_congested {
   unsigned long state ;
   refcount_t refcnt ;
   struct backing_dev_info *__bdi ;
   int blkcg_id ;
   struct rb_node rb_node ;
};
#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
union __anonunion_1404 {
   struct work_struct release_work ;
   struct callback_head rcu ;
};
#line 130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct bdi_writeback {
   struct backing_dev_info *bdi ;
   unsigned long state ;
   unsigned long last_old_flush ;
   struct list_head b_dirty ;
   struct list_head b_io ;
   struct list_head b_more_io ;
   struct list_head b_dirty_time ;
   spinlock_t list_lock ;
   struct percpu_counter stat[4U] ;
   struct bdi_writeback_congested *congested ;
   unsigned long bw_time_stamp ;
   unsigned long dirtied_stamp ;
   unsigned long written_stamp ;
   unsigned long write_bandwidth ;
   unsigned long avg_write_bandwidth ;
   unsigned long dirty_ratelimit ;
   unsigned long balanced_dirty_ratelimit ;
   struct fprop_local_percpu completions ;
   int dirty_exceeded ;
   enum wb_reason start_all_reason ;
   spinlock_t work_lock ;
   struct list_head work_list ;
   struct delayed_work dwork ;
   unsigned long dirty_sleep ;
   struct list_head bdi_node ;
   struct percpu_ref refcnt ;
   struct fprop_local_percpu memcg_completions ;
   struct cgroup_subsys_state *memcg_css ;
   struct cgroup_subsys_state *blkcg_css ;
   struct list_head memcg_node ;
   struct list_head blkcg_node ;
   union __anonunion_1404 __anonCompField_bdi_writeback_160 ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
struct backing_dev_info {
   u64 id ;
   struct rb_node rb_node ;
   struct list_head bdi_list ;
   unsigned long ra_pages ;
   unsigned long io_pages ;
   congested_fn *congested_fn ;
   void *congested_data ;
   char *name ;
   struct kref refcnt ;
   unsigned int capabilities ;
   unsigned int min_ratio ;
   unsigned int max_ratio ;
   unsigned int max_prop_frac ;
   atomic_long_t tot_write_bandwidth ;
   struct bdi_writeback wb ;
   struct list_head wb_list ;
   struct xarray cgwb_tree ;
   struct rb_root cgwb_congested_tree ;
   struct mutex cgwb_release_mutex ;
   struct rw_semaphore wb_switch_rwsem ;
   wait_queue_head_t wb_waitq ;
   struct device *dev ;
   struct device *owner ;
   struct timer_list laptop_mode_wb_timer ;
   struct dentry *debug_dir ;
};
#line 306 
struct bio_set;
#line 307 
struct bio_integrity_payload;
#line 308  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backing-dev-defs.h"
typedef void bio_end_io_t(struct bio *);
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
typedef u8 blk_status_t;
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
struct bio_issue {
   u64 value ;
};
#line 144 
struct blkcg_gq;
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
union __anonunion_1405 {
   struct bio_integrity_payload *bi_integrity ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
struct bio {
   struct bio *bi_next ;
   struct gendisk *bi_disk ;
   unsigned int bi_opf ;
   unsigned short bi_flags ;
   unsigned short bi_ioprio ;
   unsigned short bi_write_hint ;
   blk_status_t bi_status ;
   u8 bi_partno ;
   atomic_t __bi_remaining ;
   struct bvec_iter bi_iter ;
   bio_end_io_t *bi_end_io ;
   void *bi_private ;
   struct blkcg_gq *bi_blkg ;
   struct bio_issue bi_issue ;
   u64 bi_iocost_cost ;
   union __anonunion_1405 __anonCompField_bio_161 ;
   unsigned short bi_vcnt ;
   unsigned short bi_max_vecs ;
   atomic_t __bi_cnt ;
   struct bio_vec *bi_io_vec ;
   struct bio_set *bi_pool ;
   struct bio_vec bi_inline_vecs[0U] ;
};
#line 452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
typedef unsigned int blk_qc_t;
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk_types.h"
struct blk_rq_stat {
   u64 mean ;
   u64 min ;
   u64 max ;
   u32 nr_samples ;
   u64 batch ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct disk_stats {
   u64 nsecs[4U] ;
   unsigned long sectors[4U] ;
   unsigned long ios[4U] ;
   unsigned long merges[4U] ;
   unsigned long io_ticks ;
   unsigned long time_in_queue ;
   local_t in_flight[2U] ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct partition_meta_info {
   char uuid[37U] ;
   u8 volname[64U] ;
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct hd_struct {
   sector_t start_sect ;
   sector_t nr_sects ;
   seqcount_t nr_sects_seq ;
   sector_t alignment_offset ;
   unsigned int discard_alignment ;
   struct device __dev ;
   struct kobject *holder_dir ;
   int policy ;
   int partno ;
   struct partition_meta_info *info ;
   int make_it_fail ;
   unsigned long stamp ;
   struct disk_stats *dkstats ;
   struct percpu_ref ref ;
   struct rcu_work rcu_work ;
};
#line 160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct disk_part_tbl {
   struct callback_head callback_head ;
   int len ;
   struct hd_struct *last_lookup ;
   struct hd_struct *part[] ;
};
#line 166 
struct disk_events;
#line 167 
struct badblocks;
#line 172 
struct blk_integrity_profile;
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct blk_integrity {
   struct blk_integrity_profile *profile ;
   unsigned char flags ;
   unsigned char tuple_size ;
   unsigned char interval_exp ;
   unsigned char tag_size ;
};
#line 182 
struct timer_rand_state;
#line 182  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/genhd.h"
struct gendisk {
   int major ;
   int first_minor ;
   int minors ;
   char disk_name[32U] ;
   char *(*devnode)(struct gendisk *, umode_t *) ;
   unsigned short events ;
   unsigned short event_flags ;
   struct disk_part_tbl *part_tbl ;
   struct hd_struct part0 ;
   struct block_device_operations *fops ;
   struct request_queue *queue ;
   void *private_data ;
   int flags ;
   struct rw_semaphore lookup_sem ;
   struct kobject *slave_dir ;
   struct timer_rand_state *random ;
   atomic_t sync_io ;
   struct disk_events *ev ;
   struct kobject integrity_kobj ;
   int node_id ;
   struct badblocks *bb ;
   struct lockdep_map lockdep_map ;
};
#line 637  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pagemap.h"
typedef void *mempool_alloc_t(gfp_t , void *);
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mempool.h"
typedef void mempool_free_t(void *, void *);
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mempool.h"
struct mempool_s {
   spinlock_t lock ;
   int min_nr ;
   int curr_nr ;
   void **elements ;
   void *pool_data ;
   mempool_alloc_t *alloc ;
   mempool_free_t *free ;
   wait_queue_head_t wait ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mempool.h"
typedef struct mempool_s mempool_t;
#line 307  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bio.h"
struct bio_integrity_payload {
   struct bio *bip_bio ;
   struct bvec_iter bip_iter ;
   unsigned short bip_slab ;
   unsigned short bip_vcnt ;
   unsigned short bip_max_vcnt ;
   unsigned short bip_flags ;
   struct bvec_iter bio_iter ;
   struct work_struct bip_work ;
   struct bio_vec *bip_vec ;
   struct bio_vec bip_inline_vecs[0U] ;
};
#line 575  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bio.h"
struct bio_list {
   struct bio *head ;
   struct bio *tail ;
};
#line 703  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bio.h"
struct bio_set {
   struct kmem_cache *bio_slab ;
   unsigned int front_pad ;
   mempool_t bio_pool ;
   mempool_t bvec_pool ;
   mempool_t bio_integrity_pool ;
   mempool_t bvec_integrity_pool ;
   spinlock_t rescue_lock ;
   struct bio_list rescue_list ;
   struct work_struct rescue_work ;
   struct workqueue_struct *rescue_workqueue ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bsg.h"
struct sg_io_v4 {
   __s32 guard ;
   __u32 protocol ;
   __u32 subprotocol ;
   __u32 request_len ;
   __u64 request ;
   __u64 request_tag ;
   __u32 request_attr ;
   __u32 request_priority ;
   __u32 request_extra ;
   __u32 max_response_len ;
   __u64 response ;
   __u32 dout_iovec_count ;
   __u32 dout_xfer_len ;
   __u32 din_iovec_count ;
   __u32 din_xfer_len ;
   __u64 dout_xferp ;
   __u64 din_xferp ;
   __u32 timeout ;
   __u32 flags ;
   __u64 usr_ptr ;
   __u32 spare_in ;
   __u32 driver_status ;
   __u32 transport_status ;
   __u32 device_status ;
   __u32 retry_delay ;
   __u32 info ;
   __u32 duration ;
   __u32 response_len ;
   __s32 din_resid ;
   __s32 dout_resid ;
   __u64 generated_tag ;
   __u32 spare_out ;
   __u32 padding ;
};
#line 65 
struct request;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bsg.h"
struct bsg_ops {
   int (*check_proto)(struct sg_io_v4 *) ;
   int (*fill_hdr)(struct request *, struct sg_io_v4 *, fmode_t ) ;
   int (*complete_rq)(struct request *, struct sg_io_v4 *) ;
   void (*free_rq)(struct request *) ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bsg.h"
struct bsg_class_device {
   struct device *class_dev ;
   int minor ;
   struct request_queue *queue ;
   struct bsg_ops *ops ;
};
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/blkzoned.h"
struct blk_zone {
   __u64 start ;
   __u64 len ;
   __u64 wp ;
   __u8 type ;
   __u8 cond ;
   __u8 non_seq ;
   __u8 reset ;
   __u8 reserved[36U] ;
};
#line 134 
struct elevator_queue;
#line 135 
struct blk_trace;
#line 138 
struct blk_flush_queue;
#line 139 
struct pr_ops;
#line 140 
struct rq_qos;
#line 141 
struct blk_queue_stats;
#line 142 
struct blk_stat_callback;
#line 143  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/blkzoned.h"
typedef void rq_end_io_fn(struct request *, blk_status_t );
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef __u32 req_flags_t;
#line 67 
enum mq_rq_state {
    MQ_RQ_IDLE = 0,
    MQ_RQ_IN_FLIGHT = 1,
    MQ_RQ_COMPLETE = 2
};
#line 132 
struct blk_mq_ctx;
#line 132 
struct blk_mq_hw_ctx;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_1408 {
   struct hlist_node hash ;
   struct list_head ipi_list ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_1409 {
   struct rb_node rb_node ;
   struct bio_vec special_vec ;
   void *completion_data ;
   int error_count ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct __anonstruct_elv_1411 {
   struct io_cq *icq ;
   void *priv[2U] ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct __anonstruct_flush_1412 {
   unsigned int seq ;
   struct list_head list ;
   rq_end_io_fn *saved_end_io ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_1410 {
   struct __anonstruct_elv_1411 elv ;
   struct __anonstruct_flush_1412 flush ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
union __anonunion_1413 {
   struct __call_single_data csd ;
   u64 fifo_time ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct request {
   struct request_queue *q ;
   struct blk_mq_ctx *mq_ctx ;
   struct blk_mq_hw_ctx *mq_hctx ;
   unsigned int cmd_flags ;
   req_flags_t rq_flags ;
   int tag ;
   int internal_tag ;
   unsigned int __data_len ;
   sector_t __sector ;
   struct bio *bio ;
   struct bio *biotail ;
   struct list_head queuelist ;
   union __anonunion_1408 __anonCompField_request_162 ;
   union __anonunion_1409 __anonCompField_request_163 ;
   union __anonunion_1410 __anonCompField_request_164 ;
   struct gendisk *rq_disk ;
   struct hd_struct *part ;
   u64 alloc_time_ns ;
   u64 start_time_ns ;
   u64 io_start_time_ns ;
   unsigned short wbt_flags ;
   unsigned short stats_sectors ;
   unsigned short nr_phys_segments ;
   unsigned short nr_integrity_segments ;
   unsigned short write_hint ;
   unsigned short ioprio ;
   unsigned int extra_len ;
   enum mq_rq_state state ;
   refcount_t ref ;
   unsigned int timeout ;
   unsigned long deadline ;
   union __anonunion_1413 __anonCompField_request_165 ;
   rq_end_io_fn *end_io ;
   void *end_io_data ;
};
#line 285 
struct elevator_type;
#line 286 
struct blk_mq_debugfs_attr;
#line 287 
enum elv_merge {
    ELEVATOR_NO_MERGE = 0,
    ELEVATOR_FRONT_MERGE = 1,
    ELEVATOR_BACK_MERGE = 2,
    ELEVATOR_DISCARD_MERGE = 3
};
#line 294 
struct blk_mq_alloc_data;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elevator_mq_ops {
   int (*init_sched)(struct request_queue *, struct elevator_type *) ;
   void (*exit_sched)(struct elevator_queue *) ;
   int (*init_hctx)(struct blk_mq_hw_ctx *, unsigned int ) ;
   void (*exit_hctx)(struct blk_mq_hw_ctx *, unsigned int ) ;
   void (*depth_updated)(struct blk_mq_hw_ctx *) ;
   bool (*allow_merge)(struct request_queue *, struct request *, struct bio *) ;
   bool (*bio_merge)(struct blk_mq_hw_ctx *, struct bio *, unsigned int ) ;
   int (*request_merge)(struct request_queue *, struct request **, struct bio *) ;
   void (*request_merged)(struct request_queue *, struct request *, enum elv_merge ) ;
   void (*requests_merged)(struct request_queue *, struct request *, struct request *) ;
   void (*limit_depth)(unsigned int , struct blk_mq_alloc_data *) ;
   void (*prepare_request)(struct request *, struct bio *) ;
   void (*finish_request)(struct request *) ;
   void (*insert_requests)(struct blk_mq_hw_ctx *, struct list_head *, bool ) ;
   struct request *(*dispatch_request)(struct blk_mq_hw_ctx *) ;
   bool (*has_work)(struct blk_mq_hw_ctx *) ;
   void (*completed_request)(struct request *, u64 ) ;
   void (*requeue_request)(struct request *) ;
   struct request *(*former_request)(struct request_queue *, struct request *) ;
   struct request *(*next_request)(struct request_queue *, struct request *) ;
   void (*init_icq)(struct io_cq *) ;
   void (*exit_icq)(struct io_cq *) ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elv_fs_entry {
   struct attribute attr ;
   ssize_t (*show)(struct elevator_queue *, char *) ;
   ssize_t (*store)(struct elevator_queue *, char *, size_t ) ;
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elevator_type {
   struct kmem_cache *icq_cache ;
   struct elevator_mq_ops ops ;
   size_t icq_size ;
   size_t icq_align ;
   struct elv_fs_entry *elevator_attrs ;
   char *elevator_name ;
   char *elevator_alias ;
   unsigned int elevator_features ;
   struct module *elevator_owner ;
   struct blk_mq_debugfs_attr *queue_debugfs_attrs ;
   struct blk_mq_debugfs_attr *hctx_debugfs_attrs ;
   char icq_cache_name[22U] ;
   struct list_head list ;
};
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
struct elevator_queue {
   struct elevator_type *type ;
   void *elevator_data ;
   struct kobject kobj ;
   struct mutex sysfs_lock ;
   unsigned int registered : 1 ;
   struct hlist_head hash[64U] ;
};
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/elevator.h"
typedef blk_qc_t make_request_fn(struct request_queue *, struct bio *);
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef int dma_drain_needed_fn(struct request *);
#line 304 
enum blk_zoned_model {
    BLK_ZONED_NONE = 0,
    BLK_ZONED_HA = 1,
    BLK_ZONED_HM = 2
};
#line 320  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct queue_limits {
   unsigned long bounce_pfn ;
   unsigned long seg_boundary_mask ;
   unsigned long virt_boundary_mask ;
   unsigned int max_hw_sectors ;
   unsigned int max_dev_sectors ;
   unsigned int chunk_sectors ;
   unsigned int max_sectors ;
   unsigned int max_segment_size ;
   unsigned int physical_block_size ;
   unsigned int logical_block_size ;
   unsigned int alignment_offset ;
   unsigned int io_min ;
   unsigned int io_opt ;
   unsigned int max_discard_sectors ;
   unsigned int max_hw_discard_sectors ;
   unsigned int max_write_same_sectors ;
   unsigned int max_write_zeroes_sectors ;
   unsigned int discard_granularity ;
   unsigned int discard_alignment ;
   unsigned short max_segments ;
   unsigned short max_integrity_segments ;
   unsigned short max_discard_segments ;
   unsigned char misaligned ;
   unsigned char discard_misaligned ;
   unsigned char raid_partial_stripes_expensive ;
   enum blk_zoned_model zoned ;
};
#line 394 
struct blk_mq_ops;
#line 394 
struct throtl_data;
#line 394 
struct blk_mq_tag_set;
#line 394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct request_queue {
   struct request *last_merge ;
   struct elevator_queue *elevator ;
   struct blk_queue_stats *stats ;
   struct rq_qos *rq_qos ;
   make_request_fn *make_request_fn ;
   dma_drain_needed_fn *dma_drain_needed ;
   struct blk_mq_ops *mq_ops ;
   struct blk_mq_ctx *queue_ctx ;
   unsigned int queue_depth ;
   struct blk_mq_hw_ctx **queue_hw_ctx ;
   unsigned int nr_hw_queues ;
   struct backing_dev_info *backing_dev_info ;
   void *queuedata ;
   unsigned long queue_flags ;
   atomic_t pm_only ;
   int id ;
   gfp_t bounce_gfp ;
   spinlock_t queue_lock ;
   struct kobject kobj ;
   struct kobject *mq_kobj ;
   struct blk_integrity integrity ;
   struct device *dev ;
   int rpm_status ;
   unsigned int nr_pending ;
   unsigned long nr_requests ;
   unsigned int dma_drain_size ;
   void *dma_drain_buffer ;
   unsigned int dma_pad_mask ;
   unsigned int dma_alignment ;
   unsigned int rq_timeout ;
   int poll_nsec ;
   struct blk_stat_callback *poll_cb ;
   struct blk_rq_stat poll_stat[16U] ;
   struct timer_list timeout ;
   struct work_struct timeout_work ;
   struct list_head icq_list ;
   unsigned long blkcg_pols[1U] ;
   struct blkcg_gq *root_blkg ;
   struct list_head blkg_list ;
   struct queue_limits limits ;
   unsigned int required_elevator_features ;
   unsigned int nr_zones ;
   unsigned long *conv_zones_bitmap ;
   unsigned long *seq_zones_wlock ;
   unsigned int sg_timeout ;
   unsigned int sg_reserved_size ;
   int node ;
   struct blk_trace *blk_trace ;
   struct mutex blk_trace_mutex ;
   struct blk_flush_queue *fq ;
   struct list_head requeue_list ;
   spinlock_t requeue_lock ;
   struct delayed_work requeue_work ;
   struct mutex sysfs_lock ;
   struct mutex sysfs_dir_lock ;
   struct list_head unused_hctx_list ;
   spinlock_t unused_hctx_lock ;
   int mq_freeze_depth ;
   struct bsg_class_device bsg_dev ;
   struct throtl_data *td ;
   struct callback_head callback_head ;
   wait_queue_head_t mq_freeze_wq ;
   struct mutex mq_freeze_lock ;
   struct percpu_ref q_usage_counter ;
   struct blk_mq_tag_set *tag_set ;
   struct list_head tag_set_list ;
   struct bio_set bio_split ;
   struct dentry *debugfs_dir ;
   struct dentry *sched_debugfs_dir ;
   struct dentry *rqos_debugfs_dir ;
   bool mq_sysfs_init_done ;
   size_t cmd_size ;
   struct work_struct release_work ;
   u64 write_hints[5U] ;
};
#line 1160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct blk_plug {
   struct list_head mq_list ;
   struct list_head cb_list ;
   unsigned short rq_count ;
   bool multiple_queues ;
};
#line 1514  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct blk_integrity_iter {
   void *prot_buf ;
   void *data_buf ;
   sector_t seed ;
   unsigned int data_size ;
   unsigned short interval ;
   char *disk_name ;
};
#line 1522  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef blk_status_t integrity_processing_fn(struct blk_integrity_iter *);
#line 1524  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef void integrity_prepare_fn(struct request *);
#line 1525  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
typedef void integrity_complete_fn(struct request *, unsigned int );
#line 1527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct blk_integrity_profile {
   integrity_processing_fn *generate_fn ;
   integrity_processing_fn *verify_fn ;
   integrity_prepare_fn *prepare_fn ;
   integrity_complete_fn *complete_fn ;
   char *name ;
};
#line 1693  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blkdev.h"
struct block_device_operations {
   int (*open)(struct block_device *, fmode_t ) ;
   void (*release)(struct gendisk *, fmode_t ) ;
   int (*rw_page)(struct block_device *, sector_t , struct page *, unsigned int ) ;
   int (*ioctl)(struct block_device *, fmode_t , unsigned int , unsigned long ) ;
   int (*compat_ioctl)(struct block_device *, fmode_t , unsigned int , unsigned long ) ;
   unsigned int (*check_events)(struct gendisk *, unsigned int ) ;
   int (*media_changed)(struct gendisk *) ;
   void (*unlock_native_capacity)(struct gendisk *) ;
   int (*revalidate_disk)(struct gendisk *) ;
   int (*getgeo)(struct block_device *, struct hd_geometry *) ;
   void (*swap_slot_free_notify)(struct block_device *, unsigned long ) ;
   int (*report_zones)(struct gendisk *, sector_t , unsigned int , int (*)(struct blk_zone *, unsigned int , void *), void *) ;
   struct module *owner ;
   struct pr_ops *pr_ops ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg_policy_data;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg {
   struct cgroup_subsys_state css ;
   spinlock_t lock ;
   struct xarray blkg_tree ;
   struct blkcg_gq *blkg_hint ;
   struct hlist_head blkg_list ;
   struct blkcg_policy_data *cpd[5U] ;
   struct list_head all_blkcgs_node ;
   struct list_head cgwb_list ;
   refcount_t cgwb_refcnt ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkg_iostat {
   u64 bytes[3U] ;
   u64 ios[3U] ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkg_iostat_set {
   struct u64_stats_sync sync ;
   struct blkg_iostat cur ;
   struct blkg_iostat last ;
};
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkg_policy_data {
   struct blkcg_gq *blkg ;
   int plid ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg_policy_data {
   struct blkcg *blkcg ;
   int plid ;
};
#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/blk-cgroup.h"
struct blkcg_gq {
   struct request_queue *q ;
   struct list_head q_node ;
   struct hlist_node blkcg_node ;
   struct blkcg *blkcg ;
   struct bdi_writeback_congested *wb_congested ;
   struct blkcg_gq *parent ;
   struct percpu_ref refcnt ;
   bool online ;
   struct blkg_iostat_set *iostat_cpu ;
   struct blkg_iostat_set iostat ;
   struct blkg_policy_data *pd[5U] ;
   spinlock_t async_bio_lock ;
   struct bio_list async_bios ;
   struct work_struct async_bio_work ;
   atomic_t use_delay ;
   atomic64_t delay_nsec ;
   atomic64_t delay_start ;
   u64 last_delay ;
   int last_use ;
   struct callback_head callback_head ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/writeback.h"
enum writeback_sync_modes {
    WB_SYNC_NONE = 0,
    WB_SYNC_ALL = 1
};
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/writeback.h"
struct writeback_control {
   long nr_to_write ;
   long pages_skipped ;
   loff_t range_start ;
   loff_t range_end ;
   enum writeback_sync_modes sync_mode ;
   unsigned int for_kupdate : 1 ;
   unsigned int for_background : 1 ;
   unsigned int tagged_writepages : 1 ;
   unsigned int for_reclaim : 1 ;
   unsigned int range_cyclic : 1 ;
   unsigned int for_sync : 1 ;
   unsigned int no_cgroup_owner : 1 ;
   unsigned int punt_to_cgroup : 1 ;
   struct bdi_writeback *wb ;
   struct inode *inode ;
   int wb_id ;
   int wb_lcand_id ;
   int wb_tcand_id ;
   size_t wb_bytes ;
   size_t wb_lcand_bytes ;
   size_t wb_tcand_bytes ;
};
#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/writeback.h"
struct wb_domain {
   spinlock_t lock ;
   struct fprop_global completions ;
   struct timer_list period_timer ;
   unsigned long period_time ;
   unsigned long dirty_limit_tstamp ;
   unsigned long dirty_limit ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_id {
   int id ;
   refcount_t ref ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_vmstats_percpu {
   long stat[38U] ;
   unsigned long events[91U] ;
   unsigned long nr_page_events ;
   unsigned long targets[2U] ;
};
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_reclaim_iter {
   struct mem_cgroup *position ;
   unsigned int generation ;
};
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct lruvec_stat {
   long count[32U] ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_shrinker_map {
   struct callback_head rcu ;
   unsigned long map[0U] ;
};
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_per_node {
   struct lruvec lruvec ;
   struct lruvec_stat *lruvec_stat_local ;
   struct lruvec_stat *lruvec_stat_cpu ;
   atomic_long_t lruvec_stat[32U] ;
   unsigned long lru_zone_size[5U][5U] ;
   struct mem_cgroup_reclaim_iter iter ;
   struct memcg_shrinker_map *shrinker_map ;
   struct rb_node tree_node ;
   unsigned long usage_in_excess ;
   bool on_tree ;
   struct mem_cgroup *memcg ;
};
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_threshold {
   struct eventfd_ctx *eventfd ;
   unsigned long threshold ;
};
#line 145  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_threshold_ary {
   int current_threshold ;
   unsigned int size ;
   struct mem_cgroup_threshold entries[0U] ;
};
#line 154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup_thresholds {
   struct mem_cgroup_threshold_ary *primary ;
   struct mem_cgroup_threshold_ary *spare ;
};
#line 164 
enum memcg_kmem_state {
    KMEM_NONE = 0,
    KMEM_ALLOCATED = 1,
    KMEM_ONLINE = 2
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_padding {
   char x[0U] ;
} __attribute__((__aligned__(4096)));
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct memcg_cgwb_frn {
   u64 bdi_id ;
   int memcg_id ;
   u64 at ;
   struct wb_completion done ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memcontrol.h"
struct mem_cgroup {
   struct cgroup_subsys_state css ;
   struct mem_cgroup_id id ;
   struct page_counter memory ;
   struct page_counter swap ;
   struct page_counter memsw ;
   struct page_counter kmem ;
   struct page_counter tcpmem ;
   unsigned long high ;
   struct work_struct high_work ;
   unsigned long soft_limit ;
   struct vmpressure vmpressure ;
   bool use_hierarchy ;
   bool oom_group ;
   bool oom_lock ;
   int under_oom ;
   int swappiness ;
   int oom_kill_disable ;
   struct cgroup_file events_file ;
   struct cgroup_file events_local_file ;
   struct cgroup_file swap_events_file ;
   struct mutex thresholds_lock ;
   struct mem_cgroup_thresholds thresholds ;
   struct mem_cgroup_thresholds memsw_thresholds ;
   struct list_head oom_notify ;
   unsigned long move_charge_at_immigrate ;
   spinlock_t move_lock ;
   unsigned long move_lock_flags ;
   struct memcg_padding _pad1_ ;
   atomic_t moving_account ;
   struct task_struct *move_lock_task ;
   struct memcg_vmstats_percpu *vmstats_local ;
   struct memcg_vmstats_percpu *vmstats_percpu ;
   struct memcg_padding _pad2_ ;
   atomic_long_t vmstats[38U] ;
   atomic_long_t vmevents[91U] ;
   atomic_long_t memory_events[7U] ;
   atomic_long_t memory_events_local[7U] ;
   unsigned long socket_pressure ;
   bool tcpmem_active ;
   int tcpmem_pressure ;
   int kmemcg_id ;
   enum memcg_kmem_state kmem_state ;
   struct list_head kmem_caches ;
   struct list_head cgwb_list ;
   struct wb_domain cgwb_domain ;
   struct memcg_cgwb_frn cgwb_frn[4U] ;
   struct list_head event_list ;
   spinlock_t event_list_lock ;
   struct deferred_split deferred_split_queue ;
   struct mem_cgroup_per_node *nodeinfo[0U] ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/gen_stats.h"
struct gnet_stats_queue {
   __u32 qlen ;
   __u32 backlog ;
   __u32 drops ;
   __u32 requeues ;
   __u32 overlimits ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/gen_stats.h"
struct gnet_stats_basic_packed {
   __u64 bytes ;
   __u64 packets ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/gen_stats.h"
struct gnet_stats_basic_cpu {
   struct gnet_stats_basic_packed bstats ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 20 
struct net_rate_estimator;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/gen_stats.h"
struct gnet_dump {
   spinlock_t *lock ;
   struct sk_buff *skb ;
   struct nlattr *tail ;
   int compat_tc_stats ;
   int compat_xstats ;
   int padattr ;
   void *xstats ;
   int xstats_len ;
   struct tc_stats tc_stats ;
};
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
struct __anonstruct_1434 {
   s16 min ;
   s16 max ;
};
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
union __anonunion_1433 {
   void *validation_data ;
   struct __anonstruct_1434 __anonCompField___anonunion_1433_167 ;
   int (*validate)(struct nlattr *, struct netlink_ext_ack *) ;
   u16 strict_start_type ;
};
#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netlink.h"
struct nla_policy {
   u8 type ;
   u8 validation_type ;
   u16 len ;
   union __anonunion_1433 __anonCompField_nla_policy_168 ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/rtnetlink.h"
struct rtnl_link_ops {
   struct list_head list ;
   char *kind ;
   size_t priv_size ;
   void (*setup)(struct net_device *) ;
   unsigned int maxtype ;
   struct nla_policy *policy ;
   int (*validate)(struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   int (*newlink)(struct net *, struct net_device *, struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   int (*changelink)(struct net_device *, struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   void (*dellink)(struct net_device *, struct list_head *) ;
   size_t (*get_size)(struct net_device *) ;
   int (*fill_info)(struct sk_buff *, struct net_device *) ;
   size_t (*get_xstats_size)(struct net_device *) ;
   int (*fill_xstats)(struct sk_buff *, struct net_device *) ;
   unsigned int (*get_num_tx_queues)(void) ;
   unsigned int (*get_num_rx_queues)(void) ;
   unsigned int slave_maxtype ;
   struct nla_policy *slave_policy ;
   int (*slave_changelink)(struct net_device *, struct net_device *, struct nlattr **, struct nlattr **, struct netlink_ext_ack *) ;
   size_t (*get_slave_size)(struct net_device *, struct net_device *) ;
   int (*fill_slave_info)(struct sk_buff *, struct net_device *, struct net_device *) ;
   struct net *(*get_link_net)(struct net_device *) ;
   size_t (*get_linkxstats_size)(struct net_device *, int ) ;
   int (*fill_linkxstats)(struct sk_buff *, struct net_device *, int *, int ) ;
};
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jhash.h"
struct rhash_lock_head {
   };
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable.h"
struct bucket_table {
   unsigned int size ;
   unsigned int nest ;
   u32 hash_rnd ;
   struct list_head walkers ;
   struct callback_head rcu ;
   struct bucket_table *future_tbl ;
   struct lockdep_map dep_map ;
   struct rhash_lock_head *buckets[] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
struct flow_block {
   struct list_head cb_list ;
};
#line 298  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/flow_offload.h"
typedef int flow_setup_cb_t(enum tc_setup_type , void *, void *);
#line 412 
struct Qdisc_ops;
#line 413 
struct qdisc_walker;
#line 414 
struct tcf_walker;
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct qdisc_size_table {
   struct callback_head rcu ;
   struct list_head list ;
   struct tc_sizespec szopts ;
   int refcnt ;
   u16 data[] ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct qdisc_skb_head {
   struct sk_buff *head ;
   struct sk_buff *tail ;
   __u32 qlen ;
   spinlock_t lock ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct Qdisc {
   int (*enqueue)(struct sk_buff *, struct Qdisc *, struct sk_buff **) ;
   struct sk_buff *(*dequeue)(struct Qdisc *) ;
   unsigned int flags ;
   u32 limit ;
   struct Qdisc_ops *ops ;
   struct qdisc_size_table *stab ;
   struct hlist_node hash ;
   u32 handle ;
   u32 parent ;
   struct netdev_queue *dev_queue ;
   struct net_rate_estimator *rate_est ;
   struct gnet_stats_basic_cpu *cpu_bstats ;
   struct gnet_stats_queue *cpu_qstats ;
   int padded ;
   refcount_t refcnt ;
   struct sk_buff_head gso_skb ;
   struct qdisc_skb_head q ;
   struct gnet_stats_basic_packed bstats ;
   seqcount_t running ;
   struct gnet_stats_queue qstats ;
   unsigned long state ;
   struct Qdisc *next_sched ;
   struct sk_buff_head skb_bad_txq ;
   spinlock_t busylock ;
   spinlock_t seqlock ;
   bool empty ;
   struct callback_head rcu ;
};
#line 195 
struct tcf_block;
#line 195  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct Qdisc_class_ops {
   unsigned int flags ;
   struct netdev_queue *(*select_queue)(struct Qdisc *, struct tcmsg *) ;
   int (*graft)(struct Qdisc *, unsigned long , struct Qdisc *, struct Qdisc **, struct netlink_ext_ack *) ;
   struct Qdisc *(*leaf)(struct Qdisc *, unsigned long ) ;
   void (*qlen_notify)(struct Qdisc *, unsigned long ) ;
   unsigned long (*find)(struct Qdisc *, u32 ) ;
   int (*change)(struct Qdisc *, u32 , u32 , struct nlattr **, unsigned long *, struct netlink_ext_ack *) ;
   int (*delete)(struct Qdisc *, unsigned long ) ;
   void (*walk)(struct Qdisc *, struct qdisc_walker *) ;
   struct tcf_block *(*tcf_block)(struct Qdisc *, unsigned long , struct netlink_ext_ack *) ;
   unsigned long (*bind_tcf)(struct Qdisc *, unsigned long , u32 ) ;
   void (*unbind_tcf)(struct Qdisc *, unsigned long ) ;
   int (*dump)(struct Qdisc *, unsigned long , struct sk_buff *, struct tcmsg *) ;
   int (*dump_stats)(struct Qdisc *, unsigned long , struct gnet_dump *) ;
};
#line 235  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct Qdisc_ops {
   struct Qdisc_ops *next ;
   struct Qdisc_class_ops *cl_ops ;
   char id[16U] ;
   int priv_size ;
   unsigned int static_flags ;
   int (*enqueue)(struct sk_buff *, struct Qdisc *, struct sk_buff **) ;
   struct sk_buff *(*dequeue)(struct Qdisc *) ;
   struct sk_buff *(*peek)(struct Qdisc *) ;
   int (*init)(struct Qdisc *, struct nlattr *, struct netlink_ext_ack *) ;
   void (*reset)(struct Qdisc *) ;
   void (*destroy)(struct Qdisc *) ;
   int (*change)(struct Qdisc *, struct nlattr *, struct netlink_ext_ack *) ;
   void (*attach)(struct Qdisc *) ;
   int (*change_tx_queue_len)(struct Qdisc *, unsigned int ) ;
   int (*dump)(struct Qdisc *, struct sk_buff *) ;
   int (*dump_stats)(struct Qdisc *, struct gnet_dump *) ;
   void (*ingress_block_set)(struct Qdisc *, u32 ) ;
   void (*egress_block_set)(struct Qdisc *, u32 ) ;
   u32 (*ingress_block_get)(struct Qdisc *) ;
   u32 (*egress_block_get)(struct Qdisc *) ;
   struct module *owner ;
};
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct __anonstruct_1508 {
   unsigned long class ;
   u32 classid ;
};
#line 272 
struct tcf_proto;
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct __anonstruct_1509 {
   bool ingress ;
   struct gnet_stats_queue *qstats ;
};
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
union __anonunion_1507 {
   struct __anonstruct_1508 __anonCompField___anonunion_1507_170 ;
   struct tcf_proto *goto_tp ;
   struct __anonstruct_1509 __anonCompField___anonunion_1507_171 ;
};
#line 272  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_result {
   union __anonunion_1507 __anonCompField_tcf_result_172 ;
};
#line 287 
struct tcf_chain;
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_proto_ops {
   struct list_head head ;
   char kind[16U] ;
   int (*classify)(struct sk_buff *, struct tcf_proto *, struct tcf_result *) ;
   int (*init)(struct tcf_proto *) ;
   void (*destroy)(struct tcf_proto *, bool , struct netlink_ext_ack *) ;
   void *(*get)(struct tcf_proto *, u32 ) ;
   void (*put)(struct tcf_proto *, void *) ;
   int (*change)(struct net *, struct sk_buff *, struct tcf_proto *, unsigned long , u32 , struct nlattr **, void **, bool , bool , struct netlink_ext_ack *) ;
   int (*delete)(struct tcf_proto *, void *, bool *, bool , struct netlink_ext_ack *) ;
   bool (*delete_empty)(struct tcf_proto *) ;
   void (*walk)(struct tcf_proto *, struct tcf_walker *, bool ) ;
   int (*reoffload)(struct tcf_proto *, bool , flow_setup_cb_t *, void *, struct netlink_ext_ack *) ;
   void (*hw_add)(struct tcf_proto *, void *) ;
   void (*hw_del)(struct tcf_proto *, void *) ;
   void (*bind_class)(void *, u32 , unsigned long ) ;
   void *(*tmplt_create)(struct net *, struct tcf_chain *, struct nlattr **, struct netlink_ext_ack *) ;
   void (*tmplt_destroy)(void *) ;
   int (*dump)(struct net *, struct tcf_proto *, void *, struct sk_buff *, struct tcmsg *, bool ) ;
   int (*tmplt_dump)(struct sk_buff *, struct net *, void *) ;
   struct module *owner ;
   int flags ;
};
#line 348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_proto {
   struct tcf_proto *next ;
   void *root ;
   int (*classify)(struct sk_buff *, struct tcf_proto *, struct tcf_result *) ;
   __be16 protocol ;
   u32 prio ;
   void *data ;
   struct tcf_proto_ops *ops ;
   struct tcf_chain *chain ;
   spinlock_t lock ;
   bool deleting ;
   refcount_t refcnt ;
   struct callback_head rcu ;
   struct hlist_node destroy_ht_node ;
};
#line 386  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_chain {
   struct mutex filter_chain_lock ;
   struct tcf_proto *filter_chain ;
   struct list_head list ;
   struct tcf_block *block ;
   u32 index ;
   unsigned int refcnt ;
   unsigned int action_refcnt ;
   bool explicitly_created ;
   bool flushing ;
   struct tcf_proto_ops *tmplt_ops ;
   void *tmplt_priv ;
   struct callback_head rcu ;
};
#line 402  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct __anonstruct_chain0_1511 {
   struct tcf_chain *chain ;
   struct list_head filter_chain_list ;
};
#line 402  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct tcf_block {
   struct mutex lock ;
   struct list_head chain_list ;
   u32 index ;
   refcount_t refcnt ;
   struct net *net ;
   struct Qdisc *q ;
   struct rw_semaphore cb_lock ;
   struct flow_block flow_block ;
   struct list_head owner_list ;
   bool keep_dst ;
   atomic_t offloadcnt ;
   unsigned int nooffloaddevcnt ;
   unsigned int lockeddevcnt ;
   struct __anonstruct_chain0_1511 chain0 ;
   struct callback_head rcu ;
   struct hlist_head proto_destroy_ht[128U] ;
   struct mutex proto_destroy_lock ;
};
#line 1269  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sch_generic.h"
struct mini_Qdisc {
   struct tcf_proto *filter_list ;
   struct gnet_stats_basic_cpu *cpu_bstats ;
   struct gnet_stats_queue *cpu_qstats ;
   struct callback_head rcu ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/filter.h"
struct sock_filter {
   __u16 code ;
   __u8 jt ;
   __u8 jf ;
   __u32 k ;
};
#line 35 
struct sock_reuseport;
#line 513  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
struct sock_fprog_kern {
   u16 len ;
   struct sock_filter *filter ;
};
#line 526  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
union __anonunion_1524 {
   struct sock_filter insns[0U] ;
   struct bpf_insn insnsi[0U] ;
};
#line 526  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
struct bpf_prog {
   u16 pages ;
   u16 jited : 1 ;
   u16 jit_requested : 1 ;
   u16 gpl_compatible : 1 ;
   u16 cb_access : 1 ;
   u16 dst_needed : 1 ;
   u16 blinded : 1 ;
   u16 is_func : 1 ;
   u16 kprobe_override : 1 ;
   u16 has_callchain_buf : 1 ;
   u16 enforce_expected_attach_type : 1 ;
   enum bpf_prog_type type ;
   enum bpf_attach_type expected_attach_type ;
   u32 len ;
   u32 jited_len ;
   u8 tag[8U] ;
   struct bpf_prog_aux *aux ;
   struct sock_fprog_kern *orig_prog ;
   unsigned int (*bpf_func)(void *, struct bpf_insn *) ;
   union __anonunion_1524 __anonCompField_bpf_prog_174 ;
};
#line 554  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/filter.h"
struct sk_filter {
   refcount_t refcnt ;
   struct callback_head rcu ;
   struct bpf_prog *prog ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/poll.h"
struct pollfd {
   int fd ;
   short events ;
   short revents ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/poll.h"
struct poll_table_struct {
   void (*_qproc)(struct file *, wait_queue_head_t *, struct poll_table_struct *) ;
   __poll_t _key ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_table;
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_parms {
   possible_net_t net ;
   struct net_device *dev ;
   struct list_head list ;
   int (*neigh_setup)(struct neighbour *) ;
   struct neigh_table *tbl ;
   void *sysctl_table ;
   int dead ;
   refcount_t refcnt ;
   struct callback_head callback_head ;
   int reachable_time ;
   int data[13U] ;
   unsigned long data_state[1U] ;
};
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_statistics {
   unsigned long allocs ;
   unsigned long destroys ;
   unsigned long hash_grows ;
   unsigned long res_failed ;
   unsigned long lookups ;
   unsigned long hits ;
   unsigned long rcv_probes_mcast ;
   unsigned long rcv_probes_ucast ;
   unsigned long periodic_gc_runs ;
   unsigned long forced_gc_runs ;
   unsigned long unres_discards ;
   unsigned long table_fulls ;
};
#line 134 
struct neigh_ops;
#line 134  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neighbour {
   struct neighbour *next ;
   struct neigh_table *tbl ;
   struct neigh_parms *parms ;
   unsigned long confirmed ;
   unsigned long updated ;
   rwlock_t lock ;
   refcount_t refcnt ;
   unsigned int arp_queue_len_bytes ;
   struct sk_buff_head arp_queue ;
   struct timer_list timer ;
   unsigned long used ;
   atomic_t probes ;
   __u8 flags ;
   __u8 nud_state ;
   __u8 type ;
   __u8 dead ;
   u8 protocol ;
   seqlock_t ha_lock ;
   unsigned char ha[32U] ;
   struct hh_cache hh ;
   int (*output)(struct neighbour *, struct sk_buff *) ;
   struct neigh_ops *ops ;
   struct list_head gc_list ;
   struct callback_head rcu ;
   struct net_device *dev ;
   u8 primary_key[0U] ;
} __attribute__((__designated_init__));
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_ops {
   int family ;
   void (*solicit)(struct neighbour *, struct sk_buff *) ;
   void (*error_report)(struct neighbour *, struct sk_buff *) ;
   int (*output)(struct neighbour *, struct sk_buff *) ;
   int (*connected_output)(struct neighbour *, struct sk_buff *) ;
};
#line 171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct pneigh_entry {
   struct pneigh_entry *next ;
   possible_net_t net ;
   struct net_device *dev ;
   u8 flags ;
   u8 protocol ;
   u8 key[0U] ;
};
#line 186  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_hash_table {
   struct neighbour **hash_buckets ;
   unsigned int hash_shift ;
   __u32 hash_rnd[4U] ;
   struct callback_head rcu ;
};
#line 194  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/neighbour.h"
struct neigh_table {
   int family ;
   unsigned int entry_size ;
   unsigned int key_len ;
   __be16 protocol ;
   __u32 (*hash)(void *, struct net_device *, __u32 *) ;
   bool (*key_eq)(struct neighbour *, void *) ;
   int (*constructor)(struct neighbour *) ;
   int (*pconstructor)(struct pneigh_entry *) ;
   void (*pdestructor)(struct pneigh_entry *) ;
   void (*proxy_redo)(struct sk_buff *) ;
   bool (*allow_add)(struct net_device *, struct netlink_ext_ack *) ;
   char *id ;
   struct neigh_parms parms ;
   struct list_head parms_list ;
   int gc_interval ;
   int gc_thresh1 ;
   int gc_thresh2 ;
   int gc_thresh3 ;
   unsigned long last_flush ;
   struct delayed_work gc_work ;
   struct timer_list proxy_timer ;
   struct sk_buff_head proxy_queue ;
   atomic_t entries ;
   atomic_t gc_entries ;
   struct list_head gc_list ;
   rwlock_t lock ;
   unsigned long last_rand ;
   struct neigh_statistics *stats ;
   struct neigh_hash_table *nht ;
   struct pneigh_entry **phash_buckets ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst.h"
struct lwtunnel_state;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst.h"
struct dst_entry {
   struct net_device *dev ;
   struct dst_ops *ops ;
   unsigned long _metrics ;
   unsigned long expires ;
   struct xfrm_state *xfrm ;
   int (*input)(struct sk_buff *) ;
   int (*output)(struct net *, struct sock *, struct sk_buff *) ;
   unsigned short flags ;
   short obsolete ;
   unsigned short header_len ;
   unsigned short trailer_len ;
   atomic_t __refcnt ;
   int __use ;
   unsigned long lastuse ;
   struct lwtunnel_state *lwtstate ;
   struct callback_head callback_head ;
   short error ;
   short __pad ;
   __u32 tclassid ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fib_rules.h"
struct fib_rule_hdr {
   __u8 family ;
   __u8 dst_len ;
   __u8 src_len ;
   __u8 tos ;
   __u8 table ;
   __u8 res1 ;
   __u8 res2 ;
   __u8 action ;
   __u32 flags ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fib_rules.h"
struct fib_rule_port_range {
   __u16 start ;
   __u16 end ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_notifier.h"
struct fib_notifier_ops {
   int family ;
   struct list_head list ;
   unsigned int (*fib_seq_read)(struct net *) ;
   int (*fib_dump)(struct net *, struct notifier_block *, struct netlink_ext_ack *) ;
   struct module *owner ;
   struct callback_head rcu ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_kuid_range {
   kuid_t start ;
   kuid_t end ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_rule {
   struct list_head list ;
   int iifindex ;
   int oifindex ;
   u32 mark ;
   u32 mark_mask ;
   u32 flags ;
   u32 table ;
   u8 action ;
   u8 l3mdev ;
   u8 proto ;
   u8 ip_proto ;
   u32 target ;
   __be64 tun_id ;
   struct fib_rule *ctarget ;
   struct net *fr_net ;
   refcount_t refcnt ;
   u32 pref ;
   int suppress_ifgroup ;
   int suppress_prefixlen ;
   char iifname[16U] ;
   char oifname[16U] ;
   struct fib_kuid_range uid_range ;
   struct fib_rule_port_range sport_range ;
   struct fib_rule_port_range dport_range ;
   struct callback_head rcu ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_lookup_arg {
   void *lookup_ptr ;
   void *lookup_data ;
   void *result ;
   struct fib_rule *rule ;
   u32 table ;
   int flags ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/fib_rules.h"
struct fib_rules_ops {
   int family ;
   struct list_head list ;
   int rule_size ;
   int addr_size ;
   int unresolved_rules ;
   int nr_goto_rules ;
   unsigned int fib_rules_seq ;
   int (*action)(struct fib_rule *, struct flowi *, int , struct fib_lookup_arg *) ;
   bool (*suppress)(struct fib_rule *, struct fib_lookup_arg *) ;
   int (*match)(struct fib_rule *, struct flowi *, int ) ;
   int (*configure)(struct fib_rule *, struct sk_buff *, struct fib_rule_hdr *, struct nlattr **, struct netlink_ext_ack *) ;
   int (*delete)(struct fib_rule *) ;
   int (*compare)(struct fib_rule *, struct fib_rule_hdr *, struct nlattr **) ;
   int (*fill)(struct fib_rule *, struct sk_buff *, struct fib_rule_hdr *) ;
   size_t (*nlmsg_payload)(struct fib_rule *) ;
   void (*flush_cache)(struct fib_rules_ops *) ;
   int nlgroup ;
   struct nla_policy *policy ;
   struct list_head rules_list ;
   struct module *owner ;
   struct net *fro_net ;
   struct callback_head rcu ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/l3mdev.h"
struct l3mdev_ops {
   u32 (*l3mdev_fib_table)(struct net_device *) ;
   struct sk_buff *(*l3mdev_l3_rcv)(struct net_device *, struct sk_buff *, u16 ) ;
   struct sk_buff *(*l3mdev_l3_out)(struct net_device *, struct sock *, struct sk_buff *, u16 ) ;
   struct dst_entry *(*l3mdev_link_scope_lookup)(struct net_device *, struct flowi6 *) ;
};
#line 202  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/l3mdev.h"
struct __anonstruct_socket_lock_t_1546 {
   spinlock_t slock ;
   int owned ;
   wait_queue_head_t wq ;
   struct lockdep_map dep_map ;
};
#line 202  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/l3mdev.h"
typedef struct __anonstruct_socket_lock_t_1546 socket_lock_t;
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct proto;
#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
typedef __u32 __portpair;
#line 114  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
typedef __u64 __addrpair;
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct __anonstruct_1548 {
   __be32 skc_daddr ;
   __be32 skc_rcv_saddr ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_1547 {
   __addrpair skc_addrpair ;
   struct __anonstruct_1548 __anonCompField___anonunion_1547_176 ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_1549 {
   unsigned int skc_hash ;
   __u16 skc_u16hashes[2U] ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct __anonstruct_1551 {
   __be16 skc_dport ;
   __u16 skc_num ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_1550 {
   __portpair skc_portpair ;
   struct __anonstruct_1551 __anonCompField___anonunion_1550_179 ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_1552 {
   struct hlist_node skc_bind_node ;
   struct hlist_node skc_portaddr_node ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_1553 {
   unsigned long skc_flags ;
   struct sock *skc_listener ;
   struct inet_timewait_death_row *skc_tw_dr ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_1554 {
   struct hlist_node skc_node ;
   struct hlist_nulls_node skc_nulls_node ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_1555 {
   int skc_incoming_cpu ;
   u32 skc_rcv_wnd ;
   u32 skc_tw_rcv_nxt ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_1556 {
   u32 skc_rxhash ;
   u32 skc_window_clamp ;
   u32 skc_tw_snd_nxt ;
};
#line 146  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct sock_common {
   union __anonunion_1547 __anonCompField_sock_common_177 ;
   union __anonunion_1549 __anonCompField_sock_common_178 ;
   union __anonunion_1550 __anonCompField_sock_common_180 ;
   unsigned short skc_family ;
   unsigned char skc_state ;
   unsigned char skc_reuse : 4 ;
   unsigned char skc_reuseport : 1 ;
   unsigned char skc_ipv6only : 1 ;
   unsigned char skc_net_refcnt : 1 ;
   int skc_bound_dev_if ;
   union __anonunion_1552 __anonCompField_sock_common_181 ;
   struct proto *skc_prot ;
   possible_net_t skc_net ;
   struct in6_addr skc_v6_daddr ;
   struct in6_addr skc_v6_rcv_saddr ;
   atomic64_t skc_cookie ;
   union __anonunion_1553 __anonCompField_sock_common_182 ;
   int skc_dontcopy_begin[0U] ;
   union __anonunion_1554 __anonCompField_sock_common_183 ;
   unsigned short skc_tx_queue_mapping ;
   unsigned short skc_rx_queue_mapping ;
   union __anonunion_1555 __anonCompField_sock_common_184 ;
   refcount_t skc_refcnt ;
   int skc_dontcopy_end[0U] ;
   union __anonunion_1556 __anonCompField_sock_common_185 ;
};
#line 231 
struct bpf_sk_storage;
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct __anonstruct_sk_backlog_1557 {
   atomic_t rmem_alloc ;
   int len ;
   struct sk_buff *head ;
   struct sk_buff *tail ;
};
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_1558 {
   struct socket_wq *sk_wq ;
   struct socket_wq *sk_wq_raw ;
};
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_1559 {
   struct sk_buff *sk_send_head ;
   struct rb_root tcp_rtx_queue ;
};
#line 323  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct sock {
   struct sock_common __sk_common ;
   socket_lock_t sk_lock ;
   atomic_t sk_drops ;
   int sk_rcvlowat ;
   struct sk_buff_head sk_error_queue ;
   struct sk_buff *sk_rx_skb_cache ;
   struct sk_buff_head sk_receive_queue ;
   struct __anonstruct_sk_backlog_1557 sk_backlog ;
   int sk_forward_alloc ;
   unsigned int sk_ll_usec ;
   unsigned int sk_napi_id ;
   int sk_rcvbuf ;
   struct sk_filter *sk_filter ;
   union __anonunion_1558 __anonCompField_sock_186 ;
   struct xfrm_policy *sk_policy[2U] ;
   struct dst_entry *sk_rx_dst ;
   struct dst_entry *sk_dst_cache ;
   atomic_t sk_omem_alloc ;
   int sk_sndbuf ;
   int sk_wmem_queued ;
   refcount_t sk_wmem_alloc ;
   unsigned long sk_tsq_flags ;
   union __anonunion_1559 __anonCompField_sock_187 ;
   struct sk_buff *sk_tx_skb_cache ;
   struct sk_buff_head sk_write_queue ;
   __s32 sk_peek_off ;
   int sk_write_pending ;
   __u32 sk_dst_pending_confirm ;
   u32 sk_pacing_status ;
   long sk_sndtimeo ;
   struct timer_list sk_timer ;
   __u32 sk_priority ;
   __u32 sk_mark ;
   unsigned long sk_pacing_rate ;
   unsigned long sk_max_pacing_rate ;
   struct page_frag sk_frag ;
   netdev_features_t sk_route_caps ;
   netdev_features_t sk_route_nocaps ;
   netdev_features_t sk_route_forced_caps ;
   int sk_gso_type ;
   unsigned int sk_gso_max_size ;
   gfp_t sk_allocation ;
   __u32 sk_txhash ;
   unsigned int __sk_flags_offset[0U] ;
   unsigned int sk_padding : 1 ;
   unsigned int sk_kern_sock : 1 ;
   unsigned int sk_no_check_tx : 1 ;
   unsigned int sk_no_check_rx : 1 ;
   unsigned int sk_userlocks : 4 ;
   unsigned int sk_protocol : 8 ;
   unsigned int sk_type : 16 ;
   u16 sk_gso_max_segs ;
   u8 sk_pacing_shift ;
   unsigned long sk_lingertime ;
   struct proto *sk_prot_creator ;
   rwlock_t sk_callback_lock ;
   int sk_err ;
   int sk_err_soft ;
   u32 sk_ack_backlog ;
   u32 sk_max_ack_backlog ;
   kuid_t sk_uid ;
   struct pid *sk_peer_pid ;
   struct cred *sk_peer_cred ;
   long sk_rcvtimeo ;
   ktime_t sk_stamp ;
   u16 sk_tsflags ;
   u8 sk_shutdown ;
   u32 sk_tskey ;
   atomic_t sk_zckey ;
   u8 sk_clockid ;
   u8 sk_txtime_deadline_mode : 1 ;
   u8 sk_txtime_report_errors : 1 ;
   u8 sk_txtime_unused : 6 ;
   struct socket *sk_socket ;
   void *sk_user_data ;
   void *sk_security ;
   struct sock_cgroup_data sk_cgrp_data ;
   struct mem_cgroup *sk_memcg ;
   void (*sk_state_change)(struct sock *) ;
   void (*sk_data_ready)(struct sock *) ;
   void (*sk_write_space)(struct sock *) ;
   void (*sk_error_report)(struct sock *) ;
   int (*sk_backlog_rcv)(struct sock *, struct sk_buff *) ;
   struct sk_buff *(*sk_validate_xmit_skb)(struct sock *, struct net_device *, struct sk_buff *) ;
   void (*sk_destruct)(struct sock *) ;
   struct sock_reuseport *sk_reuseport_cb ;
   struct bpf_sk_storage *sk_bpf_storage ;
   struct callback_head sk_rcu ;
};
#line 1048 
struct request_sock_ops;
#line 1049 
struct timewait_sock_ops;
#line 1050 
struct raw_hashinfo;
#line 1051 
struct smc_hashinfo;
#line 1071 
struct udp_table;
#line 1071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
union __anonunion_h_1594 {
   struct inet_hashinfo *hashinfo ;
   struct udp_table *udp_table ;
   struct raw_hashinfo *raw_hash ;
   struct smc_hashinfo *smc_hash ;
};
#line 1071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock.h"
struct proto {
   void (*close)(struct sock *, long ) ;
   int (*pre_connect)(struct sock *, struct sockaddr *, int ) ;
   int (*connect)(struct sock *, struct sockaddr *, int ) ;
   int (*disconnect)(struct sock *, int ) ;
   struct sock *(*accept)(struct sock *, int , int *, bool ) ;
   int (*ioctl)(struct sock *, int , unsigned long ) ;
   int (*init)(struct sock *) ;
   void (*destroy)(struct sock *) ;
   void (*shutdown)(struct sock *, int ) ;
   int (*setsockopt)(struct sock *, int , int , char *, unsigned int ) ;
   int (*getsockopt)(struct sock *, int , int , char *, int *) ;
   void (*keepalive)(struct sock *, int ) ;
   int (*compat_setsockopt)(struct sock *, int , int , char *, unsigned int ) ;
   int (*compat_getsockopt)(struct sock *, int , int , char *, int *) ;
   int (*compat_ioctl)(struct sock *, unsigned int , unsigned long ) ;
   int (*sendmsg)(struct sock *, struct msghdr *, size_t ) ;
   int (*recvmsg)(struct sock *, struct msghdr *, size_t , int , int , int *) ;
   int (*sendpage)(struct sock *, struct page *, int , size_t , int ) ;
   int (*bind)(struct sock *, struct sockaddr *, int ) ;
   int (*backlog_rcv)(struct sock *, struct sk_buff *) ;
   void (*release_cb)(struct sock *) ;
   int (*hash)(struct sock *) ;
   void (*unhash)(struct sock *) ;
   void (*rehash)(struct sock *) ;
   int (*get_port)(struct sock *, unsigned short ) ;
   unsigned int inuse_idx ;
   bool (*stream_memory_free)(struct sock *, int ) ;
   bool (*stream_memory_read)(struct sock *) ;
   void (*enter_memory_pressure)(struct sock *) ;
   void (*leave_memory_pressure)(struct sock *) ;
   atomic_long_t *memory_allocated ;
   struct percpu_counter *sockets_allocated ;
   unsigned long *memory_pressure ;
   long *sysctl_mem ;
   int *sysctl_wmem ;
   int *sysctl_rmem ;
   u32 sysctl_wmem_offset ;
   u32 sysctl_rmem_offset ;
   int max_header ;
   bool no_autobind ;
   struct kmem_cache *slab ;
   unsigned int obj_size ;
   slab_flags_t slab_flags ;
   unsigned int useroffset ;
   unsigned int usersize ;
   struct percpu_counter *orphan_count ;
   struct request_sock_ops *rsk_prot ;
   struct timewait_sock_ops *twsk_prot ;
   union __anonunion_h_1594 h ;
   struct module *owner ;
   char name[32U] ;
   struct list_head node ;
   int (*diag_destroy)(struct sock *, int ) ;
} __attribute__((__designated_init__));
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/request_sock.h"
struct request_sock_ops {
   int family ;
   unsigned int obj_size ;
   struct kmem_cache *slab ;
   char *slab_name ;
   int (*rtx_syn_ack)(struct sock *, struct request_sock *) ;
   void (*send_ack)(struct sock *, struct sk_buff *, struct request_sock *) ;
   void (*send_reset)(struct sock *, struct sk_buff *) ;
   void (*destructor)(struct request_sock *) ;
   void (*syn_ack_timeout)(struct request_sock *) ;
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/request_sock.h"
struct request_sock {
   struct sock_common __req_common ;
   struct request_sock *dl_next ;
   u16 mss ;
   u8 num_retrans ;
   u8 cookie_ts : 1 ;
   u8 num_timeout : 7 ;
   u32 ts_recent ;
   struct timer_list rsk_timer ;
   struct request_sock_ops *rsk_ops ;
   struct sock *sk ;
   u32 *saved_syn ;
   u32 secid ;
   u32 peer_secid ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/timewait_sock.h"
struct timewait_sock_ops {
   struct kmem_cache *twsk_slab ;
   char *twsk_slab_name ;
   unsigned int twsk_obj_size ;
   int (*twsk_unique)(struct sock *, struct sock *, void *) ;
   void (*twsk_destructor)(struct sock *) ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/tcp.h"
struct tcphdr {
   __be16 source ;
   __be16 dest ;
   __be32 seq ;
   __be32 ack_seq ;
   __u16 res1 : 4 ;
   __u16 doff : 4 ;
   __u16 fin : 1 ;
   __u16 syn : 1 ;
   __u16 rst : 1 ;
   __u16 psh : 1 ;
   __u16 ack : 1 ;
   __u16 urg : 1 ;
   __u16 ece : 1 ;
   __u16 cwr : 1 ;
   __be16 window ;
   __sum16 check ;
   __be16 urg_ptr ;
};
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct ip6_sf_list {
   struct ip6_sf_list *sf_next ;
   struct in6_addr sf_addr ;
   unsigned long sf_count[2U] ;
   unsigned char sf_gsresp ;
   unsigned char sf_oldin ;
   unsigned char sf_crcount ;
};
#line 114  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct ifmcaddr6 {
   struct in6_addr mca_addr ;
   struct inet6_dev *idev ;
   struct ifmcaddr6 *next ;
   struct ip6_sf_list *mca_sources ;
   struct ip6_sf_list *mca_tomb ;
   unsigned int mca_sfmode ;
   unsigned char mca_crcount ;
   unsigned long mca_sfcount[2U] ;
   struct timer_list mca_timer ;
   unsigned int mca_flags ;
   int mca_users ;
   refcount_t mca_refcnt ;
   spinlock_t mca_lock ;
   unsigned long mca_cstamp ;
   unsigned long mca_tstamp ;
};
#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct ifacaddr6 {
   struct in6_addr aca_addr ;
   struct fib6_info *aca_rt ;
   struct ifacaddr6 *aca_next ;
   struct hlist_node aca_addr_lst ;
   int aca_users ;
   refcount_t aca_refcnt ;
   unsigned long aca_cstamp ;
   unsigned long aca_tstamp ;
   struct callback_head rcu ;
};
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct ipv6_devstat {
   struct proc_dir_entry *proc_dir_entry ;
   struct ipstats_mib *ipv6 ;
   struct icmpv6_mib_device *icmpv6dev ;
   struct icmpv6msg_mib_device *icmpv6msgdev ;
};
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/if_inet6.h"
struct inet6_dev {
   struct net_device *dev ;
   struct list_head addr_list ;
   struct ifmcaddr6 *mc_list ;
   struct ifmcaddr6 *mc_tomb ;
   spinlock_t mc_lock ;
   unsigned char mc_qrv ;
   unsigned char mc_gq_running ;
   unsigned char mc_ifc_count ;
   unsigned char mc_dad_count ;
   unsigned long mc_v1_seen ;
   unsigned long mc_qi ;
   unsigned long mc_qri ;
   unsigned long mc_maxdelay ;
   struct timer_list mc_gq_timer ;
   struct timer_list mc_ifc_timer ;
   struct timer_list mc_dad_timer ;
   struct ifacaddr6 *ac_list ;
   rwlock_t lock ;
   refcount_t refcnt ;
   __u32 if_flags ;
   int dead ;
   u32 desync_factor ;
   u8 rndid[8U] ;
   struct list_head tempaddr_list ;
   struct in6_addr token ;
   struct neigh_parms *nd_parms ;
   struct ipv6_devconf cnf ;
   struct ipv6_devstat stats ;
   struct timer_list rs_timer ;
   __s32 rs_interval ;
   __u8 rs_probes ;
   unsigned long tstamp ;
   struct callback_head rcu ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_arp.h"
struct prefix_info;
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ndisc.h"
struct nd_opt_hdr {
   __u8 nd_opt_type ;
   __u8 nd_opt_len ;
} __attribute__((__packed__));
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ndisc.h"
struct ndisc_options {
   struct nd_opt_hdr *nd_opt_array[15U] ;
   struct nd_opt_hdr *nd_opts_ri ;
   struct nd_opt_hdr *nd_opts_ri_end ;
   struct nd_opt_hdr *nd_useropts ;
   struct nd_opt_hdr *nd_useropts_end ;
   struct nd_opt_hdr *nd_802154_opt_array[3U] ;
};
#line 201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ndisc.h"
struct ndisc_ops {
   int (*is_useropt)(u8 ) ;
   int (*parse_options)(struct net_device *, struct nd_opt_hdr *, struct ndisc_options *) ;
   void (*update)(struct net_device *, struct neighbour *, u32 , u8 , struct ndisc_options *) ;
   int (*opt_addr_space)(struct net_device *, u8 , struct neighbour *, u8 *, u8 **) ;
   void (*fill_addr_option)(struct net_device *, struct sk_buff *, u8 , u8 *) ;
   void (*prefix_rcv_add_addr)(struct net *, struct net_device *, struct prefix_info *, struct inet6_dev *, struct in6_addr *, int , u32 , bool , bool , __u32 , u32 , bool ) ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inetpeer.h"
struct inet_peer_base {
   struct rb_root rb_root ;
   seqlock_t lock ;
   int total ;
};
#line 235  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip_fib.h"
struct fib_table {
   struct hlist_node tb_hlist ;
   u32 tb_id ;
   int tb_num_default ;
   struct callback_head rcu ;
   unsigned long *tb_data ;
   unsigned long __data[0U] ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_hashtables.h"
struct inet_ehash_bucket {
   struct hlist_nulls_head chain ;
};
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_hashtables.h"
struct inet_bind_hashbucket {
   spinlock_t lock ;
   struct hlist_head chain ;
};
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_hashtables.h"
union __anonunion_1691 {
   struct hlist_head head ;
   struct hlist_nulls_head nulls_head ;
};
#line 112  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_hashtables.h"
struct inet_listen_hashbucket {
   spinlock_t lock ;
   unsigned int count ;
   union __anonunion_1691 __anonCompField_inet_listen_hashbucket_195 ;
};
#line 124  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_hashtables.h"
struct inet_hashinfo {
   struct inet_ehash_bucket *ehash ;
   spinlock_t *ehash_locks ;
   unsigned int ehash_mask ;
   unsigned int ehash_locks_mask ;
   struct kmem_cache *bind_bucket_cachep ;
   struct inet_bind_hashbucket *bhash ;
   unsigned int bhash_size ;
   unsigned int lhash2_mask ;
   struct inet_listen_hashbucket *lhash2 ;
   struct inet_listen_hashbucket listening_hash[32U] ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/sock_reuseport.h"
struct sock_reuseport {
   struct callback_head rcu ;
   u16 max_socks ;
   u16 num_socks ;
   unsigned int synq_overflow_ts ;
   unsigned int reuseport_id ;
   unsigned int bind_inany : 1 ;
   unsigned int has_conns : 1 ;
   struct bpf_prog *prog ;
   struct sock *socks[0U] ;
};
#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip.h"
union __anonunion_1694 {
   void (*destructor)(struct sock *) ;
   struct sock *saved_sk ;
};
#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/ip.h"
struct ip_ra_chain {
   struct ip_ra_chain *next ;
   struct sock *sk ;
   union __anonunion_1694 __anonCompField_ip_ra_chain_196 ;
   struct callback_head rcu ;
};
#line 979  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/tcp.h"
enum tcp_ca_event {
    CA_EVENT_TX_START = 0,
    CA_EVENT_CWND_RESTART = 1,
    CA_EVENT_COMPLETE_CWR = 2,
    CA_EVENT_LOSS = 3,
    CA_EVENT_ECN_NO_CE = 4,
    CA_EVENT_ECN_IS_CE = 5
};
#line 994 
union tcp_cc_info;
#line 1013  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/tcp.h"
struct ack_sample {
   u32 pkts_acked ;
   s32 rtt_us ;
   u32 in_flight ;
};
#line 1027  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/tcp.h"
struct rate_sample {
   u64 prior_mstamp ;
   u32 prior_delivered ;
   s32 delivered ;
   long interval_us ;
   u32 snd_interval_us ;
   u32 rcv_interval_us ;
   long rtt_us ;
   int losses ;
   u32 acked_sacked ;
   u32 prior_in_flight ;
   bool is_app_limited ;
   bool is_retrans ;
   bool is_ack_delayed ;
};
#line 1043  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/tcp.h"
struct tcp_congestion_ops {
   struct list_head list ;
   u32 key ;
   u32 flags ;
   void (*init)(struct sock *) ;
   void (*release)(struct sock *) ;
   u32 (*ssthresh)(struct sock *) ;
   void (*cong_avoid)(struct sock *, u32 , u32 ) ;
   void (*set_state)(struct sock *, u8 ) ;
   void (*cwnd_event)(struct sock *, enum tcp_ca_event ) ;
   void (*in_ack_event)(struct sock *, u32 ) ;
   u32 (*undo_cwnd)(struct sock *) ;
   void (*pkts_acked)(struct sock *, struct ack_sample *) ;
   u32 (*min_tso_segs)(struct sock *) ;
   u32 (*sndbuf_expand)(struct sock *) ;
   void (*cong_control)(struct sock *, struct rate_sample *) ;
   size_t (*get_info)(struct sock *, u32 , int *, union tcp_cc_info *) ;
   char name[16U] ;
   struct module *owner ;
};
#line 1661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/tcp.h"
struct tcp_fastopen_context {
   siphash_key_t key[2U] ;
   int num ;
   struct callback_head rcu ;
};
#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4/t4_hw.h"
union __anonunion_1745 {
   u8 type_gen ;
   __be64 last_flit ;
};
#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4/t4_hw.h"
struct rsp_ctrl {
   __be32 hdrbuflen_pidx ;
   __be32 pldbuflen_qid ;
   union __anonunion_1745 __anonCompField_rsp_ctrl_200 ;
};
#line 793  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4/t4fw_api.h"
struct fw_eth_tx_pkt_vm_wr {
   __be32 op_immdlen ;
   __be32 equiq_to_len16 ;
   __be32 r3[2U] ;
   u8 ethmacdst[6U] ;
   u8 ethmacsrc[6U] ;
   __be16 ethtype ;
   __be16 vlantci ;
};
#line 1572  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4/t4fw_api.h"
struct fw_iq_cmd {
   __be32 op_to_vfn ;
   __be32 alloc_to_len16 ;
   __be16 physiqid ;
   __be16 iqid ;
   __be16 fl0id ;
   __be16 fl1id ;
   __be32 type_to_iqandstindex ;
   __be16 iqdroprss_to_iqesize ;
   __be16 iqsize ;
   __be64 iqaddr ;
   __be32 iqns_to_fl0congen ;
   __be16 fl0dcaen_to_fl0cidxfthresh ;
   __be16 fl0size ;
   __be64 fl0addr ;
   __be32 fl1cngchmap_to_fl1congen ;
   __be16 fl1dcaen_to_fl1cidxfthresh ;
   __be16 fl1size ;
   __be64 fl1addr ;
};
#line 1835  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4/t4fw_api.h"
struct fw_eq_eth_cmd {
   __be32 op_to_vfn ;
   __be32 alloc_to_len16 ;
   __be32 eqid_pkd ;
   __be32 physeqid_pkd ;
   __be32 fetchszm_to_iqid ;
   __be32 dcaen_to_eqsize ;
   __be64 eqaddr ;
   __be32 autoequiqe_to_viid ;
   __be32 timeren_timerix ;
   __be64 r9 ;
};
#line 372  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/t4vf_common.h"
enum t4_bar2_qtype {
    T4_BAR2_QTYPE_EGRESS = 0,
    T4_BAR2_QTYPE_INGRESS = 1
};
#line 818  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4/t4_msg.h"
struct cpl_tx_pkt_core {
   __be32 ctrl0 ;
   __be16 pack ;
   __be16 len ;
   __be64 ctrl1 ;
};
#line 900  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4/t4_msg.h"
struct cpl_tx_pkt_lso_core {
   __be32 lso_ctrl ;
   __be16 ipid_ofst ;
   __be16 mss ;
   __be32 seqno_offset ;
   __be32 len ;
};
#line 1124  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4/t4_msg.h"
struct cpl_rx_pkt {
   struct rss_header rsshdr ;
   u8 opcode ;
   u8 iff : 4 ;
   u8 csum_calc : 1 ;
   u8 ipmi_pkt : 1 ;
   u8 vlan_ex : 1 ;
   u8 ip_frag : 1 ;
   __be16 csum ;
   __be16 vlan ;
   __be16 len ;
   __be32 l2info ;
   __be16 hdr_len ;
   __be16 err_vec ;
};
#line 1505  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4/t4_msg.h"
struct ulptx_sge_pair {
   __be32 len[2U] ;
   __be64 addr[2U] ;
};
#line 1510  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4/t4_msg.h"
struct ulptx_sgl {
   __be32 cmd_nsge ;
   __be32 len0 ;
   __be64 addr0 ;
   struct ulptx_sge_pair sge[0U] ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/sge.c"
struct tx_sw_desc {
   struct sk_buff *skb ;
   struct ulptx_sgl *sgl ;
};
#line 168  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/sge.c"
struct rx_sw_desc {
   struct page *page ;
   dma_addr_t dma_addr ;
};
#line 558  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/0/concurrency safety/weaver/sge.i.aux"
typedef int ldv_func_ret_type;
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_1766 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
union __anonunion___u_1768 {
   struct list_head *__val ;
   char __c[1U] ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 867  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4/t4fw_api.h"
struct fw_cmd_hdr {
   __be32 hi ;
   __be32 lo ;
};
#line 1068  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4/t4fw_api.h"
struct fw_reset_cmd {
   __be32 op_to_write ;
   __be32 retval_len16 ;
   __be32 val ;
   __be32 halt_pkd ;
};
#line 1460  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4/t4fw_api.h"
struct fw_params_param {
   __be32 mnem ;
   __be32 val ;
};
#line 1457  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4/t4fw_api.h"
struct fw_params_cmd {
   __be32 op_to_vfn ;
   __be32 retval_len16 ;
   struct fw_params_param param[7U] ;
};
#line 1472  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4/t4fw_api.h"
struct fw_pfvf_cmd {
   __be32 op_to_vfn ;
   __be32 retval_len16 ;
   __be32 niqflint_niq ;
   __be32 type_to_neq ;
   __be32 tc_to_nexactf ;
   __be32 r_caps_to_nethctrl ;
   __be16 nricq ;
   __be16 nriqp ;
   __be32 r4 ;
};
#line 2187  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4/t4fw_api.h"
struct fw_vi_cmd {
   __be32 op_to_vfn ;
   __be32 alloc_to_len16 ;
   __be16 type_viid ;
   u8 mac[6U] ;
   u8 portid_pkd ;
   u8 nmac ;
   u8 nmac0[6U] ;
   __be16 rsssize_pkd ;
   u8 nmac1[6U] ;
   __be16 idsiiq_pkd ;
   u8 nmac2[6U] ;
   __be16 idseiq_pkd ;
   u8 nmac3[6U] ;
   __be64 r9 ;
   __be64 r10 ;
};
#line 2280  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4/t4fw_api.h"
struct fw_vi_mac_exact {
   __be16 valid_to_idx ;
   u8 macaddr[6U] ;
};
#line 2284  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4/t4fw_api.h"
struct fw_vi_mac_hash {
   __be64 hashvec ;
};
#line 2287  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4/t4fw_api.h"
struct fw_vi_mac_raw {
   __be32 raw_idx_pkd ;
   __be32 data0_pkd ;
   __be32 data1[2U] ;
   __be64 data0m_pkd ;
   __be32 data1m[2U] ;
};
#line 2294  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4/t4fw_api.h"
struct fw_vi_mac_vni {
   __be16 valid_to_idx ;
   __u8 macaddr[6U] ;
   __be16 r7 ;
   __u8 macaddr_mask[6U] ;
   __be32 lookup_type_to_vni ;
   __be32 vni_mask_pkd ;
};
#line 2279  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4/t4fw_api.h"
union fw_vi_mac {
   struct fw_vi_mac_exact exact[7U] ;
   struct fw_vi_mac_hash hash ;
   struct fw_vi_mac_raw raw ;
   struct fw_vi_mac_vni exact_vni[2U] ;
};
#line 2276  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4/t4fw_api.h"
struct fw_vi_mac_cmd {
   __be32 op_to_viid ;
   __be32 freemacs_to_len16 ;
   union fw_vi_mac u ;
};
#line 2383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4/t4fw_api.h"
struct fw_vi_rxmode_cmd {
   __be32 op_to_viid ;
   __be32 retval_len16 ;
   __be32 mtu_to_vlanexen ;
   __be32 r4_lo ;
};
#line 2415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4/t4fw_api.h"
struct fw_vi_enable_cmd {
   __be32 op_to_viid ;
   __be32 ien_to_len16 ;
   __be16 blinkdur ;
   __be16 r3 ;
   __be32 r4 ;
};
#line 2486  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4/t4fw_api.h"
struct fw_vi_stats_ctl {
   __be16 nstats_ix ;
   __be16 r6 ;
   __be32 r7 ;
   __be64 stat0 ;
   __be64 stat1 ;
   __be64 stat2 ;
   __be64 stat3 ;
   __be64 stat4 ;
   __be64 stat5 ;
};
#line 2497  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4/t4fw_api.h"
struct fw_vi_stats_pf {
   __be64 tx_bcast_bytes ;
   __be64 tx_bcast_frames ;
   __be64 tx_mcast_bytes ;
   __be64 tx_mcast_frames ;
   __be64 tx_ucast_bytes ;
   __be64 tx_ucast_frames ;
   __be64 tx_offload_bytes ;
   __be64 tx_offload_frames ;
   __be64 rx_pf_bytes ;
   __be64 rx_pf_frames ;
   __be64 rx_bcast_bytes ;
   __be64 rx_bcast_frames ;
   __be64 rx_mcast_bytes ;
   __be64 rx_mcast_frames ;
   __be64 rx_ucast_bytes ;
   __be64 rx_ucast_frames ;
   __be64 rx_err_frames ;
};
#line 2516  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4/t4fw_api.h"
struct fw_vi_stats_vf {
   __be64 tx_bcast_bytes ;
   __be64 tx_bcast_frames ;
   __be64 tx_mcast_bytes ;
   __be64 tx_mcast_frames ;
   __be64 tx_ucast_bytes ;
   __be64 tx_ucast_frames ;
   __be64 tx_drop_frames ;
   __be64 tx_offload_bytes ;
   __be64 tx_offload_frames ;
   __be64 rx_bcast_bytes ;
   __be64 rx_bcast_frames ;
   __be64 rx_mcast_bytes ;
   __be64 rx_mcast_frames ;
   __be64 rx_ucast_bytes ;
   __be64 rx_ucast_frames ;
   __be64 rx_err_frames ;
};
#line 2485  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4/t4fw_api.h"
union fw_vi_stats {
   struct fw_vi_stats_ctl ctl ;
   struct fw_vi_stats_pf pf ;
   struct fw_vi_stats_vf vf ;
};
#line 2482  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4/t4fw_api.h"
struct fw_vi_stats_cmd {
   __be32 op_to_viid ;
   __be32 retval_len16 ;
   union fw_vi_stats u ;
};
#line 2546  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4/t4fw_api.h"
struct fw_acl_mac_cmd {
   __be32 op_to_vfn ;
   __be32 en_to_len16 ;
   u8 nmac ;
   u8 r3[7U] ;
   __be16 r4 ;
   u8 macaddr0[6U] ;
   __be16 r5 ;
   u8 macaddr1[6U] ;
   __be16 r6 ;
   u8 macaddr2[6U] ;
   __be16 r7 ;
   u8 macaddr3[6U] ;
};
#line 2570  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4/t4fw_api.h"
struct fw_acl_vlan_cmd {
   __be32 op_to_vfn ;
   __be32 en_to_len16 ;
   u8 nvlan ;
   u8 dropnovlan_fm ;
   u8 r3_lo[6U] ;
   __be16 vlanid[16U] ;
};
#line 2794  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4/t4fw_api.h"
struct fw_port_l1cfg {
   __be32 rcap ;
   __be32 r ;
};
#line 2798  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4/t4fw_api.h"
struct fw_port_l2cfg {
   __u8 ctlbf ;
   __u8 ovlan3_to_ivlan0 ;
   __be16 ivlantype ;
   __be16 txipg_force_pinfo ;
   __be16 mtu ;
   __be16 ovlan0mask ;
   __be16 ovlan0type ;
   __be16 ovlan1mask ;
   __be16 ovlan1type ;
   __be16 ovlan2mask ;
   __be16 ovlan2type ;
   __be16 ovlan3mask ;
   __be16 ovlan3type ;
};
#line 2813  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4/t4fw_api.h"
struct fw_port_info {
   __be32 lstatus_to_modtype ;
   __be16 pcap ;
   __be16 acap ;
   __be16 mtu ;
   __u8 cbllen ;
   __u8 auxlinfo ;
   __u8 dcbxdis_pkd ;
   __u8 r8_lo ;
   __be16 lpacap ;
   __be64 r9 ;
};
#line 2825  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4/t4fw_api.h"
struct fw_port_diags {
   __u8 diagop ;
   __u8 r[3U] ;
   __be32 diagval ;
};
#line 2831  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4/t4fw_api.h"
struct fw_port_dcb_pgid {
   __u8 type ;
   __u8 apply_pkd ;
   __u8 r10_lo[2U] ;
   __be32 pgid ;
   __be64 r11 ;
};
#line 2838  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4/t4fw_api.h"
struct fw_port_dcb_pgrate {
   __u8 type ;
   __u8 apply_pkd ;
   __u8 r10_lo[5U] ;
   __u8 num_tcs_supported ;
   __u8 pgrate[8U] ;
   __u8 tsa[8U] ;
};
#line 2846  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4/t4fw_api.h"
struct fw_port_dcb_priorate {
   __u8 type ;
   __u8 apply_pkd ;
   __u8 r10_lo[6U] ;
   __u8 strict_priorate[8U] ;
};
#line 2852  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4/t4fw_api.h"
struct fw_port_dcb_pfc {
   __u8 type ;
   __u8 pfcen ;
   __u8 r10[5U] ;
   __u8 max_pfc_tcs ;
   __be64 r11 ;
};
#line 2859  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4/t4fw_api.h"
struct fw_port_app_priority {
   __u8 type ;
   __u8 r10[2U] ;
   __u8 idx ;
   __u8 user_prio_map ;
   __u8 sel_field ;
   __be16 protocolid ;
   __be64 r12 ;
};
#line 2868  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4/t4fw_api.h"
struct fw_port_dcb_control {
   __u8 type ;
   __u8 all_syncd_pkd ;
   __be16 dcb_version_to_app_state ;
   __be32 r11 ;
   __be64 r12 ;
};
#line 2830  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4/t4fw_api.h"
union fw_port_dcb {
   struct fw_port_dcb_pgid pgid ;
   struct fw_port_dcb_pgrate pgrate ;
   struct fw_port_dcb_priorate priorate ;
   struct fw_port_dcb_pfc pfc ;
   struct fw_port_app_priority app_priority ;
   struct fw_port_dcb_control control ;
};
#line 2876  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4/t4fw_api.h"
struct fw_port_l1cfg32 {
   __be32 rcap32 ;
   __be32 r ;
};
#line 2880  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4/t4fw_api.h"
struct fw_port_info32 {
   __be32 lstatus32_to_cbllen32 ;
   __be32 auxlinfo32_mtu32 ;
   __be32 linkattr32 ;
   __be32 pcaps32 ;
   __be32 acaps32 ;
   __be32 lpacaps32 ;
};
#line 2793  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4/t4fw_api.h"
union fw_port {
   struct fw_port_l1cfg l1cfg ;
   struct fw_port_l2cfg l2cfg ;
   struct fw_port_info info ;
   struct fw_port_diags diags ;
   union fw_port_dcb dcb ;
   struct fw_port_l1cfg32 l1cfg32 ;
   struct fw_port_info32 info32 ;
};
#line 2790  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4/t4fw_api.h"
struct fw_port_cmd {
   __be32 op_to_portid ;
   __be32 action_to_len16 ;
   union fw_port u ;
};
#line 3375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4/t4fw_api.h"
struct fw_rss_ind_tbl_cmd {
   __be32 op_to_viid ;
   __be32 retval_len16 ;
   __be16 niqid ;
   __be16 startidx ;
   __be32 r3 ;
   __be32 iq0_to_iq2 ;
   __be32 iq3_to_iq5 ;
   __be32 iq6_to_iq8 ;
   __be32 iq9_to_iq11 ;
   __be32 iq12_to_iq14 ;
   __be32 iq15_to_iq17 ;
   __be32 iq18_to_iq20 ;
   __be32 iq21_to_iq23 ;
   __be32 iq24_to_iq26 ;
   __be32 iq27_to_iq29 ;
   __be32 iq30_iq31 ;
   __be32 r15_lo ;
};
#line 3411  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4/t4fw_api.h"
struct fw_rss_glb_config_manual {
   __be32 mode_pkd ;
   __be32 r3 ;
   __be64 r4 ;
   __be64 r5 ;
};
#line 3417  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4/t4fw_api.h"
struct fw_rss_glb_config_basicvirtual {
   __be32 mode_pkd ;
   __be32 synmapen_to_hashtoeplitz ;
   __be64 r8 ;
   __be64 r9 ;
};
#line 3410  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4/t4fw_api.h"
union fw_rss_glb_config {
   struct fw_rss_glb_config_manual manual ;
   struct fw_rss_glb_config_basicvirtual basicvirtual ;
};
#line 3407  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4/t4fw_api.h"
struct fw_rss_glb_config_cmd {
   __be32 op_to_write ;
   __be32 retval_len16 ;
   union fw_rss_glb_config u ;
};
#line 3494  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4/t4fw_api.h"
struct fw_rss_vi_config_manual {
   __be64 r3 ;
   __be64 r4 ;
   __be64 r5 ;
};
#line 3499  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4/t4fw_api.h"
struct fw_rss_vi_config_basicvirtual {
   __be32 r6 ;
   __be32 defaultq_to_udpen ;
   __be64 r9 ;
   __be64 r10 ;
};
#line 3493  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4/t4fw_api.h"
union fw_rss_vi_config {
   struct fw_rss_vi_config_manual manual ;
   struct fw_rss_vi_config_basicvirtual basicvirtual ;
};
#line 3489  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4/t4fw_api.h"
struct fw_rss_vi_config_cmd {
   __be32 op_to_viid ;
   __be32 retval_len16 ;
   union fw_rss_vi_config u ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/t4vf_common.h"
typedef u16 fw_port_cap16_t;
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 197 
enum hrtimer_restart;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
struct device_private {
   void *driver_data ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/firmware.h"
struct firmware {
   size_t size ;
   u8 *data ;
   struct page **pages ;
   void *priv ;
};
#line 164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned long irq_hw_number_t;
#line 303  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ioport.h"
struct irq_data;
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/idr.h"
struct ida {
   struct xarray xa ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/property.h"
typedef u32 phandle;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/of.h"
struct property {
   char *name ;
   int length ;
   void *value ;
   struct property *next ;
   unsigned long _flags ;
   struct bin_attribute attr ;
};
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/of.h"
struct device_node {
   char *name ;
   phandle phandle ;
   char *full_name ;
   struct fwnode_handle fwnode ;
   struct property *properties ;
   struct property *deadprops ;
   struct device_node *parent ;
   struct device_node *child ;
   struct device_node *sibling ;
   struct kobject kobj ;
   unsigned long _flags ;
   void *data ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_fwspec {
   struct fwnode_handle *fwnode ;
   int param_count ;
   u32 param[16U] ;
};
#line 68 
enum irq_domain_bus_token {
    DOMAIN_BUS_ANY = 0,
    DOMAIN_BUS_WIRED = 1,
    DOMAIN_BUS_GENERIC_MSI = 2,
    DOMAIN_BUS_PCI_MSI = 3,
    DOMAIN_BUS_PLATFORM_MSI = 4,
    DOMAIN_BUS_NEXUS = 5,
    DOMAIN_BUS_IPI = 6,
    DOMAIN_BUS_FSL_MC_MSI = 7,
    DOMAIN_BUS_TI_SCI_INTA_MSI = 8,
    DOMAIN_BUS_WAKEUP = 9
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_domain_ops {
   int (*match)(struct irq_domain *, struct device_node *, enum irq_domain_bus_token ) ;
   int (*select)(struct irq_domain *, struct irq_fwspec *, enum irq_domain_bus_token ) ;
   int (*map)(struct irq_domain *, unsigned int , irq_hw_number_t ) ;
   void (*unmap)(struct irq_domain *, unsigned int ) ;
   int (*xlate)(struct irq_domain *, struct device_node *, u32 *, unsigned int , unsigned long *, unsigned int *) ;
   int (*alloc)(struct irq_domain *, unsigned int , unsigned int , void *) ;
   void (*free)(struct irq_domain *, unsigned int , unsigned int ) ;
   int (*activate)(struct irq_domain *, struct irq_data *, bool ) ;
   void (*deactivate)(struct irq_domain *, struct irq_data *) ;
   int (*translate)(struct irq_domain *, struct irq_fwspec *, unsigned long *, unsigned int *) ;
   void (*debug_show)(struct seq_file *, struct irq_domain *, struct irq_data *, int ) ;
};
#line 132 
struct irq_domain_chip_generic;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_domain {
   struct list_head link ;
   char *name ;
   struct irq_domain_ops *ops ;
   void *host_data ;
   unsigned int flags ;
   unsigned int mapcount ;
   struct fwnode_handle *fwnode ;
   enum irq_domain_bus_token bus_token ;
   struct irq_domain_chip_generic *gc ;
   struct irq_domain *parent ;
   struct dentry *debugfs_file ;
   irq_hw_number_t hwirq_max ;
   unsigned int revmap_direct_max_irq ;
   unsigned int revmap_size ;
   struct xarray revmap_tree ;
   struct mutex revmap_tree_mutex ;
   unsigned int linear_revmap[] ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rtmutex.h"
struct rt_mutex {
   raw_spinlock_t wait_lock ;
   struct rb_root_cached waiters ;
   struct task_struct *owner ;
   int save_state ;
   char *name ;
   char *file ;
   int line ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/i2c.h"
struct i2c_msg {
   __u16 addr ;
   __u16 flags ;
   __u16 len ;
   __u8 *buf ;
};
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/i2c.h"
union i2c_smbus_data {
   __u8 byte ;
   __u16 word ;
   __u8 block[34U] ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_algorithm;
#line 28 
struct i2c_adapter;
#line 29 
struct i2c_client;
#line 33 
enum i2c_slave_event;
#line 33 
enum i2c_slave_event;
#line 314  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_client {
   unsigned short flags ;
   unsigned short addr ;
   char name[20U] ;
   struct i2c_adapter *adapter ;
   struct device dev ;
   int init_irq ;
   int irq ;
   struct list_head detected ;
   int (*slave_cb)(struct i2c_client *, enum i2c_slave_event , u8 *) ;
};
#line 360 
enum i2c_slave_event {
    I2C_SLAVE_READ_REQUESTED = 0,
    I2C_SLAVE_WRITE_REQUESTED = 1,
    I2C_SLAVE_READ_PROCESSED = 2,
    I2C_SLAVE_WRITE_RECEIVED = 3,
    I2C_SLAVE_STOP = 4
};
#line 527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_algorithm {
   int (*master_xfer)(struct i2c_adapter *, struct i2c_msg *, int ) ;
   int (*master_xfer_atomic)(struct i2c_adapter *, struct i2c_msg *, int ) ;
   int (*smbus_xfer)(struct i2c_adapter *, u16 , unsigned short , char , u8 , int , union i2c_smbus_data *) ;
   int (*smbus_xfer_atomic)(struct i2c_adapter *, u16 , unsigned short , char , u8 , int , union i2c_smbus_data *) ;
   u32 (*functionality)(struct i2c_adapter *) ;
   int (*reg_slave)(struct i2c_client *) ;
   int (*unreg_slave)(struct i2c_client *) ;
};
#line 565  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_lock_operations {
   void (*lock_bus)(struct i2c_adapter *, unsigned int ) ;
   int (*trylock_bus)(struct i2c_adapter *, unsigned int ) ;
   void (*unlock_bus)(struct i2c_adapter *, unsigned int ) ;
};
#line 618 
struct gpio_desc;
#line 618  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_bus_recovery_info {
   int (*recover_bus)(struct i2c_adapter *) ;
   int (*get_scl)(struct i2c_adapter *) ;
   void (*set_scl)(struct i2c_adapter *, int ) ;
   int (*get_sda)(struct i2c_adapter *) ;
   void (*set_sda)(struct i2c_adapter *, int ) ;
   int (*get_bus_free)(struct i2c_adapter *) ;
   void (*prepare_recovery)(struct i2c_adapter *) ;
   void (*unprepare_recovery)(struct i2c_adapter *) ;
   struct gpio_desc *scl_gpiod ;
   struct gpio_desc *sda_gpiod ;
};
#line 661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_adapter_quirks {
   u64 flags ;
   int max_num_msgs ;
   u16 max_write_len ;
   u16 max_read_len ;
   u16 max_comb_1st_msg_len ;
   u16 max_comb_2nd_msg_len ;
};
#line 692  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_adapter {
   struct module *owner ;
   unsigned int class ;
   struct i2c_algorithm *algo ;
   void *algo_data ;
   struct i2c_lock_operations *lock_ops ;
   struct rt_mutex bus_lock ;
   struct rt_mutex mux_lock ;
   int timeout ;
   int retries ;
   struct device dev ;
   unsigned long locked_flags ;
   int nr ;
   char name[48U] ;
   struct completion dev_released ;
   struct mutex userspace_clients_lock ;
   struct list_head userspace_clients ;
   struct i2c_bus_recovery_info *bus_recovery_info ;
   struct i2c_adapter_quirks *quirks ;
   struct irq_domain *host_notify_domain ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cdev.h"
struct cdev {
   struct kobject kobj ;
   struct module *owner ;
   struct file_operations *ops ;
   struct list_head list ;
   dev_t dev ;
   unsigned int count ;
} __attribute__((__designated_init__));
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-common.h"
struct v4l2_edid {
   __u32 pad ;
   __u32 start_block ;
   __u32 blocks ;
   __u32 reserved[5U] ;
   __u8 *edid ;
};
#line 754 
enum v4l2_priority {
    V4L2_PRIORITY_UNSET = 0,
    V4L2_PRIORITY_BACKGROUND = 1,
    V4L2_PRIORITY_INTERACTIVE = 2,
    V4L2_PRIORITY_RECORD = 3,
    V4L2_PRIORITY_DEFAULT = 2
};
#line 413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_rect {
   __s32 left ;
   __s32 top ;
   __u32 width ;
   __u32 height ;
};
#line 420  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_fract {
   __u32 numerator ;
   __u32 denominator ;
};
#line 1212  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
typedef __u64 v4l2_std_id;
#line 1394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_bt_timings {
   __u32 width ;
   __u32 height ;
   __u32 interlaced ;
   __u32 polarities ;
   __u64 pixelclock ;
   __u32 hfrontporch ;
   __u32 hsync ;
   __u32 hbackporch ;
   __u32 vfrontporch ;
   __u32 vsync ;
   __u32 vbackporch ;
   __u32 il_vfrontporch ;
   __u32 il_vsync ;
   __u32 il_vbackporch ;
   __u32 standards ;
   __u32 flags ;
   struct v4l2_fract picture_aspect ;
   __u8 cea861_vic ;
   __u8 hdmi_vic ;
   __u8 reserved[46U] ;
} __attribute__((__packed__));
#line 1517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_4232 {
   struct v4l2_bt_timings bt ;
   __u32 reserved[32U] ;
};
#line 1517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dv_timings {
   __u32 type ;
   union __anonunion_4232 __anonCompField_v4l2_dv_timings_77 ;
} __attribute__((__packed__));
#line 1536  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_enum_dv_timings {
   __u32 index ;
   __u32 pad ;
   __u32 reserved[2U] ;
   struct v4l2_dv_timings timings ;
};
#line 1554  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_bt_timings_cap {
   __u32 min_width ;
   __u32 max_width ;
   __u32 min_height ;
   __u32 max_height ;
   __u64 min_pixelclock ;
   __u64 max_pixelclock ;
   __u32 standards ;
   __u32 capabilities ;
   __u32 reserved[16U] ;
} __attribute__((__packed__));
#line 1581  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_4233 {
   struct v4l2_bt_timings_cap bt ;
   __u32 raw_data[32U] ;
};
#line 1581  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dv_timings_cap {
   __u32 type ;
   __u32 pad ;
   __u32 reserved[2U] ;
   union __anonunion_4233 __anonCompField_v4l2_dv_timings_cap_78 ;
};
#line 1803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_tuner {
   __u32 index ;
   __u8 name[32U] ;
   __u32 type ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 rxsubchans ;
   __u32 audmode ;
   __s32 signal ;
   __s32 afc ;
   __u32 reserved[4U] ;
};
#line 1817  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_modulator {
   __u32 index ;
   __u8 name[32U] ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 txsubchans ;
   __u32 type ;
   __u32 reserved[3U] ;
};
#line 1860  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_frequency {
   __u32 tuner ;
   __u32 type ;
   __u32 frequency ;
   __u32 reserved[8U] ;
};
#line 1871  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_frequency_band {
   __u32 tuner ;
   __u32 type ;
   __u32 index ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 modulation ;
   __u32 reserved[9U] ;
};
#line 2043  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_vbi_format {
   __u32 sampling_rate ;
   __u32 offset ;
   __u32 samples_per_line ;
   __u32 sample_format ;
   __s32 start[2U] ;
   __u32 count[2U] ;
   __u32 flags ;
   __u32 reserved[2U] ;
};
#line 2071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_format {
   __u16 service_set ;
   __u16 service_lines[2U][24U] ;
   __u32 io_size ;
   __u32 reserved[2U] ;
};
#line 2095  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_cap {
   __u16 service_set ;
   __u16 service_lines[2U][24U] ;
   __u32 type ;
   __u32 reserved[3U] ;
};
#line 2106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_data {
   __u32 id ;
   __u32 field ;
   __u32 line ;
   __u32 reserved ;
   __u8 data[48U] ;
};
#line 2350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_event_subscription {
   __u32 type ;
   __u32 id ;
   __u32 flags ;
   __u32 reserved[5U] ;
};
#line 2375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_4249 {
   __u32 addr ;
   char name[32U] ;
};
#line 2375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dbg_match {
   __u32 type ;
   union __anonunion_4249 __anonCompField_v4l2_dbg_match_87 ;
} __attribute__((__packed__));
#line 2383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dbg_register {
   struct v4l2_dbg_match match ;
   __u32 size ;
   __u64 reg ;
   __u64 val ;
} __attribute__((__packed__));
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_device;
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_gobj {
   struct media_device *mdev ;
   u32 id ;
   struct list_head list ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity_enum {
   unsigned long *bmap ;
   int idx_max ;
};
#line 88 
struct media_entity;
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct __anonstruct_stack_4253 {
   struct media_entity *entity ;
   struct list_head *link ;
};
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_graph {
   struct __anonstruct_stack_4253 stack[16U] ;
   struct media_entity_enum ent_enum ;
   int top ;
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_pipeline {
   int streaming_count ;
   struct media_graph graph ;
};
#line 132 
struct media_pad;
#line 132 
struct media_interface;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_4254 {
   struct media_gobj *gobj0 ;
   struct media_pad *source ;
   struct media_interface *intf ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_4255 {
   struct media_gobj *gobj1 ;
   struct media_pad *sink ;
   struct media_entity *entity ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_link {
   struct media_gobj graph_obj ;
   struct list_head list ;
   union __anonunion_4254 __anonCompField_media_link_90 ;
   union __anonunion_4255 __anonCompField_media_link_91 ;
   struct media_link *reverse ;
   unsigned long flags ;
   bool is_backlink ;
};
#line 149 
enum media_pad_signal_type {
    PAD_SIGNAL_DEFAULT = 0,
    PAD_SIGNAL_ANALOG = 1,
    PAD_SIGNAL_DV = 2,
    PAD_SIGNAL_AUDIO = 3
};
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_pad {
   struct media_gobj graph_obj ;
   struct media_entity *entity ;
   u16 index ;
   enum media_pad_signal_type sig_type ;
   unsigned long flags ;
};
#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity_operations {
   int (*get_fwnode_pad)(struct fwnode_endpoint *) ;
   int (*link_setup)(struct media_entity *, struct media_pad *, struct media_pad *, u32 ) ;
   int (*link_validate)(struct media_link *) ;
};
#line 221 
enum media_entity_type {
    MEDIA_ENTITY_TYPE_BASE = 0,
    MEDIA_ENTITY_TYPE_VIDEO_DEVICE = 1,
    MEDIA_ENTITY_TYPE_V4L2_SUBDEV = 2
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct __anonstruct_dev_4257 {
   u32 major ;
   u32 minor ;
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_info_4256 {
   struct __anonstruct_dev_4257 dev ;
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity {
   struct media_gobj graph_obj ;
   char *name ;
   enum media_entity_type obj_type ;
   u32 function ;
   unsigned long flags ;
   u16 num_pads ;
   u16 num_links ;
   u16 num_backlinks ;
   int internal_idx ;
   struct media_pad *pads ;
   struct list_head links ;
   struct media_entity_operations *ops ;
   int stream_count ;
   int use_count ;
   struct media_pipeline *pipe ;
   union __anonunion_info_4256 info ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_interface {
   struct media_gobj graph_obj ;
   struct list_head links ;
   u32 type ;
   u32 flags ;
};
#line 349  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_intf_devnode {
   struct media_interface intf ;
   u32 major ;
   u32 minor ;
};
#line 1087 
enum vfl_devnode_type {
    VFL_TYPE_GRABBER = 0,
    VFL_TYPE_VBI = 1,
    VFL_TYPE_RADIO = 2,
    VFL_TYPE_SUBDEV = 3,
    VFL_TYPE_SDR = 4,
    VFL_TYPE_TOUCH = 5,
    VFL_TYPE_MAX = 6
};
#line 1097 
enum vfl_devnode_direction {
    VFL_DIR_RX = 0,
    VFL_DIR_TX = 1,
    VFL_DIR_M2M = 2
};
#line 1104 
struct video_device;
#line 1105 
struct v4l2_device;
#line 1106 
struct v4l2_ctrl_handler;
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct v4l2_prio_state {
   atomic_t prios[4U] ;
};
#line 193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct v4l2_file_operations {
   struct module *owner ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*unlocked_ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl32)(struct file *, unsigned int , unsigned long ) ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   int (*mmap)(struct file *, struct vm_area_struct *) ;
   int (*open)(struct file *) ;
   int (*release)(struct file *) ;
};
#line 256 
struct vb2_queue;
#line 256 
struct v4l2_ioctl_ops;
#line 256  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct video_device {
   struct media_entity entity ;
   struct media_intf_devnode *intf_devnode ;
   struct media_pipeline pipe ;
   struct v4l2_file_operations *fops ;
   u32 device_caps ;
   struct device dev ;
   struct cdev *cdev ;
   struct v4l2_device *v4l2_dev ;
   struct device *dev_parent ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   struct vb2_queue *queue ;
   struct v4l2_prio_state *prio ;
   char name[32U] ;
   enum vfl_devnode_type vfl_type ;
   enum vfl_devnode_direction vfl_dir ;
   int minor ;
   u16 num ;
   unsigned long flags ;
   int index ;
   spinlock_t fh_lock ;
   struct list_head fh_list ;
   int dev_debug ;
   v4l2_std_id tvnorms ;
   void (*release)(struct video_device *) ;
   struct v4l2_ioctl_ops *ioctl_ops ;
   unsigned long valid_ioctls[3U] ;
   struct mutex *lock ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-common.h"
struct v4l2_subdev;
#line 96 
struct v4l2_subdev_ops;
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-common.h"
struct v4l2_priv_tun_config {
   int tuner ;
   void *priv ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-devnode.h"
struct media_file_operations {
   struct module *owner ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl)(struct file *, unsigned int , unsigned long ) ;
   int (*open)(struct file *) ;
   int (*release)(struct file *) ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-devnode.h"
struct media_devnode {
   struct media_device *media_dev ;
   struct media_file_operations *fops ;
   struct device dev ;
   struct cdev cdev ;
   struct device *parent ;
   int minor ;
   unsigned long flags ;
   void (*release)(struct media_devnode *) ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_request;
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_device_ops {
   int (*link_notify)(struct media_link *, u32 , unsigned int ) ;
   struct media_request *(*req_alloc)(struct media_device *) ;
   void (*req_free)(struct media_request *) ;
   int (*req_validate)(struct media_request *) ;
   void (*req_queue)(struct media_request *) ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_device {
   struct device *dev ;
   struct media_devnode *devnode ;
   char model[32U] ;
   char driver_name[32U] ;
   char serial[40U] ;
   char bus_info[32U] ;
   u32 hw_revision ;
   u64 topology_version ;
   u32 id ;
   struct ida entity_internal_idx ;
   int entity_internal_idx_max ;
   struct list_head entities ;
   struct list_head interfaces ;
   struct list_head pads ;
   struct list_head links ;
   struct list_head entity_notify ;
   struct mutex graph_mutex ;
   struct media_graph pm_count_walk ;
   void *source_priv ;
   int (*enable_source)(struct media_entity *, struct media_pipeline *) ;
   void (*disable_source)(struct media_entity *) ;
   struct media_device_ops *ops ;
   struct mutex req_queue_mutex ;
   atomic_t request_id ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-mediabus.h"
struct v4l2_mbus_framefmt {
   __u32 width ;
   __u32 height ;
   __u32 code ;
   __u32 field ;
   __u32 colorspace ;
   __u16 ycbcr_enc ;
   __u16 quantization ;
   __u16 xfer_func ;
   __u16 reserved[11U] ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_format {
   __u32 which ;
   __u32 pad ;
   struct v4l2_mbus_framefmt format ;
   __u32 reserved[8U] ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_mbus_code_enum {
   __u32 pad ;
   __u32 index ;
   __u32 code ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_size_enum {
   __u32 index ;
   __u32 pad ;
   __u32 code ;
   __u32 min_width ;
   __u32 max_width ;
   __u32 min_height ;
   __u32 max_height ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_interval {
   __u32 pad ;
   struct v4l2_fract interval ;
   __u32 reserved[9U] ;
};
#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_interval_enum {
   __u32 index ;
   __u32 pad ;
   __u32 code ;
   __u32 width ;
   __u32 height ;
   struct v4l2_fract interval ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_selection {
   __u32 which ;
   __u32 pad ;
   __u32 target ;
   __u32 flags ;
   struct v4l2_rect r ;
   __u32 reserved[8U] ;
};
#line 157 
struct v4l2_async_notifier;
#line 158 
enum v4l2_async_match_type {
    V4L2_ASYNC_MATCH_CUSTOM = 0,
    V4L2_ASYNC_MATCH_DEVNAME = 1,
    V4L2_ASYNC_MATCH_I2C = 2,
    V4L2_ASYNC_MATCH_FWNODE = 3
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct __anonstruct_i2c_4271 {
   int adapter_id ;
   unsigned short address ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct __anonstruct_custom_4272 {
   bool (*match)(struct device *, struct v4l2_async_subdev *) ;
   void *priv ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
union __anonunion_match_4270 {
   struct fwnode_handle *fwnode ;
   char *device_name ;
   struct __anonstruct_i2c_4271 i2c ;
   struct __anonstruct_custom_4272 custom ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_subdev {
   enum v4l2_async_match_type match_type ;
   union __anonunion_match_4270 match ;
   struct list_head list ;
   struct list_head asd_list ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_notifier_operations {
   int (*bound)(struct v4l2_async_notifier *, struct v4l2_subdev *, struct v4l2_async_subdev *) ;
   int (*complete)(struct v4l2_async_notifier *) ;
   void (*unbind)(struct v4l2_async_notifier *, struct v4l2_subdev *, struct v4l2_async_subdev *) ;
};
#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_notifier {
   struct v4l2_async_notifier_operations *ops ;
   struct v4l2_device *v4l2_dev ;
   struct v4l2_subdev *sd ;
   struct v4l2_async_notifier *parent ;
   struct list_head asd_list ;
   struct list_head waiting ;
   struct list_head done ;
   struct list_head list ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-fh.h"
struct v4l2_m2m_ctx;
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-fh.h"
struct v4l2_fh {
   struct list_head list ;
   struct video_device *vdev ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   enum v4l2_priority prio ;
   wait_queue_head_t wait ;
   struct mutex subscribe_lock ;
   struct list_head subscribed ;
   struct list_head available ;
   unsigned int navailable ;
   u32 sequence ;
   struct v4l2_m2m_ctx *m2m_ctx ;
};
#line 162 
enum v4l2_mbus_type {
    V4L2_MBUS_UNKNOWN = 0,
    V4L2_MBUS_PARALLEL = 1,
    V4L2_MBUS_BT656 = 2,
    V4L2_MBUS_CSI1 = 3,
    V4L2_MBUS_CCP2 = 4,
    V4L2_MBUS_CSI2_DPHY = 5,
    V4L2_MBUS_CSI2_CPHY = 6
};
#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-mediabus.h"
struct v4l2_mbus_config {
   enum v4l2_mbus_type type ;
   unsigned int flags ;
};
#line 184 
struct v4l2_subdev_fh;
#line 185 
struct tuner_setup;
#line 186 
struct v4l2_mbus_frame_desc;
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_decode_vbi_line {
   u32 is_second_field ;
   u8 *p ;
   u32 line ;
   u32 type ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_io_pin_config {
   u32 flags ;
   u8 pin ;
   u8 function ;
   u8 value ;
   u8 strength ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_core_ops {
   int (*log_status)(struct v4l2_subdev *) ;
   int (*s_io_pin_config)(struct v4l2_subdev *, size_t , struct v4l2_subdev_io_pin_config *) ;
   int (*init)(struct v4l2_subdev *, u32 ) ;
   int (*load_fw)(struct v4l2_subdev *) ;
   int (*reset)(struct v4l2_subdev *, u32 ) ;
   int (*s_gpio)(struct v4l2_subdev *, u32 ) ;
   long (*ioctl)(struct v4l2_subdev *, unsigned int , void *) ;
   long (*compat_ioctl32)(struct v4l2_subdev *, unsigned int , unsigned long ) ;
   int (*g_register)(struct v4l2_subdev *, struct v4l2_dbg_register *) ;
   int (*s_register)(struct v4l2_subdev *, struct v4l2_dbg_register *) ;
   int (*s_power)(struct v4l2_subdev *, int ) ;
   int (*interrupt_service_routine)(struct v4l2_subdev *, u32 , bool *) ;
   int (*subscribe_event)(struct v4l2_subdev *, struct v4l2_fh *, struct v4l2_event_subscription *) ;
   int (*unsubscribe_event)(struct v4l2_subdev *, struct v4l2_fh *, struct v4l2_event_subscription *) ;
};
#line 264  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_tuner_ops {
   int (*standby)(struct v4l2_subdev *) ;
   int (*s_radio)(struct v4l2_subdev *) ;
   int (*s_frequency)(struct v4l2_subdev *, struct v4l2_frequency *) ;
   int (*g_frequency)(struct v4l2_subdev *, struct v4l2_frequency *) ;
   int (*enum_freq_bands)(struct v4l2_subdev *, struct v4l2_frequency_band *) ;
   int (*g_tuner)(struct v4l2_subdev *, struct v4l2_tuner *) ;
   int (*s_tuner)(struct v4l2_subdev *, struct v4l2_tuner *) ;
   int (*g_modulator)(struct v4l2_subdev *, struct v4l2_modulator *) ;
   int (*s_modulator)(struct v4l2_subdev *, struct v4l2_modulator *) ;
   int (*s_type_addr)(struct v4l2_subdev *, struct tuner_setup *) ;
   int (*s_config)(struct v4l2_subdev *, struct v4l2_priv_tun_config *) ;
};
#line 304  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_audio_ops {
   int (*s_clock_freq)(struct v4l2_subdev *, u32 ) ;
   int (*s_i2s_clock_freq)(struct v4l2_subdev *, u32 ) ;
   int (*s_routing)(struct v4l2_subdev *, u32 , u32 , u32 ) ;
   int (*s_stream)(struct v4l2_subdev *, int ) ;
};
#line 310 
enum v4l2_mbus_frame_desc_flags {
    V4L2_MBUS_FRAME_DESC_FL_LEN_MAX = 1,
    V4L2_MBUS_FRAME_DESC_FL_BLOB = 2
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_mbus_frame_desc_entry {
   enum v4l2_mbus_frame_desc_flags flags ;
   u32 pixelcode ;
   u32 length ;
};
#line 348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_mbus_frame_desc {
   struct v4l2_mbus_frame_desc_entry entry[4U] ;
   unsigned short num_entries ;
};
#line 415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_video_ops {
   int (*s_routing)(struct v4l2_subdev *, u32 , u32 , u32 ) ;
   int (*s_crystal_freq)(struct v4l2_subdev *, u32 , u32 ) ;
   int (*g_std)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*s_std)(struct v4l2_subdev *, v4l2_std_id ) ;
   int (*s_std_output)(struct v4l2_subdev *, v4l2_std_id ) ;
   int (*g_std_output)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*querystd)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_tvnorms)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_tvnorms_output)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_input_status)(struct v4l2_subdev *, u32 *) ;
   int (*s_stream)(struct v4l2_subdev *, int ) ;
   int (*g_pixelaspect)(struct v4l2_subdev *, struct v4l2_fract *) ;
   int (*g_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_frame_interval *) ;
   int (*s_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_frame_interval *) ;
   int (*s_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*g_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*query_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*g_mbus_config)(struct v4l2_subdev *, struct v4l2_mbus_config *) ;
   int (*s_mbus_config)(struct v4l2_subdev *, struct v4l2_mbus_config *) ;
   int (*s_rx_buffer)(struct v4l2_subdev *, void *, unsigned int *) ;
};
#line 481  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_vbi_ops {
   int (*decode_vbi_line)(struct v4l2_subdev *, struct v4l2_decode_vbi_line *) ;
   int (*s_vbi_data)(struct v4l2_subdev *, struct v4l2_sliced_vbi_data *) ;
   int (*g_vbi_data)(struct v4l2_subdev *, struct v4l2_sliced_vbi_data *) ;
   int (*g_sliced_vbi_cap)(struct v4l2_subdev *, struct v4l2_sliced_vbi_cap *) ;
   int (*s_raw_fmt)(struct v4l2_subdev *, struct v4l2_vbi_format *) ;
   int (*g_sliced_fmt)(struct v4l2_subdev *, struct v4l2_sliced_vbi_format *) ;
   int (*s_sliced_fmt)(struct v4l2_subdev *, struct v4l2_sliced_vbi_format *) ;
};
#line 501  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_sensor_ops {
   int (*g_skip_top_lines)(struct v4l2_subdev *, u32 *) ;
   int (*g_skip_frames)(struct v4l2_subdev *, u32 *) ;
};
#line 505 
enum v4l2_subdev_ir_mode {
    V4L2_SUBDEV_IR_MODE_PULSE_WIDTH = 0
};
#line 540  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ir_parameters {
   unsigned int bytes_per_data_element ;
   enum v4l2_subdev_ir_mode mode ;
   bool enable ;
   bool interrupt_enable ;
   bool shutdown ;
   bool modulation ;
   u32 max_pulse_width ;
   unsigned int carrier_freq ;
   unsigned int duty_cycle ;
   bool invert_level ;
   bool invert_carrier_sense ;
   u32 noise_filter_min_width ;
   unsigned int carrier_range_lower ;
   unsigned int carrier_range_upper ;
   u32 resolution ;
};
#line 599  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ir_ops {
   int (*rx_read)(struct v4l2_subdev *, u8 *, size_t , ssize_t *) ;
   int (*rx_g_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*rx_s_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*tx_write)(struct v4l2_subdev *, u8 *, size_t , ssize_t *) ;
   int (*tx_g_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*tx_s_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
};
#line 630  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_pad_config {
   struct v4l2_mbus_framefmt try_fmt ;
   struct v4l2_rect try_crop ;
   struct v4l2_rect try_compose ;
};
#line 674  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_pad_ops {
   int (*init_cfg)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *) ;
   int (*enum_mbus_code)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_mbus_code_enum *) ;
   int (*enum_frame_size)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_frame_size_enum *) ;
   int (*enum_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_frame_interval_enum *) ;
   int (*get_fmt)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_format *) ;
   int (*set_fmt)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_format *) ;
   int (*get_selection)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_selection *) ;
   int (*set_selection)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_selection *) ;
   int (*get_edid)(struct v4l2_subdev *, struct v4l2_edid *) ;
   int (*set_edid)(struct v4l2_subdev *, struct v4l2_edid *) ;
   int (*dv_timings_cap)(struct v4l2_subdev *, struct v4l2_dv_timings_cap *) ;
   int (*enum_dv_timings)(struct v4l2_subdev *, struct v4l2_enum_dv_timings *) ;
   int (*link_validate)(struct v4l2_subdev *, struct media_link *, struct v4l2_subdev_format *, struct v4l2_subdev_format *) ;
   int (*get_frame_desc)(struct v4l2_subdev *, unsigned int , struct v4l2_mbus_frame_desc *) ;
   int (*set_frame_desc)(struct v4l2_subdev *, unsigned int , struct v4l2_mbus_frame_desc *) ;
};
#line 727  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ops {
   struct v4l2_subdev_core_ops *core ;
   struct v4l2_subdev_tuner_ops *tuner ;
   struct v4l2_subdev_audio_ops *audio ;
   struct v4l2_subdev_video_ops *video ;
   struct v4l2_subdev_vbi_ops *vbi ;
   struct v4l2_subdev_ir_ops *ir ;
   struct v4l2_subdev_sensor_ops *sensor ;
   struct v4l2_subdev_pad_ops *pad ;
};
#line 765  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_internal_ops {
   int (*registered)(struct v4l2_subdev *) ;
   void (*unregistered)(struct v4l2_subdev *) ;
   int (*open)(struct v4l2_subdev *, struct v4l2_subdev_fh *) ;
   int (*close)(struct v4l2_subdev *, struct v4l2_subdev_fh *) ;
   void (*release)(struct v4l2_subdev *) ;
};
#line 772 
struct regulator_bulk_data;
#line 797  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_platform_data {
   struct regulator_bulk_data *regulators ;
   int num_regulators ;
   void *host_priv ;
};
#line 848  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev {
   struct media_entity entity ;
   struct list_head list ;
   struct module *owner ;
   bool owner_v4l2_dev ;
   u32 flags ;
   struct v4l2_device *v4l2_dev ;
   struct v4l2_subdev_ops *ops ;
   struct v4l2_subdev_internal_ops *internal_ops ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   char name[32U] ;
   u32 grp_id ;
   void *dev_priv ;
   void *host_priv ;
   struct video_device *devnode ;
   struct device *dev ;
   struct fwnode_handle *fwnode ;
   struct list_head async_list ;
   struct v4l2_async_subdev *asd ;
   struct v4l2_async_notifier *notifier ;
   struct v4l2_async_notifier *subdev_notifier ;
   struct v4l2_subdev_platform_data *pdata ;
};
#line 906  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_fh {
   struct v4l2_fh vfh ;
   struct module *owner ;
   struct v4l2_subdev_pad_config *pad ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-device.h"
struct v4l2_device {
   struct device *dev ;
   struct media_device *mdev ;
   struct list_head subdevs ;
   spinlock_t lock ;
   char name[36U] ;
   void (*notify)(struct v4l2_subdev *, unsigned int , void *) ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   struct v4l2_prio_state prio ;
   struct kref ref ;
   void (*release)(struct v4l2_device *) ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ptp_clock_kernel.h"
struct ptp_system_timestamp {
   struct timespec64 pre_ts ;
   struct timespec64 post_ts ;
};
#line 277 
struct dma_chan;
#line 279 
struct spi_controller;
#line 280 
struct spi_transfer;
#line 281 
struct spi_controller_mem_ops;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_statistics {
   spinlock_t lock ;
   unsigned long messages ;
   unsigned long transfers ;
   unsigned long errors ;
   unsigned long timedout ;
   unsigned long spi_sync ;
   unsigned long spi_sync_immediate ;
   unsigned long spi_async ;
   unsigned long long bytes ;
   unsigned long long bytes_rx ;
   unsigned long long bytes_tx ;
   unsigned long transfer_bytes_histo[17U] ;
   unsigned long transfers_split_maxsize ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_delay {
   u16 value ;
   u8 unit ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_device {
   struct device dev ;
   struct spi_controller *controller ;
   struct spi_controller *master ;
   u32 max_speed_hz ;
   u8 chip_select ;
   u8 bits_per_word ;
   bool rt ;
   u32 mode ;
   int irq ;
   void *controller_state ;
   void *controller_data ;
   char modalias[32U] ;
   char *driver_override ;
   int cs_gpio ;
   struct gpio_desc *cs_gpiod ;
   struct spi_delay word_delay ;
   struct spi_statistics statistics ;
};
#line 247 
struct spi_message;
#line 452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_controller {
   struct device dev ;
   struct list_head list ;
   s16 bus_num ;
   u16 num_chipselect ;
   u16 dma_alignment ;
   u32 mode_bits ;
   u32 bits_per_word_mask ;
   u32 min_speed_hz ;
   u32 max_speed_hz ;
   u16 flags ;
   bool slave ;
   size_t (*max_transfer_size)(struct spi_device *) ;
   size_t (*max_message_size)(struct spi_device *) ;
   struct mutex io_mutex ;
   spinlock_t bus_lock_spinlock ;
   struct mutex bus_lock_mutex ;
   bool bus_lock_flag ;
   int (*setup)(struct spi_device *) ;
   int (*set_cs_timing)(struct spi_device *, struct spi_delay *, struct spi_delay *, struct spi_delay *) ;
   int (*transfer)(struct spi_device *, struct spi_message *) ;
   void (*cleanup)(struct spi_device *) ;
   bool (*can_dma)(struct spi_controller *, struct spi_device *, struct spi_transfer *) ;
   bool queued ;
   struct kthread_worker kworker ;
   struct task_struct *kworker_task ;
   struct kthread_work pump_messages ;
   spinlock_t queue_lock ;
   struct list_head queue ;
   struct spi_message *cur_msg ;
   bool idling ;
   bool busy ;
   bool running ;
   bool rt ;
   bool auto_runtime_pm ;
   bool cur_msg_prepared ;
   bool cur_msg_mapped ;
   struct completion xfer_completion ;
   size_t max_dma_len ;
   int (*prepare_transfer_hardware)(struct spi_controller *) ;
   int (*transfer_one_message)(struct spi_controller *, struct spi_message *) ;
   int (*unprepare_transfer_hardware)(struct spi_controller *) ;
   int (*prepare_message)(struct spi_controller *, struct spi_message *) ;
   int (*unprepare_message)(struct spi_controller *, struct spi_message *) ;
   int (*slave_abort)(struct spi_controller *) ;
   void (*set_cs)(struct spi_device *, bool ) ;
   int (*transfer_one)(struct spi_controller *, struct spi_device *, struct spi_transfer *) ;
   void (*handle_err)(struct spi_controller *, struct spi_message *) ;
   struct spi_controller_mem_ops *mem_ops ;
   struct spi_delay cs_setup ;
   struct spi_delay cs_hold ;
   struct spi_delay cs_inactive ;
   int *cs_gpios ;
   struct gpio_desc **cs_gpiods ;
   bool use_gpio_descriptors ;
   struct spi_statistics statistics ;
   struct dma_chan *dma_tx ;
   struct dma_chan *dma_rx ;
   void *dummy_rx ;
   void *dummy_tx ;
   int (*fw_translate_cs)(struct spi_controller *, unsigned int ) ;
   bool ptp_sts_supported ;
   unsigned long irq_flags ;
};
#line 890  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_transfer {
   void *tx_buf ;
   void *rx_buf ;
   unsigned int len ;
   dma_addr_t tx_dma ;
   dma_addr_t rx_dma ;
   struct sg_table tx_sg ;
   struct sg_table rx_sg ;
   unsigned int cs_change : 1 ;
   unsigned int tx_nbits : 3 ;
   unsigned int rx_nbits : 3 ;
   u8 bits_per_word ;
   u16 delay_usecs ;
   struct spi_delay delay ;
   struct spi_delay cs_change_delay ;
   struct spi_delay word_delay ;
   u32 speed_hz ;
   u32 effective_speed_hz ;
   unsigned int ptp_sts_word_pre ;
   unsigned int ptp_sts_word_post ;
   struct ptp_system_timestamp *ptp_sts ;
   bool timestamped_pre ;
   bool timestamped_post ;
   struct list_head transfer_list ;
};
#line 961  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_message {
   struct list_head transfers ;
   struct spi_device *spi ;
   unsigned int is_dma_mapped : 1 ;
   void (*complete)(void *) ;
   void *context ;
   unsigned int frame_length ;
   unsigned int actual_length ;
   int status ;
   struct list_head queue ;
   void *state ;
   struct list_head resources ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_fix_screeninfo {
   char id[16U] ;
   unsigned long smem_start ;
   __u32 smem_len ;
   __u32 type ;
   __u32 type_aux ;
   __u32 visual ;
   __u16 xpanstep ;
   __u16 ypanstep ;
   __u16 ywrapstep ;
   __u32 line_length ;
   unsigned long mmio_start ;
   __u32 mmio_len ;
   __u32 accel ;
   __u16 capabilities ;
   __u16 reserved[2U] ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_bitfield {
   __u32 offset ;
   __u32 length ;
   __u32 msb_right ;
};
#line 241  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_var_screeninfo {
   __u32 xres ;
   __u32 yres ;
   __u32 xres_virtual ;
   __u32 yres_virtual ;
   __u32 xoffset ;
   __u32 yoffset ;
   __u32 bits_per_pixel ;
   __u32 grayscale ;
   struct fb_bitfield red ;
   struct fb_bitfield green ;
   struct fb_bitfield blue ;
   struct fb_bitfield transp ;
   __u32 nonstd ;
   __u32 activate ;
   __u32 height ;
   __u32 width ;
   __u32 accel_flags ;
   __u32 pixclock ;
   __u32 left_margin ;
   __u32 right_margin ;
   __u32 upper_margin ;
   __u32 lower_margin ;
   __u32 hsync_len ;
   __u32 vsync_len ;
   __u32 sync ;
   __u32 vmode ;
   __u32 rotate ;
   __u32 colorspace ;
   __u32 reserved[4U] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_cmap {
   __u32 start ;
   __u32 len ;
   __u16 *red ;
   __u16 *green ;
   __u16 *blue ;
   __u16 *transp ;
};
#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_copyarea {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 sx ;
   __u32 sy ;
};
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_fillrect {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 color ;
   __u32 rop ;
};
#line 359  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_image {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 fg_color ;
   __u32 bg_color ;
   __u8 depth ;
   char *data ;
   struct fb_cmap cmap ;
};
#line 383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fbcurpos {
   __u16 x ;
   __u16 y ;
};
#line 387  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_cursor {
   __u16 set ;
   __u16 enable ;
   __u16 rop ;
   char *mask ;
   struct fbcurpos hot ;
   struct fb_image image ;
};
#line 400 
enum backlight_type {
    BACKLIGHT_RAW = 1,
    BACKLIGHT_PLATFORM = 2,
    BACKLIGHT_FIRMWARE = 3,
    BACKLIGHT_TYPE_MAX = 4
};
#line 412 
enum backlight_scale {
    BACKLIGHT_SCALE_UNKNOWN = 0,
    BACKLIGHT_SCALE_LINEAR = 1,
    BACKLIGHT_SCALE_NON_LINEAR = 2
};
#line 418 
struct backlight_device;
#line 419 
struct fb_info;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_ops {
   unsigned int options ;
   int (*update_status)(struct backlight_device *) ;
   int (*get_brightness)(struct backlight_device *) ;
   int (*check_fb)(struct backlight_device *, struct fb_info *) ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_properties {
   int brightness ;
   int max_brightness ;
   int power ;
   int fb_blank ;
   enum backlight_type type ;
   unsigned int state ;
   enum backlight_scale scale ;
};
#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_device {
   struct backlight_properties props ;
   struct mutex update_lock ;
   struct mutex ops_lock ;
   struct backlight_ops *ops ;
   struct notifier_block fb_notif ;
   struct list_head entry ;
   struct device dev ;
   bool fb_bl_on[32U] ;
   int use_count ;
};
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_chroma {
   __u32 redx ;
   __u32 greenx ;
   __u32 bluex ;
   __u32 whitex ;
   __u32 redy ;
   __u32 greeny ;
   __u32 bluey ;
   __u32 whitey ;
};
#line 63 
struct fb_videomode;
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_monspecs {
   struct fb_chroma chroma ;
   struct fb_videomode *modedb ;
   __u8 manufacturer[4U] ;
   __u8 monitor[14U] ;
   __u8 serial_no[14U] ;
   __u8 ascii[14U] ;
   __u32 modedb_len ;
   __u32 model ;
   __u32 serial ;
   __u32 year ;
   __u32 week ;
   __u32 hfmin ;
   __u32 hfmax ;
   __u32 dclkmin ;
   __u32 dclkmax ;
   __u16 input ;
   __u16 dpms ;
   __u16 signal ;
   __u16 vfmin ;
   __u16 vfmax ;
   __u16 gamma ;
   __u16 gtf : 1 ;
   __u16 misc ;
   __u8 version ;
   __u8 revision ;
   __u8 max_x ;
   __u8 max_y ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_blit_caps {
   u32 x ;
   u32 y ;
   u32 len ;
   u32 flags ;
};
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_pixmap {
   u8 *addr ;
   u32 size ;
   u32 offset ;
   u32 buf_align ;
   u32 scan_align ;
   u32 access_align ;
   u32 flags ;
   u32 blit_x ;
   u32 blit_y ;
   void (*writeio)(struct fb_info *, void *, void *, unsigned int ) ;
   void (*readio)(struct fb_info *, void *, void *, unsigned int ) ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_deferred_io {
   unsigned long delay ;
   struct mutex lock ;
   struct list_head pagelist ;
   void (*first_io)(struct fb_info *) ;
   void (*deferred_io)(struct fb_info *, struct list_head *) ;
};
#line 228  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_ops {
   struct module *owner ;
   int (*fb_open)(struct fb_info *, int ) ;
   int (*fb_release)(struct fb_info *, int ) ;
   ssize_t (*fb_read)(struct fb_info *, char *, size_t , loff_t *) ;
   ssize_t (*fb_write)(struct fb_info *, char *, size_t , loff_t *) ;
   int (*fb_check_var)(struct fb_var_screeninfo *, struct fb_info *) ;
   int (*fb_set_par)(struct fb_info *) ;
   int (*fb_setcolreg)(unsigned int , unsigned int , unsigned int , unsigned int , unsigned int , struct fb_info *) ;
   int (*fb_setcmap)(struct fb_cmap *, struct fb_info *) ;
   int (*fb_blank)(int , struct fb_info *) ;
   int (*fb_pan_display)(struct fb_var_screeninfo *, struct fb_info *) ;
   void (*fb_fillrect)(struct fb_info *, struct fb_fillrect *) ;
   void (*fb_copyarea)(struct fb_info *, struct fb_copyarea *) ;
   void (*fb_imageblit)(struct fb_info *, struct fb_image *) ;
   int (*fb_cursor)(struct fb_info *, struct fb_cursor *) ;
   int (*fb_sync)(struct fb_info *) ;
   int (*fb_ioctl)(struct fb_info *, unsigned int , unsigned long ) ;
   int (*fb_compat_ioctl)(struct fb_info *, unsigned int , unsigned long ) ;
   int (*fb_mmap)(struct fb_info *, struct vm_area_struct *) ;
   void (*fb_get_caps)(struct fb_info *, struct fb_blit_caps *, struct fb_var_screeninfo *) ;
   void (*fb_destroy)(struct fb_info *) ;
   int (*fb_debug_enter)(struct fb_info *) ;
   int (*fb_debug_leave)(struct fb_info *) ;
};
#line 306  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilemap {
   __u32 width ;
   __u32 height ;
   __u32 depth ;
   __u32 length ;
   __u8 *data ;
};
#line 315  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilerect {
   __u32 sx ;
   __u32 sy ;
   __u32 width ;
   __u32 height ;
   __u32 index ;
   __u32 fg ;
   __u32 bg ;
   __u32 rop ;
};
#line 326  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilearea {
   __u32 sx ;
   __u32 sy ;
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tileblit {
   __u32 sx ;
   __u32 sy ;
   __u32 width ;
   __u32 height ;
   __u32 fg ;
   __u32 bg ;
   __u32 length ;
   __u32 *indices ;
};
#line 346  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilecursor {
   __u32 sx ;
   __u32 sy ;
   __u32 mode ;
   __u32 shape ;
   __u32 fg ;
   __u32 bg ;
};
#line 355  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tile_ops {
   void (*fb_settile)(struct fb_info *, struct fb_tilemap *) ;
   void (*fb_tilecopy)(struct fb_info *, struct fb_tilearea *) ;
   void (*fb_tilefill)(struct fb_info *, struct fb_tilerect *) ;
   void (*fb_tileblit)(struct fb_info *, struct fb_tileblit *) ;
   void (*fb_tilecursor)(struct fb_info *, struct fb_tilecursor *) ;
   int (*fb_get_tilemax)(struct fb_info *) ;
};
#line 499  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct aperture {
   resource_size_t base ;
   resource_size_t size ;
};
#line 497  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct apertures_struct {
   unsigned int count ;
   struct aperture ranges[0U] ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
union __anonunion_5173 {
   char *screen_base ;
   char *screen_buffer ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_info {
   atomic_t count ;
   int node ;
   int flags ;
   int fbcon_rotate_hint ;
   struct mutex lock ;
   struct mutex mm_lock ;
   struct fb_var_screeninfo var ;
   struct fb_fix_screeninfo fix ;
   struct fb_monspecs monspecs ;
   struct work_struct queue ;
   struct fb_pixmap pixmap ;
   struct fb_pixmap sprite ;
   struct fb_cmap cmap ;
   struct list_head modelist ;
   struct fb_videomode *mode ;
   struct backlight_device *bl_dev ;
   struct mutex bl_curve_mutex ;
   u8 bl_curve[128U] ;
   struct delayed_work deferred_work ;
   struct fb_deferred_io *fbdefio ;
   struct fb_ops *fbops ;
   struct device *device ;
   struct device *dev ;
   int class_flag ;
   struct fb_tile_ops *tileops ;
   union __anonunion_5173 __anonCompField_fb_info_73 ;
   unsigned long screen_size ;
   void *pseudo_palette ;
   u32 state ;
   void *fbcon_par ;
   void *par ;
   struct apertures_struct *apertures ;
   bool skip_vt_switch ;
};
#line 767  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_videomode {
   char *name ;
   u32 refresh ;
   u32 xres ;
   u32 yres ;
   u32 pixclock ;
   u32 left_margin ;
   u32 right_margin ;
   u32 upper_margin ;
   u32 lower_margin ;
   u32 hsync_len ;
   u32 vsync_len ;
   u32 sync ;
   u32 vmode ;
   u32 flag ;
};
#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct ldv_kmem_cache {
   char *name ;
   unsigned int size ;
};
#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
typedef unsigned long pthread_t;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
union pthread_attr_t {
   char __size[56U] ;
   long __align ;
};
#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
typedef union pthread_attr_t pthread_attr_t;
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 19  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_free_irq_8 {
   int arg0 ;
   int signal_pending ;
};
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_interrupt_scenario_t4vf_sge_intr_msix_21 {
   int arg0 ;
   enum irqreturn (*arg1)(int , void *) ;
   enum irqreturn (*arg2)(int , void *) ;
   void *arg3 ;
   int signal_pending ;
};
#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_character_driver_scenario_interfaces_proc_fops_16 {
   struct file_operations *arg0 ;
   int signal_pending ;
};
#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_random_allocationless_scenario_cxgb4vf_get_coalesce_22 {
   struct net_device *arg0 ;
   int signal_pending ;
};
#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_pci_scenario_cxgb4vf_driver_23 {
   struct pci_driver *arg0 ;
   int signal_pending ;
};
#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_traverse_kernel_items_scenario_interfaces_seq_ops_24 {
   struct seq_file *arg0 ;
   struct seq_operations *arg1 ;
   int signal_pending ;
};
#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_timer_scenario_12_28 {
   struct timer_list *arg0 ;
   int signal_pending ;
};
/* compiler builtin: 
   unsigned int __builtin_bswap32(unsigned int);   */
/* compiler builtin: 
   void *__builtin_memcpy(void *, void const *, unsigned long);   */
/* compiler builtin: 
   void __builtin_unreachable(void);   */
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/common/inline_asm.h"
#line 22 
void ldv_inline_asm(void);
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/export.h"
#line 16 
extern struct module __this_module;
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compiler.h"
__inline static void __read_once_size(void *p, void *res, int size)
{
  #line 199 
  switch (size) {
    #line 199 
    case 1: 
            #line 199 
    ;
    #line 199 
    *((__u8 *)res) = *((__u8 *)p);
    #line 199 
    break;
    #line 199 
    case 2: 
            #line 199 
    ;
    #line 199 
    *((__u16 *)res) = *((__u16 *)p);
    #line 199 
    break;
    #line 199 
    case 4: 
            #line 199 
    ;
    #line 199 
    *((__u32 *)res) = *((__u32 *)p);
    #line 199 
    break;
    #line 199 
    case 8: 
            #line 199 
    ;
    #line 199 
    *((__u64 *)res) = *((__u64 *)p);
    #line 199 
    break;
    #line 199 
    default: 
             #line 199 
    ;
    #line 200 
    ldv_inline_asm();
    #line 199 
    __builtin_memcpy(res,(void const *)p,(unsigned long)size);
    #line 200 
    ldv_inline_asm();
  }
  #line 203 
  return;
}

#line 220  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compiler.h"
__inline static void __write_once_size(void *p, void *res, int size)
{
  #line 222 
  switch (size) {
    #line 223 
    case 1: 
            #line 223 
    ;
    #line 223 
    *((__u8 *)p) = *((__u8 *)res);
    #line 223 
    break;
    #line 224 
    case 2: 
            #line 224 
    ;
    #line 224 
    *((__u16 *)p) = *((__u16 *)res);
    #line 224 
    break;
    #line 225 
    case 4: 
            #line 225 
    ;
    #line 225 
    *((__u32 *)p) = *((__u32 *)res);
    #line 225 
    break;
    #line 226 
    case 8: 
            #line 226 
    ;
    #line 226 
    *((__u64 *)p) = *((__u64 *)res);
    #line 226 
    break;
    #line 227 
    default: 
             #line 227 
    ;
    #line 228 
    ldv_inline_asm();
    #line 229 
    __builtin_memcpy(p,(void const *)res,(unsigned long)size);
    #line 230 
    ldv_inline_asm();
  }
  #line 232 
  return;
}

#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kasan-checks.h"
__inline static bool kasan_check_read(void *p, unsigned int size)
{
  #line 36 
  return (_Bool)1;
}

#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static void arch___set_bit(long nr, unsigned long *addr)
{
  #line 68 
  ldv_inline_asm();
  #line 69 
  return;
}

#line 204  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static bool constant_test_bit(long nr, unsigned long *addr)
{
  #line 207 
  return (_Bool)(((*(addr + (unsigned long)(nr >> 6)) >> (nr & 63L)) & 1UL) != 0UL);
}

#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static bool variable_test_bit(long nr, unsigned long *addr)
{
  #line 212 
  bool oldbit;
  #line 213 
  ldv_inline_asm();
  #line 219 
  return oldbit;
}

#line 283  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static int ffs(int x)
{
  #line 285 
  int r;
  #line 286 
  ldv_inline_asm();
  #line 310 
  return r + 1;
}

#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/arch_hweight.h"
__inline static unsigned int __arch_hweight32(unsigned int w)
{
  #line 17 
  unsigned int res;
  #line 18 
  ldv_inline_asm();
  #line 23 
  return res;
}

#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 403  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/0/concurrency safety/weaver/cxgb4vf_main.i.aux"
static void cif_set_bit(long nr, unsigned long *addr);
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 410  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/0/concurrency safety/weaver/cxgb4vf_main.i.aux"
static void cif_clear_bit(long nr, unsigned long *addr);
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-non-atomic.h"
__inline static void __set_bit(long nr, unsigned long *addr)
{
  #line 27 
  kasan_check_read((void *)(addr + (unsigned long)(nr / 64L)),8U);
  #line 28 
  arch___set_bit(nr,addr);
  #line 29 
  return;
}

#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-non-atomic.h"
__inline static bool test_bit(long nr, unsigned long *addr)
{
  #line 111 
  int tmp_1;
  #line 110 
  kasan_check_read((void *)(addr + (unsigned long)(nr / 64L)),8U);
  #line 111 
  if (0 != 0) {
    #line 111 
    tmp_1 = (int)constant_test_bit(nr,addr) != 0;
  }
  else {
    #line 111 
    tmp_1 = (int)variable_test_bit(nr,addr) != 0;
  }
  #line 111 
  return (_Bool)(tmp_1 != 0);
}

#line 171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
#line 171 
int printk(char * , ...);
#line 472  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernel.h"
#line 472 
int snprintf(char *, size_t, char * , ...);
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
#line 417  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/0/concurrency safety/weaver/cxgb4vf_main.i.aux"
static void INIT_LIST_HEAD(struct list_head *list);
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
#line 33 
bool __list_add_valid(struct list_head *, struct list_head *, struct list_head *);
#line 36 
#line 36 
bool __list_del_entry_valid(struct list_head *);
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_add(struct list_head *new, struct list_head *prev, struct list_head *next)
{
  #line 60 
  if (! __list_add_valid(new,prev,next)) 
                                         #line 61 
                                         return;
  #line 63 
  next->prev = new;
  #line 64 
  new->next = next;
  #line 65 
  new->prev = prev;
  {
    #line 67 
    union __anonunion___u_13 __u = {.__val = new};
    #line 66 
    __write_once_size((void *)(& prev->next),(void *)(& __u.__c),8);
    #line 66 
    struct list_head *tmp_2 = __u.__val;
  }
  #line 68 
  return;
}

#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_add_tail(struct list_head *new, struct list_head *head)
{
  #line 93 
  __list_add(new,head->prev,head);
  #line 94 
  return;
}

#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_del(struct list_head *prev, struct list_head *next)
{
  #line 97 
  next->prev = prev;
  {
    #line 107 
    union __anonunion___u_15 __u = {.__val = next};
    #line 106 
    __write_once_size((void *)(& prev->next),(void *)(& __u.__c),8);
    #line 106 
    struct list_head *tmp = __u.__val;
  }
  #line 108 
  return;
}

#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_del_entry(struct list_head *entry)
{
  #line 131 
  if (! __list_del_entry_valid(entry)) 
                                       #line 132 
                                       return;
  #line 134 
  __list_del(entry->prev,entry->next);
  #line 135 
  return;
}

#line 137  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_del(struct list_head *entry)
{
  #line 139 
  __list_del_entry(entry);
  #line 140 
  entry->next = (struct list_head *)(-2401263026318606080);
  #line 141 
  entry->prev = (struct list_head *)(-2401263026318606046);
  #line 142 
  return;
}

#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/string_64.h"
#line 14 
void *memcpy(void *, void *, size_t);
#line 18 
#line 18 
void *memset(void *, int, size_t);
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/string.h"
#line 29 
size_t strlcpy(char *, char *, size_t);
#line 230  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bitmap.h"
#line 480  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/0/concurrency safety/weaver/cxgb4vf_main.i.aux"
static void cif_bitmap_zero(unsigned long *dst, unsigned int nbits);
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cmpxchg_64.h"
__inline static int arch_atomic_read(atomic_t *v)
{
  #line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
  union __anonunion___u_67 __u;
  #line 31 
  __read_once_size((void *)(& v->counter),(void *)(& __u.__c),4);
  #line 31 
  return (__u.__val);
}

#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
__inline static int atomic_read(atomic_t *v)
{
  #line 26 
  kasan_check_read((void *)v,4U);
  #line 27 
  return arch_atomic_read(v);
}

#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
#line 99 
extern atomic_t __num_online_cpus;
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
__inline static unsigned int num_online_cpus(void)
{
  #line 112 
  return (unsigned int)atomic_read(& __num_online_cpus);
}

#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/err.h"
#line 508  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/0/concurrency safety/weaver/cxgb4vf_main.i.aux"
static bool IS_ERR_OR_NULL(void *ptr);
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
#line 20 
unsigned long native_save_fl(void);
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
unsigned long native_save_fl(void)
{
  #line 22 
  unsigned long flags;
  #line 23 
  ldv_inline_asm();
  #line 35 
  return flags;
}

#line 38 
#line 39 
void native_restore_fl(unsigned long flags);
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
void native_restore_fl(unsigned long flags)
{
  #line 41 
  ldv_inline_asm();
  #line 42 
  return;
}

#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 95 
void __raw_spin_lock_init(raw_spinlock_t *, char *, struct lock_class_key *);
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_api_smp.h"
#line 22 
void _raw_spin_lock(raw_spinlock_t *);
#line 39 
#line 39 
void _raw_spin_unlock(raw_spinlock_t *);
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
__inline static raw_spinlock_t *spinlock_check(spinlock_t *lock)
{
  #line 327 
  return & lock->__anonCompField_spinlock_25.rlock;
}

#line 336  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock(spinlock_t *lock)
{
  #line 338 
  _raw_spin_lock(& lock->__anonCompField_spinlock_25.rlock);
  #line 339 
  return;
}

#line 340 
#line 949  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/0/concurrency safety/weaver/cxgb4vf_main.i.aux"
static void cif_spin_lock_stats_lock_of_adapter(spinlock_t *lock);
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock(spinlock_t *lock)
{
  #line 378 
  _raw_spin_unlock(& lock->__anonCompField_spinlock_25.rlock);
  #line 379 
  return;
}

#line 380 
#line 958  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/0/concurrency safety/weaver/cxgb4vf_main.i.aux"
static void cif_spin_unlock_stats_lock_of_adapter(spinlock_t *lock);
#line 40 
#line 40 
void ldv_spin_model_lock(char *);
#line 41 
#line 41 
void ldv_spin_model_unlock(char *);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 24 
bool ldv_is_err_or_null(void *ptr);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 21 
void ldv_set_bit(long nr, unsigned long *addr);
#line 22 
#line 22 
void ldv_clear_bit(long nr, unsigned long *addr);
#line 27 
#line 27 
void ldv_bitmap_zero(unsigned long *dst, unsigned int nbits);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/list.h"
#line 23 
void ldv_init_list_head(struct list_head *list);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 23 
void *ldv_kzalloc(size_t size, gfp_t flags);
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/io.h"
__inline static unsigned int readl(void *addr)
{
  #line 59 
  unsigned int ret;
  #line 60 
  ldv_inline_asm();
  #line 59 
  return ret;
}

#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/io.h"
__inline static void writel(unsigned int val, void *addr)
{
  #line 69 
  ldv_inline_asm();
  #line 70 
  return;
}

#line 209 
#line 209 
void iounmap(void *);
#line 366 
#line 366 
void *ioremap_wc(resource_size_t, unsigned long);
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
__inline static char *kobject_name(struct kobject *kobj)
{
  #line 91 
  return kobj->name;
}

#line 1370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static char *dev_name(struct device *dev)
{
  #line 1373 
  if (dev->init_name != (char *)0) 
                                   #line 1374 
                                   return dev->init_name;
  #line 1376 
  return kobject_name(& dev->kobj);
}

#line 1417  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static void *dev_get_drvdata(struct device *dev)
{
  #line 1419 
  return dev->driver_data;
}

#line 1422  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static void dev_set_drvdata(struct device *dev, void *data)
{
  #line 1424 
  dev->driver_data = data;
  #line 1425 
  return;
}

#line 1712 
#line 1712 
void _dev_err(struct device *, char * , ...);
#line 1714 
#line 1714 
void _dev_warn(struct device *, char * , ...);
#line 1718 
#line 1718 
void _dev_info(struct device *, char * , ...);
#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 933  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/0/concurrency safety/weaver/cxgb4vf_main.i.aux"
static int cif_request_irq(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char *name, void *dev);
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 941  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/0/concurrency safety/weaver/cxgb4vf_main.i.aux"
static void *cif_free_irq(unsigned int ldv_func_arg1, void *ldv_func_arg2);
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 189 
void kfree(void *);
#line 668 
#line 760  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/0/concurrency safety/weaver/cxgb4vf_main.i.aux"
static void *kzalloc(size_t size, gfp_t flags);
#line 1131  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
#line 1131 
int pci_enable_device(struct pci_dev *);
#line 1157 
#line 1157 
void pci_disable_device(struct pci_dev *);
#line 1160 
#line 1160 
void pci_set_master(struct pci_dev *);
#line 1161 
#line 1161 
void pci_clear_master(struct pci_dev *);
#line 1244 
#line 1244 
bool pcie_relaxed_ordering_enabled(struct pci_dev *);
#line 1281 
#line 1281 
int pci_request_regions(struct pci_dev *, char *);
#line 1283 
#line 1283 
void pci_release_regions(struct pci_dev *);
#line 1346 
#line 1023  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/0/concurrency safety/weaver/cxgb4vf_main.i.aux"
static int cif___pci_register_driver(struct pci_driver *ldv_func_arg1, struct module *ldv_func_arg2, char *mod_name);
#line 1352  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
#line 1039  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/0/concurrency safety/weaver/cxgb4vf_main.i.aux"
static void cif_pci_unregister_driver(struct pci_driver *dev);
#line 1431  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
#line 1431 
void pci_disable_msi(struct pci_dev *);
#line 1433 
#line 1433 
void pci_disable_msix(struct pci_dev *);
#line 1436 
#line 1436 
int pci_enable_msi(struct pci_dev *);
#line 1437 
#line 1437 
int pci_enable_msix_range(struct pci_dev *, struct msix_entry *, int, int);
#line 1833  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static void *pci_get_drvdata(struct pci_dev *pdev)
{
  #line 1835 
  return dev_get_drvdata(& pdev->dev);
}

#line 1838  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static void pci_set_drvdata(struct pci_dev *pdev, void *data)
{
  #line 1840 
  dev_set_drvdata(& pdev->dev,data);
  #line 1841 
  return;
}

#line 1843  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static char *pci_name(struct pci_dev *pdev)
{
  #line 1845 
  return dev_name(& pdev->dev);
}

#line 2022 
#line 2022 
void *pci_ioremap_bar(struct pci_dev *, int);
#line 460  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
#line 460 
int dma_set_mask(struct device *, u64);
#line 461 
#line 461 
int dma_set_coherent_mask(struct device *, u64);
#line 113  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci-dma-compat.h"
__inline static int pci_set_dma_mask(struct pci_dev *dev, u64 mask)
{
  #line 115 
  return dma_set_mask(& dev->dev,mask);
}

#line 118  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci-dma-compat.h"
__inline static int pci_set_consistent_dma_mask(struct pci_dev *dev, u64 mask)
{
  #line 120 
  return dma_set_coherent_mask(& dev->dev,mask);
}

#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
#line 86 
u32 ethtool_op_get_link(struct net_device *);
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seq_file.h"
#line 967  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/0/concurrency safety/weaver/cxgb4vf_main.i.aux"
static int cif_seq_open(struct file *ldv_func_arg1, struct seq_operations *ldv_func_arg2);
#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seq_file.h"
#line 109 
ssize_t seq_read(struct file *, char *, size_t, loff_t *);
#line 110 
#line 110 
loff_t seq_lseek(struct file *, loff_t, int);
#line 111 
#line 111 
int seq_release(struct inode *, struct file *);
#line 117 
#line 117 
void seq_printf(struct seq_file *, char * , ...);
#line 118 
#line 118 
void seq_putc(struct seq_file *, char);
#line 119 
#line 119 
void seq_puts(struct seq_file *, char *);
#line 141 
#line 141 
int single_open(struct file *, int (*)(struct seq_file *, void *), void *);
#line 143 
#line 143 
int single_release(struct inode *, struct file *);
#line 503  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 503 
void napi_disable(struct napi_struct *);
#line 512  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void napi_enable(struct napi_struct *n)
{
  #line 514 
  int tmp_0;
  #line 514 
  if (test_bit(0L,& n->state)) 
                               #line 514 
                               tmp_0 = 0; else 
                                               #line 514 
                                               tmp_0 = 1;
  #line 514 
  if ((long)tmp_0 != 0L) {
    #line 515 
    ldv_inline_asm();
    #line 516 
    ldv_inline_asm();
    #line 517 
    ldv_inline_asm();
    #line 514 
    ;
  }
  #line 516 
  cif_clear_bit(0L,& n->state);
  #line 517 
  cif_clear_bit(3L,& n->state);
  #line 518 
  return;
}

#line 2132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static struct netdev_queue *netdev_get_tx_queue(struct net_device *dev, unsigned int index)
{
  #line 2135 
  return dev->_tx + (unsigned long)index;
}

#line 2203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void *netdev_priv(struct net_device *dev)
{
  #line 2205 
  return (void *)((char *)dev + 3328UL);
}

#line 2679 
#line 1015  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/0/concurrency safety/weaver/cxgb4vf_main.i.aux"
static void cif_free_netdev(struct net_device *dev);
#line 3104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_start_queue(struct netdev_queue *dev_queue)
{
  #line 3106 
  cif_clear_bit(0L,& dev_queue->state);
  #line 3107 
  return;
}

#line 3120  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_start_all_queues(struct net_device *dev)
{
  #line 3122 
  unsigned int i;
  #line 3124 
  i = 0U;
  #line 3124 
  while (dev->num_tx_queues > i) {
    {
      #line 3125 
      struct netdev_queue *txq = netdev_get_tx_queue(dev,i);
      #line 3126 
      netif_tx_start_queue(txq);
    }
    #line 3124 
    i ++;
  }
  #line 3128 
  return;
}

#line 3130 
#line 3130 
void netif_tx_wake_queue(struct netdev_queue *);
#line 3171 
#line 3171 
void netif_tx_stop_all_queues(struct net_device *);
#line 3387  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netif_running(struct net_device *dev)
{
  #line 3389 
  return test_bit(0L,& dev->state);
}

#line 3577 
#line 3577 
int netif_set_real_num_tx_queues(struct net_device *, unsigned int);
#line 3580 
#line 3580 
int netif_set_real_num_rx_queues(struct net_device *, unsigned int);
#line 3803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netif_carrier_ok(struct net_device *dev)
{
  #line 3805 
  int tmp_0;
  #line 3805 
  if ((int)test_bit(2L,& dev->state) != 0) 
                                           #line 3805 
                                           tmp_0 = 0; else 
                                                           #line 3805 
                                                           tmp_0 = 1;
  #line 3805 
  return (_Bool)(tmp_0 != 0);
}

#line 3812 
#line 3812 
void netif_carrier_on(struct net_device *);
#line 3814 
#line 3814 
void netif_carrier_off(struct net_device *);
#line 4131 
#line 991  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/0/concurrency safety/weaver/cxgb4vf_main.i.aux"
static int cif_register_netdev(struct net_device *dev);
#line 4132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 1007  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/0/concurrency safety/weaver/cxgb4vf_main.i.aux"
static void cif_unregister_netdev(struct net_device *dev);
#line 4137  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 4137 
int __hw_addr_sync_dev(struct netdev_hw_addr_list *, struct net_device *, int (*)(struct net_device *, unsigned char *), int (*)(struct net_device *, unsigned char *));
#line 4186  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static int __dev_uc_sync(struct net_device *dev, int (*sync)(struct net_device *, unsigned char *), int (*unsync)(struct net_device *, unsigned char *))
{
  #line 4192 
  return __hw_addr_sync_dev(& dev->uc,dev,sync,unsync);
}

#line 4230  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static int __dev_mc_sync(struct net_device *dev, int (*sync)(struct net_device *, unsigned char *), int (*unsync)(struct net_device *, unsigned char *))
{
  #line 4236 
  return __hw_addr_sync_dev(& dev->mc,dev,sync,unsync);
}

#line 4756 
#line 4756 
void netdev_info(struct net_device *, char * , ...);
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
#line 47 
int eth_validate_addr(struct net_device *);
#line 51 
#line 983  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/0/concurrency safety/weaver/cxgb4vf_main.i.aux"
static struct net_device *cif_alloc_etherdev_mqs(int sizeof_priv, unsigned int txqs, unsigned int rxqs);
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_zero_ether_addr(u8 *addr)
{
  #line 101 
  return (_Bool)((*((u32 *)addr) | (unsigned int)*((u16 *)(addr + 4U))) == 0U);
}

#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_multicast_ether_addr(u8 *addr)
{
  #line 119 
  u32 a = *((u32 *)addr);
  #line 126 
  return (_Bool)((a & 1U) != 0U);
}

#line 175  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_unicast_ether_addr(u8 *addr)
{
  #line 177 
  int tmp_0;
  #line 177 
  if ((int)is_multicast_ether_addr(addr) != 0) 
                                               #line 177 
                                               tmp_0 = 0; else 
                                                               #line 177 
                                                               tmp_0 = 1;
  #line 177 
  return (_Bool)(tmp_0 != 0);
}

#line 191  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_valid_ether_addr(u8 *addr)
{
  #line 195 
  int tmp_1;
  #line 195 
  if (is_multicast_ether_addr(addr)) 
                                     #line 195 
                                     tmp_1 = 0;
  else {
    #line 195 
    if (is_zero_ether_addr(addr)) 
                                  #line 195 
                                  tmp_1 = 0; else 
                                                  #line 195 
                                                  tmp_1 = 1;
  }
  #line 195 
  return (_Bool)(tmp_1 != 0);
}

#line 276  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static void ether_addr_copy(u8 *dst, u8 *src)
{
  #line 279 
  *((u32 *)dst) = *((u32 *)src);
  #line 280 
  *((u16 *)(dst + 4U)) = *((u16 *)(src + 4U));
  #line 281 
  return;
}

#line 315  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool ether_addr_equal(u8 *addr1, u8 *addr2)
{
  #line 318 
  u32 fold = (*((u32 *)addr1) ^ *((u32 *)addr2)) | (unsigned int)((int)*((u16 *)(addr1 + 4U)) ^ (int)*((u16 *)(addr2 + 4U)));
  #line 321 
  return (_Bool)(fold == 0U);
}

#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/debugfs.h"
#line 975  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/0/concurrency safety/weaver/cxgb4vf_main.i.aux"
static struct dentry *cif_debugfs_create_file(char *name, umode_t mode, struct dentry *parent, void *data, struct file_operations *fops);
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/debugfs.h"
#line 999  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/0/concurrency safety/weaver/cxgb4vf_main.i.aux"
static struct dentry *cif_debugfs_create_dir(char *name, struct dentry *parent);
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/debugfs.h"
#line 1031  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/0/concurrency safety/weaver/cxgb4vf_main.i.aux"
static void cif_debugfs_remove(struct dentry *dentry);
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/debugfs.h"
#line 85 
void debugfs_remove_recursive(struct dentry *);
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/t4vf_common.h"
__inline static bool is_x_10g_port(struct link_config *lc)
{
  #line 155 
  fw_port_cap32_t speeds;
  #line 155 
  fw_port_cap32_t high_speeds;
  #line 157 
  speeds = lc->pcaps & 4095U;
  #line 158 
  high_speeds = speeds & 4294967292U;
  #line 161 
  return (_Bool)(high_speeds != 0U);
}

#line 294  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/t4vf_common.h"
__inline static struct mbox_cmd *mbox_cmd_log_entry(struct mbox_cmd_log *log, unsigned int entry_idx)
{
  #line 297 
  return (struct mbox_cmd *)(log + 1U) + (unsigned long)entry_idx;
}

#line 429  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/adapter.h"
__inline static u32 t4_read_reg(struct adapter *adapter, u32 reg_addr)
{
  #line 431 
  return readl(adapter->regs + (unsigned long)reg_addr);
}

#line 442  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/adapter.h"
__inline static void t4_write_reg(struct adapter *adapter, u32 reg_addr, u32 val)
{
  #line 444 
  writel(val,adapter->regs + (unsigned long)reg_addr);
  #line 445 
  return;
}

#line 519  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/adapter.h"
__inline static struct port_info *netdev2pinfo(struct net_device *dev)
{
  #line 521 
  return (struct port_info *)netdev_priv(dev);
}

#line 531  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/adapter.h"
__inline static struct port_info *adap2pinfo(struct adapter *adapter, int pidx)
{
  #line 533 
  return (struct port_info *)netdev_priv(adapter->port[pidx]);
}

#line 542  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/adapter.h"
__inline static struct adapter *netdev2adap(struct net_device *dev)
{
  #line 544 
  return netdev2pinfo(dev)->adapter;
}

#line 551 
#line 138  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf_main.c"
void t4vf_os_link_changed(struct adapter *adapter, int pidx, int link_ok);
#line 552  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/adapter.h"
#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf_main.c"
void t4vf_os_portmod_changed(struct adapter *adapter, int pidx);
#line 557  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/adapter.h"
#line 557 
int t4vf_sge_alloc_rxq(struct adapter *adapter, struct sge_rspq *rspq, bool iqasynch, struct net_device *dev, int intr_dest, struct sge_fl *fl, int (*hnd)(struct sge_rspq *, __be64 *, struct pkt_gl *));
#line 560 
#line 560 
int t4vf_sge_alloc_eth_txq(struct adapter *adapter, struct sge_eth_txq *txq, struct net_device *dev, struct netdev_queue *devq, unsigned int iqid);
#line 563 
#line 563 
void t4vf_free_sge_resources(struct adapter *adapter);
#line 565 
#line 565 
int t4vf_eth_xmit(struct sk_buff *skb, struct net_device *dev);
#line 566 
#line 566 
int t4vf_ethrx_handler(struct sge_rspq *rspq, __be64 *rsp, struct pkt_gl *gl);
#line 569 
#line 569 
irq_handler_t t4vf_intr_handler(struct adapter *adapter);
#line 570 
#line 570 
irqreturn_t t4vf_sge_intr_msix(int irq, void *cookie);
#line 572 
#line 572 
int t4vf_sge_init(struct adapter *adapter);
#line 573 
#line 573 
void t4vf_sge_start(struct adapter *adapter);
#line 574 
#line 574 
void t4vf_sge_stop(struct adapter *adapter);
#line 320  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/t4vf_common.h"
__inline static unsigned int core_ticks_to_us(struct adapter *adapter, unsigned int ticks)
{
  #line 323 
  return (ticks * 1000U) / adapter->params.vpd.cclk;
}

#line 342  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/t4vf_common.h"
__inline static int is_t4(enum chip_type chip)
{
  #line 344 
  return (((unsigned int)chip >> 4) & 15U) == 4U;
}

#line 354  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/t4vf_common.h"
__inline static int hash_mac_addr(u8 *addr)
{
  #line 356 
  u32 a = (((unsigned int)*addr << 16) | ((unsigned int)*(addr + 1U) << 8)) | (unsigned int)*(addr + 2U);
  #line 357 
  u32 b = (((unsigned int)*(addr + 3U) << 16) | ((unsigned int)*(addr + 4U) << 8)) | (unsigned int)*(addr + 5U);
  #line 359 
  a ^= b;
  #line 360 
  a = (a >> 12) ^ a;
  #line 361 
  a = (a >> 6) ^ a;
  #line 362 
  return (int)a & 63;
}

#line 366 
#line 366 
int t4vf_port_init(struct adapter *adapter, int pidx);
#line 368 
#line 368 
int t4vf_fw_reset(struct adapter *adapter);
#line 369 
#line 369 
int t4vf_set_params(struct adapter *adapter, unsigned int nparams, u32 *params, u32 *vals);
#line 379 
#line 379 
unsigned int t4vf_get_pf_from_vf(struct adapter *adapter);
#line 380 
#line 380 
int t4vf_get_sge_params(struct adapter *adapter);
#line 381 
#line 381 
int t4vf_get_vpd_params(struct adapter *adapter);
#line 382 
#line 382 
int t4vf_get_dev_params(struct adapter *adapter);
#line 383 
#line 383 
int t4vf_get_rss_glb_config(struct adapter *adapter);
#line 384 
#line 384 
int t4vf_get_vfres(struct adapter *adapter);
#line 386 
#line 386 
int t4vf_read_rss_vi_config(struct adapter *adapter, unsigned int viid, union rss_vi_config *config);
#line 388 
#line 388 
int t4vf_write_rss_vi_config(struct adapter *adapter, unsigned int viid, union rss_vi_config *config);
#line 390 
#line 390 
int t4vf_config_rss_range(struct adapter *adapter, unsigned int viid, int start, int n, u16 *rspq, int nrspq);
#line 393 
#line 393 
int t4vf_alloc_vi(struct adapter *adapter, int port_id);
#line 394 
#line 394 
int t4vf_free_vi(struct adapter *adapter, int viid);
#line 397 
#line 397 
int t4vf_enable_pi(struct adapter *adapter, struct port_info *pi, bool rx_en, bool tx_en);
#line 399 
#line 399 
int t4vf_identify_port(struct adapter *adapter, unsigned int viid, unsigned int nblinks);
#line 401 
#line 401 
int t4vf_set_rxmode(struct adapter *adapter, unsigned int viid, int mtu, int promisc, int all_multi, int bcast, int vlanex, bool sleep_ok);
#line 403 
#line 403 
int t4vf_alloc_mac_filt(struct adapter *adapter, unsigned int viid, bool free_0, unsigned int naddr, u8 **addr, u16 *idx, u64 *hash, bool sleep_ok);
#line 405 
#line 405 
int t4vf_free_mac_filt(struct adapter *adapter, unsigned int viid, unsigned int naddr, u8 **addr, bool sleep_ok);
#line 407 
#line 407 
int t4vf_change_mac(struct adapter *adapter, unsigned int viid, int idx, u8 *addr, bool persist);
#line 408 
#line 408 
int t4vf_set_addr_hash(struct adapter *adapter, unsigned int viid, bool ucast, u64 vec, bool sleep_ok);
#line 409 
#line 409 
int t4vf_get_port_stats(struct adapter *adapter, int pidx, struct t4vf_port_stats *s);
#line 415 
#line 415 
int t4vf_update_port_info(struct port_info *pi);
#line 416 
#line 416 
int t4vf_handle_fw_rpl(struct adapter *adapter, __be64 *rpl);
#line 417 
#line 417 
int t4vf_prep_adapter(struct adapter *adapter);
#line 418 
#line 418 
int t4vf_get_vf_mac_acl(struct adapter *adapter, unsigned int pf, unsigned int *naddr, u8 *addr);
#line 420 
#line 420 
int t4vf_get_vf_vlan_acl(struct adapter *adapter);
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf_main.c"
static int msi = 2;
#line 128  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf_main.c"
static struct dentry *cxgb4vf_debugfs_root;
#line 138  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf_main.c"
void t4vf_os_link_changed(struct adapter *adapter, int pidx, int link_ok)
{
  #line 140 
  struct net_device *dev = adapter->port[pidx];
  #line 146 
  if (netif_running(dev)) {
    #line 146 
    ;
    #line 146 
    if ((int)netif_carrier_ok(dev) == link_ok) 
                                               #line 147 
                                               return;
  }
  else 
       #line 147 
       return;
  #line 153 
  if (link_ok != 0) {
    #line 154 
    char *s;
    #line 155 
    char *fc;
    #line 156 
    struct port_info *pi = netdev_priv(dev);
    #line 158 
    netif_carrier_on(dev);
    #line 160 
    switch (pi->link_cfg.speed) {
      #line 161 
      case (u32)100: 
                     #line 161 
      ;
      #line 162 
      s = (char *)"100Mbps";
      #line 163 
      break;
      #line 164 
      case (u32)1000: 
                      #line 164 
      ;
      #line 165 
      s = (char *)"1Gbps";
      #line 166 
      break;
      #line 167 
      case (u32)10000: 
                       #line 167 
      ;
      #line 168 
      s = (char *)"10Gbps";
      #line 169 
      break;
      #line 170 
      case (u32)25000: 
                       #line 170 
      ;
      #line 171 
      s = (char *)"25Gbps";
      #line 172 
      break;
      #line 173 
      case (u32)40000: 
                       #line 173 
      ;
      #line 174 
      s = (char *)"40Gbps";
      #line 175 
      break;
      #line 176 
      case (u32)100000: 
                        #line 176 
      ;
      #line 177 
      s = (char *)"100Gbps";
      #line 178 
      break;
      #line 180 
      default: 
               #line 180 
      ;
      #line 181 
      s = (char *)"unknown";
      #line 182 
      break;
    }
    #line 185 
    switch ((int)pi->link_cfg.fc) {
      #line 186 
      case 1: 
              #line 186 
      ;
      #line 187 
      fc = (char *)"RX";
      #line 188 
      break;
      #line 190 
      case 2: 
              #line 190 
      ;
      #line 191 
      fc = (char *)"TX";
      #line 192 
      break;
      #line 194 
      case 3: 
              #line 194 
      ;
      #line 195 
      fc = (char *)"RX/TX";
      #line 196 
      break;
      #line 198 
      default: 
               #line 198 
      ;
      #line 199 
      fc = (char *)"no";
      #line 200 
      break;
    }
    #line 203 
    netdev_info(dev,(char *)"link up, %s, full-duplex, %s PAUSE\n",s,fc);
  }
  else {
    #line 205 
    netif_carrier_off(dev);
    #line 206 
    netdev_info(dev,(char *)"link down\n");
  }
  #line 208 
  return;
}

#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf_main.c"
void t4vf_os_portmod_changed(struct adapter *adapter, int pidx)
{
  #line 216 
  char *mod_str[7U] = {(char *)0, (char *)"LR", (char *)"SR", (char *)"ER", (char *)"passive DA", (char *)"active DA", (char *)"LRM"};
  #line 219 
  struct net_device *dev = adapter->port[pidx];
  #line 220 
  struct port_info *pi = netdev_priv(dev);
  #line 222 
  if ((unsigned int)pi->mod_type == 31U) 
                                         #line 223 
                                         _dev_info(adapter->pdev_dev,(char *)"%s: port module unplugged\n",(char *)(& dev->name));
  else 
    #line 225 
    if ((unsigned int)pi->mod_type <= 6U) 
                                          #line 226 
                                          _dev_info(adapter->pdev_dev,(char *)"%s: %s port module inserted\n",(char *)(& dev->name),mod_str[(int)pi->mod_type]);
    else 
      #line 228 
      if ((unsigned int)pi->mod_type == 30U) 
                                             #line 229 
                                             _dev_info(adapter->pdev_dev,(char *)"%s: unsupported optical port ",(char *)(& dev->name));
      else 
        #line 231 
        if ((unsigned int)pi->mod_type == 29U) 
                                               #line 232 
                                               _dev_info(adapter->pdev_dev,(char *)"%s: unknown port module inserted,",(char *)(& dev->name));
        else 
          #line 234 
          if ((unsigned int)pi->mod_type == 28U) 
                                                 #line 235 
                                                 _dev_info(adapter->pdev_dev,(char *)"%s: transceiver module error\n",(char *)(& dev->name)); else 
                                                                    #line 238 
                                                                    _dev_info(adapter->pdev_dev,(char *)"%s: unknown module type %d ",(char *)(& dev->name),(int)pi->mod_type);
  #line 239 
  return;
}

#line 242  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf_main.c"
static int cxgb4vf_set_addr_hash(struct port_info *pi)
{
  #line 250 
  void *__mptr;
  #line 247 
  struct hash_mac_addr *entry;
  #line 244 
  struct adapter *adapter = pi->adapter;
  #line 245 
  u64 vec = 0ULL;
  #line 246 
  bool ucast = (_Bool)0;
  #line 250 
  __mptr = (void *)adapter->mac_hlist.next;
  #line 250 
  entry = ((struct hash_mac_addr *)__mptr);
  #line 250 
  while (& entry->list != & adapter->mac_hlist) {
    #line 250 
    void *__mptr_0;
    {
      #line 251 
      ucast = (_Bool)(((int)is_unicast_ether_addr((u8 *)(& entry->addr)) | (int)ucast) != 0);
      #line 252 
      vec = (1ULL << hash_mac_addr((u8 *)(& entry->addr))) | vec;
    }
    #line 250 
    __mptr_0 = (void *)entry->list.next;
    #line 250 
    entry = ((struct hash_mac_addr *)__mptr_0);
  }
  #line 254 
  return t4vf_set_addr_hash(adapter,(unsigned int)pi->viid,
                           (_Bool)((bool)((int)ucast) != 0),vec,(_Bool)0);
}

#line 274  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf_main.c"
static int cxgb4vf_change_mac(struct port_info *pi, unsigned int viid, int *tcam_idx, u8 *addr, bool persistent)
{
  #line 277 
  struct hash_mac_addr *new_entry;
  #line 277 
  struct hash_mac_addr *entry;
  #line 279 
  int ret;
  #line 278 
  struct adapter *adapter = pi->adapter;
  #line 281 
  ret = t4vf_change_mac(adapter,viid,*tcam_idx,addr,(_Bool)((bool)((int)persistent) != 0));
  #line 283 
  if (ret == -12) {
    #line 287 
    void *__mptr;
    #line 287 
    __mptr = (void *)adapter->mac_hlist.next;
    #line 287 
    entry = ((struct hash_mac_addr *)__mptr);
    #line 287 
    while (& entry->list != & adapter->mac_hlist) {
      #line 287 
      void *__mptr_0;
      #line 288 
      if (entry->iface_mac != 0U) {
        #line 289 
        ether_addr_copy((u8 *)(& entry->addr),addr);
        #line 290 
        goto set_hash;
      }
      #line 287 
      __mptr_0 = (void *)entry->list.next;
      #line 287 
      entry = ((struct hash_mac_addr *)__mptr_0);
    }
    #line 293 
    new_entry = (struct hash_mac_addr *)kzalloc(32UL,3264U);
    #line 294 
    if (new_entry == (struct hash_mac_addr *)0) 
                                                #line 295 
                                                return -12;
    #line 296 
    ether_addr_copy((u8 *)(& new_entry->addr),addr);
    #line 297 
    new_entry->iface_mac = 1U;
    #line 298 
    list_add_tail(& new_entry->list,& adapter->mac_hlist);
    #line 299 
    set_hash: 
              #line 299 
    ;
    #line 300 
    ret = cxgb4vf_set_addr_hash(pi);
  }
  else 
    #line 301 
    if (ret >= 0) {
      #line 302 
      *tcam_idx = ret;
      #line 303 
      ret = 0;
    }
  #line 306 
  return ret;
}

#line 321  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf_main.c"
static int link_start(struct net_device *dev)
{
  #line 323 
  int ret;
  #line 324 
  struct port_info *pi = netdev_priv(dev);
  #line 330 
  ret = t4vf_set_rxmode(pi->adapter,(unsigned int)pi->viid,(int)dev->mtu,-1,-1,-1,1,(_Bool)1);
  #line 332 
  if (ret == 0) 
                #line 333 
                ret = cxgb4vf_change_mac(pi,(unsigned int)pi->viid,& pi->xact_addr_filt,dev->dev_addr,(_Bool)1);
  #line 342 
  if (ret == 0) 
                #line 343 
                ret = t4vf_enable_pi(pi->adapter,pi,(_Bool)1,(_Bool)1);
  #line 345 
  return ret;
}

#line 351  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf_main.c"
static void name_msix_vecs(struct adapter *adapter)
{
  #line 354 
  int pidx;
  #line 353 
  int namelen = 21;
  #line 359 
  snprintf((char *)(& adapter->msix_info[0].desc),(unsigned long)namelen,(char *)"%s-FWeventq",adapter->name);
  #line 361 
  adapter->msix_info[0].desc[namelen] = (char)0;
  #line 366 
  pidx = 0;
  #line 366 
  while ((int)adapter->params.nports > pidx) {
    {
      #line 369 
      int qs;
      #line 369 
      int msi_0;
      #line 367 
      struct net_device *dev = adapter->port[pidx];
      #line 368 
      struct port_info *pi = netdev_priv(dev);
      #line 371 
      qs = 0;
      #line 371 
      msi_0 = 1;
      #line 371 
      while ((int)pi->nqsets > qs) {
        #line 372 
        snprintf((char *)(& adapter->msix_info[msi_0].desc),(unsigned long)namelen,(char *)"%s-%d",(char *)(& dev->name),qs);
        #line 374 
        adapter->msix_info[msi_0].desc[namelen] = (char)0;
        #line 371 
        qs ++;
        #line 371 
        msi_0 ++;
      }
    }
    #line 366 
    pidx ++;
  }
  #line 377 
  return;
}

#line 382  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf_main.c"
static int request_msix_queue_irqs(struct adapter *adapter)
{
  #line 385 
  int rxq;
  #line 385 
  int msi_0;
  #line 385 
  int err;
  #line 384 
  struct sge *s = & adapter->sge;
  #line 390 
  err = cif_request_irq((unsigned int)adapter->msix_info[0].vec,& t4vf_sge_intr_msix,0UL,(char *)(& adapter->msix_info[0].desc),(void *)(& s->fw_evtq));
  #line 392 
  if (err != 0) 
                #line 393 
                return err;
  #line 398 
  msi_0 = 1;
  #line 399 
  rxq = 0;
  #line 399 
  while ((int)s->ethqsets > rxq) {
    #line 400 
    err = cif_request_irq((unsigned int)adapter->msix_info[msi_0].vec,& t4vf_sge_intr_msix,0UL,(char *)(& adapter->msix_info[msi_0].desc),(void *)(& s->ethrxq[rxq].rspq));
    #line 404 
    if (err != 0) 
                  #line 405 
                  goto err_free_irqs;
    #line 406 
    msi_0 ++;
    #line 399 
    rxq ++;
  }
  #line 408 
  return 0;
  #line 410 
  err_free_irqs: 
                 #line 410 
  ;
  #line 411 
  while (1) {
    #line 411 
    rxq --;
    #line 411 
    if (! (rxq >= 0)) 
                      #line 411 
                      break;
    #line 412 
    ;
    #line 412 
    msi_0 --;
    #line 412 
    ;
    #line 412 
    cif_free_irq((unsigned int)adapter->msix_info[msi_0].vec,(void *)(& s->ethrxq[rxq].rspq));
  }
  #line 413 
  cif_free_irq((unsigned int)adapter->msix_info[0].vec,(void *)(& s->fw_evtq));
  #line 414 
  return err;
}

#line 420  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf_main.c"
static void free_msix_queue_irqs(struct adapter *adapter)
{
  #line 423 
  int rxq;
  #line 423 
  int msi_0;
  #line 422 
  struct sge *s = & adapter->sge;
  #line 425 
  cif_free_irq((unsigned int)adapter->msix_info[0].vec,(void *)(& s->fw_evtq));
  #line 426 
  msi_0 = 1;
  #line 427 
  rxq = 0;
  #line 427 
  while ((int)s->ethqsets > rxq) {
    #line 428 
    int tmp;
    #line 428 
    ;
    #line 428 
    tmp = msi_0;
    #line 428 
    msi_0 ++;
    #line 428 
    ;
    #line 428 
    cif_free_irq((unsigned int)adapter->msix_info[tmp].vec,(void *)(& s->ethrxq[rxq].rspq));
    #line 427 
    rxq ++;
  }
  #line 430 
  return;
}

#line 435  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf_main.c"
static void qenable(struct sge_rspq *rspq)
{
  #line 437 
  napi_enable(& rspq->napi);
  #line 443 
  t4_write_reg(rspq->adapter,4U,(unsigned int)(((int)rspq->intr_params << 12) | ((int)rspq->cntxt_id << 16)));
  #line 447 
  return;
}

#line 452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf_main.c"
static void enable_rx(struct adapter *adapter)
{
  #line 454 
  int rxq;
  #line 455 
  struct sge *s = & adapter->sge;
  #line 457 
  rxq = 0;
  #line 457 
  while ((int)s->ethqsets > rxq) {
    #line 458 
    qenable(& s->ethrxq[rxq].rspq);
    #line 457 
    rxq ++;
  }
  #line 459 
  qenable(& s->fw_evtq);
  #line 465 
  if ((adapter->flags & 2UL) != 0UL) 
                                     #line 466 
                                     t4_write_reg(adapter,4U,(unsigned int)(((int)s->intrq.intr_params << 12) | ((int)s->intrq.cntxt_id << 16)));
  #line 470 
  return;
}

#line 476  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf_main.c"
static void quiesce_rx(struct adapter *adapter)
{
  #line 479 
  int rxq;
  #line 478 
  struct sge *s = & adapter->sge;
  #line 481 
  rxq = 0;
  #line 481 
  while ((int)s->ethqsets > rxq) {
    #line 482 
    napi_disable(& s->ethrxq[rxq].rspq.napi);
    #line 481 
    rxq ++;
  }
  #line 483 
  napi_disable(& s->fw_evtq.napi);
  #line 484 
  return;
}

#line 489  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf_main.c"
static int fwevtq_handler(struct sge_rspq *rspq, __be64 *rsp, struct pkt_gl *gl)
{
  #line 495 
  struct adapter *adapter = rspq->adapter;
  #line 496 
  u8 opcode = ((struct rss_header *)rsp)->opcode;
  #line 497 
  void *cpl = (void *)(rsp + 1U);
  #line 499 
  switch ((int)opcode) {
    #line 500 
    case 224: 
              #line 500 
    ;
    {
      #line 504 
      struct cpl_fw6_msg *fw_msg = (struct cpl_fw6_msg *)cpl;
      #line 505 
      if ((unsigned int)fw_msg->type == 0U) 
                                            #line 506 
                                            t4vf_handle_fw_rpl(adapter,(__be64 *)(& fw_msg->data));
      #line 507 
      break;
    }
    #line 510 
    case 192: 
              #line 510 
    ;
    {
      #line 513 
      struct cpl_sge_egr_update *p = (struct cpl_sge_egr_update *)(rsp + 3U);
      #line 514 
      opcode = (unsigned char)(__builtin_bswap32(p->opcode_qid) >> 24);
      #line 515 
      if ((unsigned int)opcode != 165U) {
        #line 516 
        _dev_err(adapter->pdev_dev,(char *)"unexpected FW4/CPL %#x on FW event queue\n",(int)opcode);
        #line 518 
        break;
      }
      #line 520 
      cpl = (void *)p;
    }
    #line 524 
    case 165: 
              #line 524 
    ;
    {
      #line 560 
      void *__mptr;
      #line 537 
      struct sge_txq *tq;
      #line 538 
      struct sge_eth_txq *txq;
      #line 539 
      unsigned int eq_idx;
      #line 534 
      struct cpl_sge_egr_update *p_0 = (struct cpl_sge_egr_update *)cpl;
      #line 535 
      unsigned int qid = __builtin_bswap32(p_0->opcode_qid) & 131071U;
      #line 536 
      struct sge *s = & adapter->sge;
      #line 548 
      eq_idx = qid - s->egr_base;
      #line 549 
      if ((long)(eq_idx > 15U) != 0L) {
        #line 550 
        _dev_err(adapter->pdev_dev,(char *)"Egress Update QID %d out of range\n",qid);
        #line 552 
        break;
      }
      #line 554 
      tq = (struct sge_txq *)s->egr_map[eq_idx];
      #line 555 
      if ((long)(tq == (struct sge_txq *)0) != 0L) {
        #line 556 
        _dev_err(adapter->pdev_dev,(char *)"Egress Update QID %d TXQ=NULL\n",qid);
        #line 558 
        break;
      }
      #line 560 
      __mptr = (void *)tq;
      #line 560 
      txq = ((struct sge_eth_txq *)__mptr);
      #line 561 
      if ((long)(tq->abs_id != qid) != 0L) {
        #line 562 
        _dev_err(adapter->pdev_dev,(char *)"Egress Update QID %d refers to TXQ %d\n",qid,tq->abs_id);
        #line 565 
        break;
      }
      #line 572 
      (txq->q.restarts) ++;
      #line 573 
      netif_tx_wake_queue(txq->txq);
      #line 574 
      break;
    }
    #line 577 
    default: 
             #line 577 
    ;
    #line 578 
    _dev_err(adapter->pdev_dev,(char *)"unexpected CPL %#x on FW event queue\n",(int)opcode);
  }
  #line 582 
  return 0;
}

#line 590  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf_main.c"
static int setup_sge_queues(struct adapter *adapter)
{
  #line 593 
  int err;
  #line 593 
  int pidx;
  #line 593 
  int msix;
  #line 592 
  struct sge *s = & adapter->sge;
  #line 599 
  cif_bitmap_zero((unsigned long *)(& s->starving_fl),16U);
  #line 609 
  if ((adapter->flags & 2UL) != 0UL) {
    #line 610 
    err = t4vf_sge_alloc_rxq(adapter,& s->intrq,(_Bool)0,adapter->port[0],0,(struct sge_fl *)0,(int (*)(struct sge_rspq *, __be64 *, struct pkt_gl *))0);
    #line 612 
    if (err != 0) 
                  #line 613 
                  goto err_free_queues;
  }
  #line 619 
  err = t4vf_sge_alloc_rxq(adapter,& s->fw_evtq,(_Bool)1,adapter->port[0],0,(struct sge_fl *)0,& fwevtq_handler);
  #line 621 
  if (err != 0) 
                #line 622 
                goto err_free_queues;
  #line 630 
  msix = 1;
  #line 631 
  pidx = 0;
  #line 631 
  while ((int)adapter->params.nports > pidx) {
    {
      #line 636 
      int qs;
      #line 632 
      struct net_device *dev = adapter->port[pidx];
      #line 633 
      struct port_info *pi = netdev_priv(dev);
      #line 634 
      struct sge_eth_rxq *rxq = & s->ethrxq[(int)pi->first_qset];
      #line 635 
      struct sge_eth_txq *txq = & s->ethtxq[(int)pi->first_qset];
      #line 638 
      qs = 0;
      #line 638 
      while ((int)pi->nqsets > qs) {
        {
          #line 639 
          int tmp_0;
          #line 639 
          ;
          #line 639 
          tmp_0 = msix;
          #line 639 
          msix ++;
          #line 639 
          ;
          #line 639 
          ;
          #line 639 
          ;
          #line 639 
          ;
          #line 639 
          err = t4vf_sge_alloc_rxq(adapter,& rxq->rspq,(_Bool)0,dev,tmp_0,& rxq->fl,& t4vf_ethrx_handler);
          #line 642 
          if (err != 0) 
                        #line 643 
                        goto err_free_queues;
          #line 645 
          ;
          #line 645 
          ;
          #line 645 
          ;
          #line 645 
          ;
          #line 645 
          err = t4vf_sge_alloc_eth_txq(adapter,txq,dev,netdev_get_tx_queue(dev,(unsigned int)qs),(unsigned int)s->fw_evtq.cntxt_id);
          #line 648 
          if (err != 0) 
                        #line 649 
                        goto err_free_queues;
          #line 651 
          rxq->rspq.idx = (unsigned char)qs;
          #line 652 
          memset((void *)(& rxq->stats),0,48UL);
        }
        #line 638 
        qs ++;
        #line 638 
        rxq ++;
        #line 638 
        txq ++;
      }
    }
    #line 631 
    pidx ++;
  }
  #line 659 
  s->egr_base = s->ethtxq[0].q.abs_id - s->ethtxq[0].q.cntxt_id;
  #line 660 
  s->ingr_base = (unsigned int)((int)s->ethrxq[0].rspq.abs_id - (int)s->ethrxq[0].rspq.cntxt_id);
  #line 661 
  s->ingr_map[(unsigned int)s->fw_evtq.abs_id - s->ingr_base] = & s->fw_evtq;
  #line 662 
  pidx = 0;
  #line 662 
  while ((int)adapter->params.nports > pidx) {
    {
      #line 667 
      int qs_0;
      #line 663 
      struct net_device *dev_0 = adapter->port[pidx];
      #line 664 
      struct port_info *pi_0 = netdev_priv(dev_0);
      #line 665 
      struct sge_eth_rxq *rxq_0 = & s->ethrxq[(int)pi_0->first_qset];
      #line 666 
      struct sge_eth_txq *txq_0 = & s->ethtxq[(int)pi_0->first_qset];
      #line 669 
      qs_0 = 0;
      #line 669 
      while ((int)pi_0->nqsets > qs_0) {
        #line 670 
        s->ingr_map[(unsigned int)rxq_0->rspq.abs_id - s->ingr_base] = & rxq_0->rspq;
        #line 671 
        s->egr_map[txq_0->q.abs_id - s->egr_base] = (void *)(& txq_0->q);
        #line 682 
        rxq_0->fl.abs_id = rxq_0->fl.cntxt_id + s->egr_base;
        #line 683 
        s->egr_map[rxq_0->fl.abs_id - s->egr_base] = (void *)(& rxq_0->fl);
        #line 669 
        qs_0 ++;
        #line 669 
        rxq_0 ++;
        #line 669 
        txq_0 ++;
      }
    }
    #line 662 
    pidx ++;
  }
  #line 686 
  return 0;
  #line 688 
  err_free_queues: 
                   #line 688 
  ;
  #line 689 
  t4vf_free_sge_resources(adapter);
  #line 690 
  return err;
}

#line 701  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf_main.c"
static int setup_rss(struct adapter *adapter)
{
  #line 703 
  int pidx;
  #line 705 
  pidx = 0;
  #line 705 
  while ((int)adapter->params.nports > pidx) {
    {
      #line 708 
      u16 rss[8U];
      #line 709 
      int qs;
      #line 709 
      int err;
      #line 706 
      struct port_info *pi = adap2pinfo(adapter,pidx);
      #line 707 
      struct sge_eth_rxq *rxq = & adapter->sge.ethrxq[(int)pi->first_qset];
      #line 711 
      qs = 0;
      #line 711 
      while ((int)pi->nqsets > qs) {
        #line 712 
        rss[qs] = (rxq + (unsigned long)qs)->rspq.abs_id;
        #line 711 
        qs ++;
      }
      #line 714 
      err = t4vf_config_rss_range(adapter,(unsigned int)pi->viid,0,(int)pi->rss_size,(u16 *)(& rss),(int)pi->nqsets);
      #line 716 
      if (err != 0) 
                    #line 717 
                    return err;
      #line 722 
      switch (adapter->params.rss.mode) {
        #line 723 
        case (unsigned int)1: 
                              #line 723 
        ;
        #line 731 
        if ((unsigned int)adapter->params.rss.u.basicvirtual.tnlalllookup == 0U) {
          #line 732 
          union rss_vi_config config;
          #line 733 
          err = t4vf_read_rss_vi_config(adapter,(unsigned int)pi->viid,& config);
          #line 736 
          if (err != 0) 
                        #line 737 
                        return err;
          #line 738 
          config.basicvirtual.defaultq = rxq->rspq.abs_id;
          #line 740 
          err = t4vf_write_rss_vi_config(adapter,(unsigned int)pi->viid,& config);
          #line 743 
          if (err != 0) 
                        #line 744 
                        return err;
        }
        #line 746 
        break;
      }
    }
    #line 705 
    pidx ++;
  }
  #line 750 
  return 0;
}

#line 760  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf_main.c"
static int adapter_up(struct adapter *adapter)
{
  #line 762 
  int err;
  #line 769 
  if ((adapter->flags & 1UL) == 0UL) {
    #line 770 
    err = setup_sge_queues(adapter);
    #line 771 
    if (err != 0) 
                  #line 772 
                  return err;
    #line 773 
    err = setup_rss(adapter);
    #line 774 
    if (err != 0) {
      #line 775 
      t4vf_free_sge_resources(adapter);
      #line 776 
      return err;
    }
    #line 779 
    if ((adapter->flags & 4UL) != 0UL) 
                                       #line 780 
                                       name_msix_vecs(adapter);
    #line 782 
    adapter->flags |= 1UL;
  }
  #line 788 
  if ((long)((adapter->flags & 6UL) == 0UL) != 0L) {
    #line 789 
    ldv_inline_asm();
    #line 790 
    ldv_inline_asm();
    #line 791 
    ldv_inline_asm();
    #line 788 
    ;
  }
  #line 790 
  if ((adapter->flags & 4UL) != 0UL) 
                                     #line 791 
                                     err = request_msix_queue_irqs(adapter);
  else {
    #line 793 
    ;
    #line 793 
    ;
    #line 793 
    ;
    #line 793 
    err = cif_request_irq((adapter->pdev)->irq,t4vf_intr_handler(adapter),0UL,adapter->name,(void *)adapter);
  }
  #line 796 
  if (err != 0) {
    #line 797 
    _dev_err(adapter->pdev_dev,(char *)"request_irq failed, err %d\n",err);
    #line 799 
    return err;
  }
  #line 805 
  enable_rx(adapter);
  #line 806 
  t4vf_sge_start(adapter);
  #line 808 
  return 0;
}

#line 816  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf_main.c"
static void adapter_down(struct adapter *adapter)
{
  #line 821 
  if ((adapter->flags & 4UL) != 0UL) 
                                     #line 822 
                                     free_msix_queue_irqs(adapter); else 
                                                                    #line 824 
                                                                    cif_free_irq((adapter->pdev)->irq,(void *)adapter);
  #line 829 
  quiesce_rx(adapter);
  #line 830 
  return;
}

#line 835  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf_main.c"
static int cxgb4vf_open(struct net_device *dev)
{
  #line 837 
  int err;
  #line 838 
  struct port_info *pi = netdev_priv(dev);
  #line 839 
  struct adapter *adapter = pi->adapter;
  #line 845 
  if ((adapter->flags & 32UL) == 0UL) 
                                      #line 846 
                                      return -6;
  #line 852 
  if (adapter->open_device_map == 0UL) {
    #line 853 
    err = adapter_up(adapter);
    #line 854 
    if (err != 0) 
                  #line 855 
                  return err;
  }
  #line 861 
  err = t4vf_update_port_info(pi);
  #line 862 
  if (err < 0) 
               #line 863 
               return err;
  #line 868 
  err = link_start(dev);
  #line 869 
  if (err != 0) 
                #line 870 
                goto err_unwind;
  #line 872 
  pi->vlan_id = (unsigned int)t4vf_get_vf_vlan_acl(adapter);
  #line 874 
  netif_tx_start_all_queues(dev);
  #line 875 
  cif_set_bit((long)pi->port_id,& adapter->open_device_map);
  #line 876 
  return 0;
  #line 878 
  err_unwind: 
              #line 878 
  ;
  #line 879 
  if (adapter->open_device_map == 0UL) 
                                       #line 880 
                                       adapter_down(adapter);
  #line 881 
  return err;
}

#line 888  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf_main.c"
static int cxgb4vf_stop(struct net_device *dev)
{
  #line 890 
  struct port_info *pi = netdev_priv(dev);
  #line 891 
  struct adapter *adapter = pi->adapter;
  #line 893 
  netif_tx_stop_all_queues(dev);
  #line 894 
  netif_carrier_off(dev);
  #line 895 
  t4vf_enable_pi(adapter,pi,(_Bool)0,(_Bool)0);
  #line 897 
  cif_clear_bit((long)pi->port_id,& adapter->open_device_map);
  #line 898 
  if (adapter->open_device_map == 0UL) 
                                       #line 899 
                                       adapter_down(adapter);
  #line 900 
  return 0;
}

#line 906  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf_main.c"
static struct net_device_stats *cxgb4vf_get_stats(struct net_device *dev)
{
  #line 908 
  struct t4vf_port_stats stats;
  #line 912 
  int err;
  #line 909 
  struct port_info *pi = netdev2pinfo(dev);
  #line 910 
  struct adapter *adapter = pi->adapter;
  #line 911 
  struct net_device_stats *ns = & dev->stats;
  #line 914 
  cif_spin_lock_stats_lock_of_adapter(& adapter->stats_lock);
  #line 915 
  err = t4vf_get_port_stats(adapter,(int)pi->pidx,& stats);
  #line 916 
  cif_spin_unlock_stats_lock_of_adapter(& adapter->stats_lock);
  #line 918 
  memset((void *)ns,0,184UL);
  #line 919 
  if (err != 0) 
                #line 920 
                return ns;
  #line 922 
  ns->tx_bytes = (unsigned long)(((stats.tx_bcast_bytes + stats.tx_mcast_bytes) + stats.tx_ucast_bytes) + stats.tx_offload_bytes);
  #line 924 
  ns->tx_packets = (unsigned long)(((stats.tx_bcast_frames + stats.tx_mcast_frames) + stats.tx_ucast_frames) + stats.tx_offload_frames);
  #line 926 
  ns->rx_bytes = (unsigned long)((stats.rx_bcast_bytes + stats.rx_mcast_bytes) + stats.rx_ucast_bytes);
  #line 928 
  ns->rx_packets = (unsigned long)((stats.rx_bcast_frames + stats.rx_mcast_frames) + stats.rx_ucast_frames);
  #line 930 
  ns->multicast = (unsigned long)stats.rx_mcast_frames;
  #line 931 
  ns->tx_errors = (unsigned long)stats.tx_drop_frames;
  #line 932 
  ns->rx_errors = (unsigned long)stats.rx_err_frames;
  #line 934 
  return ns;
}

#line 937  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf_main.c"
static int cxgb4vf_mac_sync(struct net_device *netdev, u8 *mac_addr)
{
  #line 941 
  int ret;
  #line 947 
  struct hash_mac_addr *new_entry;
  #line 949 
  u64 *tmp_1;
  #line 966 
  int tmp_3;
  #line 939 
  struct port_info *pi = netdev_priv(netdev);
  #line 940 
  struct adapter *adapter = pi->adapter;
  #line 942 
  u64 mhash = 0ULL;
  #line 943 
  u64 uhash = 0ULL;
  #line 944 
  bool free_0 = (_Bool)0;
  #line 945 
  bool ucast = is_unicast_ether_addr(mac_addr);
  #line 946 
  u8 *maclist[1U] = {mac_addr};
  #line 949 
  if ((int)ucast != 0) 
                       #line 949 
                       tmp_1 = & uhash; else 
                                             #line 949 
                                             tmp_1 = & mhash;
  #line 949 
  ;
  #line 949 
  ;
  #line 949 
  ;
  #line 949 
  ret = t4vf_alloc_mac_filt(adapter,(unsigned int)pi->viid,(_Bool)((bool)((int)free_0) != 0),1U,(u8 **)(& maclist),(u16 *)0U,tmp_1,(_Bool)0);
  #line 951 
  if (ret < 0) 
               #line 952 
               goto out;
  #line 957 
  if (uhash != 0ULL || mhash != 0ULL) {
    #line 958 
    new_entry = (struct hash_mac_addr *)kzalloc(32UL,2592U);
    #line 959 
    if (new_entry == (struct hash_mac_addr *)0) 
                                                #line 960 
                                                return -12;
    #line 961 
    ether_addr_copy((u8 *)(& new_entry->addr),mac_addr);
    #line 962 
    list_add_tail(& new_entry->list,& adapter->mac_hlist);
    #line 963 
    ret = cxgb4vf_set_addr_hash(pi);
  }
  #line 965 
  out: 
       #line 965 
  ;
  #line 966 
  if (0 < ret) 
               #line 966 
               tmp_3 = 0; else 
                               #line 966 
                               tmp_3 = ret;
  #line 966 
  return tmp_3;
}

#line 969  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf_main.c"
static int cxgb4vf_mac_unsync(struct net_device *netdev, u8 *mac_addr)
{
  #line 980 
  void *__mptr;
  #line 980 
  void *__mptr_0;
  #line 973 
  int ret;
  #line 975 
  struct hash_mac_addr *entry;
  #line 975 
  struct hash_mac_addr *tmp;
  #line 989 
  int tmp_6;
  #line 971 
  struct port_info *pi = netdev_priv(netdev);
  #line 972 
  struct adapter *adapter = pi->adapter;
  #line 974 
  u8 *maclist[1U] = {mac_addr};
  #line 980 
  __mptr = (void *)adapter->mac_hlist.next;
  #line 980 
  entry = ((struct hash_mac_addr *)__mptr);
  #line 980 
  __mptr_0 = (void *)entry->list.next;
  #line 981 
  tmp = ((struct hash_mac_addr *)__mptr_0);
  #line 980 
  while (& entry->list != & adapter->mac_hlist) {
    #line 980 
    void *__mptr_1;
    #line 981 
    if ((int)ether_addr_equal((u8 *)(& entry->addr),mac_addr) != 0) {
      #line 982 
      list_del(& entry->list);
      #line 983 
      kfree((void *)entry);
      #line 984 
      return cxgb4vf_set_addr_hash(pi);
    }
    #line 980 
    entry = tmp;
    #line 980 
    __mptr_1 = (void *)tmp->list.next;
    #line 980 
    tmp = ((struct hash_mac_addr *)__mptr_1);
  }
  #line 988 
  ret = t4vf_free_mac_filt(adapter,(unsigned int)pi->viid,1U,(u8 **)(& maclist),(_Bool)0);
  #line 989 
  if (ret < 0) 
               #line 989 
               tmp_6 = -22; else 
                                 #line 989 
                                 tmp_6 = 0;
  #line 989 
  return tmp_6;
}

#line 996  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf_main.c"
static int set_rxmode(struct net_device *dev, int mtu, bool sleep_ok)
{
  #line 998 
  struct port_info *pi = netdev_priv(dev);
  #line 1000 
  __dev_uc_sync(dev,& cxgb4vf_mac_sync,& cxgb4vf_mac_unsync);
  #line 1001 
  __dev_mc_sync(dev,& cxgb4vf_mac_sync,& cxgb4vf_mac_unsync);
  #line 1002 
  return t4vf_set_rxmode(pi->adapter,(unsigned int)pi->viid,-1,
                        (dev->flags & 256U) != 0U,(dev->flags & 512U) != 0U,
                        1,-1,(_Bool)((bool)((int)sleep_ok) != 0));
}

#line 1011  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf_main.c"
static void cxgb4vf_set_rxmode(struct net_device *dev)
{
  #line 1014 
  set_rxmode(dev,-1,(_Bool)0);
  #line 1015 
  return;
}

#line 1021  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf_main.c"
static int closest_timer(struct sge *s, int us)
{
  #line 1023 
  int i;
  #line 1023 
  int timer_idx = 0;
  #line 1023 
  int min_delta = 2147483647;
  #line 1025 
  i = 0;
  #line 1025 
  while ((unsigned int)i <= 5U) {
    {
      #line 1026 
      int delta = us - (int)s->timer_val[i];
      #line 1027 
      if (delta < 0) 
                     #line 1028 
                     delta = - delta;
      #line 1029 
      if (delta < min_delta) {
        #line 1030 
        min_delta = delta;
        #line 1031 
        timer_idx = i;
      }
    }
    #line 1025 
    i ++;
  }
  #line 1034 
  return timer_idx;
}

#line 1037  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf_main.c"
static int closest_thres(struct sge *s, int thres)
{
  #line 1039 
  int i;
  #line 1039 
  int delta;
  #line 1039 
  int pktcnt_idx = 0;
  #line 1039 
  int min_delta = 2147483647;
  #line 1041 
  i = 0;
  #line 1041 
  while ((unsigned int)i <= 3U) {
    #line 1042 
    delta = thres - (int)s->counter_val[i];
    #line 1043 
    if (delta < 0) 
                   #line 1044 
                   delta = - delta;
    #line 1045 
    if (delta < min_delta) {
      #line 1046 
      min_delta = delta;
      #line 1047 
      pktcnt_idx = i;
    }
    #line 1041 
    i ++;
  }
  #line 1050 
  return pktcnt_idx;
}

#line 1056  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf_main.c"
static unsigned int qtimer_val(struct adapter *adapter, struct sge_rspq *rspq)
{
  #line 1063 
  unsigned int tmp;
  #line 1059 
  unsigned int timer_idx = (unsigned int)((int)rspq->intr_params >> 1) & 7U;
  #line 1063 
  if (timer_idx <= 5U) 
                       #line 1063 
                       tmp = (unsigned int)adapter->sge.timer_val[timer_idx]; else 
                                                                    #line 1063 
                                                                    tmp = 0U;
  #line 1063 
  return tmp;
}

#line 1077  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf_main.c"
static int set_rxq_intr_params(struct adapter *adapter, struct sge_rspq *rspq, unsigned int us, unsigned int cnt)
{
  #line 1080 
  unsigned int timer_idx;
  #line 1086 
  if ((us | cnt) == 0U) 
                        #line 1087 
                        cnt = 1U;
  #line 1095 
  if (cnt != 0U) {
    #line 1096 
    int err;
    #line 1097 
    u32 v;
    #line 1097 
    u32 pktcnt_idx;
    #line 1099 
    pktcnt_idx = (unsigned int)closest_thres(& adapter->sge,(int)cnt);
    #line 1100 
    if (rspq->desc != (__be64 *)0ULL && (unsigned int)rspq->pktcnt_idx != pktcnt_idx) {
      #line 1101 
      v = (unsigned int)((int)rspq->cntxt_id | 67174400);
      #line 1105 
      err = t4vf_set_params(adapter,1U,& v,& pktcnt_idx);
      #line 1106 
      if (err != 0) 
                    #line 1107 
                    return err;
    }
    #line 1109 
    rspq->pktcnt_idx = (unsigned char)pktcnt_idx;
  }
  #line 1116 
  if (us != 0U) {
    #line 1116 
    timer_idx = (unsigned int)closest_timer(& adapter->sge,(int)us);
  }
  else 
       #line 1116 
       timer_idx = 6U;
  #line 1124 
  rspq->intr_params = (unsigned char)(((int)((unsigned char)timer_idx) << 1U) | (cnt != 0U));
  #line 1126 
  return 0;
}

#line 1134  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf_main.c"
__inline static unsigned int mk_adap_vers(struct adapter *adapter)
{
  #line 1139 
  return (((unsigned int)adapter->params.chip >> 4) & 15U) | 64512U;
}

#line 1145  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf_main.c"
static int cxgb4vf_do_ioctl(struct net_device *dev, struct ifreq *ifr, int cmd)
{
  #line 1147 
  int ret = 0;
  #line 1149 
  switch (cmd) {
    #line 1156 
    default: 
             #line 1156 
    ;
    #line 1157 
    ret = -95;
    #line 1158 
    break;
  }
  #line 1160 
  return ret;
}

#line 1166  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf_main.c"
static int cxgb4vf_change_mtu(struct net_device *dev, int new_mtu)
{
  #line 1168 
  int ret;
  #line 1169 
  struct port_info *pi = netdev_priv(dev);
  #line 1171 
  ret = t4vf_set_rxmode(pi->adapter,(unsigned int)pi->viid,new_mtu,-1,-1,-1,-1,(_Bool)1);
  #line 1173 
  if (ret == 0) 
                #line 1174 
                dev->mtu = (unsigned int)new_mtu;
  #line 1175 
  return ret;
}

#line 1178  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf_main.c"
static netdev_features_t cxgb4vf_fix_features(struct net_device *dev, netdev_features_t features)
{
  #line 1185 
  if ((features & 256ULL) != 0ULL) 
                                   #line 1186 
                                   features |= 128ULL; else 
                                                            #line 1188 
                                                            features &= 18446744073709551487ULL;
  #line 1190 
  return features;
}

#line 1193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf_main.c"
static int cxgb4vf_set_features(struct net_device *dev, netdev_features_t features)
{
  #line 1196 
  struct port_info *pi = netdev_priv(dev);
  #line 1197 
  netdev_features_t changed = dev->features ^ features;
  #line 1199 
  if ((changed & 256ULL) != 0ULL) 
                                  #line 1200 
                                  t4vf_set_rxmode(pi->adapter,(unsigned int)pi->viid,-1,-1,-1,-1,(int)features & 128,(_Bool)0);
  #line 1203 
  return 0;
}

#line 1209  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf_main.c"
static int cxgb4vf_set_mac_addr(struct net_device *dev, void *_addr)
{
  #line 1211 
  int ret;
  #line 1212 
  struct sockaddr *addr = (struct sockaddr *)_addr;
  #line 1213 
  struct port_info *pi = netdev_priv(dev);
  #line 1215 
  if (! is_valid_ether_addr((u8 *)(& addr->sa_data))) 
                                                      #line 1216 
                                                      return -99;
  #line 1218 
  ret = cxgb4vf_change_mac(pi,(unsigned int)pi->viid,& pi->xact_addr_filt,(u8 *)(& addr->sa_data),(_Bool)1);
  #line 1220 
  if (ret < 0) 
               #line 1221 
               return ret;
  #line 1223 
  memcpy((void *)dev->dev_addr,(void *)(& addr->sa_data),(unsigned long)dev->addr_len);
  #line 1224 
  return 0;
}

#line 1232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf_main.c"
static void cxgb4vf_poll_controller(struct net_device *dev)
{
  #line 1234 
  struct port_info *pi = netdev_priv(dev);
  #line 1235 
  struct adapter *adapter = pi->adapter;
  #line 1237 
  if ((adapter->flags & 4UL) != 0UL) {
    #line 1238 
    struct sge_eth_rxq *rxq;
    #line 1239 
    int nqsets;
    #line 1241 
    rxq = & adapter->sge.ethrxq[(int)pi->first_qset];
    #line 1242 
    nqsets = (int)pi->nqsets;
    #line 1242 
    while (nqsets != 0) {
      #line 1243 
      t4vf_sge_intr_msix(0,(void *)(& rxq->rspq));
      #line 1244 
      rxq ++;
      #line 1242 
      nqsets --;
    }
  }
  else {
    #line 1247 
    (*t4vf_intr_handler(adapter))(0,(void *)adapter);
  }
  #line 1248 
  return;
}

#line 1266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf_main.c"
static int from_fw_port_mod_type(enum fw_port_type port_type, enum fw_port_module_type mod_type)
{
  #line 1270 
  if ((unsigned int)port_type + 4294967294U <= 2U) 
                                                   #line 1272 
                                                   return 0;
  else 
    #line 1273 
    if (port_type <= (unsigned int)FW_PORT_TYPE_FIBER_XAUI) 
                                                            #line 1275 
                                                            return 3;
    else 
      #line 1276 
      if ((((port_type == (unsigned int)FW_PORT_TYPE_SFP || port_type == (unsigned int)FW_PORT_TYPE_QSFP_10G) || (unsigned int)port_type + 4294967283U <= 1U) || (unsigned int)port_type + 4294967279U <= 1U) || (unsigned int)port_type + 4294967277U <= 1U) 
        #line 1285 
        if ((unsigned int)mod_type + 4294967295U <= 2U || mod_type == (unsigned int)FW_PORT_MOD_TYPE_LRM) 
          #line 1288 
          return 3;
        else 
          #line 1289 
          if ((unsigned int)mod_type + 4294967292U <= 1U) 
                                                          #line 1291 
                                                          return 5; else 
                                                                    #line 1293 
                                                                    return 255;
      else 
        #line 1294 
        if ((port_type == (unsigned int)FW_PORT_TYPE_KR4_100G || port_type == (unsigned int)FW_PORT_TYPE_KR_SFP28) || port_type == (unsigned int)FW_PORT_TYPE_KR_XLAUI) 
          #line 1297 
          return 239;
  #line 1300 
  return 255;
}

#line 1312  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf_main.c"
static void fw_caps_to_lmm(enum fw_port_type port_type, unsigned int fw_caps, unsigned long *link_mode_mask)
{
  #line 1326 
  switch ((unsigned int)port_type) {
    #line 1327 
    case (unsigned int)2: 
                          #line 1327 
    ;
    #line 1328 
    case (unsigned int)3: 
                          #line 1328 
    ;
    #line 1329 
    case (unsigned int)4: 
                          #line 1329 
    ;
    #line 1330 
    __set_bit(7L,link_mode_mask);
    #line 1331 
    if (((unsigned long)fw_caps & 1UL) != 0UL) 
                                               #line 1331 
                                               __set_bit(3L,link_mode_mask);
    #line 1332 
    if (((unsigned long)fw_caps & 2UL) != 0UL) 
                                               #line 1332 
                                               __set_bit(5L,link_mode_mask);
    #line 1333 
    if (((unsigned long)fw_caps & 4UL) != 0UL) 
                                               #line 1333 
                                               __set_bit(12L,link_mode_mask);
    #line 1334 
    break;
    #line 1336 
    case (unsigned int)5: 
                          #line 1336 
    ;
    #line 1337 
    case (unsigned int)7: 
                          #line 1337 
    ;
    #line 1338 
    __set_bit(16L,link_mode_mask);
    #line 1339 
    if (((unsigned long)fw_caps & 2UL) != 0UL) 
                                               #line 1339 
                                               __set_bit(17L,link_mode_mask);
    #line 1340 
    if (((unsigned long)fw_caps & 4UL) != 0UL) 
                                               #line 1340 
                                               __set_bit(18L,link_mode_mask);
    #line 1341 
    break;
    #line 1343 
    case (unsigned int)8: 
                          #line 1343 
    ;
    #line 1344 
    __set_bit(16L,link_mode_mask);
    #line 1345 
    if (((unsigned long)fw_caps & 4UL) != 0UL) 
                                               #line 1345 
                                               __set_bit(19L,link_mode_mask);
    #line 1346 
    break;
    #line 1348 
    case (unsigned int)10: 
                           #line 1348 
    ;
    #line 1349 
    __set_bit(16L,link_mode_mask);
    #line 1350 
    if (((unsigned long)fw_caps & 2UL) != 0UL) 
                                               #line 1350 
                                               __set_bit(17L,link_mode_mask);
    #line 1351 
    if (((unsigned long)fw_caps & 4UL) != 0UL) 
                                               #line 1351 
                                               __set_bit(20L,link_mode_mask);
    #line 1352 
    if (((unsigned long)fw_caps & 4UL) != 0UL) 
                                               #line 1352 
                                               __set_bit(19L,link_mode_mask);
    #line 1353 
    break;
    #line 1355 
    case (unsigned int)11: 
                           #line 1355 
    ;
    #line 1356 
    __set_bit(16L,link_mode_mask);
    #line 1357 
    if (((unsigned long)fw_caps & 2UL) != 0UL) 
                                               #line 1357 
                                               __set_bit(17L,link_mode_mask);
    #line 1358 
    if (((unsigned long)fw_caps & 4UL) != 0UL) 
                                               #line 1358 
                                               __set_bit(20L,link_mode_mask);
    #line 1359 
    if (((unsigned long)fw_caps & 4UL) != 0UL) 
                                               #line 1359 
                                               __set_bit(19L,link_mode_mask);
    #line 1360 
    if (((unsigned long)fw_caps & 4UL) != 0UL) 
                                               #line 1360 
                                               __set_bit(18L,link_mode_mask);
    #line 1361 
    break;
    #line 1363 
    case (unsigned int)0: 
                          #line 1363 
    ;
    #line 1364 
    case (unsigned int)1: 
                          #line 1364 
    ;
    #line 1365 
    case (unsigned int)9: 
                          #line 1365 
    ;
    #line 1366 
    case (unsigned int)12: 
                           #line 1366 
    ;
    #line 1367 
    case (unsigned int)13: 
                           #line 1367 
    ;
    #line 1368 
    __set_bit(10L,link_mode_mask);
    #line 1369 
    if (((unsigned long)fw_caps & 2UL) != 0UL) 
                                               #line 1369 
                                               __set_bit(5L,link_mode_mask);
    #line 1370 
    if (((unsigned long)fw_caps & 4UL) != 0UL) 
                                               #line 1370 
                                               __set_bit(12L,link_mode_mask);
    #line 1371 
    break;
    #line 1373 
    case (unsigned int)15: 
                           #line 1373 
    ;
    #line 1374 
    case (unsigned int)14: 
                           #line 1374 
    ;
    #line 1375 
    __set_bit(10L,link_mode_mask);
    #line 1376 
    if (((unsigned long)fw_caps & 2UL) != 0UL) 
                                               #line 1376 
                                               __set_bit(5L,link_mode_mask);
    #line 1377 
    if (((unsigned long)fw_caps & 4UL) != 0UL) 
                                               #line 1377 
                                               __set_bit(12L,link_mode_mask);
    #line 1378 
    if (((unsigned long)fw_caps & 16UL) != 0UL) 
                                                #line 1378 
                                                __set_bit(25L,link_mode_mask);
    #line 1379 
    break;
    #line 1381 
    case (unsigned int)18: 
                           #line 1381 
    ;
    #line 1382 
    case (unsigned int)20: 
                           #line 1382 
    ;
    #line 1383 
    __set_bit(10L,link_mode_mask);
    #line 1384 
    if (((unsigned long)fw_caps & 2UL) != 0UL) 
                                               #line 1384 
                                               __set_bit(5L,link_mode_mask);
    #line 1385 
    if (((unsigned long)fw_caps & 4UL) != 0UL) 
                                               #line 1385 
                                               __set_bit(12L,link_mode_mask);
    #line 1386 
    if (((unsigned long)fw_caps & 8UL) != 0UL) 
                                               #line 1386 
                                               __set_bit(31L,link_mode_mask);
    #line 1387 
    break;
    #line 1389 
    case (unsigned int)21: 
                           #line 1389 
    ;
    #line 1390 
    __set_bit(16L,link_mode_mask);
    #line 1391 
    if (((unsigned long)fw_caps & 2UL) != 0UL) 
                                               #line 1391 
                                               __set_bit(5L,link_mode_mask);
    #line 1392 
    if (((unsigned long)fw_caps & 4UL) != 0UL) 
                                               #line 1392 
                                               __set_bit(19L,link_mode_mask);
    #line 1393 
    if (((unsigned long)fw_caps & 8UL) != 0UL) 
                                               #line 1393 
                                               __set_bit(32L,link_mode_mask);
    #line 1394 
    break;
    #line 1396 
    case (unsigned int)22: 
                           #line 1396 
    ;
    #line 1397 
    __set_bit(16L,link_mode_mask);
    #line 1398 
    if (((unsigned long)fw_caps & 2UL) != 0UL) 
                                               #line 1398 
                                               __set_bit(17L,link_mode_mask);
    #line 1399 
    if (((unsigned long)fw_caps & 4UL) != 0UL) 
                                               #line 1399 
                                               __set_bit(19L,link_mode_mask);
    #line 1400 
    if (((unsigned long)fw_caps & 16UL) != 0UL) 
                                                #line 1400 
                                                __set_bit(23L,link_mode_mask);
    #line 1401 
    break;
    #line 1403 
    case (unsigned int)19: 
                           #line 1403 
    ;
    #line 1404 
    __set_bit(10L,link_mode_mask);
    #line 1405 
    if (((unsigned long)fw_caps & 32UL) != 0UL) 
                                                #line 1405 
                                                __set_bit(40L,link_mode_mask);
    #line 1406 
    break;
    #line 1408 
    case (unsigned int)16: 
                           #line 1408 
    ;
    #line 1409 
    case (unsigned int)17: 
                           #line 1409 
    ;
    #line 1410 
    __set_bit(10L,link_mode_mask);
    #line 1411 
    if (((unsigned long)fw_caps & 2UL) != 0UL) 
                                               #line 1411 
                                               __set_bit(5L,link_mode_mask);
    #line 1412 
    if (((unsigned long)fw_caps & 4UL) != 0UL) 
                                               #line 1412 
                                               __set_bit(19L,link_mode_mask);
    #line 1413 
    if (((unsigned long)fw_caps & 16UL) != 0UL) 
                                                #line 1413 
                                                __set_bit(25L,link_mode_mask);
    #line 1414 
    if (((unsigned long)fw_caps & 8UL) != 0UL) 
                                               #line 1414 
                                               __set_bit(31L,link_mode_mask);
    #line 1415 
    if (((unsigned long)fw_caps & 32UL) != 0UL) 
                                                #line 1415 
                                                __set_bit(34L,link_mode_mask);
    #line 1416 
    if (((unsigned long)fw_caps & 64UL) != 0UL) 
                                                #line 1416 
                                                __set_bit(38L,link_mode_mask);
    #line 1417 
    break;
    #line 1419 
    default: 
             #line 1419 
    ;
    #line 1420 
    break;
  }
  #line 1423 
  if ((fw_caps & 260046848U) != 0U) {
    #line 1424 
    if (((unsigned long)fw_caps & 8388608UL) != 0UL) 
                                                     #line 1424 
                                                     __set_bit(50L,link_mode_mask);
    #line 1425 
    if (((unsigned long)fw_caps & 16777216UL) != 0UL) 
                                                      #line 1425 
                                                      __set_bit(51L,link_mode_mask);
  }
  else 
       #line 1427 
       __set_bit(49L,link_mode_mask);
  #line 1430 
  if (((unsigned long)fw_caps & 1048576UL) != 0UL) 
                                                   #line 1430 
                                                   __set_bit(6L,link_mode_mask);
  #line 1431 
  if (((unsigned long)fw_caps & 262144UL) != 0UL) 
                                                  #line 1431 
                                                  __set_bit(13L,link_mode_mask);
  #line 1432 
  if (((unsigned long)fw_caps & 524288UL) != 0UL) 
                                                  #line 1432 
                                                  __set_bit(14L,link_mode_mask);
  #line 1433 
  return;
}

#line 1438  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf_main.c"
static int cxgb4vf_get_link_ksettings(struct net_device *dev, struct ethtool_link_ksettings *link_ksettings)
{
  #line 1441 
  struct port_info *pi = netdev_priv(dev);
  #line 1442 
  struct ethtool_link_settings *base = & link_ksettings->base;
  #line 1448 
  if (! netif_running(dev)) 
                            #line 1449 
                            t4vf_update_port_info(pi);
  #line 1451 
  cif_bitmap_zero((unsigned long *)(& link_ksettings->link_modes.supported),74U);
  #line 1452 
  cif_bitmap_zero((unsigned long *)(& link_ksettings->link_modes.advertising),74U);
  #line 1453 
  cif_bitmap_zero((unsigned long *)(& link_ksettings->link_modes.lp_advertising),74U);
  #line 1455 
  base->port = (unsigned char)from_fw_port_mod_type((enum fw_port_type)pi->port_type,
                              (enum fw_port_module_type)pi->mod_type);
  #line 1457 
  if ((int)pi->mdio_addr >= 0) {
    #line 1458 
    base->phy_address = (unsigned char)pi->mdio_addr;
    #line 1459 
    if ((unsigned int)pi->port_type == 2U) 
                                           #line 1459 
                                           base->mdio_support = (unsigned char)1U; else 
                                                                    #line 1459 
                                                                    base->mdio_support = (unsigned char)2U;
  }
  else {
    #line 1463 
    base->phy_address = (unsigned char)255U;
    #line 1464 
    base->mdio_support = (unsigned char)0U;
  }
  #line 1467 
  fw_caps_to_lmm((enum fw_port_type)pi->port_type,pi->link_cfg.pcaps,(unsigned long *)(& link_ksettings->link_modes.supported));
  #line 1469 
  fw_caps_to_lmm((enum fw_port_type)pi->port_type,pi->link_cfg.acaps,(unsigned long *)(& link_ksettings->link_modes.advertising));
  #line 1471 
  fw_caps_to_lmm((enum fw_port_type)pi->port_type,pi->link_cfg.lpacaps,(unsigned long *)(& link_ksettings->link_modes.lp_advertising));
  #line 1474 
  if ((int)netif_carrier_ok(dev) != 0) {
    #line 1475 
    base->speed = pi->link_cfg.speed;
    #line 1476 
    base->duplex = (unsigned char)1U;
  }
  else {
    #line 1478 
    base->speed = 4294967295U;
    #line 1479 
    base->duplex = (unsigned char)255U;
  }
  #line 1482 
  base->autoneg = pi->link_cfg.autoneg;
  #line 1483 
  if (((unsigned long)pi->link_cfg.pcaps & 1048576UL) != 0UL) 
                                                              #line 1484 
                                                              __set_bit(6L,(unsigned long *)(& link_ksettings->link_modes.supported));
  #line 1486 
  if ((unsigned int)pi->link_cfg.autoneg != 0U) 
                                                #line 1487 
                                                __set_bit(6L,(unsigned long *)(& link_ksettings->link_modes.advertising));
  #line 1490 
  return 0;
}

#line 1494  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf_main.c"
__inline static unsigned int fwcap_to_eth_fec(unsigned int fw_fec)
{
  #line 1496 
  unsigned int eth_fec = 0U;
  #line 1498 
  if (((unsigned long)fw_fec & 8388608UL) != 0UL) 
                                                  #line 1499 
                                                  eth_fec |= 8U;
  #line 1500 
  if (((unsigned long)fw_fec & 16777216UL) != 0UL) 
                                                   #line 1501 
                                                   eth_fec |= 16U;
  #line 1504 
  if (eth_fec == 0U) 
                     #line 1505 
                     eth_fec = 4U;
  #line 1507 
  return eth_fec;
}

#line 1511  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf_main.c"
__inline static unsigned int cc_to_eth_fec(unsigned int cc_fec)
{
  #line 1513 
  unsigned int eth_fec = 0U;
  #line 1515 
  if ((cc_fec & 1U) != 0U) 
                           #line 1516 
                           eth_fec |= 2U;
  #line 1517 
  if ((cc_fec & 2U) != 0U) 
                           #line 1518 
                           eth_fec |= 8U;
  #line 1519 
  if ((cc_fec & 4U) != 0U) 
                           #line 1520 
                           eth_fec |= 16U;
  #line 1523 
  if (eth_fec == 0U) 
                     #line 1524 
                     eth_fec = 4U;
  #line 1526 
  return eth_fec;
}

#line 1529  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf_main.c"
static int cxgb4vf_get_fecparam(struct net_device *dev, struct ethtool_fecparam *fec)
{
  #line 1532 
  struct port_info *pi = netdev_priv(dev);
  #line 1533 
  struct link_config *lc = & pi->link_cfg;
  #line 1539 
  fec->fec = fwcap_to_eth_fec(lc->pcaps);
  #line 1540 
  if (fec->fec != 4U) 
                      #line 1541 
                      fec->fec |= 2U;
  #line 1546 
  fec->active_fec = cc_to_eth_fec((unsigned int)lc->fec);
  #line 1547 
  return 0;
}

#line 1553  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf_main.c"
static void cxgb4vf_get_drvinfo(struct net_device *dev, struct ethtool_drvinfo *drvinfo)
{
  #line 1560 
  void *__mptr;
  #line 1556 
  struct adapter *adapter = netdev2adap(dev);
  #line 1558 
  strlcpy((char *)(& drvinfo->driver),(char *)"cxgb4vf",32UL);
  #line 1559 
  strlcpy((char *)(& drvinfo->version),(char *)"2.0.0-ko",32UL);
  #line 1560 
  __mptr = (void *)dev->dev.parent;
  #line 1560 
  ;
  #line 1560 
  strlcpy((char *)(& drvinfo->bus_info),pci_name(((struct pci_dev *)(__mptr + 18446744073709551440U))),32UL);
  #line 1562 
  snprintf((char *)(& drvinfo->fw_version),32UL,(char *)"%u.%u.%u.%u, TP %u.%u.%u.%u",adapter->params.dev.fwrev >> 24,(adapter->params.dev.fwrev >> 16) & 255U,(adapter->params.dev.fwrev >> 8) & 255U,adapter->params.dev.fwrev & 255U,adapter->params.dev.tprev >> 24,(adapter->params.dev.tprev >> 16) & 255U,(adapter->params.dev.tprev >> 8) & 255U,adapter->params.dev.tprev & 255U);
  #line 1572 
  return;
}

#line 1577  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf_main.c"
static u32 cxgb4vf_get_msglevel(struct net_device *dev)
{
  #line 1579 
  return netdev2adap(dev)->msg_enable;
}

#line 1585  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf_main.c"
static void cxgb4vf_set_msglevel(struct net_device *dev, u32 msglevel)
{
  #line 1587 
  netdev2adap(dev)->msg_enable = msglevel;
  #line 1588 
  return;
}

#line 1596  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf_main.c"
static void cxgb4vf_get_ringparam(struct net_device *dev, struct ethtool_ringparam *rp)
{
  #line 1599 
  struct port_info *pi = netdev_priv(dev);
  #line 1600 
  struct sge *s = & (pi->adapter)->sge;
  #line 1602 
  rp->rx_max_pending = 16384U;
  #line 1603 
  rp->rx_mini_max_pending = 16384U;
  #line 1604 
  rp->rx_jumbo_max_pending = 0U;
  #line 1605 
  rp->tx_max_pending = 16384U;
  #line 1607 
  rp->rx_pending = s->ethrxq[(int)pi->first_qset].fl.size + 4294967288U;
  #line 1608 
  rp->rx_mini_pending = s->ethrxq[(int)pi->first_qset].rspq.size;
  #line 1609 
  rp->rx_jumbo_pending = 0U;
  #line 1610 
  rp->tx_pending = s->ethtxq[(int)pi->first_qset].q.size;
  #line 1611 
  return;
}

#line 1619  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf_main.c"
static int cxgb4vf_set_ringparam(struct net_device *dev, struct ethtool_ringparam *rp)
{
  #line 1625 
  int qs;
  #line 1622 
  struct port_info *pi = netdev_priv(dev);
  #line 1623 
  struct adapter *adapter = pi->adapter;
  #line 1624 
  struct sge *s = & adapter->sge;
  #line 1627 
  if ((((((rp->rx_pending > 16384U || rp->rx_jumbo_pending != 0U) || rp->tx_pending > 16384U) || rp->rx_mini_pending > 16384U) || rp->rx_mini_pending <= 127U) || rp->rx_pending <= 15U) || rp->tx_pending <= 31U) 
    #line 1634 
    return -22;
  #line 1636 
  if ((adapter->flags & 1UL) != 0UL) 
                                     #line 1637 
                                     return -16;
  #line 1639 
  qs = (int)pi->first_qset;
  #line 1639 
  while ((int)pi->first_qset + (int)pi->nqsets > qs) {
    #line 1640 
    s->ethrxq[qs].fl.size = rp->rx_pending + 8U;
    #line 1641 
    s->ethrxq[qs].rspq.size = rp->rx_mini_pending;
    #line 1642 
    s->ethtxq[qs].q.size = rp->tx_pending;
    #line 1639 
    qs ++;
  }
  #line 1644 
  return 0;
}

#line 1652  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf_main.c"
static int cxgb4vf_get_coalesce(struct net_device *dev, struct ethtool_coalesce *coalesce)
{
  #line 1655 
  struct port_info *pi = netdev_priv(dev);
  #line 1656 
  struct adapter *adapter = pi->adapter;
  #line 1657 
  struct sge_rspq *rspq = & adapter->sge.ethrxq[(int)pi->first_qset].rspq;
  #line 1659 
  coalesce->rx_coalesce_usecs = qtimer_val(adapter,rspq);
  #line 1660 
  if (((unsigned int)rspq->intr_params & 1U) != 0U) 
                                                    #line 1660 
                                                    coalesce->rx_max_coalesced_frames = (unsigned int)adapter->sge.counter_val[(int)rspq->pktcnt_idx]; else 
                                                                    #line 1660 
                                                                    coalesce->rx_max_coalesced_frames = 0U;
  #line 1664 
  return 0;
}

#line 1672  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf_main.c"
static int cxgb4vf_set_coalesce(struct net_device *dev, struct ethtool_coalesce *coalesce)
{
  #line 1675 
  struct port_info *pi = netdev_priv(dev);
  #line 1676 
  struct adapter *adapter = pi->adapter;
  #line 1678 
  return set_rxq_intr_params(adapter,
                            & adapter->sge.ethrxq[(int)pi->first_qset].rspq,
                            coalesce->rx_coalesce_usecs,
                            coalesce->rx_max_coalesced_frames);
}

#line 1687  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf_main.c"
static void cxgb4vf_get_pauseparam(struct net_device *dev, struct ethtool_pauseparam *pauseparam)
{
  #line 1690 
  struct port_info *pi = netdev_priv(dev);
  #line 1692 
  pauseparam->autoneg = (unsigned int)(((unsigned int)pi->link_cfg.requested_fc & 4U) != 0U);
  #line 1693 
  pauseparam->rx_pause = (unsigned int)(((unsigned int)pi->link_cfg.advertised_fc & 1U) != 0U);
  #line 1694 
  pauseparam->tx_pause = (unsigned int)(((unsigned int)pi->link_cfg.advertised_fc & 2U) != 0U);
  #line 1695 
  return;
}

#line 1700  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf_main.c"
static int cxgb4vf_phys_id(struct net_device *dev, enum ethtool_phys_id_state state)
{
  #line 1703 
  unsigned int val;
  #line 1704 
  struct port_info *pi = netdev_priv(dev);
  #line 1706 
  if (state == (unsigned int)ETHTOOL_ID_ACTIVE) 
                                                #line 1707 
                                                val = 65535U;
  else 
    #line 1708 
    if (state == (unsigned int)ETHTOOL_ID_INACTIVE) 
                                                    #line 1709 
                                                    val = 0U; else 
                                                                   #line 1711 
                                                                   return -22;
  #line 1713 
  return t4vf_identify_port(pi->adapter,(unsigned int)pi->viid,val);
}

#line 1734  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf_main.c"
static char stats_strings[23U][32U] = {{(char)'T', (char)'x', (char)'B', (char)'r', (char)'o', (char)'a', (char)'d', (char)'c', (char)'a', (char)'s', (char)'t', (char)'B', (char)'y', (char)'t', (char)'e', (char)'s', (char)' ', (char)' '}, {(char)'T', (char)'x', (char)'B', (char)'r', (char)'o', (char)'a', (char)'d', (char)'c', (char)'a', (char)'s', (char)'t', (char)'F', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)' '}, {(char)'T', (char)'x', (char)'M', (char)'u', (char)'l', (char)'t', (char)'i', (char)'c', (char)'a', (char)'s', (char)'t', (char)'B', (char)'y', (char)'t', (char)'e', (char)'s', (char)' ', (char)' '}, {(char)'T', (char)'x', (char)'M', (char)'u', (char)'l', (char)'t', (char)'i', (char)'c', (char)'a', (char)'s', (char)'t', (char)'F', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)' '}, {(char)'T', (char)'x', (char)'U', (char)'n', (char)'i', (char)'c', (char)'a', (char)'s', (char)'t', (char)'B', (char)'y', (char)'t', (char)'e', (char)'s', (char)' ', (char)' ', (char)' ', (char)' '}, {(char)'T', (char)'x', (char)'U', (char)'n', (char)'i', (char)'c', (char)'a', (char)'s', (char)'t', (char)'F', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)' ', (char)' ', (char)' '}, {(char)'T', (char)'x', (char)'D', (char)'r', (char)'o', (char)'p', (char)'p', (char)'e', (char)'d', (char)'F', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)' ', (char)' ', (char)' '}, {(char)'T', (char)'x', (char)'O', (char)'f', (char)'f', (char)'l', (char)'o', (char)'a', (char)'d', (char)'B', (char)'y', (char)'t', (char)'e', (char)'s', (char)' ', (char)' ', (char)' ', (char)' '}, {(char)'T', (char)'x', (char)'O', (char)'f', (char)'f', (char)'l', (char)'o', (char)'a', (char)'d', (char)'F', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)' ', (char)' ', (char)' '}, {(char)'R', (char)'x', (char)'B', (char)'r', (char)'o', (char)'a', (char)'d', (char)'c', (char)'a', (char)'s', (char)'t', (char)'B', (char)'y', (char)'t', (char)'e', (char)'s', (char)' ', (char)' '}, {(char)'R', (char)'x', (char)'B', (char)'r', (char)'o', (char)'a', (char)'d', (char)'c', (char)'a', (char)'s', (char)'t', (char)'F', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)' '}, {(char)'R', (char)'x', (char)'M', (char)'u', (char)'l', (char)'t', (char)'i', (char)'c', (char)'a', (char)'s', (char)'t', (char)'B', (char)'y', (char)'t', (char)'e', (char)'s', (char)' ', (char)' '}, {(char)'R', (char)'x', (char)'M', (char)'u', (char)'l', (char)'t', (char)'i', (char)'c', (char)'a', (char)'s', (char)'t', (char)'F', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)' '}, {(char)'R', (char)'x', (char)'U', (char)'n', (char)'i', (char)'c', (char)'a', (char)'s', (char)'t', (char)'B', (char)'y', (char)'t', (char)'e', (char)'s', (char)' ', (char)' ', (char)' ', (char)' '}, {(char)'R', (char)'x', (char)'U', (char)'n', (char)'i', (char)'c', (char)'a', (char)'s', (char)'t', (char)'F', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)' ', (char)' ', (char)' '}, {(char)'R', (char)'x', (char)'E', (char)'r', (char)'r', (char)'o', (char)'r', (char)'F', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)' ', (char)' ', (char)' ', (char)' ', (char)' '}, {(char)'T', (char)'S', (char)'O', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' '}, {(char)'T', (char)'x', (char)'C', (char)'s', (char)'u', (char)'m', (char)'O', (char)'f', (char)'f', (char)'l', (char)'o', (char)'a', (char)'d', (char)' ', (char)' ', (char)' ', (char)' ', (char)' '}, {(char)'R', (char)'x', (char)'C', (char)'s', (char)'u', (char)'m', (char)'G', (char)'o', (char)'o', (char)'d', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' '}, {(char)'V', (char)'L', (char)'A', (char)'N', (char)'e', (char)'x', (char)'t', (char)'r', (char)'a', (char)'c', (char)'t', (char)'i', (char)'o', (char)'n', (char)'s', (char)' ', (char)' ', (char)' '}, {(char)'V', (char)'L', (char)'A', (char)'N', (char)'i', (char)'n', (char)'s', (char)'e', (char)'r', (char)'t', (char)'i', (char)'o', (char)'n', (char)'s', (char)' ', (char)' ', (char)' ', (char)' '}, {(char)'G', (char)'R', (char)'O', (char)'P', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' '}, {(char)'G', (char)'R', (char)'O', (char)'M', (char)'e', (char)'r', (char)'g', (char)'e', (char)'d', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' '}};
#line 1771  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf_main.c"
static int cxgb4vf_get_sset_count(struct net_device *dev, int sset)
{
  #line 1773 
  switch (sset) {
    #line 1774 
    case 1: 
            #line 1774 
    ;
    #line 1775 
    return 23;
    #line 1776 
    default: 
             #line 1776 
    ;
    #line 1777 
    return -95;
  }
}

#line 1785  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf_main.c"
static void cxgb4vf_get_strings(struct net_device *dev, u32 sset, u8 *data)
{
  #line 1789 
  switch (sset) {
    #line 1790 
    case (u32)1: 
                 #line 1790 
    ;
    #line 1791 
    memcpy((void *)data,(void *)(& stats_strings),736UL);
    #line 1792 
    break;
  }
  #line 1794 
  return;
}

#line 1800  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf_main.c"
static void collect_sge_port_stats(struct adapter *adapter, struct port_info *pi, struct queue_port_stats *stats)
{
  #line 1806 
  int qs;
  #line 1804 
  struct sge_eth_txq *txq = & adapter->sge.ethtxq[(int)pi->first_qset];
  #line 1805 
  struct sge_eth_rxq *rxq = & adapter->sge.ethrxq[(int)pi->first_qset];
  #line 1808 
  memset((void *)stats,0,56UL);
  #line 1809 
  qs = 0;
  #line 1809 
  while ((int)pi->nqsets > qs) {
    #line 1810 
    stats->tso += (unsigned long long)txq->tso;
    #line 1811 
    stats->tx_csum += (unsigned long long)txq->tx_cso;
    #line 1812 
    stats->rx_csum += (unsigned long long)rxq->stats.rx_cso;
    #line 1813 
    stats->vlan_ex += (unsigned long long)rxq->stats.vlan_ex;
    #line 1814 
    stats->vlan_ins += (unsigned long long)txq->vlan_ins;
    #line 1815 
    stats->lro_pkts += (unsigned long long)rxq->stats.lro_pkts;
    #line 1816 
    stats->lro_merged += (unsigned long long)rxq->stats.lro_merged;
    #line 1809 
    qs ++;
    #line 1809 
    rxq ++;
    #line 1809 
    txq ++;
  }
  #line 1818 
  return;
}

#line 1823  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf_main.c"
static void cxgb4vf_get_ethtool_stats(struct net_device *dev, struct ethtool_stats *stats, u64 *data)
{
  #line 1827 
  struct port_info *pi = netdev2pinfo(dev);
  #line 1828 
  struct adapter *adapter = pi->adapter;
  #line 1829 
  int err = t4vf_get_port_stats(adapter,(int)pi->pidx,(struct t4vf_port_stats *)data);
  #line 1831 
  if (err != 0) 
                #line 1832 
                memset((void *)data,0,128UL);
  #line 1834 
  data += 16UL;
  #line 1835 
  collect_sge_port_stats(adapter,pi,(struct queue_port_stats *)data);
  #line 1836 
  return;
}

#line 1841  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf_main.c"
static int cxgb4vf_get_regs_len(struct net_device *dev)
{
  #line 1843 
  return 1024;
}

#line 1849  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf_main.c"
static void reg_block_dump(struct adapter *adapter, void *regbuf, unsigned int start, unsigned int end)
{
  #line 1852 
  u32 *bp = (u32 *)(regbuf + (unsigned long)start);
  #line 1854 
  while (start <= end) {
    #line 1860 
    if (start == 768U) {
      #line 1861 
      u32 *tmp;
      #line 1861 
      tmp = bp;
      #line 1861 
      bp ++;
      #line 1861 
      *tmp = 65535U;
    }
    else {
      #line 1863 
      u32 *tmp_0;
      #line 1863 
      tmp_0 = bp;
      #line 1863 
      bp ++;
      #line 1863 
      *tmp_0 = t4_read_reg(adapter,start);
    }
    #line 1854 
    start += 4U;
  }
  #line 1864 
  return;
}

#line 1870  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf_main.c"
static void cxgb4vf_get_regs(struct net_device *dev, struct ethtool_regs *regs, void *regbuf)
{
  #line 1892 
  unsigned int tmp_1;
  #line 1874 
  struct adapter *adapter = netdev2adap(dev);
  #line 1876 
  regs->version = mk_adap_vers(adapter);
  #line 1881 
  memset(regbuf,0,1024UL);
  #line 1883 
  reg_block_dump(adapter,regbuf,0U,4U);
  #line 1886 
  reg_block_dump(adapter,regbuf,256U,508U);
  #line 1892 
  if (is_t4(adapter->params.chip) != 0) 
                                        #line 1892 
                                        tmp_1 = 512U; else 
                                                           #line 1892 
                                                           tmp_1 = 520U;
  #line 1892 
  ;
  #line 1892 
  ;
  #line 1892 
  reg_block_dump(adapter,regbuf,512U,tmp_1);
  #line 1896 
  reg_block_dump(adapter,regbuf,768U,772U);
  #line 1900 
  reg_block_dump(adapter,regbuf,576U,636U);
  #line 1901 
  return;
}

#line 1908  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf_main.c"
static void cxgb4vf_get_wol(struct net_device *dev, struct ethtool_wolinfo *wol)
{
  #line 1911 
  wol->supported = 0U;
  #line 1912 
  wol->wolopts = 0U;
  #line 1913 
  memset((void *)(& wol->sopass),0,6UL);
  #line 1914 
  return;
}

#line 1923  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf_main.c"
static struct ethtool_ops cxgb4vf_ethtool_ops = {.get_drvinfo = & cxgb4vf_get_drvinfo, .get_regs_len = & cxgb4vf_get_regs_len, .get_regs = & cxgb4vf_get_regs, .get_wol = & cxgb4vf_get_wol, .get_msglevel = & cxgb4vf_get_msglevel, .set_msglevel = & cxgb4vf_set_msglevel, .get_link = & ethtool_op_get_link, .get_coalesce = & cxgb4vf_get_coalesce, .set_coalesce = & cxgb4vf_set_coalesce, .get_ringparam = & cxgb4vf_get_ringparam, .set_ringparam = & cxgb4vf_set_ringparam, .get_pauseparam = & cxgb4vf_get_pauseparam, .get_strings = & cxgb4vf_get_strings, .set_phys_id = & cxgb4vf_phys_id, .get_ethtool_stats = & cxgb4vf_get_ethtool_stats, .get_sset_count = & cxgb4vf_get_sset_count, .get_link_ksettings = & cxgb4vf_get_link_ksettings, .get_fecparam = & cxgb4vf_get_fecparam};
#line 1960  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf_main.c"
static int mboxlog_show(struct seq_file *seq, void *v)
{
  #line 1964 
  struct mbox_cmd *entry;
  #line 1965 
  int entry_idx;
  #line 1965 
  int i;
  #line 1962 
  struct adapter *adapter = (struct adapter *)seq->private;
  #line 1963 
  struct mbox_cmd_log *log = adapter->mbox_log;
  #line 1967 
  if (v == (void *)1) {
    #line 1968 
    seq_printf(seq,(char *)"%10s  %15s  %5s  %5s  %s\n",(char *)"Seq#",(char *)"Tstamp",(char *)"Atime",(char *)"Etime",(char *)"Command/Reply");
    #line 1972 
    return 0;
  }
  #line 1975 
  entry_idx = (int)(((long)log->cursor + (long)v) + (long)4294967294U);
  #line 1976 
  if (log->size <= (unsigned int)entry_idx) 
                                            #line 1977 
                                            entry_idx = (int)((unsigned int)entry_idx - log->size);
  #line 1978 
  entry = mbox_cmd_log_entry(log,(unsigned int)entry_idx);
  #line 1981 
  if (entry->timestamp == 0ULL) 
                                #line 1982 
                                return 0;
  #line 1984 
  seq_printf(seq,(char *)"%10u  %15llu  %5d  %5d",entry->seqno,entry->timestamp,(int)entry->access,(int)entry->execute);
  #line 1987 
  i = 0;
  #line 1987 
  while (i <= 7) {
    {
      #line 1988 
      u64 flit = entry->cmd[i];
      #line 1989 
      u32 hi = (unsigned int)(flit >> 32);
      #line 1990 
      u32 lo = (unsigned int)flit;
      #line 1992 
      seq_printf(seq,(char *)"  %08x %08x",hi,lo);
    }
    #line 1987 
    i ++;
  }
  #line 1994 
  seq_puts(seq,(char *)"\n");
  #line 1995 
  return 0;
}

#line 1998  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf_main.c"
__inline static void *mboxlog_get_idx(struct seq_file *seq, loff_t pos)
{
  #line 2003 
  void *tmp;
  #line 2000 
  struct adapter *adapter = (struct adapter *)seq->private;
  #line 2001 
  struct mbox_cmd_log *log = adapter->mbox_log;
  #line 2003 
  if ((long long)log->size >= pos) 
                                   #line 2003 
                                   tmp = (void *)(pos + 1LL); else 
                                                                   #line 2003 
                                                                   tmp = (void *)0;
  #line 2003 
  return tmp;
}

#line 2006  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf_main.c"
static void *mboxlog_start(struct seq_file *seq, loff_t *pos)
{
  #line 2008 
  void *tmp_0;
  #line 2008 
  if (*pos != 0LL) 
                   #line 2008 
                   tmp_0 = mboxlog_get_idx(seq,*pos); else 
                                                           #line 2008 
                                                           tmp_0 = (void *)1;
  #line 2008 
  return tmp_0;
}

#line 2011  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf_main.c"
static void *mboxlog_next(struct seq_file *seq, void *v, loff_t *pos)
{
  #line 2013 
  (*pos) ++;
  #line 2014 
  return mboxlog_get_idx(seq,*pos);
}

#line 2017  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf_main.c"
static void mboxlog_stop(struct seq_file *seq, void *v)
{
  #line 2019 
  return;
}

#line 2021  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf_main.c"
static struct seq_operations mboxlog_seq_ops = {.start = & mboxlog_start, .stop = & mboxlog_stop, .next = & mboxlog_next, .show = & mboxlog_show};
#line 2028  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf_main.c"
static int mboxlog_open(struct inode *inode, struct file *file)
{
  #line 2030 
  int res = cif_seq_open(file,& mboxlog_seq_ops);
  #line 2032 
  if (res == 0) {
    #line 2033 
    struct seq_file *seq = (struct seq_file *)file->private_data;
    #line 2035 
    seq->private = inode->i_private;
  }
  #line 2037 
  return res;
}

#line 2040  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf_main.c"
static struct file_operations mboxlog_fops = {.owner = & __this_module, .llseek = & seq_lseek, .read = & seq_read, .open = & mboxlog_open, .release = & seq_release};
#line 2053  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf_main.c"
static int sge_qinfo_show(struct seq_file *seq, void *v)
{
  #line 2057 
  int qs;
  #line 2055 
  struct adapter *adapter = (struct adapter *)seq->private;
  #line 2056 
  int eth_entries = ((int)adapter->sge.ethqsets + 3) / 4;
  #line 2057 
  int r = (int)((long)v + (long)4294967295U);
  #line 2059 
  if (r != 0) 
              #line 2060 
              seq_putc(seq,(char)10);
  #line 2073 
  if (r < eth_entries) {
    #line 2076 
    int __UNIQUE_ID___x439;
    #line 2076 
    int tmp;
    #line 2074 
    struct sge_eth_rxq *rxq = & adapter->sge.ethrxq[r * 4];
    #line 2075 
    struct sge_eth_txq *txq = & adapter->sge.ethtxq[r * 4];
    {
      #line 2076 
      __UNIQUE_ID___x439 = 4;
      #line 2076 
      int __UNIQUE_ID___y440 = (int)adapter->sge.ethqsets - r * 4;
      #line 2076 
      if (__UNIQUE_ID___x439 < __UNIQUE_ID___y440) 
                                                   #line 2076 
                                                   tmp = __UNIQUE_ID___x439; else 
                                                                    #line 2076 
                                                                    tmp = __UNIQUE_ID___y440;
      }
    #line 2076 
    int n = tmp;
    #line 2078 
    seq_printf(seq,(char *)"%-12s",(char *)"QType:");
    #line 2078 
    qs = 0;
    #line 2078 
    while (qs < n) {
      #line 2078 
      seq_printf(seq,(char *)" %16",(char *)"Ethernet");
      #line 2078 
      qs ++;
    }
    #line 2078 
    seq_putc(seq,(char)10);
    #line 2079 
    seq_printf(seq,(char *)"%-12s",(char *)"Interface:");
    #line 2079 
    qs = 0;
    #line 2079 
    while (qs < n) {
      #line 2079 
      char *tmp_1;
      #line 2079 
      if ((rxq + (unsigned long)qs)->rspq.netdev != (struct net_device *)0) 
        #line 2079 
        tmp_1 = (char *)(& ((rxq + (unsigned long)qs)->rspq.netdev)->name); else 
                                                                    #line 2079 
                                                                    tmp_1 = (char *)"N/A";
      #line 2079 
      ;
      #line 2079 
      seq_printf(seq,(char *)" %16",tmp_1);
      #line 2079 
      qs ++;
    }
    #line 2079 
    seq_putc(seq,(char)10);
    #line 2083 
    seq_printf(seq,(char *)"%-12s",(char *)"Port:");
    #line 2083 
    qs = 0;
    #line 2083 
    while (qs < n) {
      #line 2083 
      int tmp_3;
      #line 2083 
      if ((rxq + (unsigned long)qs)->rspq.netdev != (struct net_device *)0) {
        #line 2083 
        tmp_3 = (int)((struct port_info *)netdev_priv((rxq + (unsigned long)qs)->rspq.netdev))->port_id;
      }
      else 
           #line 2083 
           tmp_3 = -1;
      #line 2083 
      ;
      #line 2083 
      seq_printf(seq,(char *)" %16",tmp_3);
      #line 2083 
      qs ++;
    }
    #line 2083 
    seq_putc(seq,(char)10);
    #line 2088 
    seq_printf(seq,(char *)"%-12s",(char *)"TxQ ID:");
    #line 2088 
    qs = 0;
    #line 2088 
    while (qs < n) {
      #line 2088 
      seq_printf(seq,(char *)" %16",(txq + (unsigned long)qs)->q.abs_id);
      #line 2088 
      qs ++;
    }
    #line 2088 
    seq_putc(seq,(char)10);
    #line 2089 
    seq_printf(seq,(char *)"%-12s",(char *)"TxQ size:");
    #line 2089 
    qs = 0;
    #line 2089 
    while (qs < n) {
      #line 2089 
      seq_printf(seq,(char *)" %16",(txq + (unsigned long)qs)->q.size);
      #line 2089 
      qs ++;
    }
    #line 2089 
    seq_putc(seq,(char)10);
    #line 2090 
    seq_printf(seq,(char *)"%-12s",(char *)"TxQ inuse:");
    #line 2090 
    qs = 0;
    #line 2090 
    while (qs < n) {
      #line 2090 
      seq_printf(seq,(char *)" %16",(txq + (unsigned long)qs)->q.in_use);
      #line 2090 
      qs ++;
    }
    #line 2090 
    seq_putc(seq,(char)10);
    #line 2091 
    seq_printf(seq,(char *)"%-12s",(char *)"TxQ PIdx:");
    #line 2091 
    qs = 0;
    #line 2091 
    while (qs < n) {
      #line 2091 
      seq_printf(seq,(char *)" %16",(txq + (unsigned long)qs)->q.pidx);
      #line 2091 
      qs ++;
    }
    #line 2091 
    seq_putc(seq,(char)10);
    #line 2092 
    seq_printf(seq,(char *)"%-12s",(char *)"TxQ CIdx:");
    #line 2092 
    qs = 0;
    #line 2092 
    while (qs < n) {
      #line 2092 
      seq_printf(seq,(char *)" %16",(txq + (unsigned long)qs)->q.cidx);
      #line 2092 
      qs ++;
    }
    #line 2092 
    seq_putc(seq,(char)10);
    #line 2093 
    seq_printf(seq,(char *)"%-12s",(char *)"RspQ ID:");
    #line 2093 
    qs = 0;
    #line 2093 
    while (qs < n) {
      #line 2093 
      seq_printf(seq,(char *)" %16",(int)(rxq + (unsigned long)qs)->rspq.abs_id);
      #line 2093 
      qs ++;
    }
    #line 2093 
    seq_putc(seq,(char)10);
    #line 2094 
    seq_printf(seq,(char *)"%-12s",(char *)"RspQ size:");
    #line 2094 
    qs = 0;
    #line 2094 
    while (qs < n) {
      #line 2094 
      seq_printf(seq,(char *)" %16",(rxq + (unsigned long)qs)->rspq.size);
      #line 2094 
      qs ++;
    }
    #line 2094 
    seq_putc(seq,(char)10);
    #line 2095 
    seq_printf(seq,(char *)"%-12s",(char *)"RspQE size:");
    #line 2095 
    qs = 0;
    #line 2095 
    while (qs < n) {
      #line 2095 
      seq_printf(seq,(char *)" %16",(rxq + (unsigned long)qs)->rspq.iqe_len);
      #line 2095 
      qs ++;
    }
    #line 2095 
    seq_putc(seq,(char)10);
    #line 2096 
    seq_printf(seq,(char *)"%-12s",(char *)"Intr delay:");
    #line 2096 
    qs = 0;
    #line 2096 
    while (qs < n) {
      #line 2096 
      ;
      #line 2096 
      seq_printf(seq,(char *)" %16",qtimer_val(adapter,& (rxq + (unsigned long)qs)->rspq));
      #line 2096 
      qs ++;
    }
    #line 2096 
    seq_putc(seq,(char)10);
    #line 2097 
    seq_printf(seq,(char *)"%-12s",(char *)"Intr pktcnt:");
    #line 2097 
    qs = 0;
    #line 2097 
    while (qs < n) {
      #line 2097 
      seq_printf(seq,(char *)" %16",(int)adapter->sge.counter_val[(int)(rxq + (unsigned long)qs)->rspq.pktcnt_idx]);
      #line 2097 
      qs ++;
    }
    #line 2097 
    seq_putc(seq,(char)10);
    #line 2099 
    seq_printf(seq,(char *)"%-12s",(char *)"RspQ CIdx:");
    #line 2099 
    qs = 0;
    #line 2099 
    while (qs < n) {
      #line 2099 
      seq_printf(seq,(char *)" %16",(rxq + (unsigned long)qs)->rspq.cidx);
      #line 2099 
      qs ++;
    }
    #line 2099 
    seq_putc(seq,(char)10);
    #line 2100 
    seq_printf(seq,(char *)"%-12s",(char *)"RspQ Gen:");
    #line 2100 
    qs = 0;
    #line 2100 
    while (qs < n) {
      #line 2100 
      seq_printf(seq,(char *)" %16",(int)(rxq + (unsigned long)qs)->rspq.gen);
      #line 2100 
      qs ++;
    }
    #line 2100 
    seq_putc(seq,(char)10);
    #line 2101 
    seq_printf(seq,(char *)"%-12s",(char *)"FL ID:");
    #line 2101 
    qs = 0;
    #line 2101 
    while (qs < n) {
      #line 2101 
      seq_printf(seq,(char *)" %16",(rxq + (unsigned long)qs)->fl.abs_id);
      #line 2101 
      qs ++;
    }
    #line 2101 
    seq_putc(seq,(char)10);
    #line 2102 
    seq_printf(seq,(char *)"%-12s",(char *)"FL size:");
    #line 2102 
    qs = 0;
    #line 2102 
    while (qs < n) {
      #line 2102 
      seq_printf(seq,(char *)" %16",(rxq + (unsigned long)qs)->fl.size + 4294967288U);
      #line 2102 
      qs ++;
    }
    #line 2102 
    seq_putc(seq,(char)10);
    #line 2103 
    seq_printf(seq,(char *)"%-12s",(char *)"FL avail:");
    #line 2103 
    qs = 0;
    #line 2103 
    while (qs < n) {
      #line 2103 
      seq_printf(seq,(char *)" %16",(rxq + (unsigned long)qs)->fl.avail);
      #line 2103 
      qs ++;
    }
    #line 2103 
    seq_putc(seq,(char)10);
    #line 2104 
    seq_printf(seq,(char *)"%-12s",(char *)"FL PIdx:");
    #line 2104 
    qs = 0;
    #line 2104 
    while (qs < n) {
      #line 2104 
      seq_printf(seq,(char *)" %16",(rxq + (unsigned long)qs)->fl.pidx);
      #line 2104 
      qs ++;
    }
    #line 2104 
    seq_putc(seq,(char)10);
    #line 2105 
    seq_printf(seq,(char *)"%-12s",(char *)"FL CIdx:");
    #line 2105 
    qs = 0;
    #line 2105 
    while (qs < n) {
      #line 2105 
      seq_printf(seq,(char *)" %16",(rxq + (unsigned long)qs)->fl.cidx);
      #line 2105 
      qs ++;
    }
    #line 2105 
    seq_putc(seq,(char)10);
    #line 2106 
    return 0;
  }
  #line 2109 
  r -= eth_entries;
  #line 2110 
  if (r == 0) {
    #line 2111 
    struct sge_rspq *evtq = & adapter->sge.fw_evtq;
    #line 2113 
    seq_printf(seq,(char *)"%-12s %16s\n",(char *)"QType:",(char *)"FW event queue");
    #line 2114 
    seq_printf(seq,(char *)"%-12s %16u\n",(char *)"RspQ ID:",(int)evtq->abs_id);
    #line 2115 
    ;
    #line 2115 
    seq_printf(seq,(char *)"%-12s %16u\n",(char *)"Intr delay:",qtimer_val(adapter,evtq));
    #line 2117 
    seq_printf(seq,(char *)"%-12s %16u\n",(char *)"Intr pktcnt:",(int)adapter->sge.counter_val[(int)evtq->pktcnt_idx]);
    #line 2119 
    seq_printf(seq,(char *)"%-12s %16u\n",(char *)"RspQ Cidx:",evtq->cidx);
    #line 2120 
    seq_printf(seq,(char *)"%-12s %16u\n",(char *)"RspQ Gen:",(int)evtq->gen);
  }
  else 
    #line 2121 
    if (r == 1) {
      #line 2122 
      struct sge_rspq *intrq = & adapter->sge.intrq;
      #line 2124 
      seq_printf(seq,(char *)"%-12s %16s\n",(char *)"QType:",(char *)"Interrupt Queue");
      #line 2125 
      seq_printf(seq,(char *)"%-12s %16u\n",(char *)"RspQ ID:",(int)intrq->abs_id);
      #line 2126 
      ;
      #line 2126 
      seq_printf(seq,(char *)"%-12s %16u\n",(char *)"Intr delay:",qtimer_val(adapter,intrq));
      #line 2128 
      seq_printf(seq,(char *)"%-12s %16u\n",(char *)"Intr pktcnt:",(int)adapter->sge.counter_val[(int)intrq->pktcnt_idx]);
      #line 2130 
      seq_printf(seq,(char *)"%-12s %16u\n",(char *)"RspQ Cidx:",intrq->cidx);
      #line 2131 
      seq_printf(seq,(char *)"%-12s %16u\n",(char *)"RspQ Gen:",(int)intrq->gen);
    }
  #line 2139 
  return 0;
}

#line 2150  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf_main.c"
static int sge_queue_entries(struct adapter *adapter)
{
  #line 2152 
  return (((int)adapter->sge.ethqsets + 3) / 4 + 1) + ((adapter->flags & 2UL) != 0UL);
}

#line 2156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf_main.c"
static void *sge_queue_start(struct seq_file *seq, loff_t *pos)
{
  #line 2160 
  void *tmp_0;
  #line 2158 
  int entries = sge_queue_entries((struct adapter *)seq->private);
  #line 2160 
  if (*pos < (long long)entries) 
                                 #line 2160 
                                 tmp_0 = (void *)((unsigned long)*pos + 1UL); else 
                                                                    #line 2160 
                                                                    tmp_0 = (void *)0;
  #line 2160 
  return tmp_0;
}

#line 2163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf_main.c"
static void sge_queue_stop(struct seq_file *seq, void *v)
{
  #line 2165 
  return;
}

#line 2167  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf_main.c"
static void *sge_queue_next(struct seq_file *seq, void *v, loff_t *pos)
{
  #line 2172 
  void *tmp_0;
  #line 2169 
  int entries = sge_queue_entries((struct adapter *)seq->private);
  #line 2171 
  (*pos) ++;
  #line 2172 
  if (*pos < (long long)entries) 
                                 #line 2172 
                                 tmp_0 = (void *)((unsigned long)*pos + 1UL); else 
                                                                    #line 2172 
                                                                    tmp_0 = (void *)0;
  #line 2172 
  return tmp_0;
}

#line 2175  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf_main.c"
static struct seq_operations sge_qinfo_seq_ops = {.start = & sge_queue_start, .stop = & sge_queue_stop, .next = & sge_queue_next, .show = & sge_qinfo_show};
#line 2182  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf_main.c"
static int sge_qinfo_open(struct inode *inode, struct file *file)
{
  #line 2184 
  int res = cif_seq_open(file,& sge_qinfo_seq_ops);
  #line 2186 
  if (res == 0) {
    #line 2187 
    struct seq_file *seq = (struct seq_file *)file->private_data;
    #line 2188 
    seq->private = inode->i_private;
  }
  #line 2190 
  return res;
}

#line 2193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf_main.c"
static struct file_operations sge_qinfo_debugfs_fops = {.owner = & __this_module, .llseek = & seq_lseek, .read = & seq_read, .open = & sge_qinfo_open, .release = & seq_release};
#line 2206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf_main.c"
static int sge_qstats_show(struct seq_file *seq, void *v)
{
  #line 2210 
  int qs;
  #line 2208 
  struct adapter *adapter = (struct adapter *)seq->private;
  #line 2209 
  int eth_entries = ((int)adapter->sge.ethqsets + 3) / 4;
  #line 2210 
  int r = (int)((long)v + (long)4294967295U);
  #line 2212 
  if (r != 0) 
              #line 2213 
              seq_putc(seq,(char)10);
  #line 2230 
  if (r < eth_entries) {
    #line 2233 
    int __UNIQUE_ID___x441;
    #line 2233 
    int tmp;
    #line 2231 
    struct sge_eth_rxq *rxq = & adapter->sge.ethrxq[r * 4];
    #line 2232 
    struct sge_eth_txq *txq = & adapter->sge.ethtxq[r * 4];
    {
      #line 2233 
      __UNIQUE_ID___x441 = 4;
      #line 2233 
      int __UNIQUE_ID___y442 = (int)adapter->sge.ethqsets - r * 4;
      #line 2233 
      if (__UNIQUE_ID___x441 < __UNIQUE_ID___y442) 
                                                   #line 2233 
                                                   tmp = __UNIQUE_ID___x441; else 
                                                                    #line 2233 
                                                                    tmp = __UNIQUE_ID___y442;
      }
    #line 2233 
    int n = tmp;
    #line 2235 
    seq_printf(seq,(char *)"%-16s",(char *)"QType:");
    #line 2235 
    qs = 0;
    #line 2235 
    while (qs < n) {
      #line 2235 
      seq_printf(seq,(char *)" %8",(char *)"Ethernet");
      #line 2235 
      qs ++;
    }
    #line 2235 
    seq_putc(seq,(char)10);
    #line 2236 
    seq_printf(seq,(char *)"%-16s",(char *)"Interface:");
    #line 2236 
    qs = 0;
    #line 2236 
    while (qs < n) {
      #line 2236 
      char *tmp_1;
      #line 2236 
      if ((rxq + (unsigned long)qs)->rspq.netdev != (struct net_device *)0) 
        #line 2236 
        tmp_1 = (char *)(& ((rxq + (unsigned long)qs)->rspq.netdev)->name); else 
                                                                    #line 2236 
                                                                    tmp_1 = (char *)"N/A";
      #line 2236 
      ;
      #line 2236 
      seq_printf(seq,(char *)" %8",tmp_1);
      #line 2236 
      qs ++;
    }
    #line 2236 
    seq_putc(seq,(char)10);
    #line 2240 
    seq_printf(seq,(char *)"%-16s",(char *)"RspQNullInts:");
    #line 2240 
    qs = 0;
    #line 2240 
    while (qs < n) {
      #line 2240 
      seq_printf(seq,(char *)" %8",(rxq + (unsigned long)qs)->rspq.unhandled_irqs);
      #line 2240 
      qs ++;
    }
    #line 2240 
    seq_putc(seq,(char)10);
    #line 2241 
    seq_printf(seq,(char *)"%-16s",(char *)"RxPackets:");
    #line 2241 
    qs = 0;
    #line 2241 
    while (qs < n) {
      #line 2241 
      seq_printf(seq,(char *)" %8",(rxq + (unsigned long)qs)->stats.pkts);
      #line 2241 
      qs ++;
    }
    #line 2241 
    seq_putc(seq,(char)10);
    #line 2242 
    seq_printf(seq,(char *)"%-16s",(char *)"RxCSO:");
    #line 2242 
    qs = 0;
    #line 2242 
    while (qs < n) {
      #line 2242 
      seq_printf(seq,(char *)" %8",(rxq + (unsigned long)qs)->stats.rx_cso);
      #line 2242 
      qs ++;
    }
    #line 2242 
    seq_putc(seq,(char)10);
    #line 2243 
    seq_printf(seq,(char *)"%-16s",(char *)"VLANxtract:");
    #line 2243 
    qs = 0;
    #line 2243 
    while (qs < n) {
      #line 2243 
      seq_printf(seq,(char *)" %8",(rxq + (unsigned long)qs)->stats.vlan_ex);
      #line 2243 
      qs ++;
    }
    #line 2243 
    seq_putc(seq,(char)10);
    #line 2244 
    seq_printf(seq,(char *)"%-16s",(char *)"LROmerged:");
    #line 2244 
    qs = 0;
    #line 2244 
    while (qs < n) {
      #line 2244 
      seq_printf(seq,(char *)" %8",(rxq + (unsigned long)qs)->stats.lro_merged);
      #line 2244 
      qs ++;
    }
    #line 2244 
    seq_putc(seq,(char)10);
    #line 2245 
    seq_printf(seq,(char *)"%-16s",(char *)"LROpackets:");
    #line 2245 
    qs = 0;
    #line 2245 
    while (qs < n) {
      #line 2245 
      seq_printf(seq,(char *)" %8",(rxq + (unsigned long)qs)->stats.lro_pkts);
      #line 2245 
      qs ++;
    }
    #line 2245 
    seq_putc(seq,(char)10);
    #line 2246 
    seq_printf(seq,(char *)"%-16s",(char *)"RxDrops:");
    #line 2246 
    qs = 0;
    #line 2246 
    while (qs < n) {
      #line 2246 
      seq_printf(seq,(char *)" %8",(rxq + (unsigned long)qs)->stats.rx_drops);
      #line 2246 
      qs ++;
    }
    #line 2246 
    seq_putc(seq,(char)10);
    #line 2247 
    seq_printf(seq,(char *)"%-16s",(char *)"TSO:");
    #line 2247 
    qs = 0;
    #line 2247 
    while (qs < n) {
      #line 2247 
      seq_printf(seq,(char *)" %8",(txq + (unsigned long)qs)->tso);
      #line 2247 
      qs ++;
    }
    #line 2247 
    seq_putc(seq,(char)10);
    #line 2248 
    seq_printf(seq,(char *)"%-16s",(char *)"TxCSO:");
    #line 2248 
    qs = 0;
    #line 2248 
    while (qs < n) {
      #line 2248 
      seq_printf(seq,(char *)" %8",(txq + (unsigned long)qs)->tx_cso);
      #line 2248 
      qs ++;
    }
    #line 2248 
    seq_putc(seq,(char)10);
    #line 2249 
    seq_printf(seq,(char *)"%-16s",(char *)"VLANins:");
    #line 2249 
    qs = 0;
    #line 2249 
    while (qs < n) {
      #line 2249 
      seq_printf(seq,(char *)" %8",(txq + (unsigned long)qs)->vlan_ins);
      #line 2249 
      qs ++;
    }
    #line 2249 
    seq_putc(seq,(char)10);
    #line 2250 
    seq_printf(seq,(char *)"%-16s",(char *)"TxQFull:");
    #line 2250 
    qs = 0;
    #line 2250 
    while (qs < n) {
      #line 2250 
      seq_printf(seq,(char *)" %8",(txq + (unsigned long)qs)->q.stops);
      #line 2250 
      qs ++;
    }
    #line 2250 
    seq_putc(seq,(char)10);
    #line 2251 
    seq_printf(seq,(char *)"%-16s",(char *)"TxQRestarts:");
    #line 2251 
    qs = 0;
    #line 2251 
    while (qs < n) {
      #line 2251 
      seq_printf(seq,(char *)" %8",(txq + (unsigned long)qs)->q.restarts);
      #line 2251 
      qs ++;
    }
    #line 2251 
    seq_putc(seq,(char)10);
    #line 2252 
    seq_printf(seq,(char *)"%-16s",(char *)"TxMapErr:");
    #line 2252 
    qs = 0;
    #line 2252 
    while (qs < n) {
      #line 2252 
      seq_printf(seq,(char *)" %8",(txq + (unsigned long)qs)->mapping_err);
      #line 2252 
      qs ++;
    }
    #line 2252 
    seq_putc(seq,(char)10);
    #line 2253 
    seq_printf(seq,(char *)"%-16s",(char *)"FLAllocErr:");
    #line 2253 
    qs = 0;
    #line 2253 
    while (qs < n) {
      #line 2253 
      seq_printf(seq,(char *)" %8",(rxq + (unsigned long)qs)->fl.alloc_failed);
      #line 2253 
      qs ++;
    }
    #line 2253 
    seq_putc(seq,(char)10);
    #line 2254 
    seq_printf(seq,(char *)"%-16s",(char *)"FLLrgAlcErr:");
    #line 2254 
    qs = 0;
    #line 2254 
    while (qs < n) {
      #line 2254 
      seq_printf(seq,(char *)" %8",(rxq + (unsigned long)qs)->fl.large_alloc_failed);
      #line 2254 
      qs ++;
    }
    #line 2254 
    seq_putc(seq,(char)10);
    #line 2255 
    seq_printf(seq,(char *)"%-16s",(char *)"FLStarving:");
    #line 2255 
    qs = 0;
    #line 2255 
    while (qs < n) {
      #line 2255 
      seq_printf(seq,(char *)" %8",(rxq + (unsigned long)qs)->fl.starving);
      #line 2255 
      qs ++;
    }
    #line 2255 
    seq_putc(seq,(char)10);
    #line 2256 
    return 0;
  }
  #line 2259 
  r -= eth_entries;
  #line 2260 
  if (r == 0) {
    #line 2261 
    struct sge_rspq *evtq = & adapter->sge.fw_evtq;
    #line 2263 
    seq_printf(seq,(char *)"%-8s %16s\n",(char *)"QType:",(char *)"FW event queue");
    #line 2264 
    seq_printf(seq,(char *)"%-16s %8u\n",(char *)"RspQNullInts:",evtq->unhandled_irqs);
    #line 2266 
    seq_printf(seq,(char *)"%-16s %8u\n",(char *)"RspQ CIdx:",evtq->cidx);
    #line 2267 
    seq_printf(seq,(char *)"%-16s %8u\n",(char *)"RspQ Gen:",(int)evtq->gen);
  }
  else 
    #line 2268 
    if (r == 1) {
      #line 2269 
      struct sge_rspq *intrq = & adapter->sge.intrq;
      #line 2271 
      seq_printf(seq,(char *)"%-8s %16s\n",(char *)"QType:",(char *)"Interrupt Queue");
      #line 2272 
      seq_printf(seq,(char *)"%-16s %8u\n",(char *)"RspQNullInts:",intrq->unhandled_irqs);
      #line 2274 
      seq_printf(seq,(char *)"%-16s %8u\n",(char *)"RspQ CIdx:",intrq->cidx);
      #line 2275 
      seq_printf(seq,(char *)"%-16s %8u\n",(char *)"RspQ Gen:",(int)intrq->gen);
    }
  #line 2285 
  return 0;
}

#line 2296  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf_main.c"
static int sge_qstats_entries(struct adapter *adapter)
{
  #line 2298 
  return (((int)adapter->sge.ethqsets + 3) / 4 + 1) + ((adapter->flags & 2UL) != 0UL);
}

#line 2302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf_main.c"
static void *sge_qstats_start(struct seq_file *seq, loff_t *pos)
{
  #line 2306 
  void *tmp_0;
  #line 2304 
  int entries = sge_qstats_entries((struct adapter *)seq->private);
  #line 2306 
  if (*pos < (long long)entries) 
                                 #line 2306 
                                 tmp_0 = (void *)((unsigned long)*pos + 1UL); else 
                                                                    #line 2306 
                                                                    tmp_0 = (void *)0;
  #line 2306 
  return tmp_0;
}

#line 2309  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf_main.c"
static void sge_qstats_stop(struct seq_file *seq, void *v)
{
  #line 2311 
  return;
}

#line 2313  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf_main.c"
static void *sge_qstats_next(struct seq_file *seq, void *v, loff_t *pos)
{
  #line 2318 
  void *tmp_0;
  #line 2315 
  int entries = sge_qstats_entries((struct adapter *)seq->private);
  #line 2317 
  (*pos) ++;
  #line 2318 
  if (*pos < (long long)entries) 
                                 #line 2318 
                                 tmp_0 = (void *)((unsigned long)*pos + 1UL); else 
                                                                    #line 2318 
                                                                    tmp_0 = (void *)0;
  #line 2318 
  return tmp_0;
}

#line 2321  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf_main.c"
static struct seq_operations sge_qstats_seq_ops = {.start = & sge_qstats_start, .stop = & sge_qstats_stop, .next = & sge_qstats_next, .show = & sge_qstats_show};
#line 2328  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf_main.c"
static int sge_qstats_open(struct inode *inode, struct file *file)
{
  #line 2330 
  int res = cif_seq_open(file,& sge_qstats_seq_ops);
  #line 2332 
  if (res == 0) {
    #line 2333 
    struct seq_file *seq = (struct seq_file *)file->private_data;
    #line 2334 
    seq->private = inode->i_private;
  }
  #line 2336 
  return res;
}

#line 2339  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf_main.c"
static struct file_operations sge_qstats_proc_fops = {.owner = & __this_module, .llseek = & seq_lseek, .read = & seq_read, .open = & sge_qstats_open, .release = & seq_release};
#line 2350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf_main.c"
static int resources_show(struct seq_file *seq, void *v)
{
  #line 2352 
  struct adapter *adapter = (struct adapter *)seq->private;
  #line 2353 
  struct vf_resources *vfres = & adapter->params.vfres;
  #line 2359 
  seq_printf(seq,(char *)"%-60s ",(char *)"Virtual Interfaces",vfres->nvi);
  #line 2360 
  seq_printf(seq,(char *)"%-60s ",(char *)"Egress Queues",vfres->neq);
  #line 2361 
  seq_printf(seq,(char *)"%-60s ",(char *)"Ethernet Control",vfres->nethctrl);
  #line 2362 
  seq_printf(seq,(char *)"%-60s ",(char *)"Ingress Queues/w Free Lists/Interrupts",vfres->niqflint);
  #line 2363 
  seq_printf(seq,(char *)"%-60s ",(char *)"Ingress Queues",vfres->niq);
  #line 2364 
  seq_printf(seq,(char *)"%-60s ",(char *)"Traffic Class",vfres->tc);
  #line 2365 
  seq_printf(seq,(char *)"%-60s ",(char *)"Port Access Rights Mask",vfres->pmask);
  #line 2366 
  seq_printf(seq,(char *)"%-60s ",(char *)"MAC Address Filters",vfres->nexactf);
  #line 2367 
  seq_printf(seq,(char *)"%-60s ",(char *)"Firmware Command Read Capabilities",vfres->r_caps);
  #line 2368 
  seq_printf(seq,(char *)"%-60s ",(char *)"Firmware Command Write/Execute Capabilities",vfres->wx_caps);
  #line 2372 
  return 0;
}

#line 2374  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf_main.c"
static int resources_open(struct inode *inode, struct file *file)
{
  #line 2374 
  return single_open(file,& resources_show,inode->i_private);
}

#line 2374  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf_main.c"
static struct file_operations resources_fops = {.owner = & __this_module, .llseek = & seq_lseek, .read = & seq_read, .open = & resources_open, .release = & single_release};
#line 2379  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf_main.c"
static int interfaces_show(struct seq_file *seq, void *v)
{
  #line 2381 
  if (v == (void *)1) 
                      #line 2382 
                      seq_puts(seq,(char *)"Interface  Port   VIID\n");
  else {
    #line 2384 
    struct adapter *adapter = (struct adapter *)seq->private;
    #line 2385 
    int pidx = (int)((long)v + (long)4294967294U);
    #line 2386 
    struct net_device *dev = adapter->port[pidx];
    #line 2387 
    struct port_info *pi = netdev_priv(dev);
    #line 2389 
    seq_printf(seq,(char *)"%9s  %4d  %#5x\n",(char *)(& dev->name),(int)pi->port_id,(int)pi->viid);
  }
  #line 2392 
  return 0;
}

#line 2395  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf_main.c"
__inline static void *interfaces_get_idx(struct adapter *adapter, loff_t pos)
{
  #line 2397 
  void *tmp;
  #line 2397 
  if ((long long)adapter->params.nports >= pos) 
                                                #line 2397 
                                                tmp = (void *)(pos + 1LL); else 
                                                                    #line 2397 
                                                                    tmp = (void *)0;
  #line 2399 
  return tmp;
}

#line 2402  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf_main.c"
static void *interfaces_start(struct seq_file *seq, loff_t *pos)
{
  #line 2404 
  void *tmp_0;
  #line 2404 
  if (*pos != 0LL) 
                   #line 2405 
                   tmp_0 = interfaces_get_idx((struct adapter *)seq->private,*pos); else 
                                                                    #line 2404 
                                                                    tmp_0 = (void *)1;
  #line 2406 
  return tmp_0;
}

#line 2409  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf_main.c"
static void *interfaces_next(struct seq_file *seq, void *v, loff_t *pos)
{
  #line 2411 
  (*pos) ++;
  #line 2412 
  return interfaces_get_idx((struct adapter *)seq->private,*pos);
}

#line 2415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf_main.c"
static void interfaces_stop(struct seq_file *seq, void *v)
{
  #line 2417 
  return;
}

#line 2419  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf_main.c"
static struct seq_operations interfaces_seq_ops = {.start = & interfaces_start, .stop = & interfaces_stop, .next = & interfaces_next, .show = & interfaces_show};
#line 2426  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf_main.c"
static int interfaces_open(struct inode *inode, struct file *file)
{
  #line 2428 
  int res = cif_seq_open(file,& interfaces_seq_ops);
  #line 2430 
  if (res == 0) {
    #line 2431 
    struct seq_file *seq = (struct seq_file *)file->private_data;
    #line 2432 
    seq->private = inode->i_private;
  }
  #line 2434 
  return res;
}

#line 2437  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf_main.c"
static struct file_operations interfaces_proc_fops = {.owner = & __this_module, .llseek = & seq_lseek, .read = & seq_read, .open = & interfaces_open, .release = & seq_release};
#line 2454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf_main.c"
static struct cxgb4vf_debugfs_entry debugfs_files[5U] = {{.name = (char *)"mboxlog", .mode = (unsigned short)292U, .fops = & mboxlog_fops}, {.name = (char *)"sge_qinfo", .mode = (unsigned short)292U, .fops = & sge_qinfo_debugfs_fops}, {.name = (char *)"sge_qstats", .mode = (unsigned short)292U, .fops = & sge_qstats_proc_fops}, {.name = (char *)"resources", .mode = (unsigned short)292U, .fops = & resources_fops}, {.name = (char *)"interfaces", .mode = (unsigned short)292U, .fops = & interfaces_proc_fops}};
#line 2471  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf_main.c"
static int setup_debugfs(struct adapter *adapter)
{
  #line 2473 
  int i;
  #line 2475 
  if ((long)((int)IS_ERR_OR_NULL((void *)adapter->debugfs_root) != 0) != 0L) {
    #line 2476 
    ldv_inline_asm();
    #line 2477 
    ldv_inline_asm();
    #line 2478 
    ldv_inline_asm();
    #line 2475 
    ;
  }
  #line 2480 
  i = 0;
  #line 2480 
  while ((unsigned int)i <= 4U) {
    #line 2481 
    cif_debugfs_create_file(debugfs_files[i].name,(unsigned short)((int)debugfs_files[i].mode),adapter->debugfs_root,(void *)adapter,debugfs_files[i].fops);
    #line 2480 
    i ++;
  }
  #line 2486 
  return 0;
}

#line 2493  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf_main.c"
static void cleanup_debugfs(struct adapter *adapter)
{
  #line 2495 
  if ((long)((int)IS_ERR_OR_NULL((void *)adapter->debugfs_root) != 0) != 0L) {
    #line 2496 
    ldv_inline_asm();
    #line 2497 
    ldv_inline_asm();
    #line 2498 
    ldv_inline_asm();
    #line 2495 
    ;
  }
  #line 2498 
  return;
}

#line 2510  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf_main.c"
static void size_nports_qsets(struct adapter *adapter)
{
  #line 2513 
  unsigned int ethqsets;
  #line 2513 
  unsigned int pmask_nports;
  #line 2512 
  struct vf_resources *vfres = & adapter->params.vfres;
  #line 2518 
  adapter->params.nports = (unsigned char)vfres->nvi;
  #line 2519 
  if ((unsigned int)adapter->params.nports > 1U) {
    #line 2520 
    _dev_warn(adapter->pdev_dev,(char *)"only using %d of %d maximum",1,(int)adapter->params.nports);
    #line 2523 
    adapter->params.nports = (unsigned char)1U;
  }
  #line 2531 
  if (0 != 0) 
              #line 2531 
              pmask_nports = ((unsigned int)((((((((((unsigned long long)adapter->params.vfres.pmask & 1ULL) != 0ULL) + (((unsigned long long)adapter->params.vfres.pmask & 2ULL) != 0ULL)) + (((unsigned long long)adapter->params.vfres.pmask & 4ULL) != 0ULL)) + (((unsigned long long)adapter->params.vfres.pmask & 8ULL) != 0ULL)) + (((unsigned long long)adapter->params.vfres.pmask & 16ULL) != 0ULL)) + (((unsigned long long)adapter->params.vfres.pmask & 32ULL) != 0ULL)) + (((unsigned long long)adapter->params.vfres.pmask & 64ULL) != 0ULL)) + (((unsigned long long)adapter->params.vfres.pmask & 128ULL) != 0ULL)) + (unsigned int)((((((((((unsigned long long)(adapter->params.vfres.pmask >> 8) & 1ULL) != 0ULL) + (((unsigned long long)(adapter->params.vfres.pmask >> 8) & 2ULL) != 0ULL)) + (((unsigned long long)(adapter->params.vfres.pmask >> 8) & 4ULL) != 0ULL)) + (((unsigned long long)(adapter->params.vfres.pmask >> 8) & 8ULL) != 0ULL)) + (((unsigned long long)(adapter->params.vfres.pmask >> 8) & 16ULL) != 0ULL)) + (((unsigned long long)(adapter->params.vfres.pmask >> 8) & 32ULL) != 0ULL)) + (((unsigned long long)(adapter->params.vfres.pmask >> 8) & 64ULL) != 0ULL)) + (((unsigned long long)(adapter->params.vfres.pmask >> 8) & 128ULL) != 0ULL))) + ((unsigned int)((((((((((unsigned long long)(adapter->params.vfres.pmask >> 16) & 1ULL) != 0ULL) + (((unsigned long long)(adapter->params.vfres.pmask >> 16) & 2ULL) != 0ULL)) + (((unsigned long long)(adapter->params.vfres.pmask >> 16) & 4ULL) != 0ULL)) + (((unsigned long long)(adapter->params.vfres.pmask >> 16) & 8ULL) != 0ULL)) + (((unsigned long long)(adapter->params.vfres.pmask >> 16) & 16ULL) != 0ULL)) + (((unsigned long long)(adapter->params.vfres.pmask >> 16) & 32ULL) != 0ULL)) + (((unsigned long long)(adapter->params.vfres.pmask >> 16) & 64ULL) != 0ULL)) + (((unsigned long long)(adapter->params.vfres.pmask >> 16) & 128ULL) != 0ULL)) + (unsigned int)((((((((((unsigned long long)(adapter->params.vfres.pmask >> 24) & 1ULL) != 0ULL) + (((unsigned long long)(adapter->params.vfres.pmask >> 24) & 2ULL) != 0ULL)) + (((unsigned long long)(adapter->params.vfres.pmask >> 24) & 4ULL) != 0ULL)) + (((unsigned long long)(adapter->params.vfres.pmask >> 24) & 8ULL) != 0ULL)) + (((unsigned long long)(adapter->params.vfres.pmask >> 24) & 16ULL) != 0ULL)) + (((unsigned long long)(adapter->params.vfres.pmask >> 24) & 32ULL) != 0ULL)) + (((unsigned long long)(adapter->params.vfres.pmask >> 24) & 64ULL) != 0ULL)) + (((unsigned long long)(adapter->params.vfres.pmask >> 24) & 128ULL) != 0ULL))); else 
                                                                    #line 2531 
                                                                    pmask_nports = __arch_hweight32(adapter->params.vfres.pmask);
  #line 2532 
  if ((unsigned int)adapter->params.nports > pmask_nports) {
    #line 2533 
    _dev_warn(adapter->pdev_dev,(char *)"only using %d of %d provisioned",pmask_nports,(int)adapter->params.nports,adapter->params.vfres.pmask);
    #line 2537 
    adapter->params.nports = (unsigned char)pmask_nports;
  }
  #line 2556 
  ethqsets = (vfres->niqflint - (unsigned int)(msi == 1)) + 4294967295U;
  #line 2557 
  if (vfres->nethctrl != ethqsets) {
    #line 2558 
    unsigned int __UNIQUE_ID___x445;
    #line 2558 
    unsigned int tmp_0;
    {
      #line 2558 
      __UNIQUE_ID___x445 = vfres->nethctrl;
      #line 2558 
      unsigned int __UNIQUE_ID___y446 = ethqsets;
      #line 2558 
      if (__UNIQUE_ID___x445 < __UNIQUE_ID___y446) 
                                                   #line 2558 
                                                   tmp_0 = __UNIQUE_ID___x445; else 
                                                                    #line 2558 
                                                                    tmp_0 = __UNIQUE_ID___y446;
      }
    #line 2558 
    ethqsets = tmp_0;
  }
  #line 2559 
  if (vfres->neq < ethqsets * 2U) 
                                  #line 2560 
                                  ethqsets = vfres->neq / 2U;
  #line 2561 
  if (ethqsets > 8U) 
                     #line 2562 
                     ethqsets = 8U;
  #line 2563 
  adapter->sge.max_ethqsets = (unsigned short)ethqsets;
  #line 2565 
  if ((int)adapter->sge.max_ethqsets < (int)((unsigned short)adapter->params.nports)) {
    #line 2566 
    _dev_warn(adapter->pdev_dev,(char *)"only using %d of %d available",(int)adapter->sge.max_ethqsets,(int)adapter->params.nports);
    #line 2569 
    adapter->params.nports = (unsigned char)adapter->sge.max_ethqsets;
  }
  #line 2571 
  return;
}

#line 2578  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf_main.c"
static int adap_init0(struct adapter *adapter)
{
  #line 2582 
  int err;
  #line 2583 
  u32 param;
  #line 2580 
  struct sge_params *sge_params = & adapter->params.sge;
  #line 2581 
  struct sge *s = & adapter->sge;
  #line 2583 
  u32 val = 0U;
  #line 2595 
  err = t4vf_fw_reset(adapter);
  #line 2596 
  if (err < 0) {
    #line 2597 
    _dev_err(adapter->pdev_dev,(char *)"FW reset failed: err=%d\n",err);
    #line 2598 
    return err;
  }
  #line 2609 
  err = t4vf_get_dev_params(adapter);
  #line 2610 
  if (err != 0) {
    #line 2611 
    _dev_err(adapter->pdev_dev,(char *)"unable to retrieve adapter",err);
    #line 2613 
    return err;
  }
  #line 2615 
  err = t4vf_get_vpd_params(adapter);
  #line 2616 
  if (err != 0) {
    #line 2617 
    _dev_err(adapter->pdev_dev,(char *)"unable to retrieve adapter",err);
    #line 2619 
    return err;
  }
  #line 2621 
  err = t4vf_get_sge_params(adapter);
  #line 2622 
  if (err != 0) {
    #line 2623 
    _dev_err(adapter->pdev_dev,(char *)"unable to retrieve adapter",err);
    #line 2625 
    return err;
  }
  #line 2627 
  err = t4vf_get_rss_glb_config(adapter);
  #line 2628 
  if (err != 0) {
    #line 2629 
    _dev_err(adapter->pdev_dev,(char *)"unable to retrieve adapter",err);
    #line 2631 
    return err;
  }
  #line 2633 
  if (adapter->params.rss.mode != 1U) {
    #line 2635 
    _dev_err(adapter->pdev_dev,(char *)"unable to operate with global RSS",adapter->params.rss.mode);
    #line 2637 
    return -22;
  }
  #line 2639 
  err = t4vf_sge_init(adapter);
  #line 2640 
  if (err != 0) {
    #line 2641 
    _dev_err(adapter->pdev_dev,(char *)"unable to use adapter parameters:",err);
    #line 2643 
    return err;
  }
  #line 2651 
  param = 36765696U;
  #line 2653 
  val = 1U;
  #line 2654 
  t4vf_set_params(adapter,1U,& param,& val);
  #line 2660 
  s->timer_val[0] = (unsigned short)core_ticks_to_us(adapter,sge_params->sge_timer_value_0_and_1 >> 16);
  #line 2662 
  s->timer_val[1] = (unsigned short)core_ticks_to_us(adapter,
                         sge_params->sge_timer_value_0_and_1 & 65535U);
  #line 2664 
  s->timer_val[2] = (unsigned short)core_ticks_to_us(adapter,sge_params->sge_timer_value_2_and_3 >> 16);
  #line 2666 
  s->timer_val[3] = (unsigned short)core_ticks_to_us(adapter,
                         sge_params->sge_timer_value_2_and_3 & 65535U);
  #line 2668 
  s->timer_val[4] = (unsigned short)core_ticks_to_us(adapter,sge_params->sge_timer_value_4_and_5 >> 16);
  #line 2670 
  s->timer_val[5] = (unsigned short)core_ticks_to_us(adapter,
                         sge_params->sge_timer_value_4_and_5 & 65535U);
  #line 2673 
  s->counter_val[0] = (unsigned char)((unsigned int)((unsigned char)(sge_params->sge_ingress_rx_threshold >> 24)) & 63U);
  #line 2674 
  s->counter_val[1] = (unsigned char)((unsigned int)((unsigned char)(sge_params->sge_ingress_rx_threshold >> 16)) & 63U);
  #line 2675 
  s->counter_val[2] = (unsigned char)((unsigned int)((unsigned char)(sge_params->sge_ingress_rx_threshold >> 8)) & 63U);
  #line 2676 
  s->counter_val[3] = (unsigned char)((unsigned int)((unsigned char)sge_params->sge_ingress_rx_threshold) & 63U);
  #line 2683 
  err = t4vf_get_vfres(adapter);
  #line 2684 
  if (err != 0) {
    #line 2685 
    _dev_err(adapter->pdev_dev,(char *)"unable to get virtual interface",err);
    #line 2687 
    return err;
  }
  #line 2691 
  if (adapter->params.vfres.pmask == 0U) {
    #line 2692 
    _dev_err(adapter->pdev_dev,(char *)"no port access configured\n");
    #line 2694 
    return -22;
  }
  #line 2696 
  if (adapter->params.vfres.nvi == 0U) {
    #line 2697 
    _dev_err(adapter->pdev_dev,(char *)"no virtual interfaces configured/");
    #line 2699 
    return -22;
  }
  #line 2705 
  size_nports_qsets(adapter);
  #line 2707 
  adapter->flags |= 32UL;
  #line 2708 
  return 0;
}

#line 2711  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf_main.c"
__inline static void init_rspq(struct sge_rspq *rspq, u8 timer_idx, u8 pkt_cnt_idx, unsigned int size, unsigned int iqe_size)
{
  #line 2715 
  unsigned int tmp;
  #line 2715 
  if ((unsigned int)pkt_cnt_idx <= 3U) 
                                       #line 2715 
                                       tmp = 1U; else 
                                                      #line 2715 
                                                      tmp = 0U;
  #line 2715 
  rspq->intr_params = (unsigned char)((unsigned int)((int)timer_idx << 1U) | tmp);
  #line 2718 
  if ((unsigned int)pkt_cnt_idx <= 3U) 
                                       #line 2718 
                                       rspq->pktcnt_idx = pkt_cnt_idx; else 
                                                                    #line 2718 
                                                                    rspq->pktcnt_idx = (unsigned char)0U;
  #line 2721 
  rspq->iqe_len = iqe_size;
  #line 2722 
  rspq->size = size;
  #line 2723 
  return;
}

#line 2731  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf_main.c"
static void cfg_queues(struct adapter *adapter)
{
  #line 2734 
  int q10g;
  #line 2734 
  int n10g;
  #line 2734 
  int qidx;
  #line 2734 
  int pidx;
  #line 2734 
  int qs;
  #line 2735 
  size_t iqe_size;
  #line 2733 
  struct sge *s = & adapter->sge;
  #line 2742 
  if ((long)((adapter->flags & 6UL) == 0UL) != 0L) {
    #line 2743 
    ldv_inline_asm();
    #line 2744 
    ldv_inline_asm();
    #line 2745 
    ldv_inline_asm();
    #line 2742 
    ;
  }
  #line 2748 
  n10g = 0;
  #line 2749 
  pidx = 0;
  #line 2749 
  while ((int)adapter->params.nports > pidx) {
    #line 2750 
    n10g = (int)is_x_10g_port(& adap2pinfo(adapter,pidx)->link_cfg) + n10g;
    #line 2749 
    pidx ++;
  }
  #line 2756 
  if (n10g == 0) 
                 #line 2757 
                 q10g = 0;
  else {
    #line 2759 
    int n1g = (int)adapter->params.nports - n10g;
    #line 2760 
    q10g = ((int)adapter->sge.max_ethqsets - n1g) / n10g;
    #line 2761 
    ;
    #line 2761 
    if (num_online_cpus() < (unsigned int)q10g) {
      #line 2762 
      q10g = (int)num_online_cpus();
    }
  }
  #line 2770 
  qidx = 0;
  #line 2771 
  pidx = 0;
  #line 2771 
  while ((int)adapter->params.nports > pidx) {
    {
      #line 2772 
      struct port_info *pi = adap2pinfo(adapter,pidx);
      #line 2774 
      pi->first_qset = (unsigned char)qidx;
      #line 2775 
      if ((int)is_x_10g_port(& pi->link_cfg) != 0) 
                                                   #line 2775 
                                                   pi->nqsets = (unsigned char)q10g; else 
                                                                    #line 2775 
                                                                    pi->nqsets = (unsigned char)1U;
      #line 2776 
      qidx = (int)pi->nqsets + qidx;
    }
    #line 2771 
    pidx ++;
  }
  #line 2778 
  s->ethqsets = (unsigned short)qidx;
  #line 2785 
  iqe_size = 64UL;
  #line 2791 
  qs = 0;
  #line 2791 
  while ((int)s->max_ethqsets > qs) {
    {
      #line 2792 
      struct sge_eth_rxq *rxq = & s->ethrxq[qs];
      #line 2793 
      struct sge_eth_txq *txq = & s->ethtxq[qs];
      #line 2795 
      init_rspq(& rxq->rspq,(unsigned char)0,(unsigned char)0,1024U,(unsigned int)iqe_size);
      #line 2796 
      rxq->fl.size = 72U;
      #line 2797 
      txq->q.size = 1024U;
    }
    #line 2791 
    qs ++;
  }
  #line 2804 
  init_rspq(& s->fw_evtq,(unsigned char)6,(unsigned char)0,512U,(unsigned int)iqe_size);
  #line 2819 
  init_rspq(& s->intrq,(unsigned char)6,(unsigned char)0,10U,(unsigned int)iqe_size);
  #line 2820 
  return;
}

#line 2827  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf_main.c"
static void reduce_ethqs(struct adapter *adapter, int n)
{
  #line 2829 
  int i;
  #line 2830 
  struct port_info *pi;
  #line 2836 
  if ((long)((int)adapter->params.nports > n) != 0L) {
    #line 2837 
    ldv_inline_asm();
    #line 2838 
    ldv_inline_asm();
    #line 2839 
    ldv_inline_asm();
    #line 2836 
    ;
  }
  #line 2837 
  while ((int)adapter->sge.ethqsets > n) {
    #line 2838 
    i = 0;
    #line 2838 
    while ((int)adapter->params.nports > i) {
      #line 2839 
      pi = adap2pinfo(adapter,i);
      #line 2840 
      if ((unsigned int)pi->nqsets > 1U) {
        #line 2841 
        pi->nqsets = (u8)((int)pi->nqsets - 1);
        #line 2842 
        adapter->sge.ethqsets = (u16)((int)adapter->sge.ethqsets - 1);
        #line 2843 
        if ((int)adapter->sge.ethqsets <= n) 
                                             #line 2844 
                                             break;
      }
      #line 2838 
      i ++;
    }
  }
  #line 2851 
  n = 0;
  #line 2852 
  i = 0;
  #line 2852 
  while ((int)adapter->params.nports > i) {
    #line 2853 
    pi = adap2pinfo(adapter,i);
    #line 2854 
    pi->first_qset = (unsigned char)n;
    #line 2855 
    n = (int)pi->nqsets + n;
    #line 2852 
    i ++;
  }
  #line 2857 
  return;
}

#line 2866  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf_main.c"
static int enable_msix(struct adapter *adapter)
{
  #line 2868 
  int i;
  #line 2868 
  int want;
  #line 2868 
  int need;
  #line 2868 
  int nqsets;
  #line 2869 
  struct msix_entry entries[9U];
  #line 2870 
  struct sge *s = & adapter->sge;
  #line 2872 
  i = 0;
  #line 2872 
  while (i <= 8) {
    #line 2873 
    entries[i].entry = (unsigned short)i;
    #line 2872 
    i ++;
  }
  #line 2882 
  want = (int)s->max_ethqsets + 1;
  #line 2883 
  need = (int)adapter->params.nports + 1;
  #line 2885 
  want = pci_enable_msix_range(adapter->pdev,(struct msix_entry *)(& entries),need,want);
  #line 2886 
  if (want < 0) 
                #line 2887 
                return want;
  #line 2889 
  nqsets = want + -1;
  #line 2890 
  if ((int)s->max_ethqsets > nqsets) {
    #line 2891 
    _dev_warn(adapter->pdev_dev,(char *)"only enough MSI-X vectors",nqsets);
    #line 2893 
    s->max_ethqsets = (unsigned short)nqsets;
    #line 2894 
    if ((int)s->ethqsets > nqsets) 
                                   #line 2895 
                                   reduce_ethqs(adapter,nqsets);
  }
  #line 2897 
  i = 0;
  #line 2897 
  while (i < want) {
    #line 2898 
    adapter->msix_info[i].vec = (unsigned short)entries[i].vector;
    #line 2897 
    i ++;
  }
  #line 2900 
  return 0;
}

#line 2903  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf_main.c"
static struct net_device_ops cxgb4vf_netdev_ops = {.ndo_open = & cxgb4vf_open, .ndo_stop = & cxgb4vf_stop, .ndo_start_xmit = (netdev_tx_t (*)(struct sk_buff *, struct net_device *))(& t4vf_eth_xmit), .ndo_set_rx_mode = & cxgb4vf_set_rxmode, .ndo_set_mac_address = & cxgb4vf_set_mac_addr, .ndo_validate_addr = & eth_validate_addr, .ndo_do_ioctl = & cxgb4vf_do_ioctl, .ndo_change_mtu = & cxgb4vf_change_mtu, .ndo_get_stats = & cxgb4vf_get_stats, .ndo_poll_controller = & cxgb4vf_poll_controller, .ndo_fix_features = & cxgb4vf_fix_features, .ndo_set_features = & cxgb4vf_set_features};
#line 2925  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf_main.c"
static int cxgb4vf_pci_probe(struct pci_dev *pdev, struct pci_device_id *ent)
{
  #line 2928 
  int pci_using_dac;
  #line 2929 
  int err;
  #line 2929 
  int pidx;
  #line 2930 
  unsigned int pmask;
  #line 2931 
  struct adapter *adapter;
  #line 2932 
  struct port_info *pi;
  #line 2933 
  struct net_device *netdev;
  #line 2934 
  unsigned int pf;
  {
    #line 2940 
    bool __print_once;
    #line 2940 
    bool __ret_print_once = (_Bool)(! ((int)__print_once != 0));
    #line 2940 
    if (! __print_once) {
      #line 2940 
      __print_once = (_Bool)1;
      #line 2940 
      printk((char *)"\001",(char *)"Chelsio T4/T5/T6 Virtual Function (VF) Network Driver",(char *)"2.0.0-ko");
    }
    #line 2940 
    long tmp = (long)((int)__ret_print_once != 0);
  }
  #line 2945 
  err = pci_enable_device(pdev);
  #line 2946 
  if (err != 0) {
    #line 2947 
    _dev_err(& pdev->dev,(char *)"cannot enable PCI device\n");
    #line 2948 
    return err;
  }
  #line 2955 
  err = pci_request_regions(pdev,(char *)"cxgb4vf");
  #line 2956 
  if (err != 0) {
    #line 2957 
    _dev_err(& pdev->dev,(char *)"cannot obtain PCI resources\n");
    #line 2958 
    goto err_disable_device;
  }
  #line 2965 
  err = pci_set_dma_mask(pdev,18446744073709551615ULL);
  #line 2966 
  if (err == 0) {
    #line 2967 
    err = pci_set_consistent_dma_mask(pdev,18446744073709551615ULL);
    #line 2968 
    if (err != 0) {
      #line 2969 
      _dev_err(& pdev->dev,(char *)"unable to obtain 64-bit DMA for");
      #line 2971 
      goto err_release_regions;
    }
    #line 2973 
    pci_using_dac = 1;
  }
  else {
    #line 2975 
    err = pci_set_dma_mask(pdev,4294967295ULL);
    #line 2976 
    if (err != 0) {
      #line 2977 
      _dev_err(& pdev->dev,(char *)"no usable DMA configuration\n");
      #line 2978 
      goto err_release_regions;
    }
    #line 2980 
    pci_using_dac = 0;
  }
  #line 2986 
  pci_set_master(pdev);
  #line 2991 
  adapter = (struct adapter *)kzalloc(8384UL,3264U);
  #line 2992 
  if (adapter == (struct adapter *)0) {
    #line 2993 
    err = -12;
    #line 2994 
    goto err_release_regions;
  }
  #line 2996 
  pci_set_drvdata(pdev,(void *)adapter);
  #line 2997 
  adapter->pdev = pdev;
  #line 2998 
  adapter->pdev_dev = & pdev->dev;
  #line 3000 
  adapter->mbox_log = (struct mbox_cmd_log *)kzalloc(20492UL,3264U);
  #line 3004 
  if (adapter->mbox_log == (struct mbox_cmd_log *)0) {
    #line 3005 
    err = -12;
    #line 3006 
    goto err_free_adapter;
  }
  #line 3008 
  (adapter->mbox_log)->size = 256U;
  #line 3013 
  spinlock_check(& adapter->stats_lock);
  {
    #line 3013 
    struct lock_class_key __key;
    #line 3013 
    __raw_spin_lock_init(& adapter->stats_lock.__anonCompField_spinlock_25.rlock,(char *)"&(&adapter->stats_lock)->rlock",& __key);
  }
  #line 3014 
  spinlock_check(& adapter->mbox_lock);
  {
    #line 3014 
    struct lock_class_key __key_0;
    #line 3014 
    __raw_spin_lock_init(& adapter->mbox_lock.__anonCompField_spinlock_25.rlock,(char *)"&(&adapter->mbox_lock)->rlock",& __key_0);
  }
  #line 3015 
  INIT_LIST_HEAD(& adapter->mlist.list);
  #line 3020 
  adapter->regs = pci_ioremap_bar(pdev,0);
  #line 3021 
  if (adapter->regs == (void *)0) {
    #line 3022 
    _dev_err(& pdev->dev,(char *)"cannot map device registers\n");
    #line 3023 
    err = -12;
    #line 3024 
    goto err_free_adapter;
  }
  #line 3029 
  err = t4vf_prep_adapter(adapter);
  #line 3030 
  if (err != 0) {
    #line 3031 
    _dev_err(adapter->pdev_dev,(char *)"device didn\'t become ready:",err);
    #line 3033 
    goto err_unmap_bar0;
  }
  #line 3039 
  if (is_t4(adapter->params.chip) == 0) {
    #line 3040 
    unsigned long tmp_1;
    #line 3040 
    if (pdev->resource[2].start != 0ULL || pdev->resource[2].end != pdev->resource[2].start) 
      #line 3040 
      tmp_1 = (unsigned long)((pdev->resource[2].end - pdev->resource[2].start) + 1ULL); else 
                                                                    #line 3040 
                                                                    tmp_1 = 0UL;
    #line 3040 
    ;
    #line 3040 
    adapter->bar2 = ioremap_wc(pdev->resource[2].start,tmp_1);
    #line 3042 
    if (adapter->bar2 == (void *)0) {
      #line 3043 
      _dev_err(adapter->pdev_dev,(char *)"cannot map BAR2 doorbells\n");
      #line 3044 
      err = -12;
      #line 3045 
      goto err_unmap_bar0;
    }
  }
  #line 3051 
  adapter->name = pci_name(pdev);
  #line 3052 
  adapter->msg_enable = 255U;
  #line 3068 
  if (! pcie_relaxed_ordering_enabled(pdev)) 
                                             #line 3069 
                                             adapter->flags |= 16UL;
  #line 3071 
  err = adap_init0(adapter);
  #line 3072 
  if (err != 0) 
                #line 3073 
                _dev_err(& pdev->dev,(char *)"Adapter initialization failed, error %d. Continuing in debug mode\n",err);
  #line 3078 
  INIT_LIST_HEAD(& adapter->mac_hlist);
  #line 3083 
  pmask = adapter->params.vfres.pmask;
  #line 3084 
  pf = t4vf_get_pf_from_vf(adapter);
  #line 3085 
  pidx = 0;
  #line 3085 
  while ((int)adapter->params.nports > pidx) {
    {
      #line 3086 
      int port_id;
      #line 3086 
      int viid;
      #line 3087 
      u8 mac[6U];
      #line 3088 
      unsigned int naddr = 1U;
      #line 3096 
      if (pmask == 0U) 
                       #line 3097 
                       break;
      #line 3098 
      port_id = ffs((int)pmask) + -1;
      #line 3099 
      pmask = (unsigned int)(~ (1 << port_id)) & pmask;
      #line 3104 
      netdev = cif_alloc_etherdev_mqs(80,8U,8U);
      #line 3106 
      if (netdev == (struct net_device *)0) {
        #line 3107 
        err = -12;
        #line 3108 
        goto err_free_dev;
      }
      #line 3110 
      adapter->port[pidx] = netdev;
      #line 3111 
      netdev->dev.parent = & pdev->dev;
      #line 3112 
      pi = (struct port_info *)netdev_priv(netdev);
      #line 3113 
      pi->adapter = adapter;
      #line 3114 
      pi->pidx = (unsigned char)pidx;
      #line 3115 
      pi->port_id = (unsigned char)port_id;
      #line 3121 
      pi->xact_addr_filt = -1;
      #line 3122 
      netdev->irq = (int)pdev->irq;
      #line 3124 
      netdev->hw_features = 549757206931ULL;
      #line 3127 
      netdev->features = netdev->hw_features;
      #line 3128 
      if (pci_using_dac != 0) 
                              #line 3129 
                              netdev->features |= 32ULL;
      #line 3130 
      netdev->vlan_features = netdev->features & 1392691ULL;
      #line 3132 
      netdev->priv_flags |= 4096U;
      #line 3133 
      netdev->min_mtu = 81U;
      #line 3134 
      netdev->max_mtu = 65535U;
      #line 3136 
      netdev->netdev_ops = & cxgb4vf_netdev_ops;
      #line 3137 
      netdev->ethtool_ops = & cxgb4vf_ethtool_ops;
      #line 3138 
      netdev->dev_port = (unsigned short)pi->port_id;
      #line 3144 
      if ((adapter->flags & 32UL) == 0UL) 
                                          #line 3145 
                                          goto __Cont;
      #line 3147 
      viid = t4vf_alloc_vi(adapter,port_id);
      #line 3148 
      if (viid < 0) {
        #line 3149 
        _dev_err(& pdev->dev,(char *)"cannot allocate VI for port %d: err=%d\n",port_id,viid);
        #line 3152 
        err = viid;
        #line 3153 
        goto err_free_dev;
      }
      #line 3155 
      pi->viid = (unsigned short)viid;
      #line 3160 
      err = t4vf_port_init(adapter,pidx);
      #line 3161 
      if (err != 0) {
        #line 3162 
        _dev_err(& pdev->dev,(char *)"cannot initialize port %d\n",pidx);
        #line 3164 
        goto err_free_dev;
      }
      #line 3167 
      err = t4vf_get_vf_mac_acl(adapter,pf,& naddr,(u8 *)(& mac));
      #line 3168 
      if (err != 0) 
                    #line 3169 
                    _dev_err(& pdev->dev,(char *)"unable to determine MAC ACL address, ",err);
      else 
        #line 3172 
        if (naddr != 0U && adapter->params.vfres.nvi == 1U) {
          #line 3173 
          struct sockaddr addr;
          #line 3175 
          ether_addr_copy((u8 *)(& addr.sa_data),(u8 *)(& mac));
          #line 3176 
          err = cxgb4vf_set_mac_addr(netdev,(void *)(& addr));
          #line 3177 
          if (err != 0) {
            #line 3178 
            _dev_err(& pdev->dev,(char *)"unable to set MAC address %pM\n",(u8 *)(& mac));
            #line 3181 
            goto err_free_dev;
          }
          #line 3183 
          _dev_info(& pdev->dev,(char *)"Using assigned MAC ACL: %pM\n",(u8 *)(& mac));
        }
    }
    #line 3085 
    __Cont: 
            #line 3085 
    pidx ++;
  }
  #line 3193 
  if (msi == 2) {
    #line 3193 
    if (enable_msix(adapter) == 0) 
                                   #line 3194 
                                   adapter->flags |= 4UL; else 
                                                               #line 3193 
                                                               goto _LAND;
  }
  else {
    #line 3193 
    _LAND: {
             #line 3196 
             if (msi == 2) {
               #line 3197 
               _dev_info(adapter->pdev_dev,(char *)"Unable to use MSI-X Interrupts; falling ");
               #line 3205 
               msi = 1;
               #line 3206 
               size_nports_qsets(adapter);
             }
             #line 3208 
             err = pci_enable_msi(pdev);
             #line 3209 
             if (err != 0) {
               #line 3210 
               _dev_err(& pdev->dev,(char *)"Unable to allocate MSI Interrupts;",err);
               #line 3212 
               goto err_free_dev;
             }
             #line 3214 
             adapter->flags |= 2UL;
           }
  }
  #line 3220 
  cfg_queues(adapter);
  #line 3228 
  pidx = 0;
  #line 3228 
  while ((int)adapter->params.nports > pidx) {
    {
      #line 3229 
      struct port_info *pi_0 = netdev_priv(adapter->port[pidx]);
      #line 3230 
      netdev = adapter->port[pidx];
      #line 3231 
      if (netdev == (struct net_device *)0) 
                                            #line 3232 
                                            goto __Cont_0;
      #line 3234 
      netif_set_real_num_tx_queues(netdev,(unsigned int)pi_0->nqsets);
      #line 3235 
      netif_set_real_num_rx_queues(netdev,(unsigned int)pi_0->nqsets);
      #line 3237 
      err = cif_register_netdev(netdev);
      #line 3238 
      if (err != 0) {
        #line 3239 
        _dev_warn(& pdev->dev,(char *)"cannot register net device %s,",(char *)(& netdev->name));
        #line 3241 
        goto __Cont_0;
      }
      #line 3244 
      netif_carrier_off(netdev);
      #line 3245 
      cif_set_bit((long)pidx,& adapter->registered_device_map);
    }
    #line 3228 
    __Cont_0: 
              #line 3228 
    pidx ++;
  }
  #line 3247 
  if (adapter->registered_device_map == 0UL) {
    #line 3248 
    _dev_err(& pdev->dev,(char *)"could not register any net devices\n");
    #line 3249 
    goto err_disable_interrupts;
  }
  #line 3255 
  if (! IS_ERR_OR_NULL((void *)cxgb4vf_debugfs_root)) {
    #line 3256 
    ;
    #line 3256 
    adapter->debugfs_root = cif_debugfs_create_dir(pci_name(pdev),cxgb4vf_debugfs_root);
    #line 3259 
    setup_debugfs(adapter);
  }
  #line 3266 
  pidx = 0;
  #line 3266 
  while ((int)adapter->params.nports > pidx) {
    #line 3267 
    char *tmp_10;
    #line 3267 
    char *tmp_11;
    #line 3267 
    if ((adapter->flags & 4UL) == 0UL) {
      #line 3267 
      if ((adapter->flags & 2UL) != 0UL) 
                                         #line 3267 
                                         tmp_10 = (char *)"MSI"; else 
                                                                   #line 3267 
                                                                   tmp_10 = (char *)"";
      #line 3267 
      tmp_11 = tmp_10;
    }
    else 
         #line 3267 
         tmp_11 = (char *)"MSI-X";
    #line 3267 
    ;
    #line 3267 
    ;
    #line 3267 
    _dev_info(adapter->pdev_dev,(char *)"%s: Chelsio VF NIC PCIe %s\n",(char *)(& (adapter->port[pidx])->name),tmp_11);
    #line 3266 
    pidx ++;
  }
  #line 3276 
  return 0;
  #line 3282 
  err_disable_interrupts: 
                          #line 3282 
  ;
  #line 3283 
  if ((adapter->flags & 4UL) != 0UL) {
    #line 3284 
    pci_disable_msix(adapter->pdev);
    #line 3285 
    adapter->flags &= 18446744073709551611UL;
  }
  else 
    #line 3286 
    if ((adapter->flags & 2UL) != 0UL) {
      #line 3287 
      pci_disable_msi(adapter->pdev);
      #line 3288 
      adapter->flags &= 18446744073709551613UL;
    }
  #line 3291 
  err_free_dev: 
                #line 3291 
  ;
  #line 3292 
  pidx = 0;
  #line 3292 
  while ((int)adapter->params.nports > pidx) {
    {
      #line 3293 
      netdev = adapter->port[pidx];
      #line 3294 
      if (netdev == (struct net_device *)0) 
                                            #line 3295 
                                            goto __Cont_1;
      #line 3296 
      pi = (struct port_info *)netdev_priv(netdev);
      #line 3297 
      if ((unsigned int)pi->viid != 0U) 
                                        #line 3298 
                                        t4vf_free_vi(adapter,(int)pi->viid);
      #line 3299 
      if ((int)test_bit((long)pidx,& adapter->registered_device_map) != 0) 
        #line 3300 
        cif_unregister_netdev(netdev);
      #line 3301 
      cif_free_netdev(netdev);
    }
    #line 3292 
    __Cont_1: 
              #line 3292 
    pidx ++;
  }
  #line 3304 
  if (is_t4(adapter->params.chip) == 0) 
                                        #line 3305 
                                        iounmap(adapter->bar2);
  #line 3307 
  err_unmap_bar0: 
                  #line 3307 
  ;
  #line 3308 
  iounmap(adapter->regs);
  #line 3310 
  err_free_adapter: 
                    #line 3310 
  ;
  #line 3311 
  kfree((void *)adapter->mbox_log);
  #line 3312 
  kfree((void *)adapter);
  #line 3314 
  err_release_regions: 
                       #line 3314 
  ;
  #line 3315 
  pci_release_regions(pdev);
  #line 3316 
  pci_clear_master(pdev);
  #line 3318 
  err_disable_device: 
                      #line 3318 
  ;
  #line 3319 
  pci_disable_device(pdev);
  #line 3321 
  return err;
}

#line 3329  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf_main.c"
static void cxgb4vf_pci_remove(struct pci_dev *pdev)
{
  #line 3332 
  struct hash_mac_addr *entry;
  #line 3332 
  struct hash_mac_addr *tmp;
  #line 3331 
  struct adapter *adapter = pci_get_drvdata(pdev);
  #line 3337 
  if (adapter != (struct adapter *)0) {
    #line 3384 
    void *__mptr;
    #line 3384 
    void *__mptr_0;
    #line 3338 
    int pidx;
    #line 3344 
    pidx = 0;
    #line 3344 
    while ((int)adapter->params.nports > pidx) {
      #line 3345 
      if ((int)test_bit((long)pidx,& adapter->registered_device_map) != 0) 
        #line 3346 
        cif_unregister_netdev(adapter->port[pidx]);
      #line 3344 
      pidx ++;
    }
    #line 3347 
    t4vf_sge_stop(adapter);
    #line 3348 
    if ((adapter->flags & 4UL) != 0UL) {
      #line 3349 
      pci_disable_msix(adapter->pdev);
      #line 3350 
      adapter->flags &= 18446744073709551611UL;
    }
    else 
      #line 3351 
      if ((adapter->flags & 2UL) != 0UL) {
        #line 3352 
        pci_disable_msi(adapter->pdev);
        #line 3353 
        adapter->flags &= 18446744073709551613UL;
      }
    #line 3359 
    if (! IS_ERR_OR_NULL((void *)adapter->debugfs_root)) {
      #line 3360 
      cleanup_debugfs(adapter);
      #line 3361 
      debugfs_remove_recursive(adapter->debugfs_root);
    }
    #line 3367 
    t4vf_free_sge_resources(adapter);
    #line 3368 
    pidx = 0;
    #line 3368 
    while ((int)adapter->params.nports > pidx) {
      {
        #line 3370 
        struct port_info *pi;
        #line 3369 
        struct net_device *netdev = adapter->port[pidx];
        #line 3372 
        if (netdev == (struct net_device *)0) 
                                              #line 3373 
                                              goto __Cont;
        #line 3375 
        pi = (struct port_info *)netdev_priv(netdev);
        #line 3376 
        if ((unsigned int)pi->viid != 0U) 
                                          #line 3377 
                                          t4vf_free_vi(adapter,(int)pi->viid);
        #line 3378 
        cif_free_netdev(netdev);
      }
      #line 3368 
      __Cont: 
              #line 3368 
      pidx ++;
    }
    #line 3380 
    iounmap(adapter->regs);
    #line 3381 
    if (is_t4(adapter->params.chip) == 0) 
                                          #line 3382 
                                          iounmap(adapter->bar2);
    #line 3383 
    kfree((void *)adapter->mbox_log);
    #line 3384 
    __mptr = (void *)adapter->mac_hlist.next;
    #line 3384 
    entry = ((struct hash_mac_addr *)__mptr);
    #line 3384 
    __mptr_0 = (void *)entry->list.next;
    #line 3385 
    tmp = ((struct hash_mac_addr *)__mptr_0);
    #line 3384 
    while (& entry->list != & adapter->mac_hlist) {
      #line 3384 
      void *__mptr_1;
      #line 3386 
      list_del(& entry->list);
      #line 3387 
      kfree((void *)entry);
      #line 3384 
      entry = tmp;
      #line 3384 
      __mptr_1 = (void *)tmp->list.next;
      #line 3384 
      tmp = ((struct hash_mac_addr *)__mptr_1);
    }
    #line 3389 
    kfree((void *)adapter);
  }
  #line 3395 
  pci_disable_device(pdev);
  #line 3396 
  pci_clear_master(pdev);
  #line 3397 
  pci_release_regions(pdev);
  #line 3398 
  return;
}

#line 3404  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf_main.c"
static void cxgb4vf_pci_shutdown(struct pci_dev *pdev)
{
  #line 3406 
  struct adapter *adapter;
  #line 3407 
  int pidx;
  #line 3409 
  adapter = (struct adapter *)pci_get_drvdata(pdev);
  #line 3410 
  if (adapter == (struct adapter *)0) 
                                      #line 3411 
                                      return;
  #line 3417 
  pidx = 0;
  #line 3417 
  while ((int)adapter->params.nports > pidx) {
    #line 3418 
    if ((int)test_bit((long)pidx,& adapter->registered_device_map) != 0) 
      #line 3419 
      cif_unregister_netdev(adapter->port[pidx]);
    #line 3417 
    pidx ++;
  }
  #line 3424 
  t4vf_sge_stop(adapter);
  #line 3425 
  if ((adapter->flags & 4UL) != 0UL) {
    #line 3426 
    pci_disable_msix(adapter->pdev);
    #line 3427 
    adapter->flags &= 18446744073709551611UL;
  }
  else 
    #line 3428 
    if ((adapter->flags & 2UL) != 0UL) {
      #line 3429 
      pci_disable_msi(adapter->pdev);
      #line 3430 
      adapter->flags &= 18446744073709551613UL;
    }
  #line 3437 
  t4vf_free_sge_resources(adapter);
  #line 3438 
  pci_set_drvdata(pdev,(void *)0);
  #line 3439 
  return;
}

#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4/t4_pci_id_tbl.h"
static struct pci_device_id cxgb4vf_pci_tbl[120U] = {{.vendor = 5157U, .device = 18432U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5157U, .device = 18433U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5157U, .device = 18434U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5157U, .device = 18435U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5157U, .device = 18436U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5157U, .device = 18437U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5157U, .device = 18438U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5157U, .device = 18439U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5157U, .device = 18440U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5157U, .device = 18441U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5157U, .device = 18442U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5157U, .device = 18443U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5157U, .device = 18444U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5157U, .device = 18445U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5157U, .device = 18446U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5157U, .device = 18560U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5157U, .device = 18561U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5157U, .device = 18562U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5157U, .device = 18563U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5157U, .device = 18564U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5157U, .device = 18565U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5157U, .device = 18566U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5157U, .device = 18567U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5157U, .device = 18568U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5157U, .device = 22528U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5157U, .device = 22529U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5157U, .device = 22530U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5157U, .device = 22531U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5157U, .device = 22532U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5157U, .device = 22533U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5157U, .device = 22534U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5157U, .device = 22535U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5157U, .device = 22536U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5157U, .device = 22537U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5157U, .device = 22538U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5157U, .device = 22539U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5157U, .device = 22540U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5157U, .device = 22541U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5157U, .device = 22542U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5157U, .device = 22544U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5157U, .device = 22545U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5157U, .device = 22546U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5157U, .device = 22547U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5157U, .device = 22548U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5157U, .device = 22549U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5157U, .device = 22550U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5157U, .device = 22551U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5157U, .device = 22552U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5157U, .device = 22553U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5157U, .device = 22554U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5157U, .device = 22555U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5157U, .device = 22656U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5157U, .device = 22657U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5157U, .device = 22658U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5157U, .device = 22659U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5157U, .device = 22660U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5157U, .device = 22661U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5157U, .device = 22662U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5157U, .device = 22663U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5157U, .device = 22664U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5157U, .device = 22665U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5157U, .device = 22672U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5157U, .device = 22673U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5157U, .device = 22674U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5157U, .device = 22675U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5157U, .device = 22676U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5157U, .device = 22677U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5157U, .device = 22678U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5157U, .device = 22679U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5157U, .device = 22680U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5157U, .device = 22681U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5157U, .device = 22682U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5157U, .device = 22683U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5157U, .device = 22684U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5157U, .device = 22685U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5157U, .device = 22686U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5157U, .device = 22687U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5157U, .device = 22688U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5157U, .device = 22689U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5157U, .device = 22690U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5157U, .device = 22691U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5157U, .device = 22692U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5157U, .device = 22693U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5157U, .device = 22694U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5157U, .device = 22695U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5157U, .device = 22696U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5157U, .device = 22697U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5157U, .device = 22698U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5157U, .device = 22699U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5157U, .device = 22700U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5157U, .device = 22701U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5157U, .device = 22702U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5157U, .device = 22703U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5157U, .device = 22704U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5157U, .device = 26625U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5157U, .device = 26626U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5157U, .device = 26627U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5157U, .device = 26628U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5157U, .device = 26629U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5157U, .device = 26630U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5157U, .device = 26631U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5157U, .device = 26632U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5157U, .device = 26633U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5157U, .device = 26637U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5157U, .device = 26641U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5157U, .device = 26644U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5157U, .device = 26645U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5157U, .device = 26752U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5157U, .device = 26753U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5157U, .device = 26754U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5157U, .device = 26755U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5157U, .device = 26756U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5157U, .device = 26757U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5157U, .device = 26758U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5157U, .device = 26759U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5157U, .device = 26760U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5157U, .device = 26761U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5157U, .device = 26762U, .subvendor = 4294967295U, .subdevice = 4294967295U}, {.vendor = 5157U, .device = 26763U, .subvendor = 4294967295U, .subdevice = 4294967295U}};
#line 3458  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf_main.c"
struct pci_device_id __mod_pci__cxgb4vf_pci_tbl_device_table[120U];
#line 3460  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf_main.c"
static struct pci_driver cxgb4vf_driver = {.name = (char *)"cxgb4vf", .id_table = (struct pci_device_id *)(& cxgb4vf_pci_tbl), .probe = & cxgb4vf_pci_probe, .remove = & cxgb4vf_pci_remove, .shutdown = & cxgb4vf_pci_shutdown};
#line 3471  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf_main.c"
static int cxgb4vf_module_init(void)
{
  #line 3473 
  int ret;
  #line 3478 
  if ((unsigned int)msi + 4294967295U > 1U) {
    #line 3479 
    printk((char *)"\001",msi,2,1);
    #line 3481 
    return -22;
  }
  #line 3485 
  cxgb4vf_debugfs_root = cif_debugfs_create_dir((char *)"cxgb4vf",(struct dentry *)0);
  #line 3487 
  ret = cif___pci_register_driver(& cxgb4vf_driver,& __this_module,(char *)"cxgb4vf");
  #line 3488 
  if (ret < 0) 
               #line 3489 
               cif_debugfs_remove(cxgb4vf_debugfs_root);
  #line 3490 
  return ret;
}

#line 3496  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf_main.c"
static void cxgb4vf_module_exit(void)
{
  #line 3498 
  cif_pci_unregister_driver(& cxgb4vf_driver);
  #line 3499 
  cif_debugfs_remove(cxgb4vf_debugfs_root);
  #line 3500 
  return;
}

#line 93  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/0/concurrency safety/weaver/cxgb4vf_main.i.aux"
struct pci_driver *emg_alias_cxgb4vf_driver = & cxgb4vf_driver;
#line 94  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/0/concurrency safety/weaver/cxgb4vf_main.i.aux"
struct pci_device_id (*emg_alias_cxgb4vf_pci_tbl)[120U] = & cxgb4vf_pci_tbl;
#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/0/concurrency safety/weaver/cxgb4vf_main.i.aux"
struct file_operations *emg_alias_interfaces_proc_fops = & interfaces_proc_fops;
#line 96  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/0/concurrency safety/weaver/cxgb4vf_main.i.aux"
struct seq_operations *emg_alias_interfaces_seq_ops = & interfaces_seq_ops;
#line 97  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/0/concurrency safety/weaver/cxgb4vf_main.i.aux"
struct file_operations *emg_alias_mboxlog_fops = & mboxlog_fops;
#line 98  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/0/concurrency safety/weaver/cxgb4vf_main.i.aux"
struct seq_operations *emg_alias_mboxlog_seq_ops = & mboxlog_seq_ops;
#line 99  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/0/concurrency safety/weaver/cxgb4vf_main.i.aux"
struct file_operations *emg_alias_resources_fops = & resources_fops;
#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/0/concurrency safety/weaver/cxgb4vf_main.i.aux"
int (*emg_alias_seq_release)(struct inode *, struct file *) = & seq_release;
#line 101  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/0/concurrency safety/weaver/cxgb4vf_main.i.aux"
struct file_operations *emg_alias_sge_qinfo_debugfs_fops = & sge_qinfo_debugfs_fops;
#line 102  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/0/concurrency safety/weaver/cxgb4vf_main.i.aux"
struct seq_operations *emg_alias_sge_qinfo_seq_ops = & sge_qinfo_seq_ops;
#line 103  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/0/concurrency safety/weaver/cxgb4vf_main.i.aux"
struct file_operations *emg_alias_sge_qstats_proc_fops = & sge_qstats_proc_fops;
#line 104  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/0/concurrency safety/weaver/cxgb4vf_main.i.aux"
struct seq_operations *emg_alias_sge_qstats_seq_ops = & sge_qstats_seq_ops;
#line 105  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/0/concurrency safety/weaver/cxgb4vf_main.i.aux"
int (*emg_alias_single_release)(struct inode *, struct file *) = & single_release;
#line 108 
#line 108 
int emg___pci_register_driver(struct pci_driver *arg0, struct module *arg1, char *arg2);
#line 109 
#line 109 
struct net_device *emg_alloc_etherdev_mqs(int arg0, unsigned int arg1, unsigned int arg2);
#line 110 
#line 110 
struct dentry *emg_debugfs_create_dir(char *arg0, struct dentry *arg1);
#line 111 
#line 111 
struct dentry *emg_debugfs_create_file(char *arg0, unsigned short arg1, struct dentry *arg2, void *arg3, struct file_operations *arg4);
#line 112 
#line 112 
void emg_debugfs_remove(struct dentry *arg0);
#line 114 
#line 114 
void *emg_free_irq(unsigned int arg0, void *arg1);
#line 115 
#line 115 
void emg_free_netdev(struct net_device *arg0);
#line 117 
#line 117 
void emg_pci_unregister_driver(struct pci_driver *arg0);
#line 118 
#line 118 
int emg_register_netdev(struct net_device *arg0);
#line 119 
#line 119 
int emg_request_irq(unsigned int arg0, enum irqreturn (*arg1)(int , void *), unsigned long arg2, char *arg3, void *arg4);
#line 120 
#line 120 
int emg_seq_open(struct file *arg0, struct seq_operations *arg1);
#line 121 
#line 121 
void emg_unregister_netdev(struct net_device *arg0);
#line 125  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/0/concurrency safety/weaver/cxgb4vf_main.i.aux"
void emg_cxgb4vf_module_exit(void)
{
  #line 126 
  cxgb4vf_module_exit();
  #line 127 
  return;
}

#line 129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/0/concurrency safety/weaver/cxgb4vf_main.i.aux"
int emg_cxgb4vf_module_init(void)
{
  #line 130 
  return cxgb4vf_module_init();
}

#line 133  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/0/concurrency safety/weaver/cxgb4vf_main.i.aux"
int emg_wrapper_cxgb4vf_change_mtu(struct net_device *arg0, int arg1)
{
  #line 134 
  return cxgb4vf_change_mtu(arg0,arg1);
}

#line 138  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/0/concurrency safety/weaver/cxgb4vf_main.i.aux"
int emg_wrapper_cxgb4vf_do_ioctl(struct net_device *arg0, struct ifreq *arg1, int arg2)
{
  #line 139 
  return cxgb4vf_do_ioctl(arg0,arg1,arg2);
}

#line 143  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/0/concurrency safety/weaver/cxgb4vf_main.i.aux"
unsigned long long emg_wrapper_cxgb4vf_fix_features(struct net_device *arg0, unsigned long long arg1)
{
  #line 144 
  return cxgb4vf_fix_features(arg0,arg1);
}

#line 148  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/0/concurrency safety/weaver/cxgb4vf_main.i.aux"
int emg_wrapper_cxgb4vf_get_coalesce(struct net_device *arg0, struct ethtool_coalesce *arg1)
{
  #line 149 
  return cxgb4vf_get_coalesce(arg0,arg1);
}

#line 153  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/0/concurrency safety/weaver/cxgb4vf_main.i.aux"
void emg_wrapper_cxgb4vf_get_drvinfo(struct net_device *arg0, struct ethtool_drvinfo *arg1)
{
  #line 154 
  cxgb4vf_get_drvinfo(arg0,arg1);
  #line 155 
  return;
}

#line 158  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/0/concurrency safety/weaver/cxgb4vf_main.i.aux"
void emg_wrapper_cxgb4vf_get_ethtool_stats(struct net_device *arg0, struct ethtool_stats *arg1, unsigned long long *arg2)
{
  #line 159 
  cxgb4vf_get_ethtool_stats(arg0,arg1,arg2);
  #line 160 
  return;
}

#line 163  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/0/concurrency safety/weaver/cxgb4vf_main.i.aux"
int emg_wrapper_cxgb4vf_get_fecparam(struct net_device *arg0, struct ethtool_fecparam *arg1)
{
  #line 164 
  return cxgb4vf_get_fecparam(arg0,arg1);
}

#line 168  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/0/concurrency safety/weaver/cxgb4vf_main.i.aux"
int emg_wrapper_cxgb4vf_get_link_ksettings(struct net_device *arg0, struct ethtool_link_ksettings *arg1)
{
  #line 169 
  return cxgb4vf_get_link_ksettings(arg0,arg1);
}

#line 173  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/0/concurrency safety/weaver/cxgb4vf_main.i.aux"
unsigned int emg_wrapper_cxgb4vf_get_msglevel(struct net_device *arg0)
{
  #line 174 
  return cxgb4vf_get_msglevel(arg0);
}

#line 178  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/0/concurrency safety/weaver/cxgb4vf_main.i.aux"
void emg_wrapper_cxgb4vf_get_pauseparam(struct net_device *arg0, struct ethtool_pauseparam *arg1)
{
  #line 179 
  cxgb4vf_get_pauseparam(arg0,arg1);
  #line 180 
  return;
}

#line 183  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/0/concurrency safety/weaver/cxgb4vf_main.i.aux"
void emg_wrapper_cxgb4vf_get_regs(struct net_device *arg0, struct ethtool_regs *arg1, void *arg2)
{
  #line 184 
  cxgb4vf_get_regs(arg0,arg1,arg2);
  #line 185 
  return;
}

#line 188  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/0/concurrency safety/weaver/cxgb4vf_main.i.aux"
int emg_wrapper_cxgb4vf_get_regs_len(struct net_device *arg0)
{
  #line 189 
  return cxgb4vf_get_regs_len(arg0);
}

#line 193  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/0/concurrency safety/weaver/cxgb4vf_main.i.aux"
void emg_wrapper_cxgb4vf_get_ringparam(struct net_device *arg0, struct ethtool_ringparam *arg1)
{
  #line 194 
  cxgb4vf_get_ringparam(arg0,arg1);
  #line 195 
  return;
}

#line 198  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/0/concurrency safety/weaver/cxgb4vf_main.i.aux"
int emg_wrapper_cxgb4vf_get_sset_count(struct net_device *arg0, int arg1)
{
  #line 199 
  return cxgb4vf_get_sset_count(arg0,arg1);
}

#line 203  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/0/concurrency safety/weaver/cxgb4vf_main.i.aux"
struct net_device_stats *emg_wrapper_cxgb4vf_get_stats(struct net_device *arg0)
{
  #line 204 
  return cxgb4vf_get_stats(arg0);
}

#line 208  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/0/concurrency safety/weaver/cxgb4vf_main.i.aux"
void emg_wrapper_cxgb4vf_get_strings(struct net_device *arg0, unsigned int arg1, unsigned char *arg2)
{
  #line 209 
  cxgb4vf_get_strings(arg0,arg1,arg2);
  #line 210 
  return;
}

#line 213  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/0/concurrency safety/weaver/cxgb4vf_main.i.aux"
void emg_wrapper_cxgb4vf_get_wol(struct net_device *arg0, struct ethtool_wolinfo *arg1)
{
  #line 214 
  cxgb4vf_get_wol(arg0,arg1);
  #line 215 
  return;
}

#line 218  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/0/concurrency safety/weaver/cxgb4vf_main.i.aux"
int emg_wrapper_cxgb4vf_open(struct net_device *arg0)
{
  #line 219 
  return cxgb4vf_open(arg0);
}

#line 223  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/0/concurrency safety/weaver/cxgb4vf_main.i.aux"
int emg_wrapper_cxgb4vf_pci_probe(struct pci_dev *arg0, struct pci_device_id *arg1)
{
  #line 224 
  return cxgb4vf_pci_probe(arg0,arg1);
}

#line 228  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/0/concurrency safety/weaver/cxgb4vf_main.i.aux"
void emg_wrapper_cxgb4vf_pci_remove(struct pci_dev *arg0)
{
  #line 229 
  cxgb4vf_pci_remove(arg0);
  #line 230 
  return;
}

#line 233  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/0/concurrency safety/weaver/cxgb4vf_main.i.aux"
void emg_wrapper_cxgb4vf_pci_shutdown(struct pci_dev *arg0)
{
  #line 234 
  cxgb4vf_pci_shutdown(arg0);
  #line 235 
  return;
}

#line 238  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/0/concurrency safety/weaver/cxgb4vf_main.i.aux"
int emg_wrapper_cxgb4vf_phys_id(struct net_device *arg0, enum ethtool_phys_id_state arg1)
{
  #line 239 
  return cxgb4vf_phys_id(arg0,arg1);
}

#line 243  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/0/concurrency safety/weaver/cxgb4vf_main.i.aux"
void emg_wrapper_cxgb4vf_poll_controller(struct net_device *arg0)
{
  #line 244 
  cxgb4vf_poll_controller(arg0);
  #line 245 
  return;
}

#line 248  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/0/concurrency safety/weaver/cxgb4vf_main.i.aux"
int emg_wrapper_cxgb4vf_set_coalesce(struct net_device *arg0, struct ethtool_coalesce *arg1)
{
  #line 249 
  return cxgb4vf_set_coalesce(arg0,arg1);
}

#line 253  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/0/concurrency safety/weaver/cxgb4vf_main.i.aux"
int emg_wrapper_cxgb4vf_set_features(struct net_device *arg0, unsigned long long arg1)
{
  #line 254 
  return cxgb4vf_set_features(arg0,arg1);
}

#line 258  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/0/concurrency safety/weaver/cxgb4vf_main.i.aux"
int emg_wrapper_cxgb4vf_set_mac_addr(struct net_device *arg0, void *arg1)
{
  #line 259 
  return cxgb4vf_set_mac_addr(arg0,arg1);
}

#line 263  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/0/concurrency safety/weaver/cxgb4vf_main.i.aux"
void emg_wrapper_cxgb4vf_set_msglevel(struct net_device *arg0, unsigned int arg1)
{
  #line 264 
  cxgb4vf_set_msglevel(arg0,arg1);
  #line 265 
  return;
}

#line 268  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/0/concurrency safety/weaver/cxgb4vf_main.i.aux"
int emg_wrapper_cxgb4vf_set_ringparam(struct net_device *arg0, struct ethtool_ringparam *arg1)
{
  #line 269 
  return cxgb4vf_set_ringparam(arg0,arg1);
}

#line 273  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/0/concurrency safety/weaver/cxgb4vf_main.i.aux"
void emg_wrapper_cxgb4vf_set_rxmode(struct net_device *arg0)
{
  #line 274 
  cxgb4vf_set_rxmode(arg0);
  #line 275 
  return;
}

#line 278  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/0/concurrency safety/weaver/cxgb4vf_main.i.aux"
int emg_wrapper_cxgb4vf_stop(struct net_device *arg0)
{
  #line 279 
  return cxgb4vf_stop(arg0);
}

#line 283  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/0/concurrency safety/weaver/cxgb4vf_main.i.aux"
void *emg_wrapper_interfaces_next(struct seq_file *arg0, void *arg1, long long *arg2)
{
  #line 284 
  return interfaces_next(arg0,arg1,arg2);
}

#line 288  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/0/concurrency safety/weaver/cxgb4vf_main.i.aux"
int emg_wrapper_interfaces_open(struct inode *arg0, struct file *arg1)
{
  #line 289 
  return interfaces_open(arg0,arg1);
}

#line 293  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/0/concurrency safety/weaver/cxgb4vf_main.i.aux"
int emg_wrapper_interfaces_show(struct seq_file *arg0, void *arg1)
{
  #line 294 
  return interfaces_show(arg0,arg1);
}

#line 298  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/0/concurrency safety/weaver/cxgb4vf_main.i.aux"
void *emg_wrapper_interfaces_start(struct seq_file *arg0, long long *arg1)
{
  #line 299 
  return interfaces_start(arg0,arg1);
}

#line 303  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/0/concurrency safety/weaver/cxgb4vf_main.i.aux"
void emg_wrapper_interfaces_stop(struct seq_file *arg0, void *arg1)
{
  #line 304 
  interfaces_stop(arg0,arg1);
  #line 305 
  return;
}

#line 308  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/0/concurrency safety/weaver/cxgb4vf_main.i.aux"
void *emg_wrapper_mboxlog_next(struct seq_file *arg0, void *arg1, long long *arg2)
{
  #line 309 
  return mboxlog_next(arg0,arg1,arg2);
}

#line 313  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/0/concurrency safety/weaver/cxgb4vf_main.i.aux"
int emg_wrapper_mboxlog_open(struct inode *arg0, struct file *arg1)
{
  #line 314 
  return mboxlog_open(arg0,arg1);
}

#line 318  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/0/concurrency safety/weaver/cxgb4vf_main.i.aux"
int emg_wrapper_mboxlog_show(struct seq_file *arg0, void *arg1)
{
  #line 319 
  return mboxlog_show(arg0,arg1);
}

#line 323  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/0/concurrency safety/weaver/cxgb4vf_main.i.aux"
void *emg_wrapper_mboxlog_start(struct seq_file *arg0, long long *arg1)
{
  #line 324 
  return mboxlog_start(arg0,arg1);
}

#line 328  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/0/concurrency safety/weaver/cxgb4vf_main.i.aux"
void emg_wrapper_mboxlog_stop(struct seq_file *arg0, void *arg1)
{
  #line 329 
  mboxlog_stop(arg0,arg1);
  #line 330 
  return;
}

#line 333  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/0/concurrency safety/weaver/cxgb4vf_main.i.aux"
int emg_wrapper_resources_open(struct inode *arg0, struct file *arg1)
{
  #line 334 
  return resources_open(arg0,arg1);
}

#line 338  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/0/concurrency safety/weaver/cxgb4vf_main.i.aux"
int emg_wrapper_sge_qinfo_open(struct inode *arg0, struct file *arg1)
{
  #line 339 
  return sge_qinfo_open(arg0,arg1);
}

#line 343  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/0/concurrency safety/weaver/cxgb4vf_main.i.aux"
int emg_wrapper_sge_qinfo_show(struct seq_file *arg0, void *arg1)
{
  #line 344 
  return sge_qinfo_show(arg0,arg1);
}

#line 348  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/0/concurrency safety/weaver/cxgb4vf_main.i.aux"
void *emg_wrapper_sge_qstats_next(struct seq_file *arg0, void *arg1, long long *arg2)
{
  #line 349 
  return sge_qstats_next(arg0,arg1,arg2);
}

#line 353  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/0/concurrency safety/weaver/cxgb4vf_main.i.aux"
int emg_wrapper_sge_qstats_open(struct inode *arg0, struct file *arg1)
{
  #line 354 
  return sge_qstats_open(arg0,arg1);
}

#line 358  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/0/concurrency safety/weaver/cxgb4vf_main.i.aux"
int emg_wrapper_sge_qstats_show(struct seq_file *arg0, void *arg1)
{
  #line 359 
  return sge_qstats_show(arg0,arg1);
}

#line 363  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/0/concurrency safety/weaver/cxgb4vf_main.i.aux"
void *emg_wrapper_sge_qstats_start(struct seq_file *arg0, long long *arg1)
{
  #line 364 
  return sge_qstats_start(arg0,arg1);
}

#line 368  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/0/concurrency safety/weaver/cxgb4vf_main.i.aux"
void emg_wrapper_sge_qstats_stop(struct seq_file *arg0, void *arg1)
{
  #line 369 
  sge_qstats_stop(arg0,arg1);
  #line 370 
  return;
}

#line 373  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/0/concurrency safety/weaver/cxgb4vf_main.i.aux"
void *emg_wrapper_sge_queue_next(struct seq_file *arg0, void *arg1, long long *arg2)
{
  #line 374 
  return sge_queue_next(arg0,arg1,arg2);
}

#line 378  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/0/concurrency safety/weaver/cxgb4vf_main.i.aux"
void *emg_wrapper_sge_queue_start(struct seq_file *arg0, long long *arg1)
{
  #line 379 
  return sge_queue_start(arg0,arg1);
}

#line 383  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/0/concurrency safety/weaver/cxgb4vf_main.i.aux"
void emg_wrapper_sge_queue_stop(struct seq_file *arg0, void *arg1)
{
  #line 384 
  sge_queue_stop(arg0,arg1);
  #line 385 
  return;
}

#line 403  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/0/concurrency safety/weaver/cxgb4vf_main.i.aux"
static void cif_set_bit(long nr, unsigned long *addr)
{
  #line 406 
  ldv_set_bit(nr,addr);
  #line 407 
  return;
}

#line 410  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/0/concurrency safety/weaver/cxgb4vf_main.i.aux"
static void cif_clear_bit(long nr, unsigned long *addr)
{
  #line 413 
  ldv_clear_bit(nr,addr);
  #line 414 
  return;
}

#line 417  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/0/concurrency safety/weaver/cxgb4vf_main.i.aux"
static void INIT_LIST_HEAD(struct list_head *list)
{
  #line 420 
  ldv_init_list_head(list);
  #line 421 
  return;
}

#line 480  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/0/concurrency safety/weaver/cxgb4vf_main.i.aux"
static void cif_bitmap_zero(unsigned long *dst, unsigned int nbits)
{
  #line 483 
  ldv_bitmap_zero(dst,nbits);
  #line 484 
  return;
}

#line 508  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/0/concurrency safety/weaver/cxgb4vf_main.i.aux"
static bool IS_ERR_OR_NULL(void *ptr)
{
  #line 511 
  return ldv_is_err_or_null(ptr);
}

#line 760  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/0/concurrency safety/weaver/cxgb4vf_main.i.aux"
static void *kzalloc(size_t size, gfp_t flags)
{
  #line 763 
  return ldv_kzalloc(size,flags);
}

#line 933  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/0/concurrency safety/weaver/cxgb4vf_main.i.aux"
static int cif_request_irq(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char *name, void *dev)
{
  #line 937 
  return emg_request_irq(irq,handler,flags,name,dev);
}

#line 941  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/0/concurrency safety/weaver/cxgb4vf_main.i.aux"
static void *cif_free_irq(unsigned int ldv_func_arg1, void *ldv_func_arg2)
{
  #line 945 
  return emg_free_irq(ldv_func_arg1,ldv_func_arg2);
}

#line 949  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/0/concurrency safety/weaver/cxgb4vf_main.i.aux"
static void cif_spin_lock_stats_lock_of_adapter(spinlock_t *lock)
{
  #line 952 
  ldv_spin_model_lock((char *)"stats_lock_of_adapter");
  #line 954 
  spin_lock(lock);
  #line 955 
  return;
}

#line 958  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/0/concurrency safety/weaver/cxgb4vf_main.i.aux"
static void cif_spin_unlock_stats_lock_of_adapter(spinlock_t *lock)
{
  #line 961 
  ldv_spin_model_unlock((char *)"stats_lock_of_adapter");
  #line 963 
  spin_unlock(lock);
  #line 964 
  return;
}

#line 967  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/0/concurrency safety/weaver/cxgb4vf_main.i.aux"
static int cif_seq_open(struct file *ldv_func_arg1, struct seq_operations *ldv_func_arg2)
{
  #line 971 
  return emg_seq_open(ldv_func_arg1,ldv_func_arg2);
}

#line 975  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/0/concurrency safety/weaver/cxgb4vf_main.i.aux"
static struct dentry *cif_debugfs_create_file(char *name, umode_t mode, struct dentry *parent, void *data, struct file_operations *fops)
{
  #line 979 
  return emg_debugfs_create_file(name,(unsigned short)((int)mode),parent,data,
                              fops);
}

#line 983  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/0/concurrency safety/weaver/cxgb4vf_main.i.aux"
static struct net_device *cif_alloc_etherdev_mqs(int sizeof_priv, unsigned int txqs, unsigned int rxqs)
{
  #line 987 
  return emg_alloc_etherdev_mqs(sizeof_priv,txqs,rxqs);
}

#line 991  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/0/concurrency safety/weaver/cxgb4vf_main.i.aux"
static int cif_register_netdev(struct net_device *dev)
{
  #line 995 
  return emg_register_netdev(dev);
}

#line 999  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/0/concurrency safety/weaver/cxgb4vf_main.i.aux"
static struct dentry *cif_debugfs_create_dir(char *name, struct dentry *parent)
{
  #line 1003 
  return emg_debugfs_create_dir(name,parent);
}

#line 1007  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/0/concurrency safety/weaver/cxgb4vf_main.i.aux"
static void cif_unregister_netdev(struct net_device *dev)
{
  #line 1011 
  emg_unregister_netdev(dev);
  #line 1012 
  return;
}

#line 1015  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/0/concurrency safety/weaver/cxgb4vf_main.i.aux"
static void cif_free_netdev(struct net_device *dev)
{
  #line 1019 
  emg_free_netdev(dev);
  #line 1020 
  return;
}

#line 1023  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/0/concurrency safety/weaver/cxgb4vf_main.i.aux"
static int cif___pci_register_driver(struct pci_driver *ldv_func_arg1, struct module *ldv_func_arg2, char *mod_name)
{
  #line 1027 
  return emg___pci_register_driver(ldv_func_arg1,ldv_func_arg2,mod_name);
}

#line 1031  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/0/concurrency safety/weaver/cxgb4vf_main.i.aux"
static void cif_debugfs_remove(struct dentry *dentry)
{
  #line 1035 
  emg_debugfs_remove(dentry);
  #line 1036 
  return;
}

#line 1039  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/0/concurrency safety/weaver/cxgb4vf_main.i.aux"
static void cif_pci_unregister_driver(struct pci_driver *dev)
{
  #line 1043 
  emg_pci_unregister_driver(dev);
  #line 1044 
  return;
}

/* compiler builtin: 
   unsigned short __builtin_bswap16(unsigned short);   */
/* compiler builtin: 
   unsigned long __builtin_bswap64(unsigned long);   */
/* compiler builtin: 
   void __builtin_prefetch(void const * , ...);   */
#line 7  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/0/concurrency safety/weaver/sge.i.aux"
#line 7 
void ldv_atomic_inc(atomic_t *v);
#line 233  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static unsigned long __ffs(unsigned long word)
{
  #line 235 
  ldv_inline_asm();
  #line 238 
  return word;
}

#line 324  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static int fls(unsigned int x)
{
  #line 326 
  int r;
  #line 327 
  ldv_inline_asm();
  #line 351 
  return r + 1;
}

#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 120  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/0/concurrency safety/weaver/sge.i.aux"
static void cif_set_bit_0(long nr, unsigned long *addr);
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 127  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/0/concurrency safety/weaver/sge.i.aux"
static void cif_clear_bit_0(long nr, unsigned long *addr);
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/log2.h"
__inline static int __ilog2_u32(u32 n)
{
  #line 24 
  return fls(n) + -1;
}

#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/jump_label.h"
__inline static bool arch_static_branch(struct static_key *key, bool branch)
{
  #line 27 
  ldv_inline_asm();
  #line 28 
  ldv_inline_asm();
  #line 34 
  return (_Bool)0;
  #line 35 
  l_yes: 
         #line 35 
  ;
  #line 36 
  return (_Bool)1;
}

#line 198  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
__inline static bool static_key_false(struct static_key *key)
{
  #line 200 
  return arch_static_branch(key,(_Bool)0);
}

#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/percpu.h"
#line 88 
void __bad_percpu_size(void);
#line 309  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-defs.h"
#line 309 
void __bad_size_call_parameter(void);
#line 314  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-defs.h"
__inline static void __this_cpu_preempt_check(char *op)
{
  #line 316 
  return;
}

#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bug.h"
#line 89 
void __warn_printk(char * , ...);
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/page_64.h"
#line 14 
extern unsigned long page_offset_base;
#line 15 
#line 15 
extern unsigned long vmalloc_base;
#line 16 
#line 16 
extern unsigned long vmemmap_base;
#line 29 
#line 29 
unsigned long __phys_addr(unsigned long);
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cmpxchg_64.h"
__inline static int arch_atomic_read_0(atomic_t *v)
{
  #line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
  union __anonunion___u_774 __u;
  #line 31 
  __read_once_size((void *)(& v->counter),(void *)(& __u.__c),4);
  #line 31 
  return (__u.__val);
}

#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
__inline static bool arch_atomic_dec_and_test(atomic_t *v)
{
  #line 125 
  bool c;
  #line 126 
  ldv_inline_asm();
  #line 125 
  return c;
}

#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
__inline static int atomic_read_0(atomic_t *v)
{
  #line 26 
  kasan_check_read((void *)v,4U);
  #line 27 
  return arch_atomic_read_0(v);
}

#line 237 
#line 183  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/0/concurrency safety/weaver/sge.i.aux"
static void atomic_inc(atomic_t *v);
#line 745  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
__inline static bool atomic_dec_and_test(atomic_t *v)
{
  #line 747 
  kasan_check_read((void *)v,4U);
  #line 748 
  return arch_atomic_dec_and_test(v);
}

#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cpufeature.h"
__inline static bool _static_cpu_has(u16 bit)
{
  #line 177 
  ldv_inline_asm();
  #line 178 
  ldv_inline_asm();
  #line 211 
  t_yes: 
         #line 211 
  ;
  #line 212 
  return (_Bool)1;
  #line 213 
  t_no: 
        #line 213 
  ;
  #line 214 
  return (_Bool)0;
}

#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_api_smp.h"
#line 37 
int _raw_spin_trylock(raw_spinlock_t *);
#line 336  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock_0(spinlock_t *lock)
{
  #line 338 
  _raw_spin_lock(& lock->__anonCompField_spinlock_25.rlock);
  #line 339 
  return;
}

#line 340 
#line 805  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/0/concurrency safety/weaver/sge.i.aux"
static void cif_spin_lock_intrq_lock_of_sge(spinlock_t *lock);
#line 346  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static int spin_trylock(spinlock_t *lock)
{
  #line 348 
  return _raw_spin_trylock(& lock->__anonCompField_spinlock_25.rlock);
}

#line 350 
#line 556  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/0/concurrency safety/weaver/sge.i.aux"
static int cif_spin_trylock__xmit_lock_of_netdev_queue(spinlock_t *lock);
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_0(spinlock_t *lock)
{
  #line 378 
  _raw_spin_unlock(& lock->__anonCompField_spinlock_25.rlock);
  #line 379 
  return;
}

#line 380 
#line 578  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/0/concurrency safety/weaver/sge.i.aux"
static void cif_spin_unlock__xmit_lock_of_netdev_queue(spinlock_t *lock);
#line 380  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 814  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/0/concurrency safety/weaver/sge.i.aux"
static void cif_spin_unlock_intrq_lock_of_sge(spinlock_t *lock);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 23 
int ldv_undef_int(void);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 25 
void *ldv_kcalloc(size_t n, size_t size, gfp_t flags);
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmdebug.h"
#line 12 
void dump_page(struct page *, char *);
#line 410  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nodemask.h"
#line 410 
extern nodemask_t node_states[5U];
#line 413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nodemask.h"
__inline static int node_state(int node, enum node_states state)
{
  #line 415 
  return (int)test_bit((long)node,
               (unsigned long *)(& node_states[(unsigned int)state].bits));
}

#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
#line 81 
extern unsigned long jiffies;
#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
#line 90 
void init_timer_key(struct timer_list *, void (*)(struct timer_list *), unsigned int, char *, struct lock_class_key *);
#line 173 
#line 823  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/0/concurrency safety/weaver/sge.i.aux"
static int cif_mod_timer(struct timer_list *timer, unsigned long expires);
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
#line 831  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/0/concurrency safety/weaver/sge.i.aux"
static int cif_del_timer_sync(struct timer_list *timer);
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page-flags.h"
__inline static struct page *compound_head(struct page *page)
{
  #line 175 
  union __anonunion___u_854 __u;
  #line 174 
  __read_once_size((void *)(& page->__anonCompField_page_43.__anonCompField___anonunion_131_38.compound_head),(void *)(& __u.__c),8);
  #line 174 
  unsigned long head = (__u.__val);
  #line 176 
  if ((long)((head & 1UL) != 0UL) != 0L) 
                                         #line 177 
                                         return (struct page *)(head + 18446744073709551615UL);
  #line 178 
  return page;
}

#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/io.h"
__inline static void writeq(u64 val, void *addr)
{
  #line 99 
  ldv_inline_asm();
  #line 100 
  return;
}

#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/topology.h"
__inline static int numa_node_id(void)
{
  #line 88 
  int pscr_ret__;
  {
    #line 88 
    void *__vpp_verify = (void *)0;
    #line 88 
    void *tmp = __vpp_verify;
  }
  #line 88 
  switch (4UL) {
    #line 88 
    int pfo_ret___2;
    #line 88 
    int pfo_ret__;
    #line 88 
    int pfo_ret___0;
    #line 88 
    int pfo_ret___1;
    #line 88 
    case (unsigned long)1: 
                           #line 88 
    ;
    #line 88 
    switch (4UL) {
      #line 88 
      case (unsigned long)1: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      case (unsigned long)2: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      case (unsigned long)4: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      case (unsigned long)8: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      default: 
               #line 88 
      ;
      #line 88 
      __bad_percpu_size();
    }
    #line 88 
    pscr_ret__ = pfo_ret__;
    #line 88 
    break;
    #line 88 
    case (unsigned long)2: 
                           #line 88 
    ;
    #line 88 
    switch (4UL) {
      #line 88 
      case (unsigned long)1: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      case (unsigned long)2: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      case (unsigned long)4: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      case (unsigned long)8: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      default: 
               #line 88 
      ;
      #line 88 
      __bad_percpu_size();
    }
    #line 88 
    pscr_ret__ = pfo_ret___0;
    #line 88 
    break;
    #line 88 
    case (unsigned long)4: 
                           #line 88 
    ;
    #line 88 
    switch (4UL) {
      #line 88 
      case (unsigned long)1: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      case (unsigned long)2: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      case (unsigned long)4: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      case (unsigned long)8: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      default: 
               #line 88 
      ;
      #line 88 
      __bad_percpu_size();
    }
    #line 88 
    pscr_ret__ = pfo_ret___1;
    #line 88 
    break;
    #line 88 
    case (unsigned long)8: 
                           #line 88 
    ;
    #line 88 
    switch (4UL) {
      #line 88 
      case (unsigned long)1: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      case (unsigned long)2: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      case (unsigned long)4: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      case (unsigned long)8: 
                             #line 88 
      ;
      #line 89 
      ldv_inline_asm();
      #line 88 
      break;
      #line 88 
      default: 
               #line 88 
      ;
      #line 88 
      __bad_percpu_size();
    }
    #line 88 
    pscr_ret__ = pfo_ret___2;
    #line 88 
    break;
    #line 88 
    default: 
             #line 88 
    ;
    #line 88 
    __bad_size_call_parameter();
    #line 88 
    break;
  }
  #line 88 
  return pscr_ret__;
}

#line 177  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/topology.h"
__inline static int numa_mem_id(void)
{
  #line 179 
  return numa_node_id();
}

#line 490  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/gfp.h"
#line 490 
struct page *__alloc_pages_nodemask(gfp_t, unsigned int, int, nodemask_t *);
#line 494  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/gfp.h"
__inline static struct page *__alloc_pages(gfp_t gfp_mask, unsigned int order, int preferred_nid)
{
  #line 496 
  return __alloc_pages_nodemask(gfp_mask,order,preferred_nid,(nodemask_t *)0);
}

#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/gfp.h"
__inline static struct page *__alloc_pages_node(int nid, gfp_t gfp_mask, unsigned int order)
{
  #line 506 
  if ((long)((unsigned int)nid > 1023U) != 0L) {
    #line 507 
    ldv_inline_asm();
    #line 508 
    ldv_inline_asm();
    #line 509 
    ldv_inline_asm();
    #line 506 
    ;
  }
  {
    #line 507 
    int tmp_0;
    #line 507 
    if ((gfp_mask & 2097152U) != 0U) {
      #line 507 
      if (node_state(nid,(enum node_states)N_ONLINE) == 0) 
                                                           #line 507 
                                                           tmp_0 = 1; else 
                                                                    #line 507 
                                                                    tmp_0 = 0;
    }
    else 
         #line 507 
         tmp_0 = 0;
    #line 507 
    int __ret_warn_on = tmp_0;
    #line 507 
    if ((long)(__ret_warn_on != 0) != 0L) {
      #line 508 
      ldv_inline_asm();
      #line 509 
      ldv_inline_asm();
    }
    #line 507 
    long tmp_2 = (long)(__ret_warn_on != 0);
  }
  #line 509 
  return __alloc_pages(gfp_mask,order,nid);
}

#line 517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/gfp.h"
__inline static struct page *alloc_pages_node(int nid, gfp_t gfp_mask, unsigned int order)
{
  #line 520 
  if (nid == -1) 
                 #line 521 
                 nid = numa_mem_id();
  #line 523 
  return __alloc_pages_node(nid,gfp_mask,order);
}

#line 566 
#line 566 
void __free_pages(struct page *, unsigned int);
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page_ref.h"
#line 11 
extern struct tracepoint __tracepoint_page_ref_mod;
#line 12 
#line 12 
extern struct tracepoint __tracepoint_page_ref_mod_and_test;
#line 30 
#line 30 
void __page_ref_mod(struct page *, int);
#line 31 
#line 31 
void __page_ref_mod_and_test(struct page *, int, int);
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page_ref.h"
__inline static int page_ref_count(struct page *page)
{
  #line 67 
  return atomic_read_0(& page->_refcount);
}

#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page_ref.h"
__inline static void page_ref_inc(struct page *page)
{
  #line 107 
  atomic_inc(& page->_refcount);
  #line 108 
  if ((int)static_key_false(& __tracepoint_page_ref_mod.key) != 0) 
                                                                   #line 109 
                                                                   __page_ref_mod(page,1);
  #line 110 
  return;
}

#line 137  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/page_ref.h"
__inline static int page_ref_dec_and_test(struct page *page)
{
  #line 139 
  int ret = (int)atomic_dec_and_test(& page->_refcount);
  #line 141 
  if ((int)static_key_false(& __tracepoint_page_ref_mod_and_test.key) != 0) 
    #line 142 
    __page_ref_mod_and_test(page,-1,ret);
  #line 143 
  return ret;
}

#line 590  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static int put_page_testzero(struct page *page)
{
  #line 592 
  if ((long)(page_ref_count(page) == 0) != 0L) {
    #line 592 
    dump_page(page,(char *)"VM_BUG_ON_PAGE(");
    #line 593 
    ldv_inline_asm();
    #line 594 
    ldv_inline_asm();
    #line 595 
    ldv_inline_asm();
    #line 592 
    ;
  }
  #line 593 
  return page_ref_dec_and_test(page);
}

#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static bool is_vmalloc_addr(void *x)
{
  #line 633 
  int tmp_1;
  #line 631 
  unsigned long addr = (unsigned long)x;
  #line 633 
  if (addr >= vmalloc_base) {
    #line 633 
    unsigned long tmp_0;
    #line 633 
    if ((int)_static_cpu_has((unsigned short)528) != 0) 
                                                        #line 633 
                                                        tmp_0 = 14073748835532800UL; else 
                                                                    #line 633 
                                                                    tmp_0 = 35184372088832UL;
    #line 633 
    ;
    #line 633 
    if ((tmp_0 + vmalloc_base) + 18446744073709551615UL > addr) 
                                                                #line 633 
                                                                tmp_1 = 1; else 
                                                                    #line 633 
                                                                    tmp_1 = 0;
  }
  else 
       #line 633 
       tmp_1 = 0;
  #line 633 
  return (_Bool)(tmp_1 != 0);
}

#line 736 
#line 736 
void __put_page(struct page *);
#line 935  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static enum zone_type page_zonenum(struct page *page)
{
  #line 937 
  return (enum zone_type)((unsigned int)(page->flags >> 51UL) & 7U);
}

#line 941  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static bool is_zone_device_page(struct page *page)
{
  #line 943 
  return (_Bool)(page_zonenum(page) == (unsigned int)ZONE_DEVICE);
}

#line 955 
#line 955 
void __put_devmap_managed_page(struct page *);
#line 956 
#line 956 
extern struct static_key_false devmap_managed_key;
#line 957  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static bool put_devmap_managed_page(struct page *page)
{
  #line 959 
  bool branch;
  #line 959 
  branch = arch_static_branch(& devmap_managed_key.key,(_Bool)0);
  #line 959 
  if ((long)((long)((int)branch != 0)) == 0L) 
                                              #line 960 
                                              return (_Bool)0;
  #line 961 
  if (! is_zone_device_page(page)) 
                                   #line 962 
                                   return (_Bool)0;
  #line 963 
  switch ((unsigned int)(page->__anonCompField_page_43.__anonCompField___anonunion_131_42.pgmap)->type) {
    #line 964 
    case (unsigned int)1: 
                          #line 964 
    ;
    #line 965 
    case (unsigned int)2: 
                          #line 965 
    ;
    #line 966 
    __put_devmap_managed_page(page);
    #line 967 
    return (_Bool)1;
    #line 968 
    default: 
             #line 968 
    ;
    #line 969 
    break;
  }
  #line 971 
  return (_Bool)0;
}

#line 1001  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static void get_page(struct page *page)
{
  #line 1003 
  page = compound_head(page);
  #line 1008 
  if ((long)((unsigned int)page_ref_count(page) + 127U <= 127U) != 0L) {
    #line 1008 
    dump_page(page,(char *)"VM_BUG_ON_PAGE(");
    #line 1009 
    ldv_inline_asm();
    #line 1010 
    ldv_inline_asm();
    #line 1011 
    ldv_inline_asm();
    #line 1008 
    ;
  }
  #line 1009 
  page_ref_inc(page);
  #line 1010 
  return;
}

#line 1021  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static void put_page(struct page *page)
{
  #line 1023 
  page = compound_head(page);
  #line 1031 
  if ((int)put_devmap_managed_page(page) != 0) 
                                               #line 1032 
                                               return;
  #line 1034 
  if (put_page_testzero(page) != 0) 
                                    #line 1035 
                                    __put_page(page);
  #line 1036 
  return;
}

#line 1299  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static void *lowmem_page_address(struct page *page)
{
  #line 1301 
  return (void *)((unsigned long)((unsigned long long)((page - (struct page *)vmemmap_base) / 64L) << 12) + page_offset_base);
}

#line 1369  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static bool page_is_pfmemalloc(struct page *page)
{
  #line 1375 
  return (_Bool)(page->__anonCompField_page_43.__anonCompField___anonunion_131_31.index == 18446744073709551615UL);
}

#line 607  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 399  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/0/concurrency safety/weaver/sge.i.aux"
static void *kcalloc(size_t n, size_t size, gfp_t flags);
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/checksum.h"
__inline static __wsum csum_unfold(__sum16 n)
{
  #line 109 
  return (unsigned int)n;
}

#line 1680  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
#line 1680 
char *dev_driver_string(struct device *);
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-debug.h"
#line 21 
void debug_dma_map_single(struct device *, void *, unsigned long);
#line 24 
#line 24 
void debug_dma_map_page(struct device *, struct page *, size_t, size_t, int, dma_addr_t);
#line 28 
#line 28 
void debug_dma_mapping_error(struct device *, dma_addr_t);
#line 30 
#line 30 
void debug_dma_unmap_page(struct device *, dma_addr_t, size_t, int);
#line 52 
#line 52 
void debug_dma_sync_single_for_cpu(struct device *, dma_addr_t, size_t, int);
#line 143  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static int valid_dma_direction(int dma_direction)
{
  #line 146 
  return (unsigned int)dma_direction <= 2U;
}

#line 191  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static bool dma_is_direct(struct dma_map_ops *ops)
{
  #line 193 
  return (_Bool)((long)(ops == (struct dma_map_ops *)0) != 0L);
}

#line 200 
#line 200 
dma_addr_t dma_direct_map_page(struct device *, struct page *, unsigned long, size_t, enum dma_data_direction, unsigned long);
#line 228 
#line 228 
void dma_direct_unmap_page(struct device *, dma_addr_t, size_t, enum dma_data_direction, unsigned long);
#line 232 
#line 232 
void dma_direct_sync_single_for_cpu(struct device *, dma_addr_t, size_t, enum dma_data_direction);
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/dma-mapping.h"
#line 19 
extern struct dma_map_ops *dma_ops;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/dma-mapping.h"
__inline static struct dma_map_ops *get_arch_dma_ops(struct bus_type *bus)
{
  #line 23 
  return dma_ops;
}

#line 261  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static struct dma_map_ops *get_dma_ops(struct device *dev)
{
  #line 263 
  if (dev->dma_ops != (struct dma_map_ops *)0) 
                                               #line 264 
                                               return dev->dma_ops;
  #line 265 
  return get_arch_dma_ops(dev->bus);
}

#line 274  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static dma_addr_t dma_map_page_attrs(struct device *dev, struct page *page, size_t offset, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 279 
  dma_addr_t addr;
  #line 278 
  struct dma_map_ops *ops = get_dma_ops(dev);
  #line 281 
  if ((long)(valid_dma_direction((int)dir) == 0) != 0L) {
    #line 282 
    ldv_inline_asm();
    #line 283 
    ldv_inline_asm();
    #line 284 
    ldv_inline_asm();
    #line 281 
    ;
  }
  #line 282 
  if ((int)dma_is_direct(ops) != 0) 
                                    #line 283 
                                    addr = dma_direct_map_page(dev,page,offset,size,dir,attrs); else 
                                                                    #line 285 
                                                                    addr = (*(ops->map_page))(dev,page,offset,size,dir,attrs);
  #line 286 
  debug_dma_map_page(dev,page,offset,size,(int)dir,addr);
  #line 288 
  return addr;
}

#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_unmap_page_attrs(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 294 
  struct dma_map_ops *ops = get_dma_ops(dev);
  #line 296 
  if ((long)(valid_dma_direction((int)dir) == 0) != 0L) {
    #line 297 
    ldv_inline_asm();
    #line 298 
    ldv_inline_asm();
    #line 299 
    ldv_inline_asm();
    #line 296 
    ;
  }
  #line 297 
  if ((int)dma_is_direct(ops) != 0) 
                                    #line 298 
                                    dma_direct_unmap_page(dev,addr,size,dir,attrs);
  else 
    #line 299 
    if (ops->unmap_page != (void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ))0) 
      #line 300 
      (*(ops->unmap_page))(dev,addr,size,dir,attrs);
  #line 301 
  debug_dma_unmap_page(dev,addr,size,(int)dir);
  #line 302 
  return;
}

#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_sync_single_for_cpu(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir)
{
  #line 380 
  struct dma_map_ops *ops = get_dma_ops(dev);
  #line 382 
  if ((long)(valid_dma_direction((int)dir) == 0) != 0L) {
    #line 383 
    ldv_inline_asm();
    #line 384 
    ldv_inline_asm();
    #line 385 
    ldv_inline_asm();
    #line 382 
    ;
  }
  #line 383 
  if ((int)dma_is_direct(ops) != 0) 
                                    #line 384 
                                    dma_direct_sync_single_for_cpu(dev,addr,size,dir);
  else 
    #line 385 
    if (ops->sync_single_for_cpu != (void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction ))0) 
      #line 386 
      (*(ops->sync_single_for_cpu))(dev,addr,size,dir);
  #line 387 
  debug_dma_sync_single_for_cpu(dev,addr,size,(int)dir);
  #line 388 
  return;
}

#line 433  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static int dma_mapping_error(struct device *dev, dma_addr_t dma_addr)
{
  #line 435 
  debug_dma_mapping_error(dev,dma_addr);
  #line 437 
  if (dma_addr == 18446744073709551615ULL) 
                                           #line 438 
                                           return -12;
  #line 439 
  return 0;
}

#line 442 
#line 442 
void *dma_alloc_attrs(struct device *, size_t, dma_addr_t *, gfp_t, unsigned long);
#line 444 
#line 444 
void dma_free_attrs(struct device *, size_t, void *, dma_addr_t, unsigned long);
#line 580  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static dma_addr_t dma_map_single_attrs(struct device *dev, void *ptr, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 584 
  int __ret_warn_once;
  {
    #line 584 
    bool __warned;
    #line 584 
    __ret_warn_once = (int)is_vmalloc_addr(ptr) != 0;
    #line 584 
    if ((long)(__ret_warn_once != 0) != 0L && (long)(! __warned) != 0L) {
      #line 584 
      __warned = (_Bool)1;
      {
        #line 584 
        int __ret_warn_on = 1;
        #line 584 
        if ((long)(__ret_warn_on != 0) != 0L) {
          #line 584 
          __warn_printk((char *)"%s %s: ",dev_driver_string(dev),dev_name(dev));
          #line 585 
          ldv_inline_asm();
          #line 586 
          ldv_inline_asm();
        }
        #line 584 
        long tmp_2 = (long)(__ret_warn_on != 0);
      }
    }
    }
  #line 584 
  if ((long)((long)(__ret_warn_once != 0)) != 0L) 
                                                  #line 586 
                                                  return 18446744073709551615ULL;
  #line 587 
  debug_dma_map_single(dev,ptr,size);
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  return dma_map_page_attrs(dev,
                           (struct page *)((__phys_addr((unsigned long)ptr) >> 12) + vmemmap_base),
                           (unsigned long)ptr & 4095UL,size,dir,attrs);
}

#line 592  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_unmap_single_attrs(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 595 
  dma_unmap_page_attrs(dev,addr,size,dir,attrs);
  #line 596 
  return;
}

#line 641  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void *dma_alloc_coherent(struct device *dev, size_t size, dma_addr_t *dma_handle, gfp_t gfp)
{
  #line 645 
  return dma_alloc_attrs(dev,size,dma_handle,gfp,
                      (unsigned long)(gfp >> 5) & 256UL);
}

#line 649  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_free_coherent(struct device *dev, size_t size, void *cpu_addr, dma_addr_t dma_handle)
{
  #line 652 
  dma_free_attrs(dev,size,cpu_addr,dma_handle,0UL);
  #line 653 
  return;
}

#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned int skb_frag_size(skb_frag_t *frag)
{
  #line 327 
  return frag->bv_len;
}

#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_frag_size_set(skb_frag_t *frag, unsigned int size)
{
  #line 337 
  frag->bv_len = size;
  #line 338 
  return;
}

#line 1032 
#line 1032 
struct sk_buff *__alloc_skb(unsigned int, gfp_t, int, int);
#line 1046  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static struct sk_buff *alloc_skb(unsigned int size, gfp_t priority)
{
  #line 1049 
  return __alloc_skb(size,priority,0,-1);
}

#line 1381  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_end_pointer(struct sk_buff *skb)
{
  #line 1383 
  return skb->head + (unsigned long)skb->end;
}

#line 2065  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static bool skb_is_nonlinear(struct sk_buff *skb)
{
  #line 2067 
  return (_Bool)(skb->data_len != 0U);
}

#line 2070  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned int skb_headlen(struct sk_buff *skb)
{
  #line 2072 
  return skb->len - skb->data_len;
}

#line 2102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void __skb_fill_page_desc(struct sk_buff *skb, int i, struct page *page, int off, int size)
{
  #line 2105 
  skb_frag_t *frag = & ((struct skb_shared_info *)skb_end_pointer(skb))->frags[i];
  #line 2112 
  frag->bv_page = page;
  #line 2113 
  frag->bv_offset = (unsigned int)off;
  #line 2114 
  skb_frag_size_set(frag,(unsigned int)size);
  #line 2116 
  page = compound_head(page);
  #line 2117 
  if ((int)page_is_pfmemalloc(page) != 0) 
                                          #line 2118 
                                          skb->pfmemalloc = (unsigned char)1U;
  #line 2119 
  return;
}

#line 2151  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_tail_pointer(struct sk_buff *skb)
{
  #line 2153 
  return skb->head + (unsigned long)skb->tail;
}

#line 2190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void *__skb_put(struct sk_buff *skb, unsigned int len)
{
  #line 2192 
  void *tmp = skb_tail_pointer(skb);
  #line 2193 
  if ((long)((int)skb_is_nonlinear(skb) != 0) != 0L) {
    #line 2194 
    ldv_inline_asm();
    #line 2195 
    ldv_inline_asm();
    #line 2196 
    ldv_inline_asm();
    #line 2193 
    ;
  }
  #line 2194 
  skb->tail += len;
  #line 2195 
  skb->len += len;
  #line 2196 
  return tmp;
}

#line 2254  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void *__skb_pull(struct sk_buff *skb, unsigned int len)
{
  #line 2256 
  skb->len -= len;
  #line 2257 
  if ((long)(skb->len < skb->data_len) != 0L) {
    #line 2258 
    ldv_inline_asm();
    #line 2259 
    ldv_inline_asm();
    #line 2260 
    ldv_inline_asm();
    #line 2257 
    ;
  }
  #line 2258 
  skb->data += (unsigned long)len;
  #line 2258 
  return (void *)skb->data;
}

#line 2458  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_transport_header(struct sk_buff *skb)
{
  #line 2460 
  return skb->head + (unsigned long)skb->transport_header;
}

#line 2475  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_network_header(struct sk_buff *skb)
{
  #line 2477 
  return skb->head + (unsigned long)skb->network_header;
}

#line 2559  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int skb_transport_offset(struct sk_buff *skb)
{
  #line 2561 
  ;
  #line 2561 
  return (int)(skb_transport_header(skb) - skb->data);
}

#line 2564  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static u32 skb_network_header_len(struct sk_buff *skb)
{
  #line 2566 
  return (unsigned int)((int)skb->transport_header - (int)skb->network_header);
}

#line 2574  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int skb_network_offset(struct sk_buff *skb)
{
  #line 2576 
  ;
  #line 2576 
  return (int)(skb_network_header(skb) - skb->data);
}

#line 2704  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_orphan(struct sk_buff *skb)
{
  #line 2706 
  if (skb->__anonCompField_sk_buff_96.__anonCompField___anonunion_538_95.destructor != (void (*)(struct sk_buff *))0) {
    #line 2707 
    (*(skb->__anonCompField_sk_buff_96.__anonCompField___anonunion_538_95.destructor))(skb);
    #line 2708 
    skb->__anonCompField_sk_buff_96.__anonCompField___anonunion_538_95.destructor = (void (*)(struct sk_buff *))0;
    #line 2709 
    skb->__anonCompField_sk_buff_93.sk = (struct sock *)0;
  }
  else 
    #line 2711 
    if ((long)(skb->__anonCompField_sk_buff_93.sk != (struct sock *)0) != 0L) {
      #line 2712 
      ldv_inline_asm();
      #line 2713 
      ldv_inline_asm();
      #line 2714 
      ldv_inline_asm();
      #line 2711 
      ;
    }
  #line 2714 
  return;
}

#line 2841  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static struct page *__dev_alloc_pages(gfp_t gfp_mask, unsigned int order)
{
  #line 2852 
  gfp_mask |= 393216U;
  #line 2854 
  return alloc_pages_node(-1,gfp_mask,order);
}

#line 2870  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static struct page *__dev_alloc_page(gfp_t gfp_mask)
{
  #line 2872 
  return __dev_alloc_pages(gfp_mask,0U);
}

#line 2896  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned int skb_frag_off(skb_frag_t *frag)
{
  #line 2898 
  return frag->bv_offset;
}

#line 2938  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static struct page *skb_frag_page(skb_frag_t *frag)
{
  #line 2940 
  return frag->bv_page;
}

#line 3067  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static dma_addr_t skb_frag_dma_map(struct device *dev, skb_frag_t *frag, size_t offset, size_t size, enum dma_data_direction dir)
{
  #line 3072 
  ;
  #line 3072 
  ;
  #line 3072 
  ;
  #line 3072 
  ;
  #line 3072 
  return dma_map_page_attrs(dev,skb_frag_page(frag),
                           (unsigned long)skb_frag_off(frag) + offset,size,
                           dir,0UL);
}

#line 3507 
#line 3507 
int skb_copy_bits(struct sk_buff *, int, void *, int);
#line 3601  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_copy_from_linear_data(struct sk_buff *skb, void *to, unsigned int len)
{
  #line 3605 
  memcpy(to,(void *)skb->data,(unsigned long)len);
  #line 3606 
  return;
}

#line 3615  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_copy_to_linear_data(struct sk_buff *skb, void *from, unsigned int len)
{
  #line 3619 
  memcpy((void *)skb->data,from,(unsigned long)len);
  #line 3620 
  return;
}

#line 4277  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static u16 skb_get_queue_mapping(struct sk_buff *skb)
{
  #line 4279 
  return skb->queue_mapping;
}

#line 4287  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_record_rx_queue(struct sk_buff *skb, u16 rx_queue)
{
  #line 4289 
  skb->queue_mapping = (unsigned short)((unsigned int)rx_queue + 1U);
  #line 4290 
  return;
}

#line 4467  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_checksum_none_assert(struct sk_buff *skb)
{
  #line 4469 
  return;
}

#line 423  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 423 
void __napi_schedule(struct napi_struct *);
#line 431 
#line 431 
bool napi_schedule_prep(struct napi_struct *);
#line 440  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void napi_schedule(struct napi_struct *n)
{
  #line 442 
  if ((int)napi_schedule_prep(n) != 0) 
                                       #line 443 
                                       __napi_schedule(n);
  #line 444 
  return;
}

#line 459  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool napi_reschedule(struct napi_struct *napi)
{
  #line 461 
  if ((int)napi_schedule_prep(napi) != 0) {
    #line 462 
    __napi_schedule(napi);
    #line 463 
    return (_Bool)1;
  }
  #line 465 
  return (_Bool)0;
}

#line 468 
#line 468 
bool napi_complete_done(struct napi_struct *, int);
#line 2234 
#line 2234 
void netif_napi_add(struct net_device *, struct napi_struct *, int (*)(struct napi_struct *, int ), int);
#line 2263 
#line 2263 
void netif_napi_del(struct napi_struct *);
#line 3154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_stop_queue(struct netdev_queue *dev_queue)
{
  #line 3156 
  cif_set_bit_0(0L,& dev_queue->state);
  #line 3157 
  return;
}

#line 3617 
#line 3617 
void __dev_kfree_skb_any(struct sk_buff *, enum skb_free_reason);
#line 3648  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void dev_kfree_skb_any(struct sk_buff *skb)
{
  #line 3650 
  __dev_kfree_skb_any(skb,(enum skb_free_reason)SKB_REASON_DROPPED);
  #line 3651 
  return;
}

#line 3653  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void dev_consume_skb_any(struct sk_buff *skb)
{
  #line 3655 
  __dev_kfree_skb_any(skb,(enum skb_free_reason)SKB_REASON_CONSUMED);
  #line 3656 
  return;
}

#line 3662 
#line 3662 
int netif_receive_skb(struct sk_buff *);
#line 3667 
#line 3667 
struct sk_buff *napi_get_frags(struct napi_struct *);
#line 3668 
#line 3668 
gro_result_t napi_gro_frags(struct napi_struct *);
#line 3957  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool __netif_tx_trylock(struct netdev_queue *txq)
{
  #line 3959 
  bool ok = (_Bool)(cif_spin_trylock__xmit_lock_of_netdev_queue(& txq->_xmit_lock) != 0);
  #line 3960 
  if ((long)((int)ok != 0) != 0L) {
    #line 3961 
    int pscr_ret__;
    #line 3961 
    __this_cpu_preempt_check((char *)"read");
    {
      #line 3961 
      void *__vpp_verify = (void *)0;
      #line 3961 
      void *tmp_2 = __vpp_verify;
    }
    #line 3961 
    switch (4UL) {
      #line 3961 
      int pfo_ret___0;
      #line 3961 
      int pfo_ret___1;
      #line 3961 
      int pfo_ret___2;
      #line 3961 
      int pfo_ret__;
      #line 3961 
      case (unsigned long)1: 
                             #line 3961 
      ;
      #line 3961 
      switch (4UL) {
        #line 3961 
        case (unsigned long)1: 
                               #line 3961 
        ;
        #line 3962 
        ldv_inline_asm();
        #line 3961 
        break;
        #line 3961 
        case (unsigned long)2: 
                               #line 3961 
        ;
        #line 3962 
        ldv_inline_asm();
        #line 3961 
        break;
        #line 3961 
        case (unsigned long)4: 
                               #line 3961 
        ;
        #line 3962 
        ldv_inline_asm();
        #line 3961 
        break;
        #line 3961 
        case (unsigned long)8: 
                               #line 3961 
        ;
        #line 3962 
        ldv_inline_asm();
        #line 3961 
        break;
        #line 3961 
        default: 
                 #line 3961 
        ;
        #line 3961 
        __bad_percpu_size();
      }
      #line 3961 
      pscr_ret__ = pfo_ret__;
      #line 3961 
      break;
      #line 3961 
      case (unsigned long)2: 
                             #line 3961 
      ;
      #line 3961 
      switch (4UL) {
        #line 3961 
        case (unsigned long)1: 
                               #line 3961 
        ;
        #line 3962 
        ldv_inline_asm();
        #line 3961 
        break;
        #line 3961 
        case (unsigned long)2: 
                               #line 3961 
        ;
        #line 3962 
        ldv_inline_asm();
        #line 3961 
        break;
        #line 3961 
        case (unsigned long)4: 
                               #line 3961 
        ;
        #line 3962 
        ldv_inline_asm();
        #line 3961 
        break;
        #line 3961 
        case (unsigned long)8: 
                               #line 3961 
        ;
        #line 3962 
        ldv_inline_asm();
        #line 3961 
        break;
        #line 3961 
        default: 
                 #line 3961 
        ;
        #line 3961 
        __bad_percpu_size();
      }
      #line 3961 
      pscr_ret__ = pfo_ret___0;
      #line 3961 
      break;
      #line 3961 
      case (unsigned long)4: 
                             #line 3961 
      ;
      #line 3961 
      switch (4UL) {
        #line 3961 
        case (unsigned long)1: 
                               #line 3961 
        ;
        #line 3962 
        ldv_inline_asm();
        #line 3961 
        break;
        #line 3961 
        case (unsigned long)2: 
                               #line 3961 
        ;
        #line 3962 
        ldv_inline_asm();
        #line 3961 
        break;
        #line 3961 
        case (unsigned long)4: 
                               #line 3961 
        ;
        #line 3962 
        ldv_inline_asm();
        #line 3961 
        break;
        #line 3961 
        case (unsigned long)8: 
                               #line 3961 
        ;
        #line 3962 
        ldv_inline_asm();
        #line 3961 
        break;
        #line 3961 
        default: 
                 #line 3961 
        ;
        #line 3961 
        __bad_percpu_size();
      }
      #line 3961 
      pscr_ret__ = pfo_ret___1;
      #line 3961 
      break;
      #line 3961 
      case (unsigned long)8: 
                             #line 3961 
      ;
      #line 3961 
      switch (4UL) {
        #line 3961 
        case (unsigned long)1: 
                               #line 3961 
        ;
        #line 3962 
        ldv_inline_asm();
        #line 3961 
        break;
        #line 3961 
        case (unsigned long)2: 
                               #line 3961 
        ;
        #line 3962 
        ldv_inline_asm();
        #line 3961 
        break;
        #line 3961 
        case (unsigned long)4: 
                               #line 3961 
        ;
        #line 3962 
        ldv_inline_asm();
        #line 3961 
        break;
        #line 3961 
        case (unsigned long)8: 
                               #line 3961 
        ;
        #line 3962 
        ldv_inline_asm();
        #line 3961 
        break;
        #line 3961 
        default: 
                 #line 3961 
        ;
        #line 3961 
        __bad_percpu_size();
      }
      #line 3961 
      pscr_ret__ = pfo_ret___2;
      #line 3961 
      break;
      #line 3961 
      default: 
               #line 3961 
      ;
      #line 3961 
      __bad_size_call_parameter();
      #line 3961 
      break;
    }
    #line 3961 
    txq->xmit_lock_owner = pscr_ret__;
  }
  #line 3962 
  return ok;
}

#line 3965  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void __netif_tx_unlock(struct netdev_queue *txq)
{
  #line 3967 
  txq->xmit_lock_owner = -1;
  #line 3968 
  cif_spin_unlock__xmit_lock_of_netdev_queue(& txq->_xmit_lock);
  #line 3969 
  return;
}

#line 3984  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_trans_update(struct net_device *dev)
{
  #line 3986 
  struct netdev_queue *txq = netdev_get_tx_queue(dev,0U);
  #line 3988 
  if (txq->trans_start != jiffies) 
                                   #line 3989 
                                   txq->trans_start = jiffies;
  #line 3990 
  return;
}

#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
#line 32 
__be16 eth_type_trans(struct sk_buff *, struct net_device *);
#line 300  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
__inline static bool eth_type_vlan(__be16 ethertype)
{
  #line 302 
  switch ((int)ethertype) {
    #line 303 
    case 129: 
              #line 303 
    ;
    #line 304 
    case 43144: 
                #line 304 
    ;
    #line 305 
    return (_Bool)1;
    #line 306 
    default: 
             #line 306 
    ;
    #line 307 
    return (_Bool)0;
  }
}

#line 510  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
__inline static void __vlan_hwaccel_put_tag(struct sk_buff *skb, __be16 vlan_proto, u16 vlan_tci)
{
  #line 513 
  skb->vlan_proto = vlan_proto;
  #line 514 
  skb->vlan_tci = vlan_tci;
  #line 515 
  skb->vlan_present = (unsigned char)1U;
  #line 516 
  return;
}

#line 669  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
__inline static bool skb_vlan_tagged(struct sk_buff *skb)
{
  #line 671 
  if ((unsigned int)skb->vlan_present == 0U) {
    #line 672 
    int tmp_0;
    #line 672 
    if (eth_type_vlan((unsigned short)((int)skb->protocol))) 
                                                             #line 672 
                                                             tmp_0 = 0; else 
                                                                    #line 672 
                                                                    tmp_0 = 1;
    #line 671 
    if ((long)tmp_0 != 0L) 
                           #line 673 
                           return (_Bool)0;
  }
  #line 675 
  return (_Bool)1;
}

#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ip.h"
__inline static struct iphdr *ip_hdr(struct sk_buff *skb)
{
  #line 21 
  return (struct iphdr *)skb_network_header(skb);
}

#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tcp.h"
__inline static struct tcphdr *tcp_hdr(struct sk_buff *skb)
{
  #line 26 
  return (struct tcphdr *)skb_transport_header(skb);
}

#line 326  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/t4vf_common.h"
#line 326 
int t4vf_wr_mbox_core(struct adapter *adapter, void *cmd, int size, void *rpl, bool sleep_ok);
#line 328  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/t4vf_common.h"
__inline static int t4vf_wr_mbox(struct adapter *adapter, void *cmd, int size, void *rpl)
{
  #line 331 
  return t4vf_wr_mbox_core(adapter,cmd,size,rpl,(_Bool)1);
}

#line 371 
#line 371 
int t4vf_fl_pkt_align(struct adapter *adapter);
#line 373 
#line 373 
int t4vf_bar2_sge_qregs(struct adapter *adapter, unsigned int qid, enum t4_bar2_qtype qtype, u64 *pbar2_qoffset, unsigned int *pbar2_qid);
#line 411 
#line 411 
int t4vf_iq_free(struct adapter *adapter, unsigned int iqtype, unsigned int iqid, unsigned int fl0id, unsigned int fl1id);
#line 413 
#line 413 
int t4vf_eth_eq_free(struct adapter *adapter, unsigned int eqid);
#line 195  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/sge.c"
__inline static dma_addr_t get_buf_addr(struct rx_sw_desc *sdesc)
{
  #line 197 
  return sdesc->dma_addr & 18446744073709551612ULL;
}

#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/sge.c"
__inline static bool is_buf_mapped(struct rx_sw_desc *sdesc)
{
  #line 209 
  return (_Bool)((sdesc->dma_addr & 2ULL) == 0ULL);
}

#line 218  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/sge.c"
__inline static int need_skb_unmap(void)
{
  #line 221 
  return 1;
}

#line 233  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/sge.c"
__inline static unsigned int txq_avail(struct sge_txq *tq)
{
  #line 235 
  return (tq->size - tq->in_use) + 4294967295U;
}

#line 247  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/sge.c"
__inline static unsigned int fl_cap(struct sge_fl *fl)
{
  #line 249 
  return fl->size + 4294967288U;
}

#line 261  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/sge.c"
__inline static bool fl_starving(struct adapter *adapter, struct sge_fl *fl)
{
  #line 264 
  struct sge *s = & adapter->sge;
  #line 266 
  return (_Bool)(fl->avail - fl->pend_cred <= s->fl_starve_thres);
}

#line 277  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/sge.c"
static int map_skb(struct device *dev, struct sk_buff *skb, dma_addr_t *addr)
{
  #line 280 
  skb_frag_t *fp;
  #line 280 
  skb_frag_t *end;
  #line 281 
  struct skb_shared_info *si;
  #line 283 
  ;
  #line 283 
  ;
  #line 283 
  *addr = dma_map_single_attrs(dev,(void *)skb->data,(unsigned long)skb_headlen(skb),(enum dma_data_direction)DMA_TO_DEVICE,0UL);
  #line 284 
  if (dma_mapping_error(dev,*addr) != 0) 
                                         #line 285 
                                         goto out_err;
  #line 287 
  si = (struct skb_shared_info *)skb_end_pointer(skb);
  #line 288 
  end = & si->frags[(int)si->nr_frags];
  #line 289 
  fp = (skb_frag_t *)(& si->frags);
  #line 289 
  while (fp < end) {
    {
      #line 290 
      addr ++;
      #line 290 
      ;
      #line 290 
      ;
      #line 290 
      *addr = skb_frag_dma_map(dev,fp,0UL,(unsigned long)skb_frag_size(fp),(enum dma_data_direction)DMA_TO_DEVICE);
      #line 292 
      if (dma_mapping_error(dev,*addr) != 0) 
                                             #line 293 
                                             goto unwind;
    }
    #line 289 
    fp ++;
  }
  #line 295 
  return 0;
  #line 297 
  unwind: 
          #line 297 
  ;
  #line 298 
  while (1) {
    #line 298 
    skb_frag_t *tmp_5;
    #line 299 
    unsigned int tmp_4;
    #line 298 
    tmp_5 = fp;
    #line 298 
    fp --;
    #line 298 
    ;
    #line 298 
    if (! (tmp_5 > (skb_frag_t *)(& si->frags))) 
                                                 #line 298 
                                                 break;
    #line 299 
    tmp_4 = skb_frag_size(fp);
    #line 299 
    addr --;
    #line 299 
    ;
    #line 299 
    ;
    #line 299 
    dma_unmap_page_attrs(dev,*addr,(unsigned long)tmp_4,(enum dma_data_direction)DMA_TO_DEVICE,0UL);
  }
  #line 300 
  ;
  #line 300 
  ;
  #line 300 
  dma_unmap_single_attrs(dev,*(addr + 18446744073709551615U),(unsigned long)skb_headlen(skb),(enum dma_data_direction)DMA_TO_DEVICE,0UL);
  #line 302 
  out_err: 
           #line 302 
  ;
  #line 303 
  return -12;
}

#line 306  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/sge.c"
static void unmap_sgl(struct device *dev, struct sk_buff *skb, struct ulptx_sgl *sgl, struct sge_txq *tq)
{
  #line 309 
  struct ulptx_sge_pair *p;
  #line 310 
  unsigned int nfrags = (unsigned int)((struct skb_shared_info *)skb_end_pointer(skb))->nr_frags;
  #line 312 
  if ((long)(skb_headlen(skb) != 0U) != 0L) {
    #line 313 
    ;
    #line 313 
    dma_unmap_single_attrs(dev,(unsigned long long)__builtin_bswap64((unsigned long)sgl->addr0),(unsigned long)__builtin_bswap32(sgl->len0),(enum dma_data_direction)DMA_TO_DEVICE,0UL);
  }
  else {
    #line 316 
    ;
    #line 316 
    dma_unmap_page_attrs(dev,(unsigned long long)__builtin_bswap64((unsigned long)sgl->addr0),(unsigned long)__builtin_bswap32(sgl->len0),(enum dma_data_direction)DMA_TO_DEVICE,0UL);
    #line 318 
    nfrags --;
  }
  #line 325 
  p = (struct ulptx_sge_pair *)(& sgl->sge);
  #line 325 
  while (nfrags > 1U) {
    #line 326 
    if ((long)((u8 *)(p + 1U) <= (u8 *)tq->stat) != 0L) {
      #line 327 
      unmap: 
             #line 327 
      ;
      #line 328 
      ;
      #line 328 
      dma_unmap_page_attrs(dev,(unsigned long long)__builtin_bswap64((unsigned long)p->addr[0]),(unsigned long)__builtin_bswap32(p->len[0]),(enum dma_data_direction)DMA_TO_DEVICE,0UL);
      #line 330 
      ;
      #line 330 
      dma_unmap_page_attrs(dev,(unsigned long long)__builtin_bswap64((unsigned long)p->addr[1]),(unsigned long)__builtin_bswap32(p->len[1]),(enum dma_data_direction)DMA_TO_DEVICE,0UL);
      #line 332 
      p ++;
    }
    else 
      #line 333 
      if ((u8 *)tq->stat == (u8 *)p) {
        #line 334 
        p = (struct ulptx_sge_pair *)tq->desc;
        #line 335 
        goto unmap;
      }
      else 
        #line 336 
        if ((u8 *)p + 8U == (u8 *)tq->stat) {
          #line 337 
          __be64 *addr = (__be64 *)tq->desc;
          #line 339 
          ;
          #line 339 
          dma_unmap_page_attrs(dev,(unsigned long long)__builtin_bswap64((unsigned long)*addr),(unsigned long)__builtin_bswap32(p->len[0]),(enum dma_data_direction)DMA_TO_DEVICE,0UL);
          #line 341 
          ;
          #line 341 
          dma_unmap_page_attrs(dev,(unsigned long long)__builtin_bswap64((unsigned long)*(addr + 1U)),(unsigned long)__builtin_bswap32(p->len[1]),(enum dma_data_direction)DMA_TO_DEVICE,0UL);
          #line 343 
          p = (struct ulptx_sge_pair *)(addr + 2U);
        }
        else {
          #line 345 
          __be64 *addr_0 = (__be64 *)tq->desc;
          #line 347 
          ;
          #line 347 
          dma_unmap_page_attrs(dev,(unsigned long long)__builtin_bswap64((unsigned long)p->addr[0]),(unsigned long)__builtin_bswap32(p->len[0]),(enum dma_data_direction)DMA_TO_DEVICE,0UL);
          #line 349 
          ;
          #line 349 
          dma_unmap_page_attrs(dev,(unsigned long long)__builtin_bswap64((unsigned long)*addr_0),(unsigned long)__builtin_bswap32(p->len[1]),(enum dma_data_direction)DMA_TO_DEVICE,0UL);
          #line 351 
          p = (struct ulptx_sge_pair *)(addr_0 + 1U);
        }
    #line 325 
    nfrags += 4294967294U;
  }
  #line 354 
  if (nfrags != 0U) {
    #line 355 
    __be64 addr_1;
    #line 357 
    if ((u8 *)tq->stat == (u8 *)p) 
                                   #line 358 
                                   p = (struct ulptx_sge_pair *)tq->desc;
    #line 359 
    if ((u8 *)p + 16U <= (u8 *)tq->stat) 
                                         #line 359 
                                         addr_1 = p->addr[0]; else 
                                                                   #line 359 
                                                                   addr_1 = *((__be64 *)tq->desc);
    #line 362 
    ;
    #line 362 
    dma_unmap_page_attrs(dev,(unsigned long long)__builtin_bswap64((unsigned long)addr_1),(unsigned long)__builtin_bswap32(p->len[0]),(enum dma_data_direction)DMA_TO_DEVICE,0UL);
  }
  #line 364 
  return;
}

#line 377  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/sge.c"
static void free_tx_desc(struct adapter *adapter, struct sge_txq *tq, unsigned int n, bool unmap)
{
  #line 380 
  struct tx_sw_desc *sdesc;
  #line 384 
  int tmp_0;
  #line 381 
  unsigned int cidx = tq->cidx;
  #line 382 
  struct device *dev = adapter->pdev_dev;
  #line 384 
  if (need_skb_unmap() != 0) 
    #line 384 
    if ((int)unmap != 0) 
                         #line 384 
                         tmp_0 = 1; else 
                                         #line 384 
                                         tmp_0 = 0;
  else 
       #line 384 
       tmp_0 = 0;
  #line 384 
  int need_unmap = tmp_0;
  #line 386 
  sdesc = tq->sdesc + (unsigned long)cidx;
  #line 387 
  while (1) {
    #line 387 
    unsigned int tmp_1;
    #line 387 
    tmp_1 = n;
    #line 387 
    n --;
    #line 387 
    ;
    #line 387 
    if (! (tmp_1 != 0U)) 
                         #line 387 
                         break;
    #line 392 
    if (sdesc->skb != (struct sk_buff *)0) {
      #line 393 
      if (need_unmap != 0) 
                           #line 394 
                           unmap_sgl(dev,sdesc->skb,sdesc->sgl,tq);
      #line 395 
      dev_consume_skb_any(sdesc->skb);
      #line 396 
      sdesc->skb = (struct sk_buff *)0;
    }
    #line 399 
    sdesc ++;
    #line 400 
    cidx ++;
    #line 400 
    ;
    #line 400 
    if (cidx == tq->size) {
      #line 401 
      cidx = 0U;
      #line 402 
      sdesc = tq->sdesc;
    }
  }
  #line 405 
  tq->cidx = cidx;
  #line 406 
  return;
}

#line 411  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/sge.c"
__inline static int reclaimable(struct sge_txq *tq)
{
  #line 413 
  int hw_cidx = (int)__builtin_bswap16((unsigned short)((int)(tq->stat)->cidx));
  #line 414 
  int reclaimable_0 = (int)((unsigned int)hw_cidx - tq->cidx);
  #line 415 
  if (reclaimable_0 < 0) 
                         #line 416 
                         reclaimable_0 = (int)(tq->size + (unsigned int)reclaimable_0);
  #line 417 
  return reclaimable_0;
}

#line 430  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/sge.c"
__inline static void reclaim_completed_tx(struct adapter *adapter, struct sge_txq *tq, bool unmap)
{
  #line 434 
  int avail = reclaimable(tq);
  #line 436 
  if (avail != 0) {
    #line 441 
    if (avail > 16) 
                    #line 442 
                    avail = 16;
    #line 444 
    free_tx_desc(adapter,tq,(unsigned int)avail,(_Bool)((bool)((int)unmap) != 0));
    #line 445 
    tq->in_use -= (unsigned int)avail;
  }
  #line 447 
  return;
}

#line 454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/sge.c"
__inline static int get_buf_size(struct adapter *adapter, struct rx_sw_desc *sdesc)
{
  #line 460 
  int tmp;
  #line 457 
  struct sge *s = & adapter->sge;
  #line 460 
  if (s->fl_pg_order != 0U && (sdesc->dma_addr & 1ULL) != 0ULL) 
                                                                #line 460 
                                                                tmp = (int)(4096UL << s->fl_pg_order); else 
                                                                    #line 460 
                                                                    tmp = 4096;
  #line 460 
  return tmp;
}

#line 473  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/sge.c"
static void free_rx_bufs(struct adapter *adapter, struct sge_fl *fl, int n)
{
  #line 475 
  while (1) {
    #line 475 
    int tmp_2;
    #line 475 
    tmp_2 = n;
    #line 475 
    n --;
    #line 475 
    ;
    #line 475 
    if (! (tmp_2 != 0)) 
                        #line 475 
                        break;
    {
      #line 476 
      struct rx_sw_desc *sdesc = fl->sdesc + (unsigned long)fl->cidx;
      #line 478 
      if ((int)is_buf_mapped(sdesc) != 0) {
        #line 479 
        ;
        #line 479 
        dma_unmap_page_attrs(adapter->pdev_dev,get_buf_addr(sdesc),(unsigned long)get_buf_size(adapter,sdesc),(enum dma_data_direction)DMA_FROM_DEVICE,0UL);
      }
      #line 482 
      put_page(sdesc->page);
      #line 483 
      sdesc->page = (struct page *)0;
      #line 484 
      (fl->cidx) ++;
      #line 484 
      ;
      #line 484 
      if (fl->cidx == fl->size) 
                                #line 485 
                                fl->cidx = 0U;
      #line 486 
      (fl->avail) --;
    }
  }
  #line 488 
  return;
}

#line 503  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/sge.c"
static void unmap_rx_buf(struct adapter *adapter, struct sge_fl *fl)
{
  #line 505 
  struct rx_sw_desc *sdesc = fl->sdesc + (unsigned long)fl->cidx;
  #line 507 
  if ((int)is_buf_mapped(sdesc) != 0) {
    #line 508 
    ;
    #line 508 
    dma_unmap_page_attrs(adapter->pdev_dev,get_buf_addr(sdesc),(unsigned long)get_buf_size(adapter,sdesc),(enum dma_data_direction)DMA_FROM_DEVICE,0UL);
  }
  #line 511 
  sdesc->page = (struct page *)0;
  #line 512 
  (fl->cidx) ++;
  #line 512 
  ;
  #line 512 
  if (fl->cidx == fl->size) 
                            #line 513 
                            fl->cidx = 0U;
  #line 514 
  (fl->avail) --;
  #line 515 
  return;
}

#line 525  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/sge.c"
__inline static void ring_fl_db(struct adapter *adapter, struct sge_fl *fl)
{
  #line 527 
  u32 val = adapter->params.arch.sge_fl_db;
  #line 533 
  if (fl->pend_cred > 7U) {
    #line 534 
    if (is_t4(adapter->params.chip) != 0) 
                                          #line 535 
                                          val = fl->pend_cred / 8U | val; else 
                                                                    #line 537 
                                                                    val = fl->pend_cred / 8U | val;
    #line 538 
    ldv_inline_asm();
    #line 548 
    if ((long)(fl->bar2_addr == (void *)0) != 0L) 
                                                  #line 549 
                                                  t4_write_reg(adapter,0U,(fl->cntxt_id << 15) | val);
    else {
      #line 553 
      writel((fl->bar2_qid << 15) | val,fl->bar2_addr + 8U);
      #line 555 
      ldv_inline_asm();
    }
    #line 561 
    fl->pend_cred &= 7U;
  }
  #line 563 
  return;
}

#line 571  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/sge.c"
__inline static void set_rx_sw_desc(struct rx_sw_desc *sdesc, struct page *page, dma_addr_t dma_addr)
{
  #line 574 
  sdesc->page = page;
  #line 575 
  sdesc->dma_addr = dma_addr;
  #line 576 
  return;
}

#line 583  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/sge.c"
__inline static void poison_buf(struct page *page, size_t sz)
{
  #line 585 
  return;
}

#line 604  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/sge.c"
static unsigned int refill_fl(struct adapter *adapter, struct sge_fl *fl, int n, gfp_t gfp)
{
  #line 608 
  struct page *page;
  #line 609 
  dma_addr_t dma_addr;
  #line 607 
  struct sge *s = & adapter->sge;
  #line 610 
  unsigned int cred = fl->avail;
  #line 611 
  __be64 *d = fl->desc + (unsigned long)fl->pidx;
  #line 612 
  struct rx_sw_desc *sdesc = fl->sdesc + (unsigned long)fl->pidx;
  #line 619 
  if ((long)(fl->avail + (unsigned int)n > fl->size + 4294967288U) != 0L) {
    #line 620 
    ldv_inline_asm();
    #line 621 
    ldv_inline_asm();
    #line 622 
    ldv_inline_asm();
    #line 619 
    ;
  }
  #line 621 
  gfp |= 8192U;
  #line 629 
  if (s->fl_pg_order == 0U) 
                            #line 630 
                            goto alloc_small_pages;
  #line 632 
  while (n != 0) {
    #line 661 
    __be64 *tmp_0;
    #line 633 
    page = __dev_alloc_pages(gfp,s->fl_pg_order);
    #line 634 
    if ((long)(page == (struct page *)0) != 0L) {
      #line 640 
      (fl->large_alloc_failed) ++;
      #line 641 
      break;
    }
    #line 643 
    poison_buf(page,4096UL << s->fl_pg_order);
    #line 645 
    dma_addr = dma_map_page_attrs(adapter->pdev_dev,page,0UL,4096UL << s->fl_pg_order,(enum dma_data_direction)DMA_FROM_DEVICE,0UL);
    #line 648 
    if ((long)(dma_mapping_error(adapter->pdev_dev,dma_addr) != 0) != 0L) {
      #line 657 
      __free_pages(page,s->fl_pg_order);
      #line 658 
      goto out;
    }
    #line 660 
    dma_addr |= 1ULL;
    #line 661 
    tmp_0 = d;
    #line 661 
    d ++;
    #line 661 
    *tmp_0 = (__be64)__builtin_bswap64((unsigned long)dma_addr);
    #line 663 
    set_rx_sw_desc(sdesc,page,dma_addr);
    #line 664 
    sdesc ++;
    #line 666 
    (fl->avail) ++;
    #line 667 
    (fl->pidx) ++;
    #line 667 
    ;
    #line 667 
    if (fl->pidx == fl->size) {
      #line 668 
      fl->pidx = 0U;
      #line 669 
      sdesc = fl->sdesc;
      #line 670 
      d = fl->desc;
    }
    #line 672 
    n --;
  }
  #line 675 
  alloc_small_pages: 
                     #line 675 
  ;
  #line 676 
  while (1) {
    #line 676 
    int tmp_5;
    #line 676 
    tmp_5 = n;
    #line 676 
    n --;
    #line 676 
    ;
    #line 676 
    if (! (tmp_5 != 0)) 
                        #line 676 
                        break;
    {
      #line 690 
      __be64 *tmp_3;
      #line 677 
      page = __dev_alloc_page(gfp);
      #line 678 
      if ((long)(page == (struct page *)0) != 0L) {
        #line 679 
        (fl->alloc_failed) ++;
        #line 680 
        break;
      }
      #line 682 
      poison_buf(page,4096UL);
      #line 684 
      dma_addr = dma_map_page_attrs(adapter->pdev_dev,page,0UL,4096UL,(enum dma_data_direction)DMA_FROM_DEVICE,0UL);
      #line 686 
      if ((long)(dma_mapping_error(adapter->pdev_dev,dma_addr) != 0) != 0L) {
        #line 687 
        put_page(page);
        #line 688 
        break;
      }
      #line 690 
      tmp_3 = d;
      #line 690 
      d ++;
      #line 690 
      *tmp_3 = (__be64)__builtin_bswap64((unsigned long)dma_addr);
      #line 692 
      set_rx_sw_desc(sdesc,page,dma_addr);
      #line 693 
      sdesc ++;
      #line 695 
      (fl->avail) ++;
      #line 696 
      (fl->pidx) ++;
      #line 696 
      ;
      #line 696 
      if (fl->pidx == fl->size) {
        #line 697 
        fl->pidx = 0U;
        #line 698 
        sdesc = fl->sdesc;
        #line 699 
        d = fl->desc;
      }
    }
  }
  #line 703 
  out: 
       #line 703 
  ;
  #line 709 
  cred = fl->avail - cred;
  #line 710 
  fl->pend_cred += cred;
  #line 711 
  ring_fl_db(adapter,fl);
  #line 713 
  if ((long)((int)fl_starving(adapter,fl) != 0) != 0L) {
    #line 715 
    ldv_inline_asm();
    #line 715 
    cif_set_bit_0((long)fl->cntxt_id,(unsigned long *)(& adapter->sge.starving_fl));
  }
  #line 718 
  return cred;
}

#line 725  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/sge.c"
__inline static void __refill_fl(struct adapter *adapter, struct sge_fl *fl)
{
  #line 728 
  unsigned int __UNIQUE_ID___x553;
  #line 728 
  unsigned int tmp_0;
  {
    #line 728 
    __UNIQUE_ID___x553 = 16U;
    #line 728 
    unsigned int __UNIQUE_ID___y554 = fl_cap(fl) - fl->avail;
    #line 728 
    if (__UNIQUE_ID___x553 < __UNIQUE_ID___y554) 
                                                 #line 728 
                                                 tmp_0 = __UNIQUE_ID___x553; else 
                                                                    #line 728 
                                                                    tmp_0 = __UNIQUE_ID___y554;
    }
  #line 727 
  ;
  #line 727 
  ;
  #line 727 
  refill_fl(adapter,fl,(int)tmp_0,2592U);
  #line 730 
  return;
}

#line 751  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/sge.c"
static void *alloc_ring(struct device *dev, size_t nelem, size_t hwsize, size_t swsize, dma_addr_t *busaddrp, void *swringp, size_t stat_size)
{
  #line 758 
  size_t hwlen = nelem * hwsize + stat_size;
  #line 759 
  void *hwring = dma_alloc_coherent(dev,hwlen,busaddrp,3264U);
  #line 761 
  if (hwring == (void *)0) 
                           #line 762 
                           return (void *)0;
  #line 768 
  if ((long)((swsize != 0UL) ^ (swringp != (void *)0)) != 0L) {
    #line 769 
    ldv_inline_asm();
    #line 770 
    ldv_inline_asm();
    #line 771 
    ldv_inline_asm();
    #line 768 
    ;
  }
  #line 769 
  if (swsize != 0UL) {
    #line 770 
    void *swring = kcalloc(nelem,swsize,3264U);
    #line 772 
    if (swring == (void *)0) {
      #line 773 
      dma_free_coherent(dev,hwlen,hwring,*busaddrp);
      #line 774 
      return (void *)0;
    }
    #line 776 
    *((void **)swringp) = swring;
  }
  #line 779 
  return hwring;
}

#line 789  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/sge.c"
__inline static unsigned int sgl_len(unsigned int n)
{
  #line 808 
  n --;
  #line 809 
  return ((n * 3U) / 2U + (n & 1U)) + 2U;
}

#line 819  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/sge.c"
__inline static unsigned int flits_to_desc(unsigned int flits)
{
  #line 821 
  if ((long)(flits > 64U) != 0L) {
    #line 822 
    ldv_inline_asm();
    #line 823 
    ldv_inline_asm();
    #line 824 
    ldv_inline_asm();
    #line 821 
    ;
  }
  #line 822 
  return (flits + 7U) / 8U;
}

#line 832  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/sge.c"
__inline static int is_eth_imm(struct sk_buff *skb)
{
  #line 841 
  return 0;
}

#line 851  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/sge.c"
__inline static unsigned int calc_tx_flits(struct sk_buff *skb)
{
  #line 853 
  unsigned int flits;
  #line 860 
  if (is_eth_imm(skb) != 0) 
                            #line 861 
                            return (unsigned int)(((unsigned long)skb->len + 39UL) / 8UL);
  #line 873 
  ;
  #line 873 
  flits = sgl_len((unsigned int)((int)((struct skb_shared_info *)skb_end_pointer(skb))->nr_frags + 1));
  #line 874 
  ;
  #line 874 
  if ((unsigned int)((struct skb_shared_info *)skb_end_pointer(skb))->gso_size != 0U) 
    #line 875 
    flits += 8U; else 
                      #line 879 
                      flits += 6U;
  #line 881 
  return flits;
}

#line 901  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/sge.c"
static void write_sgl(struct sk_buff *skb, struct sge_txq *tq, struct ulptx_sgl *sgl, u64 *end, unsigned int start, dma_addr_t *addr)
{
  #line 905 
  unsigned int i;
  #line 905 
  unsigned int len;
  #line 906 
  struct ulptx_sge_pair *to;
  #line 909 
  struct ulptx_sge_pair buf[9U];
  #line 907 
  struct skb_shared_info *si = skb_end_pointer(skb);
  #line 908 
  unsigned int nfrags = (unsigned int)si->nr_frags;
  #line 911 
  len = skb_headlen(skb) - start;
  #line 912 
  if ((long)(len != 0U) != 0L) {
    #line 913 
    sgl->len0 = __builtin_bswap32(len);
    #line 914 
    sgl->addr0 = (__be64)__builtin_bswap64((unsigned long)(*addr + (unsigned long long)start));
    #line 915 
    nfrags ++;
  }
  else {
    #line 917 
    sgl->len0 = __builtin_bswap32(skb_frag_size(& si->frags[0]));
    #line 918 
    sgl->addr0 = (__be64)__builtin_bswap64((unsigned long)*(addr + 1U));
  }
  #line 921 
  sgl->cmd_nsge = __builtin_bswap32(nfrags | 2181038080U);
  #line 923 
  nfrags --;
  #line 923 
  if ((long)(nfrags == 0U) != 0L) 
                                  #line 924 
                                  return;
  #line 930 
  if ((u8 *)tq->stat < (u8 *)end) 
                                  #line 930 
                                  to = (struct ulptx_sge_pair *)(& buf); else 
                                                                    #line 930 
                                                                    to = (struct ulptx_sge_pair *)(& sgl->sge);
  #line 932 
  i = (unsigned int)((unsigned int)si->nr_frags != nfrags);
  #line 932 
  while (nfrags > 1U) {
    {
      #line 933 
      to->len[0] = __builtin_bswap32(skb_frag_size(& si->frags[i]));
      #line 934 
      i ++;
      #line 934 
      ;
      #line 934 
      to->len[1] = __builtin_bswap32(skb_frag_size(& si->frags[i]));
      #line 935 
      to->addr[0] = (__be64)__builtin_bswap64((unsigned long)*(addr + (unsigned long)i));
      #line 936 
      i ++;
      #line 936 
      ;
      #line 936 
      to->addr[1] = (unsigned long long)__builtin_bswap64((unsigned long)*(addr + (unsigned long)i));
    }
    #line 932 
    nfrags += 4294967294U;
    #line 932 
    to ++;
  }
  #line 938 
  if (nfrags != 0U) {
    #line 939 
    to->len[0] = __builtin_bswap32(skb_frag_size(& si->frags[i]));
    #line 940 
    to->len[1] = 0U;
    #line 941 
    to->addr[0] = (__be64)__builtin_bswap64((unsigned long)*(addr + (unsigned long)(i + 1U)));
  }
  #line 943 
  if ((long)((u8 *)tq->stat < (u8 *)end) != 0L) {
    #line 944 
    unsigned int part1;
    #line 944 
    unsigned int part0 = (unsigned int)((u8 *)tq->stat - (u8 *)(& sgl->sge));
    #line 946 
    if ((long)(part0 != 0U) != 0L) 
                                   #line 947 
                                   memcpy((void *)(& sgl->sge),(void *)(& buf),(unsigned long)part0);
    #line 948 
    part1 = (unsigned int)((u8 *)end - (u8 *)tq->stat);
    #line 949 
    memcpy((void *)tq->desc,(void *)((u8 *)(& buf) + (unsigned long)part0),(unsigned long)part1);
    #line 950 
    end = (u64 *)((void *)tq->desc + (unsigned long)part1);
  }
  #line 952 
  if (((unsigned long)end & 8UL) != 0UL) 
                                         #line 953 
                                         *end = 0ULL;
  #line 954 
  return;
}

#line 964  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/sge.c"
__inline static void ring_tx_db(struct adapter *adapter, struct sge_txq *tq, int n)
{
  #line 966 
  ldv_inline_asm();
  #line 975 
  if ((long)(tq->bar2_addr == (void *)0) != 0L) {
    #line 976 
    u32 val = (unsigned int)n;
    #line 978 
    t4_write_reg(adapter,0U,(tq->cntxt_id << 15) | val);
  }
  else {
    #line 981 
    u32 val_0 = (unsigned int)n;
    {
      #line 989 
      int __ret_warn_on = (val_0 & 16384U) != 0U;
      #line 989 
      if ((long)(__ret_warn_on != 0) != 0L) {
        #line 990 
        ldv_inline_asm();
        #line 991 
        ldv_inline_asm();
      }
      #line 989 
      long tmp = (long)(__ret_warn_on != 0);
    }
    #line 995 
    if (n == 1 && tq->bar2_qid == 0U) {
      #line 996 
      unsigned int tmp_0;
      #line 996 
      if (tq->pidx != 0U) 
                          #line 996 
                          tmp_0 = tq->pidx + 4294967295U; else 
                                                               #line 996 
                                                               tmp_0 = tq->size + 4294967295U;
      #line 996 
      unsigned int index = tmp_0;
      #line 999 
      __be64 *src = (__be64 *)(tq->desc + (unsigned long)index);
      #line 1000 
      __be64 *dst = (__be64 *)(tq->bar2_addr + 64U);
      #line 1002 
      unsigned int count = 8U;
      #line 1013 
      while (count != 0U) {
        #line 1018 
        writeq(*src,(void *)dst);
        #line 1019 
        src ++;
        #line 1020 
        dst ++;
        #line 1021 
        count --;
      }
    }
    else 
         #line 1024 
         writel((tq->bar2_qid << 15) | val_0,tq->bar2_addr + 8U);
    #line 1026 
    ldv_inline_asm();
  }
  #line 1028 
  return;
}

#line 1052  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/sge.c"
static void inline_tx_skb(struct sk_buff *skb, struct sge_txq *tq, void *pos)
{
  #line 1055 
  u64 *p;
  #line 1056 
  int left = (int)((void *)tq->stat - pos);
  #line 1058 
  if ((long)(skb->len <= (unsigned int)left) != 0L) {
    #line 1059 
    if ((long)(skb->data_len == 0U) != 0L) 
                                           #line 1060 
                                           skb_copy_from_linear_data(skb,pos,skb->len); else 
                                                                    #line 1062 
                                                                    skb_copy_bits(skb,0,pos,(int)skb->len);
    #line 1063 
    pos += (unsigned long)skb->len;
  }
  else {
    #line 1065 
    skb_copy_bits(skb,0,pos,left);
    #line 1066 
    skb_copy_bits(skb,left,(void *)tq->desc,(int)(skb->len - (unsigned int)left));
    #line 1067 
    pos = (void *)tq->desc + (unsigned long)(skb->len - (unsigned int)left);
  }
  #line 1071 
  p = (u64 *)(((unsigned long)pos + 7UL) & 18446744073709551608UL);
  #line 1072 
  if (((unsigned long)p & 8UL) != 0UL) 
                                       #line 1073 
                                       *p = 0ULL;
  #line 1074 
  return;
}

#line 1080  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/sge.c"
static u64 hwcsum(enum chip_type chip, struct sk_buff *skb)
{
  #line 1082 
  int csum_type;
  #line 1083 
  struct iphdr *iph = ip_hdr(skb);
  #line 1085 
  if ((unsigned int)iph->version == 4U) 
    #line 1086 
    if ((unsigned int)iph->protocol == 6U) 
                                           #line 1087 
                                           csum_type = 8;
    else 
      #line 1088 
      if ((unsigned int)iph->protocol == 17U) 
                                              #line 1089 
                                              csum_type = 9;
      else {
        #line 1091 
        nocsum: 
                #line 1091 
        ;
        #line 1096 
        return 9223372036854775808ULL;
      }
  else {
    #line 1102 
    struct ipv6hdr *ip6h = (struct ipv6hdr *)iph;
    #line 1104 
    if ((unsigned int)ip6h->nexthdr == 6U) 
                                           #line 1105 
                                           csum_type = 10;
    else 
      #line 1106 
      if ((unsigned int)ip6h->nexthdr == 17U) 
                                              #line 1107 
                                              csum_type = 11; else 
                                                                   #line 1109 
                                                                   goto nocsum;
  }
  #line 1112 
  if ((long)(csum_type > 7) != 0L) {
    #line 1113 
    u64 hdr_len = (unsigned long long)skb_network_header_len(skb) << 20;
    #line 1114 
    int eth_hdr_len = skb_network_offset(skb) + -14;
    #line 1116 
    if (chip <= (unsigned int)5) 
                                 #line 1117 
                                 hdr_len = ((unsigned long long)eth_hdr_len << 34) | hdr_len; else 
                                                                    #line 1119 
                                                                    hdr_len = ((unsigned long long)eth_hdr_len << 32) | hdr_len;
    #line 1120 
    return ((unsigned long long)csum_type << 40) | hdr_len;
  }
  else {
    #line 1122 
    int start = skb_transport_offset(skb);
    #line 1125 
    return (((unsigned long long)csum_type << 40) | (unsigned long long)(start << 20)) | ((unsigned long long)((int)skb->__anonCompField_sk_buff_98.__anonCompField___anonunion_540_97.csum_offset + start) << 30);
  }
}

#line 1133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/sge.c"
static void txq_stop(struct sge_eth_txq *txq)
{
  #line 1135 
  netif_tx_stop_queue(txq->txq);
  #line 1136 
  (txq->q.stops) ++;
  #line 1137 
  return;
}

#line 1142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/sge.c"
__inline static void txq_advance(struct sge_txq *tq, unsigned int n)
{
  #line 1144 
  tq->in_use += n;
  #line 1145 
  tq->pidx += n;
  #line 1146 
  if (tq->pidx >= tq->size) 
                            #line 1147 
                            tq->pidx -= tq->size;
  #line 1148 
  return;
}

#line 1157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/sge.c"
int t4vf_eth_xmit(struct sk_buff *skb, struct net_device *dev)
{
  #line 1159 
  u32 wr_mid;
  #line 1160 
  u64 cntrl;
  #line 1160 
  u64 *end;
  #line 1161 
  int qidx;
  #line 1161 
  int credits;
  #line 1161 
  int max_pkt_len;
  #line 1162 
  unsigned int flits;
  #line 1162 
  unsigned int ndesc;
  #line 1163 
  struct adapter *adapter;
  #line 1164 
  struct sge_eth_txq *txq;
  #line 1165 
  struct port_info *pi;
  #line 1166 
  struct fw_eth_tx_pkt_vm_wr *wr;
  #line 1167 
  struct cpl_tx_pkt_core *cpl;
  #line 1168 
  struct skb_shared_info *ssi;
  #line 1169 
  dma_addr_t addr[18U];
  #line 1170 
  size_t fw_hdr_copy_len = 16UL;
  #line 1181 
  if ((long)(skb->len <= 15U) != 0L) 
                                     #line 1182 
                                     goto out_free;
  #line 1185 
  max_pkt_len = (int)(dev->mtu + 14U);
  #line 1186 
  if ((int)skb_vlan_tagged(skb) != 0) 
                                      #line 1187 
                                      max_pkt_len += 4;
  #line 1188 
  ;
  #line 1188 
  if ((unsigned int)((struct skb_shared_info *)skb_end_pointer(skb))->gso_size == 0U) 
    #line 1188 
    if ((long)(skb->len > (unsigned int)max_pkt_len) != 0L) 
                                                            #line 1189 
                                                            goto out_free;
  #line 1194 
  pi = (struct port_info *)netdev_priv(dev);
  #line 1195 
  adapter = pi->adapter;
  #line 1196 
  qidx = (int)skb_get_queue_mapping(skb);
  #line 1197 
  if ((long)((int)pi->nqsets <= qidx) != 0L) {
    #line 1198 
    ldv_inline_asm();
    #line 1199 
    ldv_inline_asm();
    #line 1200 
    ldv_inline_asm();
    #line 1197 
    ;
  }
  #line 1198 
  txq = & adapter->sge.ethtxq[(int)pi->first_qset + qidx];
  #line 1200 
  if (pi->vlan_id != 0U && (unsigned int)skb->vlan_present == 0U) 
                                                                  #line 1201 
                                                                  __vlan_hwaccel_put_tag(skb,(unsigned short)129,(unsigned short)((int)((unsigned short)pi->vlan_id)));
  #line 1208 
  reclaim_completed_tx(adapter,& txq->q,(_Bool)1);
  #line 1215 
  flits = calc_tx_flits(skb);
  #line 1216 
  ndesc = flits_to_desc(flits);
  #line 1217 
  credits = (int)(txq_avail(& txq->q) - ndesc);
  #line 1219 
  if ((long)(credits < 0) != 0L) {
    #line 1226 
    txq_stop(txq);
    #line 1227 
    _dev_err(adapter->pdev_dev,(char *)"%s: TX ring %u full while queue awake!\n",(char *)(& dev->name),qidx);
    #line 1230 
    return 16;
  }
  #line 1233 
  if (is_eth_imm(skb) == 0) {
    #line 1233 
    if ((long)(map_skb(adapter->pdev_dev,skb,(dma_addr_t *)(& addr)) < 0) != 0L) {
      #line 1240 
      (txq->mapping_err) ++;
      #line 1241 
      goto out_free;
    }
  }
  #line 1244 
  wr_mid = (flits + 1U) / 2U;
  #line 1245 
  if ((long)(credits <= 5) != 0L) {
    #line 1255 
    txq_stop(txq);
    #line 1256 
    wr_mid |= 3221225472U;
  }
  #line 1266 
  wr = (struct fw_eth_tx_pkt_vm_wr *)(txq->q.desc + (unsigned long)txq->q.pidx);
  #line 1267 
  wr->equiq_to_len16 = __builtin_bswap32(wr_mid);
  #line 1268 
  wr->r3[0] = 0U;
  #line 1269 
  wr->r3[1] = 0U;
  #line 1270 
  skb_copy_from_linear_data(skb,(void *)(& wr->ethmacdst),16U);
  #line 1271 
  end = (u64 *)wr + (unsigned long)flits;
  #line 1278 
  ssi = (struct skb_shared_info *)skb_end_pointer(skb);
  #line 1279 
  if ((unsigned int)ssi->gso_size != 0U) {
    #line 1319 
    unsigned long long tmp_11;
    #line 1280 
    struct cpl_tx_pkt_lso_core *lso = (struct cpl_tx_pkt_lso_core *)(wr + 1U);
    #line 1281 
    bool v6 = (_Bool)((ssi->gso_type & 16U) != 0U);
    #line 1282 
    int l3hdr_len = (int)skb_network_header_len(skb);
    #line 1283 
    int eth_xtra_len = skb_network_offset(skb) + -14;
    #line 1285 
    wr->op_immdlen = 536870929U;
    #line 1292 
    ;
    #line 1292 
    lso->lso_ctrl = __builtin_bswap32(((((unsigned int)((int)v6 << 20) | (unsigned int)(eth_xtra_len / 4 << 16)) | (unsigned int)(l3hdr_len / 4 << 4)) | (unsigned int)tcp_hdr(skb)->doff) | 3988783104U);
    #line 1300 
    lso->ipid_ofst = (unsigned short)0U;
    #line 1301 
    lso->mss = __builtin_bswap16((unsigned short)((int)ssi->gso_size));
    #line 1302 
    lso->seqno_offset = 0U;
    #line 1303 
    if (is_t4(adapter->params.chip) != 0) 
                                          #line 1304 
                                          lso->len = __builtin_bswap32(skb->len); else 
                                                                    #line 1306 
                                                                    lso->len = __builtin_bswap32(skb->len);
    #line 1312 
    cpl = (struct cpl_tx_pkt_core *)(lso + 1U);
    #line 1314 
    if ((((unsigned int)adapter->params.chip >> 4) & 15U) <= 5U) 
                                                                 #line 1315 
                                                                 cntrl = (unsigned long long)eth_xtra_len << 34; else 
                                                                    #line 1317 
                                                                    cntrl = (unsigned long long)eth_xtra_len << 32;
    #line 1319 
    if ((int)v6 != 0) 
                      #line 1319 
                      tmp_11 = 10995116277760ULL; else 
                                                       #line 1319 
                                                       tmp_11 = 8796093022208ULL;
    #line 1319 
    cntrl = (tmp_11 | ((unsigned long long)l3hdr_len << 20)) | cntrl;
    #line 1322 
    (txq->tso) ++;
    #line 1323 
    txq->tx_cso += (unsigned long)ssi->gso_segs;
  }
  else {
    #line 1325 
    int len;
    #line 1327 
    if (is_eth_imm(skb) != 0) 
                              #line 1327 
                              len = (int)(skb->len + 16U); else 
                                                                #line 1327 
                                                                len = 16;
    #line 1328 
    wr->op_immdlen = __builtin_bswap32((unsigned int)(len | 285212672));
    #line 1336 
    cpl = (struct cpl_tx_pkt_core *)(wr + 1U);
    #line 1337 
    if ((unsigned int)skb->ip_summed == 3U) {
      #line 1338 
      cntrl = hwcsum(adapter->params.chip,skb) | 4611686018427387904ULL;
      #line 1340 
      (txq->tx_cso) ++;
    }
    else 
         #line 1342 
         cntrl = 13835058055282163712ULL;
  }
  #line 1349 
  if ((unsigned int)skb->vlan_present != 0U) {
    #line 1350 
    (txq->vlan_ins) ++;
    #line 1351 
    cntrl = (((unsigned long long)skb->vlan_tci << 44) | cntrl) | 1152921504606846976ULL;
  }
  #line 1357 
  cpl->ctrl0 = __builtin_bswap32((unsigned int)(((int)pi->port_id << 16) | -301989888));
  #line 1360 
  cpl->pack = (unsigned short)0U;
  #line 1361 
  cpl->len = __builtin_bswap16((unsigned short)((int)((unsigned short)skb->len)));
  #line 1362 
  cpl->ctrl1 = (__be64)__builtin_bswap64((unsigned long)cntrl);
  #line 1374 
  if (is_eth_imm(skb) != 0) {
    #line 1379 
    inline_tx_skb(skb,& txq->q,(void *)(cpl + 1U));
    #line 1380 
    dev_consume_skb_any(skb);
  }
  else {
    #line 1421 
    int last_desc;
    #line 1419 
    struct ulptx_sgl *sgl = (struct ulptx_sgl *)(cpl + 1U);
    #line 1420 
    struct sge_txq *tq = & txq->q;
    #line 1430 
    if ((long)((void *)tq->stat == (void *)sgl) != 0L) {
      #line 1431 
      sgl = (struct ulptx_sgl *)tq->desc;
      #line 1432 
      end = (u64 *)((void *)tq->desc + (unsigned long)((void *)end - (void *)tq->stat));
    }
    #line 1435 
    write_sgl(skb,tq,sgl,end,0U,(dma_addr_t *)(& addr));
    #line 1436 
    skb_orphan(skb);
    #line 1438 
    last_desc = (int)((tq->pidx + ndesc) + 4294967295U);
    #line 1439 
    if (tq->size <= (unsigned int)last_desc) 
                                             #line 1440 
                                             last_desc = (int)((unsigned int)last_desc - tq->size);
    #line 1441 
    (tq->sdesc + (unsigned long)last_desc)->skb = skb;
    #line 1442 
    (tq->sdesc + (unsigned long)last_desc)->sgl = sgl;
  }
  #line 1449 
  txq_advance(& txq->q,ndesc);
  #line 1450 
  netif_trans_update(dev);
  #line 1451 
  ring_tx_db(adapter,& txq->q,(int)ndesc);
  #line 1452 
  return 0;
  #line 1454 
  out_free: 
            #line 1454 
  ;
  #line 1459 
  dev_kfree_skb_any(skb);
  #line 1460 
  return 0;
}

#line 1472  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/sge.c"
__inline static void copy_frags(struct sk_buff *skb, struct pkt_gl *gl, unsigned int offset)
{
  #line 1476 
  int i;
  #line 1479 
  __skb_fill_page_desc(skb,0,gl->frags[0].page,(int)(gl->frags[0].offset + offset),(int)(gl->frags[0].size - offset));
  #line 1482 
  ((struct skb_shared_info *)skb_end_pointer(skb))->nr_frags = (unsigned char)gl->nfrags;
  #line 1483 
  i = 1;
  #line 1483 
  while (gl->nfrags > (unsigned int)i) {
    #line 1484 
    __skb_fill_page_desc(skb,i,gl->frags[i].page,(int)gl->frags[i].offset,(int)gl->frags[i].size);
    #line 1483 
    i ++;
  }
  #line 1489 
  get_page(gl->frags[gl->nfrags + 4294967295U].page);
  #line 1490 
  return;
}

#line 1501  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/sge.c"
static struct sk_buff *t4vf_pktgl_to_skb(struct pkt_gl *gl, unsigned int skb_len, unsigned int pull_len)
{
  #line 1505 
  struct sk_buff *skb;
  #line 1518 
  if (gl->tot_len <= 256U) {
    #line 1520 
    skb = alloc_skb(gl->tot_len,2592U);
    #line 1521 
    if ((long)(skb == (struct sk_buff *)0) != 0L) 
                                                  #line 1522 
                                                  goto out;
    #line 1523 
    __skb_put(skb,gl->tot_len);
    #line 1524 
    skb_copy_to_linear_data(skb,gl->va,gl->tot_len);
  }
  else {
    #line 1526 
    skb = alloc_skb(skb_len,2592U);
    #line 1527 
    if ((long)(skb == (struct sk_buff *)0) != 0L) 
                                                  #line 1528 
                                                  goto out;
    #line 1529 
    __skb_put(skb,pull_len);
    #line 1530 
    skb_copy_to_linear_data(skb,gl->va,pull_len);
    #line 1532 
    copy_frags(skb,gl,pull_len);
    #line 1533 
    skb->len = gl->tot_len;
    #line 1534 
    skb->data_len = skb->len - pull_len;
    #line 1535 
    skb->truesize += skb->data_len;
  }
  #line 1538 
  out: 
       #line 1538 
  ;
  #line 1539 
  return skb;
}

#line 1549  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/sge.c"
static void t4vf_pktgl_free(struct pkt_gl *gl)
{
  #line 1551 
  int frag;
  #line 1553 
  frag = (int)(gl->nfrags + 4294967295U);
  #line 1554 
  while (1) {
    #line 1554 
    int tmp;
    #line 1554 
    tmp = frag;
    #line 1554 
    frag --;
    #line 1554 
    ;
    #line 1554 
    if (! (tmp != 0)) 
                      #line 1554 
                      break;
    #line 1555 
    put_page(gl->frags[frag].page);
  }
  #line 1556 
  return;
}

#line 1567  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/sge.c"
static void do_gro(struct sge_eth_rxq *rxq, struct pkt_gl *gl, struct cpl_rx_pkt *pkt)
{
  #line 1572 
  struct port_info *pi;
  #line 1573 
  int ret;
  #line 1574 
  struct sk_buff *skb;
  #line 1570 
  struct adapter *adapter = rxq->rspq.adapter;
  #line 1571 
  struct sge *s = & adapter->sge;
  #line 1576 
  skb = napi_get_frags(& rxq->rspq.napi);
  #line 1577 
  if ((long)(skb == (struct sk_buff *)0) != 0L) {
    #line 1578 
    t4vf_pktgl_free(gl);
    #line 1579 
    (rxq->stats.rx_drops) ++;
    #line 1580 
    return;
  }
  #line 1583 
  copy_frags(skb,gl,s->pktshift);
  #line 1584 
  skb->len = gl->tot_len - s->pktshift;
  #line 1585 
  skb->data_len = skb->len;
  #line 1586 
  skb->truesize += skb->data_len;
  #line 1587 
  skb->ip_summed = (unsigned char)1U;
  #line 1588 
  skb_record_rx_queue(skb,(unsigned short)((int)rxq->rspq.idx));
  #line 1589 
  pi = (struct port_info *)netdev_priv(skb->__anonCompField_sk_buff_92.__anonCompField___anonunion_533_91.__anonCompField___anonstruct_534_90.dev);
  #line 1591 
  if ((unsigned int)pkt->vlan_ex != 0U && pi->vlan_id == 0U) {
    #line 1592 
    ;
    #line 1592 
    __vlan_hwaccel_put_tag(skb,(unsigned short)129,(unsigned short)((int)__builtin_bswap16((unsigned short)((int)pkt->vlan))));
    #line 1594 
    (rxq->stats.vlan_ex) ++;
  }
  #line 1596 
  ret = (int)napi_gro_frags(& rxq->rspq.napi);
  #line 1598 
  if (ret == 2) 
                #line 1599 
                (rxq->stats.lro_pkts) ++;
  else 
    #line 1600 
    if ((unsigned int)ret <= 1U) 
                                 #line 1601 
                                 (rxq->stats.lro_merged) ++;
  #line 1602 
  (rxq->stats.pkts) ++;
  #line 1603 
  (rxq->stats.rx_cso) ++;
  #line 1604 
  return;
}

#line 1614  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/sge.c"
int t4vf_ethrx_handler(struct sge_rspq *rspq, __be64 *rsp, struct pkt_gl *gl)
{
  #line 1621 
  void *__mptr;
  #line 1617 
  struct sk_buff *skb;
  #line 1624 
  struct port_info *pi;
  #line 1618 
  struct cpl_rx_pkt *pkt = (struct cpl_rx_pkt *)rsp;
  #line 1619 
  bool csum_ok = (_Bool)((((unsigned int)pkt->csum_calc != 0U && (unsigned int)pkt->err_vec == 0U) && ((rspq->netdev)->features & 549755813888ULL) != 0ULL) != 0);
  #line 1621 
  __mptr = (void *)rspq;
  #line 1621 
  struct sge_eth_rxq *rxq = ((struct sge_eth_rxq *)__mptr);
  #line 1622 
  struct adapter *adapter = rspq->adapter;
  #line 1623 
  struct sge *s = & adapter->sge;
  #line 1630 
  if ((((pkt->l2info & 32768U) != 0U && ((rspq->netdev)->features & 16384ULL) != 0ULL) && (int)csum_ok != 0) && (unsigned int)pkt->ip_frag == 0U) {
    #line 1633 
    do_gro(rxq,gl,pkt);
    #line 1634 
    return 0;
  }
  #line 1640 
  skb = t4vf_pktgl_to_skb(gl,512U,128U);
  #line 1641 
  if ((long)(skb == (struct sk_buff *)0) != 0L) {
    #line 1642 
    t4vf_pktgl_free(gl);
    #line 1643 
    (rxq->stats.rx_drops) ++;
    #line 1644 
    return 0;
  }
  #line 1646 
  __skb_pull(skb,s->pktshift);
  #line 1647 
  skb->protocol = eth_type_trans(skb,rspq->netdev);
  #line 1648 
  skb_record_rx_queue(skb,(unsigned short)((int)rspq->idx));
  #line 1649 
  pi = (struct port_info *)netdev_priv(skb->__anonCompField_sk_buff_92.__anonCompField___anonunion_533_91.__anonCompField___anonstruct_534_90.dev);
  #line 1650 
  (rxq->stats.pkts) ++;
  #line 1652 
  if ((int)csum_ok != 0 && (unsigned int)pkt->err_vec == 0U) {
    #line 1652 
    if ((__builtin_bswap32(pkt->l2info) & 12582912U) != 0U) {
      #line 1654 
      if ((unsigned int)pkt->ip_frag == 0U) {
        #line 1655 
        skb->ip_summed = (unsigned char)1U;
        #line 1656 
        (rxq->stats.rx_cso) ++;
      }
      else 
        #line 1657 
        if ((pkt->l2info & 1U) != 0U) {
          #line 1658 
          __sum16 c = pkt->csum;
          #line 1659 
          skb->__anonCompField_sk_buff_98.csum = csum_unfold((unsigned short)((int)c));
          #line 1660 
          skb->ip_summed = (unsigned char)2U;
          #line 1661 
          (rxq->stats.rx_cso) ++;
        }
    }
    else 
         #line 1664 
         skb_checksum_none_assert(skb);
  }
  else 
       #line 1664 
       skb_checksum_none_assert(skb);
  #line 1666 
  if ((unsigned int)pkt->vlan_ex != 0U && pi->vlan_id == 0U) {
    #line 1667 
    (rxq->stats.vlan_ex) ++;
    #line 1668 
    ;
    #line 1668 
    __vlan_hwaccel_put_tag(skb,(unsigned short)129,(unsigned short)((int)__builtin_bswap16((unsigned short)((int)pkt->vlan))));
  }
  #line 1672 
  netif_receive_skb(skb);
  #line 1674 
  return 0;
}

#line 1685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/sge.c"
__inline static bool is_new_response(struct rsp_ctrl *rc, struct sge_rspq *rspq)
{
  #line 1688 
  return (_Bool)((((int)rc->__anonCompField_rsp_ctrl_200.type_gen >> 7) & 1) == (int)rspq->gen);
}

#line 1711  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/sge.c"
static void restore_rx_bufs(struct pkt_gl *gl, struct sge_fl *fl, int frags)
{
  #line 1714 
  struct rx_sw_desc *sdesc;
  #line 1716 
  while (1) {
    #line 1716 
    int tmp;
    #line 1716 
    tmp = frags;
    #line 1716 
    frags --;
    #line 1716 
    ;
    #line 1716 
    if (! (tmp != 0)) 
                      #line 1716 
                      break;
    #line 1717 
    if (fl->cidx == 0U) 
                        #line 1718 
                        fl->cidx = fl->size + 4294967295U; else 
                                                                #line 1720 
                                                                (fl->cidx) --;
    #line 1721 
    sdesc = fl->sdesc + (unsigned long)fl->cidx;
    #line 1722 
    sdesc->page = gl->frags[frags].page;
    #line 1723 
    sdesc->dma_addr |= 2ULL;
    #line 1724 
    (fl->avail) ++;
  }
  #line 1726 
  return;
}

#line 1734  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/sge.c"
__inline static void rspq_next(struct sge_rspq *rspq)
{
  #line 1736 
  rspq->cur_desc = (__be64 *)((void *)rspq->cur_desc + (unsigned long)rspq->iqe_len);
  #line 1737 
  (rspq->cidx) ++;
  #line 1737 
  ;
  #line 1737 
  if ((long)(rspq->cidx == rspq->size) != 0L) {
    #line 1738 
    rspq->cidx = 0U;
    #line 1739 
    rspq->gen = (unsigned char)((unsigned int)rspq->gen ^ 1U);
    #line 1740 
    rspq->cur_desc = rspq->desc;
  }
  #line 1742 
  return;
}

#line 1757  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/sge.c"
static int process_responses(struct sge_rspq *rspq, int budget)
{
  #line 1759 
  void *__mptr;
  #line 1759 
  __mptr = (void *)rspq;
  #line 1759 
  struct sge_eth_rxq *rxq = ((struct sge_eth_rxq *)__mptr);
  #line 1760 
  struct adapter *adapter = rspq->adapter;
  #line 1761 
  struct sge *s = & adapter->sge;
  #line 1762 
  int budget_left = budget;
  #line 1764 
  while ((long)(budget_left != 0) != 0L) {
    #line 1765 
    int ret;
    #line 1765 
    int rsp_type;
    #line 1766 
    struct rsp_ctrl *rc;
    #line 1768 
    rc = (struct rsp_ctrl *)((void *)rspq->cur_desc + ((unsigned long)rspq->iqe_len + 18446744073709551600U));
    #line 1769 
    if (! is_new_response(rc,rspq)) 
                                    #line 1770 
                                    break;
    #line 1771 
    ldv_inline_asm();
    #line 1777 
    rsp_type = ((int)rc->__anonCompField_rsp_ctrl_200.type_gen >> 4) & 3;
    #line 1778 
    if ((long)(rsp_type == 0) != 0L) {
      #line 1779 
      struct page_frag *fp;
      #line 1780 
      struct pkt_gl gl;
      #line 1781 
      struct rx_sw_desc *sdesc;
      #line 1782 
      u32 bufsz;
      #line 1782 
      u32 frag;
      #line 1783 
      u32 len = __builtin_bswap32(rc->pldbuflen_qid);
      #line 1789 
      if ((len & 2147483648U) != 0U) {
        #line 1795 
        if ((long)(rspq->offset > 0) != 0L) {
          #line 1796 
          free_rx_bufs(rspq->adapter,& rxq->fl,1);
          #line 1798 
          rspq->offset = 0;
        }
        #line 1800 
        len &= 2147483647U;
      }
      #line 1802 
      gl.tot_len = len;
      #line 1807 
      frag = 0U;
      #line 1807 
      fp = (struct page_frag *)(& gl.frags);
      #line 1807 
      while (1) {
        {
          #line 1814 
          u32 __UNIQUE_ID___x562;
          #line 1814 
          u32 tmp_3;
          #line 1808 
          if ((long)(frag > 16U) != 0L) {
            #line 1809 
            ldv_inline_asm();
            #line 1810 
            ldv_inline_asm();
            #line 1811 
            ldv_inline_asm();
            #line 1808 
            ;
          }
          #line 1809 
          if ((long)(rxq->fl.avail == 0U) != 0L) {
            #line 1810 
            ldv_inline_asm();
            #line 1811 
            ldv_inline_asm();
            #line 1812 
            ldv_inline_asm();
            #line 1809 
            ;
          }
          #line 1810 
          sdesc = rxq->fl.sdesc + (unsigned long)rxq->fl.cidx;
          #line 1811 
          bufsz = (unsigned int)get_buf_size(adapter,sdesc);
          #line 1812 
          fp->page = sdesc->page;
          #line 1813 
          fp->offset = (unsigned int)rspq->offset;
          {
            #line 1814 
            __UNIQUE_ID___x562 = bufsz;
            #line 1814 
            u32 __UNIQUE_ID___y563 = len;
            #line 1814 
            if (__UNIQUE_ID___x562 < __UNIQUE_ID___y563) 
                                                         #line 1814 
                                                         tmp_3 = __UNIQUE_ID___x562; else 
                                                                    #line 1814 
                                                                    tmp_3 = __UNIQUE_ID___y563;
            }
          #line 1814 
          fp->size = tmp_3;
          #line 1815 
          len -= fp->size;
          #line 1816 
          if (len == 0U) 
                         #line 1817 
                         break;
          #line 1818 
          unmap_rx_buf(rspq->adapter,& rxq->fl);
        }
        #line 1807 
        frag ++;
        #line 1807 
        fp ++;
      }
      #line 1820 
      gl.nfrags = frag + 1U;
      #line 1827 
      ;
      #line 1827 
      ;
      #line 1827 
      dma_sync_single_for_cpu((rspq->adapter)->pdev_dev,get_buf_addr(sdesc),(unsigned long)fp->size,(enum dma_data_direction)DMA_FROM_DEVICE);
      #line 1830 
      gl.va = lowmem_page_address(gl.frags[0].page) + (unsigned long)gl.frags[0].offset;
      #line 1832 
      __builtin_prefetch((void const *)gl.va);
      #line 1838 
      ret = (*(rspq->handler))(rspq,rspq->cur_desc,& gl);
      #line 1839 
      if ((long)(ret == 0) != 0L) 
                                  #line 1840 
                                  rspq->offset = (int)((unsigned int)rspq->offset + (((fp->size + s->fl_align) + 4294967295U) & - s->fl_align)); else 
                                                                    #line 1842 
                                                                    restore_rx_bufs(& gl,& rxq->fl,(int)frag);
    }
    else 
      #line 1843 
      if ((long)(rsp_type == 1) != 0L) 
                                       #line 1844 
                                       ret = (*(rspq->handler))(rspq,rspq->cur_desc,(struct pkt_gl *)0);
      else {
        {
          #line 1846 
          int __ret_warn_on = rsp_type > 1;
          #line 1846 
          if ((long)(__ret_warn_on != 0) != 0L) {
            #line 1847 
            ldv_inline_asm();
            #line 1848 
            ldv_inline_asm();
          }
          #line 1846 
          long tmp_7 = (long)(__ret_warn_on != 0);
        }
        #line 1847 
        ret = 0;
      }
    #line 1850 
    if ((long)(ret != 0) != 0L) {
      #line 1856 
      int NOMEM_TIMER_IDX = 5;
      #line 1857 
      rspq->next_intr_params = (unsigned char)10U;
      #line 1859 
      break;
    }
    #line 1862 
    rspq_next(rspq);
    #line 1863 
    budget_left --;
  }
  #line 1871 
  if (rspq->offset >= 0) {
    #line 1871 
    ;
    #line 1871 
    if (fl_cap(& rxq->fl) - rxq->fl.avail > 15U) 
                                                 #line 1873 
                                                 __refill_fl(rspq->adapter,& rxq->fl);
  }
  #line 1874 
  return budget - budget_left;
}

#line 1888  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/sge.c"
static int napi_rx_handler(struct napi_struct *napi, int budget)
{
  #line 1891 
  void *__mptr;
  #line 1890 
  unsigned int intr_params;
  #line 1893 
  u32 val;
  #line 1891 
  __mptr = (void *)napi;
  #line 1891 
  struct sge_rspq *rspq = ((struct sge_rspq *)__mptr);
  #line 1892 
  int work_done = process_responses(rspq,budget);
  #line 1895 
  if ((long)(work_done < budget) != 0L) {
    #line 1896 
    napi_complete_done(napi,work_done);
    #line 1897 
    intr_params = (unsigned int)rspq->next_intr_params;
    #line 1898 
    rspq->next_intr_params = rspq->intr_params;
  }
  else 
       #line 1900 
       intr_params = 14U;
  #line 1902 
  if ((long)(work_done == 0) != 0L) 
                                    #line 1903 
                                    (rspq->unhandled_irqs) ++;
  #line 1905 
  val = (intr_params << 12) | (unsigned int)work_done;
  #line 1909 
  if ((long)(rspq->bar2_addr == (void *)0) != 0L) 
                                                  #line 1910 
                                                  t4_write_reg(rspq->adapter,4U,((unsigned int)rspq->cntxt_id << 16) | val);
  else {
    #line 1914 
    writel((rspq->bar2_qid << 16) | val,rspq->bar2_addr + 20U);
    #line 1916 
    ldv_inline_asm();
  }
  #line 1918 
  return work_done;
}

#line 1925  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/sge.c"
irqreturn_t t4vf_sge_intr_msix(int irq, void *cookie)
{
  #line 1927 
  struct sge_rspq *rspq = (struct sge_rspq *)cookie;
  #line 1929 
  napi_schedule(& rspq->napi);
  #line 1930 
  return IRQ_HANDLED;
}

#line 1937  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/sge.c"
static unsigned int process_intrq(struct adapter *adapter)
{
  #line 1941 
  unsigned int work_done;
  #line 1942 
  u32 val;
  #line 1939 
  struct sge *s = & adapter->sge;
  #line 1940 
  struct sge_rspq *intrq = & s->intrq;
  #line 1944 
  cif_spin_lock_intrq_lock_of_sge(& adapter->sge.intrq_lock);
  #line 1945 
  work_done = 0U;
  #line 1945 
  while (1) {
    {
      #line 1946 
      struct rsp_ctrl *rc;
      #line 1947 
      unsigned int qid;
      #line 1947 
      unsigned int iq_idx;
      #line 1948 
      struct sge_rspq *rspq;
      #line 1954 
      rc = (struct rsp_ctrl *)((void *)intrq->cur_desc + ((unsigned long)intrq->iqe_len + 18446744073709551600U));
      #line 1955 
      if (! is_new_response(rc,intrq)) 
                                       #line 1956 
                                       break;
      #line 1957 
      ldv_inline_asm();
      #line 1964 
      if ((long)((((int)rc->__anonCompField_rsp_ctrl_200.type_gen >> 4) & 3) != 2) != 0L) {
        #line 1965 
        _dev_err(adapter->pdev_dev,(char *)"Unexpected INTRQ response type %d\n",((int)rc->__anonCompField_rsp_ctrl_200.type_gen >> 4) & 3);
        #line 1968 
        goto __Cont;
      }
      #line 1979 
      qid = __builtin_bswap32(rc->pldbuflen_qid) & 2147483647U;
      #line 1980 
      iq_idx = qid - s->ingr_base;
      #line 1981 
      if ((long)(iq_idx > 9U) != 0L) {
        #line 1982 
        _dev_err(adapter->pdev_dev,(char *)"Ingress QID %d out of range\n",qid);
        #line 1984 
        goto __Cont;
      }
      #line 1986 
      rspq = s->ingr_map[iq_idx];
      #line 1987 
      if ((long)(rspq == (struct sge_rspq *)0) != 0L) {
        #line 1988 
        _dev_err(adapter->pdev_dev,(char *)"Ingress QID %d RSPQ=NULL\n",qid);
        #line 1990 
        goto __Cont;
      }
      #line 1992 
      if ((long)((unsigned int)rspq->abs_id != qid) != 0L) {
        #line 1993 
        _dev_err(adapter->pdev_dev,(char *)"Ingress QID %d refers to RSPQ %d\n",qid,(int)rspq->abs_id);
        #line 1996 
        goto __Cont;
      }
      #line 2004 
      napi_schedule(& rspq->napi);
      #line 2005 
      rspq_next(intrq);
    }
    #line 1945 
    __Cont: 
            #line 1945 
    work_done ++;
  }
  #line 2008 
  val = (unsigned int)((int)intrq->intr_params << 12) | work_done;
  #line 2012 
  if ((long)(intrq->bar2_addr == (void *)0) != 0L) 
                                                   #line 2013 
                                                   t4_write_reg(adapter,4U,(unsigned int)((int)intrq->cntxt_id << 16) | val);
  else {
    #line 2016 
    writel((intrq->bar2_qid << 16) | val,intrq->bar2_addr + 20U);
    #line 2018 
    ldv_inline_asm();
  }
  #line 2021 
  cif_spin_unlock_intrq_lock_of_sge(& adapter->sge.intrq_lock);
  #line 2023 
  return work_done;
}

#line 2030  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/sge.c"
static irqreturn_t t4vf_intr_msi(int irq, void *cookie)
{
  #line 2032 
  struct adapter *adapter = (struct adapter *)cookie;
  #line 2034 
  process_intrq(adapter);
  #line 2035 
  return IRQ_HANDLED;
}

#line 2045  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/sge.c"
irq_handler_t t4vf_intr_handler(struct adapter *adapter)
{
  #line 2047 
  if ((long)((adapter->flags & 6UL) == 0UL) != 0L) {
    #line 2048 
    ldv_inline_asm();
    #line 2049 
    ldv_inline_asm();
    #line 2050 
    ldv_inline_asm();
    #line 2047 
    ;
  }
  #line 2049 
  if ((adapter->flags & 4UL) != 0UL) 
                                     #line 2050 
                                     return & t4vf_sge_intr_msix; else 
                                                                    #line 2052 
                                                                    return & t4vf_intr_msi;
}

#line 2066  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/sge.c"
static void sge_rx_timer_cb(struct timer_list *t)
{
  #line 2068 
  void *__mptr;
  #line 2070 
  unsigned int i;
  #line 2068 
  __mptr = (void *)t;
  #line 2068 
  struct adapter *adapter = ((struct adapter *)(__mptr + 18446744073709543944U));
  #line 2069 
  struct sge *s = & adapter->sge;
  #line 2080 
  i = 0U;
  #line 2080 
  while (i == 0U) {
    {
      #line 2081 
      unsigned long m;
      #line 2083 
      m = s->starving_fl[i];
      #line 2083 
      while (m != 0UL) {
        {
          #line 2084 
          unsigned int id = (unsigned int)__ffs(m) + i * 64U;
          #line 2085 
          struct sge_fl *fl = (struct sge_fl *)s->egr_map[id];
          #line 2087 
          cif_clear_bit_0((long)id,(unsigned long *)(& s->starving_fl));
          #line 2096 
          if ((int)fl_starving(adapter,fl) != 0) {
            #line 2099 
            void *__mptr_0;
            #line 2097 
            struct sge_eth_rxq *rxq;
            #line 2099 
            __mptr_0 = (void *)fl;
            #line 2099 
            rxq = ((struct sge_eth_rxq *)(__mptr_0 + 18446744073709551128U));
            #line 2100 
            if ((int)napi_reschedule(& rxq->rspq.napi) != 0) 
                                                             #line 2101 
                                                             (fl->starving) ++; else 
                                                                    #line 2103 
                                                                    cif_set_bit_0((long)id,(unsigned long *)(& s->starving_fl));
          }
        }
        #line 2083 
        m = (m + 18446744073709551615UL) & m;
      }
    }
    #line 2080 
    i ++;
  }
  #line 2111 
  cif_mod_timer(& s->rx_timer,jiffies + 125UL);
  #line 2112 
  return;
}

#line 2125  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/sge.c"
static void sge_tx_timer_cb(struct timer_list *t)
{
  #line 2127 
  void *__mptr;
  #line 2129 
  unsigned int i;
  #line 2129 
  unsigned int budget;
  #line 2162 
  unsigned long tmp_3;
  #line 2127 
  __mptr = (void *)t;
  #line 2127 
  struct adapter *adapter = ((struct adapter *)(__mptr + 18446744073709543856U));
  #line 2128 
  struct sge *s = & adapter->sge;
  #line 2131 
  budget = 100U;
  #line 2132 
  i = (unsigned int)s->ethtxq_rover;
  #line 2133 
  while (1) {
    {
      #line 2134 
      struct sge_eth_txq *txq = & s->ethtxq[i];
      #line 2136 
      if (reclaimable(& txq->q) != 0) {
        #line 2136 
        if ((int)__netif_tx_trylock(txq->txq) != 0) {
          #line 2137 
          int avail = reclaimable(& txq->q);
          #line 2139 
          if ((unsigned int)avail > budget) 
                                            #line 2140 
                                            avail = (int)budget;
          #line 2142 
          free_tx_desc(adapter,& txq->q,(unsigned int)avail,(_Bool)1);
          #line 2143 
          txq->q.in_use -= (unsigned int)avail;
          #line 2144 
          __netif_tx_unlock(txq->txq);
          #line 2146 
          budget -= (unsigned int)avail;
          #line 2147 
          if (budget == 0U) 
                            #line 2148 
                            break;
        }
      }
      #line 2151 
      i ++;
      #line 2152 
      if ((unsigned int)s->ethqsets <= i) 
                                          #line 2153 
                                          i = 0U;
    }
    #line 2154 
    if (! ((unsigned int)s->ethtxq_rover != i)) 
                                                #line 2133 
                                                break;
  }
  #line 2155 
  s->ethtxq_rover = (unsigned short)i;
  #line 2162 
  if (budget != 0U) 
                    #line 2162 
                    tmp_3 = 125UL; else 
                                        #line 2162 
                                        tmp_3 = 2UL;
  #line 2162 
  ;
  #line 2162 
  ;
  #line 2162 
  cif_mod_timer(& s->tx_timer,tmp_3 + jiffies);
  #line 2163 
  return;
}

#line 2178  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/sge.c"
static void *bar2_address(struct adapter *adapter, unsigned int qid, enum t4_bar2_qtype qtype, unsigned int *pbar2_qid)
{
  #line 2183 
  u64 bar2_qoffset;
  #line 2184 
  int ret;
  #line 2186 
  ret = t4vf_bar2_sge_qregs(adapter,qid,qtype,& bar2_qoffset,pbar2_qid);
  #line 2188 
  if (ret != 0) 
                #line 2189 
                return (void *)0;
  #line 2191 
  return adapter->bar2 + bar2_qoffset;
}

#line 2204  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/sge.c"
int t4vf_sge_alloc_rxq(struct adapter *adapter, struct sge_rspq *rspq, bool iqasynch, struct net_device *dev, int intr_dest, struct sge_fl *fl, int (*hnd)(struct sge_rspq *, __be64 *, struct pkt_gl *))
{
  #line 2265 
  unsigned int tmp_40;
  #line 2265 
  unsigned int tmp_8;
  #line 2265 
  unsigned int tmp_9;
  #line 2265 
  unsigned int tmp_41;
  #line 2265 
  unsigned int tmp_42;
  #line 2265 
  unsigned int tmp_10;
  #line 2265 
  unsigned int tmp_11;
  #line 2265 
  unsigned int tmp_43;
  #line 2265 
  unsigned int tmp_44;
  #line 2265 
  unsigned int tmp_12;
  #line 2265 
  unsigned int tmp_13;
  #line 2265 
  unsigned int tmp_45;
  #line 2265 
  unsigned int tmp_46;
  #line 2265 
  unsigned int tmp_14;
  #line 2265 
  unsigned int tmp_15;
  #line 2265 
  unsigned int tmp_47;
  #line 2265 
  unsigned int tmp_48;
  #line 2265 
  unsigned int tmp_16;
  #line 2265 
  unsigned int tmp_17;
  #line 2265 
  unsigned int tmp_49;
  #line 2265 
  unsigned int tmp_50;
  #line 2265 
  unsigned int tmp_18;
  #line 2265 
  unsigned int tmp_19;
  #line 2265 
  unsigned int tmp_51;
  #line 2265 
  unsigned int tmp_52;
  #line 2265 
  unsigned int tmp_20;
  #line 2265 
  unsigned int tmp_21;
  #line 2265 
  unsigned int tmp_53;
  #line 2265 
  unsigned int tmp_54;
  #line 2265 
  unsigned int tmp_22;
  #line 2265 
  unsigned int tmp_23;
  #line 2265 
  unsigned int tmp_55;
  #line 2265 
  unsigned int tmp_56;
  #line 2265 
  unsigned int tmp_24;
  #line 2265 
  unsigned int tmp_25;
  #line 2265 
  unsigned int tmp_57;
  #line 2265 
  unsigned int tmp_58;
  #line 2265 
  unsigned int tmp_26;
  #line 2265 
  unsigned int tmp_27;
  #line 2265 
  unsigned int tmp_59;
  #line 2265 
  unsigned int tmp_60;
  #line 2265 
  unsigned int tmp_28;
  #line 2265 
  unsigned int tmp_29;
  #line 2265 
  unsigned int tmp_61;
  #line 2265 
  unsigned int tmp_62;
  #line 2265 
  unsigned int tmp_30;
  #line 2265 
  unsigned int tmp_31;
  #line 2265 
  unsigned int tmp_63;
  #line 2235 
  int __y;
  #line 2265 
  unsigned int tmp_64;
  #line 2265 
  unsigned int tmp_32;
  #line 2265 
  unsigned int tmp_33;
  #line 2265 
  unsigned int tmp_34;
  #line 2265 
  unsigned int tmp_2;
  #line 2265 
  unsigned int tmp_3;
  #line 2265 
  unsigned int tmp_35;
  #line 2265 
  unsigned int tmp_36;
  #line 2265 
  unsigned int tmp_4;
  #line 2265 
  unsigned int tmp_5;
  #line 2265 
  unsigned int tmp_37;
  #line 2265 
  unsigned int tmp_38;
  #line 2265 
  unsigned int tmp_6;
  #line 2265 
  unsigned int tmp_7;
  #line 2265 
  unsigned int tmp_39;
  #line 2211 
  struct fw_iq_cmd cmd;
  #line 2211 
  struct fw_iq_cmd rpl;
  #line 2212 
  int ret;
  #line 2212 
  int iqandst;
  #line 2265 
  unsigned int tmp_66;
  #line 2209 
  struct sge *s = & adapter->sge;
  #line 2210 
  struct port_info *pi = netdev_priv(dev);
  #line 2212 
  int flsz = 0;
  #line 2213 
  int relaxed = (adapter->flags & 16UL) == 0UL;
  #line 2222 
  if ((adapter->flags & 2UL) != 0UL && & adapter->sge.intrq != rspq) {
    #line 2224 
    iqandst = 1;
    #line 2225 
    intr_dest = (int)adapter->sge.intrq.abs_id;
  }
  else 
       #line 2227 
       iqandst = 0;
  #line 2235 
  __y = 16;
  #line 2235 
  rspq->size = ((((rspq->size + (unsigned int)__y) + 4294967295U) / (unsigned int)__y) * (unsigned int)__y);
  #line 2236 
  rspq->desc = (__be64 *)alloc_ring(adapter->pdev_dev,(unsigned long)rspq->size,(unsigned long)rspq->iqe_len,0UL,& rspq->phys_addr,(void *)0,0UL);
  #line 2238 
  if (rspq->desc == (__be64 *)0ULL) 
                                    #line 2239 
                                    return -12;
  #line 2248 
  memset((void *)(& cmd),0,64UL);
  #line 2249 
  cmd.op_to_vfn = 45072U;
  #line 2253 
  cmd.alloc_to_len16 = 67109008U;
  #line 2256 
  cmd.type_to_iqandstindex = __builtin_bswap32((unsigned int)((((((int)iqasynch << 28) | ((int)pi->viid << 16)) | (iqandst << 15)) | 20480) | intr_dest));
  #line 2265 
  if (0 != 0) {
    #line 2265 
    if (rspq->iqe_len > 1U) {
      #line 2265 
      if (((unsigned long long)rspq->iqe_len & 9223372036854775808ULL) == 0ULL) {
        #line 2265 
        if (((unsigned long long)rspq->iqe_len & 4611686018427387904ULL) == 0ULL) {
          #line 2265 
          if (((unsigned long long)rspq->iqe_len & 2305843009213693952ULL) == 0ULL) {
            #line 2265 
            if (((unsigned long long)rspq->iqe_len & 1152921504606846976ULL) == 0ULL) {
              #line 2265 
              if (((unsigned long long)rspq->iqe_len & 576460752303423488ULL) == 0ULL) {
                #line 2265 
                if (((unsigned long long)rspq->iqe_len & 288230376151711744ULL) == 0ULL) {
                  #line 2265 
                  if (((unsigned long long)rspq->iqe_len & 144115188075855872ULL) == 0ULL) {
                    #line 2265 
                    if (((unsigned long long)rspq->iqe_len & 72057594037927936ULL) == 0ULL) {
                      #line 2265 
                      if (((unsigned long long)rspq->iqe_len & 36028797018963968ULL) == 0ULL) {
                        #line 2265 
                        if (((unsigned long long)rspq->iqe_len & 18014398509481984ULL) == 0ULL) {
                          #line 2265 
                          if (((unsigned long long)rspq->iqe_len & 9007199254740992ULL) == 0ULL) {
                            #line 2265 
                            if (((unsigned long long)rspq->iqe_len & 4503599627370496ULL) == 0ULL) {
                              #line 2265 
                              if (((unsigned long long)rspq->iqe_len & 2251799813685248ULL) == 0ULL) {
                                #line 2265 
                                if (((unsigned long long)rspq->iqe_len & 1125899906842624ULL) == 0ULL) {
                                  #line 2265 
                                  if (((unsigned long long)rspq->iqe_len & 562949953421312ULL) == 0ULL) {
                                    #line 2265 
                                    if (((unsigned long long)rspq->iqe_len & 281474976710656ULL) == 0ULL) {
                                      #line 2265 
                                      if (((unsigned long long)rspq->iqe_len & 140737488355328ULL) == 0ULL) {
                                        #line 2265 
                                        if (((unsigned long long)rspq->iqe_len & 70368744177664ULL) == 0ULL) {
                                          #line 2265 
                                          if (((unsigned long long)rspq->iqe_len & 35184372088832ULL) == 0ULL) {
                                            #line 2265 
                                            if (((unsigned long long)rspq->iqe_len & 17592186044416ULL) == 0ULL) {
                                              #line 2265 
                                              if (((unsigned long long)rspq->iqe_len & 8796093022208ULL) == 0ULL) {
                                                #line 2265 
                                                if (((unsigned long long)rspq->iqe_len & 4398046511104ULL) == 0ULL) {
                                                  #line 2265 
                                                  if (((unsigned long long)rspq->iqe_len & 2199023255552ULL) == 0ULL) {
                                                    #line 2265 
                                                    if (((unsigned long long)rspq->iqe_len & 1099511627776ULL) == 0ULL) {
                                                      #line 2265 
                                                      if (((unsigned long long)rspq->iqe_len & 549755813888ULL) == 0ULL) {
                                                        #line 2265 
                                                        if (((unsigned long long)rspq->iqe_len & 274877906944ULL) == 0ULL) {
                                                          #line 2265 
                                                          if (((unsigned long long)rspq->iqe_len & 137438953472ULL) == 0ULL) {
                                                            #line 2265 
                                                            if (((unsigned long long)rspq->iqe_len & 68719476736ULL) == 0ULL) {
                                                              #line 2265 
                                                              if (((unsigned long long)rspq->iqe_len & 34359738368ULL) == 0ULL) {
                                                                #line 2265 
                                                                if (((unsigned long long)rspq->iqe_len & 17179869184ULL) == 0ULL) {
                                                                  #line 2265 
                                                                  if (
                                                                    ((unsigned long long)rspq->iqe_len & 8589934592ULL) == 0ULL) {
                                                                    #line 2265 
                                                                    if (
                                                                    ((unsigned long long)rspq->iqe_len & 4294967296ULL) == 0ULL) {
                                                                    #line 2265 
                                                                    if (
                                                                    ((unsigned long long)rspq->iqe_len & 2147483648ULL) == 0ULL) {
                                                                    #line 2265 
                                                                    if (
                                                                    ((unsigned long long)rspq->iqe_len & 1073741824ULL) == 0ULL) {
                                                                    #line 2265 
                                                                    if (
                                                                    ((unsigned long long)rspq->iqe_len & 536870912ULL) == 0ULL) {
                                                                    #line 2265 
                                                                    if (
                                                                    ((unsigned long long)rspq->iqe_len & 268435456ULL) == 0ULL) {
                                                                    #line 2265 
                                                                    if (
                                                                    ((unsigned long long)rspq->iqe_len & 134217728ULL) == 0ULL) {
                                                                    #line 2265 
                                                                    if (
                                                                    ((unsigned long long)rspq->iqe_len & 67108864ULL) == 0ULL) {
                                                                    #line 2265 
                                                                    if (
                                                                    ((unsigned long long)rspq->iqe_len & 33554432ULL) == 0ULL) {
                                                                    #line 2265 
                                                                    if (
                                                                    ((unsigned long long)rspq->iqe_len & 16777216ULL) == 0ULL) {
                                                                    #line 2265 
                                                                    if (
                                                                    ((unsigned long long)rspq->iqe_len & 8388608ULL) == 0ULL) {
                                                                    #line 2265 
                                                                    if (
                                                                    ((unsigned long long)rspq->iqe_len & 4194304ULL) == 0ULL) {
                                                                    #line 2265 
                                                                    if (
                                                                    ((unsigned long long)rspq->iqe_len & 2097152ULL) == 0ULL) {
                                                                    #line 2265 
                                                                    if (
                                                                    ((unsigned long long)rspq->iqe_len & 1048576ULL) == 0ULL) {
                                                                    #line 2265 
                                                                    if (
                                                                    ((unsigned long long)rspq->iqe_len & 524288ULL) == 0ULL) {
                                                                    #line 2265 
                                                                    if (
                                                                    ((unsigned long long)rspq->iqe_len & 262144ULL) == 0ULL) {
                                                                    #line 2265 
                                                                    if (
                                                                    ((unsigned long long)rspq->iqe_len & 131072ULL) == 0ULL) {
                                                                    #line 2265 
                                                                    if (
                                                                    ((unsigned long long)rspq->iqe_len & 65536ULL) == 0ULL) {
                                                                    #line 2265 
                                                                    if (
                                                                    ((unsigned long long)rspq->iqe_len & 32768ULL) == 0ULL) {
                                                                    #line 2265 
                                                                    if (
                                                                    ((unsigned long long)rspq->iqe_len & 16384ULL) == 0ULL) {
                                                                    #line 2265 
                                                                    if (
                                                                    ((unsigned long long)rspq->iqe_len & 8192ULL) == 0ULL) {
                                                                    #line 2265 
                                                                    if (
                                                                    ((unsigned long long)rspq->iqe_len & 4096ULL) == 0ULL) {
                                                                    #line 2265 
                                                                    if (
                                                                    ((unsigned long long)rspq->iqe_len & 2048ULL) == 0ULL) {
                                                                    #line 2265 
                                                                    if (
                                                                    ((unsigned long long)rspq->iqe_len & 1024ULL) == 0ULL) {
                                                                    #line 2265 
                                                                    if (
                                                                    ((unsigned long long)rspq->iqe_len & 512ULL) == 0ULL) {
                                                                    #line 2265 
                                                                    if (
                                                                    ((unsigned long long)rspq->iqe_len & 256ULL) == 0ULL) {
                                                                    #line 2265 
                                                                    if (
                                                                    ((unsigned long long)rspq->iqe_len & 128ULL) == 0ULL) {
                                                                    #line 2265 
                                                                    if (
                                                                    ((unsigned long long)rspq->iqe_len & 64ULL) == 0ULL) {
                                                                    #line 2265 
                                                                    if (
                                                                    ((unsigned long long)rspq->iqe_len & 32ULL) == 0ULL) {
                                                                    #line 2265 
                                                                    if (
                                                                    ((unsigned long long)rspq->iqe_len & 16ULL) == 0ULL) {
                                                                    #line 2265 
                                                                    if (
                                                                    ((unsigned long long)rspq->iqe_len & 8ULL) == 0ULL) {
                                                                    #line 2265 
                                                                    if (
                                                                    ((unsigned long long)rspq->iqe_len & 4ULL) != 0ULL) 
                                                                    #line 2265 
                                                                    tmp_2 = 65534U; else 
                                                                    #line 2265 
                                                                    tmp_2 = 65533U;
                                                                    #line 2265 
                                                                    tmp_3 = tmp_2;
                                                                    }
                                                                    else 
                                                                    #line 2265 
                                                                    tmp_3 = 65535U;
                                                                    #line 2265 
                                                                    tmp_4 = tmp_3;
                                                                    }
                                                                    else 
                                                                    #line 2265 
                                                                    tmp_4 = 0U;
                                                                    #line 2265 
                                                                    tmp_5 = tmp_4;
                                                                    }
                                                                    else 
                                                                    #line 2265 
                                                                    tmp_5 = 1U;
                                                                    #line 2265 
                                                                    tmp_6 = tmp_5;
                                                                    }
                                                                    else 
                                                                    #line 2265 
                                                                    tmp_6 = 2U;
                                                                    #line 2265 
                                                                    tmp_7 = tmp_6;
                                                                    }
                                                                    else 
                                                                    #line 2265 
                                                                    tmp_7 = 3U;
                                                                    #line 2265 
                                                                    tmp_8 = tmp_7;
                                                                    }
                                                                    else 
                                                                    #line 2265 
                                                                    tmp_8 = 4U;
                                                                    #line 2265 
                                                                    tmp_9 = tmp_8;
                                                                    }
                                                                    else 
                                                                    #line 2265 
                                                                    tmp_9 = 5U;
                                                                    #line 2265 
                                                                    tmp_10 = tmp_9;
                                                                    }
                                                                    else 
                                                                    #line 2265 
                                                                    tmp_10 = 6U;
                                                                    #line 2265 
                                                                    tmp_11 = tmp_10;
                                                                    }
                                                                    else 
                                                                    #line 2265 
                                                                    tmp_11 = 7U;
                                                                    #line 2265 
                                                                    tmp_12 = tmp_11;
                                                                    }
                                                                    else 
                                                                    #line 2265 
                                                                    tmp_12 = 8U;
                                                                    #line 2265 
                                                                    tmp_13 = tmp_12;
                                                                    }
                                                                    else 
                                                                    #line 2265 
                                                                    tmp_13 = 9U;
                                                                    #line 2265 
                                                                    tmp_14 = tmp_13;
                                                                    }
                                                                    else 
                                                                    #line 2265 
                                                                    tmp_14 = 10U;
                                                                    #line 2265 
                                                                    tmp_15 = tmp_14;
                                                                    }
                                                                    else 
                                                                    #line 2265 
                                                                    tmp_15 = 11U;
                                                                    #line 2265 
                                                                    tmp_16 = tmp_15;
                                                                    }
                                                                    else 
                                                                    #line 2265 
                                                                    tmp_16 = 12U;
                                                                    #line 2265 
                                                                    tmp_17 = tmp_16;
                                                                    }
                                                                    else 
                                                                    #line 2265 
                                                                    tmp_17 = 13U;
                                                                    #line 2265 
                                                                    tmp_18 = tmp_17;
                                                                    }
                                                                    else 
                                                                    #line 2265 
                                                                    tmp_18 = 14U;
                                                                    #line 2265 
                                                                    tmp_19 = tmp_18;
                                                                    }
                                                                    else 
                                                                    #line 2265 
                                                                    tmp_19 = 15U;
                                                                    #line 2265 
                                                                    tmp_20 = tmp_19;
                                                                    }
                                                                    else 
                                                                    #line 2265 
                                                                    tmp_20 = 16U;
                                                                    #line 2265 
                                                                    tmp_21 = tmp_20;
                                                                    }
                                                                    else 
                                                                    #line 2265 
                                                                    tmp_21 = 17U;
                                                                    #line 2265 
                                                                    tmp_22 = tmp_21;
                                                                    }
                                                                    else 
                                                                    #line 2265 
                                                                    tmp_22 = 18U;
                                                                    #line 2265 
                                                                    tmp_23 = tmp_22;
                                                                    }
                                                                    else 
                                                                    #line 2265 
                                                                    tmp_23 = 19U;
                                                                    #line 2265 
                                                                    tmp_24 = tmp_23;
                                                                    }
                                                                    else 
                                                                    #line 2265 
                                                                    tmp_24 = 20U;
                                                                    #line 2265 
                                                                    tmp_25 = tmp_24;
                                                                    }
                                                                    else 
                                                                    #line 2265 
                                                                    tmp_25 = 21U;
                                                                    #line 2265 
                                                                    tmp_26 = tmp_25;
                                                                    }
                                                                    else 
                                                                    #line 2265 
                                                                    tmp_26 = 22U;
                                                                    #line 2265 
                                                                    tmp_27 = tmp_26;
                                                                    }
                                                                    else 
                                                                    #line 2265 
                                                                    tmp_27 = 23U;
                                                                    #line 2265 
                                                                    tmp_28 = tmp_27;
                                                                    }
                                                                    else 
                                                                    #line 2265 
                                                                    tmp_28 = 24U;
                                                                    #line 2265 
                                                                    tmp_29 = tmp_28;
                                                                    }
                                                                    else 
                                                                    #line 2265 
                                                                    tmp_29 = 25U;
                                                                    #line 2265 
                                                                    tmp_30 = tmp_29;
                                                                    }
                                                                    else 
                                                                    #line 2265 
                                                                    tmp_30 = 26U;
                                                                    #line 2265 
                                                                    tmp_31 = tmp_30;
                                                                    }
                                                                    else 
                                                                    #line 2265 
                                                                    tmp_31 = 27U;
                                                                    #line 2265 
                                                                    tmp_32 = tmp_31;
                                                                    }
                                                                    else 
                                                                    #line 2265 
                                                                    tmp_32 = 28U;
                                                                    #line 2265 
                                                                    tmp_33 = tmp_32;
                                                                  }
                                                                  else 
                                                                    #line 2265 
                                                                    tmp_33 = 29U;
                                                                  #line 2265 
                                                                  tmp_34 = tmp_33;
                                                                }
                                                                else 
                                                                  #line 2265 
                                                                  tmp_34 = 30U;
                                                                #line 2265 
                                                                tmp_35 = tmp_34;
                                                              }
                                                              else 
                                                                   #line 2265 
                                                                   tmp_35 = 31U;
                                                              #line 2265 
                                                              tmp_36 = tmp_35;
                                                            }
                                                            else 
                                                                 #line 2265 
                                                                 tmp_36 = 32U;
                                                            #line 2265 
                                                            tmp_37 = tmp_36;
                                                          }
                                                          else 
                                                               #line 2265 
                                                               tmp_37 = 33U;
                                                          #line 2265 
                                                          tmp_38 = tmp_37;
                                                        }
                                                        else 
                                                             #line 2265 
                                                             tmp_38 = 34U;
                                                        #line 2265 
                                                        tmp_39 = tmp_38;
                                                      }
                                                      else 
                                                           #line 2265 
                                                           tmp_39 = 35U;
                                                      #line 2265 
                                                      tmp_40 = tmp_39;
                                                    }
                                                    else 
                                                         #line 2265 
                                                         tmp_40 = 36U;
                                                    #line 2265 
                                                    tmp_41 = tmp_40;
                                                  }
                                                  else 
                                                       #line 2265 
                                                       tmp_41 = 37U;
                                                  #line 2265 
                                                  tmp_42 = tmp_41;
                                                }
                                                else 
                                                     #line 2265 
                                                     tmp_42 = 38U;
                                                #line 2265 
                                                tmp_43 = tmp_42;
                                              }
                                              else 
                                                   #line 2265 
                                                   tmp_43 = 39U;
                                              #line 2265 
                                              tmp_44 = tmp_43;
                                            }
                                            else 
                                                 #line 2265 
                                                 tmp_44 = 40U;
                                            #line 2265 
                                            tmp_45 = tmp_44;
                                          }
                                          else 
                                               #line 2265 
                                               tmp_45 = 41U;
                                          #line 2265 
                                          tmp_46 = tmp_45;
                                        }
                                        else 
                                             #line 2265 
                                             tmp_46 = 42U;
                                        #line 2265 
                                        tmp_47 = tmp_46;
                                      }
                                      else 
                                           #line 2265 
                                           tmp_47 = 43U;
                                      #line 2265 
                                      tmp_48 = tmp_47;
                                    }
                                    else 
                                         #line 2265 
                                         tmp_48 = 44U;
                                    #line 2265 
                                    tmp_49 = tmp_48;
                                  }
                                  else 
                                       #line 2265 
                                       tmp_49 = 45U;
                                  #line 2265 
                                  tmp_50 = tmp_49;
                                }
                                else 
                                     #line 2265 
                                     tmp_50 = 46U;
                                #line 2265 
                                tmp_51 = tmp_50;
                              }
                              else 
                                   #line 2265 
                                   tmp_51 = 47U;
                              #line 2265 
                              tmp_52 = tmp_51;
                            }
                            else 
                                 #line 2265 
                                 tmp_52 = 48U;
                            #line 2265 
                            tmp_53 = tmp_52;
                          }
                          else 
                               #line 2265 
                               tmp_53 = 49U;
                          #line 2265 
                          tmp_54 = tmp_53;
                        }
                        else 
                             #line 2265 
                             tmp_54 = 50U;
                        #line 2265 
                        tmp_55 = tmp_54;
                      }
                      else 
                           #line 2265 
                           tmp_55 = 51U;
                      #line 2265 
                      tmp_56 = tmp_55;
                    }
                    else 
                         #line 2265 
                         tmp_56 = 52U;
                    #line 2265 
                    tmp_57 = tmp_56;
                  }
                  else 
                       #line 2265 
                       tmp_57 = 53U;
                  #line 2265 
                  tmp_58 = tmp_57;
                }
                else 
                     #line 2265 
                     tmp_58 = 54U;
                #line 2265 
                tmp_59 = tmp_58;
              }
              else 
                   #line 2265 
                   tmp_59 = 55U;
              #line 2265 
              tmp_60 = tmp_59;
            }
            else 
                 #line 2265 
                 tmp_60 = 56U;
            #line 2265 
            tmp_61 = tmp_60;
          }
          else 
               #line 2265 
               tmp_61 = 57U;
          #line 2265 
          tmp_62 = tmp_61;
        }
        else 
             #line 2265 
             tmp_62 = 58U;
        #line 2265 
        tmp_63 = tmp_62;
      }
      else 
           #line 2265 
           tmp_63 = 59U;
      #line 2265 
      tmp_64 = tmp_63;
    }
    else 
         #line 2265 
         tmp_64 = 65532U;
    #line 2265 
    tmp_66 = tmp_64;
  }
  else {
    #line 2265 
    tmp_66 = (unsigned int)((unsigned short)__ilog2_u32(rspq->iqe_len)) + 65532U;
  }
  #line 2264 
  ;
  #line 2264 
  cmd.iqdroprss_to_iqesize = __builtin_bswap16((unsigned short)((int)(((unsigned int)(((int)((unsigned short)pi->port_id) << 12U) | ((int)((unsigned short)rspq->pktcnt_idx) << 4U)) | tmp_66) | 16384U)));
  #line 2269 
  cmd.iqsize = __builtin_bswap16((unsigned short)((int)((unsigned short)rspq->size)));
  #line 2270 
  cmd.iqaddr = (__be64)__builtin_bswap64((unsigned long)rspq->phys_addr);
  #line 2272 
  if (fl != (struct sge_fl *)0) {
    #line 2285 
    int __y_0;
    #line 2323 
    int tmp_70;
    #line 2323 
    int tmp_71;
    #line 2273 
    unsigned int chip_ver = ((unsigned int)adapter->params.chip >> 4) & 15U;
    #line 2283 
    if (fl->size < s->fl_starve_thres + 15U) 
                                             #line 2284 
                                             fl->size = s->fl_starve_thres + 15U;
    #line 2285 
    __y_0 = 8;
    #line 2285 
    fl->size = ((((fl->size + (unsigned int)__y_0) + 4294967295U) / (unsigned int)__y_0) * (unsigned int)__y_0);
    #line 2286 
    fl->desc = (__be64 *)alloc_ring(adapter->pdev_dev,(unsigned long)fl->size,8UL,16UL,& fl->addr,(void *)(& fl->sdesc),(unsigned long)s->stat_len);
    #line 2289 
    if (fl->desc == (__be64 *)0ULL) {
      #line 2290 
      ret = -12;
      #line 2291 
      goto err;
    }
    #line 2299 
    flsz = (int)(fl->size / 8U + s->stat_len / 64U);
    #line 2306 
    cmd.iqns_to_fl0congen = __builtin_bswap32(((unsigned int)(relaxed << 6) | (unsigned int)(relaxed << 12)) | 6U);
    #line 2323 
    if (chip_ver <= 5U) 
                        #line 2323 
                        tmp_70 = 384; else 
                                           #line 2323 
                                           tmp_70 = 0;
    #line 2323 
    if (chip_ver <= 5U) 
                        #line 2323 
                        tmp_71 = 48; else 
                                          #line 2323 
                                          tmp_71 = 32;
    #line 2322 
    cmd.fl0dcaen_to_fl0cidxfthresh = __builtin_bswap16((unsigned short)((int)((unsigned short)(tmp_70 | tmp_71))));
    #line 2330 
    cmd.fl0size = __builtin_bswap16((unsigned short)((int)((unsigned short)flsz)));
    #line 2331 
    cmd.fl0addr = (__be64)__builtin_bswap64((unsigned long)fl->addr);
  }
  #line 2338 
  ret = t4vf_wr_mbox(adapter,(void *)(& cmd),64,(void *)(& rpl));
  #line 2339 
  if (ret != 0) 
                #line 2340 
                goto err;
  #line 2342 
  netif_napi_add(dev,& rspq->napi,& napi_rx_handler,64);
  #line 2343 
  rspq->cur_desc = rspq->desc;
  #line 2344 
  rspq->cidx = 0U;
  #line 2345 
  rspq->gen = (unsigned char)1U;
  #line 2346 
  rspq->next_intr_params = rspq->intr_params;
  #line 2347 
  rspq->cntxt_id = __builtin_bswap16((unsigned short)((int)rpl.iqid));
  #line 2348 
  rspq->bar2_addr = bar2_address(adapter,(unsigned int)rspq->cntxt_id,(enum t4_bar2_qtype)T4_BAR2_QTYPE_INGRESS,& rspq->bar2_qid);
  #line 2352 
  rspq->abs_id = __builtin_bswap16((unsigned short)((int)rpl.physiqid));
  #line 2353 
  (rspq->size) --;
  #line 2354 
  rspq->adapter = adapter;
  #line 2355 
  rspq->netdev = dev;
  #line 2356 
  rspq->handler = hnd;
  #line 2359 
  if (fl != (struct sge_fl *)0) 
                                #line 2359 
                                rspq->offset = 0; else 
                                                       #line 2359 
                                                       rspq->offset = -1;
  #line 2361 
  if (fl != (struct sge_fl *)0) {
    #line 2362 
    fl->cntxt_id = (unsigned int)__builtin_bswap16((unsigned short)((int)rpl.fl0id));
    #line 2363 
    fl->avail = 0U;
    #line 2364 
    fl->pend_cred = 0U;
    #line 2365 
    fl->pidx = 0U;
    #line 2366 
    fl->cidx = 0U;
    #line 2367 
    fl->alloc_failed = 0UL;
    #line 2368 
    fl->large_alloc_failed = 0UL;
    #line 2369 
    fl->starving = 0UL;
    #line 2374 
    fl->bar2_addr = bar2_address(adapter,fl->cntxt_id,(enum t4_bar2_qtype)T4_BAR2_QTYPE_EGRESS,& fl->bar2_qid);
    #line 2379 
    ;
    #line 2379 
    ;
    #line 2379 
    refill_fl(adapter,fl,(int)fl_cap(fl),3264U);
  }
  #line 2382 
  return 0;
  #line 2384 
  err: 
       #line 2384 
  ;
  #line 2389 
  if (rspq->desc != (__be64 *)0ULL) {
    #line 2390 
    dma_free_coherent(adapter->pdev_dev,(unsigned long)(rspq->size * rspq->iqe_len),(void *)rspq->desc,rspq->phys_addr);
    #line 2392 
    rspq->desc = (__be64 *)0ULL;
  }
  #line 2394 
  if (fl != (struct sge_fl *)0 && fl->desc != (__be64 *)0ULL) {
    #line 2395 
    kfree((void *)fl->sdesc);
    #line 2396 
    fl->sdesc = (struct rx_sw_desc *)0;
    #line 2397 
    dma_free_coherent(adapter->pdev_dev,(unsigned long)(flsz * 64),(void *)fl->desc,fl->addr);
    #line 2399 
    fl->desc = (__be64 *)0ULL;
  }
  #line 2401 
  return ret;
}

#line 2412  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/sge.c"
int t4vf_sge_alloc_eth_txq(struct adapter *adapter, struct sge_eth_txq *txq, struct net_device *dev, struct netdev_queue *devq, unsigned int iqid)
{
  #line 2418 
  struct fw_eq_eth_cmd cmd;
  #line 2418 
  struct fw_eq_eth_cmd rpl;
  #line 2420 
  int ret;
  #line 2420 
  int nentries;
  #line 2461 
  int tmp_1;
  #line 2416 
  unsigned int chip_ver = ((unsigned int)adapter->params.chip >> 4) & 15U;
  #line 2417 
  struct port_info *pi = netdev_priv(dev);
  #line 2419 
  struct sge *s = & adapter->sge;
  #line 2426 
  nentries = (int)(txq->q.size + s->stat_len / 64U);
  #line 2432 
  txq->q.desc = (struct tx_desc *)alloc_ring(adapter->pdev_dev,(unsigned long)txq->q.size,64UL,16UL,& txq->q.phys_addr,(void *)(& txq->q.sdesc),(unsigned long)s->stat_len);
  #line 2436 
  if (txq->q.desc == (struct tx_desc *)0) 
                                          #line 2437 
                                          return -12;
  #line 2446 
  memset((void *)(& cmd),0,48UL);
  #line 2447 
  cmd.op_to_vfn = 45074U;
  #line 2451 
  cmd.alloc_to_len16 = 50331792U;
  #line 2454 
  cmd.autoequiqe_to_viid = __builtin_bswap32((unsigned int)((int)pi->viid << 16) | 1073741824U);
  #line 2456 
  cmd.fetchszm_to_iqid = __builtin_bswap32(((unsigned int)((int)pi->port_id << 16) | iqid) | 2097152U);
  #line 2461 
  if (chip_ver <= 5U) 
                      #line 2461 
                      tmp_1 = 20250624; else 
                                             #line 2461 
                                             tmp_1 = 3473408;
  #line 2460 
  ;
  #line 2460 
  cmd.dcaen_to_eqsize = __builtin_bswap32((unsigned int)(tmp_1 | nentries));
  #line 2468 
  cmd.eqaddr = (__be64)__builtin_bswap64((unsigned long)txq->q.phys_addr);
  #line 2474 
  ret = t4vf_wr_mbox(adapter,(void *)(& cmd),48,(void *)(& rpl));
  #line 2475 
  if (ret != 0) {
    #line 2480 
    kfree((void *)txq->q.sdesc);
    #line 2481 
    txq->q.sdesc = (struct tx_sw_desc *)0;
    #line 2482 
    dma_free_coherent(adapter->pdev_dev,(unsigned long)nentries * 64UL,(void *)txq->q.desc,txq->q.phys_addr);
    #line 2485 
    txq->q.desc = (struct tx_desc *)0;
    #line 2486 
    return ret;
  }
  #line 2489 
  txq->q.in_use = 0U;
  #line 2490 
  txq->q.cidx = 0U;
  #line 2491 
  txq->q.pidx = 0U;
  #line 2492 
  txq->q.stat = (struct sge_qstat *)(txq->q.desc + (unsigned long)txq->q.size);
  #line 2493 
  txq->q.cntxt_id = __builtin_bswap32(rpl.eqid_pkd) & 1048575U;
  #line 2494 
  txq->q.bar2_addr = bar2_address(adapter,txq->q.cntxt_id,(enum t4_bar2_qtype)T4_BAR2_QTYPE_EGRESS,& txq->q.bar2_qid);
  #line 2498 
  txq->q.abs_id = __builtin_bswap32(rpl.physeqid_pkd) & 1048575U;
  #line 2500 
  txq->txq = devq;
  #line 2501 
  txq->tso = 0UL;
  #line 2502 
  txq->tx_cso = 0UL;
  #line 2503 
  txq->vlan_ins = 0UL;
  #line 2504 
  txq->q.stops = 0UL;
  #line 2505 
  txq->q.restarts = 0UL;
  #line 2506 
  txq->mapping_err = 0UL;
  #line 2507 
  return 0;
}

#line 2513  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/sge.c"
static void free_txq(struct adapter *adapter, struct sge_txq *tq)
{
  #line 2515 
  struct sge *s = & adapter->sge;
  #line 2517 
  dma_free_coherent(adapter->pdev_dev,(unsigned long)tq->size * 64UL + (unsigned long)s->stat_len,(void *)tq->desc,tq->phys_addr);
  #line 2520 
  tq->cntxt_id = 0U;
  #line 2521 
  tq->sdesc = (struct tx_sw_desc *)0;
  #line 2522 
  tq->desc = (struct tx_desc *)0;
  #line 2523 
  return;
}

#line 2529  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/sge.c"
static void free_rspq_fl(struct adapter *adapter, struct sge_rspq *rspq, struct sge_fl *fl)
{
  #line 2533 
  unsigned int tmp;
  #line 2532 
  struct sge *s = & adapter->sge;
  #line 2533 
  if (fl != (struct sge_fl *)0) 
                                #line 2533 
                                tmp = fl->cntxt_id; else 
                                                         #line 2533 
                                                         tmp = 65535U;
  #line 2533 
  unsigned int flid = tmp;
  #line 2535 
  t4vf_iq_free(adapter,0U,(unsigned int)rspq->cntxt_id,flid,65535U);
  #line 2537 
  dma_free_coherent(adapter->pdev_dev,(unsigned long)((rspq->size + 1U) * rspq->iqe_len),(void *)rspq->desc,rspq->phys_addr);
  #line 2539 
  netif_napi_del(& rspq->napi);
  #line 2540 
  rspq->netdev = (struct net_device *)0;
  #line 2541 
  rspq->cntxt_id = (unsigned short)0U;
  #line 2542 
  rspq->abs_id = (unsigned short)0U;
  #line 2543 
  rspq->desc = (__be64 *)0ULL;
  #line 2545 
  if (fl != (struct sge_fl *)0) {
    #line 2546 
    free_rx_bufs(adapter,fl,(int)fl->avail);
    #line 2547 
    dma_free_coherent(adapter->pdev_dev,(unsigned long)fl->size * 8UL + (unsigned long)s->stat_len,(void *)fl->desc,fl->addr);
    #line 2550 
    kfree((void *)fl->sdesc);
    #line 2551 
    fl->sdesc = (struct rx_sw_desc *)0;
    #line 2552 
    fl->cntxt_id = 0U;
    #line 2553 
    fl->desc = (__be64 *)0ULL;
  }
  #line 2555 
  return;
}

#line 2563  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/sge.c"
void t4vf_free_sge_resources(struct adapter *adapter)
{
  #line 2570 
  int qs;
  #line 2565 
  struct sge *s = & adapter->sge;
  #line 2566 
  struct sge_eth_rxq *rxq = (struct sge_eth_rxq *)(& s->ethrxq);
  #line 2567 
  struct sge_eth_txq *txq = (struct sge_eth_txq *)(& s->ethtxq);
  #line 2568 
  struct sge_rspq *evtq = & s->fw_evtq;
  #line 2569 
  struct sge_rspq *intrq = & s->intrq;
  #line 2572 
  qs = 0;
  #line 2572 
  while ((int)adapter->sge.ethqsets > qs) {
    #line 2573 
    if (rxq->rspq.desc != (__be64 *)0ULL) 
                                          #line 2574 
                                          free_rspq_fl(adapter,& rxq->rspq,& rxq->fl);
    #line 2575 
    if (txq->q.desc != (struct tx_desc *)0) {
      #line 2576 
      t4vf_eth_eq_free(adapter,txq->q.cntxt_id);
      #line 2577 
      free_tx_desc(adapter,& txq->q,txq->q.in_use,(_Bool)1);
      #line 2578 
      kfree((void *)txq->q.sdesc);
      #line 2579 
      free_txq(adapter,& txq->q);
    }
    #line 2572 
    qs ++;
    #line 2572 
    rxq ++;
    #line 2572 
    txq ++;
  }
  #line 2582 
  if (evtq->desc != (__be64 *)0ULL) 
                                    #line 2583 
                                    free_rspq_fl(adapter,evtq,(struct sge_fl *)0);
  #line 2584 
  if (intrq->desc != (__be64 *)0ULL) 
                                     #line 2585 
                                     free_rspq_fl(adapter,intrq,(struct sge_fl *)0);
  #line 2586 
  return;
}

#line 2594  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/sge.c"
void t4vf_sge_start(struct adapter *adapter)
{
  #line 2596 
  adapter->sge.ethtxq_rover = (unsigned short)0U;
  #line 2597 
  cif_mod_timer(& adapter->sge.rx_timer,jiffies + 125UL);
  #line 2598 
  cif_mod_timer(& adapter->sge.tx_timer,jiffies + 125UL);
  #line 2599 
  return;
}

#line 2609  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/sge.c"
void t4vf_sge_stop(struct adapter *adapter)
{
  #line 2611 
  struct sge *s = & adapter->sge;
  #line 2613 
  if (s->rx_timer.function != (void (*)(struct timer_list *))0) 
                                                                #line 2614 
                                                                cif_del_timer_sync(& s->rx_timer);
  #line 2615 
  if (s->tx_timer.function != (void (*)(struct timer_list *))0) 
                                                                #line 2616 
                                                                cif_del_timer_sync(& s->tx_timer);
  #line 2617 
  return;
}

#line 2628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/sge.c"
int t4vf_sge_init(struct adapter *adapter)
{
  #line 2630 
  struct sge_params *sge_params = & adapter->params.sge;
  #line 2631 
  u32 fl_small_pg = sge_params->sge_fl_buffer_size[0];
  #line 2632 
  u32 fl_large_pg = sge_params->sge_fl_buffer_size[1];
  #line 2633 
  struct sge *s = & adapter->sge;
  #line 2644 
  if (fl_large_pg <= fl_small_pg) 
                                  #line 2645 
                                  fl_large_pg = 0U;
  #line 2650 
  if (fl_small_pg != 4096U || ((fl_large_pg + 4294967295U) & fl_large_pg) != 0U) {
    #line 2652 
    _dev_err(adapter->pdev_dev,(char *)"bad SGE FL buffer sizes [%d, %d]\n",fl_small_pg,fl_large_pg);
    #line 2654 
    return -22;
  }
  #line 2656 
  if ((sge_params->sge_control & 262144U) == 0U) {
    #line 2658 
    _dev_err(adapter->pdev_dev,(char *)"bad SGE CPL MODE\n");
    #line 2659 
    return -22;
  }
  #line 2665 
  if (fl_large_pg != 0U) 
    #line 2666 
    if (0 != 0) {
      #line 2666 
      unsigned int tmp_54;
      #line 2666 
      unsigned int tmp_22;
      #line 2666 
      unsigned int tmp_23;
      #line 2666 
      unsigned int tmp_55;
      #line 2666 
      unsigned int tmp_56;
      #line 2666 
      unsigned int tmp_24;
      #line 2666 
      unsigned int tmp_25;
      #line 2666 
      unsigned int tmp_57;
      #line 2666 
      unsigned int tmp_58;
      #line 2666 
      unsigned int tmp_26;
      #line 2666 
      unsigned int tmp_27;
      #line 2666 
      unsigned int tmp_59;
      #line 2666 
      unsigned int tmp_60;
      #line 2666 
      unsigned int tmp_28;
      #line 2666 
      unsigned int tmp_29;
      #line 2666 
      unsigned int tmp_30;
      #line 2666 
      unsigned int tmp;
      #line 2666 
      unsigned int tmp_31;
      #line 2666 
      unsigned int tmp_32;
      #line 2666 
      unsigned int tmp_0;
      #line 2666 
      unsigned int tmp_1;
      #line 2666 
      unsigned int tmp_33;
      #line 2666 
      unsigned int tmp_34;
      #line 2666 
      unsigned int tmp_2;
      #line 2666 
      unsigned int tmp_3;
      #line 2666 
      unsigned int tmp_35;
      #line 2666 
      unsigned int tmp_36;
      #line 2666 
      unsigned int tmp_4;
      #line 2666 
      unsigned int tmp_5;
      #line 2666 
      unsigned int tmp_37;
      #line 2666 
      unsigned int tmp_38;
      #line 2666 
      unsigned int tmp_6;
      #line 2666 
      unsigned int tmp_7;
      #line 2666 
      unsigned int tmp_39;
      #line 2666 
      unsigned int tmp_40;
      #line 2666 
      unsigned int tmp_8;
      #line 2666 
      unsigned int tmp_9;
      #line 2666 
      unsigned int tmp_41;
      #line 2666 
      unsigned int tmp_42;
      #line 2666 
      unsigned int tmp_10;
      #line 2666 
      unsigned int tmp_11;
      #line 2666 
      unsigned int tmp_43;
      #line 2666 
      unsigned int tmp_44;
      #line 2666 
      unsigned int tmp_12;
      #line 2666 
      unsigned int tmp_13;
      #line 2666 
      unsigned int tmp_45;
      #line 2666 
      unsigned int tmp_46;
      #line 2666 
      unsigned int tmp_14;
      #line 2666 
      unsigned int tmp_15;
      #line 2666 
      unsigned int tmp_47;
      #line 2666 
      unsigned int tmp_48;
      #line 2666 
      unsigned int tmp_16;
      #line 2666 
      unsigned int tmp_17;
      #line 2666 
      unsigned int tmp_49;
      #line 2666 
      unsigned int tmp_50;
      #line 2666 
      unsigned int tmp_18;
      #line 2666 
      unsigned int tmp_19;
      #line 2666 
      unsigned int tmp_51;
      #line 2666 
      unsigned int tmp_52;
      #line 2666 
      unsigned int tmp_20;
      #line 2666 
      unsigned int tmp_21;
      #line 2666 
      unsigned int tmp_53;
      #line 2666 
      unsigned int tmp_61;
      #line 2666 
      if (fl_large_pg > 1U) {
        #line 2666 
        if (((unsigned long long)fl_large_pg & 9223372036854775808ULL) == 0ULL) {
          #line 2666 
          if (((unsigned long long)fl_large_pg & 4611686018427387904ULL) == 0ULL) {
            #line 2666 
            if (((unsigned long long)fl_large_pg & 2305843009213693952ULL) == 0ULL) {
              #line 2666 
              if (((unsigned long long)fl_large_pg & 1152921504606846976ULL) == 0ULL) {
                #line 2666 
                if (((unsigned long long)fl_large_pg & 576460752303423488ULL) == 0ULL) {
                  #line 2666 
                  if (((unsigned long long)fl_large_pg & 288230376151711744ULL) == 0ULL) {
                    #line 2666 
                    if (((unsigned long long)fl_large_pg & 144115188075855872ULL) == 0ULL) {
                      #line 2666 
                      if (((unsigned long long)fl_large_pg & 72057594037927936ULL) == 0ULL) {
                        #line 2666 
                        if (((unsigned long long)fl_large_pg & 36028797018963968ULL) == 0ULL) {
                          #line 2666 
                          if (((unsigned long long)fl_large_pg & 18014398509481984ULL) == 0ULL) {
                            #line 2666 
                            if (((unsigned long long)fl_large_pg & 9007199254740992ULL) == 0ULL) {
                              #line 2666 
                              if (((unsigned long long)fl_large_pg & 4503599627370496ULL) == 0ULL) {
                                #line 2666 
                                if (((unsigned long long)fl_large_pg & 2251799813685248ULL) == 0ULL) {
                                  #line 2666 
                                  if (((unsigned long long)fl_large_pg & 1125899906842624ULL) == 0ULL) {
                                    #line 2666 
                                    if (((unsigned long long)fl_large_pg & 562949953421312ULL) == 0ULL) {
                                      #line 2666 
                                      if (((unsigned long long)fl_large_pg & 281474976710656ULL) == 0ULL) {
                                        #line 2666 
                                        if (((unsigned long long)fl_large_pg & 140737488355328ULL) == 0ULL) {
                                          #line 2666 
                                          if (((unsigned long long)fl_large_pg & 70368744177664ULL) == 0ULL) {
                                            #line 2666 
                                            if (((unsigned long long)fl_large_pg & 35184372088832ULL) == 0ULL) {
                                              #line 2666 
                                              if (((unsigned long long)fl_large_pg & 17592186044416ULL) == 0ULL) {
                                                #line 2666 
                                                if (((unsigned long long)fl_large_pg & 8796093022208ULL) == 0ULL) {
                                                  #line 2666 
                                                  if (((unsigned long long)fl_large_pg & 4398046511104ULL) == 0ULL) {
                                                    #line 2666 
                                                    if (((unsigned long long)fl_large_pg & 2199023255552ULL) == 0ULL) {
                                                      #line 2666 
                                                      if (((unsigned long long)fl_large_pg & 1099511627776ULL) == 0ULL) {
                                                        #line 2666 
                                                        if (((unsigned long long)fl_large_pg & 549755813888ULL) == 0ULL) {
                                                          #line 2666 
                                                          if (((unsigned long long)fl_large_pg & 274877906944ULL) == 0ULL) {
                                                            #line 2666 
                                                            if (((unsigned long long)fl_large_pg & 137438953472ULL) == 0ULL) {
                                                              #line 2666 
                                                              if (((unsigned long long)fl_large_pg & 68719476736ULL) == 0ULL) {
                                                                #line 2666 
                                                                if (((unsigned long long)fl_large_pg & 34359738368ULL) == 0ULL) {
                                                                  #line 2666 
                                                                  if (
                                                                    ((unsigned long long)fl_large_pg & 17179869184ULL) == 0ULL) {
                                                                    #line 2666 
                                                                    if (
                                                                    ((unsigned long long)fl_large_pg & 8589934592ULL) == 0ULL) {
                                                                    #line 2666 
                                                                    if (
                                                                    ((unsigned long long)fl_large_pg & 4294967296ULL) == 0ULL) {
                                                                    #line 2666 
                                                                    if (
                                                                    ((unsigned long long)fl_large_pg & 2147483648ULL) == 0ULL) {
                                                                    #line 2666 
                                                                    if (
                                                                    ((unsigned long long)fl_large_pg & 1073741824ULL) == 0ULL) {
                                                                    #line 2666 
                                                                    if (
                                                                    ((unsigned long long)fl_large_pg & 536870912ULL) == 0ULL) {
                                                                    #line 2666 
                                                                    if (
                                                                    ((unsigned long long)fl_large_pg & 268435456ULL) == 0ULL) {
                                                                    #line 2666 
                                                                    if (
                                                                    ((unsigned long long)fl_large_pg & 134217728ULL) == 0ULL) {
                                                                    #line 2666 
                                                                    if (
                                                                    ((unsigned long long)fl_large_pg & 67108864ULL) == 0ULL) {
                                                                    #line 2666 
                                                                    if (
                                                                    ((unsigned long long)fl_large_pg & 33554432ULL) == 0ULL) {
                                                                    #line 2666 
                                                                    if (
                                                                    ((unsigned long long)fl_large_pg & 16777216ULL) == 0ULL) {
                                                                    #line 2666 
                                                                    if (
                                                                    ((unsigned long long)fl_large_pg & 8388608ULL) == 0ULL) {
                                                                    #line 2666 
                                                                    if (
                                                                    ((unsigned long long)fl_large_pg & 4194304ULL) == 0ULL) {
                                                                    #line 2666 
                                                                    if (
                                                                    ((unsigned long long)fl_large_pg & 2097152ULL) == 0ULL) {
                                                                    #line 2666 
                                                                    if (
                                                                    ((unsigned long long)fl_large_pg & 1048576ULL) == 0ULL) {
                                                                    #line 2666 
                                                                    if (
                                                                    ((unsigned long long)fl_large_pg & 524288ULL) == 0ULL) {
                                                                    #line 2666 
                                                                    if (
                                                                    ((unsigned long long)fl_large_pg & 262144ULL) == 0ULL) {
                                                                    #line 2666 
                                                                    if (
                                                                    ((unsigned long long)fl_large_pg & 131072ULL) == 0ULL) {
                                                                    #line 2666 
                                                                    if (
                                                                    ((unsigned long long)fl_large_pg & 65536ULL) == 0ULL) {
                                                                    #line 2666 
                                                                    if (
                                                                    ((unsigned long long)fl_large_pg & 32768ULL) == 0ULL) {
                                                                    #line 2666 
                                                                    if (
                                                                    ((unsigned long long)fl_large_pg & 16384ULL) == 0ULL) {
                                                                    #line 2666 
                                                                    if (
                                                                    ((unsigned long long)fl_large_pg & 8192ULL) == 0ULL) {
                                                                    #line 2666 
                                                                    if (
                                                                    ((unsigned long long)fl_large_pg & 4096ULL) == 0ULL) {
                                                                    #line 2666 
                                                                    if (
                                                                    ((unsigned long long)fl_large_pg & 2048ULL) == 0ULL) {
                                                                    #line 2666 
                                                                    if (
                                                                    ((unsigned long long)fl_large_pg & 1024ULL) == 0ULL) {
                                                                    #line 2666 
                                                                    if (
                                                                    ((unsigned long long)fl_large_pg & 512ULL) == 0ULL) {
                                                                    #line 2666 
                                                                    if (
                                                                    ((unsigned long long)fl_large_pg & 256ULL) == 0ULL) {
                                                                    #line 2666 
                                                                    if (
                                                                    ((unsigned long long)fl_large_pg & 128ULL) == 0ULL) {
                                                                    #line 2666 
                                                                    if (
                                                                    ((unsigned long long)fl_large_pg & 64ULL) == 0ULL) {
                                                                    #line 2666 
                                                                    if (
                                                                    ((unsigned long long)fl_large_pg & 32ULL) == 0ULL) {
                                                                    #line 2666 
                                                                    if (
                                                                    ((unsigned long long)fl_large_pg & 16ULL) == 0ULL) {
                                                                    #line 2666 
                                                                    if (
                                                                    ((unsigned long long)fl_large_pg & 8ULL) == 0ULL) {
                                                                    #line 2666 
                                                                    if (
                                                                    ((unsigned long long)fl_large_pg & 4ULL) != 0ULL) 
                                                                    #line 2666 
                                                                    tmp = 4294967286U; else 
                                                                    #line 2666 
                                                                    tmp = 4294967285U;
                                                                    #line 2666 
                                                                    tmp_0 = tmp;
                                                                    }
                                                                    else 
                                                                    #line 2666 
                                                                    tmp_0 = 4294967287U;
                                                                    #line 2666 
                                                                    tmp_1 = tmp_0;
                                                                    }
                                                                    else 
                                                                    #line 2666 
                                                                    tmp_1 = 4294967288U;
                                                                    #line 2666 
                                                                    tmp_2 = tmp_1;
                                                                    }
                                                                    else 
                                                                    #line 2666 
                                                                    tmp_2 = 4294967289U;
                                                                    #line 2666 
                                                                    tmp_3 = tmp_2;
                                                                    }
                                                                    else 
                                                                    #line 2666 
                                                                    tmp_3 = 4294967290U;
                                                                    #line 2666 
                                                                    tmp_4 = tmp_3;
                                                                    }
                                                                    else 
                                                                    #line 2666 
                                                                    tmp_4 = 4294967291U;
                                                                    #line 2666 
                                                                    tmp_5 = tmp_4;
                                                                    }
                                                                    else 
                                                                    #line 2666 
                                                                    tmp_5 = 4294967292U;
                                                                    #line 2666 
                                                                    tmp_6 = tmp_5;
                                                                    }
                                                                    else 
                                                                    #line 2666 
                                                                    tmp_6 = 4294967293U;
                                                                    #line 2666 
                                                                    tmp_7 = tmp_6;
                                                                    }
                                                                    else 
                                                                    #line 2666 
                                                                    tmp_7 = 4294967294U;
                                                                    #line 2666 
                                                                    tmp_8 = tmp_7;
                                                                    }
                                                                    else 
                                                                    #line 2666 
                                                                    tmp_8 = 4294967295U;
                                                                    #line 2666 
                                                                    tmp_9 = tmp_8;
                                                                    }
                                                                    else 
                                                                    #line 2666 
                                                                    tmp_9 = 0U;
                                                                    #line 2666 
                                                                    tmp_10 = tmp_9;
                                                                    }
                                                                    else 
                                                                    #line 2666 
                                                                    tmp_10 = 1U;
                                                                    #line 2666 
                                                                    tmp_11 = tmp_10;
                                                                    }
                                                                    else 
                                                                    #line 2666 
                                                                    tmp_11 = 2U;
                                                                    #line 2666 
                                                                    tmp_12 = tmp_11;
                                                                    }
                                                                    else 
                                                                    #line 2666 
                                                                    tmp_12 = 3U;
                                                                    #line 2666 
                                                                    tmp_13 = tmp_12;
                                                                    }
                                                                    else 
                                                                    #line 2666 
                                                                    tmp_13 = 4U;
                                                                    #line 2666 
                                                                    tmp_14 = tmp_13;
                                                                    }
                                                                    else 
                                                                    #line 2666 
                                                                    tmp_14 = 5U;
                                                                    #line 2666 
                                                                    tmp_15 = tmp_14;
                                                                    }
                                                                    else 
                                                                    #line 2666 
                                                                    tmp_15 = 6U;
                                                                    #line 2666 
                                                                    tmp_16 = tmp_15;
                                                                    }
                                                                    else 
                                                                    #line 2666 
                                                                    tmp_16 = 7U;
                                                                    #line 2666 
                                                                    tmp_17 = tmp_16;
                                                                    }
                                                                    else 
                                                                    #line 2666 
                                                                    tmp_17 = 8U;
                                                                    #line 2666 
                                                                    tmp_18 = tmp_17;
                                                                    }
                                                                    else 
                                                                    #line 2666 
                                                                    tmp_18 = 9U;
                                                                    #line 2666 
                                                                    tmp_19 = tmp_18;
                                                                    }
                                                                    else 
                                                                    #line 2666 
                                                                    tmp_19 = 10U;
                                                                    #line 2666 
                                                                    tmp_20 = tmp_19;
                                                                    }
                                                                    else 
                                                                    #line 2666 
                                                                    tmp_20 = 11U;
                                                                    #line 2666 
                                                                    tmp_21 = tmp_20;
                                                                    }
                                                                    else 
                                                                    #line 2666 
                                                                    tmp_21 = 12U;
                                                                    #line 2666 
                                                                    tmp_22 = tmp_21;
                                                                    }
                                                                    else 
                                                                    #line 2666 
                                                                    tmp_22 = 13U;
                                                                    #line 2666 
                                                                    tmp_23 = tmp_22;
                                                                    }
                                                                    else 
                                                                    #line 2666 
                                                                    tmp_23 = 14U;
                                                                    #line 2666 
                                                                    tmp_24 = tmp_23;
                                                                    }
                                                                    else 
                                                                    #line 2666 
                                                                    tmp_24 = 15U;
                                                                    #line 2666 
                                                                    tmp_25 = tmp_24;
                                                                    }
                                                                    else 
                                                                    #line 2666 
                                                                    tmp_25 = 16U;
                                                                    #line 2666 
                                                                    tmp_26 = tmp_25;
                                                                    }
                                                                    else 
                                                                    #line 2666 
                                                                    tmp_26 = 17U;
                                                                    #line 2666 
                                                                    tmp_27 = tmp_26;
                                                                    }
                                                                    else 
                                                                    #line 2666 
                                                                    tmp_27 = 18U;
                                                                    #line 2666 
                                                                    tmp_28 = tmp_27;
                                                                    }
                                                                    else 
                                                                    #line 2666 
                                                                    tmp_28 = 19U;
                                                                    #line 2666 
                                                                    tmp_29 = tmp_28;
                                                                    }
                                                                    else 
                                                                    #line 2666 
                                                                    tmp_29 = 20U;
                                                                    #line 2666 
                                                                    tmp_30 = tmp_29;
                                                                    }
                                                                    else 
                                                                    #line 2666 
                                                                    tmp_30 = 21U;
                                                                    #line 2666 
                                                                    tmp_31 = tmp_30;
                                                                  }
                                                                  else 
                                                                    #line 2666 
                                                                    tmp_31 = 22U;
                                                                  #line 2666 
                                                                  tmp_32 = tmp_31;
                                                                }
                                                                else 
                                                                  #line 2666 
                                                                  tmp_32 = 23U;
                                                                #line 2666 
                                                                tmp_33 = tmp_32;
                                                              }
                                                              else 
                                                                   #line 2666 
                                                                   tmp_33 = 24U;
                                                              #line 2666 
                                                              tmp_34 = tmp_33;
                                                            }
                                                            else 
                                                                 #line 2666 
                                                                 tmp_34 = 25U;
                                                            #line 2666 
                                                            tmp_35 = tmp_34;
                                                          }
                                                          else 
                                                               #line 2666 
                                                               tmp_35 = 26U;
                                                          #line 2666 
                                                          tmp_36 = tmp_35;
                                                        }
                                                        else 
                                                             #line 2666 
                                                             tmp_36 = 27U;
                                                        #line 2666 
                                                        tmp_37 = tmp_36;
                                                      }
                                                      else 
                                                           #line 2666 
                                                           tmp_37 = 28U;
                                                      #line 2666 
                                                      tmp_38 = tmp_37;
                                                    }
                                                    else 
                                                         #line 2666 
                                                         tmp_38 = 29U;
                                                    #line 2666 
                                                    tmp_39 = tmp_38;
                                                  }
                                                  else 
                                                       #line 2666 
                                                       tmp_39 = 30U;
                                                  #line 2666 
                                                  tmp_40 = tmp_39;
                                                }
                                                else 
                                                     #line 2666 
                                                     tmp_40 = 31U;
                                                #line 2666 
                                                tmp_41 = tmp_40;
                                              }
                                              else 
                                                   #line 2666 
                                                   tmp_41 = 32U;
                                              #line 2666 
                                              tmp_42 = tmp_41;
                                            }
                                            else 
                                                 #line 2666 
                                                 tmp_42 = 33U;
                                            #line 2666 
                                            tmp_43 = tmp_42;
                                          }
                                          else 
                                               #line 2666 
                                               tmp_43 = 34U;
                                          #line 2666 
                                          tmp_44 = tmp_43;
                                        }
                                        else 
                                             #line 2666 
                                             tmp_44 = 35U;
                                        #line 2666 
                                        tmp_45 = tmp_44;
                                      }
                                      else 
                                           #line 2666 
                                           tmp_45 = 36U;
                                      #line 2666 
                                      tmp_46 = tmp_45;
                                    }
                                    else 
                                         #line 2666 
                                         tmp_46 = 37U;
                                    #line 2666 
                                    tmp_47 = tmp_46;
                                  }
                                  else 
                                       #line 2666 
                                       tmp_47 = 38U;
                                  #line 2666 
                                  tmp_48 = tmp_47;
                                }
                                else 
                                     #line 2666 
                                     tmp_48 = 39U;
                                #line 2666 
                                tmp_49 = tmp_48;
                              }
                              else 
                                   #line 2666 
                                   tmp_49 = 40U;
                              #line 2666 
                              tmp_50 = tmp_49;
                            }
                            else 
                                 #line 2666 
                                 tmp_50 = 41U;
                            #line 2666 
                            tmp_51 = tmp_50;
                          }
                          else 
                               #line 2666 
                               tmp_51 = 42U;
                          #line 2666 
                          tmp_52 = tmp_51;
                        }
                        else 
                             #line 2666 
                             tmp_52 = 43U;
                        #line 2666 
                        tmp_53 = tmp_52;
                      }
                      else 
                           #line 2666 
                           tmp_53 = 44U;
                      #line 2666 
                      tmp_54 = tmp_53;
                    }
                    else 
                         #line 2666 
                         tmp_54 = 45U;
                    #line 2666 
                    tmp_55 = tmp_54;
                  }
                  else 
                       #line 2666 
                       tmp_55 = 46U;
                  #line 2666 
                  tmp_56 = tmp_55;
                }
                else 
                     #line 2666 
                     tmp_56 = 47U;
                #line 2666 
                tmp_57 = tmp_56;
              }
              else 
                   #line 2666 
                   tmp_57 = 48U;
              #line 2666 
              tmp_58 = tmp_57;
            }
            else 
                 #line 2666 
                 tmp_58 = 49U;
            #line 2666 
            tmp_59 = tmp_58;
          }
          else 
               #line 2666 
               tmp_59 = 50U;
          #line 2666 
          tmp_60 = tmp_59;
        }
        else 
             #line 2666 
             tmp_60 = 51U;
        #line 2666 
        tmp_61 = tmp_60;
      }
      else 
           #line 2666 
           tmp_61 = 4294967284U;
      #line 2666 
      s->fl_pg_order = tmp_61;
    }
    else {
      #line 2666 
      s->fl_pg_order = (unsigned int)(__ilog2_u32(fl_large_pg) + -12);
    }
  #line 2667 
  if ((sge_params->sge_control & 131072U) != 0U) 
                                                 #line 2667 
                                                 s->stat_len = 128U; else 
                                                                    #line 2667 
                                                                    s->stat_len = 64U;
  #line 2669 
  s->pktshift = (sge_params->sge_control >> 10) & 7U;
  #line 2670 
  s->fl_align = (unsigned int)t4vf_fl_pkt_align(adapter);
  #line 2679 
  switch (((unsigned int)adapter->params.chip >> 4) & 15U) {
    #line 2680 
    case (unsigned int)4: 
                          #line 2680 
    ;
    #line 2681 
    s->fl_starve_thres = (sge_params->sge_congestion_control >> 8) & 63U;
    #line 2683 
    break;
    #line 2684 
    case (unsigned int)5: 
                          #line 2684 
    ;
    #line 2685 
    s->fl_starve_thres = (sge_params->sge_congestion_control >> 14) & 63U;
    #line 2687 
    break;
    #line 2688 
    case (unsigned int)6: 
                          #line 2688 
    ;
    #line 2689 
    default: 
             #line 2689 
    ;
    #line 2690 
    s->fl_starve_thres = (sge_params->sge_congestion_control >> 16) & 255U;
    #line 2692 
    break;
  }
  #line 2694 
  s->fl_starve_thres = s->fl_starve_thres * 2U + 1U;
  {
    #line 2699 
    struct lock_class_key __key;
    #line 2699 
    init_timer_key(& s->rx_timer,& sge_rx_timer_cb,0U,(char *)"(&s->rx_timer)",& __key);
  }
  {
    #line 2700 
    struct lock_class_key __key_0;
    #line 2700 
    init_timer_key(& s->tx_timer,& sge_tx_timer_cb,0U,(char *)"(&s->tx_timer)",& __key_0);
  }
  #line 2705 
  spinlock_check(& s->intrq_lock);
  {
    #line 2705 
    struct lock_class_key __key_1;
    #line 2705 
    __raw_spin_lock_init(& s->intrq_lock.__anonCompField_spinlock_25.rlock,(char *)"&(&s->intrq_lock)->rlock",& __key_1);
  }
  #line 2707 
  return 0;
}

#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/0/concurrency safety/weaver/sge.i.aux"
#line 95 
int emg_del_timer_sync(struct timer_list *arg0);
#line 98 
#line 98 
int emg_mod_timer(struct timer_list *arg0, unsigned long arg1);
#line 120  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/0/concurrency safety/weaver/sge.i.aux"
static void cif_set_bit_0(long nr, unsigned long *addr)
{
  #line 123 
  ldv_set_bit(nr,addr);
  #line 124 
  return;
}

#line 127  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/0/concurrency safety/weaver/sge.i.aux"
static void cif_clear_bit_0(long nr, unsigned long *addr)
{
  #line 130 
  ldv_clear_bit(nr,addr);
  #line 131 
  return;
}

#line 183  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/0/concurrency safety/weaver/sge.i.aux"
static void atomic_inc(atomic_t *v)
{
  #line 186 
  ldv_atomic_inc(v);
  #line 187 
  return;
}

#line 399  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/0/concurrency safety/weaver/sge.i.aux"
static void *kcalloc(size_t n, size_t size, gfp_t flags)
{
  #line 402 
  return ldv_kcalloc(n,size,flags);
}

#line 556  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/0/concurrency safety/weaver/sge.i.aux"
static int cif_spin_trylock__xmit_lock_of_netdev_queue(spinlock_t *lock)
{
  #line 560 
  ldv_func_ret_type ldv_func_res = spin_trylock(lock);
  #line 562 
  int is_spin_held_by_another_thread = ldv_undef_int();
  #line 564 
  if (is_spin_held_by_another_thread != 0) 
                                           #line 567 
                                           return 0;
  else {
    #line 569 
    ldv_spin_model_lock((char *)"_xmit_lock_of_netdev_queue");
    #line 571 
    return 1;
  }
  #line 574 
  return ldv_func_res;
}

#line 578  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/0/concurrency safety/weaver/sge.i.aux"
static void cif_spin_unlock__xmit_lock_of_netdev_queue(spinlock_t *lock)
{
  #line 581 
  ldv_spin_model_unlock((char *)"_xmit_lock_of_netdev_queue");
  #line 583 
  spin_unlock_0(lock);
  #line 584 
  return;
}

#line 805  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/0/concurrency safety/weaver/sge.i.aux"
static void cif_spin_lock_intrq_lock_of_sge(spinlock_t *lock)
{
  #line 808 
  ldv_spin_model_lock((char *)"intrq_lock_of_sge");
  #line 810 
  spin_lock_0(lock);
  #line 811 
  return;
}

#line 814  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/0/concurrency safety/weaver/sge.i.aux"
static void cif_spin_unlock_intrq_lock_of_sge(spinlock_t *lock)
{
  #line 817 
  ldv_spin_model_unlock((char *)"intrq_lock_of_sge");
  #line 819 
  spin_unlock_0(lock);
  #line 820 
  return;
}

#line 823  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/0/concurrency safety/weaver/sge.i.aux"
static int cif_mod_timer(struct timer_list *timer, unsigned long expires)
{
  #line 827 
  return emg_mod_timer(timer,expires);
}

#line 831  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/0/concurrency safety/weaver/sge.i.aux"
static int cif_del_timer_sync(struct timer_list *timer)
{
  #line 835 
  return emg_del_timer_sync(timer);
}

#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_add_0(struct list_head *new, struct list_head *prev, struct list_head *next)
{
  #line 60 
  if (! __list_add_valid(new,prev,next)) 
                                         #line 61 
                                         return;
  #line 63 
  next->prev = new;
  #line 64 
  new->next = next;
  #line 65 
  new->prev = prev;
  {
    #line 67 
    union __anonunion___u_1766 __u = {.__val = new};
    #line 66 
    __write_once_size((void *)(& prev->next),(void *)(& __u.__c),8);
    #line 66 
    struct list_head *tmp_2 = __u.__val;
  }
  #line 68 
  return;
}

#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_add_tail_0(struct list_head *new, struct list_head *head)
{
  #line 93 
  __list_add_0(new,head->prev,head);
  #line 94 
  return;
}

#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_del_0(struct list_head *prev, struct list_head *next)
{
  #line 97 
  next->prev = prev;
  {
    #line 107 
    union __anonunion___u_1768 __u = {.__val = next};
    #line 106 
    __write_once_size((void *)(& prev->next),(void *)(& __u.__c),8);
    #line 106 
    struct list_head *tmp = __u.__val;
  }
  #line 108 
  return;
}

#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void __list_del_entry_0(struct list_head *entry)
{
  #line 131 
  if (! __list_del_entry_valid(entry)) 
                                       #line 132 
                                       return;
  #line 134 
  __list_del_0(entry->prev,entry->next);
  #line 135 
  return;
}

#line 137  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list.h"
__inline static void list_del_0(struct list_head *entry)
{
  #line 139 
  __list_del_entry_0(entry);
  #line 140 
  entry->next = (struct list_head *)(-2401263026318606080);
  #line 141 
  entry->prev = (struct list_head *)(-2401263026318606046);
  #line 142 
  return;
}

#line 336  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock_1(spinlock_t *lock)
{
  #line 338 
  _raw_spin_lock(& lock->__anonCompField_spinlock_25.rlock);
  #line 339 
  return;
}

#line 340 
#line 649  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/0/concurrency safety/weaver/t4vf_hw.i.aux"
static void cif_spin_lock_mbox_lock_of_adapter(spinlock_t *lock);
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_1(spinlock_t *lock)
{
  #line 378 
  _raw_spin_unlock(& lock->__anonCompField_spinlock_25.rlock);
  #line 379 
  return;
}

#line 380 
#line 658  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/0/concurrency safety/weaver/t4vf_hw.i.aux"
static void cif_spin_unlock_mbox_lock_of_adapter(spinlock_t *lock);
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/io.h"
__inline static u64 readq(void *addr)
{
  #line 95 
  u64 ret;
  #line 96 
  ldv_inline_asm();
  #line 95 
  return ret;
}

#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ratelimit.h"
#line 76 
int ___ratelimit(struct ratelimit_state *, char *);
#line 6  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/delay.h"
#line 6 
void __bad_udelay(void);
#line 9 
#line 9 
void __udelay(unsigned long);
#line 11 
#line 11 
void __const_udelay(unsigned long);
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/delay.h"
#line 59 
void msleep(unsigned int);
#line 467  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/adapter.h"
__inline static u64 t4_read_reg64(struct adapter *adapter, u32 reg_addr)
{
  #line 469 
  return readq(adapter->regs + (unsigned long)reg_addr);
}

#line 480  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/adapter.h"
__inline static void t4_write_reg64(struct adapter *adapter, u32 reg_addr, u64 val)
{
  #line 483 
  writeq(val,adapter->regs + (unsigned long)reg_addr);
  #line 484 
  return;
}

#line 507  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/adapter.h"
__inline static void t4_os_set_hw_addr(struct adapter *adapter, int pidx, u8 *hw_addr)
{
  #line 510 
  memcpy((void *)(adapter->port[pidx])->dev_addr,(void *)hw_addr,6UL);
  #line 511 
  return;
}

#line 334  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/t4vf_common.h"
__inline static int t4vf_wr_mbox_ns(struct adapter *adapter, void *cmd, int size, void *rpl)
{
  #line 337 
  return t4vf_wr_mbox_core(adapter,cmd,size,rpl,(_Bool)0);
}

#line 365 
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/t4vf_hw.c"
int t4vf_wait_dev_ready(struct adapter *adapter);
#line 395  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/t4vf_common.h"
#line 1396  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/t4vf_hw.c"
int t4vf_enable_vi(struct adapter *adapter, unsigned int viid, bool rx_en, bool tx_en);
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/t4vf_hw.c"
int t4vf_wait_dev_ready(struct adapter *adapter)
{
  #line 55 
  u32 val;
  #line 52 
  u32 whoami = 512U;
  #line 53 
  u32 notready1 = 4294967295U;
  #line 54 
  u32 notready2 = 4008636142U;
  #line 57 
  val = t4_read_reg(adapter,512U);
  #line 58 
  if (val != 4294967295U && val != 4008636142U) 
                                                #line 59 
                                                return 0;
  #line 60 
  msleep(500U);
  #line 61 
  val = t4_read_reg(adapter,512U);
  #line 62 
  if (val != 4294967295U && val != 4008636142U) 
                                                #line 63 
                                                return 0; else 
                                                               #line 65 
                                                               return -5;
}

#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/t4vf_hw.c"
static void get_mbox_rpl(struct adapter *adapter, __be64 *rpl, int size, u32 mbox_data)
{
  #line 75 
  while (size != 0) {
    #line 76 
    __be64 *tmp;
    #line 76 
    tmp = rpl;
    #line 76 
    rpl ++;
    #line 76 
    *tmp = (unsigned long long)__builtin_bswap64((unsigned long)t4_read_reg64(adapter,mbox_data));
    #line 75 
    size += -8;
    #line 75 
    mbox_data += 8U;
  }
  #line 77 
  return;
}

#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/t4vf_hw.c"
static void t4vf_record_mbox(struct adapter *adapter, __be64 *cmd, int size, int access, int execute)
{
  #line 91 
  struct mbox_cmd *entry;
  #line 92 
  int i;
  #line 94 
  unsigned int tmp;
  #line 103 
  u32 tmp_2;
  #line 90 
  struct mbox_cmd_log *log = adapter->mbox_log;
  #line 94 
  tmp = log->cursor;
  #line 94 
  (log->cursor) ++;
  #line 94 
  ;
  #line 94 
  ;
  #line 94 
  entry = mbox_cmd_log_entry(log,tmp);
  #line 95 
  if (log->cursor == log->size) 
                                #line 96 
                                log->cursor = 0U;
  #line 98 
  i = 0;
  #line 98 
  while (size / 8 > i) {
    #line 99 
    entry->cmd[i] = (u64)__builtin_bswap64((unsigned long)*(cmd + (unsigned long)i));
    #line 98 
    i ++;
  }
  #line 100 
  while (i <= 7) {
    #line 101 
    int tmp_1;
    #line 101 
    tmp_1 = i;
    #line 101 
    i ++;
    #line 101 
    entry->cmd[tmp_1] = 0ULL;
  }
  #line 102 
  entry->timestamp = (unsigned long long)jiffies;
  #line 103 
  tmp_2 = log->seqno;
  #line 103 
  (log->seqno) ++;
  #line 103 
  entry->seqno = tmp_2;
  #line 104 
  entry->access = (short)access;
  #line 105 
  entry->execute = (short)execute;
  #line 106 
  return;
}

#line 128  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/t4vf_hw.c"
int t4vf_wr_mbox_core(struct adapter *adapter, void *cmd, int size, void *rpl, bool sleep_ok)
{
  #line 136 
  u32 v;
  #line 136 
  u32 mbox_data;
  #line 137 
  int i;
  #line 137 
  int ms;
  #line 137 
  int delay_idx;
  #line 137 
  int ret;
  #line 138 
  __be64 *p;
  #line 141 
  __be64 cmd_rpl[8U];
  #line 142 
  struct mbox_list entry;
  #line 131 
  int delay[9U] = {1, 1, 3, 5, 10, 10, 20, 50, 100};
  #line 135 
  u16 access = (unsigned short)0U;
  #line 135 
  u16 execute = (unsigned short)0U;
  #line 139 
  u32 mbox_ctl = 768U;
  #line 140 
  u32 cmd_op = __builtin_bswap32(((struct fw_cmd_hdr *)cmd)->hi) >> 24;
  #line 147 
  if ((((unsigned int)adapter->params.chip >> 4) & 15U) <= 5U) 
                                                               #line 148 
                                                               mbox_data = 576U; else 
                                                                    #line 150 
                                                                    mbox_data = 640U;
  #line 156 
  if (((unsigned int)size & 15U) != 0U || size > 64) 
                                                     #line 158 
                                                     return -22;
  #line 165 
  cif_spin_lock_mbox_lock_of_adapter(& adapter->mbox_lock);
  #line 166 
  list_add_tail_0(& entry.list,& adapter->mlist.list);
  #line 167 
  cif_spin_unlock_mbox_lock_of_adapter(& adapter->mbox_lock);
  #line 169 
  delay_idx = 0;
  #line 170 
  ms = delay[0];
  #line 172 
  i = 0;
  #line 172 
  while (1) {
    {
      #line 190 
      void *__mptr;
      #line 178 
      if (i > 10000) {
        #line 179 
        cif_spin_lock_mbox_lock_of_adapter(& adapter->mbox_lock);
        #line 180 
        list_del_0(& entry.list);
        #line 181 
        cif_spin_unlock_mbox_lock_of_adapter(& adapter->mbox_lock);
        #line 182 
        ret = -16;
        #line 183 
        t4vf_record_mbox(adapter,(__be64 *)cmd,size,(int)access,ret);
        #line 184 
        return ret;
      }
      #line 190 
      __mptr = (void *)adapter->mlist.list.next;
      #line 190 
      if (((struct mbox_list *)__mptr) == & entry) 
                                                   #line 192 
                                                   break;
      #line 195 
      if ((int)sleep_ok != 0) {
        #line 196 
        ms = delay[delay_idx];
        #line 197 
        if ((unsigned int)delay_idx <= 7U) 
                                           #line 198 
                                           delay_idx ++;
        #line 199 
        msleep((unsigned int)ms);
      }
      else 
        #line 201 
        if (0 != 0 && ms <= 5) 
          #line 201 
          if (0 != 0) 
            #line 201 
            if (ms > 19) 
                         #line 201 
                         __bad_udelay(); else 
                                              #line 201 
                                              __const_udelay((unsigned long)(ms * 1000) * 4295UL);
          else 
               #line 201 
               __udelay((unsigned long)(ms * 1000));
        else {
          #line 201 
          unsigned long __ms = (unsigned long)ms;
          #line 201 
          while (1) {
            #line 201 
            unsigned long tmp_1;
            #line 201 
            tmp_1 = __ms;
            #line 201 
            __ms --;
            #line 201 
            ;
            #line 201 
            if (! (tmp_1 != 0UL)) 
                                  #line 201 
                                  break;
            #line 201 
            __const_udelay(4295000UL);
          }
        }
    }
    #line 172 
    i += ms;
  }
  #line 209 
  v = t4_read_reg(adapter,mbox_ctl) & 3U;
  #line 210 
  i = 0;
  #line 210 
  while (v == 0U && i <= 2) {
    #line 211 
    v = t4_read_reg(adapter,mbox_ctl) & 3U;
    #line 210 
    i ++;
  }
  #line 212 
  if (v != 2U) {
    #line 213 
    cif_spin_lock_mbox_lock_of_adapter(& adapter->mbox_lock);
    #line 214 
    list_del_0(& entry.list);
    #line 215 
    cif_spin_unlock_mbox_lock_of_adapter(& adapter->mbox_lock);
    #line 216 
    if (v == 1U) 
                 #line 216 
                 ret = -16; else 
                                 #line 216 
                                 ret = -110;
    #line 217 
    t4vf_record_mbox(adapter,(__be64 *)cmd,size,(int)access,ret);
    #line 218 
    return ret;
  }
  #line 234 
  if (cmd_op != 26U) 
                     #line 235 
                     t4vf_record_mbox(adapter,(__be64 *)cmd,size,(int)access,0);
  #line 236 
  i = 0;
  #line 236 
  p = (__be64 *)cmd;
  #line 236 
  while (i < size) {
    #line 237 
    __be64 *tmp_4;
    #line 237 
    tmp_4 = p;
    #line 237 
    p ++;
    #line 237 
    ;
    #line 237 
    ;
    #line 237 
    ;
    #line 237 
    t4_write_reg64(adapter,mbox_data + (unsigned int)i,(unsigned long long)__builtin_bswap64((unsigned long)*tmp_4));
    #line 236 
    i += 8;
  }
  #line 238 
  t4_read_reg(adapter,mbox_data);
  #line 240 
  t4_write_reg(adapter,mbox_ctl,9U);
  #line 242 
  t4_read_reg(adapter,mbox_ctl);
  #line 247 
  delay_idx = 0;
  #line 248 
  ms = delay[0];
  #line 250 
  i = 0;
  #line 250 
  while (i <= 9999) {
    #line 251 
    if ((int)sleep_ok != 0) {
      #line 252 
      ms = delay[delay_idx];
      #line 253 
      if ((unsigned int)delay_idx <= 7U) 
                                         #line 254 
                                         delay_idx ++;
      #line 255 
      msleep((unsigned int)ms);
    }
    else 
      #line 257 
      if (0 != 0 && ms <= 5) 
        #line 257 
        if (0 != 0) 
          #line 257 
          if (ms > 19) 
                       #line 257 
                       __bad_udelay(); else 
                                            #line 257 
                                            __const_udelay((unsigned long)(ms * 1000) * 4295UL);
        else 
             #line 257 
             __udelay((unsigned long)(ms * 1000));
      else {
        #line 257 
        unsigned long __ms_0 = (unsigned long)ms;
        #line 257 
        while (1) {
          #line 257 
          unsigned long tmp_6;
          #line 257 
          tmp_6 = __ms_0;
          #line 257 
          __ms_0 --;
          #line 257 
          ;
          #line 257 
          if (! (tmp_6 != 0UL)) 
                                #line 257 
                                break;
          #line 257 
          __const_udelay(4295000UL);
        }
      }
    #line 262 
    v = t4_read_reg(adapter,mbox_ctl);
    #line 263 
    if ((v & 3U) == 2U) {
      #line 268 
      if ((v & 8U) == 0U) {
        #line 269 
        t4_write_reg(adapter,mbox_ctl,0U);
        #line 271 
        goto __Cont;
      }
      #line 281 
      get_mbox_rpl(adapter,(__be64 *)(& cmd_rpl),size,mbox_data);
      #line 284 
      v = (unsigned int)__builtin_bswap64((unsigned long)cmd_rpl[0]);
      #line 286 
      if (rpl != (void *)0) {
        {
          #line 288 
          int __ret_warn_on = (__builtin_bswap32(*((__be32 *)cmd)) & 8388608U) == 0U;
          #line 288 
          if ((long)(__ret_warn_on != 0) != 0L) {
            #line 289 
            ldv_inline_asm();
            #line 290 
            ldv_inline_asm();
          }
          #line 288 
          long tmp_9 = (long)(__ret_warn_on != 0);
        }
        #line 290 
        memcpy(rpl,(void *)(& cmd_rpl),(unsigned long)size);
        {
          #line 291 
          int __ret_warn_on_0 = (__builtin_bswap32(*((__be32 *)rpl)) & 8388608U) != 0U;
          #line 291 
          if ((long)(__ret_warn_on_0 != 0) != 0L) {
            #line 292 
            ldv_inline_asm();
            #line 293 
            ldv_inline_asm();
          }
          #line 291 
          long tmp_11 = (long)(__ret_warn_on_0 != 0);
        }
      }
      #line 294 
      t4_write_reg(adapter,mbox_ctl,0U);
      #line 296 
      execute = (unsigned short)((int)((unsigned short)i) + (int)((unsigned short)ms));
      #line 297 
      if (cmd_op != 26U) 
                         #line 298 
                         t4vf_record_mbox(adapter,(__be64 *)(& cmd_rpl),size,(int)access,(int)execute);
      #line 300 
      cif_spin_lock_mbox_lock_of_adapter(& adapter->mbox_lock);
      #line 301 
      list_del_0(& entry.list);
      #line 302 
      cif_spin_unlock_mbox_lock_of_adapter(& adapter->mbox_lock);
      #line 303 
      return (int)(- ((v >> 8) & 255U));
    }
    #line 250 
    __Cont: 
            #line 250 
    i += ms;
  }
  #line 308 
  ret = -110;
  #line 309 
  t4vf_record_mbox(adapter,(__be64 *)cmd,size,(int)access,ret);
  #line 310 
  cif_spin_lock_mbox_lock_of_adapter(& adapter->mbox_lock);
  #line 311 
  list_del_0(& entry.list);
  #line 312 
  cif_spin_unlock_mbox_lock_of_adapter(& adapter->mbox_lock);
  #line 313 
  return ret;
}

#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/t4vf_hw.c"
static fw_port_cap32_t fwcaps16_to_caps32(fw_port_cap16_t caps16)
{
  #line 337 
  fw_port_cap32_t caps32 = 0U;
  #line 345 
  if (((int)caps16 & 1) != 0) 
                              #line 345 
                              caps32 |= 1U;
  #line 346 
  if (((int)caps16 & 2) != 0) 
                              #line 346 
                              caps32 |= 2U;
  #line 347 
  if (((int)caps16 & 4) != 0) 
                              #line 347 
                              caps32 |= 8U;
  #line 348 
  if (((int)caps16 & 8) != 0) 
                              #line 348 
                              caps32 |= 4U;
  #line 349 
  if (((int)caps16 & 16) != 0) 
                               #line 349 
                               caps32 |= 16U;
  #line 350 
  if (((int)caps16 & 32) != 0) 
                               #line 350 
                               caps32 |= 64U;
  #line 351 
  if (((int)caps16 & 64) != 0) 
                               #line 351 
                               caps32 |= 65536U;
  #line 352 
  if (((int)caps16 & 128) != 0) 
                                #line 352 
                                caps32 |= 131072U;
  #line 353 
  if (((int)caps16 & 256) != 0) 
                                #line 353 
                                caps32 |= 1048576U;
  #line 354 
  if (((int)caps16 & 512) != 0) 
                                #line 354 
                                caps32 |= 2097152U;
  #line 355 
  if (((int)caps16 & 1024) != 0) 
                                 #line 355 
                                 caps32 |= 4194304U;
  #line 356 
  if (((int)caps16 & 2048) != 0) 
                                 #line 356 
                                 caps32 |= 8388608U;
  #line 357 
  if (((int)caps16 & 4096) != 0) 
                                 #line 357 
                                 caps32 |= 16777216U;
  #line 358 
  if (((int)caps16 & 16384) != 0) 
                                  #line 358 
                                  caps32 |= 262144U;
  #line 359 
  if (((int)caps16 & 32768) != 0) 
                                  #line 359 
                                  caps32 |= 524288U;
  #line 363 
  return caps32;
}

#line 367  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/t4vf_hw.c"
__inline static enum cc_pause fwcap_to_cc_pause(fw_port_cap32_t fw_pause)
{
  #line 369 
  enum cc_pause cc_pause = (enum cc_pause)0;
  #line 371 
  if (((unsigned long)fw_pause & 65536UL) != 0UL) 
                                                  #line 372 
                                                  cc_pause = (enum cc_pause)((unsigned int)cc_pause | 1U);
  #line 373 
  if (((unsigned long)fw_pause & 131072UL) != 0UL) 
                                                   #line 374 
                                                   cc_pause = (enum cc_pause)((unsigned int)cc_pause | 2U);
  #line 376 
  return cc_pause;
}

#line 380  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/t4vf_hw.c"
__inline static enum cc_fec fwcap_to_cc_fec(fw_port_cap32_t fw_fec)
{
  #line 382 
  enum cc_fec cc_fec = (enum cc_fec)0;
  #line 384 
  if (((unsigned long)fw_fec & 8388608UL) != 0UL) 
                                                  #line 385 
                                                  cc_fec = (enum cc_fec)((unsigned int)cc_fec | 2U);
  #line 386 
  if (((unsigned long)fw_fec & 16777216UL) != 0UL) 
                                                   #line 387 
                                                   cc_fec = (enum cc_fec)((unsigned int)cc_fec | 4U);
  #line 389 
  return cc_fec;
}

#line 395  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/t4vf_hw.c"
static unsigned int fwcap_to_speed(fw_port_cap32_t caps)
{
  #line 403 
  if (((unsigned long)caps & 256UL) != 0UL) 
                                            #line 403 
                                            return 400000U;
  #line 404 
  if (((unsigned long)caps & 128UL) != 0UL) 
                                            #line 404 
                                            return 200000U;
  #line 405 
  if (((unsigned long)caps & 64UL) != 0UL) 
                                           #line 405 
                                           return 100000U;
  #line 406 
  if (((unsigned long)caps & 32UL) != 0UL) 
                                           #line 406 
                                           return 50000U;
  #line 407 
  if (((unsigned long)caps & 16UL) != 0UL) 
                                           #line 407 
                                           return 40000U;
  #line 408 
  if (((unsigned long)caps & 8UL) != 0UL) 
                                          #line 408 
                                          return 25000U;
  #line 409 
  if (((unsigned long)caps & 4UL) != 0UL) 
                                          #line 409 
                                          return 10000U;
  #line 410 
  if (((unsigned long)caps & 2UL) != 0UL) 
                                          #line 410 
                                          return 1000U;
  #line 411 
  if (((unsigned long)caps & 1UL) != 0UL) 
                                          #line 411 
                                          return 100U;
  #line 415 
  return 0U;
}

#line 426  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/t4vf_hw.c"
static fw_port_cap32_t fwcap_to_fwspeed(fw_port_cap32_t acaps)
{
  #line 434 
  if (((unsigned long)acaps & 256UL) != 0UL) 
                                             #line 434 
                                             return 256U;
  #line 435 
  if (((unsigned long)acaps & 128UL) != 0UL) 
                                             #line 435 
                                             return 128U;
  #line 436 
  if (((unsigned long)acaps & 64UL) != 0UL) 
                                            #line 436 
                                            return 64U;
  #line 437 
  if (((unsigned long)acaps & 32UL) != 0UL) 
                                            #line 437 
                                            return 32U;
  #line 438 
  if (((unsigned long)acaps & 16UL) != 0UL) 
                                            #line 438 
                                            return 16U;
  #line 439 
  if (((unsigned long)acaps & 8UL) != 0UL) 
                                           #line 439 
                                           return 8U;
  #line 440 
  if (((unsigned long)acaps & 4UL) != 0UL) 
                                           #line 440 
                                           return 4U;
  #line 441 
  if (((unsigned long)acaps & 2UL) != 0UL) 
                                           #line 441 
                                           return 2U;
  #line 442 
  if (((unsigned long)acaps & 1UL) != 0UL) 
                                           #line 442 
                                           return 1U;
  #line 445 
  return 0U;
}

#line 457  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/t4vf_hw.c"
static void init_link_config(struct link_config *lc, fw_port_cap32_t pcaps, fw_port_cap32_t acaps)
{
  #line 461 
  lc->pcaps = pcaps;
  #line 462 
  lc->lpacaps = 0U;
  #line 463 
  lc->speed_caps = 0U;
  #line 464 
  lc->speed = 0U;
  #line 465 
  lc->fc = ((enum cc_pause)3);
  #line 465 
  lc->requested_fc = ((enum cc_pause)3);
  #line 470 
  lc->auto_fec = fwcap_to_cc_fec(acaps);
  #line 471 
  lc->requested_fec = FEC_AUTO;
  #line 472 
  lc->fec = lc->auto_fec;
  #line 481 
  if (((unsigned long)lc->pcaps & 1048576UL) != 0UL) {
    #line 482 
    lc->acaps = acaps & 261885951U;
    #line 483 
    lc->autoneg = (unsigned char)1U;
    #line 484 
    lc->requested_fc = (enum cc_pause)((unsigned int)lc->requested_fc | 4U);
  }
  else {
    #line 486 
    lc->acaps = 0U;
    #line 487 
    lc->autoneg = (unsigned char)0U;
    #line 488 
    lc->speed_caps = fwcap_to_fwspeed(acaps);
  }
  #line 490 
  return;
}

#line 497  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/t4vf_hw.c"
int t4vf_port_init(struct adapter *adapter, int pidx)
{
  #line 501 
  struct fw_vi_cmd vi_cmd;
  #line 501 
  struct fw_vi_cmd vi_rpl;
  #line 502 
  struct fw_port_cmd port_cmd;
  #line 502 
  struct fw_port_cmd port_rpl;
  #line 503 
  enum fw_port_type port_type;
  #line 504 
  int mdio_addr;
  #line 505 
  fw_port_cap32_t pcaps;
  #line 505 
  fw_port_cap32_t acaps;
  #line 506 
  int ret;
  #line 555 
  unsigned int tmp_1;
  #line 499 
  struct port_info *pi = adap2pinfo(adapter,pidx);
  #line 500 
  unsigned int fw_caps = (unsigned int)adapter->params.fw_caps_support;
  #line 514 
  if (fw_caps == 0U) {
    #line 515 
    u32 param;
    #line 515 
    u32 val;
    #line 517 
    param = 37355520U;
    #line 519 
    val = 1U;
    #line 520 
    ret = t4vf_set_params(adapter,1U,& param,& val);
    #line 521 
    if (ret == 0) 
                  #line 521 
                  fw_caps = 2U; else 
                                     #line 521 
                                     fw_caps = 1U;
    #line 522 
    adapter->params.fw_caps_support = (unsigned char)fw_caps;
  }
  #line 529 
  memset((void *)(& vi_cmd),0,64UL);
  #line 530 
  vi_cmd.op_to_vfn = 49172U;
  #line 533 
  vi_cmd.alloc_to_len16 = 67108864U;
  #line 534 
  vi_cmd.type_viid = __builtin_bswap16((unsigned short)((int)pi->viid));
  #line 535 
  ret = t4vf_wr_mbox(adapter,(void *)(& vi_cmd),64,(void *)(& vi_rpl));
  #line 536 
  if (ret != 0) 
                #line 537 
                return ret;
  #line 539 
  if ((long)((int)pi->port_id != (((int)vi_rpl.portid_pkd >> 4) & 15)) != 0L) {
    #line 540 
    ldv_inline_asm();
    #line 541 
    ldv_inline_asm();
    #line 542 
    ldv_inline_asm();
    #line 539 
    ;
  }
  #line 540 
  pi->rss_size = (unsigned short)((unsigned int)__builtin_bswap16((unsigned short)((int)vi_rpl.rsssize_pkd)) & 2047U);
  #line 541 
  t4_os_set_hw_addr(adapter,pidx,(u8 *)(& vi_rpl.mac));
  #line 547 
  if ((adapter->params.vfres.r_caps & 4U) == 0U) 
                                                 #line 548 
                                                 return 0;
  #line 550 
  memset((void *)(& port_cmd),0,32UL);
  #line 551 
  port_cmd.op_to_portid = __builtin_bswap32((unsigned int)pi->port_id | 465567744U);
  #line 555 
  if (fw_caps == 1U) 
                     #line 555 
                     tmp_1 = 196610U; else 
                                           #line 555 
                                           tmp_1 = 655362U;
  #line 555 
  port_cmd.action_to_len16 = __builtin_bswap32(tmp_1);
  #line 560 
  ret = t4vf_wr_mbox(adapter,(void *)(& port_cmd),32,(void *)(& port_rpl));
  #line 561 
  if (ret != 0) 
                #line 562 
                return ret;
  #line 565 
  if (fw_caps == 1U) {
    #line 566 
    u32 lstatus = __builtin_bswap32(port_rpl.u.info.lstatus_to_modtype);
    #line 568 
    port_type = (enum fw_port_type)((lstatus >> 8) & 31U);
    #line 569 
    if ((lstatus & 2097152U) != 0U) 
                                    #line 569 
                                    mdio_addr = (int)(lstatus >> 16) & 31; else 
                                                                    #line 569 
                                                                    mdio_addr = -1;
    #line 572 
    pcaps = fwcaps16_to_caps32((unsigned short)((int)__builtin_bswap16((unsigned short)((int)port_rpl.u.info.pcap))));
    #line 573 
    acaps = fwcaps16_to_caps32((unsigned short)((int)__builtin_bswap16((unsigned short)((int)port_rpl.u.info.acap))));
  }
  else {
    #line 575 
    u32 lstatus32 = __builtin_bswap32(port_rpl.u.info32.lstatus32_to_cbllen32);
    #line 578 
    port_type = (enum fw_port_type)((lstatus32 >> 13) & 255U);
    #line 579 
    if ((lstatus32 & 67108864U) != 0U) 
                                       #line 579 
                                       mdio_addr = (int)(lstatus32 >> 21) & 31; else 
                                                                    #line 579 
                                                                    mdio_addr = -1;
    #line 582 
    pcaps = __builtin_bswap32(port_rpl.u.info32.pcaps32);
    #line 583 
    acaps = __builtin_bswap32(port_rpl.u.info32.acaps32);
  }
  #line 586 
  pi->port_type = (unsigned char)port_type;
  #line 587 
  pi->mdio_addr = (signed char)mdio_addr;
  #line 588 
  pi->mod_type = (unsigned char)0U;
  #line 590 
  init_link_config(& pi->link_cfg,pcaps,acaps);
  #line 591 
  return 0;
}

#line 602  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/t4vf_hw.c"
int t4vf_fw_reset(struct adapter *adapter)
{
  #line 604 
  struct fw_reset_cmd cmd;
  #line 606 
  memset((void *)(& cmd),0,16UL);
  #line 607 
  cmd.op_to_write = 8195U;
  #line 609 
  cmd.retval_len16 = 16777216U;
  #line 610 
  return t4vf_wr_mbox(adapter,(void *)(& cmd),16,(void *)0);
}

#line 623  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/t4vf_hw.c"
static int t4vf_query_params(struct adapter *adapter, unsigned int nparams, u32 *params, u32 *vals)
{
  #line 626 
  int i;
  #line 626 
  int ret;
  #line 627 
  struct fw_params_cmd cmd;
  #line 627 
  struct fw_params_cmd rpl;
  #line 628 
  struct fw_params_param *p;
  #line 629 
  size_t len16;
  #line 631 
  if (nparams > 7U) 
                    #line 632 
                    return -22;
  #line 634 
  memset((void *)(& cmd),0,64UL);
  #line 635 
  cmd.op_to_vfn = 49160U;
  #line 638 
  len16 = (((unsigned long)nparams + 3UL) * 8UL + 18446744073709551615UL) / 16UL;
  #line 640 
  cmd.retval_len16 = __builtin_bswap32((unsigned int)len16);
  #line 641 
  i = 0;
  #line 641 
  p = & cmd.param[0];
  #line 641 
  while ((unsigned int)i < nparams) {
    #line 642 
    u32 *tmp;
    #line 642 
    tmp = params;
    #line 642 
    params ++;
    #line 642 
    ;
    #line 642 
    p->mnem = __builtin_bswap32(*tmp);
    #line 641 
    i ++;
    #line 641 
    p ++;
  }
  #line 644 
  ret = t4vf_wr_mbox(adapter,(void *)(& cmd),64,(void *)(& rpl));
  #line 645 
  if (ret == 0) {
    #line 646 
    i = 0;
    #line 646 
    p = & rpl.param[0];
    #line 646 
    while ((unsigned int)i < nparams) {
      #line 647 
      u32 *tmp_0;
      #line 647 
      tmp_0 = vals;
      #line 647 
      vals ++;
      #line 647 
      *tmp_0 = __builtin_bswap32(p->val);
      #line 646 
      i ++;
      #line 646 
      p ++;
    }
  }
  #line 648 
  return ret;
}

#line 661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/t4vf_hw.c"
int t4vf_set_params(struct adapter *adapter, unsigned int nparams, u32 *params, u32 *vals)
{
  #line 664 
  int i;
  #line 665 
  struct fw_params_cmd cmd;
  #line 666 
  struct fw_params_param *p;
  #line 667 
  size_t len16;
  #line 669 
  if (nparams > 7U) 
                    #line 670 
                    return -22;
  #line 672 
  memset((void *)(& cmd),0,64UL);
  #line 673 
  cmd.op_to_vfn = 40968U;
  #line 676 
  len16 = (((unsigned long)nparams + 3UL) * 8UL + 18446744073709551615UL) / 16UL;
  #line 678 
  cmd.retval_len16 = __builtin_bswap32((unsigned int)len16);
  #line 679 
  i = 0;
  #line 679 
  p = & cmd.param[0];
  #line 679 
  while ((unsigned int)i < nparams) {
    {
      #line 680 
      u32 *tmp;
      #line 681 
      u32 *tmp_0;
      #line 680 
      tmp = params;
      #line 680 
      params ++;
      #line 680 
      ;
      #line 680 
      p->mnem = __builtin_bswap32(*tmp);
      #line 681 
      tmp_0 = vals;
      #line 681 
      vals ++;
      #line 681 
      ;
      #line 681 
      p->val = __builtin_bswap32(*tmp_0);
    }
    #line 679 
    i ++;
    #line 679 
    p ++;
  }
  #line 684 
  return t4vf_wr_mbox(adapter,(void *)(& cmd),64,(void *)0);
}

#line 698  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/t4vf_hw.c"
int t4vf_fl_pkt_align(struct adapter *adapter)
{
  #line 700 
  u32 sge_control;
  #line 700 
  u32 sge_control2;
  #line 701 
  unsigned int ingpadboundary;
  #line 701 
  unsigned int ingpackboundary;
  #line 701 
  unsigned int fl_align;
  #line 701 
  unsigned int ingpad_shift;
  #line 703 
  sge_control = adapter->params.sge.sge_control;
  #line 717 
  if ((((unsigned int)adapter->params.chip >> 4) & 15U) <= 5U) 
                                                               #line 718 
                                                               ingpad_shift = 5U; else 
                                                                    #line 720 
                                                                    ingpad_shift = 3U;
  #line 722 
  ingpadboundary = (unsigned int)(1 << (((sge_control >> 4) & 7U) + ingpad_shift));
  #line 724 
  fl_align = ingpadboundary;
  #line 725 
  if (is_t4(adapter->params.chip) == 0) {
    #line 737 
    unsigned int tmp;
    #line 737 
    unsigned int __UNIQUE_ID___x439;
    #line 729 
    sge_control2 = adapter->params.sge.sge_control2;
    #line 730 
    ingpackboundary = (sge_control2 >> 16) & 7U;
    #line 731 
    if (ingpackboundary == 0U) 
                               #line 732 
                               ingpackboundary = 16U; else 
                                                           #line 734 
                                                           ingpackboundary = (unsigned int)(1 << (ingpackboundary + 5U));
    {
      #line 737 
      __UNIQUE_ID___x439 = ingpadboundary;
      #line 737 
      unsigned int __UNIQUE_ID___y440 = ingpackboundary;
      #line 737 
      if (__UNIQUE_ID___x439 > __UNIQUE_ID___y440) 
                                                   #line 737 
                                                   tmp = __UNIQUE_ID___x439; else 
                                                                    #line 737 
                                                                    tmp = __UNIQUE_ID___y440;
      }
    #line 737 
    fl_align = tmp;
  }
  #line 739 
  return (int)fl_align;
}

#line 767  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/t4vf_hw.c"
int t4vf_bar2_sge_qregs(struct adapter *adapter, unsigned int qid, enum t4_bar2_qtype qtype, u64 *pbar2_qoffset, unsigned int *pbar2_qid)
{
  #line 773 
  unsigned int page_shift;
  #line 773 
  unsigned int page_size;
  #line 773 
  unsigned int qpp_shift;
  #line 773 
  unsigned int qpp_mask;
  #line 774 
  u64 bar2_page_offset;
  #line 774 
  u64 bar2_qoffset;
  #line 775 
  unsigned int bar2_qid;
  #line 775 
  unsigned int bar2_qid_offset;
  #line 775 
  unsigned int bar2_qinferred;
  #line 779 
  if (is_t4(adapter->params.chip) != 0) 
                                        #line 780 
                                        return -22;
  #line 784 
  page_shift = adapter->params.sge.sge_vf_hps + 10U;
  #line 785 
  page_size = (unsigned int)(1 << page_shift);
  #line 789 
  if (qtype == (unsigned int)T4_BAR2_QTYPE_EGRESS) 
                                                   #line 789 
                                                   qpp_shift = adapter->params.sge.sge_vf_eq_qpp; else 
                                                                    #line 789 
                                                                    qpp_shift = adapter->params.sge.sge_vf_iq_qpp;
  #line 792 
  qpp_mask = (unsigned int)((1 << qpp_shift) + -1);
  #line 799 
  bar2_page_offset = (unsigned long long)(qid >> qpp_shift) << page_shift;
  #line 800 
  bar2_qid = qid & qpp_mask;
  #line 801 
  bar2_qid_offset = bar2_qid * 128U;
  #line 819 
  bar2_qoffset = bar2_page_offset;
  #line 820 
  bar2_qinferred = (unsigned int)(bar2_qid_offset < page_size);
  #line 821 
  if (bar2_qinferred != 0U) {
    #line 822 
    bar2_qoffset = (unsigned long long)bar2_qid_offset + bar2_qoffset;
    #line 823 
    bar2_qid = 0U;
  }
  #line 826 
  *pbar2_qoffset = bar2_qoffset;
  #line 827 
  *pbar2_qid = bar2_qid;
  #line 828 
  return 0;
}

#line 831  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/t4vf_hw.c"
unsigned int t4vf_get_pf_from_vf(struct adapter *adapter)
{
  #line 833 
  u32 whoami;
  #line 837 
  unsigned int tmp;
  #line 835 
  whoami = t4_read_reg(adapter,512U);
  #line 837 
  if ((((unsigned int)adapter->params.chip >> 4) & 15U) <= 5U) 
                                                               #line 837 
                                                               tmp = (whoami >> 8) & 7U; else 
                                                                    #line 837 
                                                                    tmp = (whoami >> 9) & 7U;
  #line 837 
  return tmp;
}

#line 848  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/t4vf_hw.c"
int t4vf_get_sge_params(struct adapter *adapter)
{
  #line 851 
  u32 params[7U];
  #line 851 
  u32 vals[7U];
  #line 852 
  int v;
  #line 850 
  struct sge_params *sge_params = & adapter->params.sge;
  #line 854 
  params[0] = 50335752U;
  #line 856 
  params[1] = 50335756U;
  #line 858 
  params[2] = 50335812U;
  #line 860 
  params[3] = 50335816U;
  #line 862 
  params[4] = 50335928U;
  #line 864 
  params[5] = 50335932U;
  #line 866 
  params[6] = 50335936U;
  #line 868 
  v = t4vf_query_params(adapter,7U,(u32 *)(& params),(u32 *)(& vals));
  #line 869 
  if (v != 0) 
              #line 870 
              return v;
  #line 871 
  sge_params->sge_control = vals[0];
  #line 872 
  sge_params->sge_host_page_size = vals[1];
  #line 873 
  sge_params->sge_fl_buffer_size[0] = vals[2];
  #line 874 
  sge_params->sge_fl_buffer_size[1] = vals[3];
  #line 875 
  sge_params->sge_timer_value_0_and_1 = vals[4];
  #line 876 
  sge_params->sge_timer_value_2_and_3 = vals[5];
  #line 877 
  sge_params->sge_timer_value_4_and_5 = vals[6];
  #line 889 
  if (is_t4(adapter->params.chip) == 0) {
    #line 890 
    params[0] = 50336036U;
    #line 892 
    v = t4vf_query_params(adapter,1U,(u32 *)(& params),(u32 *)(& vals));
    #line 893 
    if (v != 0) {
      #line 894 
      _dev_err(adapter->pdev_dev,(char *)"Unable to get SGE Control2; ");
      #line 897 
      return v;
    }
    #line 899 
    sge_params->sge_control2 = vals[0];
  }
  #line 902 
  params[0] = 50335904U;
  #line 904 
  params[1] = 50335892U;
  #line 906 
  v = t4vf_query_params(adapter,2U,(u32 *)(& params),(u32 *)(& vals));
  #line 907 
  if (v != 0) 
              #line 908 
              return v;
  #line 909 
  sge_params->sge_ingress_rx_threshold = vals[0];
  #line 910 
  sge_params->sge_congestion_control = vals[1];
  #line 916 
  if (is_t4(adapter->params.chip) == 0) {
    #line 917 
    unsigned int pf;
    #line 917 
    unsigned int s_hps;
    #line 917 
    unsigned int s_qpp;
    #line 919 
    params[0] = 50335764U;
    #line 922 
    params[1] = 50335992U;
    #line 925 
    v = t4vf_query_params(adapter,2U,(u32 *)(& params),(u32 *)(& vals));
    #line 926 
    if (v != 0) {
      #line 927 
      _dev_warn(adapter->pdev_dev,(char *)"Unable to get VF SGE Queues/Page; ");
      #line 930 
      return v;
    }
    #line 932 
    sge_params->sge_egress_queues_per_page = vals[0];
    #line 933 
    sge_params->sge_ingress_queues_per_page = vals[1];
    #line 940 
    pf = t4vf_get_pf_from_vf(adapter);
    #line 941 
    s_hps = pf * 4U;
    #line 943 
    sge_params->sge_vf_hps = (sge_params->sge_host_page_size >> s_hps) & 15U;
    #line 947 
    s_qpp = pf * 4U;
    #line 949 
    sge_params->sge_vf_eq_qpp = (sge_params->sge_egress_queues_per_page >> s_qpp) & 15U;
    #line 952 
    sge_params->sge_vf_iq_qpp = (sge_params->sge_ingress_queues_per_page >> s_qpp) & 15U;
  }
  #line 957 
  return 0;
}

#line 967  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/t4vf_hw.c"
int t4vf_get_vpd_params(struct adapter *adapter)
{
  #line 970 
  u32 params[7U];
  #line 970 
  u32 vals[7U];
  #line 971 
  int v;
  #line 969 
  struct vpd_params *vpd_params = & adapter->params.vpd;
  #line 973 
  params[0] = 16777216U;
  #line 975 
  v = t4vf_query_params(adapter,1U,(u32 *)(& params),(u32 *)(& vals));
  #line 976 
  if (v != 0) 
              #line 977 
              return v;
  #line 978 
  vpd_params->cclk = vals[0];
  #line 980 
  return 0;
}

#line 990  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/t4vf_hw.c"
int t4vf_get_dev_params(struct adapter *adapter)
{
  #line 993 
  u32 params[7U];
  #line 993 
  u32 vals[7U];
  #line 994 
  int v;
  #line 992 
  struct dev_params *dev_params = & adapter->params.dev;
  #line 996 
  params[0] = 17498112U;
  #line 998 
  params[1] = 17563648U;
  #line 1000 
  v = t4vf_query_params(adapter,2U,(u32 *)(& params),(u32 *)(& vals));
  #line 1001 
  if (v != 0) 
              #line 1002 
              return v;
  #line 1003 
  dev_params->fwrev = vals[0];
  #line 1004 
  dev_params->tprev = vals[1];
  #line 1006 
  return 0;
}

#line 1016  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/t4vf_hw.c"
int t4vf_get_rss_glb_config(struct adapter *adapter)
{
  #line 1019 
  struct fw_rss_glb_config_cmd cmd;
  #line 1019 
  struct fw_rss_glb_config_cmd rpl;
  #line 1020 
  int v;
  #line 1018 
  struct rss_params *rss = & adapter->params.rss;
  #line 1026 
  memset((void *)(& cmd),0,32UL);
  #line 1027 
  cmd.op_to_write = 49186U;
  #line 1030 
  cmd.retval_len16 = 33554432U;
  #line 1031 
  v = t4vf_wr_mbox(adapter,(void *)(& cmd),32,(void *)(& rpl));
  #line 1032 
  if (v != 0) 
              #line 1033 
              return v;
  #line 1041 
  rss->mode = __builtin_bswap32(rpl.u.manual.mode_pkd) >> 28;
  #line 1043 
  switch (rss->mode) {
    #line 1044 
    case (unsigned int)1: 
                          #line 1044 
    ;
    {
      #line 1045 
      u32 word = __builtin_bswap32(rpl.u.basicvirtual.synmapen_to_hashtoeplitz);
      #line 1048 
      rss->u.basicvirtual.synmapen = (unsigned int)((word & 256U) != 0U);
      #line 1050 
      rss->u.basicvirtual.syn4tupenipv6 = (unsigned int)((word & 128U) != 0U);
      #line 1052 
      rss->u.basicvirtual.syn2tupenipv6 = (unsigned int)((word & 64U) != 0U);
      #line 1054 
      rss->u.basicvirtual.syn4tupenipv4 = (unsigned int)((word & 32U) != 0U);
      #line 1056 
      rss->u.basicvirtual.syn2tupenipv4 = (unsigned int)((word & 16U) != 0U);
      #line 1059 
      rss->u.basicvirtual.ofdmapen = (unsigned int)((word & 8U) != 0U);
      #line 1062 
      rss->u.basicvirtual.tnlmapen = (unsigned int)((word & 4U) != 0U);
      #line 1064 
      rss->u.basicvirtual.tnlalllookup = (unsigned int)((word & 2U) != 0U);
      #line 1067 
      rss->u.basicvirtual.hashtoeplitz = (unsigned int)((word & 1U) != 0U);
      #line 1071 
      if ((unsigned int)rss->u.basicvirtual.tnlmapen == 0U) 
                                                            #line 1072 
                                                            return -22;
      #line 1073 
      break;
    }
    #line 1076 
    default: 
             #line 1076 
    ;
    #line 1078 
    return -22;
  }
  #line 1081 
  return 0;
}

#line 1091  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/t4vf_hw.c"
int t4vf_get_vfres(struct adapter *adapter)
{
  #line 1094 
  struct fw_pfvf_cmd cmd;
  #line 1094 
  struct fw_pfvf_cmd rpl;
  #line 1095 
  int v;
  #line 1096 
  u32 word;
  #line 1093 
  struct vf_resources *vfres = & adapter->params.vfres;
  #line 1102 
  memset((void *)(& cmd),0,32UL);
  #line 1103 
  cmd.op_to_vfn = 49161U;
  #line 1106 
  cmd.retval_len16 = 33554432U;
  #line 1107 
  v = t4vf_wr_mbox(adapter,(void *)(& cmd),32,(void *)(& rpl));
  #line 1108 
  if (v != 0) 
              #line 1109 
              return v;
  #line 1114 
  word = __builtin_bswap32(rpl.niqflint_niq);
  #line 1115 
  vfres->niqflint = word >> 20;
  #line 1116 
  vfres->niq = word & 1048575U;
  #line 1118 
  word = __builtin_bswap32(rpl.type_to_neq);
  #line 1119 
  vfres->neq = word & 1048575U;
  #line 1120 
  vfres->pmask = (word >> 20) & 15U;
  #line 1122 
  word = __builtin_bswap32(rpl.tc_to_nexactf);
  #line 1123 
  vfres->tc = word >> 24;
  #line 1124 
  vfres->nvi = (word >> 16) & 255U;
  #line 1125 
  vfres->nexactf = word & 65535U;
  #line 1127 
  word = __builtin_bswap32(rpl.r_caps_to_nethctrl);
  #line 1128 
  vfres->r_caps = word >> 24;
  #line 1129 
  vfres->wx_caps = (word >> 16) & 255U;
  #line 1130 
  vfres->nethctrl = word & 65535U;
  #line 1132 
  return 0;
}

#line 1144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/t4vf_hw.c"
int t4vf_read_rss_vi_config(struct adapter *adapter, unsigned int viid, union rss_vi_config *config)
{
  #line 1147 
  struct fw_rss_vi_config_cmd cmd;
  #line 1147 
  struct fw_rss_vi_config_cmd rpl;
  #line 1148 
  int v;
  #line 1150 
  memset((void *)(& cmd),0,32UL);
  #line 1151 
  cmd.op_to_viid = __builtin_bswap32(viid | 599785472U);
  #line 1155 
  cmd.retval_len16 = 33554432U;
  #line 1156 
  v = t4vf_wr_mbox(adapter,(void *)(& cmd),32,(void *)(& rpl));
  #line 1157 
  if (v != 0) 
              #line 1158 
              return v;
  #line 1160 
  switch (adapter->params.rss.mode) {
    #line 1161 
    case (unsigned int)1: 
                          #line 1161 
    ;
    {
      #line 1162 
      u32 word = __builtin_bswap32(rpl.u.basicvirtual.defaultq_to_udpen);
      #line 1164 
      config->basicvirtual.ip6fourtupen = (unsigned int)((word & 16U) != 0U);
      #line 1166 
      config->basicvirtual.ip6twotupen = (unsigned int)((word & 8U) != 0U);
      #line 1168 
      config->basicvirtual.ip4fourtupen = (unsigned int)((word & 4U) != 0U);
      #line 1170 
      config->basicvirtual.ip4twotupen = (unsigned int)((word & 2U) != 0U);
      #line 1172 
      config->basicvirtual.udpen = (word & 1U) != 0U;
      #line 1174 
      config->basicvirtual.defaultq = (unsigned short)((unsigned int)((unsigned short)(word >> 16)) & 1023U);
      #line 1176 
      break;
    }
    #line 1179 
    default: 
             #line 1179 
    ;
    #line 1180 
    return -22;
  }
  #line 1183 
  return 0;
}

#line 1195  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/t4vf_hw.c"
int t4vf_write_rss_vi_config(struct adapter *adapter, unsigned int viid, union rss_vi_config *config)
{
  #line 1198 
  struct fw_rss_vi_config_cmd cmd;
  #line 1198 
  struct fw_rss_vi_config_cmd rpl;
  #line 1200 
  memset((void *)(& cmd),0,32UL);
  #line 1201 
  cmd.op_to_viid = __builtin_bswap32(viid | 597688320U);
  #line 1205 
  cmd.retval_len16 = 33554432U;
  #line 1206 
  switch (adapter->params.rss.mode) {
    #line 1207 
    case (unsigned int)1: 
                          #line 1207 
    ;
    {
      #line 1208 
      u32 word = 0U;
      #line 1210 
      if ((unsigned int)config->basicvirtual.ip6fourtupen != 0U) 
                                                                 #line 1211 
                                                                 word |= 16U;
      #line 1212 
      if ((unsigned int)config->basicvirtual.ip6twotupen != 0U) 
                                                                #line 1213 
                                                                word |= 8U;
      #line 1214 
      if ((unsigned int)config->basicvirtual.ip4fourtupen != 0U) 
                                                                 #line 1215 
                                                                 word |= 4U;
      #line 1216 
      if ((unsigned int)config->basicvirtual.ip4twotupen != 0U) 
                                                                #line 1217 
                                                                word |= 2U;
      #line 1218 
      if (config->basicvirtual.udpen != 0) 
                                           #line 1219 
                                           word |= 1U;
      #line 1220 
      word = (unsigned int)((int)config->basicvirtual.defaultq << 16) | word;
      #line 1222 
      cmd.u.basicvirtual.defaultq_to_udpen = __builtin_bswap32(word);
      #line 1223 
      break;
    }
    #line 1226 
    default: 
             #line 1226 
    ;
    #line 1227 
    return -22;
  }
  #line 1230 
  return t4vf_wr_mbox(adapter,(void *)(& cmd),32,(void *)(& rpl));
}

#line 1248  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/t4vf_hw.c"
int t4vf_config_rss_range(struct adapter *adapter, unsigned int viid, int start, int n, u16 *rspq, int nrspq)
{
  #line 1253 
  struct fw_rss_ind_tbl_cmd cmd;
  #line 1251 
  u16 *rsp = rspq;
  #line 1252 
  u16 *rsp_end = rspq + (unsigned long)nrspq;
  #line 1258 
  memset((void *)(& cmd),0,64UL);
  #line 1259 
  cmd.op_to_viid = __builtin_bswap32(viid | 547356672U);
  #line 1263 
  cmd.retval_len16 = 67108864U;
  #line 1271 
  while (n > 0) {
    #line 1273 
    int __UNIQUE_ID___x441;
    #line 1273 
    int tmp;
    #line 1274 
    int ret;
    #line 1272 
    __be32 *qp = & cmd.iq0_to_iq2;
    {
      #line 1273 
      __UNIQUE_ID___x441 = n;
      #line 1273 
      int __UNIQUE_ID___y442 = 32;
      #line 1273 
      if (__UNIQUE_ID___x441 < __UNIQUE_ID___y442) 
                                                   #line 1273 
                                                   tmp = __UNIQUE_ID___x441; else 
                                                                    #line 1273 
                                                                    tmp = __UNIQUE_ID___y442;
      }
    #line 1273 
    int nq = tmp;
    #line 1280 
    cmd.niqid = __builtin_bswap16((unsigned short)((int)((unsigned short)nq)));
    #line 1281 
    cmd.startidx = __builtin_bswap16((unsigned short)((int)((unsigned short)start)));
    #line 1286 
    start += nq;
    #line 1287 
    n -= nq;
    #line 1294 
    while (nq > 0) {
      #line 1303 
      int __UNIQUE_ID___x443;
      #line 1303 
      int tmp_1;
      #line 1301 
      u16 qbuf[3U];
      #line 1313 
      __be32 *tmp_5;
      #line 1302 
      u16 *qbp = (u16 *)(& qbuf);
      {
        #line 1303 
        __UNIQUE_ID___x443 = 3;
        #line 1303 
        int __UNIQUE_ID___y444 = nq;
        #line 1303 
        if (__UNIQUE_ID___x443 < __UNIQUE_ID___y444) 
                                                     #line 1303 
                                                     tmp_1 = __UNIQUE_ID___x443; else 
                                                                    #line 1303 
                                                                    tmp_1 = __UNIQUE_ID___y444;
        }
      #line 1303 
      int nqbuf = tmp_1;
      #line 1305 
      nq -= nqbuf;
      #line 1306 
      qbuf[2] = (unsigned short)0U;
      #line 1306 
      qbuf[1] = qbuf[2];
      #line 1306 
      qbuf[0] = qbuf[1];
      #line 1307 
      while (nqbuf != 0) {
        #line 1309 
        u16 *tmp_3;
        #line 1309 
        u16 *tmp_4;
        #line 1308 
        nqbuf --;
        #line 1309 
        tmp_3 = qbp;
        #line 1309 
        qbp ++;
        #line 1309 
        tmp_4 = rsp;
        #line 1309 
        rsp ++;
        #line 1309 
        *tmp_3 = *tmp_4;
        #line 1310 
        if (rsp >= rsp_end) 
                            #line 1311 
                            rsp = rspq;
      }
      #line 1313 
      tmp_5 = qp;
      #line 1313 
      qp ++;
      #line 1313 
      *tmp_5 = __builtin_bswap32((unsigned int)((((int)qbuf[0] << 20) | ((int)qbuf[1] << 10)) | (int)qbuf[2]));
    }
    #line 1322 
    ret = t4vf_wr_mbox(adapter,(void *)(& cmd),64,(void *)0);
    #line 1323 
    if (ret != 0) 
                  #line 1324 
                  return ret;
  }
  #line 1326 
  return 0;
}

#line 1338  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/t4vf_hw.c"
int t4vf_alloc_vi(struct adapter *adapter, int port_id)
{
  #line 1340 
  struct fw_vi_cmd cmd;
  #line 1340 
  struct fw_vi_cmd rpl;
  #line 1341 
  int v;
  #line 1347 
  memset((void *)(& cmd),0,64UL);
  #line 1348 
  cmd.op_to_vfn = 45076U;
  #line 1352 
  cmd.alloc_to_len16 = 67108992U;
  #line 1354 
  cmd.portid_pkd = (unsigned char)((int)((unsigned char)port_id) << 4U);
  #line 1355 
  v = t4vf_wr_mbox(adapter,(void *)(& cmd),64,(void *)(& rpl));
  #line 1356 
  if (v != 0) 
              #line 1357 
              return v;
  #line 1359 
  return (int)__builtin_bswap16((unsigned short)((int)rpl.type_viid)) & 4095;
}

#line 1370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/t4vf_hw.c"
int t4vf_free_vi(struct adapter *adapter, int viid)
{
  #line 1372 
  struct fw_vi_cmd cmd;
  #line 1377 
  memset((void *)(& cmd),0,64UL);
  #line 1378 
  cmd.op_to_vfn = 36884U;
  #line 1381 
  cmd.alloc_to_len16 = 67108928U;
  #line 1383 
  cmd.type_viid = __builtin_bswap16((unsigned short)((int)((unsigned short)viid)));
  #line 1384 
  return t4vf_wr_mbox(adapter,(void *)(& cmd),64,(void *)0);
}

#line 1396  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/t4vf_hw.c"
int t4vf_enable_vi(struct adapter *adapter, unsigned int viid, bool rx_en, bool tx_en)
{
  #line 1399 
  struct fw_vi_enable_cmd cmd;
  #line 1401 
  memset((void *)(& cmd),0,16UL);
  #line 1402 
  cmd.op_to_viid = __builtin_bswap32(viid | 395313152U);
  #line 1406 
  cmd.ien_to_len16 = __builtin_bswap32((unsigned int)((((int)rx_en << 31) | ((int)tx_en << 30)) | 1));
  #line 1409 
  return t4vf_wr_mbox(adapter,(void *)(& cmd),16,(void *)0);
}

#line 1424  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/t4vf_hw.c"
int t4vf_enable_pi(struct adapter *adapter, struct port_info *pi, bool rx_en, bool tx_en)
{
  #line 1427 
  int ret = t4vf_enable_vi(adapter,(unsigned int)pi->viid,(_Bool)((bool)((int)rx_en) != 0),(_Bool)((bool)((int)tx_en) != 0));
  #line 1429 
  if (ret != 0) 
                #line 1430 
                return ret;
  #line 1431 
  t4vf_os_link_changed(adapter,(int)pi->pidx,(((int)rx_en != 0 && (int)tx_en != 0) && (unsigned int)pi->link_cfg.link_ok != 0U) != 0);
  #line 1433 
  return 0;
}

#line 1444  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/t4vf_hw.c"
int t4vf_identify_port(struct adapter *adapter, unsigned int viid, unsigned int nblinks)
{
  #line 1447 
  struct fw_vi_enable_cmd cmd;
  #line 1449 
  memset((void *)(& cmd),0,16UL);
  #line 1450 
  cmd.op_to_viid = __builtin_bswap32(viid | 395313152U);
  #line 1454 
  cmd.ien_to_len16 = 16777248U;
  #line 1456 
  cmd.blinkdur = __builtin_bswap16((unsigned short)((int)((unsigned short)nblinks)));
  #line 1457 
  return t4vf_wr_mbox(adapter,(void *)(& cmd),16,(void *)0);
}

#line 1473  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/t4vf_hw.c"
int t4vf_set_rxmode(struct adapter *adapter, unsigned int viid, int mtu, int promisc, int all_multi, int bcast, int vlanex, bool sleep_ok)
{
  #line 1477 
  struct fw_vi_rxmode_cmd cmd;
  #line 1480 
  if (mtu < 0) 
               #line 1481 
               mtu = 65535;
  #line 1482 
  if (promisc < 0) 
                   #line 1483 
                   promisc = 3;
  #line 1484 
  if (all_multi < 0) 
                     #line 1485 
                     all_multi = 3;
  #line 1486 
  if (bcast < 0) 
                 #line 1487 
                 bcast = 3;
  #line 1488 
  if (vlanex < 0) 
                  #line 1489 
                  vlanex = 3;
  #line 1491 
  memset((void *)(& cmd),0,16UL);
  #line 1492 
  cmd.op_to_viid = __builtin_bswap32(viid | 379584512U);
  #line 1496 
  cmd.retval_len16 = 16777216U;
  #line 1497 
  cmd.mtu_to_vlanexen = __builtin_bswap32((unsigned int)(((((mtu << 16) | (promisc << 14)) | (all_multi << 12)) | (bcast << 10)) | (vlanex << 8)));
  #line 1503 
  return t4vf_wr_mbox_core(adapter,(void *)(& cmd),16,(void *)0,
                        (_Bool)((bool)((int)sleep_ok) != 0));
}

#line 1527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/t4vf_hw.c"
int t4vf_alloc_mac_filt(struct adapter *adapter, unsigned int viid, bool free_0, unsigned int naddr, u8 **addr, u16 *idx, u64 *hash, bool sleep_ok)
{
  #line 1531 
  int offset;
  #line 1534 
  struct fw_vi_mac_cmd cmd;
  #line 1534 
  struct fw_vi_mac_cmd rpl;
  #line 1531 
  int ret = 0;
  #line 1532 
  unsigned int nfilters = 0U;
  #line 1533 
  unsigned int rem = naddr;
  #line 1535 
  unsigned int max_naddr = (unsigned int)adapter->params.arch.mps_tcam_size;
  #line 1537 
  if (naddr > max_naddr) 
                         #line 1538 
                         return -22;
  #line 1540 
  offset = 0;
  #line 1540 
  while ((unsigned int)offset < naddr) {
    #line 1541 
    unsigned int tmp;
    #line 1546 
    struct fw_vi_mac_exact *p;
    #line 1547 
    int i;
    #line 1550 
    unsigned int tmp_0;
    #line 1541 
    if (7U < rem) 
                  #line 1541 
                  tmp = 7U; else 
                                 #line 1541 
                                 tmp = rem;
    #line 1541 
    unsigned int fw_naddr = tmp;
    #line 1544 
    size_t len16 = (((unsigned long)fw_naddr + 3UL) * 8UL + 18446744073709551615UL) / 16UL;
    #line 1549 
    memset((void *)(& cmd),0,64UL);
    #line 1550 
    if ((int)free_0 != 0) 
                          #line 1550 
                          tmp_0 = 363855872U; else 
                                                   #line 1550 
                                                   tmp_0 = 362807296U;
    #line 1550 
    ;
    #line 1550 
    cmd.op_to_viid = __builtin_bswap32(tmp_0 | viid);
    #line 1555 
    cmd.freemacs_to_len16 = __builtin_bswap32((unsigned int)((int)free_0 << 31) | (unsigned int)len16);
    #line 1559 
    i = 0;
    #line 1559 
    p = (struct fw_vi_mac_exact *)(& cmd.u.exact);
    #line 1559 
    while ((unsigned int)i < fw_naddr) {
      #line 1560 
      p->valid_to_idx = (unsigned short)65411U;
      #line 1563 
      memcpy((void *)(& p->macaddr),(void *)*(addr + (unsigned long)(offset + i)),6UL);
      #line 1559 
      i ++;
      #line 1559 
      p ++;
    }
    #line 1567 
    ret = t4vf_wr_mbox_core(adapter,(void *)(& cmd),64,(void *)(& rpl),(_Bool)((bool)((int)sleep_ok) != 0));
    #line 1569 
    if (ret != 0 && ret != -12) 
                                #line 1570 
                                break;
    #line 1572 
    i = 0;
    #line 1572 
    p = (struct fw_vi_mac_exact *)(& rpl.u.exact);
    #line 1572 
    while ((unsigned int)i < fw_naddr) {
      {
        #line 1573 
        u16 index = (unsigned short)((unsigned int)__builtin_bswap16((unsigned short)((int)p->valid_to_idx)) & 1023U);
        #line 1576 
        if (idx != (u16 *)0U) 
          #line 1577 
          if ((unsigned int)index < max_naddr) 
                                               #line 1577 
                                               *(idx + (unsigned long)(offset + i)) = index; else 
                                                                    #line 1577 
                                                                    *(idx + (unsigned long)(offset + i)) = (unsigned short)65535U;
        #line 1581 
        if ((unsigned int)index < max_naddr) 
                                             #line 1582 
                                             nfilters ++;
        else 
          #line 1583 
          if (hash != (u64 *)0ULL) {
            #line 1584 
            *hash |= 1ULL << hash_mac_addr(*(addr + (unsigned long)(offset + i)));
          }
      }
      #line 1572 
      i ++;
      #line 1572 
      p ++;
    }
    #line 1587 
    free_0 = (_Bool)0;
    #line 1588 
    offset = (int)((unsigned int)offset + fw_naddr);
    #line 1589 
    rem -= fw_naddr;
  }
  #line 1596 
  if (ret == 0 || ret == -12) 
                              #line 1597 
                              ret = (int)nfilters;
  #line 1598 
  return ret;
}

#line 1613  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/t4vf_hw.c"
int t4vf_free_mac_filt(struct adapter *adapter, unsigned int viid, unsigned int naddr, u8 **addr, bool sleep_ok)
{
  #line 1616 
  int offset;
  #line 1617 
  struct fw_vi_mac_cmd cmd;
  #line 1616 
  int ret = 0;
  #line 1618 
  unsigned int nfilters = 0U;
  #line 1619 
  unsigned int max_naddr = (unsigned int)adapter->params.arch.mps_tcam_size;
  #line 1620 
  unsigned int rem = naddr;
  #line 1622 
  if (naddr > max_naddr) 
                         #line 1623 
                         return -22;
  #line 1625 
  offset = 0;
  #line 1625 
  while (offset < (int)naddr) {
    #line 1626 
    unsigned int tmp;
    #line 1630 
    struct fw_vi_mac_exact *p;
    #line 1631 
    int i;
    #line 1626 
    if (7U < rem) 
                  #line 1626 
                  tmp = 7U; else 
                                 #line 1626 
                                 tmp = rem;
    #line 1626 
    unsigned int fw_naddr = tmp;
    #line 1628 
    size_t len16 = (((unsigned long)fw_naddr + 3UL) * 8UL + 18446744073709551615UL) / 16UL;
    #line 1633 
    memset((void *)(& cmd),0,64UL);
    #line 1634 
    cmd.op_to_viid = __builtin_bswap32(viid | 362807296U);
    #line 1639 
    cmd.freemacs_to_len16 = __builtin_bswap32((unsigned int)len16);
    #line 1643 
    i = 0;
    #line 1643 
    p = (struct fw_vi_mac_exact *)(& cmd.u.exact);
    #line 1643 
    while (i < (int)fw_naddr) {
      #line 1644 
      p->valid_to_idx = (unsigned short)64899U;
      #line 1647 
      memcpy((void *)(& p->macaddr),(void *)*(addr + (unsigned long)(offset + i)),6UL);
      #line 1643 
      i ++;
      #line 1643 
      p ++;
    }
    #line 1650 
    ret = t4vf_wr_mbox_core(adapter,(void *)(& cmd),64,(void *)(& cmd),(_Bool)((bool)((int)sleep_ok) != 0));
    #line 1652 
    if (ret != 0) 
                  #line 1653 
                  break;
    #line 1655 
    i = 0;
    #line 1655 
    p = (struct fw_vi_mac_exact *)(& cmd.u.exact);
    #line 1655 
    while ((unsigned int)i < fw_naddr) {
      {
        #line 1656 
        u16 index = (unsigned short)((unsigned int)__builtin_bswap16((unsigned short)((int)p->valid_to_idx)) & 1023U);
        #line 1659 
        if ((unsigned int)index < max_naddr) 
                                             #line 1660 
                                             nfilters ++;
      }
      #line 1655 
      i ++;
      #line 1655 
      p ++;
    }
    #line 1663 
    offset = (int)((unsigned int)offset + fw_naddr);
    #line 1664 
    rem -= fw_naddr;
  }
  #line 1667 
  if (ret == 0) 
                #line 1668 
                ret = (int)nfilters;
  #line 1669 
  return ret;
}

#line 1690  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/t4vf_hw.c"
int t4vf_change_mac(struct adapter *adapter, unsigned int viid, int idx, u8 *addr, bool persist)
{
  #line 1693 
  int ret;
  #line 1694 
  struct fw_vi_mac_cmd cmd;
  #line 1694 
  struct fw_vi_mac_cmd rpl;
  #line 1695 
  struct fw_vi_mac_exact *p = & cmd.u.exact[0];
  #line 1696 
  size_t len16 = 1UL;
  #line 1698 
  unsigned int max_mac_addr = (unsigned int)adapter->params.arch.mps_tcam_size;
  #line 1704 
  if (idx < 0) 
    #line 1705 
    if ((int)persist != 0) 
                           #line 1705 
                           idx = 1022; else 
                                            #line 1705 
                                            idx = 1023;
  #line 1707 
  memset((void *)(& cmd),0,64UL);
  #line 1708 
  cmd.op_to_viid = __builtin_bswap32(viid | 362807296U);
  #line 1712 
  cmd.freemacs_to_len16 = __builtin_bswap32((unsigned int)len16);
  #line 1713 
  p->valid_to_idx = __builtin_bswap16((unsigned short)((int)((unsigned int)((unsigned short)idx) | 32768U)));
  #line 1715 
  memcpy((void *)(& p->macaddr),(void *)addr,6UL);
  #line 1717 
  ret = t4vf_wr_mbox(adapter,(void *)(& cmd),64,(void *)(& rpl));
  #line 1718 
  if (ret == 0) {
    #line 1719 
    p = & rpl.u.exact[0];
    #line 1720 
    ret = (int)__builtin_bswap16((unsigned short)((int)p->valid_to_idx)) & 1023;
    #line 1721 
    if ((unsigned int)ret >= max_mac_addr) 
                                           #line 1722 
                                           ret = -12;
  }
  #line 1724 
  return ret;
}

#line 1737  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/t4vf_hw.c"
int t4vf_set_addr_hash(struct adapter *adapter, unsigned int viid, bool ucast, u64 vec, bool sleep_ok)
{
  #line 1740 
  struct fw_vi_mac_cmd cmd;
  #line 1741 
  size_t len16 = 1UL;
  #line 1744 
  memset((void *)(& cmd),0,64UL);
  #line 1745 
  cmd.op_to_viid = __builtin_bswap32(viid | 362807296U);
  #line 1749 
  cmd.freemacs_to_len16 = __builtin_bswap32(((unsigned int)((int)ucast << 22) | (unsigned int)len16) | 8388608U);
  #line 1752 
  cmd.u.hash.hashvec = (__be64)__builtin_bswap64((unsigned long)vec);
  #line 1753 
  return t4vf_wr_mbox_core(adapter,(void *)(& cmd),64,(void *)0,
                          (_Bool)((bool)((int)sleep_ok) != 0));
}

#line 1764  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/t4vf_hw.c"
int t4vf_get_port_stats(struct adapter *adapter, int pidx, struct t4vf_port_stats *s)
{
  #line 1768 
  struct fw_vi_stats_vf fwstats;
  #line 1767 
  struct port_info *pi = adap2pinfo(adapter,pidx);
  #line 1769 
  unsigned int rem = 16U;
  #line 1770 
  __be64 *fwsp = (__be64 *)(& fwstats);
  #line 1777 
  while (rem != 0U) {
    #line 1779 
    unsigned int tmp_0;
    #line 1779 
    unsigned int __UNIQUE_ID___x445;
    #line 1780 
    struct fw_vi_stats_cmd cmd;
    #line 1780 
    struct fw_vi_stats_cmd rpl;
    #line 1784 
    int ret;
    #line 1778 
    unsigned int ix = 16U - rem;
    {
      #line 1779 
      __UNIQUE_ID___x445 = 6U;
      #line 1779 
      unsigned int __UNIQUE_ID___y446 = rem;
      #line 1779 
      if (__UNIQUE_ID___x445 < __UNIQUE_ID___y446) 
                                                   #line 1779 
                                                   tmp_0 = __UNIQUE_ID___x445; else 
                                                                    #line 1779 
                                                                    tmp_0 = __UNIQUE_ID___y446;
      }
    #line 1779 
    unsigned int nstats = tmp_0;
    #line 1781 
    size_t len = 64UL;
    #line 1783 
    size_t len16 = (len + 15UL) / 16UL;
    #line 1786 
    memset((void *)(& cmd),0,144UL);
    #line 1787 
    cmd.op_to_viid = __builtin_bswap32((unsigned int)pi->viid | 448790528U);
    #line 1791 
    cmd.retval_len16 = __builtin_bswap32((unsigned int)len16);
    #line 1792 
    cmd.u.ctl.nstats_ix = __builtin_bswap16((unsigned short)((int)((unsigned short)ix) | ((int)((unsigned short)nstats) << 12U)));
    #line 1795 
    ret = t4vf_wr_mbox_ns(adapter,(void *)(& cmd),(int)len,(void *)(& rpl));
    #line 1796 
    if (ret != 0) 
                  #line 1797 
                  return ret;
    #line 1799 
    memcpy((void *)fwsp,(void *)(& rpl.u.ctl.stat0),(unsigned long)nstats * 8UL);
    #line 1801 
    rem -= nstats;
    #line 1802 
    fwsp += (unsigned long)nstats;
  }
  #line 1808 
  s->tx_bcast_bytes = (u64)__builtin_bswap64((unsigned long)fwstats.tx_bcast_bytes);
  #line 1809 
  s->tx_bcast_frames = (u64)__builtin_bswap64((unsigned long)fwstats.tx_bcast_frames);
  #line 1810 
  s->tx_mcast_bytes = (u64)__builtin_bswap64((unsigned long)fwstats.tx_mcast_bytes);
  #line 1811 
  s->tx_mcast_frames = (u64)__builtin_bswap64((unsigned long)fwstats.tx_mcast_frames);
  #line 1812 
  s->tx_ucast_bytes = (u64)__builtin_bswap64((unsigned long)fwstats.tx_ucast_bytes);
  #line 1813 
  s->tx_ucast_frames = (u64)__builtin_bswap64((unsigned long)fwstats.tx_ucast_frames);
  #line 1814 
  s->tx_drop_frames = (u64)__builtin_bswap64((unsigned long)fwstats.tx_drop_frames);
  #line 1815 
  s->tx_offload_bytes = (u64)__builtin_bswap64((unsigned long)fwstats.tx_offload_bytes);
  #line 1816 
  s->tx_offload_frames = (u64)__builtin_bswap64((unsigned long)fwstats.tx_offload_frames);
  #line 1818 
  s->rx_bcast_bytes = (u64)__builtin_bswap64((unsigned long)fwstats.rx_bcast_bytes);
  #line 1819 
  s->rx_bcast_frames = (u64)__builtin_bswap64((unsigned long)fwstats.rx_bcast_frames);
  #line 1820 
  s->rx_mcast_bytes = (u64)__builtin_bswap64((unsigned long)fwstats.rx_mcast_bytes);
  #line 1821 
  s->rx_mcast_frames = (u64)__builtin_bswap64((unsigned long)fwstats.rx_mcast_frames);
  #line 1822 
  s->rx_ucast_bytes = (u64)__builtin_bswap64((unsigned long)fwstats.rx_ucast_bytes);
  #line 1823 
  s->rx_ucast_frames = (u64)__builtin_bswap64((unsigned long)fwstats.rx_ucast_frames);
  #line 1825 
  s->rx_err_frames = (u64)__builtin_bswap64((unsigned long)fwstats.rx_err_frames);
  #line 1827 
  return 0;
}

#line 1840  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/t4vf_hw.c"
int t4vf_iq_free(struct adapter *adapter, unsigned int iqtype, unsigned int iqid, unsigned int fl0id, unsigned int fl1id)
{
  #line 1843 
  struct fw_iq_cmd cmd;
  #line 1845 
  memset((void *)(& cmd),0,64UL);
  #line 1846 
  cmd.op_to_vfn = 36880U;
  #line 1849 
  cmd.alloc_to_len16 = 67108928U;
  #line 1851 
  cmd.type_to_iqandstindex = __builtin_bswap32(iqtype << 29);
  #line 1854 
  cmd.iqid = __builtin_bswap16((unsigned short)((int)((unsigned short)iqid)));
  #line 1855 
  cmd.fl0id = __builtin_bswap16((unsigned short)((int)((unsigned short)fl0id)));
  #line 1856 
  cmd.fl1id = __builtin_bswap16((unsigned short)((int)((unsigned short)fl1id)));
  #line 1857 
  return t4vf_wr_mbox(adapter,(void *)(& cmd),64,(void *)0);
}

#line 1867  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/t4vf_hw.c"
int t4vf_eth_eq_free(struct adapter *adapter, unsigned int eqid)
{
  #line 1869 
  struct fw_eq_eth_cmd cmd;
  #line 1871 
  memset((void *)(& cmd),0,48UL);
  #line 1872 
  cmd.op_to_vfn = 36882U;
  #line 1875 
  cmd.alloc_to_len16 = 50331712U;
  #line 1877 
  cmd.eqid_pkd = __builtin_bswap32(eqid);
  #line 1878 
  return t4vf_wr_mbox(adapter,(void *)(& cmd),48,(void *)0);
}

#line 1887  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/t4vf_hw.c"
static char *t4vf_link_down_rc_str(unsigned char link_down_rc)
{
  #line 1889 
  char *reason[8U] = {(char *)"Link Down", (char *)"Remote Fault", (char *)"Auto-negotiation Failure", (char *)"Reserved", (char *)"Insufficient Airflow", (char *)"Unable To Determine Reason", (char *)"No RX Signal Detected", (char *)"Reserved"};
  #line 1900 
  if ((unsigned int)link_down_rc > 7U) 
                                       #line 1901 
                                       return (char *)"Bad Reason Code";
  #line 1903 
  return reason[(int)link_down_rc];
}

#line 1913  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/t4vf_hw.c"
static void t4vf_handle_get_port_info(struct port_info *pi, struct fw_port_cmd *cmd)
{
  #line 1916 
  fw_port_cap32_t pcaps;
  #line 1916 
  fw_port_cap32_t acaps;
  #line 1916 
  fw_port_cap32_t lpacaps;
  #line 1916 
  fw_port_cap32_t linkattr;
  #line 1919 
  unsigned int speed;
  #line 1919 
  unsigned int fc;
  #line 1919 
  unsigned int fec;
  #line 1919 
  unsigned int adv_fc;
  #line 1920 
  enum fw_port_module_type mod_type;
  #line 1921 
  int action;
  #line 1921 
  int link_ok;
  #line 1921 
  int linkdnrc;
  #line 1922 
  enum fw_port_type port_type;
  #line 1917 
  struct link_config *lc = & pi->link_cfg;
  #line 1918 
  struct adapter *adapter = pi->adapter;
  #line 1925 
  action = (int)(__builtin_bswap32(cmd->action_to_len16) >> 16);
  #line 1926 
  switch (action) {
    #line 1927 
    case 3: 
            #line 1927 
    ;
    {
      #line 1928 
      u32 lstatus = __builtin_bswap32(cmd->u.info.lstatus_to_modtype);
      #line 1930 
      link_ok = (lstatus & 2147483648U) != 0U;
      #line 1931 
      linkdnrc = (int)(lstatus >> 5) & 7;
      #line 1932 
      port_type = (enum fw_port_type)((lstatus >> 8) & 31U);
      #line 1933 
      mod_type = (enum fw_port_module_type)(lstatus & 31U);
      #line 1934 
      pcaps = fwcaps16_to_caps32((unsigned short)((int)__builtin_bswap16((unsigned short)((int)cmd->u.info.pcap))));
      #line 1935 
      acaps = fwcaps16_to_caps32((unsigned short)((int)__builtin_bswap16((unsigned short)((int)cmd->u.info.acap))));
      #line 1936 
      lpacaps = fwcaps16_to_caps32((unsigned short)((int)__builtin_bswap16((unsigned short)((int)cmd->u.info.lpacap))));
      #line 1942 
      linkattr = 0U;
      #line 1943 
      if ((lstatus & 4194304U) != 0U) 
                                      #line 1944 
                                      linkattr |= 65536U;
      #line 1945 
      if ((lstatus & 8388608U) != 0U) 
                                      #line 1946 
                                      linkattr |= 131072U;
      #line 1947 
      if ((lstatus & 16777216U) != 0U) 
                                       #line 1948 
                                       linkattr |= 1U;
      #line 1949 
      if ((lstatus & 33554432U) != 0U) 
                                       #line 1950 
                                       linkattr |= 2U;
      #line 1951 
      if ((lstatus & 134217728U) != 0U) 
                                        #line 1952 
                                        linkattr |= 4U;
      #line 1953 
      if ((lstatus & 67108864U) != 0U) 
                                       #line 1954 
                                       linkattr |= 8U;
      #line 1955 
      if ((lstatus & 268435456U) != 0U) 
                                        #line 1956 
                                        linkattr |= 16U;
      #line 1957 
      if ((lstatus & 536870912U) != 0U) 
                                        #line 1958 
                                        linkattr |= 64U;
      #line 1960 
      break;
    }
    #line 1963 
    case 10: 
             #line 1963 
    ;
    {
      #line 1964 
      u32 lstatus32;
      #line 1966 
      lstatus32 = __builtin_bswap32(cmd->u.info32.lstatus32_to_cbllen32);
      #line 1967 
      link_ok = (lstatus32 & 2147483648U) != 0U;
      #line 1968 
      linkdnrc = (int)(lstatus32 >> 28) & 7;
      #line 1969 
      port_type = (enum fw_port_type)((lstatus32 >> 13) & 255U);
      #line 1970 
      mod_type = (enum fw_port_module_type)((lstatus32 >> 8) & 31U);
      #line 1971 
      pcaps = __builtin_bswap32(cmd->u.info32.pcaps32);
      #line 1972 
      acaps = __builtin_bswap32(cmd->u.info32.acaps32);
      #line 1973 
      lpacaps = __builtin_bswap32(cmd->u.info32.lpacaps32);
      #line 1974 
      linkattr = __builtin_bswap32(cmd->u.info32.linkattr32);
      #line 1975 
      break;
    }
    #line 1978 
    default: 
             #line 1978 
    ;
    #line 1979 
    ;
    #line 1979 
    _dev_err(adapter->pdev_dev,(char *)"Handle Port Information: Bad Command/Action %#x\n",__builtin_bswap32(cmd->action_to_len16));
    #line 1981 
    return;
  }
  #line 1984 
  fec = (unsigned int)fwcap_to_cc_fec(acaps);
  #line 1985 
  adv_fc = (unsigned int)fwcap_to_cc_pause(acaps);
  #line 1986 
  fc = (unsigned int)fwcap_to_cc_pause(linkattr);
  #line 1987 
  speed = fwcap_to_speed(linkattr);
  #line 1989 
  if ((unsigned int)pi->mod_type != (unsigned int)mod_type) {
    #line 1997 
    lc->auto_fec = (enum cc_fec)fec;
    #line 2009 
    pi->port_type = (unsigned char)port_type;
    #line 2011 
    pi->mod_type = (unsigned char)mod_type;
    #line 2012 
    t4vf_os_portmod_changed(adapter,(int)pi->pidx);
  }
  #line 2015 
  if (((((int)lc->link_ok != link_ok || lc->speed != speed) || (unsigned int)lc->fc != fc) || (unsigned int)lc->advertised_fc != adv_fc) || (unsigned int)lc->fec != fec) {
    #line 2019 
    if (link_ok == 0 && (unsigned int)lc->link_ok != 0U) {
      #line 2020 
      lc->link_down_rc = (unsigned char)linkdnrc;
      {
        #line 2021 
        struct ratelimit_state _rs = {.lock = {.raw_lock = {.__anonCompField_qspinlock_9 = {.val = {.counter = 0}}}, .magic = 3735899821U, .owner_cpu = 4294967295U, .owner = (void *)(-1), .dep_map = {.key = (struct lock_class_key *)0, .class_cache = {(struct lock_class *)0, (struct lock_class *)0}, .name = (char *)"_rs.lock", .cpu = 0, .ip = 0UL}}, .interval = 1250, .burst = 10, .printed = 0, .missed = 0, .begin = 0UL, .flags = 0UL};
        #line 2021 
        if (___ratelimit(& _rs,(char *)"t4vf_handle_get_port_info") != 0) {
          #line 2021 
          ;
          #line 2021 
          ;
          #line 2021 
          _dev_warn(adapter->pdev_dev,(char *)"Port %d link down, reason: %s\n",(int)pi->port_id,t4vf_link_down_rc_str((unsigned char)((int)((unsigned char)linkdnrc))));
        }
      }
    }
    #line 2026 
    lc->link_ok = (unsigned char)link_ok;
    #line 2027 
    lc->speed = speed;
    #line 2028 
    lc->advertised_fc = (enum cc_pause)adv_fc;
    #line 2029 
    lc->fc = (enum cc_pause)fc;
    #line 2030 
    lc->fec = (enum cc_fec)fec;
    #line 2032 
    lc->pcaps = pcaps;
    #line 2033 
    lc->lpacaps = lpacaps;
    #line 2034 
    lc->acaps = acaps & 261885951U;
    #line 2041 
    if (((unsigned long)lc->pcaps & 1048576UL) == 0UL) 
                                                       #line 2042 
                                                       lc->autoneg = (unsigned char)0U;
    else 
      #line 2043 
      if (((unsigned long)lc->acaps & 1048576UL) != 0UL) 
                                                         #line 2044 
                                                         lc->autoneg = (unsigned char)1U;
      else {
        #line 2050 
        lc->acaps = 0U;
        #line 2051 
        lc->speed_caps = fwcap_to_speed(acaps);
        #line 2052 
        lc->autoneg = (unsigned char)0U;
      }
    #line 2055 
    t4vf_os_link_changed(adapter,(int)pi->pidx,link_ok);
  }
  #line 2057 
  return;
}

#line 2067  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/t4vf_hw.c"
int t4vf_update_port_info(struct port_info *pi)
{
  #line 2070 
  struct fw_port_cmd port_cmd;
  #line 2071 
  int ret;
  #line 2077 
  unsigned int tmp;
  #line 2069 
  unsigned int fw_caps = (unsigned int)(pi->adapter)->params.fw_caps_support;
  #line 2073 
  memset((void *)(& port_cmd),0,32UL);
  #line 2074 
  port_cmd.op_to_portid = __builtin_bswap32((unsigned int)pi->port_id | 465567744U);
  #line 2077 
  if (fw_caps == 1U) 
                     #line 2077 
                     tmp = 196610U; else 
                                         #line 2077 
                                         tmp = 655362U;
  #line 2077 
  port_cmd.action_to_len16 = __builtin_bswap32(tmp);
  #line 2082 
  ret = t4vf_wr_mbox(pi->adapter,(void *)(& port_cmd),32,(void *)(& port_cmd));
  #line 2084 
  if (ret != 0) 
                #line 2085 
                return ret;
  #line 2086 
  t4vf_handle_get_port_info(pi,& port_cmd);
  #line 2087 
  return 0;
}

#line 2097  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/t4vf_hw.c"
int t4vf_handle_fw_rpl(struct adapter *adapter, __be64 *rpl)
{
  #line 2099 
  struct fw_cmd_hdr *cmd_hdr = (struct fw_cmd_hdr *)rpl;
  #line 2100 
  u8 opcode = (unsigned char)(__builtin_bswap32(cmd_hdr->hi) >> 24);
  #line 2102 
  switch ((int)opcode) {
    #line 2103 
    case 27: 
             #line 2103 
    ;
    {
      #line 2111 
      int port_id;
      #line 2111 
      int pidx;
      #line 2107 
      struct fw_port_cmd *port_cmd = (struct fw_port_cmd *)rpl;
      #line 2109 
      int action = (int)(__builtin_bswap32(port_cmd->action_to_len16) >> 16);
      #line 2113 
      if (action != 3 && action != 10) {
        #line 2115 
        _dev_err(adapter->pdev_dev,(char *)"Unknown firmware PORT reply action %x\n",action);
        #line 2118 
        break;
      }
      #line 2121 
      port_id = (int)__builtin_bswap32(port_cmd->op_to_portid) & 15;
      #line 2123 
      pidx = 0;
      #line 2123 
      while ((int)adapter->params.nports > pidx) {
        {
          #line 2124 
          struct port_info *pi = adap2pinfo(adapter,pidx);
          #line 2126 
          if ((int)pi->port_id != port_id) 
                                           #line 2127 
                                           goto __Cont;
          #line 2128 
          t4vf_handle_get_port_info(pi,port_cmd);
        }
        #line 2123 
        __Cont: 
                #line 2123 
        pidx ++;
      }
      #line 2130 
      break;
    }
    #line 2133 
    default: 
             #line 2133 
    ;
    #line 2134 
    _dev_err(adapter->pdev_dev,(char *)"Unknown firmware reply %X\n",(int)opcode);
  }
  #line 2137 
  return 0;
}

#line 2142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/t4vf_hw.c"
int t4vf_prep_adapter(struct adapter *adapter)
{
  #line 2144 
  int err;
  #line 2145 
  unsigned int chipid;
  #line 2149 
  err = t4vf_wait_dev_ready(adapter);
  #line 2150 
  if (err != 0) 
                #line 2151 
                return err;
  #line 2156 
  adapter->params.nports = (unsigned char)1U;
  #line 2157 
  adapter->params.vfres.pmask = 1U;
  #line 2158 
  adapter->params.vpd.cclk = 50000U;
  #line 2160 
  adapter->params.chip = (enum chip_type)0;
  #line 2161 
  switch ((int)(adapter->pdev)->device >> 12) {
    #line 2162 
    case 4: 
            #line 2162 
    ;
    #line 2163 
    adapter->params.chip = (enum chip_type)((unsigned int)adapter->params.chip | 64U);
    #line 2164 
    adapter->params.arch.sge_fl_db = 16384U;
    #line 2165 
    adapter->params.arch.mps_tcam_size = (unsigned short)336U;
    #line 2167 
    break;
    #line 2169 
    case 5: 
            #line 2169 
    ;
    #line 2170 
    chipid = t4_read_reg(adapter,4U) & 15U;
    #line 2171 
    adapter->params.chip = (enum chip_type)(((unsigned int)adapter->params.chip | chipid) | 80U);
    #line 2172 
    adapter->params.arch.sge_fl_db = 24576U;
    #line 2173 
    adapter->params.arch.mps_tcam_size = (unsigned short)512U;
    #line 2175 
    break;
    #line 2177 
    case 6: 
            #line 2177 
    ;
    #line 2178 
    chipid = t4_read_reg(adapter,4U) & 15U;
    #line 2179 
    adapter->params.chip = (enum chip_type)(((unsigned int)adapter->params.chip | chipid) | 96U);
    #line 2180 
    adapter->params.arch.sge_fl_db = 0U;
    #line 2181 
    adapter->params.arch.mps_tcam_size = (unsigned short)512U;
    #line 2183 
    break;
  }
  #line 2186 
  return 0;
}

#line 2200  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/t4vf_hw.c"
int t4vf_get_vf_mac_acl(struct adapter *adapter, unsigned int pf, unsigned int *naddr, u8 *addr)
{
  #line 2203 
  struct fw_acl_mac_cmd cmd;
  #line 2204 
  int ret;
  #line 2206 
  memset((void *)(& cmd),0,48UL);
  #line 2207 
  cmd.op_to_vfn = 49176U;
  #line 2210 
  cmd.en_to_len16 = 50331648U;
  #line 2211 
  ret = t4vf_wr_mbox(adapter,(void *)(& cmd),48,(void *)(& cmd));
  #line 2212 
  if (ret != 0) 
                #line 2213 
                return ret;
  #line 2215 
  if ((unsigned int)cmd.nmac < *naddr) 
                                       #line 2216 
                                       *naddr = (unsigned int)cmd.nmac;
  #line 2218 
  switch (pf) {
    #line 2219 
    case (unsigned int)3: 
                          #line 2219 
    ;
    #line 2220 
    memcpy((void *)addr,(void *)(& cmd.macaddr3),6UL);
    #line 2221 
    break;
    #line 2222 
    case (unsigned int)2: 
                          #line 2222 
    ;
    #line 2223 
    memcpy((void *)addr,(void *)(& cmd.macaddr2),6UL);
    #line 2224 
    break;
    #line 2225 
    case (unsigned int)1: 
                          #line 2225 
    ;
    #line 2226 
    memcpy((void *)addr,(void *)(& cmd.macaddr1),6UL);
    #line 2227 
    break;
    #line 2228 
    case (unsigned int)0: 
                          #line 2228 
    ;
    #line 2229 
    memcpy((void *)addr,(void *)(& cmd.macaddr0),6UL);
    #line 2230 
    break;
  }
  #line 2233 
  return ret;
}

#line 2244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/chelsio/cxgb4vf/t4vf_hw.c"
int t4vf_get_vf_vlan_acl(struct adapter *adapter)
{
  #line 2246 
  struct fw_acl_vlan_cmd cmd;
  #line 2247 
  int vlan = 0;
  #line 2248 
  int ret = 0;
  #line 2250 
  cmd.op_to_vfn = 49177U;
  #line 2254 
  cmd.en_to_len16 = 50331648U;
  #line 2256 
  ret = t4vf_wr_mbox(adapter,(void *)(& cmd),48,(void *)(& cmd));
  #line 2258 
  if (ret == 0) {
    #line 2259 
    vlan = (int)__builtin_bswap16((unsigned short)((int)cmd.vlanid[0]));
  }
  #line 2261 
  return vlan;
}

#line 649  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/0/concurrency safety/weaver/t4vf_hw.i.aux"
static void cif_spin_lock_mbox_lock_of_adapter(spinlock_t *lock)
{
  #line 652 
  ldv_spin_model_lock((char *)"mbox_lock_of_adapter");
  #line 654 
  spin_lock_1(lock);
  #line 655 
  return;
}

#line 658  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/0/concurrency safety/weaver/t4vf_hw.i.aux"
static void cif_spin_unlock_mbox_lock_of_adapter(spinlock_t *lock)
{
  #line 661 
  ldv_spin_model_unlock((char *)"mbox_lock_of_adapter");
  #line 663 
  spin_unlock_1(lock);
  #line 664 
  return;
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/common/inline_asm.c"
void ldv_inline_asm(void)
{
  #line 24 
  return;
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_add(int i, atomic_t *v)
{
  #line 22 
  v->counter += i;
  #line 23 
  return;
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_sub(int i, atomic_t *v)
{
  #line 27 
  v->counter -= i;
  #line 28 
  return;
}

#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_sub_and_test(int i, atomic_t *v)
{
  #line 32 
  v->counter -= i;
  #line 33 
  if (v->counter != 0) 
                       #line 34 
                       return 0;
  #line 36 
  return 1;
}

#line 39  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_inc(atomic_t *v)
{
  #line 41 
  (v->counter) ++;
  #line 42 
  return;
}

#line 44  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_dec(atomic_t *v)
{
  #line 46 
  (v->counter) --;
  #line 47 
  return;
}

#line 49  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_dec_and_test(atomic_t *v)
{
  #line 51 
  (v->counter) --;
  #line 52 
  if (v->counter != 0) 
                       #line 53 
                       return 0;
  #line 55 
  return 1;
}

#line 58  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_inc_and_test(atomic_t *v)
{
  #line 60 
  (v->counter) ++;
  #line 61 
  if (v->counter != 0) 
                       #line 62 
                       return 0;
  #line 64 
  return 1;
}

#line 67  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_add_return(int i, atomic_t *v)
{
  #line 69 
  v->counter += i;
  #line 70 
  return v->counter;
}

#line 73  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_add_negative(int i, atomic_t *v)
{
  #line 75 
  v->counter += i;
  #line 76 
  return v->counter < 0;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_inc_short(short *v)
{
  #line 81 
  *v = (short)((unsigned int)*v + 1U);
  #line 82 
  return (int)*v;
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/current.c"
static struct task_struct ldv_current;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/current.c"
struct task_struct *ldv_get_current(void)
{
  #line 28 
  ldv_current.pid = 1;
  #line 29 
  return & ldv_current;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_interrupt_context(void);
#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_process_context(void);
#line 50  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
bool ldv_in_interrupt_context(void);
#line 112  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_init(int init_ret_val);
#line 132  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_probe(int probe_ret_val);
#line 133  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 133 
void ldv_check_return_value_probe(int);
#line 141 
#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_filter_err_code(int ret_val);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
#line 23 
void __VERIFIER_assume(int);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
static bool __ldv_in_interrupt_context = (_Bool)0;
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_interrupt_context(void)
{
  #line 31 
  __ldv_in_interrupt_context = (_Bool)1;
  #line 32 
  return;
}

#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_process_context(void)
{
  #line 37 
  __ldv_in_interrupt_context = (_Bool)0;
  #line 38 
  return;
}

#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
bool ldv_in_interrupt_context(void)
{
  #line 42 
  return __ldv_in_interrupt_context;
}

#line 45  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
static int ldv_filter_positive_int(int val)
{
  #line 47 
  __VERIFIER_assume(val <= 0);
  #line 48 
  return val;
}

#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_init(int init_ret_val)
{
  #line 57 
  return ldv_filter_positive_int(init_ret_val);
}

#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_probe(int probe_ret_val)
{
  #line 63 
  ldv_check_return_value_probe(probe_ret_val);
  #line 64 
  return ldv_filter_positive_int(probe_ret_val);
}

#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_filter_err_code(int ret_val)
{
  #line 70 
  return ldv_filter_positive_int(ret_val);
}

#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/common/list.h"
#line 28 
void ldv_save_allocated_memory_to_list(void *);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
void *ldv_dev_get_drvdata(struct device *dev);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
int ldv_dev_set_drvdata(struct device *dev, void *data);
#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 57 
void *ldv_xzalloc(size_t size);
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
void *ldv_dev_get_drvdata(struct device *dev)
{
  #line 31 
  if (dev != (struct device *)0 && dev->p != (struct device_private *)0) 
    #line 32 
    return (dev->p)->driver_data;
  #line 34 
  return (void *)0;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
int ldv_dev_set_drvdata(struct device *dev, void *data)
{
  #line 45 
  dev->p = (struct device_private *)ldv_xzalloc(8UL);
  #line 46 
  ldv_save_allocated_memory_to_list((void *)dev->p);
  #line 47 
  (dev->p)->driver_data = data;
  #line 49 
  return 0;
}

#line 156  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 156 
void ldv_check_alloc_flags(gfp_t);
#line 48  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 48 
void *ldv_malloc(size_t size);
#line 49 
#line 49 
void *ldv_calloc(size_t nmemb, size_t size);
#line 50 
#line 50 
void *ldv_zalloc(size_t size);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kmalloc(size_t size, gfp_t flags)
{
  #line 26 
  void *res;
  #line 28 
  ldv_check_alloc_flags(flags);
  #line 29 
  res = ldv_malloc(size);
  #line 30 
  ldv_save_allocated_memory_to_list(res);
  #line 32 
  return res;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kzalloc(size_t size, gfp_t flags)
{
  #line 37 
  void *res;
  #line 39 
  ldv_check_alloc_flags(flags);
  #line 40 
  res = ldv_zalloc(size);
  #line 41 
  ldv_save_allocated_memory_to_list(res);
  #line 43 
  return res;
}

#line 46  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kmalloc_array(size_t n, size_t size, gfp_t flags)
{
  #line 48 
  void *res;
  #line 50 
  ldv_check_alloc_flags(flags);
  #line 51 
  res = ldv_malloc(n * size);
  #line 52 
  ldv_save_allocated_memory_to_list(res);
  #line 54 
  return res;
}

#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kcalloc(size_t n, size_t size, gfp_t flags)
{
  #line 59 
  void *res;
  #line 61 
  ldv_check_alloc_flags(flags);
  #line 62 
  res = ldv_calloc(n,size);
  #line 63 
  ldv_save_allocated_memory_to_list(res);
  #line 65 
  return res;
}

#line 51  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 51 
void ldv_free(void *s);
#line 59 
#line 59 
void *ldv_malloc_unknown_size(void);
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 31 
int ldv_undef_int_positive(void);
#line 40 
#line 40 
int ldv_undef_int_nonpositive(void);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/firmware_loader.c"
int ldv_request_firmware(struct firmware **fw)
{
  #line 27 
  int retval;
  #line 26 
  struct firmware *_fw = (struct firmware *)0;
  #line 29 
  retval = ldv_undef_int_nonpositive();
  #line 31 
  if (retval == 0) {
    #line 33 
    _fw = (struct firmware *)ldv_xzalloc(32UL);
    #line 34 
    _fw->data = (u8 *)ldv_malloc_unknown_size();
    #line 35 
    __VERIFIER_assume(_fw->data != (u8 *)0U);
    #line 36 
    _fw->size = (unsigned long)ldv_undef_int_positive();
  }
  #line 39 
  *fw = _fw;
  #line 41 
  return retval;
}

#line 44  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/firmware_loader.c"
void ldv_release_firmware(struct firmware *fw)
{
  #line 46 
  if (fw != (struct firmware *)0) {
    #line 48 
    ldv_free((void *)fw->data);
    #line 49 
    ldv_free((void *)fw);
  }
  #line 51 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/i2c.h"
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/i2c/i2c-core-smbus.c"
s32 ldv_i2c_smbus_read_block_data(u8 *values);
#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 55 
void *ldv_xmalloc(size_t size);
#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 34 
int ldv_undef_int_negative(void);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/i2c/i2c-core-smbus.c"
s32 ldv_i2c_smbus_read_block_data(u8 *values)
{
  #line 27 
  __u8 size;
  #line 28 
  char *bytes;
  #line 30 
  if (ldv_undef_int() != 0) {
    #line 33 
    size = (unsigned char)ldv_undef_int_positive();
    #line 35 
    __VERIFIER_assume((unsigned int)size <= 32U);
    #line 37 
    bytes = (char *)ldv_xmalloc((unsigned long)size);
    #line 39 
    memcpy((void *)values,(void *)bytes,(unsigned long)size);
    #line 40 
    ldv_free((void *)bytes);
    #line 42 
    return (int)size;
  }
  else {
    #line 46 
    return ldv_undef_int_negative();
  }
}

#line 988  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
__inline static void v4l2_set_subdevdata(struct v4l2_subdev *sd, void *p)
{
  #line 990 
  sd->dev_priv = p;
  #line 991 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/media/v4l2-common.h"
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/media/v4l2-core/v4l2-i2c.c"
void ldv_v4l2_i2c_subdev_init(struct v4l2_subdev *sd, struct i2c_client *client, struct v4l2_subdev_ops *ops);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/media/v4l2-core/v4l2-i2c.c"
void ldv_v4l2_i2c_subdev_init(struct v4l2_subdev *sd, struct i2c_client *client, struct v4l2_subdev_ops *ops)
{
  #line 26 
  sd->ops = ops;
  #line 27 
  v4l2_set_subdevdata(sd,(void *)client);
  #line 28 
  ldv_dev_set_drvdata(& client->dev,(void *)sd);
  #line 29 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/spi.c"
struct spi_controller *ldv_spi_alloc_master(struct device *host, unsigned int size)
{
  #line 25 
  struct spi_controller *master;
  #line 27 
  master = (struct spi_controller *)ldv_zalloc((unsigned long)size + 2936UL);
  #line 29 
  if (master == (struct spi_controller *)0) 
                                            #line 30 
                                            return (struct spi_controller *)0;
  #line 32 
  ldv_dev_set_drvdata(& master->dev,(void *)(master + 1U));
  #line 34 
  return master;
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/fb.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
struct fb_info *ldv_framebuffer_alloc(size_t size);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/fb.h"
#line 38  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
void ldv_framebuffer_release(struct fb_info *info);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
struct fb_info *ldv_framebuffer_alloc(size_t size)
{
  #line 25 
  struct fb_info *info;
  #line 27 
  info = (struct fb_info *)ldv_zalloc(size + 1568UL);
  #line 29 
  if (info == (struct fb_info *)0) 
                                   #line 30 
                                   return (struct fb_info *)0;
  #line 32 
  if (size != 0UL) 
                   #line 33 
                   info->par = (void *)((char *)info + 1568UL);
  #line 35 
  return info;
}

#line 38  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
void ldv_framebuffer_release(struct fb_info *info)
{
  #line 40 
  if (info == (struct fb_info *)0) 
                                   #line 41 
                                   return;
  #line 44 
  ldv_free((void *)info->apertures);
  #line 46 
  ldv_free((void *)info);
  #line 47 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err(void *ptr);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
void *ldv_err_ptr(long error);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
long ldv_ptr_err(void *ptr);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err(void *ptr)
{
  #line 29 
  if ((unsigned long)ptr > 18446744073709547520UL) 
                                                   #line 30 
                                                   return (_Bool)1; else 
                                                                    #line 32 
                                                                    return (_Bool)0;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
void *ldv_err_ptr(long error)
{
  #line 37 
  unsigned long result;
  #line 39 
  __VERIFIER_assume(error < 0L);
  #line 40 
  __VERIFIER_assume(error >= -4095L);
  #line 41 
  result = 18446744073709547520UL - (unsigned long)error;
  #line 42 
  __VERIFIER_assume(result > 18446744073709547520UL);
  #line 44 
  return (void *)result;
}

#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
long ldv_ptr_err(void *ptr)
{
  #line 49 
  long result;
  #line 51 
  __VERIFIER_assume((unsigned long)ptr > 18446744073709547520UL);
  #line 52 
  result = (long)(18446744073709547520UL - (unsigned long)ptr);
  #line 53 
  __VERIFIER_assume(result < 0L);
  #line 54 
  __VERIFIER_assume(result >= -4095L);
  #line 56 
  return result;
}

#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err_or_null(void *ptr)
{
  #line 61 
  int tmp_0;
  #line 61 
  if (ptr == (void *)0) 
                        #line 61 
                        tmp_0 = 1;
  else {
    #line 61 
    if ((int)ldv_is_err(ptr) != 0) 
                                   #line 61 
                                   tmp_0 = 1; else 
                                                   #line 61 
                                                   tmp_0 = 0;
  }
  #line 61 
  return (_Bool)(tmp_0 != 0);
}

#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/panic.h"
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/kernel/panic.c"
void ldv_panic(void);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/kernel/panic.c"
void ldv_panic(void)
{
  #line 23 
  __VERIFIER_assume(0);
  #line 24 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_set(unsigned long *map, unsigned int start, int nbits);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_clear(unsigned long *map, unsigned int start, int nbits);
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 78  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
unsigned long ldv_bitmap_find_next_zero_area(unsigned long *map, unsigned long size, unsigned long start, unsigned int nr, unsigned long align_mask);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 22 
unsigned long ldv_find_next_bit(unsigned long *addr, unsigned long size, unsigned long offset);
#line 23 
#line 23 
unsigned long ldv_find_next_zero_bit(unsigned long *addr, unsigned long size, unsigned long offset);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_set_bit(long nr, unsigned long *addr)
{
  #line 24 
  *(addr + (unsigned long)nr / 64UL) |= 1UL << ((unsigned long)nr & 63UL);
  #line 25 
  return;
}

#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_clear_bit(long nr, unsigned long *addr)
{
  #line 29 
  *(addr + (unsigned long)nr / 64UL) &= ~ (1UL << ((unsigned long)nr & 63UL));
  #line 30 
  return;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_set(unsigned long *map, unsigned int start, int nbits)
{
  #line 34 
  unsigned long *p = map + (unsigned long)(start / 64U);
  #line 35 
  unsigned int size = start + (unsigned int)nbits;
  #line 36 
  int bits_to_set = (int)(64U - (start & 63U));
  #line 37 
  unsigned long mask_to_set = 18446744073709551615UL << ((unsigned long)start & 63UL);
  #line 39 
  while (nbits - bits_to_set >= 0) {
    #line 40 
    *p |= mask_to_set;
    #line 41 
    nbits -= bits_to_set;
    #line 42 
    bits_to_set = 64;
    #line 43 
    mask_to_set = 18446744073709551615UL;
    #line 44 
    p ++;
  }
  #line 46 
  if (nbits != 0) {
    #line 47 
    mask_to_set = (18446744073709551615UL >> ((unsigned long)(- size) & 63UL)) & mask_to_set;
    #line 48 
    *p |= mask_to_set;
  }
  #line 50 
  return;
}

#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_clear(unsigned long *map, unsigned int start, int nbits)
{
  #line 54 
  unsigned long *p = map + (unsigned long)(start / 64U);
  #line 55 
  unsigned int size = start + (unsigned int)nbits;
  #line 56 
  int bits_to_clear = (int)(64U - (start & 63U));
  #line 57 
  unsigned long mask_to_clear = 18446744073709551615UL << ((unsigned long)start & 63UL);
  #line 59 
  while (nbits - bits_to_clear >= 0) {
    #line 60 
    *p &= ~ mask_to_clear;
    #line 61 
    nbits -= bits_to_clear;
    #line 62 
    bits_to_clear = 64;
    #line 63 
    mask_to_clear = 18446744073709551615UL;
    #line 64 
    p ++;
  }
  #line 66 
  if (nbits != 0) {
    #line 67 
    mask_to_clear = (18446744073709551615UL >> ((unsigned long)(- size) & 63UL)) & mask_to_clear;
    #line 68 
    *p &= ~ mask_to_clear;
  }
  #line 70 
  return;
}

#line 72  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_zero(unsigned long *dst, unsigned int nbits)
{
  #line 74 
  unsigned int len = (unsigned int)(((unsigned long)nbits + 63UL) / 64UL) * 8U;
  #line 75 
  memset((void *)dst,0,(unsigned long)len);
  #line 76 
  return;
}

#line 78  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
unsigned long ldv_bitmap_find_next_zero_area(unsigned long *map, unsigned long size, unsigned long start, unsigned int nr, unsigned long align_mask)
{
  #line 80 
  unsigned long index;
  #line 80 
  unsigned long end;
  #line 80 
  unsigned long i;
  #line 82 
  again: 
         #line 82 
  ;
  #line 83 
  index = ldv_find_next_zero_bit(map,size,start);
  #line 84 
  index = (index + align_mask) & ~ align_mask;
  #line 85 
  end = (unsigned long)nr + index;
  #line 87 
  if (end > size) 
                  #line 88 
                  return end;
  #line 90 
  i = ldv_find_next_bit(map,end,index);
  #line 92 
  if (i < end) {
    #line 93 
    start = i + 1UL;
    #line 94 
    goto again;
  }
  #line 97 
  return index;
}

#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_first_bit(unsigned long *addr, unsigned long size);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 25 
void ldv_check_find_bit_offset(unsigned long, unsigned long);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_ffs(unsigned long word)
{
  #line 23 
  int num = 0;
  #line 25 
  if ((word & 4294967295UL) == 0UL) {
    #line 26 
    num += 32;
    #line 27 
    word >>= 32;
  }
  #line 29 
  if ((word & 65535UL) == 0UL) {
    #line 30 
    num += 16;
    #line 31 
    word >>= 16;
  }
  #line 33 
  if ((word & 255UL) == 0UL) {
    #line 34 
    num += 8;
    #line 35 
    word >>= 8;
  }
  #line 37 
  if ((word & 15UL) == 0UL) {
    #line 38 
    num += 4;
    #line 39 
    word >>= 4;
  }
  #line 41 
  if ((word & 3UL) == 0UL) {
    #line 42 
    num += 2;
    #line 43 
    word >>= 2;
  }
  #line 45 
  if ((word & 1UL) == 0UL) 
                           #line 46 
                           num ++;
  #line 48 
  return (unsigned long)num;
}

#line 51  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_min(unsigned long a, unsigned long b)
{
  #line 53 
  if (a < b) 
             #line 54 
             return a;
  #line 56 
  return b;
}

#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_restrict_find_bit_res(unsigned long res, unsigned long size)
{
  #line 62 
  __VERIFIER_assume(1);
  #line 63 
  __VERIFIER_assume(res <= size);
  #line 65 
  return res;
}

#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_first_bit(unsigned long *addr, unsigned long size)
{
  #line 70 
  unsigned long i;
  #line 72 
  i = 0UL;
  #line 72 
  while (i * 64UL < size) {
    #line 73 
    if (*(addr + i) != 0UL) {
      #line 74 
      ;
      #line 74 
      ;
      #line 74 
      ;
      #line 74 
      return ldv_restrict_find_bit_res(ldv_min(i * 64UL + ldv_ffs(*(addr + i)),size),
                                  size);
    }
    #line 72 
    i ++;
  }
  #line 76 
  return size;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_next_bit(unsigned long *addr, unsigned long size, unsigned long offset)
{
  #line 81 
  unsigned long tmp;
  #line 83 
  ldv_check_find_bit_offset(size,offset);
  #line 85 
  tmp = *(addr + offset / 64UL);
  #line 86 
  tmp = (unsigned long)((18446744073709551615ULL << (offset & 63UL)) & (unsigned long long)tmp);
  #line 87 
  offset &= 18446744073709551552UL;
  #line 89 
  while (tmp == 0UL) {
    #line 90 
    offset += 64UL;
    #line 91 
    if (offset >= size) 
                        #line 92 
                        return size;
    #line 94 
    tmp = *(addr + offset / 64UL);
  }
  #line 97 
  ;
  #line 97 
  ;
  #line 97 
  ;
  #line 97 
  return ldv_restrict_find_bit_res(ldv_min(ldv_ffs(tmp) + offset,size),size);
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_next_zero_bit(unsigned long *addr, unsigned long size, unsigned long offset)
{
  #line 102 
  unsigned long tmp;
  #line 104 
  ldv_check_find_bit_offset(size,offset);
  #line 106 
  tmp = *(addr + offset / 64UL);
  #line 107 
  tmp = ~ tmp;
  #line 108 
  tmp = (unsigned long)((18446744073709551615ULL << (offset & 63UL)) & (unsigned long long)tmp);
  #line 109 
  offset &= 18446744073709551552UL;
  #line 111 
  while (tmp == 0UL) {
    #line 112 
    offset += 64UL;
    #line 113 
    if (offset >= size) 
                        #line 114 
                        return size;
    #line 116 
    tmp = *(addr + offset / 64UL);
    #line 117 
    tmp = ~ tmp;
  }
  #line 120 
  ;
  #line 120 
  ;
  #line 120 
  ;
  #line 120 
  return ldv_restrict_find_bit_res(ldv_min(ldv_ffs(tmp) + offset,size),size);
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
size_t ldv_strlen(char *s);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strcmp(char *cs, char *ct);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strncmp(char *cs, char *ct, __kernel_size_t count);
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 70  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
char *ldv_strstr(char *cs, char *ct);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
size_t ldv_strlen(char *s)
{
  #line 23 
  unsigned int len = 0U;
  #line 25 
  while ((int)*s != 0) {
    #line 26 
    len ++;
    #line 25 
    s ++;
  }
  #line 28 
  return (unsigned long)len;
}

#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strcmp(char *cs, char *ct)
{
  #line 33 
  while ((int)*cs != 0 && (int)*ct != 0) {
    #line 34 
    if ((int)*cs != (int)*ct) 
                              #line 35 
                              break;
    #line 33 
    cs ++;
    #line 33 
    ct ++;
  }
  #line 37 
  return (int)*cs - (int)*ct;
}

#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strncmp(char *cs, char *ct, __kernel_size_t count)
{
  #line 42 
  if (count == 0UL) 
                    #line 43 
                    return 0;
  #line 45 
  while ((int)*cs != 0 && (int)*ct != 0) {
    #line 46 
    if ((int)*cs != (int)*ct) 
                              #line 47 
                              break;
    #line 49 
    count --;
    #line 51 
    if (count == 0UL) 
                      #line 52 
                      break;
    #line 45 
    cs ++;
    #line 45 
    ct ++;
  }
  #line 55 
  return (int)*cs - (int)*ct;
}

#line 58  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_memcmp(void *cs, void *ct, size_t count)
{
  #line 60 
  unsigned char *su1;
  #line 60 
  unsigned char *su2;
  #line 61 
  int res = 0;
  #line 63 
  su1 = (unsigned char *)cs;
  #line 63 
  su2 = (unsigned char *)ct;
  #line 63 
  while (count != 0UL) {
    #line 64 
    res = (int)*su1 - (int)*su2;
    #line 64 
    if (res != 0) 
                  #line 65 
                  break;
    #line 63 
    su1 ++;
    #line 63 
    su2 ++;
    #line 63 
    count --;
  }
  #line 67 
  return res;
}

#line 70  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
char *ldv_strstr(char *cs, char *ct)
{
  #line 72 
  size_t cs_len;
  #line 72 
  size_t ct_len;
  #line 74 
  cs_len = ldv_strlen(cs);
  #line 75 
  ct_len = ldv_strlen(ct);
  #line 77 
  while (cs_len >= ct_len) {
    #line 78 
    if (ldv_memcmp((void *)cs,(void *)ct,ct_len) == 0) 
                                                       #line 79 
                                                       return cs;
    #line 81 
    cs_len --;
    #line 82 
    cs ++;
  }
  #line 85 
  return (char *)0;
}

#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/list.c"
void ldv_init_list_head(struct list_head *list)
{
  #line 23 
  list->next = list;
  #line 24 
  list->prev = list;
  #line 25 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc(size_t size, gfp_t flags);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc_array(size_t n, size_t size, gfp_t flags);
#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct kmem_cache *ldv_kmem_cache_create(char *name, unsigned int size);
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_alloc(struct kmem_cache *cachep, gfp_t flags);
#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_zalloc(struct kmem_cache *cachep, gfp_t flags);
#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_free(struct kmem_cache *cachep, void *objp);
#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_destroy(struct kmem_cache *cachep);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc(size_t size, gfp_t flags)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_flags(flags);
  #line 28 
  res = ldv_malloc(size);
  #line 30 
  return res;
}

#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kzalloc(size_t size, gfp_t flags)
{
  #line 35 
  void *res;
  #line 37 
  ldv_check_alloc_flags(flags);
  #line 38 
  res = ldv_zalloc(size);
  #line 40 
  return res;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc_array(size_t n, size_t size, gfp_t flags)
{
  #line 45 
  void *res;
  #line 47 
  ldv_check_alloc_flags(flags);
  #line 48 
  res = ldv_malloc(n * size);
  #line 50 
  return res;
}

#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kcalloc(size_t n, size_t size, gfp_t flags)
{
  #line 55 
  void *res;
  #line 57 
  ldv_check_alloc_flags(flags);
  #line 58 
  res = ldv_calloc(n,size);
  #line 60 
  return res;
}

#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct kmem_cache *ldv_kmem_cache_create(char *name, unsigned int size)
{
  #line 71 
  struct kmem_cache *res;
  #line 72 
  struct ldv_kmem_cache *ldv_res;
  #line 74 
  res = (struct kmem_cache *)ldv_zalloc(16UL);
  #line 76 
  if (res != (struct kmem_cache *)0) {
    #line 77 
    ldv_res = (struct ldv_kmem_cache *)res;
    #line 78 
    ldv_res->name = name;
    #line 79 
    ldv_res->size = size;
  }
  #line 82 
  return res;
}

#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_alloc(struct kmem_cache *cachep, gfp_t flags)
{
  #line 87 
  return ldv_kmalloc((unsigned long)((struct ldv_kmem_cache *)cachep)->size,
                  flags);
}

#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_zalloc(struct kmem_cache *cachep, gfp_t flags)
{
  #line 92 
  return ldv_kzalloc((unsigned long)((struct ldv_kmem_cache *)cachep)->size,
                  flags);
}

#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_free(struct kmem_cache *cachep, void *objp)
{
  #line 97 
  ldv_free(objp);
  #line 98 
  return;
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_destroy(struct kmem_cache *cachep)
{
  #line 102 
  ldv_free((void *)cachep);
  #line 103 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/util.c"
void *ldv_kmemdup(void *src, size_t len, gfp_t gfp);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/util.c"
void *ldv_kmemdup(void *src, size_t len, gfp_t gfp)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_flags(gfp);
  #line 28 
  res = ldv_malloc(len);
  #line 30 
  if (res != (void *)0) 
                        #line 31 
                        memcpy(res,src,len);
  #line 33 
  return res;
}

#line 162  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 162 
void ldv_check_alloc_nonatomic(void);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/vmalloc.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vmalloc(unsigned long size);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/vmalloc.h"
#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vzalloc(unsigned long size);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/vmalloc.h"
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void ldv_vfree(void *addr);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vmalloc(unsigned long size)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_nonatomic();
  #line 28 
  res = ldv_malloc(size);
  #line 30 
  return res;
}

#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vzalloc(unsigned long size)
{
  #line 35 
  void *res;
  #line 37 
  ldv_check_alloc_nonatomic();
  #line 38 
  res = ldv_zalloc(size);
  #line 40 
  return res;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void ldv_vfree(void *addr)
{
  #line 45 
  ldv_free(addr);
  #line 46 
  return;
}

#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 28 
void *malloc(size_t);
#line 29 
#line 29 
void *calloc(size_t, size_t);
#line 30 
#line 30 
void free(void *);
#line 45 
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
unsigned int ldv_is_memory_alloc_failures;
#line 56  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xcalloc(size_t nmemb, size_t size);
#line 60  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc_unknown_size(void);
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 97  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc_unknown_size(void);
#line 64  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc(size_t size);
#line 65  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc(size_t nmemb, size_t size);
#line 66  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc(size_t size);
#line 67  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void ldv_reference_free(void *s);
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_realloc(void *ptr, size_t size);
#line 71  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 80  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc(size_t size);
#line 72  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xcalloc(size_t nmemb, size_t size);
#line 73  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xzalloc(size_t size);
#line 75  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 110  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc_unknown_size(void);
#line 76  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 124  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc_unknown_size(void);
#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc_unknown_size(void);
#line 83  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 106  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc_unknown_size(size_t size);
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 144  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc_unknown_size(size_t size);
#line 87  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 87 
void *external_allocated_data(void);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
unsigned int ldv_is_memory_alloc_failures = 1U;
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc(size_t size)
{
  #line 26 
  void *res;
  #line 28 
  if (ldv_is_memory_alloc_failures != 0U) {
    #line 28 
    if (ldv_undef_int() != 0) 
                              #line 29 
                              return (void *)0;
  }
  #line 32 
  res = malloc(size);
  #line 33 
  __VERIFIER_assume(res != (void *)0);
  #line 34 
  return res;
}

#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc(size_t nmemb, size_t size)
{
  #line 39 
  return calloc(nmemb,size);
}

#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc(size_t size)
{
  #line 44 
  return calloc(1UL,size);
}

#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void ldv_reference_free(void *s)
{
  #line 49 
  free(s);
  #line 50 
  return;
}

#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_realloc(void *ptr, size_t size)
{
  #line 54 
  void *res;
  #line 56 
  if (ptr != (void *)0 && size == 0UL) {
    #line 57 
    free(ptr);
    #line 58 
    return (void *)0;
  }
  #line 61 
  if (ptr == (void *)0) {
    #line 62 
    res = malloc(size);
    #line 63 
    return res;
  }
  #line 66 
  if (ldv_undef_int() != 0) {
    #line 68 
    res = malloc(size);
    #line 69 
    __VERIFIER_assume(res != (void *)0);
    #line 71 
    memcpy(res,ptr,size);
    #line 72 
    free(ptr);
    #line 74 
    return res;
  }
  else 
       #line 77 
       return (void *)0;
}

#line 80  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc(size_t size)
{
  #line 82 
  void *res;
  #line 84 
  res = malloc(size);
  #line 85 
  __VERIFIER_assume(res != (void *)0);
  #line 87 
  return res;
}

#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xcalloc(size_t nmemb, size_t size)
{
  #line 92 
  void *res;
  #line 94 
  res = calloc(nmemb,size);
  #line 95 
  __VERIFIER_assume(res != (void *)0);
  #line 97 
  return res;
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xzalloc(size_t size)
{
  #line 102 
  void *res;
  #line 104 
  res = calloc(1UL,size);
  #line 105 
  __VERIFIER_assume(res != (void *)0);
  #line 107 
  return res;
}

#line 110  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc_unknown_size(void)
{
  #line 112 
  void *res;
  #line 114 
  if (ldv_undef_int() != 0) {
    #line 116 
    res = external_allocated_data();
    #line 117 
    __VERIFIER_assume(res != (void *)0);
    #line 118 
    return res;
  }
  else 
       #line 121 
       return (void *)0;
}

#line 124  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc_unknown_size(void)
{
  #line 126 
  void *res;
  #line 128 
  if (ldv_undef_int() != 0) {
    #line 130 
    res = external_allocated_data();
    #line 131 
    memset(res,0,8UL);
    #line 132 
    __VERIFIER_assume(res != (void *)0);
    #line 133 
    return res;
  }
  else 
       #line 136 
       return (void *)0;
}

#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc_unknown_size(void)
{
  #line 141 
  return ldv_reference_calloc_unknown_size();
}

#line 144  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc_unknown_size(size_t size)
{
  #line 146 
  void *res;
  #line 149 
  res = external_allocated_data();
  #line 150 
  __VERIFIER_assume(res != (void *)0);
  #line 152 
  return res;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_malloc(size_t size)
{
  #line 25 
  void *res;
  #line 26 
  res = ldv_reference_malloc(size);
  #line 27 
  if (res != (void *)0) {
    #line 28 
    int tmp_0;
    #line 28 
    if (ldv_is_err(res)) 
                         #line 28 
                         tmp_0 = 0; else 
                                         #line 28 
                                         tmp_0 = 1;
    #line 28 
    __VERIFIER_assume(tmp_0);
  }
  #line 29 
  return res;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc(size_t nmemb, size_t size)
{
  #line 34 
  void *res;
  #line 35 
  res = ldv_reference_calloc(nmemb,size);
  #line 36 
  if (res != (void *)0) {
    #line 37 
    int tmp_0;
    #line 37 
    if (ldv_is_err(res)) 
                         #line 37 
                         tmp_0 = 0; else 
                                         #line 37 
                                         tmp_0 = 1;
    #line 37 
    __VERIFIER_assume(tmp_0);
  }
  #line 38 
  return res;
}

#line 41  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc(size_t size)
{
  #line 43 
  void *res;
  #line 44 
  res = ldv_reference_zalloc(size);
  #line 45 
  if (res != (void *)0) {
    #line 46 
    int tmp_0;
    #line 46 
    if (ldv_is_err(res)) 
                         #line 46 
                         tmp_0 = 0; else 
                                         #line 46 
                                         tmp_0 = 1;
    #line 46 
    __VERIFIER_assume(tmp_0);
  }
  #line 47 
  return res;
}

#line 50  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void ldv_free(void *s)
{
  #line 52 
  ldv_reference_free(s);
  #line 53 
  return;
}

#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc(size_t size)
{
  #line 57 
  void *res;
  #line 59 
  int tmp_0;
  #line 58 
  res = ldv_reference_xmalloc(size);
  #line 59 
  if (ldv_is_err(res)) 
                       #line 59 
                       tmp_0 = 0; else 
                                       #line 59 
                                       tmp_0 = 1;
  #line 59 
  __VERIFIER_assume(tmp_0);
  #line 60 
  return res;
}

#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xcalloc(size_t nmemb, size_t size)
{
  #line 65 
  void *res;
  #line 67 
  int tmp_0;
  #line 66 
  res = ldv_reference_xcalloc(nmemb,size);
  #line 67 
  if (ldv_is_err(res)) 
                       #line 67 
                       tmp_0 = 0; else 
                                       #line 67 
                                       tmp_0 = 1;
  #line 67 
  __VERIFIER_assume(tmp_0);
  #line 68 
  return res;
}

#line 71  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xzalloc(size_t size)
{
  #line 73 
  void *res;
  #line 75 
  int tmp_0;
  #line 74 
  res = ldv_reference_xzalloc(size);
  #line 75 
  if (ldv_is_err(res)) 
                       #line 75 
                       tmp_0 = 0; else 
                                       #line 75 
                                       tmp_0 = 1;
  #line 75 
  __VERIFIER_assume(tmp_0);
  #line 76 
  return res;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_malloc_unknown_size(void)
{
  #line 81 
  void *res;
  #line 82 
  res = ldv_reference_malloc_unknown_size();
  #line 83 
  if (res != (void *)0) {
    #line 84 
    int tmp_0;
    #line 84 
    if (ldv_is_err(res)) 
                         #line 84 
                         tmp_0 = 0; else 
                                         #line 84 
                                         tmp_0 = 1;
    #line 84 
    __VERIFIER_assume(tmp_0);
  }
  #line 85 
  return res;
}

#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc_unknown_size(void)
{
  #line 90 
  void *res;
  #line 91 
  res = ldv_reference_calloc_unknown_size();
  #line 92 
  if (res != (void *)0) {
    #line 93 
    int tmp_0;
    #line 93 
    if (ldv_is_err(res)) 
                         #line 93 
                         tmp_0 = 0; else 
                                         #line 93 
                                         tmp_0 = 1;
    #line 93 
    __VERIFIER_assume(tmp_0);
  }
  #line 94 
  return res;
}

#line 97  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc_unknown_size(void)
{
  #line 99 
  void *res;
  #line 100 
  res = ldv_reference_zalloc_unknown_size();
  #line 101 
  if (res != (void *)0) {
    #line 102 
    int tmp_0;
    #line 102 
    if (ldv_is_err(res)) 
                         #line 102 
                         tmp_0 = 0; else 
                                         #line 102 
                                         tmp_0 = 1;
    #line 102 
    __VERIFIER_assume(tmp_0);
  }
  #line 103 
  return res;
}

#line 106  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc_unknown_size(size_t size)
{
  #line 108 
  void *res;
  #line 110 
  int tmp_0;
  #line 109 
  res = ldv_reference_xmalloc_unknown_size(size);
  #line 110 
  if (ldv_is_err(res)) 
                       #line 110 
                       tmp_0 = 0; else 
                                       #line 110 
                                       tmp_0 = 1;
  #line 110 
  __VERIFIER_assume(tmp_0);
  #line 111 
  return res;
}

/* compiler builtin: 
   long __builtin_expect(long exp, long c);   */
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
#line 22 
void __VERIFIER_error(void);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
long __builtin_expect(long exp, long c)
{
  #line 26 
  return exp;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/gcc.c"
void __builtin_trap(void)
{
  #line 37 
  __VERIFIER_error();
  #line 38 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
long ldv_undef_long(void);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned int ldv_undef_uint(void);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long ldv_undef_ulong(void);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long long ldv_undef_ulonglong(void);
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr(void);
#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonnegative(void);
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr_non_null(void);
#line 54  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range(int begin, int end);
#line 56  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 151  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range2(int begin, int end);
#line 29 
#line 29 
int __VERIFIER_nondet_int(void);
#line 31 
#line 31 
long __VERIFIER_nondet_long(void);
#line 38 
#line 38 
unsigned int __VERIFIER_nondet_uint(void);
#line 41 
#line 41 
unsigned long __VERIFIER_nondet_ulong(void);
#line 42 
#line 42 
unsigned long long __VERIFIER_nondet_ulonglong(void);
#line 43 
#line 43 
void *__VERIFIER_nondet_pointer(void);
#line 45  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int(void)
{
  #line 48 
  int undef_int = __VERIFIER_nondet_int();
  #line 50 
  return undef_int;
}

#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
long ldv_undef_long(void)
{
  #line 56 
  long undef_long = __VERIFIER_nondet_long();
  #line 58 
  return undef_long;
}

#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned int ldv_undef_uint(void)
{
  #line 64 
  unsigned int undef_uint = __VERIFIER_nondet_uint();
  #line 66 
  return undef_uint;
}

#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr(void)
{
  #line 72 
  void *undef_ptr = __VERIFIER_nondet_pointer();
  #line 74 
  return undef_ptr;
}

#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long ldv_undef_ulong(void)
{
  #line 80 
  unsigned long undef_ulong = __VERIFIER_nondet_ulong();
  #line 82 
  return undef_ulong;
}

#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long long ldv_undef_ulonglong(void)
{
  #line 88 
  unsigned long long undef_ulonglong = __VERIFIER_nondet_ulonglong();
  #line 90 
  return undef_ulonglong;
}

#line 93  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_positive(void)
{
  #line 95 
  int ret = ldv_undef_int();
  #line 97 
  __VERIFIER_assume(ret > 0);
  #line 99 
  return ret;
}

#line 102  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_negative(void)
{
  #line 104 
  int ret = ldv_undef_int();
  #line 106 
  __VERIFIER_assume(ret < 0);
  #line 108 
  return ret;
}

#line 111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonnegative(void)
{
  #line 113 
  int ret = ldv_undef_int();
  #line 115 
  __VERIFIER_assume(ret >= 0);
  #line 117 
  return ret;
}

#line 120  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonpositive(void)
{
  #line 122 
  int ret = ldv_undef_int();
  #line 124 
  __VERIFIER_assume(ret <= 0);
  #line 126 
  return ret;
}

#line 129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr_non_null(void)
{
  #line 131 
  void *ret = ldv_undef_ptr();
  #line 133 
  __VERIFIER_assume(ret != (void *)0);
  #line 135 
  return ret;
}

#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range(int begin, int end)
{
  #line 141 
  int ret;
  #line 143 
  ret = ldv_undef_int();
  #line 144 
  __VERIFIER_assume(ret >= begin);
  #line 145 
  __VERIFIER_assume(ret <= end);
  #line 147 
  return ret;
}

#line 151  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range2(int begin, int end)
{
  #line 153 
  int ret;
  #line 155 
  ret = begin;
  #line 155 
  while (ret < end) {
    #line 156 
    if (ldv_undef_int() != 0) 
                              #line 157 
                              break;
    #line 155 
    ret ++;
  }
  #line 159 
  return ret;
}

#line 62  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 62 
void ldv_initialize(void);
#line 97 
#line 97 
void ldv_failed_register_netdev(void);
#line 123 
#line 123 
void ldv_pre_probe(void);
#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
#line 35 
int pthread_create(pthread_t *, pthread_attr_t *, void *(*)(void *), void *);
#line 39 
#line 39 
int pthread_join(pthread_t, void **);
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/err.h"
__inline static void *ERR_PTR(long error)
{
  #line 26 
  return (void *)error;
}

#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/err.h"
__inline static bool IS_ERR_OR_NULL_0(void *ptr)
{
  #line 41 
  return (_Bool)(((long)(ptr == (void *)0) != 0L || (long)((unsigned long)ptr > 18446744073709547520UL) != 0L) != 0);
}

#line 140  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/emg/0/environment_model.c"
#line 320 
void emg_dispatch_deregister_11(struct pci_driver *arg0);
#line 141 
#line 399 
void emg_dispatch_deregister_15(struct net_device *arg0);
#line 142 
#line 252 
void emg_dispatch_deregister_6(struct file_operations *arg0);
#line 143 
#line 291 
void emg_dispatch_instance_deregister_7(struct timer_list *arg0);
#line 144 
#line 309 
void emg_dispatch_instance_register_10(struct timer_list *arg0);
#line 145 
#line 300 
void emg_dispatch_irq_deregister_8(int arg0);
#line 146 
#line 340 
void emg_dispatch_irq_register_13(int arg0, enum irqreturn (*arg1)(int , void *), enum irqreturn (*arg2)(int , void *), void *arg3);
#line 147 
#line 329 
void emg_dispatch_register_12(struct net_device *arg0);
#line 148 
#line 354 
void emg_dispatch_register_14(struct seq_file *arg0, struct seq_operations *arg1);
#line 149 
#line 192 
void emg_dispatch_register_2(struct pci_driver *arg0);
#line 150 
#line 203 
void emg_dispatch_register_5(struct file_operations *arg0);
#line 151 
#line 2943 
void *emg_entry_point_insmod(void *arg0);
#line 152 
#line 408 
void *emg_file_operations_character_driver_scenario_interfaces_proc_fops(void *arg0);
#line 153 
#line 585 
void *emg_file_operations_character_driver_scenario_mboxlog_fops(void *arg0);
#line 154 
#line 762 
void *emg_file_operations_character_driver_scenario_resources_fops(void *arg0);
#line 155 
#line 939 
void *emg_file_operations_character_driver_scenario_sge_qinfo_debugfs_fops(void *arg0);
#line 156 
#line 1116 
void *emg_file_operations_character_driver_scenario_sge_qstats_proc_fops(void *arg0);
#line 159 
#line 1293 
void *emg_interrupt_interrupt_scenario_t4vf_sge_intr_msix(void *arg0);
#line 161 
#line 1356 
void *emg_net_random_allocationless_scenario_cxgb4vf_get_coalesce(void *arg0);
#line 162 
#line 1732 
void *emg_pci_pci_scenario_cxgb4vf_driver(void *arg0);
#line 167 
#line 1908 
void *emg_seq_operations_traverse_kernel_items_scenario_interfaces_seq_ops(void *arg0);
#line 168 
#line 2065 
void *emg_seq_operations_traverse_kernel_items_scenario_mboxlog_seq_ops(void *arg0);
#line 169 
#line 2222 
void *emg_seq_operations_traverse_kernel_items_scenario_sge_qinfo_seq_ops(void *arg0);
#line 170 
#line 2379 
void *emg_seq_operations_traverse_kernel_items_scenario_sge_qstats_seq_ops(void *arg0);
#line 171 
#line 2536 
void *emg_timer_timer_scenario_12(void *arg0);
#line 173 
#line 2972 
int main(void);
#line 176  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_16;
#line 177  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_17;
#line 178  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_18;
#line 179  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_19;
#line 180  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_20;
#line 181  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_21;
#line 182  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_22;
#line 183  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_23;
#line 184  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_24;
#line 185  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_25;
#line 186  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_26;
#line 187  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_27;
#line 188  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_28;
#line 192  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_register_2(struct pci_driver *arg0)
{
  #line 193 
  int ret;
  #line 194 
  struct emg_struct_pci_scenario_cxgb4vf_driver_23 *cf_arg_23;
  #line 195 
  cf_arg_23 = (struct emg_struct_pci_scenario_cxgb4vf_driver_23 *)ldv_xmalloc(16UL);
  #line 196 
  cf_arg_23->arg0 = arg0;
  #line 197 
  ret = pthread_create(& emg_thread_23,(pthread_attr_t *)0,& emg_pci_pci_scenario_cxgb4vf_driver,(void *)cf_arg_23);
  #line 198 
  __VERIFIER_assume(ret == 0);
  #line 199 
  return;
}

#line 203  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_register_5(struct file_operations *arg0)
{
  #line 204 
  int ret;
  #line 205 
  struct emg_struct_character_driver_scenario_interfaces_proc_fops_16 *cf_arg_16;
  #line 206 
  struct emg_struct_character_driver_scenario_interfaces_proc_fops_16 *cf_arg_17;
  #line 207 
  struct emg_struct_character_driver_scenario_interfaces_proc_fops_16 *cf_arg_18;
  #line 208 
  struct emg_struct_character_driver_scenario_interfaces_proc_fops_16 *cf_arg_19;
  #line 209 
  struct emg_struct_character_driver_scenario_interfaces_proc_fops_16 *cf_arg_20;
  #line 210 
  switch (ldv_undef_int()) {
    #line 211 
    case 0: 
            #line 211 
    ;
    #line 212 
    cf_arg_16 = (struct emg_struct_character_driver_scenario_interfaces_proc_fops_16 *)ldv_xmalloc(16UL);
    #line 213 
    cf_arg_16->arg0 = arg0;
    #line 214 
    ret = pthread_create(& emg_thread_16,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_interfaces_proc_fops,(void *)cf_arg_16);
    #line 215 
    __VERIFIER_assume(ret == 0);
    #line 216 
    break;
    #line 218 
    case 1: 
            #line 218 
    ;
    #line 219 
    cf_arg_17 = (struct emg_struct_character_driver_scenario_interfaces_proc_fops_16 *)ldv_xmalloc(16UL);
    #line 220 
    cf_arg_17->arg0 = arg0;
    #line 221 
    ret = pthread_create(& emg_thread_17,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_mboxlog_fops,(void *)cf_arg_17);
    #line 222 
    __VERIFIER_assume(ret == 0);
    #line 223 
    break;
    #line 225 
    case 2: 
            #line 225 
    ;
    #line 226 
    cf_arg_18 = (struct emg_struct_character_driver_scenario_interfaces_proc_fops_16 *)ldv_xmalloc(16UL);
    #line 227 
    cf_arg_18->arg0 = arg0;
    #line 228 
    ret = pthread_create(& emg_thread_18,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_resources_fops,(void *)cf_arg_18);
    #line 229 
    __VERIFIER_assume(ret == 0);
    #line 230 
    break;
    #line 232 
    case 3: 
            #line 232 
    ;
    #line 233 
    cf_arg_19 = (struct emg_struct_character_driver_scenario_interfaces_proc_fops_16 *)ldv_xmalloc(16UL);
    #line 234 
    cf_arg_19->arg0 = arg0;
    #line 235 
    ret = pthread_create(& emg_thread_19,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_sge_qinfo_debugfs_fops,(void *)cf_arg_19);
    #line 236 
    __VERIFIER_assume(ret == 0);
    #line 237 
    break;
    #line 239 
    case 4: 
            #line 239 
    ;
    #line 240 
    cf_arg_20 = (struct emg_struct_character_driver_scenario_interfaces_proc_fops_16 *)ldv_xmalloc(16UL);
    #line 241 
    cf_arg_20->arg0 = arg0;
    #line 242 
    ret = pthread_create(& emg_thread_20,(pthread_attr_t *)0,& emg_file_operations_character_driver_scenario_sge_qstats_proc_fops,(void *)cf_arg_20);
    #line 243 
    __VERIFIER_assume(ret == 0);
    #line 244 
    break;
    #line 246 
    default: 
             #line 246 
    ;
    #line 246 
    __VERIFIER_assume(0);
  }
  #line 248 
  return;
}

#line 252  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_deregister_6(struct file_operations *arg0)
{
  #line 253 
  int ret;
  #line 254 
  struct emg_struct_character_driver_scenario_interfaces_proc_fops_16 *cf_arg_16;
  #line 255 
  struct emg_struct_character_driver_scenario_interfaces_proc_fops_16 *cf_arg_17;
  #line 256 
  struct emg_struct_character_driver_scenario_interfaces_proc_fops_16 *cf_arg_18;
  #line 257 
  struct emg_struct_character_driver_scenario_interfaces_proc_fops_16 *cf_arg_19;
  #line 258 
  struct emg_struct_character_driver_scenario_interfaces_proc_fops_16 *cf_arg_20;
  #line 259 
  switch (ldv_undef_int()) {
    #line 260 
    case 0: 
            #line 260 
    ;
    #line 261 
    ret = pthread_join(emg_thread_16,(void **)0);
    #line 262 
    __VERIFIER_assume(ret == 0);
    #line 263 
    break;
    #line 265 
    case 1: 
            #line 265 
    ;
    #line 266 
    ret = pthread_join(emg_thread_17,(void **)0);
    #line 267 
    __VERIFIER_assume(ret == 0);
    #line 268 
    break;
    #line 270 
    case 2: 
            #line 270 
    ;
    #line 271 
    ret = pthread_join(emg_thread_18,(void **)0);
    #line 272 
    __VERIFIER_assume(ret == 0);
    #line 273 
    break;
    #line 275 
    case 3: 
            #line 275 
    ;
    #line 276 
    ret = pthread_join(emg_thread_19,(void **)0);
    #line 277 
    __VERIFIER_assume(ret == 0);
    #line 278 
    break;
    #line 280 
    case 4: 
            #line 280 
    ;
    #line 281 
    ret = pthread_join(emg_thread_20,(void **)0);
    #line 282 
    __VERIFIER_assume(ret == 0);
    #line 283 
    break;
    #line 285 
    default: 
             #line 285 
    ;
    #line 285 
    __VERIFIER_assume(0);
  }
  #line 287 
  return;
}

#line 291  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_instance_deregister_7(struct timer_list *arg0)
{
  #line 292 
  int ret;
  #line 293 
  struct emg_struct_timer_scenario_12_28 *cf_arg_28;
  #line 294 
  ret = pthread_join(emg_thread_28,(void **)0);
  #line 295 
  __VERIFIER_assume(ret == 0);
  #line 296 
  return;
}

#line 300  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_irq_deregister_8(int arg0)
{
  #line 301 
  int ret;
  #line 302 
  struct emg_struct_free_irq_8 *cf_arg_21;
  #line 303 
  ret = pthread_join(emg_thread_21,(void **)0);
  #line 304 
  __VERIFIER_assume(ret == 0);
  #line 305 
  return;
}

#line 309  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_instance_register_10(struct timer_list *arg0)
{
  #line 310 
  int ret;
  #line 311 
  struct emg_struct_timer_scenario_12_28 *cf_arg_28;
  #line 312 
  cf_arg_28 = (struct emg_struct_timer_scenario_12_28 *)ldv_xmalloc(16UL);
  #line 313 
  cf_arg_28->arg0 = arg0;
  #line 314 
  ret = pthread_create(& emg_thread_28,(pthread_attr_t *)0,& emg_timer_timer_scenario_12,(void *)cf_arg_28);
  #line 315 
  __VERIFIER_assume(ret == 0);
  #line 316 
  return;
}

#line 320  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_deregister_11(struct pci_driver *arg0)
{
  #line 321 
  int ret;
  #line 322 
  struct emg_struct_pci_scenario_cxgb4vf_driver_23 *cf_arg_23;
  #line 323 
  ret = pthread_join(emg_thread_23,(void **)0);
  #line 324 
  __VERIFIER_assume(ret == 0);
  #line 325 
  return;
}

#line 329  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_register_12(struct net_device *arg0)
{
  #line 330 
  int ret;
  #line 331 
  struct emg_struct_random_allocationless_scenario_cxgb4vf_get_coalesce_22 *cf_arg_22;
  #line 332 
  cf_arg_22 = (struct emg_struct_random_allocationless_scenario_cxgb4vf_get_coalesce_22 *)ldv_xmalloc(16UL);
  #line 333 
  cf_arg_22->arg0 = arg0;
  #line 334 
  ret = pthread_create(& emg_thread_22,(pthread_attr_t *)0,& emg_net_random_allocationless_scenario_cxgb4vf_get_coalesce,(void *)cf_arg_22);
  #line 335 
  __VERIFIER_assume(ret == 0);
  #line 336 
  return;
}

#line 340  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_irq_register_13(int arg0, enum irqreturn (*arg1)(int , void *), enum irqreturn (*arg2)(int , void *), void *arg3)
{
  #line 341 
  int ret;
  #line 342 
  struct emg_struct_interrupt_scenario_t4vf_sge_intr_msix_21 *cf_arg_21;
  #line 343 
  cf_arg_21 = (struct emg_struct_interrupt_scenario_t4vf_sge_intr_msix_21 *)ldv_xmalloc(40UL);
  #line 344 
  cf_arg_21->arg0 = arg0;
  #line 345 
  cf_arg_21->arg1 = arg1;
  #line 346 
  cf_arg_21->arg2 = arg2;
  #line 347 
  cf_arg_21->arg3 = arg3;
  #line 348 
  ret = pthread_create(& emg_thread_21,(pthread_attr_t *)0,& emg_interrupt_interrupt_scenario_t4vf_sge_intr_msix,(void *)cf_arg_21);
  #line 349 
  __VERIFIER_assume(ret == 0);
  #line 350 
  return;
}

#line 354  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_register_14(struct seq_file *arg0, struct seq_operations *arg1)
{
  #line 355 
  int ret;
  #line 356 
  struct emg_struct_traverse_kernel_items_scenario_interfaces_seq_ops_24 *cf_arg_24;
  #line 357 
  struct emg_struct_traverse_kernel_items_scenario_interfaces_seq_ops_24 *cf_arg_25;
  #line 358 
  struct emg_struct_traverse_kernel_items_scenario_interfaces_seq_ops_24 *cf_arg_26;
  #line 359 
  struct emg_struct_traverse_kernel_items_scenario_interfaces_seq_ops_24 *cf_arg_27;
  #line 360 
  switch (ldv_undef_int()) {
    #line 361 
    case 0: 
            #line 361 
    ;
    #line 362 
    cf_arg_24 = (struct emg_struct_traverse_kernel_items_scenario_interfaces_seq_ops_24 *)ldv_xmalloc(24UL);
    #line 363 
    cf_arg_24->arg0 = arg0;
    #line 364 
    cf_arg_24->arg1 = arg1;
    #line 365 
    ret = pthread_create(& emg_thread_24,(pthread_attr_t *)0,& emg_seq_operations_traverse_kernel_items_scenario_interfaces_seq_ops,(void *)cf_arg_24);
    #line 366 
    __VERIFIER_assume(ret == 0);
    #line 367 
    break;
    #line 369 
    case 1: 
            #line 369 
    ;
    #line 370 
    cf_arg_25 = (struct emg_struct_traverse_kernel_items_scenario_interfaces_seq_ops_24 *)ldv_xmalloc(24UL);
    #line 371 
    cf_arg_25->arg0 = arg0;
    #line 372 
    cf_arg_25->arg1 = arg1;
    #line 373 
    ret = pthread_create(& emg_thread_25,(pthread_attr_t *)0,& emg_seq_operations_traverse_kernel_items_scenario_mboxlog_seq_ops,(void *)cf_arg_25);
    #line 374 
    __VERIFIER_assume(ret == 0);
    #line 375 
    break;
    #line 377 
    case 2: 
            #line 377 
    ;
    #line 378 
    cf_arg_26 = (struct emg_struct_traverse_kernel_items_scenario_interfaces_seq_ops_24 *)ldv_xmalloc(24UL);
    #line 379 
    cf_arg_26->arg0 = arg0;
    #line 380 
    cf_arg_26->arg1 = arg1;
    #line 381 
    ret = pthread_create(& emg_thread_26,(pthread_attr_t *)0,& emg_seq_operations_traverse_kernel_items_scenario_sge_qinfo_seq_ops,(void *)cf_arg_26);
    #line 382 
    __VERIFIER_assume(ret == 0);
    #line 383 
    break;
    #line 385 
    case 3: 
            #line 385 
    ;
    #line 386 
    cf_arg_27 = (struct emg_struct_traverse_kernel_items_scenario_interfaces_seq_ops_24 *)ldv_xmalloc(24UL);
    #line 387 
    cf_arg_27->arg0 = arg0;
    #line 388 
    cf_arg_27->arg1 = arg1;
    #line 389 
    ret = pthread_create(& emg_thread_27,(pthread_attr_t *)0,& emg_seq_operations_traverse_kernel_items_scenario_sge_qstats_seq_ops,(void *)cf_arg_27);
    #line 390 
    __VERIFIER_assume(ret == 0);
    #line 391 
    break;
    #line 393 
    default: 
             #line 393 
    ;
    #line 393 
    __VERIFIER_assume(0);
  }
  #line 395 
  return;
}

#line 399  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_deregister_15(struct net_device *arg0)
{
  #line 400 
  int ret;
  #line 401 
  struct emg_struct_random_allocationless_scenario_cxgb4vf_get_coalesce_22 *cf_arg_22;
  #line 402 
  ret = pthread_join(emg_thread_22,(void **)0);
  #line 403 
  __VERIFIER_assume(ret == 0);
  #line 404 
  return;
}

#line 408  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_interfaces_proc_fops(void *arg0)
{
  #line 411 
  struct file_operations *emg_16_container;
  #line 412 
  long long emg_16_emg_param_1_0;
  #line 413 
  char *emg_16_emg_param_1_2;
  #line 414 
  char *emg_16_emg_param_1_4;
  #line 415 
  int emg_16_emg_param_2_1;
  #line 416 
  long long *emg_16_emg_param_3_3;
  #line 417 
  long long *emg_16_emg_param_3_5;
  #line 418 
  struct file *emg_16_resource_0;
  #line 419 
  struct inode *emg_16_resource_1;
  #line 420 
  int emg_16_ret;
  #line 421 
  unsigned long emg_16_size_cnt;
  #line 422 
  int emg_repeat_cnt_main_16_1 = 1;
  #line 423 
  int emg_repeat_cnt_call_16 = 1;
  #line 424 
  int emg_repeat_cnt_main_16_0 = 1;
  #line 426 
  struct emg_struct_character_driver_scenario_interfaces_proc_fops_16 *data = (struct emg_struct_character_driver_scenario_interfaces_proc_fops_16 *)arg0;
  #line 430 
  emg_16_ret = ldv_undef_int();
  #line 431 
  emg_16_container = emg_alias_interfaces_proc_fops;
  #line 432 
  emg_16_ret = ldv_undef_int();
  #line 434 
  __VERIFIER_assume(data->arg0 == emg_alias_interfaces_proc_fops);
  #line 436 
  if (data != (struct emg_struct_character_driver_scenario_interfaces_proc_fops_16 *)0) {
    #line 437 
    emg_16_container = data->arg0;
    #line 438 
    ldv_free((void *)data);
  }
  #line 443 
  emg_16_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 444 
  emg_16_size_cnt = (unsigned long)ldv_undef_int();
  #line 448 
  goto emg_main_16;
  #line 452 
  return (void *)0;
  #line 455 
  emg_call_16: 
               #line 455 
  ;
  #line 456 
  if (ldv_undef_int() != 0) {
    #line 457 
    switch (ldv_undef_int()) {
      #line 458 
      case 0: 
              #line 458 
      ;
      #line 460 
      emg_16_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 460 
      emg_16_emg_param_1_2 = emg_16_emg_param_1_2;
      #line 461 
      emg_16_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 461 
      emg_16_emg_param_3_3 = emg_16_emg_param_3_3;
      #line 465 
      seq_read(emg_16_resource_0,emg_16_emg_param_1_2,emg_16_size_cnt,emg_16_emg_param_3_3);
      #line 469 
      ldv_free((void *)emg_16_emg_param_1_2);
      #line 470 
      ldv_free((void *)emg_16_emg_param_3_3);
      #line 472 
      break;
      #line 474 
      case 1: 
              #line 474 
      ;
      #line 476 
      seq_lseek(emg_16_resource_0,emg_16_emg_param_1_0,emg_16_emg_param_2_1);
      #line 478 
      break;
      #line 480 
      case 2: 
              #line 480 
      ;
      #line 487 
      __VERIFIER_assume(emg_16_size_cnt <= 2147479552UL);
      #line 488 
      emg_16_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 488 
      emg_16_emg_param_1_4 = emg_16_emg_param_1_4;
      #line 489 
      emg_16_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 489 
      emg_16_emg_param_3_5 = emg_16_emg_param_3_5;
      #line 493 
      if (emg_16_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 494 
        (*(emg_16_container->write))(emg_16_resource_0,emg_16_emg_param_1_4,emg_16_size_cnt,emg_16_emg_param_3_5);
      #line 499 
      ldv_free((void *)emg_16_emg_param_1_4);
      #line 500 
      ldv_free((void *)emg_16_emg_param_3_5);
      #line 502 
      break;
      #line 504 
      default: 
               #line 504 
      ;
      #line 504 
      __VERIFIER_assume(0);
    }
    #line 507 
    if (emg_repeat_cnt_call_16 > 0) {
      #line 508 
      emg_repeat_cnt_call_16 --;
      #line 510 
      goto emg_call_16;
    }
    else 
         #line 512 
         __VERIFIER_assume(0);
  }
  else {
    #line 518 
    (*emg_alias_seq_release)(emg_16_resource_1,emg_16_resource_0);
    #line 521 
    if (emg_repeat_cnt_main_16_0 > 0) {
      #line 522 
      emg_repeat_cnt_main_16_0 --;
      #line 524 
      goto emg_main_16;
    }
    else 
         #line 526 
         __VERIFIER_assume(0);
  }
  #line 532 
  return (void *)0;
  #line 535 
  emg_main_16: 
               #line 535 
  ;
  #line 536 
  if (ldv_undef_int() != 0) {
    #line 538 
    emg_16_ret = emg_wrapper_interfaces_open(emg_16_resource_1,emg_16_resource_0);
    #line 543 
    emg_16_ret = ldv_filter_err_code(emg_16_ret);
    #line 546 
    if (ldv_undef_int() != 0) {
      #line 548 
      __VERIFIER_assume(emg_16_ret == 0);
      #line 552 
      goto emg_call_16;
    }
    else {
      #line 557 
      __VERIFIER_assume(emg_16_ret != 0);
      #line 560 
      if (emg_repeat_cnt_main_16_1 > 0) {
        #line 561 
        emg_repeat_cnt_main_16_1 --;
        #line 563 
        goto emg_main_16;
      }
      else 
           #line 565 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 572 
       ldv_free((void *)emg_16_resource_0);
  #line 580 
  return (void *)0;
}

#line 585  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_mboxlog_fops(void *arg0)
{
  #line 588 
  struct file_operations *emg_17_container;
  #line 589 
  long long emg_17_emg_param_1_0;
  #line 590 
  char *emg_17_emg_param_1_2;
  #line 591 
  char *emg_17_emg_param_1_4;
  #line 592 
  int emg_17_emg_param_2_1;
  #line 593 
  long long *emg_17_emg_param_3_3;
  #line 594 
  long long *emg_17_emg_param_3_5;
  #line 595 
  struct file *emg_17_resource_0;
  #line 596 
  struct inode *emg_17_resource_1;
  #line 597 
  int emg_17_ret;
  #line 598 
  unsigned long emg_17_size_cnt;
  #line 599 
  int emg_repeat_cnt_main_17_0 = 1;
  #line 600 
  int emg_repeat_cnt_main_17_1 = 1;
  #line 601 
  int emg_repeat_cnt_call_17 = 1;
  #line 603 
  struct emg_struct_character_driver_scenario_interfaces_proc_fops_16 *data = (struct emg_struct_character_driver_scenario_interfaces_proc_fops_16 *)arg0;
  #line 607 
  emg_17_ret = ldv_undef_int();
  #line 608 
  emg_17_container = emg_alias_mboxlog_fops;
  #line 609 
  emg_17_ret = ldv_undef_int();
  #line 611 
  __VERIFIER_assume(data->arg0 == emg_alias_mboxlog_fops);
  #line 613 
  if (data != (struct emg_struct_character_driver_scenario_interfaces_proc_fops_16 *)0) {
    #line 614 
    emg_17_container = data->arg0;
    #line 615 
    ldv_free((void *)data);
  }
  #line 620 
  emg_17_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 621 
  emg_17_size_cnt = (unsigned long)ldv_undef_int();
  #line 625 
  goto emg_main_17;
  #line 629 
  return (void *)0;
  #line 632 
  emg_call_17: 
               #line 632 
  ;
  #line 633 
  if (ldv_undef_int() != 0) {
    #line 634 
    switch (ldv_undef_int()) {
      #line 635 
      case 0: 
              #line 635 
      ;
      #line 637 
      emg_17_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 637 
      emg_17_emg_param_1_2 = emg_17_emg_param_1_2;
      #line 638 
      emg_17_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 638 
      emg_17_emg_param_3_3 = emg_17_emg_param_3_3;
      #line 642 
      seq_read(emg_17_resource_0,emg_17_emg_param_1_2,emg_17_size_cnt,emg_17_emg_param_3_3);
      #line 646 
      ldv_free((void *)emg_17_emg_param_1_2);
      #line 647 
      ldv_free((void *)emg_17_emg_param_3_3);
      #line 649 
      break;
      #line 651 
      case 1: 
              #line 651 
      ;
      #line 653 
      seq_lseek(emg_17_resource_0,emg_17_emg_param_1_0,emg_17_emg_param_2_1);
      #line 655 
      break;
      #line 657 
      case 2: 
              #line 657 
      ;
      #line 664 
      __VERIFIER_assume(emg_17_size_cnt <= 2147479552UL);
      #line 665 
      emg_17_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 665 
      emg_17_emg_param_1_4 = emg_17_emg_param_1_4;
      #line 666 
      emg_17_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 666 
      emg_17_emg_param_3_5 = emg_17_emg_param_3_5;
      #line 670 
      if (emg_17_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 671 
        (*(emg_17_container->write))(emg_17_resource_0,emg_17_emg_param_1_4,emg_17_size_cnt,emg_17_emg_param_3_5);
      #line 676 
      ldv_free((void *)emg_17_emg_param_1_4);
      #line 677 
      ldv_free((void *)emg_17_emg_param_3_5);
      #line 679 
      break;
      #line 681 
      default: 
               #line 681 
      ;
      #line 681 
      __VERIFIER_assume(0);
    }
    #line 684 
    if (emg_repeat_cnt_call_17 > 0) {
      #line 685 
      emg_repeat_cnt_call_17 --;
      #line 687 
      goto emg_call_17;
    }
    else 
         #line 689 
         __VERIFIER_assume(0);
  }
  else {
    #line 695 
    (*emg_alias_seq_release)(emg_17_resource_1,emg_17_resource_0);
    #line 698 
    if (emg_repeat_cnt_main_17_1 > 0) {
      #line 699 
      emg_repeat_cnt_main_17_1 --;
      #line 701 
      goto emg_main_17;
    }
    else 
         #line 703 
         __VERIFIER_assume(0);
  }
  #line 709 
  return (void *)0;
  #line 712 
  emg_main_17: 
               #line 712 
  ;
  #line 713 
  if (ldv_undef_int() != 0) {
    #line 715 
    emg_17_ret = emg_wrapper_mboxlog_open(emg_17_resource_1,emg_17_resource_0);
    #line 720 
    emg_17_ret = ldv_filter_err_code(emg_17_ret);
    #line 723 
    if (ldv_undef_int() != 0) {
      #line 725 
      __VERIFIER_assume(emg_17_ret == 0);
      #line 729 
      goto emg_call_17;
    }
    else {
      #line 734 
      __VERIFIER_assume(emg_17_ret != 0);
      #line 737 
      if (emg_repeat_cnt_main_17_0 > 0) {
        #line 738 
        emg_repeat_cnt_main_17_0 --;
        #line 740 
        goto emg_main_17;
      }
      else 
           #line 742 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 749 
       ldv_free((void *)emg_17_resource_0);
  #line 757 
  return (void *)0;
}

#line 762  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_resources_fops(void *arg0)
{
  #line 765 
  struct file_operations *emg_18_container;
  #line 766 
  long long emg_18_emg_param_1_0;
  #line 767 
  char *emg_18_emg_param_1_2;
  #line 768 
  char *emg_18_emg_param_1_4;
  #line 769 
  int emg_18_emg_param_2_1;
  #line 770 
  long long *emg_18_emg_param_3_3;
  #line 771 
  long long *emg_18_emg_param_3_5;
  #line 772 
  struct file *emg_18_resource_0;
  #line 773 
  struct inode *emg_18_resource_1;
  #line 774 
  int emg_18_ret;
  #line 775 
  unsigned long emg_18_size_cnt;
  #line 776 
  int emg_repeat_cnt_main_18_1 = 1;
  #line 777 
  int emg_repeat_cnt_call_18 = 1;
  #line 778 
  int emg_repeat_cnt_main_18_0 = 1;
  #line 780 
  struct emg_struct_character_driver_scenario_interfaces_proc_fops_16 *data = (struct emg_struct_character_driver_scenario_interfaces_proc_fops_16 *)arg0;
  #line 784 
  emg_18_ret = ldv_undef_int();
  #line 785 
  emg_18_container = emg_alias_resources_fops;
  #line 786 
  emg_18_ret = ldv_undef_int();
  #line 788 
  __VERIFIER_assume(data->arg0 == emg_alias_resources_fops);
  #line 790 
  if (data != (struct emg_struct_character_driver_scenario_interfaces_proc_fops_16 *)0) {
    #line 791 
    emg_18_container = data->arg0;
    #line 792 
    ldv_free((void *)data);
  }
  #line 797 
  emg_18_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 798 
  emg_18_size_cnt = (unsigned long)ldv_undef_int();
  #line 802 
  goto emg_main_18;
  #line 806 
  return (void *)0;
  #line 809 
  emg_call_18: 
               #line 809 
  ;
  #line 810 
  if (ldv_undef_int() != 0) {
    #line 811 
    switch (ldv_undef_int()) {
      #line 812 
      case 0: 
              #line 812 
      ;
      #line 814 
      emg_18_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 814 
      emg_18_emg_param_1_2 = emg_18_emg_param_1_2;
      #line 815 
      emg_18_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 815 
      emg_18_emg_param_3_3 = emg_18_emg_param_3_3;
      #line 819 
      seq_read(emg_18_resource_0,emg_18_emg_param_1_2,emg_18_size_cnt,emg_18_emg_param_3_3);
      #line 823 
      ldv_free((void *)emg_18_emg_param_1_2);
      #line 824 
      ldv_free((void *)emg_18_emg_param_3_3);
      #line 826 
      break;
      #line 828 
      case 1: 
              #line 828 
      ;
      #line 830 
      seq_lseek(emg_18_resource_0,emg_18_emg_param_1_0,emg_18_emg_param_2_1);
      #line 832 
      break;
      #line 834 
      case 2: 
              #line 834 
      ;
      #line 841 
      __VERIFIER_assume(emg_18_size_cnt <= 2147479552UL);
      #line 842 
      emg_18_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 842 
      emg_18_emg_param_1_4 = emg_18_emg_param_1_4;
      #line 843 
      emg_18_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 843 
      emg_18_emg_param_3_5 = emg_18_emg_param_3_5;
      #line 847 
      if (emg_18_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 848 
        (*(emg_18_container->write))(emg_18_resource_0,emg_18_emg_param_1_4,emg_18_size_cnt,emg_18_emg_param_3_5);
      #line 853 
      ldv_free((void *)emg_18_emg_param_1_4);
      #line 854 
      ldv_free((void *)emg_18_emg_param_3_5);
      #line 856 
      break;
      #line 858 
      default: 
               #line 858 
      ;
      #line 858 
      __VERIFIER_assume(0);
    }
    #line 861 
    if (emg_repeat_cnt_call_18 > 0) {
      #line 862 
      emg_repeat_cnt_call_18 --;
      #line 864 
      goto emg_call_18;
    }
    else 
         #line 866 
         __VERIFIER_assume(0);
  }
  else {
    #line 872 
    (*emg_alias_single_release)(emg_18_resource_1,emg_18_resource_0);
    #line 875 
    if (emg_repeat_cnt_main_18_1 > 0) {
      #line 876 
      emg_repeat_cnt_main_18_1 --;
      #line 878 
      goto emg_main_18;
    }
    else 
         #line 880 
         __VERIFIER_assume(0);
  }
  #line 886 
  return (void *)0;
  #line 889 
  emg_main_18: 
               #line 889 
  ;
  #line 890 
  if (ldv_undef_int() != 0) {
    #line 892 
    emg_18_ret = emg_wrapper_resources_open(emg_18_resource_1,emg_18_resource_0);
    #line 897 
    emg_18_ret = ldv_filter_err_code(emg_18_ret);
    #line 900 
    if (ldv_undef_int() != 0) {
      #line 902 
      __VERIFIER_assume(emg_18_ret == 0);
      #line 906 
      goto emg_call_18;
    }
    else {
      #line 911 
      __VERIFIER_assume(emg_18_ret != 0);
      #line 914 
      if (emg_repeat_cnt_main_18_0 > 0) {
        #line 915 
        emg_repeat_cnt_main_18_0 --;
        #line 917 
        goto emg_main_18;
      }
      else 
           #line 919 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 926 
       ldv_free((void *)emg_18_resource_0);
  #line 934 
  return (void *)0;
}

#line 939  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_sge_qinfo_debugfs_fops(void *arg0)
{
  #line 942 
  struct file_operations *emg_19_container;
  #line 943 
  long long emg_19_emg_param_1_0;
  #line 944 
  char *emg_19_emg_param_1_2;
  #line 945 
  char *emg_19_emg_param_1_4;
  #line 946 
  int emg_19_emg_param_2_1;
  #line 947 
  long long *emg_19_emg_param_3_3;
  #line 948 
  long long *emg_19_emg_param_3_5;
  #line 949 
  struct file *emg_19_resource_0;
  #line 950 
  struct inode *emg_19_resource_1;
  #line 951 
  int emg_19_ret;
  #line 952 
  unsigned long emg_19_size_cnt;
  #line 953 
  int emg_repeat_cnt_main_19_0 = 1;
  #line 954 
  int emg_repeat_cnt_call_19 = 1;
  #line 955 
  int emg_repeat_cnt_main_19_1 = 1;
  #line 957 
  struct emg_struct_character_driver_scenario_interfaces_proc_fops_16 *data = (struct emg_struct_character_driver_scenario_interfaces_proc_fops_16 *)arg0;
  #line 961 
  emg_19_ret = ldv_undef_int();
  #line 962 
  emg_19_container = emg_alias_sge_qinfo_debugfs_fops;
  #line 963 
  emg_19_ret = ldv_undef_int();
  #line 965 
  __VERIFIER_assume(data->arg0 == emg_alias_sge_qinfo_debugfs_fops);
  #line 967 
  if (data != (struct emg_struct_character_driver_scenario_interfaces_proc_fops_16 *)0) {
    #line 968 
    emg_19_container = data->arg0;
    #line 969 
    ldv_free((void *)data);
  }
  #line 974 
  emg_19_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 975 
  emg_19_size_cnt = (unsigned long)ldv_undef_int();
  #line 979 
  goto emg_main_19;
  #line 983 
  return (void *)0;
  #line 986 
  emg_call_19: 
               #line 986 
  ;
  #line 987 
  if (ldv_undef_int() != 0) {
    #line 988 
    switch (ldv_undef_int()) {
      #line 989 
      case 0: 
              #line 989 
      ;
      #line 991 
      emg_19_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 991 
      emg_19_emg_param_1_2 = emg_19_emg_param_1_2;
      #line 992 
      emg_19_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 992 
      emg_19_emg_param_3_3 = emg_19_emg_param_3_3;
      #line 996 
      seq_read(emg_19_resource_0,emg_19_emg_param_1_2,emg_19_size_cnt,emg_19_emg_param_3_3);
      #line 1000 
      ldv_free((void *)emg_19_emg_param_1_2);
      #line 1001 
      ldv_free((void *)emg_19_emg_param_3_3);
      #line 1003 
      break;
      #line 1005 
      case 1: 
              #line 1005 
      ;
      #line 1007 
      seq_lseek(emg_19_resource_0,emg_19_emg_param_1_0,emg_19_emg_param_2_1);
      #line 1009 
      break;
      #line 1011 
      case 2: 
              #line 1011 
      ;
      #line 1018 
      __VERIFIER_assume(emg_19_size_cnt <= 2147479552UL);
      #line 1019 
      emg_19_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 1019 
      emg_19_emg_param_1_4 = emg_19_emg_param_1_4;
      #line 1020 
      emg_19_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 1020 
      emg_19_emg_param_3_5 = emg_19_emg_param_3_5;
      #line 1024 
      if (emg_19_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 1025 
        (*(emg_19_container->write))(emg_19_resource_0,emg_19_emg_param_1_4,emg_19_size_cnt,emg_19_emg_param_3_5);
      #line 1030 
      ldv_free((void *)emg_19_emg_param_1_4);
      #line 1031 
      ldv_free((void *)emg_19_emg_param_3_5);
      #line 1033 
      break;
      #line 1035 
      default: 
               #line 1035 
      ;
      #line 1035 
      __VERIFIER_assume(0);
    }
    #line 1038 
    if (emg_repeat_cnt_call_19 > 0) {
      #line 1039 
      emg_repeat_cnt_call_19 --;
      #line 1041 
      goto emg_call_19;
    }
    else 
         #line 1043 
         __VERIFIER_assume(0);
  }
  else {
    #line 1049 
    (*emg_alias_seq_release)(emg_19_resource_1,emg_19_resource_0);
    #line 1052 
    if (emg_repeat_cnt_main_19_0 > 0) {
      #line 1053 
      emg_repeat_cnt_main_19_0 --;
      #line 1055 
      goto emg_main_19;
    }
    else 
         #line 1057 
         __VERIFIER_assume(0);
  }
  #line 1063 
  return (void *)0;
  #line 1066 
  emg_main_19: 
               #line 1066 
  ;
  #line 1067 
  if (ldv_undef_int() != 0) {
    #line 1069 
    emg_19_ret = emg_wrapper_sge_qinfo_open(emg_19_resource_1,emg_19_resource_0);
    #line 1074 
    emg_19_ret = ldv_filter_err_code(emg_19_ret);
    #line 1077 
    if (ldv_undef_int() != 0) {
      #line 1079 
      __VERIFIER_assume(emg_19_ret == 0);
      #line 1083 
      goto emg_call_19;
    }
    else {
      #line 1088 
      __VERIFIER_assume(emg_19_ret != 0);
      #line 1091 
      if (emg_repeat_cnt_main_19_1 > 0) {
        #line 1092 
        emg_repeat_cnt_main_19_1 --;
        #line 1094 
        goto emg_main_19;
      }
      else 
           #line 1096 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 1103 
       ldv_free((void *)emg_19_resource_0);
  #line 1111 
  return (void *)0;
}

#line 1116  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/emg/0/environment_model.c"
void *emg_file_operations_character_driver_scenario_sge_qstats_proc_fops(void *arg0)
{
  #line 1119 
  struct file_operations *emg_20_container;
  #line 1120 
  long long emg_20_emg_param_1_0;
  #line 1121 
  char *emg_20_emg_param_1_2;
  #line 1122 
  char *emg_20_emg_param_1_4;
  #line 1123 
  int emg_20_emg_param_2_1;
  #line 1124 
  long long *emg_20_emg_param_3_3;
  #line 1125 
  long long *emg_20_emg_param_3_5;
  #line 1126 
  struct file *emg_20_resource_0;
  #line 1127 
  struct inode *emg_20_resource_1;
  #line 1128 
  int emg_20_ret;
  #line 1129 
  unsigned long emg_20_size_cnt;
  #line 1130 
  int emg_repeat_cnt_main_20_0 = 1;
  #line 1131 
  int emg_repeat_cnt_call_20 = 1;
  #line 1132 
  int emg_repeat_cnt_main_20_1 = 1;
  #line 1134 
  struct emg_struct_character_driver_scenario_interfaces_proc_fops_16 *data = (struct emg_struct_character_driver_scenario_interfaces_proc_fops_16 *)arg0;
  #line 1138 
  emg_20_ret = ldv_undef_int();
  #line 1139 
  emg_20_container = emg_alias_sge_qstats_proc_fops;
  #line 1140 
  emg_20_ret = ldv_undef_int();
  #line 1142 
  __VERIFIER_assume(data->arg0 == emg_alias_sge_qstats_proc_fops);
  #line 1144 
  if (data != (struct emg_struct_character_driver_scenario_interfaces_proc_fops_16 *)0) {
    #line 1145 
    emg_20_container = data->arg0;
    #line 1146 
    ldv_free((void *)data);
  }
  #line 1151 
  emg_20_resource_0 = (struct file *)ldv_xmalloc(520UL);
  #line 1152 
  emg_20_size_cnt = (unsigned long)ldv_undef_int();
  #line 1156 
  goto emg_main_20;
  #line 1160 
  return (void *)0;
  #line 1163 
  emg_call_20: 
               #line 1163 
  ;
  #line 1164 
  if (ldv_undef_int() != 0) {
    #line 1165 
    switch (ldv_undef_int()) {
      #line 1166 
      case 0: 
              #line 1166 
      ;
      #line 1168 
      emg_20_emg_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 1168 
      emg_20_emg_param_1_2 = emg_20_emg_param_1_2;
      #line 1169 
      emg_20_emg_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 1169 
      emg_20_emg_param_3_3 = emg_20_emg_param_3_3;
      #line 1173 
      seq_read(emg_20_resource_0,emg_20_emg_param_1_2,emg_20_size_cnt,emg_20_emg_param_3_3);
      #line 1177 
      ldv_free((void *)emg_20_emg_param_1_2);
      #line 1178 
      ldv_free((void *)emg_20_emg_param_3_3);
      #line 1180 
      break;
      #line 1182 
      case 1: 
              #line 1182 
      ;
      #line 1184 
      seq_lseek(emg_20_resource_0,emg_20_emg_param_1_0,emg_20_emg_param_2_1);
      #line 1186 
      break;
      #line 1188 
      case 2: 
              #line 1188 
      ;
      #line 1195 
      __VERIFIER_assume(emg_20_size_cnt <= 2147479552UL);
      #line 1196 
      emg_20_emg_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      #line 1196 
      emg_20_emg_param_1_4 = emg_20_emg_param_1_4;
      #line 1197 
      emg_20_emg_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      #line 1197 
      emg_20_emg_param_3_5 = emg_20_emg_param_3_5;
      #line 1201 
      if (emg_20_container->write != (ssize_t (*)(struct file *, char *, size_t , loff_t *))0) 
        #line 1202 
        (*(emg_20_container->write))(emg_20_resource_0,emg_20_emg_param_1_4,emg_20_size_cnt,emg_20_emg_param_3_5);
      #line 1207 
      ldv_free((void *)emg_20_emg_param_1_4);
      #line 1208 
      ldv_free((void *)emg_20_emg_param_3_5);
      #line 1210 
      break;
      #line 1212 
      default: 
               #line 1212 
      ;
      #line 1212 
      __VERIFIER_assume(0);
    }
    #line 1215 
    if (emg_repeat_cnt_call_20 > 0) {
      #line 1216 
      emg_repeat_cnt_call_20 --;
      #line 1218 
      goto emg_call_20;
    }
    else 
         #line 1220 
         __VERIFIER_assume(0);
  }
  else {
    #line 1226 
    (*emg_alias_seq_release)(emg_20_resource_1,emg_20_resource_0);
    #line 1229 
    if (emg_repeat_cnt_main_20_0 > 0) {
      #line 1230 
      emg_repeat_cnt_main_20_0 --;
      #line 1232 
      goto emg_main_20;
    }
    else 
         #line 1234 
         __VERIFIER_assume(0);
  }
  #line 1240 
  return (void *)0;
  #line 1243 
  emg_main_20: 
               #line 1243 
  ;
  #line 1244 
  if (ldv_undef_int() != 0) {
    #line 1246 
    emg_20_ret = emg_wrapper_sge_qstats_open(emg_20_resource_1,emg_20_resource_0);
    #line 1251 
    emg_20_ret = ldv_filter_err_code(emg_20_ret);
    #line 1254 
    if (ldv_undef_int() != 0) {
      #line 1256 
      __VERIFIER_assume(emg_20_ret == 0);
      #line 1260 
      goto emg_call_20;
    }
    else {
      #line 1265 
      __VERIFIER_assume(emg_20_ret != 0);
      #line 1268 
      if (emg_repeat_cnt_main_20_1 > 0) {
        #line 1269 
        emg_repeat_cnt_main_20_1 --;
        #line 1271 
        goto emg_main_20;
      }
      else 
           #line 1273 
           __VERIFIER_assume(0);
    }
  }
  else 
       #line 1280 
       ldv_free((void *)emg_20_resource_0);
  #line 1288 
  return (void *)0;
}

#line 1293  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/emg/0/environment_model.c"
void *emg_interrupt_interrupt_scenario_t4vf_sge_intr_msix(void *arg0)
{
  #line 1296 
  enum irqreturn (*emg_21_callback)(int , void *);
  #line 1297 
  void *emg_21_data;
  #line 1298 
  int emg_21_line;
  #line 1299 
  enum irqreturn emg_21_ret_val;
  #line 1300 
  enum irqreturn (*emg_21_thread)(int , void *);
  #line 1302 
  struct emg_struct_interrupt_scenario_t4vf_sge_intr_msix_21 *data = (struct emg_struct_interrupt_scenario_t4vf_sge_intr_msix_21 *)arg0;
  #line 1305 
  emg_21_callback = & t4vf_sge_intr_msix;
  #line 1308 
  if (data != (struct emg_struct_interrupt_scenario_t4vf_sge_intr_msix_21 *)0) {
    #line 1309 
    emg_21_line = data->arg0;
    #line 1310 
    emg_21_callback = data->arg1;
    #line 1311 
    emg_21_thread = data->arg2;
    #line 1312 
    emg_21_data = data->arg3;
    #line 1313 
    ldv_free((void *)data);
  }
  #line 1319 
  ldv_switch_to_interrupt_context();
  #line 1323 
  emg_21_ret_val = t4vf_sge_intr_msix(emg_21_line,emg_21_data);
  #line 1328 
  ldv_switch_to_process_context();
  #line 1331 
  if (ldv_undef_int() != 0) {
    #line 1333 
    __VERIFIER_assume(emg_21_ret_val == (unsigned int)IRQ_WAKE_THREAD);
    #line 1337 
    if (emg_21_thread != (enum irqreturn (*)(int , void *))0) 
                                                              #line 1338 
                                                              (*emg_21_thread)(emg_21_line,emg_21_data);
  }
  else 
       #line 1343 
       __VERIFIER_assume(emg_21_ret_val != (unsigned int)IRQ_WAKE_THREAD);
  #line 1351 
  return (void *)0;
}

#line 1356  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/emg/0/environment_model.c"
void *emg_net_random_allocationless_scenario_cxgb4vf_get_coalesce(void *arg0)
{
  #line 1359 
  struct net_device *emg_22_container;
  #line 1360 
  struct sk_buff *emg_22_emg_param_0_20;
  #line 1361 
  struct ethtool_coalesce *emg_22_emg_param_1_0;
  #line 1362 
  struct ethtool_drvinfo *emg_22_emg_param_1_1;
  #line 1363 
  int emg_22_emg_param_1_10;
  #line 1364 
  unsigned int emg_22_emg_param_1_11;
  #line 1365 
  struct ethtool_wolinfo *emg_22_emg_param_1_13;
  #line 1366 
  int emg_22_emg_param_1_14;
  #line 1367 
  struct ifreq *emg_22_emg_param_1_15;
  #line 1368 
  unsigned long long emg_22_emg_param_1_17;
  #line 1369 
  unsigned long long emg_22_emg_param_1_18;
  #line 1370 
  void *emg_22_emg_param_1_19;
  #line 1371 
  struct ethtool_stats *emg_22_emg_param_1_2;
  #line 1372 
  struct ethtool_coalesce *emg_22_emg_param_1_21;
  #line 1373 
  unsigned int emg_22_emg_param_1_22;
  #line 1374 
  enum ethtool_phys_id_state *emg_22_emg_param_1_23;
  #line 1375 
  struct ethtool_ringparam *emg_22_emg_param_1_24;
  #line 1376 
  struct ethtool_fecparam *emg_22_emg_param_1_4;
  #line 1377 
  struct ethtool_link_ksettings *emg_22_emg_param_1_5;
  #line 1378 
  struct ethtool_pauseparam *emg_22_emg_param_1_6;
  #line 1379 
  struct ethtool_regs *emg_22_emg_param_1_7;
  #line 1380 
  struct ethtool_ringparam *emg_22_emg_param_1_9;
  #line 1381 
  unsigned char *emg_22_emg_param_2_12;
  #line 1382 
  int emg_22_emg_param_2_16;
  #line 1383 
  unsigned long long *emg_22_emg_param_2_3;
  #line 1384 
  void *emg_22_emg_param_2_8;
  #line 1385 
  int emg_repeat_cnt_call_22 = 1;
  #line 1387 
  struct emg_struct_random_allocationless_scenario_cxgb4vf_get_coalesce_22 *data = (struct emg_struct_random_allocationless_scenario_cxgb4vf_get_coalesce_22 *)arg0;
  #line 1392 
  if (data != (struct emg_struct_random_allocationless_scenario_cxgb4vf_get_coalesce_22 *)0) {
    #line 1393 
    emg_22_container = data->arg0;
    #line 1394 
    ldv_free((void *)data);
  }
  #line 1399 
  goto emg_call_22;
  #line 1403 
  return (void *)0;
  #line 1406 
  emg_call_22: 
               #line 1406 
  ;
  #line 1407 
  switch (ldv_undef_int()) {
    #line 1408 
    case 0: 
            #line 1408 
    ;
    #line 1410 
    emg_22_emg_param_1_24 = (struct ethtool_ringparam *)ldv_xmalloc_unknown_size(0UL);
    #line 1410 
    emg_22_emg_param_1_24 = emg_22_emg_param_1_24;
    #line 1414 
    emg_wrapper_cxgb4vf_set_ringparam(emg_22_container,emg_22_emg_param_1_24);
    #line 1418 
    ldv_free((void *)emg_22_emg_param_1_24);
    #line 1420 
    break;
    #line 1422 
    case 1: 
            #line 1422 
    ;
    #line 1424 
    emg_22_emg_param_1_23 = (enum ethtool_phys_id_state *)ldv_xmalloc_unknown_size(0UL);
    #line 1424 
    emg_22_emg_param_1_23 = emg_22_emg_param_1_23;
    #line 1428 
    emg_wrapper_cxgb4vf_phys_id(emg_22_container,*emg_22_emg_param_1_23);
    #line 1432 
    ldv_free((void *)emg_22_emg_param_1_23);
    #line 1434 
    break;
    #line 1436 
    case 2: 
            #line 1436 
    ;
    #line 1438 
    emg_wrapper_cxgb4vf_set_msglevel(emg_22_container,emg_22_emg_param_1_22);
    #line 1440 
    break;
    #line 1442 
    case 3: 
            #line 1442 
    ;
    #line 1444 
    emg_22_emg_param_1_21 = (struct ethtool_coalesce *)ldv_xmalloc_unknown_size(0UL);
    #line 1444 
    emg_22_emg_param_1_21 = emg_22_emg_param_1_21;
    #line 1448 
    emg_wrapper_cxgb4vf_set_coalesce(emg_22_container,emg_22_emg_param_1_21);
    #line 1452 
    ldv_free((void *)emg_22_emg_param_1_21);
    #line 1454 
    break;
    #line 1456 
    case 4: 
            #line 1456 
    ;
    #line 1458 
    eth_validate_addr(emg_22_container);
    #line 1460 
    break;
    #line 1462 
    case 5: 
            #line 1462 
    ;
    #line 1464 
    emg_22_emg_param_0_20 = (struct sk_buff *)ldv_xmalloc_unknown_size(0UL);
    #line 1464 
    emg_22_emg_param_0_20 = emg_22_emg_param_0_20;
    #line 1468 
    t4vf_eth_xmit(emg_22_emg_param_0_20,emg_22_container);
    #line 1472 
    ldv_free((void *)emg_22_emg_param_0_20);
    #line 1474 
    break;
    #line 1476 
    case 6: 
            #line 1476 
    ;
    #line 1478 
    emg_wrapper_cxgb4vf_set_rxmode(emg_22_container);
    #line 1480 
    break;
    #line 1482 
    case 7: 
            #line 1482 
    ;
    #line 1484 
    emg_22_emg_param_1_19 = ldv_xmalloc_unknown_size(0UL);
    #line 1484 
    emg_22_emg_param_1_19 = emg_22_emg_param_1_19;
    #line 1488 
    emg_wrapper_cxgb4vf_set_mac_addr(emg_22_container,emg_22_emg_param_1_19);
    #line 1492 
    ldv_free(emg_22_emg_param_1_19);
    #line 1494 
    break;
    #line 1496 
    case 8: 
            #line 1496 
    ;
    #line 1498 
    emg_wrapper_cxgb4vf_set_features(emg_22_container,emg_22_emg_param_1_18);
    #line 1500 
    break;
    #line 1502 
    case 9: 
            #line 1502 
    ;
    #line 1504 
    emg_wrapper_cxgb4vf_poll_controller(emg_22_container);
    #line 1506 
    break;
    #line 1508 
    case 10: 
             #line 1508 
    ;
    #line 1510 
    emg_wrapper_cxgb4vf_get_stats(emg_22_container);
    #line 1512 
    break;
    #line 1514 
    case 11: 
             #line 1514 
    ;
    #line 1516 
    emg_wrapper_cxgb4vf_fix_features(emg_22_container,emg_22_emg_param_1_17);
    #line 1518 
    break;
    #line 1520 
    case 12: 
             #line 1520 
    ;
    #line 1522 
    emg_22_emg_param_1_15 = (struct ifreq *)ldv_xmalloc_unknown_size(0UL);
    #line 1522 
    emg_22_emg_param_1_15 = emg_22_emg_param_1_15;
    #line 1526 
    emg_wrapper_cxgb4vf_do_ioctl(emg_22_container,emg_22_emg_param_1_15,emg_22_emg_param_2_16);
    #line 1530 
    ldv_free((void *)emg_22_emg_param_1_15);
    #line 1532 
    break;
    #line 1534 
    case 13: 
             #line 1534 
    ;
    #line 1536 
    emg_wrapper_cxgb4vf_change_mtu(emg_22_container,emg_22_emg_param_1_14);
    #line 1538 
    break;
    #line 1540 
    case 14: 
             #line 1540 
    ;
    #line 1542 
    emg_22_emg_param_1_13 = (struct ethtool_wolinfo *)ldv_xmalloc_unknown_size(0UL);
    #line 1542 
    emg_22_emg_param_1_13 = emg_22_emg_param_1_13;
    #line 1546 
    emg_wrapper_cxgb4vf_get_wol(emg_22_container,emg_22_emg_param_1_13);
    #line 1550 
    ldv_free((void *)emg_22_emg_param_1_13);
    #line 1552 
    break;
    #line 1554 
    case 15: 
             #line 1554 
    ;
    #line 1556 
    emg_22_emg_param_2_12 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 1556 
    emg_22_emg_param_2_12 = emg_22_emg_param_2_12;
    #line 1560 
    emg_wrapper_cxgb4vf_get_strings(emg_22_container,emg_22_emg_param_1_11,emg_22_emg_param_2_12);
    #line 1564 
    ldv_free((void *)emg_22_emg_param_2_12);
    #line 1566 
    break;
    #line 1568 
    case 16: 
             #line 1568 
    ;
    #line 1570 
    emg_wrapper_cxgb4vf_get_sset_count(emg_22_container,emg_22_emg_param_1_10);
    #line 1572 
    break;
    #line 1574 
    case 17: 
             #line 1574 
    ;
    #line 1576 
    emg_22_emg_param_1_9 = (struct ethtool_ringparam *)ldv_xmalloc_unknown_size(0UL);
    #line 1576 
    emg_22_emg_param_1_9 = emg_22_emg_param_1_9;
    #line 1580 
    emg_wrapper_cxgb4vf_get_ringparam(emg_22_container,emg_22_emg_param_1_9);
    #line 1584 
    ldv_free((void *)emg_22_emg_param_1_9);
    #line 1586 
    break;
    #line 1588 
    case 18: 
             #line 1588 
    ;
    #line 1590 
    emg_wrapper_cxgb4vf_get_regs_len(emg_22_container);
    #line 1592 
    break;
    #line 1594 
    case 19: 
             #line 1594 
    ;
    #line 1596 
    emg_22_emg_param_1_7 = (struct ethtool_regs *)ldv_xmalloc_unknown_size(0UL);
    #line 1596 
    emg_22_emg_param_1_7 = emg_22_emg_param_1_7;
    #line 1597 
    emg_22_emg_param_2_8 = ldv_xmalloc_unknown_size(0UL);
    #line 1597 
    emg_22_emg_param_2_8 = emg_22_emg_param_2_8;
    #line 1601 
    emg_wrapper_cxgb4vf_get_regs(emg_22_container,emg_22_emg_param_1_7,emg_22_emg_param_2_8);
    #line 1605 
    ldv_free((void *)emg_22_emg_param_1_7);
    #line 1606 
    ldv_free(emg_22_emg_param_2_8);
    #line 1608 
    break;
    #line 1610 
    case 20: 
             #line 1610 
    ;
    #line 1612 
    emg_22_emg_param_1_6 = (struct ethtool_pauseparam *)ldv_xmalloc_unknown_size(0UL);
    #line 1612 
    emg_22_emg_param_1_6 = emg_22_emg_param_1_6;
    #line 1616 
    emg_wrapper_cxgb4vf_get_pauseparam(emg_22_container,emg_22_emg_param_1_6);
    #line 1620 
    ldv_free((void *)emg_22_emg_param_1_6);
    #line 1622 
    break;
    #line 1624 
    case 21: 
             #line 1624 
    ;
    #line 1626 
    emg_wrapper_cxgb4vf_get_msglevel(emg_22_container);
    #line 1628 
    break;
    #line 1630 
    case 22: 
             #line 1630 
    ;
    #line 1632 
    emg_22_emg_param_1_5 = (struct ethtool_link_ksettings *)ldv_xmalloc_unknown_size(0UL);
    #line 1632 
    emg_22_emg_param_1_5 = emg_22_emg_param_1_5;
    #line 1636 
    emg_wrapper_cxgb4vf_get_link_ksettings(emg_22_container,emg_22_emg_param_1_5);
    #line 1640 
    ldv_free((void *)emg_22_emg_param_1_5);
    #line 1642 
    break;
    #line 1644 
    case 23: 
             #line 1644 
    ;
    #line 1646 
    ethtool_op_get_link(emg_22_container);
    #line 1648 
    break;
    #line 1650 
    case 24: 
             #line 1650 
    ;
    #line 1652 
    emg_22_emg_param_1_4 = (struct ethtool_fecparam *)ldv_xmalloc_unknown_size(0UL);
    #line 1652 
    emg_22_emg_param_1_4 = emg_22_emg_param_1_4;
    #line 1656 
    emg_wrapper_cxgb4vf_get_fecparam(emg_22_container,emg_22_emg_param_1_4);
    #line 1660 
    ldv_free((void *)emg_22_emg_param_1_4);
    #line 1662 
    break;
    #line 1664 
    case 25: 
             #line 1664 
    ;
    #line 1666 
    emg_22_emg_param_1_2 = (struct ethtool_stats *)ldv_xmalloc_unknown_size(0UL);
    #line 1666 
    emg_22_emg_param_1_2 = emg_22_emg_param_1_2;
    #line 1667 
    emg_22_emg_param_2_3 = (unsigned long long *)ldv_xmalloc_unknown_size(0UL);
    #line 1667 
    emg_22_emg_param_2_3 = emg_22_emg_param_2_3;
    #line 1671 
    emg_wrapper_cxgb4vf_get_ethtool_stats(emg_22_container,emg_22_emg_param_1_2,emg_22_emg_param_2_3);
    #line 1675 
    ldv_free((void *)emg_22_emg_param_1_2);
    #line 1676 
    ldv_free((void *)emg_22_emg_param_2_3);
    #line 1678 
    break;
    #line 1680 
    case 26: 
             #line 1680 
    ;
    #line 1682 
    emg_22_emg_param_1_1 = (struct ethtool_drvinfo *)ldv_xmalloc_unknown_size(0UL);
    #line 1682 
    emg_22_emg_param_1_1 = emg_22_emg_param_1_1;
    #line 1686 
    emg_wrapper_cxgb4vf_get_drvinfo(emg_22_container,emg_22_emg_param_1_1);
    #line 1690 
    ldv_free((void *)emg_22_emg_param_1_1);
    #line 1692 
    break;
    #line 1694 
    case 27: 
             #line 1694 
    ;
    #line 1696 
    emg_22_emg_param_1_0 = (struct ethtool_coalesce *)ldv_xmalloc_unknown_size(0UL);
    #line 1696 
    emg_22_emg_param_1_0 = emg_22_emg_param_1_0;
    #line 1700 
    emg_wrapper_cxgb4vf_get_coalesce(emg_22_container,emg_22_emg_param_1_0);
    #line 1704 
    ldv_free((void *)emg_22_emg_param_1_0);
    #line 1707 
    if (emg_repeat_cnt_call_22 > 0) {
      #line 1708 
      emg_repeat_cnt_call_22 --;
      #line 1710 
      goto emg_call_22;
    }
    else 
         #line 1712 
         __VERIFIER_assume(0);
    #line 1716 
    break;
    #line 1718 
    case 28: 
             #line 1718 
    ;
    #line 1722 
    break;
    #line 1724 
    default: 
             #line 1724 
    ;
    #line 1724 
    __VERIFIER_assume(0);
  }
  #line 1727 
  return (void *)0;
}

#line 1732  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/emg/0/environment_model.c"
void *emg_pci_pci_scenario_cxgb4vf_driver(void *arg0)
{
  #line 1735 
  int emg_23_choice;
  #line 1736 
  struct pci_driver *emg_23_container;
  #line 1737 
  struct pci_device_id *emg_23_device_id;
  #line 1738 
  struct pci_dev *emg_23_resource_0;
  #line 1739 
  struct pm_message emg_23_resource_1;
  #line 1740 
  int emg_23_ret;
  #line 1741 
  int emg_repeat_cnt_call_23_1 = 1;
  #line 1742 
  int emg_repeat_cnt_main_23_0 = 1;
  #line 1743 
  int emg_repeat_cnt_call_23_0 = 1;
  #line 1744 
  int emg_repeat_cnt_main_23_1 = 1;
  #line 1746 
  struct emg_struct_pci_scenario_cxgb4vf_driver_23 *data = (struct emg_struct_pci_scenario_cxgb4vf_driver_23 *)arg0;
  #line 1750 
  emg_23_choice = 0;
  #line 1751 
  emg_23_ret = ldv_undef_int();
  #line 1752 
  emg_23_choice = 0;
  #line 1753 
  emg_23_container = emg_alias_cxgb4vf_driver;
  #line 1754 
  emg_23_ret = ldv_undef_int();
  #line 1756 
  __VERIFIER_assume(data->arg0 == emg_alias_cxgb4vf_driver);
  #line 1758 
  if (data != (struct emg_struct_pci_scenario_cxgb4vf_driver_23 *)0) {
    #line 1759 
    emg_23_container = data->arg0;
    #line 1760 
    ldv_free((void *)data);
  }
  #line 1765 
  emg_23_resource_0 = (struct pci_dev *)ldv_xmalloc(3312UL);
  #line 1766 
  emg_23_choice = __ldv_undef_int_range(0,119);
  #line 1767 
  emg_23_device_id = emg_23_container->id_table + (unsigned long)emg_23_choice;
  #line 1771 
  goto emg_main_23;
  #line 1775 
  return (void *)0;
  #line 1778 
  emg_call_23: 
               #line 1778 
  ;
  #line 1779 
  switch (ldv_undef_int()) {
    #line 1780 
    case 0: 
            #line 1780 
    ;
    #line 1785 
    if (emg_repeat_cnt_call_23_1 > 0) {
      #line 1786 
      emg_repeat_cnt_call_23_1 --;
      #line 1788 
      goto emg_call_23;
    }
    else 
         #line 1790 
         __VERIFIER_assume(0);
    #line 1794 
    break;
    #line 1796 
    case 1: 
            #line 1796 
    ;
    #line 1798 
    if (emg_23_container->suspend != (int (*)(struct pci_dev *, pm_message_t ))0) 
      #line 1799 
      emg_23_ret = (*(emg_23_container->suspend))(emg_23_resource_0,emg_23_resource_1); else 
                                                                    #line 1801 
                                                                    emg_23_ret = ldv_undef_int();
    #line 1807 
    emg_23_ret = ldv_filter_err_code(emg_23_ret);
    #line 1811 
    if (emg_23_container->resume != (int (*)(struct pci_dev *))0) 
                                                                  #line 1812 
                                                                  (*(emg_23_container->resume))(emg_23_resource_0);
    #line 1816 
    if (emg_repeat_cnt_call_23_0 > 0) {
      #line 1817 
      emg_repeat_cnt_call_23_0 --;
      #line 1819 
      goto emg_call_23;
    }
    else 
         #line 1821 
         __VERIFIER_assume(0);
    #line 1825 
    break;
    #line 1827 
    case 2: 
            #line 1827 
    ;
    #line 1829 
    emg_wrapper_cxgb4vf_pci_shutdown(emg_23_resource_0);
    #line 1833 
    emg_wrapper_cxgb4vf_pci_remove(emg_23_resource_0);
    #line 1836 
    if (emg_repeat_cnt_main_23_1 > 0) {
      #line 1837 
      emg_repeat_cnt_main_23_1 --;
      #line 1839 
      goto emg_main_23;
    }
    else 
         #line 1841 
         __VERIFIER_assume(0);
    #line 1845 
    break;
    #line 1847 
    default: 
             #line 1847 
    ;
    #line 1847 
    __VERIFIER_assume(0);
  }
  #line 1850 
  return (void *)0;
  #line 1853 
  emg_main_23: 
               #line 1853 
  ;
  #line 1854 
  if (ldv_undef_int() != 0) {
    #line 1857 
    ldv_pre_probe();
    #line 1861 
    emg_23_ret = emg_wrapper_cxgb4vf_pci_probe(emg_23_resource_0,emg_23_device_id);
    #line 1866 
    emg_23_ret = ldv_post_probe(emg_23_ret);
    #line 1869 
    if (ldv_undef_int() != 0) {
      #line 1871 
      __VERIFIER_assume(emg_23_ret == 0);
      #line 1875 
      goto emg_call_23;
    }
    else 
         #line 1880 
         __VERIFIER_assume(emg_23_ret != 0);
    #line 1884 
    if (emg_repeat_cnt_main_23_0 > 0) {
      #line 1885 
      emg_repeat_cnt_main_23_0 --;
      #line 1887 
      goto emg_main_23;
    }
    else 
         #line 1889 
         __VERIFIER_assume(0);
  }
  else 
       #line 1895 
       ldv_free((void *)emg_23_resource_0);
  #line 1903 
  return (void *)0;
}

#line 1908  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/emg/0/environment_model.c"
void *emg_seq_operations_traverse_kernel_items_scenario_interfaces_seq_ops(void *arg0)
{
  #line 1911 
  long long *emg_24_index;
  #line 1912 
  struct seq_operations *emg_24_ops;
  #line 1913 
  long long *emg_24_ret;
  #line 1914 
  struct seq_file *emg_24_seq_file;
  #line 1915 
  int emg_24_show_ret;
  #line 1916 
  int emg_repeat_cnt_outer_loop_24_1 = 1;
  #line 1917 
  int emg_repeat_cnt_outer_loop_24_0 = 1;
  #line 1918 
  int emg_repeat_cnt_inner_loop_24 = 1;
  #line 1920 
  struct emg_struct_traverse_kernel_items_scenario_interfaces_seq_ops_24 *data = (struct emg_struct_traverse_kernel_items_scenario_interfaces_seq_ops_24 *)arg0;
  #line 1924 
  emg_24_show_ret = ldv_undef_int();
  #line 1925 
  emg_24_ops = emg_alias_interfaces_seq_ops;
  #line 1926 
  emg_24_show_ret = ldv_undef_int();
  #line 1928 
  __VERIFIER_assume(data->arg1 == emg_alias_interfaces_seq_ops);
  #line 1930 
  if (data != (struct emg_struct_traverse_kernel_items_scenario_interfaces_seq_ops_24 *)0) {
    #line 1931 
    emg_24_seq_file = data->arg0;
    #line 1932 
    emg_24_ops = data->arg1;
    #line 1933 
    ldv_free((void *)data);
  }
  #line 1938 
  emg_24_index = (long long *)ldv_xmalloc(8UL);
  #line 1942 
  goto emg_outer_loop_24;
  #line 1946 
  return (void *)0;
  #line 1949 
  emg_inner_loop_24: 
                     #line 1949 
  ;
  #line 1950 
  if (ldv_undef_int() != 0) {
    #line 1952 
    int tmp_1;
    #line 1952 
    if (ldv_is_err_or_null((void *)emg_24_ret)) 
                                                #line 1952 
                                                tmp_1 = 0; else 
                                                                #line 1952 
                                                                tmp_1 = 1;
    #line 1952 
    __VERIFIER_assume(tmp_1);
    #line 1956 
    emg_24_show_ret = emg_wrapper_interfaces_show(emg_24_seq_file,(void *)emg_24_ret);
    #line 1959 
    if (ldv_undef_int() != 0) {
      #line 1961 
      __VERIFIER_assume(emg_24_show_ret >= 0);
      #line 1965 
      emg_24_ret = (long long *)emg_wrapper_interfaces_next(emg_24_seq_file,(void *)emg_24_ret,emg_24_index);
      #line 1968 
      if (emg_repeat_cnt_inner_loop_24 > 0) {
        #line 1969 
        emg_repeat_cnt_inner_loop_24 --;
        #line 1971 
        goto emg_inner_loop_24;
      }
      else 
           #line 1973 
           __VERIFIER_assume(0);
    }
    else {
      #line 1980 
      emg_24_seq_file->index = *emg_24_index;
      #line 1984 
      emg_wrapper_interfaces_stop(emg_24_seq_file,(void *)emg_24_ret);
      #line 1989 
      emg_24_seq_file->index = *emg_24_index;
      #line 1992 
      if (emg_repeat_cnt_outer_loop_24_0 > 0) {
        #line 1993 
        emg_repeat_cnt_outer_loop_24_0 --;
        #line 1995 
        goto emg_outer_loop_24;
      }
      else 
           #line 1997 
           __VERIFIER_assume(0);
    }
  }
  else {
    #line 2004 
    __VERIFIER_assume((int)ldv_is_err_or_null((void *)emg_24_ret));
    #line 2009 
    emg_24_seq_file->index = *emg_24_index;
    #line 2013 
    emg_wrapper_interfaces_stop(emg_24_seq_file,(void *)emg_24_ret);
    #line 2018 
    emg_24_seq_file->index = *emg_24_index;
    #line 2021 
    if (emg_repeat_cnt_outer_loop_24_1 > 0) {
      #line 2022 
      emg_repeat_cnt_outer_loop_24_1 --;
      #line 2024 
      goto emg_outer_loop_24;
    }
    else 
         #line 2026 
         __VERIFIER_assume(0);
  }
  #line 2032 
  return (void *)0;
  #line 2035 
  emg_outer_loop_24: 
                     #line 2035 
  ;
  #line 2036 
  if (ldv_undef_int() != 0) {
    #line 2039 
    *emg_24_index = 0LL;
    #line 2043 
    emg_24_ret = (long long *)emg_wrapper_interfaces_start(emg_24_seq_file,emg_24_index);
    #line 2047 
    goto emg_inner_loop_24;
  }
  else 
       #line 2052 
       ldv_free((void *)emg_24_index);
  #line 2060 
  return (void *)0;
}

#line 2065  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/emg/0/environment_model.c"
void *emg_seq_operations_traverse_kernel_items_scenario_mboxlog_seq_ops(void *arg0)
{
  #line 2068 
  long long *emg_25_index;
  #line 2069 
  struct seq_operations *emg_25_ops;
  #line 2070 
  long long *emg_25_ret;
  #line 2071 
  struct seq_file *emg_25_seq_file;
  #line 2072 
  int emg_25_show_ret;
  #line 2073 
  int emg_repeat_cnt_outer_loop_25_1 = 1;
  #line 2074 
  int emg_repeat_cnt_inner_loop_25 = 1;
  #line 2075 
  int emg_repeat_cnt_outer_loop_25_0 = 1;
  #line 2077 
  struct emg_struct_traverse_kernel_items_scenario_interfaces_seq_ops_24 *data = (struct emg_struct_traverse_kernel_items_scenario_interfaces_seq_ops_24 *)arg0;
  #line 2081 
  emg_25_show_ret = ldv_undef_int();
  #line 2082 
  emg_25_ops = emg_alias_mboxlog_seq_ops;
  #line 2083 
  emg_25_show_ret = ldv_undef_int();
  #line 2085 
  __VERIFIER_assume(data->arg1 == emg_alias_mboxlog_seq_ops);
  #line 2087 
  if (data != (struct emg_struct_traverse_kernel_items_scenario_interfaces_seq_ops_24 *)0) {
    #line 2088 
    emg_25_seq_file = data->arg0;
    #line 2089 
    emg_25_ops = data->arg1;
    #line 2090 
    ldv_free((void *)data);
  }
  #line 2095 
  emg_25_index = (long long *)ldv_xmalloc(8UL);
  #line 2099 
  goto emg_outer_loop_25;
  #line 2103 
  return (void *)0;
  #line 2106 
  emg_inner_loop_25: 
                     #line 2106 
  ;
  #line 2107 
  if (ldv_undef_int() != 0) {
    #line 2109 
    int tmp_1;
    #line 2109 
    if (ldv_is_err_or_null((void *)emg_25_ret)) 
                                                #line 2109 
                                                tmp_1 = 0; else 
                                                                #line 2109 
                                                                tmp_1 = 1;
    #line 2109 
    __VERIFIER_assume(tmp_1);
    #line 2113 
    emg_25_show_ret = emg_wrapper_mboxlog_show(emg_25_seq_file,(void *)emg_25_ret);
    #line 2116 
    if (ldv_undef_int() != 0) {
      #line 2118 
      __VERIFIER_assume(emg_25_show_ret >= 0);
      #line 2122 
      emg_25_ret = (long long *)emg_wrapper_mboxlog_next(emg_25_seq_file,(void *)emg_25_ret,emg_25_index);
      #line 2125 
      if (emg_repeat_cnt_inner_loop_25 > 0) {
        #line 2126 
        emg_repeat_cnt_inner_loop_25 --;
        #line 2128 
        goto emg_inner_loop_25;
      }
      else 
           #line 2130 
           __VERIFIER_assume(0);
    }
    else {
      #line 2137 
      emg_25_seq_file->index = *emg_25_index;
      #line 2141 
      emg_wrapper_mboxlog_stop(emg_25_seq_file,(void *)emg_25_ret);
      #line 2146 
      emg_25_seq_file->index = *emg_25_index;
      #line 2149 
      if (emg_repeat_cnt_outer_loop_25_0 > 0) {
        #line 2150 
        emg_repeat_cnt_outer_loop_25_0 --;
        #line 2152 
        goto emg_outer_loop_25;
      }
      else 
           #line 2154 
           __VERIFIER_assume(0);
    }
  }
  else {
    #line 2161 
    __VERIFIER_assume((int)ldv_is_err_or_null((void *)emg_25_ret));
    #line 2166 
    emg_25_seq_file->index = *emg_25_index;
    #line 2170 
    emg_wrapper_mboxlog_stop(emg_25_seq_file,(void *)emg_25_ret);
    #line 2175 
    emg_25_seq_file->index = *emg_25_index;
    #line 2178 
    if (emg_repeat_cnt_outer_loop_25_1 > 0) {
      #line 2179 
      emg_repeat_cnt_outer_loop_25_1 --;
      #line 2181 
      goto emg_outer_loop_25;
    }
    else 
         #line 2183 
         __VERIFIER_assume(0);
  }
  #line 2189 
  return (void *)0;
  #line 2192 
  emg_outer_loop_25: 
                     #line 2192 
  ;
  #line 2193 
  if (ldv_undef_int() != 0) {
    #line 2196 
    *emg_25_index = 0LL;
    #line 2200 
    emg_25_ret = (long long *)emg_wrapper_mboxlog_start(emg_25_seq_file,emg_25_index);
    #line 2204 
    goto emg_inner_loop_25;
  }
  else 
       #line 2209 
       ldv_free((void *)emg_25_index);
  #line 2217 
  return (void *)0;
}

#line 2222  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/emg/0/environment_model.c"
void *emg_seq_operations_traverse_kernel_items_scenario_sge_qinfo_seq_ops(void *arg0)
{
  #line 2225 
  long long *emg_26_index;
  #line 2226 
  struct seq_operations *emg_26_ops;
  #line 2227 
  long long *emg_26_ret;
  #line 2228 
  struct seq_file *emg_26_seq_file;
  #line 2229 
  int emg_26_show_ret;
  #line 2230 
  int emg_repeat_cnt_outer_loop_26_1 = 1;
  #line 2231 
  int emg_repeat_cnt_inner_loop_26 = 1;
  #line 2232 
  int emg_repeat_cnt_outer_loop_26_0 = 1;
  #line 2234 
  struct emg_struct_traverse_kernel_items_scenario_interfaces_seq_ops_24 *data = (struct emg_struct_traverse_kernel_items_scenario_interfaces_seq_ops_24 *)arg0;
  #line 2238 
  emg_26_show_ret = ldv_undef_int();
  #line 2239 
  emg_26_ops = emg_alias_sge_qinfo_seq_ops;
  #line 2240 
  emg_26_show_ret = ldv_undef_int();
  #line 2242 
  __VERIFIER_assume(data->arg1 == emg_alias_sge_qinfo_seq_ops);
  #line 2244 
  if (data != (struct emg_struct_traverse_kernel_items_scenario_interfaces_seq_ops_24 *)0) {
    #line 2245 
    emg_26_seq_file = data->arg0;
    #line 2246 
    emg_26_ops = data->arg1;
    #line 2247 
    ldv_free((void *)data);
  }
  #line 2252 
  emg_26_index = (long long *)ldv_xmalloc(8UL);
  #line 2256 
  goto emg_outer_loop_26;
  #line 2260 
  return (void *)0;
  #line 2263 
  emg_inner_loop_26: 
                     #line 2263 
  ;
  #line 2264 
  if (ldv_undef_int() != 0) {
    #line 2266 
    int tmp_1;
    #line 2266 
    if (ldv_is_err_or_null((void *)emg_26_ret)) 
                                                #line 2266 
                                                tmp_1 = 0; else 
                                                                #line 2266 
                                                                tmp_1 = 1;
    #line 2266 
    __VERIFIER_assume(tmp_1);
    #line 2270 
    emg_26_show_ret = emg_wrapper_sge_qinfo_show(emg_26_seq_file,(void *)emg_26_ret);
    #line 2273 
    if (ldv_undef_int() != 0) {
      #line 2275 
      __VERIFIER_assume(emg_26_show_ret >= 0);
      #line 2279 
      emg_26_ret = (long long *)emg_wrapper_sge_queue_next(emg_26_seq_file,(void *)emg_26_ret,emg_26_index);
      #line 2282 
      if (emg_repeat_cnt_inner_loop_26 > 0) {
        #line 2283 
        emg_repeat_cnt_inner_loop_26 --;
        #line 2285 
        goto emg_inner_loop_26;
      }
      else 
           #line 2287 
           __VERIFIER_assume(0);
    }
    else {
      #line 2294 
      emg_26_seq_file->index = *emg_26_index;
      #line 2298 
      emg_wrapper_sge_queue_stop(emg_26_seq_file,(void *)emg_26_ret);
      #line 2303 
      emg_26_seq_file->index = *emg_26_index;
      #line 2306 
      if (emg_repeat_cnt_outer_loop_26_0 > 0) {
        #line 2307 
        emg_repeat_cnt_outer_loop_26_0 --;
        #line 2309 
        goto emg_outer_loop_26;
      }
      else 
           #line 2311 
           __VERIFIER_assume(0);
    }
  }
  else {
    #line 2318 
    __VERIFIER_assume((int)ldv_is_err_or_null((void *)emg_26_ret));
    #line 2323 
    emg_26_seq_file->index = *emg_26_index;
    #line 2327 
    emg_wrapper_sge_queue_stop(emg_26_seq_file,(void *)emg_26_ret);
    #line 2332 
    emg_26_seq_file->index = *emg_26_index;
    #line 2335 
    if (emg_repeat_cnt_outer_loop_26_1 > 0) {
      #line 2336 
      emg_repeat_cnt_outer_loop_26_1 --;
      #line 2338 
      goto emg_outer_loop_26;
    }
    else 
         #line 2340 
         __VERIFIER_assume(0);
  }
  #line 2346 
  return (void *)0;
  #line 2349 
  emg_outer_loop_26: 
                     #line 2349 
  ;
  #line 2350 
  if (ldv_undef_int() != 0) {
    #line 2353 
    *emg_26_index = 0LL;
    #line 2357 
    emg_26_ret = (long long *)emg_wrapper_sge_queue_start(emg_26_seq_file,emg_26_index);
    #line 2361 
    goto emg_inner_loop_26;
  }
  else 
       #line 2366 
       ldv_free((void *)emg_26_index);
  #line 2374 
  return (void *)0;
}

#line 2379  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/emg/0/environment_model.c"
void *emg_seq_operations_traverse_kernel_items_scenario_sge_qstats_seq_ops(void *arg0)
{
  #line 2382 
  long long *emg_27_index;
  #line 2383 
  struct seq_operations *emg_27_ops;
  #line 2384 
  long long *emg_27_ret;
  #line 2385 
  struct seq_file *emg_27_seq_file;
  #line 2386 
  int emg_27_show_ret;
  #line 2387 
  int emg_repeat_cnt_outer_loop_27_1 = 1;
  #line 2388 
  int emg_repeat_cnt_outer_loop_27_0 = 1;
  #line 2389 
  int emg_repeat_cnt_inner_loop_27 = 1;
  #line 2391 
  struct emg_struct_traverse_kernel_items_scenario_interfaces_seq_ops_24 *data = (struct emg_struct_traverse_kernel_items_scenario_interfaces_seq_ops_24 *)arg0;
  #line 2395 
  emg_27_show_ret = ldv_undef_int();
  #line 2396 
  emg_27_ops = emg_alias_sge_qstats_seq_ops;
  #line 2397 
  emg_27_show_ret = ldv_undef_int();
  #line 2399 
  __VERIFIER_assume(data->arg1 == emg_alias_sge_qstats_seq_ops);
  #line 2401 
  if (data != (struct emg_struct_traverse_kernel_items_scenario_interfaces_seq_ops_24 *)0) {
    #line 2402 
    emg_27_seq_file = data->arg0;
    #line 2403 
    emg_27_ops = data->arg1;
    #line 2404 
    ldv_free((void *)data);
  }
  #line 2409 
  emg_27_index = (long long *)ldv_xmalloc(8UL);
  #line 2413 
  goto emg_outer_loop_27;
  #line 2417 
  return (void *)0;
  #line 2420 
  emg_inner_loop_27: 
                     #line 2420 
  ;
  #line 2421 
  if (ldv_undef_int() != 0) {
    #line 2423 
    int tmp_1;
    #line 2423 
    if (ldv_is_err_or_null((void *)emg_27_ret)) 
                                                #line 2423 
                                                tmp_1 = 0; else 
                                                                #line 2423 
                                                                tmp_1 = 1;
    #line 2423 
    __VERIFIER_assume(tmp_1);
    #line 2427 
    emg_27_show_ret = emg_wrapper_sge_qstats_show(emg_27_seq_file,(void *)emg_27_ret);
    #line 2430 
    if (ldv_undef_int() != 0) {
      #line 2432 
      __VERIFIER_assume(emg_27_show_ret >= 0);
      #line 2436 
      emg_27_ret = (long long *)emg_wrapper_sge_qstats_next(emg_27_seq_file,(void *)emg_27_ret,emg_27_index);
      #line 2439 
      if (emg_repeat_cnt_inner_loop_27 > 0) {
        #line 2440 
        emg_repeat_cnt_inner_loop_27 --;
        #line 2442 
        goto emg_inner_loop_27;
      }
      else 
           #line 2444 
           __VERIFIER_assume(0);
    }
    else {
      #line 2451 
      emg_27_seq_file->index = *emg_27_index;
      #line 2455 
      emg_wrapper_sge_qstats_stop(emg_27_seq_file,(void *)emg_27_ret);
      #line 2460 
      emg_27_seq_file->index = *emg_27_index;
      #line 2463 
      if (emg_repeat_cnt_outer_loop_27_1 > 0) {
        #line 2464 
        emg_repeat_cnt_outer_loop_27_1 --;
        #line 2466 
        goto emg_outer_loop_27;
      }
      else 
           #line 2468 
           __VERIFIER_assume(0);
    }
  }
  else {
    #line 2475 
    __VERIFIER_assume((int)ldv_is_err_or_null((void *)emg_27_ret));
    #line 2480 
    emg_27_seq_file->index = *emg_27_index;
    #line 2484 
    emg_wrapper_sge_qstats_stop(emg_27_seq_file,(void *)emg_27_ret);
    #line 2489 
    emg_27_seq_file->index = *emg_27_index;
    #line 2492 
    if (emg_repeat_cnt_outer_loop_27_0 > 0) {
      #line 2493 
      emg_repeat_cnt_outer_loop_27_0 --;
      #line 2495 
      goto emg_outer_loop_27;
    }
    else 
         #line 2497 
         __VERIFIER_assume(0);
  }
  #line 2503 
  return (void *)0;
  #line 2506 
  emg_outer_loop_27: 
                     #line 2506 
  ;
  #line 2507 
  if (ldv_undef_int() != 0) {
    #line 2510 
    *emg_27_index = 0LL;
    #line 2514 
    emg_27_ret = (long long *)emg_wrapper_sge_qstats_start(emg_27_seq_file,emg_27_index);
    #line 2518 
    goto emg_inner_loop_27;
  }
  else 
       #line 2523 
       ldv_free((void *)emg_27_index);
  #line 2531 
  return (void *)0;
}

#line 2536  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/emg/0/environment_model.c"
void *emg_timer_timer_scenario_12(void *arg0)
{
  #line 2539 
  struct timer_list *emg_28_container;
  #line 2540 
  unsigned long emg_28_emg_param_0_0;
  #line 2542 
  struct emg_struct_timer_scenario_12_28 *data = (struct emg_struct_timer_scenario_12_28 *)arg0;
  #line 2547 
  if (data != (struct emg_struct_timer_scenario_12_28 *)0) {
    #line 2548 
    emg_28_container = data->arg0;
    #line 2549 
    ldv_free((void *)data);
  }
  #line 2555 
  ldv_switch_to_interrupt_context();
  #line 2559 
  if (emg_28_container->function != (void (*)(struct timer_list *))0) 
    #line 2560 
    (*(emg_28_container->function))((struct timer_list *)emg_28_emg_param_0_0);
  #line 2566 
  ldv_switch_to_process_context();
  #line 2573 
  return (void *)0;
}

#line 2578  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/emg/0/environment_model.c"
int emg___pci_register_driver(struct pci_driver *arg0, struct module *arg1, char *arg2)
{
  #line 2581 
  struct pci_driver *emg_2_pci_driver;
  #line 2583 
  emg_2_pci_driver = emg_alias_cxgb4vf_driver;
  #line 2584 
  if (ldv_undef_int() != 0) {
    #line 2586 
    emg_2_pci_driver = arg0;
    #line 2590 
    emg_dispatch_register_2(emg_2_pci_driver);
    #line 2594 
    return 0;
  }
  else {
    #line 2598 
    return ldv_undef_int_negative();
  }
}

#line 2606  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/emg/0/environment_model.c"
struct net_device *emg_alloc_etherdev_mqs(int arg0, unsigned int arg1, unsigned int arg2)
{
  #line 2609 
  struct net_device *emg_3_netdev;
  #line 2611 
  if (ldv_undef_int() != 0) {
    #line 2613 
    emg_3_netdev = (struct net_device *)ldv_xmalloc(3328UL);
    #line 2617 
    return emg_3_netdev;
  }
  else 
       #line 2621 
       return (struct net_device *)0;
}

#line 2629  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/emg/0/environment_model.c"
struct dentry *emg_debugfs_create_dir(char *arg0, struct dentry *arg1)
{
  #line 2632 
  struct dentry *emg_4_dentry;
  #line 2633 
  struct inode *emg_4_inode;
  #line 2635 
  if (ldv_undef_int() != 0) {
    #line 2637 
    emg_4_dentry = (struct dentry *)ldv_xmalloc(320UL);
    #line 2638 
    emg_4_inode = (struct inode *)ldv_xmalloc(1072UL);
    #line 2639 
    emg_4_inode->i_mode = (unsigned short)16877U;
    #line 2640 
    emg_4_dentry->d_parent = arg1;
    #line 2641 
    emg_4_dentry->d_inode = emg_4_inode;
    #line 2642 
    return emg_4_dentry;
  }
  else {
    #line 2646 
    return (struct dentry *)ERR_PTR(-19L);
  }
}

#line 2654  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/emg/0/environment_model.c"
struct dentry *emg_debugfs_create_file(char *arg0, unsigned short arg1, struct dentry *arg2, void *arg3, struct file_operations *arg4)
{
  #line 2657 
  struct dentry *emg_5_dentry;
  #line 2658 
  struct file_operations *emg_5_file_operations;
  #line 2659 
  struct inode *emg_5_inode;
  #line 2661 
  if (ldv_undef_int() != 0) {
    #line 2663 
    emg_5_dentry = (struct dentry *)ldv_xmalloc(320UL);
    #line 2664 
    emg_5_inode = (struct inode *)ldv_xmalloc(1072UL);
    #line 2665 
    emg_5_inode->i_mode = arg1;
    #line 2666 
    emg_5_dentry->d_parent = arg2;
    #line 2667 
    emg_5_inode->i_private = arg3;
    #line 2668 
    emg_5_file_operations = arg4;
    #line 2669 
    emg_5_dentry->d_inode = emg_5_inode;
    #line 2670 
    ldv_save_allocated_memory_to_list((void *)emg_5_dentry);
    #line 2674 
    emg_dispatch_register_5(emg_5_file_operations);
    #line 2678 
    return emg_5_dentry;
  }
  else {
    #line 2682 
    return (struct dentry *)ERR_PTR(-19L);
  }
}

#line 2690  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/emg/0/environment_model.c"
void emg_debugfs_remove(struct dentry *arg0)
{
  #line 2693 
  struct dentry *emg_6_dentry;
  #line 2694 
  struct file_operations *emg_6_file_operations;
  #line 2695 
  struct inode *emg_6_inode;
  #line 2698 
  emg_6_dentry = arg0;
  #line 2701 
  if (ldv_undef_int() != 0) {
    #line 2703 
    int tmp_0;
    #line 2703 
    if (IS_ERR_OR_NULL_0((void *)emg_6_dentry)) 
                                                #line 2703 
                                                tmp_0 = 0; else 
                                                                #line 2703 
                                                                tmp_0 = 1;
    #line 2703 
    __VERIFIER_assume(tmp_0);
    #line 2704 
    emg_6_inode = emg_6_dentry->d_inode;
    #line 2705 
    ldv_free((void *)emg_6_inode);
    #line 2706 
    ldv_free((void *)emg_6_dentry);
    #line 2710 
    emg_dispatch_deregister_6(emg_6_file_operations);
  }
  else {
    #line 2714 
    __VERIFIER_assume((int)IS_ERR_OR_NULL_0((void *)emg_6_dentry));
  }
  #line 2718 
  return;
}

#line 2723  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/emg/0/environment_model.c"
int emg_del_timer_sync(struct timer_list *arg0)
{
  #line 2726 
  struct timer_list *emg_7_timer_list;
  #line 2729 
  emg_7_timer_list = arg0;
  #line 2733 
  emg_dispatch_instance_deregister_7(emg_7_timer_list);
  #line 2734 
  ;
  #line 2734 
  return 0;
}

#line 2740  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/emg/0/environment_model.c"
void *emg_free_irq(unsigned int arg0, void *arg1)
{
  #line 2743 
  int emg_8_line;
  #line 2746 
  emg_8_line = (int)arg0;
  #line 2750 
  emg_dispatch_irq_deregister_8(emg_8_line);
  #line 2751 
  ;
  #line 2751 
  return (void *)0;
}

#line 2757  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/emg/0/environment_model.c"
void emg_free_netdev(struct net_device *arg0)
{
  #line 2760 
  struct net_device *emg_9_netdev;
  #line 2763 
  emg_9_netdev = arg0;
  #line 2764 
  ldv_free((void *)emg_9_netdev);
  #line 2767 
  return;
}

#line 2772  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/emg/0/environment_model.c"
int emg_mod_timer(struct timer_list *arg0, unsigned long arg1)
{
  #line 2775 
  struct timer_list *emg_10_timer_list;
  #line 2777 
  if (ldv_undef_int() != 0) {
    #line 2779 
    emg_10_timer_list = arg0;
    #line 2783 
    emg_dispatch_instance_register_10(emg_10_timer_list);
    #line 2787 
    return 1;
  }
  else 
       #line 2791 
       return 0;
}

#line 2799  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/emg/0/environment_model.c"
void emg_pci_unregister_driver(struct pci_driver *arg0)
{
  #line 2802 
  struct pci_driver *emg_11_pci_driver;
  #line 2804 
  emg_11_pci_driver = emg_alias_cxgb4vf_driver;
  #line 2806 
  emg_11_pci_driver = arg0;
  #line 2810 
  emg_dispatch_deregister_11(emg_11_pci_driver);
  #line 2813 
  return;
}

#line 2818  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/emg/0/environment_model.c"
int emg_register_netdev(struct net_device *arg0)
{
  #line 2821 
  struct net_device *emg_12_netdev;
  #line 2822 
  int emg_12_ret;
  #line 2825 
  emg_12_ret = ldv_undef_int();
  #line 2826 
  emg_12_ret = ldv_undef_int();
  #line 2827 
  if (ldv_undef_int() != 0) {
    #line 2829 
    emg_12_netdev = arg0;
    #line 2833 
    emg_12_ret = emg_wrapper_cxgb4vf_open(emg_12_netdev);
    #line 2836 
    if (ldv_undef_int() != 0) {
      #line 2838 
      __VERIFIER_assume(emg_12_ret == 0);
      #line 2842 
      emg_dispatch_register_12(emg_12_netdev);
      #line 2846 
      return 0;
    }
    else {
      #line 2850 
      __VERIFIER_assume(emg_12_ret != 0);
      #line 2851 
      ldv_failed_register_netdev();
      #line 2852 
      return ldv_undef_int_negative();
    }
  }
  else {
    #line 2857 
    ldv_failed_register_netdev();
    #line 2858 
    return ldv_undef_int_negative();
  }
}

#line 2866  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/emg/0/environment_model.c"
int emg_request_irq(unsigned int arg0, enum irqreturn (*arg1)(int , void *), unsigned long arg2, char *arg3, void *arg4)
{
  #line 2869 
  enum irqreturn (*emg_13_callback)(int , void *);
  #line 2870 
  void *emg_13_data;
  #line 2871 
  int emg_13_line;
  #line 2872 
  enum irqreturn (*emg_13_thread)(int , void *);
  #line 2874 
  emg_13_callback = & t4vf_sge_intr_msix;
  #line 2875 
  if (ldv_undef_int() != 0) {
    #line 2877 
    emg_13_line = (int)arg0;
    #line 2878 
    emg_13_callback = arg1;
    #line 2879 
    emg_13_thread = (enum irqreturn (*)(int , void *))0;
    #line 2880 
    emg_13_data = arg4;
    #line 2884 
    emg_dispatch_irq_register_13(emg_13_line,emg_13_callback,emg_13_thread,emg_13_data);
    #line 2888 
    return 0;
  }
  else {
    #line 2892 
    return ldv_undef_int_negative();
  }
}

#line 2900  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/emg/0/environment_model.c"
int emg_seq_open(struct file *arg0, struct seq_operations *arg1)
{
  #line 2903 
  struct file *emg_14_file;
  #line 2904 
  struct seq_operations *emg_14_ops;
  #line 2905 
  struct seq_file *emg_14_seq_file;
  #line 2908 
  emg_14_seq_file = (struct seq_file *)ldv_xmalloc(256UL);
  #line 2909 
  emg_14_ops = arg1;
  #line 2910 
  emg_14_file->private_data = (void *)emg_14_seq_file;
  #line 2914 
  emg_dispatch_register_14(emg_14_seq_file,emg_14_ops);
  #line 2915 
  ;
  #line 2915 
  return 0;
}

#line 2921  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/emg/0/environment_model.c"
void emg_unregister_netdev(struct net_device *arg0)
{
  #line 2924 
  struct net_device *emg_15_netdev;
  #line 2927 
  emg_15_netdev = arg0;
  #line 2931 
  emg_wrapper_cxgb4vf_stop(emg_15_netdev);
  #line 2935 
  emg_dispatch_deregister_15(emg_15_netdev);
  #line 2938 
  return;
}

#line 2943  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/emg/0/environment_model.c"
void *emg_entry_point_insmod(void *arg0)
{
  #line 2946 
  int emg_1_ret;
  #line 2949 
  emg_1_ret = emg_cxgb4vf_module_init();
  #line 2950 
  emg_1_ret = ldv_post_init(emg_1_ret);
  #line 2953 
  if (ldv_undef_int() != 0) {
    #line 2955 
    __VERIFIER_assume(emg_1_ret == 0);
    #line 2959 
    emg_cxgb4vf_module_exit();
  }
  else 
       #line 2963 
       __VERIFIER_assume(emg_1_ret != 0);
  #line 2967 
  return (void *)0;
}

#line 2972  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4vf/cxgb4vf.ko/concurrency safety/emg/0/environment_model.c"
int main(void)
{
  #line 2974 
  ldv_initialize();
  #line 2976 
  emg_entry_point_insmod((void *)0);
  #line 2978 
  return 0;
}

