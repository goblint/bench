/* Generated by Frama-C */
#line 106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compiler_types.h"
typedef signed char __s8;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned char __u8;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef short __s16;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned short __u16;
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef int __s32;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned int __u32;
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef long long __s64;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef unsigned long long __u64;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/int-ll64.h"
typedef __s8 s8;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u8 u8;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s16 s16;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u16 u16;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s32 s32;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u32 u32;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __s64 s64;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/int-ll64.h"
typedef __u64 u64;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/uapi/asm/posix_types_64.h"
typedef long __kernel_long_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned long __kernel_ulong_t;
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_pid_t;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_uid32_t;
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_gid32_t;
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_ulong_t __kernel_size_t;
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_ssize_t;
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef long long __kernel_loff_t;
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef long long __kernel_time64_t;
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_clock_t;
#line 93  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_timer_t;
#line 94  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_clockid_t;
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/posix_types.h"
typedef __u16 __le16;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u16 __be16;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __le32;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __be32;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef __u32 __wsum;
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef unsigned int __poll_t;
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/types.h"
typedef u32 __kernel_dev_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_dev_t dev_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned short umode_t;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_pid_t pid_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_clockid_t clockid_t;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef _Bool bool;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_uid32_t uid_t;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_gid32_t gid_t;
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_loff_t loff_t;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_size_t size_t;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef __kernel_ssize_t ssize_t;
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef s32 int32_t;
#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u32 uint32_t;
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 sector_t;
#line 131  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 blkcnt_t;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 dma_addr_t;
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int gfp_t;
#line 155  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned int fmode_t;
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef u64 phys_addr_t;
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef phys_addr_t resource_size_t;
#line 170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct __anonstruct_atomic_t_6 {
   int counter ;
};
#line 170  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef struct __anonstruct_atomic_t_6 atomic_t;
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct __anonstruct_atomic64_t_7 {
   s64 counter ;
};
#line 174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef struct __anonstruct_atomic64_t_7 atomic64_t;
#line 181  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};
#line 185 
struct hlist_node;
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct hlist_head {
   struct hlist_node *first ;
};
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};
#line 219  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
struct callback_head {
   struct callback_head *next ;
   void (*func)(struct callback_head *) ;
} __attribute__((__aligned__(8)));
#line 14  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/0/concurrency safety/weaver/forcedeth.i.aux"
struct task_struct;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/export.h"
struct module;
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/export.h"
struct kernel_symbol {
   int value_offset ;
   int name_offset ;
   int namespace_offset ;
};
#line 136  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/init.h"
typedef void (*ctor_fn_t)(void);
#line 139 
struct file_system_type;
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
struct ctl_table;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct jump_entry;
#line 87 
struct static_key_mod;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
union __anonunion_8 {
   unsigned long type ;
   struct jump_entry *entries ;
   struct static_key_mod *next ;
};
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct static_key {
   atomic_t enabled ;
   union __anonunion_8 __anonCompField_static_key_4 ;
};
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct jump_entry {
   s32 code ;
   s32 target ;
   long key ;
};
#line 346  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct static_key_true {
   struct static_key key ;
};
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jump_label.h"
struct static_key_false {
   struct static_key key ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_debug.h"
union __anonunion_key_9 {
   struct static_key_true dd_key_true ;
   struct static_key_false dd_key_false ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_debug.h"
struct _ddebug {
   char *modname ;
   char *function ;
   char *filename ;
   char *format ;
   unsigned int lineno : 18 ;
   unsigned int flags : 8 ;
   union __anonunion_key_9 key ;
} __attribute__((__aligned__(8)));
#line 59 
struct device;
#line 65 
struct net_device;
#line 476  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
struct file_operations;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/div64.h"
struct completion;
#line 88 
struct pt_regs;
#line 557  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernel.h"
enum system_states {
    SYSTEM_BOOTING = 0,
    SYSTEM_SCHEDULING = 1,
    SYSTEM_RUNNING = 2,
    SYSTEM_HALT = 3,
    SYSTEM_POWER_OFF = 4,
    SYSTEM_RESTART = 5,
    SYSTEM_SUSPEND = 6
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bug.h"
struct bug_entry {
   int bug_addr_disp ;
   int file_disp ;
   unsigned short line ;
   unsigned short flags ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/math64.h"
typedef __s64 time64_t;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/time_types.h"
struct __kernel_timespec {
   __kernel_time64_t tv_sec ;
   long long tv_nsec ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/time64.h"
struct timespec64 {
   time64_t tv_sec ;
   long tv_nsec ;
};
#line 165 
struct old_timespec32;
#line 167 
enum timespec_type {
    TT_NONE = 0,
    TT_NATIVE = 1,
    TT_COMPAT = 2
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_futex_27 {
   u32 *uaddr ;
   u32 val ;
   u32 flags ;
   u32 bitset ;
   u64 time ;
   u32 *uaddr2 ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
union __anonunion_29 {
   struct __kernel_timespec *rmtp ;
   struct old_timespec32 *compat_rmtp ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_nanosleep_28 {
   clockid_t clockid ;
   enum timespec_type type ;
   union __anonunion_29 __anonCompField___anonstruct_nanosleep_28_5 ;
   u64 expires ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct __anonstruct_poll_30 {
   struct pollfd *ufds ;
   int nfds ;
   int has_timeout ;
   unsigned long tv_sec ;
   unsigned long tv_nsec ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
union __anonunion_26 {
   struct __anonstruct_futex_27 futex ;
   struct __anonstruct_nanosleep_28 nanosleep ;
   struct __anonstruct_poll_30 poll ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/restart_block.h"
struct restart_block {
   long (*fn)(struct restart_block *) ;
   union __anonunion_26 __anonCompField_restart_block_6 ;
};
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/page_64.h"
struct page;
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/getorder.h"
struct mm_struct;
#line 49 
struct io_bitmap;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/ptrace.h"
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/desc_defs.h"
struct desc_struct {
   u16 limit0 ;
   u16 base0 ;
   u16 base1 : 8 ;
   u16 type : 4 ;
   u16 s : 1 ;
   u16 dpl : 2 ;
   u16 p : 1 ;
   u16 limit1 : 4 ;
   u16 avl : 1 ;
   u16 l : 1 ;
   u16 d : 1 ;
   u16 g : 1 ;
   u16 base2 : 8 ;
} __attribute__((__packed__));
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/desc_defs.h"
struct idt_bits {
   u16 ist : 3 ;
   u16 zero : 5 ;
   u16 type : 5 ;
   u16 dpl : 2 ;
   u16 p : 1 ;
} __attribute__((__packed__));
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/desc_defs.h"
struct gate_struct {
   u16 offset_low ;
   u16 segment ;
   struct idt_bits bits ;
   u16 offset_middle ;
   u32 offset_high ;
   u32 reserved ;
} __attribute__((__packed__));
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/desc_defs.h"
typedef struct gate_struct gate_desc;
#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/desc_defs.h"
struct desc_ptr {
   unsigned short size ;
   unsigned long address ;
} __attribute__((__packed__));
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/desc_defs.h"
typedef unsigned long pteval_t;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pmdval_t;
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pudval_t;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long p4dval_t;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgdval_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgprotval_t;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
struct __anonstruct_pte_t_53 {
   pteval_t pte ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_64_types.h"
typedef struct __anonstruct_pte_t_53 pte_t;
#line 265  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct pgprot {
   pgprotval_t pgprot ;
};
#line 267  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct pgprot pgprot_t;
#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pgd_t_54 {
   pgdval_t pgd ;
};
#line 266  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pgd_t_54 pgd_t;
#line 306  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_p4d_t_55 {
   p4dval_t p4d ;
};
#line 306  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_p4d_t_55 p4d_t;
#line 319  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pud_t_56 {
   pudval_t pud ;
};
#line 319  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pud_t_56 pud_t;
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pmd_t_57 {
   pmdval_t pmd ;
};
#line 345  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pmd_t_57 pmd_t;
#line 505  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/pgtable_types.h"
typedef struct page *pgtable_t;
#line 519 
struct file;
#line 530 
struct seq_file;
#line 360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/nospec-branch.h"
struct thread_struct;
#line 362 
struct cpumask;
#line 363 
struct flush_tlb_info;
#line 364 
struct mmu_gather;
#line 365 
struct vm_area_struct;
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/paravirt_types.h"
struct paravirt_callee_save {
   void *func ;
};
#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/paravirt_types.h"
struct pv_init_ops {
   unsigned int (*patch)(u8 , void *, unsigned long , unsigned int ) ;
};
#line 96  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/paravirt_types.h"
struct pv_lazy_ops {
   void (*enter)(void) ;
   void (*leave)(void) ;
   void (*flush)(void) ;
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/paravirt_types.h"
struct pv_time_ops {
   unsigned long long (*sched_clock)(void) ;
   unsigned long long (*steal_clock)(int ) ;
};
#line 109  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/paravirt_types.h"
struct pv_cpu_ops {
   void (*io_delay)(void) ;
   unsigned long (*get_debugreg)(int ) ;
   void (*set_debugreg)(int , unsigned long ) ;
   unsigned long (*read_cr0)(void) ;
   void (*write_cr0)(unsigned long ) ;
   void (*write_cr4)(unsigned long ) ;
   void (*load_tr_desc)(void) ;
   void (*load_gdt)(struct desc_ptr *) ;
   void (*load_idt)(struct desc_ptr *) ;
   void (*set_ldt)(void *, unsigned int ) ;
   unsigned long (*store_tr)(void) ;
   void (*load_tls)(struct thread_struct *, unsigned int ) ;
   void (*load_gs_index)(unsigned int ) ;
   void (*write_ldt_entry)(struct desc_struct *, int , void *) ;
   void (*write_gdt_entry)(struct desc_struct *, int , void *, int ) ;
   void (*write_idt_entry)(gate_desc *, int , gate_desc *) ;
   void (*alloc_ldt)(struct desc_struct *, unsigned int ) ;
   void (*free_ldt)(struct desc_struct *, unsigned int ) ;
   void (*load_sp0)(unsigned long ) ;
   void (*wbinvd)(void) ;
   void (*cpuid)(unsigned int *, unsigned int *, unsigned int *, unsigned int *) ;
   u64 (*read_msr)(unsigned int ) ;
   void (*write_msr)(unsigned int , unsigned int , unsigned int ) ;
   u64 (*read_msr_safe)(unsigned int , int *) ;
   int (*write_msr_safe)(unsigned int , unsigned int , unsigned int ) ;
   u64 (*read_pmc)(int ) ;
   void (*usergs_sysret64)(void) ;
   void (*iret)(void) ;
   void (*swapgs)(void) ;
   void (*start_context_switch)(struct task_struct *) ;
   void (*end_context_switch)(struct task_struct *) ;
};
#line 181  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/paravirt_types.h"
struct pv_irq_ops {
   struct paravirt_callee_save save_fl ;
   struct paravirt_callee_save restore_fl ;
   struct paravirt_callee_save irq_disable ;
   struct paravirt_callee_save irq_enable ;
   void (*safe_halt)(void) ;
   void (*halt)(void) ;
};
#line 202  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/paravirt_types.h"
struct pv_mmu_ops {
   void (*flush_tlb_user)(void) ;
   void (*flush_tlb_kernel)(void) ;
   void (*flush_tlb_one_user)(unsigned long ) ;
   void (*flush_tlb_others)(struct cpumask *, struct flush_tlb_info *) ;
   void (*tlb_remove_table)(struct mmu_gather *, void *) ;
   void (*exit_mmap)(struct mm_struct *) ;
   struct paravirt_callee_save read_cr2 ;
   void (*write_cr2)(unsigned long ) ;
   unsigned long (*read_cr3)(void) ;
   void (*write_cr3)(unsigned long ) ;
   void (*activate_mm)(struct mm_struct *, struct mm_struct *) ;
   void (*dup_mmap)(struct mm_struct *, struct mm_struct *) ;
   int (*pgd_alloc)(struct mm_struct *) ;
   void (*pgd_free)(struct mm_struct *, pgd_t *) ;
   void (*alloc_pte)(struct mm_struct *, unsigned long ) ;
   void (*alloc_pmd)(struct mm_struct *, unsigned long ) ;
   void (*alloc_pud)(struct mm_struct *, unsigned long ) ;
   void (*alloc_p4d)(struct mm_struct *, unsigned long ) ;
   void (*release_pte)(unsigned long ) ;
   void (*release_pmd)(unsigned long ) ;
   void (*release_pud)(unsigned long ) ;
   void (*release_p4d)(unsigned long ) ;
   void (*set_pte)(pte_t *, pte_t ) ;
   void (*set_pte_at)(struct mm_struct *, unsigned long , pte_t *, pte_t ) ;
   void (*set_pmd)(pmd_t *, pmd_t ) ;
   pte_t (*ptep_modify_prot_start)(struct vm_area_struct *, unsigned long , pte_t *) ;
   void (*ptep_modify_prot_commit)(struct vm_area_struct *, unsigned long , pte_t *, pte_t ) ;
   struct paravirt_callee_save pte_val ;
   struct paravirt_callee_save make_pte ;
   struct paravirt_callee_save pgd_val ;
   struct paravirt_callee_save make_pgd ;
   void (*set_pud)(pud_t *, pud_t ) ;
   struct paravirt_callee_save pmd_val ;
   struct paravirt_callee_save make_pmd ;
   struct paravirt_callee_save pud_val ;
   struct paravirt_callee_save make_pud ;
   void (*set_p4d)(p4d_t *, p4d_t ) ;
   struct paravirt_callee_save p4d_val ;
   struct paravirt_callee_save make_p4d ;
   void (*set_pgd)(pgd_t *, pgd_t ) ;
   struct pv_lazy_ops lazy_mode ;
   void (*set_fixmap)(unsigned int , phys_addr_t , pgprot_t ) ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct __anonstruct_59 {
   u8 locked ;
   u8 pending ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct __anonstruct_60 {
   u16 locked_pending ;
   u16 tail ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
union __anonunion_58 {
   atomic_t val ;
   struct __anonstruct_59 __anonCompField___anonunion_58_7 ;
   struct __anonstruct_60 __anonCompField___anonunion_58_8 ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
struct qspinlock {
   union __anonunion_58 __anonCompField_qspinlock_9 ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock_types.h"
typedef struct qspinlock arch_spinlock_t;
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
struct __anonstruct_62 {
   u8 wlocked ;
   u8 __lstate[3U] ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
union __anonunion_61 {
   atomic_t cnts ;
   struct __anonstruct_62 __anonCompField___anonunion_61_10 ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
struct qrwlock {
   union __anonunion_61 __anonCompField_qrwlock_11 ;
   arch_spinlock_t wait_lock ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qrwlock_types.h"
typedef struct qrwlock arch_rwlock_t;
#line 311  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/paravirt_types.h"
struct pv_lock_ops {
   void (*queued_spin_lock_slowpath)(struct qspinlock *, u32 ) ;
   struct paravirt_callee_save queued_spin_unlock ;
   void (*wait)(u8 *, u8 ) ;
   void (*kick)(int ) ;
   struct paravirt_callee_save vcpu_is_preempted ;
};
#line 324  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/paravirt_types.h"
struct paravirt_patch_template {
   struct pv_init_ops init ;
   struct pv_time_ops time ;
   struct pv_cpu_ops cpu ;
   struct pv_irq_ops irq ;
   struct pv_mmu_ops mmu ;
   struct pv_lock_ops lock ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/math_emu.h"
struct math_emu_info {
   long ___orig_eip ;
   struct pt_regs *regs ;
};
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
union __anonunion___u_67 {
   int __val ;
   char __c[1U] ;
};
#line 2288  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/atomic-fallback.h"
typedef atomic64_t atomic_long_t;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
struct cpumask {
   unsigned long bits[128U] ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
typedef struct cpumask cpumask_t;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct tracepoint_func {
   void *func ;
   void *data ;
   int prio ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct tracepoint {
   char *name ;
   struct static_key key ;
   int (*regfunc)(void) ;
   void (*unregfunc)(void) ;
   struct tracepoint_func *funcs ;
};
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
typedef int tracepoint_ptr_t;
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/tracepoint-defs.h"
struct bpf_raw_event_map {
   struct tracepoint *tp ;
   void *bpf_func ;
   u32 num_args ;
   u32 writable_size ;
} __attribute__((__aligned__(32)));
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fregs_state {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u32 status ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct __anonstruct_90 {
   u64 rip ;
   u64 rdp ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct __anonstruct_91 {
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union __anonunion_89 {
   struct __anonstruct_90 __anonCompField___anonunion_89_17 ;
   struct __anonstruct_91 __anonCompField___anonunion_89_18 ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union __anonunion_92 {
   u32 padding1[12U] ;
   u32 sw_reserved[12U] ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fxregs_state {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   union __anonunion_89 __anonCompField_fxregs_state_19 ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32U] ;
   u32 xmm_space[64U] ;
   u32 padding[12U] ;
   union __anonunion_92 __anonCompField_fxregs_state_20 ;
} __attribute__((__aligned__(16)));
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct swregs_state {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u8 ftop ;
   u8 changed ;
   u8 lookahead ;
   u8 no_update ;
   u8 rm ;
   u8 alimit ;
   struct math_emu_info *info ;
   u32 entry_eip ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct xstate_header {
   u64 xfeatures ;
   u64 xcomp_bv ;
   u64 reserved[6U] ;
} __attribute__((__packed__));
#line 253  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct xregs_state {
   struct fxregs_state i387 ;
   struct xstate_header header ;
   u8 extended_state_area[0U] ;
} __attribute__((__packed__, __aligned__(64)));
#line 268  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
union fpregs_state {
   struct fregs_state fsave ;
   struct fxregs_state fxsave ;
   struct swregs_state soft ;
   struct xregs_state xsave ;
   u8 __padding[4096U] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/fpu/types.h"
struct fpu {
   unsigned int last_cpu ;
   unsigned long avx512_timestamp ;
   union fpregs_state state ;
};
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/orc_types.h"
struct orc_entry {
   s16 sp_offset ;
   s16 bp_offset ;
   unsigned int sp_reg : 4 ;
   unsigned int bp_reg : 4 ;
   unsigned int type : 2 ;
   unsigned int end : 1 ;
} __attribute__((__packed__));
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct seq_operations;
#line 478 
struct perf_event;
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct __anonstruct_mm_segment_t_95 {
   unsigned long seg ;
};
#line 479  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
typedef struct __anonstruct_mm_segment_t_95 mm_segment_t;
#line 485  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/processor.h"
struct thread_struct {
   struct desc_struct tls_array[3U] ;
   unsigned long sp ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long fsbase ;
   unsigned long gsbase ;
   struct perf_event *ptrace_bps[4U] ;
   unsigned long debugreg6 ;
   unsigned long ptrace_dr7 ;
   unsigned long cr2 ;
   unsigned long trap_nr ;
   unsigned long error_code ;
   struct io_bitmap *io_bitmap ;
   unsigned long iopl_emul ;
   mm_segment_t addr_limit ;
   unsigned int sig_on_uaccess_err : 1 ;
   unsigned int uaccess_err : 1 ;
   struct fpu fpu ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/thread_info.h"
struct thread_info {
   unsigned long flags ;
   u32 status ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bottom_half.h"
struct lockdep_map;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lockdep_subclass_key {
   char __one_byte ;
} __attribute__((__packed__));
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
union __anonunion_96 {
   struct hlist_node hash_entry ;
   struct lockdep_subclass_key subkeys[8U] ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lock_class_key {
   union __anonunion_96 __anonCompField_lock_class_key_23 ;
};
#line 68 
struct lock_trace;
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lock_class {
   struct hlist_node hash_entry ;
   struct list_head lock_entry ;
   struct list_head locks_after ;
   struct list_head locks_before ;
   struct lockdep_subclass_key *key ;
   unsigned int subclass ;
   unsigned int dep_gen_id ;
   unsigned long usage_mask ;
   struct lock_trace *usage_traces[9U] ;
   int name_version ;
   char *name ;
   unsigned long contention_point[4U] ;
   unsigned long contending_point[4U] ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct lockdep_map {
   struct lock_class_key *key ;
   struct lock_class *class_cache[2U] ;
   char *name ;
   int cpu ;
   unsigned long ip ;
};
#line 226  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockdep.h"
struct held_lock {
   u64 prev_chain_key ;
   unsigned long acquire_ip ;
   struct lockdep_map *instance ;
   struct lockdep_map *nest_lock ;
   u64 waittime_stamp ;
   u64 holdtime_stamp ;
   unsigned int class_idx : 13 ;
   unsigned int irq_context : 2 ;
   unsigned int trylock : 1 ;
   unsigned int read : 2 ;
   unsigned int check : 1 ;
   unsigned int hardirqs_off : 1 ;
   unsigned int references : 12 ;
   unsigned int pin_count ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct raw_spinlock {
   arch_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct raw_spinlock raw_spinlock_t;
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct __anonstruct_98 {
   u8 __padding[24U] ;
   struct lockdep_map dep_map ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
union __anonunion_97 {
   struct raw_spinlock rlock ;
   struct __anonstruct_98 __anonCompField___anonunion_97_24 ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct spinlock {
   union __anonunion_97 __anonCompField_spinlock_25 ;
};
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct spinlock spinlock_t;
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
struct __anonstruct_rwlock_t_99 {
   arch_rwlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_types.h"
typedef struct __anonstruct_rwlock_t_99 rwlock_t;
#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
struct mutex;
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
struct kmem_cache;
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
struct seqcount {
   unsigned int sequence ;
   struct lockdep_map dep_map ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
typedef struct seqcount seqcount_t;
#line 403  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
struct __anonstruct_seqlock_t_112 {
   struct seqcount seqcount ;
   spinlock_t lock ;
};
#line 403  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seqlock.h"
typedef struct __anonstruct_seqlock_t_112 seqlock_t;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timex.h"
typedef s32 old_time32_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/time32.h"
struct old_timespec32 {
   old_time32_t tv_sec ;
   s32 tv_nsec ;
};
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/highuid.h"
struct user_namespace;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
struct __anonstruct_kuid_t_113 {
   uid_t val ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
typedef struct __anonstruct_kuid_t_113 kuid_t;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
struct __anonstruct_kgid_t_114 {
   gid_t val ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uidgid.h"
typedef struct __anonstruct_kgid_t_114 kgid_t;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/stat.h"
struct kstat {
   u32 result_mask ;
   umode_t mode ;
   unsigned int nlink ;
   uint32_t blksize ;
   u64 attributes ;
   u64 attributes_mask ;
   u64 ino ;
   dev_t dev ;
   dev_t rdev ;
   kuid_t uid ;
   kgid_t gid ;
   loff_t size ;
   struct timespec64 atime ;
   struct timespec64 mtime ;
   struct timespec64 ctime ;
   struct timespec64 btime ;
   u64 blocks ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
struct wait_queue_head {
   spinlock_t lock ;
   struct list_head head ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
typedef struct wait_queue_head wait_queue_head_t;
#line 1133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
struct __anonstruct_nodemask_t_115 {
   unsigned long bits[16U] ;
};
#line 1133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/wait.h"
typedef struct __anonstruct_nodemask_t_115 nodemask_t;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/tlbbatch.h"
struct arch_tlbflush_unmap_batch {
   struct cpumask cpumask ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct vmacache {
   u64 seqnum ;
   struct vm_area_struct *vmas[4U] ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct task_rss_stat {
   int events ;
   int count[4U] ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct mm_rss_stat {
   atomic_long_t count[4U] ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct page_frag {
   struct page *page ;
   __u32 offset ;
   __u32 size ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types_task.h"
struct tlbflush_unmap_batch {
   struct arch_tlbflush_unmap_batch arch ;
   bool flush_required ;
   bool writable ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_node {
   unsigned long __rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
} __attribute__((__aligned__(8)));
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_root {
   struct rb_node *rb_node ;
};
#line 125  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree.h"
struct rb_root_cached {
   struct rb_root rb_root ;
   struct rb_node *rb_leftmost ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/osq_lock.h"
struct optimistic_spin_queue {
   atomic_t tail ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rwsem.h"
struct rw_semaphore {
   atomic_long_t count ;
   atomic_long_t owner ;
   struct optimistic_spin_queue osq ;
   raw_spinlock_t wait_lock ;
   struct list_head wait_list ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 26  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/completion.h"
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};
#line 120 
struct inode;
#line 121 
struct notifier_block;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct ww_acquire_ctx;
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
struct mutex {
   atomic_long_t owner ;
   spinlock_t wait_lock ;
   struct optimistic_spin_queue osq ;
   struct list_head wait_list ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mutex.h"
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   struct ww_acquire_ctx *ww_ctx ;
   void *magic ;
};
#line 461  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
typedef s64 ktime_t;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
struct timer_list {
   struct hlist_node entry ;
   unsigned long expires ;
   void (*function)(struct timer_list *) ;
   u32 flags ;
   struct lockdep_map lockdep_map ;
};
#line 195 
struct hrtimer;
#line 196 
enum hrtimer_restart;
#line 220 
struct workqueue_struct;
#line 221 
struct work_struct;
#line 102  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct *) ;
   struct lockdep_map lockdep_map ;
};
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct delayed_work {
   struct work_struct work ;
   struct timer_list timer ;
   struct workqueue_struct *wq ;
   int cpu ;
};
#line 124  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/workqueue.h"
struct rcu_work {
   struct work_struct work ;
   struct callback_head rcu ;
   struct workqueue_struct *wq ;
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcu_segcblist.h"
struct rcu_segcblist {
   struct callback_head *head ;
   struct callback_head **tails[4U] ;
   unsigned long gp_seq[4U] ;
   atomic_long_t len ;
   long len_lazy ;
   u8 enabled ;
   u8 offloaded ;
};
#line 80 
struct srcu_struct;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcu.h"
struct srcu_node;
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_data {
   unsigned long srcu_lock_count[2U] ;
   unsigned long srcu_unlock_count[2U] ;
   spinlock_t lock ;
   struct rcu_segcblist srcu_cblist ;
   unsigned long srcu_gp_seq_needed ;
   unsigned long srcu_gp_seq_needed_exp ;
   bool srcu_cblist_invoking ;
   struct timer_list delay_work ;
   struct work_struct work ;
   struct callback_head srcu_barrier_head ;
   struct srcu_node *mynode ;
   unsigned long grpmask ;
   int cpu ;
   struct srcu_struct *ssp ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_node {
   spinlock_t lock ;
   unsigned long srcu_have_cbs[4U] ;
   unsigned long srcu_data_have_cbs[4U] ;
   unsigned long srcu_gp_seq_needed_exp ;
   struct srcu_node *srcu_parent ;
   int grplo ;
   int grphi ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/srcutree.h"
struct srcu_struct {
   struct srcu_node node[521U] ;
   struct srcu_node *level[4U] ;
   struct mutex srcu_cb_mutex ;
   spinlock_t lock ;
   struct mutex srcu_gp_mutex ;
   unsigned int srcu_idx ;
   unsigned long srcu_gp_seq ;
   unsigned long srcu_gp_seq_needed ;
   unsigned long srcu_gp_seq_needed_exp ;
   unsigned long srcu_last_gp_end ;
   struct srcu_data *sda ;
   unsigned long srcu_barrier_seq ;
   struct mutex srcu_barrier_mutex ;
   struct completion srcu_barrier_completion ;
   atomic_t srcu_barrier_cpu_cnt ;
   struct delayed_work work ;
   struct lockdep_map dep_map ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/notifier.h"
struct notifier_block {
   int (*notifier_call)(struct notifier_block *, unsigned long , void *) ;
   struct notifier_block *next ;
   int priority ;
};
#line 70  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/notifier.h"
struct raw_notifier_head {
   struct notifier_block *head ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/uprobes.h"
struct arch_uprobe_task {
   unsigned long saved_scratch_register ;
   unsigned int saved_trap_nr ;
   unsigned int saved_tf ;
};
#line 57 
enum uprobe_task_state {
    UTASK_RUNNING = 0,
    UTASK_SSTEP = 1,
    UTASK_SSTEP_ACK = 2,
    UTASK_SSTEP_TRAPPED = 3
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_128 {
   struct arch_uprobe_task autask ;
   unsigned long vaddr ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_129 {
   struct callback_head dup_xol_work ;
   unsigned long dup_xol_addr ;
};
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
union __anonunion_127 {
   struct __anonstruct_128 __anonCompField___anonunion_127_28 ;
   struct __anonstruct_129 __anonCompField___anonunion_127_29 ;
};
#line 61 
struct uprobe;
#line 61 
struct return_instance;
#line 61  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct uprobe_task {
   enum uprobe_task_state state ;
   union __anonunion_127 __anonCompField_uprobe_task_30 ;
   struct uprobe *active_uprobe ;
   unsigned long xol_vaddr ;
   struct return_instance *return_instances ;
   unsigned int depth ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct return_instance {
   struct uprobe *uprobe ;
   unsigned long func ;
   unsigned long stack ;
   unsigned long orig_ret_vaddr ;
   bool chained ;
   struct return_instance *next ;
};
#line 98 
struct xol_area;
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct uprobes_state {
   struct xol_area *xol_area ;
};
#line 140 
struct ldt_struct;
#line 140 
struct vdso_image;
#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
struct __anonstruct_mm_context_t_130 {
   u64 ctx_id ;
   atomic64_t tlb_gen ;
   struct rw_semaphore ldt_usr_sem ;
   struct ldt_struct *ldt ;
   unsigned short ia32_compat ;
   struct mutex lock ;
   void *vdso ;
   struct vdso_image *vdso_image ;
   atomic_t perf_rdpmc_allowed ;
   u16 pkey_allocation_map ;
   s16 execute_only_pkey ;
   void *bd_addr ;
};
#line 140  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uprobes.h"
typedef struct __anonstruct_mm_context_t_130 mm_context_t;
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct address_space;
#line 67 
struct mem_cgroup;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_132 {
   struct list_head lru ;
   struct address_space *mapping ;
   unsigned long index ;
   unsigned long private ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_133 {
   dma_addr_t dma_addr ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_136 {
   struct page *next ;
   int pages ;
   int pobjects ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_135 {
   struct list_head slab_list ;
   struct __anonstruct_136 __anonCompField___anonunion_135_33 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_138 {
   unsigned int inuse : 16 ;
   unsigned int objects : 15 ;
   unsigned int frozen : 1 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_137 {
   void *s_mem ;
   unsigned long counters ;
   struct __anonstruct_138 __anonCompField___anonunion_137_35 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_134 {
   union __anonunion_135 __anonCompField___anonstruct_134_34 ;
   struct kmem_cache *slab_cache ;
   void *freelist ;
   union __anonunion_137 __anonCompField___anonstruct_134_36 ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_139 {
   unsigned long compound_head ;
   unsigned char compound_dtor ;
   unsigned char compound_order ;
   atomic_t compound_mapcount ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_140 {
   unsigned long _compound_pad_1 ;
   unsigned long _compound_pad_2 ;
   struct list_head deferred_list ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_142 {
   struct mm_struct *pt_mm ;
   atomic_t pt_frag_refcount ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_141 {
   unsigned long _pt_pad_1 ;
   pgtable_t pmd_huge_pte ;
   unsigned long _pt_pad_2 ;
   union __anonunion_142 __anonCompField___anonstruct_141_40 ;
   spinlock_t *ptl ;
};
#line 68 
struct dev_pagemap;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct __anonstruct_143 {
   struct dev_pagemap *pgmap ;
   void *zone_device_data ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_131 {
   struct __anonstruct_132 __anonCompField___anonunion_131_31 ;
   struct __anonstruct_133 __anonCompField___anonunion_131_32 ;
   struct __anonstruct_134 __anonCompField___anonunion_131_37 ;
   struct __anonstruct_139 __anonCompField___anonunion_131_38 ;
   struct __anonstruct_140 __anonCompField___anonunion_131_39 ;
   struct __anonstruct_141 __anonCompField___anonunion_131_41 ;
   struct __anonstruct_143 __anonCompField___anonunion_131_42 ;
   struct callback_head callback_head ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
union __anonunion_144 {
   atomic_t _mapcount ;
   unsigned int page_type ;
   unsigned int active ;
   int units ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/mmu.h"
struct page {
   unsigned long flags ;
   union __anonunion_131 __anonCompField_page_43 ;
   union __anonunion_144 __anonCompField_page_44 ;
   atomic_t _refcount ;
   struct mem_cgroup *mem_cgroup ;
} __attribute__((__aligned__(16)));
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct userfaultfd_ctx;
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct vm_userfaultfd_ctx {
   struct userfaultfd_ctx *ctx ;
};
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_shared_145 {
   struct rb_node rb ;
   unsigned long rb_subtree_last ;
};
#line 292 
struct anon_vma;
#line 292 
struct vm_operations_struct;
#line 292 
struct mempolicy;
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct vm_area_struct {
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   struct vm_area_struct *vm_prev ;
   struct rb_node vm_rb ;
   unsigned long rb_subtree_gap ;
   struct mm_struct *vm_mm ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   struct __anonstruct_shared_145 shared ;
   struct list_head anon_vma_chain ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   atomic_long_t swap_readahead_info ;
   struct mempolicy *vm_policy ;
   struct vm_userfaultfd_ctx vm_userfaultfd_ctx ;
} __attribute__((__designated_init__));
#line 358  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct core_thread {
   struct task_struct *task ;
   struct core_thread *next ;
};
#line 363  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct core_state {
   atomic_t nr_threads ;
   struct core_thread dumper ;
   struct completion startup ;
};
#line 368 
struct kioctx_table;
#line 370 
struct linux_binfmt;
#line 370 
struct mmu_notifier_mm;
#line 370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct __anonstruct_146 {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   u64 vmacache_seqnum ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   unsigned long mmap_base ;
   unsigned long mmap_legacy_base ;
   unsigned long mmap_compat_base ;
   unsigned long mmap_compat_legacy_base ;
   unsigned long task_size ;
   unsigned long highest_vm_end ;
   pgd_t *pgd ;
   atomic_t membarrier_state ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   atomic_long_t pgtables_bytes ;
   int map_count ;
   spinlock_t page_table_lock ;
   struct rw_semaphore mmap_sem ;
   struct list_head mmlist ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   atomic64_t pinned_vm ;
   unsigned long data_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long def_flags ;
   spinlock_t arg_lock ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[46U] ;
   struct mm_rss_stat rss_stat ;
   struct linux_binfmt *binfmt ;
   mm_context_t context ;
   unsigned long flags ;
   struct core_state *core_state ;
   spinlock_t ioctx_lock ;
   struct kioctx_table *ioctx_table ;
   struct task_struct *owner ;
   struct user_namespace *user_ns ;
   struct file *exe_file ;
   struct mmu_notifier_mm *mmu_notifier_mm ;
   unsigned long numa_next_scan ;
   unsigned long numa_scan_offset ;
   int numa_scan_seq ;
   atomic_t tlb_flush_pending ;
   bool tlb_flush_batched ;
   struct uprobes_state uprobes_state ;
   atomic_long_t hugetlb_usage ;
   struct work_struct async_put_work ;
} __attribute__((__designated_init__));
#line 370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
struct mm_struct {
   struct __anonstruct_146 __anonCompField_mm_struct_45 ;
   unsigned long cpu_bitmap[] ;
};
#line 642 
struct vm_fault;
#line 643  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm_types.h"
typedef unsigned int vm_fault_t;
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mmzone.h"
typedef unsigned int isolate_mode_t;
#line 824 
struct resource;
#line 825 
struct vmem_altmap;
#line 282  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/x86_init.h"
struct pci_dev;
#line 159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/topology.h"
struct pci_bus;
#line 440  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/io.h"
struct fwnode_operations;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_handle {
   struct fwnode_handle *secondary ;
   struct fwnode_operations *ops ;
   struct device *dev ;
};
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_endpoint {
   unsigned int port ;
   unsigned int id ;
   struct fwnode_handle *local_fwnode ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_reference_args {
   struct fwnode_handle *fwnode ;
   unsigned int nargs ;
   u64 args[8U] ;
};
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fwnode.h"
struct fwnode_operations {
   struct fwnode_handle *(*get)(struct fwnode_handle *) ;
   void (*put)(struct fwnode_handle *) ;
   bool (*device_is_available)(struct fwnode_handle *) ;
   void *(*device_get_match_data)(struct fwnode_handle *, struct device *) ;
   bool (*property_present)(struct fwnode_handle *, char *) ;
   int (*property_read_int_array)(struct fwnode_handle *, char *, unsigned int , void *, size_t ) ;
   int (*property_read_string_array)(struct fwnode_handle *, char *, char **, size_t ) ;
   char *(*get_name)(struct fwnode_handle *) ;
   char *(*get_name_prefix)(struct fwnode_handle *) ;
   struct fwnode_handle *(*get_parent)(struct fwnode_handle *) ;
   struct fwnode_handle *(*get_next_child_node)(struct fwnode_handle *, struct fwnode_handle *) ;
   struct fwnode_handle *(*get_named_child_node)(struct fwnode_handle *, char *) ;
   int (*get_reference_args)(struct fwnode_handle *, char *, char *, unsigned int , unsigned int , struct fwnode_reference_args *) ;
   struct fwnode_handle *(*graph_get_next_endpoint)(struct fwnode_handle *, struct fwnode_handle *) ;
   struct fwnode_handle *(*graph_get_remote_endpoint)(struct fwnode_handle *) ;
   struct fwnode_handle *(*graph_get_port_parent)(struct fwnode_handle *) ;
   int (*graph_parse_endpoint)(struct fwnode_handle *, struct fwnode_endpoint *) ;
   int (*add_links)(struct fwnode_handle *, struct device *) ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/llist.h"
struct llist_node;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/llist.h"
struct llist_node {
   struct llist_node *next ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/vmalloc.h"
struct vm_struct {
   struct vm_struct *next ;
   void *addr ;
   unsigned long size ;
   unsigned long flags ;
   struct page **pages ;
   unsigned int nr_pages ;
   phys_addr_t phys_addr ;
   void *caller ;
};
#line 822  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/sysctl.h"
struct nsproxy;
#line 823 
struct ctl_table_root;
#line 824 
struct ctl_table_header;
#line 825 
struct ctl_dir;
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
typedef int proc_handler(struct ctl_table *, int , void *, size_t *, loff_t *);
#line 105  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_poll {
   atomic_t event ;
   wait_queue_head_t wait ;
};
#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table {
   char *procname ;
   void *data ;
   int maxlen ;
   umode_t mode ;
   struct ctl_table *child ;
   proc_handler *proc_handler ;
   struct ctl_table_poll *poll ;
   void *extra1 ;
   void *extra2 ;
} __attribute__((__designated_init__));
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_node {
   struct rb_node node ;
   struct ctl_table_header *header ;
};
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct __anonstruct_237 {
   struct ctl_table *ctl_table ;
   int used ;
   int count ;
   int nreg ;
};
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
union __anonunion_236 {
   struct __anonstruct_237 __anonCompField___anonunion_236_47 ;
   struct callback_head rcu ;
};
#line 142 
struct ctl_table_set;
#line 142  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_header {
   union __anonunion_236 __anonCompField_ctl_table_header_48 ;
   struct completion *unregistering ;
   struct ctl_table *ctl_table_arg ;
   struct ctl_table_root *root ;
   struct ctl_table_set *set ;
   struct ctl_dir *parent ;
   struct ctl_node *node ;
   struct hlist_head inodes ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_dir {
   struct ctl_table_header header ;
   struct rb_root root ;
};
#line 167  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_set {
   int (*is_seen)(struct ctl_table_set *) ;
   struct ctl_dir dir ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysctl.h"
struct ctl_table_root {
   struct ctl_table_set default_set ;
   struct ctl_table_set *(*lookup)(struct ctl_table_root *) ;
   void (*set_ownership)(struct ctl_table_header *, struct ctl_table *, kuid_t *, kgid_t *) ;
   int (*permissions)(struct ctl_table_header *, struct ctl_table *) ;
};
#line 242 
struct cred;
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/vdso.h"
struct vdso_image {
   void *data ;
   unsigned long size ;
   unsigned long alt ;
   unsigned long alt_len ;
   long sym_vvar_start ;
   long sym_vvar_page ;
   long sym_pvclock_page ;
   long sym_hvclock_page ;
   long sym_VDSO32_NOTE_MASK ;
   long sym___kernel_sigreturn ;
   long sym___kernel_rt_sigreturn ;
   long sym___kernel_vsyscall ;
   long sym_int80_landing_pad ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Addr;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u16 Elf64_Half;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Off;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u32 Elf64_Word;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef __u64 Elf64_Xword;
#line 192  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};
#line 200  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_sym Elf64_Sym;
#line 221  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_hdr {
   unsigned char e_ident[16U] ;
   Elf64_Half e_type ;
   Elf64_Half e_machine ;
   Elf64_Word e_version ;
   Elf64_Addr e_entry ;
   Elf64_Off e_phoff ;
   Elf64_Off e_shoff ;
   Elf64_Word e_flags ;
   Elf64_Half e_ehsize ;
   Elf64_Half e_phentsize ;
   Elf64_Half e_phnum ;
   Elf64_Half e_shentsize ;
   Elf64_Half e_shnum ;
   Elf64_Half e_shstrndx ;
};
#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_hdr Elf64_Ehdr;
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
struct elf64_shdr {
   Elf64_Word sh_name ;
   Elf64_Word sh_type ;
   Elf64_Xword sh_flags ;
   Elf64_Addr sh_addr ;
   Elf64_Off sh_offset ;
   Elf64_Xword sh_size ;
   Elf64_Word sh_link ;
   Elf64_Word sh_info ;
   Elf64_Xword sh_addralign ;
   Elf64_Xword sh_entsize ;
};
#line 328  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/elf.h"
typedef struct elf64_shdr Elf64_Shdr;
#line 292  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/xarray.h"
struct xarray {
   spinlock_t xa_lock ;
   gfp_t xa_flags ;
   void *xa_head ;
};
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/idr.h"
struct idr {
   struct xarray idr_rt ;
   unsigned int idr_base ;
   unsigned int idr_next ;
};
#line 322 
struct dentry;
#line 323 
struct iattr;
#line 324 
struct super_block;
#line 326 
struct fs_context;
#line 328 
struct kernfs_open_node;
#line 329 
struct kernfs_iattrs;
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_root;
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_dir {
   unsigned long subdirs ;
   struct rb_root children ;
   struct kernfs_root *root ;
};
#line 96 
struct kernfs_node;
#line 96  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_symlink {
   struct kernfs_node *target_kn ;
};
#line 100 
struct kernfs_ops;
#line 100  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_elem_attr {
   struct kernfs_ops *ops ;
   struct kernfs_open_node *open ;
   loff_t size ;
   struct kernfs_node *notify_next ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
union __anonunion_256 {
   struct kernfs_elem_dir dir ;
   struct kernfs_elem_symlink symlink ;
   struct kernfs_elem_attr attr ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_node {
   atomic_t count ;
   atomic_t active ;
   struct lockdep_map dep_map ;
   struct kernfs_node *parent ;
   char *name ;
   struct rb_node rb ;
   void *ns ;
   unsigned int hash ;
   union __anonunion_256 __anonCompField_kernfs_node_51 ;
   void *priv ;
   u64 id ;
   unsigned short flags ;
   umode_t mode ;
   struct kernfs_iattrs *iattr ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_syscall_ops {
   int (*show_options)(struct seq_file *, struct kernfs_root *) ;
   int (*mkdir)(struct kernfs_node *, char *, umode_t ) ;
   int (*rmdir)(struct kernfs_node *) ;
   int (*rename)(struct kernfs_node *, struct kernfs_node *, char *) ;
   int (*show_path)(struct seq_file *, struct kernfs_node *, struct kernfs_root *) ;
};
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_root {
   struct kernfs_node *kn ;
   unsigned int flags ;
   struct idr ino_idr ;
   u32 last_id_lowbits ;
   u32 id_highbits ;
   struct kernfs_syscall_ops *syscall_ops ;
   struct list_head supers ;
   wait_queue_head_t deactivate_waitq ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_open_file {
   struct kernfs_node *kn ;
   struct file *file ;
   struct seq_file *seq_file ;
   void *priv ;
   struct mutex mutex ;
   struct mutex prealloc_mutex ;
   int event ;
   struct list_head list ;
   char *prealloc_buf ;
   size_t atomic_write_len ;
   bool mmapped : 1 ;
   bool released : 1 ;
   struct vm_operations_struct *vm_ops ;
};
#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernfs.h"
struct kernfs_ops {
   int (*open)(struct kernfs_open_file *) ;
   void (*release)(struct kernfs_open_file *) ;
   int (*seq_show)(struct seq_file *, void *) ;
   void *(*seq_start)(struct seq_file *, loff_t *) ;
   void *(*seq_next)(struct seq_file *, void *, loff_t *) ;
   void (*seq_stop)(struct seq_file *, void *) ;
   ssize_t (*read)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   size_t atomic_write_len ;
   bool prealloc ;
   ssize_t (*write)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   __poll_t (*poll)(struct kernfs_open_file *, struct poll_table_struct *) ;
   int (*mmap)(struct kernfs_open_file *, struct vm_area_struct *) ;
   struct lock_class_key lockdep_key ;
};
#line 595 
struct sock;
#line 596 
struct kobject;
#line 597 
enum kobj_ns_type {
    KOBJ_NS_TYPE_NONE = 0,
    KOBJ_NS_TYPE_NET = 1,
    KOBJ_NS_TYPES = 2
};
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject_ns.h"
struct kobj_ns_type_operations {
   enum kobj_ns_type type ;
   bool (*current_may_mount)(void) ;
   void *(*grab_current_ns)(void) ;
   void *(*netlink_ns)(struct sock *) ;
   void *(*initial_ns)(void) ;
   void (*drop_ns)(void *) ;
};
#line 58 
struct bin_attribute;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct attribute {
   char *name ;
   umode_t mode ;
   bool ignore_lockdep : 1 ;
   struct lock_class_key *key ;
   struct lock_class_key skey ;
};
#line 84  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct attribute_group {
   char *name ;
   umode_t (*is_visible)(struct kobject *, struct attribute *, int ) ;
   umode_t (*is_bin_visible)(struct kobject *, struct bin_attribute *, int ) ;
   struct attribute **attrs ;
   struct bin_attribute **bin_attrs ;
};
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct bin_attribute {
   struct attribute attr ;
   size_t size ;
   void *private ;
   ssize_t (*read)(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t , size_t ) ;
   ssize_t (*write)(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t , size_t ) ;
   int (*mmap)(struct file *, struct kobject *, struct bin_attribute *, struct vm_area_struct *) ;
};
#line 223  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sysfs.h"
struct sysfs_ops {
   ssize_t (*show)(struct kobject *, struct attribute *, char *) ;
   ssize_t (*store)(struct kobject *, struct attribute *, char *, size_t ) ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
struct refcount_struct {
   atomic_t refs ;
};
#line 101  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/refcount.h"
typedef struct refcount_struct refcount_t;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kref.h"
struct kref {
   refcount_t refcount ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset;
#line 65 
struct kobj_type;
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobject {
   char *name ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct kernfs_node *sd ;
   struct kref kref ;
   struct delayed_work release ;
   unsigned int state_initialized : 1 ;
   unsigned int state_in_sysfs : 1 ;
   unsigned int state_add_uevent_sent : 1 ;
   unsigned int state_remove_uevent_sent : 1 ;
   unsigned int uevent_suppress : 1 ;
};
#line 139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobj_type {
   void (*release)(struct kobject *) ;
   struct sysfs_ops *sysfs_ops ;
   struct attribute **default_attrs ;
   struct attribute_group **default_groups ;
   struct kobj_ns_type_operations *(*child_ns_type)(struct kobject *) ;
   void *(*namespace)(struct kobject *) ;
   void (*get_ownership)(struct kobject *, kuid_t *, kgid_t *) ;
};
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kobj_uevent_env {
   char *argv[3U] ;
   char *envp[32U] ;
   int envp_idx ;
   char buf[2048U] ;
   int buflen ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset_uevent_ops {
   int (*filter)(struct kset *, struct kobject *) ;
   char *(*name)(struct kset *, struct kobject *) ;
   int (*uevent)(struct kset *, struct kobject *, struct kobj_uevent_env *) ;
};
#line 193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops *uevent_ops ;
} __attribute__((__designated_init__));
#line 247 
struct kernel_param;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kernel_param_ops {
   unsigned int flags ;
   int (*set)(char *, struct kernel_param *) ;
   int (*get)(char *, struct kernel_param *) ;
   void (*free)(void *) ;
};
#line 69 
struct kparam_string;
#line 69 
struct kparam_array;
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
union __anonunion_259 {
   void *arg ;
   struct kparam_string *str ;
   struct kparam_array *arr ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kernel_param {
   char *name ;
   struct module *mod ;
   struct kernel_param_ops *ops ;
   u16 perm ;
   s8 level ;
   u8 flags ;
   union __anonunion_259 __anonCompField_kernel_param_52 ;
};
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kparam_string {
   unsigned int maxlen ;
   char *string ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/moduleparam.h"
struct kparam_array {
   unsigned int max ;
   unsigned int elemsize ;
   unsigned int *num ;
   struct kernel_param_ops *ops ;
   void *elem ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rbtree_latch.h"
struct latch_tree_node {
   struct rb_node node[2U] ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/error-injection.h"
struct error_injection_entry {
   unsigned long addr ;
   int etype ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/module.h"
struct mod_arch_specific {
   unsigned int num_orcs ;
   int *orc_unwind_ip ;
   struct orc_entry *orc_unwind ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct exception_table_entry;
#line 45 
struct module_param_attrs;
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
   struct module_param_attrs *mp ;
   struct completion *kobj_completion ;
} __attribute__((__designated_init__));
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute *, struct module_kobject *, char *) ;
   ssize_t (*store)(struct module_attribute *, struct module_kobject *, char *, size_t ) ;
   void (*setup)(struct module *, char *) ;
   int (*test)(struct module *) ;
   void (*free)(struct module *) ;
};
#line 297 
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2,
    MODULE_STATE_UNFORMED = 3
};
#line 305  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct mod_tree_node {
   struct module *mod ;
   struct latch_tree_node node ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module_layout {
   void *base ;
   unsigned int size ;
   unsigned int text_size ;
   unsigned int ro_size ;
   unsigned int ro_after_init_size ;
   struct mod_tree_node mtn ;
};
#line 334  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct mod_kallsyms {
   Elf64_Sym *symtab ;
   unsigned int num_symtab ;
   char *strtab ;
   char *typetab ;
};
#line 342  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct klp_modinfo {
   Elf64_Ehdr hdr ;
   Elf64_Shdr *sechdrs ;
   char *secstrings ;
   unsigned int symndx ;
};
#line 350 
struct module_sect_attrs;
#line 350 
struct module_notes_attrs;
#line 350 
struct trace_event_call;
#line 350 
struct trace_eval_map;
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/module.h"
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[56U] ;
   struct module_kobject mkobj ;
   struct module_attribute *modinfo_attrs ;
   char *version ;
   char *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol *syms ;
   s32 *crcs ;
   unsigned int num_syms ;
   struct mutex param_lock ;
   struct kernel_param *kp ;
   unsigned int num_kp ;
   unsigned int num_gpl_syms ;
   struct kernel_symbol *gpl_syms ;
   s32 *gpl_crcs ;
   struct kernel_symbol *unused_syms ;
   s32 *unused_crcs ;
   unsigned int num_unused_syms ;
   unsigned int num_unused_gpl_syms ;
   struct kernel_symbol *unused_gpl_syms ;
   s32 *unused_gpl_crcs ;
   bool sig_ok ;
   bool async_probe_requested ;
   struct kernel_symbol *gpl_future_syms ;
   s32 *gpl_future_crcs ;
   unsigned int num_gpl_future_syms ;
   unsigned int num_exentries ;
   struct exception_table_entry *extable ;
   int (*init)(void) ;
   struct module_layout core_layout ;
   struct module_layout init_layout ;
   struct mod_arch_specific arch ;
   unsigned long taints ;
   unsigned int num_bugs ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   struct mod_kallsyms *kallsyms ;
   struct mod_kallsyms core_kallsyms ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   char *args ;
   void *percpu ;
   unsigned int percpu_size ;
   unsigned int num_tracepoints ;
   tracepoint_ptr_t *tracepoints_ptrs ;
   unsigned int num_srcu_structs ;
   struct srcu_struct **srcu_struct_ptrs ;
   unsigned int num_bpf_raw_events ;
   struct bpf_raw_event_map *bpf_raw_events ;
   struct jump_entry *jump_entries ;
   unsigned int num_jump_entries ;
   unsigned int num_trace_bprintk_fmt ;
   char **trace_bprintk_fmt_start ;
   struct trace_event_call **trace_events ;
   unsigned int num_trace_events ;
   struct trace_eval_map **trace_evals ;
   unsigned int num_trace_evals ;
   unsigned int num_ftrace_callsites ;
   unsigned long *ftrace_callsites ;
   bool klp ;
   bool klp_alive ;
   struct klp_modinfo *klp_info ;
   struct list_head source_list ;
   struct list_head target_list ;
   void (*exit)(void) ;
   atomic_t refcnt ;
   ctor_fn_t *ctors ;
   unsigned int num_ctors ;
   struct error_injection_entry *ei_funcs ;
   unsigned int num_ei_funcs ;
} __attribute__((__designated_init__, __aligned__(64)));
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uuid.h"
struct __anonstruct_uuid_t_267 {
   __u8 b[16U] ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uuid.h"
typedef struct __anonstruct_uuid_t_267 uuid_t;
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uuid.h"
typedef unsigned long kernel_ulong_t;
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct pci_device_id {
   __u32 vendor ;
   __u32 device ;
   __u32 subvendor ;
   __u32 subdevice ;
   __u32 class ;
   __u32 class_mask ;
   kernel_ulong_t driver_data ;
};
#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct acpi_device_id {
   __u8 id[9U] ;
   kernel_ulong_t driver_data ;
   __u32 cls ;
   __u32 cls_msk ;
};
#line 260  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mod_devicetable.h"
struct of_device_id {
   char name[32U] ;
   char type[32U] ;
   char compatible[128U] ;
   void *data ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ioport.h"
struct resource {
   resource_size_t start ;
   resource_size_t end ;
   char *name ;
   unsigned long flags ;
   unsigned long desc ;
   struct resource *parent ;
   struct resource *sibling ;
   struct resource *child ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timerqueue.h"
struct timerqueue_node {
   struct rb_node node ;
   ktime_t expires ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timerqueue.h"
struct timerqueue_head {
   struct rb_root_cached rb_root ;
};
#line 60 
struct hrtimer_clock_base;
#line 61 
struct hrtimer_cpu_base;
#line 80 
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
};
#line 117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer {
   struct timerqueue_node node ;
   ktime_t _softexpires ;
   enum hrtimer_restart (*function)(struct hrtimer *) ;
   struct hrtimer_clock_base *base ;
   u8 state ;
   u8 is_rel ;
   u8 is_soft ;
   u8 is_hard ;
};
#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   unsigned int index ;
   clockid_t clockid ;
   seqcount_t seq ;
   struct hrtimer *running ;
   struct timerqueue_head active ;
   ktime_t (*get_time)(void) ;
   ktime_t offset ;
} __attribute__((__aligned__(64)));
#line 213  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hrtimer.h"
struct hrtimer_cpu_base {
   raw_spinlock_t lock ;
   unsigned int cpu ;
   unsigned int active_bases ;
   unsigned int clock_was_set_seq ;
   unsigned int hres_active : 1 ;
   unsigned int in_hrtirq : 1 ;
   unsigned int hang_detected : 1 ;
   unsigned int softirq_activated : 1 ;
   unsigned int nr_events ;
   unsigned short nr_retries ;
   unsigned short nr_hangs ;
   unsigned int max_hang_time ;
   ktime_t expires_next ;
   struct hrtimer *next_timer ;
   ktime_t softirq_expires_next ;
   struct hrtimer *softirq_next_timer ;
   struct hrtimer_clock_base clock_base[8U] ;
} __attribute__((__aligned__(64)));
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct pm_message {
   int event ;
};
#line 53  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
typedef struct pm_message pm_message_t;
#line 278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_ops {
   int (*prepare)(struct device *) ;
   void (*complete)(struct device *) ;
   int (*suspend)(struct device *) ;
   int (*resume)(struct device *) ;
   int (*freeze)(struct device *) ;
   int (*thaw)(struct device *) ;
   int (*poweroff)(struct device *) ;
   int (*restore)(struct device *) ;
   int (*suspend_late)(struct device *) ;
   int (*resume_early)(struct device *) ;
   int (*freeze_late)(struct device *) ;
   int (*thaw_early)(struct device *) ;
   int (*poweroff_late)(struct device *) ;
   int (*restore_early)(struct device *) ;
   int (*suspend_noirq)(struct device *) ;
   int (*resume_noirq)(struct device *) ;
   int (*freeze_noirq)(struct device *) ;
   int (*thaw_noirq)(struct device *) ;
   int (*poweroff_noirq)(struct device *) ;
   int (*restore_noirq)(struct device *) ;
   int (*runtime_suspend)(struct device *) ;
   int (*runtime_resume)(struct device *) ;
   int (*runtime_idle)(struct device *) ;
};
#line 303 
enum rpm_status {
    RPM_ACTIVE = 0,
    RPM_RESUMING = 1,
    RPM_SUSPENDED = 2,
    RPM_SUSPENDING = 3
};
#line 310 
enum rpm_request {
    RPM_REQ_NONE = 0,
    RPM_REQ_IDLE = 1,
    RPM_REQ_SUSPEND = 2,
    RPM_REQ_AUTOSUSPEND = 3,
    RPM_REQ_RESUME = 4
};
#line 318 
struct wakeup_source;
#line 319 
struct wake_irq;
#line 320 
struct pm_domain_data;
#line 530  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct pm_subsys_data {
   spinlock_t lock ;
   unsigned int refcount ;
   struct list_head clock_list ;
   struct pm_domain_data *domain_data ;
};
#line 573 
struct dev_pm_qos;
#line 573  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned int can_wakeup : 1 ;
   unsigned int async_suspend : 1 ;
   bool in_dpm_list : 1 ;
   bool is_prepared : 1 ;
   bool is_suspended : 1 ;
   bool is_noirq_suspended : 1 ;
   bool is_late_suspended : 1 ;
   bool no_pm : 1 ;
   bool early_init : 1 ;
   bool direct_complete : 1 ;
   u32 driver_flags ;
   spinlock_t lock ;
   struct list_head entry ;
   struct completion completion ;
   struct wakeup_source *wakeup ;
   bool wakeup_path : 1 ;
   bool syscore : 1 ;
   bool no_pm_callbacks : 1 ;
   unsigned int must_resume : 1 ;
   unsigned int may_skip_resume : 1 ;
   struct hrtimer suspend_timer ;
   unsigned long timer_expires ;
   struct work_struct work ;
   wait_queue_head_t wait_queue ;
   struct wake_irq *wakeirq ;
   atomic_t usage_count ;
   atomic_t child_count ;
   unsigned int disable_depth : 3 ;
   unsigned int idle_notification : 1 ;
   unsigned int request_pending : 1 ;
   unsigned int deferred_resume : 1 ;
   unsigned int runtime_auto : 1 ;
   bool ignore_children : 1 ;
   unsigned int no_callbacks : 1 ;
   unsigned int irq_safe : 1 ;
   unsigned int use_autosuspend : 1 ;
   unsigned int timer_autosuspends : 1 ;
   unsigned int memalloc_noio : 1 ;
   unsigned int links_count ;
   enum rpm_request request ;
   enum rpm_status runtime_status ;
   int runtime_error ;
   int autosuspend_delay ;
   u64 last_busy ;
   u64 active_time ;
   u64 suspended_time ;
   u64 accounting_timestamp ;
   struct pm_subsys_data *subsys_data ;
   void (*set_latency_tolerance)(struct device *, s32 ) ;
   struct dev_pm_qos *qos ;
};
#line 650  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm.h"
struct dev_pm_domain {
   struct dev_pm_ops ops ;
   int (*start)(struct device *) ;
   void (*detach)(struct device *, bool ) ;
   int (*activate)(struct device *) ;
   void (*sync)(struct device *) ;
   void (*dismiss)(struct device *) ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rculist.h"
enum pid_type {
    PIDTYPE_PID = 0,
    PIDTYPE_TGID = 1,
    PIDTYPE_PGID = 2,
    PIDTYPE_SID = 3,
    PIDTYPE_MAX = 4
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct pid_namespace;
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct upid {
   int nr ;
   struct pid_namespace *ns ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pid.h"
struct pid {
   refcount_t count ;
   unsigned int level ;
   struct hlist_head tasks[4U] ;
   wait_queue_head_t wait_pidfd ;
   struct callback_head rcu ;
   struct upid numbers[1U] ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhash_head {
   struct rhash_head *next ;
};
#line 25 
struct bucket_table;
#line 33 
struct rhashtable;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable_compare_arg {
   struct rhashtable *ht ;
   void *key ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable_params {
   u16 nelem_hint ;
   u16 key_len ;
   u16 key_offset ;
   u16 head_offset ;
   unsigned int max_size ;
   u16 min_size ;
   bool automatic_shrinking ;
   u32 (*hashfn)(void *, u32 , u32 ) ;
   u32 (*obj_hashfn)(void *, u32 , u32 ) ;
   int (*obj_cmpfn)(struct rhashtable_compare_arg *, void *) ;
};
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rhashtable-types.h"
struct rhashtable {
   struct bucket_table *tbl ;
   unsigned int key_len ;
   unsigned int max_elems ;
   struct rhashtable_params p ;
   bool rhlist ;
   struct work_struct run_work ;
   struct mutex mutex ;
   spinlock_t lock ;
   atomic_t nelems ;
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/sem.h"
struct sem_undo_list;
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sem.h"
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shm.h"
struct sysv_shm {
   struct list_head shm_clist ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/plist.h"
struct plist_node {
   int prio ;
   struct list_head prio_list ;
   struct list_head node_list ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/seccomp.h"
struct seccomp_filter;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seccomp.h"
struct seccomp {
   int mode ;
   struct seccomp_filter *filter ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/resource.h"
struct rlimit {
   __kernel_ulong_t rlim_cur ;
   __kernel_ulong_t rlim_max ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/latencytop.h"
struct latency_record {
   unsigned long backtrace[12U] ;
   unsigned int count ;
   unsigned long time ;
   unsigned long max ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/types.h"
struct task_cputime {
   u64 stime ;
   u64 utime ;
   unsigned long long sum_exec_runtime ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
struct __anonstruct_sigset_t_307 {
   unsigned long sig[1U] ;
};
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
typedef struct __anonstruct_sigset_t_307 sigset_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/signal.h"
typedef void __signalfn_t(int );
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef __signalfn_t *__sighandler_t;
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef void __restorefn_t(void);
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/signal-defs.h"
typedef __restorefn_t *__sigrestore_t;
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union sigval {
   int sival_int ;
   void *sival_ptr ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
typedef union sigval sigval_t;
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__kill_308 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__timer_309 {
   __kernel_timer_t _tid ;
   int _overrun ;
   sigval_t _sigval ;
   int _sys_private ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__rt_310 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   sigval_t _sigval ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigchld_311 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   int _status ;
   __kernel_clock_t _utime ;
   __kernel_clock_t _stime ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__addr_bnd_314 {
   char _dummy_bnd[8U] ;
   void *_lower ;
   void *_upper ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__addr_pkey_315 {
   char _dummy_pkey[8U] ;
   __u32 _pkey ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union __anonunion_313 {
   short _addr_lsb ;
   struct __anonstruct__addr_bnd_314 _addr_bnd ;
   struct __anonstruct__addr_pkey_315 _addr_pkey ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigfault_312 {
   void *_addr ;
   union __anonunion_313 __anonCompField___anonstruct__sigfault_312_53 ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigpoll_316 {
   long _band ;
   int _fd ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigsys_317 {
   void *_call_addr ;
   int _syscall ;
   unsigned int _arch ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/siginfo.h"
union __sifields {
   struct __anonstruct__kill_308 _kill ;
   struct __anonstruct__timer_309 _timer ;
   struct __anonstruct__rt_310 _rt ;
   struct __anonstruct__sigchld_311 _sigchld ;
   struct __anonstruct__sigfault_312 _sigfault ;
   struct __anonstruct__sigpoll_316 _sigpoll ;
   struct __anonstruct__sigsys_317 _sigsys ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct __anonstruct_322 {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __sifields _sifields ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct kernel_siginfo {
   struct __anonstruct_322 __anonCompField_kernel_siginfo_56 ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
typedef struct kernel_siginfo kernel_siginfo_t;
#line 20 
struct user_struct;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};
#line 49  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/signal_types.h"
struct k_sigaction {
   struct sigaction sa ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/task_io_accounting.h"
struct task_io_accounting {
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/posix-timers.h"
struct posix_cputimer_base {
   u64 nextevt ;
   struct timerqueue_head tqhead ;
};
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/posix-timers.h"
struct posix_cputimers {
   struct posix_cputimer_base bases[3U] ;
   unsigned int timers_active ;
   unsigned int expiry_active ;
};
#line 193 
struct signal_struct;
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rseq.h"
union __anonunion_rseq_cs_327 {
   __u64 ptr64 ;
   __u64 ptr ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/rseq.h"
struct rseq {
   __u32 cpu_id_start ;
   __u32 cpu_id ;
   union __anonunion_rseq_cs_327 rseq_cs ;
   __u32 flags ;
} __attribute__((__aligned__(32)));
#line 146 
struct audit_context;
#line 147 
struct backing_dev_info;
#line 148 
struct bio_list;
#line 149 
struct blk_plug;
#line 150 
struct capture_control;
#line 151 
struct cfs_rq;
#line 152 
struct fs_struct;
#line 153 
struct futex_pi_state;
#line 154 
struct io_context;
#line 155 
struct nameidata;
#line 156 
struct perf_event_context;
#line 157 
struct pipe_inode_info;
#line 159 
struct reclaim_state;
#line 160 
struct robust_list_head;
#line 165 
struct sighand_struct;
#line 166 
struct task_delay_info;
#line 167 
struct task_group;
#line 242  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct prev_cputime {
   u64 utime ;
   u64 stime ;
   raw_spinlock_t lock ;
};
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_info {
   unsigned long pcount ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
};
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct load_weight {
   unsigned long weight ;
   u32 inv_weight ;
};
#line 352  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct util_est {
   unsigned int enqueued ;
   unsigned int ewma ;
} __attribute__((__aligned__(8)));
#line 401  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_avg {
   u64 last_update_time ;
   u64 load_sum ;
   u64 runnable_load_sum ;
   u32 util_sum ;
   u32 period_contrib ;
   unsigned long load_avg ;
   unsigned long runnable_load_avg ;
   unsigned long util_avg ;
   struct util_est util_est ;
} __attribute__((__aligned__(64)));
#line 413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_statistics {
   u64 wait_start ;
   u64 wait_max ;
   u64 wait_count ;
   u64 wait_sum ;
   u64 iowait_count ;
   u64 iowait_sum ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
};
#line 449  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_entity {
   struct load_weight load ;
   unsigned long runnable_weight ;
   struct rb_node run_node ;
   struct list_head group_node ;
   unsigned int on_rq ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 nr_migrations ;
   struct sched_statistics statistics ;
   int depth ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
   struct sched_avg avg ;
};
#line 486 
struct rt_rq;
#line 486  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_rt_entity {
   struct list_head run_list ;
   unsigned long timeout ;
   unsigned long watchdog_stamp ;
   unsigned int time_slice ;
   unsigned short on_rq ;
   unsigned short on_list ;
   struct sched_rt_entity *back ;
   struct sched_rt_entity *parent ;
   struct rt_rq *rt_rq ;
   struct rt_rq *my_q ;
} __attribute__((__designated_init__));
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct sched_dl_entity {
   struct rb_node rb_node ;
   u64 dl_runtime ;
   u64 dl_deadline ;
   u64 dl_period ;
   u64 dl_bw ;
   u64 dl_density ;
   s64 runtime ;
   u64 deadline ;
   unsigned int flags ;
   unsigned int dl_throttled : 1 ;
   unsigned int dl_boosted : 1 ;
   unsigned int dl_yielded : 1 ;
   unsigned int dl_non_contending : 1 ;
   unsigned int dl_overrun : 1 ;
   struct hrtimer dl_timer ;
   struct hrtimer inactive_timer ;
};
#line 600  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct uclamp_se {
   unsigned int value : 11 ;
   unsigned int bucket_id : 3 ;
   unsigned int active : 1 ;
   unsigned int user_defined : 1 ;
};
#line 625  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct wake_q_node {
   struct wake_q_node *next ;
};
#line 629 
struct sched_class;
#line 629 
struct key;
#line 629 
struct files_struct;
#line 629 
struct rt_mutex_waiter;
#line 629 
struct css_set;
#line 629 
struct compat_robust_list_head;
#line 629 
struct numa_group;
#line 629  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
union __anonunion_329 {
   refcount_t rcu_users ;
   struct callback_head rcu ;
};
#line 629 
struct ftrace_ret_stack;
#line 629 
struct kcov;
#line 629 
struct request_queue;
#line 629  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
struct task_struct {
   struct thread_info thread_info ;
   long state ;
   void *stack ;
   refcount_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   struct llist_node wake_entry ;
   int on_cpu ;
   unsigned int cpu ;
   unsigned int wakee_flips ;
   unsigned long wakee_flip_decay_ts ;
   struct task_struct *last_wakee ;
   int recent_used_cpu ;
   int wake_cpu ;
   int on_rq ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   unsigned int rt_priority ;
   struct sched_class *sched_class ;
   struct sched_entity se ;
   struct sched_rt_entity rt ;
   struct task_group *sched_task_group ;
   struct sched_dl_entity dl ;
   struct uclamp_se uclamp_req[2U] ;
   struct uclamp_se uclamp[2U] ;
   struct hlist_head preempt_notifiers ;
   unsigned int btrace_seq ;
   unsigned int policy ;
   int nr_cpus_allowed ;
   cpumask_t *cpus_ptr ;
   cpumask_t cpus_mask ;
   unsigned long rcu_tasks_nvcsw ;
   u8 rcu_tasks_holdout ;
   u8 rcu_tasks_idx ;
   int rcu_tasks_idle_cpu ;
   struct list_head rcu_tasks_holdout_list ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct plist_node pushable_tasks ;
   struct rb_node pushable_dl_tasks ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   struct vmacache vmacache ;
   struct task_rss_stat rss_stat ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned long jobctl ;
   unsigned int personality ;
   unsigned int sched_reset_on_fork : 1 ;
   unsigned int sched_contributes_to_load : 1 ;
   unsigned int sched_migrated : 1 ;
   unsigned int sched_remote_wakeup : 1 ;
   unsigned int sched_psi_wake_requeue : 1 ;
   unsigned int  ;
   unsigned int in_execve : 1 ;
   unsigned int in_iowait : 1 ;
   unsigned int restore_sigmask : 1 ;
   unsigned int in_user_fault : 1 ;
   unsigned int brk_randomized : 1 ;
   unsigned int no_cgroup_migration : 1 ;
   unsigned int frozen : 1 ;
   unsigned int use_memdelay : 1 ;
   unsigned long atomic_flags ;
   struct restart_block restart_block ;
   pid_t pid ;
   pid_t tgid ;
   unsigned long stack_canary ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct list_head ptraced ;
   struct list_head ptrace_entry ;
   struct pid *thread_pid ;
   struct hlist_node pid_links[4U] ;
   struct list_head thread_group ;
   struct list_head thread_node ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   u64 utime ;
   u64 stime ;
   u64 gtime ;
   struct prev_cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   u64 start_time ;
   u64 start_boottime ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   struct posix_cputimers posix_cputimers ;
   struct cred *ptracer_cred ;
   struct cred *real_cred ;
   struct cred *cred ;
   struct key *cached_requested_key ;
   char comm[16U] ;
   struct nameidata *nameidata ;
   struct sysv_sem sysvsem ;
   struct sysv_shm sysvshm ;
   unsigned long last_switch_count ;
   unsigned long last_switch_time ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t sas_ss_size ;
   unsigned int sas_ss_flags ;
   struct callback_head *task_works ;
   struct audit_context *audit_context ;
   kuid_t loginuid ;
   unsigned int sessionid ;
   struct seccomp seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   raw_spinlock_t pi_lock ;
   struct wake_q_node wake_q ;
   struct rb_root_cached pi_waiters ;
   struct task_struct *pi_top_task ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct mutex_waiter *blocked_on ;
   int non_block_count ;
   unsigned int irq_events ;
   unsigned long hardirq_enable_ip ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned int hardirq_disable_event ;
   int hardirqs_enabled ;
   int hardirq_context ;
   unsigned long softirq_disable_ip ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_disable_event ;
   unsigned int softirq_enable_event ;
   int softirqs_enabled ;
   int softirq_context ;
   u64 curr_chain_key ;
   int lockdep_depth ;
   unsigned int lockdep_recursion ;
   struct held_lock held_locks[48U] ;
   unsigned int in_ubsan ;
   void *journal_info ;
   struct bio_list *bio_list ;
   struct blk_plug *plug ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   struct capture_control *capture_control ;
   unsigned long ptrace_message ;
   kernel_siginfo_t *last_siginfo ;
   struct task_io_accounting ioac ;
   unsigned int psi_flags ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   u64 acct_timexpd ;
   nodemask_t mems_allowed ;
   seqcount_t mems_allowed_seq ;
   int cpuset_mem_spread_rotor ;
   int cpuset_slab_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   u32 closid ;
   u32 rmid ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   struct mutex futex_exit_mutex ;
   unsigned int futex_state ;
   struct perf_event_context *perf_event_ctxp[2U] ;
   struct mutex perf_event_mutex ;
   struct list_head perf_event_list ;
   struct mempolicy *mempolicy ;
   short il_prev ;
   short pref_node_fork ;
   int numa_scan_seq ;
   unsigned int numa_scan_period ;
   unsigned int numa_scan_period_max ;
   int numa_preferred_nid ;
   unsigned long numa_migrate_retry ;
   u64 node_stamp ;
   u64 last_task_numa_placement ;
   u64 last_sum_exec_runtime ;
   struct callback_head numa_work ;
   struct numa_group *numa_group ;
   unsigned long *numa_faults ;
   unsigned long total_numa_faults ;
   unsigned long numa_faults_locality[3U] ;
   unsigned long numa_pages_migrated ;
   struct rseq *rseq ;
   u32 rseq_sig ;
   unsigned long rseq_event_mask ;
   struct tlbflush_unmap_batch tlb_ubc ;
   union __anonunion_329 __anonCompField_task_struct_58 ;
   struct pipe_inode_info *splice_pipe ;
   struct page_frag task_frag ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   unsigned int fail_nth ;
   int nr_dirtied ;
   int nr_dirtied_pause ;
   unsigned long dirty_paused_when ;
   int latency_record_count ;
   struct latency_record latency_record[32U] ;
   u64 timer_slack_ns ;
   u64 default_timer_slack_ns ;
   unsigned int kasan_depth ;
   int curr_ret_stack ;
   int curr_ret_depth ;
   struct ftrace_ret_stack *ret_stack ;
   unsigned long long ftrace_timestamp ;
   atomic_t trace_overrun ;
   atomic_t tracing_graph_pause ;
   unsigned long trace ;
   unsigned long trace_recursion ;
   unsigned int kcov_mode ;
   unsigned int kcov_size ;
   void *kcov_area ;
   struct kcov *kcov ;
   u64 kcov_handle ;
   int kcov_sequence ;
   struct mem_cgroup *memcg_in_oom ;
   gfp_t memcg_oom_gfp_mask ;
   int memcg_oom_order ;
   unsigned int memcg_nr_pages_over_high ;
   struct mem_cgroup *active_memcg ;
   struct request_queue *throttle_queue ;
   struct uprobe_task *utask ;
   unsigned int sequential_io ;
   unsigned int sequential_io_avg ;
   unsigned long task_state_change ;
   int pagefault_disabled ;
   struct task_struct *oom_reaper_list ;
   struct vm_struct *stack_vm_area ;
   refcount_t stack_refcount ;
   int patch_state ;
   void *security ;
   struct thread_struct thread ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ratelimit.h"
struct ratelimit_state {
   raw_spinlock_t lock ;
   int interval ;
   int burst ;
   int printed ;
   int missed ;
   unsigned long begin ;
   unsigned long flags ;
};
#line 5  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/device.h"
struct dev_archdata {
   void *iommu ;
};
#line 12 
struct dma_map_ops;
#line 23 
struct device_driver;
#line 24 
struct driver_private;
#line 25 
struct class;
#line 26 
struct subsys_private;
#line 27 
struct bus_type;
#line 28 
struct iommu_ops;
#line 29 
struct iommu_group;
#line 30 
struct iommu_fwspec;
#line 31 
struct dev_pin_info;
#line 32 
struct iommu_param;
#line 122  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct bus_type {
   char *name ;
   char *dev_name ;
   struct device *dev_root ;
   struct attribute_group **bus_groups ;
   struct attribute_group **dev_groups ;
   struct attribute_group **drv_groups ;
   int (*match)(struct device *, struct device_driver *) ;
   int (*uevent)(struct device *, struct kobj_uevent_env *) ;
   int (*probe)(struct device *) ;
   void (*sync_state)(struct device *) ;
   int (*remove)(struct device *) ;
   void (*shutdown)(struct device *) ;
   int (*online)(struct device *) ;
   int (*offline)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   int (*num_vf)(struct device *) ;
   int (*dma_configure)(struct device *) ;
   struct dev_pm_ops *pm ;
   struct iommu_ops *iommu_ops ;
   struct subsys_private *p ;
   struct lock_class_key lock_key ;
   bool need_parent_lock ;
};
#line 164 
struct device_type;
#line 309 
enum probe_type {
    PROBE_DEFAULT_STRATEGY = 0,
    PROBE_PREFER_ASYNCHRONOUS = 1,
    PROBE_FORCE_SYNCHRONOUS = 2
};
#line 383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_driver {
   char *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char *mod_name ;
   bool suppress_bind_attrs ;
   enum probe_type probe_type ;
   struct of_device_id *of_match_table ;
   struct acpi_device_id *acpi_match_table ;
   int (*probe)(struct device *) ;
   void (*sync_state)(struct device *) ;
   int (*remove)(struct device *) ;
   void (*shutdown)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   struct attribute_group **groups ;
   struct attribute_group **dev_groups ;
   struct dev_pm_ops *pm ;
   void (*coredump)(struct device *) ;
   struct driver_private *p ;
};
#line 589  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct class {
   char *name ;
   struct module *owner ;
   struct attribute_group **class_groups ;
   struct attribute_group **dev_groups ;
   struct kobject *dev_kobj ;
   int (*dev_uevent)(struct device *, struct kobj_uevent_env *) ;
   char *(*devnode)(struct device *, umode_t *) ;
   void (*class_release)(struct class *) ;
   void (*dev_release)(struct device *) ;
   int (*shutdown_pre)(struct device *) ;
   struct kobj_ns_type_operations *ns_type ;
   void *(*namespace)(struct device *) ;
   void (*get_ownership)(struct device *, kuid_t *, kgid_t *) ;
   struct dev_pm_ops *pm ;
   struct subsys_private *p ;
};
#line 809  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_type {
   char *name ;
   struct attribute_group **groups ;
   int (*uevent)(struct device *, struct kobj_uevent_env *) ;
   char *(*devnode)(struct device *, umode_t *, kuid_t *, kgid_t *) ;
   void (*release)(struct device *) ;
   struct dev_pm_ops *pm ;
};
#line 1008  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};
#line 1139 
enum dl_dev_state {
    DL_DEV_NO_DRIVER = 0,
    DL_DEV_PROBING = 1,
    DL_DEV_DRIVER_BOUND = 2,
    DL_DEV_UNBINDING = 3
};
#line 1164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct dev_links_info {
   struct list_head suppliers ;
   struct list_head consumers ;
   struct list_head needs_suppliers ;
   struct list_head defer_sync ;
   bool need_for_probe ;
   enum dl_dev_state status ;
};
#line 1259 
struct dma_coherent_mem;
#line 1259 
struct cma;
#line 1259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
struct device {
   struct kobject kobj ;
   struct device *parent ;
   struct device_private *p ;
   char *init_name ;
   struct device_type *type ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *platform_data ;
   void *driver_data ;
   struct mutex lockdep_mutex ;
   struct mutex mutex ;
   struct dev_links_info links ;
   struct dev_pm_info power ;
   struct dev_pm_domain *pm_domain ;
   struct irq_domain *msi_domain ;
   struct dev_pin_info *pins ;
   struct list_head msi_list ;
   struct dma_map_ops *dma_ops ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   u64 bus_dma_limit ;
   unsigned long dma_pfn_offset ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct cma *cma_area ;
   struct dev_archdata archdata ;
   struct device_node *of_node ;
   struct fwnode_handle *fwnode ;
   int numa_node ;
   dev_t devt ;
   u32 id ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct class *class ;
   struct attribute_group **groups ;
   void (*release)(struct device *) ;
   struct iommu_group *iommu_group ;
   struct iommu_fwspec *iommu_fwspec ;
   struct iommu_param *iommu_param ;
   bool offline_disabled : 1 ;
   bool offline : 1 ;
   bool of_node_reused : 1 ;
   bool state_synced : 1 ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_wakeup.h"
struct wakeup_source {
   char *name ;
   int id ;
   struct list_head entry ;
   spinlock_t lock ;
   struct wake_irq *wakeirq ;
   struct timer_list timer ;
   unsigned long timer_expires ;
   ktime_t total_time ;
   ktime_t max_time ;
   ktime_t last_time ;
   ktime_t start_prevent_time ;
   ktime_t prevent_sleep_time ;
   unsigned long event_count ;
   unsigned long active_count ;
   unsigned long relax_count ;
   unsigned long expire_count ;
   unsigned long wakeup_count ;
   struct device *dev ;
   bool active : 1 ;
   bool autosleep_enabled : 1 ;
};
#line 1913  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
enum irqreturn {
    IRQ_NONE = 0,
    IRQ_HANDLED = 1,
    IRQ_WAKE_THREAD = 2
};
#line 1919  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
typedef enum irqreturn irqreturn_t;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/extable.h"
struct exception_table_entry {
   int insn ;
   int fixup ;
   int handler ;
};
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
struct proc_dir_entry;
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/io.h"
struct percpu_ref;
#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/io.h"
typedef void percpu_ref_func_t(struct percpu_ref *);
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-refcount.h"
struct percpu_ref {
   atomic_long_t count ;
   unsigned long percpu_count_ptr ;
   percpu_ref_func_t *release ;
   percpu_ref_func_t *confirm_switch ;
   bool force_atomic : 1 ;
   bool allow_reinit : 1 ;
   struct callback_head rcu ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct hotplug_slot;
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_slot {
   struct pci_bus *bus ;
   struct list_head list ;
   struct hotplug_slot *hotplug ;
   unsigned char number ;
   struct kobject kobj ;
};
#line 99  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef int pci_power_t;
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned int pci_channel_state_t;
#line 162 
enum pci_channel_state {
    pci_channel_io_normal = 1,
    pci_channel_io_frozen = 2,
    pci_channel_io_perm_failure = 3
};
#line 181  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned short pci_dev_flags_t;
#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned short pci_bus_flags_t;
#line 282 
struct pcie_link_state;
#line 283 
struct pci_vpd;
#line 284 
struct pci_sriov;
#line 285 
struct pci_p2pdma;
#line 290 
struct aer_stats;
#line 290 
struct pci_driver;
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
union __anonunion_406 {
   struct pci_sriov *sriov ;
   struct pci_dev *physfn ;
};
#line 290  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_dev {
   struct list_head bus_list ;
   struct pci_bus *bus ;
   struct pci_bus *subordinate ;
   void *sysdata ;
   struct proc_dir_entry *procent ;
   struct pci_slot *slot ;
   unsigned int devfn ;
   unsigned short vendor ;
   unsigned short device ;
   unsigned short subsystem_vendor ;
   unsigned short subsystem_device ;
   unsigned int class ;
   u8 revision ;
   u8 hdr_type ;
   u16 aer_cap ;
   struct aer_stats *aer_stats ;
   u8 pcie_cap ;
   u8 msi_cap ;
   u8 msix_cap ;
   u8 pcie_mpss : 3 ;
   u8 rom_base_reg ;
   u8 pin ;
   u16 pcie_flags_reg ;
   unsigned long *dma_alias_mask ;
   struct pci_driver *driver ;
   u64 dma_mask ;
   struct device_dma_parameters dma_parms ;
   pci_power_t current_state ;
   unsigned int imm_ready : 1 ;
   u8 pm_cap ;
   unsigned int pme_support : 5 ;
   unsigned int pme_poll : 1 ;
   unsigned int d1_support : 1 ;
   unsigned int d2_support : 1 ;
   unsigned int no_d1d2 : 1 ;
   unsigned int no_d3cold : 1 ;
   unsigned int bridge_d3 : 1 ;
   unsigned int d3cold_allowed : 1 ;
   unsigned int mmio_always_on : 1 ;
   unsigned int wakeup_prepared : 1 ;
   unsigned int runtime_d3cold : 1 ;
   unsigned int skip_bus_pm : 1 ;
   unsigned int ignore_hotplug : 1 ;
   unsigned int hotplug_user_indicators : 1 ;
   unsigned int clear_retrain_link : 1 ;
   unsigned int d3_delay ;
   unsigned int d3cold_delay ;
   struct pcie_link_state *link_state ;
   unsigned int ltr_path : 1 ;
   unsigned int eetlp_prefix_path : 1 ;
   pci_channel_state_t error_state ;
   struct device dev ;
   int cfg_size ;
   unsigned int irq ;
   struct resource resource[17U] ;
   bool match_driver ;
   unsigned int transparent : 1 ;
   unsigned int io_window : 1 ;
   unsigned int pref_window : 1 ;
   unsigned int pref_64_window : 1 ;
   unsigned int multifunction : 1 ;
   unsigned int is_busmaster : 1 ;
   unsigned int no_msi : 1 ;
   unsigned int no_64bit_msi : 1 ;
   unsigned int block_cfg_access : 1 ;
   unsigned int broken_parity_status : 1 ;
   unsigned int irq_reroute_variant : 2 ;
   unsigned int msi_enabled : 1 ;
   unsigned int msix_enabled : 1 ;
   unsigned int ari_enabled : 1 ;
   unsigned int ats_enabled : 1 ;
   unsigned int pasid_enabled : 1 ;
   unsigned int pri_enabled : 1 ;
   unsigned int is_managed : 1 ;
   unsigned int needs_freset : 1 ;
   unsigned int state_saved : 1 ;
   unsigned int is_physfn : 1 ;
   unsigned int is_virtfn : 1 ;
   unsigned int reset_fn : 1 ;
   unsigned int is_hotplug_bridge : 1 ;
   unsigned int shpc_managed : 1 ;
   unsigned int is_thunderbolt : 1 ;
   unsigned int untrusted : 1 ;
   unsigned int __aer_firmware_first_valid : 1 ;
   unsigned int __aer_firmware_first : 1 ;
   unsigned int broken_intx_masking : 1 ;
   unsigned int io_window_1k : 1 ;
   unsigned int irq_managed : 1 ;
   unsigned int non_compliant_bars : 1 ;
   unsigned int is_probed : 1 ;
   unsigned int link_active_reporting : 1 ;
   unsigned int no_vf_scan : 1 ;
   pci_dev_flags_t dev_flags ;
   atomic_t enable_cnt ;
   u32 saved_config_space[16U] ;
   struct hlist_head saved_cap_space ;
   struct bin_attribute *rom_attr ;
   int rom_attr_enabled ;
   struct bin_attribute *res_attr[17U] ;
   struct bin_attribute *res_attr_wc[17U] ;
   unsigned int broken_cmd_compl : 1 ;
   unsigned int ptm_root : 1 ;
   unsigned int ptm_enabled : 1 ;
   u8 ptm_granularity ;
   struct attribute_group **msi_irq_groups ;
   struct pci_vpd *vpd ;
   union __anonunion_406 __anonCompField_pci_dev_59 ;
   u16 ats_cap ;
   u8 ats_stu ;
   u16 pri_cap ;
   u32 pri_reqs_alloc ;
   unsigned int pasid_required : 1 ;
   u16 pasid_cap ;
   u16 pasid_features ;
   struct pci_p2pdma *p2pdma ;
   phys_addr_t rom ;
   size_t romlen ;
   char *driver_override ;
   unsigned long priv_flags ;
};
#line 493 
struct pci_ops;
#line 493 
struct msi_controller;
#line 571  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_bus {
   struct list_head node ;
   struct pci_bus *parent ;
   struct list_head children ;
   struct list_head devices ;
   struct pci_dev *self ;
   struct list_head slots ;
   struct resource *resource[4U] ;
   struct list_head resources ;
   struct resource busn_res ;
   struct pci_ops *ops ;
   struct msi_controller *msi ;
   void *sysdata ;
   struct proc_dir_entry *procdir ;
   unsigned char number ;
   unsigned char primary ;
   unsigned char max_bus_speed ;
   unsigned char cur_bus_speed ;
   char name[48U] ;
   unsigned short bridge_ctl ;
   pci_bus_flags_t bus_flags ;
   struct device *bridge ;
   struct device dev ;
   struct bin_attribute *legacy_io ;
   struct bin_attribute *legacy_mem ;
   unsigned int is_added : 1 ;
};
#line 697  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_ops {
   int (*add_bus)(struct pci_bus *) ;
   void (*remove_bus)(struct pci_bus *) ;
   void *(*map_bus)(struct pci_bus *, unsigned int , int ) ;
   int (*read)(struct pci_bus *, unsigned int , int , int , u32 *) ;
   int (*write)(struct pci_bus *, unsigned int , int , int , u32 ) ;
};
#line 725  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_dynids {
   spinlock_t lock ;
   struct list_head list ;
};
#line 729  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
typedef unsigned int pci_ers_result_t;
#line 761  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_error_handlers {
   pci_ers_result_t (*error_detected)(struct pci_dev *, enum pci_channel_state ) ;
   pci_ers_result_t (*mmio_enabled)(struct pci_dev *) ;
   pci_ers_result_t (*slot_reset)(struct pci_dev *) ;
   void (*reset_prepare)(struct pci_dev *) ;
   void (*reset_done)(struct pci_dev *) ;
   void (*resume)(struct pci_dev *) ;
};
#line 824  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct pci_driver {
   struct list_head node ;
   char *name ;
   struct pci_device_id *id_table ;
   int (*probe)(struct pci_dev *, struct pci_device_id *) ;
   void (*remove)(struct pci_dev *) ;
   int (*suspend)(struct pci_dev *, pm_message_t ) ;
   int (*resume)(struct pci_dev *) ;
   void (*shutdown)(struct pci_dev *) ;
   int (*sriov_configure)(struct pci_dev *, int ) ;
   struct pci_error_handlers *err_handler ;
   struct attribute_group **groups ;
   struct device_driver driver ;
   struct pci_dynids dynids ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shrinker.h"
struct shrink_control {
   gfp_t gfp_mask ;
   int nid ;
   unsigned long nr_to_scan ;
   unsigned long nr_scanned ;
   struct mem_cgroup *memcg ;
};
#line 60  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/shrinker.h"
struct shrinker {
   unsigned long (*count_objects)(struct shrinker *, struct shrink_control *) ;
   unsigned long (*scan_objects)(struct shrinker *, struct shrink_control *) ;
   long batch ;
   int seeks ;
   unsigned int flags ;
   struct list_head list ;
   int id ;
   atomic_long_t *nr_deferred ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct vmem_altmap {
   unsigned long base_pfn ;
   unsigned long end_pfn ;
   unsigned long reserve ;
   unsigned long free ;
   unsigned long align ;
   unsigned long alloc ;
};
#line 26 
enum memory_type {
    MEMORY_DEVICE_PRIVATE = 1,
    MEMORY_DEVICE_FS_DAX = 2,
    MEMORY_DEVICE_DEVDAX = 3,
    MEMORY_DEVICE_PCI_P2PDMA = 4
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct dev_pagemap_ops {
   void (*page_free)(struct page *) ;
   void (*kill)(struct dev_pagemap *) ;
   void (*cleanup)(struct dev_pagemap *) ;
   vm_fault_t (*migrate_to_ram)(struct vm_fault *) ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/memremap.h"
struct dev_pagemap {
   struct vmem_altmap altmap ;
   struct resource res ;
   struct percpu_ref *ref ;
   struct percpu_ref internal_ref ;
   struct completion done ;
   enum memory_type type ;
   unsigned int flags ;
   struct dev_pagemap_ops *ops ;
};
#line 176 
struct file_ra_state;
#line 177 
struct writeback_control;
#line 178 
struct bdi_writeback;
#line 417  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
struct vm_fault {
   struct vm_area_struct *vma ;
   unsigned int flags ;
   gfp_t gfp_mask ;
   unsigned long pgoff ;
   unsigned long address ;
   pmd_t *pmd ;
   pud_t *pud ;
   pte_t orig_pte ;
   struct page *cow_page ;
   struct mem_cgroup *memcg ;
   struct page *page ;
   pte_t *pte ;
   spinlock_t *ptl ;
   pgtable_t prealloc_pte ;
};
#line 448 
enum page_entry_size {
    PE_SIZE_PTE = 0,
    PE_SIZE_PMD = 1,
    PE_SIZE_PUD = 2
};
#line 467  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
struct vm_operations_struct {
   void (*open)(struct vm_area_struct *) ;
   void (*close)(struct vm_area_struct *) ;
   int (*split)(struct vm_area_struct *, unsigned long ) ;
   int (*mremap)(struct vm_area_struct *) ;
   vm_fault_t (*fault)(struct vm_fault *) ;
   vm_fault_t (*huge_fault)(struct vm_fault *, enum page_entry_size ) ;
   void (*map_pages)(struct vm_fault *, unsigned long , unsigned long ) ;
   unsigned long (*pagesize)(struct vm_area_struct *) ;
   vm_fault_t (*page_mkwrite)(struct vm_fault *) ;
   vm_fault_t (*pfn_mkwrite)(struct vm_fault *) ;
   int (*access)(struct vm_area_struct *, unsigned long , void *, int , int ) ;
   char *(*name)(struct vm_area_struct *) ;
   int (*set_policy)(struct vm_area_struct *, struct mempolicy *) ;
   struct mempolicy *(*get_policy)(struct vm_area_struct *, unsigned long ) ;
   struct page *(*find_special_page)(struct vm_area_struct *, unsigned long ) ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_node;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_head {
   struct hlist_bl_node *first ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_bl.h"
struct hlist_bl_node {
   struct hlist_bl_node *next ;
   struct hlist_bl_node **pprev ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
struct __anonstruct_420 {
   spinlock_t lock ;
   int count ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
union __anonunion_419 {
   struct __anonstruct_420 __anonCompField___anonunion_419_60 ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/lockref.h"
struct lockref {
   union __anonunion_419 __anonCompField_lockref_61 ;
};
#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/stringhash.h"
struct path;
#line 79 
struct vfsmount;
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct __anonstruct_422 {
   u32 hash ;
   u32 len ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_421 {
   struct __anonstruct_422 __anonCompField___anonunion_421_62 ;
   u64 hash_len ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct qstr {
   union __anonunion_421 __anonCompField_qstr_63 ;
   unsigned char *name ;
};
#line 89 
struct dentry_operations;
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_423 {
   struct list_head d_lru ;
   wait_queue_head_t *d_wait ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
union __anonunion_d_u_424 {
   struct hlist_node d_alias ;
   struct hlist_bl_node d_in_lookup_hash ;
   struct callback_head d_rcu ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct dentry {
   unsigned int d_flags ;
   seqcount_t d_seq ;
   struct hlist_bl_node d_hash ;
   struct dentry *d_parent ;
   struct qstr d_name ;
   struct inode *d_inode ;
   unsigned char d_iname[32U] ;
   struct lockref d_lockref ;
   struct dentry_operations *d_op ;
   struct super_block *d_sb ;
   unsigned long d_time ;
   void *d_fsdata ;
   union __anonunion_423 __anonCompField_dentry_64 ;
   struct list_head d_child ;
   struct list_head d_subdirs ;
   union __anonunion_d_u_424 d_u ;
} __attribute__((__designated_init__));
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dcache.h"
struct dentry_operations {
   int (*d_revalidate)(struct dentry *, unsigned int ) ;
   int (*d_weak_revalidate)(struct dentry *, unsigned int ) ;
   int (*d_hash)(struct dentry *, struct qstr *) ;
   int (*d_compare)(struct dentry *, unsigned int , char *, struct qstr *) ;
   int (*d_delete)(struct dentry *) ;
   int (*d_init)(struct dentry *) ;
   void (*d_release)(struct dentry *) ;
   void (*d_prune)(struct dentry *) ;
   void (*d_iput)(struct dentry *, struct inode *) ;
   char *(*d_dname)(struct dentry *, char *, int ) ;
   struct vfsmount *(*d_automount)(struct path *) ;
   int (*d_manage)(struct path *, bool ) ;
   struct dentry *(*d_real)(struct dentry *, struct inode *) ;
} __attribute__((__aligned__(64)));
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/path.h"
struct path {
   struct vfsmount *mnt ;
   struct dentry *dentry ;
} __attribute__((__designated_init__));
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_one {
   struct list_head list ;
   long nr_items ;
};
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_memcg {
   struct callback_head rcu ;
   struct list_lru_one *lru[0U] ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru_node {
   spinlock_t lock ;
   struct list_lru_one lru ;
   struct list_lru_memcg *memcg_lrus ;
   long nr_items ;
} __attribute__((__aligned__(64)));
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_lru.h"
struct list_lru {
   struct list_lru_node *node ;
   struct list_head list ;
   int shrinker_id ;
   bool memcg_aware ;
};
#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/capability.h"
struct kernel_cap_struct {
   __u32 cap[2U] ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/capability.h"
typedef struct kernel_cap_struct kernel_cap_t;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fiemap.h"
struct fiemap_extent {
   __u64 fe_logical ;
   __u64 fe_physical ;
   __u64 fe_length ;
   __u64 fe_reserved64[2U] ;
   __u32 fe_flags ;
   __u32 fe_reserved[3U] ;
};
#line 39 
enum migrate_mode {
    MIGRATE_ASYNC = 0,
    MIGRATE_SYNC_LIGHT = 1,
    MIGRATE_SYNC = 2,
    MIGRATE_SYNC_NO_COPY = 3
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcuwait.h"
struct rcuwait {
   struct task_struct *task ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rcu_sync.h"
struct rcu_sync {
   int gp_state ;
   int gp_count ;
   wait_queue_head_t gp_wait ;
   struct callback_head cb_head ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-rwsem.h"
struct percpu_rw_semaphore {
   struct rcu_sync rss ;
   unsigned int *read_count ;
   struct rw_semaphore rw_sem ;
   struct rcuwait writer ;
   int readers_block ;
};
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/delayed_call.h"
struct delayed_call {
   void (*fn)(void *) ;
   void *arg ;
};
#line 35  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/delayed_call.h"
typedef u32 errseq_t;
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
union __anonunion_431 {
   struct list_head q_node ;
   struct kmem_cache *__rcu_icq_cache ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
union __anonunion_432 {
   struct hlist_node ioc_node ;
   struct callback_head __rcu_head ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
struct io_cq {
   struct request_queue *q ;
   struct io_context *ioc ;
   union __anonunion_431 __anonCompField_io_cq_65 ;
   union __anonunion_432 __anonCompField_io_cq_66 ;
   unsigned int flags ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/iocontext.h"
struct io_context {
   atomic_long_t refcount ;
   atomic_t active_ref ;
   atomic_t nr_tasks ;
   spinlock_t lock ;
   unsigned short ioprio ;
   int nr_batch_requests ;
   unsigned long last_waited ;
   struct xarray icq_tree ;
   struct io_cq *icq_hint ;
   struct hlist_head icq_list ;
   struct work_struct release_work ;
};
#line 287  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fs.h"
struct export_operations;
#line 289 
struct iovec;
#line 290 
struct kiocb;
#line 291 
struct kstatfs;
#line 292 
struct swap_info_struct;
#line 293 
struct iov_iter;
#line 294 
struct fscrypt_info;
#line 295 
struct fscrypt_operations;
#line 296 
struct fsverity_info;
#line 297 
struct fsverity_operations;
#line 298 
struct fs_parameter_description;
#line 224  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct iattr {
   unsigned int ia_valid ;
   umode_t ia_mode ;
   kuid_t ia_uid ;
   kgid_t ia_gid ;
   loff_t ia_size ;
   struct timespec64 ia_atime ;
   struct timespec64 ia_mtime ;
   struct timespec64 ia_ctime ;
   struct file *ia_file ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu_counter.h"
struct percpu_counter {
   raw_spinlock_t lock ;
   s64 count ;
   struct list_head list ;
   s32 *counters ;
};
#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dqblk_xfs.h"
struct dquot;
#line 215 
struct kqid;
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
typedef __kernel_uid32_t projid_t;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
struct __anonstruct_kprojid_t_433 {
   projid_t val ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/projid.h"
typedef struct __anonstruct_kprojid_t_433 kprojid_t;
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/quota.h"
enum quota_type {
    USRQUOTA = 0,
    GRPQUOTA = 1,
    PRJQUOTA = 2
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
typedef long long qsize_t;
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
union __anonunion_434 {
   kuid_t uid ;
   kgid_t gid ;
   kprojid_t projid ;
};
#line 68  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct kqid {
   union __anonunion_434 __anonCompField_kqid_67 ;
   enum quota_type type ;
};
#line 205  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct mem_dqblk {
   qsize_t dqb_bhardlimit ;
   qsize_t dqb_bsoftlimit ;
   qsize_t dqb_curspace ;
   qsize_t dqb_rsvspace ;
   qsize_t dqb_ihardlimit ;
   qsize_t dqb_isoftlimit ;
   qsize_t dqb_curinodes ;
   time64_t dqb_btime ;
   time64_t dqb_itime ;
};
#line 216 
struct quota_format_type;
#line 222  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct mem_dqinfo {
   struct quota_format_type *dqi_format ;
   int dqi_fmt_id ;
   struct list_head dqi_dirty_list ;
   unsigned long dqi_flags ;
   unsigned int dqi_bgrace ;
   unsigned int dqi_igrace ;
   qsize_t dqi_max_spc_limit ;
   qsize_t dqi_max_ino_limit ;
   void *dqi_priv ;
};
#line 294  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct dquot {
   struct hlist_node dq_hash ;
   struct list_head dq_inuse ;
   struct list_head dq_free ;
   struct list_head dq_dirty ;
   struct mutex dq_lock ;
   spinlock_t dq_dqb_lock ;
   atomic_t dq_count ;
   struct super_block *dq_sb ;
   struct kqid dq_id ;
   loff_t dq_off ;
   unsigned long dq_flags ;
   struct mem_dqblk dq_dqb ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_format_ops {
   int (*check_quota_file)(struct super_block *, int ) ;
   int (*read_file_info)(struct super_block *, int ) ;
   int (*write_file_info)(struct super_block *, int ) ;
   int (*free_file_info)(struct super_block *, int ) ;
   int (*read_dqblk)(struct dquot *) ;
   int (*commit_dqblk)(struct dquot *) ;
   int (*release_dqblk)(struct dquot *) ;
   int (*get_next_id)(struct super_block *, struct kqid *) ;
};
#line 322  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct dquot_operations {
   int (*write_dquot)(struct dquot *) ;
   struct dquot *(*alloc_dquot)(struct super_block *, int ) ;
   void (*destroy_dquot)(struct dquot *) ;
   int (*acquire_dquot)(struct dquot *) ;
   int (*release_dquot)(struct dquot *) ;
   int (*mark_dirty)(struct dquot *) ;
   int (*write_info)(struct super_block *, int ) ;
   qsize_t *(*get_reserved_space)(struct inode *) ;
   int (*get_projid)(struct inode *, kprojid_t *) ;
   int (*get_inode_usage)(struct inode *, qsize_t *) ;
   int (*get_next_id)(struct super_block *, struct kqid *) ;
};
#line 343  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_dqblk {
   int d_fieldmask ;
   u64 d_spc_hardlimit ;
   u64 d_spc_softlimit ;
   u64 d_ino_hardlimit ;
   u64 d_ino_softlimit ;
   u64 d_space ;
   u64 d_ino_count ;
   s64 d_ino_timer ;
   s64 d_spc_timer ;
   int d_ino_warns ;
   int d_spc_warns ;
   u64 d_rt_spc_hardlimit ;
   u64 d_rt_spc_softlimit ;
   u64 d_rt_space ;
   s64 d_rt_spc_timer ;
   int d_rt_spc_warns ;
};
#line 395  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_type_state {
   unsigned int flags ;
   unsigned int spc_timelimit ;
   unsigned int ino_timelimit ;
   unsigned int rt_spc_timelimit ;
   unsigned int spc_warnlimit ;
   unsigned int ino_warnlimit ;
   unsigned int rt_spc_warnlimit ;
   unsigned long long ino ;
   blkcnt_t blocks ;
   blkcnt_t nextents ;
};
#line 409  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_state {
   unsigned int s_incoredqs ;
   struct qc_type_state s_state[3U] ;
};
#line 415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct qc_info {
   int i_fieldmask ;
   unsigned int i_flags ;
   unsigned int i_spc_timelimit ;
   unsigned int i_ino_timelimit ;
   unsigned int i_rt_spc_timelimit ;
   unsigned int i_spc_warnlimit ;
   unsigned int i_ino_warnlimit ;
   unsigned int i_rt_spc_warnlimit ;
};
#line 428  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quotactl_ops {
   int (*quota_on)(struct super_block *, int , int , struct path *) ;
   int (*quota_off)(struct super_block *, int ) ;
   int (*quota_enable)(struct super_block *, unsigned int ) ;
   int (*quota_disable)(struct super_block *, unsigned int ) ;
   int (*quota_sync)(struct super_block *, int ) ;
   int (*set_info)(struct super_block *, int , struct qc_info *) ;
   int (*get_dqblk)(struct super_block *, struct kqid , struct qc_dqblk *) ;
   int (*get_nextdqblk)(struct super_block *, struct kqid *, struct qc_dqblk *) ;
   int (*set_dqblk)(struct super_block *, struct kqid , struct qc_dqblk *) ;
   int (*get_state)(struct super_block *, struct qc_state *) ;
   int (*rm_xquota)(struct super_block *, unsigned int ) ;
};
#line 443  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_format_type {
   int qf_fmt_id ;
   struct quota_format_ops *qf_ops ;
   struct module *qf_owner ;
   struct quota_format_type *qf_next ;
};
#line 518  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/quota.h"
struct quota_info {
   unsigned int flags ;
   struct rw_semaphore dqio_sem ;
   struct inode *files[3U] ;
   struct mem_dqinfo info[3U] ;
   struct quota_format_ops *ops[3U] ;
};
#line 538 
enum rw_hint {
    WRITE_LIFE_NOT_SET = 0,
    WRITE_LIFE_NONE = 1,
    WRITE_LIFE_SHORT = 2,
    WRITE_LIFE_MEDIUM = 3,
    WRITE_LIFE_LONG = 4,
    WRITE_LIFE_EXTREME = 5
};
#line 318  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct kiocb {
   struct file *ki_filp ;
   loff_t ki_pos ;
   void (*ki_complete)(struct kiocb *, long , long ) ;
   void *private ;
   int ki_flags ;
   u16 ki_hint ;
   u16 ki_ioprio ;
   unsigned int ki_cookie ;
};
#line 362  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct address_space_operations {
   int (*writepage)(struct page *, struct writeback_control *) ;
   int (*readpage)(struct file *, struct page *) ;
   int (*writepages)(struct address_space *, struct writeback_control *) ;
   int (*set_page_dirty)(struct page *) ;
   int (*readpages)(struct file *, struct address_space *, struct list_head *, unsigned int ) ;
   int (*write_begin)(struct file *, struct address_space *, loff_t , unsigned int , unsigned int , struct page **, void **) ;
   int (*write_end)(struct file *, struct address_space *, loff_t , unsigned int , unsigned int , struct page *, void *) ;
   sector_t (*bmap)(struct address_space *, sector_t ) ;
   void (*invalidatepage)(struct page *, unsigned int , unsigned int ) ;
   int (*releasepage)(struct page *, gfp_t ) ;
   void (*freepage)(struct page *) ;
   ssize_t (*direct_IO)(struct kiocb *, struct iov_iter *) ;
   int (*migratepage)(struct address_space *, struct page *, struct page *, enum migrate_mode ) ;
   bool (*isolate_page)(struct page *, isolate_mode_t ) ;
   void (*putback_page)(struct page *) ;
   int (*launder_page)(struct page *) ;
   int (*is_partially_uptodate)(struct page *, unsigned long , unsigned long ) ;
   void (*is_dirty_writeback)(struct page *, bool *, bool *) ;
   int (*error_remove_page)(struct address_space *, struct page *) ;
   int (*swap_activate)(struct swap_info_struct *, struct file *, sector_t *) ;
   void (*swap_deactivate)(struct file *) ;
};
#line 445  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct address_space {
   struct inode *host ;
   struct xarray i_pages ;
   gfp_t gfp_mask ;
   atomic_t i_mmap_writable ;
   atomic_t nr_thps ;
   struct rb_root_cached i_mmap ;
   struct rw_semaphore i_mmap_rwsem ;
   unsigned long nrpages ;
   unsigned long nrexceptional ;
   unsigned long writeback_index ;
   struct address_space_operations *a_ops ;
   unsigned long flags ;
   errseq_t wb_err ;
   spinlock_t private_lock ;
   struct list_head private_list ;
   void *private_data ;
} __attribute__((__designated_init__, __aligned__(8)));
#line 473 
struct hd_struct;
#line 473 
struct gendisk;
#line 473  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct block_device {
   dev_t bd_dev ;
   int bd_openers ;
   struct inode *bd_inode ;
   struct super_block *bd_super ;
   struct mutex bd_mutex ;
   void *bd_claiming ;
   void *bd_holder ;
   int bd_holders ;
   bool bd_write_holder ;
   struct list_head bd_holder_disks ;
   struct block_device *bd_contains ;
   unsigned int bd_block_size ;
   u8 bd_partno ;
   struct hd_struct *bd_part ;
   unsigned int bd_part_count ;
   int bd_invalidated ;
   struct gendisk *bd_disk ;
   struct request_queue *bd_queue ;
   struct backing_dev_info *bd_bdi ;
   struct list_head bd_list ;
   unsigned long bd_private ;
   int bd_fsfreeze_count ;
   struct mutex bd_fsfreeze_mutex ;
} __attribute__((__designated_init__));
#line 587 
struct posix_acl;
#line 614 
struct fsnotify_mark_connector;
#line 628 
struct inode_operations;
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_439 {
   unsigned int i_nlink ;
   unsigned int __i_nlink ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_440 {
   struct hlist_head i_dentry ;
   struct callback_head i_rcu ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_441 {
   struct file_operations *i_fop ;
   void (*free_inode)(struct inode *) ;
};
#line 628 
struct file_lock_context;
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_442 {
   struct pipe_inode_info *i_pipe ;
   struct block_device *i_bdev ;
   struct cdev *i_cdev ;
   char *i_link ;
   unsigned int i_dir_seq ;
};
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct inode {
   umode_t i_mode ;
   unsigned short i_opflags ;
   kuid_t i_uid ;
   kgid_t i_gid ;
   unsigned int i_flags ;
   struct posix_acl *i_acl ;
   struct posix_acl *i_default_acl ;
   struct inode_operations *i_op ;
   struct super_block *i_sb ;
   struct address_space *i_mapping ;
   void *i_security ;
   unsigned long i_ino ;
   union __anonunion_439 __anonCompField_inode_68 ;
   dev_t i_rdev ;
   loff_t i_size ;
   struct timespec64 i_atime ;
   struct timespec64 i_mtime ;
   struct timespec64 i_ctime ;
   spinlock_t i_lock ;
   unsigned short i_bytes ;
   u8 i_blkbits ;
   u8 i_write_hint ;
   blkcnt_t i_blocks ;
   unsigned long i_state ;
   struct rw_semaphore i_rwsem ;
   unsigned long dirtied_when ;
   unsigned long dirtied_time_when ;
   struct hlist_node i_hash ;
   struct list_head i_io_list ;
   struct bdi_writeback *i_wb ;
   int i_wb_frn_winner ;
   u16 i_wb_frn_avg_time ;
   u16 i_wb_frn_history ;
   struct list_head i_lru ;
   struct list_head i_sb_list ;
   struct list_head i_wb_list ;
   union __anonunion_440 __anonCompField_inode_69 ;
   atomic64_t i_version ;
   atomic_t i_count ;
   atomic_t i_dio_count ;
   atomic_t i_writecount ;
   atomic_t i_readcount ;
   union __anonunion_441 __anonCompField_inode_70 ;
   struct file_lock_context *i_flctx ;
   struct address_space i_data ;
   struct list_head i_devices ;
   union __anonunion_442 __anonCompField_inode_71 ;
   __u32 i_generation ;
   __u32 i_fsnotify_mask ;
   struct fsnotify_mark_connector *i_fsnotify_marks ;
   struct fscrypt_info *i_crypt_info ;
   struct fsverity_info *i_verity_info ;
   void *i_private ;
} __attribute__((__designated_init__));
#line 904  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fown_struct {
   rwlock_t lock ;
   struct pid *pid ;
   enum pid_type pid_type ;
   kuid_t uid ;
   kuid_t euid ;
   int signum ;
};
#line 915  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_ra_state {
   unsigned long start ;
   unsigned int size ;
   unsigned int async_size ;
   unsigned int ra_pages ;
   unsigned int mmap_miss ;
   loff_t prev_pos ;
};
#line 935  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_f_u_443 {
   struct llist_node fu_llist ;
   struct callback_head fu_rcuhead ;
};
#line 935  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file {
   union __anonunion_f_u_443 f_u ;
   struct path f_path ;
   struct inode *f_inode ;
   struct file_operations *f_op ;
   spinlock_t f_lock ;
   enum rw_hint f_write_hint ;
   atomic_long_t f_count ;
   unsigned int f_flags ;
   fmode_t f_mode ;
   struct mutex f_pos_lock ;
   loff_t f_pos ;
   struct fown_struct f_owner ;
   struct cred *f_cred ;
   struct file_ra_state f_ra ;
   u64 f_version ;
   void *f_security ;
   void *private_data ;
   struct list_head f_ep_links ;
   struct list_head f_tfile_llink ;
   struct address_space *f_mapping ;
   errseq_t f_wb_err ;
} __attribute__((__designated_init__, __aligned__(4)));
#line 988  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
typedef void *fl_owner_t;
#line 1026 
struct file_lock;
#line 1029  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock_operations {
   void (*fl_copy_lock)(struct file_lock *, struct file_lock *) ;
   void (*fl_release_private)(struct file_lock *) ;
};
#line 1034  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct lock_manager_operations {
   fl_owner_t (*lm_get_owner)(fl_owner_t ) ;
   void (*lm_put_owner)(fl_owner_t ) ;
   void (*lm_notify)(struct file_lock *) ;
   int (*lm_grant)(struct file_lock *, int ) ;
   bool (*lm_break)(struct file_lock *) ;
   int (*lm_change)(struct file_lock *, int , struct list_head *) ;
   void (*lm_setup)(struct file_lock *, void **) ;
};
#line 1052 
struct net;
#line 1058 
struct nlm_lockowner;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nfs_fs_i.h"
struct nfs_lock_info {
   u32 state ;
   struct nlm_lockowner *owner ;
   struct list_head list ;
};
#line 15 
struct nfs4_lock_state;
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nfs_fs_i.h"
struct nfs4_lock_info {
   struct nfs4_lock_state *owner ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fasync_struct;
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct __anonstruct_afs_445 {
   struct list_head link ;
   int state ;
   unsigned int debug_id ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
union __anonunion_fl_u_444 {
   struct nfs_lock_info nfs_fl ;
   struct nfs4_lock_info nfs4_fl ;
   struct __anonstruct_afs_445 afs ;
};
#line 1079  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock {
   struct file_lock *fl_blocker ;
   struct list_head fl_list ;
   struct hlist_node fl_link ;
   struct list_head fl_blocked_requests ;
   struct list_head fl_blocked_member ;
   fl_owner_t fl_owner ;
   unsigned int fl_flags ;
   unsigned char fl_type ;
   unsigned int fl_pid ;
   int fl_link_cpu ;
   wait_queue_head_t fl_wait ;
   struct file *fl_file ;
   loff_t fl_start ;
   loff_t fl_end ;
   struct fasync_struct *fl_fasync ;
   unsigned long fl_break_time ;
   unsigned long fl_downgrade_time ;
   struct file_lock_operations *fl_ops ;
   struct lock_manager_operations *fl_lmops ;
   union __anonunion_fl_u_444 fl_u ;
} __attribute__((__designated_init__));
#line 1117  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_lock_context {
   spinlock_t flc_lock ;
   struct list_head flc_flock ;
   struct list_head flc_posix ;
   struct list_head flc_lease ;
};
#line 1331  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fasync_struct {
   rwlock_t fa_lock ;
   int magic ;
   int fa_fd ;
   struct fasync_struct *fa_next ;
   struct file *fa_file ;
   struct callback_head fa_rcu ;
};
#line 1418  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct sb_writers {
   int frozen ;
   wait_queue_head_t wait_unfrozen ;
   struct percpu_rw_semaphore rw_sem[3U] ;
};
#line 1424 
struct super_operations;
#line 1424 
struct xattr_handler;
#line 1424 
struct mtd_info;
#line 1424  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct super_block {
   struct list_head s_list ;
   dev_t s_dev ;
   unsigned char s_blocksize_bits ;
   unsigned long s_blocksize ;
   loff_t s_maxbytes ;
   struct file_system_type *s_type ;
   struct super_operations *s_op ;
   struct dquot_operations *dq_op ;
   struct quotactl_ops *s_qcop ;
   struct export_operations *s_export_op ;
   unsigned long s_flags ;
   unsigned long s_iflags ;
   unsigned long s_magic ;
   struct dentry *s_root ;
   struct rw_semaphore s_umount ;
   int s_count ;
   atomic_t s_active ;
   void *s_security ;
   struct xattr_handler **s_xattr ;
   struct fscrypt_operations *s_cop ;
   struct key *s_master_keys ;
   struct fsverity_operations *s_vop ;
   struct hlist_bl_head s_roots ;
   struct list_head s_mounts ;
   struct block_device *s_bdev ;
   struct backing_dev_info *s_bdi ;
   struct mtd_info *s_mtd ;
   struct hlist_node s_instances ;
   unsigned int s_quota_types ;
   struct quota_info s_dquot ;
   struct sb_writers s_writers ;
   void *s_fs_info ;
   u32 s_time_gran ;
   time64_t s_time_min ;
   time64_t s_time_max ;
   __u32 s_fsnotify_mask ;
   struct fsnotify_mark_connector *s_fsnotify_marks ;
   char s_id[32U] ;
   uuid_t s_uuid ;
   unsigned int s_max_links ;
   fmode_t s_mode ;
   struct mutex s_vfs_rename_mutex ;
   char *s_subtype ;
   struct dentry_operations *s_d_op ;
   int cleancache_poolid ;
   struct shrinker s_shrink ;
   atomic_long_t s_remove_count ;
   atomic_long_t s_fsnotify_inode_refs ;
   int s_readonly_remount ;
   struct workqueue_struct *s_dio_done_wq ;
   struct hlist_head s_pins ;
   struct user_namespace *s_user_ns ;
   struct list_lru s_dentry_lru ;
   struct list_lru s_inode_lru ;
   struct callback_head rcu ;
   struct work_struct destroy_work ;
   struct mutex s_sync_lock ;
   int s_stack_depth ;
   spinlock_t s_inode_list_lock ;
   struct list_head s_inodes ;
   spinlock_t s_inode_wblist_lock ;
   struct list_head s_inodes_wb ;
} __attribute__((__designated_init__));
#line 1746  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct fiemap_extent_info {
   unsigned int fi_flags ;
   unsigned int fi_extents_mapped ;
   unsigned int fi_extents_max ;
   struct fiemap_extent *fi_extents_start ;
};
#line 1756 
struct dir_context;
#line 1767  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct dir_context {
   int (*actor)(struct dir_context *, char *, int , loff_t , u64 , unsigned int ) ;
   loff_t pos ;
};
#line 1821  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_operations {
   struct module *owner ;
   loff_t (*llseek)(struct file *, loff_t , int ) ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*read_iter)(struct kiocb *, struct iov_iter *) ;
   ssize_t (*write_iter)(struct kiocb *, struct iov_iter *) ;
   int (*iopoll)(struct kiocb *, bool ) ;
   int (*iterate)(struct file *, struct dir_context *) ;
   int (*iterate_shared)(struct file *, struct dir_context *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*unlocked_ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl)(struct file *, unsigned int , unsigned long ) ;
   int (*mmap)(struct file *, struct vm_area_struct *) ;
   unsigned long mmap_supported_flags ;
   int (*open)(struct inode *, struct file *) ;
   int (*flush)(struct file *, fl_owner_t ) ;
   int (*release)(struct inode *, struct file *) ;
   int (*fsync)(struct file *, loff_t , loff_t , int ) ;
   int (*fasync)(int , struct file *, int ) ;
   int (*lock)(struct file *, int , struct file_lock *) ;
   ssize_t (*sendpage)(struct file *, struct page *, int , size_t , loff_t *, int ) ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   int (*check_flags)(int ) ;
   int (*flock)(struct file *, int , struct file_lock *) ;
   ssize_t (*splice_write)(struct pipe_inode_info *, struct file *, loff_t *, size_t , unsigned int ) ;
   ssize_t (*splice_read)(struct file *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ) ;
   int (*setlease)(struct file *, long , struct file_lock **, void **) ;
   long (*fallocate)(struct file *, int , loff_t , loff_t ) ;
   void (*show_fdinfo)(struct seq_file *, struct file *) ;
   ssize_t (*copy_file_range)(struct file *, loff_t , struct file *, loff_t , size_t , unsigned int ) ;
   loff_t (*remap_file_range)(struct file *, loff_t , struct file *, loff_t , loff_t , unsigned int ) ;
   int (*fadvise)(struct file *, loff_t , loff_t , int ) ;
} __attribute__((__designated_init__));
#line 1863  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct inode_operations {
   struct dentry *(*lookup)(struct inode *, struct dentry *, unsigned int ) ;
   char *(*get_link)(struct dentry *, struct inode *, struct delayed_call *) ;
   int (*permission)(struct inode *, int ) ;
   struct posix_acl *(*get_acl)(struct inode *, int ) ;
   int (*readlink)(struct dentry *, char *, int ) ;
   int (*create)(struct inode *, struct dentry *, umode_t , bool ) ;
   int (*link)(struct dentry *, struct inode *, struct dentry *) ;
   int (*unlink)(struct inode *, struct dentry *) ;
   int (*symlink)(struct inode *, struct dentry *, char *) ;
   int (*mkdir)(struct inode *, struct dentry *, umode_t ) ;
   int (*rmdir)(struct inode *, struct dentry *) ;
   int (*mknod)(struct inode *, struct dentry *, umode_t , dev_t ) ;
   int (*rename)(struct inode *, struct dentry *, struct inode *, struct dentry *, unsigned int ) ;
   int (*setattr)(struct dentry *, struct iattr *) ;
   int (*getattr)(struct path *, struct kstat *, u32 , unsigned int ) ;
   ssize_t (*listxattr)(struct dentry *, char *, size_t ) ;
   int (*fiemap)(struct inode *, struct fiemap_extent_info *, u64 , u64 ) ;
   int (*update_time)(struct inode *, struct timespec64 *, int ) ;
   int (*atomic_open)(struct inode *, struct dentry *, struct file *, unsigned int , umode_t ) ;
   int (*tmpfile)(struct inode *, struct dentry *, umode_t ) ;
   int (*set_acl)(struct inode *, struct posix_acl *, int ) ;
} __attribute__((__aligned__(64)));
#line 1942  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct super_operations {
   struct inode *(*alloc_inode)(struct super_block *) ;
   void (*destroy_inode)(struct inode *) ;
   void (*free_inode)(struct inode *) ;
   void (*dirty_inode)(struct inode *, int ) ;
   int (*write_inode)(struct inode *, struct writeback_control *) ;
   int (*drop_inode)(struct inode *) ;
   void (*evict_inode)(struct inode *) ;
   void (*put_super)(struct super_block *) ;
   int (*sync_fs)(struct super_block *, int ) ;
   int (*freeze_super)(struct super_block *) ;
   int (*freeze_fs)(struct super_block *) ;
   int (*thaw_super)(struct super_block *) ;
   int (*unfreeze_fs)(struct super_block *) ;
   int (*statfs)(struct dentry *, struct kstatfs *) ;
   int (*remount_fs)(struct super_block *, int *, char *) ;
   void (*umount_begin)(struct super_block *) ;
   int (*show_options)(struct seq_file *, struct dentry *) ;
   int (*show_devname)(struct seq_file *, struct dentry *) ;
   int (*show_path)(struct seq_file *, struct dentry *) ;
   int (*show_stats)(struct seq_file *, struct dentry *) ;
   ssize_t (*quota_read)(struct super_block *, int , char *, size_t , loff_t ) ;
   ssize_t (*quota_write)(struct super_block *, int , char *, size_t , loff_t ) ;
   struct dquot **(*get_dquots)(struct inode *) ;
   int (*bdev_try_to_free_page)(struct super_block *, struct page *, gfp_t ) ;
   long (*nr_cached_objects)(struct super_block *, struct shrink_control *) ;
   long (*free_cached_objects)(struct super_block *, struct shrink_control *) ;
};
#line 2217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fs.h"
struct file_system_type {
   char *name ;
   int fs_flags ;
   int (*init_fs_context)(struct fs_context *) ;
   struct fs_parameter_description *parameters ;
   struct dentry *(*mount)(struct file_system_type *, int , char *, void *) ;
   void (*kill_sb)(struct super_block *) ;
   struct module *owner ;
   struct file_system_type *next ;
   struct hlist_head fs_supers ;
   struct lock_class_key s_lock_key ;
   struct lock_class_key s_umount_key ;
   struct lock_class_key s_vfs_rename_key ;
   struct lock_class_key s_writers_key[3U] ;
   struct lock_class_key i_lock_key ;
   struct lock_class_key i_mutex_key ;
   struct lock_class_key i_mutex_dir_key ;
};
#line 1565  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
struct kvec;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/scatterlist.h"
struct scatterlist {
   unsigned long page_link ;
   unsigned int offset ;
   unsigned int length ;
   dma_addr_t dma_address ;
   unsigned int dma_length ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/scatterlist.h"
struct sg_table {
   struct scatterlist *sgl ;
   unsigned int nents ;
   unsigned int orig_nents ;
};
#line 1424  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
struct msix_entry {
   u32 vector ;
   u16 entry ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-debug.h"
enum dma_data_direction {
    DMA_BIDIRECTIONAL = 0,
    DMA_TO_DEVICE = 1,
    DMA_FROM_DEVICE = 2,
    DMA_NONE = 3
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
struct dma_map_ops {
   void *(*alloc)(struct device *, size_t , dma_addr_t *, gfp_t , unsigned long ) ;
   void (*free)(struct device *, size_t , void *, dma_addr_t , unsigned long ) ;
   int (*mmap)(struct device *, struct vm_area_struct *, void *, dma_addr_t , size_t , unsigned long ) ;
   int (*get_sgtable)(struct device *, struct sg_table *, void *, dma_addr_t , size_t , unsigned long ) ;
   dma_addr_t (*map_page)(struct device *, struct page *, unsigned long , size_t , enum dma_data_direction , unsigned long ) ;
   void (*unmap_page)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   int (*map_sg)(struct device *, struct scatterlist *, int , enum dma_data_direction , unsigned long ) ;
   void (*unmap_sg)(struct device *, struct scatterlist *, int , enum dma_data_direction , unsigned long ) ;
   dma_addr_t (*map_resource)(struct device *, phys_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   void (*unmap_resource)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ) ;
   void (*sync_single_for_cpu)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) ;
   void (*sync_single_for_device)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) ;
   void (*sync_sg_for_cpu)(struct device *, struct scatterlist *, int , enum dma_data_direction ) ;
   void (*sync_sg_for_device)(struct device *, struct scatterlist *, int , enum dma_data_direction ) ;
   void (*cache_sync)(struct device *, void *, size_t , enum dma_data_direction ) ;
   int (*dma_supported)(struct device *, u64 ) ;
   u64 (*get_required_mask)(struct device *) ;
   size_t (*max_mapping_size)(struct device *) ;
   unsigned long (*get_merge_boundary)(struct device *) ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
struct dql {
   unsigned int num_queued ;
   unsigned int adj_limit ;
   unsigned int last_obj_cnt ;
   unsigned int limit ;
   unsigned int num_completed ;
   unsigned int prev_ovlimit ;
   unsigned int prev_num_queued ;
   unsigned int prev_last_obj_cnt ;
   unsigned int lowest_slack ;
   unsigned long slack_start_time ;
   unsigned int max_limit ;
   unsigned int min_limit ;
   unsigned int slack_hold_time ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
union __anonunion___u_457 {
   unsigned int __val ;
   char __c[1U] ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
union __anonunion___u_459 {
   unsigned int __val ;
   char __c[1U] ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/uio.h"
struct iovec {
   void *iov_base ;
   __kernel_size_t iov_len ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct kvec {
   void *iov_base ;
   size_t iov_len ;
};
#line 30 
struct bio_vec;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
union __anonunion_463 {
   struct iovec *iov ;
   struct kvec *kvec ;
   struct bio_vec *bvec ;
   struct pipe_inode_info *pipe ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct __anonstruct_465 {
   unsigned int head ;
   unsigned int start_head ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
union __anonunion_464 {
   unsigned long nr_segs ;
   struct __anonstruct_465 __anonCompField___anonunion_464_73 ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
struct iov_iter {
   unsigned int type ;
   size_t iov_offset ;
   size_t count ;
   union __anonunion_463 __anonCompField_iov_iter_72 ;
   union __anonunion_464 __anonCompField_iov_iter_74 ;
};
#line 285  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/uio.h"
typedef unsigned short __kernel_sa_family_t;
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
typedef __kernel_sa_family_t sa_family_t;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
struct sockaddr {
   sa_family_t sa_family ;
   char sa_data[14U] ;
};
#line 422 
struct ns_common;
#line 423  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
struct __anonstruct_sync_serial_settings_468 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
};
#line 423  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/socket.h"
typedef struct __anonstruct_sync_serial_settings_468 sync_serial_settings;
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_te1_settings_469 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
   unsigned int slot_map ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_te1_settings_469 te1_settings;
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_raw_hdlc_proto_470 {
   unsigned short encoding ;
   unsigned short parity ;
};
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_raw_hdlc_proto_470 raw_hdlc_proto;
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_471 {
   unsigned int t391 ;
   unsigned int t392 ;
   unsigned int n391 ;
   unsigned int n392 ;
   unsigned int n393 ;
   unsigned short lmi ;
   unsigned short dce ;
};
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_471 fr_proto;
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_472 {
   unsigned int dlci ;
};
#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_472 fr_proto_pvc;
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_info_473 {
   unsigned int dlci ;
   char master[16U] ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_info_473 fr_proto_pvc_info;
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_cisco_proto_474 {
   unsigned int interval ;
   unsigned int timeout ;
};
#line 76  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_cisco_proto_474 cisco_proto;
#line 195  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct ifmap {
   unsigned long mem_start ;
   unsigned long mem_end ;
   unsigned short base_addr ;
   unsigned char irq ;
   unsigned char dma ;
   unsigned char port ;
};
#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifs_ifsu_475 {
   raw_hdlc_proto *raw_hdlc ;
   cisco_proto *cisco ;
   fr_proto *fr ;
   fr_proto_pvc *fr_pvc ;
   fr_proto_pvc_info *fr_pvc_info ;
   sync_serial_settings *sync ;
   te1_settings *te1 ;
};
#line 206  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct if_settings {
   unsigned int type ;
   unsigned int size ;
   union __anonunion_ifs_ifsu_475 ifs_ifsu ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifr_ifrn_476 {
   char ifrn_name[16U] ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
union __anonunion_ifr_ifru_477 {
   struct sockaddr ifru_addr ;
   struct sockaddr ifru_dstaddr ;
   struct sockaddr ifru_broadaddr ;
   struct sockaddr ifru_netmask ;
   struct sockaddr ifru_hwaddr ;
   short ifru_flags ;
   int ifru_ivalue ;
   int ifru_mtu ;
   struct ifmap ifru_map ;
   char ifru_slave[16U] ;
   char ifru_newname[16U] ;
   void *ifru_data ;
   struct if_settings ifru_settings ;
};
#line 232  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if.h"
struct ifreq {
   union __anonunion_ifr_ifrn_476 ifr_ifrn ;
   union __anonunion_ifr_ifru_477 ifr_ifru ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/compat.h"
typedef s32 compat_long_t;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/compat.h"
typedef u32 compat_uptr_t;
#line 367  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compat.h"
struct compat_robust_list {
   compat_uptr_t next ;
};
#line 371  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compat.h"
struct compat_robust_list_head {
   struct compat_robust_list list ;
   compat_long_t futex_offset ;
   compat_uptr_t list_op_pending ;
};
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bvec.h"
struct bio_vec {
   struct page *bv_page ;
   unsigned int bv_len ;
   unsigned int bv_offset ;
};
#line 125  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/net.h"
struct sk_buff;
#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/checksum_64.h"
struct in6_addr;
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/checksum.h"
typedef u64 netdev_features_t;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/in6.h"
union __anonunion_in6_u_512 {
   __u8 u6_addr8[16U] ;
   __be16 u6_addr16[8U] ;
   __be32 u6_addr32[4U] ;
};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/in6.h"
struct in6_addr {
   union __anonunion_in6_u_512 in6_u ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/in6.h"
struct __anonstruct_siphash_key_t_513 {
   u64 key[2U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/in6.h"
typedef struct __anonstruct_siphash_key_t_513 siphash_key_t;
#line 163  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_ether.h"
struct ethhdr {
   unsigned char h_dest[6U] ;
   unsigned char h_source[6U] ;
   __be16 h_proto ;
} __attribute__((__packed__));
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buf_operations;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buffer {
   struct page *page ;
   unsigned int offset ;
   unsigned int len ;
   struct pipe_buf_operations *ops ;
   unsigned int flags ;
   unsigned long private ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_inode_info {
   struct mutex mutex ;
   wait_queue_head_t wait ;
   unsigned int head ;
   unsigned int tail ;
   unsigned int max_usage ;
   unsigned int ring_size ;
   unsigned int readers ;
   unsigned int writers ;
   unsigned int files ;
   unsigned int r_counter ;
   unsigned int w_counter ;
   struct page *tmp_page ;
   struct fasync_struct *fasync_readers ;
   struct fasync_struct *fasync_writers ;
   struct pipe_buffer *bufs ;
   struct user_struct *user ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pipe_fs_i.h"
struct pipe_buf_operations {
   int (*confirm)(struct pipe_inode_info *, struct pipe_buffer *) ;
   void (*release)(struct pipe_inode_info *, struct pipe_buffer *) ;
   int (*steal)(struct pipe_inode_info *, struct pipe_buffer *) ;
   bool (*get)(struct pipe_inode_info *, struct pipe_buffer *) ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netfilter/nf_conntrack_common.h"
struct ip_conntrack_stat {
   unsigned int found ;
   unsigned int invalid ;
   unsigned int ignore ;
   unsigned int insert ;
   unsigned int insert_failed ;
   unsigned int drop ;
   unsigned int early_drop ;
   unsigned int error ;
   unsigned int expect_new ;
   unsigned int expect_create ;
   unsigned int expect_delete ;
   unsigned int search_restart ;
};
#line 41 
struct napi_struct;
#line 42 
struct bpf_prog;
#line 43 
union bpf_attr;
#line 44 
struct skb_ext;
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct sk_buff_head {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   __u32 qlen ;
   spinlock_t lock ;
};
#line 313  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
typedef struct bio_vec skb_frag_t;
#line 416  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct skb_shared_hwtstamps {
   ktime_t hwtstamp ;
};
#line 510  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct skb_shared_info {
   __u8 __unused ;
   __u8 meta_len ;
   __u8 nr_frags ;
   __u8 tx_flags ;
   unsigned short gso_size ;
   unsigned short gso_segs ;
   struct sk_buff *frag_list ;
   struct skb_shared_hwtstamps hwtstamps ;
   unsigned int gso_type ;
   u32 tskey ;
   atomic_t dataref ;
   void *destructor_arg ;
   skb_frag_t frags[17U] ;
};
#line 562  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
typedef unsigned int sk_buff_data_t;
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_535 {
   struct net_device *dev ;
   unsigned long dev_scratch ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_534 {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   union __anonunion_535 __anonCompField___anonstruct_534_90 ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_533 {
   struct __anonstruct_534 __anonCompField___anonunion_533_91 ;
   struct rb_node rbnode ;
   struct list_head list ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_536 {
   struct sock *sk ;
   int ip_defrag_offset ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_537 {
   ktime_t tstamp ;
   u64 skb_mstamp_ns ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_539 {
   unsigned long _skb_refdst ;
   void (*destructor)(struct sk_buff *) ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_538 {
   struct __anonstruct_539 __anonCompField___anonunion_538_95 ;
   struct list_head tcp_tsorted_anchor ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct __anonstruct_541 {
   __u16 csum_start ;
   __u16 csum_offset ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_540 {
   __wsum csum ;
   struct __anonstruct_541 __anonCompField___anonunion_540_97 ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_542 {
   unsigned int napi_id ;
   unsigned int sender_cpu ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_543 {
   __u32 mark ;
   __u32 reserved_tailroom ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
union __anonunion_544 {
   __be16 inner_protocol ;
   __u8 inner_ipproto ;
};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct sk_buff {
   union __anonunion_533 __anonCompField_sk_buff_92 ;
   union __anonunion_536 __anonCompField_sk_buff_93 ;
   union __anonunion_537 __anonCompField_sk_buff_94 ;
   char cb[48U] ;
   union __anonunion_538 __anonCompField_sk_buff_96 ;
   unsigned long _nfct ;
   unsigned int len ;
   unsigned int data_len ;
   __u16 mac_len ;
   __u16 hdr_len ;
   __u16 queue_mapping ;
   __u8 __cloned_offset[0U] ;
   __u8 cloned : 1 ;
   __u8 nohdr : 1 ;
   __u8 fclone : 2 ;
   __u8 peeked : 1 ;
   __u8 head_frag : 1 ;
   __u8 pfmemalloc : 1 ;
   __u8 active_extensions ;
   __u32 headers_start[0U] ;
   __u8 __pkt_type_offset[0U] ;
   __u8 pkt_type : 3 ;
   __u8 ignore_df : 1 ;
   __u8 nf_trace : 1 ;
   __u8 ip_summed : 2 ;
   __u8 ooo_okay : 1 ;
   __u8 l4_hash : 1 ;
   __u8 sw_hash : 1 ;
   __u8 wifi_acked_valid : 1 ;
   __u8 wifi_acked : 1 ;
   __u8 no_fcs : 1 ;
   __u8 encapsulation : 1 ;
   __u8 encap_hdr_csum : 1 ;
   __u8 csum_valid : 1 ;
   __u8 __pkt_vlan_present_offset[0U] ;
   __u8 vlan_present : 1 ;
   __u8 csum_complete_sw : 1 ;
   __u8 csum_level : 2 ;
   __u8 csum_not_inet : 1 ;
   __u8 dst_pending_confirm : 1 ;
   __u8 ndisc_nodetype : 2 ;
   __u8 ipvs_property : 1 ;
   __u8 inner_protocol_type : 1 ;
   __u8 remcsum_offload : 1 ;
   __u8 offload_fwd_mark : 1 ;
   __u8 offload_l3_fwd_mark : 1 ;
   __u8 tc_skip_classify : 1 ;
   __u8 tc_at_ingress : 1 ;
   __u8 tc_redirected : 1 ;
   __u8 tc_from_ingress : 1 ;
   __u8 decrypted : 1 ;
   __u16 tc_index ;
   union __anonunion_540 __anonCompField_sk_buff_98 ;
   __u32 priority ;
   int skb_iif ;
   __u32 hash ;
   __be16 vlan_proto ;
   __u16 vlan_tci ;
   union __anonunion_542 __anonCompField_sk_buff_99 ;
   __u32 secmark ;
   union __anonunion_543 __anonCompField_sk_buff_100 ;
   union __anonunion_544 __anonCompField_sk_buff_101 ;
   __u16 inner_transport_header ;
   __u16 inner_network_header ;
   __u16 inner_mac_header ;
   __be16 protocol ;
   __u16 transport_header ;
   __u16 network_header ;
   __u16 mac_header ;
   __u32 headers_end[0U] ;
   sk_buff_data_t tail ;
   sk_buff_data_t end ;
   unsigned char *head ;
   unsigned char *data ;
   unsigned int truesize ;
   refcount_t users ;
   struct skb_ext *extensions ;
};
#line 920 
struct dst_entry;
#line 4108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
struct skb_ext {
   refcount_t refcnt ;
   u8 offset[3U] ;
   u8 chunks ;
   char data[0U] ;
};
#line 177  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_drvinfo {
   __u32 cmd ;
   char driver[32U] ;
   char version[32U] ;
   char fw_version[32U] ;
   char bus_info[32U] ;
   char erom_version[32U] ;
   char reserved2[12U] ;
   __u32 n_priv_flags ;
   __u32 n_stats ;
   __u32 testinfo_len ;
   __u32 eedump_len ;
   __u32 regdump_len ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_wolinfo {
   __u32 cmd ;
   __u32 supported ;
   __u32 wolopts ;
   __u8 sopass[6U] ;
};
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tunable {
   __u32 cmd ;
   __u32 id ;
   __u32 type_id ;
   __u32 len ;
   void *data[0U] ;
};
#line 310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_regs {
   __u32 cmd ;
   __u32 version ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_eeprom {
   __u32 cmd ;
   __u32 magic ;
   __u32 offset ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 360  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_eee {
   __u32 cmd ;
   __u32 supported ;
   __u32 advertised ;
   __u32 lp_advertised ;
   __u32 eee_active ;
   __u32 eee_enabled ;
   __u32 tx_lpi_enabled ;
   __u32 tx_lpi_timer ;
   __u32 reserved[2U] ;
};
#line 382  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_modinfo {
   __u32 cmd ;
   __u32 type ;
   __u32 eeprom_len ;
   __u32 reserved[8U] ;
};
#line 462  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_coalesce {
   __u32 cmd ;
   __u32 rx_coalesce_usecs ;
   __u32 rx_max_coalesced_frames ;
   __u32 rx_coalesce_usecs_irq ;
   __u32 rx_max_coalesced_frames_irq ;
   __u32 tx_coalesce_usecs ;
   __u32 tx_max_coalesced_frames ;
   __u32 tx_coalesce_usecs_irq ;
   __u32 tx_max_coalesced_frames_irq ;
   __u32 stats_block_coalesce_usecs ;
   __u32 use_adaptive_rx_coalesce ;
   __u32 use_adaptive_tx_coalesce ;
   __u32 pkt_rate_low ;
   __u32 rx_coalesce_usecs_low ;
   __u32 rx_max_coalesced_frames_low ;
   __u32 tx_coalesce_usecs_low ;
   __u32 tx_max_coalesced_frames_low ;
   __u32 pkt_rate_high ;
   __u32 rx_coalesce_usecs_high ;
   __u32 rx_max_coalesced_frames_high ;
   __u32 tx_coalesce_usecs_high ;
   __u32 tx_max_coalesced_frames_high ;
   __u32 rate_sample_interval ;
};
#line 513  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ringparam {
   __u32 cmd ;
   __u32 rx_max_pending ;
   __u32 rx_mini_max_pending ;
   __u32 rx_jumbo_max_pending ;
   __u32 tx_max_pending ;
   __u32 rx_pending ;
   __u32 rx_mini_pending ;
   __u32 rx_jumbo_pending ;
   __u32 tx_pending ;
};
#line 541  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_channels {
   __u32 cmd ;
   __u32 max_rx ;
   __u32 max_tx ;
   __u32 max_other ;
   __u32 max_combined ;
   __u32 rx_count ;
   __u32 tx_count ;
   __u32 other_count ;
   __u32 combined_count ;
};
#line 575  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_pauseparam {
   __u32 cmd ;
   __u32 autoneg ;
   __u32 rx_pause ;
   __u32 tx_pause ;
};
#line 683  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_test {
   __u32 cmd ;
   __u32 flags ;
   __u32 reserved ;
   __u32 len ;
   __u64 data[0U] ;
};
#line 702  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_stats {
   __u32 cmd ;
   __u32 n_stats ;
   __u64 data[0U] ;
};
#line 758  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tcpip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tos ;
};
#line 775  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ah_espip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 spi ;
   __u8 tos ;
};
#line 793  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_usrip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 l4_4_bytes ;
   __u8 tos ;
   __u8 ip_ver ;
   __u8 proto ;
};
#line 812  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_tcpip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tclass ;
};
#line 829  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ah_espip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be32 spi ;
   __u8 tclass ;
};
#line 844  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_usrip6_spec {
   __be32 ip6src[4U] ;
   __be32 ip6dst[4U] ;
   __be32 l4_4_bytes ;
   __u8 tclass ;
   __u8 l4_proto ;
};
#line 852  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
union ethtool_flow_union {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   struct ethtool_tcpip6_spec tcp_ip6_spec ;
   struct ethtool_tcpip6_spec udp_ip6_spec ;
   struct ethtool_tcpip6_spec sctp_ip6_spec ;
   struct ethtool_ah_espip6_spec ah_ip6_spec ;
   struct ethtool_ah_espip6_spec esp_ip6_spec ;
   struct ethtool_usrip6_spec usr_ip6_spec ;
   struct ethhdr ether_spec ;
   __u8 hdata[52U] ;
};
#line 880  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_flow_ext {
   __u8 padding[2U] ;
   unsigned char h_dest[6U] ;
   __be16 vlan_etype ;
   __be16 vlan_tci ;
   __be32 data[2U] ;
};
#line 905  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_rx_flow_spec {
   __u32 flow_type ;
   union ethtool_flow_union h_u ;
   struct ethtool_flow_ext h_ext ;
   union ethtool_flow_union m_u ;
   struct ethtool_flow_ext m_ext ;
   __u64 ring_cookie ;
   __u32 location ;
};
#line 1001  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
union __anonunion_570 {
   __u32 rule_cnt ;
   __u32 rss_context ;
};
#line 1001  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_rxnfc {
   __u32 cmd ;
   __u32 flow_type ;
   __u64 data ;
   struct ethtool_rx_flow_spec fs ;
   union __anonunion_570 __anonCompField_ethtool_rxnfc_103 ;
   __u32 rule_locs[0U] ;
};
#line 1130  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_flash {
   __u32 cmd ;
   __u32 region ;
   char data[128U] ;
};
#line 1150  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_dump {
   __u32 cmd ;
   __u32 version ;
   __u32 flag ;
   __u32 len ;
   __u8 data[0U] ;
};
#line 1230  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_ts_info {
   __u32 cmd ;
   __u32 so_timestamping ;
   __s32 phc_index ;
   __u32 tx_types ;
   __u32 tx_reserved[3U] ;
   __u32 rx_filters ;
   __u32 rx_reserved[3U] ;
};
#line 1302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_fecparam {
   __u32 cmd ;
   __u32 active_fec ;
   __u32 fec ;
   __u32 reserved ;
};
#line 1876  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/ethtool.h"
struct ethtool_link_settings {
   __u32 cmd ;
   __u32 speed ;
   __u8 duplex ;
   __u8 port ;
   __u8 phy_address ;
   __u8 autoneg ;
   __u8 mdio_support ;
   __u8 eth_tp_mdix ;
   __u8 eth_tp_mdix_ctrl ;
   __s8 link_mode_masks_nwords ;
   __u8 transceiver ;
   __u8 reserved1[3U] ;
   __u32 reserved[7U] ;
   __u32 link_mode_masks[0U] ;
};
#line 40  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
enum ethtool_phys_id_state {
    ETHTOOL_ID_INACTIVE = 0,
    ETHTOOL_ID_ACTIVE = 1,
    ETHTOOL_ID_ON = 2,
    ETHTOOL_ID_OFF = 3
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct __anonstruct_link_modes_573 {
   unsigned long supported[2U] ;
   unsigned long advertising[2U] ;
   unsigned long lp_advertising[2U] ;
};
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct ethtool_link_ksettings {
   struct ethtool_link_settings base ;
   struct __anonstruct_link_modes_573 link_modes ;
};
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
struct ethtool_ops {
   void (*get_drvinfo)(struct net_device *, struct ethtool_drvinfo *) ;
   int (*get_regs_len)(struct net_device *) ;
   void (*get_regs)(struct net_device *, struct ethtool_regs *, void *) ;
   void (*get_wol)(struct net_device *, struct ethtool_wolinfo *) ;
   int (*set_wol)(struct net_device *, struct ethtool_wolinfo *) ;
   u32 (*get_msglevel)(struct net_device *) ;
   void (*set_msglevel)(struct net_device *, u32 ) ;
   int (*nway_reset)(struct net_device *) ;
   u32 (*get_link)(struct net_device *) ;
   int (*get_eeprom_len)(struct net_device *) ;
   int (*get_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*set_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_coalesce)(struct net_device *, struct ethtool_coalesce *) ;
   int (*set_coalesce)(struct net_device *, struct ethtool_coalesce *) ;
   void (*get_ringparam)(struct net_device *, struct ethtool_ringparam *) ;
   int (*set_ringparam)(struct net_device *, struct ethtool_ringparam *) ;
   void (*get_pauseparam)(struct net_device *, struct ethtool_pauseparam *) ;
   int (*set_pauseparam)(struct net_device *, struct ethtool_pauseparam *) ;
   void (*self_test)(struct net_device *, struct ethtool_test *, u64 *) ;
   void (*get_strings)(struct net_device *, u32 , u8 *) ;
   int (*set_phys_id)(struct net_device *, enum ethtool_phys_id_state ) ;
   void (*get_ethtool_stats)(struct net_device *, struct ethtool_stats *, u64 *) ;
   int (*begin)(struct net_device *) ;
   void (*complete)(struct net_device *) ;
   u32 (*get_priv_flags)(struct net_device *) ;
   int (*set_priv_flags)(struct net_device *, u32 ) ;
   int (*get_sset_count)(struct net_device *, int ) ;
   int (*get_rxnfc)(struct net_device *, struct ethtool_rxnfc *, u32 *) ;
   int (*set_rxnfc)(struct net_device *, struct ethtool_rxnfc *) ;
   int (*flash_device)(struct net_device *, struct ethtool_flash *) ;
   int (*reset)(struct net_device *, u32 *) ;
   u32 (*get_rxfh_key_size)(struct net_device *) ;
   u32 (*get_rxfh_indir_size)(struct net_device *) ;
   int (*get_rxfh)(struct net_device *, u32 *, u8 *, u8 *) ;
   int (*set_rxfh)(struct net_device *, u32 *, u8 *, u8 ) ;
   int (*get_rxfh_context)(struct net_device *, u32 *, u8 *, u8 *, u32 ) ;
   int (*set_rxfh_context)(struct net_device *, u32 *, u8 *, u8 , u32 *, bool ) ;
   void (*get_channels)(struct net_device *, struct ethtool_channels *) ;
   int (*set_channels)(struct net_device *, struct ethtool_channels *) ;
   int (*get_dump_flag)(struct net_device *, struct ethtool_dump *) ;
   int (*get_dump_data)(struct net_device *, struct ethtool_dump *, void *) ;
   int (*set_dump)(struct net_device *, struct ethtool_dump *) ;
   int (*get_ts_info)(struct net_device *, struct ethtool_ts_info *) ;
   int (*get_module_info)(struct net_device *, struct ethtool_modinfo *) ;
   int (*get_module_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_eee)(struct net_device *, struct ethtool_eee *) ;
   int (*set_eee)(struct net_device *, struct ethtool_eee *) ;
   int (*get_tunable)(struct net_device *, struct ethtool_tunable *, void *) ;
   int (*set_tunable)(struct net_device *, struct ethtool_tunable *, void *) ;
   int (*get_per_queue_coalesce)(struct net_device *, u32 , struct ethtool_coalesce *) ;
   int (*set_per_queue_coalesce)(struct net_device *, u32 , struct ethtool_coalesce *) ;
   int (*get_link_ksettings)(struct net_device *, struct ethtool_link_ksettings *) ;
   int (*set_link_ksettings)(struct net_device *, struct ethtool_link_ksettings *) ;
   int (*get_fecparam)(struct net_device *, struct ethtool_fecparam *) ;
   int (*set_fecparam)(struct net_device *, struct ethtool_fecparam *) ;
   void (*get_ethtool_phy_stats)(struct net_device *, struct ethtool_stats *, u64 *) ;
};
#line 422 
struct prot_inuse;
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/core.h"
struct netns_core {
   struct ctl_table_header *sysctl_hdr ;
   int sysctl_somaxconn ;
   int *sock_inuse ;
   struct prot_inuse *prot_inuse ;
};
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct u64_stats_sync {
   };
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct __anonstruct_local_t_574 {
   atomic_long_t a ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
typedef struct __anonstruct_local_t_574 local_t;
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/local.h"
struct __anonstruct_local64_t_575 {
   local_t a ;
};
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/local.h"
typedef struct __anonstruct_local64_t_575 local64_t;
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/local64.h"
struct __anonstruct_u64_stats_t_576 {
   local64_t v ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/local64.h"
typedef struct __anonstruct_u64_stats_t_576 u64_stats_t;
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct ipstats_mib {
   u64 mibs[37U] ;
   struct u64_stats_sync syncp ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmp_mib {
   unsigned long mibs[28U] ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpmsg_mib {
   atomic_long_t mibs[512U] ;
};
#line 71  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6_mib {
   unsigned long mibs[6U] ;
};
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct icmpv6msg_mib {
   atomic_long_t mibs[512U] ;
};
#line 92  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct tcp_mib {
   unsigned long mibs[16U] ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct udp_mib {
   unsigned long mibs[9U] ;
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_mib {
   unsigned long mibs[120U] ;
};
#line 110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_xfrm_mib {
   unsigned long mibs[29U] ;
};
#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/snmp.h"
struct linux_tls_mib {
   unsigned long mibs[11U] ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/mib.h"
struct netns_mib {
   struct tcp_mib *tcp_statistics ;
   struct ipstats_mib *ip_statistics ;
   struct linux_mib *net_statistics ;
   struct udp_mib *udp_statistics ;
   struct udp_mib *udplite_statistics ;
   struct icmp_mib *icmp_statistics ;
   struct icmpmsg_mib *icmpmsg_statistics ;
   struct proc_dir_entry *proc_net_devsnmp6 ;
   struct udp_mib *udp_stats_in6 ;
   struct udp_mib *udplite_stats_in6 ;
   struct ipstats_mib *ipv6_statistics ;
   struct icmpv6_mib *icmpv6_statistics ;
   struct icmpv6msg_mib *icmpv6msg_statistics ;
   struct linux_xfrm_mib *xfrm_statistics ;
   struct linux_tls_mib *tls_statistics ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/unix.h"
struct netns_unix {
   int sysctl_max_dgram_qlen ;
   struct ctl_table_header *ctl ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/packet.h"
struct netns_packet {
   struct mutex sklist_lock ;
   struct hlist_head sklist ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frags;
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct fqdir {
   long high_thresh ;
   long low_thresh ;
   int timeout ;
   int max_dist ;
   struct inet_frags *f ;
   struct net *net ;
   bool dead ;
   struct rhashtable rhashtable ;
   atomic_long_t mem ;
   struct work_struct destroy_work ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct frag_v4_compare_key {
   __be32 saddr ;
   __be32 daddr ;
   u32 user ;
   u32 vif ;
   __be16 id ;
   u16 protocol ;
};
#line 50  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct frag_v6_compare_key {
   struct in6_addr saddr ;
   struct in6_addr daddr ;
   u32 user ;
   __be32 id ;
   u32 iif ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
union __anonunion_key_577 {
   struct frag_v4_compare_key v4 ;
   struct frag_v6_compare_key v6 ;
};
#line 77  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frag_queue {
   struct rhash_head node ;
   union __anonunion_key_577 key ;
   struct timer_list timer ;
   spinlock_t lock ;
   refcount_t refcnt ;
   struct rb_root rb_fragments ;
   struct sk_buff *fragments_tail ;
   struct sk_buff *last_run_head ;
   ktime_t stamp ;
   int len ;
   int meat ;
   __u8 flags ;
   u16 max_size ;
   struct fqdir *fqdir ;
   struct callback_head rcu ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/inet_frag.h"
struct inet_frags {
   unsigned int qsize ;
   void (*constructor)(struct inet_frag_queue *, void *) ;
   void (*destructor)(struct inet_frag_queue *) ;
   void (*frag_expire)(struct timer_list *) ;
   struct kmem_cache *frags_cachep ;
   char *frags_cache_name ;
   struct rhashtable_params rhash_params ;
   refcount_t refcnt ;
   struct completion completion ;
};
#line 177 
struct ipv4_devconf;
#line 178 
struct fib_rules_ops;
#line 179 
struct fib_table;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct local_ports {
   seqlock_t lock ;
   int range[2U] ;
   bool warned ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct ping_group_range {
   seqlock_t lock ;
   kgid_t range[2U] ;
};
#line 31 
struct inet_hashinfo;
#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct inet_timewait_death_row {
   atomic_t tw_count ;
   struct inet_hashinfo *hashinfo ;
   int sysctl_max_tw_buckets ;
};
#line 40 
struct tcp_fastopen_context;
#line 43 
struct ip_ra_chain;
#line 43 
struct inet_peer_base;
#line 43 
struct xt_table;
#line 43 
struct tcp_congestion_ops;
#line 43 
struct fib_notifier_ops;
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv4.h"
struct netns_ipv4 {
   struct ctl_table_header *forw_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *ipv4_hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *xfrm4_hdr ;
   struct ipv4_devconf *devconf_all ;
   struct ipv4_devconf *devconf_dflt ;
   struct ip_ra_chain *ra_chain ;
   struct mutex ra_mutex ;
   struct fib_rules_ops *rules_ops ;
   bool fib_has_custom_rules ;
   unsigned int fib_rules_require_fldissect ;
   struct fib_table *fib_main ;
   struct fib_table *fib_default ;
   bool fib_has_custom_local_routes ;
   int fib_num_tclassid_users ;
   struct hlist_head *fib_table_hash ;
   bool fib_offload_disabled ;
   struct sock *fibnl ;
   struct sock **icmp_sk ;
   struct sock *mc_autojoin_sk ;
   struct inet_peer_base *peers ;
   struct sock **tcp_sk ;
   struct fqdir *fqdir ;
   struct xt_table *iptable_filter ;
   struct xt_table *iptable_mangle ;
   struct xt_table *iptable_raw ;
   struct xt_table *arptable_filter ;
   struct xt_table *iptable_security ;
   struct xt_table *nat_table ;
   int sysctl_icmp_echo_ignore_all ;
   int sysctl_icmp_echo_ignore_broadcasts ;
   int sysctl_icmp_ignore_bogus_error_responses ;
   int sysctl_icmp_ratelimit ;
   int sysctl_icmp_ratemask ;
   int sysctl_icmp_errors_use_inbound_ifaddr ;
   struct local_ports ip_local_ports ;
   int sysctl_tcp_ecn ;
   int sysctl_tcp_ecn_fallback ;
   int sysctl_ip_default_ttl ;
   int sysctl_ip_no_pmtu_disc ;
   int sysctl_ip_fwd_use_pmtu ;
   int sysctl_ip_fwd_update_priority ;
   int sysctl_ip_nonlocal_bind ;
   int sysctl_ip_dynaddr ;
   int sysctl_ip_early_demux ;
   int sysctl_raw_l3mdev_accept ;
   int sysctl_tcp_early_demux ;
   int sysctl_udp_early_demux ;
   int sysctl_fwmark_reflect ;
   int sysctl_tcp_fwmark_accept ;
   int sysctl_tcp_l3mdev_accept ;
   int sysctl_tcp_mtu_probing ;
   int sysctl_tcp_mtu_probe_floor ;
   int sysctl_tcp_base_mss ;
   int sysctl_tcp_min_snd_mss ;
   int sysctl_tcp_probe_threshold ;
   u32 sysctl_tcp_probe_interval ;
   int sysctl_tcp_keepalive_time ;
   int sysctl_tcp_keepalive_probes ;
   int sysctl_tcp_keepalive_intvl ;
   int sysctl_tcp_syn_retries ;
   int sysctl_tcp_synack_retries ;
   int sysctl_tcp_syncookies ;
   int sysctl_tcp_reordering ;
   int sysctl_tcp_retries1 ;
   int sysctl_tcp_retries2 ;
   int sysctl_tcp_orphan_retries ;
   int sysctl_tcp_fin_timeout ;
   unsigned int sysctl_tcp_notsent_lowat ;
   int sysctl_tcp_tw_reuse ;
   int sysctl_tcp_sack ;
   int sysctl_tcp_window_scaling ;
   int sysctl_tcp_timestamps ;
   int sysctl_tcp_early_retrans ;
   int sysctl_tcp_recovery ;
   int sysctl_tcp_thin_linear_timeouts ;
   int sysctl_tcp_slow_start_after_idle ;
   int sysctl_tcp_retrans_collapse ;
   int sysctl_tcp_stdurg ;
   int sysctl_tcp_rfc1337 ;
   int sysctl_tcp_abort_on_overflow ;
   int sysctl_tcp_fack ;
   int sysctl_tcp_max_reordering ;
   int sysctl_tcp_dsack ;
   int sysctl_tcp_app_win ;
   int sysctl_tcp_adv_win_scale ;
   int sysctl_tcp_frto ;
   int sysctl_tcp_nometrics_save ;
   int sysctl_tcp_moderate_rcvbuf ;
   int sysctl_tcp_tso_win_divisor ;
   int sysctl_tcp_workaround_signed_windows ;
   int sysctl_tcp_limit_output_bytes ;
   int sysctl_tcp_challenge_ack_limit ;
   int sysctl_tcp_min_tso_segs ;
   int sysctl_tcp_min_rtt_wlen ;
   int sysctl_tcp_autocorking ;
   int sysctl_tcp_invalid_ratelimit ;
   int sysctl_tcp_pacing_ss_ratio ;
   int sysctl_tcp_pacing_ca_ratio ;
   int sysctl_tcp_wmem[3U] ;
   int sysctl_tcp_rmem[3U] ;
   int sysctl_tcp_comp_sack_nr ;
   unsigned long sysctl_tcp_comp_sack_delay_ns ;
   struct inet_timewait_death_row tcp_death_row ;
   int sysctl_max_syn_backlog ;
   int sysctl_tcp_fastopen ;
   struct tcp_congestion_ops *tcp_congestion_control ;
   struct tcp_fastopen_context *tcp_fastopen_ctx ;
   spinlock_t tcp_fastopen_ctx_lock ;
   unsigned int sysctl_tcp_fastopen_blackhole_timeout ;
   atomic_t tfo_active_disable_times ;
   unsigned long tfo_active_disable_stamp ;
   int sysctl_udp_wmem_min ;
   int sysctl_udp_rmem_min ;
   int sysctl_udp_l3mdev_accept ;
   int sysctl_igmp_max_memberships ;
   int sysctl_igmp_max_msf ;
   int sysctl_igmp_llm_reports ;
   int sysctl_igmp_qrv ;
   struct ping_group_range ping_group_range ;
   atomic_t dev_addr_genid ;
   unsigned long *sysctl_local_reserved_ports ;
   int sysctl_ip_prot_sock ;
   struct list_head mr_tables ;
   struct fib_rules_ops *mr_rules_ops ;
   int sysctl_fib_multipath_use_neigh ;
   int sysctl_fib_multipath_hash_policy ;
   struct fib_notifier_ops *notifier_ops ;
   unsigned int fib_seq ;
   struct fib_notifier_ops *ipmr_notifier_ops ;
   unsigned int ipmr_seq ;
   atomic_t rt_genid ;
   siphash_key_t ip_id_key ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst_ops.h"
struct neighbour;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dst_ops.h"
struct dst_ops {
   unsigned short family ;
   unsigned int gc_thresh ;
   int (*gc)(struct dst_ops *) ;
   struct dst_entry *(*check)(struct dst_entry *, __u32 ) ;
   unsigned int (*default_advmss)(struct dst_entry *) ;
   unsigned int (*mtu)(struct dst_entry *) ;
   u32 *(*cow_metrics)(struct dst_entry *, unsigned long ) ;
   void (*destroy)(struct dst_entry *) ;
   void (*ifdown)(struct dst_entry *, struct net_device *, int ) ;
   struct dst_entry *(*negative_advice)(struct dst_entry *) ;
   void (*link_failure)(struct sk_buff *) ;
   void (*update_pmtu)(struct dst_entry *, struct sock *, struct sk_buff *, u32 , bool ) ;
   void (*redirect)(struct dst_entry *, struct sock *, struct sk_buff *) ;
   int (*local_out)(struct net *, struct sock *, struct sk_buff *) ;
   struct neighbour *(*neigh_lookup)(struct dst_entry *, struct sk_buff *, void *) ;
   void (*confirm_neigh)(struct dst_entry *, void *) ;
   struct kmem_cache *kmem_cachep ;
   struct percpu_counter pcpuc_entries ;
};
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_sysctl_ipv6 {
   struct ctl_table_header *hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *icmp_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *xfrm6_hdr ;
   int bindv6only ;
   int flush_delay ;
   int ip6_rt_max_size ;
   int ip6_rt_gc_min_interval ;
   int ip6_rt_gc_timeout ;
   int ip6_rt_gc_interval ;
   int ip6_rt_gc_elasticity ;
   int ip6_rt_mtu_expires ;
   int ip6_rt_min_advmss ;
   int multipath_hash_policy ;
   int flowlabel_consistency ;
   int auto_flowlabels ;
   int icmpv6_time ;
   int icmpv6_echo_ignore_all ;
   int icmpv6_echo_ignore_multicast ;
   int icmpv6_echo_ignore_anycast ;
   unsigned long icmpv6_ratemask[4U] ;
   unsigned long *icmpv6_ratemask_ptr ;
   int anycast_src_echo_reply ;
   int ip_nonlocal_bind ;
   int fwmark_reflect ;
   int idgen_retries ;
   int idgen_delay ;
   int flowlabel_state_ranges ;
   int flowlabel_reflect ;
   int max_dst_opts_cnt ;
   int max_hbh_opts_cnt ;
   int max_dst_opts_len ;
   int max_hbh_opts_len ;
   int seg6_flowlabel ;
   bool skip_notify_on_dev_down ;
};
#line 56 
struct ipv6_devconf;
#line 56 
struct fib6_info;
#line 56 
struct rt6_info;
#line 56 
struct rt6_statistics;
#line 56 
struct fib6_table;
#line 56 
struct seg6_pernet_data;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct __anonstruct_ip6addrlbl_table_579 {
   struct hlist_head head ;
   spinlock_t lock ;
   u32 seq ;
};
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_ipv6 {
   struct netns_sysctl_ipv6 sysctl ;
   struct ipv6_devconf *devconf_all ;
   struct ipv6_devconf *devconf_dflt ;
   struct inet_peer_base *peers ;
   struct fqdir *fqdir ;
   struct xt_table *ip6table_filter ;
   struct xt_table *ip6table_mangle ;
   struct xt_table *ip6table_raw ;
   struct xt_table *ip6table_security ;
   struct xt_table *ip6table_nat ;
   struct fib6_info *fib6_null_entry ;
   struct rt6_info *ip6_null_entry ;
   struct rt6_statistics *rt6_stats ;
   struct timer_list ip6_fib_timer ;
   struct hlist_head *fib_table_hash ;
   struct fib6_table *fib6_main_tbl ;
   struct list_head fib6_walkers ;
   struct dst_ops ip6_dst_ops ;
   rwlock_t fib6_walker_lock ;
   spinlock_t fib6_gc_lock ;
   unsigned int ip6_rt_gc_expire ;
   unsigned long ip6_rt_last_gc ;
   unsigned int fib6_rules_require_fldissect ;
   bool fib6_has_custom_rules ;
   unsigned int fib6_routes_require_src ;
   struct rt6_info *ip6_prohibit_entry ;
   struct rt6_info *ip6_blk_hole_entry ;
   struct fib6_table *fib6_local_tbl ;
   struct fib_rules_ops *fib6_rules_ops ;
   struct sock **icmp_sk ;
   struct sock *ndisc_sk ;
   struct sock *tcp_sk ;
   struct sock *igmp_sk ;
   struct sock *mc_autojoin_sk ;
   struct list_head mr6_tables ;
   struct fib_rules_ops *mr6_rules_ops ;
   atomic_t dev_addr_genid ;
   atomic_t fib6_sernum ;
   struct seg6_pernet_data *seg6_data ;
   struct fib_notifier_ops *notifier_ops ;
   struct fib_notifier_ops *ip6mr_notifier_ops ;
   unsigned int ipmr_seq ;
   struct __anonstruct_ip6addrlbl_table_579 ip6addrlbl_table ;
};
#line 121  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ipv6.h"
struct netns_nf_frag {
   struct fqdir *fqdir ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/nexthop.h"
struct netns_nexthop {
   struct rb_root rb_root ;
   struct hlist_head *devhash ;
   unsigned int seq ;
   u32 last_id_allocated ;
};
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ieee802154_6lowpan.h"
struct netns_sysctl_lowpan {
   struct ctl_table_header *frags_hdr ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/ieee802154_6lowpan.h"
struct netns_ieee802154_lowpan {
   struct netns_sysctl_lowpan sysctl ;
   struct fqdir *fqdir ;
};
#line 21 
struct sctp_mib;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/sctp.h"
struct netns_sctp {
   struct sctp_mib *sctp_statistics ;
   struct proc_dir_entry *proc_net_sctp ;
   struct ctl_table_header *sysctl_header ;
   struct sock *ctl_sock ;
   struct list_head local_addr_list ;
   struct list_head addr_waitq ;
   struct timer_list addr_wq_timer ;
   struct list_head auto_asconf_splist ;
   spinlock_t addr_wq_lock ;
   spinlock_t local_addr_lock ;
   unsigned int rto_initial ;
   unsigned int rto_min ;
   unsigned int rto_max ;
   int rto_alpha ;
   int rto_beta ;
   int max_burst ;
   int cookie_preserve_enable ;
   char *sctp_hmac_alg ;
   unsigned int valid_cookie_life ;
   unsigned int sack_timeout ;
   unsigned int hb_interval ;
   int max_retrans_association ;
   int max_retrans_path ;
   int max_retrans_init ;
   int pf_retrans ;
   int ps_retrans ;
   int pf_enable ;
   int pf_expose ;
   int sndbuf_policy ;
   int rcvbuf_policy ;
   int default_auto_asconf ;
   int addip_enable ;
   int addip_noauth ;
   int prsctp_enable ;
   int reconf_enable ;
   int auth_enable ;
   int intl_enable ;
   int ecn_enable ;
   int scope_policy ;
   int rwnd_upd_shift ;
   unsigned long max_autoclose ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/dccp.h"
struct netns_dccp {
   struct sock *v4_ctl_sk ;
   struct sock *v6_ctl_sk ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netfilter.h"
struct nf_logger;
#line 76 
struct nf_queue_handler;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/netfilter.h"
struct nf_hook_entries;
#line 11  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/netfilter.h"
struct netns_nf {
   struct proc_dir_entry *proc_netfilter ;
   struct nf_queue_handler *queue_handler ;
   struct nf_logger *nf_loggers[13U] ;
   struct ctl_table_header *nf_log_dir_header ;
   struct nf_hook_entries *hooks_ipv4[5U] ;
   struct nf_hook_entries *hooks_ipv6[5U] ;
   struct nf_hook_entries *hooks_arp[3U] ;
   struct nf_hook_entries *hooks_bridge[5U] ;
   struct nf_hook_entries *hooks_decnet[7U] ;
   bool defrag_ipv4 ;
   bool defrag_ipv6 ;
};
#line 37 
struct ebt_table;
#line 10  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/x_tables.h"
struct netns_xt {
   struct list_head tables[13U] ;
   bool notrack_deprecated_warning ;
   bool clusterip_deprecated_warning ;
   struct ebt_table *broute_table ;
   struct ebt_table *frame_filter ;
   struct ebt_table *frame_nat ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_node;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_head {
   struct hlist_nulls_node *first ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/list_nulls.h"
struct hlist_nulls_node {
   struct hlist_nulls_node *next ;
   struct hlist_nulls_node **pprev ;
};
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_generic_net {
   unsigned int timeout ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_tcp_net {
   unsigned int timeouts[14U] ;
   int tcp_loose ;
   int tcp_be_liberal ;
   int tcp_max_retrans ;
};
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_udp_net {
   unsigned int timeouts[2U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_icmp_net {
   unsigned int timeout ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_dccp_net {
   int dccp_loose ;
   unsigned int dccp_timeout[10U] ;
};
#line 54  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_sctp_net {
   unsigned int timeouts[10U] ;
};
#line 66  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_gre_net {
   struct list_head keymap_list ;
   unsigned int timeouts[2U] ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct nf_ip_net {
   struct nf_generic_net generic ;
   struct nf_tcp_net tcp ;
   struct nf_udp_net udp ;
   struct nf_icmp_net icmp ;
   struct nf_icmp_net icmpv6 ;
   struct nf_dccp_net dccp ;
   struct nf_sctp_net sctp ;
   struct nf_gre_net gre ;
};
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct ct_pcpu {
   spinlock_t lock ;
   struct hlist_nulls_head unconfirmed ;
   struct hlist_nulls_head dying ;
};
#line 95 
struct nf_ct_event_notifier;
#line 95 
struct nf_exp_event_notifier;
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/conntrack.h"
struct netns_ct {
   atomic_t count ;
   unsigned int expect_count ;
   struct delayed_work ecache_dwork ;
   bool ecache_dwork_pending ;
   bool auto_assign_helper_warned ;
   struct ctl_table_header *sysctl_header ;
   unsigned int sysctl_log_invalid ;
   int sysctl_events ;
   int sysctl_acct ;
   int sysctl_auto_assign_helper ;
   int sysctl_tstamp ;
   int sysctl_checksum ;
   struct ct_pcpu *pcpu_lists ;
   struct ip_conntrack_stat *stat ;
   struct nf_ct_event_notifier *nf_conntrack_event_cb ;
   struct nf_exp_event_notifier *nf_expect_event_cb ;
   struct nf_ip_net nf_ct_proto ;
   unsigned int labels_used ;
};
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/nftables.h"
struct netns_nftables {
   struct list_head tables ;
   struct list_head commit_list ;
   struct list_head module_list ;
   struct mutex commit_mutex ;
   unsigned int base_seq ;
   u8 gencursor ;
   u8 validate_state ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct xfrm_policy_hash {
   struct hlist_head *table ;
   unsigned int hmask ;
   u8 dbits4 ;
   u8 sbits4 ;
   u8 dbits6 ;
   u8 sbits6 ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct xfrm_policy_hthresh {
   struct work_struct work ;
   seqlock_t lock ;
   u8 lbits4 ;
   u8 rbits4 ;
   u8 lbits6 ;
   u8 rbits6 ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xfrm.h"
struct netns_xfrm {
   struct list_head state_all ;
   struct hlist_head *state_bydst ;
   struct hlist_head *state_bysrc ;
   struct hlist_head *state_byspi ;
   unsigned int state_hmask ;
   unsigned int state_num ;
   struct work_struct state_hash_work ;
   struct list_head policy_all ;
   struct hlist_head *policy_byidx ;
   unsigned int policy_idx_hmask ;
   struct hlist_head policy_inexact[3U] ;
   struct xfrm_policy_hash policy_bydst[3U] ;
   unsigned int policy_count[6U] ;
   struct work_struct policy_hash_work ;
   struct xfrm_policy_hthresh policy_hthresh ;
   struct list_head inexact_bins ;
   struct sock *nlsk ;
   struct sock *nlsk_stash ;
   u32 sysctl_aevent_etime ;
   u32 sysctl_aevent_rseqth ;
   int sysctl_larval_drop ;
   u32 sysctl_acq_expires ;
   struct ctl_table_header *sysctl_hdr ;
   struct dst_ops xfrm4_dst_ops ;
   struct dst_ops xfrm6_dst_ops ;
   spinlock_t xfrm_state_lock ;
   spinlock_t xfrm_policy_lock ;
   struct mutex xfrm_cfg_mutex ;
};
#line 79 
struct mpls_route;
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/mpls.h"
struct netns_mpls {
   int ip_ttl_propagate ;
   int default_ttl ;
   size_t platform_labels ;
   struct mpls_route **platform_label ;
   struct ctl_table_header *ctl ;
};
#line 20 
struct can_dev_rcv_lists;
#line 21 
struct can_pkg_stats;
#line 22 
struct can_rcv_lists_stats;
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/can.h"
struct netns_can {
   struct proc_dir_entry *proc_dir ;
   struct proc_dir_entry *pde_version ;
   struct proc_dir_entry *pde_stats ;
   struct proc_dir_entry *pde_reset_stats ;
   struct proc_dir_entry *pde_rcvlist_all ;
   struct proc_dir_entry *pde_rcvlist_fil ;
   struct proc_dir_entry *pde_rcvlist_inv ;
   struct proc_dir_entry *pde_rcvlist_sff ;
   struct proc_dir_entry *pde_rcvlist_eff ;
   struct proc_dir_entry *pde_rcvlist_err ;
   struct proc_dir_entry *bcmproc_dir ;
   struct can_dev_rcv_lists *rx_alldev_list ;
   spinlock_t rcvlists_lock ;
   struct timer_list stattimer ;
   struct can_pkg_stats *pkg_stats ;
   struct can_rcv_lists_stats *rcv_lists_stats ;
   struct hlist_head cgw_list ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netns/xdp.h"
struct netns_xdp {
   struct mutex lock ;
   struct hlist_head list ;
};
#line 12 
struct proc_ns_operations;
#line 7  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ns_common.h"
struct ns_common {
   atomic_long_t stashed ;
   struct proc_ns_operations *ops ;
   unsigned int inum ;
};
#line 12 
struct net_generic;
#line 13 
struct uevent_sock;
#line 14 
struct netns_ipvs;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct key_tag;
#line 55 
struct ucounts;
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct net {
   refcount_t passive ;
   refcount_t count ;
   spinlock_t rules_mod_lock ;
   unsigned int dev_unreg_count ;
   unsigned int dev_base_seq ;
   int ifindex ;
   spinlock_t nsid_lock ;
   atomic_t fnhe_genid ;
   struct list_head list ;
   struct list_head exit_list ;
   struct llist_node cleanup_list ;
   struct key_tag *key_domain ;
   struct user_namespace *user_ns ;
   struct ucounts *ucounts ;
   struct idr netns_ids ;
   struct ns_common ns ;
   struct list_head dev_base_head ;
   struct proc_dir_entry *proc_net ;
   struct proc_dir_entry *proc_net_stat ;
   struct ctl_table_set sysctls ;
   struct sock *rtnl ;
   struct sock *genl_sock ;
   struct uevent_sock *uevent_sock ;
   struct hlist_head *dev_name_head ;
   struct hlist_head *dev_index_head ;
   struct raw_notifier_head netdev_chain ;
   u32 hash_mix ;
   struct net_device *loopback_dev ;
   struct list_head rules_ops ;
   struct netns_core core ;
   struct netns_mib mib ;
   struct netns_packet packet ;
   struct netns_unix unx ;
   struct netns_nexthop nexthop ;
   struct netns_ipv4 ipv4 ;
   struct netns_ipv6 ipv6 ;
   struct netns_ieee802154_lowpan ieee802154_lowpan ;
   struct netns_sctp sctp ;
   struct netns_dccp dccp ;
   struct netns_nf nf ;
   struct netns_xt xt ;
   struct netns_ct ct ;
   struct netns_nftables nft ;
   struct netns_nf_frag nf_frag ;
   struct ctl_table_header *nf_frag_frags_hdr ;
   struct sock *nfnl ;
   struct sock *nfnl_stash ;
   struct list_head nfnl_acct_list ;
   struct list_head nfct_timeout_list ;
   struct sk_buff_head wext_nlevents ;
   struct net_generic *gen ;
   struct bpf_prog *flow_dissector_prog ;
   struct netns_xfrm xfrm ;
   struct netns_ipvs *ipvs ;
   struct netns_mpls mpls ;
   struct netns_can can ;
   struct netns_xdp xdp ;
   struct sock *crypto_nlsk ;
   struct sock *diag_nlsk ;
} __attribute__((__designated_init__));
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
struct assoc_array_ptr;
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
struct assoc_array {
   struct assoc_array_ptr *root ;
   unsigned long nr_leaves_on_tree ;
};
#line 83  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/assoc_array.h"
typedef int32_t key_serial_t;
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
typedef uint32_t key_perm_t;
#line 32 
struct key_type;
#line 85  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key_tag {
   struct callback_head rcu ;
   refcount_t usage ;
   bool removed ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_592 {
   u16 desc_len ;
   char desc[6U] ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_591 {
   struct __anonstruct_592 __anonCompField___anonunion_591_104 ;
   unsigned long x ;
};
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct keyring_index_key {
   unsigned long hash ;
   union __anonunion_591 __anonCompField_keyring_index_key_105 ;
   struct key_type *type ;
   struct key_tag *domain_tag ;
   char *description ;
};
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union key_payload {
   void *rcu_data0 ;
   void *data[4U] ;
};
#line 153  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key_restriction {
   int (*check)(struct key *, struct key_type *, union key_payload *, struct key *) ;
   struct key *key ;
   struct key_type *keytype ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_593 {
   struct list_head graveyard_link ;
   struct rb_node serial_node ;
};
#line 172 
struct key_user;
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_594 {
   time64_t expiry ;
   time64_t revoked_at ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_596 {
   unsigned long hash ;
   unsigned long len_desc ;
   struct key_type *type ;
   struct key_tag *domain_tag ;
   char *description ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_595 {
   struct keyring_index_key index_key ;
   struct __anonstruct_596 __anonCompField___anonunion_595_108 ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct __anonstruct_598 {
   struct list_head name_link ;
   struct assoc_array keys ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
union __anonunion_597 {
   union key_payload payload ;
   struct __anonstruct_598 __anonCompField___anonunion_597_110 ;
};
#line 172  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/key.h"
struct key {
   refcount_t usage ;
   key_serial_t serial ;
   union __anonunion_593 __anonCompField_key_106 ;
   struct rw_semaphore sem ;
   struct key_user *user ;
   void *security ;
   union __anonunion_594 __anonCompField_key_107 ;
   time64_t last_used_at ;
   kuid_t uid ;
   kgid_t gid ;
   key_perm_t perm ;
   unsigned short quotalen ;
   unsigned short datalen ;
   short state ;
   unsigned long flags ;
   union __anonunion_595 __anonCompField_key_109 ;
   union __anonunion_597 __anonCompField_key_111 ;
   struct key_restriction *restrict_link ;
};
#line 13  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/user.h"
struct user_struct {
   refcount_t __count ;
   atomic_t processes ;
   atomic_t sigpending ;
   atomic_t fanotify_listeners ;
   atomic_long_t epoll_watches ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   unsigned long unix_inflight ;
   atomic_long_t pipe_bufs ;
   struct hlist_node uidhash_node ;
   kuid_t uid ;
   atomic_long_t locked_vm ;
   struct ratelimit_state ratelimit ;
};
#line 25  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
struct group_info {
   atomic_t usage ;
   int ngroups ;
   kgid_t gid[0U] ;
} __attribute__((__designated_init__));
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
union __anonunion_601 {
   int non_rcu ;
   struct callback_head rcu ;
};
#line 111  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cred.h"
struct cred {
   atomic_t usage ;
   atomic_t subscribers ;
   void *put_addr ;
   unsigned int magic ;
   kuid_t uid ;
   kgid_t gid ;
   kuid_t suid ;
   kgid_t sgid ;
   kuid_t euid ;
   kgid_t egid ;
   kuid_t fsuid ;
   kgid_t fsgid ;
   unsigned int securebits ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_bset ;
   kernel_cap_t cap_ambient ;
   unsigned char jit_keyring ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct key *thread_keyring ;
   struct key *request_key_auth ;
   void *security ;
   struct user_struct *user ;
   struct user_namespace *user_ns ;
   struct group_info *group_info ;
   union __anonunion_601 __anonCompField_cred_112 ;
} __attribute__((__designated_init__));
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seq_file.h"
struct seq_file {
   char *buf ;
   size_t size ;
   size_t from ;
   size_t count ;
   size_t pad_until ;
   loff_t index ;
   loff_t read_pos ;
   u64 version ;
   struct mutex lock ;
   struct seq_operations *op ;
   int poll_event ;
   struct file *file ;
   void *private ;
};
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/seq_file.h"
struct seq_operations {
   void *(*start)(struct seq_file *, loff_t *) ;
   void (*stop)(struct seq_file *, void *) ;
   void *(*next)(struct seq_file *, void *, loff_t *) ;
   int (*show)(struct seq_file *, void *) ;
};
#line 275  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
struct __anonstruct_possible_net_t_602 {
   struct net *net ;
};
#line 275  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/net_namespace.h"
typedef struct __anonstruct_possible_net_t_602 possible_net_t;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_ets {
   __u8 willing ;
   __u8 ets_cap ;
   __u8 cbs ;
   __u8 tc_tx_bw[8U] ;
   __u8 tc_rx_bw[8U] ;
   __u8 tc_tsa[8U] ;
   __u8 prio_tc[8U] ;
   __u8 tc_reco_bw[8U] ;
   __u8 tc_reco_tsa[8U] ;
   __u8 reco_prio_tc[8U] ;
};
#line 78  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_maxrate {
   __u64 tc_maxrate[8U] ;
};
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_qcn {
   __u8 rpg_enable[8U] ;
   __u32 rppp_max_rps[8U] ;
   __u32 rpg_time_reset[8U] ;
   __u32 rpg_byte_reset[8U] ;
   __u32 rpg_threshold[8U] ;
   __u32 rpg_max_rate[8U] ;
   __u32 rpg_ai_rate[8U] ;
   __u32 rpg_hai_rate[8U] ;
   __u32 rpg_gd[8U] ;
   __u32 rpg_min_dec_fac[8U] ;
   __u32 rpg_min_rate[8U] ;
   __u32 cndd_state_machine[8U] ;
};
#line 141  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_qcn_stats {
   __u64 rppp_rp_centiseconds[8U] ;
   __u32 rppp_created_rps[8U] ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct ieee_pfc {
   __u8 pfc_cap ;
   __u8 pfc_en ;
   __u8 mbc ;
   __u16 delay ;
   __u64 requests[8U] ;
   __u64 indications[8U] ;
};
#line 168  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcbnl_buffer {
   __u8 prio2buffer[8U] ;
   __u32 buffer_size[8U] ;
   __u32 total_size ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct cee_pg {
   __u8 willing ;
   __u8 error ;
   __u8 pg_en ;
   __u8 tcs_supported ;
   __u8 pg_bw[8U] ;
   __u8 prio_pg[8U] ;
};
#line 207  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct cee_pfc {
   __u8 willing ;
   __u8 error ;
   __u8 pfc_en ;
   __u8 tcs_supported ;
};
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcb_app {
   __u8 selector ;
   __u8 priority ;
   __u16 protocol ;
};
#line 259  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/dcbnl.h"
struct dcb_peer_app_info {
   __u8 willing ;
   __u8 error ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/dcbnl.h"
struct dcbnl_rtnl_ops {
   int (*ieee_getets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_setets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_getmaxrate)(struct net_device *, struct ieee_maxrate *) ;
   int (*ieee_setmaxrate)(struct net_device *, struct ieee_maxrate *) ;
   int (*ieee_getqcn)(struct net_device *, struct ieee_qcn *) ;
   int (*ieee_setqcn)(struct net_device *, struct ieee_qcn *) ;
   int (*ieee_getqcnstats)(struct net_device *, struct ieee_qcn_stats *) ;
   int (*ieee_getpfc)(struct net_device *, struct ieee_pfc *) ;
   int (*ieee_setpfc)(struct net_device *, struct ieee_pfc *) ;
   int (*ieee_getapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_setapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_delapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_peer_getets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_peer_getpfc)(struct net_device *, struct ieee_pfc *) ;
   u8 (*getstate)(struct net_device *) ;
   u8 (*setstate)(struct net_device *, u8 ) ;
   void (*getpermhwaddr)(struct net_device *, u8 *) ;
   void (*setpgtccfgtx)(struct net_device *, int , u8 , u8 , u8 , u8 ) ;
   void (*setpgbwgcfgtx)(struct net_device *, int , u8 ) ;
   void (*setpgtccfgrx)(struct net_device *, int , u8 , u8 , u8 , u8 ) ;
   void (*setpgbwgcfgrx)(struct net_device *, int , u8 ) ;
   void (*getpgtccfgtx)(struct net_device *, int , u8 *, u8 *, u8 *, u8 *) ;
   void (*getpgbwgcfgtx)(struct net_device *, int , u8 *) ;
   void (*getpgtccfgrx)(struct net_device *, int , u8 *, u8 *, u8 *, u8 *) ;
   void (*getpgbwgcfgrx)(struct net_device *, int , u8 *) ;
   void (*setpfccfg)(struct net_device *, int , u8 ) ;
   void (*getpfccfg)(struct net_device *, int , u8 *) ;
   u8 (*setall)(struct net_device *) ;
   u8 (*getcap)(struct net_device *, int , u8 *) ;
   int (*getnumtcs)(struct net_device *, int , u8 *) ;
   int (*setnumtcs)(struct net_device *, int , u8 ) ;
   u8 (*getpfcstate)(struct net_device *) ;
   void (*setpfcstate)(struct net_device *, u8 ) ;
   void (*getbcncfg)(struct net_device *, int , u32 *) ;
   void (*setbcncfg)(struct net_device *, int , u32 ) ;
   void (*getbcnrp)(struct net_device *, int , u8 *) ;
   void (*setbcnrp)(struct net_device *, int , u8 ) ;
   int (*setapp)(struct net_device *, u8 , u16 , u8 ) ;
   int (*getapp)(struct net_device *, u8 , u16 ) ;
   u8 (*getfeatcfg)(struct net_device *, int , u8 *) ;
   u8 (*setfeatcfg)(struct net_device *, int , u8 ) ;
   u8 (*getdcbx)(struct net_device *) ;
   u8 (*setdcbx)(struct net_device *, u8 ) ;
   int (*peer_getappinfo)(struct net_device *, struct dcb_peer_app_info *, u16 *) ;
   int (*peer_getapptable)(struct net_device *, struct dcb_app *) ;
   int (*cee_peer_getpg)(struct net_device *, struct cee_pg *) ;
   int (*cee_peer_getpfc)(struct net_device *, struct cee_pfc *) ;
   int (*dcbnl_getbuffer)(struct net_device *, struct dcbnl_buffer *) ;
   int (*dcbnl_setbuffer)(struct net_device *, struct dcbnl_buffer *) ;
};
#line 41  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/taskstats.h"
struct taskstats {
   __u16 version ;
   __u32 ac_exitcode ;
   __u8 ac_flag ;
   __u8 ac_nice ;
   __u64 cpu_count ;
   __u64 cpu_delay_total ;
   __u64 blkio_count ;
   __u64 blkio_delay_total ;
   __u64 swapin_count ;
   __u64 swapin_delay_total ;
   __u64 cpu_run_real_total ;
   __u64 cpu_run_virtual_total ;
   char ac_comm[32U] ;
   __u8 ac_sched ;
   __u8 ac_pad[3U] ;
   __u32 ac_uid ;
   __u32 ac_gid ;
   __u32 ac_pid ;
   __u32 ac_ppid ;
   __u32 ac_btime ;
   __u64 ac_etime ;
   __u64 ac_utime ;
   __u64 ac_stime ;
   __u64 ac_minflt ;
   __u64 ac_majflt ;
   __u64 coremem ;
   __u64 virtmem ;
   __u64 hiwater_rss ;
   __u64 hiwater_vm ;
   __u64 read_char ;
   __u64 write_char ;
   __u64 read_syscalls ;
   __u64 write_syscalls ;
   __u64 read_bytes ;
   __u64 write_bytes ;
   __u64 cancelled_write_bytes ;
   __u64 nvcsw ;
   __u64 nivcsw ;
   __u64 ac_utimescaled ;
   __u64 ac_stimescaled ;
   __u64 cpu_scaled_run_real_total ;
   __u64 freepages_count ;
   __u64 freepages_delay_total ;
   __u64 thrashing_count ;
   __u64 thrashing_delay_total ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/cgroupstats.h"
struct mnt_namespace;
#line 60 
struct uts_namespace;
#line 61 
struct ipc_namespace;
#line 62 
struct cgroup_namespace;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/nsproxy.h"
struct nsproxy {
   atomic_t count ;
   struct uts_namespace *uts_ns ;
   struct ipc_namespace *ipc_ns ;
   struct mnt_namespace *mnt_ns ;
   struct pid_namespace *pid_ns_for_children ;
   struct net *net_ns ;
   struct cgroup_namespace *cgroup_ns ;
};
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct uid_gid_extent {
   u32 first ;
   u32 lower_first ;
   u32 count ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct __anonstruct_604 {
   struct uid_gid_extent *forward ;
   struct uid_gid_extent *reverse ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
union __anonunion_603 {
   struct uid_gid_extent extent[5U] ;
   struct __anonstruct_604 __anonCompField___anonunion_603_113 ;
};
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct uid_gid_map {
   u32 nr_extents ;
   union __anonunion_603 __anonCompField_uid_gid_map_114 ;
};
#line 55  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct user_namespace {
   struct uid_gid_map uid_map ;
   struct uid_gid_map gid_map ;
   struct uid_gid_map projid_map ;
   atomic_t count ;
   struct user_namespace *parent ;
   int level ;
   kuid_t owner ;
   kgid_t group ;
   struct ns_common ns ;
   unsigned long flags ;
   struct list_head keyring_name_list ;
   struct key *user_keyring_register ;
   struct rw_semaphore keyring_sem ;
   struct key *persistent_keyring_register ;
   struct work_struct work ;
   struct ctl_table_set set ;
   struct ctl_table_header *sysctls ;
   struct ucounts *ucounts ;
   int ucount_max[9U] ;
} __attribute__((__designated_init__));
#line 91  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/user_namespace.h"
struct ucounts {
   struct hlist_node node ;
   struct user_namespace *ns ;
   kuid_t uid ;
   int count ;
   atomic_t ucount[9U] ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_insn {
   __u8 code ;
   __u8 dst_reg : 4 ;
   __u8 src_reg : 4 ;
   __s16 off ;
   __s32 imm ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_cgroup_storage_key {
   __u64 cgroup_inode_id ;
   __u32 attach_type ;
};
#line 110 
enum bpf_map_type {
    BPF_MAP_TYPE_UNSPEC = 0,
    BPF_MAP_TYPE_HASH = 1,
    BPF_MAP_TYPE_ARRAY = 2,
    BPF_MAP_TYPE_PROG_ARRAY = 3,
    BPF_MAP_TYPE_PERF_EVENT_ARRAY = 4,
    BPF_MAP_TYPE_PERCPU_HASH = 5,
    BPF_MAP_TYPE_PERCPU_ARRAY = 6,
    BPF_MAP_TYPE_STACK_TRACE = 7,
    BPF_MAP_TYPE_CGROUP_ARRAY = 8,
    BPF_MAP_TYPE_LRU_HASH = 9,
    BPF_MAP_TYPE_LRU_PERCPU_HASH = 10,
    BPF_MAP_TYPE_LPM_TRIE = 11,
    BPF_MAP_TYPE_ARRAY_OF_MAPS = 12,
    BPF_MAP_TYPE_HASH_OF_MAPS = 13,
    BPF_MAP_TYPE_DEVMAP = 14,
    BPF_MAP_TYPE_SOCKMAP = 15,
    BPF_MAP_TYPE_CPUMAP = 16,
    BPF_MAP_TYPE_XSKMAP = 17,
    BPF_MAP_TYPE_SOCKHASH = 18,
    BPF_MAP_TYPE_CGROUP_STORAGE = 19,
    BPF_MAP_TYPE_REUSEPORT_SOCKARRAY = 20,
    BPF_MAP_TYPE_PERCPU_CGROUP_STORAGE = 21,
    BPF_MAP_TYPE_QUEUE = 22,
    BPF_MAP_TYPE_STACK = 23,
    BPF_MAP_TYPE_SK_STORAGE = 24,
    BPF_MAP_TYPE_DEVMAP_HASH = 25
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_606 {
   __u32 map_type ;
   __u32 key_size ;
   __u32 value_size ;
   __u32 max_entries ;
   __u32 map_flags ;
   __u32 inner_map_fd ;
   __u32 numa_node ;
   char map_name[16U] ;
   __u32 map_ifindex ;
   __u32 btf_fd ;
   __u32 btf_key_type_id ;
   __u32 btf_value_type_id ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union __anonunion_608 {
   __u64 value ;
   __u64 next_key ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_607 {
   __u32 map_fd ;
   __u64 key ;
   union __anonunion_608 __anonCompField___anonstruct_607_117 ;
   __u64 flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_609 {
   __u32 prog_type ;
   __u32 insn_cnt ;
   __u64 insns ;
   __u64 license ;
   __u32 log_level ;
   __u32 log_size ;
   __u64 log_buf ;
   __u32 kern_version ;
   __u32 prog_flags ;
   char prog_name[16U] ;
   __u32 prog_ifindex ;
   __u32 expected_attach_type ;
   __u32 prog_btf_fd ;
   __u32 func_info_rec_size ;
   __u64 func_info ;
   __u32 func_info_cnt ;
   __u32 line_info_rec_size ;
   __u64 line_info ;
   __u32 line_info_cnt ;
   __u32 attach_btf_id ;
   __u32 attach_prog_fd ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_610 {
   __u64 pathname ;
   __u32 bpf_fd ;
   __u32 file_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_611 {
   __u32 target_fd ;
   __u32 attach_bpf_fd ;
   __u32 attach_type ;
   __u32 attach_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_test_612 {
   __u32 prog_fd ;
   __u32 retval ;
   __u32 data_size_in ;
   __u32 data_size_out ;
   __u64 data_in ;
   __u64 data_out ;
   __u32 repeat ;
   __u32 duration ;
   __u32 ctx_size_in ;
   __u32 ctx_size_out ;
   __u64 ctx_in ;
   __u64 ctx_out ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union __anonunion_614 {
   __u32 start_id ;
   __u32 prog_id ;
   __u32 map_id ;
   __u32 btf_id ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_613 {
   union __anonunion_614 __anonCompField___anonstruct_613_122 ;
   __u32 next_id ;
   __u32 open_flags ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_info_615 {
   __u32 bpf_fd ;
   __u32 info_len ;
   __u64 info ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_query_616 {
   __u32 target_fd ;
   __u32 attach_type ;
   __u32 query_flags ;
   __u32 attach_flags ;
   __u64 prog_ids ;
   __u32 prog_cnt ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_raw_tracepoint_617 {
   __u64 name ;
   __u32 prog_fd ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_618 {
   __u64 btf ;
   __u64 btf_log_buf ;
   __u32 btf_size ;
   __u32 btf_log_size ;
   __u32 btf_log_level ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct __anonstruct_task_fd_query_619 {
   __u32 pid ;
   __u32 fd ;
   __u32 flags ;
   __u32 buf_len ;
   __u64 buf ;
   __u32 prog_id ;
   __u32 fd_type ;
   __u64 probe_offset ;
   __u64 probe_addr ;
};
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
union bpf_attr {
   struct __anonstruct_606 __anonCompField_bpf_attr_116 ;
   struct __anonstruct_607 __anonCompField_bpf_attr_118 ;
   struct __anonstruct_609 __anonCompField_bpf_attr_119 ;
   struct __anonstruct_610 __anonCompField_bpf_attr_120 ;
   struct __anonstruct_611 __anonCompField_bpf_attr_121 ;
   struct __anonstruct_test_612 test ;
   struct __anonstruct_613 __anonCompField_bpf_attr_123 ;
   struct __anonstruct_info_615 info ;
   struct __anonstruct_query_616 query ;
   struct __anonstruct_raw_tracepoint_617 raw_tracepoint ;
   struct __anonstruct_618 __anonCompField_bpf_attr_124 ;
   struct __anonstruct_task_fd_query_619 task_fd_query ;
} __attribute__((__aligned__(8)));
#line 3653  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_func_info {
   __u32 insn_off ;
   __u32 type_id ;
};
#line 3661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/bpf.h"
struct bpf_line_info {
   __u32 insn_off ;
   __u32 file_name_off ;
   __u32 line_off ;
   __u32 line_col ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/file.h"
struct bpf_prog_aux;
#line 96 
struct bpf_map;
#line 97 
struct btf;
#line 98 
struct btf_type;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_ops {
   int (*map_alloc_check)(union bpf_attr *) ;
   struct bpf_map *(*map_alloc)(union bpf_attr *) ;
   void (*map_release)(struct bpf_map *, struct file *) ;
   void (*map_free)(struct bpf_map *) ;
   int (*map_get_next_key)(struct bpf_map *, void *, void *) ;
   void (*map_release_uref)(struct bpf_map *) ;
   void *(*map_lookup_elem_sys_only)(struct bpf_map *, void *) ;
   void *(*map_lookup_elem)(struct bpf_map *, void *) ;
   int (*map_update_elem)(struct bpf_map *, void *, void *, u64 ) ;
   int (*map_delete_elem)(struct bpf_map *, void *) ;
   int (*map_push_elem)(struct bpf_map *, void *, u64 ) ;
   int (*map_pop_elem)(struct bpf_map *, void *) ;
   int (*map_peek_elem)(struct bpf_map *, void *) ;
   void *(*map_fd_get_ptr)(struct bpf_map *, struct file *, int ) ;
   void (*map_fd_put_ptr)(void *) ;
   u32 (*map_gen_lookup)(struct bpf_map *, struct bpf_insn *) ;
   u32 (*map_fd_sys_lookup_elem)(void *) ;
   void (*map_seq_show_elem)(struct bpf_map *, void *, struct seq_file *) ;
   int (*map_check_btf)(struct bpf_map *, struct btf *, struct btf_type *, struct btf_type *) ;
   int (*map_poke_track)(struct bpf_map *, struct bpf_prog_aux *) ;
   void (*map_poke_untrack)(struct bpf_map *, struct bpf_prog_aux *) ;
   void (*map_poke_run)(struct bpf_map *, u32 , struct bpf_prog *, struct bpf_prog *) ;
   int (*map_direct_value_addr)(struct bpf_map *, u64 *, u32 ) ;
   int (*map_direct_value_meta)(struct bpf_map *, u64 , u32 *) ;
   int (*map_mmap)(struct bpf_map *, struct vm_area_struct *) ;
};
#line 82  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_memory {
   u32 pages ;
   struct user_struct *user ;
};
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map {
   struct bpf_map_ops *ops ;
   struct bpf_map *inner_map_meta ;
   void *security ;
   enum bpf_map_type map_type ;
   u32 key_size ;
   u32 value_size ;
   u32 max_entries ;
   u32 map_flags ;
   int spin_lock_off ;
   u32 id ;
   int numa_node ;
   u32 btf_key_type_id ;
   u32 btf_value_type_id ;
   struct btf *btf ;
   struct bpf_map_memory memory ;
   char name[16U] ;
   bool unpriv_array ;
   bool frozen ;
   atomic64_t refcnt ;
   atomic64_t usercnt ;
   struct work_struct work ;
   struct mutex freeze_mutex ;
   u64 writecnt ;
};
#line 151 
struct bpf_offload_dev;
#line 152 
struct bpf_offloaded_map;
#line 156  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_map_dev_ops {
   int (*map_get_next_key)(struct bpf_offloaded_map *, void *, void *) ;
   int (*map_lookup_elem)(struct bpf_offloaded_map *, void *, void *) ;
   int (*map_update_elem)(struct bpf_offloaded_map *, void *, void *, u64 ) ;
   int (*map_delete_elem)(struct bpf_offloaded_map *, void *) ;
};
#line 166  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_offloaded_map {
   struct bpf_map map ;
   struct net_device *netdev ;
   struct bpf_map_dev_ops *dev_ops ;
   void *dev_priv ;
   struct list_head offloads ;
};
#line 327  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_ops {
   int (*test_run)(struct bpf_prog *, union bpf_attr *, union bpf_attr *) ;
};
#line 369  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_offload {
   struct bpf_prog *prog ;
   struct net_device *netdev ;
   struct bpf_offload_dev *offdev ;
   void *dev_priv ;
   struct list_head offloads ;
   bool dev_state ;
   bool opt_failed ;
   void *jited_image ;
   u32 jited_len ;
};
#line 394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_stats {
   u64 cnt ;
   u64 nsecs ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 400  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct btf_func_model {
   u8 ret_size ;
   u8 nr_args ;
   u8 arg_size[12U] ;
};
#line 447 
enum bpf_tramp_prog_type {
    BPF_TRAMP_FENTRY = 0,
    BPF_TRAMP_FEXIT = 1,
    BPF_TRAMP_MAX = 2
};
#line 454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct __anonstruct_func_646 {
   struct btf_func_model model ;
   void *addr ;
   bool ftrace_managed ;
};
#line 454  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_trampoline {
   struct hlist_node hlist ;
   struct mutex mutex ;
   refcount_t refcnt ;
   u64 key ;
   struct __anonstruct_func_646 func ;
   struct hlist_head progs_hlist[2U] ;
   int progs_cnt[2U] ;
   void *image ;
   u64 selector ;
};
#line 495  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_func_info_aux {
   bool unreliable ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct __anonstruct_tail_call_648 {
   struct bpf_map *map ;
   u32 key ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
union __anonunion_647 {
   struct __anonstruct_tail_call_648 tail_call ;
};
#line 504  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_jit_poke_descriptor {
   void *ip ;
   union __anonunion_647 __anonCompField_bpf_jit_poke_descriptor_149 ;
   bool ip_stable ;
   u8 adj_off ;
   u16 reason ;
};
#line 517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
union __anonunion_649 {
   struct work_struct work ;
   struct callback_head rcu ;
};
#line 517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_aux {
   atomic64_t refcnt ;
   u32 used_map_cnt ;
   u32 max_ctx_offset ;
   u32 max_pkt_offset ;
   u32 max_tp_access ;
   u32 stack_depth ;
   u32 id ;
   u32 func_cnt ;
   u32 func_idx ;
   u32 attach_btf_id ;
   struct bpf_prog *linked_prog ;
   bool verifier_zext ;
   bool offload_requested ;
   bool attach_btf_trace ;
   bool func_proto_unreliable ;
   enum bpf_tramp_prog_type trampoline_prog_type ;
   struct bpf_trampoline *trampoline ;
   struct hlist_node tramp_hlist ;
   struct btf_type *attach_func_proto ;
   char *attach_func_name ;
   struct bpf_prog **func ;
   void *jit_data ;
   struct bpf_jit_poke_descriptor *poke_tab ;
   u32 size_poke_tab ;
   struct latch_tree_node ksym_tnode ;
   struct list_head ksym_lnode ;
   struct bpf_prog_ops *ops ;
   struct bpf_map **used_maps ;
   struct bpf_prog *prog ;
   struct user_struct *user ;
   u64 load_time ;
   struct bpf_map *cgroup_storage[2U] ;
   char name[16U] ;
   void *security ;
   struct bpf_prog_offload *offload ;
   struct btf *btf ;
   struct bpf_func_info *func_info ;
   struct bpf_func_info_aux *func_info_aux ;
   struct bpf_line_info *linfo ;
   void **jited_linfo ;
   u32 func_info_cnt ;
   u32 nr_linfo ;
   u32 linfo_idx ;
   u32 num_exentries ;
   struct exception_table_entry *extable ;
   struct bpf_prog_stats *stats ;
   union __anonunion_649 __anonCompField_bpf_prog_aux_150 ;
};
#line 686 
struct bpf_cgroup_storage;
#line 686  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_array_item {
   struct bpf_prog *prog ;
   struct bpf_cgroup_storage *cgroup_storage[2U] ;
};
#line 691  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf.h"
struct bpf_prog_array {
   struct callback_head rcu ;
   struct bpf_prog_array_item items[0U] ;
};
#line 1335 
struct cgroup;
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_cgroup_storage_map;
#line 37  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_storage_buffer {
   struct callback_head rcu ;
   char data[0U] ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
union __anonunion_651 {
   struct bpf_storage_buffer *buf ;
   void *percpu_buf ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct bpf_cgroup_storage {
   union __anonunion_651 __anonCompField_bpf_cgroup_storage_152 ;
   struct bpf_cgroup_storage_map *map ;
   struct bpf_cgroup_storage_key key ;
   struct list_head list ;
   struct rb_node node ;
   struct callback_head rcu ;
};
#line 62  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bpf-cgroup.h"
struct cgroup_bpf {
   struct bpf_prog_array *effective[26U] ;
   struct list_head progs[26U] ;
   u32 flags[26U] ;
   struct bpf_prog_array *inactive ;
   struct percpu_ref refcnt ;
   struct work_struct release_work ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_work;
#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_worker {
   unsigned int flags ;
   raw_spinlock_t lock ;
   struct list_head work_list ;
   struct list_head delayed_work_list ;
   struct task_struct *task ;
   struct kthread_work *current_work ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_work {
   struct list_head node ;
   void (*func)(struct kthread_work *) ;
   struct kthread_worker *worker ;
   int canceling ;
};
#line 103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kthread.h"
struct kthread_delayed_work {
   struct kthread_work work ;
   struct timer_list timer ;
};
#line 199 
struct cgroup_subsys_state;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/psi_types.h"
struct psi_group_cpu {
   seqcount_t seq ;
   unsigned int tasks[3U] ;
   u32 state_mask ;
   u32 times[6U] ;
   u64 state_start ;
   u32 times_prev[2U][6U] ;
};
#line 96 
struct psi_group;
#line 128  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/psi_types.h"
struct psi_group {
   struct mutex avgs_lock ;
   struct psi_group_cpu *pcpu ;
   u64 avg_total[5U] ;
   u64 avg_last_update ;
   u64 avg_next_update ;
   struct delayed_work avgs_work ;
   u64 total[2U][5U] ;
   unsigned long avg[5U][3U] ;
   atomic_t poll_scheduled ;
   struct kthread_worker *poll_kworker ;
   struct kthread_delayed_work poll_work ;
   struct mutex trigger_lock ;
   struct list_head triggers ;
   u32 nr_triggers[5U] ;
   u32 poll_states ;
   u64 poll_min_period ;
   u64 polling_total[5U] ;
   u64 polling_next_update ;
   u64 polling_until ;
};
#line 166 
struct cgroup_root;
#line 167 
struct cgroup_subsys;
#line 168 
struct cgroup_taskset;
#line 119  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_file {
   struct kernfs_node *kn ;
   unsigned long notified_at ;
   struct timer_list notify_timer ;
};
#line 133  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_subsys_state {
   struct cgroup *cgroup ;
   struct cgroup_subsys *ss ;
   struct percpu_ref refcnt ;
   struct list_head sibling ;
   struct list_head children ;
   struct list_head rstat_css_node ;
   int id ;
   unsigned int flags ;
   u64 serial_nr ;
   atomic_t online_cnt ;
   struct work_struct destroy_work ;
   struct rcu_work destroy_rwork ;
   struct cgroup_subsys_state *parent ;
};
#line 190  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct css_set {
   struct cgroup_subsys_state *subsys[14U] ;
   refcount_t refcount ;
   struct css_set *dom_cset ;
   struct cgroup *dfl_cgrp ;
   int nr_tasks ;
   struct list_head tasks ;
   struct list_head mg_tasks ;
   struct list_head dying_tasks ;
   struct list_head task_iters ;
   struct list_head e_cset_node[14U] ;
   struct list_head threaded_csets ;
   struct list_head threaded_csets_node ;
   struct hlist_node hlist ;
   struct list_head cgrp_links ;
   struct list_head mg_preload_node ;
   struct list_head mg_node ;
   struct cgroup *mg_src_cgrp ;
   struct cgroup *mg_dst_cgrp ;
   struct css_set *mg_dst_cset ;
   bool dead ;
   struct callback_head callback_head ;
};
#line 279  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_base_stat {
   struct task_cputime cputime ;
};
#line 303  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_rstat_cpu {
   struct u64_stats_sync bsync ;
   struct cgroup_base_stat bstat ;
   struct cgroup_base_stat last_bstat ;
   struct cgroup *updated_children ;
   struct cgroup *updated_next ;
};
#line 332  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_freezer_state {
   bool freeze ;
   int e_freeze ;
   int nr_frozen_descendants ;
   int nr_frozen_tasks ;
};
#line 351  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup {
   struct cgroup_subsys_state self ;
   unsigned long flags ;
   int level ;
   int max_depth ;
   int nr_descendants ;
   int nr_dying_descendants ;
   int max_descendants ;
   int nr_populated_csets ;
   int nr_populated_domain_children ;
   int nr_populated_threaded_children ;
   int nr_threaded_children ;
   struct kernfs_node *kn ;
   struct cgroup_file procs_file ;
   struct cgroup_file events_file ;
   u16 subtree_control ;
   u16 subtree_ss_mask ;
   u16 old_subtree_control ;
   u16 old_subtree_ss_mask ;
   struct cgroup_subsys_state *subsys[14U] ;
   struct cgroup_root *root ;
   struct list_head cset_links ;
   struct list_head e_csets[14U] ;
   struct cgroup *dom_cgrp ;
   struct cgroup *old_dom_cgrp ;
   struct cgroup_rstat_cpu *rstat_cpu ;
   struct list_head rstat_css_list ;
   struct cgroup_base_stat last_bstat ;
   struct cgroup_base_stat bstat ;
   struct prev_cputime prev_cputime ;
   struct list_head pidlists ;
   struct mutex pidlist_mutex ;
   wait_queue_head_t offline_waitq ;
   struct work_struct release_agent_work ;
   struct psi_group psi ;
   struct cgroup_bpf bpf ;
   atomic_t congestion_count ;
   struct cgroup_freezer_state freezer ;
   u64 ancestor_ids[] ;
};
#line 489  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_root {
   struct kernfs_root *kf_root ;
   unsigned int subsys_mask ;
   int hierarchy_id ;
   struct cgroup cgrp ;
   u64 cgrp_ancestor_id_storage ;
   atomic_t nr_cgrps ;
   struct list_head root_list ;
   unsigned int flags ;
   char release_agent_path[4096U] ;
   char name[64U] ;
};
#line 527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cftype {
   char name[64U] ;
   unsigned long private ;
   size_t max_write_len ;
   unsigned int flags ;
   unsigned int file_offset ;
   struct cgroup_subsys *ss ;
   struct list_head node ;
   struct kernfs_ops *kf_ops ;
   int (*open)(struct kernfs_open_file *) ;
   void (*release)(struct kernfs_open_file *) ;
   u64 (*read_u64)(struct cgroup_subsys_state *, struct cftype *) ;
   s64 (*read_s64)(struct cgroup_subsys_state *, struct cftype *) ;
   int (*seq_show)(struct seq_file *, void *) ;
   void *(*seq_start)(struct seq_file *, loff_t *) ;
   void *(*seq_next)(struct seq_file *, void *, loff_t *) ;
   void (*seq_stop)(struct seq_file *, void *) ;
   int (*write_u64)(struct cgroup_subsys_state *, struct cftype *, u64 ) ;
   int (*write_s64)(struct cgroup_subsys_state *, struct cftype *, s64 ) ;
   ssize_t (*write)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   __poll_t (*poll)(struct kernfs_open_file *, struct poll_table_struct *) ;
   struct lock_class_key lockdep_key ;
};
#line 616  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup-defs.h"
struct cgroup_subsys {
   struct cgroup_subsys_state *(*css_alloc)(struct cgroup_subsys_state *) ;
   int (*css_online)(struct cgroup_subsys_state *) ;
   void (*css_offline)(struct cgroup_subsys_state *) ;
   void (*css_released)(struct cgroup_subsys_state *) ;
   void (*css_free)(struct cgroup_subsys_state *) ;
   void (*css_reset)(struct cgroup_subsys_state *) ;
   void (*css_rstat_flush)(struct cgroup_subsys_state *, int ) ;
   int (*css_extra_stat_show)(struct seq_file *, struct cgroup_subsys_state *) ;
   int (*can_attach)(struct cgroup_taskset *) ;
   void (*cancel_attach)(struct cgroup_taskset *) ;
   void (*attach)(struct cgroup_taskset *) ;
   void (*post_attach)(void) ;
   int (*can_fork)(struct task_struct *) ;
   void (*cancel_fork)(struct task_struct *) ;
   void (*fork)(struct task_struct *) ;
   void (*exit)(struct task_struct *) ;
   void (*release)(struct task_struct *) ;
   void (*bind)(struct cgroup_subsys_state *) ;
   bool early_init : 1 ;
   bool implicit_on_dfl : 1 ;
   bool threaded : 1 ;
   bool broken_hierarchy : 1 ;
   bool warned_broken_hierarchy : 1 ;
   int id ;
   char *name ;
   char *legacy_name ;
   struct cgroup_root *root ;
   struct idr css_idr ;
   struct list_head cfts ;
   struct cftype *dfl_cftypes ;
   struct cftype *legacy_cftypes ;
   unsigned int depends_on ;
};
#line 848  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cgroup.h"
struct cgroup_namespace {
   refcount_t count ;
   struct ns_common ns ;
   struct user_namespace *user_ns ;
   struct ucounts *ucounts ;
   struct css_set *root_cset ;
};
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/netprio_cgroup.h"
struct netprio_map {
   struct callback_head rcu ;
   u32 priomap_len ;
   u32 priomap[] ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_mem_info {
   u32 type ;
   u32 id ;
};
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_rxq_info {
   struct net_device *dev ;
   u32 queue_index ;
   u32 reg_state ;
   struct xdp_mem_info mem ;
} __attribute__((__aligned__(64)));
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/net/xdp.h"
struct xdp_frame {
   void *data ;
   u16 len ;
   u16 headroom ;
   u16 metasize ;
   struct xdp_mem_info mem ;
   struct net_device *dev_rx ;
};
#line 175 
struct netdev_bpf;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/security.h"
struct xfrm_state;
#line 18  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct sighand_struct {
   spinlock_t siglock ;
   refcount_t count ;
   wait_queue_head_t signalfd_wqh ;
   struct k_sigaction action[64U] ;
};
#line 28  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   u64 ac_utime ;
   u64 ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct cpu_itimer {
   u64 expires ;
   u64 incr ;
};
#line 45  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct task_cputime_atomic {
   atomic64_t utime ;
   atomic64_t stime ;
   atomic64_t sum_exec_runtime ;
};
#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct thread_group_cputimer {
   struct task_cputime_atomic cputime_atomic ;
};
#line 80 
struct tty_struct;
#line 80 
struct autogroup;
#line 80 
struct tty_audit_buf;
#line 80  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched/signal.h"
struct signal_struct {
   refcount_t sigcnt ;
   atomic_t live ;
   int nr_threads ;
   struct list_head thread_head ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   struct hlist_head multiprocess ;
   int group_exit_code ;
   int notify_count ;
   struct task_struct *group_exit_task ;
   int group_stop_count ;
   unsigned int flags ;
   unsigned int is_child_subreaper : 1 ;
   unsigned int has_child_subreaper : 1 ;
   int posix_timer_id ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   ktime_t it_real_incr ;
   struct cpu_itimer it[2U] ;
   struct thread_group_cputimer cputimer ;
   struct posix_cputimers posix_cputimers ;
   struct pid *pids[4U] ;
   struct pid *tty_old_pgrp ;
   int leader ;
   struct tty_struct *tty ;
   struct autogroup *autogroup ;
   seqlock_t stats_lock ;
   u64 utime ;
   u64 stime ;
   u64 cutime ;
   u64 cstime ;
   u64 gtime ;
   u64 cgtime ;
   struct prev_cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   unsigned long maxrss ;
   unsigned long cmaxrss ;
   struct task_io_accounting ioac ;
   unsigned long long sum_sched_runtime ;
   struct rlimit rlim[16U] ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   struct tty_audit_buf *tty_audit_buf ;
   bool oom_flag_origin ;
   short oom_score_adj ;
   short oom_score_adj_min ;
   struct mm_struct *oom_mm ;
   struct mutex cred_guard_mutex ;
} __attribute__((__designated_init__));
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netlink.h"
struct nlmsghdr {
   __u32 nlmsg_len ;
   __u16 nlmsg_type ;
   __u16 nlmsg_flags ;
   __u32 nlmsg_seq ;
   __u32 nlmsg_pid ;
};
#line 211  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/netlink.h"
struct nlattr {
   __u16 nla_len ;
   __u16 nla_type ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
struct netlink_ext_ack {
   char *_msg ;
   struct nlattr *bad_attr ;
   u8 cookie[20U] ;
   u8 cookie_len ;
};
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
union __anonunion_676 {
   u8 ctx[48U] ;
   long args[6U] ;
};
#line 180  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netlink.h"
struct netlink_callback {
   struct sk_buff *skb ;
   struct nlmsghdr *nlh ;
   int (*dump)(struct sk_buff *, struct netlink_callback *) ;
   int (*done)(struct netlink_callback *) ;
   void *data ;
   struct module *module ;
   struct netlink_ext_ack *extack ;
   u16 family ;
   u16 min_dump_alloc ;
   bool strict_check ;
   u16 answer_flags ;
   unsigned int prev_seq ;
   unsigned int seq ;
   union __anonunion_676 __anonCompField_netlink_callback_155 ;
};
#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/neighbour.h"
struct ndmsg {
   __u8 ndm_family ;
   __u8 ndm_pad1 ;
   __u16 ndm_pad2 ;
   __s32 ndm_ifindex ;
   __u16 ndm_state ;
   __u8 ndm_flags ;
   __u8 ndm_type ;
};
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_link.h"
struct rtnl_link_stats64 {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 rx_errors ;
   __u64 tx_errors ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
   __u64 multicast ;
   __u64 collisions ;
   __u64 rx_length_errors ;
   __u64 rx_over_errors ;
   __u64 rx_crc_errors ;
   __u64 rx_frame_errors ;
   __u64 rx_fifo_errors ;
   __u64 rx_missed_errors ;
   __u64 tx_aborted_errors ;
   __u64 tx_carrier_errors ;
   __u64 tx_fifo_errors ;
   __u64 tx_heartbeat_errors ;
   __u64 tx_window_errors ;
   __u64 rx_compressed ;
   __u64 tx_compressed ;
   __u64 rx_nohandler ;
};
#line 753  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/if_link.h"
struct ifla_vf_guid {
   __u32 vf ;
   __u64 guid ;
};
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_link.h"
struct ifla_vf_stats {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 broadcast ;
   __u64 multicast ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
};
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_link.h"
struct ifla_vf_info {
   __u32 vf ;
   __u8 mac[32U] ;
   __u32 vlan ;
   __u32 qos ;
   __u32 spoofchk ;
   __u32 linkstate ;
   __u32 min_tx_rate ;
   __u32 max_tx_rate ;
   __u32 rss_query_en ;
   __u32 trusted ;
   __be16 vlan_proto ;
};
#line 118  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hashtable.h"
struct netpoll_info;
#line 119 
struct phy_device;
#line 120 
struct dsa_port;
#line 121 
struct sfp_bus;
#line 122 
struct wireless_dev;
#line 123 
struct wpan_dev;
#line 124 
struct mpls_dev;
#line 125 
struct udp_tunnel_info;
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
enum netdev_tx {
    __NETDEV_TX_MIN = -2147483648,
    NETDEV_TX_OK = 0,
    NETDEV_TX_BUSY = 16
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef enum netdev_tx netdev_tx_t;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device_stats {
   unsigned long rx_packets ;
   unsigned long tx_packets ;
   unsigned long rx_bytes ;
   unsigned long tx_bytes ;
   unsigned long rx_errors ;
   unsigned long tx_errors ;
   unsigned long rx_dropped ;
   unsigned long tx_dropped ;
   unsigned long multicast ;
   unsigned long collisions ;
   unsigned long rx_length_errors ;
   unsigned long rx_over_errors ;
   unsigned long rx_crc_errors ;
   unsigned long rx_frame_errors ;
   unsigned long rx_fifo_errors ;
   unsigned long rx_missed_errors ;
   unsigned long tx_aborted_errors ;
   unsigned long tx_carrier_errors ;
   unsigned long tx_fifo_errors ;
   unsigned long tx_heartbeat_errors ;
   unsigned long tx_window_errors ;
   unsigned long rx_compressed ;
   unsigned long tx_compressed ;
};
#line 195 
struct neigh_parms;
#line 201  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_hw_addr {
   struct list_head list ;
   unsigned char addr[32U] ;
   unsigned char type ;
   bool global_use ;
   int sync_cnt ;
   int refcount ;
   int synced ;
   struct callback_head callback_head ;
};
#line 217  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_hw_addr_list {
   struct list_head list ;
   int count ;
};
#line 237  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct hh_cache {
   unsigned int hh_len ;
   seqlock_t hh_lock ;
   unsigned long hh_data[16U] ;
};
#line 263  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct header_ops {
   int (*create)(struct sk_buff *, struct net_device *, unsigned short , void *, void *, unsigned int ) ;
   int (*parse)(struct sk_buff *, unsigned char *) ;
   int (*cache)(struct neighbour *, struct hh_cache *, __be16 ) ;
   void (*cache_update)(struct hh_cache *, struct net_device *, unsigned char *) ;
   bool (*validate)(char *, unsigned int ) ;
   __be16 (*parse_protocol)(struct sk_buff *) ;
};
#line 302  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct gro_list {
   struct list_head list ;
   int count ;
};
#line 316  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct napi_struct {
   struct list_head poll_list ;
   unsigned long state ;
   int weight ;
   unsigned long gro_bitmask ;
   int (*poll)(struct napi_struct *, int ) ;
   int poll_owner ;
   struct net_device *dev ;
   struct gro_list gro_hash[8U] ;
   struct sk_buff *skb ;
   struct list_head rx_list ;
   int rx_count ;
   struct hrtimer timer ;
   struct list_head dev_list ;
   struct hlist_node napi_hash_node ;
   unsigned int napi_id ;
};
#line 362 
enum gro_result {
    GRO_MERGED = 0,
    GRO_MERGED_FREE = 1,
    GRO_HELD = 2,
    GRO_NORMAL = 3,
    GRO_DROP = 4,
    GRO_CONSUMED = 5
};
#line 371  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef enum gro_result gro_result_t;
#line 372 
enum rx_handler_result {
    RX_HANDLER_CONSUMED = 0,
    RX_HANDLER_ANOTHER = 1,
    RX_HANDLER_EXACT = 2,
    RX_HANDLER_PASS = 3
};
#line 379  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef enum rx_handler_result rx_handler_result_t;
#line 421  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
typedef rx_handler_result_t rx_handler_func_t(struct sk_buff **);
#line 589 
struct Qdisc;
#line 589 
struct xdp_umem;
#line 589  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_queue {
   struct net_device *dev ;
   struct Qdisc *qdisc ;
   struct Qdisc *qdisc_sleeping ;
   struct kobject kobj ;
   int numa_node ;
   unsigned long tx_maxrate ;
   unsigned long trans_timeout ;
   struct net_device *sb_dev ;
   struct xdp_umem *umem ;
   spinlock_t _xmit_lock ;
   int xmit_lock_owner ;
   unsigned long trans_start ;
   unsigned long state ;
   struct dql dql ;
} __attribute__((__aligned__(64)));
#line 662  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_map {
   unsigned int len ;
   struct callback_head rcu ;
   u16 cpus[0U] ;
};
#line 674  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_dev_flow {
   u16 cpu ;
   u16 filter ;
   unsigned int last_qtail ;
};
#line 684  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct rps_dev_flow_table {
   unsigned int mask ;
   struct callback_head rcu ;
   struct rps_dev_flow flows[0U] ;
};
#line 736  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_rx_queue {
   struct rps_map *rps_map ;
   struct rps_dev_flow_table *rps_flow_table ;
   struct kobject kobj ;
   struct net_device *dev ;
   struct xdp_rxq_info xdp_rxq ;
   struct xdp_umem *umem ;
} __attribute__((__aligned__(64)));
#line 764  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xps_map {
   unsigned int len ;
   unsigned int alloc_len ;
   struct callback_head rcu ;
   u16 queues[0U] ;
};
#line 777  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xps_dev_maps {
   struct callback_head rcu ;
   struct xps_map *attr_map[0U] ;
};
#line 793  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_tc_txq {
   u16 count ;
   u16 offset ;
};
#line 803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_fcoe_hbainfo {
   char manufacturer[64U] ;
   char serial_number[64U] ;
   char hardware_version[64U] ;
   char driver_version[64U] ;
   char optionrom_version[64U] ;
   char firmware_version[64U] ;
   char model[256U] ;
   char model_description[256U] ;
};
#line 820  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_phys_item_id {
   unsigned char id[32U] ;
   unsigned char id_len ;
};
#line 833 
enum tc_setup_type {
    TC_SETUP_QDISC_MQPRIO = 0,
    TC_SETUP_CLSU32 = 1,
    TC_SETUP_CLSFLOWER = 2,
    TC_SETUP_CLSMATCHALL = 3,
    TC_SETUP_CLSBPF = 4,
    TC_SETUP_BLOCK = 5,
    TC_SETUP_QDISC_CBS = 6,
    TC_SETUP_QDISC_RED = 7,
    TC_SETUP_QDISC_PRIO = 8,
    TC_SETUP_QDISC_MQ = 9,
    TC_SETUP_QDISC_ETF = 10,
    TC_SETUP_ROOT_QDISC = 11,
    TC_SETUP_QDISC_GRED = 12,
    TC_SETUP_QDISC_TAPRIO = 13,
    TC_SETUP_FT = 14
};
#line 851 
enum bpf_netdev_command {
    XDP_SETUP_PROG = 0,
    XDP_SETUP_PROG_HW = 1,
    XDP_QUERY_PROG = 2,
    XDP_QUERY_PROG_HW = 3,
    BPF_OFFLOAD_MAP_ALLOC = 4,
    BPF_OFFLOAD_MAP_FREE = 5,
    XDP_SETUP_XSK_UMEM = 6
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_681 {
   u32 flags ;
   struct bpf_prog *prog ;
   struct netlink_ext_ack *extack ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_682 {
   u32 prog_id ;
   u32 prog_flags ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_683 {
   struct bpf_offloaded_map *offmap ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_xsk_684 {
   struct xdp_umem *umem ;
   u16 queue_id ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
union __anonunion_680 {
   struct __anonstruct_681 __anonCompField___anonunion_680_157 ;
   struct __anonstruct_682 __anonCompField___anonunion_680_158 ;
   struct __anonstruct_683 __anonCompField___anonunion_680_159 ;
   struct __anonstruct_xsk_684 xsk ;
};
#line 879  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_bpf {
   enum bpf_netdev_command command ;
   union __anonunion_680 __anonCompField_netdev_bpf_160 ;
};
#line 911  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct xfrmdev_ops {
   int (*xdo_dev_state_add)(struct xfrm_state *) ;
   void (*xdo_dev_state_delete)(struct xfrm_state *) ;
   void (*xdo_dev_state_free)(struct xfrm_state *) ;
   bool (*xdo_dev_offload_ok)(struct sk_buff *, struct xfrm_state *) ;
   void (*xdo_dev_state_advance_esn)(struct xfrm_state *) ;
};
#line 921  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct dev_ifalias {
   struct callback_head rcuhead ;
   char ifalias[] ;
};
#line 926 
struct tlsdev_ops;
#line 929  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct netdev_name_node {
   struct hlist_node hlist ;
   struct list_head list ;
   struct net_device *dev ;
   char *name ;
};
#line 1257 
struct devlink_port;
#line 1257  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device_ops {
   int (*ndo_init)(struct net_device *) ;
   void (*ndo_uninit)(struct net_device *) ;
   int (*ndo_open)(struct net_device *) ;
   int (*ndo_stop)(struct net_device *) ;
   netdev_tx_t (*ndo_start_xmit)(struct sk_buff *, struct net_device *) ;
   netdev_features_t (*ndo_features_check)(struct sk_buff *, struct net_device *, netdev_features_t ) ;
   u16 (*ndo_select_queue)(struct net_device *, struct sk_buff *, struct net_device *) ;
   void (*ndo_change_rx_flags)(struct net_device *, int ) ;
   void (*ndo_set_rx_mode)(struct net_device *) ;
   int (*ndo_set_mac_address)(struct net_device *, void *) ;
   int (*ndo_validate_addr)(struct net_device *) ;
   int (*ndo_do_ioctl)(struct net_device *, struct ifreq *, int ) ;
   int (*ndo_set_config)(struct net_device *, struct ifmap *) ;
   int (*ndo_change_mtu)(struct net_device *, int ) ;
   int (*ndo_neigh_setup)(struct net_device *, struct neigh_parms *) ;
   void (*ndo_tx_timeout)(struct net_device *) ;
   void (*ndo_get_stats64)(struct net_device *, struct rtnl_link_stats64 *) ;
   bool (*ndo_has_offload_stats)(struct net_device *, int ) ;
   int (*ndo_get_offload_stats)(int , struct net_device *, void *) ;
   struct net_device_stats *(*ndo_get_stats)(struct net_device *) ;
   int (*ndo_vlan_rx_add_vid)(struct net_device *, __be16 , u16 ) ;
   int (*ndo_vlan_rx_kill_vid)(struct net_device *, __be16 , u16 ) ;
   void (*ndo_poll_controller)(struct net_device *) ;
   int (*ndo_netpoll_setup)(struct net_device *, struct netpoll_info *) ;
   void (*ndo_netpoll_cleanup)(struct net_device *) ;
   int (*ndo_set_vf_mac)(struct net_device *, int , u8 *) ;
   int (*ndo_set_vf_vlan)(struct net_device *, int , u16 , u8 , __be16 ) ;
   int (*ndo_set_vf_rate)(struct net_device *, int , int , int ) ;
   int (*ndo_set_vf_spoofchk)(struct net_device *, int , bool ) ;
   int (*ndo_set_vf_trust)(struct net_device *, int , bool ) ;
   int (*ndo_get_vf_config)(struct net_device *, int , struct ifla_vf_info *) ;
   int (*ndo_set_vf_link_state)(struct net_device *, int , int ) ;
   int (*ndo_get_vf_stats)(struct net_device *, int , struct ifla_vf_stats *) ;
   int (*ndo_set_vf_port)(struct net_device *, int , struct nlattr **) ;
   int (*ndo_get_vf_port)(struct net_device *, int , struct sk_buff *) ;
   int (*ndo_get_vf_guid)(struct net_device *, int , struct ifla_vf_guid *, struct ifla_vf_guid *) ;
   int (*ndo_set_vf_guid)(struct net_device *, int , u64 , int ) ;
   int (*ndo_set_vf_rss_query_en)(struct net_device *, int , bool ) ;
   int (*ndo_setup_tc)(struct net_device *, enum tc_setup_type , void *) ;
   int (*ndo_fcoe_enable)(struct net_device *) ;
   int (*ndo_fcoe_disable)(struct net_device *) ;
   int (*ndo_fcoe_ddp_setup)(struct net_device *, u16 , struct scatterlist *, unsigned int ) ;
   int (*ndo_fcoe_ddp_done)(struct net_device *, u16 ) ;
   int (*ndo_fcoe_ddp_target)(struct net_device *, u16 , struct scatterlist *, unsigned int ) ;
   int (*ndo_fcoe_get_hbainfo)(struct net_device *, struct netdev_fcoe_hbainfo *) ;
   int (*ndo_fcoe_get_wwn)(struct net_device *, u64 *, int ) ;
   int (*ndo_rx_flow_steer)(struct net_device *, struct sk_buff *, u16 , u32 ) ;
   int (*ndo_add_slave)(struct net_device *, struct net_device *, struct netlink_ext_ack *) ;
   int (*ndo_del_slave)(struct net_device *, struct net_device *) ;
   netdev_features_t (*ndo_fix_features)(struct net_device *, netdev_features_t ) ;
   int (*ndo_set_features)(struct net_device *, netdev_features_t ) ;
   int (*ndo_neigh_construct)(struct net_device *, struct neighbour *) ;
   void (*ndo_neigh_destroy)(struct net_device *, struct neighbour *) ;
   int (*ndo_fdb_add)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char *, u16 , u16 , struct netlink_ext_ack *) ;
   int (*ndo_fdb_del)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char *, u16 ) ;
   int (*ndo_fdb_dump)(struct sk_buff *, struct netlink_callback *, struct net_device *, struct net_device *, int *) ;
   int (*ndo_fdb_get)(struct sk_buff *, struct nlattr **, struct net_device *, unsigned char *, u16 , u32 , u32 , struct netlink_ext_ack *) ;
   int (*ndo_bridge_setlink)(struct net_device *, struct nlmsghdr *, u16 , struct netlink_ext_ack *) ;
   int (*ndo_bridge_getlink)(struct sk_buff *, u32 , u32 , struct net_device *, u32 , int ) ;
   int (*ndo_bridge_dellink)(struct net_device *, struct nlmsghdr *, u16 ) ;
   int (*ndo_change_carrier)(struct net_device *, bool ) ;
   int (*ndo_get_phys_port_id)(struct net_device *, struct netdev_phys_item_id *) ;
   int (*ndo_get_port_parent_id)(struct net_device *, struct netdev_phys_item_id *) ;
   int (*ndo_get_phys_port_name)(struct net_device *, char *, size_t ) ;
   void (*ndo_udp_tunnel_add)(struct net_device *, struct udp_tunnel_info *) ;
   void (*ndo_udp_tunnel_del)(struct net_device *, struct udp_tunnel_info *) ;
   void *(*ndo_dfwd_add_station)(struct net_device *, struct net_device *) ;
   void (*ndo_dfwd_del_station)(struct net_device *, void *) ;
   int (*ndo_set_tx_maxrate)(struct net_device *, int , u32 ) ;
   int (*ndo_get_iflink)(struct net_device *) ;
   int (*ndo_change_proto_down)(struct net_device *, bool ) ;
   int (*ndo_fill_metadata_dst)(struct net_device *, struct sk_buff *) ;
   void (*ndo_set_rx_headroom)(struct net_device *, int ) ;
   int (*ndo_bpf)(struct net_device *, struct netdev_bpf *) ;
   int (*ndo_xdp_xmit)(struct net_device *, int , struct xdp_frame **, u32 ) ;
   int (*ndo_xsk_wakeup)(struct net_device *, u32 , u32 ) ;
   struct devlink_port *(*ndo_get_devlink_port)(struct net_device *) ;
};
#line 1492 
enum ldv_15273 {
    NETREG_UNINITIALIZED = 0,
    NETREG_REGISTERED = 1,
    NETREG_UNREGISTERING = 2,
    NETREG_UNREGISTERED = 3,
    NETREG_RELEASED = 4,
    NETREG_DUMMY = 5
};
#line 1501 
enum ldv_15274 {
    RTNL_LINK_INITIALIZED = 0,
    RTNL_LINK_INITIALIZING = 1
};
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct __anonstruct_adj_list_685 {
   struct list_head upper ;
   struct list_head lower ;
};
#line 1795 
struct iw_handler_def;
#line 1795 
struct iw_public_data;
#line 1795 
struct l3mdev_ops;
#line 1795 
struct ndisc_ops;
#line 1795 
struct vlan_info;
#line 1795 
struct tipc_bearer;
#line 1795 
struct in_device;
#line 1795 
struct dn_dev;
#line 1795 
struct inet6_dev;
#line 1795 
struct mini_Qdisc;
#line 1795 
struct cpu_rmap;
#line 1795 
struct pcpu_lstats;
#line 1795 
struct pcpu_sw_netstats;
#line 1795 
struct pcpu_dstats;
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
union __anonunion_686 {
   void *ml_priv ;
   struct pcpu_lstats *lstats ;
   struct pcpu_sw_netstats *tstats ;
   struct pcpu_dstats *dstats ;
};
#line 1795 
struct garp_port;
#line 1795 
struct mrp_port;
#line 1795 
struct rtnl_link_ops;
#line 1795  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct net_device {
   char name[16U] ;
   struct netdev_name_node *name_node ;
   struct dev_ifalias *ifalias ;
   unsigned long mem_end ;
   unsigned long mem_start ;
   unsigned long base_addr ;
   int irq ;
   unsigned long state ;
   struct list_head dev_list ;
   struct list_head napi_list ;
   struct list_head unreg_list ;
   struct list_head close_list ;
   struct list_head ptype_all ;
   struct list_head ptype_specific ;
   struct __anonstruct_adj_list_685 adj_list ;
   netdev_features_t features ;
   netdev_features_t hw_features ;
   netdev_features_t wanted_features ;
   netdev_features_t vlan_features ;
   netdev_features_t hw_enc_features ;
   netdev_features_t mpls_features ;
   netdev_features_t gso_partial_features ;
   int ifindex ;
   int group ;
   struct net_device_stats stats ;
   atomic_long_t rx_dropped ;
   atomic_long_t tx_dropped ;
   atomic_long_t rx_nohandler ;
   atomic_t carrier_up_count ;
   atomic_t carrier_down_count ;
   struct iw_handler_def *wireless_handlers ;
   struct iw_public_data *wireless_data ;
   struct net_device_ops *netdev_ops ;
   struct ethtool_ops *ethtool_ops ;
   struct l3mdev_ops *l3mdev_ops ;
   struct ndisc_ops *ndisc_ops ;
   struct xfrmdev_ops *xfrmdev_ops ;
   struct tlsdev_ops *tlsdev_ops ;
   struct header_ops *header_ops ;
   unsigned int flags ;
   unsigned int priv_flags ;
   unsigned short gflags ;
   unsigned short padded ;
   unsigned char operstate ;
   unsigned char link_mode ;
   unsigned char if_port ;
   unsigned char dma ;
   unsigned int mtu ;
   unsigned int min_mtu ;
   unsigned int max_mtu ;
   unsigned short type ;
   unsigned short hard_header_len ;
   unsigned char min_header_len ;
   unsigned short needed_headroom ;
   unsigned short needed_tailroom ;
   unsigned char perm_addr[32U] ;
   unsigned char addr_assign_type ;
   unsigned char addr_len ;
   unsigned char upper_level ;
   unsigned char lower_level ;
   unsigned short neigh_priv_len ;
   unsigned short dev_id ;
   unsigned short dev_port ;
   spinlock_t addr_list_lock ;
   unsigned char name_assign_type ;
   bool uc_promisc ;
   struct netdev_hw_addr_list uc ;
   struct netdev_hw_addr_list mc ;
   struct netdev_hw_addr_list dev_addrs ;
   struct kset *queues_kset ;
   unsigned int promiscuity ;
   unsigned int allmulti ;
   struct vlan_info *vlan_info ;
   struct dsa_port *dsa_ptr ;
   struct tipc_bearer *tipc_ptr ;
   void *atalk_ptr ;
   struct in_device *ip_ptr ;
   struct dn_dev *dn_ptr ;
   struct inet6_dev *ip6_ptr ;
   void *ax25_ptr ;
   struct wireless_dev *ieee80211_ptr ;
   struct wpan_dev *ieee802154_ptr ;
   struct mpls_dev *mpls_ptr ;
   unsigned char *dev_addr ;
   struct netdev_rx_queue *_rx ;
   unsigned int num_rx_queues ;
   unsigned int real_num_rx_queues ;
   struct bpf_prog *xdp_prog ;
   unsigned long gro_flush_timeout ;
   rx_handler_func_t *rx_handler ;
   void *rx_handler_data ;
   struct mini_Qdisc *miniq_ingress ;
   struct netdev_queue *ingress_queue ;
   struct nf_hook_entries *nf_hooks_ingress ;
   unsigned char broadcast[32U] ;
   struct cpu_rmap *rx_cpu_rmap ;
   struct hlist_node index_hlist ;
   struct netdev_queue *_tx ;
   unsigned int num_tx_queues ;
   unsigned int real_num_tx_queues ;
   struct Qdisc *qdisc ;
   struct hlist_head qdisc_hash[16U] ;
   unsigned int tx_queue_len ;
   spinlock_t tx_global_lock ;
   int watchdog_timeo ;
   struct xps_dev_maps *xps_cpus_map ;
   struct xps_dev_maps *xps_rxqs_map ;
   struct mini_Qdisc *miniq_egress ;
   struct timer_list watchdog_timer ;
   int *pcpu_refcnt ;
   struct list_head todo_list ;
   struct list_head link_watch_list ;
   enum ldv_15273 reg_state : 8 ;
   bool dismantle ;
   enum ldv_15274 rtnl_link_state : 16 ;
   bool needs_free_netdev ;
   void (*priv_destructor)(struct net_device *) ;
   struct netpoll_info *npinfo ;
   possible_net_t nd_net ;
   union __anonunion_686 __anonCompField_net_device_161 ;
   struct garp_port *garp_port ;
   struct mrp_port *mrp_port ;
   struct device dev ;
   struct attribute_group *sysfs_groups[4U] ;
   struct attribute_group *sysfs_rx_queue_group ;
   struct rtnl_link_ops *rtnl_link_ops ;
   unsigned int gso_max_size ;
   u16 gso_max_segs ;
   struct dcbnl_rtnl_ops *dcbnl_ops ;
   s16 num_tc ;
   struct netdev_tc_txq tc_to_txq[16U] ;
   u8 prio_tc_map[16U] ;
   unsigned int fcoe_ddp_xid ;
   struct netprio_map *priomap ;
   struct phy_device *phydev ;
   struct sfp_bus *sfp_bus ;
   struct lock_class_key qdisc_tx_busylock_key ;
   struct lock_class_key qdisc_running_key ;
   struct lock_class_key qdisc_xmit_lock_key ;
   struct lock_class_key addr_list_lock_key ;
   bool proto_down ;
   unsigned int wol_enabled : 1 ;
};
#line 2400  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct pcpu_sw_netstats {
   u64 rx_packets ;
   u64 rx_bytes ;
   u64 tx_packets ;
   u64 tx_bytes ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(32)));
#line 2408  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
struct pcpu_lstats {
   u64_stats_t packets ;
   u64_stats_t bytes ;
   struct u64_stats_sync syncp ;
} __attribute__((__aligned__(16)));
#line 3610 
enum skb_free_reason {
    SKB_REASON_CONSUMED = 0,
    SKB_REASON_DROPPED = 1
};
#line 46  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
struct vlan_ethhdr {
   unsigned char h_dest[6U] ;
   unsigned char h_source[6U] ;
   __be16 h_vlan_proto ;
   __be16 h_vlan_TCI ;
   __be16 h_vlan_encapsulated_proto ;
};
#line 342  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
struct ring_desc {
   __le32 buf ;
   __le32 flaglen ;
};
#line 347  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
struct ring_desc_ex {
   __le32 bufhigh ;
   __le32 buflow ;
   __le32 txvlan ;
   __le32 flaglen ;
};
#line 354  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
union ring_type {
   struct ring_desc *orig ;
   struct ring_desc_ex *ex ;
};
#line 593  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
struct nv_ethtool_str {
   char name[32U] ;
};
#line 637  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
struct nv_ethtool_stats {
   u64 tx_bytes ;
   u64 tx_zero_rexmt ;
   u64 tx_one_rexmt ;
   u64 tx_many_rexmt ;
   u64 tx_late_collision ;
   u64 tx_fifo_errors ;
   u64 tx_carrier_errors ;
   u64 tx_excess_deferral ;
   u64 tx_retry_error ;
   u64 rx_frame_error ;
   u64 rx_extra_byte ;
   u64 rx_late_collision ;
   u64 rx_runt ;
   u64 rx_frame_too_long ;
   u64 rx_over_errors ;
   u64 rx_crc_errors ;
   u64 rx_frame_align_error ;
   u64 rx_length_error ;
   u64 rx_unicast ;
   u64 rx_multicast ;
   u64 rx_broadcast ;
   u64 rx_packets ;
   u64 rx_errors_total ;
   u64 tx_errors_total ;
   u64 tx_deferral ;
   u64 tx_packets ;
   u64 rx_bytes ;
   u64 tx_pause ;
   u64 rx_pause ;
   u64 rx_drop_frame ;
   u64 tx_unicast ;
   u64 tx_multicast ;
   u64 tx_broadcast ;
};
#line 692  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
struct register_test {
   __u32 reg ;
   __u32 mask ;
};
#line 707  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
struct nv_skb_map {
   struct sk_buff *skb ;
   dma_addr_t dma ;
   unsigned int dma_len : 31 ;
   unsigned int dma_single : 1 ;
   struct ring_desc_ex *first_tx_desc ;
   struct nv_skb_map *next_tx_ctx ;
};
#line 716  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
struct nv_txrx_stats {
   u64 stat_rx_packets ;
   u64 stat_rx_bytes ;
   u64 stat_rx_missed_errors ;
   u64 stat_rx_dropped ;
   u64 stat_tx_packets ;
   u64 stat_tx_bytes ;
   u64 stat_tx_dropped ;
};
#line 753  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
struct fe_priv {
   spinlock_t lock ;
   struct net_device *dev ;
   struct napi_struct napi ;
   spinlock_t hwstats_lock ;
   struct nv_ethtool_stats estats ;
   int in_shutdown ;
   u32 linkspeed ;
   int duplex ;
   int autoneg ;
   int fixed_mode ;
   int phyaddr ;
   int wolenabled ;
   unsigned int phy_oui ;
   unsigned int phy_model ;
   unsigned int phy_rev ;
   u16 gigabit ;
   int intr_test ;
   int recover_error ;
   int quiet_count ;
   dma_addr_t ring_addr ;
   struct pci_dev *pci_dev ;
   u32 orig_mac[2U] ;
   u32 events ;
   u32 irqmask ;
   u32 desc_ver ;
   u32 txrxctl_bits ;
   u32 vlanctl_bits ;
   u32 driver_data ;
   u32 device_id ;
   u32 register_size ;
   u32 mac_in_use ;
   int mgmt_version ;
   int mgmt_sema ;
   void *base ;
   union ring_type get_rx ;
   union ring_type put_rx ;
   union ring_type last_rx ;
   struct nv_skb_map *get_rx_ctx ;
   struct nv_skb_map *put_rx_ctx ;
   struct nv_skb_map *last_rx_ctx ;
   struct nv_skb_map *rx_skb ;
   union ring_type rx_ring ;
   unsigned int rx_buf_sz ;
   unsigned int pkt_limit ;
   struct timer_list oom_kick ;
   struct timer_list nic_poll ;
   struct timer_list stats_poll ;
   u32 nic_poll_irq ;
   int rx_ring_size ;
   struct u64_stats_sync swstats_rx_syncp ;
   struct nv_txrx_stats *txrx_stats ;
   int need_linktimer ;
   unsigned long link_timeout ;
   union ring_type get_tx ;
   union ring_type put_tx ;
   union ring_type last_tx ;
   struct nv_skb_map *get_tx_ctx ;
   struct nv_skb_map *put_tx_ctx ;
   struct nv_skb_map *last_tx_ctx ;
   struct nv_skb_map *tx_skb ;
   union ring_type tx_ring ;
   u32 tx_flags ;
   int tx_ring_size ;
   int tx_limit ;
   u32 tx_pkts_in_progress ;
   struct nv_skb_map *tx_change_owner ;
   struct nv_skb_map *tx_end_flip ;
   int tx_stop ;
   struct u64_stats_sync swstats_tx_syncp ;
   u32 msi_flags ;
   struct msix_entry msi_x_entry[8U] ;
   u32 pause_flags ;
   u32 saved_config_space[385U] ;
   char name_rx[19U] ;
   char name_tx[19U] ;
   char name_other[22U] ;
};
#line 1208  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
struct __anonstruct_ri_705 {
   int reg ;
   int init ;
};
#line 942  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/0/concurrency safety/weaver/forcedeth.i.aux"
typedef int ldv_func_ret_type;
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 197 
enum hrtimer_restart;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
struct device_private {
   void *driver_data ;
};
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/firmware.h"
struct firmware {
   size_t size ;
   u8 *data ;
   struct page **pages ;
   void *priv ;
};
#line 164  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/types.h"
typedef unsigned long irq_hw_number_t;
#line 303  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ioport.h"
struct irq_data;
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 244  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/idr.h"
struct ida {
   struct xarray xa ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/property.h"
typedef u32 phandle;
#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/of.h"
struct property {
   char *name ;
   int length ;
   void *value ;
   struct property *next ;
   unsigned long _flags ;
   struct bin_attribute attr ;
};
#line 51  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/of.h"
struct device_node {
   char *name ;
   phandle phandle ;
   char *full_name ;
   struct fwnode_handle fwnode ;
   struct property *properties ;
   struct property *deadprops ;
   struct device_node *parent ;
   struct device_node *child ;
   struct device_node *sibling ;
   struct kobject kobj ;
   unsigned long _flags ;
   void *data ;
};
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_fwspec {
   struct fwnode_handle *fwnode ;
   int param_count ;
   u32 param[16U] ;
};
#line 68 
enum irq_domain_bus_token {
    DOMAIN_BUS_ANY = 0,
    DOMAIN_BUS_WIRED = 1,
    DOMAIN_BUS_GENERIC_MSI = 2,
    DOMAIN_BUS_PCI_MSI = 3,
    DOMAIN_BUS_PLATFORM_MSI = 4,
    DOMAIN_BUS_NEXUS = 5,
    DOMAIN_BUS_IPI = 6,
    DOMAIN_BUS_FSL_MC_MSI = 7,
    DOMAIN_BUS_TI_SCI_INTA_MSI = 8,
    DOMAIN_BUS_WAKEUP = 9
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_domain_ops {
   int (*match)(struct irq_domain *, struct device_node *, enum irq_domain_bus_token ) ;
   int (*select)(struct irq_domain *, struct irq_fwspec *, enum irq_domain_bus_token ) ;
   int (*map)(struct irq_domain *, unsigned int , irq_hw_number_t ) ;
   void (*unmap)(struct irq_domain *, unsigned int ) ;
   int (*xlate)(struct irq_domain *, struct device_node *, u32 *, unsigned int , unsigned long *, unsigned int *) ;
   int (*alloc)(struct irq_domain *, unsigned int , unsigned int , void *) ;
   void (*free)(struct irq_domain *, unsigned int , unsigned int ) ;
   int (*activate)(struct irq_domain *, struct irq_data *, bool ) ;
   void (*deactivate)(struct irq_domain *, struct irq_data *) ;
   int (*translate)(struct irq_domain *, struct irq_fwspec *, unsigned long *, unsigned int *) ;
   void (*debug_show)(struct seq_file *, struct irq_domain *, struct irq_data *, int ) ;
};
#line 132 
struct irq_domain_chip_generic;
#line 161  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqdomain.h"
struct irq_domain {
   struct list_head link ;
   char *name ;
   struct irq_domain_ops *ops ;
   void *host_data ;
   unsigned int flags ;
   unsigned int mapcount ;
   struct fwnode_handle *fwnode ;
   enum irq_domain_bus_token bus_token ;
   struct irq_domain_chip_generic *gc ;
   struct irq_domain *parent ;
   struct dentry *debugfs_file ;
   irq_hw_number_t hwirq_max ;
   unsigned int revmap_direct_max_irq ;
   unsigned int revmap_size ;
   struct xarray revmap_tree ;
   struct mutex revmap_tree_mutex ;
   unsigned int linear_revmap[] ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/rtmutex.h"
struct rt_mutex {
   raw_spinlock_t wait_lock ;
   struct rb_root_cached waiters ;
   struct task_struct *owner ;
   int save_state ;
   char *name ;
   char *file ;
   int line ;
   void *magic ;
   struct lockdep_map dep_map ;
};
#line 69  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/i2c.h"
struct i2c_msg {
   __u16 addr ;
   __u16 flags ;
   __u16 len ;
   __u8 *buf ;
};
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/i2c.h"
union i2c_smbus_data {
   __u8 byte ;
   __u16 word ;
   __u8 block[34U] ;
};
#line 27  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_algorithm;
#line 28 
struct i2c_adapter;
#line 29 
struct i2c_client;
#line 33 
enum i2c_slave_event;
#line 33 
enum i2c_slave_event;
#line 314  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_client {
   unsigned short flags ;
   unsigned short addr ;
   char name[20U] ;
   struct i2c_adapter *adapter ;
   struct device dev ;
   int init_irq ;
   int irq ;
   struct list_head detected ;
   int (*slave_cb)(struct i2c_client *, enum i2c_slave_event , u8 *) ;
};
#line 360 
enum i2c_slave_event {
    I2C_SLAVE_READ_REQUESTED = 0,
    I2C_SLAVE_WRITE_REQUESTED = 1,
    I2C_SLAVE_READ_PROCESSED = 2,
    I2C_SLAVE_WRITE_RECEIVED = 3,
    I2C_SLAVE_STOP = 4
};
#line 527  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_algorithm {
   int (*master_xfer)(struct i2c_adapter *, struct i2c_msg *, int ) ;
   int (*master_xfer_atomic)(struct i2c_adapter *, struct i2c_msg *, int ) ;
   int (*smbus_xfer)(struct i2c_adapter *, u16 , unsigned short , char , u8 , int , union i2c_smbus_data *) ;
   int (*smbus_xfer_atomic)(struct i2c_adapter *, u16 , unsigned short , char , u8 , int , union i2c_smbus_data *) ;
   u32 (*functionality)(struct i2c_adapter *) ;
   int (*reg_slave)(struct i2c_client *) ;
   int (*unreg_slave)(struct i2c_client *) ;
};
#line 565  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_lock_operations {
   void (*lock_bus)(struct i2c_adapter *, unsigned int ) ;
   int (*trylock_bus)(struct i2c_adapter *, unsigned int ) ;
   void (*unlock_bus)(struct i2c_adapter *, unsigned int ) ;
};
#line 618 
struct gpio_desc;
#line 618  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_bus_recovery_info {
   int (*recover_bus)(struct i2c_adapter *) ;
   int (*get_scl)(struct i2c_adapter *) ;
   void (*set_scl)(struct i2c_adapter *, int ) ;
   int (*get_sda)(struct i2c_adapter *) ;
   void (*set_sda)(struct i2c_adapter *, int ) ;
   int (*get_bus_free)(struct i2c_adapter *) ;
   void (*prepare_recovery)(struct i2c_adapter *) ;
   void (*unprepare_recovery)(struct i2c_adapter *) ;
   struct gpio_desc *scl_gpiod ;
   struct gpio_desc *sda_gpiod ;
};
#line 661  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_adapter_quirks {
   u64 flags ;
   int max_num_msgs ;
   u16 max_write_len ;
   u16 max_read_len ;
   u16 max_comb_1st_msg_len ;
   u16 max_comb_2nd_msg_len ;
};
#line 692  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/i2c.h"
struct i2c_adapter {
   struct module *owner ;
   unsigned int class ;
   struct i2c_algorithm *algo ;
   void *algo_data ;
   struct i2c_lock_operations *lock_ops ;
   struct rt_mutex bus_lock ;
   struct rt_mutex mux_lock ;
   int timeout ;
   int retries ;
   struct device dev ;
   unsigned long locked_flags ;
   int nr ;
   char name[48U] ;
   struct completion dev_released ;
   struct mutex userspace_clients_lock ;
   struct list_head userspace_clients ;
   struct i2c_bus_recovery_info *bus_recovery_info ;
   struct i2c_adapter_quirks *quirks ;
   struct irq_domain *host_notify_domain ;
};
#line 36  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/asm-generic/poll.h"
struct pollfd {
   int fd ;
   short events ;
   short revents ;
};
#line 43  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/poll.h"
struct poll_table_struct {
   void (*_qproc)(struct file *, wait_queue_head_t *, struct poll_table_struct *) ;
   __poll_t _key ;
};
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cdev.h"
struct cdev {
   struct kobject kobj ;
   struct module *owner ;
   struct file_operations *ops ;
   struct list_head list ;
   dev_t dev ;
   unsigned int count ;
} __attribute__((__designated_init__));
#line 87  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-common.h"
struct v4l2_edid {
   __u32 pad ;
   __u32 start_block ;
   __u32 blocks ;
   __u32 reserved[5U] ;
   __u8 *edid ;
};
#line 754 
enum v4l2_priority {
    V4L2_PRIORITY_UNSET = 0,
    V4L2_PRIORITY_BACKGROUND = 1,
    V4L2_PRIORITY_INTERACTIVE = 2,
    V4L2_PRIORITY_RECORD = 3,
    V4L2_PRIORITY_DEFAULT = 2
};
#line 413  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_rect {
   __s32 left ;
   __s32 top ;
   __u32 width ;
   __u32 height ;
};
#line 420  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_fract {
   __u32 numerator ;
   __u32 denominator ;
};
#line 1212  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
typedef __u64 v4l2_std_id;
#line 1394  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_bt_timings {
   __u32 width ;
   __u32 height ;
   __u32 interlaced ;
   __u32 polarities ;
   __u64 pixelclock ;
   __u32 hfrontporch ;
   __u32 hsync ;
   __u32 hbackporch ;
   __u32 vfrontporch ;
   __u32 vsync ;
   __u32 vbackporch ;
   __u32 il_vfrontporch ;
   __u32 il_vsync ;
   __u32 il_vbackporch ;
   __u32 standards ;
   __u32 flags ;
   struct v4l2_fract picture_aspect ;
   __u8 cea861_vic ;
   __u8 hdmi_vic ;
   __u8 reserved[46U] ;
} __attribute__((__packed__));
#line 1517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_2484 {
   struct v4l2_bt_timings bt ;
   __u32 reserved[32U] ;
};
#line 1517  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dv_timings {
   __u32 type ;
   union __anonunion_2484 __anonCompField_v4l2_dv_timings_77 ;
} __attribute__((__packed__));
#line 1536  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_enum_dv_timings {
   __u32 index ;
   __u32 pad ;
   __u32 reserved[2U] ;
   struct v4l2_dv_timings timings ;
};
#line 1554  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_bt_timings_cap {
   __u32 min_width ;
   __u32 max_width ;
   __u32 min_height ;
   __u32 max_height ;
   __u64 min_pixelclock ;
   __u64 max_pixelclock ;
   __u32 standards ;
   __u32 capabilities ;
   __u32 reserved[16U] ;
} __attribute__((__packed__));
#line 1581  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_2485 {
   struct v4l2_bt_timings_cap bt ;
   __u32 raw_data[32U] ;
};
#line 1581  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dv_timings_cap {
   __u32 type ;
   __u32 pad ;
   __u32 reserved[2U] ;
   union __anonunion_2485 __anonCompField_v4l2_dv_timings_cap_78 ;
};
#line 1803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_tuner {
   __u32 index ;
   __u8 name[32U] ;
   __u32 type ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 rxsubchans ;
   __u32 audmode ;
   __s32 signal ;
   __s32 afc ;
   __u32 reserved[4U] ;
};
#line 1817  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_modulator {
   __u32 index ;
   __u8 name[32U] ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 txsubchans ;
   __u32 type ;
   __u32 reserved[3U] ;
};
#line 1860  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_frequency {
   __u32 tuner ;
   __u32 type ;
   __u32 frequency ;
   __u32 reserved[8U] ;
};
#line 1871  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_frequency_band {
   __u32 tuner ;
   __u32 type ;
   __u32 index ;
   __u32 capability ;
   __u32 rangelow ;
   __u32 rangehigh ;
   __u32 modulation ;
   __u32 reserved[9U] ;
};
#line 2043  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_vbi_format {
   __u32 sampling_rate ;
   __u32 offset ;
   __u32 samples_per_line ;
   __u32 sample_format ;
   __s32 start[2U] ;
   __u32 count[2U] ;
   __u32 flags ;
   __u32 reserved[2U] ;
};
#line 2071  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_format {
   __u16 service_set ;
   __u16 service_lines[2U][24U] ;
   __u32 io_size ;
   __u32 reserved[2U] ;
};
#line 2095  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_cap {
   __u16 service_set ;
   __u16 service_lines[2U][24U] ;
   __u32 type ;
   __u32 reserved[3U] ;
};
#line 2106  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_sliced_vbi_data {
   __u32 id ;
   __u32 field ;
   __u32 line ;
   __u32 reserved ;
   __u8 data[48U] ;
};
#line 2350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_event_subscription {
   __u32 type ;
   __u32 id ;
   __u32 flags ;
   __u32 reserved[5U] ;
};
#line 2375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
union __anonunion_2501 {
   __u32 addr ;
   char name[32U] ;
};
#line 2375  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dbg_match {
   __u32 type ;
   union __anonunion_2501 __anonCompField_v4l2_dbg_match_87 ;
} __attribute__((__packed__));
#line 2383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/videodev2.h"
struct v4l2_dbg_register {
   struct v4l2_dbg_match match ;
   __u32 size ;
   __u64 reg ;
   __u64 val ;
} __attribute__((__packed__));
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_device;
#line 57  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_gobj {
   struct media_device *mdev ;
   u32 id ;
   struct list_head list ;
};
#line 72  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity_enum {
   unsigned long *bmap ;
   int idx_max ;
};
#line 88 
struct media_entity;
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct __anonstruct_stack_2505 {
   struct media_entity *entity ;
   struct list_head *link ;
};
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_graph {
   struct __anonstruct_stack_2505 stack[16U] ;
   struct media_entity_enum ent_enum ;
   int top ;
};
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_pipeline {
   int streaming_count ;
   struct media_graph graph ;
};
#line 132 
struct media_pad;
#line 132 
struct media_interface;
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_2506 {
   struct media_gobj *gobj0 ;
   struct media_pad *source ;
   struct media_interface *intf ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_2507 {
   struct media_gobj *gobj1 ;
   struct media_pad *sink ;
   struct media_entity *entity ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_link {
   struct media_gobj graph_obj ;
   struct list_head list ;
   union __anonunion_2506 __anonCompField_media_link_90 ;
   union __anonunion_2507 __anonCompField_media_link_91 ;
   struct media_link *reverse ;
   unsigned long flags ;
   bool is_backlink ;
};
#line 149 
enum media_pad_signal_type {
    PAD_SIGNAL_DEFAULT = 0,
    PAD_SIGNAL_ANALOG = 1,
    PAD_SIGNAL_DV = 2,
    PAD_SIGNAL_AUDIO = 3
};
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_pad {
   struct media_gobj graph_obj ;
   struct media_entity *entity ;
   u16 index ;
   enum media_pad_signal_type sig_type ;
   unsigned long flags ;
};
#line 214  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity_operations {
   int (*get_fwnode_pad)(struct fwnode_endpoint *) ;
   int (*link_setup)(struct media_entity *, struct media_pad *, struct media_pad *, u32 ) ;
   int (*link_validate)(struct media_link *) ;
};
#line 221 
enum media_entity_type {
    MEDIA_ENTITY_TYPE_BASE = 0,
    MEDIA_ENTITY_TYPE_VIDEO_DEVICE = 1,
    MEDIA_ENTITY_TYPE_V4L2_SUBDEV = 2
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct __anonstruct_dev_2509 {
   u32 major ;
   u32 minor ;
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
union __anonunion_info_2508 {
   struct __anonstruct_dev_2509 dev ;
};
#line 289  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_entity {
   struct media_gobj graph_obj ;
   char *name ;
   enum media_entity_type obj_type ;
   u32 function ;
   unsigned long flags ;
   u16 num_pads ;
   u16 num_links ;
   u16 num_backlinks ;
   int internal_idx ;
   struct media_pad *pads ;
   struct list_head links ;
   struct media_entity_operations *ops ;
   int stream_count ;
   int use_count ;
   struct media_pipeline *pipe ;
   union __anonunion_info_2508 info ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_interface {
   struct media_gobj graph_obj ;
   struct list_head links ;
   u32 type ;
   u32 flags ;
};
#line 349  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-entity.h"
struct media_intf_devnode {
   struct media_interface intf ;
   u32 major ;
   u32 minor ;
};
#line 1087 
enum vfl_devnode_type {
    VFL_TYPE_GRABBER = 0,
    VFL_TYPE_VBI = 1,
    VFL_TYPE_RADIO = 2,
    VFL_TYPE_SUBDEV = 3,
    VFL_TYPE_SDR = 4,
    VFL_TYPE_TOUCH = 5,
    VFL_TYPE_MAX = 6
};
#line 1097 
enum vfl_devnode_direction {
    VFL_DIR_RX = 0,
    VFL_DIR_TX = 1,
    VFL_DIR_M2M = 2
};
#line 1104 
struct video_device;
#line 1105 
struct v4l2_device;
#line 1106 
struct v4l2_ctrl_handler;
#line 104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct v4l2_prio_state {
   atomic_t prios[4U] ;
};
#line 193  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct v4l2_file_operations {
   struct module *owner ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*unlocked_ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl32)(struct file *, unsigned int , unsigned long ) ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   int (*mmap)(struct file *, struct vm_area_struct *) ;
   int (*open)(struct file *) ;
   int (*release)(struct file *) ;
};
#line 256 
struct vb2_queue;
#line 256 
struct v4l2_ioctl_ops;
#line 256  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-dev.h"
struct video_device {
   struct media_entity entity ;
   struct media_intf_devnode *intf_devnode ;
   struct media_pipeline pipe ;
   struct v4l2_file_operations *fops ;
   u32 device_caps ;
   struct device dev ;
   struct cdev *cdev ;
   struct v4l2_device *v4l2_dev ;
   struct device *dev_parent ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   struct vb2_queue *queue ;
   struct v4l2_prio_state *prio ;
   char name[32U] ;
   enum vfl_devnode_type vfl_type ;
   enum vfl_devnode_direction vfl_dir ;
   int minor ;
   u16 num ;
   unsigned long flags ;
   int index ;
   spinlock_t fh_lock ;
   struct list_head fh_list ;
   int dev_debug ;
   v4l2_std_id tvnorms ;
   void (*release)(struct video_device *) ;
   struct v4l2_ioctl_ops *ioctl_ops ;
   unsigned long valid_ioctls[3U] ;
   struct mutex *lock ;
};
#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-common.h"
struct v4l2_subdev;
#line 96 
struct v4l2_subdev_ops;
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-common.h"
struct v4l2_priv_tun_config {
   int tuner ;
   void *priv ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-devnode.h"
struct media_file_operations {
   struct module *owner ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char *, size_t , loff_t *) ;
   __poll_t (*poll)(struct file *, struct poll_table_struct *) ;
   long (*ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl)(struct file *, unsigned int , unsigned long ) ;
   int (*open)(struct file *) ;
   int (*release)(struct file *) ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-devnode.h"
struct media_devnode {
   struct media_device *media_dev ;
   struct media_file_operations *fops ;
   struct device dev ;
   struct cdev cdev ;
   struct device *parent ;
   int minor ;
   unsigned long flags ;
   void (*release)(struct media_devnode *) ;
};
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_request;
#line 65  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_device_ops {
   int (*link_notify)(struct media_link *, u32 , unsigned int ) ;
   struct media_request *(*req_alloc)(struct media_device *) ;
   void (*req_free)(struct media_request *) ;
   int (*req_validate)(struct media_request *) ;
   void (*req_queue)(struct media_request *) ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/media-device.h"
struct media_device {
   struct device *dev ;
   struct media_devnode *devnode ;
   char model[32U] ;
   char driver_name[32U] ;
   char serial[40U] ;
   char bus_info[32U] ;
   u32 hw_revision ;
   u64 topology_version ;
   u32 id ;
   struct ida entity_internal_idx ;
   int entity_internal_idx_max ;
   struct list_head entities ;
   struct list_head interfaces ;
   struct list_head pads ;
   struct list_head links ;
   struct list_head entity_notify ;
   struct mutex graph_mutex ;
   struct media_graph pm_count_walk ;
   void *source_priv ;
   int (*enable_source)(struct media_entity *, struct media_pipeline *) ;
   void (*disable_source)(struct media_entity *) ;
   struct media_device_ops *ops ;
   struct mutex req_queue_mutex ;
   atomic_t request_id ;
};
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-mediabus.h"
struct v4l2_mbus_framefmt {
   __u32 width ;
   __u32 height ;
   __u32 code ;
   __u32 field ;
   __u32 colorspace ;
   __u16 ycbcr_enc ;
   __u16 quantization ;
   __u16 xfer_func ;
   __u16 reserved[11U] ;
};
#line 48  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_format {
   __u32 which ;
   __u32 pad ;
   struct v4l2_mbus_framefmt format ;
   __u32 reserved[8U] ;
};
#line 75  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_mbus_code_enum {
   __u32 pad ;
   __u32 index ;
   __u32 code ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_size_enum {
   __u32 index ;
   __u32 pad ;
   __u32 code ;
   __u32 min_width ;
   __u32 max_width ;
   __u32 min_height ;
   __u32 max_height ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_interval {
   __u32 pad ;
   struct v4l2_fract interval ;
   __u32 reserved[9U] ;
};
#line 123  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_frame_interval_enum {
   __u32 index ;
   __u32 pad ;
   __u32 code ;
   __u32 width ;
   __u32 height ;
   struct v4l2_fract interval ;
   __u32 which ;
   __u32 reserved[8U] ;
};
#line 149  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/v4l2-subdev.h"
struct v4l2_subdev_selection {
   __u32 which ;
   __u32 pad ;
   __u32 target ;
   __u32 flags ;
   struct v4l2_rect r ;
   __u32 reserved[8U] ;
};
#line 157 
struct v4l2_async_notifier;
#line 158 
enum v4l2_async_match_type {
    V4L2_ASYNC_MATCH_CUSTOM = 0,
    V4L2_ASYNC_MATCH_DEVNAME = 1,
    V4L2_ASYNC_MATCH_I2C = 2,
    V4L2_ASYNC_MATCH_FWNODE = 3
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct __anonstruct_i2c_2523 {
   int adapter_id ;
   unsigned short address ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct __anonstruct_custom_2524 {
   bool (*match)(struct device *, struct v4l2_async_subdev *) ;
   void *priv ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
union __anonunion_match_2522 {
   struct fwnode_handle *fwnode ;
   char *device_name ;
   struct __anonstruct_i2c_2523 i2c ;
   struct __anonstruct_custom_2524 custom ;
};
#line 79  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_subdev {
   enum v4l2_async_match_type match_type ;
   union __anonunion_match_2522 match ;
   struct list_head list ;
   struct list_head asd_list ;
};
#line 107  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_notifier_operations {
   int (*bound)(struct v4l2_async_notifier *, struct v4l2_subdev *, struct v4l2_async_subdev *) ;
   int (*complete)(struct v4l2_async_notifier *) ;
   void (*unbind)(struct v4l2_async_notifier *, struct v4l2_subdev *, struct v4l2_async_subdev *) ;
};
#line 129  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-async.h"
struct v4l2_async_notifier {
   struct v4l2_async_notifier_operations *ops ;
   struct v4l2_device *v4l2_dev ;
   struct v4l2_subdev *sd ;
   struct v4l2_async_notifier *parent ;
   struct list_head asd_list ;
   struct list_head waiting ;
   struct list_head done ;
   struct list_head list ;
};
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-fh.h"
struct v4l2_m2m_ctx;
#line 42  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-fh.h"
struct v4l2_fh {
   struct list_head list ;
   struct video_device *vdev ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   enum v4l2_priority prio ;
   wait_queue_head_t wait ;
   struct mutex subscribe_lock ;
   struct list_head subscribed ;
   struct list_head available ;
   unsigned int navailable ;
   u32 sequence ;
   struct v4l2_m2m_ctx *m2m_ctx ;
};
#line 162 
enum v4l2_mbus_type {
    V4L2_MBUS_UNKNOWN = 0,
    V4L2_MBUS_PARALLEL = 1,
    V4L2_MBUS_BT656 = 2,
    V4L2_MBUS_CSI1 = 3,
    V4L2_MBUS_CCP2 = 4,
    V4L2_MBUS_CSI2_DPHY = 5,
    V4L2_MBUS_CSI2_CPHY = 6
};
#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-mediabus.h"
struct v4l2_mbus_config {
   enum v4l2_mbus_type type ;
   unsigned int flags ;
};
#line 184 
struct v4l2_subdev_fh;
#line 185 
struct tuner_setup;
#line 186 
struct v4l2_mbus_frame_desc;
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_decode_vbi_line {
   u32 is_second_field ;
   u8 *p ;
   u32 line ;
   u32 type ;
};
#line 132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_io_pin_config {
   u32 flags ;
   u8 pin ;
   u8 function ;
   u8 value ;
   u8 strength ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_core_ops {
   int (*log_status)(struct v4l2_subdev *) ;
   int (*s_io_pin_config)(struct v4l2_subdev *, size_t , struct v4l2_subdev_io_pin_config *) ;
   int (*init)(struct v4l2_subdev *, u32 ) ;
   int (*load_fw)(struct v4l2_subdev *) ;
   int (*reset)(struct v4l2_subdev *, u32 ) ;
   int (*s_gpio)(struct v4l2_subdev *, u32 ) ;
   long (*ioctl)(struct v4l2_subdev *, unsigned int , void *) ;
   long (*compat_ioctl32)(struct v4l2_subdev *, unsigned int , unsigned long ) ;
   int (*g_register)(struct v4l2_subdev *, struct v4l2_dbg_register *) ;
   int (*s_register)(struct v4l2_subdev *, struct v4l2_dbg_register *) ;
   int (*s_power)(struct v4l2_subdev *, int ) ;
   int (*interrupt_service_routine)(struct v4l2_subdev *, u32 , bool *) ;
   int (*subscribe_event)(struct v4l2_subdev *, struct v4l2_fh *, struct v4l2_event_subscription *) ;
   int (*unsubscribe_event)(struct v4l2_subdev *, struct v4l2_fh *, struct v4l2_event_subscription *) ;
};
#line 264  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_tuner_ops {
   int (*standby)(struct v4l2_subdev *) ;
   int (*s_radio)(struct v4l2_subdev *) ;
   int (*s_frequency)(struct v4l2_subdev *, struct v4l2_frequency *) ;
   int (*g_frequency)(struct v4l2_subdev *, struct v4l2_frequency *) ;
   int (*enum_freq_bands)(struct v4l2_subdev *, struct v4l2_frequency_band *) ;
   int (*g_tuner)(struct v4l2_subdev *, struct v4l2_tuner *) ;
   int (*s_tuner)(struct v4l2_subdev *, struct v4l2_tuner *) ;
   int (*g_modulator)(struct v4l2_subdev *, struct v4l2_modulator *) ;
   int (*s_modulator)(struct v4l2_subdev *, struct v4l2_modulator *) ;
   int (*s_type_addr)(struct v4l2_subdev *, struct tuner_setup *) ;
   int (*s_config)(struct v4l2_subdev *, struct v4l2_priv_tun_config *) ;
};
#line 304  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_audio_ops {
   int (*s_clock_freq)(struct v4l2_subdev *, u32 ) ;
   int (*s_i2s_clock_freq)(struct v4l2_subdev *, u32 ) ;
   int (*s_routing)(struct v4l2_subdev *, u32 , u32 , u32 ) ;
   int (*s_stream)(struct v4l2_subdev *, int ) ;
};
#line 310 
enum v4l2_mbus_frame_desc_flags {
    V4L2_MBUS_FRAME_DESC_FL_LEN_MAX = 1,
    V4L2_MBUS_FRAME_DESC_FL_BLOB = 2
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_mbus_frame_desc_entry {
   enum v4l2_mbus_frame_desc_flags flags ;
   u32 pixelcode ;
   u32 length ;
};
#line 348  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_mbus_frame_desc {
   struct v4l2_mbus_frame_desc_entry entry[4U] ;
   unsigned short num_entries ;
};
#line 415  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_video_ops {
   int (*s_routing)(struct v4l2_subdev *, u32 , u32 , u32 ) ;
   int (*s_crystal_freq)(struct v4l2_subdev *, u32 , u32 ) ;
   int (*g_std)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*s_std)(struct v4l2_subdev *, v4l2_std_id ) ;
   int (*s_std_output)(struct v4l2_subdev *, v4l2_std_id ) ;
   int (*g_std_output)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*querystd)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_tvnorms)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_tvnorms_output)(struct v4l2_subdev *, v4l2_std_id *) ;
   int (*g_input_status)(struct v4l2_subdev *, u32 *) ;
   int (*s_stream)(struct v4l2_subdev *, int ) ;
   int (*g_pixelaspect)(struct v4l2_subdev *, struct v4l2_fract *) ;
   int (*g_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_frame_interval *) ;
   int (*s_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_frame_interval *) ;
   int (*s_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*g_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*query_dv_timings)(struct v4l2_subdev *, struct v4l2_dv_timings *) ;
   int (*g_mbus_config)(struct v4l2_subdev *, struct v4l2_mbus_config *) ;
   int (*s_mbus_config)(struct v4l2_subdev *, struct v4l2_mbus_config *) ;
   int (*s_rx_buffer)(struct v4l2_subdev *, void *, unsigned int *) ;
};
#line 481  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_vbi_ops {
   int (*decode_vbi_line)(struct v4l2_subdev *, struct v4l2_decode_vbi_line *) ;
   int (*s_vbi_data)(struct v4l2_subdev *, struct v4l2_sliced_vbi_data *) ;
   int (*g_vbi_data)(struct v4l2_subdev *, struct v4l2_sliced_vbi_data *) ;
   int (*g_sliced_vbi_cap)(struct v4l2_subdev *, struct v4l2_sliced_vbi_cap *) ;
   int (*s_raw_fmt)(struct v4l2_subdev *, struct v4l2_vbi_format *) ;
   int (*g_sliced_fmt)(struct v4l2_subdev *, struct v4l2_sliced_vbi_format *) ;
   int (*s_sliced_fmt)(struct v4l2_subdev *, struct v4l2_sliced_vbi_format *) ;
};
#line 501  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_sensor_ops {
   int (*g_skip_top_lines)(struct v4l2_subdev *, u32 *) ;
   int (*g_skip_frames)(struct v4l2_subdev *, u32 *) ;
};
#line 505 
enum v4l2_subdev_ir_mode {
    V4L2_SUBDEV_IR_MODE_PULSE_WIDTH = 0
};
#line 540  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ir_parameters {
   unsigned int bytes_per_data_element ;
   enum v4l2_subdev_ir_mode mode ;
   bool enable ;
   bool interrupt_enable ;
   bool shutdown ;
   bool modulation ;
   u32 max_pulse_width ;
   unsigned int carrier_freq ;
   unsigned int duty_cycle ;
   bool invert_level ;
   bool invert_carrier_sense ;
   u32 noise_filter_min_width ;
   unsigned int carrier_range_lower ;
   unsigned int carrier_range_upper ;
   u32 resolution ;
};
#line 599  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ir_ops {
   int (*rx_read)(struct v4l2_subdev *, u8 *, size_t , ssize_t *) ;
   int (*rx_g_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*rx_s_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*tx_write)(struct v4l2_subdev *, u8 *, size_t , ssize_t *) ;
   int (*tx_g_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
   int (*tx_s_parameters)(struct v4l2_subdev *, struct v4l2_subdev_ir_parameters *) ;
};
#line 630  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_pad_config {
   struct v4l2_mbus_framefmt try_fmt ;
   struct v4l2_rect try_crop ;
   struct v4l2_rect try_compose ;
};
#line 674  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_pad_ops {
   int (*init_cfg)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *) ;
   int (*enum_mbus_code)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_mbus_code_enum *) ;
   int (*enum_frame_size)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_frame_size_enum *) ;
   int (*enum_frame_interval)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_frame_interval_enum *) ;
   int (*get_fmt)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_format *) ;
   int (*set_fmt)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_format *) ;
   int (*get_selection)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_selection *) ;
   int (*set_selection)(struct v4l2_subdev *, struct v4l2_subdev_pad_config *, struct v4l2_subdev_selection *) ;
   int (*get_edid)(struct v4l2_subdev *, struct v4l2_edid *) ;
   int (*set_edid)(struct v4l2_subdev *, struct v4l2_edid *) ;
   int (*dv_timings_cap)(struct v4l2_subdev *, struct v4l2_dv_timings_cap *) ;
   int (*enum_dv_timings)(struct v4l2_subdev *, struct v4l2_enum_dv_timings *) ;
   int (*link_validate)(struct v4l2_subdev *, struct media_link *, struct v4l2_subdev_format *, struct v4l2_subdev_format *) ;
   int (*get_frame_desc)(struct v4l2_subdev *, unsigned int , struct v4l2_mbus_frame_desc *) ;
   int (*set_frame_desc)(struct v4l2_subdev *, unsigned int , struct v4l2_mbus_frame_desc *) ;
};
#line 727  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_ops {
   struct v4l2_subdev_core_ops *core ;
   struct v4l2_subdev_tuner_ops *tuner ;
   struct v4l2_subdev_audio_ops *audio ;
   struct v4l2_subdev_video_ops *video ;
   struct v4l2_subdev_vbi_ops *vbi ;
   struct v4l2_subdev_ir_ops *ir ;
   struct v4l2_subdev_sensor_ops *sensor ;
   struct v4l2_subdev_pad_ops *pad ;
};
#line 765  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_internal_ops {
   int (*registered)(struct v4l2_subdev *) ;
   void (*unregistered)(struct v4l2_subdev *) ;
   int (*open)(struct v4l2_subdev *, struct v4l2_subdev_fh *) ;
   int (*close)(struct v4l2_subdev *, struct v4l2_subdev_fh *) ;
   void (*release)(struct v4l2_subdev *) ;
};
#line 772 
struct regulator_bulk_data;
#line 797  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_platform_data {
   struct regulator_bulk_data *regulators ;
   int num_regulators ;
   void *host_priv ;
};
#line 848  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev {
   struct media_entity entity ;
   struct list_head list ;
   struct module *owner ;
   bool owner_v4l2_dev ;
   u32 flags ;
   struct v4l2_device *v4l2_dev ;
   struct v4l2_subdev_ops *ops ;
   struct v4l2_subdev_internal_ops *internal_ops ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   char name[32U] ;
   u32 grp_id ;
   void *dev_priv ;
   void *host_priv ;
   struct video_device *devnode ;
   struct device *dev ;
   struct fwnode_handle *fwnode ;
   struct list_head async_list ;
   struct v4l2_async_subdev *asd ;
   struct v4l2_async_notifier *notifier ;
   struct v4l2_async_notifier *subdev_notifier ;
   struct v4l2_subdev_platform_data *pdata ;
};
#line 906  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
struct v4l2_subdev_fh {
   struct v4l2_fh vfh ;
   struct module *owner ;
   struct v4l2_subdev_pad_config *pad ;
};
#line 47  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-device.h"
struct v4l2_device {
   struct device *dev ;
   struct media_device *mdev ;
   struct list_head subdevs ;
   spinlock_t lock ;
   char name[36U] ;
   void (*notify)(struct v4l2_subdev *, unsigned int , void *) ;
   struct v4l2_ctrl_handler *ctrl_handler ;
   struct v4l2_prio_state prio ;
   struct kref ref ;
   void (*release)(struct v4l2_device *) ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 33  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ptp_clock_kernel.h"
struct ptp_system_timestamp {
   struct timespec64 pre_ts ;
   struct timespec64 post_ts ;
};
#line 277 
struct dma_chan;
#line 279 
struct spi_controller;
#line 280 
struct spi_transfer;
#line 281 
struct spi_controller_mem_ops;
#line 56  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_statistics {
   spinlock_t lock ;
   unsigned long messages ;
   unsigned long transfers ;
   unsigned long errors ;
   unsigned long timedout ;
   unsigned long spi_sync ;
   unsigned long spi_sync_immediate ;
   unsigned long spi_async ;
   unsigned long long bytes ;
   unsigned long long bytes_rx ;
   unsigned long long bytes_tx ;
   unsigned long transfer_bytes_histo[17U] ;
   unsigned long transfers_split_maxsize ;
};
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_delay {
   u16 value ;
   u8 unit ;
};
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_device {
   struct device dev ;
   struct spi_controller *controller ;
   struct spi_controller *master ;
   u32 max_speed_hz ;
   u8 chip_select ;
   u8 bits_per_word ;
   bool rt ;
   u32 mode ;
   int irq ;
   void *controller_state ;
   void *controller_data ;
   char modalias[32U] ;
   char *driver_override ;
   int cs_gpio ;
   struct gpio_desc *cs_gpiod ;
   struct spi_delay word_delay ;
   struct spi_statistics statistics ;
};
#line 247 
struct spi_message;
#line 452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_controller {
   struct device dev ;
   struct list_head list ;
   s16 bus_num ;
   u16 num_chipselect ;
   u16 dma_alignment ;
   u32 mode_bits ;
   u32 bits_per_word_mask ;
   u32 min_speed_hz ;
   u32 max_speed_hz ;
   u16 flags ;
   bool slave ;
   size_t (*max_transfer_size)(struct spi_device *) ;
   size_t (*max_message_size)(struct spi_device *) ;
   struct mutex io_mutex ;
   spinlock_t bus_lock_spinlock ;
   struct mutex bus_lock_mutex ;
   bool bus_lock_flag ;
   int (*setup)(struct spi_device *) ;
   int (*set_cs_timing)(struct spi_device *, struct spi_delay *, struct spi_delay *, struct spi_delay *) ;
   int (*transfer)(struct spi_device *, struct spi_message *) ;
   void (*cleanup)(struct spi_device *) ;
   bool (*can_dma)(struct spi_controller *, struct spi_device *, struct spi_transfer *) ;
   bool queued ;
   struct kthread_worker kworker ;
   struct task_struct *kworker_task ;
   struct kthread_work pump_messages ;
   spinlock_t queue_lock ;
   struct list_head queue ;
   struct spi_message *cur_msg ;
   bool idling ;
   bool busy ;
   bool running ;
   bool rt ;
   bool auto_runtime_pm ;
   bool cur_msg_prepared ;
   bool cur_msg_mapped ;
   struct completion xfer_completion ;
   size_t max_dma_len ;
   int (*prepare_transfer_hardware)(struct spi_controller *) ;
   int (*transfer_one_message)(struct spi_controller *, struct spi_message *) ;
   int (*unprepare_transfer_hardware)(struct spi_controller *) ;
   int (*prepare_message)(struct spi_controller *, struct spi_message *) ;
   int (*unprepare_message)(struct spi_controller *, struct spi_message *) ;
   int (*slave_abort)(struct spi_controller *) ;
   void (*set_cs)(struct spi_device *, bool ) ;
   int (*transfer_one)(struct spi_controller *, struct spi_device *, struct spi_transfer *) ;
   void (*handle_err)(struct spi_controller *, struct spi_message *) ;
   struct spi_controller_mem_ops *mem_ops ;
   struct spi_delay cs_setup ;
   struct spi_delay cs_hold ;
   struct spi_delay cs_inactive ;
   int *cs_gpios ;
   struct gpio_desc **cs_gpiods ;
   bool use_gpio_descriptors ;
   struct spi_statistics statistics ;
   struct dma_chan *dma_tx ;
   struct dma_chan *dma_rx ;
   void *dummy_rx ;
   void *dummy_tx ;
   int (*fw_translate_cs)(struct spi_controller *, unsigned int ) ;
   bool ptp_sts_supported ;
   unsigned long irq_flags ;
};
#line 890  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_transfer {
   void *tx_buf ;
   void *rx_buf ;
   unsigned int len ;
   dma_addr_t tx_dma ;
   dma_addr_t rx_dma ;
   struct sg_table tx_sg ;
   struct sg_table rx_sg ;
   unsigned int cs_change : 1 ;
   unsigned int tx_nbits : 3 ;
   unsigned int rx_nbits : 3 ;
   u8 bits_per_word ;
   u16 delay_usecs ;
   struct spi_delay delay ;
   struct spi_delay cs_change_delay ;
   struct spi_delay word_delay ;
   u32 speed_hz ;
   u32 effective_speed_hz ;
   unsigned int ptp_sts_word_pre ;
   unsigned int ptp_sts_word_post ;
   struct ptp_system_timestamp *ptp_sts ;
   bool timestamped_pre ;
   bool timestamped_post ;
   struct list_head transfer_list ;
};
#line 961  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spi/spi.h"
struct spi_message {
   struct list_head transfers ;
   struct spi_device *spi ;
   unsigned int is_dma_mapped : 1 ;
   void (*complete)(void *) ;
   void *context ;
   unsigned int frame_length ;
   unsigned int actual_length ;
   int status ;
   struct list_head queue ;
   void *state ;
   struct list_head resources ;
};
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_fix_screeninfo {
   char id[16U] ;
   unsigned long smem_start ;
   __u32 smem_len ;
   __u32 type ;
   __u32 type_aux ;
   __u32 visual ;
   __u16 xpanstep ;
   __u16 ypanstep ;
   __u16 ywrapstep ;
   __u32 line_length ;
   unsigned long mmio_start ;
   __u32 mmio_len ;
   __u32 accel ;
   __u16 capabilities ;
   __u16 reserved[2U] ;
};
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_bitfield {
   __u32 offset ;
   __u32 length ;
   __u32 msb_right ;
};
#line 241  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_var_screeninfo {
   __u32 xres ;
   __u32 yres ;
   __u32 xres_virtual ;
   __u32 yres_virtual ;
   __u32 xoffset ;
   __u32 yoffset ;
   __u32 bits_per_pixel ;
   __u32 grayscale ;
   struct fb_bitfield red ;
   struct fb_bitfield green ;
   struct fb_bitfield blue ;
   struct fb_bitfield transp ;
   __u32 nonstd ;
   __u32 activate ;
   __u32 height ;
   __u32 width ;
   __u32 accel_flags ;
   __u32 pixclock ;
   __u32 left_margin ;
   __u32 right_margin ;
   __u32 upper_margin ;
   __u32 lower_margin ;
   __u32 hsync_len ;
   __u32 vsync_len ;
   __u32 sync ;
   __u32 vmode ;
   __u32 rotate ;
   __u32 colorspace ;
   __u32 reserved[4U] ;
};
#line 281  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_cmap {
   __u32 start ;
   __u32 len ;
   __u16 *red ;
   __u16 *green ;
   __u16 *blue ;
   __u16 *transp ;
};
#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_copyarea {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 sx ;
   __u32 sy ;
};
#line 350  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_fillrect {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 color ;
   __u32 rop ;
};
#line 359  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_image {
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
   __u32 fg_color ;
   __u32 bg_color ;
   __u8 depth ;
   char *data ;
   struct fb_cmap cmap ;
};
#line 383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fbcurpos {
   __u16 x ;
   __u16 y ;
};
#line 387  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/uapi/linux/fb.h"
struct fb_cursor {
   __u16 set ;
   __u16 enable ;
   __u16 rop ;
   char *mask ;
   struct fbcurpos hot ;
   struct fb_image image ;
};
#line 400 
enum backlight_type {
    BACKLIGHT_RAW = 1,
    BACKLIGHT_PLATFORM = 2,
    BACKLIGHT_FIRMWARE = 3,
    BACKLIGHT_TYPE_MAX = 4
};
#line 412 
enum backlight_scale {
    BACKLIGHT_SCALE_UNKNOWN = 0,
    BACKLIGHT_SCALE_LINEAR = 1,
    BACKLIGHT_SCALE_NON_LINEAR = 2
};
#line 418 
struct backlight_device;
#line 419 
struct fb_info;
#line 58  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_ops {
   unsigned int options ;
   int (*update_status)(struct backlight_device *) ;
   int (*get_brightness)(struct backlight_device *) ;
   int (*check_fb)(struct backlight_device *, struct fb_info *) ;
};
#line 74  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_properties {
   int brightness ;
   int max_brightness ;
   int power ;
   int fb_blank ;
   enum backlight_type type ;
   unsigned int state ;
   enum backlight_scale scale ;
};
#line 97  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/backlight.h"
struct backlight_device {
   struct backlight_properties props ;
   struct mutex update_lock ;
   struct mutex ops_lock ;
   struct backlight_ops *ops ;
   struct notifier_block fb_notif ;
   struct list_head entry ;
   struct device dev ;
   bool fb_bl_on[32U] ;
   int use_count ;
};
#line 52  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_chroma {
   __u32 redx ;
   __u32 greenx ;
   __u32 bluex ;
   __u32 whitex ;
   __u32 redy ;
   __u32 greeny ;
   __u32 bluey ;
   __u32 whitey ;
};
#line 63 
struct fb_videomode;
#line 63  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_monspecs {
   struct fb_chroma chroma ;
   struct fb_videomode *modedb ;
   __u8 manufacturer[4U] ;
   __u8 monitor[14U] ;
   __u8 serial_no[14U] ;
   __u8 ascii[14U] ;
   __u32 modedb_len ;
   __u32 model ;
   __u32 serial ;
   __u32 year ;
   __u32 week ;
   __u32 hfmin ;
   __u32 hfmax ;
   __u32 dclkmin ;
   __u32 dclkmax ;
   __u16 input ;
   __u16 dpms ;
   __u16 signal ;
   __u16 vfmin ;
   __u16 vfmax ;
   __u16 gamma ;
   __u16 gtf : 1 ;
   __u16 misc ;
   __u8 version ;
   __u8 revision ;
   __u8 max_x ;
   __u8 max_y ;
};
#line 144  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_blit_caps {
   u32 x ;
   u32 y ;
   u32 len ;
   u32 flags ;
};
#line 185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_pixmap {
   u8 *addr ;
   u32 size ;
   u32 offset ;
   u32 buf_align ;
   u32 scan_align ;
   u32 access_align ;
   u32 flags ;
   u32 blit_x ;
   u32 blit_y ;
   void (*writeio)(struct fb_info *, void *, void *, unsigned int ) ;
   void (*readio)(struct fb_info *, void *, void *, unsigned int ) ;
};
#line 203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_deferred_io {
   unsigned long delay ;
   struct mutex lock ;
   struct list_head pagelist ;
   void (*first_io)(struct fb_info *) ;
   void (*deferred_io)(struct fb_info *, struct list_head *) ;
};
#line 228  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_ops {
   struct module *owner ;
   int (*fb_open)(struct fb_info *, int ) ;
   int (*fb_release)(struct fb_info *, int ) ;
   ssize_t (*fb_read)(struct fb_info *, char *, size_t , loff_t *) ;
   ssize_t (*fb_write)(struct fb_info *, char *, size_t , loff_t *) ;
   int (*fb_check_var)(struct fb_var_screeninfo *, struct fb_info *) ;
   int (*fb_set_par)(struct fb_info *) ;
   int (*fb_setcolreg)(unsigned int , unsigned int , unsigned int , unsigned int , unsigned int , struct fb_info *) ;
   int (*fb_setcmap)(struct fb_cmap *, struct fb_info *) ;
   int (*fb_blank)(int , struct fb_info *) ;
   int (*fb_pan_display)(struct fb_var_screeninfo *, struct fb_info *) ;
   void (*fb_fillrect)(struct fb_info *, struct fb_fillrect *) ;
   void (*fb_copyarea)(struct fb_info *, struct fb_copyarea *) ;
   void (*fb_imageblit)(struct fb_info *, struct fb_image *) ;
   int (*fb_cursor)(struct fb_info *, struct fb_cursor *) ;
   int (*fb_sync)(struct fb_info *) ;
   int (*fb_ioctl)(struct fb_info *, unsigned int , unsigned long ) ;
   int (*fb_compat_ioctl)(struct fb_info *, unsigned int , unsigned long ) ;
   int (*fb_mmap)(struct fb_info *, struct vm_area_struct *) ;
   void (*fb_get_caps)(struct fb_info *, struct fb_blit_caps *, struct fb_var_screeninfo *) ;
   void (*fb_destroy)(struct fb_info *) ;
   int (*fb_debug_enter)(struct fb_info *) ;
   int (*fb_debug_leave)(struct fb_info *) ;
};
#line 306  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilemap {
   __u32 width ;
   __u32 height ;
   __u32 depth ;
   __u32 length ;
   __u8 *data ;
};
#line 315  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilerect {
   __u32 sx ;
   __u32 sy ;
   __u32 width ;
   __u32 height ;
   __u32 index ;
   __u32 fg ;
   __u32 bg ;
   __u32 rop ;
};
#line 326  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilearea {
   __u32 sx ;
   __u32 sy ;
   __u32 dx ;
   __u32 dy ;
   __u32 width ;
   __u32 height ;
};
#line 335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tileblit {
   __u32 sx ;
   __u32 sy ;
   __u32 width ;
   __u32 height ;
   __u32 fg ;
   __u32 bg ;
   __u32 length ;
   __u32 *indices ;
};
#line 346  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tilecursor {
   __u32 sx ;
   __u32 sy ;
   __u32 mode ;
   __u32 shape ;
   __u32 fg ;
   __u32 bg ;
};
#line 355  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_tile_ops {
   void (*fb_settile)(struct fb_info *, struct fb_tilemap *) ;
   void (*fb_tilecopy)(struct fb_info *, struct fb_tilearea *) ;
   void (*fb_tilefill)(struct fb_info *, struct fb_tilerect *) ;
   void (*fb_tileblit)(struct fb_info *, struct fb_tileblit *) ;
   void (*fb_tilecursor)(struct fb_info *, struct fb_tilecursor *) ;
   int (*fb_get_tilemax)(struct fb_info *) ;
};
#line 499  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct aperture {
   resource_size_t base ;
   resource_size_t size ;
};
#line 497  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct apertures_struct {
   unsigned int count ;
   struct aperture ranges[0U] ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
union __anonunion_3425 {
   char *screen_base ;
   char *screen_buffer ;
};
#line 439  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_info {
   atomic_t count ;
   int node ;
   int flags ;
   int fbcon_rotate_hint ;
   struct mutex lock ;
   struct mutex mm_lock ;
   struct fb_var_screeninfo var ;
   struct fb_fix_screeninfo fix ;
   struct fb_monspecs monspecs ;
   struct work_struct queue ;
   struct fb_pixmap pixmap ;
   struct fb_pixmap sprite ;
   struct fb_cmap cmap ;
   struct list_head modelist ;
   struct fb_videomode *mode ;
   struct backlight_device *bl_dev ;
   struct mutex bl_curve_mutex ;
   u8 bl_curve[128U] ;
   struct delayed_work deferred_work ;
   struct fb_deferred_io *fbdefio ;
   struct fb_ops *fbops ;
   struct device *device ;
   struct device *dev ;
   int class_flag ;
   struct fb_tile_ops *tileops ;
   union __anonunion_3425 __anonCompField_fb_info_73 ;
   unsigned long screen_size ;
   void *pseudo_palette ;
   u32 state ;
   void *fbcon_par ;
   void *par ;
   struct apertures_struct *apertures ;
   bool skip_vt_switch ;
};
#line 767  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/fb.h"
struct fb_videomode {
   char *name ;
   u32 refresh ;
   u32 xres ;
   u32 yres ;
   u32 pixclock ;
   u32 left_margin ;
   u32 right_margin ;
   u32 upper_margin ;
   u32 lower_margin ;
   u32 hsync_len ;
   u32 vsync_len ;
   u32 sync ;
   u32 vmode ;
   u32 flag ;
};
#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct ldv_kmem_cache {
   char *name ;
   unsigned int size ;
};
#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
typedef unsigned long pthread_t;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
union pthread_attr_t {
   char __size[56U] ;
   long __align ;
};
#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
typedef union pthread_attr_t pthread_attr_t;
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
enum hrtimer_restart;
#line 15  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_free_irq_5 {
   int arg0 ;
   int signal_pending ;
};
#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_interrupt_scenario_nv_nic_irq_other_12 {
   int arg0 ;
   enum irqreturn (*arg1)(int , void *) ;
   enum irqreturn (*arg2)(int , void *) ;
   void *arg3 ;
   int signal_pending ;
};
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_random_allocationless_scenario_nv_tx_timeout_15 {
   struct net_device *arg0 ;
   int signal_pending ;
};
#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_pci_scenario_forcedeth_pci_driver_16 {
   struct pci_driver *arg0 ;
   int signal_pending ;
};
#line 38  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/emg/0/environment_model.c"
struct emg_struct_timer_scenario_6_18 {
   struct timer_list *arg0 ;
   int signal_pending ;
};
/* compiler builtin: 
   unsigned short __builtin_bswap16(unsigned short);   */
/* compiler builtin: 
   void *__builtin_memcpy(void *, void const *, unsigned long);   */
/* compiler builtin: 
   void __builtin_prefetch(void const * , ...);   */
/* compiler builtin: 
   void __builtin_unreachable(void);   */
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/common/inline_asm.h"
#line 22 
void ldv_inline_asm(void);
#line 16  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/export.h"
#line 16 
extern struct module __this_module;
#line 197  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/compiler.h"
__inline static void __read_once_size(void *p, void *res, int size)
{
  #line 199 
  switch (size) {
    #line 199 
    case 1: 
            #line 199 
    ;
    #line 199 
    *((__u8 *)res) = *((__u8 *)p);
    #line 199 
    break;
    #line 199 
    case 2: 
            #line 199 
    ;
    #line 199 
    *((__u16 *)res) = *((__u16 *)p);
    #line 199 
    break;
    #line 199 
    case 4: 
            #line 199 
    ;
    #line 199 
    *((__u32 *)res) = *((__u32 *)p);
    #line 199 
    break;
    #line 199 
    case 8: 
            #line 199 
    ;
    #line 199 
    *((__u64 *)res) = *((__u64 *)p);
    #line 199 
    break;
    #line 199 
    default: 
             #line 199 
    ;
    #line 200 
    ldv_inline_asm();
    #line 199 
    __builtin_memcpy(res,(void const *)p,(unsigned long)size);
    #line 200 
    ldv_inline_asm();
  }
  #line 203 
  return;
}

#line 34  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kasan-checks.h"
__inline static bool kasan_check_read(void *p, unsigned int size)
{
  #line 36 
  return (_Bool)1;
}

#line 160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static bool arch_test_and_clear_bit(long nr, unsigned long *addr)
{
  #line 162 
  bool c;
  #line 163 
  ldv_inline_asm();
  #line 162 
  return c;
}

#line 204  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static bool constant_test_bit(long nr, unsigned long *addr)
{
  #line 207 
  return (_Bool)(((*(addr + (unsigned long)(nr >> 6)) >> (nr & 63L)) & 1UL) != 0UL);
}

#line 210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/bitops.h"
__inline static bool variable_test_bit(long nr, unsigned long *addr)
{
  #line 212 
  bool oldbit;
  #line 213 
  ldv_inline_asm();
  #line 219 
  return oldbit;
}

#line 31  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 314  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/0/concurrency safety/weaver/forcedeth.i.aux"
static void cif_set_bit(long nr, unsigned long *addr);
#line 44  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
#line 321  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/0/concurrency safety/weaver/forcedeth.i.aux"
static void cif_clear_bit(long nr, unsigned long *addr);
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-atomic.h"
__inline static bool test_and_clear_bit(long nr, unsigned long *addr)
{
  #line 83 
  kasan_check_read((void *)(addr + (unsigned long)(nr / 64L)),8U);
  #line 84 
  return arch_test_and_clear_bit(nr,addr);
}

#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bitops/instrumented-non-atomic.h"
__inline static bool test_bit(long nr, unsigned long *addr)
{
  #line 111 
  int tmp_1;
  #line 110 
  kasan_check_read((void *)(addr + (unsigned long)(nr / 64L)),8U);
  #line 111 
  if (0 != 0) {
    #line 111 
    tmp_1 = (int)constant_test_bit(nr,addr) != 0;
  }
  else {
    #line 111 
    tmp_1 = (int)variable_test_bit(nr,addr) != 0;
  }
  #line 111 
  return (_Bool)(tmp_1 != 0);
}

#line 171  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/printk.h"
#line 171 
int printk(char * , ...);
#line 23  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/jump_label.h"
__inline static bool arch_static_branch(struct static_key *key, bool branch)
{
  #line 27 
  ldv_inline_asm();
  #line 28 
  ldv_inline_asm();
  #line 34 
  return (_Bool)0;
  #line 35 
  l_yes: 
         #line 35 
  ;
  #line 36 
  return (_Bool)1;
}

#line 64  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_debug.h"
#line 64 
void __dynamic_dev_dbg(struct _ddebug *, struct device *, char * , ...);
#line 70 
#line 70 
void __dynamic_netdev_dbg(struct _ddebug *, struct net_device *, char * , ...);
#line 469  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kernel.h"
#line 469 
int sprintf(char *, char * , ...);
#line 570 
#line 570 
extern enum system_states system_state;
#line 88  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/percpu.h"
#line 88 
void __bad_percpu_size(void);
#line 309  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-defs.h"
#line 309 
void __bad_size_call_parameter(void);
#line 314  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu-defs.h"
__inline static void __this_cpu_preempt_check(char *op)
{
  #line 316 
  return;
}

#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/percpu.h"
#line 19 
extern unsigned long __per_cpu_offset[8192U];
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/bug.h"
#line 89 
void __warn_printk(char * , ...);
#line 15  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/page_64.h"
#line 15 
extern unsigned long vmalloc_base;
#line 16 
#line 16 
extern unsigned long vmemmap_base;
#line 29 
#line 29 
unsigned long __phys_addr(unsigned long);
#line 334  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/paravirt_types.h"
#line 334 
extern struct paravirt_patch_template pv_ops;
#line 14  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/string_64.h"
#line 14 
void *memcpy(void *, void *, size_t);
#line 18 
#line 18 
void *memset(void *, int, size_t);
#line 29  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/string.h"
#line 29 
size_t strlcpy(char *, char *, size_t);
#line 9  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cmpxchg_64.h"
__inline static int arch_atomic_read(atomic_t *v)
{
  #line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/atomic.h"
  union __anonunion___u_67 __u;
  #line 31 
  __read_once_size((void *)(& v->counter),(void *)(& __u.__c),4);
  #line 31 
  return (__u.__val);
}

#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/atomic-instrumented.h"
__inline static int atomic_read(atomic_t *v)
{
  #line 26 
  kasan_check_read((void *)v,4U);
  #line 27 
  return arch_atomic_read(v);
}

#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/cpumask.h"
#line 39 
extern unsigned int nr_cpu_ids;
#line 91 
#line 91 
extern struct cpumask __cpu_online_mask;
#line 228 
#line 228 
unsigned int cpumask_next(int, struct cpumask *);
#line 745  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/paravirt.h"
__inline static unsigned long arch_local_save_flags(void)
{
  #line 747 
  unsigned long __ret;
  {
    #line 747 
    unsigned long __edi = __edi;
    #line 747 
    unsigned long __esi = __esi;
    #line 747 
    unsigned long __edx = __edx;
    #line 747 
    unsigned long __ecx = __ecx;
    #line 747 
    unsigned long __eax = __eax;
    #line 747 
    if ((long)(pv_ops.irq.save_fl.func == (void *)0) != 0L) {
      #line 748 
      ldv_inline_asm();
      #line 749 
      ldv_inline_asm();
      #line 750 
      ldv_inline_asm();
      #line 747 
      ;
    }
    {
      #line 747 
      unsigned long __mask;
      #line 751 
      ldv_inline_asm();
      #line 747 
      __mask = 18446744073709551615UL;
      #line 747 
      switch (8UL) {
        #line 747 
        case (unsigned long)1: 
                               #line 747 
        ;
        #line 747 
        __mask = 255UL;
        #line 747 
        break;
        #line 747 
        case (unsigned long)2: 
                               #line 747 
        ;
        #line 747 
        __mask = 65535UL;
        #line 747 
        break;
        #line 747 
        case (unsigned long)4: 
                               #line 747 
        ;
        #line 747 
        __mask = 4294967295UL;
        #line 747 
        break;
        #line 747 
        default: 
                 #line 747 
        ;
        #line 747 
        break;
      }
      #line 747 
      __ret = __mask & __eax;
    }
    }
  #line 747 
  return __ret;
}

#line 750  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/paravirt.h"
__inline static void arch_local_irq_restore(unsigned long f)
{
  #line 752 
  unsigned long __edi = __edi;
  #line 752 
  unsigned long __esi = __esi;
  #line 752 
  unsigned long __edx = __edx;
  #line 752 
  unsigned long __ecx = __ecx;
  #line 752 
  unsigned long __eax = __eax;
  #line 752 
  if ((long)(pv_ops.irq.restore_fl.func == (void *)0) != 0L) {
    #line 753 
    ldv_inline_asm();
    #line 754 
    ldv_inline_asm();
    #line 755 
    ldv_inline_asm();
    #line 752 
    ;
  }
  #line 756 
  ldv_inline_asm();
  #line 758 
  return;
}

#line 755  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/paravirt.h"
__inline static void arch_local_irq_disable(void)
{
  #line 757 
  unsigned long __edi = __edi;
  #line 757 
  unsigned long __esi = __esi;
  #line 757 
  unsigned long __edx = __edx;
  #line 757 
  unsigned long __ecx = __ecx;
  #line 757 
  unsigned long __eax = __eax;
  #line 757 
  if ((long)(pv_ops.irq.irq_disable.func == (void *)0) != 0L) {
    #line 758 
    ldv_inline_asm();
    #line 759 
    ldv_inline_asm();
    #line 760 
    ldv_inline_asm();
    #line 757 
    ;
  }
  #line 761 
  ldv_inline_asm();
  #line 763 
  return;
}

#line 765  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/paravirt.h"
__inline static unsigned long arch_local_irq_save(void)
{
  #line 767 
  unsigned long f;
  #line 769 
  f = arch_local_save_flags();
  #line 770 
  arch_local_irq_disable();
  #line 771 
  return f;
}

#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
#line 20 
unsigned long native_save_fl(void);
#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
unsigned long native_save_fl(void)
{
  #line 22 
  unsigned long flags;
  #line 23 
  ldv_inline_asm();
  #line 35 
  return flags;
}

#line 38 
#line 39 
void native_restore_fl(unsigned long flags);
#line 39  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
void native_restore_fl(unsigned long flags)
{
  #line 41 
  ldv_inline_asm();
  #line 42 
  return;
}

#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/irqflags.h"
__inline static int arch_irqs_disabled_flags(unsigned long flags)
{
  #line 164 
  return (flags & 512UL) == 0UL;
}

#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/irqflags.h"
#line 32 
void trace_hardirqs_on(void);
#line 33 
#line 33 
void trace_hardirqs_off(void);
#line 173  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/cpufeature.h"
__inline static bool _static_cpu_has(u16 bit)
{
  #line 177 
  ldv_inline_asm();
  #line 178 
  ldv_inline_asm();
  #line 211 
  t_yes: 
         #line 211 
  ;
  #line 212 
  return (_Bool)1;
  #line 213 
  t_no: 
        #line 213 
  ;
  #line 214 
  return (_Bool)0;
}

#line 24  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/preempt.h"
__inline static int preempt_count(void)
{
  #line 26 
  int pfo_ret__;
  #line 26 
  switch (4UL) {
    #line 26 
    case (unsigned long)1: 
                           #line 26 
    ;
    #line 27 
    ldv_inline_asm();
    #line 26 
    break;
    #line 26 
    case (unsigned long)2: 
                           #line 26 
    ;
    #line 27 
    ldv_inline_asm();
    #line 26 
    break;
    #line 26 
    case (unsigned long)4: 
                           #line 26 
    ;
    #line 27 
    ldv_inline_asm();
    #line 26 
    break;
    #line 26 
    case (unsigned long)8: 
                           #line 26 
    ;
    #line 27 
    ldv_inline_asm();
    #line 26 
    break;
    #line 26 
    default: 
             #line 26 
    ;
    #line 26 
    __bad_percpu_size();
  }
  #line 26 
  return pfo_ret__ & 2147483647;
}

#line 8  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bottom_half.h"
#line 8 
void __local_bh_disable_ip(unsigned long, unsigned int);
#line 17  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bottom_half.h"
__inline static void local_bh_disable(void)
{
  #line 19 
  __here_0: 
            #line 19 
  ;
  #line 19 
  __local_bh_disable_ip((unsigned long)((void *)0),512U);
  #line 21 
  return;
}

#line 23 
#line 23 
void __local_bh_enable_ip(unsigned long, unsigned int);
#line 30  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/bottom_half.h"
__inline static void local_bh_enable(void)
{
  #line 32 
  __here_0: 
            #line 32 
  ;
  #line 32 
  __local_bh_enable_ip((unsigned long)((void *)0),512U);
  #line 34 
  return;
}

#line 20  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/qspinlock.h"
__inline static int queued_spin_is_locked(struct qspinlock *lock)
{
  #line 26 
  return atomic_read(& lock->__anonCompField_qspinlock_9.val);
}

#line 95  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 95 
void __raw_spin_lock_init(raw_spinlock_t *, char *, struct lock_class_key *);
#line 22  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock_api_smp.h"
#line 22 
void _raw_spin_lock(raw_spinlock_t *);
#line 28 
#line 28 
void _raw_spin_lock_bh(raw_spinlock_t *);
#line 29 
#line 29 
void _raw_spin_lock_irq(raw_spinlock_t *);
#line 37 
#line 37 
int _raw_spin_trylock(raw_spinlock_t *);
#line 39 
#line 39 
void _raw_spin_unlock(raw_spinlock_t *);
#line 40 
#line 40 
void _raw_spin_unlock_bh(raw_spinlock_t *);
#line 41 
#line 41 
void _raw_spin_unlock_irq(raw_spinlock_t *);
#line 43 
#line 43 
void _raw_spin_unlock_irqrestore(raw_spinlock_t *, unsigned long);
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
__inline static raw_spinlock_t *spinlock_check(spinlock_t *lock)
{
  #line 327 
  return & lock->__anonCompField_spinlock_25.rlock;
}

#line 336  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock(spinlock_t *lock)
{
  #line 338 
  _raw_spin_lock(& lock->__anonCompField_spinlock_25.rlock);
  #line 339 
  return;
}

#line 340 
#line 732  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/0/concurrency safety/weaver/forcedeth.i.aux"
static void cif_spin_lock__xmit_lock_of_netdev_queue(spinlock_t *lock);
#line 340  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 790  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/0/concurrency safety/weaver/forcedeth.i.aux"
static void cif_spin_lock_tx_global_lock_of_net_device(spinlock_t *lock);
#line 340  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 808  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/0/concurrency safety/weaver/forcedeth.i.aux"
static void cif_spin_lock_addr_list_lock_of_net_device(spinlock_t *lock);
#line 340  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 898  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/0/concurrency safety/weaver/forcedeth.i.aux"
static void cif_spin_lock_lock_of_fe_priv(spinlock_t *lock);
#line 341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock_bh(spinlock_t *lock)
{
  #line 343 
  _raw_spin_lock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 344 
  return;
}

#line 345 
#line 844  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/0/concurrency safety/weaver/forcedeth.i.aux"
static void cif_spin_lock_bh_hwstats_lock_of_fe_priv(spinlock_t *lock);
#line 346  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static int spin_trylock(spinlock_t *lock)
{
  #line 348 
  return _raw_spin_trylock(& lock->__anonCompField_spinlock_25.rlock);
}

#line 350 
#line 940  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/0/concurrency safety/weaver/forcedeth.i.aux"
static int cif_spin_trylock_hwstats_lock_of_fe_priv(spinlock_t *lock);
#line 361  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_lock_irq(spinlock_t *lock)
{
  #line 363 
  _raw_spin_lock_irq(& lock->__anonCompField_spinlock_25.rlock);
  #line 364 
  return;
}

#line 365 
#line 880  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/0/concurrency safety/weaver/forcedeth.i.aux"
static void cif_spin_lock_irq_lock_of_fe_priv(spinlock_t *lock);
#line 376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock(spinlock_t *lock)
{
  #line 378 
  _raw_spin_unlock(& lock->__anonCompField_spinlock_25.rlock);
  #line 379 
  return;
}

#line 380 
#line 772  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/0/concurrency safety/weaver/forcedeth.i.aux"
static void cif_spin_unlock__xmit_lock_of_netdev_queue(spinlock_t *lock);
#line 380  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 799  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/0/concurrency safety/weaver/forcedeth.i.aux"
static void cif_spin_unlock_tx_global_lock_of_net_device(spinlock_t *lock);
#line 380  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 826  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/0/concurrency safety/weaver/forcedeth.i.aux"
static void cif_spin_unlock_addr_list_lock_of_net_device(spinlock_t *lock);
#line 380  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 915  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/0/concurrency safety/weaver/forcedeth.i.aux"
static void cif_spin_unlock_lock_of_fe_priv(spinlock_t *lock);
#line 380  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
#line 962  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/0/concurrency safety/weaver/forcedeth.i.aux"
static void cif_spin_unlock_hwstats_lock_of_fe_priv(spinlock_t *lock);
#line 381  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_bh(spinlock_t *lock)
{
  #line 383 
  _raw_spin_unlock_bh(& lock->__anonCompField_spinlock_25.rlock);
  #line 384 
  return;
}

#line 385 
#line 853  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/0/concurrency safety/weaver/forcedeth.i.aux"
static void cif_spin_unlock_bh_hwstats_lock_of_fe_priv(spinlock_t *lock);
#line 386  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_irq(spinlock_t *lock)
{
  #line 388 
  _raw_spin_unlock_irq(& lock->__anonCompField_spinlock_25.rlock);
  #line 389 
  return;
}

#line 390 
#line 889  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/0/concurrency safety/weaver/forcedeth.i.aux"
static void cif_spin_unlock_irq_lock_of_fe_priv(spinlock_t *lock);
#line 391  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/spinlock.h"
static void spin_unlock_irqrestore(spinlock_t *lock, unsigned long flags)
{
  {
    #line 393 
    unsigned long __dummy;
    #line 393 
    unsigned long __dummy2;
    }
  #line 393 
  _raw_spin_unlock_irqrestore(& lock->__anonCompField_spinlock_25.rlock,flags);
  #line 395 
  return;
}

#line 395 
#line 871  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/0/concurrency safety/weaver/forcedeth.i.aux"
static void cif_spin_unlock_irqrestore_lock_of_fe_priv(spinlock_t *lock, unsigned long flags);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 23 
int ldv_undef_int(void);
#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/0/concurrency safety/weaver/forcedeth.i.aux"
#line 33 
void __ldv_spin_lock(spinlock_t *);
#line 35 
#line 862 
static void cif___ldv_spin_lock_lock_of_fe_priv(spinlock_t *lock);
#line 40 
#line 40 
void ldv_spin_model_lock(char *);
#line 41 
#line 41 
void ldv_spin_model_unlock(char *);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 21 
void ldv_set_bit(long nr, unsigned long *addr);
#line 22 
#line 22 
void ldv_clear_bit(long nr, unsigned long *addr);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 25 
void *ldv_kcalloc(size_t n, size_t size, gfp_t flags);
#line 26 
#line 26 
void *ldv_kmalloc_array(size_t n, size_t size, gfp_t flags);
#line 81  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/jiffies.h"
#line 81 
extern unsigned long jiffies;
#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
#line 90 
void init_timer_key(struct timer_list *, void (*)(struct timer_list *), unsigned int, char *, struct lock_class_key *);
#line 173 
#line 907  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/0/concurrency safety/weaver/forcedeth.i.aux"
static int cif_mod_timer(struct timer_list *timer, unsigned long expires);
#line 188  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
#line 971  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/0/concurrency safety/weaver/forcedeth.i.aux"
static int cif_del_timer_sync(struct timer_list *timer);
#line 209  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/timer.h"
#line 209 
unsigned long round_jiffies(unsigned long);
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/io.h"
__inline static unsigned int readl(void *addr)
{
  #line 59 
  unsigned int ret;
  #line 60 
  ldv_inline_asm();
  #line 59 
  return ret;
}

#line 67  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/io.h"
__inline static void writel(unsigned int val, void *addr)
{
  #line 69 
  ldv_inline_asm();
  #line 70 
  return;
}

#line 206 
#line 206 
void *ioremap(resource_size_t, unsigned long);
#line 209 
#line 209 
void iounmap(void *);
#line 135  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/percpu.h"
#line 135 
void *__alloc_percpu(size_t, size_t);
#line 136 
#line 136 
void free_percpu(void *);
#line 89  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/kobject.h"
__inline static char *kobject_name(struct kobject *kobj)
{
  #line 91 
  return kobj->name;
}

#line 222  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/sched.h"
#line 222 
long schedule_timeout_uninterruptible(long);
#line 108  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pm_wakeup.h"
#line 108 
int device_set_wakeup_enable(struct device *, bool);
#line 1370  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static char *dev_name(struct device *dev)
{
  #line 1373 
  if (dev->init_name != (char *)0) 
                                   #line 1374 
                                   return dev->init_name;
  #line 1376 
  return kobject_name(& dev->kobj);
}

#line 1417  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static void *dev_get_drvdata(struct device *dev)
{
  #line 1419 
  return dev->driver_data;
}

#line 1422  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/device.h"
__inline static void dev_set_drvdata(struct device *dev, void *data)
{
  #line 1424 
  dev->driver_data = data;
  #line 1425 
  return;
}

#line 1680 
#line 1680 
char *dev_driver_string(struct device *);
#line 1712 
#line 1712 
void _dev_err(struct device *, char * , ...);
#line 1718 
#line 1718 
void _dev_info(struct device *, char * , ...);
#line 12  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/hardirq.h"
#line 12 
void synchronize_irq(unsigned int);
#line 162  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 924  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/0/concurrency safety/weaver/forcedeth.i.aux"
static int cif_request_irq(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char *name, void *dev);
#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 932  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/0/concurrency safety/weaver/forcedeth.i.aux"
static void *cif_free_irq(unsigned int ldv_func_arg1, void *ldv_func_arg2);
#line 235  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
#line 235 
void disable_irq_nosync(unsigned int);
#line 237 
#line 237 
void disable_irq(unsigned int);
#line 239 
#line 239 
void enable_irq(unsigned int);
#line 428  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
__inline static void disable_irq_nosync_lockdep_irqsave(unsigned int irq, unsigned long *flags)
{
  #line 430 
  disable_irq_nosync(irq);
  {
    #line 432 
    unsigned long __dummy;
    #line 432 
    unsigned long __dummy2;
    }
  #line 432 
  *flags = arch_local_irq_save();
  #line 432 
  trace_hardirqs_off();
  #line 434 
  return;
}

#line 452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/interrupt.h"
__inline static void enable_irq_lockdep_irqrestore(unsigned int irq, unsigned long *flags)
{
  {
    #line 455 
    unsigned long __dummy_1;
    #line 455 
    unsigned long __dummy2_1;
    }
  #line 455 
  if (arch_irqs_disabled_flags(*flags) != 0) {
    {
      #line 455 
      unsigned long __dummy;
      #line 455 
      unsigned long __dummy2;
      }
    #line 455 
    arch_local_irq_restore(*flags);
    #line 455 
    trace_hardirqs_off();
  }
  else {
    #line 455 
    trace_hardirqs_on();
    {
      #line 455 
      unsigned long __dummy_0;
      #line 455 
      unsigned long __dummy2_0;
      }
    #line 455 
    arch_local_irq_restore(*flags);
  }
  #line 457 
  enable_irq(irq);
  #line 458 
  return;
}

#line 189  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 189 
void kfree(void *);
#line 590 
#line 643  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/0/concurrency safety/weaver/forcedeth.i.aux"
static void *kmalloc_array(size_t n, size_t size, gfp_t flags);
#line 607  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/slab.h"
#line 650  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/0/concurrency safety/weaver/forcedeth.i.aux"
static void *kcalloc(size_t n, size_t size, gfp_t flags);
#line 1088  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
#line 1088 
int pci_write_config_dword(struct pci_dev *, int, u32);
#line 1131 
#line 1131 
int pci_enable_device(struct pci_dev *);
#line 1157 
#line 1157 
void pci_disable_device(struct pci_dev *);
#line 1160 
#line 1160 
void pci_set_master(struct pci_dev *);
#line 1233 
#line 1233 
int pci_set_power_state(struct pci_dev *, pci_power_t);
#line 1238 
#line 1238 
int pci_wake_from_d3(struct pci_dev *, bool);
#line 1281 
#line 1281 
int pci_request_regions(struct pci_dev *, char *);
#line 1283 
#line 1283 
void pci_release_regions(struct pci_dev *);
#line 1346 
#line 1011  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/0/concurrency safety/weaver/forcedeth.i.aux"
static int cif___pci_register_driver(struct pci_driver *ldv_func_arg1, struct module *ldv_func_arg2, char *mod_name);
#line 1352  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
#line 1019  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/0/concurrency safety/weaver/forcedeth.i.aux"
static void cif_pci_unregister_driver(struct pci_driver *dev);
#line 628  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/mm.h"
__inline static bool is_vmalloc_addr(void *x)
{
  #line 633 
  int tmp_1;
  #line 631 
  unsigned long addr = (unsigned long)x;
  #line 633 
  if (addr >= vmalloc_base) {
    #line 633 
    unsigned long tmp_0;
    #line 633 
    if ((int)_static_cpu_has((unsigned short)528) != 0) 
                                                        #line 633 
                                                        tmp_0 = 14073748835532800UL; else 
                                                                    #line 633 
                                                                    tmp_0 = 35184372088832UL;
    #line 633 
    ;
    #line 633 
    if ((tmp_0 + vmalloc_base) + 18446744073709551615UL > addr) 
                                                                #line 633 
                                                                tmp_1 = 1; else 
                                                                    #line 633 
                                                                    tmp_1 = 0;
  }
  else 
       #line 633 
       tmp_1 = 0;
  #line 633 
  return (_Bool)(tmp_1 != 0);
}

#line 1431  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
#line 1431 
void pci_disable_msi(struct pci_dev *);
#line 1433 
#line 1433 
void pci_disable_msix(struct pci_dev *);
#line 1436 
#line 1436 
int pci_enable_msi(struct pci_dev *);
#line 1437 
#line 1437 
int pci_enable_msix_range(struct pci_dev *, struct msix_entry *, int, int);
#line 1833  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static void *pci_get_drvdata(struct pci_dev *pdev)
{
  #line 1835 
  return dev_get_drvdata(& pdev->dev);
}

#line 1838  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static void pci_set_drvdata(struct pci_dev *pdev, void *data)
{
  #line 1840 
  dev_set_drvdata(& pdev->dev,data);
  #line 1841 
  return;
}

#line 1843  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci.h"
__inline static char *pci_name(struct pci_dev *pdev)
{
  #line 1845 
  return dev_name(& pdev->dev);
}

#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-debug.h"
#line 21 
void debug_dma_map_single(struct device *, void *, unsigned long);
#line 24 
#line 24 
void debug_dma_map_page(struct device *, struct page *, size_t, size_t, int, dma_addr_t);
#line 28 
#line 28 
void debug_dma_mapping_error(struct device *, dma_addr_t);
#line 30 
#line 30 
void debug_dma_unmap_page(struct device *, dma_addr_t, size_t, int);
#line 143  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static int valid_dma_direction(int dma_direction)
{
  #line 146 
  return (unsigned int)dma_direction <= 2U;
}

#line 191  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static bool dma_is_direct(struct dma_map_ops *ops_0)
{
  #line 193 
  return (_Bool)((long)(ops_0 == (struct dma_map_ops *)0) != 0L);
}

#line 200 
#line 200 
dma_addr_t dma_direct_map_page(struct device *, struct page *, unsigned long, size_t, enum dma_data_direction, unsigned long);
#line 228 
#line 228 
void dma_direct_unmap_page(struct device *, dma_addr_t, size_t, enum dma_data_direction, unsigned long);
#line 19  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/dma-mapping.h"
#line 19 
extern struct dma_map_ops *dma_ops;
#line 21  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/arch/x86/include/asm/dma-mapping.h"
__inline static struct dma_map_ops *get_arch_dma_ops(struct bus_type *bus)
{
  #line 23 
  return dma_ops;
}

#line 261  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static struct dma_map_ops *get_dma_ops(struct device *dev)
{
  #line 263 
  if (dev->dma_ops != (struct dma_map_ops *)0) 
                                               #line 264 
                                               return dev->dma_ops;
  #line 265 
  return get_arch_dma_ops(dev->bus);
}

#line 274  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static dma_addr_t dma_map_page_attrs(struct device *dev, struct page *page, size_t offset, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 279 
  dma_addr_t addr;
  #line 278 
  struct dma_map_ops *ops_0 = get_dma_ops(dev);
  #line 281 
  if ((long)(valid_dma_direction((int)dir) == 0) != 0L) {
    #line 282 
    ldv_inline_asm();
    #line 283 
    ldv_inline_asm();
    #line 284 
    ldv_inline_asm();
    #line 281 
    ;
  }
  #line 282 
  if ((int)dma_is_direct(ops_0) != 0) 
                                      #line 283 
                                      addr = dma_direct_map_page(dev,page,offset,size,dir,attrs); else 
                                                                    #line 285 
                                                                    addr = (*(ops_0->map_page))(dev,page,offset,size,dir,attrs);
  #line 286 
  debug_dma_map_page(dev,page,offset,size,(int)dir,addr);
  #line 288 
  return addr;
}

#line 291  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_unmap_page_attrs(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 294 
  struct dma_map_ops *ops_0 = get_dma_ops(dev);
  #line 296 
  if ((long)(valid_dma_direction((int)dir) == 0) != 0L) {
    #line 297 
    ldv_inline_asm();
    #line 298 
    ldv_inline_asm();
    #line 299 
    ldv_inline_asm();
    #line 296 
    ;
  }
  #line 297 
  if ((int)dma_is_direct(ops_0) != 0) 
                                      #line 298 
                                      dma_direct_unmap_page(dev,addr,size,dir,attrs);
  else 
    #line 299 
    if (ops_0->unmap_page != (void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , unsigned long ))0) 
      #line 300 
      (*(ops_0->unmap_page))(dev,addr,size,dir,attrs);
  #line 301 
  debug_dma_unmap_page(dev,addr,size,(int)dir);
  #line 302 
  return;
}

#line 433  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static int dma_mapping_error(struct device *dev, dma_addr_t dma_addr)
{
  #line 435 
  debug_dma_mapping_error(dev,dma_addr);
  #line 437 
  if (dma_addr == 18446744073709551615ULL) 
                                           #line 438 
                                           return -12;
  #line 439 
  return 0;
}

#line 442 
#line 442 
void *dma_alloc_attrs(struct device *, size_t, dma_addr_t *, gfp_t, unsigned long);
#line 444 
#line 444 
void dma_free_attrs(struct device *, size_t, void *, dma_addr_t, unsigned long);
#line 460 
#line 460 
int dma_set_mask(struct device *, u64);
#line 461 
#line 461 
int dma_set_coherent_mask(struct device *, u64);
#line 580  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static dma_addr_t dma_map_single_attrs(struct device *dev, void *ptr, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 584 
  int __ret_warn_once;
  {
    #line 584 
    bool __warned;
    #line 584 
    __ret_warn_once = (int)is_vmalloc_addr(ptr) != 0;
    #line 584 
    if ((long)(__ret_warn_once != 0) != 0L && (long)(! __warned) != 0L) {
      #line 584 
      __warned = (_Bool)1;
      {
        #line 584 
        int __ret_warn_on = 1;
        #line 584 
        if ((long)(__ret_warn_on != 0) != 0L) {
          #line 584 
          __warn_printk((char *)"%s %s: ",dev_driver_string(dev),dev_name(dev));
          #line 585 
          ldv_inline_asm();
          #line 586 
          ldv_inline_asm();
        }
        #line 584 
        long tmp_2 = (long)(__ret_warn_on != 0);
      }
    }
    }
  #line 584 
  if ((long)((long)(__ret_warn_once != 0)) != 0L) 
                                                  #line 586 
                                                  return 18446744073709551615ULL;
  #line 587 
  debug_dma_map_single(dev,ptr,size);
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  ;
  #line 588 
  return dma_map_page_attrs(dev,
                           (struct page *)((__phys_addr((unsigned long)ptr) >> 12) + vmemmap_base),
                           (unsigned long)ptr & 4095UL,size,dir,attrs);
}

#line 592  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_unmap_single_attrs(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir, unsigned long attrs)
{
  #line 595 
  dma_unmap_page_attrs(dev,addr,size,dir,attrs);
  #line 596 
  return;
}

#line 641  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void *dma_alloc_coherent(struct device *dev, size_t size, dma_addr_t *dma_handle, gfp_t gfp)
{
  #line 645 
  return dma_alloc_attrs(dev,size,dma_handle,gfp,
                      (unsigned long)(gfp >> 5) & 256UL);
}

#line 649  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dma-mapping.h"
__inline static void dma_free_coherent(struct device *dev, size_t size, void *cpu_addr, dma_addr_t dma_handle)
{
  #line 652 
  dma_free_attrs(dev,size,cpu_addr,dma_handle,0UL);
  #line 653 
  return;
}

#line 113  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci-dma-compat.h"
__inline static int pci_set_dma_mask(struct pci_dev *dev, u64 mask)
{
  #line 115 
  return dma_set_mask(& dev->dev,mask);
}

#line 118  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/pci-dma-compat.h"
__inline static int pci_set_consistent_dma_mask(struct pci_dev *dev, u64 mask)
{
  #line 120 
  return dma_set_coherent_mask(& dev->dev,mask);
}

#line 6  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/asm-generic/delay.h"
#line 6 
void __bad_udelay(void);
#line 9 
#line 9 
void __udelay(unsigned long);
#line 11 
#line 11 
void __const_udelay(unsigned long);
#line 59  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/delay.h"
#line 59 
void msleep(unsigned int);
#line 61 
#line 61 
void usleep_range(unsigned long, unsigned long);
#line 73  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
__inline static void dql_queued(struct dql *dql, unsigned int count)
{
  #line 75 
  if ((long)(count > 268435455U) != 0L) {
    #line 76 
    ldv_inline_asm();
    #line 77 
    ldv_inline_asm();
    #line 78 
    ldv_inline_asm();
    #line 75 
    ;
  }
  #line 77 
  dql->last_obj_cnt = count;
  #line 78 
  ldv_inline_asm();
  #line 86 
  dql->num_queued += count;
  #line 87 
  return;
}

#line 90  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/dynamic_queue_limits.h"
__inline static int dql_avail(struct dql *dql)
{
  #line 93 
  union __anonunion___u_459 __u_0;
  #line 93 
  union __anonunion___u_457 __u;
  #line 92 
  unsigned int tmp;
  #line 92 
  __read_once_size((void *)(& dql->adj_limit),(void *)(& __u.__c),4);
  #line 92 
  tmp = __u.__val;
  #line 92 
  __read_once_size((void *)(& dql->num_queued),(void *)(& __u_0.__c),4);
  #line 92 
  return (int)(tmp - (__u_0.__val));
}

#line 96 
#line 96 
void dql_completed(struct dql *, unsigned int);
#line 99 
#line 99 
void dql_reset(struct dql *);
#line 38  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/random.h"
#line 38 
void get_random_bytes(void *, int);
#line 325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned int skb_frag_size(skb_frag_t *frag)
{
  #line 327 
  return frag->bv_len;
}

#line 1019 
#line 1019 
void kfree_skb(struct sk_buff *);
#line 1023 
#line 1023 
void consume_skb(struct sk_buff *);
#line 1381  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned char *skb_end_pointer(struct sk_buff *skb)
{
  #line 1383 
  return skb->head + (unsigned long)skb->end;
}

#line 2065  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static bool skb_is_nonlinear(struct sk_buff *skb)
{
  #line 2067 
  return (_Bool)(skb->data_len != 0U);
}

#line 2070  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned int skb_headlen(struct sk_buff *skb)
{
  #line 2072 
  return skb->len - skb->data_len;
}

#line 2189 
#line 2189 
void *skb_put(struct sk_buff *, unsigned int);
#line 2310  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static int skb_tailroom(struct sk_buff *skb)
{
  #line 2312 
  int tmp_0;
  #line 2312 
  if ((int)skb_is_nonlinear(skb) == 0) 
                                       #line 2312 
                                       tmp_0 = (int)(skb->end - skb->tail); else 
                                                                    #line 2312 
                                                                    tmp_0 = 0;
  #line 2312 
  return tmp_0;
}

#line 2762 
#line 2762 
struct sk_buff *__netdev_alloc_skb(struct net_device *, unsigned int, gfp_t);
#line 2778  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static struct sk_buff *netdev_alloc_skb(struct net_device *dev, unsigned int length)
{
  #line 2781 
  return __netdev_alloc_skb(dev,length,2592U);
}

#line 2896  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static unsigned int skb_frag_off(skb_frag_t *frag)
{
  #line 2898 
  return frag->bv_offset;
}

#line 2938  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static struct page *skb_frag_page(skb_frag_t *frag)
{
  #line 2940 
  return frag->bv_page;
}

#line 3067  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static dma_addr_t skb_frag_dma_map(struct device *dev, skb_frag_t *frag, size_t offset, size_t size, enum dma_data_direction dir)
{
  #line 3072 
  ;
  #line 3072 
  ;
  #line 3072 
  ;
  #line 3072 
  ;
  #line 3072 
  return dma_map_page_attrs(dev,skb_frag_page(frag),
                           (unsigned long)skb_frag_off(frag) + offset,size,
                           dir,0UL);
}

#line 3767 
#line 3767 
void skb_clone_tx_timestamp(struct sk_buff *);
#line 3813 
#line 3813 
void skb_tstamp_tx(struct sk_buff *, struct skb_shared_hwtstamps *);
#line 3828  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static void skb_tx_timestamp(struct sk_buff *skb)
{
  #line 3830 
  skb_clone_tx_timestamp(skb);
  #line 3831 
  ;
  #line 3831 
  if (((int)((struct skb_shared_info *)skb_end_pointer(skb))->tx_flags & 2) != 0) 
    #line 3832 
    skb_tstamp_tx(skb,(struct skb_shared_hwtstamps *)0);
  #line 3833 
  return;
}

#line 4390  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/skbuff.h"
__inline static bool skb_is_gso(struct sk_buff *skb)
{
  #line 4392 
  ;
  #line 4392 
  return (_Bool)((unsigned int)((struct skb_shared_info *)skb_end_pointer(skb))->gso_size != 0U);
}

#line 86  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/ethtool.h"
#line 86 
u32 ethtool_op_get_link(struct net_device *);
#line 87 
#line 87 
int ethtool_op_get_ts_info(struct net_device *, struct ethtool_ts_info *);
#line 173 
#line 173 
void ethtool_convert_legacy_u32_to_link_mode(unsigned long *, u32);
#line 177 
#line 177 
bool ethtool_convert_link_mode_to_legacy_u32(u32 *, unsigned long *);
#line 115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/u64_stats_sync.h"
__inline static void u64_stats_init(struct u64_stats_sync *syncp)
{
  #line 117 
  return;
}

#line 158  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/u64_stats_sync.h"
__inline static unsigned int __u64_stats_fetch_begin(struct u64_stats_sync *syncp)
{
  #line 163 
  return 0U;
}

#line 175  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/u64_stats_sync.h"
__inline static bool __u64_stats_fetch_retry(struct u64_stats_sync *syncp, unsigned int start)
{
  #line 181 
  return (_Bool)0;
}

#line 200  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/u64_stats_sync.h"
__inline static unsigned int u64_stats_fetch_begin_irq(struct u64_stats_sync *syncp)
{
  #line 205 
  return __u64_stats_fetch_begin(syncp);
}

#line 208  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/u64_stats_sync.h"
__inline static bool u64_stats_fetch_retry_irq(struct u64_stats_sync *syncp, unsigned int start)
{
  #line 214 
  return __u64_stats_fetch_retry(syncp,start);
}

#line 423  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 423 
void __napi_schedule(struct napi_struct *);
#line 431 
#line 431 
bool napi_schedule_prep(struct napi_struct *);
#line 440  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void napi_schedule(struct napi_struct *n)
{
  #line 442 
  if ((int)napi_schedule_prep(n) != 0) 
                                       #line 443 
                                       __napi_schedule(n);
  #line 444 
  return;
}

#line 468 
#line 468 
bool napi_complete_done(struct napi_struct *, int);
#line 477  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool napi_complete(struct napi_struct *n)
{
  #line 479 
  return napi_complete_done(n,0);
}

#line 503 
#line 503 
void napi_disable(struct napi_struct *);
#line 512  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void napi_enable(struct napi_struct *n)
{
  #line 514 
  int tmp_0;
  #line 514 
  if (test_bit(0L,& n->state)) 
                               #line 514 
                               tmp_0 = 0; else 
                                               #line 514 
                                               tmp_0 = 1;
  #line 514 
  if ((long)tmp_0 != 0L) {
    #line 515 
    ldv_inline_asm();
    #line 516 
    ldv_inline_asm();
    #line 517 
    ldv_inline_asm();
    #line 514 
    ;
  }
  #line 516 
  cif_clear_bit(0L,& n->state);
  #line 517 
  cif_clear_bit(3L,& n->state);
  #line 518 
  return;
}

#line 2132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static struct netdev_queue *netdev_get_tx_queue(struct net_device *dev, unsigned int index)
{
  #line 2135 
  return dev->_tx + (unsigned long)index;
}

#line 2203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void *netdev_priv(struct net_device *dev)
{
  #line 2205 
  return (void *)((char *)dev + 3328UL);
}

#line 2234 
#line 2234 
void netif_napi_add(struct net_device *, struct napi_struct *, int (*)(struct napi_struct *, int ), int);
#line 2679 
#line 995  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/0/concurrency safety/weaver/forcedeth.i.aux"
static void cif_free_netdev(struct net_device *dev);
#line 3094  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 3094 
void netif_schedule_queue(struct netdev_queue *);
#line 3104  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_start_queue(struct netdev_queue *dev_queue)
{
  #line 3106 
  cif_clear_bit(0L,& dev_queue->state);
  #line 3107 
  return;
}

#line 3115  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_start_queue(struct net_device *dev)
{
  #line 3117 
  netif_tx_start_queue(netdev_get_tx_queue(dev,0U));
  #line 3118 
  return;
}

#line 3130 
#line 3130 
void netif_tx_wake_queue(struct netdev_queue *);
#line 3139  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_wake_queue(struct net_device *dev)
{
  #line 3141 
  netif_tx_wake_queue(netdev_get_tx_queue(dev,0U));
  #line 3142 
  return;
}

#line 3154  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_stop_queue(struct netdev_queue *dev_queue)
{
  #line 3156 
  cif_set_bit(0L,& dev_queue->state);
  #line 3157 
  return;
}

#line 3166  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_stop_queue(struct net_device *dev)
{
  #line 3168 
  netif_tx_stop_queue(netdev_get_tx_queue(dev,0U));
  #line 3169 
  return;
}

#line 3174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netif_tx_queue_stopped(struct netdev_queue *dev_queue)
{
  #line 3176 
  return test_bit(0L,& dev_queue->state);
}

#line 3185  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netif_queue_stopped(struct net_device *dev)
{
  #line 3187 
  return netif_tx_queue_stopped(netdev_get_tx_queue(dev,0U));
}

#line 3235  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netdev_tx_sent_queue(struct netdev_queue *dev_queue, unsigned int bytes)
{
  #line 3239 
  dql_queued(& dev_queue->dql,bytes);
  #line 3241 
  if ((long)(dql_avail(& dev_queue->dql) >= 0) != 0L) 
                                                      #line 3242 
                                                      return;
  #line 3244 
  cif_set_bit(1L,& dev_queue->state);
  #line 3245 
  ldv_inline_asm();
  #line 3254 
  if ((long)(dql_avail(& dev_queue->dql) >= 0) != 0L) 
                                                      #line 3255 
                                                      cif_clear_bit(1L,& dev_queue->state);
  #line 3256 
  return;
}

#line 3288  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netdev_sent_queue(struct net_device *dev, unsigned int bytes)
{
  #line 3290 
  ;
  #line 3290 
  netdev_tx_sent_queue(netdev_get_tx_queue(dev,0U),bytes);
  #line 3291 
  return;
}

#line 3301  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netdev_tx_completed_queue(struct netdev_queue *dev_queue, unsigned int pkts, unsigned int bytes)
{
  #line 3305 
  if ((long)(bytes == 0U) != 0L) 
                                 #line 3306 
                                 return;
  #line 3308 
  dql_completed(& dev_queue->dql,bytes);
  #line 3309 
  ldv_inline_asm();
  #line 3317 
  if ((long)(dql_avail(& dev_queue->dql) < 0) != 0L) 
                                                     #line 3318 
                                                     return;
  #line 3320 
  if ((int)test_and_clear_bit(1L,& dev_queue->state) != 0) 
                                                           #line 3321 
                                                           netif_schedule_queue(dev_queue);
  #line 3322 
  return;
}

#line 3335  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netdev_completed_queue(struct net_device *dev, unsigned int pkts, unsigned int bytes)
{
  #line 3338 
  ;
  #line 3338 
  ;
  #line 3338 
  netdev_tx_completed_queue(netdev_get_tx_queue(dev,0U),pkts,bytes);
  #line 3339 
  return;
}

#line 3341  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netdev_tx_reset_queue(struct netdev_queue *q)
{
  #line 3344 
  cif_clear_bit(1L,& q->state);
  #line 3345 
  dql_reset(& q->dql);
  #line 3346 
  return;
}

#line 3356  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netdev_reset_queue(struct net_device *dev_queue)
{
  #line 3358 
  netdev_tx_reset_queue(netdev_get_tx_queue(dev_queue,0U));
  #line 3359 
  return;
}

#line 3387  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netif_running(struct net_device *dev)
{
  #line 3389 
  return test_bit(0L,& dev->state);
}

#line 3617 
#line 3617 
void __dev_kfree_skb_any(struct sk_buff *, enum skb_free_reason);
#line 3648  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void dev_kfree_skb_any(struct sk_buff *skb)
{
  #line 3650 
  __dev_kfree_skb_any(skb,(enum skb_free_reason)SKB_REASON_DROPPED);
  #line 3651 
  return;
}

#line 3665 
#line 3665 
gro_result_t napi_gro_receive(struct napi_struct *, struct sk_buff *);
#line 3803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netif_carrier_ok(struct net_device *dev)
{
  #line 3805 
  int tmp_0;
  #line 3805 
  if ((int)test_bit(2L,& dev->state) != 0) 
                                           #line 3805 
                                           tmp_0 = 0; else 
                                                           #line 3805 
                                                           tmp_0 = 1;
  #line 3805 
  return (_Bool)(tmp_0 != 0);
}

#line 3812 
#line 3812 
void netif_carrier_on(struct net_device *);
#line 3814 
#line 3814 
void netif_carrier_off(struct net_device *);
#line 3881 
#line 3881 
void netif_device_detach(struct net_device *);
#line 3883 
#line 3883 
void netif_device_attach(struct net_device *);
#line 3934  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void __netif_tx_lock(struct netdev_queue *txq, int cpu)
{
  #line 3936 
  cif_spin_lock__xmit_lock_of_netdev_queue(& txq->_xmit_lock);
  #line 3937 
  txq->xmit_lock_owner = cpu;
  #line 3938 
  return;
}

#line 3965  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void __netif_tx_unlock(struct netdev_queue *txq)
{
  #line 3967 
  txq->xmit_lock_owner = -1;
  #line 3968 
  cif_spin_unlock__xmit_lock_of_netdev_queue(& txq->_xmit_lock);
  #line 3969 
  return;
}

#line 3998  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_lock(struct net_device *dev)
{
  #line 4004 
  int pscr_ret__;
  #line 4000 
  unsigned int i;
  #line 4001 
  int cpu;
  #line 4003 
  cif_spin_lock_tx_global_lock_of_net_device(& dev->tx_global_lock);
  #line 4004 
  __this_cpu_preempt_check((char *)"read");
  {
    #line 4004 
    void *__vpp_verify = (void *)0;
    #line 4004 
    void *tmp = __vpp_verify;
  }
  #line 4004 
  switch (4UL) {
    #line 4004 
    int pfo_ret___0;
    #line 4004 
    int pfo_ret___1;
    #line 4004 
    int pfo_ret___2;
    #line 4004 
    int pfo_ret__;
    #line 4004 
    case (unsigned long)1: 
                           #line 4004 
    ;
    #line 4004 
    switch (4UL) {
      #line 4004 
      case (unsigned long)1: 
                             #line 4004 
      ;
      #line 4005 
      ldv_inline_asm();
      #line 4004 
      break;
      #line 4004 
      case (unsigned long)2: 
                             #line 4004 
      ;
      #line 4005 
      ldv_inline_asm();
      #line 4004 
      break;
      #line 4004 
      case (unsigned long)4: 
                             #line 4004 
      ;
      #line 4005 
      ldv_inline_asm();
      #line 4004 
      break;
      #line 4004 
      case (unsigned long)8: 
                             #line 4004 
      ;
      #line 4005 
      ldv_inline_asm();
      #line 4004 
      break;
      #line 4004 
      default: 
               #line 4004 
      ;
      #line 4004 
      __bad_percpu_size();
    }
    #line 4004 
    pscr_ret__ = pfo_ret__;
    #line 4004 
    break;
    #line 4004 
    case (unsigned long)2: 
                           #line 4004 
    ;
    #line 4004 
    switch (4UL) {
      #line 4004 
      case (unsigned long)1: 
                             #line 4004 
      ;
      #line 4005 
      ldv_inline_asm();
      #line 4004 
      break;
      #line 4004 
      case (unsigned long)2: 
                             #line 4004 
      ;
      #line 4005 
      ldv_inline_asm();
      #line 4004 
      break;
      #line 4004 
      case (unsigned long)4: 
                             #line 4004 
      ;
      #line 4005 
      ldv_inline_asm();
      #line 4004 
      break;
      #line 4004 
      case (unsigned long)8: 
                             #line 4004 
      ;
      #line 4005 
      ldv_inline_asm();
      #line 4004 
      break;
      #line 4004 
      default: 
               #line 4004 
      ;
      #line 4004 
      __bad_percpu_size();
    }
    #line 4004 
    pscr_ret__ = pfo_ret___0;
    #line 4004 
    break;
    #line 4004 
    case (unsigned long)4: 
                           #line 4004 
    ;
    #line 4004 
    switch (4UL) {
      #line 4004 
      case (unsigned long)1: 
                             #line 4004 
      ;
      #line 4005 
      ldv_inline_asm();
      #line 4004 
      break;
      #line 4004 
      case (unsigned long)2: 
                             #line 4004 
      ;
      #line 4005 
      ldv_inline_asm();
      #line 4004 
      break;
      #line 4004 
      case (unsigned long)4: 
                             #line 4004 
      ;
      #line 4005 
      ldv_inline_asm();
      #line 4004 
      break;
      #line 4004 
      case (unsigned long)8: 
                             #line 4004 
      ;
      #line 4005 
      ldv_inline_asm();
      #line 4004 
      break;
      #line 4004 
      default: 
               #line 4004 
      ;
      #line 4004 
      __bad_percpu_size();
    }
    #line 4004 
    pscr_ret__ = pfo_ret___1;
    #line 4004 
    break;
    #line 4004 
    case (unsigned long)8: 
                           #line 4004 
    ;
    #line 4004 
    switch (4UL) {
      #line 4004 
      case (unsigned long)1: 
                             #line 4004 
      ;
      #line 4005 
      ldv_inline_asm();
      #line 4004 
      break;
      #line 4004 
      case (unsigned long)2: 
                             #line 4004 
      ;
      #line 4005 
      ldv_inline_asm();
      #line 4004 
      break;
      #line 4004 
      case (unsigned long)4: 
                             #line 4004 
      ;
      #line 4005 
      ldv_inline_asm();
      #line 4004 
      break;
      #line 4004 
      case (unsigned long)8: 
                             #line 4004 
      ;
      #line 4005 
      ldv_inline_asm();
      #line 4004 
      break;
      #line 4004 
      default: 
               #line 4004 
      ;
      #line 4004 
      __bad_percpu_size();
    }
    #line 4004 
    pscr_ret__ = pfo_ret___2;
    #line 4004 
    break;
    #line 4004 
    default: 
             #line 4004 
    ;
    #line 4004 
    __bad_size_call_parameter();
    #line 4004 
    break;
  }
  #line 4004 
  cpu = pscr_ret__;
  #line 4005 
  i = 0U;
  #line 4005 
  while (dev->num_tx_queues > i) {
    {
      #line 4006 
      struct netdev_queue *txq = netdev_get_tx_queue(dev,i);
      #line 4014 
      __netif_tx_lock(txq,cpu);
      #line 4015 
      cif_set_bit(2L,& txq->state);
      #line 4016 
      __netif_tx_unlock(txq);
    }
    #line 4005 
    i ++;
  }
  #line 4018 
  return;
}

#line 4020  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_lock_bh(struct net_device *dev)
{
  #line 4022 
  local_bh_disable();
  #line 4023 
  netif_tx_lock(dev);
  #line 4024 
  return;
}

#line 4026  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_unlock(struct net_device *dev)
{
  #line 4028 
  unsigned int i;
  #line 4030 
  i = 0U;
  #line 4030 
  while (dev->num_tx_queues > i) {
    {
      #line 4031 
      struct netdev_queue *txq = netdev_get_tx_queue(dev,i);
      #line 4037 
      cif_clear_bit(2L,& txq->state);
      #line 4038 
      netif_schedule_queue(txq);
    }
    #line 4030 
    i ++;
  }
  #line 4040 
  cif_spin_unlock_tx_global_lock_of_net_device(& dev->tx_global_lock);
  #line 4041 
  return;
}

#line 4043  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_tx_unlock_bh(struct net_device *dev)
{
  #line 4045 
  netif_tx_unlock(dev);
  #line 4046 
  local_bh_enable();
  #line 4047 
  return;
}

#line 4087  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_addr_lock(struct net_device *dev)
{
  #line 4089 
  cif_spin_lock_addr_list_lock_of_net_device(& dev->addr_list_lock);
  #line 4090 
  return;
}

#line 4097  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static void netif_addr_unlock(struct net_device *dev)
{
  #line 4099 
  cif_spin_unlock_addr_list_lock_of_net_device(& dev->addr_list_lock);
  #line 4100 
  return;
}

#line 4131 
#line 987  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/0/concurrency safety/weaver/forcedeth.i.aux"
static int cif_register_netdev(struct net_device *dev);
#line 4132  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
#line 1003  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/0/concurrency safety/weaver/forcedeth.i.aux"
static void cif_unregister_netdev(struct net_device *dev);
#line 4452  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/netdevice.h"
__inline static bool netdev_xmit_more(void)
{
  #line 4454 
  u8 pscr_ret__;
  #line 4454 
  __this_cpu_preempt_check((char *)"read");
  {
    #line 4454 
    void *__vpp_verify = (void *)0;
    #line 4454 
    void *tmp = __vpp_verify;
  }
  #line 4454 
  switch (1UL) {
    #line 4454 
    u8 pfo_ret__;
    #line 4454 
    u8 pfo_ret___0;
    #line 4454 
    u8 pfo_ret___1;
    #line 4454 
    u8 pfo_ret___2;
    #line 4454 
    case (unsigned long)1: 
                           #line 4454 
    ;
    #line 4454 
    switch (1UL) {
      #line 4454 
      case (unsigned long)1: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)2: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)4: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)8: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      default: 
               #line 4454 
      ;
      #line 4454 
      __bad_percpu_size();
    }
    #line 4454 
    pscr_ret__ = pfo_ret__;
    #line 4454 
    break;
    #line 4454 
    case (unsigned long)2: 
                           #line 4454 
    ;
    #line 4454 
    switch (1UL) {
      #line 4454 
      case (unsigned long)1: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)2: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)4: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)8: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      default: 
               #line 4454 
      ;
      #line 4454 
      __bad_percpu_size();
    }
    #line 4454 
    pscr_ret__ = pfo_ret___0;
    #line 4454 
    break;
    #line 4454 
    case (unsigned long)4: 
                           #line 4454 
    ;
    #line 4454 
    switch (1UL) {
      #line 4454 
      case (unsigned long)1: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)2: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)4: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)8: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      default: 
               #line 4454 
      ;
      #line 4454 
      __bad_percpu_size();
    }
    #line 4454 
    pscr_ret__ = pfo_ret___1;
    #line 4454 
    break;
    #line 4454 
    case (unsigned long)8: 
                           #line 4454 
    ;
    #line 4454 
    switch (1UL) {
      #line 4454 
      case (unsigned long)1: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)2: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)4: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      case (unsigned long)8: 
                             #line 4454 
      ;
      #line 4455 
      ldv_inline_asm();
      #line 4454 
      break;
      #line 4454 
      default: 
               #line 4454 
      ;
      #line 4454 
      __bad_percpu_size();
    }
    #line 4454 
    pscr_ret__ = pfo_ret___2;
    #line 4454 
    break;
    #line 4454 
    default: 
             #line 4454 
    ;
    #line 4454 
    __bad_size_call_parameter();
    #line 4454 
    break;
  }
  #line 4454 
  return (_Bool)((unsigned int)pscr_ret__ != 0U);
}

#line 4752 
#line 4752 
void netdev_warn(struct net_device *, char * , ...);
#line 4756 
#line 4756 
void netdev_info(struct net_device *, char * , ...);
#line 32  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
#line 32 
__be16 eth_type_trans(struct sk_buff *, struct net_device *);
#line 47 
#line 47 
int eth_validate_addr(struct net_device *);
#line 51 
#line 979  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/0/concurrency safety/weaver/forcedeth.i.aux"
static struct net_device *cif_alloc_etherdev_mqs(int sizeof_priv, unsigned int txqs, unsigned int rxqs);
#line 98  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_zero_ether_addr(u8 *addr)
{
  #line 101 
  return (_Bool)((*((u32 *)addr) | (unsigned int)*((u16 *)(addr + 4U))) == 0U);
}

#line 116  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_multicast_ether_addr(u8 *addr)
{
  #line 119 
  u32 a = *((u32 *)addr);
  #line 126 
  return (_Bool)((a & 1U) != 0U);
}

#line 191  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static bool is_valid_ether_addr(u8 *addr)
{
  #line 195 
  int tmp_1;
  #line 195 
  if (is_multicast_ether_addr(addr)) 
                                     #line 195 
                                     tmp_1 = 0;
  else {
    #line 195 
    if (is_zero_ether_addr(addr)) 
                                  #line 195 
                                  tmp_1 = 0; else 
                                                  #line 195 
                                                  tmp_1 = 1;
  }
  #line 195 
  return (_Bool)(tmp_1 != 0);
}

#line 223  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static void eth_random_addr(u8 *addr)
{
  #line 225 
  get_random_bytes((void *)addr,6);
  #line 226 
  *addr = (unsigned char)((unsigned int)*addr & 254U);
  #line 227 
  *addr = (unsigned char)((unsigned int)*addr | 2U);
  #line 228 
  return;
}

#line 263  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/etherdevice.h"
__inline static void eth_hw_addr_random(struct net_device *dev)
{
  #line 265 
  dev->addr_assign_type = (unsigned char)1U;
  #line 266 
  eth_random_addr(dev->dev_addr);
  #line 267 
  return;
}

#line 510  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/linux/if_vlan.h"
__inline static void __vlan_hwaccel_put_tag(struct sk_buff *skb, __be16 vlan_proto, u16 vlan_tci)
{
  #line 513 
  skb->vlan_proto = vlan_proto;
  #line 514 
  skb->vlan_tci = vlan_tci;
  #line 515 
  skb->vlan_present = (unsigned char)1U;
  #line 516 
  return;
}

#line 597  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
static struct nv_ethtool_str nv_estats_str[33U] = {{.name = {(char)'t', (char)'x', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s'}}, {.name = {(char)'t', (char)'x', (char)'_', (char)'z', (char)'e', (char)'r', (char)'o', (char)'_', (char)'r', (char)'e', (char)'x', (char)'m', (char)'t'}}, {.name = {(char)'t', (char)'x', (char)'_', (char)'o', (char)'n', (char)'e', (char)'_', (char)'r', (char)'e', (char)'x', (char)'m', (char)'t'}}, {.name = {(char)'t', (char)'x', (char)'_', (char)'m', (char)'a', (char)'n', (char)'y', (char)'_', (char)'r', (char)'e', (char)'x', (char)'m', (char)'t'}}, {.name = {(char)'t', (char)'x', (char)'_', (char)'l', (char)'a', (char)'t', (char)'e', (char)'_', (char)'c', (char)'o', (char)'l', (char)'l', (char)'i', (char)'s', (char)'i', (char)'o', (char)'n'}}, {.name = {(char)'t', (char)'x', (char)'_', (char)'f', (char)'i', (char)'f', (char)'o', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}}, {.name = {(char)'t', (char)'x', (char)'_', (char)'c', (char)'a', (char)'r', (char)'r', (char)'i', (char)'e', (char)'r', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}}, {.name = {(char)'t', (char)'x', (char)'_', (char)'e', (char)'x', (char)'c', (char)'e', (char)'s', (char)'s', (char)'_', (char)'d', (char)'e', (char)'f', (char)'e', (char)'r', (char)'r', (char)'a', (char)'l'}}, {.name = {(char)'t', (char)'x', (char)'_', (char)'r', (char)'e', (char)'t', (char)'r', (char)'y', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r'}}, {.name = {(char)'r', (char)'x', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r'}}, {.name = {(char)'r', (char)'x', (char)'_', (char)'e', (char)'x', (char)'t', (char)'r', (char)'a', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e'}}, {.name = {(char)'r', (char)'x', (char)'_', (char)'l', (char)'a', (char)'t', (char)'e', (char)'_', (char)'c', (char)'o', (char)'l', (char)'l', (char)'i', (char)'s', (char)'i', (char)'o', (char)'n'}}, {.name = {(char)'r', (char)'x', (char)'_', (char)'r', (char)'u', (char)'n', (char)'t'}}, {.name = {(char)'r', (char)'x', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'_', (char)'t', (char)'o', (char)'o', (char)'_', (char)'l', (char)'o', (char)'n', (char)'g'}}, {.name = {(char)'r', (char)'x', (char)'_', (char)'o', (char)'v', (char)'e', (char)'r', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}}, {.name = {(char)'r', (char)'x', (char)'_', (char)'c', (char)'r', (char)'c', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s'}}, {.name = {(char)'r', (char)'x', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'_', (char)'a', (char)'l', (char)'i', (char)'g', (char)'n', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r'}}, {.name = {(char)'r', (char)'x', (char)'_', (char)'l', (char)'e', (char)'n', (char)'g', (char)'t', (char)'h', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r'}}, {.name = {(char)'r', (char)'x', (char)'_', (char)'u', (char)'n', (char)'i', (char)'c', (char)'a', (char)'s', (char)'t'}}, {.name = {(char)'r', (char)'x', (char)'_', (char)'m', (char)'u', (char)'l', (char)'t', (char)'i', (char)'c', (char)'a', (char)'s', (char)'t'}}, {.name = {(char)'r', (char)'x', (char)'_', (char)'b', (char)'r', (char)'o', (char)'a', (char)'d', (char)'c', (char)'a', (char)'s', (char)'t'}}, {.name = {(char)'r', (char)'x', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}}, {.name = {(char)'r', (char)'x', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s', (char)'_', (char)'t', (char)'o', (char)'t', (char)'a', (char)'l'}}, {.name = {(char)'t', (char)'x', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s', (char)'_', (char)'t', (char)'o', (char)'t', (char)'a', (char)'l'}}, {.name = {(char)'t', (char)'x', (char)'_', (char)'d', (char)'e', (char)'f', (char)'e', (char)'r', (char)'r', (char)'a', (char)'l'}}, {.name = {(char)'t', (char)'x', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s'}}, {.name = {(char)'r', (char)'x', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s'}}, {.name = {(char)'t', (char)'x', (char)'_', (char)'p', (char)'a', (char)'u', (char)'s', (char)'e'}}, {.name = {(char)'r', (char)'x', (char)'_', (char)'p', (char)'a', (char)'u', (char)'s', (char)'e'}}, {.name = {(char)'r', (char)'x', (char)'_', (char)'d', (char)'r', (char)'o', (char)'p', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e'}}, {.name = {(char)'t', (char)'x', (char)'_', (char)'u', (char)'n', (char)'i', (char)'c', (char)'a', (char)'s', (char)'t'}}, {.name = {(char)'t', (char)'x', (char)'_', (char)'m', (char)'u', (char)'l', (char)'t', (char)'i', (char)'c', (char)'a', (char)'s', (char)'t'}}, {.name = {(char)'t', (char)'x', (char)'_', (char)'b', (char)'r', (char)'o', (char)'a', (char)'d', (char)'c', (char)'a', (char)'s', (char)'t'}}};
#line 685  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
static struct nv_ethtool_str nv_etests_str[4U] = {{.name = {(char)'l', (char)'i', (char)'n', (char)'k', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)'(', (char)'o', (char)'n', (char)'l', (char)'i', (char)'n', (char)'e', (char)'/', (char)'o', (char)'f', (char)'f', (char)'l', (char)'i', (char)'n', (char)'e', (char)')'}}, {.name = {(char)'r', (char)'e', (char)'g', (char)'i', (char)'s', (char)'t', (char)'e', (char)'r', (char)' ', (char)' ', (char)'(', (char)'o', (char)'f', (char)'f', (char)'l', (char)'i', (char)'n', (char)'e', (char)')', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' '}}, {.name = {(char)'i', (char)'n', (char)'t', (char)'e', (char)'r', (char)'r', (char)'u', (char)'p', (char)'t', (char)' ', (char)'(', (char)'o', (char)'f', (char)'f', (char)'l', (char)'i', (char)'n', (char)'e', (char)')', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' '}}, {.name = {(char)'l', (char)'o', (char)'o', (char)'p', (char)'b', (char)'a', (char)'c', (char)'k', (char)' ', (char)' ', (char)'(', (char)'o', (char)'f', (char)'f', (char)'l', (char)'i', (char)'n', (char)'e', (char)')', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' '}}};
#line 697  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
static struct register_test nv_registers_test[7U] = {{.reg = 8U, .mask = 1U}, {.reg = 128U, .mask = 60U}, {.reg = 144U, .mask = 1023U}, {.reg = 176U, .mask = 4294967295U}, {.reg = 316U, .mask = 255U}, {.reg = 512U, .mask = 30583U}};
#line 862  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
static int max_interrupt_work = 4;
#line 875  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
static int optimization_mode = 2;
#line 884  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
static int poll_interval = -1;
#line 893  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
static int msi = 1;
#line 902  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
static int msix = 1;
#line 911  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
static int dma_64bit = 1;
#line 916  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
static bool debug_tx_timeout = (_Bool)0;
#line 926  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
static int phy_cross = 0;
#line 932  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
static int phy_power_down;
#line 934  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
__inline static struct fe_priv *get_nvpriv(struct net_device *dev)
{
  #line 936 
  return (struct fe_priv *)netdev_priv(dev);
}

#line 939  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
__inline static u8 *get_hwbase(struct net_device *dev)
{
  #line 941 
  return (u8 *)((struct fe_priv *)netdev_priv(dev))->base;
}

#line 944  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
__inline static void pci_push(u8 *base)
{
  #line 947 
  readl((void *)base);
  #line 948 
  return;
}

#line 950  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
__inline static u32 nv_descr_getlength(struct ring_desc *prd, u32 v)
{
  #line 953 
  unsigned int tmp;
  #line 953 
  if (v == 1U) 
               #line 953 
               tmp = 65535U; else 
                                  #line 953 
                                  tmp = 16383U;
  #line 952 
  ;
  #line 953 
  return prd->flaglen & tmp;
}

#line 956  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
__inline static u32 nv_descr_getlength_ex(struct ring_desc_ex *prd, u32 v)
{
  #line 958 
  return prd->flaglen & 16383U;
}

#line 961  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
static bool nv_optimized(struct fe_priv *np)
{
  #line 963 
  if (np->desc_ver + 4294967295U <= 1U) 
                                        #line 964 
                                        return (_Bool)0;
  #line 965 
  return (_Bool)1;
}

#line 968  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
static int reg_delay(struct net_device *dev, int offset, u32 mask, u32 target, int delay, int delaymax)
{
  #line 971 
  u8 *base = get_hwbase(dev);
  #line 973 
  pci_push(base);
  #line 974 
  while (1) {
    #line 975 
    if (0 != 0) 
      #line 975 
      if (delay > 19999) 
                         #line 975 
                         __bad_udelay(); else 
                                              #line 975 
                                              __const_udelay((unsigned long)delay * 4295UL);
    else 
         #line 975 
         __udelay((unsigned long)delay);
    #line 976 
    delaymax -= delay;
    #line 977 
    if (delaymax < 0) 
                      #line 978 
                      return 1;
    #line 979 
    ;
    #line 979 
    if (! ((readl((void *)(base + (unsigned long)offset)) & mask) != target)) 
      #line 974 
      break;
  }
  #line 980 
  return 0;
}

#line 986  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
__inline static u32 dma_low(dma_addr_t addr)
{
  #line 988 
  return (unsigned int)addr;
}

#line 991  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
__inline static u32 dma_high(dma_addr_t addr)
{
  #line 993 
  return (unsigned int)(addr >> 32);
}

#line 996  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
static void setup_hw_rings(struct net_device *dev, int rxtx_flags)
{
  #line 998 
  struct fe_priv *np = get_nvpriv(dev);
  #line 999 
  u8 *base = get_hwbase(dev);
  #line 1001 
  if (nv_optimized(np)) {
    #line 1007 
    if ((rxtx_flags & 1) != 0) {
      #line 1008 
      ;
      #line 1008 
      writel(dma_low(np->ring_addr),(void *)(base + 260U));
      #line 1009 
      ;
      #line 1009 
      writel(dma_high(np->ring_addr),(void *)(base + 332U));
    }
    #line 1011 
    if ((rxtx_flags & 2) != 0) {
      #line 1012 
      ;
      #line 1012 
      writel(dma_low(np->ring_addr + (unsigned long long)((unsigned long)np->rx_ring_size * 16UL)),(void *)(base + 256U));
      #line 1013 
      ;
      #line 1013 
      writel(dma_high(np->ring_addr + (unsigned long long)((unsigned long)np->rx_ring_size * 16UL)),(void *)(base + 328U));
    }
  }
  else {
    #line 1002 
    if ((rxtx_flags & 1) != 0) {
      #line 1003 
      ;
      #line 1003 
      writel(dma_low(np->ring_addr),(void *)(base + 260U));
    }
    #line 1004 
    if ((rxtx_flags & 2) != 0) {
      #line 1005 
      ;
      #line 1005 
      writel(dma_low(np->ring_addr + (unsigned long long)((unsigned long)np->rx_ring_size * 8UL)),(void *)(base + 256U));
    }
  }
  #line 1016 
  return;
}

#line 1018  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
static void free_rings(struct net_device *dev)
{
  #line 1020 
  struct fe_priv *np = get_nvpriv(dev);
  #line 1022 
  if (nv_optimized(np)) {
    #line 1030 
    if (np->rx_ring.ex != (struct ring_desc_ex *)0) 
                                                    #line 1031 
                                                    dma_free_coherent(& (np->pci_dev)->dev,(unsigned long)(np->rx_ring_size + np->tx_ring_size) * 16UL,(void *)np->rx_ring.ex,np->ring_addr);
  }
  else 
    #line 1023 
    if (np->rx_ring.orig != (struct ring_desc *)0) 
                                                   #line 1024 
                                                   dma_free_coherent(& (np->pci_dev)->dev,(unsigned long)(np->rx_ring_size + np->tx_ring_size) * 8UL,(void *)np->rx_ring.orig,np->ring_addr);
  #line 1037 
  kfree((void *)np->rx_skb);
  #line 1038 
  kfree((void *)np->tx_skb);
  #line 1039 
  return;
}

#line 1041  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
static int using_multi_irqs(struct net_device *dev)
{
  #line 1043 
  struct fe_priv *np = get_nvpriv(dev);
  #line 1045 
  if ((np->msi_flags & 128U) == 0U || (np->msi_flags & 15U) == 1U) 
                                                                   #line 1048 
                                                                   return 0; else 
                                                                    #line 1050 
                                                                    return 1;
}

#line 1053  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
static void nv_txrx_gate(struct net_device *dev, bool gate)
{
  #line 1057 
  u32 powerstate;
  #line 1055 
  struct fe_priv *np = get_nvpriv(dev);
  #line 1056 
  u8 *base = get_hwbase(dev);
  #line 1059 
  if (np->mac_in_use == 0U && (np->driver_data & 256U) != 0U) {
    #line 1061 
    powerstate = readl((void *)(base + 1536U));
    #line 1062 
    if ((int)gate != 0) 
                        #line 1063 
                        powerstate |= 3840U; else 
                                                  #line 1065 
                                                  powerstate &= 4294963455U;
    #line 1066 
    writel(powerstate,(void *)(base + 1536U));
  }
  #line 1068 
  return;
}

#line 1070  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
static void nv_enable_irq(struct net_device *dev)
{
  #line 1072 
  struct fe_priv *np = get_nvpriv(dev);
  #line 1074 
  if (using_multi_irqs(dev) == 0) 
    #line 1075 
    if ((np->msi_flags & 128U) != 0U) 
                                      #line 1076 
                                      enable_irq(np->msi_x_entry[0].vector); else 
                                                                    #line 1078 
                                                                    enable_irq((np->pci_dev)->irq);
  else {
    #line 1080 
    enable_irq(np->msi_x_entry[0].vector);
    #line 1081 
    enable_irq(np->msi_x_entry[1].vector);
    #line 1082 
    enable_irq(np->msi_x_entry[2].vector);
  }
  #line 1084 
  return;
}

#line 1086  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
static void nv_disable_irq(struct net_device *dev)
{
  #line 1088 
  struct fe_priv *np = get_nvpriv(dev);
  #line 1090 
  if (using_multi_irqs(dev) == 0) 
    #line 1091 
    if ((np->msi_flags & 128U) != 0U) 
                                      #line 1092 
                                      disable_irq(np->msi_x_entry[0].vector); else 
                                                                    #line 1094 
                                                                    disable_irq((np->pci_dev)->irq);
  else {
    #line 1096 
    disable_irq(np->msi_x_entry[0].vector);
    #line 1097 
    disable_irq(np->msi_x_entry[1].vector);
    #line 1098 
    disable_irq(np->msi_x_entry[2].vector);
  }
  #line 1100 
  return;
}

#line 1103  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
static void nv_enable_hw_interrupts(struct net_device *dev, u32 mask)
{
  #line 1105 
  u8 *base = get_hwbase(dev);
  #line 1107 
  writel(mask,(void *)(base + 4U));
  #line 1108 
  return;
}

#line 1110  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
static void nv_disable_hw_interrupts(struct net_device *dev, u32 mask)
{
  #line 1112 
  struct fe_priv *np = get_nvpriv(dev);
  #line 1113 
  u8 *base = get_hwbase(dev);
  #line 1115 
  if ((np->msi_flags & 128U) != 0U) 
                                    #line 1116 
                                    writel(mask,(void *)(base + 4U));
  else {
    #line 1118 
    if ((np->msi_flags & 64U) != 0U) 
                                     #line 1119 
                                     writel(0U,(void *)(base + 48U));
    #line 1120 
    writel(0U,(void *)(base + 4U));
  }
  #line 1122 
  return;
}

#line 1124  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
static void nv_napi_enable(struct net_device *dev)
{
  #line 1126 
  struct fe_priv *np = get_nvpriv(dev);
  #line 1128 
  napi_enable(& np->napi);
  #line 1129 
  return;
}

#line 1131  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
static void nv_napi_disable(struct net_device *dev)
{
  #line 1133 
  struct fe_priv *np = get_nvpriv(dev);
  #line 1135 
  napi_disable(& np->napi);
  #line 1136 
  return;
}

#line 1143  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
static int mii_rw(struct net_device *dev, int addr, int miireg, int value)
{
  #line 1146 
  u32 reg;
  #line 1147 
  int retval;
  #line 1145 
  u8 *base = get_hwbase(dev);
  #line 1149 
  writel(7U,(void *)(base + 384U));
  #line 1151 
  reg = readl((void *)(base + 400U));
  #line 1152 
  if ((reg & 32768U) != 0U) {
    #line 1153 
    writel(32768U,(void *)(base + 400U));
    #line 1154 
    __const_udelay(214750UL);
  }
  #line 1157 
  reg = (unsigned int)((addr << 5) | miireg);
  #line 1158 
  if (value != -1) {
    #line 1159 
    writel((unsigned int)value,(void *)(base + 404U));
    #line 1160 
    reg |= 1024U;
  }
  #line 1162 
  writel(reg,(void *)(base + 400U));
  #line 1164 
  if (reg_delay(dev,400,32768U,0U,10,10000) != 0) 
                                                  #line 1166 
                                                  retval = -1;
  else 
    #line 1167 
    if (value != -1) 
                     #line 1169 
                     retval = 0;
    else {
      #line 1170 
      if ((readl((void *)(base + 384U)) & 1U) != 0U) 
                                                     #line 1171 
                                                     retval = -1;
      else {
        #line 1173 
        retval = (int)readl((void *)(base + 404U));
      }
    }
  #line 1176 
  return retval;
}

#line 1179  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
static int phy_reset(struct net_device *dev, u32 bmcr_setup)
{
  #line 1182 
  u32 miicontrol;
  #line 1181 
  struct fe_priv *np = netdev_priv(dev);
  #line 1183 
  unsigned int tries = 0U;
  #line 1185 
  miicontrol = bmcr_setup | 32768U;
  #line 1186 
  if (mii_rw(dev,np->phyaddr,0,(int)miicontrol) != 0) 
                                                      #line 1187 
                                                      return -1;
  #line 1190 
  msleep(500U);
  #line 1193 
  while ((miicontrol & 32768U) != 0U) {
    #line 1197 
    unsigned int tmp_2;
    #line 1194 
    usleep_range(10000UL,20000UL);
    #line 1195 
    miicontrol = (unsigned int)mii_rw(dev,np->phyaddr,0,-1);
    #line 1197 
    tmp_2 = tries;
    #line 1197 
    tries ++;
    #line 1197 
    ;
    #line 1197 
    if (tmp_2 > 100U) 
                      #line 1198 
                      return -1;
  }
  #line 1200 
  return 0;
}

#line 1203  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
static int init_realtek_8211b(struct net_device *dev, struct fe_priv *np)
{
  #line 1217 
  int i;
  #line 1208 
  struct __anonstruct_ri_705 ri[7U] = {{.reg = 31, .init = 0}, {.reg = 25, .init = 36352}, {.reg = 31, .init = 1}, {.reg = 19, .init = 44311}, {.reg = 20, .init = 64340}, {.reg = 24, .init = 62919}, {.reg = 31, .init = 0}};
  #line 1219 
  i = 0;
  #line 1219 
  while ((unsigned int)i <= 6U) {
    #line 1220 
    if (mii_rw(dev,np->phyaddr,ri[i].reg,ri[i].init) != 0) 
                                                           #line 1221 
                                                           return 2;
    #line 1219 
    i ++;
  }
  #line 1224 
  return 0;
}

#line 1227  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
static int init_realtek_8211c(struct net_device *dev, struct fe_priv *np)
{
  #line 1229 
  u32 reg;
  #line 1230 
  u8 *base = get_hwbase(dev);
  #line 1231 
  u32 powerstate = readl((void *)(base + 1536U));
  #line 1234 
  powerstate |= 4U;
  #line 1235 
  writel(powerstate,(void *)(base + 1536U));
  #line 1236 
  msleep(25U);
  #line 1238 
  powerstate &= 4294967291U;
  #line 1239 
  writel(powerstate,(void *)(base + 1536U));
  #line 1240 
  msleep(25U);
  #line 1242 
  reg = (unsigned int)mii_rw(dev,np->phyaddr,17,-1);
  #line 1243 
  reg |= 8U;
  #line 1244 
  if (mii_rw(dev,np->phyaddr,17,(int)reg) != 0) 
                                                #line 1245 
                                                return 2;
  #line 1246 
  if (mii_rw(dev,np->phyaddr,31,5) != 0) 
                                         #line 1248 
                                         return 2;
  #line 1249 
  reg = (unsigned int)mii_rw(dev,np->phyaddr,1,-1);
  #line 1250 
  if ((reg & 512U) == 0U) {
    #line 1251 
    reg |= 512U;
    #line 1252 
    if (mii_rw(dev,np->phyaddr,1,(int)reg) != 0) 
                                                 #line 1253 
                                                 return 2;
  }
  #line 1255 
  if (mii_rw(dev,np->phyaddr,31,0) != 0) 
                                         #line 1257 
                                         return 2;
  #line 1259 
  return 0;
}

#line 1262  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
static int init_realtek_8201(struct net_device *dev, struct fe_priv *np)
{
  #line 1264 
  u32 phy_reserved;
  #line 1266 
  if ((np->driver_data & 4194304U) != 0U) {
    #line 1267 
    phy_reserved = (unsigned int)mii_rw(dev,np->phyaddr,17,-1);
    #line 1269 
    phy_reserved |= 4096U;
    #line 1270 
    if (mii_rw(dev,np->phyaddr,17,(int)phy_reserved) != 0) 
                                                           #line 1272 
                                                           return 2;
  }
  #line 1275 
  return 0;
}

#line 1278  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
static int init_realtek_8201_cross(struct net_device *dev, struct fe_priv *np)
{
  #line 1280 
  u32 phy_reserved;
  #line 1282 
  if (phy_cross == 0) {
    #line 1283 
    if (mii_rw(dev,np->phyaddr,31,1) != 0) 
                                           #line 1285 
                                           return 2;
    #line 1286 
    phy_reserved = (unsigned int)mii_rw(dev,np->phyaddr,25,-1);
    #line 1288 
    phy_reserved &= 4294967292U;
    #line 1289 
    phy_reserved |= 1U;
    #line 1290 
    if (mii_rw(dev,np->phyaddr,25,(int)phy_reserved) != 0) 
                                                           #line 1292 
                                                           return 2;
    #line 1293 
    if (mii_rw(dev,np->phyaddr,31,0) != 0) 
                                           #line 1295 
                                           return 2;
  }
  #line 1298 
  return 0;
}

#line 1301  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
static int init_cicada(struct net_device *dev, struct fe_priv *np, u32 phyinterface)
{
  #line 1304 
  u32 phy_reserved;
  #line 1306 
  if ((phyinterface & 268435456U) != 0U) {
    #line 1307 
    phy_reserved = (unsigned int)mii_rw(dev,np->phyaddr,23,-1);
    #line 1308 
    phy_reserved &= 4294902271U;
    #line 1309 
    phy_reserved |= 4608U;
    #line 1310 
    if (mii_rw(dev,np->phyaddr,23,(int)phy_reserved) != 0) 
                                                           #line 1311 
                                                           return 2;
    #line 1312 
    phy_reserved = (unsigned int)mii_rw(dev,np->phyaddr,28,-1);
    #line 1313 
    phy_reserved |= 4U;
    #line 1314 
    if (mii_rw(dev,np->phyaddr,28,(int)phy_reserved) != 0) 
                                                           #line 1315 
                                                           return 2;
  }
  #line 1317 
  phy_reserved = (unsigned int)mii_rw(dev,np->phyaddr,22,-1);
  #line 1318 
  phy_reserved |= 8192U;
  #line 1319 
  if (mii_rw(dev,np->phyaddr,22,(int)phy_reserved) != 0) 
                                                         #line 1320 
                                                         return 2;
  #line 1322 
  return 0;
}

#line 1325  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
static int init_vitesse(struct net_device *dev, struct fe_priv *np)
{
  #line 1327 
  u32 phy_reserved;
  #line 1329 
  if (mii_rw(dev,np->phyaddr,31,21173) != 0) 
                                             #line 1331 
                                             return 2;
  #line 1332 
  if (mii_rw(dev,np->phyaddr,16,44938) != 0) 
                                             #line 1334 
                                             return 2;
  #line 1335 
  phy_reserved = (unsigned int)mii_rw(dev,np->phyaddr,18,-1);
  #line 1337 
  if (mii_rw(dev,np->phyaddr,18,(int)phy_reserved) != 0) 
                                                         #line 1338 
                                                         return 2;
  #line 1339 
  phy_reserved = (unsigned int)mii_rw(dev,np->phyaddr,17,-1);
  #line 1341 
  phy_reserved &= 4294967283U;
  #line 1342 
  phy_reserved |= 8U;
  #line 1343 
  if (mii_rw(dev,np->phyaddr,17,(int)phy_reserved) != 0) 
                                                         #line 1344 
                                                         return 2;
  #line 1345 
  if (mii_rw(dev,np->phyaddr,16,36746) != 0) 
                                             #line 1347 
                                             return 2;
  #line 1348 
  if (mii_rw(dev,np->phyaddr,16,44934) != 0) 
                                             #line 1350 
                                             return 2;
  #line 1351 
  phy_reserved = (unsigned int)mii_rw(dev,np->phyaddr,18,-1);
  #line 1353 
  phy_reserved &= 4294967283U;
  #line 1354 
  phy_reserved |= 8U;
  #line 1355 
  if (mii_rw(dev,np->phyaddr,18,(int)phy_reserved) != 0) 
                                                         #line 1356 
                                                         return 2;
  #line 1357 
  phy_reserved = (unsigned int)mii_rw(dev,np->phyaddr,17,-1);
  #line 1359 
  if (mii_rw(dev,np->phyaddr,17,(int)phy_reserved) != 0) 
                                                         #line 1360 
                                                         return 2;
  #line 1361 
  if (mii_rw(dev,np->phyaddr,16,36742) != 0) 
                                             #line 1363 
                                             return 2;
  #line 1364 
  if (mii_rw(dev,np->phyaddr,16,44930) != 0) 
                                             #line 1366 
                                             return 2;
  #line 1367 
  phy_reserved = (unsigned int)mii_rw(dev,np->phyaddr,18,-1);
  #line 1369 
  if (mii_rw(dev,np->phyaddr,18,(int)phy_reserved) != 0) 
                                                         #line 1370 
                                                         return 2;
  #line 1371 
  phy_reserved = (unsigned int)mii_rw(dev,np->phyaddr,17,-1);
  #line 1373 
  phy_reserved &= 4294966911U;
  #line 1374 
  phy_reserved |= 256U;
  #line 1375 
  if (mii_rw(dev,np->phyaddr,17,(int)phy_reserved) != 0) 
                                                         #line 1376 
                                                         return 2;
  #line 1377 
  if (mii_rw(dev,np->phyaddr,16,36738) != 0) 
                                             #line 1379 
                                             return 2;
  #line 1380 
  if (mii_rw(dev,np->phyaddr,31,0) != 0) 
                                         #line 1382 
                                         return 2;
  #line 1384 
  return 0;
}

#line 1387  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
static int phy_init(struct net_device *dev)
{
  #line 1391 
  u32 phyinterface;
  #line 1392 
  u32 mii_status;
  #line 1392 
  u32 mii_control;
  #line 1392 
  u32 mii_control_1000;
  #line 1392 
  u32 reg;
  #line 1389 
  struct fe_priv *np = get_nvpriv(dev);
  #line 1390 
  u8 *base = get_hwbase(dev);
  #line 1395 
  if (np->phy_model == 544U) {
    #line 1396 
    reg = (unsigned int)mii_rw(dev,np->phyaddr,28,-1);
    #line 1397 
    reg &= 4294966527U;
    #line 1398 
    if (mii_rw(dev,np->phyaddr,28,(int)reg) != 0) {
      #line 1399 
      ;
      #line 1399 
      netdev_info(dev,(char *)"%s: phy write to errata reg failed\n",pci_name(np->pci_dev));
      #line 1401 
      return 2;
    }
  }
  #line 1404 
  if (np->phy_oui == 1842U) 
    #line 1405 
    if (np->phy_model == 272U && np->phy_rev == 0U) {
      #line 1407 
      if (init_realtek_8211b(dev,np) != 0) {
        #line 1408 
        ;
        #line 1408 
        netdev_info(dev,(char *)"%s: phy init failed\n",pci_name(np->pci_dev));
        #line 1410 
        return 2;
      }
    }
    else 
      #line 1412 
      if (np->phy_model == 272U && np->phy_rev == 1U) {
        #line 1414 
        if (init_realtek_8211c(dev,np) != 0) {
          #line 1415 
          ;
          #line 1415 
          netdev_info(dev,(char *)"%s: phy init failed\n",pci_name(np->pci_dev));
          #line 1417 
          return 2;
        }
      }
      else 
        #line 1419 
        if (np->phy_model == 512U) {
          #line 1420 
          if (init_realtek_8201(dev,np) != 0) {
            #line 1421 
            ;
            #line 1421 
            netdev_info(dev,(char *)"%s: phy init failed\n",pci_name(np->pci_dev));
            #line 1423 
            return 2;
          }
        }
  #line 1429 
  reg = (unsigned int)mii_rw(dev,np->phyaddr,4,-1);
  #line 1430 
  reg |= 3552U;
  #line 1433 
  if (mii_rw(dev,np->phyaddr,4,(int)reg) != 0) {
    #line 1434 
    ;
    #line 1434 
    netdev_info(dev,(char *)"%s: phy write to advertise failed\n",pci_name(np->pci_dev));
    #line 1436 
    return 2;
  }
  #line 1440 
  phyinterface = readl((void *)(base + 192U));
  #line 1443 
  mii_status = (unsigned int)mii_rw(dev,np->phyaddr,1,-1);
  #line 1444 
  if ((mii_status & 256U) != 0U) {
    #line 1445 
    np->gigabit = (unsigned short)256U;
    #line 1446 
    mii_control_1000 = (unsigned int)mii_rw(dev,np->phyaddr,9,-1);
    #line 1448 
    mii_control_1000 &= 4294967039U;
    #line 1449 
    if ((phyinterface & 268435456U) != 0U) 
                                           #line 1450 
                                           mii_control_1000 |= 512U; else 
                                                                    #line 1452 
                                                                    mii_control_1000 &= 4294966783U;
    #line 1454 
    if (mii_rw(dev,np->phyaddr,9,(int)mii_control_1000) != 0) {
      #line 1455 
      ;
      #line 1455 
      netdev_info(dev,(char *)"%s: phy init failed\n",pci_name(np->pci_dev));
      #line 1457 
      return 2;
    }
  }
  else 
       #line 1460 
       np->gigabit = (unsigned short)0U;
  #line 1462 
  mii_control = (unsigned int)mii_rw(dev,np->phyaddr,0,-1);
  #line 1463 
  mii_control |= 4096U;
  #line 1465 
  if ((np->phy_oui == 1842U && np->phy_model == 272U) && np->phy_rev == 1U) {
    #line 1469 
    mii_control |= 512U;
    #line 1470 
    if (mii_rw(dev,np->phyaddr,0,(int)mii_control) != 0) {
      #line 1471 
      ;
      #line 1471 
      netdev_info(dev,(char *)"%s: phy init failed\n",pci_name(np->pci_dev));
      #line 1473 
      return 2;
    }
  }
  else {
    #line 1479 
    if (phy_reset(dev,mii_control) != 0) {
      #line 1480 
      ;
      #line 1480 
      netdev_info(dev,(char *)"%s: phy reset failed\n",pci_name(np->pci_dev));
      #line 1482 
      return 2;
    }
  }
  #line 1487 
  if (np->phy_oui == 1009U) {
    #line 1488 
    if (init_cicada(dev,np,phyinterface) != 0) {
      #line 1489 
      ;
      #line 1489 
      netdev_info(dev,(char *)"%s: phy init failed\n",pci_name(np->pci_dev));
      #line 1491 
      return 2;
    }
  }
  else 
    #line 1493 
    if (np->phy_oui == 449U) {
      #line 1494 
      if (init_vitesse(dev,np) != 0) {
        #line 1495 
        ;
        #line 1495 
        netdev_info(dev,(char *)"%s: phy init failed\n",pci_name(np->pci_dev));
        #line 1497 
        return 2;
      }
    }
    else 
      #line 1499 
      if (np->phy_oui == 1842U) 
        #line 1500 
        if (np->phy_model == 272U && np->phy_rev == 0U) {
          #line 1503 
          if (init_realtek_8211b(dev,np) != 0) {
            #line 1504 
            ;
            #line 1504 
            netdev_info(dev,(char *)"%s: phy init failed\n",pci_name(np->pci_dev));
            #line 1506 
            return 2;
          }
        }
        else 
          #line 1508 
          if (np->phy_model == 512U) {
            #line 1509 
            if (init_realtek_8201(dev,np) != 0) 
                                                #line 1509 
                                                goto _LOR;
            else {
              #line 1509 
              if (init_realtek_8201_cross(dev,np) != 0) {
                #line 1509 
                _LOR: {
                        #line 1511 
                        ;
                        #line 1511 
                        netdev_info(dev,(char *)"%s: phy init failed\n",pci_name(np->pci_dev));
                        #line 1513 
                        return 2;
                      }
              }
            }
          }
  #line 1519 
  mii_rw(dev,np->phyaddr,4,(int)reg);
  #line 1522 
  mii_control = (unsigned int)mii_rw(dev,np->phyaddr,0,-1);
  #line 1523 
  mii_control |= 4608U;
  #line 1524 
  if (phy_power_down != 0) 
                           #line 1525 
                           mii_control |= 2048U;
  #line 1526 
  if (mii_rw(dev,np->phyaddr,0,(int)mii_control) != 0) 
                                                       #line 1527 
                                                       return 2;
  #line 1529 
  return 0;
}

#line 1532  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
static void nv_start_rx(struct net_device *dev)
{
  #line 1534 
  struct fe_priv *np = netdev_priv(dev);
  #line 1535 
  u8 *base = get_hwbase(dev);
  #line 1536 
  u32 rx_ctrl = readl((void *)(base + 148U));
  #line 1539 
  if ((readl((void *)(base + 148U)) & 1U) != 0U) 
    #line 1539 
    if (np->mac_in_use == 0U) {
      #line 1540 
      rx_ctrl &= 4294967294U;
      #line 1541 
      writel(rx_ctrl,(void *)(base + 148U));
      #line 1542 
      pci_push(base);
    }
  #line 1544 
  writel(np->linkspeed,(void *)(base + 272U));
  #line 1545 
  pci_push(base);
  #line 1546 
  rx_ctrl |= 1U;
  #line 1547 
  if (np->mac_in_use != 0U) 
                            #line 1548 
                            rx_ctrl &= 4278190079U;
  #line 1549 
  writel(rx_ctrl,(void *)(base + 148U));
  #line 1550 
  pci_push(base);
  #line 1551 
  return;
}

#line 1553  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
static void nv_stop_rx(struct net_device *dev)
{
  #line 1555 
  struct fe_priv *np = netdev_priv(dev);
  #line 1556 
  u8 *base = get_hwbase(dev);
  #line 1557 
  u32 rx_ctrl = readl((void *)(base + 148U));
  #line 1559 
  if (np->mac_in_use == 0U) 
                            #line 1560 
                            rx_ctrl &= 4294967294U; else 
                                                         #line 1562 
                                                         rx_ctrl |= 16777216U;
  #line 1563 
  writel(rx_ctrl,(void *)(base + 148U));
  #line 1564 
  if (reg_delay(dev,152,1U,0U,10,500000) != 0) 
                                               #line 1566 
                                               netdev_info(dev,(char *)"%s: ReceiverStatus remained busy\n",(char *)"nv_stop_rx");
  #line 1569 
  __const_udelay(429500UL);
  #line 1570 
  if (np->mac_in_use == 0U) 
                            #line 1571 
                            writel(0U,(void *)(base + 272U));
  #line 1572 
  return;
}

#line 1574  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
static void nv_start_tx(struct net_device *dev)
{
  #line 1576 
  struct fe_priv *np = netdev_priv(dev);
  #line 1577 
  u8 *base = get_hwbase(dev);
  #line 1578 
  u32 tx_ctrl = readl((void *)(base + 132U));
  #line 1580 
  tx_ctrl |= 1U;
  #line 1581 
  if (np->mac_in_use != 0U) 
                            #line 1582 
                            tx_ctrl &= 4278190079U;
  #line 1583 
  writel(tx_ctrl,(void *)(base + 132U));
  #line 1584 
  pci_push(base);
  #line 1585 
  return;
}

#line 1587  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
static void nv_stop_tx(struct net_device *dev)
{
  #line 1589 
  struct fe_priv *np = netdev_priv(dev);
  #line 1590 
  u8 *base = get_hwbase(dev);
  #line 1591 
  u32 tx_ctrl = readl((void *)(base + 132U));
  #line 1593 
  if (np->mac_in_use == 0U) 
                            #line 1594 
                            tx_ctrl &= 4294967294U; else 
                                                         #line 1596 
                                                         tx_ctrl |= 16777216U;
  #line 1597 
  writel(tx_ctrl,(void *)(base + 132U));
  #line 1598 
  if (reg_delay(dev,136,1U,0U,10,500000) != 0) 
                                               #line 1600 
                                               netdev_info(dev,(char *)"%s: TransmitterStatus remained busy\n",(char *)"nv_stop_tx");
  #line 1603 
  __const_udelay(429500UL);
  #line 1604 
  if (np->mac_in_use == 0U) {
    #line 1605 
    ;
    #line 1605 
    writel(readl((void *)(base + 268U)) & 32768U,(void *)(base + 268U));
  }
  #line 1607 
  return;
}

#line 1609  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
static void nv_start_rxtx(struct net_device *dev)
{
  #line 1611 
  nv_start_rx(dev);
  #line 1612 
  nv_start_tx(dev);
  #line 1613 
  return;
}

#line 1615  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
static void nv_stop_rxtx(struct net_device *dev)
{
  #line 1617 
  nv_stop_rx(dev);
  #line 1618 
  nv_stop_tx(dev);
  #line 1619 
  return;
}

#line 1621  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
static void nv_txrx_reset(struct net_device *dev)
{
  #line 1623 
  struct fe_priv *np = netdev_priv(dev);
  #line 1624 
  u8 *base = get_hwbase(dev);
  #line 1626 
  writel(np->txrxctl_bits | 20U,(void *)(base + 324U));
  #line 1627 
  pci_push(base);
  #line 1628 
  __const_udelay(17180UL);
  #line 1629 
  writel(np->txrxctl_bits | 4U,(void *)(base + 324U));
  #line 1630 
  pci_push(base);
  #line 1631 
  return;
}

#line 1633  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
static void nv_mac_reset(struct net_device *dev)
{
  #line 1637 
  u32 temp1;
  #line 1637 
  u32 temp2;
  #line 1637 
  u32 temp3;
  #line 1635 
  struct fe_priv *np = netdev_priv(dev);
  #line 1636 
  u8 *base = get_hwbase(dev);
  #line 1639 
  writel(np->txrxctl_bits | 20U,(void *)(base + 324U));
  #line 1640 
  pci_push(base);
  #line 1643 
  temp1 = readl((void *)(base + 168U));
  #line 1644 
  temp2 = readl((void *)(base + 172U));
  #line 1645 
  temp3 = readl((void *)(base + 268U));
  #line 1647 
  writel(243U,(void *)(base + 52U));
  #line 1648 
  pci_push(base);
  #line 1649 
  __const_udelay(274880UL);
  #line 1650 
  writel(0U,(void *)(base + 52U));
  #line 1651 
  pci_push(base);
  #line 1652 
  __const_udelay(274880UL);
  #line 1655 
  writel(temp1,(void *)(base + 168U));
  #line 1656 
  writel(temp2,(void *)(base + 172U));
  #line 1657 
  writel(temp3,(void *)(base + 268U));
  #line 1659 
  writel(np->txrxctl_bits | 4U,(void *)(base + 324U));
  #line 1660 
  pci_push(base);
  #line 1661 
  return;
}

#line 1664  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
static void nv_update_stats(struct net_device *dev)
{
  #line 1666 
  struct fe_priv *np = netdev_priv(dev);
  #line 1667 
  u8 *base = get_hwbase(dev);
  {
    #line 1672 
    bool __warned;
    #line 1672 
    int __ret_warn_once = ((unsigned long)preempt_count() & 983040UL) != 0UL;
    #line 1672 
    if ((long)(__ret_warn_once != 0) != 0L && (long)(! __warned) != 0L) {
      #line 1672 
      __warned = (_Bool)1;
      {
        #line 1672 
        int __ret_warn_on = 1;
        #line 1672 
        if ((long)(__ret_warn_on != 0) != 0L) {
          #line 1672 
          __warn_printk((char *)"forcedeth: estats spin_lock(_bh) from top-half");
          #line 1673 
          ldv_inline_asm();
          #line 1674 
          ldv_inline_asm();
        }
        #line 1672 
        long tmp_2 = (long)(__ret_warn_on != 0);
      }
    }
    #line 1672 
    long tmp_4 = (long)(__ret_warn_once != 0);
  }
  #line 1673 
  if ((long)(queued_spin_is_locked(& np->hwstats_lock.__anonCompField_spinlock_25.rlock.raw_lock) == 0) != 0L) {
    #line 1674 
    ldv_inline_asm();
    #line 1675 
    ldv_inline_asm();
    #line 1676 
    ldv_inline_asm();
    #line 1673 
    ;
  }
  #line 1676 
  np->estats.tx_bytes += (unsigned long long)readl((void *)(base + 640U));
  #line 1677 
  np->estats.tx_zero_rexmt += (unsigned long long)readl((void *)(base + 644U));
  #line 1678 
  np->estats.tx_one_rexmt += (unsigned long long)readl((void *)(base + 648U));
  #line 1679 
  np->estats.tx_many_rexmt += (unsigned long long)readl((void *)(base + 652U));
  #line 1680 
  np->estats.tx_late_collision += (unsigned long long)readl((void *)(base + 656U));
  #line 1681 
  np->estats.tx_fifo_errors += (unsigned long long)readl((void *)(base + 660U));
  #line 1682 
  np->estats.tx_carrier_errors += (unsigned long long)readl((void *)(base + 664U));
  #line 1683 
  np->estats.tx_excess_deferral += (unsigned long long)readl((void *)(base + 668U));
  #line 1684 
  np->estats.tx_retry_error += (unsigned long long)readl((void *)(base + 672U));
  #line 1685 
  np->estats.rx_frame_error += (unsigned long long)readl((void *)(base + 676U));
  #line 1686 
  np->estats.rx_extra_byte += (unsigned long long)readl((void *)(base + 680U));
  #line 1687 
  np->estats.rx_late_collision += (unsigned long long)readl((void *)(base + 684U));
  #line 1688 
  np->estats.rx_runt += (unsigned long long)readl((void *)(base + 688U));
  #line 1689 
  np->estats.rx_frame_too_long += (unsigned long long)readl((void *)(base + 692U));
  #line 1690 
  np->estats.rx_over_errors += (unsigned long long)readl((void *)(base + 696U));
  #line 1691 
  np->estats.rx_crc_errors += (unsigned long long)readl((void *)(base + 700U));
  #line 1692 
  np->estats.rx_frame_align_error += (unsigned long long)readl((void *)(base + 704U));
  #line 1693 
  np->estats.rx_length_error += (unsigned long long)readl((void *)(base + 708U));
  #line 1694 
  np->estats.rx_unicast += (unsigned long long)readl((void *)(base + 712U));
  #line 1695 
  np->estats.rx_multicast += (unsigned long long)readl((void *)(base + 716U));
  #line 1696 
  np->estats.rx_broadcast += (unsigned long long)readl((void *)(base + 720U));
  #line 1697 
  np->estats.rx_packets = (np->estats.rx_unicast + np->estats.rx_multicast) + np->estats.rx_broadcast;
  #line 1701 
  np->estats.rx_errors_total = (((((np->estats.rx_crc_errors + np->estats.rx_over_errors) + np->estats.rx_frame_error) + (np->estats.rx_frame_align_error - np->estats.rx_extra_byte)) + np->estats.rx_late_collision) + np->estats.rx_runt) + np->estats.rx_frame_too_long;
  #line 1709 
  np->estats.tx_errors_total = (((np->estats.tx_late_collision + np->estats.tx_fifo_errors) + np->estats.tx_carrier_errors) + np->estats.tx_excess_deferral) + np->estats.tx_retry_error;
  #line 1716 
  if ((np->driver_data & 1024U) != 0U) {
    #line 1717 
    np->estats.tx_deferral += (unsigned long long)readl((void *)(base + 724U));
    #line 1718 
    np->estats.tx_packets += (unsigned long long)readl((void *)(base + 728U));
    #line 1719 
    np->estats.rx_bytes += (unsigned long long)readl((void *)(base + 732U));
    #line 1720 
    np->estats.tx_pause += (unsigned long long)readl((void *)(base + 736U));
    #line 1721 
    np->estats.rx_pause += (unsigned long long)readl((void *)(base + 740U));
    #line 1722 
    np->estats.rx_drop_frame += (unsigned long long)readl((void *)(base + 744U));
    #line 1723 
    np->estats.rx_errors_total += np->estats.rx_drop_frame;
  }
  #line 1726 
  if ((np->driver_data & 2048U) != 0U) {
    #line 1727 
    np->estats.tx_unicast += (unsigned long long)readl((void *)(base + 416U));
    #line 1728 
    np->estats.tx_multicast += (unsigned long long)readl((void *)(base + 420U));
    #line 1729 
    np->estats.tx_broadcast += (unsigned long long)readl((void *)(base + 424U));
  }
  #line 1731 
  return;
}

#line 1733  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
static void nv_get_stats(int cpu, struct fe_priv *np, struct rtnl_link_stats64 *storage)
{
  #line 1736 
  unsigned long __ptr;
  #line 1737 
  unsigned int syncp_start;
  #line 1738 
  u64 rx_packets;
  #line 1738 
  u64 rx_bytes;
  #line 1738 
  u64 rx_dropped;
  #line 1738 
  u64 rx_missed_errors;
  #line 1739 
  u64 tx_packets;
  #line 1739 
  u64 tx_bytes;
  #line 1739 
  u64 tx_dropped;
  {
    #line 1736 
    void *__vpp_verify = (void *)0;
    #line 1736 
    void *tmp = __vpp_verify;
  }
  #line 1737 
  ldv_inline_asm();
  #line 1736 
  struct nv_txrx_stats *src = ((struct nv_txrx_stats *)(__per_cpu_offset[cpu] + __ptr));
  #line 1741 
  while (1) {
    #line 1742 
    syncp_start = u64_stats_fetch_begin_irq(& np->swstats_rx_syncp);
    #line 1743 
    rx_packets = src->stat_rx_packets;
    #line 1744 
    rx_bytes = src->stat_rx_bytes;
    #line 1745 
    rx_dropped = src->stat_rx_dropped;
    #line 1746 
    rx_missed_errors = src->stat_rx_missed_errors;
    #line 1747 
    if (! ((int)u64_stats_fetch_retry_irq(& np->swstats_rx_syncp,syncp_start) != 0)) 
      #line 1741 
      break;
  }
  #line 1749 
  storage->rx_packets += rx_packets;
  #line 1750 
  storage->rx_bytes += rx_bytes;
  #line 1751 
  storage->rx_dropped += rx_dropped;
  #line 1752 
  storage->rx_missed_errors += rx_missed_errors;
  #line 1754 
  while (1) {
    #line 1755 
    syncp_start = u64_stats_fetch_begin_irq(& np->swstats_tx_syncp);
    #line 1756 
    tx_packets = src->stat_tx_packets;
    #line 1757 
    tx_bytes = src->stat_tx_bytes;
    #line 1758 
    tx_dropped = src->stat_tx_dropped;
    #line 1759 
    if (! ((int)u64_stats_fetch_retry_irq(& np->swstats_tx_syncp,syncp_start) != 0)) 
      #line 1754 
      break;
  }
  #line 1761 
  storage->tx_packets += tx_packets;
  #line 1762 
  storage->tx_bytes += tx_bytes;
  #line 1763 
  storage->tx_dropped += tx_dropped;
  #line 1764 
  return;
}

#line 1773  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
static void nv_get_stats64(struct net_device *dev, struct rtnl_link_stats64 *storage)
{
  #line 1778 
  int cpu;
  #line 1777 
  struct fe_priv *np = netdev_priv(dev);
  #line 1791 
  cpu = -1;
  #line 1791 
  while (1) {
    #line 1791 
    cpu = (int)cpumask_next(cpu,& __cpu_online_mask);
    #line 1791 
    if (! ((unsigned int)cpu < nr_cpu_ids)) 
                                            #line 1791 
                                            break;
    #line 1792 
    nv_get_stats(cpu,np,storage);
  }
  #line 1795 
  if ((np->driver_data & 3584U) != 0U) {
    #line 1796 
    cif_spin_lock_bh_hwstats_lock_of_fe_priv(& np->hwstats_lock);
    #line 1798 
    nv_update_stats(dev);
    #line 1801 
    storage->rx_errors = np->estats.rx_errors_total;
    #line 1802 
    storage->tx_errors = np->estats.tx_errors_total;
    #line 1805 
    storage->multicast = np->estats.rx_multicast;
    #line 1808 
    storage->rx_length_errors = np->estats.rx_length_error;
    #line 1809 
    storage->rx_over_errors = np->estats.rx_over_errors;
    #line 1810 
    storage->rx_crc_errors = np->estats.rx_crc_errors;
    #line 1811 
    storage->rx_frame_errors = np->estats.rx_frame_align_error;
    #line 1812 
    storage->rx_fifo_errors = np->estats.rx_drop_frame;
    #line 1815 
    storage->tx_carrier_errors = np->estats.tx_carrier_errors;
    #line 1816 
    storage->tx_fifo_errors = np->estats.tx_fifo_errors;
    #line 1818 
    cif_spin_unlock_bh_hwstats_lock_of_fe_priv(& np->hwstats_lock);
  }
  #line 1820 
  return;
}

#line 1827  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
static int nv_alloc_rx(struct net_device *dev)
{
  #line 1830 
  struct ring_desc *less_rx;
  #line 1833 
  struct ring_desc *tmp_0;
  #line 1829 
  struct fe_priv *np = netdev_priv(dev);
  #line 1832 
  less_rx = np->get_rx.orig;
  #line 1833 
  tmp_0 = less_rx;
  #line 1833 
  less_rx --;
  #line 1833 
  ;
  #line 1833 
  if (tmp_0 == np->rx_ring.orig) 
                                 #line 1834 
                                 less_rx = np->last_rx.orig;
  #line 1836 
  while (np->put_rx.orig != less_rx) {
    #line 1837 
    struct sk_buff *skb = netdev_alloc_skb(dev,np->rx_buf_sz + 64U);
    #line 1838 
    if ((long)(skb != (struct sk_buff *)0) != 0L) {
      #line 1853 
      struct ring_desc *tmp_5;
      #line 1855 
      struct nv_skb_map *tmp_6;
      #line 1839 
      (np->put_rx_ctx)->skb = skb;
      #line 1840 
      ;
      #line 1840 
      ;
      #line 1840 
      (np->put_rx_ctx)->dma = dma_map_single_attrs(& (np->pci_dev)->dev,(void *)skb->data,(unsigned long)skb_tailroom(skb),(enum dma_data_direction)DMA_FROM_DEVICE,0UL);
      #line 1844 
      if ((long)(dma_mapping_error(& (np->pci_dev)->dev,(np->put_rx_ctx)->dma) != 0) != 0L) {
        #line 1846 
        kfree_skb(skb);
        #line 1847 
        goto packet_dropped;
      }
      #line 1849 
      (np->put_rx_ctx)->dma_len = (unsigned int)skb_tailroom(skb);
      #line 1850 
      (np->put_rx.orig)->buf = (unsigned int)(np->put_rx_ctx)->dma;
      #line 1851 
      ldv_inline_asm();
      #line 1852 
      (np->put_rx.orig)->flaglen = np->rx_buf_sz | 2147483648U;
      #line 1853 
      tmp_5 = np->put_rx.orig;
      #line 1853 
      (np->put_rx.orig) ++;
      #line 1853 
      ;
      #line 1853 
      if ((long)(tmp_5 == np->last_rx.orig) != 0L) 
                                                   #line 1854 
                                                   np->put_rx.orig = np->rx_ring.orig;
      #line 1855 
      tmp_6 = np->put_rx_ctx;
      #line 1855 
      (np->put_rx_ctx) ++;
      #line 1855 
      ;
      #line 1855 
      if ((long)(tmp_6 == np->last_rx_ctx) != 0L) 
                                                  #line 1856 
                                                  np->put_rx_ctx = np->rx_skb;
    }
    else {
      #line 1858 
      packet_dropped: 
                      #line 1858 
      ;
      #line 1859 
      u64_stats_init(& np->swstats_rx_syncp);
      #line 1860 
      __this_cpu_preempt_check((char *)"add");
      {
        #line 1860 
        void *__vpp_verify = (void *)0;
        #line 1860 
        void *tmp_7 = __vpp_verify;
      }
      #line 1860 
      switch (8UL) {
        #line 1860 
        case (unsigned long)1: 
                               #line 1860 
        ;
        {
          #line 1860 
          int pao_ID__ = 1;
          #line 1860 
          switch (8UL) {
            #line 1860 
            case (unsigned long)1: 
                                   #line 1860 
            ;
            #line 1862 
            ldv_inline_asm();
            #line 1860 
            break;
            #line 1860 
            case (unsigned long)2: 
                                   #line 1860 
            ;
            #line 1862 
            ldv_inline_asm();
            #line 1860 
            break;
            #line 1860 
            case (unsigned long)4: 
                                   #line 1860 
            ;
            #line 1862 
            ldv_inline_asm();
            #line 1860 
            break;
            #line 1860 
            case (unsigned long)8: 
                                   #line 1860 
            ;
            #line 1862 
            ldv_inline_asm();
            #line 1860 
            break;
            #line 1860 
            default: 
                     #line 1860 
            ;
            #line 1860 
            __bad_percpu_size();
          }
        }
        #line 1860 
        break;
        #line 1860 
        case (unsigned long)2: 
                               #line 1860 
        ;
        {
          #line 1860 
          int pao_ID___0 = 1;
          #line 1860 
          switch (8UL) {
            #line 1860 
            case (unsigned long)1: 
                                   #line 1860 
            ;
            #line 1862 
            ldv_inline_asm();
            #line 1860 
            break;
            #line 1860 
            case (unsigned long)2: 
                                   #line 1860 
            ;
            #line 1862 
            ldv_inline_asm();
            #line 1860 
            break;
            #line 1860 
            case (unsigned long)4: 
                                   #line 1860 
            ;
            #line 1862 
            ldv_inline_asm();
            #line 1860 
            break;
            #line 1860 
            case (unsigned long)8: 
                                   #line 1860 
            ;
            #line 1862 
            ldv_inline_asm();
            #line 1860 
            break;
            #line 1860 
            default: 
                     #line 1860 
            ;
            #line 1860 
            __bad_percpu_size();
          }
        }
        #line 1860 
        break;
        #line 1860 
        case (unsigned long)4: 
                               #line 1860 
        ;
        {
          #line 1860 
          int pao_ID___1 = 1;
          #line 1860 
          switch (8UL) {
            #line 1860 
            case (unsigned long)1: 
                                   #line 1860 
            ;
            #line 1862 
            ldv_inline_asm();
            #line 1860 
            break;
            #line 1860 
            case (unsigned long)2: 
                                   #line 1860 
            ;
            #line 1862 
            ldv_inline_asm();
            #line 1860 
            break;
            #line 1860 
            case (unsigned long)4: 
                                   #line 1860 
            ;
            #line 1862 
            ldv_inline_asm();
            #line 1860 
            break;
            #line 1860 
            case (unsigned long)8: 
                                   #line 1860 
            ;
            #line 1862 
            ldv_inline_asm();
            #line 1860 
            break;
            #line 1860 
            default: 
                     #line 1860 
            ;
            #line 1860 
            __bad_percpu_size();
          }
        }
        #line 1860 
        break;
        #line 1860 
        case (unsigned long)8: 
                               #line 1860 
        ;
        {
          #line 1860 
          int pao_ID___2 = 1;
          #line 1860 
          switch (8UL) {
            #line 1860 
            case (unsigned long)1: 
                                   #line 1860 
            ;
            #line 1862 
            ldv_inline_asm();
            #line 1860 
            break;
            #line 1860 
            case (unsigned long)2: 
                                   #line 1860 
            ;
            #line 1862 
            ldv_inline_asm();
            #line 1860 
            break;
            #line 1860 
            case (unsigned long)4: 
                                   #line 1860 
            ;
            #line 1862 
            ldv_inline_asm();
            #line 1860 
            break;
            #line 1860 
            case (unsigned long)8: 
                                   #line 1860 
            ;
            #line 1862 
            ldv_inline_asm();
            #line 1860 
            break;
            #line 1860 
            default: 
                     #line 1860 
            ;
            #line 1860 
            __bad_percpu_size();
          }
        }
        #line 1860 
        break;
        #line 1860 
        default: 
                 #line 1860 
        ;
        #line 1860 
        __bad_size_call_parameter();
        #line 1860 
        break;
      }
      #line 1861 
      u64_stats_init(& np->swstats_rx_syncp);
      #line 1862 
      return 1;
    }
  }
  #line 1865 
  return 0;
}

#line 1868  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
static int nv_alloc_rx_optimized(struct net_device *dev)
{
  #line 1871 
  struct ring_desc_ex *less_rx;
  #line 1874 
  struct ring_desc_ex *tmp_0;
  #line 1870 
  struct fe_priv *np = netdev_priv(dev);
  #line 1873 
  less_rx = np->get_rx.ex;
  #line 1874 
  tmp_0 = less_rx;
  #line 1874 
  less_rx --;
  #line 1874 
  ;
  #line 1874 
  if (tmp_0 == np->rx_ring.ex) 
                               #line 1875 
                               less_rx = np->last_rx.ex;
  #line 1877 
  while (np->put_rx.ex != less_rx) {
    #line 1878 
    struct sk_buff *skb = netdev_alloc_skb(dev,np->rx_buf_sz + 64U);
    #line 1879 
    if ((long)(skb != (struct sk_buff *)0) != 0L) {
      #line 1895 
      struct ring_desc_ex *tmp_7;
      #line 1897 
      struct nv_skb_map *tmp_8;
      #line 1880 
      (np->put_rx_ctx)->skb = skb;
      #line 1881 
      ;
      #line 1881 
      ;
      #line 1881 
      (np->put_rx_ctx)->dma = dma_map_single_attrs(& (np->pci_dev)->dev,(void *)skb->data,(unsigned long)skb_tailroom(skb),(enum dma_data_direction)DMA_FROM_DEVICE,0UL);
      #line 1885 
      if ((long)(dma_mapping_error(& (np->pci_dev)->dev,(np->put_rx_ctx)->dma) != 0) != 0L) {
        #line 1887 
        kfree_skb(skb);
        #line 1888 
        goto packet_dropped;
      }
      #line 1890 
      (np->put_rx_ctx)->dma_len = (unsigned int)skb_tailroom(skb);
      #line 1891 
      (np->put_rx.ex)->bufhigh = dma_high((np->put_rx_ctx)->dma);
      #line 1892 
      (np->put_rx.ex)->buflow = dma_low((np->put_rx_ctx)->dma);
      #line 1893 
      ldv_inline_asm();
      #line 1894 
      (np->put_rx.ex)->flaglen = np->rx_buf_sz | 2147483648U;
      #line 1895 
      tmp_7 = np->put_rx.ex;
      #line 1895 
      (np->put_rx.ex) ++;
      #line 1895 
      ;
      #line 1895 
      if ((long)(tmp_7 == np->last_rx.ex) != 0L) 
                                                 #line 1896 
                                                 np->put_rx.ex = np->rx_ring.ex;
      #line 1897 
      tmp_8 = np->put_rx_ctx;
      #line 1897 
      (np->put_rx_ctx) ++;
      #line 1897 
      ;
      #line 1897 
      if ((long)(tmp_8 == np->last_rx_ctx) != 0L) 
                                                  #line 1898 
                                                  np->put_rx_ctx = np->rx_skb;
    }
    else {
      #line 1900 
      packet_dropped: 
                      #line 1900 
      ;
      #line 1901 
      u64_stats_init(& np->swstats_rx_syncp);
      #line 1902 
      __this_cpu_preempt_check((char *)"add");
      {
        #line 1902 
        void *__vpp_verify = (void *)0;
        #line 1902 
        void *tmp_9 = __vpp_verify;
      }
      #line 1902 
      switch (8UL) {
        #line 1902 
        case (unsigned long)1: 
                               #line 1902 
        ;
        {
          #line 1902 
          int pao_ID__ = 1;
          #line 1902 
          switch (8UL) {
            #line 1902 
            case (unsigned long)1: 
                                   #line 1902 
            ;
            #line 1904 
            ldv_inline_asm();
            #line 1902 
            break;
            #line 1902 
            case (unsigned long)2: 
                                   #line 1902 
            ;
            #line 1904 
            ldv_inline_asm();
            #line 1902 
            break;
            #line 1902 
            case (unsigned long)4: 
                                   #line 1902 
            ;
            #line 1904 
            ldv_inline_asm();
            #line 1902 
            break;
            #line 1902 
            case (unsigned long)8: 
                                   #line 1902 
            ;
            #line 1904 
            ldv_inline_asm();
            #line 1902 
            break;
            #line 1902 
            default: 
                     #line 1902 
            ;
            #line 1902 
            __bad_percpu_size();
          }
        }
        #line 1902 
        break;
        #line 1902 
        case (unsigned long)2: 
                               #line 1902 
        ;
        {
          #line 1902 
          int pao_ID___0 = 1;
          #line 1902 
          switch (8UL) {
            #line 1902 
            case (unsigned long)1: 
                                   #line 1902 
            ;
            #line 1904 
            ldv_inline_asm();
            #line 1902 
            break;
            #line 1902 
            case (unsigned long)2: 
                                   #line 1902 
            ;
            #line 1904 
            ldv_inline_asm();
            #line 1902 
            break;
            #line 1902 
            case (unsigned long)4: 
                                   #line 1902 
            ;
            #line 1904 
            ldv_inline_asm();
            #line 1902 
            break;
            #line 1902 
            case (unsigned long)8: 
                                   #line 1902 
            ;
            #line 1904 
            ldv_inline_asm();
            #line 1902 
            break;
            #line 1902 
            default: 
                     #line 1902 
            ;
            #line 1902 
            __bad_percpu_size();
          }
        }
        #line 1902 
        break;
        #line 1902 
        case (unsigned long)4: 
                               #line 1902 
        ;
        {
          #line 1902 
          int pao_ID___1 = 1;
          #line 1902 
          switch (8UL) {
            #line 1902 
            case (unsigned long)1: 
                                   #line 1902 
            ;
            #line 1904 
            ldv_inline_asm();
            #line 1902 
            break;
            #line 1902 
            case (unsigned long)2: 
                                   #line 1902 
            ;
            #line 1904 
            ldv_inline_asm();
            #line 1902 
            break;
            #line 1902 
            case (unsigned long)4: 
                                   #line 1902 
            ;
            #line 1904 
            ldv_inline_asm();
            #line 1902 
            break;
            #line 1902 
            case (unsigned long)8: 
                                   #line 1902 
            ;
            #line 1904 
            ldv_inline_asm();
            #line 1902 
            break;
            #line 1902 
            default: 
                     #line 1902 
            ;
            #line 1902 
            __bad_percpu_size();
          }
        }
        #line 1902 
        break;
        #line 1902 
        case (unsigned long)8: 
                               #line 1902 
        ;
        {
          #line 1902 
          int pao_ID___2 = 1;
          #line 1902 
          switch (8UL) {
            #line 1902 
            case (unsigned long)1: 
                                   #line 1902 
            ;
            #line 1904 
            ldv_inline_asm();
            #line 1902 
            break;
            #line 1902 
            case (unsigned long)2: 
                                   #line 1902 
            ;
            #line 1904 
            ldv_inline_asm();
            #line 1902 
            break;
            #line 1902 
            case (unsigned long)4: 
                                   #line 1902 
            ;
            #line 1904 
            ldv_inline_asm();
            #line 1902 
            break;
            #line 1902 
            case (unsigned long)8: 
                                   #line 1902 
            ;
            #line 1904 
            ldv_inline_asm();
            #line 1902 
            break;
            #line 1902 
            default: 
                     #line 1902 
            ;
            #line 1902 
            __bad_percpu_size();
          }
        }
        #line 1902 
        break;
        #line 1902 
        default: 
                 #line 1902 
        ;
        #line 1902 
        __bad_size_call_parameter();
        #line 1902 
        break;
      }
      #line 1903 
      u64_stats_init(& np->swstats_rx_syncp);
      #line 1904 
      return 1;
    }
  }
  #line 1907 
  return 0;
}

#line 1911  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
static void nv_do_rx_refill(struct timer_list *t)
{
  #line 1913 
  void *__mptr;
  #line 1913 
  __mptr = (void *)t;
  #line 1913 
  struct fe_priv *np = ((struct fe_priv *)(__mptr + 18446744073709550600U));
  #line 1916 
  napi_schedule(& np->napi);
  #line 1917 
  return;
}

#line 1919  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
static void nv_init_rx(struct net_device *dev)
{
  #line 1922 
  int i;
  #line 1921 
  struct fe_priv *np = netdev_priv(dev);
  #line 1924 
  np->get_rx = np->rx_ring;
  #line 1925 
  np->put_rx = np->rx_ring;
  #line 1927 
  if (nv_optimized(np)) 
                        #line 1930 
                        np->last_rx.ex = np->rx_ring.ex + ((unsigned long)np->rx_ring_size + 18446744073709551615U); else 
                                                                    #line 1928 
                                                                    np->last_rx.orig = np->rx_ring.orig + ((unsigned long)np->rx_ring_size + 18446744073709551615U);
  #line 1931 
  np->get_rx_ctx = np->rx_skb;
  #line 1932 
  np->put_rx_ctx = np->rx_skb;
  #line 1933 
  np->last_rx_ctx = np->rx_skb + ((unsigned long)np->rx_ring_size + 18446744073709551615U);
  #line 1935 
  i = 0;
  #line 1935 
  while (np->rx_ring_size > i) {
    {
      #line 1936 
      if (nv_optimized(np)) {
        #line 1940 
        (np->rx_ring.ex + (unsigned long)i)->flaglen = 0U;
        #line 1941 
        (np->rx_ring.ex + (unsigned long)i)->txvlan = 0U;
        #line 1942 
        (np->rx_ring.ex + (unsigned long)i)->bufhigh = 0U;
        #line 1943 
        (np->rx_ring.ex + (unsigned long)i)->buflow = 0U;
      }
      else {
        #line 1937 
        (np->rx_ring.orig + (unsigned long)i)->flaglen = 0U;
        #line 1938 
        (np->rx_ring.orig + (unsigned long)i)->buf = 0U;
      }
      #line 1945 
      (np->rx_skb + (unsigned long)i)->skb = (struct sk_buff *)0;
      #line 1946 
      (np->rx_skb + (unsigned long)i)->dma = 0ULL;
    }
    #line 1935 
    i ++;
  }
  #line 1948 
  return;
}

#line 1950  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
static void nv_init_tx(struct net_device *dev)
{
  #line 1953 
  int i;
  #line 1952 
  struct fe_priv *np = netdev_priv(dev);
  #line 1955 
  np->get_tx = np->tx_ring;
  #line 1956 
  np->put_tx = np->tx_ring;
  #line 1958 
  if (nv_optimized(np)) 
                        #line 1961 
                        np->last_tx.ex = np->tx_ring.ex + ((unsigned long)np->tx_ring_size + 18446744073709551615U); else 
                                                                    #line 1959 
                                                                    np->last_tx.orig = np->tx_ring.orig + ((unsigned long)np->tx_ring_size + 18446744073709551615U);
  #line 1962 
  np->get_tx_ctx = np->tx_skb;
  #line 1963 
  np->put_tx_ctx = np->tx_skb;
  #line 1964 
  np->last_tx_ctx = np->tx_skb + ((unsigned long)np->tx_ring_size + 18446744073709551615U);
  #line 1965 
  netdev_reset_queue(np->dev);
  #line 1966 
  np->tx_pkts_in_progress = 0U;
  #line 1967 
  np->tx_change_owner = (struct nv_skb_map *)0;
  #line 1968 
  np->tx_end_flip = (struct nv_skb_map *)0;
  #line 1969 
  np->tx_stop = 0;
  #line 1971 
  i = 0;
  #line 1971 
  while (np->tx_ring_size > i) {
    {
      #line 1972 
      if (nv_optimized(np)) {
        #line 1976 
        (np->tx_ring.ex + (unsigned long)i)->flaglen = 0U;
        #line 1977 
        (np->tx_ring.ex + (unsigned long)i)->txvlan = 0U;
        #line 1978 
        (np->tx_ring.ex + (unsigned long)i)->bufhigh = 0U;
        #line 1979 
        (np->tx_ring.ex + (unsigned long)i)->buflow = 0U;
      }
      else {
        #line 1973 
        (np->tx_ring.orig + (unsigned long)i)->flaglen = 0U;
        #line 1974 
        (np->tx_ring.orig + (unsigned long)i)->buf = 0U;
      }
      #line 1981 
      (np->tx_skb + (unsigned long)i)->skb = (struct sk_buff *)0;
      #line 1982 
      (np->tx_skb + (unsigned long)i)->dma = 0ULL;
      #line 1983 
      (np->tx_skb + (unsigned long)i)->dma_len = (unsigned int)0U;
      #line 1984 
      (np->tx_skb + (unsigned long)i)->dma_single = (unsigned int)0U;
      #line 1985 
      (np->tx_skb + (unsigned long)i)->first_tx_desc = (struct ring_desc_ex *)0;
      #line 1986 
      (np->tx_skb + (unsigned long)i)->next_tx_ctx = (struct nv_skb_map *)0;
    }
    #line 1971 
    i ++;
  }
  #line 1988 
  return;
}

#line 1990  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
static int nv_init_ring(struct net_device *dev)
{
  #line 1992 
  struct fe_priv *np = netdev_priv(dev);
  #line 1994 
  nv_init_tx(dev);
  #line 1995 
  nv_init_rx(dev);
  #line 1997 
  if (nv_optimized(np)) {
    #line 2000 
    return nv_alloc_rx_optimized(dev);
  }
  else {
    #line 1998 
    return nv_alloc_rx(dev);
  }
}

#line 2003  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
static void nv_unmap_txskb(struct fe_priv *np, struct nv_skb_map *tx_skb)
{
  #line 2005 
  if (tx_skb->dma != 0ULL) {
    #line 2006 
    if ((unsigned int)tx_skb->dma_single != 0U) 
                                                #line 2007 
                                                dma_unmap_single_attrs(& (np->pci_dev)->dev,tx_skb->dma,(unsigned long)tx_skb->dma_len,(enum dma_data_direction)DMA_TO_DEVICE,0UL); else 
                                                                    #line 2011 
                                                                    dma_unmap_page_attrs(& (np->pci_dev)->dev,tx_skb->dma,(unsigned long)tx_skb->dma_len,(enum dma_data_direction)DMA_TO_DEVICE,0UL);
    #line 2014 
    tx_skb->dma = 0ULL;
  }
  #line 2016 
  return;
}

#line 2018  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
static int nv_release_txskb(struct fe_priv *np, struct nv_skb_map *tx_skb)
{
  #line 2020 
  nv_unmap_txskb(np,tx_skb);
  #line 2021 
  if (tx_skb->skb != (struct sk_buff *)0) {
    #line 2022 
    dev_kfree_skb_any(tx_skb->skb);
    #line 2023 
    tx_skb->skb = (struct sk_buff *)0;
    #line 2024 
    return 1;
  }
  #line 2026 
  return 0;
}

#line 2029  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
static void nv_drain_tx(struct net_device *dev)
{
  #line 2032 
  unsigned int i;
  #line 2031 
  struct fe_priv *np = netdev_priv(dev);
  #line 2034 
  i = 0U;
  #line 2034 
  while ((unsigned int)np->tx_ring_size > i) {
    {
      #line 2035 
      if (nv_optimized(np)) {
        #line 2039 
        (np->tx_ring.ex + (unsigned long)i)->flaglen = 0U;
        #line 2040 
        (np->tx_ring.ex + (unsigned long)i)->txvlan = 0U;
        #line 2041 
        (np->tx_ring.ex + (unsigned long)i)->bufhigh = 0U;
        #line 2042 
        (np->tx_ring.ex + (unsigned long)i)->buflow = 0U;
      }
      else {
        #line 2036 
        (np->tx_ring.orig + (unsigned long)i)->flaglen = 0U;
        #line 2037 
        (np->tx_ring.orig + (unsigned long)i)->buf = 0U;
      }
      #line 2044 
      if (nv_release_txskb(np,np->tx_skb + (unsigned long)i) != 0) {
        #line 2045 
        u64_stats_init(& np->swstats_tx_syncp);
        #line 2046 
        __this_cpu_preempt_check((char *)"add");
        {
          #line 2046 
          void *__vpp_verify = (void *)0;
          #line 2046 
          void *tmp_2 = __vpp_verify;
        }
        #line 2046 
        switch (8UL) {
          #line 2046 
          case (unsigned long)1: 
                                 #line 2046 
          ;
          {
            #line 2046 
            int pao_ID__ = 1;
            #line 2046 
            switch (8UL) {
              #line 2046 
              case (unsigned long)1: 
                                     #line 2046 
              ;
              #line 2048 
              ldv_inline_asm();
              #line 2046 
              break;
              #line 2046 
              case (unsigned long)2: 
                                     #line 2046 
              ;
              #line 2048 
              ldv_inline_asm();
              #line 2046 
              break;
              #line 2046 
              case (unsigned long)4: 
                                     #line 2046 
              ;
              #line 2048 
              ldv_inline_asm();
              #line 2046 
              break;
              #line 2046 
              case (unsigned long)8: 
                                     #line 2046 
              ;
              #line 2048 
              ldv_inline_asm();
              #line 2046 
              break;
              #line 2046 
              default: 
                       #line 2046 
              ;
              #line 2046 
              __bad_percpu_size();
            }
          }
          #line 2046 
          break;
          #line 2046 
          case (unsigned long)2: 
                                 #line 2046 
          ;
          {
            #line 2046 
            int pao_ID___0 = 1;
            #line 2046 
            switch (8UL) {
              #line 2046 
              case (unsigned long)1: 
                                     #line 2046 
              ;
              #line 2048 
              ldv_inline_asm();
              #line 2046 
              break;
              #line 2046 
              case (unsigned long)2: 
                                     #line 2046 
              ;
              #line 2048 
              ldv_inline_asm();
              #line 2046 
              break;
              #line 2046 
              case (unsigned long)4: 
                                     #line 2046 
              ;
              #line 2048 
              ldv_inline_asm();
              #line 2046 
              break;
              #line 2046 
              case (unsigned long)8: 
                                     #line 2046 
              ;
              #line 2048 
              ldv_inline_asm();
              #line 2046 
              break;
              #line 2046 
              default: 
                       #line 2046 
              ;
              #line 2046 
              __bad_percpu_size();
            }
          }
          #line 2046 
          break;
          #line 2046 
          case (unsigned long)4: 
                                 #line 2046 
          ;
          {
            #line 2046 
            int pao_ID___1 = 1;
            #line 2046 
            switch (8UL) {
              #line 2046 
              case (unsigned long)1: 
                                     #line 2046 
              ;
              #line 2048 
              ldv_inline_asm();
              #line 2046 
              break;
              #line 2046 
              case (unsigned long)2: 
                                     #line 2046 
              ;
              #line 2048 
              ldv_inline_asm();
              #line 2046 
              break;
              #line 2046 
              case (unsigned long)4: 
                                     #line 2046 
              ;
              #line 2048 
              ldv_inline_asm();
              #line 2046 
              break;
              #line 2046 
              case (unsigned long)8: 
                                     #line 2046 
              ;
              #line 2048 
              ldv_inline_asm();
              #line 2046 
              break;
              #line 2046 
              default: 
                       #line 2046 
              ;
              #line 2046 
              __bad_percpu_size();
            }
          }
          #line 2046 
          break;
          #line 2046 
          case (unsigned long)8: 
                                 #line 2046 
          ;
          {
            #line 2046 
            int pao_ID___2 = 1;
            #line 2046 
            switch (8UL) {
              #line 2046 
              case (unsigned long)1: 
                                     #line 2046 
              ;
              #line 2048 
              ldv_inline_asm();
              #line 2046 
              break;
              #line 2046 
              case (unsigned long)2: 
                                     #line 2046 
              ;
              #line 2048 
              ldv_inline_asm();
              #line 2046 
              break;
              #line 2046 
              case (unsigned long)4: 
                                     #line 2046 
              ;
              #line 2048 
              ldv_inline_asm();
              #line 2046 
              break;
              #line 2046 
              case (unsigned long)8: 
                                     #line 2046 
              ;
              #line 2048 
              ldv_inline_asm();
              #line 2046 
              break;
              #line 2046 
              default: 
                       #line 2046 
              ;
              #line 2046 
              __bad_percpu_size();
            }
          }
          #line 2046 
          break;
          #line 2046 
          default: 
                   #line 2046 
          ;
          #line 2046 
          __bad_size_call_parameter();
          #line 2046 
          break;
        }
        #line 2047 
        u64_stats_init(& np->swstats_tx_syncp);
      }
      #line 2049 
      (np->tx_skb + (unsigned long)i)->dma = 0ULL;
      #line 2050 
      (np->tx_skb + (unsigned long)i)->dma_len = (unsigned int)0U;
      #line 2051 
      (np->tx_skb + (unsigned long)i)->dma_single = (unsigned int)0U;
      #line 2052 
      (np->tx_skb + (unsigned long)i)->first_tx_desc = (struct ring_desc_ex *)0;
      #line 2053 
      (np->tx_skb + (unsigned long)i)->next_tx_ctx = (struct nv_skb_map *)0;
    }
    #line 2034 
    i ++;
  }
  #line 2055 
  np->tx_pkts_in_progress = 0U;
  #line 2056 
  np->tx_change_owner = (struct nv_skb_map *)0;
  #line 2057 
  np->tx_end_flip = (struct nv_skb_map *)0;
  #line 2058 
  return;
}

#line 2060  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
static void nv_drain_rx(struct net_device *dev)
{
  #line 2063 
  int i;
  #line 2062 
  struct fe_priv *np = netdev_priv(dev);
  #line 2065 
  i = 0;
  #line 2065 
  while (np->rx_ring_size > i) {
    {
      #line 2066 
      if (nv_optimized(np)) {
        #line 2070 
        (np->rx_ring.ex + (unsigned long)i)->flaglen = 0U;
        #line 2071 
        (np->rx_ring.ex + (unsigned long)i)->txvlan = 0U;
        #line 2072 
        (np->rx_ring.ex + (unsigned long)i)->bufhigh = 0U;
        #line 2073 
        (np->rx_ring.ex + (unsigned long)i)->buflow = 0U;
      }
      else {
        #line 2067 
        (np->rx_ring.orig + (unsigned long)i)->flaglen = 0U;
        #line 2068 
        (np->rx_ring.orig + (unsigned long)i)->buf = 0U;
      }
      #line 2075 
      ldv_inline_asm();
      #line 2076 
      if ((np->rx_skb + (unsigned long)i)->skb != (struct sk_buff *)0) {
        #line 2077 
        ;
        #line 2077 
        ;
        #line 2077 
        ;
        #line 2077 
        dma_unmap_single_attrs(& (np->pci_dev)->dev,(np->rx_skb + (unsigned long)i)->dma,(unsigned long)(skb_end_pointer((np->rx_skb + (unsigned long)i)->skb) - ((np->rx_skb + (unsigned long)i)->skb)->data),(enum dma_data_direction)DMA_FROM_DEVICE,0UL);
        #line 2081 
        consume_skb((np->rx_skb + (unsigned long)i)->skb);
        #line 2082 
        (np->rx_skb + (unsigned long)i)->skb = (struct sk_buff *)0;
      }
    }
    #line 2065 
    i ++;
  }
  #line 2085 
  return;
}

#line 2087  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
static void nv_drain_rxtx(struct net_device *dev)
{
  #line 2089 
  nv_drain_tx(dev);
  #line 2090 
  nv_drain_rx(dev);
  #line 2091 
  return;
}

#line 2093  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
__inline static u32 nv_get_empty_tx_slots(struct fe_priv *np)
{
  #line 2095 
  return (unsigned int)np->tx_ring_size - (unsigned int)(((long)np->tx_ring_size + (np->put_tx_ctx - np->get_tx_ctx) / 40L) % (long)np->tx_ring_size);
}

#line 2098  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
static void nv_legacybackoff_reseed(struct net_device *dev)
{
  #line 2101 
  u32 reg;
  #line 2102 
  u32 low;
  #line 2100 
  u8 *base = get_hwbase(dev);
  #line 2103 
  int tx_status = 0;
  #line 2105 
  reg = readl((void *)(base + 156U)) & 4294967040U;
  #line 2106 
  get_random_bytes((void *)(& low),4);
  #line 2107 
  reg = (low & 255U) | reg;
  #line 2112 
  tx_status = (int)readl((void *)(base + 132U)) & 1;
  #line 2113 
  if (tx_status != 0) 
                      #line 2114 
                      nv_stop_tx(dev);
  #line 2115 
  nv_stop_rx(dev);
  #line 2116 
  writel(reg,(void *)(base + 156U));
  #line 2117 
  if (tx_status != 0) 
                      #line 2118 
                      nv_start_tx(dev);
  #line 2119 
  nv_start_rx(dev);
  #line 2120 
  return;
}

#line 2127  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
static u32 main_seedset[8U][15U] = {{145U, 155U, 165U, 175U, 185U, 196U, 235U, 245U, 255U, 265U, 275U, 285U, 660U, 690U, 874U}, {245U, 255U, 265U, 575U, 385U, 298U, 335U, 345U, 355U, 366U, 375U, 385U, 761U, 790U, 974U}, {145U, 155U, 165U, 175U, 185U, 196U, 235U, 245U, 255U, 265U, 275U, 285U, 660U, 690U, 874U}, {245U, 255U, 265U, 575U, 385U, 298U, 335U, 345U, 355U, 366U, 375U, 386U, 761U, 790U, 974U}, {266U, 265U, 276U, 585U, 397U, 208U, 345U, 355U, 365U, 376U, 385U, 396U, 771U, 700U, 984U}, {266U, 265U, 276U, 586U, 397U, 208U, 346U, 355U, 365U, 376U, 285U, 396U, 771U, 700U, 984U}, {366U, 365U, 376U, 686U, 497U, 308U, 447U, 455U, 466U, 476U, 485U, 496U, 871U, 800U, 84U}, {466U, 465U, 476U, 786U, 597U, 408U, 547U, 555U, 566U, 576U, 585U, 597U, 971U, 900U, 184U}};
#line 2137  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
static u32 gear_seedset[8U][15U] = {{251U, 262U, 273U, 324U, 319U, 508U, 375U, 364U, 341U, 371U, 398U, 193U, 375U, 30U, 295U}, {351U, 375U, 373U, 469U, 551U, 639U, 477U, 464U, 441U, 472U, 498U, 293U, 476U, 130U, 395U}, {351U, 375U, 373U, 469U, 551U, 639U, 477U, 464U, 441U, 472U, 498U, 293U, 476U, 130U, 397U}, {251U, 262U, 273U, 324U, 319U, 508U, 375U, 364U, 341U, 371U, 398U, 193U, 375U, 30U, 295U}, {251U, 262U, 273U, 324U, 319U, 508U, 375U, 364U, 341U, 371U, 398U, 193U, 375U, 30U, 295U}, {351U, 375U, 373U, 469U, 551U, 639U, 477U, 464U, 441U, 472U, 498U, 293U, 476U, 130U, 395U}, {351U, 375U, 373U, 469U, 551U, 639U, 477U, 464U, 441U, 472U, 498U, 293U, 476U, 130U, 395U}, {351U, 375U, 373U, 469U, 551U, 639U, 477U, 464U, 441U, 472U, 498U, 293U, 476U, 130U, 395U}};
#line 2147  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
static void nv_gear_backoff_reseed(struct net_device *dev)
{
  #line 2150 
  u32 miniseed1;
  #line 2150 
  u32 miniseed2;
  #line 2150 
  u32 miniseed2_reversed;
  #line 2150 
  u32 miniseed3;
  #line 2150 
  u32 miniseed3_reversed;
  #line 2151 
  u32 temp;
  #line 2151 
  u32 seedset;
  #line 2151 
  u32 combinedSeed;
  #line 2152 
  int i;
  #line 2149 
  u8 *base = get_hwbase(dev);
  #line 2157 
  get_random_bytes((void *)(& miniseed1),4);
  #line 2158 
  miniseed1 &= 4095U;
  #line 2159 
  if (miniseed1 == 0U) 
                       #line 2160 
                       miniseed1 = 2748U;
  #line 2162 
  get_random_bytes((void *)(& miniseed2),4);
  #line 2163 
  miniseed2 &= 4095U;
  #line 2164 
  if (miniseed2 == 0U) 
                       #line 2165 
                       miniseed2 = 2748U;
  #line 2166 
  miniseed2_reversed = (((miniseed2 >> 8) & 15U) | (miniseed2 & 240U)) | ((miniseed2 << 8) & 3840U);
  #line 2171 
  get_random_bytes((void *)(& miniseed3),4);
  #line 2172 
  miniseed3 &= 4095U;
  #line 2173 
  if (miniseed3 == 0U) 
                       #line 2174 
                       miniseed3 = 2748U;
  #line 2175 
  miniseed3_reversed = (((miniseed3 >> 8) & 15U) | (miniseed3 & 240U)) | ((miniseed3 << 8) & 3840U);
  #line 2180 
  combinedSeed = ((miniseed1 ^ miniseed2_reversed) << 12) | (miniseed2 ^ miniseed3_reversed);
  #line 2184 
  if ((combinedSeed & 1023U) == 0U) 
                                    #line 2185 
                                    combinedSeed |= 8U;
  #line 2186 
  if ((combinedSeed & 4190208U) == 0U) 
                                       #line 2187 
                                       combinedSeed |= 32768U;
  #line 2190 
  temp = 1879048192U;
  #line 2191 
  temp = (combinedSeed & 1023U) | temp;
  #line 2192 
  temp = (combinedSeed >> 12) | temp;
  #line 2193 
  writel(temp,(void *)(base + 196U));
  #line 2196 
  get_random_bytes((void *)(& seedset),4);
  #line 2197 
  seedset &= 7U;
  #line 2198 
  i = 1;
  #line 2198 
  while (i <= 15) {
    #line 2199 
    temp = (unsigned int)((i << 24) | 1879048192);
    #line 2200 
    temp = (main_seedset[seedset][i + -1] & 1023U) | temp;
    #line 2201 
    temp = ((gear_seedset[seedset][i + -1] << 12) & 4190208U) | temp;
    #line 2202 
    writel(temp,(void *)(base + 196U));
    #line 2198 
    i ++;
  }
  #line 2204 
  return;
}

#line 2210  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
static netdev_tx_t nv_start_xmit(struct sk_buff *skb, struct net_device *dev)
{
  #line 2214 
  unsigned int tmp_0;
  #line 2216 
  unsigned int i;
  #line 2218 
  u32 bcnt;
  #line 2220 
  unsigned int tmp_3;
  #line 2221 
  u32 empty_slots;
  #line 2222 
  struct ring_desc *put_tx;
  #line 2223 
  struct ring_desc *start_tx;
  #line 2224 
  struct ring_desc *prev_tx;
  #line 2225 
  struct nv_skb_map *prev_tx_ctx;
  #line 2227 
  unsigned long flags;
  #line 2212 
  struct fe_priv *np = netdev_priv(dev);
  #line 2213 
  u32 tx_flags = 0U;
  #line 2214 
  if (np->desc_ver == 1U) 
                          #line 2214 
                          tmp_0 = 65536U; else 
                                               #line 2214 
                                               tmp_0 = 536870912U;
  #line 2214 
  u32 tx_flags_extra = tmp_0;
  #line 2215 
  unsigned int fragments = (unsigned int)((struct skb_shared_info *)skb_end_pointer(skb))->nr_frags;
  #line 2217 
  u32 offset = 0U;
  #line 2219 
  u32 size = skb_headlen(skb);
  #line 2220 
  if ((size & 16383U) != 0U) 
                             #line 2220 
                             tmp_3 = 1U; else 
                                              #line 2220 
                                              tmp_3 = 0U;
  #line 2220 
  u32 entries = (size >> 14) + tmp_3;
  #line 2226 
  struct nv_skb_map *tmp_tx_ctx = (struct nv_skb_map *)0;
  #line 2226 
  struct nv_skb_map *start_tx_ctx = (struct nv_skb_map *)0;
  #line 2228 
  netdev_tx_t ret = (enum netdev_tx)0;
  #line 2231 
  i = 0U;
  #line 2231 
  while (i < fragments) {
    {
      #line 2234 
      unsigned int tmp_6;
      #line 2232 
      u32 frag_size = skb_frag_size(& ((struct skb_shared_info *)skb_end_pointer(skb))->frags[i]);
      #line 2234 
      if ((frag_size & 16383U) != 0U) 
                                      #line 2234 
                                      tmp_6 = 1U; else 
                                                       #line 2234 
                                                       tmp_6 = 0U;
      #line 2234 
      entries = ((frag_size >> 14) + tmp_6) + entries;
    }
    #line 2231 
    i ++;
  }
  #line 2238 
  cif___ldv_spin_lock_lock_of_fe_priv(& np->lock);
  #line 2239 
  empty_slots = nv_get_empty_tx_slots(np);
  #line 2240 
  if ((long)(empty_slots <= entries) != 0L) {
    #line 2241 
    netif_stop_queue(dev);
    #line 2242 
    np->tx_stop = 1;
    #line 2243 
    cif_spin_unlock_irqrestore_lock_of_fe_priv(& np->lock,flags);
    #line 2248 
    ret = NETDEV_TX_BUSY;
    #line 2249 
    goto txkick;
  }
  #line 2251 
  cif_spin_unlock_irqrestore_lock_of_fe_priv(& np->lock,flags);
  #line 2253 
  put_tx = np->put_tx.orig;
  #line 2253 
  start_tx = put_tx;
  #line 2256 
  while (1) {
    {
      #line 2281 
      struct ring_desc *tmp_8;
      #line 2283 
      struct nv_skb_map *tmp_9;
      #line 2257 
      if (16384U < size) 
                         #line 2257 
                         bcnt = 16384U; else 
                                             #line 2257 
                                             bcnt = size;
      #line 2258 
      (np->put_tx_ctx)->dma = dma_map_single_attrs(& (np->pci_dev)->dev,(void *)(skb->data + (unsigned long)offset),(unsigned long)bcnt,(enum dma_data_direction)DMA_TO_DEVICE,0UL);
      #line 2261 
      if ((long)(dma_mapping_error(& (np->pci_dev)->dev,(np->put_tx_ctx)->dma) != 0) != 0L) {
        #line 2264 
        dev_kfree_skb_any(skb);
        #line 2265 
        u64_stats_init(& np->swstats_tx_syncp);
        #line 2266 
        __this_cpu_preempt_check((char *)"add");
        {
          #line 2266 
          void *__vpp_verify = (void *)0;
          #line 2266 
          void *tmp_7 = __vpp_verify;
        }
        #line 2266 
        switch (8UL) {
          #line 2266 
          case (unsigned long)1: 
                                 #line 2266 
          ;
          {
            #line 2266 
            int pao_ID__ = 1;
            #line 2266 
            switch (8UL) {
              #line 2266 
              case (unsigned long)1: 
                                     #line 2266 
              ;
              #line 2268 
              ldv_inline_asm();
              #line 2266 
              break;
              #line 2266 
              case (unsigned long)2: 
                                     #line 2266 
              ;
              #line 2268 
              ldv_inline_asm();
              #line 2266 
              break;
              #line 2266 
              case (unsigned long)4: 
                                     #line 2266 
              ;
              #line 2268 
              ldv_inline_asm();
              #line 2266 
              break;
              #line 2266 
              case (unsigned long)8: 
                                     #line 2266 
              ;
              #line 2268 
              ldv_inline_asm();
              #line 2266 
              break;
              #line 2266 
              default: 
                       #line 2266 
              ;
              #line 2266 
              __bad_percpu_size();
            }
          }
          #line 2266 
          break;
          #line 2266 
          case (unsigned long)2: 
                                 #line 2266 
          ;
          {
            #line 2266 
            int pao_ID___0 = 1;
            #line 2266 
            switch (8UL) {
              #line 2266 
              case (unsigned long)1: 
                                     #line 2266 
              ;
              #line 2268 
              ldv_inline_asm();
              #line 2266 
              break;
              #line 2266 
              case (unsigned long)2: 
                                     #line 2266 
              ;
              #line 2268 
              ldv_inline_asm();
              #line 2266 
              break;
              #line 2266 
              case (unsigned long)4: 
                                     #line 2266 
              ;
              #line 2268 
              ldv_inline_asm();
              #line 2266 
              break;
              #line 2266 
              case (unsigned long)8: 
                                     #line 2266 
              ;
              #line 2268 
              ldv_inline_asm();
              #line 2266 
              break;
              #line 2266 
              default: 
                       #line 2266 
              ;
              #line 2266 
              __bad_percpu_size();
            }
          }
          #line 2266 
          break;
          #line 2266 
          case (unsigned long)4: 
                                 #line 2266 
          ;
          {
            #line 2266 
            int pao_ID___1 = 1;
            #line 2266 
            switch (8UL) {
              #line 2266 
              case (unsigned long)1: 
                                     #line 2266 
              ;
              #line 2268 
              ldv_inline_asm();
              #line 2266 
              break;
              #line 2266 
              case (unsigned long)2: 
                                     #line 2266 
              ;
              #line 2268 
              ldv_inline_asm();
              #line 2266 
              break;
              #line 2266 
              case (unsigned long)4: 
                                     #line 2266 
              ;
              #line 2268 
              ldv_inline_asm();
              #line 2266 
              break;
              #line 2266 
              case (unsigned long)8: 
                                     #line 2266 
              ;
              #line 2268 
              ldv_inline_asm();
              #line 2266 
              break;
              #line 2266 
              default: 
                       #line 2266 
              ;
              #line 2266 
              __bad_percpu_size();
            }
          }
          #line 2266 
          break;
          #line 2266 
          case (unsigned long)8: 
                                 #line 2266 
          ;
          {
            #line 2266 
            int pao_ID___2 = 1;
            #line 2266 
            switch (8UL) {
              #line 2266 
              case (unsigned long)1: 
                                     #line 2266 
              ;
              #line 2268 
              ldv_inline_asm();
              #line 2266 
              break;
              #line 2266 
              case (unsigned long)2: 
                                     #line 2266 
              ;
              #line 2268 
              ldv_inline_asm();
              #line 2266 
              break;
              #line 2266 
              case (unsigned long)4: 
                                     #line 2266 
              ;
              #line 2268 
              ldv_inline_asm();
              #line 2266 
              break;
              #line 2266 
              case (unsigned long)8: 
                                     #line 2266 
              ;
              #line 2268 
              ldv_inline_asm();
              #line 2266 
              break;
              #line 2266 
              default: 
                       #line 2266 
              ;
              #line 2266 
              __bad_percpu_size();
            }
          }
          #line 2266 
          break;
          #line 2266 
          default: 
                   #line 2266 
          ;
          #line 2266 
          __bad_size_call_parameter();
          #line 2266 
          break;
        }
        #line 2267 
        u64_stats_init(& np->swstats_tx_syncp);
        #line 2269 
        ret = NETDEV_TX_OK;
        #line 2271 
        goto dma_error;
      }
      #line 2273 
      (np->put_tx_ctx)->dma_len = (unsigned int)bcnt;
      #line 2274 
      (np->put_tx_ctx)->dma_single = (unsigned int)1U;
      #line 2275 
      put_tx->buf = (unsigned int)(np->put_tx_ctx)->dma;
      #line 2276 
      put_tx->flaglen = (bcnt + 4294967295U) | tx_flags;
      #line 2278 
      tx_flags = np->tx_flags;
      #line 2279 
      offset += bcnt;
      #line 2280 
      size -= bcnt;
      #line 2281 
      tmp_8 = put_tx;
      #line 2281 
      put_tx ++;
      #line 2281 
      ;
      #line 2281 
      if ((long)(tmp_8 == np->last_tx.orig) != 0L) 
                                                   #line 2282 
                                                   put_tx = np->tx_ring.orig;
      #line 2283 
      tmp_9 = np->put_tx_ctx;
      #line 2283 
      (np->put_tx_ctx) ++;
      #line 2283 
      ;
      #line 2283 
      if ((long)(tmp_9 == np->last_tx_ctx) != 0L) 
                                                  #line 2284 
                                                  np->put_tx_ctx = np->tx_skb;
    }
    #line 2285 
    if (! (size != 0U)) 
                        #line 2256 
                        break;
  }
  #line 2288 
  i = 0U;
  #line 2288 
  while (i < fragments) {
    {
      #line 2289 
      skb_frag_t *frag = & ((struct skb_shared_info *)skb_end_pointer(skb))->frags[i];
      #line 2290 
      u32 frag_size_0 = skb_frag_size(frag);
      #line 2291 
      offset = 0U;
      #line 2293 
      while (1) {
        {
          #line 2330 
          struct ring_desc *tmp_14;
          #line 2332 
          struct nv_skb_map *tmp_15;
          #line 2294 
          if (start_tx_ctx == (struct nv_skb_map *)0) {
            #line 2295 
            tmp_tx_ctx = np->put_tx_ctx;
            #line 2295 
            start_tx_ctx = tmp_tx_ctx;
          }
          #line 2297 
          if (16384U < frag_size_0) 
                                    #line 2297 
                                    bcnt = 16384U; else 
                                                        #line 2297 
                                                        bcnt = frag_size_0;
          #line 2298 
          (np->put_tx_ctx)->dma = skb_frag_dma_map(& (np->pci_dev)->dev,frag,(unsigned long)offset,(unsigned long)bcnt,(enum dma_data_direction)DMA_TO_DEVICE);
          #line 2303 
          if ((long)(dma_mapping_error(& (np->pci_dev)->dev,(np->put_tx_ctx)->dma) != 0) != 0L) {
            #line 2307 
            while (1) {
              {
                #line 2309 
                struct nv_skb_map *tmp_12;
                #line 2308 
                nv_unmap_txskb(np,start_tx_ctx);
                #line 2309 
                tmp_12 = tmp_tx_ctx;
                #line 2309 
                tmp_tx_ctx ++;
                #line 2309 
                ;
                #line 2309 
                if ((long)(tmp_12 == np->last_tx_ctx) != 0L) 
                                                             #line 2310 
                                                             tmp_tx_ctx = np->tx_skb;
              }
              #line 2311 
              if (! (np->put_tx_ctx != tmp_tx_ctx)) 
                                                    #line 2307 
                                                    break;
            }
            #line 2312 
            dev_kfree_skb_any(skb);
            #line 2313 
            np->put_tx_ctx = start_tx_ctx;
            #line 2314 
            u64_stats_init(& np->swstats_tx_syncp);
            #line 2315 
            __this_cpu_preempt_check((char *)"add");
            {
              #line 2315 
              void *__vpp_verify_0 = (void *)0;
              #line 2315 
              void *tmp_17 = __vpp_verify_0;
            }
            #line 2315 
            switch (8UL) {
              #line 2315 
              case (unsigned long)1: 
                                     #line 2315 
              ;
              {
                #line 2315 
                int pao_ID___3 = 1;
                #line 2315 
                switch (8UL) {
                  #line 2315 
                  case (unsigned long)1: 
                                         #line 2315 
                  ;
                  #line 2317 
                  ldv_inline_asm();
                  #line 2315 
                  break;
                  #line 2315 
                  case (unsigned long)2: 
                                         #line 2315 
                  ;
                  #line 2317 
                  ldv_inline_asm();
                  #line 2315 
                  break;
                  #line 2315 
                  case (unsigned long)4: 
                                         #line 2315 
                  ;
                  #line 2317 
                  ldv_inline_asm();
                  #line 2315 
                  break;
                  #line 2315 
                  case (unsigned long)8: 
                                         #line 2315 
                  ;
                  #line 2317 
                  ldv_inline_asm();
                  #line 2315 
                  break;
                  #line 2315 
                  default: 
                           #line 2315 
                  ;
                  #line 2315 
                  __bad_percpu_size();
                }
              }
              #line 2315 
              break;
              #line 2315 
              case (unsigned long)2: 
                                     #line 2315 
              ;
              {
                #line 2315 
                int pao_ID___4 = 1;
                #line 2315 
                switch (8UL) {
                  #line 2315 
                  case (unsigned long)1: 
                                         #line 2315 
                  ;
                  #line 2317 
                  ldv_inline_asm();
                  #line 2315 
                  break;
                  #line 2315 
                  case (unsigned long)2: 
                                         #line 2315 
                  ;
                  #line 2317 
                  ldv_inline_asm();
                  #line 2315 
                  break;
                  #line 2315 
                  case (unsigned long)4: 
                                         #line 2315 
                  ;
                  #line 2317 
                  ldv_inline_asm();
                  #line 2315 
                  break;
                  #line 2315 
                  case (unsigned long)8: 
                                         #line 2315 
                  ;
                  #line 2317 
                  ldv_inline_asm();
                  #line 2315 
                  break;
                  #line 2315 
                  default: 
                           #line 2315 
                  ;
                  #line 2315 
                  __bad_percpu_size();
                }
              }
              #line 2315 
              break;
              #line 2315 
              case (unsigned long)4: 
                                     #line 2315 
              ;
              {
                #line 2315 
                int pao_ID___5 = 1;
                #line 2315 
                switch (8UL) {
                  #line 2315 
                  case (unsigned long)1: 
                                         #line 2315 
                  ;
                  #line 2317 
                  ldv_inline_asm();
                  #line 2315 
                  break;
                  #line 2315 
                  case (unsigned long)2: 
                                         #line 2315 
                  ;
                  #line 2317 
                  ldv_inline_asm();
                  #line 2315 
                  break;
                  #line 2315 
                  case (unsigned long)4: 
                                         #line 2315 
                  ;
                  #line 2317 
                  ldv_inline_asm();
                  #line 2315 
                  break;
                  #line 2315 
                  case (unsigned long)8: 
                                         #line 2315 
                  ;
                  #line 2317 
                  ldv_inline_asm();
                  #line 2315 
                  break;
                  #line 2315 
                  default: 
                           #line 2315 
                  ;
                  #line 2315 
                  __bad_percpu_size();
                }
              }
              #line 2315 
              break;
              #line 2315 
              case (unsigned long)8: 
                                     #line 2315 
              ;
              {
                #line 2315 
                int pao_ID___6 = 1;
                #line 2315 
                switch (8UL) {
                  #line 2315 
                  case (unsigned long)1: 
                                         #line 2315 
                  ;
                  #line 2317 
                  ldv_inline_asm();
                  #line 2315 
                  break;
                  #line 2315 
                  case (unsigned long)2: 
                                         #line 2315 
                  ;
                  #line 2317 
                  ldv_inline_asm();
                  #line 2315 
                  break;
                  #line 2315 
                  case (unsigned long)4: 
                                         #line 2315 
                  ;
                  #line 2317 
                  ldv_inline_asm();
                  #line 2315 
                  break;
                  #line 2315 
                  case (unsigned long)8: 
                                         #line 2315 
                  ;
                  #line 2317 
                  ldv_inline_asm();
                  #line 2315 
                  break;
                  #line 2315 
                  default: 
                           #line 2315 
                  ;
                  #line 2315 
                  __bad_percpu_size();
                }
              }
              #line 2315 
              break;
              #line 2315 
              default: 
                       #line 2315 
              ;
              #line 2315 
              __bad_size_call_parameter();
              #line 2315 
              break;
            }
            #line 2316 
            u64_stats_init(& np->swstats_tx_syncp);
            #line 2318 
            ret = NETDEV_TX_OK;
            #line 2320 
            goto dma_error;
          }
          #line 2323 
          (np->put_tx_ctx)->dma_len = (unsigned int)bcnt;
          #line 2324 
          (np->put_tx_ctx)->dma_single = (unsigned int)0U;
          #line 2325 
          put_tx->buf = (unsigned int)(np->put_tx_ctx)->dma;
          #line 2326 
          put_tx->flaglen = (bcnt + 4294967295U) | tx_flags;
          #line 2328 
          offset += bcnt;
          #line 2329 
          frag_size_0 -= bcnt;
          #line 2330 
          tmp_14 = put_tx;
          #line 2330 
          put_tx ++;
          #line 2330 
          ;
          #line 2330 
          if ((long)(tmp_14 == np->last_tx.orig) != 0L) 
                                                        #line 2331 
                                                        put_tx = np->tx_ring.orig;
          #line 2332 
          tmp_15 = np->put_tx_ctx;
          #line 2332 
          (np->put_tx_ctx) ++;
          #line 2332 
          ;
          #line 2332 
          if ((long)(tmp_15 == np->last_tx_ctx) != 0L) 
                                                       #line 2333 
                                                       np->put_tx_ctx = np->tx_skb;
        }
        #line 2334 
        if (! (frag_size_0 != 0U)) 
                                   #line 2293 
                                   break;
      }
    }
    #line 2288 
    i ++;
  }
  #line 2337 
  if ((long)(np->tx_ring.orig == put_tx) != 0L) 
                                                #line 2338 
                                                prev_tx = np->last_tx.orig; else 
                                                                    #line 2340 
                                                                    prev_tx = put_tx + 18446744073709551615U;
  #line 2342 
  if ((long)(np->put_tx_ctx == np->tx_skb) != 0L) 
                                                  #line 2343 
                                                  prev_tx_ctx = np->last_tx_ctx; else 
                                                                    #line 2345 
                                                                    prev_tx_ctx = np->put_tx_ctx + 18446744073709551615U;
  #line 2348 
  prev_tx->flaglen |= tx_flags_extra;
  #line 2351 
  prev_tx_ctx->skb = skb;
  #line 2353 
  if ((int)skb_is_gso(skb) != 0) {
    #line 2354 
    tx_flags_extra = (unsigned int)(((int)((struct skb_shared_info *)skb_end_pointer(skb))->gso_size << 14) | 268435456);
  }
  else 
    #line 2356 
    if ((unsigned int)skb->ip_summed == 3U) 
                                            #line 2356 
                                            tx_flags_extra = 201326592U; else 
                                                                    #line 2356 
                                                                    tx_flags_extra = 0U;
  #line 2359 
  cif___ldv_spin_lock_lock_of_fe_priv(& np->lock);
  #line 2362 
  start_tx->flaglen |= tx_flags | tx_flags_extra;
  #line 2364 
  netdev_sent_queue(np->dev,skb->len);
  #line 2366 
  skb_tx_timestamp(skb);
  #line 2368 
  np->put_tx.orig = put_tx;
  #line 2370 
  cif_spin_unlock_irqrestore_lock_of_fe_priv(& np->lock,flags);
  #line 2372 
  txkick: 
          #line 2372 
  ;
  #line 2373 
  if ((int)netif_queue_stopped(dev) != 0) 
                                          #line 2373 
                                          goto _LOR;
  else {
    #line 2373 
    if (! netdev_xmit_more()) {
      #line 2373 
      _LOR: {
              #line 2374 
              u32 txrxctl_kick;
              #line 2375 
              dma_error: 
                         #line 2375 
              ;
              #line 2376 
              txrxctl_kick = np->txrxctl_bits | 1U;
              #line 2377 
              ;
              #line 2377 
              writel(txrxctl_kick,(void *)(get_hwbase(dev) + 324U));
            }
    }
  }
  #line 2380 
  return ret;
}

#line 2383  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
static netdev_tx_t nv_start_xmit_optimized(struct sk_buff *skb, struct net_device *dev)
{
  #line 2388 
  u32 tx_flags_extra;
  #line 2390 
  unsigned int i;
  #line 2392 
  u32 bcnt;
  #line 2394 
  unsigned int tmp_2;
  #line 2395 
  u32 empty_slots;
  #line 2396 
  struct ring_desc_ex *put_tx;
  #line 2397 
  struct ring_desc_ex *start_tx;
  #line 2398 
  struct ring_desc_ex *prev_tx;
  #line 2399 
  struct nv_skb_map *prev_tx_ctx;
  #line 2402 
  unsigned long flags;
  #line 2386 
  struct fe_priv *np = netdev_priv(dev);
  #line 2387 
  u32 tx_flags = 0U;
  #line 2389 
  unsigned int fragments = (unsigned int)((struct skb_shared_info *)skb_end_pointer(skb))->nr_frags;
  #line 2391 
  u32 offset = 0U;
  #line 2393 
  u32 size = skb_headlen(skb);
  #line 2394 
  if ((size & 16383U) != 0U) 
                             #line 2394 
                             tmp_2 = 1U; else 
                                              #line 2394 
                                              tmp_2 = 0U;
  #line 2394 
  u32 entries = (size >> 14) + tmp_2;
  #line 2400 
  struct nv_skb_map *start_tx_ctx = (struct nv_skb_map *)0;
  #line 2401 
  struct nv_skb_map *tmp_tx_ctx = (struct nv_skb_map *)0;
  #line 2403 
  netdev_tx_t ret = (enum netdev_tx)0;
  #line 2406 
  i = 0U;
  #line 2406 
  while (i < fragments) {
    {
      #line 2409 
      unsigned int tmp_5;
      #line 2407 
      u32 frag_size = skb_frag_size(& ((struct skb_shared_info *)skb_end_pointer(skb))->frags[i]);
      #line 2409 
      if ((frag_size & 16383U) != 0U) 
                                      #line 2409 
                                      tmp_5 = 1U; else 
                                                       #line 2409 
                                                       tmp_5 = 0U;
      #line 2409 
      entries = ((frag_size >> 14) + tmp_5) + entries;
    }
    #line 2406 
    i ++;
  }
  #line 2413 
  cif___ldv_spin_lock_lock_of_fe_priv(& np->lock);
  #line 2414 
  empty_slots = nv_get_empty_tx_slots(np);
  #line 2415 
  if ((long)(empty_slots <= entries) != 0L) {
    #line 2416 
    netif_stop_queue(dev);
    #line 2417 
    np->tx_stop = 1;
    #line 2418 
    cif_spin_unlock_irqrestore_lock_of_fe_priv(& np->lock,flags);
    #line 2423 
    ret = NETDEV_TX_BUSY;
    #line 2425 
    goto txkick;
  }
  #line 2427 
  cif_spin_unlock_irqrestore_lock_of_fe_priv(& np->lock,flags);
  #line 2429 
  put_tx = np->put_tx.ex;
  #line 2429 
  start_tx = put_tx;
  #line 2430 
  start_tx_ctx = np->put_tx_ctx;
  #line 2433 
  while (1) {
    {
      #line 2459 
      struct ring_desc_ex *tmp_9;
      #line 2461 
      struct nv_skb_map *tmp_10;
      #line 2434 
      if (16384U < size) 
                         #line 2434 
                         bcnt = 16384U; else 
                                             #line 2434 
                                             bcnt = size;
      #line 2435 
      (np->put_tx_ctx)->dma = dma_map_single_attrs(& (np->pci_dev)->dev,(void *)(skb->data + (unsigned long)offset),(unsigned long)bcnt,(enum dma_data_direction)DMA_TO_DEVICE,0UL);
      #line 2438 
      if ((long)(dma_mapping_error(& (np->pci_dev)->dev,(np->put_tx_ctx)->dma) != 0) != 0L) {
        #line 2441 
        dev_kfree_skb_any(skb);
        #line 2442 
        u64_stats_init(& np->swstats_tx_syncp);
        #line 2443 
        __this_cpu_preempt_check((char *)"add");
        {
          #line 2443 
          void *__vpp_verify = (void *)0;
          #line 2443 
          void *tmp_6 = __vpp_verify;
        }
        #line 2443 
        switch (8UL) {
          #line 2443 
          case (unsigned long)1: 
                                 #line 2443 
          ;
          {
            #line 2443 
            int pao_ID__ = 1;
            #line 2443 
            switch (8UL) {
              #line 2443 
              case (unsigned long)1: 
                                     #line 2443 
              ;
              #line 2445 
              ldv_inline_asm();
              #line 2443 
              break;
              #line 2443 
              case (unsigned long)2: 
                                     #line 2443 
              ;
              #line 2445 
              ldv_inline_asm();
              #line 2443 
              break;
              #line 2443 
              case (unsigned long)4: 
                                     #line 2443 
              ;
              #line 2445 
              ldv_inline_asm();
              #line 2443 
              break;
              #line 2443 
              case (unsigned long)8: 
                                     #line 2443 
              ;
              #line 2445 
              ldv_inline_asm();
              #line 2443 
              break;
              #line 2443 
              default: 
                       #line 2443 
              ;
              #line 2443 
              __bad_percpu_size();
            }
          }
          #line 2443 
          break;
          #line 2443 
          case (unsigned long)2: 
                                 #line 2443 
          ;
          {
            #line 2443 
            int pao_ID___0 = 1;
            #line 2443 
            switch (8UL) {
              #line 2443 
              case (unsigned long)1: 
                                     #line 2443 
              ;
              #line 2445 
              ldv_inline_asm();
              #line 2443 
              break;
              #line 2443 
              case (unsigned long)2: 
                                     #line 2443 
              ;
              #line 2445 
              ldv_inline_asm();
              #line 2443 
              break;
              #line 2443 
              case (unsigned long)4: 
                                     #line 2443 
              ;
              #line 2445 
              ldv_inline_asm();
              #line 2443 
              break;
              #line 2443 
              case (unsigned long)8: 
                                     #line 2443 
              ;
              #line 2445 
              ldv_inline_asm();
              #line 2443 
              break;
              #line 2443 
              default: 
                       #line 2443 
              ;
              #line 2443 
              __bad_percpu_size();
            }
          }
          #line 2443 
          break;
          #line 2443 
          case (unsigned long)4: 
                                 #line 2443 
          ;
          {
            #line 2443 
            int pao_ID___1 = 1;
            #line 2443 
            switch (8UL) {
              #line 2443 
              case (unsigned long)1: 
                                     #line 2443 
              ;
              #line 2445 
              ldv_inline_asm();
              #line 2443 
              break;
              #line 2443 
              case (unsigned long)2: 
                                     #line 2443 
              ;
              #line 2445 
              ldv_inline_asm();
              #line 2443 
              break;
              #line 2443 
              case (unsigned long)4: 
                                     #line 2443 
              ;
              #line 2445 
              ldv_inline_asm();
              #line 2443 
              break;
              #line 2443 
              case (unsigned long)8: 
                                     #line 2443 
              ;
              #line 2445 
              ldv_inline_asm();
              #line 2443 
              break;
              #line 2443 
              default: 
                       #line 2443 
              ;
              #line 2443 
              __bad_percpu_size();
            }
          }
          #line 2443 
          break;
          #line 2443 
          case (unsigned long)8: 
                                 #line 2443 
          ;
          {
            #line 2443 
            int pao_ID___2 = 1;
            #line 2443 
            switch (8UL) {
              #line 2443 
              case (unsigned long)1: 
                                     #line 2443 
              ;
              #line 2445 
              ldv_inline_asm();
              #line 2443 
              break;
              #line 2443 
              case (unsigned long)2: 
                                     #line 2443 
              ;
              #line 2445 
              ldv_inline_asm();
              #line 2443 
              break;
              #line 2443 
              case (unsigned long)4: 
                                     #line 2443 
              ;
              #line 2445 
              ldv_inline_asm();
              #line 2443 
              break;
              #line 2443 
              case (unsigned long)8: 
                                     #line 2443 
              ;
              #line 2445 
              ldv_inline_asm();
              #line 2443 
              break;
              #line 2443 
              default: 
                       #line 2443 
              ;
              #line 2443 
              __bad_percpu_size();
            }
          }
          #line 2443 
          break;
          #line 2443 
          default: 
                   #line 2443 
          ;
          #line 2443 
          __bad_size_call_parameter();
          #line 2443 
          break;
        }
        #line 2444 
        u64_stats_init(& np->swstats_tx_syncp);
        #line 2446 
        ret = NETDEV_TX_OK;
        #line 2448 
        goto dma_error;
      }
      #line 2450 
      (np->put_tx_ctx)->dma_len = (unsigned int)bcnt;
      #line 2451 
      (np->put_tx_ctx)->dma_single = (unsigned int)1U;
      #line 2452 
      put_tx->bufhigh = dma_high((np->put_tx_ctx)->dma);
      #line 2453 
      put_tx->buflow = dma_low((np->put_tx_ctx)->dma);
      #line 2454 
      put_tx->flaglen = (bcnt + 4294967295U) | tx_flags;
      #line 2456 
      tx_flags = 2147483648U;
      #line 2457 
      offset += bcnt;
      #line 2458 
      size -= bcnt;
      #line 2459 
      tmp_9 = put_tx;
      #line 2459 
      put_tx ++;
      #line 2459 
      ;
      #line 2459 
      if ((long)(tmp_9 == np->last_tx.ex) != 0L) 
                                                 #line 2460 
                                                 put_tx = np->tx_ring.ex;
      #line 2461 
      tmp_10 = np->put_tx_ctx;
      #line 2461 
      (np->put_tx_ctx) ++;
      #line 2461 
      ;
      #line 2461 
      if ((long)(tmp_10 == np->last_tx_ctx) != 0L) 
                                                   #line 2462 
                                                   np->put_tx_ctx = np->tx_skb;
    }
    #line 2463 
    if (! (size != 0U)) 
                        #line 2433 
                        break;
  }
  #line 2466 
  i = 0U;
  #line 2466 
  while (i < fragments) {
    {
      #line 2467 
      skb_frag_t *frag = & ((struct skb_shared_info *)skb_end_pointer(skb))->frags[i];
      #line 2468 
      u32 frag_size_0 = skb_frag_size(frag);
      #line 2469 
      offset = 0U;
      #line 2471 
      while (1) {
        {
          #line 2508 
          struct ring_desc_ex *tmp_17;
          #line 2510 
          struct nv_skb_map *tmp_18;
          #line 2472 
          if (16384U < frag_size_0) 
                                    #line 2472 
                                    bcnt = 16384U; else 
                                                        #line 2472 
                                                        bcnt = frag_size_0;
          #line 2473 
          if (start_tx_ctx == (struct nv_skb_map *)0) {
            #line 2474 
            tmp_tx_ctx = np->put_tx_ctx;
            #line 2474 
            start_tx_ctx = tmp_tx_ctx;
          }
          #line 2475 
          (np->put_tx_ctx)->dma = skb_frag_dma_map(& (np->pci_dev)->dev,frag,(unsigned long)offset,(unsigned long)bcnt,(enum dma_data_direction)DMA_TO_DEVICE);
          #line 2481 
          if ((long)(dma_mapping_error(& (np->pci_dev)->dev,(np->put_tx_ctx)->dma) != 0) != 0L) {
            #line 2485 
            while (1) {
              {
                #line 2487 
                struct nv_skb_map *tmp_13;
                #line 2486 
                nv_unmap_txskb(np,start_tx_ctx);
                #line 2487 
                tmp_13 = tmp_tx_ctx;
                #line 2487 
                tmp_tx_ctx ++;
                #line 2487 
                ;
                #line 2487 
                if ((long)(tmp_13 == np->last_tx_ctx) != 0L) 
                                                             #line 2488 
                                                             tmp_tx_ctx = np->tx_skb;
              }
              #line 2489 
              if (! (np->put_tx_ctx != tmp_tx_ctx)) 
                                                    #line 2485 
                                                    break;
            }
            #line 2490 
            dev_kfree_skb_any(skb);
            #line 2491 
            np->put_tx_ctx = start_tx_ctx;
            #line 2492 
            u64_stats_init(& np->swstats_tx_syncp);
            #line 2493 
            __this_cpu_preempt_check((char *)"add");
            {
              #line 2493 
              void *__vpp_verify_0 = (void *)0;
              #line 2493 
              void *tmp_16 = __vpp_verify_0;
            }
            #line 2493 
            switch (8UL) {
              #line 2493 
              case (unsigned long)1: 
                                     #line 2493 
              ;
              {
                #line 2493 
                int pao_ID___3 = 1;
                #line 2493 
                switch (8UL) {
                  #line 2493 
                  case (unsigned long)1: 
                                         #line 2493 
                  ;
                  #line 2495 
                  ldv_inline_asm();
                  #line 2493 
                  break;
                  #line 2493 
                  case (unsigned long)2: 
                                         #line 2493 
                  ;
                  #line 2495 
                  ldv_inline_asm();
                  #line 2493 
                  break;
                  #line 2493 
                  case (unsigned long)4: 
                                         #line 2493 
                  ;
                  #line 2495 
                  ldv_inline_asm();
                  #line 2493 
                  break;
                  #line 2493 
                  case (unsigned long)8: 
                                         #line 2493 
                  ;
                  #line 2495 
                  ldv_inline_asm();
                  #line 2493 
                  break;
                  #line 2493 
                  default: 
                           #line 2493 
                  ;
                  #line 2493 
                  __bad_percpu_size();
                }
              }
              #line 2493 
              break;
              #line 2493 
              case (unsigned long)2: 
                                     #line 2493 
              ;
              {
                #line 2493 
                int pao_ID___4 = 1;
                #line 2493 
                switch (8UL) {
                  #line 2493 
                  case (unsigned long)1: 
                                         #line 2493 
                  ;
                  #line 2495 
                  ldv_inline_asm();
                  #line 2493 
                  break;
                  #line 2493 
                  case (unsigned long)2: 
                                         #line 2493 
                  ;
                  #line 2495 
                  ldv_inline_asm();
                  #line 2493 
                  break;
                  #line 2493 
                  case (unsigned long)4: 
                                         #line 2493 
                  ;
                  #line 2495 
                  ldv_inline_asm();
                  #line 2493 
                  break;
                  #line 2493 
                  case (unsigned long)8: 
                                         #line 2493 
                  ;
                  #line 2495 
                  ldv_inline_asm();
                  #line 2493 
                  break;
                  #line 2493 
                  default: 
                           #line 2493 
                  ;
                  #line 2493 
                  __bad_percpu_size();
                }
              }
              #line 2493 
              break;
              #line 2493 
              case (unsigned long)4: 
                                     #line 2493 
              ;
              {
                #line 2493 
                int pao_ID___5 = 1;
                #line 2493 
                switch (8UL) {
                  #line 2493 
                  case (unsigned long)1: 
                                         #line 2493 
                  ;
                  #line 2495 
                  ldv_inline_asm();
                  #line 2493 
                  break;
                  #line 2493 
                  case (unsigned long)2: 
                                         #line 2493 
                  ;
                  #line 2495 
                  ldv_inline_asm();
                  #line 2493 
                  break;
                  #line 2493 
                  case (unsigned long)4: 
                                         #line 2493 
                  ;
                  #line 2495 
                  ldv_inline_asm();
                  #line 2493 
                  break;
                  #line 2493 
                  case (unsigned long)8: 
                                         #line 2493 
                  ;
                  #line 2495 
                  ldv_inline_asm();
                  #line 2493 
                  break;
                  #line 2493 
                  default: 
                           #line 2493 
                  ;
                  #line 2493 
                  __bad_percpu_size();
                }
              }
              #line 2493 
              break;
              #line 2493 
              case (unsigned long)8: 
                                     #line 2493 
              ;
              {
                #line 2493 
                int pao_ID___6 = 1;
                #line 2493 
                switch (8UL) {
                  #line 2493 
                  case (unsigned long)1: 
                                         #line 2493 
                  ;
                  #line 2495 
                  ldv_inline_asm();
                  #line 2493 
                  break;
                  #line 2493 
                  case (unsigned long)2: 
                                         #line 2493 
                  ;
                  #line 2495 
                  ldv_inline_asm();
                  #line 2493 
                  break;
                  #line 2493 
                  case (unsigned long)4: 
                                         #line 2493 
                  ;
                  #line 2495 
                  ldv_inline_asm();
                  #line 2493 
                  break;
                  #line 2493 
                  case (unsigned long)8: 
                                         #line 2493 
                  ;
                  #line 2495 
                  ldv_inline_asm();
                  #line 2493 
                  break;
                  #line 2493 
                  default: 
                           #line 2493 
                  ;
                  #line 2493 
                  __bad_percpu_size();
                }
              }
              #line 2493 
              break;
              #line 2493 
              default: 
                       #line 2493 
              ;
              #line 2493 
              __bad_size_call_parameter();
              #line 2493 
              break;
            }
            #line 2494 
            u64_stats_init(& np->swstats_tx_syncp);
            #line 2496 
            ret = NETDEV_TX_OK;
            #line 2498 
            goto dma_error;
          }
          #line 2500 
          (np->put_tx_ctx)->dma_len = (unsigned int)bcnt;
          #line 2501 
          (np->put_tx_ctx)->dma_single = (unsigned int)0U;
          #line 2502 
          put_tx->bufhigh = dma_high((np->put_tx_ctx)->dma);
          #line 2503 
          put_tx->buflow = dma_low((np->put_tx_ctx)->dma);
          #line 2504 
          put_tx->flaglen = (bcnt + 4294967295U) | tx_flags;
          #line 2506 
          offset += bcnt;
          #line 2507 
          frag_size_0 -= bcnt;
          #line 2508 
          tmp_17 = put_tx;
          #line 2508 
          put_tx ++;
          #line 2508 
          ;
          #line 2508 
          if ((long)(tmp_17 == np->last_tx.ex) != 0L) 
                                                      #line 2509 
                                                      put_tx = np->tx_ring.ex;
          #line 2510 
          tmp_18 = np->put_tx_ctx;
          #line 2510 
          (np->put_tx_ctx) ++;
          #line 2510 
          ;
          #line 2510 
          if ((long)(tmp_18 == np->last_tx_ctx) != 0L) 
                                                       #line 2511 
                                                       np->put_tx_ctx = np->tx_skb;
        }
        #line 2512 
        if (! (frag_size_0 != 0U)) 
                                   #line 2471 
                                   break;
      }
    }
    #line 2466 
    i ++;
  }
  #line 2515 
  if ((long)(np->tx_ring.ex == put_tx) != 0L) 
                                              #line 2516 
                                              prev_tx = np->last_tx.ex; else 
                                                                    #line 2518 
                                                                    prev_tx = put_tx + 18446744073709551615U;
  #line 2520 
  if ((long)(np->put_tx_ctx == np->tx_skb) != 0L) 
                                                  #line 2521 
                                                  prev_tx_ctx = np->last_tx_ctx; else 
                                                                    #line 2523 
                                                                    prev_tx_ctx = np->put_tx_ctx + 18446744073709551615U;
  #line 2526 
  prev_tx->flaglen |= 536870912U;
  #line 2529 
  prev_tx_ctx->skb = skb;
  #line 2531 
  if ((int)skb_is_gso(skb) != 0) {
    #line 2532 
    tx_flags_extra = (unsigned int)(((int)((struct skb_shared_info *)skb_end_pointer(skb))->gso_size << 14) | 268435456);
  }
  else 
    #line 2534 
    if ((unsigned int)skb->ip_summed == 3U) 
                                            #line 2534 
                                            tx_flags_extra = 201326592U; else 
                                                                    #line 2534 
                                                                    tx_flags_extra = 0U;
  #line 2538 
  if ((unsigned int)skb->vlan_present != 0U) 
                                             #line 2539 
                                             start_tx->txvlan = (unsigned int)((int)skb->vlan_tci | 262144); else 
                                                                    #line 2542 
                                                                    start_tx->txvlan = 0U;
  #line 2544 
  cif___ldv_spin_lock_lock_of_fe_priv(& np->lock);
  #line 2546 
  if (np->tx_limit != 0) 
    #line 2552 
    if (np->tx_pkts_in_progress == 16U) {
      #line 2553 
      if (np->tx_change_owner == (struct nv_skb_map *)0) 
                                                         #line 2554 
                                                         np->tx_change_owner = start_tx_ctx;
      #line 2557 
      tx_flags &= 2147483647U;
      #line 2558 
      start_tx_ctx->first_tx_desc = start_tx;
      #line 2559 
      start_tx_ctx->next_tx_ctx = np->put_tx_ctx;
      #line 2560 
      np->tx_end_flip = np->put_tx_ctx;
    }
    else 
         #line 2562 
         (np->tx_pkts_in_progress) ++;
  #line 2567 
  start_tx->flaglen |= tx_flags | tx_flags_extra;
  #line 2569 
  netdev_sent_queue(np->dev,skb->len);
  #line 2571 
  skb_tx_timestamp(skb);
  #line 2573 
  np->put_tx.ex = put_tx;
  #line 2575 
  cif_spin_unlock_irqrestore_lock_of_fe_priv(& np->lock,flags);
  #line 2577 
  txkick: 
          #line 2577 
  ;
  #line 2578 
  if ((int)netif_queue_stopped(dev) != 0) 
                                          #line 2578 
                                          goto _LOR;
  else {
    #line 2578 
    if (! netdev_xmit_more()) {
      #line 2578 
      _LOR: {
              #line 2579 
              u32 txrxctl_kick;
              #line 2580 
              dma_error: 
                         #line 2580 
              ;
              #line 2581 
              txrxctl_kick = np->txrxctl_bits | 1U;
              #line 2582 
              ;
              #line 2582 
              writel(txrxctl_kick,(void *)(get_hwbase(dev) + 324U));
            }
    }
  }
  #line 2585 
  return ret;
}

#line 2588  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
__inline static void nv_tx_flip_ownership(struct net_device *dev)
{
  #line 2590 
  struct fe_priv *np = netdev_priv(dev);
  #line 2592 
  (np->tx_pkts_in_progress) --;
  #line 2593 
  if (np->tx_change_owner != (struct nv_skb_map *)0) {
    #line 2594 
    ((np->tx_change_owner)->first_tx_desc)->flaglen |= 2147483648U;
    #line 2596 
    (np->tx_pkts_in_progress) ++;
    #line 2598 
    np->tx_change_owner = (np->tx_change_owner)->next_tx_ctx;
    #line 2599 
    if (np->tx_change_owner == np->tx_end_flip) 
                                                #line 2600 
                                                np->tx_change_owner = (struct nv_skb_map *)0;
    #line 2602 
    ;
    #line 2602 
    writel(np->txrxctl_bits | 1U,(void *)(get_hwbase(dev) + 324U));
  }
  #line 2604 
  return;
}

#line 2611  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
static int nv_tx_done(struct net_device *dev, int limit)
{
  #line 2614 
  u32 flags;
  #line 2613 
  struct fe_priv *np = netdev_priv(dev);
  #line 2615 
  int tx_work = 0;
  #line 2616 
  struct ring_desc *orig_get_tx = np->get_tx.orig;
  #line 2617 
  unsigned int bytes_compl = 0U;
  #line 2619 
  while (1) {
    #line 2619 
    if (np->get_tx.orig != np->put_tx.orig) {
      #line 2619 
      flags = (np->get_tx.orig)->flaglen;
      #line 2619 
      if ((flags & 2147483648U) == 0U) {
        #line 2620 
        if (! (tx_work < limit)) 
                                 #line 2619 
                                 break;
      }
      else 
           #line 2619 
           break;
    }
    else 
         #line 2619 
         break;
    {
      #line 2666 
      struct ring_desc *tmp_8;
      #line 2668 
      struct nv_skb_map *tmp_9;
      #line 2623 
      nv_unmap_txskb(np,np->get_tx_ctx);
      #line 2625 
      if (np->desc_ver == 1U) {
        #line 2626 
        if ((flags & 65536U) != 0U) {
          #line 2627 
          if ((long)((flags & 1073741824U) != 0U) != 0L) {
            #line 2628 
            if ((flags & 524288U) != 0U && (flags & 15728640U) == 0U) 
              #line 2630 
              nv_legacybackoff_reseed(dev);
          }
          else {
            #line 2632 
            unsigned int len;
            #line 2634 
            u64_stats_init(& np->swstats_tx_syncp);
            #line 2635 
            __this_cpu_preempt_check((char *)"add");
            {
              #line 2635 
              void *__vpp_verify = (void *)0;
              #line 2635 
              void *tmp_2 = __vpp_verify;
            }
            #line 2635 
            switch (8UL) {
              #line 2635 
              case (unsigned long)1: 
                                     #line 2635 
              ;
              {
                #line 2635 
                int pao_ID__ = 1;
                #line 2635 
                switch (8UL) {
                  #line 2635 
                  case (unsigned long)1: 
                                         #line 2635 
                  ;
                  #line 2637 
                  ldv_inline_asm();
                  #line 2635 
                  break;
                  #line 2635 
                  case (unsigned long)2: 
                                         #line 2635 
                  ;
                  #line 2637 
                  ldv_inline_asm();
                  #line 2635 
                  break;
                  #line 2635 
                  case (unsigned long)4: 
                                         #line 2635 
                  ;
                  #line 2637 
                  ldv_inline_asm();
                  #line 2635 
                  break;
                  #line 2635 
                  case (unsigned long)8: 
                                         #line 2635 
                  ;
                  #line 2637 
                  ldv_inline_asm();
                  #line 2635 
                  break;
                  #line 2635 
                  default: 
                           #line 2635 
                  ;
                  #line 2635 
                  __bad_percpu_size();
                }
              }
              #line 2635 
              break;
              #line 2635 
              case (unsigned long)2: 
                                     #line 2635 
              ;
              {
                #line 2635 
                int pao_ID___0 = 1;
                #line 2635 
                switch (8UL) {
                  #line 2635 
                  case (unsigned long)1: 
                                         #line 2635 
                  ;
                  #line 2637 
                  ldv_inline_asm();
                  #line 2635 
                  break;
                  #line 2635 
                  case (unsigned long)2: 
                                         #line 2635 
                  ;
                  #line 2637 
                  ldv_inline_asm();
                  #line 2635 
                  break;
                  #line 2635 
                  case (unsigned long)4: 
                                         #line 2635 
                  ;
                  #line 2637 
                  ldv_inline_asm();
                  #line 2635 
                  break;
                  #line 2635 
                  case (unsigned long)8: 
                                         #line 2635 
                  ;
                  #line 2637 
                  ldv_inline_asm();
                  #line 2635 
                  break;
                  #line 2635 
                  default: 
                           #line 2635 
                  ;
                  #line 2635 
                  __bad_percpu_size();
                }
              }
              #line 2635 
              break;
              #line 2635 
              case (unsigned long)4: 
                                     #line 2635 
              ;
              {
                #line 2635 
                int pao_ID___1 = 1;
                #line 2635 
                switch (8UL) {
                  #line 2635 
                  case (unsigned long)1: 
                                         #line 2635 
                  ;
                  #line 2637 
                  ldv_inline_asm();
                  #line 2635 
                  break;
                  #line 2635 
                  case (unsigned long)2: 
                                         #line 2635 
                  ;
                  #line 2637 
                  ldv_inline_asm();
                  #line 2635 
                  break;
                  #line 2635 
                  case (unsigned long)4: 
                                         #line 2635 
                  ;
                  #line 2637 
                  ldv_inline_asm();
                  #line 2635 
                  break;
                  #line 2635 
                  case (unsigned long)8: 
                                         #line 2635 
                  ;
                  #line 2637 
                  ldv_inline_asm();
                  #line 2635 
                  break;
                  #line 2635 
                  default: 
                           #line 2635 
                  ;
                  #line 2635 
                  __bad_percpu_size();
                }
              }
              #line 2635 
              break;
              #line 2635 
              case (unsigned long)8: 
                                     #line 2635 
              ;
              {
                #line 2635 
                int pao_ID___2 = 1;
                #line 2635 
                switch (8UL) {
                  #line 2635 
                  case (unsigned long)1: 
                                         #line 2635 
                  ;
                  #line 2637 
                  ldv_inline_asm();
                  #line 2635 
                  break;
                  #line 2635 
                  case (unsigned long)2: 
                                         #line 2635 
                  ;
                  #line 2637 
                  ldv_inline_asm();
                  #line 2635 
                  break;
                  #line 2635 
                  case (unsigned long)4: 
                                         #line 2635 
                  ;
                  #line 2637 
                  ldv_inline_asm();
                  #line 2635 
                  break;
                  #line 2635 
                  case (unsigned long)8: 
                                         #line 2635 
                  ;
                  #line 2637 
                  ldv_inline_asm();
                  #line 2635 
                  break;
                  #line 2635 
                  default: 
                           #line 2635 
                  ;
                  #line 2635 
                  __bad_percpu_size();
                }
              }
              #line 2635 
              break;
              #line 2635 
              default: 
                       #line 2635 
              ;
              #line 2635 
              __bad_size_call_parameter();
              #line 2635 
              break;
            }
            #line 2636 
            len = ((np->get_tx_ctx)->skb)->len;
            #line 2637 
            __this_cpu_preempt_check((char *)"add");
            {
              #line 2637 
              void *__vpp_verify_0 = (void *)0;
              #line 2637 
              void *tmp_12 = __vpp_verify_0;
            }
            #line 2637 
            switch (8UL) {
              #line 2637 
              case (unsigned long)1: 
                                     #line 2637 
              ;
              {
                #line 2637 
                int tmp_0;
                #line 2637 
                if (0 != 0 && (len == 1U || len == 4294967295U)) 
                                                                 #line 2637 
                                                                 tmp_0 = (int)len; else 
                                                                    #line 2637 
                                                                    tmp_0 = 0;
                #line 2637 
                int pao_ID___3 = tmp_0;
                #line 2637 
                switch (8UL) {
                  #line 2637 
                  case (unsigned long)1: 
                                         #line 2637 
                  ;
                  #line 2637 
                  if (pao_ID___3 == 1) 
                                       #line 2639 
                                       ldv_inline_asm();
                  else 
                    #line 2637 
                    if (pao_ID___3 == -1) 
                                          #line 2639 
                                          ldv_inline_asm(); else 
                                                                 #line 2642 
                                                                 ldv_inline_asm();
                  #line 2637 
                  break;
                  #line 2637 
                  case (unsigned long)2: 
                                         #line 2637 
                  ;
                  #line 2637 
                  if (pao_ID___3 == 1) 
                                       #line 2639 
                                       ldv_inline_asm();
                  else 
                    #line 2637 
                    if (pao_ID___3 == -1) 
                                          #line 2639 
                                          ldv_inline_asm(); else 
                                                                 #line 2642 
                                                                 ldv_inline_asm();
                  #line 2637 
                  break;
                  #line 2637 
                  case (unsigned long)4: 
                                         #line 2637 
                  ;
                  #line 2637 
                  if (pao_ID___3 == 1) 
                                       #line 2639 
                                       ldv_inline_asm();
                  else 
                    #line 2637 
                    if (pao_ID___3 == -1) 
                                          #line 2639 
                                          ldv_inline_asm(); else 
                                                                 #line 2642 
                                                                 ldv_inline_asm();
                  #line 2637 
                  break;
                  #line 2637 
                  case (unsigned long)8: 
                                         #line 2637 
                  ;
                  #line 2637 
                  if (pao_ID___3 == 1) 
                                       #line 2639 
                                       ldv_inline_asm();
                  else 
                    #line 2637 
                    if (pao_ID___3 == -1) 
                                          #line 2639 
                                          ldv_inline_asm(); else 
                                                                 #line 2642 
                                                                 ldv_inline_asm();
                  #line 2637 
                  break;
                  #line 2637 
                  default: 
                           #line 2637 
                  ;
                  #line 2637 
                  __bad_percpu_size();
                }
              }
              #line 2637 
              break;
              #line 2637 
              case (unsigned long)2: 
                                     #line 2637 
              ;
              {
                #line 2637 
                int tmp_1;
                #line 2637 
                if (0 != 0 && (len == 1U || len == 4294967295U)) 
                                                                 #line 2637 
                                                                 tmp_1 = (int)len; else 
                                                                    #line 2637 
                                                                    tmp_1 = 0;
                #line 2637 
                int pao_ID___4 = tmp_1;
                #line 2637 
                switch (8UL) {
                  #line 2637 
                  case (unsigned long)1: 
                                         #line 2637 
                  ;
                  #line 2637 
                  if (pao_ID___4 == 1) 
                                       #line 2639 
                                       ldv_inline_asm();
                  else 
                    #line 2637 
                    if (pao_ID___4 == -1) 
                                          #line 2639 
                                          ldv_inline_asm(); else 
                                                                 #line 2642 
                                                                 ldv_inline_asm();
                  #line 2637 
                  break;
                  #line 2637 
                  case (unsigned long)2: 
                                         #line 2637 
                  ;
                  #line 2637 
                  if (pao_ID___4 == 1) 
                                       #line 2639 
                                       ldv_inline_asm();
                  else 
                    #line 2637 
                    if (pao_ID___4 == -1) 
                                          #line 2639 
                                          ldv_inline_asm(); else 
                                                                 #line 2642 
                                                                 ldv_inline_asm();
                  #line 2637 
                  break;
                  #line 2637 
                  case (unsigned long)4: 
                                         #line 2637 
                  ;
                  #line 2637 
                  if (pao_ID___4 == 1) 
                                       #line 2639 
                                       ldv_inline_asm();
                  else 
                    #line 2637 
                    if (pao_ID___4 == -1) 
                                          #line 2639 
                                          ldv_inline_asm(); else 
                                                                 #line 2642 
                                                                 ldv_inline_asm();
                  #line 2637 
                  break;
                  #line 2637 
                  case (unsigned long)8: 
                                         #line 2637 
                  ;
                  #line 2637 
                  if (pao_ID___4 == 1) 
                                       #line 2639 
                                       ldv_inline_asm();
                  else 
                    #line 2637 
                    if (pao_ID___4 == -1) 
                                          #line 2639 
                                          ldv_inline_asm(); else 
                                                                 #line 2642 
                                                                 ldv_inline_asm();
                  #line 2637 
                  break;
                  #line 2637 
                  default: 
                           #line 2637 
                  ;
                  #line 2637 
                  __bad_percpu_size();
                }
              }
              #line 2637 
              break;
              #line 2637 
              case (unsigned long)4: 
                                     #line 2637 
              ;
              {
                #line 2637 
                int tmp_2_2;
                #line 2637 
                if (0 != 0 && (len == 1U || len == 4294967295U)) 
                                                                 #line 2637 
                                                                 tmp_2_2 = (int)len; else 
                                                                    #line 2637 
                                                                    tmp_2_2 = 0;
                #line 2637 
                int pao_ID___5 = tmp_2_2;
                #line 2637 
                switch (8UL) {
                  #line 2637 
                  case (unsigned long)1: 
                                         #line 2637 
                  ;
                  #line 2637 
                  if (pao_ID___5 == 1) 
                                       #line 2639 
                                       ldv_inline_asm();
                  else 
                    #line 2637 
                    if (pao_ID___5 == -1) 
                                          #line 2639 
                                          ldv_inline_asm(); else 
                                                                 #line 2642 
                                                                 ldv_inline_asm();
                  #line 2637 
                  break;
                  #line 2637 
                  case (unsigned long)2: 
                                         #line 2637 
                  ;
                  #line 2637 
                  if (pao_ID___5 == 1) 
                                       #line 2639 
                                       ldv_inline_asm();
                  else 
                    #line 2637 
                    if (pao_ID___5 == -1) 
                                          #line 2639 
                                          ldv_inline_asm(); else 
                                                                 #line 2642 
                                                                 ldv_inline_asm();
                  #line 2637 
                  break;
                  #line 2637 
                  case (unsigned long)4: 
                                         #line 2637 
                  ;
                  #line 2637 
                  if (pao_ID___5 == 1) 
                                       #line 2639 
                                       ldv_inline_asm();
                  else 
                    #line 2637 
                    if (pao_ID___5 == -1) 
                                          #line 2639 
                                          ldv_inline_asm(); else 
                                                                 #line 2642 
                                                                 ldv_inline_asm();
                  #line 2637 
                  break;
                  #line 2637 
                  case (unsigned long)8: 
                                         #line 2637 
                  ;
                  #line 2637 
                  if (pao_ID___5 == 1) 
                                       #line 2639 
                                       ldv_inline_asm();
                  else 
                    #line 2637 
                    if (pao_ID___5 == -1) 
                                          #line 2639 
                                          ldv_inline_asm(); else 
                                                                 #line 2642 
                                                                 ldv_inline_asm();
                  #line 2637 
                  break;
                  #line 2637 
                  default: 
                           #line 2637 
                  ;
                  #line 2637 
                  __bad_percpu_size();
                }
              }
              #line 2637 
              break;
              #line 2637 
              case (unsigned long)8: 
                                     #line 2637 
              ;
              {
                #line 2637 
                int tmp_3;
                #line 2637 
                if (0 != 0 && (len == 1U || len == 4294967295U)) 
                                                                 #line 2637 
                                                                 tmp_3 = (int)len; else 
                                                                    #line 2637 
                                                                    tmp_3 = 0;
                #line 2637 
                int pao_ID___6 = tmp_3;
                #line 2637 
                switch (8UL) {
                  #line 2637 
                  case (unsigned long)1: 
                                         #line 2637 
                  ;
                  #line 2637 
                  if (pao_ID___6 == 1) 
                                       #line 2639 
                                       ldv_inline_asm();
                  else 
                    #line 2637 
                    if (pao_ID___6 == -1) 
                                          #line 2639 
                                          ldv_inline_asm(); else 
                                                                 #line 2642 
                                                                 ldv_inline_asm();
                  #line 2637 
                  break;
                  #line 2637 
                  case (unsigned long)2: 
                                         #line 2637 
                  ;
                  #line 2637 
                  if (pao_ID___6 == 1) 
                                       #line 2639 
                                       ldv_inline_asm();
                  else 
                    #line 2637 
                    if (pao_ID___6 == -1) 
                                          #line 2639 
                                          ldv_inline_asm(); else 
                                                                 #line 2642 
                                                                 ldv_inline_asm();
                  #line 2637 
                  break;
                  #line 2637 
                  case (unsigned long)4: 
                                         #line 2637 
                  ;
                  #line 2637 
                  if (pao_ID___6 == 1) 
                                       #line 2639 
                                       ldv_inline_asm();
                  else 
                    #line 2637 
                    if (pao_ID___6 == -1) 
                                          #line 2639 
                                          ldv_inline_asm(); else 
                                                                 #line 2642 
                                                                 ldv_inline_asm();
                  #line 2637 
                  break;
                  #line 2637 
                  case (unsigned long)8: 
                                         #line 2637 
                  ;
                  #line 2637 
                  if (pao_ID___6 == 1) 
                                       #line 2639 
                                       ldv_inline_asm();
                  else 
                    #line 2637 
                    if (pao_ID___6 == -1) 
                                          #line 2639 
                                          ldv_inline_asm(); else 
                                                                 #line 2642 
                                                                 ldv_inline_asm();
                  #line 2637 
                  break;
                  #line 2637 
                  default: 
                           #line 2637 
                  ;
                  #line 2637 
                  __bad_percpu_size();
                }
              }
              #line 2637 
              break;
              #line 2637 
              default: 
                       #line 2637 
              ;
              #line 2637 
              __bad_size_call_parameter();
              #line 2637 
              break;
            }
            #line 2638 
            u64_stats_init(& np->swstats_tx_syncp);
          }
          #line 2640 
          bytes_compl = ((np->get_tx_ctx)->skb)->len + bytes_compl;
          #line 2641 
          dev_kfree_skb_any((np->get_tx_ctx)->skb);
          #line 2642 
          (np->get_tx_ctx)->skb = (struct sk_buff *)0;
          #line 2643 
          tx_work ++;
        }
      }
      else 
        #line 2646 
        if ((flags & 536870912U) != 0U) {
          #line 2647 
          if ((long)((flags & 1073741824U) != 0U) != 0L) {
            #line 2648 
            if ((flags & 262144U) != 0U && (flags & 7864320U) == 0U) 
              #line 2650 
              nv_legacybackoff_reseed(dev);
          }
          else {
            #line 2652 
            unsigned int len_0;
            #line 2654 
            u64_stats_init(& np->swstats_tx_syncp);
            #line 2655 
            __this_cpu_preempt_check((char *)"add");
            {
              #line 2655 
              void *__vpp_verify_1 = (void *)0;
              #line 2655 
              void *tmp_22 = __vpp_verify_1;
            }
            #line 2655 
            switch (8UL) {
              #line 2655 
              case (unsigned long)1: 
                                     #line 2655 
              ;
              {
                #line 2655 
                int pao_ID___7 = 1;
                #line 2655 
                switch (8UL) {
                  #line 2655 
                  case (unsigned long)1: 
                                         #line 2655 
                  ;
                  #line 2657 
                  ldv_inline_asm();
                  #line 2655 
                  break;
                  #line 2655 
                  case (unsigned long)2: 
                                         #line 2655 
                  ;
                  #line 2657 
                  ldv_inline_asm();
                  #line 2655 
                  break;
                  #line 2655 
                  case (unsigned long)4: 
                                         #line 2655 
                  ;
                  #line 2657 
                  ldv_inline_asm();
                  #line 2655 
                  break;
                  #line 2655 
                  case (unsigned long)8: 
                                         #line 2655 
                  ;
                  #line 2657 
                  ldv_inline_asm();
                  #line 2655 
                  break;
                  #line 2655 
                  default: 
                           #line 2655 
                  ;
                  #line 2655 
                  __bad_percpu_size();
                }
              }
              #line 2655 
              break;
              #line 2655 
              case (unsigned long)2: 
                                     #line 2655 
              ;
              {
                #line 2655 
                int pao_ID___8 = 1;
                #line 2655 
                switch (8UL) {
                  #line 2655 
                  case (unsigned long)1: 
                                         #line 2655 
                  ;
                  #line 2657 
                  ldv_inline_asm();
                  #line 2655 
                  break;
                  #line 2655 
                  case (unsigned long)2: 
                                         #line 2655 
                  ;
                  #line 2657 
                  ldv_inline_asm();
                  #line 2655 
                  break;
                  #line 2655 
                  case (unsigned long)4: 
                                         #line 2655 
                  ;
                  #line 2657 
                  ldv_inline_asm();
                  #line 2655 
                  break;
                  #line 2655 
                  case (unsigned long)8: 
                                         #line 2655 
                  ;
                  #line 2657 
                  ldv_inline_asm();
                  #line 2655 
                  break;
                  #line 2655 
                  default: 
                           #line 2655 
                  ;
                  #line 2655 
                  __bad_percpu_size();
                }
              }
              #line 2655 
              break;
              #line 2655 
              case (unsigned long)4: 
                                     #line 2655 
              ;
              {
                #line 2655 
                int pao_ID___9 = 1;
                #line 2655 
                switch (8UL) {
                  #line 2655 
                  case (unsigned long)1: 
                                         #line 2655 
                  ;
                  #line 2657 
                  ldv_inline_asm();
                  #line 2655 
                  break;
                  #line 2655 
                  case (unsigned long)2: 
                                         #line 2655 
                  ;
                  #line 2657 
                  ldv_inline_asm();
                  #line 2655 
                  break;
                  #line 2655 
                  case (unsigned long)4: 
                                         #line 2655 
                  ;
                  #line 2657 
                  ldv_inline_asm();
                  #line 2655 
                  break;
                  #line 2655 
                  case (unsigned long)8: 
                                         #line 2655 
                  ;
                  #line 2657 
                  ldv_inline_asm();
                  #line 2655 
                  break;
                  #line 2655 
                  default: 
                           #line 2655 
                  ;
                  #line 2655 
                  __bad_percpu_size();
                }
              }
              #line 2655 
              break;
              #line 2655 
              case (unsigned long)8: 
                                     #line 2655 
              ;
              {
                #line 2655 
                int pao_ID___10 = 1;
                #line 2655 
                switch (8UL) {
                  #line 2655 
                  case (unsigned long)1: 
                                         #line 2655 
                  ;
                  #line 2657 
                  ldv_inline_asm();
                  #line 2655 
                  break;
                  #line 2655 
                  case (unsigned long)2: 
                                         #line 2655 
                  ;
                  #line 2657 
                  ldv_inline_asm();
                  #line 2655 
                  break;
                  #line 2655 
                  case (unsigned long)4: 
                                         #line 2655 
                  ;
                  #line 2657 
                  ldv_inline_asm();
                  #line 2655 
                  break;
                  #line 2655 
                  case (unsigned long)8: 
                                         #line 2655 
                  ;
                  #line 2657 
                  ldv_inline_asm();
                  #line 2655 
                  break;
                  #line 2655 
                  default: 
                           #line 2655 
                  ;
                  #line 2655 
                  __bad_percpu_size();
                }
              }
              #line 2655 
              break;
              #line 2655 
              default: 
                       #line 2655 
              ;
              #line 2655 
              __bad_size_call_parameter();
              #line 2655 
              break;
            }
            #line 2656 
            len_0 = ((np->get_tx_ctx)->skb)->len;
            #line 2657 
            __this_cpu_preempt_check((char *)"add");
            {
              #line 2657 
              void *__vpp_verify_2 = (void *)0;
              #line 2657 
              void *tmp_32 = __vpp_verify_2;
            }
            #line 2657 
            switch (8UL) {
              #line 2657 
              case (unsigned long)1: 
                                     #line 2657 
              ;
              {
                #line 2657 
                int tmp_4;
                #line 2657 
                if (0 != 0 && (len_0 == 1U || len_0 == 4294967295U)) 
                  #line 2657 
                  tmp_4 = (int)len_0; else 
                                           #line 2657 
                                           tmp_4 = 0;
                #line 2657 
                int pao_ID___11 = tmp_4;
                #line 2657 
                switch (8UL) {
                  #line 2657 
                  case (unsigned long)1: 
                                         #line 2657 
                  ;
                  #line 2657 
                  if (pao_ID___11 == 1) 
                                        #line 2659 
                                        ldv_inline_asm();
                  else 
                    #line 2657 
                    if (pao_ID___11 == -1) 
                                           #line 2659 
                                           ldv_inline_asm(); else 
                                                                  #line 2662 
                                                                  ldv_inline_asm();
                  #line 2657 
                  break;
                  #line 2657 
                  case (unsigned long)2: 
                                         #line 2657 
                  ;
                  #line 2657 
                  if (pao_ID___11 == 1) 
                                        #line 2659 
                                        ldv_inline_asm();
                  else 
                    #line 2657 
                    if (pao_ID___11 == -1) 
                                           #line 2659 
                                           ldv_inline_asm(); else 
                                                                  #line 2662 
                                                                  ldv_inline_asm();
                  #line 2657 
                  break;
                  #line 2657 
                  case (unsigned long)4: 
                                         #line 2657 
                  ;
                  #line 2657 
                  if (pao_ID___11 == 1) 
                                        #line 2659 
                                        ldv_inline_asm();
                  else 
                    #line 2657 
                    if (pao_ID___11 == -1) 
                                           #line 2659 
                                           ldv_inline_asm(); else 
                                                                  #line 2662 
                                                                  ldv_inline_asm();
                  #line 2657 
                  break;
                  #line 2657 
                  case (unsigned long)8: 
                                         #line 2657 
                  ;
                  #line 2657 
                  if (pao_ID___11 == 1) 
                                        #line 2659 
                                        ldv_inline_asm();
                  else 
                    #line 2657 
                    if (pao_ID___11 == -1) 
                                           #line 2659 
                                           ldv_inline_asm(); else 
                                                                  #line 2662 
                                                                  ldv_inline_asm();
                  #line 2657 
                  break;
                  #line 2657 
                  default: 
                           #line 2657 
                  ;
                  #line 2657 
                  __bad_percpu_size();
                }
              }
              #line 2657 
              break;
              #line 2657 
              case (unsigned long)2: 
                                     #line 2657 
              ;
              {
                #line 2657 
                int tmp_5;
                #line 2657 
                if (0 != 0 && (len_0 == 1U || len_0 == 4294967295U)) 
                  #line 2657 
                  tmp_5 = (int)len_0; else 
                                           #line 2657 
                                           tmp_5 = 0;
                #line 2657 
                int pao_ID___12 = tmp_5;
                #line 2657 
                switch (8UL) {
                  #line 2657 
                  case (unsigned long)1: 
                                         #line 2657 
                  ;
                  #line 2657 
                  if (pao_ID___12 == 1) 
                                        #line 2659 
                                        ldv_inline_asm();
                  else 
                    #line 2657 
                    if (pao_ID___12 == -1) 
                                           #line 2659 
                                           ldv_inline_asm(); else 
                                                                  #line 2662 
                                                                  ldv_inline_asm();
                  #line 2657 
                  break;
                  #line 2657 
                  case (unsigned long)2: 
                                         #line 2657 
                  ;
                  #line 2657 
                  if (pao_ID___12 == 1) 
                                        #line 2659 
                                        ldv_inline_asm();
                  else 
                    #line 2657 
                    if (pao_ID___12 == -1) 
                                           #line 2659 
                                           ldv_inline_asm(); else 
                                                                  #line 2662 
                                                                  ldv_inline_asm();
                  #line 2657 
                  break;
                  #line 2657 
                  case (unsigned long)4: 
                                         #line 2657 
                  ;
                  #line 2657 
                  if (pao_ID___12 == 1) 
                                        #line 2659 
                                        ldv_inline_asm();
                  else 
                    #line 2657 
                    if (pao_ID___12 == -1) 
                                           #line 2659 
                                           ldv_inline_asm(); else 
                                                                  #line 2662 
                                                                  ldv_inline_asm();
                  #line 2657 
                  break;
                  #line 2657 
                  case (unsigned long)8: 
                                         #line 2657 
                  ;
                  #line 2657 
                  if (pao_ID___12 == 1) 
                                        #line 2659 
                                        ldv_inline_asm();
                  else 
                    #line 2657 
                    if (pao_ID___12 == -1) 
                                           #line 2659 
                                           ldv_inline_asm(); else 
                                                                  #line 2662 
                                                                  ldv_inline_asm();
                  #line 2657 
                  break;
                  #line 2657 
                  default: 
                           #line 2657 
                  ;
                  #line 2657 
                  __bad_percpu_size();
                }
              }
              #line 2657 
              break;
              #line 2657 
              case (unsigned long)4: 
                                     #line 2657 
              ;
              {
                #line 2657 
                int tmp_6;
                #line 2657 
                if (0 != 0 && (len_0 == 1U || len_0 == 4294967295U)) 
                  #line 2657 
                  tmp_6 = (int)len_0; else 
                                           #line 2657 
                                           tmp_6 = 0;
                #line 2657 
                int pao_ID___13 = tmp_6;
                #line 2657 
                switch (8UL) {
                  #line 2657 
                  case (unsigned long)1: 
                                         #line 2657 
                  ;
                  #line 2657 
                  if (pao_ID___13 == 1) 
                                        #line 2659 
                                        ldv_inline_asm();
                  else 
                    #line 2657 
                    if (pao_ID___13 == -1) 
                                           #line 2659 
                                           ldv_inline_asm(); else 
                                                                  #line 2662 
                                                                  ldv_inline_asm();
                  #line 2657 
                  break;
                  #line 2657 
                  case (unsigned long)2: 
                                         #line 2657 
                  ;
                  #line 2657 
                  if (pao_ID___13 == 1) 
                                        #line 2659 
                                        ldv_inline_asm();
                  else 
                    #line 2657 
                    if (pao_ID___13 == -1) 
                                           #line 2659 
                                           ldv_inline_asm(); else 
                                                                  #line 2662 
                                                                  ldv_inline_asm();
                  #line 2657 
                  break;
                  #line 2657 
                  case (unsigned long)4: 
                                         #line 2657 
                  ;
                  #line 2657 
                  if (pao_ID___13 == 1) 
                                        #line 2659 
                                        ldv_inline_asm();
                  else 
                    #line 2657 
                    if (pao_ID___13 == -1) 
                                           #line 2659 
                                           ldv_inline_asm(); else 
                                                                  #line 2662 
                                                                  ldv_inline_asm();
                  #line 2657 
                  break;
                  #line 2657 
                  case (unsigned long)8: 
                                         #line 2657 
                  ;
                  #line 2657 
                  if (pao_ID___13 == 1) 
                                        #line 2659 
                                        ldv_inline_asm();
                  else 
                    #line 2657 
                    if (pao_ID___13 == -1) 
                                           #line 2659 
                                           ldv_inline_asm(); else 
                                                                  #line 2662 
                                                                  ldv_inline_asm();
                  #line 2657 
                  break;
                  #line 2657 
                  default: 
                           #line 2657 
                  ;
                  #line 2657 
                  __bad_percpu_size();
                }
              }
              #line 2657 
              break;
              #line 2657 
              case (unsigned long)8: 
                                     #line 2657 
              ;
              {
                #line 2657 
                int tmp_7;
                #line 2657 
                if (0 != 0 && (len_0 == 1U || len_0 == 4294967295U)) 
                  #line 2657 
                  tmp_7 = (int)len_0; else 
                                           #line 2657 
                                           tmp_7 = 0;
                #line 2657 
                int pao_ID___14 = tmp_7;
                #line 2657 
                switch (8UL) {
                  #line 2657 
                  case (unsigned long)1: 
                                         #line 2657 
                  ;
                  #line 2657 
                  if (pao_ID___14 == 1) 
                                        #line 2659 
                                        ldv_inline_asm();
                  else 
                    #line 2657 
                    if (pao_ID___14 == -1) 
                                           #line 2659 
                                           ldv_inline_asm(); else 
                                                                  #line 2662 
                                                                  ldv_inline_asm();
                  #line 2657 
                  break;
                  #line 2657 
                  case (unsigned long)2: 
                                         #line 2657 
                  ;
                  #line 2657 
                  if (pao_ID___14 == 1) 
                                        #line 2659 
                                        ldv_inline_asm();
                  else 
                    #line 2657 
                    if (pao_ID___14 == -1) 
                                           #line 2659 
                                           ldv_inline_asm(); else 
                                                                  #line 2662 
                                                                  ldv_inline_asm();
                  #line 2657 
                  break;
                  #line 2657 
                  case (unsigned long)4: 
                                         #line 2657 
                  ;
                  #line 2657 
                  if (pao_ID___14 == 1) 
                                        #line 2659 
                                        ldv_inline_asm();
                  else 
                    #line 2657 
                    if (pao_ID___14 == -1) 
                                           #line 2659 
                                           ldv_inline_asm(); else 
                                                                  #line 2662 
                                                                  ldv_inline_asm();
                  #line 2657 
                  break;
                  #line 2657 
                  case (unsigned long)8: 
                                         #line 2657 
                  ;
                  #line 2657 
                  if (pao_ID___14 == 1) 
                                        #line 2659 
                                        ldv_inline_asm();
                  else 
                    #line 2657 
                    if (pao_ID___14 == -1) 
                                           #line 2659 
                                           ldv_inline_asm(); else 
                                                                  #line 2662 
                                                                  ldv_inline_asm();
                  #line 2657 
                  break;
                  #line 2657 
                  default: 
                           #line 2657 
                  ;
                  #line 2657 
                  __bad_percpu_size();
                }
              }
              #line 2657 
              break;
              #line 2657 
              default: 
                       #line 2657 
              ;
              #line 2657 
              __bad_size_call_parameter();
              #line 2657 
              break;
            }
            #line 2658 
            u64_stats_init(& np->swstats_tx_syncp);
          }
          #line 2660 
          bytes_compl = ((np->get_tx_ctx)->skb)->len + bytes_compl;
          #line 2661 
          dev_kfree_skb_any((np->get_tx_ctx)->skb);
          #line 2662 
          (np->get_tx_ctx)->skb = (struct sk_buff *)0;
          #line 2663 
          tx_work ++;
        }
      #line 2666 
      tmp_8 = np->get_tx.orig;
      #line 2666 
      (np->get_tx.orig) ++;
      #line 2666 
      ;
      #line 2666 
      if ((long)(tmp_8 == np->last_tx.orig) != 0L) 
                                                   #line 2667 
                                                   np->get_tx.orig = np->tx_ring.orig;
      #line 2668 
      tmp_9 = np->get_tx_ctx;
      #line 2668 
      (np->get_tx_ctx) ++;
      #line 2668 
      ;
      #line 2668 
      if ((long)(tmp_9 == np->last_tx_ctx) != 0L) 
                                                  #line 2669 
                                                  np->get_tx_ctx = np->tx_skb;
    }
  }
  #line 2672 
  netdev_completed_queue(np->dev,(unsigned int)tx_work,bytes_compl);
  #line 2674 
  if ((long)(np->tx_stop == 1) != 0L && (long)(np->get_tx.orig != orig_get_tx) != 0L) {
    #line 2675 
    np->tx_stop = 0;
    #line 2676 
    netif_wake_queue(dev);
  }
  #line 2678 
  return tx_work;
}

#line 2681  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
static int nv_tx_done_optimized(struct net_device *dev, int limit)
{
  #line 2684 
  u32 flags;
  #line 2683 
  struct fe_priv *np = netdev_priv(dev);
  #line 2685 
  int tx_work = 0;
  #line 2686 
  struct ring_desc_ex *orig_get_tx = np->get_tx.ex;
  #line 2687 
  unsigned long bytes_cleaned = 0UL;
  #line 2689 
  while (1) {
    #line 2689 
    if (np->get_tx.ex != np->put_tx.ex) {
      #line 2689 
      flags = (np->get_tx.ex)->flaglen;
      #line 2689 
      if ((flags & 2147483648U) == 0U) {
        #line 2690 
        if (! (tx_work < limit)) 
                                 #line 2689 
                                 break;
      }
      else 
           #line 2689 
           break;
    }
    else 
         #line 2689 
         break;
    {
      #line 2723 
      struct ring_desc_ex *tmp_4;
      #line 2725 
      struct nv_skb_map *tmp_5;
      #line 2693 
      nv_unmap_txskb(np,np->get_tx_ctx);
      #line 2695 
      if ((flags & 536870912U) != 0U) {
        #line 2696 
        if ((long)((flags & 1073741824U) != 0U) != 0L) {
          #line 2697 
          if ((flags & 262144U) != 0U && (flags & 7864320U) == 0U) 
            #line 2699 
            if ((np->driver_data & 2097152U) != 0U) 
                                                    #line 2700 
                                                    nv_gear_backoff_reseed(dev); else 
                                                                    #line 2702 
                                                                    nv_legacybackoff_reseed(dev);
        }
        else {
          #line 2705 
          unsigned int len;
          #line 2707 
          u64_stats_init(& np->swstats_tx_syncp);
          #line 2708 
          __this_cpu_preempt_check((char *)"add");
          {
            #line 2708 
            void *__vpp_verify = (void *)0;
            #line 2708 
            void *tmp_2 = __vpp_verify;
          }
          #line 2708 
          switch (8UL) {
            #line 2708 
            case (unsigned long)1: 
                                   #line 2708 
            ;
            {
              #line 2708 
              int pao_ID__ = 1;
              #line 2708 
              switch (8UL) {
                #line 2708 
                case (unsigned long)1: 
                                       #line 2708 
                ;
                #line 2710 
                ldv_inline_asm();
                #line 2708 
                break;
                #line 2708 
                case (unsigned long)2: 
                                       #line 2708 
                ;
                #line 2710 
                ldv_inline_asm();
                #line 2708 
                break;
                #line 2708 
                case (unsigned long)4: 
                                       #line 2708 
                ;
                #line 2710 
                ldv_inline_asm();
                #line 2708 
                break;
                #line 2708 
                case (unsigned long)8: 
                                       #line 2708 
                ;
                #line 2710 
                ldv_inline_asm();
                #line 2708 
                break;
                #line 2708 
                default: 
                         #line 2708 
                ;
                #line 2708 
                __bad_percpu_size();
              }
            }
            #line 2708 
            break;
            #line 2708 
            case (unsigned long)2: 
                                   #line 2708 
            ;
            {
              #line 2708 
              int pao_ID___0 = 1;
              #line 2708 
              switch (8UL) {
                #line 2708 
                case (unsigned long)1: 
                                       #line 2708 
                ;
                #line 2710 
                ldv_inline_asm();
                #line 2708 
                break;
                #line 2708 
                case (unsigned long)2: 
                                       #line 2708 
                ;
                #line 2710 
                ldv_inline_asm();
                #line 2708 
                break;
                #line 2708 
                case (unsigned long)4: 
                                       #line 2708 
                ;
                #line 2710 
                ldv_inline_asm();
                #line 2708 
                break;
                #line 2708 
                case (unsigned long)8: 
                                       #line 2708 
                ;
                #line 2710 
                ldv_inline_asm();
                #line 2708 
                break;
                #line 2708 
                default: 
                         #line 2708 
                ;
                #line 2708 
                __bad_percpu_size();
              }
            }
            #line 2708 
            break;
            #line 2708 
            case (unsigned long)4: 
                                   #line 2708 
            ;
            {
              #line 2708 
              int pao_ID___1 = 1;
              #line 2708 
              switch (8UL) {
                #line 2708 
                case (unsigned long)1: 
                                       #line 2708 
                ;
                #line 2710 
                ldv_inline_asm();
                #line 2708 
                break;
                #line 2708 
                case (unsigned long)2: 
                                       #line 2708 
                ;
                #line 2710 
                ldv_inline_asm();
                #line 2708 
                break;
                #line 2708 
                case (unsigned long)4: 
                                       #line 2708 
                ;
                #line 2710 
                ldv_inline_asm();
                #line 2708 
                break;
                #line 2708 
                case (unsigned long)8: 
                                       #line 2708 
                ;
                #line 2710 
                ldv_inline_asm();
                #line 2708 
                break;
                #line 2708 
                default: 
                         #line 2708 
                ;
                #line 2708 
                __bad_percpu_size();
              }
            }
            #line 2708 
            break;
            #line 2708 
            case (unsigned long)8: 
                                   #line 2708 
            ;
            {
              #line 2708 
              int pao_ID___2 = 1;
              #line 2708 
              switch (8UL) {
                #line 2708 
                case (unsigned long)1: 
                                       #line 2708 
                ;
                #line 2710 
                ldv_inline_asm();
                #line 2708 
                break;
                #line 2708 
                case (unsigned long)2: 
                                       #line 2708 
                ;
                #line 2710 
                ldv_inline_asm();
                #line 2708 
                break;
                #line 2708 
                case (unsigned long)4: 
                                       #line 2708 
                ;
                #line 2710 
                ldv_inline_asm();
                #line 2708 
                break;
                #line 2708 
                case (unsigned long)8: 
                                       #line 2708 
                ;
                #line 2710 
                ldv_inline_asm();
                #line 2708 
                break;
                #line 2708 
                default: 
                         #line 2708 
                ;
                #line 2708 
                __bad_percpu_size();
              }
            }
            #line 2708 
            break;
            #line 2708 
            default: 
                     #line 2708 
            ;
            #line 2708 
            __bad_size_call_parameter();
            #line 2708 
            break;
          }
          #line 2709 
          len = ((np->get_tx_ctx)->skb)->len;
          #line 2710 
          __this_cpu_preempt_check((char *)"add");
          {
            #line 2710 
            void *__vpp_verify_0 = (void *)0;
            #line 2710 
            void *tmp_12 = __vpp_verify_0;
          }
          #line 2710 
          switch (8UL) {
            #line 2710 
            case (unsigned long)1: 
                                   #line 2710 
            ;
            {
              #line 2710 
              int tmp_0;
              #line 2710 
              if (0 != 0 && (len == 1U || len == 4294967295U)) 
                                                               #line 2710 
                                                               tmp_0 = (int)len; else 
                                                                    #line 2710 
                                                                    tmp_0 = 0;
              #line 2710 
              int pao_ID___3 = tmp_0;
              #line 2710 
              switch (8UL) {
                #line 2710 
                case (unsigned long)1: 
                                       #line 2710 
                ;
                #line 2710 
                if (pao_ID___3 == 1) 
                                     #line 2712 
                                     ldv_inline_asm();
                else 
                  #line 2710 
                  if (pao_ID___3 == -1) 
                                        #line 2712 
                                        ldv_inline_asm(); else 
                                                               #line 2715 
                                                               ldv_inline_asm();
                #line 2710 
                break;
                #line 2710 
                case (unsigned long)2: 
                                       #line 2710 
                ;
                #line 2710 
                if (pao_ID___3 == 1) 
                                     #line 2712 
                                     ldv_inline_asm();
                else 
                  #line 2710 
                  if (pao_ID___3 == -1) 
                                        #line 2712 
                                        ldv_inline_asm(); else 
                                                               #line 2715 
                                                               ldv_inline_asm();
                #line 2710 
                break;
                #line 2710 
                case (unsigned long)4: 
                                       #line 2710 
                ;
                #line 2710 
                if (pao_ID___3 == 1) 
                                     #line 2712 
                                     ldv_inline_asm();
                else 
                  #line 2710 
                  if (pao_ID___3 == -1) 
                                        #line 2712 
                                        ldv_inline_asm(); else 
                                                               #line 2715 
                                                               ldv_inline_asm();
                #line 2710 
                break;
                #line 2710 
                case (unsigned long)8: 
                                       #line 2710 
                ;
                #line 2710 
                if (pao_ID___3 == 1) 
                                     #line 2712 
                                     ldv_inline_asm();
                else 
                  #line 2710 
                  if (pao_ID___3 == -1) 
                                        #line 2712 
                                        ldv_inline_asm(); else 
                                                               #line 2715 
                                                               ldv_inline_asm();
                #line 2710 
                break;
                #line 2710 
                default: 
                         #line 2710 
                ;
                #line 2710 
                __bad_percpu_size();
              }
            }
            #line 2710 
            break;
            #line 2710 
            case (unsigned long)2: 
                                   #line 2710 
            ;
            {
              #line 2710 
              int tmp_1;
              #line 2710 
              if (0 != 0 && (len == 1U || len == 4294967295U)) 
                                                               #line 2710 
                                                               tmp_1 = (int)len; else 
                                                                    #line 2710 
                                                                    tmp_1 = 0;
              #line 2710 
              int pao_ID___4 = tmp_1;
              #line 2710 
              switch (8UL) {
                #line 2710 
                case (unsigned long)1: 
                                       #line 2710 
                ;
                #line 2710 
                if (pao_ID___4 == 1) 
                                     #line 2712 
                                     ldv_inline_asm();
                else 
                  #line 2710 
                  if (pao_ID___4 == -1) 
                                        #line 2712 
                                        ldv_inline_asm(); else 
                                                               #line 2715 
                                                               ldv_inline_asm();
                #line 2710 
                break;
                #line 2710 
                case (unsigned long)2: 
                                       #line 2710 
                ;
                #line 2710 
                if (pao_ID___4 == 1) 
                                     #line 2712 
                                     ldv_inline_asm();
                else 
                  #line 2710 
                  if (pao_ID___4 == -1) 
                                        #line 2712 
                                        ldv_inline_asm(); else 
                                                               #line 2715 
                                                               ldv_inline_asm();
                #line 2710 
                break;
                #line 2710 
                case (unsigned long)4: 
                                       #line 2710 
                ;
                #line 2710 
                if (pao_ID___4 == 1) 
                                     #line 2712 
                                     ldv_inline_asm();
                else 
                  #line 2710 
                  if (pao_ID___4 == -1) 
                                        #line 2712 
                                        ldv_inline_asm(); else 
                                                               #line 2715 
                                                               ldv_inline_asm();
                #line 2710 
                break;
                #line 2710 
                case (unsigned long)8: 
                                       #line 2710 
                ;
                #line 2710 
                if (pao_ID___4 == 1) 
                                     #line 2712 
                                     ldv_inline_asm();
                else 
                  #line 2710 
                  if (pao_ID___4 == -1) 
                                        #line 2712 
                                        ldv_inline_asm(); else 
                                                               #line 2715 
                                                               ldv_inline_asm();
                #line 2710 
                break;
                #line 2710 
                default: 
                         #line 2710 
                ;
                #line 2710 
                __bad_percpu_size();
              }
            }
            #line 2710 
            break;
            #line 2710 
            case (unsigned long)4: 
                                   #line 2710 
            ;
            {
              #line 2710 
              int tmp_2_3;
              #line 2710 
              if (0 != 0 && (len == 1U || len == 4294967295U)) 
                                                               #line 2710 
                                                               tmp_2_3 = (int)len; else 
                                                                    #line 2710 
                                                                    tmp_2_3 = 0;
              #line 2710 
              int pao_ID___5 = tmp_2_3;
              #line 2710 
              switch (8UL) {
                #line 2710 
                case (unsigned long)1: 
                                       #line 2710 
                ;
                #line 2710 
                if (pao_ID___5 == 1) 
                                     #line 2712 
                                     ldv_inline_asm();
                else 
                  #line 2710 
                  if (pao_ID___5 == -1) 
                                        #line 2712 
                                        ldv_inline_asm(); else 
                                                               #line 2715 
                                                               ldv_inline_asm();
                #line 2710 
                break;
                #line 2710 
                case (unsigned long)2: 
                                       #line 2710 
                ;
                #line 2710 
                if (pao_ID___5 == 1) 
                                     #line 2712 
                                     ldv_inline_asm();
                else 
                  #line 2710 
                  if (pao_ID___5 == -1) 
                                        #line 2712 
                                        ldv_inline_asm(); else 
                                                               #line 2715 
                                                               ldv_inline_asm();
                #line 2710 
                break;
                #line 2710 
                case (unsigned long)4: 
                                       #line 2710 
                ;
                #line 2710 
                if (pao_ID___5 == 1) 
                                     #line 2712 
                                     ldv_inline_asm();
                else 
                  #line 2710 
                  if (pao_ID___5 == -1) 
                                        #line 2712 
                                        ldv_inline_asm(); else 
                                                               #line 2715 
                                                               ldv_inline_asm();
                #line 2710 
                break;
                #line 2710 
                case (unsigned long)8: 
                                       #line 2710 
                ;
                #line 2710 
                if (pao_ID___5 == 1) 
                                     #line 2712 
                                     ldv_inline_asm();
                else 
                  #line 2710 
                  if (pao_ID___5 == -1) 
                                        #line 2712 
                                        ldv_inline_asm(); else 
                                                               #line 2715 
                                                               ldv_inline_asm();
                #line 2710 
                break;
                #line 2710 
                default: 
                         #line 2710 
                ;
                #line 2710 
                __bad_percpu_size();
              }
            }
            #line 2710 
            break;
            #line 2710 
            case (unsigned long)8: 
                                   #line 2710 
            ;
            {
              #line 2710 
              int tmp_3;
              #line 2710 
              if (0 != 0 && (len == 1U || len == 4294967295U)) 
                                                               #line 2710 
                                                               tmp_3 = (int)len; else 
                                                                    #line 2710 
                                                                    tmp_3 = 0;
              #line 2710 
              int pao_ID___6 = tmp_3;
              #line 2710 
              switch (8UL) {
                #line 2710 
                case (unsigned long)1: 
                                       #line 2710 
                ;
                #line 2710 
                if (pao_ID___6 == 1) 
                                     #line 2712 
                                     ldv_inline_asm();
                else 
                  #line 2710 
                  if (pao_ID___6 == -1) 
                                        #line 2712 
                                        ldv_inline_asm(); else 
                                                               #line 2715 
                                                               ldv_inline_asm();
                #line 2710 
                break;
                #line 2710 
                case (unsigned long)2: 
                                       #line 2710 
                ;
                #line 2710 
                if (pao_ID___6 == 1) 
                                     #line 2712 
                                     ldv_inline_asm();
                else 
                  #line 2710 
                  if (pao_ID___6 == -1) 
                                        #line 2712 
                                        ldv_inline_asm(); else 
                                                               #line 2715 
                                                               ldv_inline_asm();
                #line 2710 
                break;
                #line 2710 
                case (unsigned long)4: 
                                       #line 2710 
                ;
                #line 2710 
                if (pao_ID___6 == 1) 
                                     #line 2712 
                                     ldv_inline_asm();
                else 
                  #line 2710 
                  if (pao_ID___6 == -1) 
                                        #line 2712 
                                        ldv_inline_asm(); else 
                                                               #line 2715 
                                                               ldv_inline_asm();
                #line 2710 
                break;
                #line 2710 
                case (unsigned long)8: 
                                       #line 2710 
                ;
                #line 2710 
                if (pao_ID___6 == 1) 
                                     #line 2712 
                                     ldv_inline_asm();
                else 
                  #line 2710 
                  if (pao_ID___6 == -1) 
                                        #line 2712 
                                        ldv_inline_asm(); else 
                                                               #line 2715 
                                                               ldv_inline_asm();
                #line 2710 
                break;
                #line 2710 
                default: 
                         #line 2710 
                ;
                #line 2710 
                __bad_percpu_size();
              }
            }
            #line 2710 
            break;
            #line 2710 
            default: 
                     #line 2710 
            ;
            #line 2710 
            __bad_size_call_parameter();
            #line 2710 
            break;
          }
          #line 2711 
          u64_stats_init(& np->swstats_tx_syncp);
        }
        #line 2714 
        bytes_cleaned = (unsigned long)((np->get_tx_ctx)->skb)->len + bytes_cleaned;
        #line 2715 
        dev_kfree_skb_any((np->get_tx_ctx)->skb);
        #line 2716 
        (np->get_tx_ctx)->skb = (struct sk_buff *)0;
        #line 2717 
        tx_work ++;
        #line 2719 
        if (np->tx_limit != 0) 
                               #line 2720 
                               nv_tx_flip_ownership(dev);
      }
      #line 2723 
      tmp_4 = np->get_tx.ex;
      #line 2723 
      (np->get_tx.ex) ++;
      #line 2723 
      ;
      #line 2723 
      if ((long)(tmp_4 == np->last_tx.ex) != 0L) 
                                                 #line 2724 
                                                 np->get_tx.ex = np->tx_ring.ex;
      #line 2725 
      tmp_5 = np->get_tx_ctx;
      #line 2725 
      (np->get_tx_ctx) ++;
      #line 2725 
      ;
      #line 2725 
      if ((long)(tmp_5 == np->last_tx_ctx) != 0L) 
                                                  #line 2726 
                                                  np->get_tx_ctx = np->tx_skb;
    }
  }
  #line 2729 
  netdev_completed_queue(np->dev,(unsigned int)tx_work,(unsigned int)bytes_cleaned);
  #line 2731 
  if ((long)(np->tx_stop == 1) != 0L && (long)(np->get_tx.ex != orig_get_tx) != 0L) {
    #line 2732 
    np->tx_stop = 0;
    #line 2733 
    netif_wake_queue(dev);
  }
  #line 2735 
  return tx_work;
}

#line 2742  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
static void nv_tx_timeout(struct net_device *dev)
{
  #line 2746 
  u32 status;
  #line 2747 
  union ring_type put_tx;
  #line 2748 
  int saved_tx_limit;
  #line 2744 
  struct fe_priv *np = netdev_priv(dev);
  #line 2745 
  u8 *base = get_hwbase(dev);
  #line 2750 
  if ((np->msi_flags & 128U) != 0U) {
    #line 2751 
    status = readl((void *)(base + 1008U)) & 33791U;
  }
  else {
    #line 2753 
    status = readl((void *)base) & 33791U;
  }
  #line 2755 
  netdev_warn(dev,(char *)"Got tx_timeout. irq status: %08x\n",status);
  #line 2757 
  if ((long)((int)debug_tx_timeout != 0) != 0L) {
    #line 2758 
    int i;
    #line 2760 
    netdev_info(dev,(char *)"Ring at %lx\n",(unsigned long)np->ring_addr);
    #line 2761 
    netdev_info(dev,(char *)"Dumping tx registers\n");
    #line 2762 
    i = 0;
    #line 2762 
    while (np->register_size >= (unsigned int)i) {
      #line 2763 
      ;
      #line 2763 
      ;
      #line 2763 
      netdev_info(dev,(char *)"%3x: %08x %08x %08x %08x ",i,readl((void *)(base + (unsigned long)i)),readl((void *)(base + ((unsigned long)i + (unsigned long)4U))),readl((void *)(base + ((unsigned long)i + (unsigned long)8U))),readl((void *)(base + ((unsigned long)i + (unsigned long)12U))),readl((void *)(base + ((unsigned long)i + (unsigned long)16U))),readl((void *)(base + ((unsigned long)i + (unsigned long)20U))),readl((void *)(base + ((unsigned long)i + (unsigned long)24U))),readl((void *)(base + ((unsigned long)i + (unsigned long)28U))));
      #line 2762 
      i += 32;
    }
    #line 2772 
    netdev_info(dev,(char *)"Dumping tx ring\n");
    #line 2773 
    i = 0;
    #line 2773 
    while (np->tx_ring_size > i) {
      #line 2774 
      if (nv_optimized(np)) 
                            #line 2788 
                            netdev_info(dev,(char *)"%03x: %08x %08x %08x ",i,(np->tx_ring.ex + (unsigned long)i)->bufhigh,(np->tx_ring.ex + (unsigned long)i)->buflow,(np->tx_ring.ex + (unsigned long)i)->flaglen,(np->tx_ring.ex + ((unsigned long)i + (unsigned long)1U))->bufhigh,(np->tx_ring.ex + ((unsigned long)i + (unsigned long)1U))->buflow,(np->tx_ring.ex + ((unsigned long)i + (unsigned long)1U))->flaglen,(np->tx_ring.ex + ((unsigned long)i + (unsigned long)2U))->bufhigh,(np->tx_ring.ex + ((unsigned long)i + (unsigned long)2U))->buflow,(np->tx_ring.ex + ((unsigned long)i + (unsigned long)2U))->flaglen,(np->tx_ring.ex + ((unsigned long)i + (unsigned long)3U))->bufhigh,(np->tx_ring.ex + ((unsigned long)i + (unsigned long)3U))->buflow,(np->tx_ring.ex + ((unsigned long)i + (unsigned long)3U))->flaglen); else 
                                                                    #line 2775 
                                                                    netdev_info(dev,(char *)"%03x: %08x %08x // %08x %08x ",i,(np->tx_ring.orig + (unsigned long)i)->buf,(np->tx_ring.orig + (unsigned long)i)->flaglen,(np->tx_ring.orig + ((unsigned long)i + (unsigned long)1U))->buf,(np->tx_ring.orig + ((unsigned long)i + (unsigned long)1U))->flaglen,(np->tx_ring.orig + ((unsigned long)i + (unsigned long)2U))->buf,(np->tx_ring.orig + ((unsigned long)i + (unsigned long)2U))->flaglen,(np->tx_ring.orig + ((unsigned long)i + (unsigned long)3U))->buf,(np->tx_ring.orig + ((unsigned long)i + (unsigned long)3U))->flaglen);
      #line 2773 
      i += 4;
    }
  }
  #line 2810 
  cif_spin_lock_irq_lock_of_fe_priv(& np->lock);
  #line 2813 
  nv_stop_tx(dev);
  #line 2816 
  saved_tx_limit = np->tx_limit;
  #line 2817 
  np->tx_limit = 0;
  #line 2818 
  np->tx_stop = 0;
  #line 2819 
  if (nv_optimized(np)) 
                        #line 2822 
                        nv_tx_done_optimized(dev,np->tx_ring_size); else 
                                                                    #line 2820 
                                                                    nv_tx_done(dev,np->tx_ring_size);
  #line 2825 
  if (np->tx_change_owner != (struct nv_skb_map *)0) 
                                                     #line 2826 
                                                     put_tx.ex = (np->tx_change_owner)->first_tx_desc; else 
                                                                    #line 2828 
                                                                    put_tx = np->put_tx;
  #line 2831 
  nv_drain_tx(dev);
  #line 2832 
  nv_init_tx(dev);
  #line 2835 
  np->put_tx = put_tx;
  #line 2835 
  np->get_tx = put_tx;
  #line 2836 
  np->tx_limit = saved_tx_limit;
  #line 2839 
  nv_start_tx(dev);
  #line 2840 
  netif_wake_queue(dev);
  #line 2841 
  cif_spin_unlock_irq_lock_of_fe_priv(& np->lock);
  #line 2842 
  return;
}

#line 2848  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
static int nv_getlen(struct net_device *dev, void *packet, int datalen)
{
  #line 2850 
  int hdrlen;
  #line 2851 
  int protolen;
  #line 2854 
  if ((unsigned int)((struct vlan_ethhdr *)packet)->h_vlan_proto == 129U) {
    #line 2855 
    protolen = (int)__builtin_bswap16((unsigned short)((int)((struct vlan_ethhdr *)packet)->h_vlan_encapsulated_proto));
    #line 2856 
    hdrlen = 4;
  }
  else {
    #line 2858 
    protolen = (int)__builtin_bswap16((unsigned short)((int)((struct ethhdr *)packet)->h_proto));
    #line 2859 
    hdrlen = 14;
  }
  #line 2861 
  if (protolen > 1500) 
                       #line 2862 
                       return datalen;
  #line 2864 
  protolen += hdrlen;
  #line 2866 
  if (datalen > 60) 
    #line 2867 
    if (datalen >= protolen) 
                             #line 2871 
                             return protolen; else 
                                                   #line 2876 
                                                   return -1;
  else {
    #line 2880 
    if (protolen > 60) 
                       #line 2881 
                       return -1;
    #line 2883 
    return datalen;
  }
}

#line 2887  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
static void rx_missing_handler(u32 flags, struct fe_priv *np)
{
  #line 2889 
  if ((flags & 131072U) != 0U) {
    #line 2890 
    u64_stats_init(& np->swstats_rx_syncp);
    #line 2891 
    __this_cpu_preempt_check((char *)"add");
    {
      #line 2891 
      void *__vpp_verify = (void *)0;
      #line 2891 
      void *tmp = __vpp_verify;
    }
    #line 2891 
    switch (8UL) {
      #line 2891 
      case (unsigned long)1: 
                             #line 2891 
      ;
      {
        #line 2891 
        int pao_ID__ = 1;
        #line 2891 
        switch (8UL) {
          #line 2891 
          case (unsigned long)1: 
                                 #line 2891 
          ;
          #line 2893 
          ldv_inline_asm();
          #line 2891 
          break;
          #line 2891 
          case (unsigned long)2: 
                                 #line 2891 
          ;
          #line 2893 
          ldv_inline_asm();
          #line 2891 
          break;
          #line 2891 
          case (unsigned long)4: 
                                 #line 2891 
          ;
          #line 2893 
          ldv_inline_asm();
          #line 2891 
          break;
          #line 2891 
          case (unsigned long)8: 
                                 #line 2891 
          ;
          #line 2893 
          ldv_inline_asm();
          #line 2891 
          break;
          #line 2891 
          default: 
                   #line 2891 
          ;
          #line 2891 
          __bad_percpu_size();
        }
      }
      #line 2891 
      break;
      #line 2891 
      case (unsigned long)2: 
                             #line 2891 
      ;
      {
        #line 2891 
        int pao_ID___0 = 1;
        #line 2891 
        switch (8UL) {
          #line 2891 
          case (unsigned long)1: 
                                 #line 2891 
          ;
          #line 2893 
          ldv_inline_asm();
          #line 2891 
          break;
          #line 2891 
          case (unsigned long)2: 
                                 #line 2891 
          ;
          #line 2893 
          ldv_inline_asm();
          #line 2891 
          break;
          #line 2891 
          case (unsigned long)4: 
                                 #line 2891 
          ;
          #line 2893 
          ldv_inline_asm();
          #line 2891 
          break;
          #line 2891 
          case (unsigned long)8: 
                                 #line 2891 
          ;
          #line 2893 
          ldv_inline_asm();
          #line 2891 
          break;
          #line 2891 
          default: 
                   #line 2891 
          ;
          #line 2891 
          __bad_percpu_size();
        }
      }
      #line 2891 
      break;
      #line 2891 
      case (unsigned long)4: 
                             #line 2891 
      ;
      {
        #line 2891 
        int pao_ID___1 = 1;
        #line 2891 
        switch (8UL) {
          #line 2891 
          case (unsigned long)1: 
                                 #line 2891 
          ;
          #line 2893 
          ldv_inline_asm();
          #line 2891 
          break;
          #line 2891 
          case (unsigned long)2: 
                                 #line 2891 
          ;
          #line 2893 
          ldv_inline_asm();
          #line 2891 
          break;
          #line 2891 
          case (unsigned long)4: 
                                 #line 2891 
          ;
          #line 2893 
          ldv_inline_asm();
          #line 2891 
          break;
          #line 2891 
          case (unsigned long)8: 
                                 #line 2891 
          ;
          #line 2893 
          ldv_inline_asm();
          #line 2891 
          break;
          #line 2891 
          default: 
                   #line 2891 
          ;
          #line 2891 
          __bad_percpu_size();
        }
      }
      #line 2891 
      break;
      #line 2891 
      case (unsigned long)8: 
                             #line 2891 
      ;
      {
        #line 2891 
        int pao_ID___2 = 1;
        #line 2891 
        switch (8UL) {
          #line 2891 
          case (unsigned long)1: 
                                 #line 2891 
          ;
          #line 2893 
          ldv_inline_asm();
          #line 2891 
          break;
          #line 2891 
          case (unsigned long)2: 
                                 #line 2891 
          ;
          #line 2893 
          ldv_inline_asm();
          #line 2891 
          break;
          #line 2891 
          case (unsigned long)4: 
                                 #line 2891 
          ;
          #line 2893 
          ldv_inline_asm();
          #line 2891 
          break;
          #line 2891 
          case (unsigned long)8: 
                                 #line 2891 
          ;
          #line 2893 
          ldv_inline_asm();
          #line 2891 
          break;
          #line 2891 
          default: 
                   #line 2891 
          ;
          #line 2891 
          __bad_percpu_size();
        }
      }
      #line 2891 
      break;
      #line 2891 
      default: 
               #line 2891 
      ;
      #line 2891 
      __bad_size_call_parameter();
      #line 2891 
      break;
    }
    #line 2892 
    u64_stats_init(& np->swstats_rx_syncp);
  }
  #line 2894 
  return;
}

#line 2896  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
static int nv_rx_process(struct net_device *dev, int limit)
{
  #line 2899 
  u32 flags;
  #line 2901 
  struct sk_buff *skb;
  #line 2902 
  int len;
  #line 2898 
  struct fe_priv *np = netdev_priv(dev);
  #line 2900 
  int rx_work = 0;
  #line 2904 
  while (1) {
    #line 2904 
    if (np->get_rx.orig != np->put_rx.orig) {
      #line 2904 
      flags = (np->get_rx.orig)->flaglen;
      #line 2904 
      if ((flags & 2147483648U) == 0U) {
        #line 2905 
        if (! (rx_work < limit)) 
                                 #line 2904 
                                 break;
      }
      else 
           #line 2904 
           break;
    }
    else 
         #line 2904 
         break;
    {
      #line 2986 
      struct ring_desc *tmp_4;
      #line 2988 
      struct nv_skb_map *tmp_5;
      #line 2913 
      dma_unmap_single_attrs(& (np->pci_dev)->dev,(np->get_rx_ctx)->dma,(unsigned long)(np->get_rx_ctx)->dma_len,(enum dma_data_direction)DMA_FROM_DEVICE,0UL);
      #line 2916 
      skb = (np->get_rx_ctx)->skb;
      #line 2917 
      (np->get_rx_ctx)->skb = (struct sk_buff *)0;
      #line 2920 
      if (np->desc_ver == 1U) 
        #line 2921 
        if ((long)((flags & 65536U) != 0U) != 0L) {
          #line 2922 
          len = (int)flags & 65535;
          #line 2923 
          if ((long)((flags & 1073741824U) != 0U) != 0L) 
            #line 2924 
            if ((flags & 1065353216U) == 67108864U) {
              #line 2925 
              len = nv_getlen(dev,(void *)skb->data,len);
              #line 2926 
              if (len < 0) {
                #line 2927 
                consume_skb(skb);
                #line 2928 
                goto next_pkt;
              }
            }
            else 
              #line 2932 
              if ((flags & 1065353216U) == 536870912U) {
                #line 2933 
                if ((flags & 262144U) != 0U) 
                                             #line 2934 
                                             len --;
              }
              else {
                #line 2938 
                rx_missing_handler(flags,np);
                #line 2939 
                consume_skb(skb);
                #line 2940 
                goto next_pkt;
              }
        }
        else {
          #line 2944 
          consume_skb(skb);
          #line 2945 
          goto next_pkt;
        }
      else 
        #line 2948 
        if ((long)((flags & 536870912U) != 0U) != 0L) {
          #line 2949 
          len = (int)flags & 16383;
          #line 2950 
          if ((long)((flags & 1073741824U) != 0U) != 0L) 
            #line 2951 
            if ((flags & 33292288U) == 2097152U) {
              #line 2952 
              len = nv_getlen(dev,(void *)skb->data,len);
              #line 2953 
              if (len < 0) {
                #line 2954 
                consume_skb(skb);
                #line 2955 
                goto next_pkt;
              }
            }
            else 
              #line 2959 
              if ((flags & 33292288U) == 16777216U) {
                #line 2960 
                if ((flags & 33554432U) != 0U) 
                                               #line 2961 
                                               len --;
              }
              else {
                #line 2965 
                consume_skb(skb);
                #line 2966 
                goto next_pkt;
              }
          #line 2969 
          if ((flags & 469762048U) == 335544320U || (flags & 469762048U) == 402653184U) 
            #line 2971 
            skb->ip_summed = (unsigned char)1U;
        }
        else {
          #line 2973 
          consume_skb(skb);
          #line 2974 
          goto next_pkt;
        }
      #line 2978 
      skb_put(skb,(unsigned int)len);
      #line 2979 
      skb->protocol = eth_type_trans(skb,dev);
      #line 2980 
      napi_gro_receive(& np->napi,skb);
      #line 2981 
      u64_stats_init(& np->swstats_rx_syncp);
      #line 2982 
      __this_cpu_preempt_check((char *)"add");
      {
        #line 2982 
        void *__vpp_verify = (void *)0;
        #line 2982 
        void *tmp_2 = __vpp_verify;
      }
      #line 2982 
      switch (8UL) {
        #line 2982 
        case (unsigned long)1: 
                               #line 2982 
        ;
        {
          #line 2982 
          int pao_ID__ = 1;
          #line 2982 
          switch (8UL) {
            #line 2982 
            case (unsigned long)1: 
                                   #line 2982 
            ;
            #line 2984 
            ldv_inline_asm();
            #line 2982 
            break;
            #line 2982 
            case (unsigned long)2: 
                                   #line 2982 
            ;
            #line 2984 
            ldv_inline_asm();
            #line 2982 
            break;
            #line 2982 
            case (unsigned long)4: 
                                   #line 2982 
            ;
            #line 2984 
            ldv_inline_asm();
            #line 2982 
            break;
            #line 2982 
            case (unsigned long)8: 
                                   #line 2982 
            ;
            #line 2984 
            ldv_inline_asm();
            #line 2982 
            break;
            #line 2982 
            default: 
                     #line 2982 
            ;
            #line 2982 
            __bad_percpu_size();
          }
        }
        #line 2982 
        break;
        #line 2982 
        case (unsigned long)2: 
                               #line 2982 
        ;
        {
          #line 2982 
          int pao_ID___0 = 1;
          #line 2982 
          switch (8UL) {
            #line 2982 
            case (unsigned long)1: 
                                   #line 2982 
            ;
            #line 2984 
            ldv_inline_asm();
            #line 2982 
            break;
            #line 2982 
            case (unsigned long)2: 
                                   #line 2982 
            ;
            #line 2984 
            ldv_inline_asm();
            #line 2982 
            break;
            #line 2982 
            case (unsigned long)4: 
                                   #line 2982 
            ;
            #line 2984 
            ldv_inline_asm();
            #line 2982 
            break;
            #line 2982 
            case (unsigned long)8: 
                                   #line 2982 
            ;
            #line 2984 
            ldv_inline_asm();
            #line 2982 
            break;
            #line 2982 
            default: 
                     #line 2982 
            ;
            #line 2982 
            __bad_percpu_size();
          }
        }
        #line 2982 
        break;
        #line 2982 
        case (unsigned long)4: 
                               #line 2982 
        ;
        {
          #line 2982 
          int pao_ID___1 = 1;
          #line 2982 
          switch (8UL) {
            #line 2982 
            case (unsigned long)1: 
                                   #line 2982 
            ;
            #line 2984 
            ldv_inline_asm();
            #line 2982 
            break;
            #line 2982 
            case (unsigned long)2: 
                                   #line 2982 
            ;
            #line 2984 
            ldv_inline_asm();
            #line 2982 
            break;
            #line 2982 
            case (unsigned long)4: 
                                   #line 2982 
            ;
            #line 2984 
            ldv_inline_asm();
            #line 2982 
            break;
            #line 2982 
            case (unsigned long)8: 
                                   #line 2982 
            ;
            #line 2984 
            ldv_inline_asm();
            #line 2982 
            break;
            #line 2982 
            default: 
                     #line 2982 
            ;
            #line 2982 
            __bad_percpu_size();
          }
        }
        #line 2982 
        break;
        #line 2982 
        case (unsigned long)8: 
                               #line 2982 
        ;
        {
          #line 2982 
          int pao_ID___2 = 1;
          #line 2982 
          switch (8UL) {
            #line 2982 
            case (unsigned long)1: 
                                   #line 2982 
            ;
            #line 2984 
            ldv_inline_asm();
            #line 2982 
            break;
            #line 2982 
            case (unsigned long)2: 
                                   #line 2982 
            ;
            #line 2984 
            ldv_inline_asm();
            #line 2982 
            break;
            #line 2982 
            case (unsigned long)4: 
                                   #line 2982 
            ;
            #line 2984 
            ldv_inline_asm();
            #line 2982 
            break;
            #line 2982 
            case (unsigned long)8: 
                                   #line 2982 
            ;
            #line 2984 
            ldv_inline_asm();
            #line 2982 
            break;
            #line 2982 
            default: 
                     #line 2982 
            ;
            #line 2982 
            __bad_percpu_size();
          }
        }
        #line 2982 
        break;
        #line 2982 
        default: 
                 #line 2982 
        ;
        #line 2982 
        __bad_size_call_parameter();
        #line 2982 
        break;
      }
      #line 2983 
      __this_cpu_preempt_check((char *)"add");
      {
        #line 2983 
        void *__vpp_verify_0 = (void *)0;
        #line 2983 
        void *tmp_12 = __vpp_verify_0;
      }
      #line 2983 
      switch (8UL) {
        #line 2983 
        case (unsigned long)1: 
                               #line 2983 
        ;
        {
          #line 2983 
          int tmp_0;
          #line 2983 
          if (0 != 0 && (len == 1 || len == -1)) 
                                                 #line 2983 
                                                 tmp_0 = len; else 
                                                                   #line 2983 
                                                                   tmp_0 = 0;
          #line 2983 
          int pao_ID___3 = tmp_0;
          #line 2983 
          switch (8UL) {
            #line 2983 
            case (unsigned long)1: 
                                   #line 2983 
            ;
            #line 2983 
            if (pao_ID___3 == 1) 
                                 #line 2985 
                                 ldv_inline_asm();
            else 
              #line 2983 
              if (pao_ID___3 == -1) 
                                    #line 2985 
                                    ldv_inline_asm(); else 
                                                           #line 2988 
                                                           ldv_inline_asm();
            #line 2983 
            break;
            #line 2983 
            case (unsigned long)2: 
                                   #line 2983 
            ;
            #line 2983 
            if (pao_ID___3 == 1) 
                                 #line 2985 
                                 ldv_inline_asm();
            else 
              #line 2983 
              if (pao_ID___3 == -1) 
                                    #line 2985 
                                    ldv_inline_asm(); else 
                                                           #line 2988 
                                                           ldv_inline_asm();
            #line 2983 
            break;
            #line 2983 
            case (unsigned long)4: 
                                   #line 2983 
            ;
            #line 2983 
            if (pao_ID___3 == 1) 
                                 #line 2985 
                                 ldv_inline_asm();
            else 
              #line 2983 
              if (pao_ID___3 == -1) 
                                    #line 2985 
                                    ldv_inline_asm(); else 
                                                           #line 2988 
                                                           ldv_inline_asm();
            #line 2983 
            break;
            #line 2983 
            case (unsigned long)8: 
                                   #line 2983 
            ;
            #line 2983 
            if (pao_ID___3 == 1) 
                                 #line 2985 
                                 ldv_inline_asm();
            else 
              #line 2983 
              if (pao_ID___3 == -1) 
                                    #line 2985 
                                    ldv_inline_asm(); else 
                                                           #line 2988 
                                                           ldv_inline_asm();
            #line 2983 
            break;
            #line 2983 
            default: 
                     #line 2983 
            ;
            #line 2983 
            __bad_percpu_size();
          }
        }
        #line 2983 
        break;
        #line 2983 
        case (unsigned long)2: 
                               #line 2983 
        ;
        {
          #line 2983 
          int tmp_1;
          #line 2983 
          if (0 != 0 && (len == 1 || len == -1)) 
                                                 #line 2983 
                                                 tmp_1 = len; else 
                                                                   #line 2983 
                                                                   tmp_1 = 0;
          #line 2983 
          int pao_ID___4 = tmp_1;
          #line 2983 
          switch (8UL) {
            #line 2983 
            case (unsigned long)1: 
                                   #line 2983 
            ;
            #line 2983 
            if (pao_ID___4 == 1) 
                                 #line 2985 
                                 ldv_inline_asm();
            else 
              #line 2983 
              if (pao_ID___4 == -1) 
                                    #line 2985 
                                    ldv_inline_asm(); else 
                                                           #line 2988 
                                                           ldv_inline_asm();
            #line 2983 
            break;
            #line 2983 
            case (unsigned long)2: 
                                   #line 2983 
            ;
            #line 2983 
            if (pao_ID___4 == 1) 
                                 #line 2985 
                                 ldv_inline_asm();
            else 
              #line 2983 
              if (pao_ID___4 == -1) 
                                    #line 2985 
                                    ldv_inline_asm(); else 
                                                           #line 2988 
                                                           ldv_inline_asm();
            #line 2983 
            break;
            #line 2983 
            case (unsigned long)4: 
                                   #line 2983 
            ;
            #line 2983 
            if (pao_ID___4 == 1) 
                                 #line 2985 
                                 ldv_inline_asm();
            else 
              #line 2983 
              if (pao_ID___4 == -1) 
                                    #line 2985 
                                    ldv_inline_asm(); else 
                                                           #line 2988 
                                                           ldv_inline_asm();
            #line 2983 
            break;
            #line 2983 
            case (unsigned long)8: 
                                   #line 2983 
            ;
            #line 2983 
            if (pao_ID___4 == 1) 
                                 #line 2985 
                                 ldv_inline_asm();
            else 
              #line 2983 
              if (pao_ID___4 == -1) 
                                    #line 2985 
                                    ldv_inline_asm(); else 
                                                           #line 2988 
                                                           ldv_inline_asm();
            #line 2983 
            break;
            #line 2983 
            default: 
                     #line 2983 
            ;
            #line 2983 
            __bad_percpu_size();
          }
        }
        #line 2983 
        break;
        #line 2983 
        case (unsigned long)4: 
                               #line 2983 
        ;
        {
          #line 2983 
          int tmp_2_4;
          #line 2983 
          if (0 != 0 && (len == 1 || len == -1)) 
                                                 #line 2983 
                                                 tmp_2_4 = len; else 
                                                                  #line 2983 
                                                                  tmp_2_4 = 0;
          #line 2983 
          int pao_ID___5 = tmp_2_4;
          #line 2983 
          switch (8UL) {
            #line 2983 
            case (unsigned long)1: 
                                   #line 2983 
            ;
            #line 2983 
            if (pao_ID___5 == 1) 
                                 #line 2985 
                                 ldv_inline_asm();
            else 
              #line 2983 
              if (pao_ID___5 == -1) 
                                    #line 2985 
                                    ldv_inline_asm(); else 
                                                           #line 2988 
                                                           ldv_inline_asm();
            #line 2983 
            break;
            #line 2983 
            case (unsigned long)2: 
                                   #line 2983 
            ;
            #line 2983 
            if (pao_ID___5 == 1) 
                                 #line 2985 
                                 ldv_inline_asm();
            else 
              #line 2983 
              if (pao_ID___5 == -1) 
                                    #line 2985 
                                    ldv_inline_asm(); else 
                                                           #line 2988 
                                                           ldv_inline_asm();
            #line 2983 
            break;
            #line 2983 
            case (unsigned long)4: 
                                   #line 2983 
            ;
            #line 2983 
            if (pao_ID___5 == 1) 
                                 #line 2985 
                                 ldv_inline_asm();
            else 
              #line 2983 
              if (pao_ID___5 == -1) 
                                    #line 2985 
                                    ldv_inline_asm(); else 
                                                           #line 2988 
                                                           ldv_inline_asm();
            #line 2983 
            break;
            #line 2983 
            case (unsigned long)8: 
                                   #line 2983 
            ;
            #line 2983 
            if (pao_ID___5 == 1) 
                                 #line 2985 
                                 ldv_inline_asm();
            else 
              #line 2983 
              if (pao_ID___5 == -1) 
                                    #line 2985 
                                    ldv_inline_asm(); else 
                                                           #line 2988 
                                                           ldv_inline_asm();
            #line 2983 
            break;
            #line 2983 
            default: 
                     #line 2983 
            ;
            #line 2983 
            __bad_percpu_size();
          }
        }
        #line 2983 
        break;
        #line 2983 
        case (unsigned long)8: 
                               #line 2983 
        ;
        {
          #line 2983 
          int tmp_3;
          #line 2983 
          if (0 != 0 && (len == 1 || len == -1)) 
                                                 #line 2983 
                                                 tmp_3 = len; else 
                                                                   #line 2983 
                                                                   tmp_3 = 0;
          #line 2983 
          int pao_ID___6 = tmp_3;
          #line 2983 
          switch (8UL) {
            #line 2983 
            case (unsigned long)1: 
                                   #line 2983 
            ;
            #line 2983 
            if (pao_ID___6 == 1) 
                                 #line 2985 
                                 ldv_inline_asm();
            else 
              #line 2983 
              if (pao_ID___6 == -1) 
                                    #line 2985 
                                    ldv_inline_asm(); else 
                                                           #line 2988 
                                                           ldv_inline_asm();
            #line 2983 
            break;
            #line 2983 
            case (unsigned long)2: 
                                   #line 2983 
            ;
            #line 2983 
            if (pao_ID___6 == 1) 
                                 #line 2985 
                                 ldv_inline_asm();
            else 
              #line 2983 
              if (pao_ID___6 == -1) 
                                    #line 2985 
                                    ldv_inline_asm(); else 
                                                           #line 2988 
                                                           ldv_inline_asm();
            #line 2983 
            break;
            #line 2983 
            case (unsigned long)4: 
                                   #line 2983 
            ;
            #line 2983 
            if (pao_ID___6 == 1) 
                                 #line 2985 
                                 ldv_inline_asm();
            else 
              #line 2983 
              if (pao_ID___6 == -1) 
                                    #line 2985 
                                    ldv_inline_asm(); else 
                                                           #line 2988 
                                                           ldv_inline_asm();
            #line 2983 
            break;
            #line 2983 
            case (unsigned long)8: 
                                   #line 2983 
            ;
            #line 2983 
            if (pao_ID___6 == 1) 
                                 #line 2985 
                                 ldv_inline_asm();
            else 
              #line 2983 
              if (pao_ID___6 == -1) 
                                    #line 2985 
                                    ldv_inline_asm(); else 
                                                           #line 2988 
                                                           ldv_inline_asm();
            #line 2983 
            break;
            #line 2983 
            default: 
                     #line 2983 
            ;
            #line 2983 
            __bad_percpu_size();
          }
        }
        #line 2983 
        break;
        #line 2983 
        default: 
                 #line 2983 
        ;
        #line 2983 
        __bad_size_call_parameter();
        #line 2983 
        break;
      }
      #line 2984 
      u64_stats_init(& np->swstats_rx_syncp);
      #line 2985 
      next_pkt: 
                #line 2985 
      ;
      #line 2986 
      tmp_4 = np->get_rx.orig;
      #line 2986 
      (np->get_rx.orig) ++;
      #line 2986 
      ;
      #line 2986 
      if ((long)(tmp_4 == np->last_rx.orig) != 0L) 
                                                   #line 2987 
                                                   np->get_rx.orig = np->rx_ring.orig;
      #line 2988 
      tmp_5 = np->get_rx_ctx;
      #line 2988 
      (np->get_rx_ctx) ++;
      #line 2988 
      ;
      #line 2988 
      if ((long)(tmp_5 == np->last_rx_ctx) != 0L) 
                                                  #line 2989 
                                                  np->get_rx_ctx = np->rx_skb;
      #line 2991 
      rx_work ++;
    }
  }
  #line 2994 
  return rx_work;
}

#line 2997  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
static int nv_rx_process_optimized(struct net_device *dev, int limit)
{
  #line 3000 
  u32 flags;
  #line 3003 
  struct sk_buff *skb;
  #line 3004 
  int len;
  #line 2999 
  struct fe_priv *np = netdev_priv(dev);
  #line 3001 
  u32 vlanflags = 0U;
  #line 3002 
  int rx_work = 0;
  #line 3006 
  while (1) {
    #line 3006 
    if (np->get_rx.ex != np->put_rx.ex) {
      #line 3006 
      flags = (np->get_rx.ex)->flaglen;
      #line 3006 
      if ((flags & 2147483648U) == 0U) {
        #line 3007 
        if (! (rx_work < limit)) 
                                 #line 3006 
                                 break;
      }
      else 
           #line 3006 
           break;
    }
    else 
         #line 3006 
         break;
    {
      #line 3075 
      struct ring_desc_ex *tmp_4;
      #line 3077 
      struct nv_skb_map *tmp_5;
      #line 3015 
      dma_unmap_single_attrs(& (np->pci_dev)->dev,(np->get_rx_ctx)->dma,(unsigned long)(np->get_rx_ctx)->dma_len,(enum dma_data_direction)DMA_FROM_DEVICE,0UL);
      #line 3018 
      skb = (np->get_rx_ctx)->skb;
      #line 3019 
      (np->get_rx_ctx)->skb = (struct sk_buff *)0;
      #line 3022 
      if ((long)((flags & 536870912U) != 0U) != 0L) {
        #line 3023 
        len = (int)flags & 16383;
        #line 3024 
        if ((long)((flags & 1073741824U) != 0U) != 0L) 
          #line 3025 
          if ((flags & 33292288U) == 2097152U) {
            #line 3026 
            len = nv_getlen(dev,(void *)skb->data,len);
            #line 3027 
            if (len < 0) {
              #line 3028 
              consume_skb(skb);
              #line 3029 
              goto next_pkt;
            }
          }
          else 
            #line 3033 
            if ((flags & 33292288U) == 16777216U) {
              #line 3034 
              if ((flags & 33554432U) != 0U) 
                                             #line 3035 
                                             len --;
            }
            else {
              #line 3039 
              consume_skb(skb);
              #line 3040 
              goto next_pkt;
            }
        #line 3044 
        if ((flags & 469762048U) == 335544320U || (flags & 469762048U) == 402653184U) 
          #line 3046 
          skb->ip_summed = (unsigned char)1U;
        #line 3049 
        skb_put(skb,(unsigned int)len);
        #line 3050 
        skb->protocol = eth_type_trans(skb,dev);
        #line 3051 
        __builtin_prefetch((void const *)((void *)skb->data));
        #line 3053 
        vlanflags = (np->get_rx.ex)->buflow;
        #line 3060 
        if ((dev->features & 256ULL) != 0ULL && (vlanflags & 65536U) != 0U) {
          #line 3062 
          u16 vid = (unsigned short)vlanflags;
          #line 3064 
          __vlan_hwaccel_put_tag(skb,(unsigned short)129,(unsigned short)((int)vid));
        }
        #line 3066 
        napi_gro_receive(& np->napi,skb);
        #line 3067 
        u64_stats_init(& np->swstats_rx_syncp);
        #line 3068 
        __this_cpu_preempt_check((char *)"add");
        {
          #line 3068 
          void *__vpp_verify = (void *)0;
          #line 3068 
          void *tmp_2 = __vpp_verify;
        }
        #line 3068 
        switch (8UL) {
          #line 3068 
          case (unsigned long)1: 
                                 #line 3068 
          ;
          {
            #line 3068 
            int pao_ID__ = 1;
            #line 3068 
            switch (8UL) {
              #line 3068 
              case (unsigned long)1: 
                                     #line 3068 
              ;
              #line 3070 
              ldv_inline_asm();
              #line 3068 
              break;
              #line 3068 
              case (unsigned long)2: 
                                     #line 3068 
              ;
              #line 3070 
              ldv_inline_asm();
              #line 3068 
              break;
              #line 3068 
              case (unsigned long)4: 
                                     #line 3068 
              ;
              #line 3070 
              ldv_inline_asm();
              #line 3068 
              break;
              #line 3068 
              case (unsigned long)8: 
                                     #line 3068 
              ;
              #line 3070 
              ldv_inline_asm();
              #line 3068 
              break;
              #line 3068 
              default: 
                       #line 3068 
              ;
              #line 3068 
              __bad_percpu_size();
            }
          }
          #line 3068 
          break;
          #line 3068 
          case (unsigned long)2: 
                                 #line 3068 
          ;
          {
            #line 3068 
            int pao_ID___0 = 1;
            #line 3068 
            switch (8UL) {
              #line 3068 
              case (unsigned long)1: 
                                     #line 3068 
              ;
              #line 3070 
              ldv_inline_asm();
              #line 3068 
              break;
              #line 3068 
              case (unsigned long)2: 
                                     #line 3068 
              ;
              #line 3070 
              ldv_inline_asm();
              #line 3068 
              break;
              #line 3068 
              case (unsigned long)4: 
                                     #line 3068 
              ;
              #line 3070 
              ldv_inline_asm();
              #line 3068 
              break;
              #line 3068 
              case (unsigned long)8: 
                                     #line 3068 
              ;
              #line 3070 
              ldv_inline_asm();
              #line 3068 
              break;
              #line 3068 
              default: 
                       #line 3068 
              ;
              #line 3068 
              __bad_percpu_size();
            }
          }
          #line 3068 
          break;
          #line 3068 
          case (unsigned long)4: 
                                 #line 3068 
          ;
          {
            #line 3068 
            int pao_ID___1 = 1;
            #line 3068 
            switch (8UL) {
              #line 3068 
              case (unsigned long)1: 
                                     #line 3068 
              ;
              #line 3070 
              ldv_inline_asm();
              #line 3068 
              break;
              #line 3068 
              case (unsigned long)2: 
                                     #line 3068 
              ;
              #line 3070 
              ldv_inline_asm();
              #line 3068 
              break;
              #line 3068 
              case (unsigned long)4: 
                                     #line 3068 
              ;
              #line 3070 
              ldv_inline_asm();
              #line 3068 
              break;
              #line 3068 
              case (unsigned long)8: 
                                     #line 3068 
              ;
              #line 3070 
              ldv_inline_asm();
              #line 3068 
              break;
              #line 3068 
              default: 
                       #line 3068 
              ;
              #line 3068 
              __bad_percpu_size();
            }
          }
          #line 3068 
          break;
          #line 3068 
          case (unsigned long)8: 
                                 #line 3068 
          ;
          {
            #line 3068 
            int pao_ID___2 = 1;
            #line 3068 
            switch (8UL) {
              #line 3068 
              case (unsigned long)1: 
                                     #line 3068 
              ;
              #line 3070 
              ldv_inline_asm();
              #line 3068 
              break;
              #line 3068 
              case (unsigned long)2: 
                                     #line 3068 
              ;
              #line 3070 
              ldv_inline_asm();
              #line 3068 
              break;
              #line 3068 
              case (unsigned long)4: 
                                     #line 3068 
              ;
              #line 3070 
              ldv_inline_asm();
              #line 3068 
              break;
              #line 3068 
              case (unsigned long)8: 
                                     #line 3068 
              ;
              #line 3070 
              ldv_inline_asm();
              #line 3068 
              break;
              #line 3068 
              default: 
                       #line 3068 
              ;
              #line 3068 
              __bad_percpu_size();
            }
          }
          #line 3068 
          break;
          #line 3068 
          default: 
                   #line 3068 
          ;
          #line 3068 
          __bad_size_call_parameter();
          #line 3068 
          break;
        }
        #line 3069 
        __this_cpu_preempt_check((char *)"add");
        {
          #line 3069 
          void *__vpp_verify_0 = (void *)0;
          #line 3069 
          void *tmp_12 = __vpp_verify_0;
        }
        #line 3069 
        switch (8UL) {
          #line 3069 
          case (unsigned long)1: 
                                 #line 3069 
          ;
          {
            #line 3069 
            int tmp_0;
            #line 3069 
            if (0 != 0 && (len == 1 || len == -1)) 
                                                   #line 3069 
                                                   tmp_0 = len; else 
                                                                  #line 3069 
                                                                  tmp_0 = 0;
            #line 3069 
            int pao_ID___3 = tmp_0;
            #line 3069 
            switch (8UL) {
              #line 3069 
              case (unsigned long)1: 
                                     #line 3069 
              ;
              #line 3069 
              if (pao_ID___3 == 1) 
                                   #line 3071 
                                   ldv_inline_asm();
              else 
                #line 3069 
                if (pao_ID___3 == -1) 
                                      #line 3071 
                                      ldv_inline_asm(); else 
                                                             #line 3074 
                                                             ldv_inline_asm();
              #line 3069 
              break;
              #line 3069 
              case (unsigned long)2: 
                                     #line 3069 
              ;
              #line 3069 
              if (pao_ID___3 == 1) 
                                   #line 3071 
                                   ldv_inline_asm();
              else 
                #line 3069 
                if (pao_ID___3 == -1) 
                                      #line 3071 
                                      ldv_inline_asm(); else 
                                                             #line 3074 
                                                             ldv_inline_asm();
              #line 3069 
              break;
              #line 3069 
              case (unsigned long)4: 
                                     #line 3069 
              ;
              #line 3069 
              if (pao_ID___3 == 1) 
                                   #line 3071 
                                   ldv_inline_asm();
              else 
                #line 3069 
                if (pao_ID___3 == -1) 
                                      #line 3071 
                                      ldv_inline_asm(); else 
                                                             #line 3074 
                                                             ldv_inline_asm();
              #line 3069 
              break;
              #line 3069 
              case (unsigned long)8: 
                                     #line 3069 
              ;
              #line 3069 
              if (pao_ID___3 == 1) 
                                   #line 3071 
                                   ldv_inline_asm();
              else 
                #line 3069 
                if (pao_ID___3 == -1) 
                                      #line 3071 
                                      ldv_inline_asm(); else 
                                                             #line 3074 
                                                             ldv_inline_asm();
              #line 3069 
              break;
              #line 3069 
              default: 
                       #line 3069 
              ;
              #line 3069 
              __bad_percpu_size();
            }
          }
          #line 3069 
          break;
          #line 3069 
          case (unsigned long)2: 
                                 #line 3069 
          ;
          {
            #line 3069 
            int tmp_1;
            #line 3069 
            if (0 != 0 && (len == 1 || len == -1)) 
                                                   #line 3069 
                                                   tmp_1 = len; else 
                                                                  #line 3069 
                                                                  tmp_1 = 0;
            #line 3069 
            int pao_ID___4 = tmp_1;
            #line 3069 
            switch (8UL) {
              #line 3069 
              case (unsigned long)1: 
                                     #line 3069 
              ;
              #line 3069 
              if (pao_ID___4 == 1) 
                                   #line 3071 
                                   ldv_inline_asm();
              else 
                #line 3069 
                if (pao_ID___4 == -1) 
                                      #line 3071 
                                      ldv_inline_asm(); else 
                                                             #line 3074 
                                                             ldv_inline_asm();
              #line 3069 
              break;
              #line 3069 
              case (unsigned long)2: 
                                     #line 3069 
              ;
              #line 3069 
              if (pao_ID___4 == 1) 
                                   #line 3071 
                                   ldv_inline_asm();
              else 
                #line 3069 
                if (pao_ID___4 == -1) 
                                      #line 3071 
                                      ldv_inline_asm(); else 
                                                             #line 3074 
                                                             ldv_inline_asm();
              #line 3069 
              break;
              #line 3069 
              case (unsigned long)4: 
                                     #line 3069 
              ;
              #line 3069 
              if (pao_ID___4 == 1) 
                                   #line 3071 
                                   ldv_inline_asm();
              else 
                #line 3069 
                if (pao_ID___4 == -1) 
                                      #line 3071 
                                      ldv_inline_asm(); else 
                                                             #line 3074 
                                                             ldv_inline_asm();
              #line 3069 
              break;
              #line 3069 
              case (unsigned long)8: 
                                     #line 3069 
              ;
              #line 3069 
              if (pao_ID___4 == 1) 
                                   #line 3071 
                                   ldv_inline_asm();
              else 
                #line 3069 
                if (pao_ID___4 == -1) 
                                      #line 3071 
                                      ldv_inline_asm(); else 
                                                             #line 3074 
                                                             ldv_inline_asm();
              #line 3069 
              break;
              #line 3069 
              default: 
                       #line 3069 
              ;
              #line 3069 
              __bad_percpu_size();
            }
          }
          #line 3069 
          break;
          #line 3069 
          case (unsigned long)4: 
                                 #line 3069 
          ;
          {
            #line 3069 
            int tmp_2_5;
            #line 3069 
            if (0 != 0 && (len == 1 || len == -1)) 
                                                   #line 3069 
                                                   tmp_2_5 = len; else 
                                                                    #line 3069 
                                                                    tmp_2_5 = 0;
            #line 3069 
            int pao_ID___5 = tmp_2_5;
            #line 3069 
            switch (8UL) {
              #line 3069 
              case (unsigned long)1: 
                                     #line 3069 
              ;
              #line 3069 
              if (pao_ID___5 == 1) 
                                   #line 3071 
                                   ldv_inline_asm();
              else 
                #line 3069 
                if (pao_ID___5 == -1) 
                                      #line 3071 
                                      ldv_inline_asm(); else 
                                                             #line 3074 
                                                             ldv_inline_asm();
              #line 3069 
              break;
              #line 3069 
              case (unsigned long)2: 
                                     #line 3069 
              ;
              #line 3069 
              if (pao_ID___5 == 1) 
                                   #line 3071 
                                   ldv_inline_asm();
              else 
                #line 3069 
                if (pao_ID___5 == -1) 
                                      #line 3071 
                                      ldv_inline_asm(); else 
                                                             #line 3074 
                                                             ldv_inline_asm();
              #line 3069 
              break;
              #line 3069 
              case (unsigned long)4: 
                                     #line 3069 
              ;
              #line 3069 
              if (pao_ID___5 == 1) 
                                   #line 3071 
                                   ldv_inline_asm();
              else 
                #line 3069 
                if (pao_ID___5 == -1) 
                                      #line 3071 
                                      ldv_inline_asm(); else 
                                                             #line 3074 
                                                             ldv_inline_asm();
              #line 3069 
              break;
              #line 3069 
              case (unsigned long)8: 
                                     #line 3069 
              ;
              #line 3069 
              if (pao_ID___5 == 1) 
                                   #line 3071 
                                   ldv_inline_asm();
              else 
                #line 3069 
                if (pao_ID___5 == -1) 
                                      #line 3071 
                                      ldv_inline_asm(); else 
                                                             #line 3074 
                                                             ldv_inline_asm();
              #line 3069 
              break;
              #line 3069 
              default: 
                       #line 3069 
              ;
              #line 3069 
              __bad_percpu_size();
            }
          }
          #line 3069 
          break;
          #line 3069 
          case (unsigned long)8: 
                                 #line 3069 
          ;
          {
            #line 3069 
            int tmp_3;
            #line 3069 
            if (0 != 0 && (len == 1 || len == -1)) 
                                                   #line 3069 
                                                   tmp_3 = len; else 
                                                                  #line 3069 
                                                                  tmp_3 = 0;
            #line 3069 
            int pao_ID___6 = tmp_3;
            #line 3069 
            switch (8UL) {
              #line 3069 
              case (unsigned long)1: 
                                     #line 3069 
              ;
              #line 3069 
              if (pao_ID___6 == 1) 
                                   #line 3071 
                                   ldv_inline_asm();
              else 
                #line 3069 
                if (pao_ID___6 == -1) 
                                      #line 3071 
                                      ldv_inline_asm(); else 
                                                             #line 3074 
                                                             ldv_inline_asm();
              #line 3069 
              break;
              #line 3069 
              case (unsigned long)2: 
                                     #line 3069 
              ;
              #line 3069 
              if (pao_ID___6 == 1) 
                                   #line 3071 
                                   ldv_inline_asm();
              else 
                #line 3069 
                if (pao_ID___6 == -1) 
                                      #line 3071 
                                      ldv_inline_asm(); else 
                                                             #line 3074 
                                                             ldv_inline_asm();
              #line 3069 
              break;
              #line 3069 
              case (unsigned long)4: 
                                     #line 3069 
              ;
              #line 3069 
              if (pao_ID___6 == 1) 
                                   #line 3071 
                                   ldv_inline_asm();
              else 
                #line 3069 
                if (pao_ID___6 == -1) 
                                      #line 3071 
                                      ldv_inline_asm(); else 
                                                             #line 3074 
                                                             ldv_inline_asm();
              #line 3069 
              break;
              #line 3069 
              case (unsigned long)8: 
                                     #line 3069 
              ;
              #line 3069 
              if (pao_ID___6 == 1) 
                                   #line 3071 
                                   ldv_inline_asm();
              else 
                #line 3069 
                if (pao_ID___6 == -1) 
                                      #line 3071 
                                      ldv_inline_asm(); else 
                                                             #line 3074 
                                                             ldv_inline_asm();
              #line 3069 
              break;
              #line 3069 
              default: 
                       #line 3069 
              ;
              #line 3069 
              __bad_percpu_size();
            }
          }
          #line 3069 
          break;
          #line 3069 
          default: 
                   #line 3069 
          ;
          #line 3069 
          __bad_size_call_parameter();
          #line 3069 
          break;
        }
        #line 3070 
        u64_stats_init(& np->swstats_rx_syncp);
      }
      else 
           #line 3072 
           consume_skb(skb);
      #line 3074 
      next_pkt: 
                #line 3074 
      ;
      #line 3075 
      tmp_4 = np->get_rx.ex;
      #line 3075 
      (np->get_rx.ex) ++;
      #line 3075 
      ;
      #line 3075 
      if ((long)(tmp_4 == np->last_rx.ex) != 0L) 
                                                 #line 3076 
                                                 np->get_rx.ex = np->rx_ring.ex;
      #line 3077 
      tmp_5 = np->get_rx_ctx;
      #line 3077 
      (np->get_rx_ctx) ++;
      #line 3077 
      ;
      #line 3077 
      if ((long)(tmp_5 == np->last_rx_ctx) != 0L) 
                                                  #line 3078 
                                                  np->get_rx_ctx = np->rx_skb;
      #line 3080 
      rx_work ++;
    }
  }
  #line 3083 
  return rx_work;
}

#line 3086  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
static void set_bufsize(struct net_device *dev)
{
  #line 3088 
  struct fe_priv *np = netdev_priv(dev);
  #line 3090 
  if (dev->mtu <= 1500U) 
                         #line 3091 
                         np->rx_buf_sz = 1564U; else 
                                                     #line 3093 
                                                     np->rx_buf_sz = dev->mtu + 64U;
  #line 3094 
  return;
}

#line 3100  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
static int nv_change_mtu(struct net_device *dev, int new_mtu)
{
  #line 3103 
  int old_mtu;
  #line 3102 
  struct fe_priv *np = netdev_priv(dev);
  #line 3105 
  old_mtu = (int)dev->mtu;
  #line 3106 
  dev->mtu = (unsigned int)new_mtu;
  #line 3109 
  if (old_mtu <= 1500 && new_mtu <= 1500) 
                                          #line 3110 
                                          return 0;
  #line 3113 
  if ((int)netif_running(dev) != 0) {
    #line 3114 
    u8 *base = get_hwbase(dev);
    #line 3121 
    nv_disable_irq(dev);
    #line 3122 
    nv_napi_disable(dev);
    #line 3123 
    netif_tx_lock_bh(dev);
    #line 3124 
    netif_addr_lock(dev);
    #line 3125 
    cif_spin_lock_lock_of_fe_priv(& np->lock);
    #line 3127 
    nv_stop_rxtx(dev);
    #line 3128 
    nv_txrx_reset(dev);
    #line 3130 
    nv_drain_rxtx(dev);
    #line 3132 
    set_bufsize(dev);
    #line 3133 
    if (nv_init_ring(dev) != 0) 
      #line 3134 
      if (np->in_shutdown == 0) 
                                #line 3135 
                                cif_mod_timer(& np->oom_kick,jiffies + 13UL);
    #line 3138 
    writel(np->rx_buf_sz,(void *)(base + 144U));
    #line 3139 
    setup_hw_rings(dev,3);
    #line 3140 
    writel((unsigned int)(((np->rx_ring_size + -1) << 16) + (np->tx_ring_size + -1)),(void *)(base + 264U));
    #line 3142 
    pci_push(base);
    #line 3143 
    ;
    #line 3143 
    writel(np->txrxctl_bits | 1U,(void *)(get_hwbase(dev) + 324U));
    #line 3144 
    pci_push(base);
    #line 3147 
    nv_start_rxtx(dev);
    #line 3148 
    cif_spin_unlock_lock_of_fe_priv(& np->lock);
    #line 3149 
    netif_addr_unlock(dev);
    #line 3150 
    netif_tx_unlock_bh(dev);
    #line 3151 
    nv_napi_enable(dev);
    #line 3152 
    nv_enable_irq(dev);
  }
  #line 3154 
  return 0;
}

#line 3157  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
static void nv_copy_mac_to_hw(struct net_device *dev)
{
  #line 3160 
  u32 mac[2U];
  #line 3159 
  u8 *base = get_hwbase(dev);
  #line 3162 
  mac[0] = (unsigned int)((((int)*(dev->dev_addr) + ((int)*(dev->dev_addr + 1U) << 8)) + ((int)*(dev->dev_addr + 2U) << 16)) + ((int)*(dev->dev_addr + 3U) << 24));
  #line 3164 
  mac[1] = (unsigned int)((int)*(dev->dev_addr + 4U) + ((int)*(dev->dev_addr + 5U) << 8));
  #line 3166 
  writel(mac[0],(void *)(base + 168U));
  #line 3167 
  writel(mac[1],(void *)(base + 172U));
  #line 3168 
  return;
}

#line 3174  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
static int nv_set_mac_address(struct net_device *dev, void *addr)
{
  #line 3176 
  struct fe_priv *np = netdev_priv(dev);
  #line 3177 
  struct sockaddr *macaddr = (struct sockaddr *)addr;
  #line 3179 
  if (! is_valid_ether_addr((u8 *)(& macaddr->sa_data))) 
                                                         #line 3180 
                                                         return -99;
  #line 3183 
  memcpy((void *)dev->dev_addr,(void *)(& macaddr->sa_data),6UL);
  #line 3185 
  if ((int)netif_running(dev) != 0) {
    #line 3186 
    netif_tx_lock_bh(dev);
    #line 3187 
    netif_addr_lock(dev);
    #line 3188 
    cif_spin_lock_irq_lock_of_fe_priv(& np->lock);
    #line 3191 
    nv_stop_rx(dev);
    #line 3194 
    nv_copy_mac_to_hw(dev);
    #line 3197 
    nv_start_rx(dev);
    #line 3198 
    cif_spin_unlock_irq_lock_of_fe_priv(& np->lock);
    #line 3199 
    netif_addr_unlock(dev);
    #line 3200 
    netif_tx_unlock_bh(dev);
  }
  else 
       #line 3202 
       nv_copy_mac_to_hw(dev);
  #line 3204 
  return 0;
}

#line 3211  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
static void nv_set_multicast(struct net_device *dev)
{
  #line 3215 
  u32 addr[2U];
  #line 3216 
  u32 mask[2U];
  #line 3213 
  struct fe_priv *np = netdev_priv(dev);
  #line 3214 
  u8 *base = get_hwbase(dev);
  #line 3217 
  u32 pff = readl((void *)(base + 140U)) & 8U;
  #line 3219 
  memset((void *)(& addr),0,8UL);
  #line 3220 
  memset((void *)(& mask),0,8UL);
  #line 3222 
  if ((dev->flags & 256U) != 0U) 
                                 #line 3223 
                                 pff |= 128U;
  else {
    #line 3225 
    pff |= 32U;
    #line 3227 
    if ((dev->flags & 512U) != 0U || dev->mc.count != 0) {
      #line 3228 
      u32 alwaysOff[2U];
      #line 3229 
      u32 alwaysOn[2U];
      #line 3231 
      alwaysOff[1] = 4294967295U;
      #line 3231 
      alwaysOff[0] = alwaysOff[1];
      #line 3231 
      alwaysOn[1] = alwaysOff[0];
      #line 3231 
      alwaysOn[0] = alwaysOn[1];
      #line 3232 
      if ((dev->flags & 512U) != 0U) {
        #line 3233 
        alwaysOff[1] = 0U;
        #line 3233 
        alwaysOff[0] = alwaysOff[1];
        #line 3233 
        alwaysOn[1] = alwaysOff[0];
        #line 3233 
        alwaysOn[0] = alwaysOn[1];
      }
      else {
        #line 3237 
        void *__mptr;
        #line 3235 
        struct netdev_hw_addr *ha;
        #line 3237 
        __mptr = (void *)dev->mc.list.next;
        #line 3237 
        ha = ((struct netdev_hw_addr *)__mptr);
        #line 3237 
        while (& ha->list != & dev->mc.list) {
          #line 3237 
          void *__mptr_0;
          {
            #line 3239 
            u32 a;
            #line 3239 
            u32 b;
            #line 3238 
            unsigned char *hw_addr = (unsigned char *)(& ha->addr);
            #line 3241 
            a = *((__le32 *)hw_addr);
            #line 3242 
            b = (unsigned int)*((__le16 *)(hw_addr + 4U));
            #line 3243 
            alwaysOn[0] &= a;
            #line 3244 
            alwaysOff[0] &= ~ a;
            #line 3245 
            alwaysOn[1] &= b;
            #line 3246 
            alwaysOff[1] &= ~ b;
          }
          #line 3237 
          __mptr_0 = (void *)ha->list.next;
          #line 3237 
          ha = ((struct netdev_hw_addr *)__mptr_0);
        }
      }
      #line 3249 
      addr[0] = alwaysOn[0];
      #line 3250 
      addr[1] = alwaysOn[1];
      #line 3251 
      mask[0] = alwaysOn[0] | alwaysOff[0];
      #line 3252 
      mask[1] = alwaysOn[1] | alwaysOff[1];
    }
    else {
      #line 3254 
      mask[0] = 4294967295U;
      #line 3255 
      mask[1] = 65535U;
    }
  }
  #line 3258 
  addr[0] |= 1U;
  #line 3259 
  pff |= 8323072U;
  #line 3260 
  cif_spin_lock_irq_lock_of_fe_priv(& np->lock);
  #line 3261 
  nv_stop_rx(dev);
  #line 3262 
  writel(addr[0],(void *)(base + 176U));
  #line 3263 
  writel(addr[1],(void *)(base + 180U));
  #line 3264 
  writel(mask[0],(void *)(base + 184U));
  #line 3265 
  writel(mask[1],(void *)(base + 188U));
  #line 3266 
  writel(pff,(void *)(base + 140U));
  #line 3267 
  nv_start_rx(dev);
  #line 3268 
  cif_spin_unlock_irq_lock_of_fe_priv(& np->lock);
  #line 3269 
  return;
}

#line 3271  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
static void nv_update_pause(struct net_device *dev, u32 pause_flags)
{
  #line 3273 
  struct fe_priv *np = netdev_priv(dev);
  #line 3274 
  u8 *base = get_hwbase(dev);
  #line 3276 
  np->pause_flags &= 4294967283U;
  #line 3278 
  if ((np->pause_flags & 1U) != 0U) {
    #line 3279 
    u32 pff = readl((void *)(base + 140U)) & 4294967287U;
    #line 3280 
    if ((pause_flags & 4U) != 0U) {
      #line 3281 
      writel(pff | 8U,(void *)(base + 140U));
      #line 3282 
      np->pause_flags |= 4U;
    }
    else 
         #line 3284 
         writel(pff,(void *)(base + 140U));
  }
  #line 3287 
  if ((np->pause_flags & 2U) != 0U) {
    #line 3288 
    u32 regmisc = readl((void *)(base + 128U)) & 4294967294U;
    #line 3289 
    if ((pause_flags & 8U) != 0U) {
      #line 3290 
      u32 pause_enable = 25165840U;
      #line 3291 
      if ((np->driver_data & 131072U) != 0U) 
                                             #line 3292 
                                             pause_enable = 90178544U;
      #line 3293 
      if ((np->driver_data & 262144U) != 0U) {
        #line 3294 
        pause_enable = 166725760U;
        #line 3296 
        ;
        #line 3296 
        writel(readl((void *)(base + 372U)) | 65536U,(void *)(base + 372U));
      }
      #line 3298 
      writel(pause_enable,(void *)(base + 368U));
      #line 3299 
      writel(regmisc | 1U,(void *)(base + 128U));
      #line 3300 
      np->pause_flags |= 8U;
    }
    else {
      #line 3302 
      writel(268370048U,(void *)(base + 368U));
      #line 3303 
      writel(regmisc,(void *)(base + 128U));
    }
  }
  #line 3306 
  return;
}

#line 3308  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
static void nv_force_linkspeed(struct net_device *dev, int speed, int duplex)
{
  #line 3312 
  u32 phyreg;
  #line 3312 
  u32 txreg;
  #line 3313 
  int mii_status;
  #line 3366 
  unsigned int tmp_1;
  #line 3310 
  struct fe_priv *np = netdev_priv(dev);
  #line 3311 
  u8 *base = get_hwbase(dev);
  #line 3315 
  np->linkspeed = (unsigned int)(speed | 65536);
  #line 3316 
  np->duplex = duplex;
  #line 3319 
  mii_status = mii_rw(dev,np->phyaddr,1,-1);
  #line 3320 
  if ((mii_status & 256) != 0) {
    #line 3321 
    np->gigabit = (unsigned short)256U;
    #line 3322 
    phyreg = readl((void *)(base + 156U));
    #line 3323 
    phyreg &= 4294705407U;
    #line 3324 
    if ((np->linkspeed & 4095U) == 1000U) 
                                          #line 3325 
                                          phyreg |= 32512U;
    else 
      #line 3326 
      if ((np->linkspeed & 4095U) == 100U) 
                                           #line 3327 
                                           phyreg |= 32512U;
      else 
        #line 3328 
        if ((np->linkspeed & 4095U) == 50U) 
                                            #line 3329 
                                            phyreg |= 261888U;
    #line 3330 
    writel(phyreg,(void *)(base + 156U));
  }
  #line 3333 
  phyreg = readl((void *)(base + 192U));
  #line 3334 
  phyreg &= 4294967036U;
  #line 3335 
  if (np->duplex == 0) 
                       #line 3336 
                       phyreg |= 256U;
  #line 3337 
  if ((np->linkspeed & 4095U) == 100U) 
                                       #line 3338 
                                       phyreg |= 1U;
  else 
    #line 3339 
    if ((np->linkspeed & 4095U) == 50U) 
                                        #line 3341 
                                        phyreg |= 2U;
  #line 3342 
  writel(phyreg,(void *)(base + 192U));
  #line 3344 
  if ((phyreg & 268435456U) != 0U) 
    #line 3345 
    if ((np->linkspeed & 4095U) == 50U) 
                                        #line 3347 
                                        txreg = 1312015U; else 
                                                               #line 3349 
                                                               txreg = 1443599U;
  else 
       #line 3351 
       txreg = 1377551U;
  #line 3353 
  writel(txreg,(void *)(base + 160U));
  #line 3355 
  if (np->desc_ver == 1U) 
                          #line 3356 
                          txreg = 2097168U;
  else 
    #line 3358 
    if ((np->linkspeed & 4095U) == 50U) 
                                        #line 3360 
                                        txreg = 266371072U; else 
                                                                 #line 3362 
                                                                 txreg = 31490048U;
  #line 3364 
  writel(txreg,(void *)(base + 316U));
  #line 3366 
  ;
  #line 3366 
  if (np->duplex != 0) 
                       #line 3366 
                       tmp_1 = 3870524U; else 
                                              #line 3366 
                                              tmp_1 = 3870526U;
  #line 3366 
  writel(tmp_1,(void *)(base + 128U));
  #line 3368 
  pci_push(base);
  #line 3369 
  writel(np->linkspeed,(void *)(base + 272U));
  #line 3370 
  pci_push(base);
  #line 3371 
  return;
}

#line 3384  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
static int nv_update_linkspeed(struct net_device *dev)
{
  #line 3390 
  int adv_lpa;
  #line 3390 
  int adv_pause;
  #line 3390 
  int lpa_pause;
  #line 3393 
  int mii_status;
  #line 3394 
  u32 bmcr;
  #line 3396 
  u32 control_1000;
  #line 3396 
  u32 status_1000;
  #line 3396 
  u32 phyreg;
  #line 3396 
  u32 pause_flags;
  #line 3396 
  u32 txreg;
  #line 3398 
  u32 phy_exp;
  #line 3557 
  unsigned int tmp_9;
  #line 3386 
  struct fe_priv *np = netdev_priv(dev);
  #line 3387 
  u8 *base = get_hwbase(dev);
  #line 3388 
  int adv = 0;
  #line 3389 
  int lpa = 0;
  #line 3391 
  int newls = (int)np->linkspeed;
  #line 3392 
  int newdup = np->duplex;
  #line 3395 
  int retval = 0;
  #line 3397 
  u32 txrxFlags = 0U;
  #line 3403 
  bmcr = (unsigned int)mii_rw(dev,np->phyaddr,0,-1);
  #line 3404 
  if ((bmcr & 16384U) != 0U) {
    #line 3405 
    if ((int)netif_running(dev) != 0) {
      #line 3406 
      nv_force_linkspeed(dev,50,1);
      #line 3407 
      if (! netif_carrier_ok(dev)) 
                                   #line 3408 
                                   netif_carrier_on(dev);
    }
    #line 3410 
    return 1;
  }
  #line 3416 
  mii_rw(dev,np->phyaddr,1,-1);
  #line 3417 
  mii_status = mii_rw(dev,np->phyaddr,1,-1);
  #line 3419 
  if ((mii_status & 4) == 0) {
    #line 3420 
    newls = 66536;
    #line 3421 
    newdup = 0;
    #line 3422 
    retval = 0;
    #line 3423 
    goto set_speed;
  }
  #line 3426 
  if (np->autoneg == 0) {
    #line 3427 
    if ((np->fixed_mode & 256) != 0) {
      #line 3428 
      newls = 65636;
      #line 3429 
      newdup = 1;
    }
    else 
      #line 3430 
      if ((np->fixed_mode & 128) != 0) {
        #line 3431 
        newls = 65636;
        #line 3432 
        newdup = 0;
      }
      else 
        #line 3433 
        if ((np->fixed_mode & 64) != 0) {
          #line 3434 
          newls = 66536;
          #line 3435 
          newdup = 1;
        }
        else {
          #line 3437 
          newls = 66536;
          #line 3438 
          newdup = 0;
        }
    #line 3440 
    retval = 1;
    #line 3441 
    goto set_speed;
  }
  #line 3444 
  if ((mii_status & 32) == 0) {
    #line 3446 
    newls = 66536;
    #line 3447 
    newdup = 0;
    #line 3448 
    retval = 0;
    #line 3449 
    goto set_speed;
  }
  #line 3452 
  adv = mii_rw(dev,np->phyaddr,4,-1);
  #line 3453 
  lpa = mii_rw(dev,np->phyaddr,5,-1);
  #line 3455 
  retval = 1;
  #line 3456 
  if ((unsigned int)np->gigabit == 256U) {
    #line 3457 
    control_1000 = (unsigned int)mii_rw(dev,np->phyaddr,9,-1);
    #line 3458 
    status_1000 = (unsigned int)mii_rw(dev,np->phyaddr,10,-1);
    #line 3460 
    if ((control_1000 & 512U) != 0U && (status_1000 & 2048U) != 0U) {
      #line 3462 
      newls = 65586;
      #line 3463 
      newdup = 1;
      #line 3464 
      goto set_speed;
    }
  }
  #line 3469 
  adv_lpa = lpa & adv;
  #line 3470 
  if ((adv_lpa & 256) != 0) {
    #line 3471 
    newls = 65636;
    #line 3472 
    newdup = 1;
  }
  else 
    #line 3473 
    if ((adv_lpa & 128) != 0) {
      #line 3474 
      newls = 65636;
      #line 3475 
      newdup = 0;
    }
    else 
      #line 3476 
      if ((adv_lpa & 64) != 0) {
        #line 3477 
        newls = 66536;
        #line 3478 
        newdup = 1;
      }
      else 
        #line 3479 
        if ((adv_lpa & 32) != 0) {
          #line 3480 
          newls = 66536;
          #line 3481 
          newdup = 0;
        }
        else {
          #line 3483 
          newls = 66536;
          #line 3484 
          newdup = 0;
        }
  #line 3487 
  set_speed: 
             #line 3487 
  ;
  #line 3488 
  if (np->duplex == newdup && np->linkspeed == (unsigned int)newls) 
                                                                    #line 3489 
                                                                    return retval;
  #line 3491 
  np->duplex = newdup;
  #line 3492 
  np->linkspeed = (unsigned int)newls;
  #line 3495 
  if ((readl((void *)(base + 132U)) & 1U) != 0U) {
    #line 3496 
    txrxFlags |= 1U;
    #line 3497 
    nv_stop_tx(dev);
  }
  #line 3499 
  if ((readl((void *)(base + 148U)) & 1U) != 0U) {
    #line 3500 
    txrxFlags |= 2U;
    #line 3501 
    nv_stop_rx(dev);
  }
  #line 3504 
  if ((unsigned int)np->gigabit == 256U) {
    #line 3505 
    phyreg = readl((void *)(base + 156U));
    #line 3506 
    phyreg &= 4294705407U;
    #line 3507 
    if ((np->linkspeed & 4095U) == 1000U || (np->linkspeed & 4095U) == 100U) 
      #line 3509 
      phyreg |= 32512U;
    else 
      #line 3510 
      if ((np->linkspeed & 4095U) == 50U) 
                                          #line 3511 
                                          phyreg |= 261888U;
    #line 3512 
    writel(phyreg,(void *)(base + 156U));
  }
  #line 3515 
  phyreg = readl((void *)(base + 192U));
  #line 3516 
  phyreg &= 4294967036U;
  #line 3517 
  if (np->duplex == 0) 
                       #line 3518 
                       phyreg |= 256U;
  #line 3519 
  if ((np->linkspeed & 4095U) == 100U) 
                                       #line 3520 
                                       phyreg |= 1U;
  else 
    #line 3521 
    if ((np->linkspeed & 4095U) == 50U) 
                                        #line 3522 
                                        phyreg |= 2U;
  #line 3523 
  writel(phyreg,(void *)(base + 192U));
  #line 3525 
  phy_exp = (unsigned int)mii_rw(dev,np->phyaddr,6,-1) & 1U;
  #line 3526 
  if ((phyreg & 268435456U) != 0U) 
    #line 3527 
    if ((np->linkspeed & 4095U) == 50U) 
                                        #line 3528 
                                        txreg = 1312015U;
    else 
      #line 3530 
      if ((phy_exp == 0U && np->duplex == 0) && (np->driver_data & 32768U) != 0U) 
        #line 3531 
        if ((np->linkspeed & 4095U) == 1000U) 
                                              #line 3532 
                                              txreg = 1448207U; else 
                                                                  #line 3534 
                                                                  txreg = 1454095U;
      else 
           #line 3536 
           txreg = 1443599U;
  else 
    #line 3540 
    if ((phy_exp == 0U && np->duplex == 0) && (np->driver_data & 32768U) != 0U) 
      #line 3541 
      txreg = 1384448U; else 
                             #line 3543 
                             txreg = 1377551U;
  #line 3545 
  writel(txreg,(void *)(base + 160U));
  #line 3547 
  if (np->desc_ver == 1U) 
                          #line 3548 
                          txreg = 2097168U;
  else 
    #line 3550 
    if ((np->linkspeed & 4095U) == 50U) 
                                        #line 3551 
                                        txreg = 266371072U; else 
                                                                 #line 3553 
                                                                 txreg = 31490048U;
  #line 3555 
  writel(txreg,(void *)(base + 316U));
  #line 3557 
  ;
  #line 3557 
  if (np->duplex != 0) 
                       #line 3557 
                       tmp_9 = 3870524U; else 
                                              #line 3557 
                                              tmp_9 = 3870526U;
  #line 3557 
  writel(tmp_9,(void *)(base + 128U));
  #line 3559 
  pci_push(base);
  #line 3560 
  writel(np->linkspeed,(void *)(base + 272U));
  #line 3561 
  pci_push(base);
  #line 3563 
  pause_flags = 0U;
  #line 3565 
  if ((int)netif_running(dev) != 0) 
    #line 3565 
    if (np->duplex != 0) 
      #line 3566 
      if (np->autoneg != 0 && (np->pause_flags & 64U) != 0U) {
        #line 3567 
        adv_pause = adv & 3072;
        #line 3568 
        lpa_pause = lpa & 3072;
        #line 3570 
        switch (adv_pause) {
          #line 3571 
          case 1024: 
                     #line 3571 
          ;
          #line 3572 
          if ((lpa_pause & 1024) != 0) {
            #line 3573 
            pause_flags |= 4U;
            #line 3574 
            if ((np->pause_flags & 32U) != 0U) 
                                               #line 3575 
                                               pause_flags |= 8U;
          }
          #line 3577 
          break;
          #line 3578 
          case 2048: 
                     #line 3578 
          ;
          #line 3579 
          if (lpa_pause == 3072) 
                                 #line 3580 
                                 pause_flags |= 8U;
          #line 3581 
          break;
          #line 3582 
          case 3072: 
                     #line 3582 
          ;
          #line 3583 
          if ((lpa_pause & 1024) != 0) {
            #line 3584 
            pause_flags |= 4U;
            #line 3585 
            if ((np->pause_flags & 32U) != 0U) 
                                               #line 3586 
                                               pause_flags |= 8U;
          }
          #line 3588 
          if (lpa_pause == 2048) 
                                 #line 3589 
                                 pause_flags |= 4U;
          #line 3590 
          break;
        }
      }
      else 
           #line 3593 
           pause_flags = np->pause_flags;
  #line 3596 
  nv_update_pause(dev,pause_flags);
  #line 3598 
  if ((txrxFlags & 1U) != 0U) 
                              #line 3599 
                              nv_start_tx(dev);
  #line 3600 
  if ((txrxFlags & 2U) != 0U) 
                              #line 3601 
                              nv_start_rx(dev);
  #line 3603 
  return retval;
}

#line 3606  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
static void nv_linkchange(struct net_device *dev)
{
  #line 3608 
  if (nv_update_linkspeed(dev) != 0) {
    #line 3609 
    if (! netif_carrier_ok(dev)) {
      #line 3610 
      netif_carrier_on(dev);
      #line 3611 
      netdev_info(dev,(char *)"link up\n");
      #line 3612 
      nv_txrx_gate(dev,(_Bool)0);
      #line 3613 
      nv_start_rx(dev);
    }
  }
  else {
    #line 3616 
    if ((int)netif_carrier_ok(dev) != 0) {
      #line 3617 
      netif_carrier_off(dev);
      #line 3618 
      netdev_info(dev,(char *)"link down\n");
      #line 3619 
      nv_txrx_gate(dev,(_Bool)1);
      #line 3620 
      nv_stop_rx(dev);
    }
  }
  #line 3622 
  return;
}

#line 3625  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
static void nv_link_irq(struct net_device *dev)
{
  #line 3628 
  u32 miistat;
  #line 3627 
  u8 *base = get_hwbase(dev);
  #line 3630 
  miistat = readl((void *)(base + 384U));
  #line 3631 
  writel(8U,(void *)(base + 384U));
  #line 3633 
  if ((miistat & 8U) != 0U) 
                            #line 3634 
                            nv_linkchange(dev);
  #line 3635 
  return;
}

#line 3637  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
static void nv_msi_workaround(struct fe_priv *np)
{
  #line 3643 
  if ((np->msi_flags & 64U) != 0U) {
    #line 3644 
    u8 *base = (u8 *)np->base;
    #line 3646 
    writel(0U,(void *)(base + 48U));
    #line 3647 
    writel(1U,(void *)(base + 48U));
  }
  #line 3649 
  return;
}

#line 3651  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
__inline static int nv_change_interrupt_mode(struct net_device *dev, int total_work)
{
  #line 3653 
  struct fe_priv *np = netdev_priv(dev);
  #line 3655 
  if (optimization_mode == 2) 
    #line 3656 
    if (total_work > 4) {
      #line 3658 
      np->quiet_count = 0;
      #line 3659 
      if (np->irqmask != 96U) {
        #line 3660 
        np->irqmask = 96U;
        #line 3661 
        return 1;
      }
    }
    else 
      #line 3664 
      if (np->quiet_count <= 2047) 
                                   #line 3665 
                                   (np->quiet_count) ++;
      else 
        #line 3669 
        if (np->irqmask != 223U) {
          #line 3670 
          np->irqmask = 223U;
          #line 3671 
          return 1;
        }
  #line 3676 
  return 0;
}

#line 3679  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
static irqreturn_t nv_nic_irq(int foo, void *data)
{
  #line 3681 
  struct net_device *dev = (struct net_device *)data;
  #line 3682 
  struct fe_priv *np = netdev_priv(dev);
  #line 3683 
  u8 *base = get_hwbase(dev);
  #line 3685 
  if ((np->msi_flags & 128U) == 0U) {
    #line 3686 
    np->events = readl((void *)base);
    #line 3687 
    writel(np->events,(void *)base);
  }
  else {
    #line 3689 
    np->events = readl((void *)(base + 1008U));
    #line 3690 
    writel(np->events,(void *)(base + 1008U));
  }
  #line 3692 
  if ((np->events & np->irqmask) == 0U) 
                                        #line 3693 
                                        return IRQ_NONE;
  #line 3695 
  nv_msi_workaround(np);
  #line 3697 
  if ((int)napi_schedule_prep(& np->napi) != 0) {
    #line 3701 
    writel(0U,(void *)(base + 4U));
    #line 3702 
    __napi_schedule(& np->napi);
  }
  #line 3705 
  return IRQ_HANDLED;
}

#line 3712  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
static irqreturn_t nv_nic_irq_optimized(int foo, void *data)
{
  #line 3714 
  struct net_device *dev = (struct net_device *)data;
  #line 3715 
  struct fe_priv *np = netdev_priv(dev);
  #line 3716 
  u8 *base = get_hwbase(dev);
  #line 3718 
  if ((np->msi_flags & 128U) == 0U) {
    #line 3719 
    np->events = readl((void *)base);
    #line 3720 
    writel(np->events,(void *)base);
  }
  else {
    #line 3722 
    np->events = readl((void *)(base + 1008U));
    #line 3723 
    writel(np->events,(void *)(base + 1008U));
  }
  #line 3725 
  if ((np->events & np->irqmask) == 0U) 
                                        #line 3726 
                                        return IRQ_NONE;
  #line 3728 
  nv_msi_workaround(np);
  #line 3730 
  if ((int)napi_schedule_prep(& np->napi) != 0) {
    #line 3734 
    writel(0U,(void *)(base + 4U));
    #line 3735 
    __napi_schedule(& np->napi);
  }
  #line 3738 
  return IRQ_HANDLED;
}

#line 3741  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
static irqreturn_t nv_nic_irq_tx(int foo, void *data)
{
  #line 3746 
  u32 events;
  #line 3747 
  int i;
  #line 3748 
  unsigned long flags;
  #line 3743 
  struct net_device *dev = (struct net_device *)data;
  #line 3744 
  struct fe_priv *np = netdev_priv(dev);
  #line 3745 
  u8 *base = get_hwbase(dev);
  #line 3750 
  i = 0;
  #line 3750 
  while (1) {
    {
      #line 3751 
      events = readl((void *)(base + 1008U)) & 280U;
      #line 3752 
      writel(events,(void *)(base + 1008U));
      {
        #line 3753 
        bool branch;
        #line 3753 
        struct _ddebug __UNIQUE_ID_ddebug443 = {.modname = (char *)"forcedeth", .function = (char *)"nv_nic_irq_tx", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c", .format = (char *)"tx irq events: %08x\n", .lineno = (unsigned int)3753U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 3753 
        branch = arch_static_branch(& __UNIQUE_ID_ddebug443.key.dd_key_false.key,(_Bool)0);
        #line 3753 
        if ((long)((long)((int)branch != 0)) != 0L) 
                                                    #line 3753 
                                                    __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug443,dev,(char *)"tx irq events: %08x\n",events);
      }
      #line 3754 
      if ((np->irqmask & events) == 0U) 
                                        #line 3755 
                                        break;
      #line 3757 
      cif___ldv_spin_lock_lock_of_fe_priv(& np->lock);
      #line 3758 
      nv_tx_done_optimized(dev,64);
      #line 3759 
      cif_spin_unlock_irqrestore_lock_of_fe_priv(& np->lock,flags);
      #line 3761 
      if ((long)(i > max_interrupt_work) != 0L) {
        #line 3762 
        cif___ldv_spin_lock_lock_of_fe_priv(& np->lock);
        #line 3764 
        writel(280U,(void *)(base + 4U));
        #line 3765 
        pci_push(base);
        #line 3767 
        if (np->in_shutdown == 0) {
          #line 3768 
          np->nic_poll_irq |= 280U;
          #line 3769 
          cif_mod_timer(& np->nic_poll,jiffies + 3UL);
        }
        #line 3771 
        cif_spin_unlock_irqrestore_lock_of_fe_priv(& np->lock,flags);
        {
          #line 3772 
          bool branch_0;
          #line 3772 
          struct _ddebug __UNIQUE_ID_ddebug444 = {.modname = (char *)"forcedeth", .function = (char *)"nv_nic_irq_tx", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c", .format = (char *)"%s: too many iterations (%d)\n", .lineno = (unsigned int)3772U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
          #line 3772 
          branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug444.key.dd_key_false.key,(_Bool)0);
          #line 3772 
          if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                        #line 3772 
                                                        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug444,dev,(char *)"%s: too many iterations (%d)\n",(char *)"nv_nic_irq_tx",i);
        }
        #line 3774 
        break;
      }
    }
    #line 3750 
    i ++;
  }
  #line 3779 
  return (enum irqreturn)(i != 0);
}

#line 3782  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
static int nv_napi_poll(struct napi_struct *napi, int budget)
{
  #line 3784 
  void *__mptr;
  #line 3787 
  unsigned long flags;
  #line 3788 
  int retcode;
  #line 3789 
  int rx_count;
  #line 3784 
  __mptr = (void *)napi;
  #line 3784 
  struct fe_priv *np = ((struct fe_priv *)(__mptr + 18446744073709551536U));
  #line 3785 
  struct net_device *dev = np->dev;
  #line 3786 
  u8 *base = get_hwbase(dev);
  #line 3789 
  int tx_work = 0;
  #line 3789 
  int rx_work = 0;
  #line 3791 
  while (1) {
    #line 3792 
    if (nv_optimized(np)) {
      #line 3800 
      cif___ldv_spin_lock_lock_of_fe_priv(& np->lock);
      #line 3801 
      tx_work = nv_tx_done_optimized(dev,np->tx_ring_size) + tx_work;
      #line 3802 
      cif_spin_unlock_irqrestore_lock_of_fe_priv(& np->lock,flags);
      #line 3804 
      rx_count = nv_rx_process_optimized(dev,budget - rx_work);
      #line 3806 
      retcode = nv_alloc_rx_optimized(dev);
    }
    else {
      #line 3793 
      cif___ldv_spin_lock_lock_of_fe_priv(& np->lock);
      #line 3794 
      tx_work = nv_tx_done(dev,np->tx_ring_size) + tx_work;
      #line 3795 
      cif_spin_unlock_irqrestore_lock_of_fe_priv(& np->lock,flags);
      #line 3797 
      rx_count = nv_rx_process(dev,budget - rx_work);
      #line 3798 
      retcode = nv_alloc_rx(dev);
    }
    #line 3807 
    if (retcode == 0 && rx_count > 0) {
      #line 3809 
      rx_work += rx_count;
      #line 3809 
      ;
      #line 3809 
      if (! (rx_work < budget)) 
                                #line 3791 
                                break;
    }
    else 
         #line 3791 
         break;
  }
  #line 3811 
  if (retcode != 0) {
    #line 3812 
    cif___ldv_spin_lock_lock_of_fe_priv(& np->lock);
    #line 3813 
    if (np->in_shutdown == 0) 
                              #line 3814 
                              cif_mod_timer(& np->oom_kick,jiffies + 13UL);
    #line 3815 
    cif_spin_unlock_irqrestore_lock_of_fe_priv(& np->lock,flags);
  }
  #line 3818 
  nv_change_interrupt_mode(dev,tx_work + rx_work);
  #line 3820 
  if ((long)((np->events & 64U) != 0U) != 0L) {
    #line 3821 
    cif___ldv_spin_lock_lock_of_fe_priv(& np->lock);
    #line 3822 
    nv_link_irq(dev);
    #line 3823 
    cif_spin_unlock_irqrestore_lock_of_fe_priv(& np->lock,flags);
  }
  #line 3825 
  if ((long)(np->need_linktimer != 0) != 0L) {
    #line 3825 
    int tmp_7;
    #line 3825 
    int tmp_6;
    {
      #line 3825 
      unsigned long __dummy;
      #line 3825 
      unsigned long __dummy2;
      }
    #line 3825 
    if ((long)(1 != 0) != 0L) {
      {
        #line 3825 
        unsigned long __dummy_0;
        #line 3825 
        unsigned long __dummy2_0;
        }
      #line 3825 
      if ((long)(1 != 0) != 0L) 
                                #line 3825 
                                tmp_6 = 1; else 
                                                #line 3825 
                                                tmp_6 = 0;
    }
    else 
         #line 3825 
         tmp_6 = 0;
    #line 3825 
    if (tmp_6 != 0) 
      #line 3825 
      if ((long)((long)(np->link_timeout - jiffies) < 0L) != 0L) 
                                                                 #line 3825 
                                                                 tmp_7 = 1; else 
                                                                    #line 3825 
                                                                    tmp_7 = 0;
    else 
         #line 3825 
         tmp_7 = 0;
    #line 3825 
    if (tmp_7 != 0) {
      #line 3826 
      cif___ldv_spin_lock_lock_of_fe_priv(& np->lock);
      #line 3827 
      nv_linkchange(dev);
      #line 3828 
      cif_spin_unlock_irqrestore_lock_of_fe_priv(& np->lock,flags);
      #line 3829 
      np->link_timeout = jiffies + 750UL;
    }
  }
  #line 3831 
  if ((long)((np->events & 33280U) != 0U) != 0L) {
    #line 3832 
    cif___ldv_spin_lock_lock_of_fe_priv(& np->lock);
    #line 3833 
    if (np->in_shutdown == 0) {
      #line 3834 
      np->nic_poll_irq = np->irqmask;
      #line 3835 
      np->recover_error = 1;
      #line 3836 
      cif_mod_timer(& np->nic_poll,jiffies + 3UL);
    }
    #line 3838 
    cif_spin_unlock_irqrestore_lock_of_fe_priv(& np->lock,flags);
    #line 3839 
    napi_complete(napi);
    #line 3840 
    return rx_work;
  }
  #line 3843 
  if (rx_work < budget) {
    #line 3846 
    napi_complete_done(napi,rx_work);
    #line 3848 
    writel(np->irqmask,(void *)(base + 4U));
  }
  #line 3850 
  return rx_work;
}

#line 3853  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
static irqreturn_t nv_nic_irq_rx(int foo, void *data)
{
  #line 3858 
  u32 events;
  #line 3859 
  int i;
  #line 3860 
  unsigned long flags;
  #line 3855 
  struct net_device *dev = (struct net_device *)data;
  #line 3856 
  struct fe_priv *np = netdev_priv(dev);
  #line 3857 
  u8 *base = get_hwbase(dev);
  #line 3862 
  i = 0;
  #line 3862 
  while (1) {
    {
      #line 3863 
      events = readl((void *)(base + 1008U)) & 135U;
      #line 3864 
      writel(events,(void *)(base + 1008U));
      {
        #line 3865 
        bool branch;
        #line 3865 
        struct _ddebug __UNIQUE_ID_ddebug445 = {.modname = (char *)"forcedeth", .function = (char *)"nv_nic_irq_rx", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c", .format = (char *)"rx irq events: %08x\n", .lineno = (unsigned int)3865U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 3865 
        branch = arch_static_branch(& __UNIQUE_ID_ddebug445.key.dd_key_false.key,(_Bool)0);
        #line 3865 
        if ((long)((long)((int)branch != 0)) != 0L) 
                                                    #line 3865 
                                                    __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug445,dev,(char *)"rx irq events: %08x\n",events);
      }
      #line 3866 
      if ((np->irqmask & events) == 0U) 
                                        #line 3867 
                                        break;
      #line 3869 
      if (nv_rx_process_optimized(dev,64) != 0) {
        #line 3870 
        if ((long)(nv_alloc_rx_optimized(dev) != 0) != 0L) {
          #line 3871 
          cif___ldv_spin_lock_lock_of_fe_priv(& np->lock);
          #line 3872 
          if (np->in_shutdown == 0) 
                                    #line 3873 
                                    cif_mod_timer(& np->oom_kick,jiffies + 13UL);
          #line 3874 
          cif_spin_unlock_irqrestore_lock_of_fe_priv(& np->lock,flags);
        }
      }
      #line 3878 
      if ((long)(i > max_interrupt_work) != 0L) {
        #line 3879 
        cif___ldv_spin_lock_lock_of_fe_priv(& np->lock);
        #line 3881 
        writel(135U,(void *)(base + 4U));
        #line 3882 
        pci_push(base);
        #line 3884 
        if (np->in_shutdown == 0) {
          #line 3885 
          np->nic_poll_irq |= 135U;
          #line 3886 
          cif_mod_timer(& np->nic_poll,jiffies + 3UL);
        }
        #line 3888 
        cif_spin_unlock_irqrestore_lock_of_fe_priv(& np->lock,flags);
        {
          #line 3889 
          bool branch_0;
          #line 3889 
          struct _ddebug __UNIQUE_ID_ddebug446 = {.modname = (char *)"forcedeth", .function = (char *)"nv_nic_irq_rx", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c", .format = (char *)"%s: too many iterations (%d)\n", .lineno = (unsigned int)3889U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
          #line 3889 
          branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug446.key.dd_key_false.key,(_Bool)0);
          #line 3889 
          if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                        #line 3889 
                                                        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug446,dev,(char *)"%s: too many iterations (%d)\n",(char *)"nv_nic_irq_rx",i);
        }
        #line 3891 
        break;
      }
    }
    #line 3862 
    i ++;
  }
  #line 3895 
  return (enum irqreturn)(i != 0);
}

#line 3898  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
static irqreturn_t nv_nic_irq_other(int foo, void *data)
{
  #line 3903 
  u32 events;
  #line 3904 
  int i;
  #line 3905 
  unsigned long flags;
  #line 3900 
  struct net_device *dev = (struct net_device *)data;
  #line 3901 
  struct fe_priv *np = netdev_priv(dev);
  #line 3902 
  u8 *base = get_hwbase(dev);
  #line 3907 
  i = 0;
  #line 3907 
  while (1) {
    {
      #line 3908 
      events = readl((void *)(base + 1008U)) & 33376U;
      #line 3909 
      writel(events,(void *)(base + 1008U));
      {
        #line 3910 
        bool branch;
        #line 3910 
        struct _ddebug __UNIQUE_ID_ddebug447 = {.modname = (char *)"forcedeth", .function = (char *)"nv_nic_irq_other", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c", .format = (char *)"irq events: %08x\n", .lineno = (unsigned int)3910U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 3910 
        branch = arch_static_branch(& __UNIQUE_ID_ddebug447.key.dd_key_false.key,(_Bool)0);
        #line 3910 
        if ((long)((long)((int)branch != 0)) != 0L) 
                                                    #line 3910 
                                                    __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug447,dev,(char *)"irq events: %08x\n",events);
      }
      #line 3911 
      if ((np->irqmask & events) == 0U) 
                                        #line 3912 
                                        break;
      #line 3915 
      cif___ldv_spin_lock_lock_of_fe_priv(& np->lock);
      #line 3916 
      nv_tx_done_optimized(dev,64);
      #line 3917 
      cif_spin_unlock_irqrestore_lock_of_fe_priv(& np->lock,flags);
      #line 3919 
      if ((events & 64U) != 0U) {
        #line 3920 
        cif___ldv_spin_lock_lock_of_fe_priv(& np->lock);
        #line 3921 
        nv_link_irq(dev);
        #line 3922 
        cif_spin_unlock_irqrestore_lock_of_fe_priv(& np->lock,flags);
      }
      {
        #line 3924 
        unsigned long __dummy;
        #line 3924 
        unsigned long __dummy2;
        }
      #line 3924 
      if (1 != 0) {
        {
          #line 3924 
          unsigned long __dummy_0;
          #line 3924 
          unsigned long __dummy2_0;
          }
        #line 3924 
        if (1 != 0) 
          #line 3924 
          if ((long)(np->link_timeout - jiffies) < 0L) 
            #line 3924 
            if (np->need_linktimer != 0) {
              #line 3925 
              cif___ldv_spin_lock_lock_of_fe_priv(& np->lock);
              #line 3926 
              nv_linkchange(dev);
              #line 3927 
              cif_spin_unlock_irqrestore_lock_of_fe_priv(& np->lock,flags);
              #line 3928 
              np->link_timeout = jiffies + 750UL;
            }
      }
      #line 3930 
      if ((events & 33280U) != 0U) {
        #line 3931 
        cif___ldv_spin_lock_lock_of_fe_priv(& np->lock);
        #line 3933 
        writel(33376U,(void *)(base + 4U));
        #line 3934 
        pci_push(base);
        #line 3936 
        if (np->in_shutdown == 0) {
          #line 3937 
          np->nic_poll_irq |= 33376U;
          #line 3938 
          np->recover_error = 1;
          #line 3939 
          cif_mod_timer(& np->nic_poll,jiffies + 3UL);
        }
        #line 3941 
        cif_spin_unlock_irqrestore_lock_of_fe_priv(& np->lock,flags);
        #line 3942 
        break;
      }
      #line 3944 
      if ((long)(i > max_interrupt_work) != 0L) {
        #line 3945 
        cif___ldv_spin_lock_lock_of_fe_priv(& np->lock);
        #line 3947 
        writel(33376U,(void *)(base + 4U));
        #line 3948 
        pci_push(base);
        #line 3950 
        if (np->in_shutdown == 0) {
          #line 3951 
          np->nic_poll_irq |= 33376U;
          #line 3952 
          cif_mod_timer(& np->nic_poll,jiffies + 3UL);
        }
        #line 3954 
        cif_spin_unlock_irqrestore_lock_of_fe_priv(& np->lock,flags);
        {
          #line 3955 
          bool branch_0;
          #line 3955 
          struct _ddebug __UNIQUE_ID_ddebug448 = {.modname = (char *)"forcedeth", .function = (char *)"nv_nic_irq_other", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c", .format = (char *)"%s: too many iterations (%d)\n", .lineno = (unsigned int)3955U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
          #line 3955 
          branch_0 = arch_static_branch(& __UNIQUE_ID_ddebug448.key.dd_key_false.key,(_Bool)0);
          #line 3955 
          if ((long)((long)((int)branch_0 != 0)) != 0L) 
                                                        #line 3955 
                                                        __dynamic_netdev_dbg(& __UNIQUE_ID_ddebug448,dev,(char *)"%s: too many iterations (%d)\n",(char *)"nv_nic_irq_other",i);
        }
        #line 3957 
        break;
      }
    }
    #line 3907 
    i ++;
  }
  #line 3962 
  return (enum irqreturn)(i != 0);
}

#line 3965  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
static irqreturn_t nv_nic_irq_test(int foo, void *data)
{
  #line 3970 
  u32 events;
  #line 3967 
  struct net_device *dev = (struct net_device *)data;
  #line 3968 
  struct fe_priv *np = netdev_priv(dev);
  #line 3969 
  u8 *base = get_hwbase(dev);
  #line 3972 
  if ((np->msi_flags & 128U) == 0U) {
    #line 3973 
    events = readl((void *)base) & 33791U;
    #line 3974 
    writel(events & 32U,(void *)base);
  }
  else {
    #line 3976 
    events = readl((void *)(base + 1008U)) & 33791U;
    #line 3977 
    writel(events & 32U,(void *)(base + 1008U));
  }
  #line 3979 
  pci_push(base);
  #line 3980 
  if ((events & 32U) == 0U) 
                            #line 3981 
                            return IRQ_NONE;
  #line 3983 
  nv_msi_workaround(np);
  #line 3985 
  cif_spin_lock_lock_of_fe_priv(& np->lock);
  #line 3986 
  np->intr_test = 1;
  #line 3987 
  cif_spin_unlock_lock_of_fe_priv(& np->lock);
  #line 3989 
  return IRQ_HANDLED;
}

#line 3992  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
static void set_msix_vector_map(struct net_device *dev, u32 vector, u32 irqmask)
{
  #line 3995 
  int i;
  #line 3994 
  u8 *base = get_hwbase(dev);
  #line 3996 
  u32 msixmap = 0U;
  #line 4002 
  i = 0;
  #line 4002 
  while (i <= 7) {
    #line 4003 
    if (((irqmask >> i) & 1U) != 0U) 
                                     #line 4004 
                                     msixmap = (vector << (i << 2)) | msixmap;
    #line 4002 
    i ++;
  }
  #line 4006 
  ;
  #line 4006 
  ;
  #line 4006 
  writel(readl((void *)(base + 992U)) | msixmap,(void *)(base + 992U));
  #line 4008 
  msixmap = 0U;
  #line 4009 
  i = 0;
  #line 4009 
  while (i <= 7) {
    #line 4010 
    if (((irqmask >> (i + 8)) & 1U) != 0U) 
                                           #line 4011 
                                           msixmap = (vector << (i << 2)) | msixmap;
    #line 4009 
    i ++;
  }
  #line 4013 
  ;
  #line 4013 
  ;
  #line 4013 
  writel(readl((void *)(base + 996U)) | msixmap,(void *)(base + 996U));
  #line 4014 
  return;
}

#line 4016  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
static int nv_request_irq(struct net_device *dev, int intr_test)
{
  #line 4020 
  int ret;
  #line 4021 
  int i;
  #line 4022 
  irqreturn_t (*handler)(int , void *);
  #line 4018 
  struct fe_priv *np = get_nvpriv(dev);
  #line 4019 
  u8 *base = get_hwbase(dev);
  #line 4024 
  if (intr_test != 0) 
                      #line 4025 
                      handler = & nv_nic_irq_test;
  else {
    #line 4027 
    if ((int)nv_optimized(np) != 0) 
                                    #line 4028 
                                    handler = & nv_nic_irq_optimized; else 
                                                                    #line 4030 
                                                                    handler = & nv_nic_irq;
  }
  #line 4033 
  if ((np->msi_flags & 32U) != 0U) {
    #line 4034 
    i = 0;
    #line 4034 
    while ((np->msi_flags & 15U) > (unsigned int)i) {
      #line 4035 
      np->msi_x_entry[i].entry = (unsigned short)i;
      #line 4034 
      i ++;
    }
    #line 4036 
    ret = pci_enable_msix_range(np->pci_dev,(struct msix_entry *)(& np->msi_x_entry),(int)np->msi_flags & 15,(int)np->msi_flags & 15);
    #line 4040 
    if (ret > 0) {
      #line 4041 
      np->msi_flags |= 128U;
      #line 4042 
      if (optimization_mode == 0 && intr_test == 0) {
        #line 4044 
        sprintf((char *)(& np->name_rx),(char *)"%s-rx",(char *)(& dev->name));
        #line 4045 
        ret = cif_request_irq(np->msi_x_entry[0].vector,& nv_nic_irq_rx,128UL,(char *)(& np->name_rx),(void *)dev);
        #line 4047 
        if (ret != 0) {
          #line 4048 
          netdev_info(dev,(char *)"request_irq failed for rx %d\n",ret);
          #line 4051 
          pci_disable_msix(np->pci_dev);
          #line 4052 
          np->msi_flags &= 4294967167U;
          #line 4053 
          goto out_err;
        }
        #line 4056 
        sprintf((char *)(& np->name_tx),(char *)"%s-tx",(char *)(& dev->name));
        #line 4057 
        ret = cif_request_irq(np->msi_x_entry[1].vector,& nv_nic_irq_tx,128UL,(char *)(& np->name_tx),(void *)dev);
        #line 4059 
        if (ret != 0) {
          #line 4060 
          netdev_info(dev,(char *)"request_irq failed for tx %d\n",ret);
          #line 4063 
          pci_disable_msix(np->pci_dev);
          #line 4064 
          np->msi_flags &= 4294967167U;
          #line 4065 
          goto out_free_rx;
        }
        #line 4068 
        sprintf((char *)(& np->name_other),(char *)"%s-other",(char *)(& dev->name));
        #line 4069 
        ret = cif_request_irq(np->msi_x_entry[2].vector,& nv_nic_irq_other,128UL,(char *)(& np->name_other),(void *)dev);
        #line 4071 
        if (ret != 0) {
          #line 4072 
          netdev_info(dev,(char *)"request_irq failed for link %d\n",ret);
          #line 4075 
          pci_disable_msix(np->pci_dev);
          #line 4076 
          np->msi_flags &= 4294967167U;
          #line 4077 
          goto out_free_tx;
        }
        #line 4080 
        writel(0U,(void *)(base + 992U));
        #line 4081 
        writel(0U,(void *)(base + 996U));
        #line 4082 
        set_msix_vector_map(dev,0U,135U);
        #line 4083 
        set_msix_vector_map(dev,1U,280U);
        #line 4084 
        set_msix_vector_map(dev,2U,33376U);
      }
      else {
        #line 4087 
        ret = cif_request_irq(np->msi_x_entry[0].vector,handler,128UL,(char *)(& dev->name),(void *)dev);
        #line 4089 
        if (ret != 0) {
          #line 4090 
          netdev_info(dev,(char *)"request_irq failed %d\n",ret);
          #line 4093 
          pci_disable_msix(np->pci_dev);
          #line 4094 
          np->msi_flags &= 4294967167U;
          #line 4095 
          goto out_err;
        }
        #line 4099 
        writel(0U,(void *)(base + 992U));
        #line 4100 
        writel(0U,(void *)(base + 996U));
      }
      #line 4102 
      netdev_info(dev,(char *)"MSI-X enabled\n");
      #line 4103 
      return 0;
    }
  }
  #line 4106 
  if ((np->msi_flags & 16U) != 0U) {
    #line 4107 
    ret = pci_enable_msi(np->pci_dev);
    #line 4108 
    if (ret == 0) {
      #line 4109 
      np->msi_flags |= 64U;
      #line 4110 
      ret = cif_request_irq((np->pci_dev)->irq,handler,128UL,(char *)(& dev->name),(void *)dev);
      #line 4111 
      if (ret != 0) {
        #line 4112 
        netdev_info(dev,(char *)"request_irq failed %d\n",ret);
        #line 4114 
        pci_disable_msi(np->pci_dev);
        #line 4115 
        np->msi_flags &= 4294967231U;
        #line 4116 
        goto out_err;
      }
      #line 4120 
      writel(0U,(void *)(base + 32U));
      #line 4121 
      writel(0U,(void *)(base + 36U));
      #line 4123 
      writel(1U,(void *)(base + 48U));
      #line 4124 
      netdev_info(dev,(char *)"MSI enabled\n");
      #line 4125 
      return 0;
    }
  }
  #line 4129 
  if (cif_request_irq((np->pci_dev)->irq,handler,128UL,
                        (char *)(& dev->name),(void *)dev) != 0) 
    #line 4130 
    goto out_err;
  #line 4132 
  return 0;
  #line 4133 
  out_free_tx: 
               #line 4133 
  ;
  #line 4134 
  cif_free_irq(np->msi_x_entry[1].vector,(void *)dev);
  #line 4135 
  out_free_rx: 
               #line 4135 
  ;
  #line 4136 
  cif_free_irq(np->msi_x_entry[0].vector,(void *)dev);
  #line 4137 
  out_err: 
           #line 4137 
  ;
  #line 4138 
  return 1;
}

#line 4141  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
static void nv_free_irq(struct net_device *dev)
{
  #line 4144 
  int i;
  #line 4143 
  struct fe_priv *np = get_nvpriv(dev);
  #line 4146 
  if ((np->msi_flags & 128U) != 0U) {
    #line 4147 
    i = 0;
    #line 4147 
    while ((np->msi_flags & 15U) > (unsigned int)i) {
      #line 4148 
      cif_free_irq(np->msi_x_entry[i].vector,(void *)dev);
      #line 4147 
      i ++;
    }
    #line 4149 
    pci_disable_msix(np->pci_dev);
    #line 4150 
    np->msi_flags &= 4294967167U;
  }
  else {
    #line 4152 
    cif_free_irq((np->pci_dev)->irq,(void *)dev);
    #line 4153 
    if ((np->msi_flags & 64U) != 0U) {
      #line 4154 
      pci_disable_msi(np->pci_dev);
      #line 4155 
      np->msi_flags &= 4294967231U;
    }
  }
  #line 4158 
  return;
}

#line 4160  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
static void nv_do_nic_poll(struct timer_list *t)
{
  #line 4162 
  void *__mptr;
  #line 4166 
  unsigned long flags;
  #line 4162 
  __mptr = (void *)t;
  #line 4162 
  struct fe_priv *np = ((struct fe_priv *)(__mptr + 18446744073709550512U));
  #line 4163 
  struct net_device *dev = np->dev;
  #line 4164 
  u8 *base = get_hwbase(dev);
  #line 4165 
  u32 mask = 0U;
  #line 4167 
  unsigned int irq = 0U;
  #line 4175 
  if (using_multi_irqs(dev) == 0) {
    #line 4176 
    if ((np->msi_flags & 128U) != 0U) 
                                      #line 4177 
                                      irq = np->msi_x_entry[0].vector; else 
                                                                    #line 4179 
                                                                    irq = (np->pci_dev)->irq;
    #line 4180 
    mask = np->irqmask;
  }
  else {
    #line 4182 
    if ((np->nic_poll_irq & 135U) != 0U) {
      #line 4183 
      irq = np->msi_x_entry[0].vector;
      #line 4184 
      mask |= 135U;
    }
    #line 4186 
    if ((np->nic_poll_irq & 280U) != 0U) {
      #line 4187 
      irq = np->msi_x_entry[1].vector;
      #line 4188 
      mask |= 280U;
    }
    #line 4190 
    if ((np->nic_poll_irq & 33376U) != 0U) {
      #line 4191 
      irq = np->msi_x_entry[2].vector;
      #line 4192 
      mask |= 33376U;
    }
  }
  #line 4196 
  disable_irq_nosync_lockdep_irqsave(irq,& flags);
  #line 4197 
  synchronize_irq(irq);
  #line 4199 
  if (np->recover_error != 0) {
    #line 4200 
    np->recover_error = 0;
    #line 4201 
    netdev_info(dev,(char *)"MAC in recoverable error state\n");
    #line 4202 
    if ((int)netif_running(dev) != 0) {
      #line 4203 
      netif_tx_lock_bh(dev);
      #line 4204 
      netif_addr_lock(dev);
      #line 4205 
      cif_spin_lock_lock_of_fe_priv(& np->lock);
      #line 4207 
      nv_stop_rxtx(dev);
      #line 4208 
      if ((np->driver_data & 256U) != 0U) 
                                          #line 4209 
                                          nv_mac_reset(dev);
      #line 4210 
      nv_txrx_reset(dev);
      #line 4212 
      nv_drain_rxtx(dev);
      #line 4214 
      set_bufsize(dev);
      #line 4215 
      if (nv_init_ring(dev) != 0) 
        #line 4216 
        if (np->in_shutdown == 0) 
                                  #line 4217 
                                  cif_mod_timer(& np->oom_kick,jiffies + 13UL);
      #line 4220 
      writel(np->rx_buf_sz,(void *)(base + 144U));
      #line 4221 
      setup_hw_rings(dev,3);
      #line 4222 
      writel((unsigned int)(((np->rx_ring_size + -1) << 16) + (np->tx_ring_size + -1)),(void *)(base + 264U));
      #line 4224 
      pci_push(base);
      #line 4225 
      ;
      #line 4225 
      writel(np->txrxctl_bits | 1U,(void *)(get_hwbase(dev) + 324U));
      #line 4226 
      pci_push(base);
      #line 4228 
      if ((np->msi_flags & 128U) == 0U) 
                                        #line 4229 
                                        writel(33791U,(void *)base); else 
                                                                    #line 4231 
                                                                    writel(33791U,(void *)(base + 1008U));
      #line 4234 
      nv_start_rxtx(dev);
      #line 4235 
      cif_spin_unlock_lock_of_fe_priv(& np->lock);
      #line 4236 
      netif_addr_unlock(dev);
      #line 4237 
      netif_tx_unlock_bh(dev);
    }
  }
  #line 4241 
  writel(mask,(void *)(base + 4U));
  #line 4242 
  pci_push(base);
  #line 4244 
  if (using_multi_irqs(dev) == 0) {
    #line 4245 
    np->nic_poll_irq = 0U;
    #line 4246 
    if ((int)nv_optimized(np) != 0) 
                                    #line 4247 
                                    nv_nic_irq_optimized(0,(void *)dev); else 
                                                                    #line 4249 
                                                                    nv_nic_irq(0,(void *)dev);
  }
  else {
    #line 4251 
    if ((np->nic_poll_irq & 135U) != 0U) {
      #line 4252 
      np->nic_poll_irq &= 4294967160U;
      #line 4253 
      nv_nic_irq_rx(0,(void *)dev);
    }
    #line 4255 
    if ((np->nic_poll_irq & 280U) != 0U) {
      #line 4256 
      np->nic_poll_irq &= 4294967015U;
      #line 4257 
      nv_nic_irq_tx(0,(void *)dev);
    }
    #line 4259 
    if ((np->nic_poll_irq & 33376U) != 0U) {
      #line 4260 
      np->nic_poll_irq &= 4294933919U;
      #line 4261 
      nv_nic_irq_other(0,(void *)dev);
    }
  }
  #line 4265 
  enable_irq_lockdep_irqrestore(irq,& flags);
  #line 4266 
  return;
}

#line 4269  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
static void nv_poll_controller(struct net_device *dev)
{
  #line 4271 
  struct fe_priv *np = netdev_priv(dev);
  #line 4273 
  nv_do_nic_poll(& np->nic_poll);
  #line 4274 
  return;
}

#line 4277  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
static void nv_do_stats_poll(struct timer_list *t)
{
  #line 4281 
  void *__mptr;
  #line 4281 
  __mptr = (void *)t;
  #line 4281 
  struct fe_priv *np = ((struct fe_priv *)(__mptr + 18446744073709550424U));
  #line 4282 
  struct net_device *dev = np->dev;
  #line 4286 
  if (cif_spin_trylock_hwstats_lock_of_fe_priv(& np->hwstats_lock) != 0) {
    #line 4287 
    nv_update_stats(dev);
    #line 4288 
    cif_spin_unlock_hwstats_lock_of_fe_priv(& np->hwstats_lock);
  }
  #line 4291 
  if (np->in_shutdown == 0) {
    #line 4292 
    ;
    #line 4292 
    cif_mod_timer(& np->stats_poll,round_jiffies(jiffies + 2500UL));
  }
  #line 4294 
  return;
}

#line 4296  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
static void nv_get_drvinfo(struct net_device *dev, struct ethtool_drvinfo *info)
{
  #line 4298 
  struct fe_priv *np = netdev_priv(dev);
  #line 4299 
  strlcpy((char *)(& info->driver),(char *)"forcedeth",32UL);
  #line 4300 
  strlcpy((char *)(& info->version),(char *)"0.64",32UL);
  #line 4301 
  ;
  #line 4301 
  strlcpy((char *)(& info->bus_info),pci_name(np->pci_dev),32UL);
  #line 4302 
  return;
}

#line 4304  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
static void nv_get_wol(struct net_device *dev, struct ethtool_wolinfo *wolinfo)
{
  #line 4306 
  struct fe_priv *np = netdev_priv(dev);
  #line 4307 
  wolinfo->supported = 32U;
  #line 4309 
  cif_spin_lock_irq_lock_of_fe_priv(& np->lock);
  #line 4310 
  if (np->wolenabled != 0) 
                           #line 4311 
                           wolinfo->wolopts = 32U;
  #line 4312 
  cif_spin_unlock_irq_lock_of_fe_priv(& np->lock);
  #line 4313 
  return;
}

#line 4315  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
static int nv_set_wol(struct net_device *dev, struct ethtool_wolinfo *wolinfo)
{
  #line 4317 
  struct fe_priv *np = netdev_priv(dev);
  #line 4318 
  u8 *base = get_hwbase(dev);
  #line 4319 
  u32 flags = 0U;
  #line 4321 
  if (wolinfo->wolopts == 0U) 
                              #line 4322 
                              np->wolenabled = 0;
  else 
    #line 4323 
    if ((wolinfo->wolopts & 32U) != 0U) {
      #line 4324 
      np->wolenabled = 1;
      #line 4325 
      flags = 4369U;
    }
  #line 4327 
  if ((int)netif_running(dev) != 0) {
    #line 4328 
    cif_spin_lock_irq_lock_of_fe_priv(& np->lock);
    #line 4329 
    writel(flags,(void *)(base + 512U));
    #line 4330 
    cif_spin_unlock_irq_lock_of_fe_priv(& np->lock);
  }
  #line 4332 
  device_set_wakeup_enable(& (np->pci_dev)->dev,(_Bool)(np->wolenabled != 0));
  #line 4333 
  return 0;
}

#line 4336  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
static int nv_get_link_ksettings(struct net_device *dev, struct ethtool_link_ksettings *cmd)
{
  #line 4340 
  u32 speed;
  #line 4340 
  u32 supported;
  #line 4340 
  u32 advertising;
  #line 4341 
  int adv;
  #line 4339 
  struct fe_priv *np = netdev_priv(dev);
  #line 4343 
  cif_spin_lock_irq_lock_of_fe_priv(& np->lock);
  #line 4344 
  cmd->base.port = (unsigned char)2U;
  #line 4345 
  if (! netif_running(dev)) {
    #line 4348 
    if (nv_update_linkspeed(dev) != 0) 
                                       #line 4349 
                                       netif_carrier_on(dev); else 
                                                                   #line 4351 
                                                                   netif_carrier_off(dev);
  }
  #line 4355 
  if ((int)netif_carrier_ok(dev) != 0) {
    #line 4356 
    switch (np->linkspeed & 4095U) {
      #line 4357 
      case (unsigned int)1000: 
                               #line 4357 
      ;
      #line 4358 
      speed = 10U;
      #line 4359 
      break;
      #line 4360 
      case (unsigned int)100: 
                              #line 4360 
      ;
      #line 4361 
      speed = 100U;
      #line 4362 
      break;
      #line 4363 
      case (unsigned int)50: 
                             #line 4363 
      ;
      #line 4364 
      speed = 1000U;
      #line 4365 
      break;
      #line 4366 
      default: 
               #line 4366 
      ;
      #line 4367 
      speed = 4294967295U;
      #line 4368 
      break;
    }
    #line 4370 
    cmd->base.duplex = (unsigned char)0U;
    #line 4371 
    if (np->duplex != 0) 
                         #line 4372 
                         cmd->base.duplex = (unsigned char)1U;
  }
  else {
    #line 4374 
    speed = 4294967295U;
    #line 4375 
    cmd->base.duplex = (unsigned char)255U;
  }
  #line 4377 
  cmd->base.speed = speed;
  #line 4378 
  cmd->base.autoneg = (unsigned char)np->autoneg;
  #line 4380 
  advertising = 512U;
  #line 4381 
  if (np->autoneg != 0) {
    #line 4382 
    advertising |= 64U;
    #line 4383 
    adv = mii_rw(dev,np->phyaddr,4,-1);
    #line 4384 
    if ((adv & 32) != 0) 
                         #line 4385 
                         advertising |= 1U;
    #line 4386 
    if ((adv & 64) != 0) 
                         #line 4387 
                         advertising |= 2U;
    #line 4388 
    if ((adv & 128) != 0) 
                          #line 4389 
                          advertising |= 4U;
    #line 4390 
    if ((adv & 256) != 0) 
                          #line 4391 
                          advertising |= 8U;
    #line 4392 
    if ((unsigned int)np->gigabit == 256U) {
      #line 4393 
      adv = mii_rw(dev,np->phyaddr,9,-1);
      #line 4394 
      if ((adv & 512) != 0) 
                            #line 4395 
                            advertising |= 32U;
    }
  }
  #line 4398 
  supported = 591U;
  #line 4402 
  if ((unsigned int)np->gigabit == 256U) 
                                         #line 4403 
                                         supported |= 32U;
  #line 4405 
  cmd->base.phy_address = (unsigned char)np->phyaddr;
  #line 4407 
  ethtool_convert_legacy_u32_to_link_mode((unsigned long *)(& cmd->link_modes.supported),supported);
  #line 4409 
  ethtool_convert_legacy_u32_to_link_mode((unsigned long *)(& cmd->link_modes.advertising),advertising);
  #line 4413 
  cif_spin_unlock_irq_lock_of_fe_priv(& np->lock);
  #line 4414 
  return 0;
}

#line 4417  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
static int nv_set_link_ksettings(struct net_device *dev, struct ethtool_link_ksettings *cmd)
{
  #line 4422 
  u32 advertising;
  #line 4420 
  struct fe_priv *np = netdev_priv(dev);
  #line 4421 
  u32 speed = cmd->base.speed;
  #line 4424 
  ethtool_convert_link_mode_to_legacy_u32(& advertising,(unsigned long *)(& cmd->link_modes.advertising));
  #line 4427 
  if ((unsigned int)cmd->base.port != 2U) 
                                          #line 4428 
                                          return -22;
  #line 4429 
  if ((int)cmd->base.phy_address != np->phyaddr) 
                                                 #line 4432 
                                                 return -22;
  #line 4434 
  if ((unsigned int)cmd->base.autoneg == 1U) {
    #line 4435 
    u32 mask;
    #line 4437 
    mask = 15U;
    #line 4439 
    if ((unsigned int)np->gigabit == 256U) 
                                           #line 4440 
                                           mask |= 32U;
    #line 4442 
    if ((advertising & mask) == 0U) 
                                    #line 4443 
                                    return -22;
  }
  else 
    #line 4445 
    if ((unsigned int)cmd->base.autoneg == 0U) {
      #line 4449 
      if (speed != 10U && speed != 100U) 
                                         #line 4450 
                                         return -22;
      #line 4451 
      if ((unsigned int)cmd->base.duplex > 1U) 
                                               #line 4453 
                                               return -22;
    }
    else 
         #line 4455 
         return -22;
  #line 4458 
  netif_carrier_off(dev);
  #line 4459 
  if ((int)netif_running(dev) != 0) {
    #line 4460 
    unsigned long flags;
    #line 4462 
    nv_disable_irq(dev);
    #line 4463 
    netif_tx_lock_bh(dev);
    #line 4464 
    netif_addr_lock(dev);
    #line 4466 
    cif___ldv_spin_lock_lock_of_fe_priv(& np->lock);
    #line 4476 
    nv_stop_rxtx(dev);
    #line 4477 
    cif_spin_unlock_irqrestore_lock_of_fe_priv(& np->lock,flags);
    #line 4478 
    netif_addr_unlock(dev);
    #line 4479 
    netif_tx_unlock_bh(dev);
  }
  #line 4482 
  if ((unsigned int)cmd->base.autoneg == 1U) {
    #line 4483 
    int adv;
    #line 4483 
    int bmcr;
    #line 4485 
    np->autoneg = 1;
    #line 4488 
    adv = mii_rw(dev,np->phyaddr,4,-1);
    #line 4489 
    adv &= -4065;
    #line 4490 
    if (((unsigned long)advertising & 1UL) != 0UL) 
                                                   #line 4491 
                                                   adv |= 32;
    #line 4492 
    if (((unsigned long)advertising & 2UL) != 0UL) 
                                                   #line 4493 
                                                   adv |= 64;
    #line 4494 
    if (((unsigned long)advertising & 4UL) != 0UL) 
                                                   #line 4495 
                                                   adv |= 128;
    #line 4496 
    if (((unsigned long)advertising & 8UL) != 0UL) 
                                                   #line 4497 
                                                   adv |= 256;
    #line 4498 
    if ((np->pause_flags & 16U) != 0U) 
                                       #line 4499 
                                       adv |= 3072;
    #line 4500 
    if ((np->pause_flags & 32U) != 0U) 
                                       #line 4501 
                                       adv |= 2048;
    #line 4502 
    mii_rw(dev,np->phyaddr,4,adv);
    #line 4504 
    if ((unsigned int)np->gigabit == 256U) {
      #line 4505 
      adv = mii_rw(dev,np->phyaddr,9,-1);
      #line 4506 
      adv &= -513;
      #line 4507 
      if (((unsigned long)advertising & 32UL) != 0UL) 
                                                      #line 4508 
                                                      adv |= 512;
      #line 4509 
      mii_rw(dev,np->phyaddr,9,adv);
    }
    #line 4512 
    if ((int)netif_running(dev) != 0) 
                                      #line 4513 
                                      netdev_info(dev,(char *)"link down\n");
    #line 4514 
    bmcr = mii_rw(dev,np->phyaddr,0,-1);
    #line 4515 
    if (np->phy_model == 544U) {
      #line 4516 
      bmcr |= 4096;
      #line 4519 
      if (phy_reset(dev,(unsigned int)bmcr) != 0) {
        #line 4520 
        netdev_info(dev,(char *)"phy reset failed\n");
        #line 4521 
        return -22;
      }
    }
    else {
      #line 4524 
      bmcr |= 4608;
      #line 4525 
      mii_rw(dev,np->phyaddr,0,bmcr);
    }
  }
  else {
    #line 4528 
    int adv_0;
    #line 4528 
    int bmcr_0;
    #line 4530 
    np->autoneg = 0;
    #line 4532 
    adv_0 = mii_rw(dev,np->phyaddr,4,-1);
    #line 4533 
    adv_0 &= -4065;
    #line 4534 
    if (speed == 10U && (unsigned int)cmd->base.duplex == 0U) 
                                                              #line 4535 
                                                              adv_0 |= 32;
    #line 4536 
    if (speed == 10U && (unsigned int)cmd->base.duplex == 1U) 
                                                              #line 4537 
                                                              adv_0 |= 64;
    #line 4538 
    if (speed == 100U && (unsigned int)cmd->base.duplex == 0U) 
                                                               #line 4539 
                                                               adv_0 |= 128;
    #line 4540 
    if (speed == 100U && (unsigned int)cmd->base.duplex == 1U) 
                                                               #line 4541 
                                                               adv_0 |= 256;
    #line 4542 
    np->pause_flags &= 4294967219U;
    #line 4543 
    if ((np->pause_flags & 16U) != 0U) {
      #line 4544 
      adv_0 |= 3072;
      #line 4545 
      np->pause_flags |= 4U;
    }
    #line 4547 
    if ((np->pause_flags & 32U) != 0U) {
      #line 4548 
      adv_0 |= 2048;
      #line 4549 
      np->pause_flags |= 8U;
    }
    #line 4551 
    mii_rw(dev,np->phyaddr,4,adv_0);
    #line 4552 
    np->fixed_mode = adv_0;
    #line 4554 
    if ((unsigned int)np->gigabit == 256U) {
      #line 4555 
      adv_0 = mii_rw(dev,np->phyaddr,9,-1);
      #line 4556 
      adv_0 &= -513;
      #line 4557 
      mii_rw(dev,np->phyaddr,9,adv_0);
    }
    #line 4560 
    bmcr_0 = mii_rw(dev,np->phyaddr,0,-1);
    #line 4561 
    bmcr_0 &= -12609;
    #line 4562 
    if ((np->fixed_mode & 320) != 0) 
                                     #line 4563 
                                     bmcr_0 |= 256;
    #line 4564 
    if ((np->fixed_mode & 384) != 0) 
                                     #line 4565 
                                     bmcr_0 |= 8192;
    #line 4566 
    if (np->phy_oui == 20547U) {
      #line 4568 
      if (phy_reset(dev,(unsigned int)bmcr_0) != 0) {
        #line 4569 
        netdev_info(dev,(char *)"phy reset failed\n");
        #line 4570 
        return -22;
      }
    }
    else {
      #line 4573 
      mii_rw(dev,np->phyaddr,0,bmcr_0);
      #line 4574 
      if ((int)netif_running(dev) != 0) {
        #line 4576 
        __const_udelay(42950UL);
        #line 4577 
        nv_linkchange(dev);
      }
    }
  }
  #line 4582 
  if ((int)netif_running(dev) != 0) {
    #line 4583 
    nv_start_rxtx(dev);
    #line 4584 
    nv_enable_irq(dev);
  }
  #line 4587 
  return 0;
}

#line 4592  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
static int nv_get_regs_len(struct net_device *dev)
{
  #line 4594 
  struct fe_priv *np = netdev_priv(dev);
  #line 4595 
  return (int)np->register_size;
}

#line 4598  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
static void nv_get_regs(struct net_device *dev, struct ethtool_regs *regs, void *buf)
{
  #line 4603 
  int i;
  #line 4600 
  struct fe_priv *np = netdev_priv(dev);
  #line 4601 
  u8 *base = get_hwbase(dev);
  #line 4602 
  u32 *rbuf = (u32 *)buf;
  #line 4605 
  regs->version = 1U;
  #line 4606 
  cif_spin_lock_irq_lock_of_fe_priv(& np->lock);
  #line 4607 
  i = 0;
  #line 4607 
  while ((unsigned long)i < (unsigned long)(np->register_size / 4U)) {
    #line 4608 
    *(rbuf + (unsigned long)i) = readl((void *)(base + (unsigned long)i * 4UL));
    #line 4607 
    i ++;
  }
  #line 4609 
  cif_spin_unlock_irq_lock_of_fe_priv(& np->lock);
  #line 4610 
  return;
}

#line 4612  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
static int nv_nway_reset(struct net_device *dev)
{
  #line 4615 
  int ret;
  #line 4614 
  struct fe_priv *np = netdev_priv(dev);
  #line 4617 
  if (np->autoneg != 0) {
    #line 4618 
    int bmcr;
    #line 4620 
    netif_carrier_off(dev);
    #line 4621 
    if ((int)netif_running(dev) != 0) {
      #line 4622 
      nv_disable_irq(dev);
      #line 4623 
      netif_tx_lock_bh(dev);
      #line 4624 
      netif_addr_lock(dev);
      #line 4625 
      cif_spin_lock_lock_of_fe_priv(& np->lock);
      #line 4627 
      nv_stop_rxtx(dev);
      #line 4628 
      cif_spin_unlock_lock_of_fe_priv(& np->lock);
      #line 4629 
      netif_addr_unlock(dev);
      #line 4630 
      netif_tx_unlock_bh(dev);
      #line 4631 
      netdev_info(dev,(char *)"link down\n");
    }
    #line 4634 
    bmcr = mii_rw(dev,np->phyaddr,0,-1);
    #line 4635 
    if (np->phy_model == 544U) {
      #line 4636 
      bmcr |= 4096;
      #line 4638 
      if (phy_reset(dev,(unsigned int)bmcr) != 0) {
        #line 4639 
        netdev_info(dev,(char *)"phy reset failed\n");
        #line 4640 
        return -22;
      }
    }
    else {
      #line 4643 
      bmcr |= 4608;
      #line 4644 
      mii_rw(dev,np->phyaddr,0,bmcr);
    }
    #line 4647 
    if ((int)netif_running(dev) != 0) {
      #line 4648 
      nv_start_rxtx(dev);
      #line 4649 
      nv_enable_irq(dev);
    }
    #line 4651 
    ret = 0;
  }
  else 
       #line 4653 
       ret = -22;
  #line 4656 
  return ret;
}

#line 4659  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
static void nv_get_ringparam(struct net_device *dev, struct ethtool_ringparam *ring)
{
  #line 4661 
  struct fe_priv *np = netdev_priv(dev);
  #line 4663 
  if (np->desc_ver == 1U) 
                          #line 4663 
                          ring->rx_max_pending = 1024U; else 
                                                             #line 4663 
                                                             ring->rx_max_pending = 16384U;
  #line 4664 
  if (np->desc_ver == 1U) 
                          #line 4664 
                          ring->tx_max_pending = 1024U; else 
                                                             #line 4664 
                                                             ring->tx_max_pending = 16384U;
  #line 4666 
  ring->rx_pending = (unsigned int)np->rx_ring_size;
  #line 4667 
  ring->tx_pending = (unsigned int)np->tx_ring_size;
  #line 4668 
  return;
}

#line 4670  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
static int nv_set_ringparam(struct net_device *dev, struct ethtool_ringparam *ring)
{
  #line 4674 
  u8 *rxtx_ring;
  #line 4674 
  u8 *rx_skbuff;
  #line 4674 
  u8 *tx_skbuff;
  #line 4675 
  dma_addr_t ring_addr;
  #line 4672 
  struct fe_priv *np = netdev_priv(dev);
  #line 4673 
  u8 *base = get_hwbase(dev);
  #line 4677 
  if (((((ring->rx_pending <= 127U || ring->tx_pending <= 63U) || ring->rx_mini_pending != 0U) || ring->rx_jumbo_pending != 0U) || np->desc_ver == 1U && (ring->rx_pending > 1024U || ring->tx_pending > 1024U)) || np->desc_ver != 1U && (ring->rx_pending > 16384U || ring->tx_pending > 16384U)) 
    #line 4687 
    return -22;
  #line 4691 
  if (nv_optimized(np)) 
                        #line 4698 
                        rxtx_ring = (u8 *)dma_alloc_coherent(& (np->pci_dev)->dev,(unsigned long)(ring->rx_pending + ring->tx_pending) * 16UL,& ring_addr,2592U); else 
                                                                    #line 4692 
                                                                    rxtx_ring = (u8 *)dma_alloc_coherent(& (np->pci_dev)->dev,(unsigned long)(ring->rx_pending + ring->tx_pending) * 8UL,& ring_addr,2592U);
  #line 4704 
  rx_skbuff = (u8 *)kmalloc_array((unsigned long)ring->rx_pending,40UL,3264U);
  #line 4706 
  tx_skbuff = (u8 *)kmalloc_array((unsigned long)ring->tx_pending,40UL,3264U);
  #line 4708 
  if ((rxtx_ring == (u8 *)0U || rx_skbuff == (u8 *)0U) || tx_skbuff == (u8 *)0U) {
    #line 4710 
    if (nv_optimized(np)) {
      #line 4718 
      if (rxtx_ring != (u8 *)0U) 
                                 #line 4719 
                                 dma_free_coherent(& (np->pci_dev)->dev,(unsigned long)(ring->rx_pending + ring->tx_pending) * 16UL,(void *)rxtx_ring,ring_addr);
    }
    else 
      #line 4711 
      if (rxtx_ring != (u8 *)0U) 
                                 #line 4712 
                                 dma_free_coherent(& (np->pci_dev)->dev,(unsigned long)(ring->rx_pending + ring->tx_pending) * 8UL,(void *)rxtx_ring,ring_addr);
    #line 4726 
    kfree((void *)rx_skbuff);
    #line 4727 
    kfree((void *)tx_skbuff);
    #line 4728 
    goto exit;
  }
  #line 4731 
  if ((int)netif_running(dev) != 0) {
    #line 4732 
    nv_disable_irq(dev);
    #line 4733 
    nv_napi_disable(dev);
    #line 4734 
    netif_tx_lock_bh(dev);
    #line 4735 
    netif_addr_lock(dev);
    #line 4736 
    cif_spin_lock_lock_of_fe_priv(& np->lock);
    #line 4738 
    nv_stop_rxtx(dev);
    #line 4739 
    nv_txrx_reset(dev);
    #line 4741 
    nv_drain_rxtx(dev);
    #line 4743 
    free_rings(dev);
  }
  #line 4747 
  np->rx_ring_size = (int)ring->rx_pending;
  #line 4748 
  np->tx_ring_size = (int)ring->tx_pending;
  #line 4750 
  if (nv_optimized(np)) {
    #line 4754 
    np->rx_ring.ex = (struct ring_desc_ex *)rxtx_ring;
    #line 4755 
    np->tx_ring.ex = np->rx_ring.ex + (unsigned long)np->rx_ring_size;
  }
  else {
    #line 4751 
    np->rx_ring.orig = (struct ring_desc *)rxtx_ring;
    #line 4752 
    np->tx_ring.orig = np->rx_ring.orig + (unsigned long)np->rx_ring_size;
  }
  #line 4757 
  np->rx_skb = (struct nv_skb_map *)rx_skbuff;
  #line 4758 
  np->tx_skb = (struct nv_skb_map *)tx_skbuff;
  #line 4759 
  np->ring_addr = ring_addr;
  #line 4761 
  memset((void *)np->rx_skb,0,(unsigned long)np->rx_ring_size * 40UL);
  #line 4762 
  memset((void *)np->tx_skb,0,(unsigned long)np->tx_ring_size * 40UL);
  #line 4764 
  if ((int)netif_running(dev) != 0) {
    #line 4766 
    set_bufsize(dev);
    #line 4767 
    if (nv_init_ring(dev) != 0) 
      #line 4768 
      if (np->in_shutdown == 0) 
                                #line 4769 
                                cif_mod_timer(& np->oom_kick,jiffies + 13UL);
    #line 4773 
    writel(np->rx_buf_sz,(void *)(base + 144U));
    #line 4774 
    setup_hw_rings(dev,3);
    #line 4775 
    writel((unsigned int)(((np->rx_ring_size + -1) << 16) + (np->tx_ring_size + -1)),(void *)(base + 264U));
    #line 4777 
    pci_push(base);
    #line 4778 
    ;
    #line 4778 
    writel(np->txrxctl_bits | 1U,(void *)(get_hwbase(dev) + 324U));
    #line 4779 
    pci_push(base);
    #line 4782 
    nv_start_rxtx(dev);
    #line 4783 
    cif_spin_unlock_lock_of_fe_priv(& np->lock);
    #line 4784 
    netif_addr_unlock(dev);
    #line 4785 
    netif_tx_unlock_bh(dev);
    #line 4786 
    nv_napi_enable(dev);
    #line 4787 
    nv_enable_irq(dev);
  }
  #line 4789 
  return 0;
  #line 4790 
  exit: 
        #line 4790 
  ;
  #line 4791 
  return -12;
}

#line 4794  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
static void nv_get_pauseparam(struct net_device *dev, struct ethtool_pauseparam *pause)
{
  #line 4796 
  struct fe_priv *np = netdev_priv(dev);
  #line 4798 
  pause->autoneg = (unsigned int)((np->pause_flags & 64U) != 0U);
  #line 4799 
  pause->rx_pause = (unsigned int)((np->pause_flags & 4U) != 0U);
  #line 4800 
  pause->tx_pause = (unsigned int)((np->pause_flags & 8U) != 0U);
  #line 4801 
  return;
}

#line 4803  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
static int nv_set_pauseparam(struct net_device *dev, struct ethtool_pauseparam *pause)
{
  #line 4806 
  int adv;
  #line 4806 
  int bmcr;
  #line 4805 
  struct fe_priv *np = netdev_priv(dev);
  #line 4808 
  if ((np->autoneg == 0 || pause->autoneg == 0U) && np->duplex == 0) {
    #line 4810 
    netdev_info(dev,(char *)"can not set pause settings when forced link is in half duplex\n");
    #line 4811 
    return -22;
  }
  #line 4813 
  if (pause->tx_pause != 0U && (np->pause_flags & 2U) == 0U) {
    #line 4814 
    netdev_info(dev,(char *)"hardware does not support tx pause frames\n");
    #line 4815 
    return -22;
  }
  #line 4818 
  netif_carrier_off(dev);
  #line 4819 
  if ((int)netif_running(dev) != 0) {
    #line 4820 
    nv_disable_irq(dev);
    #line 4821 
    netif_tx_lock_bh(dev);
    #line 4822 
    netif_addr_lock(dev);
    #line 4823 
    cif_spin_lock_lock_of_fe_priv(& np->lock);
    #line 4825 
    nv_stop_rxtx(dev);
    #line 4826 
    cif_spin_unlock_lock_of_fe_priv(& np->lock);
    #line 4827 
    netif_addr_unlock(dev);
    #line 4828 
    netif_tx_unlock_bh(dev);
  }
  #line 4831 
  np->pause_flags &= 4294967247U;
  #line 4832 
  if (pause->rx_pause != 0U) 
                             #line 4833 
                             np->pause_flags |= 16U;
  #line 4834 
  if (pause->tx_pause != 0U) 
                             #line 4835 
                             np->pause_flags |= 32U;
  #line 4837 
  if (np->autoneg != 0 && pause->autoneg != 0U) {
    #line 4838 
    np->pause_flags |= 64U;
    #line 4840 
    adv = mii_rw(dev,np->phyaddr,4,-1);
    #line 4841 
    adv &= -3073;
    #line 4842 
    if ((np->pause_flags & 16U) != 0U) 
                                       #line 4843 
                                       adv |= 3072;
    #line 4844 
    if ((np->pause_flags & 32U) != 0U) 
                                       #line 4845 
                                       adv |= 2048;
    #line 4846 
    mii_rw(dev,np->phyaddr,4,adv);
    #line 4848 
    if ((int)netif_running(dev) != 0) 
                                      #line 4849 
                                      netdev_info(dev,(char *)"link down\n");
    #line 4850 
    bmcr = mii_rw(dev,np->phyaddr,0,-1);
    #line 4851 
    bmcr |= 4608;
    #line 4852 
    mii_rw(dev,np->phyaddr,0,bmcr);
  }
  else {
    #line 4854 
    np->pause_flags &= 4294967219U;
    #line 4855 
    if (pause->rx_pause != 0U) 
                               #line 4856 
                               np->pause_flags |= 4U;
    #line 4857 
    if (pause->tx_pause != 0U) 
                               #line 4858 
                               np->pause_flags |= 8U;
    #line 4860 
    if (netif_running(dev)) 
                            #line 4863 
                            nv_update_pause(dev,np->pause_flags); else 
                                                                    #line 4861 
                                                                    nv_update_linkspeed(dev);
  }
  #line 4866 
  if ((int)netif_running(dev) != 0) {
    #line 4867 
    nv_start_rxtx(dev);
    #line 4868 
    nv_enable_irq(dev);
  }
  #line 4870 
  return 0;
}

#line 4873  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
static int nv_set_loopback(struct net_device *dev, netdev_features_t features)
{
  #line 4876 
  unsigned long flags;
  #line 4877 
  u32 miicontrol;
  #line 4878 
  int err;
  #line 4875 
  struct fe_priv *np = netdev_priv(dev);
  #line 4878 
  int retval = 0;
  #line 4880 
  cif___ldv_spin_lock_lock_of_fe_priv(& np->lock);
  #line 4881 
  miicontrol = (unsigned int)mii_rw(dev,np->phyaddr,0,-1);
  #line 4882 
  if ((features & 2199023255552ULL) != 0ULL) {
    #line 4883 
    if ((miicontrol & 16384U) != 0U) {
      #line 4884 
      cif_spin_unlock_irqrestore_lock_of_fe_priv(& np->lock,flags);
      #line 4885 
      netdev_info(dev,(char *)"Loopback already enabled\n");
      #line 4886 
      return 0;
    }
    #line 4888 
    nv_disable_irq(dev);
    #line 4890 
    miicontrol |= 16704U;
    #line 4891 
    err = mii_rw(dev,np->phyaddr,0,(int)miicontrol);
    #line 4892 
    if (err != 0) {
      #line 4893 
      retval = 2;
      #line 4894 
      cif_spin_unlock_irqrestore_lock_of_fe_priv(& np->lock,flags);
      #line 4895 
      phy_init(dev);
    }
    else {
      #line 4897 
      if ((int)netif_running(dev) != 0) {
        #line 4899 
        nv_force_linkspeed(dev,50,1);
        #line 4902 
        netif_carrier_on(dev);
      }
      #line 4904 
      cif_spin_unlock_irqrestore_lock_of_fe_priv(& np->lock,flags);
      #line 4905 
      netdev_info(dev,(char *)"Internal PHY loopback mode enabled.\n");
    }
  }
  else {
    #line 4909 
    if ((miicontrol & 16384U) == 0U) {
      #line 4910 
      cif_spin_unlock_irqrestore_lock_of_fe_priv(& np->lock,flags);
      #line 4911 
      netdev_info(dev,(char *)"Loopback already disabled\n");
      #line 4912 
      return 0;
    }
    #line 4914 
    nv_disable_irq(dev);
    #line 4916 
    cif_spin_unlock_irqrestore_lock_of_fe_priv(& np->lock,flags);
    #line 4917 
    netdev_info(dev,(char *)"Internal PHY loopback mode disabled.\n");
    #line 4918 
    phy_init(dev);
  }
  #line 4920 
  msleep(500U);
  #line 4921 
  cif___ldv_spin_lock_lock_of_fe_priv(& np->lock);
  #line 4922 
  nv_enable_irq(dev);
  #line 4923 
  cif_spin_unlock_irqrestore_lock_of_fe_priv(& np->lock,flags);
  #line 4925 
  return retval;
}

#line 4928  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
static netdev_features_t nv_fix_features(struct net_device *dev, netdev_features_t features)
{
  #line 4932 
  if ((features & 384ULL) != 0ULL) 
                                   #line 4933 
                                   features |= 549755813888ULL;
  #line 4935 
  return features;
}

#line 4938  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
static void nv_vlan_mode(struct net_device *dev, netdev_features_t features)
{
  #line 4940 
  struct fe_priv *np = get_nvpriv(dev);
  #line 4942 
  cif_spin_lock_irq_lock_of_fe_priv(& np->lock);
  #line 4944 
  if ((features & 256ULL) != 0ULL) 
                                   #line 4945 
                                   np->txrxctl_bits |= 64U; else 
                                                                 #line 4947 
                                                                 np->txrxctl_bits &= 4294967231U;
  #line 4949 
  if ((features & 128ULL) != 0ULL) 
                                   #line 4950 
                                   np->txrxctl_bits |= 128U; else 
                                                                  #line 4952 
                                                                  np->txrxctl_bits &= 4294967167U;
  #line 4954 
  ;
  #line 4954 
  writel(np->txrxctl_bits,(void *)(get_hwbase(dev) + 324U));
  #line 4956 
  cif_spin_unlock_irq_lock_of_fe_priv(& np->lock);
  #line 4957 
  return;
}

#line 4959  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
static int nv_set_features(struct net_device *dev, netdev_features_t features)
{
  #line 4964 
  int retval;
  #line 4961 
  struct fe_priv *np = netdev_priv(dev);
  #line 4962 
  u8 *base = get_hwbase(dev);
  #line 4963 
  netdev_features_t changed = dev->features ^ features;
  #line 4966 
  if ((changed & 2199023255552ULL) != 0ULL) {
    #line 4966 
    if ((int)netif_running(dev) != 0) {
      #line 4967 
      retval = nv_set_loopback(dev,features);
      #line 4968 
      if (retval != 0) 
                       #line 4969 
                       return retval;
    }
  }
  #line 4972 
  if ((changed & 549755813888ULL) != 0ULL) {
    #line 4973 
    cif_spin_lock_irq_lock_of_fe_priv(& np->lock);
    #line 4975 
    if ((features & 549755813888ULL) != 0ULL) 
                                              #line 4976 
                                              np->txrxctl_bits |= 1024U; else 
                                                                    #line 4978 
                                                                    np->txrxctl_bits &= 4294966271U;
    #line 4980 
    if ((int)netif_running(dev) != 0) 
                                      #line 4981 
                                      writel(np->txrxctl_bits,(void *)(base + 324U));
    #line 4983 
    cif_spin_unlock_irq_lock_of_fe_priv(& np->lock);
  }
  #line 4986 
  if ((changed & 384ULL) != 0ULL) 
                                  #line 4987 
                                  nv_vlan_mode(dev,features);
  #line 4989 
  return 0;
}

#line 4992  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
static int nv_get_sset_count(struct net_device *dev, int sset)
{
  #line 4994 
  struct fe_priv *np = netdev_priv(dev);
  #line 4996 
  switch (sset) {
    #line 4997 
    case 0: 
            #line 4997 
    ;
    #line 4998 
    if ((np->driver_data & 4096U) != 0U) 
                                         #line 4999 
                                         return 4; else 
                                                        #line 5001 
                                                        return 3;
    #line 5002 
    case 1: 
            #line 5002 
    ;
    #line 5003 
    if ((np->driver_data & 2048U) != 0U) 
                                         #line 5004 
                                         return 33;
    else 
      #line 5005 
      if ((np->driver_data & 1024U) != 0U) 
                                           #line 5006 
                                           return 30;
      else 
        #line 5007 
        if ((np->driver_data & 512U) != 0U) 
                                            #line 5008 
                                            return 24; else 
                                                            #line 5010 
                                                            return 0;
    #line 5011 
    default: 
             #line 5011 
    ;
    #line 5012 
    return -95;
  }
}

#line 5016  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
static void nv_get_ethtool_stats(struct net_device *dev, struct ethtool_stats *estats, u64 *buffer)
{
  #line 5021 
  struct fe_priv *np = netdev_priv(dev);
  #line 5023 
  cif_spin_lock_bh_hwstats_lock_of_fe_priv(& np->hwstats_lock);
  #line 5024 
  nv_update_stats(dev);
  #line 5025 
  ;
  #line 5025 
  ;
  #line 5025 
  memcpy((void *)buffer,(void *)(& np->estats),(unsigned long)nv_get_sset_count(dev,1) * 8UL);
  #line 5027 
  cif_spin_unlock_bh_hwstats_lock_of_fe_priv(& np->hwstats_lock);
  #line 5028 
  return;
}

#line 5030  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
static int nv_link_test(struct net_device *dev)
{
  #line 5033 
  int mii_status;
  #line 5032 
  struct fe_priv *np = netdev_priv(dev);
  #line 5035 
  mii_rw(dev,np->phyaddr,1,-1);
  #line 5036 
  mii_status = mii_rw(dev,np->phyaddr,1,-1);
  #line 5039 
  if ((mii_status & 4) == 0) 
                             #line 5040 
                             return 0; else 
                                            #line 5042 
                                            return 1;
}

#line 5045  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
static int nv_register_test(struct net_device *dev)
{
  #line 5049 
  u32 orig_read;
  #line 5049 
  u32 new_read;
  #line 5047 
  u8 *base = get_hwbase(dev);
  #line 5048 
  int i = 0;
  #line 5051 
  while (1) {
    #line 5052 
    orig_read = readl((void *)(base + (unsigned long)nv_registers_test[i].reg));
    #line 5055 
    orig_read = nv_registers_test[i].mask ^ orig_read;
    #line 5057 
    writel(orig_read,(void *)(base + (unsigned long)nv_registers_test[i].reg));
    #line 5059 
    new_read = readl((void *)(base + (unsigned long)nv_registers_test[i].reg));
    #line 5061 
    if (((new_read ^ orig_read) & nv_registers_test[i].mask) != 0U) 
                                                                    #line 5062 
                                                                    return 0;
    #line 5065 
    orig_read = nv_registers_test[i].mask ^ orig_read;
    #line 5066 
    writel(orig_read,(void *)(base + (unsigned long)nv_registers_test[i].reg));
    #line 5068 
    i ++;
    #line 5067 
    ;
    #line 5067 
    if (! (nv_registers_test[i].reg != 0U)) 
                                            #line 5051 
                                            break;
  }
  #line 5070 
  return 1;
}

#line 5073  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
static int nv_interrupt_test(struct net_device *dev)
{
  #line 5078 
  int testcnt;
  #line 5079 
  u32 save_msi_flags;
  #line 5075 
  struct fe_priv *np = netdev_priv(dev);
  #line 5076 
  u8 *base = get_hwbase(dev);
  #line 5077 
  int ret = 1;
  #line 5079 
  u32 save_poll_interval = 0U;
  #line 5081 
  if ((int)netif_running(dev) != 0) {
    #line 5083 
    nv_free_irq(dev);
    #line 5084 
    save_poll_interval = readl((void *)(base + 12U));
  }
  #line 5088 
  np->intr_test = 0;
  #line 5091 
  save_msi_flags = np->msi_flags;
  #line 5092 
  np->msi_flags &= 4294967280U;
  #line 5093 
  np->msi_flags |= 1U;
  #line 5094 
  if (nv_request_irq(dev,1) != 0) 
                                  #line 5095 
                                  return 0;
  #line 5098 
  writel(13U,(void *)(base + 12U));
  #line 5099 
  writel(3U,(void *)(base + 8U));
  #line 5101 
  nv_enable_hw_interrupts(dev,32U);
  #line 5104 
  msleep(100U);
  #line 5106 
  cif_spin_lock_irq_lock_of_fe_priv(& np->lock);
  #line 5109 
  testcnt = np->intr_test;
  #line 5110 
  if (testcnt == 0) 
                    #line 5111 
                    ret = 2;
  #line 5113 
  nv_disable_hw_interrupts(dev,32U);
  #line 5114 
  if ((np->msi_flags & 128U) == 0U) 
                                    #line 5115 
                                    writel(33791U,(void *)base); else 
                                                                   #line 5117 
                                                                   writel(33791U,(void *)(base + 1008U));
  #line 5119 
  cif_spin_unlock_irq_lock_of_fe_priv(& np->lock);
  #line 5121 
  nv_free_irq(dev);
  #line 5123 
  np->msi_flags = save_msi_flags;
  #line 5125 
  if ((int)netif_running(dev) != 0) {
    #line 5126 
    writel(save_poll_interval,(void *)(base + 12U));
    #line 5127 
    writel(3U,(void *)(base + 8U));
    #line 5129 
    if (nv_request_irq(dev,0) != 0) 
                                    #line 5130 
                                    return 0;
  }
  #line 5133 
  return ret;
}

#line 5136  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
static int nv_loopback_test(struct net_device *dev)
{
  #line 5140 
  struct sk_buff *tx_skb;
  #line 5140 
  struct sk_buff *rx_skb;
  #line 5141 
  dma_addr_t test_dma_addr;
  #line 5142 
  unsigned int tmp_1;
  #line 5143 
  u32 flags;
  #line 5144 
  int len;
  #line 5144 
  int i;
  #line 5144 
  int pkt_len;
  #line 5145 
  u8 *pkt_data;
  #line 5138 
  struct fe_priv *np = netdev_priv(dev);
  #line 5139 
  u8 *base = get_hwbase(dev);
  #line 5142 
  if (np->desc_ver == 1U) 
                          #line 5142 
                          tmp_1 = 65536U; else 
                                               #line 5142 
                                               tmp_1 = 536870912U;
  #line 5142 
  u32 tx_flags_extra = tmp_1;
  #line 5146 
  u32 filter_flags = 0U;
  #line 5147 
  u32 misc1_flags = 0U;
  #line 5148 
  int ret = 1;
  #line 5150 
  if ((int)netif_running(dev) != 0) {
    #line 5151 
    nv_disable_irq(dev);
    #line 5152 
    filter_flags = readl((void *)(base + 140U));
    #line 5153 
    misc1_flags = readl((void *)(base + 128U));
  }
  else 
       #line 5155 
       nv_txrx_reset(dev);
  #line 5159 
  set_bufsize(dev);
  #line 5160 
  nv_init_ring(dev);
  #line 5163 
  writel(3870524U,(void *)(base + 128U));
  #line 5164 
  writel(8323088U,(void *)(base + 140U));
  #line 5167 
  writel(np->rx_buf_sz,(void *)(base + 144U));
  #line 5168 
  setup_hw_rings(dev,3);
  #line 5169 
  writel((unsigned int)(((np->rx_ring_size + -1) << 16) + (np->tx_ring_size + -1)),(void *)(base + 264U));
  #line 5171 
  pci_push(base);
  #line 5174 
  nv_start_rxtx(dev);
  #line 5177 
  pkt_len = 1500;
  #line 5178 
  tx_skb = netdev_alloc_skb(dev,(unsigned int)pkt_len);
  #line 5179 
  if (tx_skb == (struct sk_buff *)0) {
    #line 5180 
    ret = 0;
    #line 5181 
    goto out;
  }
  #line 5183 
  ;
  #line 5183 
  ;
  #line 5183 
  test_dma_addr = dma_map_single_attrs(& (np->pci_dev)->dev,(void *)tx_skb->data,(unsigned long)skb_tailroom(tx_skb),(enum dma_data_direction)DMA_FROM_DEVICE,0UL);
  #line 5186 
  if ((long)(dma_mapping_error(& (np->pci_dev)->dev,test_dma_addr) != 0) != 0L) {
    #line 5188 
    dev_kfree_skb_any(tx_skb);
    #line 5189 
    goto out;
  }
  #line 5191 
  pkt_data = (u8 *)skb_put(tx_skb,(unsigned int)pkt_len);
  #line 5192 
  i = 0;
  #line 5192 
  while (i < pkt_len) {
    #line 5193 
    *(pkt_data + (unsigned long)i) = (unsigned char)i;
    #line 5192 
    i ++;
  }
  #line 5195 
  if (nv_optimized(np)) {
    #line 5199 
    (np->tx_ring.ex)->bufhigh = dma_high(test_dma_addr);
    #line 5200 
    (np->tx_ring.ex)->buflow = dma_low(test_dma_addr);
    #line 5201 
    (np->tx_ring.ex)->flaglen = ((unsigned int)(pkt_len + -1) | np->tx_flags) | tx_flags_extra;
  }
  else {
    #line 5196 
    (np->tx_ring.orig)->buf = (unsigned int)test_dma_addr;
    #line 5197 
    (np->tx_ring.orig)->flaglen = ((unsigned int)(pkt_len + -1) | np->tx_flags) | tx_flags_extra;
  }
  #line 5203 
  ;
  #line 5203 
  writel(np->txrxctl_bits | 1U,(void *)(get_hwbase(dev) + 324U));
  #line 5204 
  pci_push(get_hwbase(dev));
  #line 5206 
  msleep(500U);
  #line 5209 
  if (nv_optimized(np)) {
    #line 5214 
    flags = (np->rx_ring.ex)->flaglen;
    #line 5215 
    len = (int)nv_descr_getlength_ex(np->rx_ring.ex,np->desc_ver);
  }
  else {
    #line 5210 
    flags = (np->rx_ring.orig)->flaglen;
    #line 5211 
    len = (int)nv_descr_getlength(np->rx_ring.orig,np->desc_ver);
  }
  #line 5218 
  if ((flags & 2147483648U) != 0U) 
                                   #line 5219 
                                   ret = 0;
  else 
    #line 5220 
    if (np->desc_ver == 1U) {
      #line 5221 
      if ((flags & 1073741824U) != 0U) 
                                       #line 5222 
                                       ret = 0;
    }
    else 
      #line 5224 
      if ((flags & 1073741824U) != 0U) 
                                       #line 5225 
                                       ret = 0;
  #line 5228 
  if (ret != 0) 
    #line 5229 
    if (len != pkt_len) 
                        #line 5230 
                        ret = 0;
    else {
      #line 5232 
      rx_skb = (np->rx_skb)->skb;
      #line 5233 
      i = 0;
      #line 5233 
      while (i < pkt_len) {
        #line 5234 
        if ((int)*(rx_skb->data + (unsigned long)i) != (int)((unsigned char)i)) {
          #line 5235 
          ret = 0;
          #line 5236 
          break;
        }
        #line 5233 
        i ++;
      }
    }
  #line 5242 
  ;
  #line 5242 
  ;
  #line 5242 
  ;
  #line 5242 
  dma_unmap_single_attrs(& (np->pci_dev)->dev,test_dma_addr,(unsigned long)(skb_end_pointer(tx_skb) - tx_skb->data),(enum dma_data_direction)DMA_TO_DEVICE,0UL);
  #line 5245 
  dev_kfree_skb_any(tx_skb);
  #line 5246 
  out: 
       #line 5246 
  ;
  #line 5248 
  nv_stop_rxtx(dev);
  #line 5249 
  nv_txrx_reset(dev);
  #line 5251 
  nv_drain_rxtx(dev);
  #line 5253 
  if ((int)netif_running(dev) != 0) {
    #line 5254 
    writel(misc1_flags,(void *)(base + 128U));
    #line 5255 
    writel(filter_flags,(void *)(base + 140U));
    #line 5256 
    nv_enable_irq(dev);
  }
  #line 5259 
  return ret;
}

#line 5262  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
static void nv_self_test(struct net_device *dev, struct ethtool_test *test, u64 *buffer)
{
  #line 5266 
  int result;
  #line 5266 
  int count;
  #line 5264 
  struct fe_priv *np = netdev_priv(dev);
  #line 5265 
  u8 *base = get_hwbase(dev);
  #line 5268 
  count = nv_get_sset_count(dev,0);
  #line 5269 
  memset((void *)buffer,0,(unsigned long)count * 8UL);
  #line 5271 
  if (nv_link_test(dev) == 0) {
    #line 5272 
    test->flags |= 2U;
    #line 5273 
    *buffer = 1ULL;
  }
  #line 5276 
  if ((test->flags & 1U) != 0U) {
    #line 5277 
    if ((int)netif_running(dev) != 0) {
      #line 5278 
      netif_stop_queue(dev);
      #line 5279 
      nv_napi_disable(dev);
      #line 5280 
      netif_tx_lock_bh(dev);
      #line 5281 
      netif_addr_lock(dev);
      #line 5282 
      cif_spin_lock_irq_lock_of_fe_priv(& np->lock);
      #line 5283 
      nv_disable_hw_interrupts(dev,np->irqmask);
      #line 5284 
      if ((np->msi_flags & 128U) == 0U) 
                                        #line 5285 
                                        writel(33791U,(void *)base); else 
                                                                    #line 5287 
                                                                    writel(33791U,(void *)(base + 1008U));
      #line 5289 
      nv_stop_rxtx(dev);
      #line 5290 
      nv_txrx_reset(dev);
      #line 5292 
      nv_drain_rxtx(dev);
      #line 5293 
      cif_spin_unlock_irq_lock_of_fe_priv(& np->lock);
      #line 5294 
      netif_addr_unlock(dev);
      #line 5295 
      netif_tx_unlock_bh(dev);
    }
    #line 5298 
    if (nv_register_test(dev) == 0) {
      #line 5299 
      test->flags |= 2U;
      #line 5300 
      *(buffer + 1U) = 1ULL;
    }
    #line 5303 
    result = nv_interrupt_test(dev);
    #line 5304 
    if (result != 1) {
      #line 5305 
      test->flags |= 2U;
      #line 5306 
      *(buffer + 2U) = 1ULL;
    }
    #line 5308 
    if (result == 0) 
                     #line 5310 
                     return;
    #line 5313 
    if (count > 3) {
      #line 5313 
      if (nv_loopback_test(dev) == 0) {
        #line 5314 
        test->flags |= 2U;
        #line 5315 
        *(buffer + 3U) = 1ULL;
      }
    }
    #line 5318 
    if ((int)netif_running(dev) != 0) {
      #line 5320 
      set_bufsize(dev);
      #line 5321 
      if (nv_init_ring(dev) != 0) 
        #line 5322 
        if (np->in_shutdown == 0) 
                                  #line 5323 
                                  cif_mod_timer(& np->oom_kick,jiffies + 13UL);
      #line 5326 
      writel(np->rx_buf_sz,(void *)(base + 144U));
      #line 5327 
      setup_hw_rings(dev,3);
      #line 5328 
      writel((unsigned int)(((np->rx_ring_size + -1) << 16) + (np->tx_ring_size + -1)),(void *)(base + 264U));
      #line 5330 
      pci_push(base);
      #line 5331 
      ;
      #line 5331 
      writel(np->txrxctl_bits | 1U,(void *)(get_hwbase(dev) + 324U));
      #line 5332 
      pci_push(base);
      #line 5334 
      nv_start_rxtx(dev);
      #line 5335 
      netif_start_queue(dev);
      #line 5336 
      nv_napi_enable(dev);
      #line 5337 
      nv_enable_hw_interrupts(dev,np->irqmask);
    }
  }
  #line 5340 
  return;
}

#line 5342  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
static void nv_get_strings(struct net_device *dev, u32 stringset, u8 *buffer)
{
  #line 5344 
  switch (stringset) {
    #line 5345 
    case (u32)1: 
                 #line 5345 
    ;
    #line 5346 
    ;
    #line 5346 
    memcpy((void *)buffer,(void *)(& nv_estats_str),(unsigned long)nv_get_sset_count(dev,1) * 32UL);
    #line 5347 
    break;
    #line 5348 
    case (u32)0: 
                 #line 5348 
    ;
    #line 5349 
    ;
    #line 5349 
    memcpy((void *)buffer,(void *)(& nv_etests_str),(unsigned long)nv_get_sset_count(dev,0) * 32UL);
    #line 5350 
    break;
  }
  #line 5352 
  return;
}

#line 5354  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
static struct ethtool_ops ops = {.get_drvinfo = & nv_get_drvinfo, .get_regs_len = & nv_get_regs_len, .get_regs = & nv_get_regs, .get_wol = & nv_get_wol, .set_wol = & nv_set_wol, .nway_reset = & nv_nway_reset, .get_link = & ethtool_op_get_link, .get_ringparam = & nv_get_ringparam, .set_ringparam = & nv_set_ringparam, .get_pauseparam = & nv_get_pauseparam, .set_pauseparam = & nv_set_pauseparam, .self_test = & nv_self_test, .get_strings = & nv_get_strings, .get_ethtool_stats = & nv_get_ethtool_stats, .get_sset_count = & nv_get_sset_count, .get_ts_info = & ethtool_op_get_ts_info, .get_link_ksettings = & nv_get_link_ksettings, .set_link_ksettings = & nv_set_link_ksettings};
#line 5376  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
static int nv_mgmt_acquire_sema(struct net_device *dev)
{
  #line 5380 
  int i;
  #line 5381 
  u32 tx_ctrl;
  #line 5381 
  u32 mgmt_sema;
  #line 5378 
  struct fe_priv *np = netdev_priv(dev);
  #line 5379 
  u8 *base = get_hwbase(dev);
  #line 5383 
  i = 0;
  #line 5383 
  while (i <= 9) {
    {
      #line 5384 
      mgmt_sema = readl((void *)(base + 132U)) & 3840U;
      #line 5385 
      if (mgmt_sema == 0U) 
                           #line 5386 
                           break;
      #line 5387 
      msleep(500U);
    }
    #line 5383 
    i ++;
  }
  #line 5390 
  if (mgmt_sema != 0U) 
                       #line 5391 
                       return 0;
  #line 5393 
  i = 0;
  #line 5393 
  while (i <= 1) {
    #line 5394 
    tx_ctrl = readl((void *)(base + 132U));
    #line 5395 
    tx_ctrl |= 61440U;
    #line 5396 
    writel(tx_ctrl,(void *)(base + 132U));
    #line 5399 
    tx_ctrl = readl((void *)(base + 132U));
    #line 5400 
    if ((tx_ctrl & 61440U) == 61440U && (tx_ctrl & 3840U) == 0U) {
      #line 5402 
      np->mgmt_sema = 1;
      #line 5403 
      return 1;
    }
    else 
         #line 5405 
         __const_udelay(214750UL);
    #line 5393 
    i ++;
  }
  #line 5408 
  return 0;
}

#line 5411  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
static void nv_mgmt_release_sema(struct net_device *dev)
{
  #line 5415 
  u32 tx_ctrl;
  #line 5413 
  struct fe_priv *np = netdev_priv(dev);
  #line 5414 
  u8 *base = get_hwbase(dev);
  #line 5417 
  if ((np->driver_data & 8192U) != 0U) 
    #line 5418 
    if (np->mgmt_sema != 0) {
      #line 5419 
      tx_ctrl = readl((void *)(base + 132U));
      #line 5420 
      tx_ctrl &= 4294905855U;
      #line 5421 
      writel(tx_ctrl,(void *)(base + 132U));
    }
  #line 5423 
  return;
}

#line 5427  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
static int nv_mgmt_get_version(struct net_device *dev)
{
  #line 5433 
  unsigned long start;
  #line 5429 
  struct fe_priv *np = netdev_priv(dev);
  #line 5430 
  u8 *base = get_hwbase(dev);
  #line 5431 
  u32 data_ready = readl((void *)(base + 132U));
  #line 5432 
  u32 data_ready2 = 0U;
  #line 5434 
  int ready = 0;
  #line 5436 
  writel(1U,(void *)(base + 516U));
  #line 5437 
  writel(data_ready ^ 1048576U,(void *)(base + 132U));
  #line 5438 
  start = jiffies;
  #line 5439 
  while (1) {
    {
      #line 5439 
      unsigned long __dummy;
      #line 5439 
      unsigned long __dummy2;
      }
    #line 5439 
    if (1 != 0) {
      {
        #line 5439 
        unsigned long __dummy_0;
        #line 5439 
        unsigned long __dummy2_0;
        }
      #line 5439 
      if (1 != 0) {
        #line 5439 
        if (! ((long)((jiffies - start) + 18446744073709550366UL) < 0L)) 
          #line 5439 
          break;
      }
      else 
           #line 5439 
           break;
    }
    else 
         #line 5439 
         break;
    #line 5440 
    data_ready2 = readl((void *)(base + 132U));
    #line 5441 
    if (((data_ready ^ data_ready2) & 65536U) != 0U) {
      #line 5442 
      ready = 1;
      #line 5443 
      break;
    }
    #line 5445 
    schedule_timeout_uninterruptible(1L);
  }
  #line 5448 
  if (ready == 0 || (data_ready2 & 131072U) != 0U) 
                                                   #line 5449 
                                                   return 0;
  #line 5451 
  np->mgmt_version = (int)readl((void *)(base + 520U)) & 8;
  #line 5453 
  return 1;
}

#line 5456  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
static int nv_open(struct net_device *dev)
{
  #line 5461 
  int oom;
  #line 5461 
  int i;
  #line 5462 
  u32 low;
  #line 5458 
  struct fe_priv *np = netdev_priv(dev);
  #line 5459 
  u8 *base = get_hwbase(dev);
  #line 5460 
  int ret = 1;
  #line 5465 
  ;
  #line 5465 
  ;
  #line 5465 
  mii_rw(dev,np->phyaddr,0,mii_rw(dev,np->phyaddr,0,-1) & -2049);
  #line 5468 
  nv_txrx_gate(dev,(_Bool)0);
  #line 5470 
  if ((np->driver_data & 256U) != 0U) 
                                      #line 5471 
                                      nv_mac_reset(dev);
  #line 5472 
  writel(1U,(void *)(base + 176U));
  #line 5473 
  writel(0U,(void *)(base + 180U));
  #line 5474 
  writel(4294967295U,(void *)(base + 184U));
  #line 5475 
  writel(65535U,(void *)(base + 188U));
  #line 5476 
  writel(0U,(void *)(base + 140U));
  #line 5478 
  writel(0U,(void *)(base + 132U));
  #line 5479 
  writel(0U,(void *)(base + 148U));
  #line 5481 
  writel(0U,(void *)(base + 392U));
  #line 5483 
  if ((np->pause_flags & 2U) != 0U) 
                                    #line 5484 
                                    writel(268370048U,(void *)(base + 368U));
  #line 5487 
  set_bufsize(dev);
  #line 5488 
  oom = nv_init_ring(dev);
  #line 5490 
  writel(0U,(void *)(base + 272U));
  #line 5491 
  ;
  #line 5491 
  writel(readl((void *)(base + 268U)) & 32768U,(void *)(base + 268U));
  #line 5492 
  nv_txrx_reset(dev);
  #line 5493 
  writel(0U,(void *)(base + 8U));
  #line 5495 
  np->in_shutdown = 0;
  #line 5498 
  setup_hw_rings(dev,3);
  #line 5499 
  writel((unsigned int)(((np->rx_ring_size + -1) << 16) + (np->tx_ring_size + -1)),(void *)(base + 264U));
  #line 5502 
  writel(np->linkspeed,(void *)(base + 272U));
  #line 5503 
  if (np->desc_ver == 1U) 
                          #line 5504 
                          writel(2097168U,(void *)(base + 316U)); else 
                                                                    #line 5506 
                                                                    writel(31490048U,(void *)(base + 316U));
  #line 5507 
  writel(np->txrxctl_bits,(void *)(base + 324U));
  #line 5508 
  writel(np->vlanctl_bits,(void *)(base + 768U));
  #line 5509 
  pci_push(base);
  #line 5510 
  writel(np->txrxctl_bits | 2U,(void *)(base + 324U));
  #line 5511 
  if (reg_delay(dev,304,2147483648U,2147483648U,5,50000) != 0) 
                                                               #line 5514 
                                                               netdev_info(dev,(char *)"%s: SetupReg5, Bit 31 remained off\n",(char *)"nv_open");
  #line 5517 
  writel(0U,(void *)(base + 388U));
  #line 5518 
  writel(33791U,(void *)base);
  #line 5519 
  writel(15U,(void *)(base + 384U));
  #line 5521 
  writel(3870526U,(void *)(base + 128U));
  #line 5522 
  ;
  #line 5522 
  writel(readl((void *)(base + 136U)),(void *)(base + 136U));
  #line 5523 
  writel(8323072U,(void *)(base + 140U));
  #line 5524 
  writel(np->rx_buf_sz,(void *)(base + 144U));
  #line 5526 
  ;
  #line 5526 
  writel(readl((void *)(base + 152U)),(void *)(base + 152U));
  #line 5528 
  get_random_bytes((void *)(& low),4);
  #line 5529 
  low &= 255U;
  #line 5530 
  if (np->desc_ver == 1U) 
                          #line 5531 
                          writel(low | 32512U,(void *)(base + 156U));
  else 
    #line 5533 
    if ((np->driver_data & 2097152U) == 0U) 
                                            #line 5535 
                                            writel(low | 2147516160U,(void *)(base + 156U));
    else {
      #line 5537 
      writel(32512U,(void *)(base + 156U));
      #line 5538 
      nv_gear_backoff_reseed(dev);
    }
  #line 5541 
  writel(1377551U,(void *)(base + 160U));
  #line 5542 
  writel(22U,(void *)(base + 164U));
  #line 5543 
  if (poll_interval == -1) 
    #line 5544 
    if (optimization_mode == 0) 
                                #line 5545 
                                writel(65535U,(void *)(base + 12U)); else 
                                                                    #line 5547 
                                                                    writel(13U,(void *)(base + 12U));
  else 
       #line 5549 
       writel((unsigned int)poll_interval & 65535U,(void *)(base + 12U));
  #line 5550 
  writel(3U,(void *)(base + 8U));
  #line 5551 
  writel((unsigned int)((np->phyaddr << 24) | 1310720),(void *)(base + 392U));
  #line 5553 
  writel(261U,(void *)(base + 396U));
  #line 5554 
  writel(8U,(void *)(base + 388U));
  #line 5555 
  if (np->wolenabled != 0) 
                           #line 5556 
                           writel(4369U,(void *)(base + 512U));
  #line 5558 
  i = (int)readl((void *)(base + 620U));
  #line 5559 
  if ((i & 32768) == 0) 
                        #line 5560 
                        writel((unsigned int)(i | 32768),(void *)(base + 620U));
  #line 5562 
  pci_push(base);
  #line 5563 
  __const_udelay(42950UL);
  #line 5564 
  ;
  #line 5564 
  writel(readl((void *)(base + 620U)) | 256U,(void *)(base + 620U));
  #line 5566 
  nv_disable_hw_interrupts(dev,np->irqmask);
  #line 5567 
  pci_push(base);
  #line 5568 
  writel(15U,(void *)(base + 384U));
  #line 5569 
  writel(33791U,(void *)base);
  #line 5570 
  pci_push(base);
  #line 5572 
  if (nv_request_irq(dev,0) != 0) 
                                  #line 5573 
                                  goto out_drain;
  #line 5576 
  nv_enable_hw_interrupts(dev,np->irqmask);
  #line 5578 
  cif_spin_lock_irq_lock_of_fe_priv(& np->lock);
  #line 5579 
  writel(1U,(void *)(base + 176U));
  #line 5580 
  writel(0U,(void *)(base + 180U));
  #line 5581 
  writel(4294967295U,(void *)(base + 184U));
  #line 5582 
  writel(65535U,(void *)(base + 188U));
  #line 5583 
  writel(8323104U,(void *)(base + 140U));
  #line 5587 
  readl((void *)(base + 384U));
  #line 5588 
  writel(15U,(void *)(base + 384U));
  #line 5592 
  np->linkspeed = 0U;
  #line 5593 
  ret = nv_update_linkspeed(dev);
  #line 5594 
  nv_start_rxtx(dev);
  #line 5595 
  netif_start_queue(dev);
  #line 5596 
  nv_napi_enable(dev);
  #line 5598 
  if (ret != 0) 
                #line 5599 
                netif_carrier_on(dev);
  else {
    #line 5601 
    netdev_info(dev,(char *)"no link during initialization\n");
    #line 5602 
    netif_carrier_off(dev);
  }
  #line 5604 
  if (oom != 0) 
                #line 5605 
                cif_mod_timer(& np->oom_kick,jiffies + 13UL);
  #line 5608 
  if ((np->driver_data & 3584U) != 0U) {
    #line 5609 
    ;
    #line 5609 
    cif_mod_timer(& np->stats_poll,round_jiffies(jiffies + 2500UL));
  }
  #line 5612 
  cif_spin_unlock_irq_lock_of_fe_priv(& np->lock);
  #line 5617 
  if ((dev->features & 2199023255552ULL) != 0ULL) 
                                                  #line 5618 
                                                  nv_set_loopback(dev,dev->features);
  #line 5620 
  return 0;
  #line 5621 
  out_drain: 
             #line 5621 
  ;
  #line 5622 
  nv_drain_rxtx(dev);
  #line 5623 
  return ret;
}

#line 5626  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
static int nv_close(struct net_device *dev)
{
  #line 5629 
  u8 *base;
  #line 5628 
  struct fe_priv *np = netdev_priv(dev);
  #line 5631 
  cif_spin_lock_irq_lock_of_fe_priv(& np->lock);
  #line 5632 
  np->in_shutdown = 1;
  #line 5633 
  cif_spin_unlock_irq_lock_of_fe_priv(& np->lock);
  #line 5634 
  nv_napi_disable(dev);
  #line 5635 
  synchronize_irq((np->pci_dev)->irq);
  #line 5637 
  cif_del_timer_sync(& np->oom_kick);
  #line 5638 
  cif_del_timer_sync(& np->nic_poll);
  #line 5639 
  cif_del_timer_sync(& np->stats_poll);
  #line 5641 
  netif_stop_queue(dev);
  #line 5642 
  cif_spin_lock_irq_lock_of_fe_priv(& np->lock);
  #line 5643 
  nv_update_pause(dev,0U);
  #line 5644 
  nv_stop_rxtx(dev);
  #line 5645 
  nv_txrx_reset(dev);
  #line 5648 
  base = get_hwbase(dev);
  #line 5649 
  nv_disable_hw_interrupts(dev,np->irqmask);
  #line 5650 
  pci_push(base);
  #line 5652 
  cif_spin_unlock_irq_lock_of_fe_priv(& np->lock);
  #line 5654 
  nv_free_irq(dev);
  #line 5656 
  nv_drain_rxtx(dev);
  #line 5658 
  if (np->wolenabled != 0 || phy_power_down == 0) {
    #line 5659 
    nv_txrx_gate(dev,(_Bool)0);
    #line 5660 
    writel(8323104U,(void *)(base + 140U));
    #line 5661 
    nv_start_rx(dev);
  }
  else {
    #line 5664 
    ;
    #line 5664 
    ;
    #line 5664 
    mii_rw(dev,np->phyaddr,0,mii_rw(dev,np->phyaddr,0,-1) | 2048);
    #line 5666 
    nv_txrx_gate(dev,(_Bool)1);
  }
  #line 5671 
  return 0;
}

#line 5674  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
static struct net_device_ops nv_netdev_ops = {.ndo_open = & nv_open, .ndo_stop = & nv_close, .ndo_start_xmit = & nv_start_xmit, .ndo_set_rx_mode = & nv_set_multicast, .ndo_set_mac_address = & nv_set_mac_address, .ndo_validate_addr = & eth_validate_addr, .ndo_change_mtu = & nv_change_mtu, .ndo_tx_timeout = & nv_tx_timeout, .ndo_get_stats64 = & nv_get_stats64, .ndo_poll_controller = & nv_poll_controller, .ndo_fix_features = & nv_fix_features, .ndo_set_features = & nv_set_features};
#line 5691  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
static struct net_device_ops nv_netdev_ops_optimized = {.ndo_open = & nv_open, .ndo_stop = & nv_close, .ndo_start_xmit = & nv_start_xmit_optimized, .ndo_set_rx_mode = & nv_set_multicast, .ndo_set_mac_address = & nv_set_mac_address, .ndo_validate_addr = & eth_validate_addr, .ndo_change_mtu = & nv_change_mtu, .ndo_tx_timeout = & nv_tx_timeout, .ndo_get_stats64 = & nv_get_stats64, .ndo_poll_controller = & nv_poll_controller, .ndo_fix_features = & nv_fix_features, .ndo_set_features = & nv_set_features};
#line 5708  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
static int nv_probe(struct pci_dev *pci_dev, struct pci_device_id *id)
{
  #line 5710 
  struct net_device *dev;
  #line 5711 
  struct fe_priv *np;
  #line 5712 
  unsigned long addr;
  #line 5713 
  u8 *base;
  #line 5714 
  int err;
  #line 5714 
  int i;
  #line 5715 
  u32 powerstate;
  #line 5715 
  u32 txreg;
  #line 5716 
  u32 phystate;
  #line 5718 
  int printed_version;
  #line 5720 
  int tmp;
  #line 6120 
  char *tmp_21;
  #line 6120 
  char *tmp_22;
  #line 6120 
  char *tmp_23;
  #line 6120 
  char *tmp_24;
  #line 6120 
  char *tmp_25;
  #line 6120 
  char *tmp_26;
  #line 6120 
  char *tmp_27;
  #line 6120 
  char *tmp_28;
  #line 6120 
  char *tmp_29;
  #line 6120 
  char *tmp_30;
  #line 6120 
  char *tmp_31;
  #line 5716 
  u32 phystate_orig = 0U;
  #line 5717 
  int phyinitialized = 0;
  #line 5720 
  tmp = printed_version;
  #line 5720 
  printed_version ++;
  #line 5720 
  ;
  #line 5720 
  if (tmp == 0) 
                #line 5721 
                printk((char *)"\001",(char *)"0.64");
  #line 5724 
  dev = cif_alloc_etherdev_mqs(3088,1U,1U);
  #line 5725 
  err = -12;
  #line 5726 
  if (dev == (struct net_device *)0) 
                                     #line 5727 
                                     goto out;
  #line 5729 
  np = (struct fe_priv *)netdev_priv(dev);
  #line 5730 
  np->dev = dev;
  #line 5731 
  np->pci_dev = pci_dev;
  #line 5732 
  spinlock_check(& np->lock);
  {
    #line 5732 
    struct lock_class_key __key;
    #line 5732 
    __raw_spin_lock_init(& np->lock.__anonCompField_spinlock_25.rlock,(char *)"&(&np->lock)->rlock",& __key);
  }
  #line 5733 
  spinlock_check(& np->hwstats_lock);
  {
    #line 5733 
    struct lock_class_key __key_0;
    #line 5733 
    __raw_spin_lock_init(& np->hwstats_lock.__anonCompField_spinlock_25.rlock,(char *)"&(&np->hwstats_lock)->rlock",& __key_0);
  }
  #line 5734 
  dev->dev.parent = & pci_dev->dev;
  #line 5735 
  u64_stats_init(& np->swstats_rx_syncp);
  #line 5736 
  u64_stats_init(& np->swstats_tx_syncp);
  #line 5737 
  np->txrx_stats = (struct nv_txrx_stats *)__alloc_percpu(56UL,8UL);
  #line 5738 
  if (np->txrx_stats == (struct nv_txrx_stats *)0) {
    #line 5739 
    printk((char *)"\001");
    #line 5740 
    err = -12;
    #line 5741 
    goto out_alloc_percpu;
  }
  {
    #line 5744 
    struct lock_class_key __key_1;
    #line 5744 
    init_timer_key(& np->oom_kick,& nv_do_rx_refill,0U,(char *)"(&np->oom_kick)",& __key_1);
  }
  {
    #line 5745 
    struct lock_class_key __key_2;
    #line 5745 
    init_timer_key(& np->nic_poll,& nv_do_nic_poll,0U,(char *)"(&np->nic_poll)",& __key_2);
  }
  {
    #line 5746 
    struct lock_class_key __key_3;
    #line 5746 
    init_timer_key(& np->stats_poll,& nv_do_stats_poll,524288U,(char *)"(&np->stats_poll)",& __key_3);
  }
  #line 5748 
  err = pci_enable_device(pci_dev);
  #line 5749 
  if (err != 0) 
                #line 5750 
                goto out_free;
  #line 5752 
  pci_set_master(pci_dev);
  #line 5754 
  err = pci_request_regions(pci_dev,(char *)"forcedeth");
  #line 5755 
  if (err < 0) 
               #line 5756 
               goto out_disable;
  #line 5758 
  if ((id->driver_data & 3488UL) != 0UL) 
                                         #line 5759 
                                         np->register_size = 1540U;
  else 
    #line 5760 
    if ((id->driver_data & 512UL) != 0UL) 
                                          #line 5761 
                                          np->register_size = 724U; else 
                                                                    #line 5763 
                                                                    np->register_size = 624U;
  #line 5765 
  err = -22;
  #line 5766 
  addr = 0UL;
  #line 5767 
  i = 0;
  #line 5767 
  while (i <= 16) {
    #line 5768 
    if ((pci_dev->resource[i].flags & 512UL) != 0UL) {
      #line 5768 
      resource_size_t tmp_2;
      #line 5768 
      if (pci_dev->resource[i].start != 0ULL || pci_dev->resource[i].end != pci_dev->resource[i].start) 
        #line 5768 
        tmp_2 = (pci_dev->resource[i].end - pci_dev->resource[i].start) + 1ULL; else 
                                                                    #line 5768 
                                                                    tmp_2 = 0ULL;
      #line 5768 
      ;
      #line 5768 
      if (tmp_2 >= (unsigned long long)np->register_size) {
        #line 5770 
        addr = (unsigned long)pci_dev->resource[i].start;
        #line 5771 
        break;
      }
    }
    #line 5767 
    i ++;
  }
  #line 5774 
  if (i == 17) {
    #line 5775 
    _dev_info(& pci_dev->dev,(char *)"Couldn\'t find register window\n");
    #line 5776 
    goto out_relreg;
  }
  #line 5780 
  np->driver_data = (unsigned int)id->driver_data;
  #line 5782 
  np->device_id = id->device;
  #line 5785 
  if ((id->driver_data & 8UL) != 0UL) {
    #line 5787 
    np->desc_ver = 3U;
    #line 5788 
    np->txrxctl_bits = 12591616U;
    #line 5789 
    if (dma_64bit != 0) {
      #line 5790 
      if (pci_set_dma_mask(pci_dev,549755813887ULL) != 0) 
                                                          #line 5791 
                                                          _dev_info(& pci_dev->dev,(char *)"64-bit DMA failed, using 32-bit addressing\n"); else 
                                                                    #line 5794 
                                                                    dev->features |= 32ULL;
      #line 5795 
      if (pci_set_consistent_dma_mask(pci_dev,549755813887ULL) != 0) 
        #line 5796 
        _dev_info(& pci_dev->dev,(char *)"64-bit DMA (consistent) failed, using 32-bit ring buffers\n");
    }
  }
  else 
    #line 5800 
    if ((id->driver_data & 4UL) != 0UL) {
      #line 5802 
      np->desc_ver = 2U;
      #line 5803 
      np->txrxctl_bits = 8448U;
    }
    else {
      #line 5806 
      np->desc_ver = 1U;
      #line 5807 
      np->txrxctl_bits = 0U;
    }
  #line 5810 
  np->pkt_limit = 1500U;
  #line 5811 
  if ((id->driver_data & 4UL) != 0UL) 
                                      #line 5812 
                                      np->pkt_limit = 9100U;
  #line 5814 
  if ((id->driver_data & 16UL) != 0UL) {
    #line 5815 
    np->txrxctl_bits |= 1024U;
    #line 5816 
    dev->hw_features |= 549755879427ULL;
  }
  #line 5820 
  np->vlanctl_bits = 0U;
  #line 5821 
  if ((id->driver_data & 32UL) != 0UL) {
    #line 5822 
    np->vlanctl_bits = 8192U;
    #line 5823 
    dev->hw_features |= 384ULL;
  }
  #line 5827 
  dev->features |= dev->hw_features;
  #line 5830 
  dev->hw_features |= 2199023255552ULL;
  #line 5833 
  dev->min_mtu = 64U;
  #line 5834 
  dev->max_mtu = np->pkt_limit;
  #line 5836 
  np->pause_flags = 81U;
  #line 5837 
  if (((id->driver_data & 65536UL) != 0UL || (id->driver_data & 131072UL) != 0UL) || (id->driver_data & 262144UL) != 0UL) 
    #line 5840 
    np->pause_flags |= 34U;
  #line 5843 
  err = -12;
  #line 5844 
  np->base = ioremap((unsigned long long)addr,(unsigned long)np->register_size);
  #line 5845 
  if (np->base == (void *)0) 
                             #line 5846 
                             goto out_relreg;
  #line 5848 
  np->rx_ring_size = 512;
  #line 5849 
  np->tx_ring_size = 256;
  #line 5851 
  if (nv_optimized(np)) {
    #line 5862 
    np->rx_ring.ex = (struct ring_desc_ex *)dma_alloc_coherent(& pci_dev->dev,(unsigned long)(np->rx_ring_size + np->tx_ring_size) * 16UL,& np->ring_addr,3264U);
    #line 5867 
    if (np->rx_ring.ex == (struct ring_desc_ex *)0) 
                                                    #line 5868 
                                                    goto out_unmap;
    #line 5869 
    np->tx_ring.ex = np->rx_ring.ex + (unsigned long)np->rx_ring_size;
  }
  else {
    #line 5852 
    np->rx_ring.orig = (struct ring_desc *)dma_alloc_coherent(& pci_dev->dev,(unsigned long)(np->rx_ring_size + np->tx_ring_size) * 8UL,& np->ring_addr,3264U);
    #line 5858 
    if (np->rx_ring.orig == (struct ring_desc *)0) 
                                                   #line 5859 
                                                   goto out_unmap;
    #line 5860 
    np->tx_ring.orig = np->rx_ring.orig + (unsigned long)np->rx_ring_size;
  }
  #line 5871 
  np->rx_skb = (struct nv_skb_map *)kcalloc((unsigned long)np->rx_ring_size,40UL,3264U);
  #line 5872 
  np->tx_skb = (struct nv_skb_map *)kcalloc((unsigned long)np->tx_ring_size,40UL,3264U);
  #line 5873 
  if (np->rx_skb == (struct nv_skb_map *)0 || np->tx_skb == (struct nv_skb_map *)0) 
    #line 5874 
    goto out_freering;
  #line 5876 
  if (nv_optimized(np)) 
                        #line 5879 
                        dev->netdev_ops = & nv_netdev_ops_optimized; else 
                                                                    #line 5877 
                                                                    dev->netdev_ops = & nv_netdev_ops;
  #line 5881 
  netif_napi_add(dev,& np->napi,& nv_napi_poll,64);
  #line 5882 
  dev->ethtool_ops = & ops;
  #line 5883 
  dev->watchdog_timeo = 1250;
  #line 5885 
  pci_set_drvdata(pci_dev,(void *)dev);
  #line 5888 
  base = get_hwbase(dev);
  #line 5889 
  np->orig_mac[0] = readl((void *)(base + 168U));
  #line 5890 
  np->orig_mac[1] = readl((void *)(base + 172U));
  #line 5893 
  txreg = readl((void *)(base + 268U));
  #line 5894 
  if ((id->driver_data & 16384UL) != 0UL) {
    #line 5896 
    *(dev->dev_addr) = (unsigned char)np->orig_mac[0];
    #line 5897 
    *(dev->dev_addr + 1U) = (unsigned char)(np->orig_mac[0] >> 8);
    #line 5898 
    *(dev->dev_addr + 2U) = (unsigned char)(np->orig_mac[0] >> 16);
    #line 5899 
    *(dev->dev_addr + 3U) = (unsigned char)(np->orig_mac[0] >> 24);
    #line 5900 
    *(dev->dev_addr + 4U) = (unsigned char)np->orig_mac[1];
    #line 5901 
    *(dev->dev_addr + 5U) = (unsigned char)(np->orig_mac[1] >> 8);
  }
  else 
    #line 5902 
    if ((txreg & 32768U) != 0U) {
      #line 5904 
      *(dev->dev_addr) = (unsigned char)np->orig_mac[0];
      #line 5905 
      *(dev->dev_addr + 1U) = (unsigned char)(np->orig_mac[0] >> 8);
      #line 5906 
      *(dev->dev_addr + 2U) = (unsigned char)(np->orig_mac[0] >> 16);
      #line 5907 
      *(dev->dev_addr + 3U) = (unsigned char)(np->orig_mac[0] >> 24);
      #line 5908 
      *(dev->dev_addr + 4U) = (unsigned char)np->orig_mac[1];
      #line 5909 
      *(dev->dev_addr + 5U) = (unsigned char)(np->orig_mac[1] >> 8);
      #line 5915 
      np->orig_mac[0] = (unsigned int)((((int)*(dev->dev_addr + 5U) + ((int)*(dev->dev_addr + 4U) << 8)) + ((int)*(dev->dev_addr + 3U) << 16)) + ((int)*(dev->dev_addr + 2U) << 24));
      #line 5917 
      np->orig_mac[1] = (unsigned int)((int)*(dev->dev_addr + 1U) + ((int)*(dev->dev_addr) << 8));
    }
    else {
      #line 5920 
      *(dev->dev_addr) = (unsigned char)(np->orig_mac[1] >> 8);
      #line 5921 
      *(dev->dev_addr + 1U) = (unsigned char)np->orig_mac[1];
      #line 5922 
      *(dev->dev_addr + 2U) = (unsigned char)(np->orig_mac[0] >> 24);
      #line 5923 
      *(dev->dev_addr + 3U) = (unsigned char)(np->orig_mac[0] >> 16);
      #line 5924 
      *(dev->dev_addr + 4U) = (unsigned char)(np->orig_mac[0] >> 8);
      #line 5925 
      *(dev->dev_addr + 5U) = (unsigned char)np->orig_mac[0];
      #line 5926 
      writel(txreg | 32768U,(void *)(base + 268U));
      {
        #line 5927 
        bool branch;
        #line 5927 
        struct _ddebug __UNIQUE_ID_ddebug449 = {.modname = (char *)"forcedeth", .function = (char *)"nv_probe", .filename = (char *)"/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c", .format = (char *)"%s: set workaround bit for reversed mac addr\n", .lineno = (unsigned int)5927U, .flags = (unsigned int)0U, .key = {.dd_key_false = {.key = {.enabled = {.counter = 0}, .__anonCompField_static_key_4 = {.entries = (struct jump_entry *)0}}}}};
        #line 5927 
        branch = arch_static_branch(& __UNIQUE_ID_ddebug449.key.dd_key_false.key,(_Bool)0);
        #line 5927 
        if ((long)((long)((int)branch != 0)) != 0L) 
                                                    #line 5927 
                                                    __dynamic_dev_dbg(& __UNIQUE_ID_ddebug449,& pci_dev->dev,(char *)"%s: set workaround bit for reversed mac addr\n",(char *)"nv_probe");
      }
    }
  #line 5932 
  if (! is_valid_ether_addr(dev->dev_addr)) {
    #line 5937 
    _dev_err(& pci_dev->dev,(char *)"Invalid MAC address detected: %pM - Please complain to your hardware vendor.\n",dev->dev_addr);
    #line 5940 
    eth_hw_addr_random(dev);
    #line 5941 
    _dev_err(& pci_dev->dev,(char *)"Using random MAC address: %pM\n",dev->dev_addr);
  }
  #line 5946 
  nv_copy_mac_to_hw(dev);
  #line 5949 
  writel(0U,(void *)(base + 512U));
  #line 5950 
  np->wolenabled = 0;
  #line 5951 
  device_set_wakeup_enable(& pci_dev->dev,(_Bool)0);
  #line 5953 
  if ((id->driver_data & 256UL) != 0UL) {
    #line 5956 
    powerstate = readl((void *)(base + 1536U));
    #line 5957 
    powerstate &= 4294963434U;
    #line 5958 
    if ((id->driver_data & 8388608UL) != 0UL && (unsigned int)pci_dev->revision > 162U) 
      #line 5960 
      powerstate |= 1U;
    #line 5961 
    writel(powerstate,(void *)(base + 1536U));
  }
  #line 5964 
  if (np->desc_ver == 1U) 
                          #line 5965 
                          np->tx_flags = 2147483648U; else 
                                                           #line 5967 
                                                           np->tx_flags = 2147483648U;
  #line 5969 
  np->msi_flags = 0U;
  #line 5970 
  if ((id->driver_data & 64UL) != 0UL && msi != 0) 
                                                   #line 5971 
                                                   np->msi_flags |= 16U;
  #line 5973 
  if ((id->driver_data & 128UL) != 0UL && msix != 0) ;
  #line 5982 
  if (optimization_mode == 1) {
    #line 5983 
    np->irqmask = 96U;
    #line 5984 
    if ((np->msi_flags & 32U) != 0U) 
                                     #line 5985 
                                     np->msi_flags |= 1U;
  }
  else 
    #line 5986 
    if (optimization_mode == 2 && (id->driver_data & 1UL) == 0UL) {
      #line 5989 
      np->irqmask = 223U;
      #line 5991 
      np->msi_flags &= 4294967263U;
    }
    else {
      #line 5993 
      optimization_mode = 0;
      #line 5994 
      np->irqmask = 223U;
      #line 5995 
      if ((np->msi_flags & 32U) != 0U) 
                                       #line 5996 
                                       np->msi_flags |= 3U;
    }
  #line 5999 
  if ((id->driver_data & 1UL) != 0UL) 
                                      #line 6000 
                                      np->irqmask |= 32U;
  #line 6001 
  if ((id->driver_data & 2UL) != 0UL) {
    #line 6002 
    np->need_linktimer = 1;
    #line 6003 
    np->link_timeout = jiffies + 750UL;
  }
  else 
       #line 6005 
       np->need_linktimer = 0;
  #line 6009 
  if ((id->driver_data & 524288UL) != 0UL) {
    #line 6010 
    np->tx_limit = 1;
    #line 6011 
    if ((id->driver_data & 1572864UL) == 1572864UL && (unsigned int)pci_dev->revision > 161U) 
      #line 6013 
      np->tx_limit = 0;
  }
  #line 6017 
  writel(0U,(void *)(base + 388U));
  #line 6018 
  phystate = readl((void *)(base + 392U));
  #line 6019 
  if ((phystate & 1048576U) != 0U) {
    #line 6020 
    phystate_orig = 1U;
    #line 6021 
    phystate &= 4293918719U;
    #line 6022 
    writel(phystate,(void *)(base + 392U));
  }
  #line 6024 
  writel(15U,(void *)(base + 384U));
  #line 6026 
  if ((id->driver_data & 8192UL) != 0UL) {
    #line 6028 
    if ((readl((void *)(base + 132U)) & 1073741824U) != 0U) {
      #line 6028 
      if ((readl((void *)(base + 132U)) & 262144U) != 0U) {
        #line 6029 
        if (nv_mgmt_acquire_sema(dev) != 0) {
          #line 6030 
          if (nv_mgmt_get_version(dev) != 0) {
            #line 6032 
            np->mac_in_use = 1U;
            #line 6033 
            if (np->mgmt_version > 0) {
              #line 6034 
              np->mac_in_use = readl((void *)(base + 632U)) & 131072U;
            }
            #line 6036 
            if (np->mac_in_use != 0U) {
              #line 6036 
              if ((readl((void *)(base + 132U)) & 983040U) == 262144U) 
                #line 6040 
                phyinitialized = 1; else 
                                         #line 6036 
                                         goto _LAND;
            }
            else 
                 #line 6036 
                 _LAND: ;
          }
        }
      }
    }
  }
  #line 6048 
  i = 1;
  #line 6048 
  while (i <= 32) {
    {
      #line 6049 
      int id1;
      #line 6049 
      int id2;
      #line 6050 
      int phyaddr = i & 31;
      #line 6052 
      cif_spin_lock_irq_lock_of_fe_priv(& np->lock);
      #line 6053 
      id1 = mii_rw(dev,phyaddr,2,-1);
      #line 6054 
      cif_spin_unlock_irq_lock_of_fe_priv(& np->lock);
      #line 6055 
      if (id1 < 0 || id1 == 65535) 
                                   #line 6056 
                                   goto __Cont;
      #line 6057 
      cif_spin_lock_irq_lock_of_fe_priv(& np->lock);
      #line 6058 
      id2 = mii_rw(dev,phyaddr,3,-1);
      #line 6059 
      cif_spin_unlock_irq_lock_of_fe_priv(& np->lock);
      #line 6060 
      if (id2 < 0 || id2 == 65535) 
                                   #line 6061 
                                   goto __Cont;
      #line 6063 
      np->phy_model = (unsigned int)id2 & 1008U;
      #line 6064 
      id1 = (id1 << 6) & 65535;
      #line 6065 
      id2 = (id2 >> 10) & 63;
      #line 6066 
      np->phyaddr = phyaddr;
      #line 6067 
      np->phy_oui = (unsigned int)(id1 | id2);
      #line 6070 
      if (np->phy_oui == 32U) 
                              #line 6071 
                              np->phy_oui = 1842U;
      #line 6073 
      if (np->phy_oui == 1842U && np->phy_model == 272U) {
        #line 6074 
        np->phy_rev = (unsigned int)mii_rw(dev,phyaddr,23,-1) & 1U;
      }
      #line 6076 
      break;
    }
    #line 6048 
    __Cont: 
            #line 6048 
    i ++;
  }
  #line 6078 
  if (i == 33) {
    #line 6079 
    _dev_info(& pci_dev->dev,(char *)"open: Could not find a valid PHY\n");
    #line 6080 
    goto out_error;
  }
  #line 6083 
  if (phyinitialized == 0) 
                           #line 6085 
                           phy_init(dev);
  else {
    #line 6088 
    u32 mii_status = (unsigned int)mii_rw(dev,np->phyaddr,1,-1);
    #line 6089 
    if ((mii_status & 256U) != 0U) 
                                   #line 6090 
                                   np->gigabit = (unsigned short)256U;
  }
  #line 6094 
  np->linkspeed = 66536U;
  #line 6095 
  np->duplex = 0;
  #line 6096 
  np->autoneg = 1;
  #line 6098 
  err = cif_register_netdev(dev);
  #line 6099 
  if (err != 0) {
    #line 6100 
    _dev_info(& pci_dev->dev,(char *)"unable to register netdev: %d\n",err);
    #line 6101 
    goto out_error;
  }
  #line 6104 
  netif_carrier_off(dev);
  #line 6110 
  nv_update_pause(dev,0U);
  #line 6111 
  nv_start_tx(dev);
  #line 6112 
  nv_stop_tx(dev);
  #line 6114 
  if ((id->driver_data & 32UL) != 0UL) 
                                       #line 6115 
                                       nv_vlan_mode(dev,dev->features);
  #line 6117 
  _dev_info(& pci_dev->dev,(char *)"ifname %s, PHY OUI 0x%x @ %d, addr %pM\n",(char *)(& dev->name),np->phy_oui,np->phyaddr,dev->dev_addr);
  #line 6120 
  ;
  #line 6120 
  if ((np->msi_flags & 32U) != 0U) 
                                   #line 6120 
                                   tmp_21 = (char *)"msi-x "; else 
                                                                   #line 6120 
                                                                   tmp_21 = (char *)"";
  #line 6120 
  if ((np->msi_flags & 16U) != 0U) 
                                   #line 6120 
                                   tmp_22 = (char *)"msi "; else 
                                                                 #line 6120 
                                                                 tmp_22 = (char *)"";
  #line 6120 
  if (np->need_linktimer != 0) 
                               #line 6120 
                               tmp_23 = (char *)"lnktim "; else 
                                                                #line 6120 
                                                                tmp_23 = (char *)"";
  #line 6120 
  if ((unsigned int)np->gigabit == 256U) 
                                         #line 6120 
                                         tmp_24 = (char *)"gbit "; else 
                                                                    #line 6120 
                                                                    tmp_24 = (char *)"";
  #line 6120 
  if ((id->driver_data & 1UL) != 0UL) 
                                      #line 6120 
                                      tmp_25 = (char *)"timirq "; else 
                                                                    #line 6120 
                                                                    tmp_25 = (char *)"";
  #line 6120 
  if ((id->driver_data & 8192UL) != 0UL) 
                                         #line 6120 
                                         tmp_26 = (char *)"mgmt "; else 
                                                                    #line 6120 
                                                                    tmp_26 = (char *)"";
  #line 6120 
  if ((id->driver_data & 256UL) != 0UL) 
                                        #line 6120 
                                        tmp_27 = (char *)"pwrctl "; else 
                                                                    #line 6120 
                                                                    tmp_27 = (char *)"";
  #line 6120 
  if ((dev->features & 2199023255552ULL) != 0ULL) 
                                                  #line 6120 
                                                  tmp_28 = (char *)"loopback "; else 
                                                                    #line 6120 
                                                                    tmp_28 = (char *)"";
  #line 6120 
  if ((dev->features & 384ULL) != 0ULL) 
                                        #line 6120 
                                        tmp_29 = (char *)"vlan "; else 
                                                                    #line 6120 
                                                                    tmp_29 = (char *)"";
  #line 6120 
  if ((dev->features & 3ULL) != 0ULL) 
                                      #line 6120 
                                      tmp_30 = (char *)"csum "; else 
                                                                  #line 6120 
                                                                  tmp_30 = (char *)"";
  #line 6120 
  if ((dev->features & 32ULL) != 0ULL) 
                                       #line 6120 
                                       tmp_31 = (char *)"highdma "; else 
                                                                    #line 6120 
                                                                    tmp_31 = (char *)"";
  #line 6120 
  ;
  #line 6120 
  _dev_info(& pci_dev->dev,(char *)"%s%s%s%s%s%s%s%s%s%s%sdesc-v%u\n",tmp_31,tmp_30,tmp_29,tmp_28,tmp_27,tmp_26,tmp_25,tmp_24,tmp_23,tmp_22,tmp_21,np->desc_ver);
  #line 6138 
  return 0;
  #line 6140 
  out_error: 
             #line 6140 
  ;
  #line 6141 
  if (phystate_orig != 0U) 
                           #line 6142 
                           writel(phystate | 1048576U,(void *)(base + 392U));
  #line 6143 
  out_freering: 
                #line 6143 
  ;
  #line 6144 
  free_rings(dev);
  #line 6145 
  out_unmap: 
             #line 6145 
  ;
  #line 6146 
  iounmap((void *)get_hwbase(dev));
  #line 6147 
  out_relreg: 
              #line 6147 
  ;
  #line 6148 
  pci_release_regions(pci_dev);
  #line 6149 
  out_disable: 
               #line 6149 
  ;
  #line 6150 
  pci_disable_device(pci_dev);
  #line 6151 
  out_free: 
            #line 6151 
  ;
  #line 6152 
  free_percpu((void *)np->txrx_stats);
  #line 6153 
  out_alloc_percpu: 
                    #line 6153 
  ;
  #line 6154 
  cif_free_netdev(dev);
  #line 6155 
  out: 
       #line 6155 
  ;
  #line 6156 
  return err;
}

#line 6159  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
static void nv_restore_phy(struct net_device *dev)
{
  #line 6162 
  u16 phy_reserved;
  #line 6162 
  u16 mii_control;
  #line 6161 
  struct fe_priv *np = netdev_priv(dev);
  #line 6164 
  if ((np->phy_oui == 1842U && np->phy_model == 512U) && phy_cross == 0) {
    #line 6167 
    mii_rw(dev,np->phyaddr,31,1);
    #line 6168 
    phy_reserved = (unsigned short)mii_rw(dev,np->phyaddr,25,-1);
    #line 6169 
    phy_reserved = (unsigned short)((unsigned int)phy_reserved & 65532U);
    #line 6170 
    phy_reserved = (unsigned short)((unsigned int)phy_reserved | 3U);
    #line 6171 
    mii_rw(dev,np->phyaddr,25,(int)phy_reserved);
    #line 6172 
    mii_rw(dev,np->phyaddr,31,0);
    #line 6175 
    mii_control = (unsigned short)mii_rw(dev,np->phyaddr,0,-1);
    #line 6176 
    mii_control = (unsigned short)((unsigned int)mii_control | 4608U);
    #line 6177 
    mii_rw(dev,np->phyaddr,0,(int)mii_control);
  }
  #line 6179 
  return;
}

#line 6181  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
static void nv_restore_mac_addr(struct pci_dev *pci_dev)
{
  #line 6183 
  struct net_device *dev = pci_get_drvdata(pci_dev);
  #line 6184 
  struct fe_priv *np = netdev_priv(dev);
  #line 6185 
  u8 *base = get_hwbase(dev);
  #line 6190 
  writel(np->orig_mac[0],(void *)(base + 168U));
  #line 6191 
  writel(np->orig_mac[1],(void *)(base + 172U));
  #line 6192 
  ;
  #line 6192 
  writel(readl((void *)(base + 268U)) & 4294934527U,(void *)(base + 268U));
  #line 6194 
  return;
}

#line 6196  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
static void nv_remove(struct pci_dev *pci_dev)
{
  #line 6198 
  struct net_device *dev = pci_get_drvdata(pci_dev);
  #line 6199 
  struct fe_priv *np = netdev_priv(dev);
  #line 6201 
  free_percpu((void *)np->txrx_stats);
  #line 6203 
  cif_unregister_netdev(dev);
  #line 6205 
  nv_restore_mac_addr(pci_dev);
  #line 6208 
  nv_restore_phy(dev);
  #line 6210 
  nv_mgmt_release_sema(dev);
  #line 6213 
  free_rings(dev);
  #line 6214 
  iounmap((void *)get_hwbase(dev));
  #line 6215 
  pci_release_regions(pci_dev);
  #line 6216 
  pci_disable_device(pci_dev);
  #line 6217 
  cif_free_netdev(dev);
  #line 6218 
  return;
}

#line 6221  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
static int nv_suspend(struct device *device)
{
  #line 6226 
  int i;
  #line 6223 
  struct net_device *dev = dev_get_drvdata(device);
  #line 6224 
  struct fe_priv *np = netdev_priv(dev);
  #line 6225 
  u8 *base = get_hwbase(dev);
  #line 6228 
  if ((int)netif_running(dev) != 0) 
                                    #line 6230 
                                    nv_close(dev);
  #line 6232 
  netif_device_detach(dev);
  #line 6235 
  i = 0;
  #line 6235 
  while ((unsigned long)i <= (unsigned long)(np->register_size / 4U)) {
    #line 6236 
    np->saved_config_space[i] = readl((void *)(base + (unsigned long)i * 4UL));
    #line 6235 
    i ++;
  }
  #line 6238 
  return 0;
}

#line 6241  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
static int nv_resume(struct device *device)
{
  #line 6243 
  void *__mptr;
  #line 6247 
  int i;
  #line 6243 
  __mptr = (void *)device;
  #line 6243 
  struct pci_dev *pdev = ((struct pci_dev *)(__mptr + 18446744073709551440U));
  #line 6244 
  struct net_device *dev = pci_get_drvdata(pdev);
  #line 6245 
  struct fe_priv *np = netdev_priv(dev);
  #line 6246 
  u8 *base = get_hwbase(dev);
  #line 6247 
  int rc = 0;
  #line 6250 
  i = 0;
  #line 6250 
  while ((unsigned long)i <= (unsigned long)(np->register_size / 4U)) {
    #line 6251 
    writel(np->saved_config_space[i],(void *)(base + (unsigned long)i * 4UL));
    #line 6250 
    i ++;
  }
  #line 6253 
  if ((np->driver_data & 16777216U) != 0U) 
                                           #line 6254 
                                           pci_write_config_dword(pdev,104,4294967295U);
  #line 6257 
  phy_init(dev);
  #line 6259 
  netif_device_attach(dev);
  #line 6260 
  if ((int)netif_running(dev) != 0) {
    #line 6261 
    rc = nv_open(dev);
    #line 6262 
    nv_set_multicast(dev);
  }
  #line 6264 
  return rc;
}

#line 6267  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
static struct dev_pm_ops nv_pm_ops = {.suspend = & nv_suspend, .resume = & nv_resume, .freeze = & nv_suspend, .thaw = & nv_resume, .poweroff = & nv_suspend, .restore = & nv_resume};
#line 6275  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
static void nv_shutdown(struct pci_dev *pdev)
{
  #line 6277 
  struct net_device *dev = pci_get_drvdata(pdev);
  #line 6278 
  struct fe_priv *np = netdev_priv(dev);
  #line 6280 
  if ((int)netif_running(dev) != 0) 
                                    #line 6281 
                                    nv_close(dev);
  #line 6288 
  if (system_state != (unsigned int)SYSTEM_POWER_OFF) 
                                                      #line 6289 
                                                      nv_restore_mac_addr(pdev);
  #line 6291 
  pci_disable_device(pdev);
  #line 6296 
  if (system_state == (unsigned int)SYSTEM_POWER_OFF) {
    #line 6297 
    pci_wake_from_d3(pdev,(_Bool)(np->wolenabled != 0));
    #line 6298 
    pci_set_power_state(pdev,3);
  }
  #line 6300 
  return;
}

#line 6305  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
static struct pci_device_id pci_tbl[41U] = {{.vendor = 4318U, .device = 451U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 3UL}, {.vendor = 4318U, .device = 102U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 3UL}, {.vendor = 4318U, .device = 214U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 3UL}, {.vendor = 4318U, .device = 134U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 23UL}, {.vendor = 4318U, .device = 140U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 23UL}, {.vendor = 4318U, .device = 230U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 23UL}, {.vendor = 4318U, .device = 223U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 23UL}, {.vendor = 4318U, .device = 86U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 524830UL}, {.vendor = 4318U, .device = 87U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 524830UL}, {.vendor = 4318U, .device = 55U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 524830UL}, {.vendor = 4318U, .device = 56U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 524830UL}, {.vendor = 4318U, .device = 616U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 8389386UL}, {.vendor = 4318U, .device = 617U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 8389386UL}, {.vendor = 4318U, .device = 882U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 17381374UL}, {.vendor = 4318U, .device = 883U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 17381374UL}, {.vendor = 4318U, .device = 997U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 16873290UL}, {.vendor = 4318U, .device = 998U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 16873290UL}, {.vendor = 4318U, .device = 1006U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 16873290UL}, {.vendor = 4318U, .device = 1007U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 16873290UL}, {.vendor = 4318U, .device = 1104U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 19494734UL}, {.vendor = 4318U, .device = 1105U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 19494734UL}, {.vendor = 4318U, .device = 1106U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 19494734UL}, {.vendor = 4318U, .device = 1107U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 19494734UL}, {.vendor = 4318U, .device = 1356U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 18970442UL}, {.vendor = 4318U, .device = 1357U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 18970442UL}, {.vendor = 4318U, .device = 1358U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 18970442UL}, {.vendor = 4318U, .device = 1359U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 18970442UL}, {.vendor = 4318U, .device = 2012U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 19003210UL}, {.vendor = 4318U, .device = 2013U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 19003210UL}, {.vendor = 4318U, .device = 2014U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 19003210UL}, {.vendor = 4318U, .device = 2015U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 19003210UL}, {.vendor = 4318U, .device = 1888U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 24837978UL}, {.vendor = 4318U, .device = 1889U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 24837978UL}, {.vendor = 4318U, .device = 1890U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 24837978UL}, {.vendor = 4318U, .device = 1891U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 24837978UL}, {.vendor = 4318U, .device = 2736U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 24960862UL}, {.vendor = 4318U, .device = 2737U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 24960862UL}, {.vendor = 4318U, .device = 2738U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 24960862UL}, {.vendor = 4318U, .device = 2739U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 24960862UL}, {.vendor = 4318U, .device = 3453U, .subvendor = 4294967295U, .subdevice = 4294967295U, .driver_data = 6610782UL}};
#line 6469  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
static struct pci_driver forcedeth_pci_driver = {.name = (char *)"forcedeth", .id_table = (struct pci_device_id *)(& pci_tbl), .probe = & nv_probe, .remove = & nv_remove, .shutdown = & nv_shutdown, .driver = {.pm = & nv_pm_ops}};
#line 6498  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
static int forcedeth_pci_driver_init(void)
{
  #line 6498 
  return cif___pci_register_driver(& forcedeth_pci_driver,& __this_module,
                                (char *)"forcedeth");
}

#line 6498  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
static void forcedeth_pci_driver_exit(void)
{
  #line 6498 
  cif_pci_unregister_driver(& forcedeth_pci_driver);
  #line 6499 
  return;
}

#line 6502  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/drivers/net/ethernet/nvidia/forcedeth.c"
struct pci_device_id __mod_pci__pci_tbl_device_table[41U];
#line 93  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/0/concurrency safety/weaver/forcedeth.i.aux"
struct pci_driver *emg_alias_forcedeth_pci_driver = & forcedeth_pci_driver;
#line 94  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/0/concurrency safety/weaver/forcedeth.i.aux"
struct dev_pm_ops *emg_alias_nv_pm_ops = & nv_pm_ops;
#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/0/concurrency safety/weaver/forcedeth.i.aux"
struct pci_device_id (*emg_alias_pci_tbl)[41U] = & pci_tbl;
#line 98 
#line 98 
int emg___pci_register_driver(struct pci_driver *arg0, struct module *arg1, char *arg2);
#line 99 
#line 99 
struct net_device *emg_alloc_etherdev_mqs(int arg0, unsigned int arg1, unsigned int arg2);
#line 100 
#line 100 
int emg_del_timer_sync(struct timer_list *arg0);
#line 101 
#line 101 
void *emg_free_irq(unsigned int arg0, void *arg1);
#line 102 
#line 102 
void emg_free_netdev(struct net_device *arg0);
#line 103 
#line 103 
int emg_mod_timer(struct timer_list *arg0, unsigned long arg1);
#line 104 
#line 104 
void emg_pci_unregister_driver(struct pci_driver *arg0);
#line 105 
#line 105 
int emg_register_netdev(struct net_device *arg0);
#line 106 
#line 106 
int emg_request_irq(unsigned int arg0, enum irqreturn (*arg1)(int , void *), unsigned long arg2, char *arg3, void *arg4);
#line 107 
#line 107 
void emg_unregister_netdev(struct net_device *arg0);
#line 111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/0/concurrency safety/weaver/forcedeth.i.aux"
int emg_wrapper_nv_change_mtu(struct net_device *arg0, int arg1)
{
  #line 112 
  return nv_change_mtu(arg0,arg1);
}

#line 116  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/0/concurrency safety/weaver/forcedeth.i.aux"
int emg_wrapper_nv_close(struct net_device *arg0)
{
  #line 117 
  return nv_close(arg0);
}

#line 121  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/0/concurrency safety/weaver/forcedeth.i.aux"
unsigned long long emg_wrapper_nv_fix_features(struct net_device *arg0, unsigned long long arg1)
{
  #line 122 
  return nv_fix_features(arg0,arg1);
}

#line 126  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/0/concurrency safety/weaver/forcedeth.i.aux"
void emg_wrapper_nv_get_drvinfo(struct net_device *arg0, struct ethtool_drvinfo *arg1)
{
  #line 127 
  nv_get_drvinfo(arg0,arg1);
  #line 128 
  return;
}

#line 131  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/0/concurrency safety/weaver/forcedeth.i.aux"
void emg_wrapper_nv_get_ethtool_stats(struct net_device *arg0, struct ethtool_stats *arg1, unsigned long long *arg2)
{
  #line 132 
  nv_get_ethtool_stats(arg0,arg1,arg2);
  #line 133 
  return;
}

#line 136  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/0/concurrency safety/weaver/forcedeth.i.aux"
int emg_wrapper_nv_get_link_ksettings(struct net_device *arg0, struct ethtool_link_ksettings *arg1)
{
  #line 137 
  return nv_get_link_ksettings(arg0,arg1);
}

#line 141  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/0/concurrency safety/weaver/forcedeth.i.aux"
void emg_wrapper_nv_get_pauseparam(struct net_device *arg0, struct ethtool_pauseparam *arg1)
{
  #line 142 
  nv_get_pauseparam(arg0,arg1);
  #line 143 
  return;
}

#line 146  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/0/concurrency safety/weaver/forcedeth.i.aux"
void emg_wrapper_nv_get_regs(struct net_device *arg0, struct ethtool_regs *arg1, void *arg2)
{
  #line 147 
  nv_get_regs(arg0,arg1,arg2);
  #line 148 
  return;
}

#line 151  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/0/concurrency safety/weaver/forcedeth.i.aux"
int emg_wrapper_nv_get_regs_len(struct net_device *arg0)
{
  #line 152 
  return nv_get_regs_len(arg0);
}

#line 156  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/0/concurrency safety/weaver/forcedeth.i.aux"
void emg_wrapper_nv_get_ringparam(struct net_device *arg0, struct ethtool_ringparam *arg1)
{
  #line 157 
  nv_get_ringparam(arg0,arg1);
  #line 158 
  return;
}

#line 161  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/0/concurrency safety/weaver/forcedeth.i.aux"
int emg_wrapper_nv_get_sset_count(struct net_device *arg0, int arg1)
{
  #line 162 
  return nv_get_sset_count(arg0,arg1);
}

#line 166  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/0/concurrency safety/weaver/forcedeth.i.aux"
void emg_wrapper_nv_get_stats64(struct net_device *arg0, struct rtnl_link_stats64 *arg1)
{
  #line 167 
  nv_get_stats64(arg0,arg1);
  #line 168 
  return;
}

#line 171  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/0/concurrency safety/weaver/forcedeth.i.aux"
void emg_wrapper_nv_get_strings(struct net_device *arg0, unsigned int arg1, unsigned char *arg2)
{
  #line 172 
  nv_get_strings(arg0,arg1,arg2);
  #line 173 
  return;
}

#line 176  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/0/concurrency safety/weaver/forcedeth.i.aux"
void emg_wrapper_nv_get_wol(struct net_device *arg0, struct ethtool_wolinfo *arg1)
{
  #line 177 
  nv_get_wol(arg0,arg1);
  #line 178 
  return;
}

#line 181  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/0/concurrency safety/weaver/forcedeth.i.aux"
enum irqreturn emg_wrapper_nv_nic_irq_other(int arg0, void *arg1)
{
  #line 182 
  return nv_nic_irq_other(arg0,arg1);
}

#line 186  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/0/concurrency safety/weaver/forcedeth.i.aux"
enum irqreturn emg_wrapper_nv_nic_irq_rx(int arg0, void *arg1)
{
  #line 187 
  return nv_nic_irq_rx(arg0,arg1);
}

#line 191  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/0/concurrency safety/weaver/forcedeth.i.aux"
enum irqreturn emg_wrapper_nv_nic_irq_tx(int arg0, void *arg1)
{
  #line 192 
  return nv_nic_irq_tx(arg0,arg1);
}

#line 196  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/0/concurrency safety/weaver/forcedeth.i.aux"
int emg_wrapper_nv_nway_reset(struct net_device *arg0)
{
  #line 197 
  return nv_nway_reset(arg0);
}

#line 201  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/0/concurrency safety/weaver/forcedeth.i.aux"
int emg_wrapper_nv_open(struct net_device *arg0)
{
  #line 202 
  return nv_open(arg0);
}

#line 206  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/0/concurrency safety/weaver/forcedeth.i.aux"
void emg_wrapper_nv_poll_controller(struct net_device *arg0)
{
  #line 207 
  nv_poll_controller(arg0);
  #line 208 
  return;
}

#line 211  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/0/concurrency safety/weaver/forcedeth.i.aux"
int emg_wrapper_nv_probe(struct pci_dev *arg0, struct pci_device_id *arg1)
{
  #line 212 
  return nv_probe(arg0,arg1);
}

#line 216  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/0/concurrency safety/weaver/forcedeth.i.aux"
void emg_wrapper_nv_remove(struct pci_dev *arg0)
{
  #line 217 
  nv_remove(arg0);
  #line 218 
  return;
}

#line 221  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/0/concurrency safety/weaver/forcedeth.i.aux"
int emg_wrapper_nv_resume(struct device *arg0)
{
  #line 222 
  return nv_resume(arg0);
}

#line 226  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/0/concurrency safety/weaver/forcedeth.i.aux"
void emg_wrapper_nv_self_test(struct net_device *arg0, struct ethtool_test *arg1, unsigned long long *arg2)
{
  #line 227 
  nv_self_test(arg0,arg1,arg2);
  #line 228 
  return;
}

#line 231  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/0/concurrency safety/weaver/forcedeth.i.aux"
int emg_wrapper_nv_set_features(struct net_device *arg0, unsigned long long arg1)
{
  #line 232 
  return nv_set_features(arg0,arg1);
}

#line 236  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/0/concurrency safety/weaver/forcedeth.i.aux"
int emg_wrapper_nv_set_link_ksettings(struct net_device *arg0, struct ethtool_link_ksettings *arg1)
{
  #line 237 
  return nv_set_link_ksettings(arg0,arg1);
}

#line 241  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/0/concurrency safety/weaver/forcedeth.i.aux"
int emg_wrapper_nv_set_mac_address(struct net_device *arg0, void *arg1)
{
  #line 242 
  return nv_set_mac_address(arg0,arg1);
}

#line 246  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/0/concurrency safety/weaver/forcedeth.i.aux"
void emg_wrapper_nv_set_multicast(struct net_device *arg0)
{
  #line 247 
  nv_set_multicast(arg0);
  #line 248 
  return;
}

#line 251  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/0/concurrency safety/weaver/forcedeth.i.aux"
int emg_wrapper_nv_set_pauseparam(struct net_device *arg0, struct ethtool_pauseparam *arg1)
{
  #line 252 
  return nv_set_pauseparam(arg0,arg1);
}

#line 256  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/0/concurrency safety/weaver/forcedeth.i.aux"
int emg_wrapper_nv_set_ringparam(struct net_device *arg0, struct ethtool_ringparam *arg1)
{
  #line 257 
  return nv_set_ringparam(arg0,arg1);
}

#line 261  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/0/concurrency safety/weaver/forcedeth.i.aux"
int emg_wrapper_nv_set_wol(struct net_device *arg0, struct ethtool_wolinfo *arg1)
{
  #line 262 
  return nv_set_wol(arg0,arg1);
}

#line 266  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/0/concurrency safety/weaver/forcedeth.i.aux"
void emg_wrapper_nv_shutdown(struct pci_dev *arg0)
{
  #line 267 
  nv_shutdown(arg0);
  #line 268 
  return;
}

#line 271  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/0/concurrency safety/weaver/forcedeth.i.aux"
enum netdev_tx emg_wrapper_nv_start_xmit(struct sk_buff *arg0, struct net_device *arg1)
{
  #line 272 
  return nv_start_xmit(arg0,arg1);
}

#line 276  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/0/concurrency safety/weaver/forcedeth.i.aux"
enum netdev_tx emg_wrapper_nv_start_xmit_optimized(struct sk_buff *arg0, struct net_device *arg1)
{
  #line 277 
  return nv_start_xmit_optimized(arg0,arg1);
}

#line 281  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/0/concurrency safety/weaver/forcedeth.i.aux"
int emg_wrapper_nv_suspend(struct device *arg0)
{
  #line 282 
  return nv_suspend(arg0);
}

#line 286  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/0/concurrency safety/weaver/forcedeth.i.aux"
void emg_wrapper_nv_tx_timeout(struct net_device *arg0)
{
  #line 287 
  nv_tx_timeout(arg0);
  #line 288 
  return;
}

#line 291  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/0/concurrency safety/weaver/forcedeth.i.aux"
void emg_forcedeth_pci_driver_exit(void)
{
  #line 292 
  forcedeth_pci_driver_exit();
  #line 293 
  return;
}

#line 295  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/0/concurrency safety/weaver/forcedeth.i.aux"
int emg_forcedeth_pci_driver_init(void)
{
  #line 296 
  return forcedeth_pci_driver_init();
}

#line 314  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/0/concurrency safety/weaver/forcedeth.i.aux"
static void cif_set_bit(long nr, unsigned long *addr)
{
  #line 317 
  ldv_set_bit(nr,addr);
  #line 318 
  return;
}

#line 321  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/0/concurrency safety/weaver/forcedeth.i.aux"
static void cif_clear_bit(long nr, unsigned long *addr)
{
  #line 324 
  ldv_clear_bit(nr,addr);
  #line 325 
  return;
}

#line 643  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/0/concurrency safety/weaver/forcedeth.i.aux"
static void *kmalloc_array(size_t n, size_t size, gfp_t flags)
{
  #line 646 
  return ldv_kmalloc_array(n,size,flags);
}

#line 650  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/0/concurrency safety/weaver/forcedeth.i.aux"
static void *kcalloc(size_t n, size_t size, gfp_t flags)
{
  #line 653 
  return ldv_kcalloc(n,size,flags);
}

#line 732  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/0/concurrency safety/weaver/forcedeth.i.aux"
static void cif_spin_lock__xmit_lock_of_netdev_queue(spinlock_t *lock)
{
  #line 735 
  ldv_spin_model_lock((char *)"_xmit_lock_of_netdev_queue");
  #line 737 
  spin_lock(lock);
  #line 738 
  return;
}

#line 772  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/0/concurrency safety/weaver/forcedeth.i.aux"
static void cif_spin_unlock__xmit_lock_of_netdev_queue(spinlock_t *lock)
{
  #line 775 
  ldv_spin_model_unlock((char *)"_xmit_lock_of_netdev_queue");
  #line 777 
  spin_unlock(lock);
  #line 778 
  return;
}

#line 790  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/0/concurrency safety/weaver/forcedeth.i.aux"
static void cif_spin_lock_tx_global_lock_of_net_device(spinlock_t *lock)
{
  #line 793 
  ldv_spin_model_lock((char *)"tx_global_lock_of_net_device");
  #line 795 
  spin_lock(lock);
  #line 796 
  return;
}

#line 799  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/0/concurrency safety/weaver/forcedeth.i.aux"
static void cif_spin_unlock_tx_global_lock_of_net_device(spinlock_t *lock)
{
  #line 802 
  ldv_spin_model_unlock((char *)"tx_global_lock_of_net_device");
  #line 804 
  spin_unlock(lock);
  #line 805 
  return;
}

#line 808  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/0/concurrency safety/weaver/forcedeth.i.aux"
static void cif_spin_lock_addr_list_lock_of_net_device(spinlock_t *lock)
{
  #line 811 
  ldv_spin_model_lock((char *)"addr_list_lock_of_net_device");
  #line 813 
  spin_lock(lock);
  #line 814 
  return;
}

#line 826  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/0/concurrency safety/weaver/forcedeth.i.aux"
static void cif_spin_unlock_addr_list_lock_of_net_device(spinlock_t *lock)
{
  #line 829 
  ldv_spin_model_unlock((char *)"addr_list_lock_of_net_device");
  #line 831 
  spin_unlock(lock);
  #line 832 
  return;
}

#line 844  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/0/concurrency safety/weaver/forcedeth.i.aux"
static void cif_spin_lock_bh_hwstats_lock_of_fe_priv(spinlock_t *lock)
{
  #line 847 
  ldv_spin_model_lock((char *)"hwstats_lock_of_fe_priv");
  #line 849 
  spin_lock_bh(lock);
  #line 850 
  return;
}

#line 853  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/0/concurrency safety/weaver/forcedeth.i.aux"
static void cif_spin_unlock_bh_hwstats_lock_of_fe_priv(spinlock_t *lock)
{
  #line 856 
  ldv_spin_model_unlock((char *)"hwstats_lock_of_fe_priv");
  #line 858 
  spin_unlock_bh(lock);
  #line 859 
  return;
}

#line 862  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/0/concurrency safety/weaver/forcedeth.i.aux"
static void cif___ldv_spin_lock_lock_of_fe_priv(spinlock_t *lock)
{
  #line 865 
  ldv_spin_model_lock((char *)"lock_of_fe_priv");
  #line 867 
  __ldv_spin_lock(lock);
  #line 868 
  return;
}

#line 871  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/0/concurrency safety/weaver/forcedeth.i.aux"
static void cif_spin_unlock_irqrestore_lock_of_fe_priv(spinlock_t *lock, unsigned long flags)
{
  #line 874 
  ldv_spin_model_unlock((char *)"lock_of_fe_priv");
  #line 876 
  spin_unlock_irqrestore(lock,flags);
  #line 877 
  return;
}

#line 880  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/0/concurrency safety/weaver/forcedeth.i.aux"
static void cif_spin_lock_irq_lock_of_fe_priv(spinlock_t *lock)
{
  #line 883 
  ldv_spin_model_lock((char *)"lock_of_fe_priv");
  #line 885 
  spin_lock_irq(lock);
  #line 886 
  return;
}

#line 889  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/0/concurrency safety/weaver/forcedeth.i.aux"
static void cif_spin_unlock_irq_lock_of_fe_priv(spinlock_t *lock)
{
  #line 892 
  ldv_spin_model_unlock((char *)"lock_of_fe_priv");
  #line 894 
  spin_unlock_irq(lock);
  #line 895 
  return;
}

#line 898  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/0/concurrency safety/weaver/forcedeth.i.aux"
static void cif_spin_lock_lock_of_fe_priv(spinlock_t *lock)
{
  #line 901 
  ldv_spin_model_lock((char *)"lock_of_fe_priv");
  #line 903 
  spin_lock(lock);
  #line 904 
  return;
}

#line 907  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/0/concurrency safety/weaver/forcedeth.i.aux"
static int cif_mod_timer(struct timer_list *timer, unsigned long expires)
{
  #line 911 
  return emg_mod_timer(timer,expires);
}

#line 915  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/0/concurrency safety/weaver/forcedeth.i.aux"
static void cif_spin_unlock_lock_of_fe_priv(spinlock_t *lock)
{
  #line 918 
  ldv_spin_model_unlock((char *)"lock_of_fe_priv");
  #line 920 
  spin_unlock(lock);
  #line 921 
  return;
}

#line 924  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/0/concurrency safety/weaver/forcedeth.i.aux"
static int cif_request_irq(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char *name, void *dev)
{
  #line 928 
  return emg_request_irq(irq,handler,flags,name,dev);
}

#line 932  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/0/concurrency safety/weaver/forcedeth.i.aux"
static void *cif_free_irq(unsigned int ldv_func_arg1, void *ldv_func_arg2)
{
  #line 936 
  return emg_free_irq(ldv_func_arg1,ldv_func_arg2);
}

#line 940  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/0/concurrency safety/weaver/forcedeth.i.aux"
static int cif_spin_trylock_hwstats_lock_of_fe_priv(spinlock_t *lock)
{
  #line 944 
  ldv_func_ret_type ldv_func_res = spin_trylock(lock);
  #line 946 
  int is_spin_held_by_another_thread = ldv_undef_int();
  #line 948 
  if (is_spin_held_by_another_thread != 0) 
                                           #line 951 
                                           return 0;
  else {
    #line 953 
    ldv_spin_model_lock((char *)"hwstats_lock_of_fe_priv");
    #line 955 
    return 1;
  }
  #line 958 
  return ldv_func_res;
}

#line 962  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/0/concurrency safety/weaver/forcedeth.i.aux"
static void cif_spin_unlock_hwstats_lock_of_fe_priv(spinlock_t *lock)
{
  #line 965 
  ldv_spin_model_unlock((char *)"hwstats_lock_of_fe_priv");
  #line 967 
  spin_unlock(lock);
  #line 968 
  return;
}

#line 971  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/0/concurrency safety/weaver/forcedeth.i.aux"
static int cif_del_timer_sync(struct timer_list *timer)
{
  #line 975 
  return emg_del_timer_sync(timer);
}

#line 979  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/0/concurrency safety/weaver/forcedeth.i.aux"
static struct net_device *cif_alloc_etherdev_mqs(int sizeof_priv, unsigned int txqs, unsigned int rxqs)
{
  #line 983 
  return emg_alloc_etherdev_mqs(sizeof_priv,txqs,rxqs);
}

#line 987  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/0/concurrency safety/weaver/forcedeth.i.aux"
static int cif_register_netdev(struct net_device *dev)
{
  #line 991 
  return emg_register_netdev(dev);
}

#line 995  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/0/concurrency safety/weaver/forcedeth.i.aux"
static void cif_free_netdev(struct net_device *dev)
{
  #line 999 
  emg_free_netdev(dev);
  #line 1000 
  return;
}

#line 1003  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/0/concurrency safety/weaver/forcedeth.i.aux"
static void cif_unregister_netdev(struct net_device *dev)
{
  #line 1007 
  emg_unregister_netdev(dev);
  #line 1008 
  return;
}

#line 1011  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/0/concurrency safety/weaver/forcedeth.i.aux"
static int cif___pci_register_driver(struct pci_driver *ldv_func_arg1, struct module *ldv_func_arg2, char *mod_name)
{
  #line 1015 
  return emg___pci_register_driver(ldv_func_arg1,ldv_func_arg2,mod_name);
}

#line 1019  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/0/concurrency safety/weaver/forcedeth.i.aux"
static void cif_pci_unregister_driver(struct pci_driver *dev)
{
  #line 1023 
  emg_pci_unregister_driver(dev);
  #line 1024 
  return;
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/common/inline_asm.c"
void ldv_inline_asm(void)
{
  #line 24 
  return;
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_add(int i, atomic_t *v)
{
  #line 22 
  v->counter += i;
  #line 23 
  return;
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_sub(int i, atomic_t *v)
{
  #line 27 
  v->counter -= i;
  #line 28 
  return;
}

#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_sub_and_test(int i, atomic_t *v)
{
  #line 32 
  v->counter -= i;
  #line 33 
  if (v->counter != 0) 
                       #line 34 
                       return 0;
  #line 36 
  return 1;
}

#line 39  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_inc(atomic_t *v)
{
  #line 41 
  (v->counter) ++;
  #line 42 
  return;
}

#line 44  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
void ldv_atomic_dec(atomic_t *v)
{
  #line 46 
  (v->counter) --;
  #line 47 
  return;
}

#line 49  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_dec_and_test(atomic_t *v)
{
  #line 51 
  (v->counter) --;
  #line 52 
  if (v->counter != 0) 
                       #line 53 
                       return 0;
  #line 55 
  return 1;
}

#line 58  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_inc_and_test(atomic_t *v)
{
  #line 60 
  (v->counter) ++;
  #line 61 
  if (v->counter != 0) 
                       #line 62 
                       return 0;
  #line 64 
  return 1;
}

#line 67  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_add_return(int i, atomic_t *v)
{
  #line 69 
  v->counter += i;
  #line 70 
  return v->counter;
}

#line 73  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_add_negative(int i, atomic_t *v)
{
  #line 75 
  v->counter += i;
  #line 76 
  return v->counter < 0;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/atomic.c"
int ldv_atomic_inc_short(short *v)
{
  #line 81 
  *v = (short)((unsigned int)*v + 1U);
  #line 82 
  return (int)*v;
}

#line 20  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/current.c"
static struct task_struct ldv_current;
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/arch/asm/current.c"
struct task_struct *ldv_get_current(void)
{
  #line 28 
  ldv_current.pid = 1;
  #line 29 
  return & ldv_current;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_interrupt_context(void);
#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_process_context(void);
#line 50  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
bool ldv_in_interrupt_context(void);
#line 112  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_init(int init_ret_val);
#line 132  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_probe(int probe_ret_val);
#line 133  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 133 
void ldv_check_return_value_probe(int);
#line 141 
#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_filter_err_code(int ret_val);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
#line 23 
void __VERIFIER_assume(int);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
static bool __ldv_in_interrupt_context = (_Bool)0;
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_interrupt_context(void)
{
  #line 31 
  __ldv_in_interrupt_context = (_Bool)1;
  #line 32 
  return;
}

#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
void ldv_switch_to_process_context(void)
{
  #line 37 
  __ldv_in_interrupt_context = (_Bool)0;
  #line 38 
  return;
}

#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
bool ldv_in_interrupt_context(void)
{
  #line 42 
  return __ldv_in_interrupt_context;
}

#line 45  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
static int ldv_filter_positive_int(int val)
{
  #line 47 
  __VERIFIER_assume(val <= 0);
  #line 48 
  return val;
}

#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_init(int init_ret_val)
{
  #line 57 
  return ldv_filter_positive_int(init_ret_val);
}

#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_post_probe(int probe_ret_val)
{
  #line 63 
  ldv_check_return_value_probe(probe_ret_val);
  #line 64 
  return ldv_filter_positive_int(probe_ret_val);
}

#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/common.c"
int ldv_filter_err_code(int ret_val)
{
  #line 70 
  return ldv_filter_positive_int(ret_val);
}

#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/common/list.h"
#line 28 
void ldv_save_allocated_memory_to_list(void *);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
void *ldv_dev_get_drvdata(struct device *dev);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/device.h"
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
int ldv_dev_set_drvdata(struct device *dev, void *data);
#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 57 
void *ldv_xzalloc(size_t size);
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
void *ldv_dev_get_drvdata(struct device *dev)
{
  #line 31 
  if (dev != (struct device *)0 && dev->p != (struct device_private *)0) 
    #line 32 
    return (dev->p)->driver_data;
  #line 34 
  return (void *)0;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
int ldv_dev_set_drvdata(struct device *dev, void *data)
{
  #line 45 
  dev->p = (struct device_private *)ldv_xzalloc(8UL);
  #line 46 
  ldv_save_allocated_memory_to_list((void *)dev->p);
  #line 47 
  (dev->p)->driver_data = data;
  #line 49 
  return 0;
}

#line 156  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 156 
void ldv_check_alloc_flags(gfp_t);
#line 48  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 48 
void *ldv_malloc(size_t size);
#line 49 
#line 49 
void *ldv_calloc(size_t nmemb, size_t size);
#line 50 
#line 50 
void *ldv_zalloc(size_t size);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kmalloc(size_t size, gfp_t flags)
{
  #line 26 
  void *res;
  #line 28 
  ldv_check_alloc_flags(flags);
  #line 29 
  res = ldv_malloc(size);
  #line 30 
  ldv_save_allocated_memory_to_list(res);
  #line 32 
  return res;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kzalloc(size_t size, gfp_t flags)
{
  #line 37 
  void *res;
  #line 39 
  ldv_check_alloc_flags(flags);
  #line 40 
  res = ldv_zalloc(size);
  #line 41 
  ldv_save_allocated_memory_to_list(res);
  #line 43 
  return res;
}

#line 46  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kmalloc_array(size_t n, size_t size, gfp_t flags)
{
  #line 48 
  void *res;
  #line 50 
  ldv_check_alloc_flags(flags);
  #line 51 
  res = ldv_malloc(n * size);
  #line 52 
  ldv_save_allocated_memory_to_list(res);
  #line 54 
  return res;
}

#line 57  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/devres.c"
void *ldv_devm_kcalloc(size_t n, size_t size, gfp_t flags)
{
  #line 59 
  void *res;
  #line 61 
  ldv_check_alloc_flags(flags);
  #line 62 
  res = ldv_calloc(n,size);
  #line 63 
  ldv_save_allocated_memory_to_list(res);
  #line 65 
  return res;
}

#line 51  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 51 
void ldv_free(void *s);
#line 59 
#line 59 
void *ldv_malloc_unknown_size(void);
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 31 
int ldv_undef_int_positive(void);
#line 40 
#line 40 
int ldv_undef_int_nonpositive(void);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/firmware_loader.c"
int ldv_request_firmware(struct firmware **fw)
{
  #line 27 
  int retval;
  #line 26 
  struct firmware *_fw = (struct firmware *)0;
  #line 29 
  retval = ldv_undef_int_nonpositive();
  #line 31 
  if (retval == 0) {
    #line 33 
    _fw = (struct firmware *)ldv_xzalloc(32UL);
    #line 34 
    _fw->data = (u8 *)ldv_malloc_unknown_size();
    #line 35 
    __VERIFIER_assume(_fw->data != (u8 *)0U);
    #line 36 
    _fw->size = (unsigned long)ldv_undef_int_positive();
  }
  #line 39 
  *fw = _fw;
  #line 41 
  return retval;
}

#line 44  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/base/firmware_loader.c"
void ldv_release_firmware(struct firmware *fw)
{
  #line 46 
  if (fw != (struct firmware *)0) {
    #line 48 
    ldv_free((void *)fw->data);
    #line 49 
    ldv_free((void *)fw);
  }
  #line 51 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/i2c.h"
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/i2c/i2c-core-smbus.c"
s32 ldv_i2c_smbus_read_block_data(u8 *values);
#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 55 
void *ldv_xmalloc(size_t size);
#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 34 
int ldv_undef_int_negative(void);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/i2c/i2c-core-smbus.c"
s32 ldv_i2c_smbus_read_block_data(u8 *values)
{
  #line 27 
  __u8 size;
  #line 28 
  char *bytes;
  #line 30 
  if (ldv_undef_int() != 0) {
    #line 33 
    size = (unsigned char)ldv_undef_int_positive();
    #line 35 
    __VERIFIER_assume((unsigned int)size <= 32U);
    #line 37 
    bytes = (char *)ldv_xmalloc((unsigned long)size);
    #line 39 
    memcpy((void *)values,(void *)bytes,(unsigned long)size);
    #line 40 
    ldv_free((void *)bytes);
    #line 42 
    return (int)size;
  }
  else {
    #line 46 
    return ldv_undef_int_negative();
  }
}

#line 988  "/mnt/klever/build_bases/build-base-linux-5.5-x86_64-allmodconfig/Storage/var/lib/klever/workspace/Branches-and-Tags-Processing/linux-5.5/include/media/v4l2-subdev.h"
__inline static void v4l2_set_subdevdata(struct v4l2_subdev *sd, void *p)
{
  #line 990 
  sd->dev_priv = p;
  #line 991 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/media/v4l2-common.h"
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/media/v4l2-core/v4l2-i2c.c"
void ldv_v4l2_i2c_subdev_init(struct v4l2_subdev *sd, struct i2c_client *client, struct v4l2_subdev_ops *ops_0);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/media/v4l2-core/v4l2-i2c.c"
void ldv_v4l2_i2c_subdev_init(struct v4l2_subdev *sd, struct i2c_client *client, struct v4l2_subdev_ops *ops_0)
{
  #line 26 
  sd->ops = ops_0;
  #line 27 
  v4l2_set_subdevdata(sd,(void *)client);
  #line 28 
  ldv_dev_set_drvdata(& client->dev,(void *)sd);
  #line 29 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/spi.c"
struct spi_controller *ldv_spi_alloc_master(struct device *host, unsigned int size)
{
  #line 25 
  struct spi_controller *master;
  #line 27 
  master = (struct spi_controller *)ldv_zalloc((unsigned long)size + 2936UL);
  #line 29 
  if (master == (struct spi_controller *)0) 
                                            #line 30 
                                            return (struct spi_controller *)0;
  #line 32 
  ldv_dev_set_drvdata(& master->dev,(void *)(master + 1U));
  #line 34 
  return master;
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/fb.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
struct fb_info *ldv_framebuffer_alloc(size_t size);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/fb.h"
#line 38  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
void ldv_framebuffer_release(struct fb_info *info);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
struct fb_info *ldv_framebuffer_alloc(size_t size)
{
  #line 25 
  struct fb_info *info;
  #line 27 
  info = (struct fb_info *)ldv_zalloc(size + 1568UL);
  #line 29 
  if (info == (struct fb_info *)0) 
                                   #line 30 
                                   return (struct fb_info *)0;
  #line 32 
  if (size != 0UL) 
                   #line 33 
                   info->par = (void *)((char *)info + 1568UL);
  #line 35 
  return info;
}

#line 38  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/drivers/video/fbdev/core/fbsysfs.c"
void ldv_framebuffer_release(struct fb_info *info)
{
  #line 40 
  if (info == (struct fb_info *)0) 
                                   #line 41 
                                   return;
  #line 44 
  ldv_free((void *)info->apertures);
  #line 46 
  ldv_free((void *)info);
  #line 47 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err(void *ptr);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err_or_null(void *ptr);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
void *ldv_err_ptr(long error);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/err.h"
#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
long ldv_ptr_err(void *ptr);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err(void *ptr)
{
  #line 29 
  if ((unsigned long)ptr > 18446744073709547520UL) 
                                                   #line 30 
                                                   return (_Bool)1; else 
                                                                    #line 32 
                                                                    return (_Bool)0;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
void *ldv_err_ptr(long error)
{
  #line 37 
  unsigned long result;
  #line 39 
  __VERIFIER_assume(error < 0L);
  #line 40 
  __VERIFIER_assume(error >= -4095L);
  #line 41 
  result = 18446744073709547520UL - (unsigned long)error;
  #line 42 
  __VERIFIER_assume(result > 18446744073709547520UL);
  #line 44 
  return (void *)result;
}

#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
long ldv_ptr_err(void *ptr)
{
  #line 49 
  long result;
  #line 51 
  __VERIFIER_assume((unsigned long)ptr > 18446744073709547520UL);
  #line 52 
  result = (long)(18446744073709547520UL - (unsigned long)ptr);
  #line 53 
  __VERIFIER_assume(result < 0L);
  #line 54 
  __VERIFIER_assume(result >= -4095L);
  #line 56 
  return result;
}

#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/err.c"
bool ldv_is_err_or_null(void *ptr)
{
  #line 61 
  int tmp_0;
  #line 61 
  if (ptr == (void *)0) 
                        #line 61 
                        tmp_0 = 1;
  else {
    #line 61 
    if ((int)ldv_is_err(ptr) != 0) 
                                   #line 61 
                                   tmp_0 = 1; else 
                                                   #line 61 
                                                   tmp_0 = 0;
  }
  #line 61 
  return (_Bool)(tmp_0 != 0);
}

#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/panic.h"
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/kernel/panic.c"
void ldv_panic(void);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/kernel/panic.c"
void ldv_panic(void)
{
  #line 23 
  __VERIFIER_assume(0);
  #line 24 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_set(unsigned long *map, unsigned int start, int nbits);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_clear(unsigned long *map, unsigned int start, int nbits);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 72  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_zero(unsigned long *dst, unsigned int nbits);
#line 29  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/bitmap.h"
#line 78  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
unsigned long ldv_bitmap_find_next_zero_area(unsigned long *map, unsigned long size, unsigned long start, unsigned int nr, unsigned long align_mask);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 22 
unsigned long ldv_find_next_bit(unsigned long *addr, unsigned long size, unsigned long offset);
#line 23 
#line 23 
unsigned long ldv_find_next_zero_bit(unsigned long *addr, unsigned long size, unsigned long offset);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_set_bit(long nr, unsigned long *addr)
{
  #line 24 
  *(addr + (unsigned long)nr / 64UL) |= 1UL << ((unsigned long)nr & 63UL);
  #line 25 
  return;
}

#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_clear_bit(long nr, unsigned long *addr)
{
  #line 29 
  *(addr + (unsigned long)nr / 64UL) &= ~ (1UL << ((unsigned long)nr & 63UL));
  #line 30 
  return;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_set(unsigned long *map, unsigned int start, int nbits)
{
  #line 34 
  unsigned long *p = map + (unsigned long)(start / 64U);
  #line 35 
  unsigned int size = start + (unsigned int)nbits;
  #line 36 
  int bits_to_set = (int)(64U - (start & 63U));
  #line 37 
  unsigned long mask_to_set = 18446744073709551615UL << ((unsigned long)start & 63UL);
  #line 39 
  while (nbits - bits_to_set >= 0) {
    #line 40 
    *p |= mask_to_set;
    #line 41 
    nbits -= bits_to_set;
    #line 42 
    bits_to_set = 64;
    #line 43 
    mask_to_set = 18446744073709551615UL;
    #line 44 
    p ++;
  }
  #line 46 
  if (nbits != 0) {
    #line 47 
    mask_to_set = (18446744073709551615UL >> ((unsigned long)(- size) & 63UL)) & mask_to_set;
    #line 48 
    *p |= mask_to_set;
  }
  #line 50 
  return;
}

#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_clear(unsigned long *map, unsigned int start, int nbits)
{
  #line 54 
  unsigned long *p = map + (unsigned long)(start / 64U);
  #line 55 
  unsigned int size = start + (unsigned int)nbits;
  #line 56 
  int bits_to_clear = (int)(64U - (start & 63U));
  #line 57 
  unsigned long mask_to_clear = 18446744073709551615UL << ((unsigned long)start & 63UL);
  #line 59 
  while (nbits - bits_to_clear >= 0) {
    #line 60 
    *p &= ~ mask_to_clear;
    #line 61 
    nbits -= bits_to_clear;
    #line 62 
    bits_to_clear = 64;
    #line 63 
    mask_to_clear = 18446744073709551615UL;
    #line 64 
    p ++;
  }
  #line 66 
  if (nbits != 0) {
    #line 67 
    mask_to_clear = (18446744073709551615UL >> ((unsigned long)(- size) & 63UL)) & mask_to_clear;
    #line 68 
    *p &= ~ mask_to_clear;
  }
  #line 70 
  return;
}

#line 72  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
void ldv_bitmap_zero(unsigned long *dst, unsigned int nbits)
{
  #line 74 
  unsigned int len = (unsigned int)(((unsigned long)nbits + 63UL) / 64UL) * 8U;
  #line 75 
  memset((void *)dst,0,(unsigned long)len);
  #line 76 
  return;
}

#line 78  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/bitmap.c"
unsigned long ldv_bitmap_find_next_zero_area(unsigned long *map, unsigned long size, unsigned long start, unsigned int nr, unsigned long align_mask)
{
  #line 80 
  unsigned long index;
  #line 80 
  unsigned long end;
  #line 80 
  unsigned long i;
  #line 82 
  again: 
         #line 82 
  ;
  #line 83 
  index = ldv_find_next_zero_bit(map,size,start);
  #line 84 
  index = (index + align_mask) & ~ align_mask;
  #line 85 
  end = (unsigned long)nr + index;
  #line 87 
  if (end > size) 
                  #line 88 
                  return end;
  #line 90 
  i = ldv_find_next_bit(map,end,index);
  #line 92 
  if (i < end) {
    #line 93 
    start = i + 1UL;
    #line 94 
    goto again;
  }
  #line 97 
  return index;
}

#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_first_bit(unsigned long *addr, unsigned long size);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/find_bit.h"
#line 25 
void ldv_check_find_bit_offset(unsigned long, unsigned long);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_ffs(unsigned long word)
{
  #line 23 
  int num = 0;
  #line 25 
  if ((word & 4294967295UL) == 0UL) {
    #line 26 
    num += 32;
    #line 27 
    word >>= 32;
  }
  #line 29 
  if ((word & 65535UL) == 0UL) {
    #line 30 
    num += 16;
    #line 31 
    word >>= 16;
  }
  #line 33 
  if ((word & 255UL) == 0UL) {
    #line 34 
    num += 8;
    #line 35 
    word >>= 8;
  }
  #line 37 
  if ((word & 15UL) == 0UL) {
    #line 38 
    num += 4;
    #line 39 
    word >>= 4;
  }
  #line 41 
  if ((word & 3UL) == 0UL) {
    #line 42 
    num += 2;
    #line 43 
    word >>= 2;
  }
  #line 45 
  if ((word & 1UL) == 0UL) 
                           #line 46 
                           num ++;
  #line 48 
  return (unsigned long)num;
}

#line 51  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_min(unsigned long a, unsigned long b)
{
  #line 53 
  if (a < b) 
             #line 54 
             return a;
  #line 56 
  return b;
}

#line 59  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
static unsigned long ldv_restrict_find_bit_res(unsigned long res, unsigned long size)
{
  #line 62 
  __VERIFIER_assume(1);
  #line 63 
  __VERIFIER_assume(res <= size);
  #line 65 
  return res;
}

#line 68  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_first_bit(unsigned long *addr, unsigned long size)
{
  #line 70 
  unsigned long i;
  #line 72 
  i = 0UL;
  #line 72 
  while (i * 64UL < size) {
    #line 73 
    if (*(addr + i) != 0UL) {
      #line 74 
      ;
      #line 74 
      ;
      #line 74 
      ;
      #line 74 
      return ldv_restrict_find_bit_res(ldv_min(i * 64UL + ldv_ffs(*(addr + i)),size),
                                  size);
    }
    #line 72 
    i ++;
  }
  #line 76 
  return size;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_next_bit(unsigned long *addr, unsigned long size, unsigned long offset)
{
  #line 81 
  unsigned long tmp;
  #line 83 
  ldv_check_find_bit_offset(size,offset);
  #line 85 
  tmp = *(addr + offset / 64UL);
  #line 86 
  tmp = (unsigned long)((18446744073709551615ULL << (offset & 63UL)) & (unsigned long long)tmp);
  #line 87 
  offset &= 18446744073709551552UL;
  #line 89 
  while (tmp == 0UL) {
    #line 90 
    offset += 64UL;
    #line 91 
    if (offset >= size) 
                        #line 92 
                        return size;
    #line 94 
    tmp = *(addr + offset / 64UL);
  }
  #line 97 
  ;
  #line 97 
  ;
  #line 97 
  ;
  #line 97 
  return ldv_restrict_find_bit_res(ldv_min(ldv_ffs(tmp) + offset,size),size);
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/find_bit.common.c"
unsigned long ldv_find_next_zero_bit(unsigned long *addr, unsigned long size, unsigned long offset)
{
  #line 102 
  unsigned long tmp;
  #line 104 
  ldv_check_find_bit_offset(size,offset);
  #line 106 
  tmp = *(addr + offset / 64UL);
  #line 107 
  tmp = ~ tmp;
  #line 108 
  tmp = (unsigned long)((18446744073709551615ULL << (offset & 63UL)) & (unsigned long long)tmp);
  #line 109 
  offset &= 18446744073709551552UL;
  #line 111 
  while (tmp == 0UL) {
    #line 112 
    offset += 64UL;
    #line 113 
    if (offset >= size) 
                        #line 114 
                        return size;
    #line 116 
    tmp = *(addr + offset / 64UL);
    #line 117 
    tmp = ~ tmp;
  }
  #line 120 
  ;
  #line 120 
  ;
  #line 120 
  ;
  #line 120 
  return ldv_restrict_find_bit_res(ldv_min(ldv_ffs(tmp) + offset,size),size);
}

#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
size_t ldv_strlen(char *s);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strcmp(char *cs, char *ct);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strncmp(char *cs, char *ct, __kernel_size_t count);
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 70  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
char *ldv_strstr(char *cs, char *ct);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
size_t ldv_strlen(char *s)
{
  #line 23 
  unsigned int len = 0U;
  #line 25 
  while ((int)*s != 0) {
    #line 26 
    len ++;
    #line 25 
    s ++;
  }
  #line 28 
  return (unsigned long)len;
}

#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strcmp(char *cs, char *ct)
{
  #line 33 
  while ((int)*cs != 0 && (int)*ct != 0) {
    #line 34 
    if ((int)*cs != (int)*ct) 
                              #line 35 
                              break;
    #line 33 
    cs ++;
    #line 33 
    ct ++;
  }
  #line 37 
  return (int)*cs - (int)*ct;
}

#line 40  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_strncmp(char *cs, char *ct, __kernel_size_t count)
{
  #line 42 
  if (count == 0UL) 
                    #line 43 
                    return 0;
  #line 45 
  while ((int)*cs != 0 && (int)*ct != 0) {
    #line 46 
    if ((int)*cs != (int)*ct) 
                              #line 47 
                              break;
    #line 49 
    count --;
    #line 51 
    if (count == 0UL) 
                      #line 52 
                      break;
    #line 45 
    cs ++;
    #line 45 
    ct ++;
  }
  #line 55 
  return (int)*cs - (int)*ct;
}

#line 58  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
int ldv_memcmp(void *cs, void *ct, size_t count)
{
  #line 60 
  unsigned char *su1;
  #line 60 
  unsigned char *su2;
  #line 61 
  int res = 0;
  #line 63 
  su1 = (unsigned char *)cs;
  #line 63 
  su2 = (unsigned char *)ct;
  #line 63 
  while (count != 0UL) {
    #line 64 
    res = (int)*su1 - (int)*su2;
    #line 64 
    if (res != 0) 
                  #line 65 
                  break;
    #line 63 
    su1 ++;
    #line 63 
    su2 ++;
    #line 63 
    count --;
  }
  #line 67 
  return res;
}

#line 70  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/lib/string.c"
char *ldv_strstr(char *cs, char *ct)
{
  #line 72 
  size_t cs_len;
  #line 72 
  size_t ct_len;
  #line 74 
  cs_len = ldv_strlen(cs);
  #line 75 
  ct_len = ldv_strlen(ct);
  #line 77 
  while (cs_len >= ct_len) {
    #line 78 
    if (ldv_memcmp((void *)cs,(void *)ct,ct_len) == 0) 
                                                       #line 79 
                                                       return cs;
    #line 81 
    cs_len --;
    #line 82 
    cs ++;
  }
  #line 85 
  return (char *)0;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/list.h"
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/list.c"
void ldv_init_list_head(struct list_head *list);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/list.c"
void ldv_init_list_head(struct list_head *list)
{
  #line 23 
  list->next = list;
  #line 24 
  list->prev = list;
  #line 25 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kzalloc(size_t size, gfp_t flags);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc(size_t size, gfp_t flags);
#line 30  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct kmem_cache *ldv_kmem_cache_create(char *name, unsigned int size);
#line 31  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_alloc(struct kmem_cache *cachep, gfp_t flags);
#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_zalloc(struct kmem_cache *cachep, gfp_t flags);
#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_free(struct kmem_cache *cachep, void *objp);
#line 34  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/slab.h"
#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_destroy(struct kmem_cache *cachep);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc(size_t size, gfp_t flags)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_flags(flags);
  #line 28 
  res = ldv_malloc(size);
  #line 30 
  return res;
}

#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kzalloc(size_t size, gfp_t flags)
{
  #line 35 
  void *res;
  #line 37 
  ldv_check_alloc_flags(flags);
  #line 38 
  res = ldv_zalloc(size);
  #line 40 
  return res;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc_array(size_t n, size_t size, gfp_t flags)
{
  #line 45 
  void *res;
  #line 47 
  ldv_check_alloc_flags(flags);
  #line 48 
  res = ldv_malloc(n * size);
  #line 50 
  return res;
}

#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kcalloc(size_t n, size_t size, gfp_t flags)
{
  #line 55 
  void *res;
  #line 57 
  ldv_check_alloc_flags(flags);
  #line 58 
  res = ldv_calloc(n,size);
  #line 60 
  return res;
}

#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
struct kmem_cache *ldv_kmem_cache_create(char *name, unsigned int size)
{
  #line 71 
  struct kmem_cache *res;
  #line 72 
  struct ldv_kmem_cache *ldv_res;
  #line 74 
  res = (struct kmem_cache *)ldv_zalloc(16UL);
  #line 76 
  if (res != (struct kmem_cache *)0) {
    #line 77 
    ldv_res = (struct ldv_kmem_cache *)res;
    #line 78 
    ldv_res->name = name;
    #line 79 
    ldv_res->size = size;
  }
  #line 82 
  return res;
}

#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_alloc(struct kmem_cache *cachep, gfp_t flags)
{
  #line 87 
  return ldv_kmalloc((unsigned long)((struct ldv_kmem_cache *)cachep)->size,
                  flags);
}

#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmem_cache_zalloc(struct kmem_cache *cachep, gfp_t flags)
{
  #line 92 
  return ldv_kzalloc((unsigned long)((struct ldv_kmem_cache *)cachep)->size,
                  flags);
}

#line 95  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_free(struct kmem_cache *cachep, void *objp)
{
  #line 97 
  ldv_free(objp);
  #line 98 
  return;
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void ldv_kmem_cache_destroy(struct kmem_cache *cachep)
{
  #line 102 
  ldv_free((void *)cachep);
  #line 103 
  return;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/string.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/util.c"
void *ldv_kmemdup(void *src, size_t len, gfp_t gfp);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/util.c"
void *ldv_kmemdup(void *src, size_t len, gfp_t gfp)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_flags(gfp);
  #line 28 
  res = ldv_malloc(len);
  #line 30 
  if (res != (void *)0) 
                        #line 31 
                        memcpy(res,src,len);
  #line 33 
  return res;
}

#line 162  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 162 
void ldv_check_alloc_nonatomic(void);
#line 21  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/vmalloc.h"
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vmalloc(unsigned long size);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/vmalloc.h"
#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vzalloc(unsigned long size);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/vmalloc.h"
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void ldv_vfree(void *addr);
#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vmalloc(unsigned long size)
{
  #line 25 
  void *res;
  #line 27 
  ldv_check_alloc_nonatomic();
  #line 28 
  res = ldv_malloc(size);
  #line 30 
  return res;
}

#line 33  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void *ldv_vzalloc(unsigned long size)
{
  #line 35 
  void *res;
  #line 37 
  ldv_check_alloc_nonatomic();
  #line 38 
  res = ldv_zalloc(size);
  #line 40 
  return res;
}

#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/mm/vmalloc.c"
void ldv_vfree(void *addr)
{
  #line 45 
  ldv_free(addr);
  #line 46 
  return;
}

#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 28 
void *malloc(size_t);
#line 29 
#line 29 
void *calloc(size_t, size_t);
#line 30 
#line 30 
void free(void *);
#line 45 
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
unsigned int ldv_is_memory_alloc_failures;
#line 56  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xcalloc(size_t nmemb, size_t size);
#line 60  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc_unknown_size(void);
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 97  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc_unknown_size(void);
#line 64  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc(size_t size);
#line 65  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc(size_t nmemb, size_t size);
#line 66  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc(size_t size);
#line 67  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void ldv_reference_free(void *s);
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_realloc(void *ptr, size_t size);
#line 71  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 80  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc(size_t size);
#line 72  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xcalloc(size_t nmemb, size_t size);
#line 73  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xzalloc(size_t size);
#line 75  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 110  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc_unknown_size(void);
#line 76  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 124  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc_unknown_size(void);
#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc_unknown_size(void);
#line 83  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 106  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc_unknown_size(size_t size);
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 144  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc_unknown_size(size_t size);
#line 87  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/memory.h"
#line 87 
void *external_allocated_data(void);
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
unsigned int ldv_is_memory_alloc_failures = 1U;
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc(size_t size)
{
  #line 26 
  void *res;
  #line 28 
  if (ldv_is_memory_alloc_failures != 0U) {
    #line 28 
    if (ldv_undef_int() != 0) 
                              #line 29 
                              return (void *)0;
  }
  #line 32 
  res = malloc(size);
  #line 33 
  __VERIFIER_assume(res != (void *)0);
  #line 34 
  return res;
}

#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc(size_t nmemb, size_t size)
{
  #line 39 
  return calloc(nmemb,size);
}

#line 42  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc(size_t size)
{
  #line 44 
  return calloc(1UL,size);
}

#line 47  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void ldv_reference_free(void *s)
{
  #line 49 
  free(s);
  #line 50 
  return;
}

#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_realloc(void *ptr, size_t size)
{
  #line 54 
  void *res;
  #line 56 
  if (ptr != (void *)0 && size == 0UL) {
    #line 57 
    free(ptr);
    #line 58 
    return (void *)0;
  }
  #line 61 
  if (ptr == (void *)0) {
    #line 62 
    res = malloc(size);
    #line 63 
    return res;
  }
  #line 66 
  if (ldv_undef_int() != 0) {
    #line 68 
    res = malloc(size);
    #line 69 
    __VERIFIER_assume(res != (void *)0);
    #line 71 
    memcpy(res,ptr,size);
    #line 72 
    free(ptr);
    #line 74 
    return res;
  }
  else 
       #line 77 
       return (void *)0;
}

#line 80  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc(size_t size)
{
  #line 82 
  void *res;
  #line 84 
  res = malloc(size);
  #line 85 
  __VERIFIER_assume(res != (void *)0);
  #line 87 
  return res;
}

#line 90  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xcalloc(size_t nmemb, size_t size)
{
  #line 92 
  void *res;
  #line 94 
  res = calloc(nmemb,size);
  #line 95 
  __VERIFIER_assume(res != (void *)0);
  #line 97 
  return res;
}

#line 100  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xzalloc(size_t size)
{
  #line 102 
  void *res;
  #line 104 
  res = calloc(1UL,size);
  #line 105 
  __VERIFIER_assume(res != (void *)0);
  #line 107 
  return res;
}

#line 110  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc_unknown_size(void)
{
  #line 112 
  void *res;
  #line 114 
  if (ldv_undef_int() != 0) {
    #line 116 
    res = external_allocated_data();
    #line 117 
    __VERIFIER_assume(res != (void *)0);
    #line 118 
    return res;
  }
  else 
       #line 121 
       return (void *)0;
}

#line 124  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc_unknown_size(void)
{
  #line 126 
  void *res;
  #line 128 
  if (ldv_undef_int() != 0) {
    #line 130 
    res = external_allocated_data();
    #line 131 
    memset(res,0,8UL);
    #line 132 
    __VERIFIER_assume(res != (void *)0);
    #line 133 
    return res;
  }
  else 
       #line 136 
       return (void *)0;
}

#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc_unknown_size(void)
{
  #line 141 
  return ldv_reference_calloc_unknown_size();
}

#line 144  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc_unknown_size(size_t size)
{
  #line 146 
  void *res;
  #line 149 
  res = external_allocated_data();
  #line 150 
  __VERIFIER_assume(res != (void *)0);
  #line 152 
  return res;
}

#line 23  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_malloc(size_t size)
{
  #line 25 
  void *res;
  #line 26 
  res = ldv_reference_malloc(size);
  #line 27 
  if (res != (void *)0) {
    #line 28 
    int tmp_0;
    #line 28 
    if (ldv_is_err(res)) 
                         #line 28 
                         tmp_0 = 0; else 
                                         #line 28 
                                         tmp_0 = 1;
    #line 28 
    __VERIFIER_assume(tmp_0);
  }
  #line 29 
  return res;
}

#line 32  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc(size_t nmemb, size_t size)
{
  #line 34 
  void *res;
  #line 35 
  res = ldv_reference_calloc(nmemb,size);
  #line 36 
  if (res != (void *)0) {
    #line 37 
    int tmp_0;
    #line 37 
    if (ldv_is_err(res)) 
                         #line 37 
                         tmp_0 = 0; else 
                                         #line 37 
                                         tmp_0 = 1;
    #line 37 
    __VERIFIER_assume(tmp_0);
  }
  #line 38 
  return res;
}

#line 41  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc(size_t size)
{
  #line 43 
  void *res;
  #line 44 
  res = ldv_reference_zalloc(size);
  #line 45 
  if (res != (void *)0) {
    #line 46 
    int tmp_0;
    #line 46 
    if (ldv_is_err(res)) 
                         #line 46 
                         tmp_0 = 0; else 
                                         #line 46 
                                         tmp_0 = 1;
    #line 46 
    __VERIFIER_assume(tmp_0);
  }
  #line 47 
  return res;
}

#line 50  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void ldv_free(void *s)
{
  #line 52 
  ldv_reference_free(s);
  #line 53 
  return;
}

#line 55  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc(size_t size)
{
  #line 57 
  void *res;
  #line 59 
  int tmp_0;
  #line 58 
  res = ldv_reference_xmalloc(size);
  #line 59 
  if (ldv_is_err(res)) 
                       #line 59 
                       tmp_0 = 0; else 
                                       #line 59 
                                       tmp_0 = 1;
  #line 59 
  __VERIFIER_assume(tmp_0);
  #line 60 
  return res;
}

#line 63  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xcalloc(size_t nmemb, size_t size)
{
  #line 65 
  void *res;
  #line 67 
  int tmp_0;
  #line 66 
  res = ldv_reference_xcalloc(nmemb,size);
  #line 67 
  if (ldv_is_err(res)) 
                       #line 67 
                       tmp_0 = 0; else 
                                       #line 67 
                                       tmp_0 = 1;
  #line 67 
  __VERIFIER_assume(tmp_0);
  #line 68 
  return res;
}

#line 71  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xzalloc(size_t size)
{
  #line 73 
  void *res;
  #line 75 
  int tmp_0;
  #line 74 
  res = ldv_reference_xzalloc(size);
  #line 75 
  if (ldv_is_err(res)) 
                       #line 75 
                       tmp_0 = 0; else 
                                       #line 75 
                                       tmp_0 = 1;
  #line 75 
  __VERIFIER_assume(tmp_0);
  #line 76 
  return res;
}

#line 79  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_malloc_unknown_size(void)
{
  #line 81 
  void *res;
  #line 82 
  res = ldv_reference_malloc_unknown_size();
  #line 83 
  if (res != (void *)0) {
    #line 84 
    int tmp_0;
    #line 84 
    if (ldv_is_err(res)) 
                         #line 84 
                         tmp_0 = 0; else 
                                         #line 84 
                                         tmp_0 = 1;
    #line 84 
    __VERIFIER_assume(tmp_0);
  }
  #line 85 
  return res;
}

#line 88  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc_unknown_size(void)
{
  #line 90 
  void *res;
  #line 91 
  res = ldv_reference_calloc_unknown_size();
  #line 92 
  if (res != (void *)0) {
    #line 93 
    int tmp_0;
    #line 93 
    if (ldv_is_err(res)) 
                         #line 93 
                         tmp_0 = 0; else 
                                         #line 93 
                                         tmp_0 = 1;
    #line 93 
    __VERIFIER_assume(tmp_0);
  }
  #line 94 
  return res;
}

#line 97  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc_unknown_size(void)
{
  #line 99 
  void *res;
  #line 100 
  res = ldv_reference_zalloc_unknown_size();
  #line 101 
  if (res != (void *)0) {
    #line 102 
    int tmp_0;
    #line 102 
    if (ldv_is_err(res)) 
                         #line 102 
                         tmp_0 = 0; else 
                                         #line 102 
                                         tmp_0 = 1;
    #line 102 
    __VERIFIER_assume(tmp_0);
  }
  #line 103 
  return res;
}

#line 106  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc_unknown_size(size_t size)
{
  #line 108 
  void *res;
  #line 110 
  int tmp_0;
  #line 109 
  res = ldv_reference_xmalloc_unknown_size(size);
  #line 110 
  if (ldv_is_err(res)) 
                       #line 110 
                       tmp_0 = 0; else 
                                       #line 110 
                                       tmp_0 = 1;
  #line 110 
  __VERIFIER_assume(tmp_0);
  #line 111 
  return res;
}

/* compiler builtin: 
   long __builtin_expect(long exp, long c);   */
#line 22  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
#line 22 
void __VERIFIER_error(void);
#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/common.h"
long __builtin_expect(long exp, long c)
{
  #line 26 
  return exp;
}

#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/gcc.c"
void __builtin_trap(void)
{
  #line 37 
  __VERIFIER_error();
  #line 38 
  return;
}

#line 24  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
long ldv_undef_long(void);
#line 25  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned int ldv_undef_uint(void);
#line 26  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long ldv_undef_ulong(void);
#line 27  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long long ldv_undef_ulonglong(void);
#line 28  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr(void);
#line 37  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonnegative(void);
#line 43  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr_non_null(void);
#line 54  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range(int begin, int end);
#line 56  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/nondet.h"
#line 151  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range2(int begin, int end);
#line 29 
#line 29 
int __VERIFIER_nondet_int(void);
#line 31 
#line 31 
long __VERIFIER_nondet_long(void);
#line 38 
#line 38 
unsigned int __VERIFIER_nondet_uint(void);
#line 41 
#line 41 
unsigned long __VERIFIER_nondet_ulong(void);
#line 42 
#line 42 
unsigned long long __VERIFIER_nondet_ulonglong(void);
#line 43 
#line 43 
void *__VERIFIER_nondet_pointer(void);
#line 45  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int(void)
{
  #line 48 
  int undef_int = __VERIFIER_nondet_int();
  #line 50 
  return undef_int;
}

#line 53  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
long ldv_undef_long(void)
{
  #line 56 
  long undef_long = __VERIFIER_nondet_long();
  #line 58 
  return undef_long;
}

#line 61  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned int ldv_undef_uint(void)
{
  #line 64 
  unsigned int undef_uint = __VERIFIER_nondet_uint();
  #line 66 
  return undef_uint;
}

#line 69  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr(void)
{
  #line 72 
  void *undef_ptr = __VERIFIER_nondet_pointer();
  #line 74 
  return undef_ptr;
}

#line 77  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long ldv_undef_ulong(void)
{
  #line 80 
  unsigned long undef_ulong = __VERIFIER_nondet_ulong();
  #line 82 
  return undef_ulong;
}

#line 85  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long long ldv_undef_ulonglong(void)
{
  #line 88 
  unsigned long long undef_ulonglong = __VERIFIER_nondet_ulonglong();
  #line 90 
  return undef_ulonglong;
}

#line 93  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_positive(void)
{
  #line 95 
  int ret = ldv_undef_int();
  #line 97 
  __VERIFIER_assume(ret > 0);
  #line 99 
  return ret;
}

#line 102  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_negative(void)
{
  #line 104 
  int ret = ldv_undef_int();
  #line 106 
  __VERIFIER_assume(ret < 0);
  #line 108 
  return ret;
}

#line 111  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonnegative(void)
{
  #line 113 
  int ret = ldv_undef_int();
  #line 115 
  __VERIFIER_assume(ret >= 0);
  #line 117 
  return ret;
}

#line 120  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonpositive(void)
{
  #line 122 
  int ret = ldv_undef_int();
  #line 124 
  __VERIFIER_assume(ret <= 0);
  #line 126 
  return ret;
}

#line 129  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr_non_null(void)
{
  #line 131 
  void *ret = ldv_undef_ptr();
  #line 133 
  __VERIFIER_assume(ret != (void *)0);
  #line 135 
  return ret;
}

#line 139  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range(int begin, int end)
{
  #line 141 
  int ret;
  #line 143 
  ret = ldv_undef_int();
  #line 144 
  __VERIFIER_assume(ret >= begin);
  #line 145 
  __VERIFIER_assume(ret <= end);
  #line 147 
  return ret;
}

#line 151  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __ldv_undef_int_range2(int begin, int end)
{
  #line 153 
  int ret;
  #line 155 
  ret = begin;
  #line 155 
  while (ret < end) {
    #line 156 
    if (ldv_undef_int() != 0) 
                              #line 157 
                              break;
    #line 155 
    ret ++;
  }
  #line 159 
  return ret;
}

#line 62  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/linux/common.h"
#line 62 
void ldv_initialize(void);
#line 97 
#line 97 
void ldv_failed_register_netdev(void);
#line 123 
#line 123 
void ldv_pre_probe(void);
#line 35  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/root/specifications/include/ldv/verifier/thread.h"
#line 35 
int pthread_create(pthread_t *, pthread_attr_t *, void *(*)(void *), void *);
#line 39 
#line 39 
int pthread_join(pthread_t, void **);
#line 51  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/emg/0/environment_model.c"
int emg_runtime_enabled = 0;
#line 52  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/emg/0/environment_model.c"
int emg_runtime_lowpower = 1;
#line 96 
#line 252 
void emg_dispatch_deregister_11(struct net_device *arg0);
#line 97 
#line 190 
void emg_dispatch_deregister_8(struct pci_driver *arg0);
#line 98 
#line 143 
void emg_dispatch_instance_deregister_4(struct timer_list *arg0);
#line 99 
#line 179 
void emg_dispatch_instance_register_7(struct timer_list *arg0);
#line 100 
#line 152 
void emg_dispatch_irq_deregister_5(int arg0);
#line 101 
#line 210 
void emg_dispatch_irq_register_10(int arg0, enum irqreturn (*arg1)(int , void *), enum irqreturn (*arg2)(int , void *), void *arg3);
#line 102 
#line 132 
void emg_dispatch_register_2(struct pci_driver *arg0);
#line 103 
#line 199 
void emg_dispatch_register_9(struct net_device *arg0);
#line 104 
#line 2383 
void *emg_entry_point_insmod(void *arg0);
#line 107 
#line 261 
void *emg_interrupt_interrupt_scenario_nv_nic_irq_other(void *arg0);
#line 108 
#line 324 
void *emg_interrupt_interrupt_scenario_nv_nic_irq_rx(void *arg0);
#line 109 
#line 387 
void *emg_interrupt_interrupt_scenario_nv_nic_irq_tx(void *arg0);
#line 111 
#line 450 
void *emg_net_random_allocationless_scenario_nv_tx_timeout(void *arg0);
#line 112 
#line 920 
void *emg_pci_pci_scenario_forcedeth_pci_driver(void *arg0);
#line 114 
#line 1096 
void *emg_pm_pm_ops_scenario_nv_pm_ops(void *arg0);
#line 117 
#line 2091 
void *emg_timer_timer_scenario_6(void *arg0);
#line 119 
#line 2412 
int main(void);
#line 122  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_12;
#line 123  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_13;
#line 124  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_14;
#line 125  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_15;
#line 126  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_16;
#line 127  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_17;
#line 128  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/emg/0/environment_model.c"
pthread_t emg_thread_18;
#line 132  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_register_2(struct pci_driver *arg0)
{
  #line 133 
  int ret;
  #line 134 
  struct emg_struct_pci_scenario_forcedeth_pci_driver_16 *cf_arg_16;
  #line 135 
  cf_arg_16 = (struct emg_struct_pci_scenario_forcedeth_pci_driver_16 *)ldv_xmalloc(16UL);
  #line 136 
  cf_arg_16->arg0 = arg0;
  #line 137 
  ret = pthread_create(& emg_thread_16,(pthread_attr_t *)0,& emg_pci_pci_scenario_forcedeth_pci_driver,(void *)cf_arg_16);
  #line 138 
  __VERIFIER_assume(ret == 0);
  #line 139 
  return;
}

#line 143  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_instance_deregister_4(struct timer_list *arg0)
{
  #line 144 
  int ret;
  #line 145 
  struct emg_struct_timer_scenario_6_18 *cf_arg_18;
  #line 146 
  ret = pthread_join(emg_thread_18,(void **)0);
  #line 147 
  __VERIFIER_assume(ret == 0);
  #line 148 
  return;
}

#line 152  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_irq_deregister_5(int arg0)
{
  #line 153 
  int ret;
  #line 154 
  struct emg_struct_free_irq_5 *cf_arg_12;
  #line 155 
  struct emg_struct_free_irq_5 *cf_arg_13;
  #line 156 
  struct emg_struct_free_irq_5 *cf_arg_14;
  #line 157 
  switch (ldv_undef_int()) {
    #line 158 
    case 0: 
            #line 158 
    ;
    #line 159 
    ret = pthread_join(emg_thread_12,(void **)0);
    #line 160 
    __VERIFIER_assume(ret == 0);
    #line 161 
    break;
    #line 163 
    case 1: 
            #line 163 
    ;
    #line 164 
    ret = pthread_join(emg_thread_13,(void **)0);
    #line 165 
    __VERIFIER_assume(ret == 0);
    #line 166 
    break;
    #line 168 
    case 2: 
            #line 168 
    ;
    #line 169 
    ret = pthread_join(emg_thread_14,(void **)0);
    #line 170 
    __VERIFIER_assume(ret == 0);
    #line 171 
    break;
    #line 173 
    default: 
             #line 173 
    ;
    #line 173 
    __VERIFIER_assume(0);
  }
  #line 175 
  return;
}

#line 179  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_instance_register_7(struct timer_list *arg0)
{
  #line 180 
  int ret;
  #line 181 
  struct emg_struct_timer_scenario_6_18 *cf_arg_18;
  #line 182 
  cf_arg_18 = (struct emg_struct_timer_scenario_6_18 *)ldv_xmalloc(16UL);
  #line 183 
  cf_arg_18->arg0 = arg0;
  #line 184 
  ret = pthread_create(& emg_thread_18,(pthread_attr_t *)0,& emg_timer_timer_scenario_6,(void *)cf_arg_18);
  #line 185 
  __VERIFIER_assume(ret == 0);
  #line 186 
  return;
}

#line 190  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_deregister_8(struct pci_driver *arg0)
{
  #line 191 
  int ret;
  #line 192 
  struct emg_struct_pci_scenario_forcedeth_pci_driver_16 *cf_arg_16;
  #line 193 
  ret = pthread_join(emg_thread_16,(void **)0);
  #line 194 
  __VERIFIER_assume(ret == 0);
  #line 195 
  return;
}

#line 199  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_register_9(struct net_device *arg0)
{
  #line 200 
  int ret;
  #line 201 
  struct emg_struct_random_allocationless_scenario_nv_tx_timeout_15 *cf_arg_15;
  #line 202 
  cf_arg_15 = (struct emg_struct_random_allocationless_scenario_nv_tx_timeout_15 *)ldv_xmalloc(16UL);
  #line 203 
  cf_arg_15->arg0 = arg0;
  #line 204 
  ret = pthread_create(& emg_thread_15,(pthread_attr_t *)0,& emg_net_random_allocationless_scenario_nv_tx_timeout,(void *)cf_arg_15);
  #line 205 
  __VERIFIER_assume(ret == 0);
  #line 206 
  return;
}

#line 210  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_irq_register_10(int arg0, enum irqreturn (*arg1)(int , void *), enum irqreturn (*arg2)(int , void *), void *arg3)
{
  #line 211 
  int ret;
  #line 212 
  struct emg_struct_interrupt_scenario_nv_nic_irq_other_12 *cf_arg_12;
  #line 213 
  struct emg_struct_interrupt_scenario_nv_nic_irq_other_12 *cf_arg_13;
  #line 214 
  struct emg_struct_interrupt_scenario_nv_nic_irq_other_12 *cf_arg_14;
  #line 215 
  switch (ldv_undef_int()) {
    #line 216 
    case 0: 
            #line 216 
    ;
    #line 217 
    cf_arg_12 = (struct emg_struct_interrupt_scenario_nv_nic_irq_other_12 *)ldv_xmalloc(40UL);
    #line 218 
    cf_arg_12->arg0 = arg0;
    #line 219 
    cf_arg_12->arg1 = arg1;
    #line 220 
    cf_arg_12->arg2 = arg2;
    #line 221 
    cf_arg_12->arg3 = arg3;
    #line 222 
    ret = pthread_create(& emg_thread_12,(pthread_attr_t *)0,& emg_interrupt_interrupt_scenario_nv_nic_irq_other,(void *)cf_arg_12);
    #line 223 
    __VERIFIER_assume(ret == 0);
    #line 224 
    break;
    #line 226 
    case 1: 
            #line 226 
    ;
    #line 227 
    cf_arg_13 = (struct emg_struct_interrupt_scenario_nv_nic_irq_other_12 *)ldv_xmalloc(40UL);
    #line 228 
    cf_arg_13->arg0 = arg0;
    #line 229 
    cf_arg_13->arg1 = arg1;
    #line 230 
    cf_arg_13->arg2 = arg2;
    #line 231 
    cf_arg_13->arg3 = arg3;
    #line 232 
    ret = pthread_create(& emg_thread_13,(pthread_attr_t *)0,& emg_interrupt_interrupt_scenario_nv_nic_irq_rx,(void *)cf_arg_13);
    #line 233 
    __VERIFIER_assume(ret == 0);
    #line 234 
    break;
    #line 236 
    case 2: 
            #line 236 
    ;
    #line 237 
    cf_arg_14 = (struct emg_struct_interrupt_scenario_nv_nic_irq_other_12 *)ldv_xmalloc(40UL);
    #line 238 
    cf_arg_14->arg0 = arg0;
    #line 239 
    cf_arg_14->arg1 = arg1;
    #line 240 
    cf_arg_14->arg2 = arg2;
    #line 241 
    cf_arg_14->arg3 = arg3;
    #line 242 
    ret = pthread_create(& emg_thread_14,(pthread_attr_t *)0,& emg_interrupt_interrupt_scenario_nv_nic_irq_tx,(void *)cf_arg_14);
    #line 243 
    __VERIFIER_assume(ret == 0);
    #line 244 
    break;
    #line 246 
    default: 
             #line 246 
    ;
    #line 246 
    __VERIFIER_assume(0);
  }
  #line 248 
  return;
}

#line 252  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/emg/0/environment_model.c"
void emg_dispatch_deregister_11(struct net_device *arg0)
{
  #line 253 
  int ret;
  #line 254 
  struct emg_struct_random_allocationless_scenario_nv_tx_timeout_15 *cf_arg_15;
  #line 255 
  ret = pthread_join(emg_thread_15,(void **)0);
  #line 256 
  __VERIFIER_assume(ret == 0);
  #line 257 
  return;
}

#line 261  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/emg/0/environment_model.c"
void *emg_interrupt_interrupt_scenario_nv_nic_irq_other(void *arg0)
{
  #line 264 
  enum irqreturn (*emg_12_callback)(int , void *);
  #line 265 
  void *emg_12_data;
  #line 266 
  int emg_12_line;
  #line 267 
  enum irqreturn emg_12_ret_val;
  #line 268 
  enum irqreturn (*emg_12_thread)(int , void *);
  #line 270 
  struct emg_struct_interrupt_scenario_nv_nic_irq_other_12 *data = (struct emg_struct_interrupt_scenario_nv_nic_irq_other_12 *)arg0;
  #line 273 
  emg_12_callback = & emg_wrapper_nv_nic_irq_other;
  #line 276 
  if (data != (struct emg_struct_interrupt_scenario_nv_nic_irq_other_12 *)0) {
    #line 277 
    emg_12_line = data->arg0;
    #line 278 
    emg_12_callback = data->arg1;
    #line 279 
    emg_12_thread = data->arg2;
    #line 280 
    emg_12_data = data->arg3;
    #line 281 
    ldv_free((void *)data);
  }
  #line 287 
  ldv_switch_to_interrupt_context();
  #line 291 
  emg_12_ret_val = emg_wrapper_nv_nic_irq_other(emg_12_line,emg_12_data);
  #line 296 
  ldv_switch_to_process_context();
  #line 299 
  if (ldv_undef_int() != 0) {
    #line 301 
    __VERIFIER_assume(emg_12_ret_val == (unsigned int)IRQ_WAKE_THREAD);
    #line 305 
    if (emg_12_thread != (enum irqreturn (*)(int , void *))0) 
                                                              #line 306 
                                                              (*emg_12_thread)(emg_12_line,emg_12_data);
  }
  else 
       #line 311 
       __VERIFIER_assume(emg_12_ret_val != (unsigned int)IRQ_WAKE_THREAD);
  #line 319 
  return (void *)0;
}

#line 324  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/emg/0/environment_model.c"
void *emg_interrupt_interrupt_scenario_nv_nic_irq_rx(void *arg0)
{
  #line 327 
  enum irqreturn (*emg_13_callback)(int , void *);
  #line 328 
  void *emg_13_data;
  #line 329 
  int emg_13_line;
  #line 330 
  enum irqreturn emg_13_ret_val;
  #line 331 
  enum irqreturn (*emg_13_thread)(int , void *);
  #line 333 
  struct emg_struct_interrupt_scenario_nv_nic_irq_other_12 *data = (struct emg_struct_interrupt_scenario_nv_nic_irq_other_12 *)arg0;
  #line 336 
  emg_13_callback = & emg_wrapper_nv_nic_irq_rx;
  #line 339 
  if (data != (struct emg_struct_interrupt_scenario_nv_nic_irq_other_12 *)0) {
    #line 340 
    emg_13_line = data->arg0;
    #line 341 
    emg_13_callback = data->arg1;
    #line 342 
    emg_13_thread = data->arg2;
    #line 343 
    emg_13_data = data->arg3;
    #line 344 
    ldv_free((void *)data);
  }
  #line 350 
  ldv_switch_to_interrupt_context();
  #line 354 
  emg_13_ret_val = emg_wrapper_nv_nic_irq_rx(emg_13_line,emg_13_data);
  #line 359 
  ldv_switch_to_process_context();
  #line 362 
  if (ldv_undef_int() != 0) {
    #line 364 
    __VERIFIER_assume(emg_13_ret_val == (unsigned int)IRQ_WAKE_THREAD);
    #line 368 
    if (emg_13_thread != (enum irqreturn (*)(int , void *))0) 
                                                              #line 369 
                                                              (*emg_13_thread)(emg_13_line,emg_13_data);
  }
  else 
       #line 374 
       __VERIFIER_assume(emg_13_ret_val != (unsigned int)IRQ_WAKE_THREAD);
  #line 382 
  return (void *)0;
}

#line 387  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/emg/0/environment_model.c"
void *emg_interrupt_interrupt_scenario_nv_nic_irq_tx(void *arg0)
{
  #line 390 
  enum irqreturn (*emg_14_callback)(int , void *);
  #line 391 
  void *emg_14_data;
  #line 392 
  int emg_14_line;
  #line 393 
  enum irqreturn emg_14_ret_val;
  #line 394 
  enum irqreturn (*emg_14_thread)(int , void *);
  #line 396 
  struct emg_struct_interrupt_scenario_nv_nic_irq_other_12 *data = (struct emg_struct_interrupt_scenario_nv_nic_irq_other_12 *)arg0;
  #line 399 
  emg_14_callback = & emg_wrapper_nv_nic_irq_tx;
  #line 402 
  if (data != (struct emg_struct_interrupt_scenario_nv_nic_irq_other_12 *)0) {
    #line 403 
    emg_14_line = data->arg0;
    #line 404 
    emg_14_callback = data->arg1;
    #line 405 
    emg_14_thread = data->arg2;
    #line 406 
    emg_14_data = data->arg3;
    #line 407 
    ldv_free((void *)data);
  }
  #line 413 
  ldv_switch_to_interrupt_context();
  #line 417 
  emg_14_ret_val = emg_wrapper_nv_nic_irq_tx(emg_14_line,emg_14_data);
  #line 422 
  ldv_switch_to_process_context();
  #line 425 
  if (ldv_undef_int() != 0) {
    #line 427 
    __VERIFIER_assume(emg_14_ret_val == (unsigned int)IRQ_WAKE_THREAD);
    #line 431 
    if (emg_14_thread != (enum irqreturn (*)(int , void *))0) 
                                                              #line 432 
                                                              (*emg_14_thread)(emg_14_line,emg_14_data);
  }
  else 
       #line 437 
       __VERIFIER_assume(emg_14_ret_val != (unsigned int)IRQ_WAKE_THREAD);
  #line 445 
  return (void *)0;
}

#line 450  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/emg/0/environment_model.c"
void *emg_net_random_allocationless_scenario_nv_tx_timeout(void *arg0)
{
  #line 453 
  struct net_device *emg_15_container;
  #line 454 
  struct sk_buff *emg_15_emg_param_0_2;
  #line 455 
  struct sk_buff *emg_15_emg_param_0_24;
  #line 456 
  int emg_15_emg_param_1_0;
  #line 457 
  void *emg_15_emg_param_1_1;
  #line 458 
  struct ethtool_pauseparam *emg_15_emg_param_1_10;
  #line 459 
  struct ethtool_regs *emg_15_emg_param_1_11;
  #line 460 
  struct ethtool_ringparam *emg_15_emg_param_1_13;
  #line 461 
  int emg_15_emg_param_1_14;
  #line 462 
  unsigned int emg_15_emg_param_1_15;
  #line 463 
  struct ethtool_ts_info *emg_15_emg_param_1_17;
  #line 464 
  struct ethtool_wolinfo *emg_15_emg_param_1_18;
  #line 465 
  int emg_15_emg_param_1_19;
  #line 466 
  unsigned long long emg_15_emg_param_1_20;
  #line 467 
  struct rtnl_link_stats64 *emg_15_emg_param_1_21;
  #line 468 
  unsigned long long emg_15_emg_param_1_22;
  #line 469 
  void *emg_15_emg_param_1_23;
  #line 470 
  struct ethtool_test *emg_15_emg_param_1_25;
  #line 471 
  struct ethtool_link_ksettings *emg_15_emg_param_1_27;
  #line 472 
  struct ethtool_pauseparam *emg_15_emg_param_1_28;
  #line 473 
  struct ethtool_ringparam *emg_15_emg_param_1_29;
  #line 474 
  unsigned long long emg_15_emg_param_1_3;
  #line 475 
  struct ethtool_wolinfo *emg_15_emg_param_1_30;
  #line 476 
  unsigned long long emg_15_emg_param_1_4;
  #line 477 
  struct rtnl_link_stats64 *emg_15_emg_param_1_5;
  #line 478 
  struct ethtool_drvinfo *emg_15_emg_param_1_6;
  #line 479 
  struct ethtool_stats *emg_15_emg_param_1_7;
  #line 480 
  struct ethtool_link_ksettings *emg_15_emg_param_1_9;
  #line 481 
  void *emg_15_emg_param_2_12;
  #line 482 
  unsigned char *emg_15_emg_param_2_16;
  #line 483 
  unsigned long long *emg_15_emg_param_2_26;
  #line 484 
  unsigned long long *emg_15_emg_param_2_8;
  #line 485 
  int emg_repeat_cnt_call_15 = 1;
  #line 487 
  struct emg_struct_random_allocationless_scenario_nv_tx_timeout_15 *data = (struct emg_struct_random_allocationless_scenario_nv_tx_timeout_15 *)arg0;
  #line 492 
  if (data != (struct emg_struct_random_allocationless_scenario_nv_tx_timeout_15 *)0) {
    #line 493 
    emg_15_container = data->arg0;
    #line 494 
    ldv_free((void *)data);
  }
  #line 499 
  goto emg_call_15;
  #line 503 
  return (void *)0;
  #line 506 
  emg_call_15: 
               #line 506 
  ;
  #line 507 
  switch (ldv_undef_int()) {
    #line 508 
    case 0: 
            #line 508 
    ;
    #line 510 
    emg_15_emg_param_1_30 = (struct ethtool_wolinfo *)ldv_xmalloc_unknown_size(0UL);
    #line 510 
    emg_15_emg_param_1_30 = emg_15_emg_param_1_30;
    #line 514 
    emg_wrapper_nv_set_wol(emg_15_container,emg_15_emg_param_1_30);
    #line 518 
    ldv_free((void *)emg_15_emg_param_1_30);
    #line 520 
    break;
    #line 522 
    case 1: 
            #line 522 
    ;
    #line 524 
    emg_15_emg_param_1_29 = (struct ethtool_ringparam *)ldv_xmalloc_unknown_size(0UL);
    #line 524 
    emg_15_emg_param_1_29 = emg_15_emg_param_1_29;
    #line 528 
    emg_wrapper_nv_set_ringparam(emg_15_container,emg_15_emg_param_1_29);
    #line 532 
    ldv_free((void *)emg_15_emg_param_1_29);
    #line 534 
    break;
    #line 536 
    case 2: 
            #line 536 
    ;
    #line 538 
    emg_15_emg_param_1_28 = (struct ethtool_pauseparam *)ldv_xmalloc_unknown_size(0UL);
    #line 538 
    emg_15_emg_param_1_28 = emg_15_emg_param_1_28;
    #line 542 
    emg_wrapper_nv_set_pauseparam(emg_15_container,emg_15_emg_param_1_28);
    #line 546 
    ldv_free((void *)emg_15_emg_param_1_28);
    #line 548 
    break;
    #line 550 
    case 3: 
            #line 550 
    ;
    #line 552 
    emg_15_emg_param_1_27 = (struct ethtool_link_ksettings *)ldv_xmalloc_unknown_size(0UL);
    #line 552 
    emg_15_emg_param_1_27 = emg_15_emg_param_1_27;
    #line 556 
    emg_wrapper_nv_set_link_ksettings(emg_15_container,emg_15_emg_param_1_27);
    #line 560 
    ldv_free((void *)emg_15_emg_param_1_27);
    #line 562 
    break;
    #line 564 
    case 4: 
            #line 564 
    ;
    #line 566 
    emg_15_emg_param_1_25 = (struct ethtool_test *)ldv_xmalloc_unknown_size(0UL);
    #line 566 
    emg_15_emg_param_1_25 = emg_15_emg_param_1_25;
    #line 567 
    emg_15_emg_param_2_26 = (unsigned long long *)ldv_xmalloc_unknown_size(0UL);
    #line 567 
    emg_15_emg_param_2_26 = emg_15_emg_param_2_26;
    #line 571 
    emg_wrapper_nv_self_test(emg_15_container,emg_15_emg_param_1_25,emg_15_emg_param_2_26);
    #line 575 
    ldv_free((void *)emg_15_emg_param_1_25);
    #line 576 
    ldv_free((void *)emg_15_emg_param_2_26);
    #line 578 
    break;
    #line 580 
    case 5: 
            #line 580 
    ;
    #line 582 
    emg_wrapper_nv_nway_reset(emg_15_container);
    #line 584 
    break;
    #line 586 
    case 6: 
            #line 586 
    ;
    #line 588 
    eth_validate_addr(emg_15_container);
    #line 590 
    break;
    #line 592 
    case 7: 
            #line 592 
    ;
    #line 594 
    emg_wrapper_nv_tx_timeout(emg_15_container);
    #line 596 
    break;
    #line 598 
    case 8: 
            #line 598 
    ;
    #line 600 
    emg_15_emg_param_0_24 = (struct sk_buff *)ldv_xmalloc_unknown_size(0UL);
    #line 600 
    emg_15_emg_param_0_24 = emg_15_emg_param_0_24;
    #line 604 
    emg_wrapper_nv_start_xmit_optimized(emg_15_emg_param_0_24,emg_15_container);
    #line 608 
    ldv_free((void *)emg_15_emg_param_0_24);
    #line 610 
    break;
    #line 612 
    case 9: 
            #line 612 
    ;
    #line 614 
    emg_wrapper_nv_set_multicast(emg_15_container);
    #line 616 
    break;
    #line 618 
    case 10: 
             #line 618 
    ;
    #line 620 
    emg_15_emg_param_1_23 = ldv_xmalloc_unknown_size(0UL);
    #line 620 
    emg_15_emg_param_1_23 = emg_15_emg_param_1_23;
    #line 624 
    emg_wrapper_nv_set_mac_address(emg_15_container,emg_15_emg_param_1_23);
    #line 628 
    ldv_free(emg_15_emg_param_1_23);
    #line 630 
    break;
    #line 632 
    case 11: 
             #line 632 
    ;
    #line 634 
    emg_wrapper_nv_set_features(emg_15_container,emg_15_emg_param_1_22);
    #line 636 
    break;
    #line 638 
    case 12: 
             #line 638 
    ;
    #line 640 
    emg_wrapper_nv_poll_controller(emg_15_container);
    #line 642 
    break;
    #line 644 
    case 13: 
             #line 644 
    ;
    #line 646 
    emg_15_emg_param_1_21 = (struct rtnl_link_stats64 *)ldv_xmalloc_unknown_size(0UL);
    #line 646 
    emg_15_emg_param_1_21 = emg_15_emg_param_1_21;
    #line 650 
    emg_wrapper_nv_get_stats64(emg_15_container,emg_15_emg_param_1_21);
    #line 654 
    ldv_free((void *)emg_15_emg_param_1_21);
    #line 656 
    break;
    #line 658 
    case 14: 
             #line 658 
    ;
    #line 660 
    emg_wrapper_nv_fix_features(emg_15_container,emg_15_emg_param_1_20);
    #line 662 
    break;
    #line 664 
    case 15: 
             #line 664 
    ;
    #line 666 
    emg_wrapper_nv_change_mtu(emg_15_container,emg_15_emg_param_1_19);
    #line 668 
    break;
    #line 670 
    case 16: 
             #line 670 
    ;
    #line 672 
    emg_15_emg_param_1_18 = (struct ethtool_wolinfo *)ldv_xmalloc_unknown_size(0UL);
    #line 672 
    emg_15_emg_param_1_18 = emg_15_emg_param_1_18;
    #line 676 
    emg_wrapper_nv_get_wol(emg_15_container,emg_15_emg_param_1_18);
    #line 680 
    ldv_free((void *)emg_15_emg_param_1_18);
    #line 682 
    break;
    #line 684 
    case 17: 
             #line 684 
    ;
    #line 686 
    emg_15_emg_param_1_17 = (struct ethtool_ts_info *)ldv_xmalloc_unknown_size(0UL);
    #line 686 
    emg_15_emg_param_1_17 = emg_15_emg_param_1_17;
    #line 690 
    ethtool_op_get_ts_info(emg_15_container,emg_15_emg_param_1_17);
    #line 694 
    ldv_free((void *)emg_15_emg_param_1_17);
    #line 696 
    break;
    #line 698 
    case 18: 
             #line 698 
    ;
    #line 700 
    emg_15_emg_param_2_16 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    #line 700 
    emg_15_emg_param_2_16 = emg_15_emg_param_2_16;
    #line 704 
    emg_wrapper_nv_get_strings(emg_15_container,emg_15_emg_param_1_15,emg_15_emg_param_2_16);
    #line 708 
    ldv_free((void *)emg_15_emg_param_2_16);
    #line 710 
    break;
    #line 712 
    case 19: 
             #line 712 
    ;
    #line 714 
    emg_wrapper_nv_get_sset_count(emg_15_container,emg_15_emg_param_1_14);
    #line 716 
    break;
    #line 718 
    case 20: 
             #line 718 
    ;
    #line 720 
    emg_15_emg_param_1_13 = (struct ethtool_ringparam *)ldv_xmalloc_unknown_size(0UL);
    #line 720 
    emg_15_emg_param_1_13 = emg_15_emg_param_1_13;
    #line 724 
    emg_wrapper_nv_get_ringparam(emg_15_container,emg_15_emg_param_1_13);
    #line 728 
    ldv_free((void *)emg_15_emg_param_1_13);
    #line 730 
    break;
    #line 732 
    case 21: 
             #line 732 
    ;
    #line 734 
    emg_wrapper_nv_get_regs_len(emg_15_container);
    #line 736 
    break;
    #line 738 
    case 22: 
             #line 738 
    ;
    #line 740 
    emg_15_emg_param_1_11 = (struct ethtool_regs *)ldv_xmalloc_unknown_size(0UL);
    #line 740 
    emg_15_emg_param_1_11 = emg_15_emg_param_1_11;
    #line 741 
    emg_15_emg_param_2_12 = ldv_xmalloc_unknown_size(0UL);
    #line 741 
    emg_15_emg_param_2_12 = emg_15_emg_param_2_12;
    #line 745 
    emg_wrapper_nv_get_regs(emg_15_container,emg_15_emg_param_1_11,emg_15_emg_param_2_12);
    #line 749 
    ldv_free((void *)emg_15_emg_param_1_11);
    #line 750 
    ldv_free(emg_15_emg_param_2_12);
    #line 752 
    break;
    #line 754 
    case 23: 
             #line 754 
    ;
    #line 756 
    emg_15_emg_param_1_10 = (struct ethtool_pauseparam *)ldv_xmalloc_unknown_size(0UL);
    #line 756 
    emg_15_emg_param_1_10 = emg_15_emg_param_1_10;
    #line 760 
    emg_wrapper_nv_get_pauseparam(emg_15_container,emg_15_emg_param_1_10);
    #line 764 
    ldv_free((void *)emg_15_emg_param_1_10);
    #line 766 
    break;
    #line 768 
    case 24: 
             #line 768 
    ;
    #line 770 
    emg_15_emg_param_1_9 = (struct ethtool_link_ksettings *)ldv_xmalloc_unknown_size(0UL);
    #line 770 
    emg_15_emg_param_1_9 = emg_15_emg_param_1_9;
    #line 774 
    emg_wrapper_nv_get_link_ksettings(emg_15_container,emg_15_emg_param_1_9);
    #line 778 
    ldv_free((void *)emg_15_emg_param_1_9);
    #line 780 
    break;
    #line 782 
    case 25: 
             #line 782 
    ;
    #line 784 
    ethtool_op_get_link(emg_15_container);
    #line 786 
    break;
    #line 788 
    case 26: 
             #line 788 
    ;
    #line 790 
    emg_15_emg_param_1_7 = (struct ethtool_stats *)ldv_xmalloc_unknown_size(0UL);
    #line 790 
    emg_15_emg_param_1_7 = emg_15_emg_param_1_7;
    #line 791 
    emg_15_emg_param_2_8 = (unsigned long long *)ldv_xmalloc_unknown_size(0UL);
    #line 791 
    emg_15_emg_param_2_8 = emg_15_emg_param_2_8;
    #line 795 
    emg_wrapper_nv_get_ethtool_stats(emg_15_container,emg_15_emg_param_1_7,emg_15_emg_param_2_8);
    #line 799 
    ldv_free((void *)emg_15_emg_param_1_7);
    #line 800 
    ldv_free((void *)emg_15_emg_param_2_8);
    #line 802 
    break;
    #line 804 
    case 27: 
             #line 804 
    ;
    #line 806 
    emg_15_emg_param_1_6 = (struct ethtool_drvinfo *)ldv_xmalloc_unknown_size(0UL);
    #line 806 
    emg_15_emg_param_1_6 = emg_15_emg_param_1_6;
    #line 810 
    emg_wrapper_nv_get_drvinfo(emg_15_container,emg_15_emg_param_1_6);
    #line 814 
    ldv_free((void *)emg_15_emg_param_1_6);
    #line 816 
    break;
    #line 818 
    case 28: 
             #line 818 
    ;
    #line 820 
    emg_15_emg_param_1_5 = (struct rtnl_link_stats64 *)ldv_xmalloc_unknown_size(0UL);
    #line 820 
    emg_15_emg_param_1_5 = emg_15_emg_param_1_5;
    #line 824 
    emg_wrapper_nv_get_stats64(emg_15_container,emg_15_emg_param_1_5);
    #line 828 
    ldv_free((void *)emg_15_emg_param_1_5);
    #line 830 
    break;
    #line 832 
    case 29: 
             #line 832 
    ;
    #line 834 
    emg_wrapper_nv_poll_controller(emg_15_container);
    #line 836 
    break;
    #line 838 
    case 30: 
             #line 838 
    ;
    #line 840 
    emg_wrapper_nv_fix_features(emg_15_container,emg_15_emg_param_1_4);
    #line 842 
    break;
    #line 844 
    case 31: 
             #line 844 
    ;
    #line 846 
    emg_wrapper_nv_set_features(emg_15_container,emg_15_emg_param_1_3);
    #line 848 
    break;
    #line 850 
    case 32: 
             #line 850 
    ;
    #line 852 
    emg_15_emg_param_0_2 = (struct sk_buff *)ldv_xmalloc_unknown_size(0UL);
    #line 852 
    emg_15_emg_param_0_2 = emg_15_emg_param_0_2;
    #line 856 
    emg_wrapper_nv_start_xmit(emg_15_emg_param_0_2,emg_15_container);
    #line 860 
    ldv_free((void *)emg_15_emg_param_0_2);
    #line 862 
    break;
    #line 864 
    case 33: 
             #line 864 
    ;
    #line 866 
    emg_wrapper_nv_set_multicast(emg_15_container);
    #line 868 
    break;
    #line 870 
    case 34: 
             #line 870 
    ;
    #line 872 
    emg_15_emg_param_1_1 = ldv_xmalloc_unknown_size(0UL);
    #line 872 
    emg_15_emg_param_1_1 = emg_15_emg_param_1_1;
    #line 876 
    emg_wrapper_nv_set_mac_address(emg_15_container,emg_15_emg_param_1_1);
    #line 880 
    ldv_free(emg_15_emg_param_1_1);
    #line 882 
    break;
    #line 884 
    case 35: 
             #line 884 
    ;
    #line 886 
    emg_wrapper_nv_change_mtu(emg_15_container,emg_15_emg_param_1_0);
    #line 888 
    break;
    #line 890 
    case 36: 
             #line 890 
    ;
    #line 892 
    emg_wrapper_nv_tx_timeout(emg_15_container);
    #line 895 
    if (emg_repeat_cnt_call_15 > 0) {
      #line 896 
      emg_repeat_cnt_call_15 --;
      #line 898 
      goto emg_call_15;
    }
    else 
         #line 900 
         __VERIFIER_assume(0);
    #line 904 
    break;
    #line 906 
    case 37: 
             #line 906 
    ;
    #line 910 
    break;
    #line 912 
    default: 
             #line 912 
    ;
    #line 912 
    __VERIFIER_assume(0);
  }
  #line 915 
  return (void *)0;
}

#line 920  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/emg/0/environment_model.c"
void *emg_pci_pci_scenario_forcedeth_pci_driver(void *arg0)
{
  #line 923 
  int emg_16_choice;
  #line 924 
  struct pci_driver *emg_16_container;
  #line 925 
  struct pci_device_id *emg_16_device_id;
  #line 926 
  struct pci_dev *emg_16_resource_0;
  #line 927 
  struct pm_message emg_16_resource_1;
  #line 928 
  int emg_16_ret;
  #line 929 
  int emg_repeat_cnt_main_16_1 = 1;
  #line 930 
  int emg_repeat_cnt_call_16_1 = 1;
  #line 931 
  int emg_repeat_cnt_main_16_0 = 1;
  #line 932 
  int emg_repeat_cnt_call_16_0 = 1;
  #line 934 
  struct emg_struct_pci_scenario_forcedeth_pci_driver_16 *data = (struct emg_struct_pci_scenario_forcedeth_pci_driver_16 *)arg0;
  #line 938 
  emg_16_choice = 0;
  #line 939 
  emg_16_ret = ldv_undef_int();
  #line 940 
  emg_16_choice = 0;
  #line 941 
  emg_16_container = emg_alias_forcedeth_pci_driver;
  #line 942 
  emg_16_ret = ldv_undef_int();
  #line 944 
  __VERIFIER_assume(data->arg0 == emg_alias_forcedeth_pci_driver);
  #line 946 
  if (data != (struct emg_struct_pci_scenario_forcedeth_pci_driver_16 *)0) {
    #line 947 
    emg_16_container = data->arg0;
    #line 948 
    ldv_free((void *)data);
  }
  #line 953 
  emg_16_resource_0 = (struct pci_dev *)ldv_xmalloc(3312UL);
  #line 954 
  emg_16_choice = __ldv_undef_int_range(0,40);
  #line 955 
  emg_16_device_id = emg_16_container->id_table + (unsigned long)emg_16_choice;
  #line 959 
  goto emg_main_16;
  #line 963 
  return (void *)0;
  #line 966 
  emg_call_16: 
               #line 966 
  ;
  #line 967 
  switch (ldv_undef_int()) {
    #line 968 
    case 0: 
            #line 968 
    ;
    #line 973 
    if (emg_repeat_cnt_call_16_0 > 0) {
      #line 974 
      emg_repeat_cnt_call_16_0 --;
      #line 976 
      goto emg_call_16;
    }
    else 
         #line 978 
         __VERIFIER_assume(0);
    #line 982 
    break;
    #line 984 
    case 1: 
            #line 984 
    ;
    #line 986 
    if (emg_16_container->suspend != (int (*)(struct pci_dev *, pm_message_t ))0) 
      #line 987 
      emg_16_ret = (*(emg_16_container->suspend))(emg_16_resource_0,emg_16_resource_1); else 
                                                                    #line 989 
                                                                    emg_16_ret = ldv_undef_int();
    #line 995 
    emg_16_ret = ldv_filter_err_code(emg_16_ret);
    #line 999 
    if (emg_16_container->resume != (int (*)(struct pci_dev *))0) 
                                                                  #line 1000 
                                                                  (*(emg_16_container->resume))(emg_16_resource_0);
    #line 1004 
    if (emg_repeat_cnt_call_16_1 > 0) {
      #line 1005 
      emg_repeat_cnt_call_16_1 --;
      #line 1007 
      goto emg_call_16;
    }
    else 
         #line 1009 
         __VERIFIER_assume(0);
    #line 1013 
    break;
    #line 1015 
    case 2: 
            #line 1015 
    ;
    #line 1017 
    emg_wrapper_nv_shutdown(emg_16_resource_0);
    #line 1021 
    emg_wrapper_nv_remove(emg_16_resource_0);
    #line 1024 
    if (emg_repeat_cnt_main_16_0 > 0) {
      #line 1025 
      emg_repeat_cnt_main_16_0 --;
      #line 1027 
      goto emg_main_16;
    }
    else 
         #line 1029 
         __VERIFIER_assume(0);
    #line 1033 
    break;
    #line 1035 
    default: 
             #line 1035 
    ;
    #line 1035 
    __VERIFIER_assume(0);
  }
  #line 1038 
  return (void *)0;
  #line 1041 
  emg_main_16: 
               #line 1041 
  ;
  #line 1042 
  if (ldv_undef_int() != 0) {
    #line 1045 
    ldv_pre_probe();
    #line 1049 
    emg_16_ret = emg_wrapper_nv_probe(emg_16_resource_0,emg_16_device_id);
    #line 1054 
    emg_16_ret = ldv_post_probe(emg_16_ret);
    #line 1057 
    if (ldv_undef_int() != 0) {
      #line 1059 
      __VERIFIER_assume(emg_16_ret == 0);
      #line 1063 
      goto emg_call_16;
    }
    else 
         #line 1068 
         __VERIFIER_assume(emg_16_ret != 0);
    #line 1072 
    if (emg_repeat_cnt_main_16_1 > 0) {
      #line 1073 
      emg_repeat_cnt_main_16_1 --;
      #line 1075 
      goto emg_main_16;
    }
    else 
         #line 1077 
         __VERIFIER_assume(0);
  }
  else 
       #line 1083 
       ldv_free((void *)emg_16_resource_0);
  #line 1091 
  return (void *)0;
}

#line 1096  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/emg/0/environment_model.c"
void *emg_pm_pm_ops_scenario_nv_pm_ops(void *arg0)
{
  #line 1099 
  struct device *emg_17_device;
  #line 1100 
  struct dev_pm_ops *emg_17_pm_ops;
  #line 1101 
  int emg_17_ret;
  #line 1102 
  int emg_repeat_cnt_flate_17 = 1;
  #line 1103 
  int emg_repeat_cnt_restnoirq_17 = 1;
  #line 1104 
  int emg_repeat_cnt_run_resume_17 = 1;
  #line 1105 
  int emg_repeat_cnt_pno_irq_17 = 1;
  #line 1106 
  int emg_repeat_cnt_fnoirq_17 = 1;
  #line 1107 
  int emg_repeat_cnt_rest_17 = 1;
  #line 1108 
  int emg_repeat_cnt_sus_17 = 1;
  #line 1109 
  int emg_repeat_cnt_reste_17 = 1;
  #line 1110 
  int emg_repeat_cnt_tnoirq_17 = 1;
  #line 1111 
  int emg_repeat_cnt_poff_17 = 1;
  #line 1112 
  int emg_repeat_cnt_reslate_17 = 1;
  #line 1113 
  int emg_repeat_cnt_fr_17 = 1;
  #line 1114 
  int emg_repeat_cnt_th_17 = 1;
  #line 1115 
  int emg_repeat_cnt_no_irq_17 = 1;
  #line 1116 
  int emg_repeat_cnt_slate_17 = 1;
  #line 1117 
  int emg_repeat_cnt_resnoirq_17 = 1;
  #line 1118 
  int emg_repeat_cnt_plate_17 = 1;
  #line 1119 
  int emg_repeat_cnt_res_17 = 1;
  #line 1120 
  int emg_repeat_cnt_thlate_17 = 1;
  #line 1123 
  emg_17_ret = ldv_undef_int();
  #line 1124 
  emg_17_pm_ops = emg_alias_nv_pm_ops;
  #line 1125 
  emg_17_ret = ldv_undef_int();
  #line 1131 
  goto emg_do_17;
  #line 1135 
  return (void *)0;
  #line 1138 
  emg_compl_17: 
                #line 1138 
  ;
  #line 1140 
  if (emg_17_pm_ops->complete != (void (*)(struct device *))0) 
                                                               #line 1141 
                                                               (*(emg_17_pm_ops->complete))(emg_17_device);
  #line 1149 
  return (void *)0;
  #line 1152 
  emg_do_17: 
             #line 1152 
  ;
  #line 1153 
  switch (ldv_undef_int()) {
    #line 1154 
    case 0: 
            #line 1154 
    ;
    #line 1156 
    __VERIFIER_assume((emg_runtime_enabled == 1 && emg_runtime_lowpower == 1) != 0);
    #line 1160 
    goto emg_runt_17;
    #line 1165 
    case 1: 
            #line 1165 
    ;
    #line 1167 
    goto emg_normal_17;
    #line 1172 
    case 2: 
            #line 1172 
    ;
    #line 1176 
    break;
    #line 1178 
    default: 
             #line 1178 
    ;
    #line 1178 
    __VERIFIER_assume(0);
  }
  #line 1181 
  return (void *)0;
  #line 1184 
  emg_flate_17: 
                #line 1184 
  ;
  #line 1186 
  if (emg_17_pm_ops->freeze_late != (int (*)(struct device *))0) 
                                                                 #line 1187 
                                                                 emg_17_ret = (*(emg_17_pm_ops->freeze_late))(emg_17_device); else 
                                                                    #line 1189 
                                                                    emg_17_ret = ldv_undef_int();
  #line 1195 
  emg_17_ret = ldv_post_probe(emg_17_ret);
  #line 1198 
  if (ldv_undef_int() != 0) {
    #line 1200 
    __VERIFIER_assume(emg_17_ret == 0);
    #line 1204 
    goto emg_thlate_17;
  }
  else 
       #line 1209 
       __VERIFIER_assume(emg_17_ret != 0);
  #line 1213 
  if (emg_repeat_cnt_flate_17 > 0) {
    #line 1214 
    emg_repeat_cnt_flate_17 --;
    #line 1216 
    goto emg_flate_17;
  }
  else 
       #line 1218 
       __VERIFIER_assume(0);
  #line 1223 
  return (void *)0;
  #line 1226 
  emg_fnoirq_17: 
                 #line 1226 
  ;
  #line 1228 
  if (emg_17_pm_ops->freeze_noirq != (int (*)(struct device *))0) 
                                                                  #line 1229 
                                                                  emg_17_ret = (*(emg_17_pm_ops->freeze_noirq))(emg_17_device); else 
                                                                    #line 1231 
                                                                    emg_17_ret = ldv_undef_int();
  #line 1237 
  emg_17_ret = ldv_post_probe(emg_17_ret);
  #line 1240 
  if (ldv_undef_int() != 0) {
    #line 1242 
    __VERIFIER_assume(emg_17_ret == 0);
    #line 1246 
    goto emg_tnoirq_17;
  }
  else 
       #line 1251 
       __VERIFIER_assume(emg_17_ret != 0);
  #line 1255 
  if (emg_repeat_cnt_fnoirq_17 > 0) {
    #line 1256 
    emg_repeat_cnt_fnoirq_17 --;
    #line 1258 
    goto emg_fnoirq_17;
  }
  else 
       #line 1260 
       __VERIFIER_assume(0);
  #line 1265 
  return (void *)0;
  #line 1268 
  emg_fr_17: 
             #line 1268 
  ;
  #line 1270 
  emg_17_ret = emg_wrapper_nv_suspend(emg_17_device);
  #line 1275 
  emg_17_ret = ldv_post_probe(emg_17_ret);
  #line 1278 
  if (ldv_undef_int() != 0) {
    #line 1280 
    __VERIFIER_assume(emg_17_ret == 0);
    #line 1283 
    if (ldv_undef_int() != 0) 
                              #line 1285 
                              goto emg_fnoirq_17; else 
                                                       #line 1290 
                                                       goto emg_flate_17;
  }
  else {
    #line 1296 
    __VERIFIER_assume(emg_17_ret != 0);
    #line 1299 
    if (emg_repeat_cnt_fr_17 > 0) {
      #line 1300 
      emg_repeat_cnt_fr_17 --;
      #line 1302 
      goto emg_fr_17;
    }
    else 
         #line 1304 
         __VERIFIER_assume(0);
  }
  #line 1310 
  return (void *)0;
  #line 1313 
  emg_no_irq_17: 
                 #line 1313 
  ;
  #line 1315 
  if (emg_17_pm_ops->suspend_noirq != (int (*)(struct device *))0) 
                                                                   #line 1316 
                                                                   emg_17_ret = (*(emg_17_pm_ops->suspend_noirq))(emg_17_device); else 
                                                                    #line 1318 
                                                                    emg_17_ret = ldv_undef_int();
  #line 1324 
  emg_17_ret = ldv_post_probe(emg_17_ret);
  #line 1327 
  if (ldv_undef_int() != 0) {
    #line 1329 
    __VERIFIER_assume(emg_17_ret == 0);
    #line 1333 
    goto emg_resnoirq_17;
  }
  else 
       #line 1338 
       __VERIFIER_assume(emg_17_ret != 0);
  #line 1342 
  if (emg_repeat_cnt_no_irq_17 > 0) {
    #line 1343 
    emg_repeat_cnt_no_irq_17 --;
    #line 1345 
    goto emg_no_irq_17;
  }
  else 
       #line 1347 
       __VERIFIER_assume(0);
  #line 1352 
  return (void *)0;
  #line 1355 
  emg_normal_17: 
                 #line 1355 
  ;
  #line 1357 
  if (emg_17_pm_ops->prepare != (int (*)(struct device *))0) 
                                                             #line 1358 
                                                             emg_17_ret = (*(emg_17_pm_ops->prepare))(emg_17_device); else 
                                                                    #line 1360 
                                                                    emg_17_ret = ldv_undef_int();
  #line 1366 
  emg_17_ret = ldv_post_probe(emg_17_ret);
  #line 1369 
  if (ldv_undef_int() != 0) {
    #line 1371 
    __VERIFIER_assume(emg_17_ret == 0);
    #line 1374 
    switch (ldv_undef_int()) {
      #line 1375 
      case 0: 
              #line 1375 
      ;
      #line 1377 
      goto emg_sus_17;
      #line 1382 
      case 1: 
              #line 1382 
      ;
      #line 1384 
      goto emg_fr_17;
      #line 1389 
      case 2: 
              #line 1389 
      ;
      #line 1391 
      goto emg_poff_17;
      #line 1396 
      default: 
               #line 1396 
      ;
      #line 1396 
      __VERIFIER_assume(0);
    }
  }
  else 
       #line 1400 
       __VERIFIER_assume(emg_17_ret != 0);
  #line 1408 
  return (void *)0;
  #line 1411 
  emg_plate_17: 
                #line 1411 
  ;
  #line 1413 
  if (emg_17_pm_ops->poweroff_late != (int (*)(struct device *))0) 
                                                                   #line 1414 
                                                                   emg_17_ret = (*(emg_17_pm_ops->poweroff_late))(emg_17_device); else 
                                                                    #line 1416 
                                                                    emg_17_ret = ldv_undef_int();
  #line 1422 
  emg_17_ret = ldv_post_probe(emg_17_ret);
  #line 1425 
  if (ldv_undef_int() != 0) {
    #line 1427 
    __VERIFIER_assume(emg_17_ret == 0);
    #line 1431 
    goto emg_reste_17;
  }
  else 
       #line 1436 
       __VERIFIER_assume(emg_17_ret != 0);
  #line 1440 
  if (emg_repeat_cnt_plate_17 > 0) {
    #line 1441 
    emg_repeat_cnt_plate_17 --;
    #line 1443 
    goto emg_plate_17;
  }
  else 
       #line 1445 
       __VERIFIER_assume(0);
  #line 1450 
  return (void *)0;
  #line 1453 
  emg_pno_irq_17: 
                  #line 1453 
  ;
  #line 1455 
  if (emg_17_pm_ops->poweroff_noirq != (int (*)(struct device *))0) 
                                                                    #line 1456 
                                                                    emg_17_ret = (*(emg_17_pm_ops->poweroff_noirq))(emg_17_device); else 
                                                                    #line 1458 
                                                                    emg_17_ret = ldv_undef_int();
  #line 1464 
  emg_17_ret = ldv_post_probe(emg_17_ret);
  #line 1467 
  if (ldv_undef_int() != 0) {
    #line 1469 
    __VERIFIER_assume(emg_17_ret == 0);
    #line 1473 
    goto emg_restnoirq_17;
  }
  else 
       #line 1478 
       __VERIFIER_assume(emg_17_ret != 0);
  #line 1482 
  if (emg_repeat_cnt_pno_irq_17 > 0) {
    #line 1483 
    emg_repeat_cnt_pno_irq_17 --;
    #line 1485 
    goto emg_pno_irq_17;
  }
  else 
       #line 1487 
       __VERIFIER_assume(0);
  #line 1492 
  return (void *)0;
  #line 1495 
  emg_poff_17: 
               #line 1495 
  ;
  #line 1497 
  emg_17_ret = emg_wrapper_nv_suspend(emg_17_device);
  #line 1502 
  emg_17_ret = ldv_post_probe(emg_17_ret);
  #line 1505 
  if (ldv_undef_int() != 0) {
    #line 1507 
    __VERIFIER_assume(emg_17_ret == 0);
    #line 1510 
    if (ldv_undef_int() != 0) 
                              #line 1512 
                              goto emg_pno_irq_17; else 
                                                        #line 1517 
                                                        goto emg_plate_17;
  }
  else {
    #line 1523 
    __VERIFIER_assume(emg_17_ret != 0);
    #line 1526 
    if (emg_repeat_cnt_poff_17 > 0) {
      #line 1527 
      emg_repeat_cnt_poff_17 --;
      #line 1529 
      goto emg_poff_17;
    }
    else 
         #line 1531 
         __VERIFIER_assume(0);
  }
  #line 1537 
  return (void *)0;
  #line 1540 
  emg_res_17: 
              #line 1540 
  ;
  #line 1542 
  emg_17_ret = emg_wrapper_nv_resume(emg_17_device);
  #line 1547 
  emg_17_ret = ldv_post_probe(emg_17_ret);
  #line 1550 
  if (ldv_undef_int() != 0) {
    #line 1552 
    __VERIFIER_assume(emg_17_ret == 0);
    #line 1556 
    goto emg_compl_17;
  }
  else {
    #line 1561 
    __VERIFIER_assume(emg_17_ret != 0);
    #line 1564 
    if (emg_repeat_cnt_res_17 > 0) {
      #line 1565 
      emg_repeat_cnt_res_17 --;
      #line 1567 
      goto emg_res_17;
    }
    else 
         #line 1569 
         __VERIFIER_assume(0);
  }
  #line 1575 
  return (void *)0;
  #line 1578 
  emg_reslate_17: 
                  #line 1578 
  ;
  #line 1580 
  if (emg_17_pm_ops->resume_early != (int (*)(struct device *))0) 
                                                                  #line 1581 
                                                                  emg_17_ret = (*(emg_17_pm_ops->resume_early))(emg_17_device); else 
                                                                    #line 1583 
                                                                    emg_17_ret = ldv_undef_int();
  #line 1589 
  emg_17_ret = ldv_post_probe(emg_17_ret);
  #line 1592 
  if (ldv_undef_int() != 0) {
    #line 1594 
    __VERIFIER_assume(emg_17_ret == 0);
    #line 1598 
    goto emg_res_17;
  }
  else 
       #line 1603 
       __VERIFIER_assume(emg_17_ret != 0);
  #line 1607 
  if (emg_repeat_cnt_reslate_17 > 0) {
    #line 1608 
    emg_repeat_cnt_reslate_17 --;
    #line 1610 
    goto emg_reslate_17;
  }
  else 
       #line 1612 
       __VERIFIER_assume(0);
  #line 1617 
  return (void *)0;
  #line 1620 
  emg_resnoirq_17: 
                   #line 1620 
  ;
  #line 1622 
  if (emg_17_pm_ops->resume_noirq != (int (*)(struct device *))0) 
                                                                  #line 1623 
                                                                  emg_17_ret = (*(emg_17_pm_ops->resume_noirq))(emg_17_device); else 
                                                                    #line 1625 
                                                                    emg_17_ret = ldv_undef_int();
  #line 1631 
  emg_17_ret = ldv_post_probe(emg_17_ret);
  #line 1634 
  if (ldv_undef_int() != 0) {
    #line 1636 
    __VERIFIER_assume(emg_17_ret == 0);
    #line 1640 
    goto emg_res_17;
  }
  else 
       #line 1645 
       __VERIFIER_assume(emg_17_ret != 0);
  #line 1649 
  if (emg_repeat_cnt_resnoirq_17 > 0) {
    #line 1650 
    emg_repeat_cnt_resnoirq_17 --;
    #line 1652 
    goto emg_resnoirq_17;
  }
  else 
       #line 1654 
       __VERIFIER_assume(0);
  #line 1659 
  return (void *)0;
  #line 1662 
  emg_rest_17: 
               #line 1662 
  ;
  #line 1664 
  emg_17_ret = emg_wrapper_nv_resume(emg_17_device);
  #line 1669 
  emg_17_ret = ldv_post_probe(emg_17_ret);
  #line 1672 
  if (ldv_undef_int() != 0) {
    #line 1674 
    __VERIFIER_assume(emg_17_ret == 0);
    #line 1678 
    goto emg_compl_17;
  }
  else {
    #line 1683 
    __VERIFIER_assume(emg_17_ret != 0);
    #line 1686 
    if (emg_repeat_cnt_rest_17 > 0) {
      #line 1687 
      emg_repeat_cnt_rest_17 --;
      #line 1689 
      goto emg_rest_17;
    }
    else 
         #line 1691 
         __VERIFIER_assume(0);
  }
  #line 1697 
  return (void *)0;
  #line 1700 
  emg_reste_17: 
                #line 1700 
  ;
  #line 1702 
  if (emg_17_pm_ops->restore_early != (int (*)(struct device *))0) 
                                                                   #line 1703 
                                                                   emg_17_ret = (*(emg_17_pm_ops->restore_early))(emg_17_device); else 
                                                                    #line 1705 
                                                                    emg_17_ret = ldv_undef_int();
  #line 1711 
  emg_17_ret = ldv_post_probe(emg_17_ret);
  #line 1714 
  if (ldv_undef_int() != 0) {
    #line 1716 
    __VERIFIER_assume(emg_17_ret == 0);
    #line 1720 
    goto emg_rest_17;
  }
  else 
       #line 1725 
       __VERIFIER_assume(emg_17_ret != 0);
  #line 1729 
  if (emg_repeat_cnt_reste_17 > 0) {
    #line 1730 
    emg_repeat_cnt_reste_17 --;
    #line 1732 
    goto emg_reste_17;
  }
  else 
       #line 1734 
       __VERIFIER_assume(0);
  #line 1739 
  return (void *)0;
  #line 1742 
  emg_restnoirq_17: 
                    #line 1742 
  ;
  #line 1744 
  if (emg_17_pm_ops->restore_noirq != (int (*)(struct device *))0) 
                                                                   #line 1745 
                                                                   emg_17_ret = (*(emg_17_pm_ops->restore_noirq))(emg_17_device); else 
                                                                    #line 1747 
                                                                    emg_17_ret = ldv_undef_int();
  #line 1753 
  emg_17_ret = ldv_post_probe(emg_17_ret);
  #line 1756 
  if (ldv_undef_int() != 0) {
    #line 1758 
    __VERIFIER_assume(emg_17_ret == 0);
    #line 1762 
    goto emg_rest_17;
  }
  else 
       #line 1767 
       __VERIFIER_assume(emg_17_ret != 0);
  #line 1771 
  if (emg_repeat_cnt_restnoirq_17 > 0) {
    #line 1772 
    emg_repeat_cnt_restnoirq_17 --;
    #line 1774 
    goto emg_restnoirq_17;
  }
  else 
       #line 1776 
       __VERIFIER_assume(0);
  #line 1781 
  return (void *)0;
  #line 1784 
  emg_run_resume_17: 
                     #line 1784 
  ;
  #line 1786 
  if (emg_17_pm_ops->runtime_resume != (int (*)(struct device *))0) 
                                                                    #line 1787 
                                                                    emg_17_ret = (*(emg_17_pm_ops->runtime_resume))(emg_17_device); else 
                                                                    #line 1789 
                                                                    emg_17_ret = ldv_undef_int();
  #line 1795 
  emg_17_ret = ldv_post_probe(emg_17_ret);
  #line 1796 
  if (emg_17_ret != 0) 
                       #line 1797 
                       emg_runtime_lowpower = 0;
  #line 1800 
  if (ldv_undef_int() != 0) 
                            #line 1802 
                            __VERIFIER_assume(emg_17_ret == 0);
  else {
    #line 1806 
    __VERIFIER_assume(emg_17_ret != 0);
    #line 1809 
    if (emg_repeat_cnt_run_resume_17 > 0) {
      #line 1810 
      emg_repeat_cnt_run_resume_17 --;
      #line 1812 
      goto emg_run_resume_17;
    }
    else 
         #line 1814 
         __VERIFIER_assume(0);
  }
  #line 1824 
  return (void *)0;
  #line 1827 
  emg_runt_17: 
               #line 1827 
  ;
  #line 1828 
  if (ldv_undef_int() != 0) {
    #line 1830 
    if (emg_17_pm_ops->runtime_idle != (int (*)(struct device *))0) 
                                                                    #line 1831 
                                                                    emg_17_ret = (*(emg_17_pm_ops->runtime_idle))(emg_17_device); else 
                                                                    #line 1833 
                                                                    emg_17_ret = ldv_undef_int();
    #line 1839 
    emg_17_ret = ldv_post_probe(emg_17_ret);
  }
  else {
    #line 1843 
    if (emg_17_pm_ops->runtime_suspend != (int (*)(struct device *))0) 
      #line 1844 
      emg_17_ret = (*(emg_17_pm_ops->runtime_suspend))(emg_17_device); else 
                                                                    #line 1846 
                                                                    emg_17_ret = ldv_undef_int();
    #line 1852 
    emg_17_ret = ldv_post_probe(emg_17_ret);
    #line 1853 
    if (emg_17_ret != 0) 
                         #line 1854 
                         emg_runtime_lowpower = 1;
    #line 1857 
    if (ldv_undef_int() != 0) {
      #line 1859 
      __VERIFIER_assume(emg_17_ret == 0);
      #line 1863 
      goto emg_run_resume_17;
    }
    else 
         #line 1868 
         __VERIFIER_assume(emg_17_ret != 0);
  }
  #line 1877 
  return (void *)0;
  #line 1880 
  emg_slate_17: 
                #line 1880 
  ;
  #line 1882 
  if (emg_17_pm_ops->suspend_late != (int (*)(struct device *))0) 
                                                                  #line 1883 
                                                                  emg_17_ret = (*(emg_17_pm_ops->suspend_late))(emg_17_device); else 
                                                                    #line 1885 
                                                                    emg_17_ret = ldv_undef_int();
  #line 1891 
  emg_17_ret = ldv_post_probe(emg_17_ret);
  #line 1894 
  if (ldv_undef_int() != 0) {
    #line 1896 
    __VERIFIER_assume(emg_17_ret == 0);
    #line 1900 
    goto emg_reslate_17;
  }
  else 
       #line 1905 
       __VERIFIER_assume(emg_17_ret != 0);
  #line 1909 
  if (emg_repeat_cnt_slate_17 > 0) {
    #line 1910 
    emg_repeat_cnt_slate_17 --;
    #line 1912 
    goto emg_slate_17;
  }
  else 
       #line 1914 
       __VERIFIER_assume(0);
  #line 1919 
  return (void *)0;
  #line 1922 
  emg_sus_17: 
              #line 1922 
  ;
  #line 1924 
  emg_17_ret = emg_wrapper_nv_suspend(emg_17_device);
  #line 1929 
  emg_17_ret = ldv_post_probe(emg_17_ret);
  #line 1932 
  if (ldv_undef_int() != 0) {
    #line 1934 
    __VERIFIER_assume(emg_17_ret == 0);
    #line 1937 
    if (ldv_undef_int() != 0) 
                              #line 1939 
                              goto emg_no_irq_17; else 
                                                       #line 1944 
                                                       goto emg_slate_17;
  }
  else {
    #line 1950 
    __VERIFIER_assume(emg_17_ret != 0);
    #line 1953 
    if (emg_repeat_cnt_sus_17 > 0) {
      #line 1954 
      emg_repeat_cnt_sus_17 --;
      #line 1956 
      goto emg_sus_17;
    }
    else 
         #line 1958 
         __VERIFIER_assume(0);
  }
  #line 1964 
  return (void *)0;
  #line 1967 
  emg_th_17: 
             #line 1967 
  ;
  #line 1969 
  emg_17_ret = emg_wrapper_nv_resume(emg_17_device);
  #line 1974 
  emg_17_ret = ldv_post_probe(emg_17_ret);
  #line 1977 
  if (ldv_undef_int() != 0) {
    #line 1979 
    __VERIFIER_assume(emg_17_ret == 0);
    #line 1983 
    goto emg_compl_17;
  }
  else {
    #line 1988 
    __VERIFIER_assume(emg_17_ret != 0);
    #line 1991 
    if (emg_repeat_cnt_th_17 > 0) {
      #line 1992 
      emg_repeat_cnt_th_17 --;
      #line 1994 
      goto emg_th_17;
    }
    else 
         #line 1996 
         __VERIFIER_assume(0);
  }
  #line 2002 
  return (void *)0;
  #line 2005 
  emg_thlate_17: 
                 #line 2005 
  ;
  #line 2007 
  if (emg_17_pm_ops->thaw_early != (int (*)(struct device *))0) 
                                                                #line 2008 
                                                                emg_17_ret = (*(emg_17_pm_ops->thaw_early))(emg_17_device); else 
                                                                    #line 2010 
                                                                    emg_17_ret = ldv_undef_int();
  #line 2016 
  emg_17_ret = ldv_post_probe(emg_17_ret);
  #line 2019 
  if (ldv_undef_int() != 0) {
    #line 2021 
    __VERIFIER_assume(emg_17_ret == 0);
    #line 2025 
    goto emg_th_17;
  }
  else 
       #line 2030 
       __VERIFIER_assume(emg_17_ret != 0);
  #line 2034 
  if (emg_repeat_cnt_thlate_17 > 0) {
    #line 2035 
    emg_repeat_cnt_thlate_17 --;
    #line 2037 
    goto emg_thlate_17;
  }
  else 
       #line 2039 
       __VERIFIER_assume(0);
  #line 2044 
  return (void *)0;
  #line 2047 
  emg_tnoirq_17: 
                 #line 2047 
  ;
  #line 2049 
  if (emg_17_pm_ops->thaw_noirq != (int (*)(struct device *))0) 
                                                                #line 2050 
                                                                emg_17_ret = (*(emg_17_pm_ops->thaw_noirq))(emg_17_device); else 
                                                                    #line 2052 
                                                                    emg_17_ret = ldv_undef_int();
  #line 2058 
  emg_17_ret = ldv_post_probe(emg_17_ret);
  #line 2061 
  if (ldv_undef_int() != 0) {
    #line 2063 
    __VERIFIER_assume(emg_17_ret == 0);
    #line 2067 
    goto emg_th_17;
  }
  else 
       #line 2072 
       __VERIFIER_assume(emg_17_ret != 0);
  #line 2076 
  if (emg_repeat_cnt_tnoirq_17 > 0) {
    #line 2077 
    emg_repeat_cnt_tnoirq_17 --;
    #line 2079 
    goto emg_tnoirq_17;
  }
  else 
       #line 2081 
       __VERIFIER_assume(0);
  #line 2086 
  return (void *)0;
}

#line 2091  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/emg/0/environment_model.c"
void *emg_timer_timer_scenario_6(void *arg0)
{
  #line 2094 
  struct timer_list *emg_18_container;
  #line 2095 
  unsigned long emg_18_emg_param_0_0;
  #line 2097 
  struct emg_struct_timer_scenario_6_18 *data = (struct emg_struct_timer_scenario_6_18 *)arg0;
  #line 2102 
  if (data != (struct emg_struct_timer_scenario_6_18 *)0) {
    #line 2103 
    emg_18_container = data->arg0;
    #line 2104 
    ldv_free((void *)data);
  }
  #line 2110 
  ldv_switch_to_interrupt_context();
  #line 2114 
  if (emg_18_container->function != (void (*)(struct timer_list *))0) 
    #line 2115 
    (*(emg_18_container->function))((struct timer_list *)emg_18_emg_param_0_0);
  #line 2121 
  ldv_switch_to_process_context();
  #line 2128 
  return (void *)0;
}

#line 2133  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/emg/0/environment_model.c"
int emg___pci_register_driver(struct pci_driver *arg0, struct module *arg1, char *arg2)
{
  #line 2136 
  struct pci_driver *emg_2_pci_driver;
  #line 2138 
  emg_2_pci_driver = emg_alias_forcedeth_pci_driver;
  #line 2139 
  if (ldv_undef_int() != 0) {
    #line 2141 
    emg_2_pci_driver = arg0;
    #line 2145 
    emg_dispatch_register_2(emg_2_pci_driver);
    #line 2149 
    return 0;
  }
  else {
    #line 2153 
    return ldv_undef_int_negative();
  }
}

#line 2161  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/emg/0/environment_model.c"
struct net_device *emg_alloc_etherdev_mqs(int arg0, unsigned int arg1, unsigned int arg2)
{
  #line 2164 
  struct net_device *emg_3_netdev;
  #line 2166 
  if (ldv_undef_int() != 0) {
    #line 2168 
    emg_3_netdev = (struct net_device *)ldv_xmalloc(3328UL);
    #line 2172 
    return emg_3_netdev;
  }
  else 
       #line 2176 
       return (struct net_device *)0;
}

#line 2184  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/emg/0/environment_model.c"
int emg_del_timer_sync(struct timer_list *arg0)
{
  #line 2187 
  struct timer_list *emg_4_timer_list;
  #line 2190 
  emg_4_timer_list = arg0;
  #line 2194 
  emg_dispatch_instance_deregister_4(emg_4_timer_list);
  #line 2195 
  ;
  #line 2195 
  return 0;
}

#line 2201  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/emg/0/environment_model.c"
void *emg_free_irq(unsigned int arg0, void *arg1)
{
  #line 2204 
  int emg_5_line;
  #line 2207 
  emg_5_line = (int)arg0;
  #line 2211 
  emg_dispatch_irq_deregister_5(emg_5_line);
  #line 2212 
  ;
  #line 2212 
  return (void *)0;
}

#line 2218  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/emg/0/environment_model.c"
void emg_free_netdev(struct net_device *arg0)
{
  #line 2221 
  struct net_device *emg_6_netdev;
  #line 2224 
  emg_6_netdev = arg0;
  #line 2225 
  ldv_free((void *)emg_6_netdev);
  #line 2228 
  return;
}

#line 2233  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/emg/0/environment_model.c"
int emg_mod_timer(struct timer_list *arg0, unsigned long arg1)
{
  #line 2236 
  struct timer_list *emg_7_timer_list;
  #line 2238 
  if (ldv_undef_int() != 0) {
    #line 2240 
    emg_7_timer_list = arg0;
    #line 2244 
    emg_dispatch_instance_register_7(emg_7_timer_list);
    #line 2248 
    return 1;
  }
  else 
       #line 2252 
       return 0;
}

#line 2260  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/emg/0/environment_model.c"
void emg_pci_unregister_driver(struct pci_driver *arg0)
{
  #line 2263 
  struct pci_driver *emg_8_pci_driver;
  #line 2265 
  emg_8_pci_driver = emg_alias_forcedeth_pci_driver;
  #line 2267 
  emg_8_pci_driver = arg0;
  #line 2271 
  emg_dispatch_deregister_8(emg_8_pci_driver);
  #line 2274 
  return;
}

#line 2279  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/emg/0/environment_model.c"
int emg_register_netdev(struct net_device *arg0)
{
  #line 2282 
  struct net_device *emg_9_netdev;
  #line 2283 
  int emg_9_ret;
  #line 2286 
  emg_9_ret = ldv_undef_int();
  #line 2287 
  emg_9_ret = ldv_undef_int();
  #line 2288 
  if (ldv_undef_int() != 0) {
    #line 2290 
    emg_9_netdev = arg0;
    #line 2294 
    emg_9_ret = emg_wrapper_nv_open(emg_9_netdev);
    #line 2297 
    if (ldv_undef_int() != 0) {
      #line 2299 
      __VERIFIER_assume(emg_9_ret == 0);
      #line 2303 
      emg_dispatch_register_9(emg_9_netdev);
      #line 2307 
      return 0;
    }
    else {
      #line 2311 
      __VERIFIER_assume(emg_9_ret != 0);
      #line 2312 
      ldv_failed_register_netdev();
      #line 2313 
      return ldv_undef_int_negative();
    }
  }
  else {
    #line 2318 
    ldv_failed_register_netdev();
    #line 2319 
    return ldv_undef_int_negative();
  }
}

#line 2327  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/emg/0/environment_model.c"
int emg_request_irq(unsigned int arg0, enum irqreturn (*arg1)(int , void *), unsigned long arg2, char *arg3, void *arg4)
{
  #line 2330 
  enum irqreturn (*emg_10_callback)(int , void *);
  #line 2331 
  void *emg_10_data;
  #line 2332 
  int emg_10_line;
  #line 2333 
  enum irqreturn (*emg_10_thread)(int , void *);
  #line 2335 
  emg_10_callback = & emg_wrapper_nv_nic_irq_other;
  #line 2336 
  if (ldv_undef_int() != 0) {
    #line 2338 
    emg_10_line = (int)arg0;
    #line 2339 
    emg_10_callback = arg1;
    #line 2340 
    emg_10_thread = (enum irqreturn (*)(int , void *))0;
    #line 2341 
    emg_10_data = arg4;
    #line 2345 
    emg_dispatch_irq_register_10(emg_10_line,emg_10_callback,emg_10_thread,emg_10_data);
    #line 2349 
    return 0;
  }
  else {
    #line 2353 
    return ldv_undef_int_negative();
  }
}

#line 2361  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/emg/0/environment_model.c"
void emg_unregister_netdev(struct net_device *arg0)
{
  #line 2364 
  struct net_device *emg_11_netdev;
  #line 2367 
  emg_11_netdev = arg0;
  #line 2371 
  emg_wrapper_nv_close(emg_11_netdev);
  #line 2375 
  emg_dispatch_deregister_11(emg_11_netdev);
  #line 2378 
  return;
}

#line 2383  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/emg/0/environment_model.c"
void *emg_entry_point_insmod(void *arg0)
{
  #line 2386 
  int emg_1_ret;
  #line 2389 
  emg_1_ret = emg_forcedeth_pci_driver_init();
  #line 2390 
  emg_1_ret = ldv_post_init(emg_1_ret);
  #line 2393 
  if (ldv_undef_int() != 0) {
    #line 2395 
    __VERIFIER_assume(emg_1_ret == 0);
    #line 2399 
    emg_forcedeth_pci_driver_exit();
  }
  else 
       #line 2403 
       __VERIFIER_assume(emg_1_ret != 0);
  #line 2407 
  return (void *)0;
}

#line 2412  "/mnt/klever/klever_deploy/klever-work/native-scheduler/scheduler/jobs/6c8e294c-3e5c-4a94-b0f9-6aa4d6dc1c3b/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/concurrency safety/emg/0/environment_model.c"
int main(void)
{
  #line 2414 
  ldv_initialize();
  #line 2416 
  emg_entry_point_insmod((void *)0);
  #line 2418 
  return 0;
}

